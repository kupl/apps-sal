["def get_val(x, k, y, left_val, right_val, arr):\n    x, y = y, x\n    if not arr:\n        return 0\n    if len(arr) < k:\n        if max(arr) > max(left_val, right_val):\n            return -1\n        return len(arr) * x\n    if y < x * k:\n        n = len(arr)\n        res = 0\n        while n >= k:\n            n -= k\n            res += y\n        res += n * x\n        return res\n    else:\n        if max(arr) < max(left_val, right_val):\n            return len(arr) * x\n        else:\n            return ((len(arr) - k) * x) + y\n\n\ndef solve(x, k, y, a, b):\n    def check(a, b):\n        j = 0\n        i = 0\n        while i < len(a) and j < len(b):\n            if a[i] != b[j]:\n                i += 1\n            else:\n                i += 1\n                j += 1\n        return j == len(b)\n\n    if not check(a, b):\n        return -1\n\n    j = 0\n    left_val = -1\n    arr = []\n    res = 0\n    for num in a:\n        if j == len(b) or num != b[j]:\n            arr.append(num)\n        else:\n            val = get_val(x, k, y, left_val, num, arr)\n            if val == -1:\n                return -1\n            res += val\n            arr = []\n            left_val = num\n            j += 1\n    if arr:\n        val = get_val(x, k, y, left_val, -1, arr)\n        if val == -1:\n            return -1\n        res += val\n    return res\n\n\nn, m = list(map(int, input().split()))\nx, k, y = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(solve(x, k, y, a, b))\n", "__MULTITEST = False\n\n## solve\ndef isSubseq(a, b):\n    ptr = 0\n    lenB = len(b)\n    for x in a:\n        if b[ptr] == x:\n            ptr += 1\n            if ptr == lenB:\n                return True\n    return False\n\ndef solve():\n    n, m = map(int, input().split())\n    x, k, y = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    ## check\n    if not isSubseq(a, b):\n        print(-1)\n    else:\n        a.insert(0, -1); a.append(-2);\n        b.insert(0, -1); b.append(-2);\n\n        lenA = len(a)\n        lenB = len(b)\n\n        #print(a, b)\n\n        ans = 0\n\n        pa1 = 0; pa2 = 1;\n        pb = 0;\n        while pb + 1 < lenB:\n            ## find surrounded seg in a that has border is b[pb] and b[pb+1]\n            maxOfSeg = -3\n            \n            #print(pb, pa1, pa2)\n\n            while a[pa1] != b[pb]:\n                pa1 += 1\n            pa2 = pa1 + 1\n            while a[pa2] != b[pb+1]:\n                maxOfSeg = max(maxOfSeg, a[pa2])\n                pa2 += 1\n\n            ## solve that seg\n            segLen = pa2 - pa1 - 1\n            if segLen >= k:\n                if x > y * k:\n                    if a[pa1] < maxOfSeg and a[pa2] < maxOfSeg:\n                        ans += (x + (segLen - k) * y)\n                    else:\n                        ans += (segLen * y)\n                else:\n                    ans += (segLen // k) * x + (segLen % k) * y\n            else:\n                if a[pa1] < maxOfSeg and a[pa2] < maxOfSeg:\n                    print(-1)\n                    return\n                else:\n                    ans += segLen * y\n            \n            ## after solve, increment pointers\n            pb += 1\n            pa1 = pa2\n        print(ans)\n\n\n## main\ndef __starting_point():\n    t = (int(input()) if __MULTITEST else 1)\n    for tt in range(t):\n        try:\n            solve();\n        except IndexError:\n            print(\"-1\")\n__starting_point()", "import sys\nn,m=map(int,input().split())\nx,k,y=map(int,input().split())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nif k*y<x:\n  ycheap=1\nelse:\n  ycheap=0\npointer=0\nans=0\nfor i in range(m):\n  deletenum=0\n  badnum=0\n  if pointer==n:\n    print(-1)\n    return\n  start=pointer\n  deletnum=0\n  while a[pointer]!=b[i]:\n    if (i==0 and b[0]<a[pointer]) or (i>0 and b[i]<a[pointer] and b[i-1]<a[pointer]):\n      badnum=1\n    pointer+=1\n    deletenum+=1\n    if pointer==n:\n      print(-1)\n      return\n  pointer+=1\n  if badnum==1 and deletenum<k:\n    print(-1)\n    return\n  if ycheap==1:\n    if badnum==1:\n      ans+=x\n      ans+=y*(deletenum-k)\n    else:\n      ans+=y*deletenum\n  else:\n    ans+=y*(deletenum%k)\n    ans+=x*(deletenum//k)\nbadnum=0\nfor i in range(pointer,n):\n  if a[i]>b[-1]:\n    badnum=1\ndeletenum=n-pointer\nif badnum==1 and deletenum<k:\n  print(-1)\n  return\nif ycheap==1:\n  if badnum==1:\n    ans+=x\n    ans+=y*(deletenum-k)\n  else:\n    ans+=y*deletenum\nelse:\n  ans+=y*(deletenum%k)\n  ans+=x*(deletenum//k)\nprint(ans)", "def sooolve(l,lst, r, x, k, y):\n    n = len(lst)\n    mx = max(l, r)\n    ans = 0\n    if n == 0:\n        return 0\n    if mx < max(lst):\n        if n < k:\n            return -1\n        n -= k\n        ans += x\n    if x > k * y:\n        ans += n * y\n    else:\n        ans += (n // k) * x + (n % k) * y\n    return ans\ndef solve():\n    n, m = map(int,input().split())\n    x, k, y = map(int,input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    lastpos = -1\n    pos = 0\n    ans = 0\n    for i in b:\n        while pos < n and a[pos] != i:\n            pos += 1\n        if pos == n:\n            print(-1)\n            return 0\n        if pos != lastpos + 1:\n            if lastpos == -1:\n                k1 = sooolve(0, a[0:pos], a[pos], x,k,y)\n                if k1 == -1:\n                    print(k1)\n                    return 0\n                ans += k1\n            else:\n                k1 = sooolve(a[lastpos], a[lastpos+1:pos], a[pos], x,k,y)\n                if k1 == -1:\n                    print(k1)\n                    return 0\n                ans += k1\n        lastpos = pos\n    k1 = sooolve(a[lastpos], a[lastpos+1:],0,x,k,y)\n    if k1 == -1:\n        print(k1)\n        return 0\n    ans += k1\n    print(ans)\nfor i in range(1):\n    solve()", "import sys\ninput = sys.stdin.readline\n\nn,m=list(map(int,input().split()))\nx,k,y=list(map(int,input().split()))\nB=list(map(int,input().split()))\nA=list(map(int,input().split()))\n\ninda=0\nfor b in B:\n    if b==A[inda]:\n        inda+=1\n    if inda==len(A):\n        break\n\nif inda!=len(A):\n    print(-1)\n    return\n\nB+=[0]\nA=set(A)|{0}\n\nONE=0\nTWO=0\nC=[]\nANS=0\n\nfor b in B:\n    if not(b in A):\n        C.append(b)\n\n    else:\n        ONE=TWO\n        TWO=b\n\n        MAX=max(ONE,TWO)\n\n        L=len(C)\n        ST=0\n        for c in C:\n            if c>MAX:\n                ST+=1\n\n        if ST>0 and L<k:\n            print(-1)\n            return\n\n        else:\n            if ST>0:                \n                COST=x           \n                rest=L-k\n                COST+=min((rest//k)*x+(rest%k)*y,rest*y)\n                ANS+=COST\n                C=[]\n            else:\n                COST=min((L//k)*x+(L%k)*y,L*y)\n                ANS+=COST\n                C=[]\n                \n\nprint(ANS)\n            \n                \n\n\n\n\n\n    \n\n    \n            \n\n    \n", "l=input().split()\nn=int(l[0])\nm=int(l[1])\nl=input().split()\nx=int(l[0])\nk=int(l[1])\ny=int(l[2])\na=input().split()\nai=[int(i) for i in a]\nb=input().split()\nbi=[int(i) for i in b]\ncurr=0\nwhich=[-1]\nfor i in range(n):\n    if(ai[i]==bi[curr]):\n        curr+=1\n        which.append(i)\n        if(curr==m):\n            break\nwhich.append(n)\nans=0\nif(curr!=m):\n    print(-1)\nelse:\n    poss=1\n    for i in range(1,m+2):\n        if(which[i-1]+1==which[i]):\n            continue\n        if(i==1):\n            z=ai[which[i]]\n        elif(i==m+1):\n            z=ai[which[i-1]]\n        else:\n            z=max(ai[which[i]],ai[which[i-1]])\n        maxa=max(ai[which[i-1]+1:which[i]])\n        num=which[i]-which[i-1]-1\n        if(maxa>z and num<k):\n            poss=0\n            break\n        if(y*k<=x):\n            if(maxa>z):\n                ans+=x\n                ans+=(num-k)*y\n            else:\n                ans+=num*y\n        else:\n            ans+=((num//k)*x)\n            ans+=((num%k)*y)\n    if(poss==0):\n        print(-1)\n    else:\n        print(ans)", "(n, m) = map(int, input().split())\n(x, k, y) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = []\nj = 0\nfor i in range(n):\n    if j >= m:\n        break\n    if a[i] == b[j]:\n        c.append(0)\n        j += 1\n    else:\n        c.append(1)\n\nif j != m:\n    print(-1)\n    return\n\nwhile len(c) != n:\n    c.append(1)\n\nback_l = -1\nback_r = -1\nans = 0\nwhile True:\n    l = back_l\n    r = back_r\n    for i in range(back_r+1, n):\n        if c[i] == 1:\n            l = i\n            r = i\n            break\n    M = 0\n    for i in range(r, n):\n        M = max(M, a[i])\n        if i + 1 >= n:\n            r = i\n        elif c[i+1] == 0:\n            r = i\n            break\n        else:\n            r = i\n\n    if l == back_l or r == back_r:\n        break\n\n    N = r - l + 1\n    left = -1\n    right = -1\n    if l > 0:\n        left = a[l-1]\n\n    if r < n-1:\n        right = a[r+1]\n\n\n    if N < k  and M > left and M > right:\n        print(-1)\n        return\n\n    if x/k <= y:\n        ans += (N//k) * x\n        N -= (N//k)*k\n        ans += y*N\n    else:\n\n        if M < left or M < right:\n            ans += y*N\n        else:\n            ans += x\n            N -= k\n            ans += y*N\n    back_l = l\n    back_r = r\nprint(ans)\n\n\n'''\n9 5\n12 1 11\n1 2 3 4 5 6 7 8 9\n1 3 5 7 9\n'''", "def subsequence(arr1,arr2,n,m):\n    i = 0\n    j = 0\n    common = []\n    while i < n and j < m:\n        if arr1[i] == arr2[j]:\n            common.append(i)\n            j += 1\n        i += 1\n\n    if j == m:\n        return common\n\n    return []\n\ndef find(arr,start,end,x,y,k):\n    stack = []\n    second_use_limit = 0\n    for i in range(start,end+1):\n        if not stack:\n            stack.append(arr[i])\n        else:\n            while stack and arr[i] > stack[-1]:\n                second_use_limit += 1\n                stack.pop()\n\n            if (not stack) or (arr[i] > stack[-1]):\n                stack.append(arr[i])\n            elif stack and arr[i] < stack[-1]:\n                second_use_limit += 1\n\n    while stack and start-1 >= 0 and arr[start-1] > stack[0]:\n        stack.pop(0)\n        second_use_limit += 1\n\n    while stack and end+1 < len(arr) and arr[end+1] > stack[-1]:\n        stack.pop()\n        second_use_limit += 1\n    \n    min_cost = float('inf')\n    total = end-start+1\n    #print(total,start,end)\n\n    #print('here',x,y,k)\n    i = 0\n    while i*k <= total:\n        rem = total-i*k\n        if rem <= second_use_limit:\n            #print(i*x+rem*y,i,rem)\n            min_cost = min(min_cost,i*x+rem*y)\n\n        i += 1\n\n    if min_cost == float('inf'):\n        return -1\n\n    return min_cost\n\ndef main():\n    n,m = list(map(int,input().split()))\n    x,k,y = list(map(int,input().split()))\n    arr1 = list(map(int,input().split()))\n    arr2 = list(map(int,input().split()))\n    common = subsequence(arr1,arr2,n,m)\n    if not common:\n        print(-1)\n        return\n\n    cost = 0\n    for i in range(len(common)):\n        if i == 0:\n            if common[i] > 0:\n                start = 0\n                end = common[i]-1\n                if end >= start:\n                    curr_cost = find(arr1,start,end,x,y,k)\n                    if curr_cost == -1:\n                        cost = -1\n                        break\n\n                    cost += curr_cost\n            \n        start = common[i]+1\n        if i+1 < len(common):\n            end = common[i+1]-1\n        else:\n            end = n-1\n\n        if end >= start:\n            curr_cost = find(arr1,start,end,x,y,k)\n            if curr_cost == -1:\n                cost = -1\n                break\n\n            cost += curr_cost\n\n    print(cost)\n\nmain()\n", "n, m = list(map(int, input().split()))\nx, k, y= list(map(int, input().split()))\nstart_ls = list(map(int, input().split()))\nend_ls = list(map(int, input().split()))\n\nlen_start_ls = len(start_ls)\nlen_end_ls = len(end_ls)\nmark = []\n\nend_p = 0\ncurr = None\nfor item in start_ls:\n    if end_p < (len_end_ls):\n        if item == end_ls[end_p]:\n            end_p += 1\n            mark.append(0)\n            curr = item\n        else:\n            if curr is not None:\n                if item > curr:\n                    mark.append(1)\n                else:\n                    mark.append(2)\n            else:\n                mark.append(1)\n    else: \n        if curr is not None:\n            if item > curr:\n                mark.append(1)\n            else:\n                mark.append(2)\n        else:\n            mark.append(1)\n        \nif end_p < (len_end_ls):\n    print(-1)\nelse:\n    end_p = 0\n    curr = None\n    end_ls = end_ls[::-1]\n    mark = mark[::-1]\n    for idx, item in enumerate(start_ls[::-1]):\n        if end_p < (len_end_ls):\n            if item == end_ls[end_p]:\n                end_p += 1\n                curr = item\n            else:\n                if curr is not None:\n                    if item < curr:\n                        mark[idx] = 2\n        else: \n            if curr is not None:\n                if item < curr:\n                    mark[idx] = 2\n    mark = mark[::-1]\n    \n    if y*k >= x:\n        smite = True\n    else:\n        smite = False\n\n    segments = []\n    segment = [0,True]\n    for idx, item in enumerate(mark):\n        if item != 0:\n            segment[0] += 1\n            if item == 1:\n                segment[1] = False\n        elif item == 0:\n            if segment[0] != 0:\n                segments.append(segment)\n            segment = [0,True]\n\n    if segment[0] != 0:\n        segments.append(segment)\n    \n    poss = True\n    res = 0\n    for segment in segments:\n        if segment[0] < k and not segment[1]:\n            poss = False\n            break\n        elif segment[0] < k and segment[1]:\n            res += segment[0] * y\n        else:\n            if smite:\n                res += (segment[0]//k) * x\n                res += (segment[0]%k) * y\n            if not smite:\n                if segment[1]:\n                    res += segment[0] * y\n                else:\n                    res += x\n                    res += (segment[0]-k) * y\n    if poss:\n        print(res)\n    else:\n        print(-1)\n", "n,m=map(int,input().split())\nx,k,y=map(int,input().split())\na=[-1]+list(map(int,input().split()))+[-2]\nb=[-1]+list(map(int,input().split()))+[-2]\nif m>n:print(-1)\nelif m==n:print(-int(a!=b))\nelse:\n    g={}\n    for i in range(n+2):g[a[i]]=i\n    binds=[]\n    for i in b:\n        if(i not in g)or(binds and binds[-1]>g[i]):print(-1);return()\n        binds.append(g[i])\n    #print(binds)\n    dels=[]\n    for i in range(len(binds)-1):\n        dels.append([])\n        for j in range(binds[i],binds[i+1]+1):\n            dels[-1].append(a[j])\n    ans=0\n    #print(dels)\n    for d in dels:\n        todel=len(d)-2\n        if todel:\n            mx=max(d)\n            allys=max(d[0],d[-1])==mx\n            if y*k<x:\n                if allys:ans+=todel*y\n                else:\n                    if todel<k:print(-1);return()\n                    ans+=y*(todel-k)+x\n            else:\n                if todel<k:\n                    if allys:ans+=todel*y\n                    else:print(-1);return()\n                else:\n                    ans+=y*(todel%k)+x*(todel//k)\n    # print(dels)\n    print(ans)\n'''\n3 1\n2 1 1\n1 2 3\n2\n'''", "n, m = map(int, input().split())\nx, k, y = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [0] * m\nj = 0\nfor i in range(n):\n    if j == m:\n        break\n    if a[i] == b[j]:\n        c[j] = i + 1\n        j += 1\nif not j == m:\n    print(-1)\n    return\na.insert(0, 0)\na.append(0)\nc.insert(0, 0)\nc.append(n + 1)\nans = 0\nfor i in range(m + 1):\n    if c[i + 1] - c[i] == 1:\n        continue\n    l = c[i + 1] - c[i] - 1\n    s = 0\n    t = max(a[c[i]], a[c[i + 1]])\n    for j in range(c[i] + 1, c[i + 1]):\n        if a[j] > t:\n            s += 1\n    if s == 0:\n        ans += min(l * y, (l // k) * x + (l % k) * y)\n    else:\n        if k > l:\n            print(-1)\n            return\n        ans += min((l - k) * y + x, (l // k) * x + (l % k) * y)\nprint(ans)", "from math import ceil\ndef func(values, left, right, x, k, y, left_val, right_val):\n    copy = values[left+1:right]\n    if len(copy) == 0:\n        return 0\n    copy.sort()\n    if len(copy) < k:\n        if copy[-1] > max(left_val, right_val):\n            return -1\n        else:\n            return len(copy) * y\n    elif x <= k * y:\n        return len(copy) // k * x + (len(copy) % k) * y\n    else:\n        if copy[-1] > max(left_val, right_val):\n            return x + y * (len(copy) - k)\n        else:\n            return y * len(copy)\n\n\ndef main():\n    n, m = map(int, input().split())\n    x, k, y = map(int, input().split())\n    s1 = list(map(int, input().split()))\n    s2 = list(map(int, input().split()))\n    if m > n:\n        print(-1)\n    else:\n        j = 0\n        l = -1\n        ans = 0\n        for i in range(n):\n            if j == m:\n                break\n            if s1[i] == s2[j]:\n                j += 1\n                if l == -1:\n                    left_val = -1\n                else:\n                    left_val = s1[l]\n                a = func(s1, l, i, x, k, y, left_val, s1[i])\n                if a == -1:\n                    ans = -1\n                    break\n                ans += a\n                l = i\n\n        if j < m or ans == -1:\n            print(-1)\n        else:\n            a = func(s1, l, n, x, k, y, s1[l], -1)\n            if a == -1:\n                print(-1)\n            else:\n                ans += a\n                print(ans)\nmain()", "from collections import defaultdict as dd\nimport sys\ninput=sys.stdin.readline\nn,m=list(map(int,input().split()))\nx,k,y=list(map(int,input().split()))\nla=list(map(int,input().split()))\nlb=list(map(int,input().split()))\nlol=0\nif(y*k<x):\n    #print(y*k,x)\n    lol=1\nj=0\nind=[]\nfor i in range(n):\n    if(j==m):\n        break\n    if(la[i]==lb[j]):\n        ind.append(i)\n        j+=1\nif(j!=m):\n    print(-1)\nelse:\n    #print(ind)\n    l=la\n    ans=0\n    curr=ind[0]\n    flag=0\n    le=ind[0]\n    mx=0\n    for j in range(0,ind[0]):\n        mx=max(mx,l[j])\n    if(lol==1):\n        if(mx<l[ind[0]]):\n            ans+=le*y\n        else:\n            if(le and le<k):\n                flag=1\n            elif(le):\n                ans+=(le-k)*y+x\n    else:\n        if(le and le<k):\n            if(mx<l[ind[0]]):\n                ans+=le*y\n            else:\n                flag=1\n        else:\n            rem=le%k\n            ans+=rem*y\n            ans+=(le//k)*x\n    #print(le,ans)\n    #print(lol)\n    for i in range(1,len(ind)):\n        le=ind[i]-curr-1\n        mx=0\n        for j in range(curr+1,ind[i]):\n            mx=max(mx,l[j])\n        if(lol==1):\n            if(mx<l[curr] or mx<l[ind[i]]):\n                #print(\"lol\")\n                ans+=le*y\n                #print(\"lol\",ans,le,y)\n            else:\n                #print(\"lol\")\n                if(le and le<k):\n                    flag=1\n                    break\n                elif(le):\n                    ans+=(le-k)*y+x\n        else:\n            #print(\"lol\")\n            if(le and le<k):\n                if(mx<l[ind[i]] or mx<l[ind[i]]):\n                    #print(mx)\n                    ans+=le*y\n                else:\n                    flag=1\n                    break\n            else:\n                rem=le%k\n                ans+=rem*y\n                ans+=(le//k)*x\n        curr=ind[i]\n        #print(le,ans)\n    le=n-1-ind[-1]\n    #print(le)\n    mx=0\n    for j in range(ind[-1]+1,n):\n        mx=max(mx,l[j])\n    if(lol==1):\n        if(mx<l[ind[-1]]):\n            ans+=le*y\n        else:\n            if(le and le<k):\n                flag=1\n            elif(le):\n                ans+=(le-k)*y+x\n    else:\n        #print(\"lol\")\n        if(le and le<k):\n            if(mx<l[ind[-1]]):\n                ans+=le*y\n            else:\n                flag=1\n        else:\n            rem=le%k\n            ans+=rem*y\n            ans+=(le//k)*x\n\n    if(flag):\n        print(-1)\n    else:\n        print(ans)\n        \n                \n", "def kill(left, a, right, x, k, y):\n\n    g = len(a)\n    if g < k:\n        if max(a) > max(left, right):\n            print(-1)\n            return\n\n    if x < y * k:\n        return (g // k) * x + (g % k) * y\n    else:\n        if max(a) > max(left, right):\n            return x + (g-k)*y\n        else:\n            return g * y\n\n\ndef main():\n    (n, m,) = list(map(int, input().split(' ')))\n    (x, k, y) = list(map(int, input().split(' ')))\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    i = 0\n    j = 0\n    g = 0\n    M = 0\n\n    while i < n and j < m:\n        if a[i] == b[j]:\n            if g > 0:\n                M += kill(b[j - 1] if j > 0 else 0, a[i - g:i], b[j], x, k, y)\n                g = 0\n            i += 1\n            j += 1\n        else:\n            i += 1\n            g += 1\n    if i == n and j < m:\n        print(-1)\n        return\n    g += n - i\n    if g > 0:\n        M += kill(b[j - 1] if j > 0 else 0, a[n - g:n], b[j] if j < m else 0, x, k, y)\n\n    print(M)\n\n\n# for _ in range(int(input())):\nmain()\n", "#!/usr/bin/env python3\nfrom sys import stdin, stdout, exit\n\nstdin.readline()\nx, k, y = [int(i) for i in stdin.readline().split(' ') if i]\na = [int(i) for i in stdin.readline().split(' ') if i]\nb = [int(i) for i in stdin.readline().split(' ') if i]\n\na[:0] = [0]\na.append(0)\nb.append(0)\n\nif x >= y * k:  # BS cheaper or same\n    def calc(a):\n        n = len(a) - 2\n        if max(a) == max(a[0], a[-1]):\n            return n * y\n        if n < k:\n            stdout.write('-1\\n')\n            return\n        return (n - k) * y + x\nelse:  # FB cheaper\n    def calc(a):\n        n = len(a) - 2\n        if n < k:\n            if max(a) == max(a[0], a[-1]):\n                return n * y\n            stdout.write('-1\\n')\n            return\n        return n // k * x + n % k * y\n\nn = 0\ni = 0\nfor j in b:\n    t = i + 1\n    while t < len(a):\n        if a[t] == j:\n            break\n        t += 1\n    else:\n        stdout.write('-1\\n')\n        return\n    if t > i + 1:\n        n += calc(a[i: t + 1])\n    i = t\nstdout.write(f'{n}\\n')\n"]