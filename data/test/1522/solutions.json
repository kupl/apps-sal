["n = int(input())\nr = {}\nans = 0\nfor i in input():\n    if i == i.lower():\n        if i in r:\n            r[i] += 1\n        else:\n            r[i] = 1\n    else:\n        i = i.lower()\n        if i in r and r[i] > 0:\n            r[i] -= 1\n        else:\n            ans += 1\nprint(ans)", "n = int(input())\ns = input()\n\nd = {}\nres = 0\nfor x in s:\n    if x.islower():\n        d[x] = d.get(x, 0) + 1\n    else:\n        if d.get(x.lower(), 0) > 0:\n            d[x.lower()] -= 1\n        else:\n            res += 1\n\nprint(res)", "n=int(input())\na=[0 for i in range(26)]\ns=input().strip()\nans=0\nfor i in range(n-1):\n    a[ord(s[2*i])-97]+=1\n    if a[ord(s[2*i+1])-65]>0:\n        a[ord(s[2*i+1])-65]-=1\n    else:\n        ans+=1\nprint(ans)", "n = int(input())\ns = input()\nans = 0\nd = {}\nfor i in range(0, 2 * n - 2, 2):\n    key = s[i]\n    dor = s[i + 1]\n    if key not in d:\n        d[key] = 1\n    else:\n        d[key] += 1\n    if (dor.lower() not in d) or (d[dor.lower()] == 0):\n        ans += 1\n    else:\n        d[dor.lower()] -= 1\nprint(ans)", "n = int(input())\ns = input()\nk = {}\nans = 0\nfor i in range(len(s)):\n    if i % 2 == 0:\n        if s[i] not in k:\n            k[s[i]] = 1\n        else:\n            k[s[i]] += 1\n    else:\n        if s[i].lower() not in k or (s[i].lower() in k and k[s[i].lower()] <= 0):\n            ans += 1\n        else:\n            k[s[i].lower()] -= 1\nprint(ans)\n", "t=0\nl='abcdefghijklmnopqrstuvwxyz'\nkey={}\nfor i in l:\n    key[i] = 0\na=int(input())\nb=input()\nfor i in b:\n    if i in l:\n        key[i] +=1\n    else:\n        if not key[i.lower()]:\n            t+=1\n        else:\n            key[i.lower()]-=1\nprint(t)\n", "n = int(input())\ns = input()\ncnt = 0\nkeys = {chr(i):0 for i in range(ord('a'),ord('z')+1)}\nfor i in range(len(s)//2):\n\tkeys[s[i*2]] += 1\n\tif keys[s[i*2+1].lower()] == 0:\n\t\tcnt += 1\n\telse:\n\t\tkeys[s[i*2+1].lower()]-=1\nprint(cnt)\n", "from collections import defaultdict\n\nd = defaultdict(int)\n\ndef __starting_point():\n    input()\n\n    sum_v = 0\n\n    for i, x in enumerate(input()):\n        if i % 2 == 0:\n            d[x] += 1\n        else:\n            if d[x.lower()] == 0:\n                sum_v += 1\n            else:\n                d[x.lower()] -= 1\n\n    print(sum_v)\n__starting_point()", "ans = 0\nn = int(input())\nkeys = [0 for i in range(30)]\ns = input()\nfor i in range(n-1):\n    keys[ord(s[2*i].capitalize()) - ord('A')] += 1\n    if keys[ord(s[2*i + 1]) - ord('A')] == 0:\n        ans += 1\n    else:\n        keys[ord(s[2*i + 1]) - ord('A')] -= 1\nprint(ans)\n\n", "import sys\nimport collections\n\ndef main():\n\tn = int(sys.stdin.readline())\n\ts = sys.stdin.readline()\n\tmore_keys = 0\n\tkeys = collections.Counter()\n\tfor i, x in enumerate(s):\n\t\tif i % 2 == 0:\n\t\t\tkeys[x] += 1\n\t\telse:\n\t\t\tk = x.lower()\n\t\t\tif keys[k] > 0:\n\t\t\t\tkeys[k] -= 1\n\t\t\telse:\n\t\t\t\tmore_keys += 1\n\tprint (more_keys)\n\ndef __starting_point():\n\tmain()\n__starting_point()", "n = int(input())\n\ndata = input()\n\navailable_keys = {}\nneeded_keys = 0\n\nk = 0\nfor _ in range(n-1):\n    key = data[k]\n    lock = data[k+1].lower()\n\n    k += 2\n\n    available_keys[key] = available_keys.get(key, 0) + 1\n\n    if available_keys.get(lock, 0):\n        available_keys[lock] -= 1\n    else:\n        needed_keys += 1\n\nprint(needed_keys)", "n = int(input())\ns = input()\ner = {}\ners = set()\ncnt = 0\nfor i in range(len(s)):\n    if i % 2 == 0:\n        if ord(s[i]) in ers:\n            er[ord(s[i])] += 1\n        else:\n            ers.add(ord(s[i]))\n            er[ord(s[i])] = 1\n    else:\n        if ord(s[i]) + 32 in ers and er[ord(s[i]) + 32] >= 1:\n            er[ord(s[i]) + 32] -=  1\n        else:\n            cnt += 1\nprint(cnt)\n        \n        \n", "def main():\n    n = int(input())\n    s = input()\n    \n    result = 0\n    d = [0 for i in range(256)]\n    for i in range(n - 1):\n        key = s[i * 2]\n        door = ord(s[i * 2 + 1])\n        if key.islower(): key = key.upper()\n        else: key = key.lower()\n        d[ord(key)] += 1\n        if not d[door]:\n            result += 1\n        else:\n            d[door] -= 1\n    \n    print(result)\n    \n    \nmain()\n", "d = dict()\nn = int(input())\ns = input().rstrip()\nsum1 = 0\ndef f(c):\n    return chr(ord(c) - ord('A') + ord('a'))\nfor i in range(len(s)):\n    c = s[i]\n    if (i + 1) % 2 == 1:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    else:\n        if f(c) in d:\n           \n            if d[f(c)] > 0:\n                d[f(c)] -= 1\n            else:\n                sum1 += 1\n        else:\n            sum1 += 1\nprint(sum1)\n", "n = int(input())\nline = str(input())\n\ndoors = []\nkeys  = []\nhavekeys1  = [False] * 33\nhavekeys2  = [0] * 33\n\nfor i in range(len(line)):\n    if i % 2 == 0:\n        keys.append(line[i])\n    else:\n        doors.append(line[i])\n\nres = 0\nfor i in range(n - 1):\n    havekeys1[ord(keys[i]) - 97] = True\n    havekeys2[ord(keys[i]) - 97] += 1\n    if havekeys1[ord(doors[i]) - 65]:\n        havekeys2[ord(doors[i]) - 65] -= 1\n        if havekeys2[ord(doors[i]) - 65] == 0:\n            havekeys1[ord(doors[i]) - 65] = False\n    else:\n        res += 1\n\nprint(res)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "n = int(input())\nb = input()\na = set()\nd = dict()\ncount = 0\nfor i in range(2 * n - 2):\n    if i % 2 == 0:\n        if b[i] not in a:\n            a.add(b[i])\n            d[b[i]] = 1\n        else:\n            d[b[i]] += 1\n    else:\n        if b[i].lower() in a:\n            d[b[i].lower()] -= 1\n            if d[b[i].lower()] == 0:\n                a.remove(b[i].lower())\n        else:\n            count += 1    \nprint(count)", "#!/usr/bin/env python\n# -.- coding: utf-8 -.-\n\n\ndef main():\n    n_rooms = int(input())\n    line = input()\n    keys = line[0::2]\n    doors = line[1::2]\n    buykeys = 0\n    keyinbag = {}\n    for room_index in range(n_rooms - 1):\n        if keys[room_index] in keyinbag:\n            keyinbag[keys[room_index]] += 1\n        else:\n            keyinbag[keys[room_index]] = 1\n        if not doors[room_index].lower() in keyinbag or\\\n           keyinbag[doors[room_index].lower()] < 1:\n            buykeys += 1\n        else:\n            keyinbag[doors[room_index].lower()] -= 1\n    print(buykeys)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/c/Python34/python\n# coding: utf-8\n\n\ndef main():\n    N = int(input())\n    S = input()\n    count = 0\n    roomNum = 1\n    alpha = [0] * 26\n    for (i, s) in enumerate(S):\n        if roomNum == N:\n            break\n        if i % 2 == 0:\n            alpha[ord(s)-ord('a')] += 1\n        else:\n            if alpha[ord(s.lower())-ord('a')] == 0:\n                count += 1\n            else:\n                alpha[ord(s.lower())-ord('a')] -= 1\n            roomNum += 1\n    print(count)\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nstring = input()\nans = 0\ncurrent = [0 for i in range (26)]\nfor i in range(0, len(string)):\n    if i % 2 == 0:\n        current[ord(string[i]) - 97] += 1\n    else:\n        if current[ord(string[i]) + 32 - 97] != 0:\n            current[ord(string[i]) + 32 - 97] -= 1\n        else:\n            ans += 1\nprint (ans)", "n = int(input())-1\ns = input()\n\nans = 0\nkeys = {}\nfor i in range(n):\n    nkey = s[2*i]\n    if nkey in keys:\n        keys[nkey] += 1\n    else:\n        keys[nkey] = 1\n    ndor = s[2*i+1].lower()\n\n    if ndor in keys:\n        keys[ndor] -=1\n        if keys[ndor] == 0:\n            del keys[ndor]\n    else:\n        ans += 1\nprint(ans)\n", "n = int(input())\ns = input().upper()\na = [0] * 26\nu = 0\nfor i in range(len(s)):\n    if i % 2 == 0:\n        a[ord(s[i]) - ord('A')] += 1\n    else:\n        if a[ord(s[i]) - ord('A')] > 0:\n            a[ord(s[i]) - ord('A')] -= 1\n        else:\n            u += 1\nprint(u)\n\n", "import sys\nn=int(sys.stdin.readline())\ns=list(sys.stdin.readline())\ns=s[:-1]\nr=0\nk=[0]*26\no=[0]*26\nj=0\n\nfor i in s:\n  if j%2==0:\n    k[ord(i)-97]=k[ord(i)-97]+1\n  else:\n    if k[ord(i)-65]>0:  k[ord(i)-65]=k[ord(i)-65]-1\n    else:  r=r+1\n  j=j+1\nprint(r)", "size = int(input()) - 1\nstring = input()\nkeys = [string[2 * i] for i in range(size)]\nrooms = [string[2 * i + 1] for i in range(size)]\n\nmust_buy = 0\nkey_count = [0 for i in range(26)]\nfor i in range(size):\n    key_count[ord(keys[i]) - ord('a')] += 1\n    key_count[ord(rooms[i]) - ord('A')] -= 1\n    if key_count[ord(rooms[i]) - ord('A')] < 0:\n        key_count[ord(rooms[i]) - ord('A')] += 1\n        must_buy += 1\n\nprint(must_buy)\n", "from collections import Counter\n\nn = int(input())\ns = input()\nkeys = Counter()\nneed = 0\nfor i in range(0, n*2-2, 2):\n    keys[s[i]] += 1\n    neededkey = s[i+1].lower()\n    if keys[neededkey]:\n        keys[neededkey] -= 1\n    else:\n        need += 1\nprint(need)\n"]