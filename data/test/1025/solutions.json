["from fractions import gcd\nfrom collections import defaultdict\n\ndef read_data():\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    return n, points\n\ndef solve(n, points):\n    if n <= 2:\n        return 0\n    zeros = 0\n    for i, (x, y) in enumerate(points[:-2]):\n        zeros += count_zeros(i, x, y, points)\n    return n * (n-1) * (n-2) // 6 - zeros\n\ndef count_zeros(i, x, y, points):\n    slopes = defaultdict(int)\n    for xj, yj in points[i + 1:]:\n        dx = x - xj\n        dy = y - yj\n        d = gcd(dx, dy)\n        slope = (dx/d, dy/d)\n        slopes[slope] += 1\n    zeros = 0\n    for val in slopes.values():\n        if val >= 2:\n            zeros += val * (val - 1)\n    return zeros // 2\n\nn, points = read_data()\nprint(solve(n, points))", "from fractions import gcd\ntot = 0\n\nt = []\na = int(input())\nfor i in range(a):\n    x, y = list(map(int, input().split(' ')))\n    t.append([x,y])\n\n\nfor i in t:\n    slope = {}\n    zd = 0\n    oded = []\n    for j in t:\n        if j != i:\n            if j[0] == i[0]:\n                zd += 1\n            else:\n                f1 = (j[1]-i[1])\n                f2 = (j[0]-i[0])\n                gd = gcd(f1, f2)\n                if gd == 0:\n                    oded.append(987987987)\n                \n                else:\n                    f1 //= gd\n                    f2 //= gd\n                    kk = f1*10000+f2\n                    oded.append(kk)\n    oded.sort()\n    oded.append(-1000000)\n    asdf = 0\n    kk = [-1] + [ea for ea in range(len(oded)-1) if oded[ea] != oded[ea+1]]\n    kk2 = [kk[i+1] - kk[i] for i in range(len(kk)-1)]\n\n    for ii in kk2:\n        tot += (ii*(ii-1)//2)\n    tot+=(zd*(zd-1)//2)\n\ntot //= 3\nprint(int(a*(a-1)*(a-2)//6-tot))\n", "from fractions import *\nn,s=int(input()),0\np=[tuple(map(int, input().split())) for _ in range(n)]\ndef f(a,b): g=gcd(a,b);return a//g + 1024*1024*(b//g)\nfor i in range(n):\n    k,(x,y)=0,p[i]\n    l=sorted(f(x-X, y-Y) for X,Y in p[:i])\n    for j in range(1, i):\n        k=k+1 if l[j]==l[j-1] else 0\n        s+=k\nprint(n*(n-1)*(n-2)//6-s)\n", "from fractions import *\nn=int(input())\ns=n*(n-1)*(n-2)//6\np=[tuple(map(int,input().split())) for _ in range(n)]\ndef f(a,b):g=gcd(a,b);return a//g+((b//g)<<20)\nfor i in range(n):\n\tk,(x,y)=0,p[i]\n\tl=sorted(f(x-X,y-Y) for X,Y in p[:i])\n\tfor j in range(1, i):\n\t\tk=k+1 if l[j]==l[j-1] else 0\n\t\ts-=k\nprint(s)\n", "from fractions import *\nn=int(input())\ns=n*(n-1)*(n-2)//6\np=[list(map(int,input().split()))for _ in range(n)]\nf=lambda a,b:a//gcd(a,b)+(b//gcd(a,b)<<20)\nfor i in range(n):\n\tk,l=0,sorted(f(p[i][0]-X,p[i][1]-Y)for X,Y in p[:i])\n\tfor j in range(1,i):k=k+1 if l[j]==l[j-1]else 0;s-=k\nprint(s)\n", "from fractions import *\nn=int(input())\ns=n*(n-1)*(n-2)//6\np=[list(map(int,input().split()))for _ in range(n)]\nfor i in range(n):\n\tk,l=0,sorted(1e9 if p[i][1]==Y else (p[i][0]-X)/(p[i][1]-Y)for X,Y in p[:i])\n\tfor j in range(1,i):k=k+1 if l[j]==l[j-1]else 0;s-=k\nprint(s)\n", "n=int(input())\ns=n*(n-1)*(n-2)//6\np=[list(map(int,input().split()))for _ in range(n)]\nfor i in range(n):\n\tk,l=0,sorted(1e9 if p[i][1]==Y else (p[i][0]-X)/(p[i][1]-Y)for X,Y in p[:i])\n\tfor j in range(1,i):k=k+1 if l[j]==l[j-1]else 0;s-=k\nprint(s)\n", "def main():\n    import sys\n    from collections import defaultdict\n    from fractions import gcd\n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n = tokens.pop()\n    points = [(tokens.pop(), tokens.pop()) for i in range(n)]\n    \n    result = 0\n    for x0, y0 in points:\n        angles = defaultdict(int)\n        for x, y in points:\n            if x == x0 and y == y0:\n                continue\n            x -= x0\n            y -= y0\n            if x < 0 or x == 0 and y < 0:\n                x = -x\n                y = -y\n            g = abs(gcd(x, y))\n            x //= g\n            y //= g\n            angles[x * 1000000 + y] += 1\n        t = 0\n        for i in list(angles.keys()):\n            t += angles[i] * (n - 1 - angles[i])\n        result += t // 2\n    \n    print(result // 3)\n        \n        \n    \nmain()\n", "def main():\n    import sys\n    from collections import defaultdict\n    from fractions import gcd\n    \n    precalc_gcd = [[gcd(i, j) for j in range(201)] for i in range(201)]\n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n = tokens.pop()\n    points = [(tokens.pop(), tokens.pop()) for i in range(n)]\n    \n    result = 0\n    for x0, y0 in points:\n        angles = defaultdict(int)\n        for x, y in points:\n            if x == x0 and y == y0:\n                continue\n            x -= x0\n            y -= y0\n            if x < 0 or x == 0 and y < 0:\n                x = -x\n                y = -y\n            g = precalc_gcd[abs(x)][abs(y)]\n            x //= g\n            y //= g\n            angles[x * 1000 + y] += 1\n        t = 0\n        for i in list(angles.keys()):\n            t += angles[i] * (n - 1 - angles[i])\n        result += t // 2\n    \n    print(result // 3)\n        \n        \n    \nmain()\n", "def main():\n    import sys\n    from collections import defaultdict\n    from fractions import gcd\n    \n    precalc_gcd = [[gcd(i, j) for j in range(201)] for i in range(201)]\n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n = tokens.pop()\n    points = [(tokens.pop(), tokens.pop()) for i in range(n)]\n    \n    result = 0\n    for x0, y0 in points:\n        angles = defaultdict(int)\n        for x, y in points:\n            if x == x0 and y == y0:\n                continue\n            x -= x0\n            y -= y0\n            if x < 0 or x == 0 and y < 0:\n                x = -x\n                y = -y\n            g = precalc_gcd[abs(x)][abs(y)]\n            x //= g\n            y //= g\n            angles[x * 1000 + y] += 1\n        for i in list(angles.keys()):\n            result += angles[i] * (n - 1 - angles[i])\n    \n    print(result // 6)\n        \n        \n    \nmain()\n", "def main():\n    import sys\n    from collections import defaultdict\n    from fractions import gcd\n    \n    precalc_gcd = [[gcd(i, j) for j in range(201)] for i in range(201)]\n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n = tokens.pop()\n    points = [(tokens.pop(), tokens.pop()) for i in range(n)]\n    \n    result = 0\n    for i in range(n):\n        x0, y0 = points[i]\n        angles = defaultdict(int)\n        for j in range(i + 1, n):\n            x, y = points[j]\n            x -= x0\n            y -= y0\n            if x < 0 or x == 0 and y < 0:\n                x = -x\n                y = -y\n            g = precalc_gcd[abs(x)][abs(y)]\n            x //= g\n            y //= g\n            angles[x * 1000 + y] += 1\n        for j in list(angles.keys()):\n            result += angles[j] * (n - i - 1 - angles[j])\n    \n    print(result // 2)\n        \n        \n    \nmain()\n", "def main():\n    import sys\n    from collections import defaultdict\n    from fractions import gcd\n    \n    precalc_gcd = [[gcd(i, j) for j in range(201)] for i in range(201)]\n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n = tokens.pop()\n    points = [(tokens.pop(), tokens.pop()) for i in range(n)]\n    \n    result = 0\n    for i in range(n):\n        x0, y0 = points[i]\n        angles = defaultdict(int)\n        for j in range(i + 1, n):\n            x, y = points[j]\n            x -= x0\n            y -= y0\n            if x < 0 or x == 0 and y < 0:\n                x = -x\n                y = -y\n            g = precalc_gcd[abs(x)][abs(y)]\n            x //= g\n            y //= g\n            angles[x * 1000 + y] += 1\n        for j in list(angles.values()):\n            result += j * (n - i - 1 - j)\n    \n    print(result // 2)\n        \n        \n    \nmain()\n", "def main():\n    import sys\n    from collections import defaultdict\n    from fractions import gcd\n    \n    normalize = [[0] * 405 for i in range(405)]\n    for x in range(-200, 201):\n        for y in range(-200, 201):\n            if x == 0 and y == 0:\n                continue\n            nx, ny = x, y\n            g = abs(gcd(x, y))\n            nx //= g\n            ny //= g\n            if nx < 0 or nx == 0 and ny < 0:\n                nx = -nx\n                ny = -ny\n            normalize[x][y] = nx * 1000 + ny\n            \n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n = tokens.pop()\n    points = [(tokens.pop(), tokens.pop()) for i in range(n)]\n    \n    result = 0\n    for i in range(n):\n        x0, y0 = points[i]\n        angles = defaultdict(int)\n        for j in range(i + 1, n):\n            x, y = points[j]\n            angles[normalize[x - x0][y - y0]] += 1\n        for j in list(angles.values()):\n            result += j * (n - i - 1 - j)\n    \n    print(result // 2)\n        \n        \n    \nmain()\n", "def main():\n    import sys\n    from collections import defaultdict\n    from fractions import gcd\n    \n    normalize = [[0] * 405 for i in range(405)]\n    for x in range(-200, 201):\n        for y in range(-200, 201):\n            if x == 0 and y == 0:\n                continue\n            nx, ny = x, y\n            g = abs(gcd(x, y))\n            nx //= g\n            ny //= g\n            if nx < 0 or nx == 0 and ny < 0:\n                nx = -nx\n                ny = -ny\n            nx += 200\n            ny += 200\n            normalize[x][y] = nx * 401 + ny\n            \n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n = tokens.pop()\n    points = [(tokens.pop(), tokens.pop()) for i in range(n)]\n    \n    result = 0\n    angles = [0] * 170000\n    for i in range(n):\n        x0, y0 = points[i]\n        for j in range(i + 1, n):\n            x, y = points[j]\n            angles[normalize[x - x0][y - y0]] += 1\n        for j in range(i + 1, n):\n            x, y = points[j]\n            k = angles[normalize[x - x0][y - y0]]\n            result += k * (n - i - 1 - k)\n            angles[normalize[x - x0][y - y0]] = 0\n    \n    print(result // 2)\n        \n        \n    \nmain()\n", "def main():\n    import sys\n    from collections import defaultdict\n    from fractions import gcd\n    \n    normalize = [[0] * 405 for i in range(405)]\n    for x in range(-200, 201):\n        for y in range(-200, 201):\n            if x == 0 and y == 0:\n                continue\n            nx, ny = x, y\n            g = abs(gcd(x, y))\n            nx //= g\n            ny //= g\n            if nx < 0 or nx == 0 and ny < 0:\n                nx = -nx\n                ny = -ny\n            nx += 200\n            ny += 200\n            normalize[x][y] = nx * 401 + ny\n            \n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n = tokens.pop()\n    points = [(tokens.pop(), tokens.pop()) for i in range(n)]\n    \n    result = n * (n - 1) * (n - 2) // 6\n    angles = [0] * 170000\n    for i in range(n):\n        x0, y0 = points[i]\n        for j in range(i + 1, n):\n            x, y = points[j]\n            angles[normalize[x - x0][y - y0]] += 1\n        for j in range(i + 1, n):\n            x, y = points[j]\n            k = angles[normalize[x - x0][y - y0]]\n            result -= k * (k - 1) // 2\n            angles[normalize[x - x0][y - y0]] = 0\n    \n    print(result)\n        \n        \n    \nmain()\n", "def main():\n    import sys\n    from collections import defaultdict\n    from fractions import gcd\n    \n    normalize = [[0] * 405 for i in range(405)]\n    for x in range(-200, 201):\n        for y in range(-200, 201):\n            if x == 0 and y == 0:\n                continue\n            nx, ny = x, y\n            g = abs(gcd(x, y))\n            nx //= g\n            ny //= g\n            if nx < 0 or nx == 0 and ny < 0:\n                nx = -nx\n                ny = -ny\n            nx += 200\n            ny += 200\n            normalize[x][y] = nx * 401 + ny\n            \n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n = tokens.pop()\n    points = [(tokens.pop(), tokens.pop()) for i in range(n)]\n    \n    result = n * (n - 1) * (n - 2) // 6\n    angles = [0] * 170000\n    for i in range(n):\n        x0, y0 = points[i]\n        for j in range(i + 1, n):\n            x, y = points[j]\n            v = normalize[x - x0][y - y0]\n            result -= angles[v]\n            angles[v] += 1\n        for j in range(i + 1, n):\n            x, y = points[j]\n            angles[normalize[x - x0][y - y0]] = 0\n    \n    print(result)\n        \n        \n    \nmain()\n", "from fractions import gcd\nimport sys\n\ndef solve():\n    n = int(input())\n    if n < 3:\n        print(0)\n        return\n    xs, ys = list(), list()\n    for i in range(n):\n        x, y = map(int, input().split())\n        xs.append(x)\n        ys.append(y)\n    mem = [0] * 2002\n    for i in range(n):\n        slopes = dict()\n        x, y = xs[i], ys[i]\n        for o in range(n):\n            if o != i:\n                xo, yo = xs[o], ys[o]\n                xdiff, ydiff = x - xo, y - yo\n                div = gcd(xdiff, ydiff)\n                xdiff //= div\n                ydiff //= div\n                tup = (xdiff, ydiff)\n                if tup in slopes:\n                    slopes[tup] += 1\n                else: slopes[tup] = 2\n        for val in slopes:\n            mem[slopes[val]] += 1\n    for i in range(2, len(mem)):\n        mem[i] //= i\n    res = fact(n, 3)\n    for i in range(3, len(mem)):\n        res -= mem[i] * fact(i, 3)\n    print(res)\n\n\ndef fact(n, k):\n    large, small = max(k, n - k), min(k, n - k)\n    res = 1\n    for i in range(large + 1, n + 1): res *= i\n    for i in range(2, small + 1): res //= i\n    return res\n\n    \nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()", "def main():\n    import sys\n    from collections import defaultdict\n    from fractions import gcd\n    \n    normalize = [[0] * 405 for i in range(405)]\n    for x in range(-200, 201):\n        for y in range(-200, 201):\n            if x == 0 and y == 0:\n                continue\n            nx, ny = x, y\n            g = abs(gcd(x, y))\n            nx //= g\n            ny //= g\n            if nx < 0 or nx == 0 and ny < 0:\n                nx = -nx\n                ny = -ny\n            nx += 200\n            ny += 200\n            normalize[x][y] = nx * 401 + ny\n            \n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n = tokens.pop()\n    points = [(tokens.pop(), tokens.pop()) for i in range(n)]\n    \n    result = n * (n - 1) * (n - 2) // 6\n    angles = [0] * 170000\n    for i in range(n):\n        x0, y0 = points[i]\n        for j in range(i + 1, n):\n            x, y = points[j]\n            v = normalize[x - x0][y - y0]\n            result -= angles[v]\n            angles[v] += 1\n        for j in range(i + 1, n):\n            x, y = points[j]\n            angles[normalize[x - x0][y - y0]] = 0\n    \n    sys.stdout.write(str(result))\n        \n        \n    \nmain()", "def main():\n    import sys\n    from collections import defaultdict\n    from fractions import gcd\n    \n    normalize = [[0] * 405 for i in range(405)]\n    for x in range(-200, 201):\n        for y in range(-200, 201):\n            if x == 0 and y == 0:\n                continue\n            nx, ny = x, y\n            g = abs(gcd(x, y))\n            nx //= g\n            ny //= g\n            if nx < 0 or nx == 0 and ny < 0:\n                nx = -nx\n                ny = -ny\n            nx += 200\n            ny += 200\n            normalize[x][y] = nx * 401 + ny\n            \n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n = tokens.pop()\n    points = [(tokens.pop(), tokens.pop()) for i in range(n)]\n    \n    result = n * (n - 1) * (n - 2) // 6\n    angles = [0] * 162000\n    for i in range(n):\n        x0, y0 = points[i]\n        for j in range(i + 1, n):\n            x, y = points[j]\n            v = normalize[x - x0][y - y0]\n            result -= angles[v]\n            angles[v] += 1\n        for j in range(i + 1, n):\n            x, y = points[j]\n            angles[normalize[x - x0][y - y0]] = 0\n    \n    sys.stdout.write(str(result))\n        \n        \n    \nmain()", "def main():\n    import sys\n    from collections import defaultdict\n    from fractions import gcd\n    \n    normalize = [[0] * 405 for i in range(405)]\n    for x in range(-200, 201):\n        for y in range(-200, 201):\n            if x == 0 and y == 0:\n                continue\n            nx, ny = x, y\n            g = abs(gcd(x, y))\n            nx //= g\n            ny //= g\n            if nx < 0 or nx == 0 and ny < 0:\n                nx = -nx\n                ny = -ny\n            nx += 200\n            ny += 200\n            normalize[x][y] = nx * 401 + ny\n            \n    \n    tokens = [int(i) for i in sys.stdin.read().split()]\n    tokens.reverse()\n    \n    n = tokens.pop()\n    X = [0] * n\n    Y = [0] * n\n    for i in range(n):\n        X[i], Y[i] = tokens.pop(), tokens.pop()\n    \n    result = n * (n - 1) * (n - 2) // 6\n    angles = [0] * 170000\n    for i in range(n):\n        x0, y0 = X[i], Y[i]\n        for j in range(i + 1, n):\n            v = normalize[X[j] - x0][Y[j] - y0]\n            result -= angles[v]\n            angles[v] += 1\n        for j in range(i + 1, n):\n            angles[normalize[X[j] - x0][Y[j] - y0]] = 0\n    \n    print(result)\n        \n        \n    \nmain()\n", "__author__ = 'JS'\nn = int(input())\nk = [0] * 2015\nX = [0] * 2015\nY = [0] * 2015\neps = 1e-12\nfor i in range (n):\n    X[i], Y[i] = list(map(int, input().split(\" \")))\nans = (n-2) * (n-1) * n // 6\nsum = 0\nfor i in range (n):\n    tot = 0\n    cnt = 0\n    for j in range (i+1, n):\n        if X[i] != X[j]:\n            k[tot] = (Y[j] - Y[i]) / (X[j] - X[i])\n            tot += 1\n        else:\n            cnt += 1\n    #cnt -= 1\n    sum += (cnt - 1) * cnt // 2\n    k = sorted(k[:tot]) + k[tot:]\n    cnt = 1\n    for j in range (1, tot):\n        if abs(k[j] - k[j-1]) < eps:\n           cnt += 1\n        else:\n            sum += (cnt - 1) * cnt // 2\n            cnt = 1\n    sum += (cnt -1) * cnt // 2\nans -= sum\nprint(ans)\n\n", "def main():\n    from math import gcd\n    n, l, cache = int(input()), [], {(0, 0): 80400}\n    result = n * (n - 1) * (n - 2) // 6\n    for _ in range(n):\n        cnt = {}\n        newx, newy = list(map(int, input().split()))\n        for x, y in l:\n            x -= newx\n            y -= newy\n            u = cache.get((x, y))\n            if u is None:\n                u = gcd(x, y)\n                u = cache[x, y] = 80400 + (x * 401 + y) // (u if x > 0 or not x and y > 0 else -u)\n            cnt[u] = cnt.get(u, -1) + 1\n            result -= cnt[u]\n        l.append((newx, newy))\n    print(result)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\ns=n*(n-1)*(n-2)//6\np=[list(map(int,input().split()))for _ in range(n)]\nfor i in range(n):\n\tk,l=0,sorted(1e9 if p[i][1]==Y else (p[i][0]-X)/(p[i][1]-Y)for X,Y in p[:i])\n\tfor j in range(1,i):k=k+1 if l[j]==l[j-1]else 0;s-=k\nprint(s)\n\n", "n=int(input())\ns=n*(n-1)*(n-2)//6\np=[list(map(int,input().split()))for _ in range(n)]\nfor i in range(n):\n\tk,l=0,sorted(1e9 if p[i][1]==Y else (p[i][0]-X)/(p[i][1]-Y)for X,Y in p[:i])\n\tfor j in range(1,i):k=k+1 if l[j]==l[j-1]else 0;s-=k\nprint(s)\n\n", "n=int(input())\ns=n*(n-1)*(n-2)//6\np=[list(map(int,input().split()))for _ in range(n)]\nfor i in range(n):\n\tk,l=0,sorted(1e9 if p[i][1]==Y else (p[i][0]-X)/(p[i][1]-Y)for X,Y in p[:i])\n\tfor j in range(1,i):k=k+1 if l[j]==l[j-1]else 0;s-=k\nprint(s)\n\n"]