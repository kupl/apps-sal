["from bisect import bisect_left\n\nn, h = map(int, input().split())\nx1, x2 = map(int, input().split())\nif n == 1:\n\tprint(h + x2 - x1)\nelse:\n\tgap_sum = [0]\n\tairflow_sum = [x2 - x1]\n\tfor _ in range(n - 1):\n\t\toldx1, oldx2 = x1, x2\n\t\tx1, x2 = map(int, input().split())\n\t\tgap_sum.append(gap_sum[-1] + x1 - oldx2)\n\t\tairflow_sum.append(airflow_sum[-1] + x2 - oldx2)\n\n\t#print(gap_sum)\n\t#print(airflow_sum)\n\n\tans = h\n\tfor i in range(n):\n\t\tcnt = bisect_left(gap_sum, h + gap_sum[i])\n\t\tif i == 0:\n\t\t\tres = airflow_sum[cnt-1] + h - gap_sum[cnt-1]\n\t\telse:\n\t\t\tres = airflow_sum[cnt-1] - (airflow_sum[i-1] + gap_sum[i] - gap_sum[i - 1]) + h - (gap_sum[cnt-1] - gap_sum[i])\n\n\t\tif res > ans:\n\t\t\tans = res\n\tprint(ans)", "n, h = map(int, input().split())\na, b = map(int, input().split())\nL = [[a, b]]\nM = [0]\nN = [0]\nsum = 0\nf = True\nfor i in range(1, n):\n    a, b = map(int, input().split())\n    L.append([a, b])\n    M.append(a - L[-2][1])\n    sum += M[-1]\n    if sum >= h and f:\n        x = i \n        f = False\n    N.append(sum)\nif sum < h:\n    maximum = L[-1][1] - L[0][0] + h - sum\nelse:\n    #print('x =', x)\n    ans = L[x - 1][1] - L[0][0] + h - N[x - 1]\n    maximum = ans\n    for i in range(1, n):\n        while x < n and N[x] - N[i] < h:\n            x += 1\n        ans = L[x - 1][1] - L[i][0] + h - (N[x - 1] - N[i])\n        if ans > maximum:\n            maximum = ans\n        #print('i =', i, 'x =', x, 'ans =', ans)\nprint(maximum)", "from copy import deepcopy\nimport itertools\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nimport math\nfrom collections import deque\nfrom collections import Counter\n\n\ndef read():\n    return int(input())\n\n\ndef readmap():\n    return list(map(int, input().split()))\n\n\ndef readlist():\n    return list(map(int, input().split()))\n\n\nn, h = readmap()\nseg = []\nc, b = readmap()\nseg.append((0, b-c))\nfor _ in range(n-1):\n    a, b = readmap()\n    seg.append((a-c, b-c))\n\ncumu = [0] * n\nfor i in range(1, n):\n    cumu[i] = cumu[i-1] + seg[i][0] - seg[i-1][1]\n\nans = 0\nfor i in range(n):\n    idx = bisect_left(cumu, h + cumu[i])\n    if idx < n:\n        can = seg[idx][0] - (cumu[idx] - cumu[i] - h) - seg[i][0]\n        ans = max(ans, can)\n    else:\n        can = seg[-1][1] + (h - cumu[-1] + cumu[i]) - seg[i][0]\n        ans = max(ans, can)\n\nprint(ans)\n", "import bisect\n\nn, h = [int(e) for e in input().split()]\nx = [list(map(int, input().split())) for i in range(n)]\nxcum = [x[0][1] - x[0][0]]\nfor i, e in enumerate(x[1:]):\n    xcum.append(xcum[i] + e[1] - e[0])\nx_start = [e[0] for e in x]\ni = 0\nbest = -1\ncd = x[0][1] - x[0][0]\nch = h\nj = i\nwhile i < len(x):\n    # print(cd,ch)\n    # j = i\n    while (j + 1) < len(x) and x[j][1] + ch > x[j + 1][0]:\n        cd += x[j + 1][1] - x[j][1]\n        ch -= x[j + 1][0] - x[j][1]\n        j += 1\n    if cd + ch > best:\n        # print(i)\n        # print(cd + ch)\n        best = cd + ch\n    if i + 1 < len(x):\n        cd -= x[i + 1][0] - x[i][0]\n        ch += x[i + 1][0] - x[i][1]\n    i += 1\nprint(best)\n", "import bisect\n\ncl = list(map(int, input().split()))\nn, h = cl[0], cl[1]\npotok = []\npos = 0\nsmlist = []\nsm = 0\npt = 0\nmx = 0\nsmlist.append(0)\npotok.append(0)\nfor i in range(n):\n  s = input().split()\n  pt += int(s[1]) - int(s[0])\n  potok.append(pt)\n  if i!=0:\n    sm+=int(s[0])-pos\n    smlist.append(sm)\n  pos = int(s[1])\n\nfor i in range(n):\n  pos = bisect.bisect_left(smlist, smlist[i]+h)\n  res = potok[pos] - potok[i] +h\n  if res>mx:\n    mx = res\n\n\nprint(mx)", "n, h = map(int, input().split(' '))\nx = []\nfor i in range(n):\n    x1, x2 = map(int, input().split(' '))\n    x.append([x1, x2])\n\ncur = 1\nS = 0\ni = 0\nres = 0\nwhile cur < n:\n    #print()\n    while S <= h and i < n - 1:\n        i += 1\n        S += x[i][0] - x[i - 1][1]\n    #print(S, i, res)\n    if S > h:\n        S -= (x[i][0] - x[i-1][1])\n        i -= 1\n    #elif i == n - 1:\n        #i -= 1\n    #print(S, i)\n    if S < h:\n        res1 = x[i][1] + h - S - x[cur - 1][0]\n    else:\n        res1 = x[i][0] - x[cur - 1][0]\n    res = max(res, res1)\n    #print(res)\n    S -= (x[cur][0] - x[cur - 1][1])\n    cur += 1\n\nres = max(res, x[-1][1] - x[-1][0] + h)\nprint(res)", "n,h=map(int,input().split())\narr=[]\nfor i in range(n):\n    x,y=map(int,input().split())\n    arr.append((x,y))\narr.sort()\narr1=[]\nfor i in range(n-1):\n    if(arr[i+1][0]>=arr[i][1]):\n        arr1.append(arr[i+1][0]-arr[i][1])\n    else:\n        arr1.append(0)\nfans=0\nsumx=0\ni=0\nj=0\ntempans=0\nwhile(i<n and j<n):\n    while(j<n-1 and sumx+arr1[j]<h):\n        tempans+=arr[j+1][0]-arr[j][0]\n        sumx+=arr1[j]\n        j+=1\n    if(j==n-1):\n        tempans+=h-sumx+arr[j][1]-arr[j][0]\n        j+=1\n        fans=max(tempans,fans)\n    else:\n        fans=max(tempans+arr[j][1]-arr[j][0]+h-sumx,fans)\n        sumx-=arr1[i]\n        tempans-=arr[i+1][0]-arr[i][0]\n        i+=1\nprint(fans)", "n,h=map(int,input().split())\narr=[]\nfor i in range(n):\n    x,y=map(int,input().split())\n    arr.append((x,y))\narr.sort()\narr1=[]\nfor i in range(n-1):\n    if(arr[i+1][0]>=arr[i][1]):\n        arr1.append(arr[i+1][0]-arr[i][1])\n    else:\n        arr1.append(0)\nfans=0\nsumx=0\ni=0\nj=0\ntempans=0\nwhile(i<n and j<n):\n    while(j<n-1 and sumx+arr1[j]<h):\n        tempans+=arr[j+1][0]-arr[j][0]\n        sumx+=arr1[j]\n        j+=1\n    if(j==n-1):\n        tempans+=h-sumx+arr[j][1]-arr[j][0]\n        j+=1\n        fans=max(tempans,fans)\n    else:\n        fans=max(tempans+arr[j][1]-arr[j][0]+h-sumx,fans)\n        sumx-=arr1[i]\n        tempans-=arr[i+1][0]-arr[i][0]\n        i+=1\nprint(fans)", "ans = 0\n[n, h] = [int(i) for i in input().split()]\narr = [[int(i) for i in input().split()] for j in range(n)]\nl, r, answer, cur = 0, 0, arr[0][1] - arr[0][0], 0\narr += [[10 ** 16, 10**16]]\nn += 1\nwhile (r < n - 1):\n\tfor j in range(r + 1, n):\n\t\tif cur + arr[j][0] - arr[j - 1][1] < h:\n\t\t\tr += 1\n\t\t\tcur += arr[j][0] - arr[j - 1][1]\n\t\t\tanswer += arr[j][1] - arr[j][0]\n\t\telse:\n\t\t\tl += 1\n\t\t\tans = max(ans, answer)\n\t\t\tcur -= arr[l][0] - arr[l - 1][1]\n\t\t\tanswer -= arr[l - 1][1] - arr[l - 1][0]\n\t\t\tbreak\n\nprint (ans + h)", "# Glider\n\nn, h = map(int, input().split())\ns = [0 for i in range(n)]\ne = [0 for i in range(n)]\n\nfor i in range(n):\n    s[i], e[i] = map(int, input().split())\n\nL = 0\nR = 0\nH = h\nM = 0\n\nwhile L < n:\n    while (R < n-1) and (H - (s[R+1] - e[R]) > 0):\n        H -= (s[R+1] - e[R])\n        R += 1\n    \n    if e[R] - s[L] + H > M:\n        M = e[R] - s[L] + H\n\n    if L < n-1:\n        H += s[L+1] - e[L]\n    \n    L += 1\n    \nprint(M)", "n,h = list(map(int,input().split()))\n\nlis = []\nfor i in range(n):\n    x,y = list(map(int,input().split()))\n    lis.append((x,y))\n\nans = lis[0][1] - lis[0][0]\nend = 1\nhave = h\ntot = lis[0][1] - lis[0][0]\n\n\nfor x in range(len(lis)):\n    if end >= n:\n        break\n    if x:\n        have += lis[x][0] - lis[x-1][1]\n        have = min(have,h)\n        tot -=  lis[x-1][1] - lis[x-1][0]\n        tot = max(tot,lis[x][1] - lis[x][0])\n        end = min(n-1,max(end,x+1))\n\n    while have:\n        need = lis[end][0] - lis[end-1][1]\n        if have > need:\n            have -= need\n            tot += lis[end][1] - lis[end][0]\n        else:\n            break\n\n        end += 1\n        if end == n:\n           break\n\n    ans = max(ans,tot)\n\n\nprint(ans + h)\n\n\n\n\n\n\n\n\n\n\n", "R = lambda: map(int, input().split())\nn, h = R()\nps = []\nfor _ in range(n):\n    l, r = R()\n    ps.append([l, r])\nl, c, res = 0, 0, 0\nfor r in range(n):\n    c += (ps[r][0] - ps[r - 1][1]) if r > 0 else 0\n    while c >= h:\n        c -= (ps[l + 1][0] - ps[l][1])\n        l += 1\n    res = max(res, ps[r][1] - ps[l][0] + h - c)\nprint(res)", "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn, h = list(map(int, input().split()))\nxs = [list(map(int, input().split())) for _ in range(n)]\n\ns = [i for i, _ in xs]\nt = [i for _, i in xs]\n\nL = 0\nR = 0\nans = 0\n\nwhile L < n:\n    while (R < n -1) and (h -(s[R+1]-t[R]))>0:\n        h -= s[R+1] - t[R]\n        R += 1\n    if t[R] - s[L] + h > ans:\n        ans = t[R] - s[L] + h\n    \n    if L < n -1:\n        h += s[L+1] - t[L]\n    L += 1\nprint(ans)    \n", "from collections import Counter, defaultdict, deque\nread = lambda: list(map(int,input().split()))\n\nn,h = read()\ndis = []\nfor _ in range(n):\n    a,b = read()\n    dis.append([a,b])\n\nrec = []\nfor i in range(1, n):\n    rec.append(dis[i][0] - dis[i-1][1])\nrec.append(float('inf'))\n\ns = 0\nleft = h\ni,j = 0,0\nres = 0\nvis = [False] * n\nwhile i < n:\n    while j < n and left > 0:\n        if not vis[j]:\n            s += dis[j][1] - dis[j][0]\n            vis[j] = True\n        if left > rec[j]:\n            left -= rec[j]\n            s += rec[j]\n            j += 1\n        else:\n            res = max(res, s + left)\n            while i < n and  left <= rec[j]:\n                s -= dis[i][1] - dis[i][0] + rec[i]\n                left += rec[i]\n                i += 1\n            if i >= n: break\n\nprint(res)", "# import atexit\n# import io\n# import sys\n#\n# _INPUT_LINES = sys.stdin.read().splitlines()\n# input = iter(_INPUT_LINES).__next__\n# _OUTPUT_BUFFER = io.StringIO()\n# sys.stdout = _OUTPUT_BUFFER\n#\n#\n# @atexit.register\n# def write():\n#     sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\n\ndef main():\n    n, h = list(map(int, input().split()))\n\n    trans = []\n\n    for i in range(n):\n        a, b = input().split()\n        trans.append((int(a), int(b)))\n\n    lIdx = 0\n    rIdx = 0\n\n    mx = -9999999\n    height = h\n\n    while rIdx + 1 < n:\n\n        while height > 0 and rIdx + 1 < n:\n            rIdx += 1\n            height -= trans[rIdx][0] - trans[rIdx - 1][1]\n\n        if height == 0:\n            mx = max(mx, trans[rIdx][0] - trans[lIdx][0])\n        elif height > 0:\n            mx = max(mx, trans[rIdx][1] - trans[lIdx][0] + height)\n        else:\n            mx = max(mx, trans[rIdx][0] + height - trans[lIdx][0])\n\n        lIdx += 1\n        height += trans[lIdx][0] - trans[lIdx - 1][1]\n\n    if height == 0:\n        mx = max(mx, trans[rIdx][0] - trans[lIdx][0])\n    elif height > 0:\n        mx = max(mx, trans[rIdx][1] - trans[lIdx][0] + height)\n    else:\n        mx = max(mx, trans[rIdx][0] + height - trans[lIdx][0])\n\n    print(mx)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 11/21/18\n\n\"\"\"\nimport bisect\n\nN, H = list(map(int, input().split()))\n\nX = []\ns = float('inf')\nfor i in range(N):\n    x1, x2 = list(map(int, input().split()))\n    s = min(s, x1)\n    X.append((x1, x2))\n\n\nX = [(x1-s, x2-s) for (x1, x2) in X]\nX.sort()\n\n\ngap = [0] * (N+1)\nfor i in range(1, N):\n    gap[i] = X[i][0] - X[i-1][1]\n\n\ngpresum = [0] * (N+1)\nfor i in range(1, N + 1):\n    gpresum[i] = gpresum[i-1] + gap[i-1]\n\ngpresum = gpresum[1:]\n# print(X)\n# print(gap)\n# print(gpresum)\n\nans = 0\nfor i in range(N):\n    # starts from X[i]\n    g = gpresum[i]\n    j = bisect.bisect_left(gpresum, g + H)\n    l = X[j-1][1] - X[i][0] + (H - (gpresum[j-1] - gpresum[i]))\n    ans = max(l, ans)\n\nprint(ans)\n\n\n\n\n\n\n\n\n\n", "n,h=map(int,input().split())\nbrr=[0]*n\nfor i in range(n):\n\tbrr[i]=list(map(int,input().split()))\narr=[0]*(2*n)\nfor i in range(n):\n\tarr[2*i]=brr[i][0]\n\tarr[2*i+1]=brr[i][1]\nif n==1:\n\tprint(arr[1]-arr[0]+h)\n\treturn\nif h==1:\n\tdis=0\n\tfor i in range(1,2*n,2):\n\t\tdis=max(dis,arr[i]-arr[i-1])\n\tprint(dis+1)\n\treturn\n\ndiff=[0]*(n-1)\nadd=[0]*(n)\nfor i in range(n-1):\n\tdiff[i]=diff[i-1]+arr[2*i+2]-arr[2*i+1]\n\tadd[i]=add[i-1]+arr[2*i+1]-arr[2*i]\nadd[n-1]=add[n-2]+arr[2*n-1]-arr[2*n-2]\nans=0\nfor i in range(0,2*n,2):\n\tj=i//2\n\tlo=j\n\thi=n-2\n\tpre=diff[lo-1]\n\tif lo==0:\n\t\tpre=0\n\twhile(lo<=hi):\n\t\tmid=(lo+hi)//2\n\t\tif diff[mid]-pre<=h:\n\t\t\tlo=mid+1\n\t\t\tif mid==n-2 or diff[mid+1]-pre>h:\n\t\t\t\tbreak\n\t\telse:\n\t\t\thi=mid-1\n\text=h-diff[mid]+pre\n\tif ext!=0:\n\t\tans=max(ans,arr[(mid*2)+3]+ext-arr[i])\n\telse:\n\t\tans=max(ans,arr[(mid*2)+2]-arr[i])\nprint(ans)", "from collections import *\n \ndef li():return [int(i) for i in input().rstrip('\\n').split(' ')]\ndef st():return input().rstrip('\\n')\ndef val():return int(input())\n \n \n \nn, h = li()\nl = []\nfor i in range(n):l.append(li())\nl.sort()\nans = h + l[0][1] - l[0][0]\nd = deque()\nd.append(l[0])\ncurrrem = h\ncurrdist = l[0][1] - l[0][0]\n \n \nfor i in range(1,n):\n \n    cant = 0\n    while currrem <= l[i][0] - l[i-1][1]:\n        if cant:break\n        a,b = d.popleft()\n        if len(d):\n            currrem += d[0][0] - b\n            currrem = min(currrem,h)\n            currdist -= d[0][0] - a\n        else:\n            if l[i][0] - b <= h:\n                d.append(l[i-1])\n                break\n            cant = 1\n            currrem = h\n            currdist = 0\n    currdist += l[i][1] - l[i][0]\n    if len(d):\n        currdist += l[i][0] - d[-1][1]\n        currrem -= l[i][0] - d[-1][1]\n    d.append(l[i])\n    ans = max(ans,currdist + currrem)\nprint(ans)", "from collections import *\n \ndef li():return [int(i) for i in input().rstrip('\\n').split(' ')]\ndef st():return input().rstrip('\\n')\ndef val():return int(input())\n \n \n \nn, h = li()\nl = []\nfor i in range(n):l.append(li())\nl.sort()\nans = h + l[0][1] - l[0][0]\nd = deque()\nd.append(l[0])\ncurrrem = h\ncurrdist = l[0][1] - l[0][0]\n \n \nfor i in range(1,n):\n \n    cant = 0\n    while currrem <= l[i][0] - l[i-1][1]:\n        if cant:break\n        a,b = d.popleft()\n        if len(d):\n            currrem += d[0][0] - b\n            currrem = min(currrem,h)\n            currdist -= d[0][0] - a\n        else:\n            if l[i][0] - b <= h:\n                d.append(l[i-1])\n                break\n            cant = 1\n            currrem = h\n            currdist = 0\n    currdist += l[i][1] - l[i][0]\n    if len(d):\n        currdist += l[i][0] - d[-1][1]\n        currrem -= l[i][0] - d[-1][1]\n    d.append(l[i])\n    ans = max(ans,currdist + currrem)\nprint(ans)", "n,h = list(map(int,input().split()))\nlis=[]\nfor i in range(n):\n    a,b = list(map(int,input().split()))\n    lis.append([a,b])\nlis.sort()\ny=h\ncur=ans=i=j=0\nlis.append([100000000000,100000000000])\n#print(lis)\nwhile i<n and j<n:\n    dec = lis[i+1][0]-lis[i][1]\n    if dec<y:\n        cur+=(lis[i+1][0]-lis[i][0])\n        ans = max(ans,cur)\n        i+=1\n        y-=dec\n    else:\n        aa=lis[i][1]-lis[i][0]\n        ans=max(ans,cur+y+aa)\n        y-=dec\n        while y<=0 and j<n:\n            cur-=(lis[j+1][0]-lis[j][0])\n            y+=(lis[j+1][0]-lis[j][1])\n#            print(cur,lis[j+1][0]-lis[j][0])\n            j+=1    \n        cur+=(lis[i+1][0]-lis[i][0])\n        i+=1\n#        print(cur)\n#        ans=max(ans,cur)     \n#    print(dec,y,cur,ans)\nprint(ans)            \n\n\n", "n, s = map(int, input().split())\nmass = list()\narr = list()\npast = -1\nanswer = 0\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    mass.append(r - l)\n    if past != -1:\n        arr.append(l - past)\n    past = r\n\nl2 = 0\n\nlocal = s\nq = mass[0] + s\nfor j in range(n - 1):\n    local -= arr[j]\n    if local <= 0:\n        l2 = j\n        break\n    q += mass[j + 1]\nanswer = q\n\nif local <= 0:\n    for i in range(1, n):\n        local += arr[i - 1]\n        q -= mass[i - 1]\n        if local > 0:\n            local += arr[l2]\n            for j in range(l2, n - 1):\n                local -= arr[j]\n                if local <= 0:\n                    break\n                l2 += 1\n                q += mass[j + 1]\n        if q > answer:\n            answer = q\n        if local > 0:\n            break\n        \nprint(answer)", "n, h = [int(i) for i in input().split()]\nA = [[int(i) for i in input().split()] for j in range(n)]\n\nr = 0\ncur_h = h\nans = 0\nfor l in range(n):\n    while r < n-1 and cur_h > A[r+1][0] - A[r][1]:\n        cur_h -= A[r+1][0] - A[r][1]\n        r += 1\n    ans = max(ans, A[r][1] - A[l][0] + cur_h)\n    if l < n-1:\n        cur_h += A[l+1][0] - A[l][1]\nprint(ans)\n", "n, h = [int(i) for i in input().split()]\nA = [[int(i) for i in input().split()] for j in range(n)]\n\nr = 0\ncur_h = h\nans = 0\nfor l in range(n):\n    while r < n-1 and cur_h > A[r+1][0] - A[r][1]:\n        cur_h -= A[r+1][0] - A[r][1]\n        r += 1\n    ans = max(ans, A[r][1] - A[l][0] + cur_h)\n    if l < n-1:\n        cur_h += A[l+1][0] - A[l][1]\nprint(ans)"]