["f = []\nfor i in range(2):\n    f.append(list(input()))\n\n\nanswer = 0\n\nn = len(f[0])\nfor i in range(n):\n    if f[0][i] == f[1][i] == '0' and i + 1 < n:\n        if f[0][i + 1] == '0':\n            answer += 1\n            f[0][i + 1] = 'X'\n        elif f[1][i + 1] == '0':\n            answer += 1\n            f[1][i + 1] = 'X'\n\n    elif (f[1][i] == '0' or f[0][i] == '0') and i + 1 < n and f[0][i + 1] == f[1][i + 1] == '0':\n        answer += 1\n        f[0][i + 1] = f[1][i + 1] = 'X'\n\n\nprint(answer)\n", "3\n\ndef o(c):\n    return c == '0'\n\n\ndef solve(A, B, N):\n    A += 'XXX'\n    B += 'XXX'\n\n    i = 0\n    c = 0\n    while i < N:\n        if (o(A[i]) and o(A[i + 1]) and o(A[i + 2])\n            and o(B[i]) and o(B[i + 1]) and o(B[i + 2])):\n            c += 2\n            i += 3\n            continue\n\n        x = len([x for x in [o(A[i]), o(A[i + 1]), o(B[i]), o(B[i + 1])] if x])\n        if x >= 3:\n            c += 1\n            i += 2\n            continue\n\n        i += 1\n\n    return c\n\n\ndef main():\n    A = input()\n    B = input()\n    N = len(A)\n    assert len(B) == N\n    print(solve(A, B, N))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "first = input()\nsecond = input()\nadad = list()\nfor i in range(len(first)):\n\tnum = 0\n\tif first[i] == '0':\n\t\tnum += 1\n\tif second[i] == '0':\n\t\tnum += 1\n\tadad.append(num)\n\ncnt = 0\nlast_fill = -1\nfor i in range(1, len(adad)):\n\tif adad[i] + adad[i-1] == 3:\n\t\tcnt += 1\n\t\tadad[i] = adad[i-1] = 0\n\telif adad[i] + adad[i-1] == 4:\n\t\tcnt += 1\n\t\tadad[i] = 1\n\t\tadad[i-1] = 0\nprint(cnt)\n", "s=input()\nt=input()\ndp=[]\nn=len(s)\na=[]\nb=[]\nfor i in range(n+1):\n    dp.append((0,0))\nfor i in range(n):\n    a.append(s[i])\n    b.append(t[i])\nans=0\nfor i in range(n):\n    if a[i]=='0' and b[i]=='0':\n        if i>0 and (a[i-1]=='0' or b[i-1]=='0'):\n            if a[i-1]=='0':\n                a[i]=b[i]=a[i-1]='X'\n                ans+=1\n            elif b[i-1]=='0':\n                a[i]=b[i]=b[i-1]='X'\n                ans+=1\n        elif i+1<n:\n            if a[i+1]=='0':\n                a[i]=b[i]=a[i+1]='X'\n                ans+=1\n            elif b[i+1]=='0':\n                a[i]=b[i]=b[i+1]='X'\n                ans+=1\nprint(ans)\n", "S1 = input()\nS2 = input()\n\nL = len(S1)\n\nmemo = {}\ndef dfs(i, p1, p2):\n    if i == L:\n        return 0\n    key = (i, p1, p2)\n    if key in memo:\n        return memo[key]\n    r = 0\n    if S1[i] == S2[i] == '0':\n        if p1 > 0 or p2 > 0:\n            if p1 > 0 < p2:\n                r = max(dfs(i+1, 1, 0), dfs(i+1, 0, 1)) + 1\n            else:\n                r = dfs(i+1, 0, 0) + 1\n        else:\n            r = dfs(i+1, 1, 1)\n    elif S1[i] == '0':\n        if p1 > 0 and p2 > 0:\n            r = dfs(i+1, 0, 0) + 1\n        else:\n            r = dfs(i+1, 1, 0)\n    elif S2[i] == '0':\n        if p1 > 0 and p2 > 0:\n            r = dfs(i+1, 0, 0) + 1\n        else:\n            r = dfs(i+1, 0, 1)\n    else:\n        r = dfs(i+1, 0, 0)\n    memo[key] = r\n    return r\nprint(dfs(0, 0, 0))\n", "a2 = input()\nb2 = input()\na = []\nb = []\nfor i in range(len(a2)):\n    a.append(a2[i])\n    b.append(b2[i])\nk = 0\nfor i in range(len(a)):\n    if i == 0 and (len(a) > 1):\n        if a[0] == '0' and b[0] == '0' and a[1] == '0':\n            a[0] = 'X'\n            b[0] = 'X'\n            a[1] = 'X'\n            k += 1\n        elif a[0] == '0' and b[0] == '0' and b[1] == '0':\n            a[0] = 'X'\n            b[0] = 'X'\n            b[1] = 'X'\n            k += 1\n    elif i == len(a) - 1 and (len(a) > 1):\n        if a[i] == '0' and b[i] == '0' and a[i - 1] == '0':\n            a[i] = 'X'\n            b[i] = 'X'\n            a[i - 1] = 'X'\n            k += 1\n        elif a[i] == '0' and b[i] == '0' and b[i - 1] == '0':\n            a[i] = 'X'\n            b[i] = 'X'\n            b[i - 1] = 'X'\n            k += 1\n    elif (len(a) > 1):\n        if a[i] == '0' and b[i] == '0' and a[i - 1] == '0':\n            a[i] = 'X'\n            b[i] = 'X'\n            a[i - 1] = 'X'\n            k += 1\n        elif a[i] == '0' and b[i] == '0' and b[i - 1] == '0':\n            a[i] = 'X'\n            b[i] = 'X'\n            b[i - 1] = 'X'\n            k += 1\n        elif a[i] == '0' and b[i] == '0' and a[i + 1] == '0':\n            a[i] = 'X'\n            b[i] = 'X'\n            a[i + 1] = 'X'\n            k += 1\n        elif a[i] == '0' and b[i] == '0' and b[i + 1] == '0':\n            a[i] = 'X'\n            b[i] = 'X'\n            b[i + 1] = 'X'\n            k += 1\n    else:\n         k = 0\nprint(k)\n\n        \n", "topboard = list(input())\nbotboard = list(input())\n\nbish = 0\nleft = 0\nwhile left + 1 < len(topboard):\n    if topboard[left] == '0' and botboard[left] == '0':\n        if topboard[left+1] == '0':\n            bish += 1\n            topboard[left] = 'X'\n            topboard[left+1] = 'X'\n            botboard[left] = 'X'\n        elif botboard[left+1] == '0':\n            bish += 1\n            topboard[left] = 'X'\n            botboard[left] = 'X'\n            botboard[left+1] = 'X'\n    elif topboard[left+1] == '0' and botboard[left+1] == '0':\n        if topboard[left] == '0':\n            bish += 1\n            topboard[left] = 'X'\n            topboard[left+1] = 'X'\n            botboard[left+1] = 'X'\n        elif botboard[left] == '0':\n            bish += 1\n            topboard[left+1] = 'X'\n            botboard[left] = 'X'\n            botboard[left+1] = 'X'\n\n    left += 1\n\nprint(bish)\n", "a = []\na.append(input())\na.append(input())\ndp = [-200] * 4\ndp[1 * (a[0][0] == 'X') + 2 * (a[1][0] == 'X')] = 0\nfor i in range(1, len(a[0])):\n\todp = dp\n\tdp = [-200] * 4\n\tstate = 1 * (a[0][i] == 'X') + 2 * (a[1][i] == 'X')\n\tfor last_state in range(4):\n\t\tdp[state] = max(dp[state], odp[last_state])\n\t\tif last_state != 3 and state == 0:\n\t\t\tdp[3] = max(dp[3], odp[last_state] + 1)\n\t\tif last_state == 0:\n\t\t\tif ((~state) & 1):\n\t\t\t\tdp[state + 1] = max(dp[state + 1], odp[last_state] + 1)\n\t\t\tif ((~state) & 2):\n\t\t\t\tdp[state + 2] = max(dp[state + 2], odp[last_state] + 1)\nprint(max(max(dp[0], dp[1]), max(dp[2], dp[3])))", "s = [input(), input()]\npc = [[s[0][i],s[1][i]].count('0') for i in range(len(s[0]))]\nans = 0\nfor i in range(len(pc) - 1):\n  if pc[i] >= 2 and pc[i + 1] >= 1:\n    ans += 1\n    pc[i] -= 2\n    pc[i + 1] -= 1\n  elif pc[i] >= 1 and pc[i + 1] >= 2:\n    ans += 1\n    pc[i] -= 1\n    pc[i + 1] -= 2\nprint(ans)\n", "a=list(input())\nb=list(input())\nn=len(a)\nans=0\nfor i in range(n-1):\n    if(a[i+1]=='0' and a[i]=='0' and b[i]=='0'):\n        ans+=1\n        a[i]=a[i+1]=b[i]='X'\n    elif(b[i+1]=='0' and a[i]=='0' and b[i]=='0'):\n        ans+=1\n        a[i]=b[i+1]=b[i]='X'\n    elif(b[i+1]=='0' and a[i+1]=='0' and b[i]=='0'):\n        ans+=1\n        a[i+1]=b[i+1]=b[i]='X'\n    elif(b[i+1]=='0' and a[i+1]=='0' and a[i]=='0'):\n        ans+=1\n        a[i+1]=b[i+1]=a[i]='X'\nprint(ans)", "s1=input()\ns2=input()\ndp=[0 for i in range(len(s1))]\nif (s1[0]==s2[0]) and (s1[0]=='0'):\n    r=2\nelif (s1[0]==s2[0]) and (s1[0]=='X'):\n    r=0\nelse:\n    r=1\nfor i in range(1,len(s1)):\n    if (s1[i]==s2[i]) and (s1[i]=='X'):\n        dp[i]=dp[i-1]\n        r=0\n    elif (s1[i]!=s2[i]) and (r<=1):\n        dp[i]=dp[i-1]\n        r=1\n    elif ((s1[i]==s2[i]) and (s1[i]=='0')):\n        if r==2:\n            dp[i]=dp[i-1]+1\n            r=1\n        elif r==1:\n            dp[i]=dp[i-1]+1\n            r=0\n        else:\n            dp[i]=dp[i-1]\n            r=2\n    else:\n        dp[i]=dp[i-1]+1\n        r=0\nprint(dp[len(s1)-1])\n        \n        \n\n", "board = []\nboard.append(input())\nboard.append(input())\n\nn = len(board[0])\n\ndp = [[0 for _ in range(n)] for _ in range(4)]\n\ninf = float('-inf')\n\nif board[0][0] == 'X':\n    dp[0][0] = inf\n    dp[2][0] = inf\nif board[1][0] == 'X':\n    dp[0][0] = inf\n    dp[1][0] = inf\n\n\n#print([dp[j][0] for j in range(4)])\nfor i in range(1, n):\n    prev_best = max(dp[j][i-1] for j in range(4))\n    for j in range(4):\n        dp[j][i] = prev_best\n    if board[0][i] != 'X' or board[1][i] != 'X':\n        dp[3][i] = max(dp[3][i], dp[0][i-1] + 1)\n    if board[0][i] != 'X' and board[1][i] != 'X':\n        dp[1][i] = max(dp[1][i], dp[0][i-1] + 1)\n        dp[2][i] = max(dp[2][i], dp[0][i-1] + 1)\n        dp[3][i] = max(dp[3][i], dp[1][i-1] + 1, dp[2][i-1] + 1)\n    if board[0][i] == 'X':\n        dp[0][i] = inf\n        dp[2][i] = inf\n    if board[1][i] == 'X':\n        dp[0][i] = inf\n        dp[1][i] = inf\n    #print([dp[j][i] for j in range(4)])\n\nprint(max(max(dp[i][-1] for i in range(4)), 0))\n", "a = [list(input()) for _ in range(2)]\nn = 0\nfor i in range(len(a[0])):\n    bljet = 0\n    if a[0][i] == a[1][i] and a[0][i] == '0':\n        \n        if i > 0:\n            if a[0][i-1] == '0':\n                a[0][i-1] = 'X'\n                a[0][i] = 'X'\n                a[1][i] = 'X'\n                bljet = 1\n            if not bljet and a[1][i-1] == '0':\n                a[1][i-1] = 'X'\n                a[0][i] = 'X'\n                a[1][i] = 'X'\n                bljet = 1\n        if i+1 < len(a[0]):\n            if not bljet and a[0][i+1] == '0':\n                a[0][i+1] = 'X'\n                a[0][i] = 'X'\n                a[1][i] = 'X'\n                bljet = 1\n            if not bljet and a[1][i+1] == '0':\n                a[1][i+1] = 'X'\n                a[0][i] = 'X'\n                a[1][i] = 'X'\n                bljet = 1\n        #print(a[0])\n        #print(a[1])\n        \n    if bljet:\n        n += 1\nprint(n)\n", "def read_input():\n\treturn map(int, input().split())\n\na = [list(input()), list(input())]\nans = 0\nn = len(a[0])\n\ni = 0\nwhile i + 1 < n:\n\tcnt = sum(c == 'X' for c in [a[0][i], a[1][i], a[0][i + 1], a[1][i + 1]])\n\tif cnt > 1:\n\t\ti += 1\n\t\tcontinue\n\tif cnt == 1:\n\t\tans += 1\n\t\ti += 2\n\t\tcontinue\n\tans += 1\n\ta[0][i + 1] = 'X'\n\ti += 1\nprint(ans)", "\n\nA = []\nA += [input()]\nA += [input()]\n\nn = len(A[0])\n\nB = [[0 for _ in range(4)] for _ in range(n + 1)]\n\nB[0][0] = -1000\nB[0][1] = -1000\nB[0][2] = -1000\nB[0][3] = 0\n\nfor i in range(1, n + 1):\n    # 0\n    if A[1][i - 1] == 'X':\n        B[i][0] = -1000\n    elif A[0][i - 1] == 'X':\n        B[i][0] = max([B[i - 1][j] for j in range(4)])\n    else:\n        B[i][0] = max([B[i - 1][2] + 1] + [B[i - 1][0],\n                                           B[i - 1][1], B[i - 1][3]])\n\n    # 1\n    if A[0][i - 1] == 'X':\n        B[i][1] = -1000\n    elif A[1][i - 1] == 'X':\n        B[i][1] = max([B[i - 1][j] for j in range(4)])\n    else:\n        B[i][1] = max([B[i - 1][2] + 1] + [B[i - 1][0],\n                                           B[i - 1][1], B[i - 1][3]])\n\n    # 3\n    if A[0][i - 1] == 'X' or A[1][i - 1] == 'X':\n        B[i][2] = -1000\n    else:\n        B[i][2] = max([B[i - 1][j] for j in range(4)])\n\n    # 4\n    if A[0][i - 1] == 'X' and A[1][i - 1] == 'X':\n        B[i][3] = max([B[i - 1][j] for j in range(4)])\n    elif A[0][i - 1] == 'X':\n        B[i][3] = B[i - 1][2] + 1\n    elif A[1][i - 1] == 'X':\n        B[i][3] = B[i - 1][2] + 1\n    else:\n        B[i][3] = max([B[i - 1][j] for j in range(3)]) + 1\n\n\n\nprint(max([B[n][j] for j in range(4)]))\n", "l1 = list(input().strip())\nl2 = list(input().strip())\nr = 0\n\nfor i in range(len(l1) - 1):\n    if l1[i] == '0' and l2[i] == '0':\n        if l2[i+1] == '0':\n            l1[i] = 'X'\n            l2[i] = 'X'\n            l2[i+1] = 'X'\n            r += 1\n        elif l1[i+1] == '0':\n            l1[i] = 'X'\n            l2[i] = 'X'\n            l1[i+1] = 'X'\n            r += 1\n    elif l1[i] == '0':\n        if l1[i+1] == '0' and l2[i+1] == '0':\n            l1[i] = 'X'\n            l1[i+1] = 'X'\n            l2[i+1] = 'X'\n            r += 1\n    elif l2[i] == '0':\n        if l1[i+1] == '0' and l2[i+1] == '0':\n            l2[i] = 'X'\n            l1[i+1] = 'X'\n            l2[i+1] = 'X'\n            r += 1\n\nprint(r)\n", "def go():\n    matrix = []\n    matrix.append(list(i for i in input()))\n    matrix.append(list(i for i in input()))\n    c = 0\n    for i in range(len(matrix[0]) - 1):\n        if matrix[0][i] == '0' and matrix[1][i] == '0':\n            if matrix[0][i + 1] == '0':\n                matrix[0][i] = 'X'\n                matrix[1][i] = 'X'\n                matrix[0][i + 1] = 'X'\n                c += 1\n            elif matrix[1][i + 1] == '0':\n                matrix[0][i] = 'X'\n                matrix[1][i] = 'X'\n                matrix[1][i + 1] = 'X'\n                c += 1\n        elif matrix[0][i] == '0':\n            if matrix[0][i + 1] == '0' and matrix[1][i + 1] == '0':\n                matrix[0][i] = 'X'\n                matrix[0][i + 1] = 'X'\n                matrix[1][i + 1] = 'X'\n                c += 1\n        elif matrix[1][i] == '0':\n            if matrix[0][i + 1] == '0' and matrix[1][i + 1] == '0':\n                matrix[1][i] = 'X'\n                matrix[0][i + 1] = 'X'\n                matrix[1][i + 1] = 'X'\n                c += 1\n    return c\n\nprint(go())\n", "r1=input()\nr2=input()\nn=len(r1)\nl=[0]\nfor i in range(n):\n\tif r1[i]=='0':\n\t\tif r2[i]=='0':\n\t\t\tl.append(2)\n\t\telse:\n\t\t\tl.append(1)\n\telse:\n\t\tif r2[i]=='X':\n\t\t\tl.append(0)\n\t\telse:\n\t\t\tl.append(-1)\nl.append(0)\ns=len(l)\ncount=0\nu=1\ne=1\nwhile(u<s-1):\n\tif l[u]==2 and e==1:\n\t\tif l[u+1]==2:\n\t\t\te=2\n\t\t\tu=u+1\n\t\t\tcontinue\n\t\telif (l[u+1]==1 or l[u+1]==-1):\n\t\t\tcount=count+1\n\t\t\tu=u+2\n\t\t\tcontinue\n\t\telse:\n\t\t\tu=u+2\n\t\t\tcontinue\n\tif l[u]==2 and e==2:\n\t\tif l[u+1]==2:\n\t\t\tcount=count+2\n\t\t\tu=u+2\n\t\t\te=1\n\t\t\tcontinue\n\t\telse:\n\t\t\tcount=count+1\n\t\t\tu=u+1\n\t\t\te=1\n\t\t\tcontinue\n\tif l[u]==1 or l[u]==-1:\n\t\tif l[u+1]==2:\n\t\t\tcount=count+1\n\t\t\tu=u+2\n\t\t\tcontinue\n\t\telse:\n\t\t\tu=u+1\n\t\t\tcontinue\n\tif l[u]==0:\n\t\tu=u+1\nprint (count)", "def ii():\n    return int(input())\ndef mi():\n    return map(int, input().split())\ndef li():\n    return list(mi())\n\nss = [input().strip(), input().strip()]\ns = [a + b for a, b in zip(ss[0], ss[1])] + ['XX']\nn = len(s)\n\ndef solve(i, j):\n    c = 0\n    k = i\n    while k < j - 1:\n        if s[k] == '0X' and s[k + 1] == '00':\n            c += 1\n            k += 2\n        elif s[k] == 'X0' and s[k + 1] == '00':\n            c += 1\n            k += 2\n        elif s[k] == '00' and s[k + 1] == 'X0':\n            c += 1\n            k += 2\n        elif s[k] == '00' and s[k + 1] == '0X':\n            c += 1\n            k += 2\n        elif s[k] == '00' and s[k + 1] == '00':\n            c += 1\n            s[k + 1] = '0X'\n            k += 1\n        else:\n            k += 1\n    return c\n\ni = 0\nc = 0\nwhile i < n:\n    if s[i] == 'XX':\n        i += 1\n        continue\n    j = i + 1\n    while s[j] != 'XX':\n        j += 1\n    c += solve(i, j)\n    i = j\nprint(c)", "def main():\n    a, b = [i for i in input()], [i for i in input()]\n    l = len(a)\n    c = 0\n    for i in range(l - 1):\n        if a[i] == '0':\n            if b[i] == '0':\n                if a[i + 1] == '0':\n                    c += 1\n                    a[i], b[i], a[i + 1] = 1, 1, 1\n                elif b[i + 1] == '0':\n                    c += 1\n                    a[i], b[i], b[i + 1] = 1, 1, 1\n            elif a[i + 1] == '0' and b[i + 1] == '0':\n                c += 1\n                a[i], a[i + 1], b[i + 1] = 1, 1, 1\n        elif b[i] == '0' and b[i + 1] == '0' and a[i + 1] == '0':\n            c += 1\n            b[i], a[i + 1], b[i + 1] = 1, 1, 1\n    print(c)\n    return 0\nmain()\n", "#!/usr/bin/env python3\n\nss = [input().strip() for _ in range(2)]\nn = len(ss[0])\n\ncnt = 0\nhad1 = False\nhad2 = False\n\nfor i in range(n):\n\tccur = sum(s[i] == '0' for s in ss)\n\tif ccur == 2:\n\t\tif had1:\n\t\t\tcnt += 1\n\t\t\thad1 = False\n\t\telif had2:\n\t\t\tcnt += 1\n\t\t\thad2 = False\n\t\t\thad1 = True\n\t\telse:\n\t\t\thad2 = True\n\telif ccur == 1:\n\t\tif had1:\n\t\t\thad1 = True\n\t\telif had2:\n\t\t\tcnt += 1\n\t\t\thad2 = False\n\t\telse:\n\t\t\thad1 = True\n\telse:\n\t\thad1 = False\n\t\thad2 = False\n\t\nprint (cnt)\n", "l1=list(str(input()))\nl2=list(str(input()))\nn=len(l1)\ncount=0\nfor i in range(n-1):\n    if l1[i]=='0' and l1[i+1]=='0':\n        if l2[i]=='0':\n            l1[i],l1[i+1],l2[i]='X','X','X'\n            count+=1\n        elif l2[i+1]=='0':\n            l1[i],l1[i+1],l2[i+1]='X','X','X'\n            count+=1\n    if l2[i]=='0' and l2[i+1]=='0':\n        if l1[i]=='0':\n            l2[i],l2[i+1],l1[i]='X','X','X'\n            count+=1\n        elif l1[i+1]=='0':\n            l2[i],l2[i+1],l1[i+1]='X','X','X'\n            count+=1\nprint(count)", "s1 = input()\ns2 = input()\n\ndesk = [list(s1), list(s2)]\n\nln = len(s1)\nans = 0\n\n\ndef need(i):\n    return [desk[0][i: i + 2], desk[1][i: i + 2]]\n\n\nfor i in range(ln - 1):\n    if need(i) == [['0', '0'], ['0', '0']] or need(i) == [['0', '0'], ['0', 'X']]:\n        desk[0][i] = 'X'\n        desk[0][i + 1] = 'X'\n        desk[1][i] = 'X'\n\n    elif need(i) == [['0', '0'], ['X', '0']]:\n        desk[0][i] = 'X'\n        desk[0][i + 1] = 'X'\n        desk[1][i + 1] = 'X'\n\n    elif need(i) == [['0', 'X'], ['0', '0']]:\n        desk[0][i] = 'X'\n        desk[1][i] = 'X'\n        desk[1][i + 1] = 'X'\n\n    elif need(i) == [['X', '0'], ['0', '0']]:\n        desk[0][i + 1] = 'X'\n        desk[1][i] = 'X'\n        desk[1][i + 1] = 'X'\n\n    else:\n        continue\n\n    ans += 1\n\nprint(ans)\n", "\nl1=[]\nl2=[]\nfor i in input():\n\tl1.append(i)\nfor i in input():\n\tl2.append(i)\ncount=0\t\nc=0\nwhile c<len(l1)-1:\n\tnewli=[l1[c],l1[c+1],l2[c],l2[c+1]]\n\ttry:\n\t\tif l1[c]==l1[c+1]==l1[c+2]==l2[c]==l2[c+1]==l2[c+2]=='0':\n\t\t\tcount+=2\n\t\t\tc+=3\n\t\t\tcontinue\n\texcept:\n\t\tpass\n\tif newli.count('0')>=3:\n\t\tcount+=1\n\t\tc+=2\n\telse:\n\t\tc+=1\t\nprint(count)"]