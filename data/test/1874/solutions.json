["from math import sqrt\n\na, b, c = list(map(int, input().split()))\n# a, b, c = 2, 5, 3\n\nV1 = a ** 3 * sqrt(2) / 12\nV2 = sqrt(2) * (b ** 3) / 6\nV3 = ((5 + sqrt(5)) / 24) * (c ** 3)\n\nprint(V1 + V2 + V3)\n", "__author__ = 'panag'\nimport sys\nimport math\n\nl1, l2, l3 = map(int, sys.stdin.readline().split(' '))\n\n#print(l1, l2, l3)\n#1\n\n\nv1 = ((math.sqrt(3)/4*l1**2) * 1/3 * (math.sqrt(l1**2 - (math.sqrt(3)/3*l1)**2))) + (l2 ** 2 * 1/3 * (math.sqrt(l2**2 - (l2/math.sqrt(2))**2))) + (((math.sqrt(5)*math.sqrt(5+2*math.sqrt(5)))/4 * l3**2) * 1/3 * (math.sqrt(l3**2 - ((math.sqrt(10)*math.sqrt(5+math.sqrt(5)))/10 * l3)**2)))\n\nprint(v1)", "from math import sin, cos, pi, tan\n\nl3, l4, l5 = map(int, input().split())\n\ndef f(n, x):\n    R = 0.5 * x / sin(pi / n)\n    h = (x**2 - R**2)**0.5\n    base = n * R**2 * sin(2 * pi / n) * 0.5\n    return base * h / 3\n\n\nprint(f(3, l3) + f(4,l4) + f(5,l5))", "a, b, c = list(map(int, input().split()))\nans = (a ** 3 * 2 ** 0.5) / 12\nans += (b ** 3 * 2 ** 0.5) / 6\nR = 10 ** 0.5 / 10 * (5 + 5 ** 0.5) ** 0.5 * c\nX = (c ** 2 - R ** 2) ** 0.5\ns = c ** 2 * (25 + 10 * 5 ** 0.5) ** 0.5 / 4\nans += X * s / 3\nprint(ans)", "l3,l4,l5=list(map(int,input().split()))\nV3=2**0.5/12*l3**3\nV4=2**0.5/6*l4**3\nV5=0.3015028323958315*l5**3\nprint(V3+V4+V5)\n", "from functools import reduce\nfrom math import factorial\nl1, l2, l3 = [int(x) for x in input().split()]\nA = (2**0.5)/12\nB = ((15 + 5*5**0.5)/288)**0.5\nprint((l1**3 + 2*l2**3)*A + B*l3**3)\n\n", "from decimal import *\nfrom math import sqrt,tan,pi\n\ndef __starting_point():\n\n    getcontext().prec = 50\n\n    l3,l4,l5 = map( Decimal , input().split() )\n    #print(l3,l4,l5)\n\n    S3 = Decimal(sqrt(3))*l3*l3/4\n    H3 = Decimal(sqrt(6))*l3/3\n    area3 = S3*H3/3\n\n    S4 = l4*l4\n    H4 = Decimal(sqrt(2))*l4/2\n    area4 = S4*H4/3\n\n    h5 = l5*Decimal(tan(54*pi/180))/2\n    S5 = (l5*h5/2)*5\n    H5 = Decimal(sqrt((3*l5*l5/4)-(h5*h5)))\n    area5 = S5*H5/3\n\n    res = area3 + area4 + area5\n\n    print(res)\n__starting_point()", "l3, l4, l5 = map(int, input().split())\nv3 = l3 ** 3 / (6 * 2 ** 0.5)\nv4 = l4 ** 3 / (3 * 2 ** 0.5)\nv5 = l5 ** 3 / 12 * (5 * (3 + 5 ** 0.5) / 2) ** 0.5\nprint(v3 + v4 + v5)", "import math\n\na,b,c=map(float,input().split())\nans=0.0\nans += float(math.pow(a,3)*math.sqrt(2)/12);\nans += float(math.pow(b,3)*math.sqrt(2)/6);\nans += float(5*math.pow(c,3)*math.tan(math.radians(54))*math.sqrt(1-1/(4*math.cos(math.radians(54))*math.cos(math.radians(54))))/12);\nprint(\"%.20f\" % ans)", "a, b, c = map(int, input().split())\n\nv = a**3/6/2**.5\nv += b**3/3/2**.5\nv += c**3*(5 + 5**.5)/24\n\nprint(v)", "import math\na,b,c = list(map(int,input().split()))\nv1 = (math.sqrt(2)*a**3)/12\nv2 = b**3/(3*math.sqrt(2))\nx = c/(2*math.cos(0.9424777960769379717))\nv3 = (5*c**2*math.tan(0.9424777960769379717)*math.sqrt(c**2-x**2))/12\nprint(v1+v2+v3)\n", "import math\nl1, l2, l3 = list(map(int, input().split()))\nm1 = l1 * l1 - l1 * l1 / 4\nh1 = math.sqrt(m1 - m1 / 9)\nv1 = l1 * math.sqrt(m1) * h1 / 6\n\nm2 = l2 * l2 - l2 * l2 / 4\nh2 = math.sqrt(m2 - l2 * l2 / 4)\nv2 = l2 * l2 * h2 / 3\n\nm3 = l3 * l3 - l3 * l3 / 4\nx = l3 * math.tan(54 * math.pi / 180) / 2\nh3 = math.sqrt(m3 - x * x)\ns3 = 5 * l3 * l3 / math.tan(math.pi / 5) / 4\nv3 = s3 * h3 / 3\n\nprint(v1 + v2 + v3)\n", "import math\n\nl3, l4, l5 = list(map(int, input().split(' ')))\nv3 = l3 ** 3 * math.sqrt(2) / 12\nv4 = l4 ** 3 / math.sqrt(2) / 3\nalpha = math.pi / 5\nv5 = 5 / 12 * l5 ** 3 / math.tan(alpha) * math.sqrt(1 - 1 / (4 * math.sin(alpha) ** 2))\nprint(\"%.11f\" % (v3 + v4 + v5))", "def cat(h, c):\n    return (h * h - c * c) ** 0.5\n\nl3, l4, l5 = list(map(float, input().split()))\n\ns3 = l3 * l3 * 3. ** 0.5 / 4.\ns4 = l4 * l4\ns5 = (l5 * l5 * (25. + 10 * (5 ** 0.5)) ** 0.5) / 4.\n\nr3 = l3 / (3. ** 0.5)\nr4 = l4 / (2. ** 0.5)\nr5 = l5 / 10. * (10. ** 0.5 * (5. + 5. ** 0.5) ** 0.5)\n\nh3 = cat(l3, r3)\nh4 = cat(l4, r4)\nh5 = cat(l5, r5)\n\nv3 = s3 * h3 / 3.\nv4 = s4 * h4 / 3.\nv5 = s5 * h5 / 3.\nprint(v3 + v4 + v5)\n\n", "from math import sqrt as s\n\nx, y, z = map(int, input().split())\n\nprint(pow(x, 3) * (1 / 6 / s(2)) + pow(y, 3) * (s(2) / 6) + pow(z, 3) * ((5 + s(5)) / 24))", "import math\n\ndef DegToRad(x):\n\treturn (math.acos(-1) / 180) * x\n\t\n\nl3, l4, l5 = map(int, input().split())\nv3 = l3 * l3 * l3 * math.sqrt(2) / 12\nv4 = l4 * l4 * l4 * math.sqrt(2) / 6\na = l5; b = a / math.sqrt(2 - 2 * math.cos(DegToRad(72))); h = math.sqrt(a * a - b * b); s = b * b * math.sin(DegToRad(72)) * 2.5; v5 = s * h / 3;\nprint(v3 + v4 + v5)", "import math\n\nl3, l4, l5 = list(map(int, input().split(' ')))\n\nprint(math.sqrt(2)*l3*l3*l3/12 + math.sqrt(2)*l4*l4*l4/6 + (5+math.sqrt(5))*l5*l5*l5/24)\n", "a,a1,a2 = map(int,input().split())\nprint(a**3 / 6 / 2**.5 + a1**3 * 2**.5 / 6 + a2**3 * (5 + 5 ** .5) / 24)", "sq2 = 2**0.5\ndef PyraVolume(number, edge_length):\n    el3 = edge_length**3\n    if number == 3:\n        return el3 / (6 * sq2)\n    elif number == 4:\n        return el3 / (3 * sq2)\n    elif number == 5:\n        return el3 * (5 + 5**0.5) / 24\n\na, b, c = list(map(int, input().split()))\nprint(PyraVolume(3, a) + PyraVolume(4, b) + PyraVolume(5, c))\n", "3\n# Copyright (C) 2016 Sayutin Dmitry.\n#\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; version 3\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; If not, see <http://www.gnu.org/licenses/>.\n\nimport math\n\na, b, c = list(map(int, input().split()))\nv1 = (a ** 3) * (2 ** 0.5) / 12\nv2 = (b ** 3) * (2 ** 0.5) / 6\n\nphi = 2 * math.pi / 5\nL = c / ((2 - 2 * math.cos(phi)) ** 0.5)\nv3 = 2.5 * L * L * math.sin(phi) * ((c * c - L * L) ** 0.5) / 3\n\nprint(v1 + v2 + v3)\n", "import math\nns = [3,4,5]\nL = list(map(int, input().split()))\nPI = math.acos(-1)\nans = 0\nfor n, l in zip(ns, L):\n    ang = PI / n\n#    l / 2 / r = math.cos(ang)\n    r = l / 2 / math.sin(ang)\n    S = n * math.sin(2*ang) * r * r / 2\n    h = (l**2 - r**2)**0.5\n#   print(S,h)\n    ans += S * h / 3;\nprint(\"%.10f\" % (ans))\n    \n"]