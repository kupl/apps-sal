["import sys\n\nreadline=sys.stdin.readline\n\ns=list(readline().strip())\nn=len(s)\nf=n%2\nmid=s[n//2]\n\nfor i in range(n//2):\n  if s[n//2-i-1]!=mid or s[(n+1)//2+i]!=mid:\n    print(((n+1)//2+i))\n    break\nelse:\n  print(n)\n  \n", "import sys\nsys.setrecursionlimit(100000000)\n\ndef main():\n    S = input()\n    N = len(S)\n    ans = 0\n    before = 0\n    for i in range(N - 1):\n        if S[i] != S[i + 1]:\n            ans = max(ans,min(N - before,i + 1))\n            before = i + 1\n    ans = max(ans,N - before)\n    print(ans)\ndef __starting_point():\n    main()\n__starting_point()", "S = input()\nL = len(S)\nnow = S[0]\nok = True\nans = 10**18\nfor i in range(1, L):\n    if S[i] != now:\n        now = S[i]\n        ans = min(ans, max(i, L-i))\n        ok = False\nif ok:\n    print(L)\nelse:\n    print(ans)\n", "s = input()\ni = (len(s) - 1) // 2\nj = len(s) // 2\nk = s[i]\nwhile i >= 0:\n  if s[i] != k or s[j] != k:\n    break\n  i -= 1\n  j += 1\nif i <  0:\n  print(len(s))\nelse:\n  print(j)", "s=input()\nn=len(s)\nans=n\nfor i in range(n-1):\n  if s[i+1]!=s[i]:   \n    ans=min(ans,max(i+1,n-i-1))\nprint(ans)", "import math\ndef f(s):\n    if len(s)%2==0: p=len(s)//2-1\n    else: p=len(s)//2\n    \n    q=p\n    while  q<len(s) and s[p]==s[q]:\n        q+=1\n    return q\n\n\n\ns=input()\nl=len(s)\nans=l\nfor i in range(len(s)-1):\n    if s[i]!=s[i+1]:\n        ans=min(ans, max(i+1,l-i-1) )\nprint(ans)", "s=list(input())\nl=[len(s)]\nfor i in range(len(s)-1):\n  if s[i]!=s[i+1]:\n    l.append(max(i+1,len(s)-i-1))\nprint(min(l))", "s = input()\nlns = len(s)\nr = lns\nfor i, (b, c) in enumerate(zip(s, s[1:])):\n    if b != c:\n        r = min(r, max(i+1, lns-i-1))\nprint(r)\n", "S = input()\nl = len(S)\nans = l\n\"\"\"\nif len(set(list(S))) == 1 and S[0] == \"0\":\n    print(0)\n    return\n\"\"\"\nfor i in range(l-1):\n    if S[i] != S[i+1]:\n        ans = min(ans,max(l-i-1,i+1))\nprint(ans)", "import sys\n\ns = sys.stdin.readline().rstrip()\nn = len(s)\n\ndef main():\n    m = n // 2\n    if n & 1:\n        l = s[m::-1]\n        r = s[m:]\n    else:\n        l = s[m-1::-1]\n        r = s[m:]\n    base = l[0]\n\n    cnt = m\n    i = 0\n    if n & 1:\n        m += 1\n    while i < m:\n        if l[i] == r[i] == base:\n            i += 1\n            cnt += 1\n        else:\n            break\n    return cnt\n    \ndef __starting_point():\n    ans = main()\n    print(ans)\n__starting_point()", "import sys\nreadline = sys.stdin.readline\n\nS = readline().rstrip()\n\nans = len(S)\nfor i in range(1,len(S)):\n  if S[i] != S[i - 1]:\n    longer = max(i, len(S) - i)\n    if ans > longer:\n      ans = longer\n      \nprint(ans)", "#dame \ndef main():\n    S = input()\n    r = len(S)\n    if S.count('0') == r:\n        return r\n    if S.count('1') == r:\n        return r\n    N = len(S)\n    one = S[0] == '1'\n    c = 0\n    for i in range(N):\n        if (S[i] == '1' and one) or (S[i] == '0' and not one):\n            continue\n        r = min(r, max(i, N-i))\n        one = S[i] == '1'\n    return r\nprint((main()))\n", "S = list(input())\nN = len(S)\n\nK = N // 2\n\nif N % 2 == 0:\n    if S[K - 1] == S[K]:\n        tmp = S[K - 1]\n    else:\n        print (K)\n        return\n    i = 0\n    while i < K and S[K - 1 - i] == S[K + i] == tmp:\n        i += 1\n    print (K + i)\nelse:\n    tmp = S[K]\n    i = 1\n    while i <= K and S[K - i] == S[K + i] == tmp:\n        i += 1\n    print (K + i)", "s=input();l=[];n=len(s)\nfor i in range(n-1):\n if s[i]!=s[i+1]:l+=[max(i+1,n-i-1)]\nprint(min(l)if l else n)", "s = input()\n\nhalf = (len(s)-1)//2\n\nans = half+1\nc = s[half]\nfor x,y in zip(s[half+1:],s[half-(len(s)%2==1)::-1]):\n    if x==c and y==c:\n        ans += 1\n    else:\n        break\nprint(ans)", "S=input()\nn=len(S)\nif n%2:\n    m=n//2\n    t=S[m]\n    for i in range(m):\n        if S[m+i+1]!=t or S[m-i-1]!=t:\n            a=m+i+1\n            break\n    else:\n        a=n\nelse:\n    m=n//2\n    t=S[m]\n    for i in range(m):\n        if S[m+i]!=t or S[m-i-1]!=t:\n            a=m+i\n            break\n    else:\n        a=n\nprint(a)", "from itertools import groupby\nS = input()\nN = len(S)\nG = [len(list(l)) for _, l in groupby(S)]\nA = 0\nfor g in G:\n    A += g\n    if A >= (N+1) // 2:\n        ans = min(A, N-A+g)\n        print(ans)\n        break", "S = input()\nN = len(S)\nres = N\nfor i in range(N - 1):\n    if S[i] != S[i + 1]:\n        res = min(res, max(i + 1, N - (i + 1)))\nprint(res)", "s = list(input())\nl = len(s)\nif l % 2 == 0:\n    for i in range(l//2):\n        a = s[l//2]\n        if s[l//2 - 1 - i] != a or s[l//2 + i] != a:\n            print(l//2 + i)\n            return\nelse:\n    for i in range(1, (l-1)//2 + 1):\n        a = s[(l-1)//2]\n        if s[(l-1)//2 - i] != a or s[(l-1)//2 + i] != a:\n            print((l-1)//2 + i)\n            return\nprint(l)", "import sys\n#input = sys.stdin.buffer.readline\n \ndef main():\n    s = input()\n    l = len(s)\n    if \"0\" not in s or \"1\" not in s:\n        print(l)\n    else:\n        ans = 10**6\n        for i in range(l-1):\n            if s[i] != s[i+1]:\n                ans = min(ans,max(i+1,l-i-1))\n        print(ans)\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "s = input()\nl = len(s)\nans = l\nfor i in range(l - 1):\n    if s[i] != s[i + 1]:\n        ans = min(ans, max(i + 1, l - i - 1))\nprint(ans)", "S = input()\nN = len(S)\nans = N\nfor i in range(N - 1):\n    if S[i] != S[i + 1]:\n        ans = min(ans, max(i + 1, N - (i + 1)))\nprint(ans)\n", "import numpy as np\nS=str(input())\nX=[]\nc=1\nfor i in range(1,len(S)):\n  if S[i]==S[i-1]:\n    c +=1\n  elif S[i]!=S[i-1]:\n    X +=[c]\n    c=1\n  if i==len(S)-1:\n    X +=[c]\nif len(S)==1:\n  X=[1]\nif len(X)>=3:\n  X=np.cumsum(X)\n  t=float('inf')\n  for i in range(len(X)-1):\n    u=max(X[i],len(S)-X[i])\n    t=min(u,t)\n  answer=t\nelif len(X)==1:\n  answer=X[0]\nelif len(X)==2:\n  answer=max(X)\nprint(answer)", "S = input()\nL = len(S)\nK = L\nfor i in range(1, L):\n    if S[i-1] != S[i]:\n        K = min(K, max(i, L - i))\nprint(K)\n", "s = [int(i) for i in input()]\nn = len(s)\nans = n\nfor i in range(n-1):\n  if s[i] != s[i+1]:\n    ans = min(ans, max(i+1, n-i-1))\nprint(ans)\n", "def find_cont(S):\n    N=len(S)\n    res=N\n    for i in range(N-1):\n        if S[i]!=S[i+1]:\n            res=min([res,max(i+1,N-1-i)])\n    return res\nS=input()\nprint((find_cont(S)))\n\n", "s=input()\ncs=[]\ncnt=1\npre=s[0]\nfor si in s[1:]:\n  if si==pre:\n    cnt+=1\n  else:\n    cs.append(cnt)\n    pre=si\n    cnt=1\ncs.append(cnt)\nn=len(s)\nans1=n\nmerge=0\nno_merge=n\nfor i in range(len(cs)):\n  merge+=cs[i]\n  no_merge-=cs[i]\n  tmp=max(merge,no_merge)\n  ans1=min(ans1,tmp)\ncs.reverse()\nans2=n\nmerge=0\nno_merge=n\nfor i in range(len(cs)):\n  merge+=cs[i]\n  no_merge-=cs[i]\n  tmp=max(merge,no_merge)\n  ans2=min(ans2,tmp)\nprint((max(ans1,ans2)))\n\n", "s = input()\nn = len(s)\nans = (n+1)//2\nif n%2:\n    x = s[n//2]\n    for i in range(1,n//2+1):\n        if s[n//2-i] == s[n//2+i] == x:\n            ans += 1\n        else:\n            break\nif n%2==0:\n    if s[n//2] == s[n//2-1]:\n        ans += 1\n        x = s[n//2]\n        for i in range(1,n//2):\n            if s[n//2-1-i] == s[n//2+i] == x:\n                ans += 1\n            else:\n                break\nprint(ans)", "S=input()\nl=len(S)\ncnt=(l+1)//2\nn=l-cnt\nb=S[l//2]\nif l%2==0:\n    for i in range(n):\n        if S[l//2-i-1]!=b or S[l//2+i]!=b:\n            break\n        cnt+=1\nelse:\n    for i in range(n):\n        if S[l//2-i-1]!=b or S[l//2+i+1]!=b:\n            break\n        cnt+=1\nprint(cnt)", "def main():\n    S = input()\n    l = len(S)\n    ans = l\n    #\u30c7\u30fc\u30bf\u52a0\u5de5\n    for i, s in enumerate(S[1:]):\n        if s != S[i]:\n            ans = min(ans, max(i+1, l-1-i))\n    print(ans)\n    \nmain()", "import math\ndef f(s):\n    if len(s)%2==0: p=len(s)//2-1\n    else: p=len(s)//2\n    \n    q=p\n    while  q<len(s) and s[p]==s[q]:\n        q+=1\n    return q\n\n\n\ns=input()\n\nprint(min(f(s),f(s[::-1])))", "S = [0] + list(map(int, list(input())))\nN = len(S) - 1\n\ndef change(s, c):\n  if c == 0:\n    return s\n  else:\n    return 1 - s\n\ndef check(k):\n  count = [0] * (N+1)\n  T = S.copy()\n  for i in range(1, N+1):\n    c = count[i-1]\n    s = change(S[i], c)\n    if i < N - k + 2:\n      T[i] = 0\n      if s == 1:\n        count[i] = (c + 1) % 2\n      else:\n        count[i] = c        \n    else:\n      T[i] = s\n      count[i] = c      \n  n = 0\n  for t in T[1:]:\n    if t == 1:\n      break\n    n += 1\n  return n >= k\n\n\nleft = 1 # True\nright = N\nwhile left + 1 < right:\n  mid = (left + right) // 2\n  if check(mid):\n    left = mid\n  else:\n    right = mid\n\nif right == N and check(N):\n  print(N)\nelse:\n  print(left)", "S = input()\nN = len(S)\n\ndef f(k):\n    s = S[-k:k]\n    if s == \"\":return False\n    return s.count(s[0])!=len(s)\n\ndef binary_search(l,r,func):\n    if func(l):return l-1\n    if not func(r):return r\n    while l+1<r:\n        i = (l+r)//2\n        if func(i):\n            r = i\n        else:\n            l = i\n    return l\n\nprint(binary_search(0,N,f))", "s = input()\nn = len(s)\n\nl = 0\nr = n//2 + 1\n\nwhile r - l > 1:\n    m = l + (r-l)//2\n    d = n//2 - m\n    if s[d:n-d].count(\"0\") == 0 or s[d:n-d].count(\"1\") == 0:\n        l = m\n    else:\n        r = m\n\nif n % 2 == 0:\n    print((n//2+l))\nelse:\n    print((n//2+l+1))\n", "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(S: str):\n    N = len(S)\n    m = N\n    for i in range(N - 1):\n        if S[i] != S[i + 1]:\n            m = min(m, max(N - (i + 1), i + 1))\n    print(m)\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    S = next(tokens)  # type: str\n    solve(S)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# solution\n\nimport io\nimport sys\nimport math\n\ndata = input()\nn = len(data)\nans = n\nfor i in range(n - 1):\n    if data[i] != data[i + 1]:\n        ans = min(ans, max(i + 1, n - i - 1))\nprint(ans)", "S = input()\n\nans = len(S)\nfor i in range(len(S) - 1):\n    if S[i] != S[i+1]:\n        ans = min(max(len(S) - i - 1, i + 1),ans)\nprint(ans)\n", "s = input()\n\"\"\"\ns = '101'\ns = '100000000'\ns = '00001011'\n\"\"\"\nk = len(s)\nfor i in range(1, len(s)):\n    if s[i-1] != s[i]:\n        k = min(k, max(i, len(s)-i))\nprint(k)\n\n\n", "S = input()\nN = len(S)\n\nif len(set(S))==1:\n  print(N)\n  return\n\nK = (N+1)//2\nX = set()\nif N&1:\n  X = {S[K-1]}\n  l = K-2\n  r = K\nelse:\n  X = set()\n  l = K-1\n  r = K\n  \nwhile l:\n  X.add(S[l])\n  X.add(S[r])\n  if len(X)>1: break\n  K += 1\n  l -= 1\n  r += 1\n\nprint(K)", "s = input()\n\nl = len(s)\nans = l\nfor i, (e1, e2) in enumerate(zip(s, s[1:]), 1):\n    if e1 != e2:\n        ans = min(ans, max(i, l - i))\n\nprint(ans)\n", "s=input();n=r=len(s)\nfor k in range(n-1):\n  if s[k]!=s[k+1]:\n    r=min(r,max(k+1,n-k-1))\nprint(r)", "s=input()\nnow=len(s)\nfor i in range(len(s)-1):\n\tif s[i]!=s[i+1]:\n\t\tnow=min(now,max(i+1,len(s)-i-1))\nprint(now)", "\n\n#!/usr/bin/env python\n\n# -*- coding: utf-8 -*-\n\n\n\ns = input()\n\nif len(s) % 2 == 0:\n    number = s[len(s) // 2]\n    other = s[len(s) // 2 - 1]\n    p = len(s) // 2\n    cnt = 0\n    if number == other:\n        cnt += 1\n        for i in range(1, p):\n            if s[p + i] == s[p - 1 - i] == number:\n                cnt += 1\n            else:\n                break\n    print((p + cnt))\n\n\nelse:\n    number = s[len(s) // 2]\n    cnt = 0\n    p = len(s) // 2\n\n    for i in range(1, len(s) // 2 + 1):\n        if s[p - i] == s[p + i] == number:\n            cnt += 1\n        else:\n            break\n    print((p + 1 + cnt))\n", "S = list(input())\nlenS = len(S)\nS = S + ['.']\nK = lenS\ni = 0\nps = S[0]\nfor s in S:\n    if s != ps:\n        K = min(K, max(i, lenS-i))\n        ps = s\n    i += 1\nprint(K)", "S = input()\nc0 = S[len(S)//2]\nr = S.find(\"1\" if c0 == \"0\" else \"0\", len(S)//2)\nif r < 0: r = len(S)\nl = S.rfind(\"1\" if c0 == \"0\" else \"0\", 0, len(S)//2)\nl += 1\nK = min(r, len(S)-l)\n#print(l, r, K)\nprint(K)\n", "S=input()\nn=len(S)\nans=n\nfor i in range(n-1):\n  if S[i] != S[i+1]:\n    ans=min(ans, max(i+1, n-i-1))\n\nprint(ans)", "s = input()\nn = len(s)\n\nkey = []\ncount = 1\nfor i in range(n-1):\n  if s[i] != s[i+1]:\n    key.append(count)\n    count = 1\n  else:\n    count += 1\nkey.append(count)\n\nsum_key = sum(key)\nans = 10000000\nfor i in range(len(key)):\n    if i != 0:\n        key[i] += key[i-1]\n    ans = min(ans, max(key[i], n-key[i]))\n  \n\nprint(ans)", "S = input()\n\nn = len(S)\na = n\nfor i in range(n-1):\n    if S[i] != S[i+1]:\n        a = min(a, max(i+1, n-i-1))\n\nprint(a)\n", "s = input()\nL = len(s)\n\nl, r, p = 0, 0, s[L // 2]\nif L % 2 == 0:\n    l, r = L // 2 - 1, L // 2\nelse:\n    l, r = L // 2, L // 2\n\ncnt = 0\nwhile l >= 0 and r < L and s[l] == s[r] == p:\n    p = s[l]\n    cnt += 1\n    l -= 1\n    r += 1\n\nprint((cnt + L // 2))\n", "s=list(str(input()))\nn=len(s)\nans=10**10\nfor i in range(n-1):\n    if s[i]!=s[i+1]:\n        ans=min(ans,max(i+1,n-i-1))\n\nif ans==10**10:\n    print(n)\nelse:\n    print(ans)\n", "S = input()\nb = []\nfor i in range(len(S) - 1):\n    if S[i:i + 2] == \"01\" or S[i:i + 2] == \"10\":\n        b.append(len(S) - (i + 1) if i < len(S) // 2 else i + 1)\n\nprint((min(b) if len(b) != 0 else len(S)))\n", "S=input()\nN=len(S)\ncnt=N\nfor i in range(N-1):\n  if S[i]!=S[i+1]:\n    a=i+1\n    b=N-a\n    c=max(a,b)\n    cnt=min(c,cnt)\nprint(cnt)", "#N = int(input())\nS = str(input())\n#X, Y = map(int, input().split())\n#C = list(map(int, input().split()))\nN  =len(S)\nans = N\nfor i in range(1, N):\n  if S[i] != S[i - 1]:\n    now = max(i, N - i)\n    ans = min(ans, now)\n\nprint(ans)", "S = input()\nL = len(S)\n\nans = L\nfor i in range(1, L):\n    if S[i-1] != S[i]:\n        ans = min(max(L - i,i),ans)\nprint(ans)\n", "s = input()\n\nsl = list(s)\nsl.append(\"2\")\n\nn = len(sl)\nres=[]\n\ntemp =1\nfor i  in range(n-1):\n    if sl[i+1] == sl[i]:\n        temp +=1\n    else:\n        res.append(temp)\n        temp = 1\n\nresu = n-1\nm = n-1\n\nwhile len(res) >1:\n    resu = min(resu,max(res[0],m-res[0]))\n    x = res.pop(1)\n    res[0]  = res[0]+x    \n    \nprint(resu)", "w=input()\na=[(i+1)*(j==\"0\") for i,j in enumerate(w)]\nb=[(i+1)*(j==\"1\") for i,j in enumerate(w)]\nl=len(w)\nma=a[0];mb=b[0]\nfor t in range(1,l+1):\n\tma=max(ma,a[t-1])\n\tmb=max(mb,b[t-1])\n\tm=min(ma,mb)\n\tif l-m<t:\n\t\tprint(t-1)\n\t\treturn\nprint(l)", "S = input()\ncnt = [0]\nnow = '0'\nfor i in S:\n    if now == i:\n        cnt[-1] += 1\n    else:\n        cnt.append(1)\n        now = i\n\nans = len(S)\nsum = 0\nfor i in cnt:\n    sum += i\n    ans = min(ans, max(sum, len(S) - sum))\nprint(ans)", "s = input()\nn = len(s)\nt = s[::-1]\nans = n\nfor i in range(n-1):\n  if s[i] != s[i+1]:\n    ans = min(ans,max(i+1,n-i-1))\nprint(ans)\n", "S = input()\nn = len(S)    \nK = n\nfor k in range(n-1):\n    if S[k] != S[k+1]:\n        K = min(K, max(k+1, n-k-1))\nprint(K)\n", "s = str(input())\nn = len(s)\n\nif n == 1:\n    print(1)\n    return\n\nmaxs = []\nfor i in range(n-1):\n    if s[i] != s[i+1]:\n        maxs.append(max(i+1, n-i-1))\n\nif maxs != []:\n    print(min(maxs))\nelse:\n    print(n)", "# D - Wide Flip\n\nS = input()\n\nN = len(S)\nans = N\n\nif N == 1:\n    print((1))\nelse:\n    for i in range(N-1):\n        if S[i] != S[i+1]:\n            ans = min(ans, max(i+1, N-(i+1)))\n    print(ans)\n", "S = list(input())\nC = len(S)\nfor i in range(len(S) - 1):\n    if S[i] != S[i + 1]:\n        c = max(i + 1, len(S) - i - 1)\n        C = min(C, c)\nprint(C)", "def main():\n    S = input()\n    A = []\n    i, t = 1, S[0]\n    for s in S[1:]:\n        if s != t:\n            A.append(i)\n            i = 1\n            t = s\n        else:\n            i += 1\n    A.append(i)\n\n    m, l  = len(S), 0\n    for a in A:\n        t = max(l + a, len(S) - l - a)\n        m = min(m, t)\n        l += a\n    return m\n\nprint((main()))\n", "# [a,b] - [a,b) = {b} \u306a\u306e\u3067\u3001\u7aef\u306e\u65b9\u306f\u81ea\u7531\u3002\n# \u4e2d\u592e\u304c\u5358\u8272\u3067\u3042\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308c\u3070\u3088\u3044\u3002\n\nimport numpy as np\narr = np.array([int(x) for x in input()])\narr_c = arr.cumsum()\n\nN = arr.size\n\nanswer = 0\n\nfor K in range(N,0,-1):\n  left = N-K\n  right = K-1\n  # [left,right]\u304c\u5358\u8272\u3067\u3042\u308c\u3070\u3088\u3044\n  if left >= right:\n    answer = K\n    break\n  one_cnt = arr_c[right] - arr_c[left] + arr[left]\n  zero_cnt = (right - left + 1) - one_cnt\n  if one_cnt == 0 or zero_cnt == 0:\n    answer = K\n    break\n    \nprint(answer)\n", "S=list(input())\nn=len(S)\nans=n\nfor _ in range(n-1):\n\tif S[_]!=S[_+1]:\n\t\ttmp=max(_+1,n-(_+1))\n\t\tans=min(ans,tmp)\n\nprint(ans)\n", "s=input();n=r=len(s)\nfor k in range(n-1):\n  if s[k]!=s[k+1]: r=min(r,max(k+1,n-k-1))\nprint(r)", "S=input()\nl=len(S)\nif l%2==1:\n    m=S[l//2]\n    c=1\n    for i in range(l//2):\n        if S[l//2-i-1]==m and S[l//2+i+1]==m:\n            c+=2\n        else:\n            break\n    ans=c+(l-c)//2\nelse:\n    m1=S[l//2-1]\n    m2=S[l//2]\n    c=0\n    if m1==m2:\n        c=2\n        for i in range(l//2-1):\n            if S[l//2-i-2]==m1 and S[l//2+i+1]==m1:\n                c+=2\n            else:\n                break\n    ans=c+(l-c)//2\nprint(ans)\n\n", "from collections import deque\n\nx, y = deque(), deque()\ns = deque(list(input()))\nn = len(s)\nm = s[n // 2]\nans = (n + 1) // 2\nfor _ in range((n + 1) // 2):\n    x.appendleft(s.popleft())\nfor _ in range(n // 2):\n    y.appendleft(s.pop())\nif n % 2 == 1:\n    x.popleft()\nfor i in range(n // 2):\n    if x[i] == y[i] == m:\n        ans += 1\n    else:\n        break\nprint(ans)", "s = list(input())\nn = len(s)\nif n % 2 == 0:\n    for i in range(n//2):\n        a = s[n // 2]\n        if s[n // 2 - 1 - i] != a or s[n // 2 + i] != a:\n            print(n // 2 + i)\n            return\nelse:\n    for i in range(1, (n - 1) // 2 + 1):\n        b = s[(n-1)//2]\n        if s[(n - 1) // 2 - i] != b or s[(n - 1) // 2 + i] != b:\n            print((n-1)//2+i)\n            return\nprint(n)", "def main():\n    S = input()\n    N = len(S)\n    ans = N\n    for i in range(N - 1):\n        if S[i] != S[i + 1]:\n            ans = min([ans, max([i + 1, N - (i + 1)])])\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "s=input()\nl=len(s)\nans=l\nfor i in range(l-1):\n  if s[i]!=s[i+1]:\n    tmp=max(i+1,l-i-1)\n    ans=min(ans,tmp)\nprint(ans)", "s = input()\n\nn = len(s)\nans = n\nfor i in range(1, n):\n    if s[i - 1] != s[i]:\n        # left:  [0, i) -> length = i\n        # right: [i, n) -> length = n - i\n        ans = min(ans, max(i, n - i))\n\nprint(ans)\n", "S = input()\n\nN = len(S)\nL = []\ntemp = S[0]\nc = 1\nfor i in range(1, N-1):\n    if S[i] == temp:\n        c += 1\n    else:\n        L.append(c)\n        c = 1\n        temp = S[i]\nif S[N-1] == temp:\n    c += 1\nelse:\n    L.append(c)\n    c = 1\nL.append(c)\n\nans = N\nwhile len(L) >= 3:\n    if L[0] > L[-1]:\n        ans = min(ans, N-L[-1])\n        L[-2] += L[-1]\n        L.pop(-1)\n    else:\n        ans = min(ans, N-L[0])\n        L[1] += L[0]\n        L.pop(0)\n        \nif len(L) == 2:\n    ans = min(ans, max(L))\n    \nprint(ans)", "S = input()\nN = len(S)\nans = N\n\nfor n in range(N-1):\n  if S[n+1]!=S[n]:   \n    ans = min(ans,max(n+1,N-n-1))\n\nprint(ans)", "#!/usr/bin/env python3\nimport sys\nsys.setrecursionlimit(10**6)\n\ns = list(str(input()))\n\nmax_ = len(s)\nfor i in range(len(s)-1):\n    if s[i] != s[i+1]:\n        left = i+1\n        right = len(s)-left\n        # print(left, right)\n        tmp = max(left, right)\n\n        max_ = min(max_, tmp)\nprint(max_)\n", "s=input()\nn=len(s)\nif n%2==0:\n    if s[n//2-1]!=s[n//2]:\n        print(n//2)\n    else:\n        for i in range(2,n//2+1):\n            if s[n//2-i]!=s[n//2] or s[n//2-1+i]!=s[n//2]:\n                print(n//2+i-1)\n                break\n        else:\n            print(n)\nelse:\n    for i in range(1,n//2+1):\n        if s[n//2-i]!=s[n//2] or s[n//2+i]!=s[n//2]:\n            print(n//2+i)\n            break\n    else:\n        print(n)", "import itertools\nS = list(itertools.accumulate([0] + [int(_) for _ in input()]))\nN = len(S) - 1\nfor i in range(N, 0, -1):\n    if 2 * i < N:\n        break\n    if S[i] - S[N - i] in [0, 2 * i - N]:\n        break\nprint(i)\n", "S = list(input())\n\ndef check(x):\n    #print(S[len(S)-x:x])\n    for y in S[len(S)-x:x]:\n        if y != S[len(S)-x]: break\n    else:\n        return True\n    return False\n\ndef bisect(l,r):\n    if r - l == 1: return l\n    mid = (l+r) // 2\n    if check(mid) == False:\n        return bisect(l,mid)\n    else:\n        return bisect(mid,r)\nprint((bisect(0,len(S)+1)))\n\n", "S = input() + '#'\n\npressed = []\n\nprev = S[0]\ncount = 0\nfor s in S:\n    if s == prev:\n        count += 1\n    else:\n        prev = s\n        pressed.append(count)\n        count = 1\n\nleft_cumsum = []\nright_cumsum = []\n\ncumsum = 0\nfor count in pressed:\n    cumsum += count\n    left_cumsum.append(cumsum)\n\ncumsum = 0\nfor count in pressed[::-1]:\n    cumsum += count\n    right_cumsum.append(cumsum)\n\nlength = len(left_cumsum)\n\nif length == 1:\n    print(len(S)-1)\n    return\n\nchange_k = [0] * length\n\nfor idx in range(1, length):\n    k = right_cumsum[-idx-1]\n    change_k[idx-1] = k\n\nfor idx in range(1, length):\n    k = left_cumsum[-idx-1]\n    change_k[-idx] = max(change_k[-idx], k)\n\nans1 = min(change_k[::2])\nans2 = min(change_k[1::2])\nprint(max(ans1, ans2))", "s=input()\nans=len(s)\nfor i in range(len(s)-1):\n  if s[i]!=s[i+1]:\n    ans=min(ans,max(i+1,len(s)-i-1))\nprint(ans)", "S = input()\n\n## 0\u3092\u57fa\u6e96\u3068\u3057\u3066\u30010\u30681\u306e\u5883\u76ee\u3092\u8abf\u3079\u308b\nboundary = []\npre_state = '0'\nfor i in range(len(S)):\n  if S[i] != pre_state:\n    boundary.append(i)\n    pre_state = S[i]\nelse:\n  if S[-1] == '1':\n    boundary.append(len(S))\n    \nif len(boundary) == 0:\n  print((len(S)))\n  return\n    \n## \u7b54\u3048\u306f\u3001\u7aef\u304b\u3089\u4e00\u756a\u9060\u3044\u5883\u76ee\nlst = []\nfor i in range(len(boundary)):\n  lst.append(max(boundary[i], len(S)-boundary[i]))\nans = min(lst)\nprint(ans)\n", "s = input()\nlen_s = len(s)\nans = len_s // 2\ncenter = ans\nb = s[ans]\nif len_s % 2:\n  for i in range(center+1):\n    if s[center-i] == s[center+i] == b:\n      ans += 1\n    else:\n      break\nelse:\n  for i in range(center):\n    if s[center-1-i] == s[center+i] == b:\n      ans += 1\n    else:\n      break\nprint(ans)\n", "s = input()\nn = len(s)\nans = n\ns1 = s.count('1')\ni = 0\nwhile s1 != 0 and s1 != n:\n  s1 -= int(s[i]) + int(s[i + n - 1])\n  if n == 1:\n    s1 += int(s[i])\n  n -= 2\n  ans -= 1\n  i += 1\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 7)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nS = list(input())\nN = len(S)\n\nans = ceil(N, 2)\nfor i in range(ceil(N, 2), N):\n    # \u771f\u3093\u4e2d\u304b\u3089\u59cb\u3081\u3066\u3001\u53cd\u5bfe\u5074\u3068\u4e00\u81f4\u3057\u3066\u308b\u304b\u3068\u30011\u3064\u524d\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\n    if not S[i] == S[N-1-i] == S[i-1]:\n        break\n    ans += 1\nprint(ans)\n", "# D 3424320\nS = input()\nN = len(S)\ncenter_i = N//2\ncenter = S[center_i]\n\nans = N//2\nl = r = center_i\nif N%2==0:\n    l -= 1\nwhile l >= 0:\n    if not (S[l] == center == S[r]):\n        break\n    l -= 1\n    r += 1\n    ans += 1\nprint(ans)", "s = input()\nn = len(s)\nchange_cnt = 0\nprev_length = 1\nlength = 1\nans = n\nfor i in range(n - 1):\n    if s[i] != s[i + 1]:\n        ans = min(max(i + 1, n - (i+1)), ans)\nprint(ans)", "slist=list(map(int,list(input())))\nlen_s=len(slist)\n\nmin_answer=len_s\nfor i in range(1,len_s):\n  if slist[i-1]!=slist[i]:\n    min_answer=min(min_answer,max(i,len_s-i))\n    #print(i,len(slist)-i)\n\nprint(min_answer)", "s = input()\n\nl = len(s)\ncenter = s[l // 2]\ncnt = l % 2\nfor e1, e2 in zip(s[:l//2][::-1], s[l//2+l%2:]):\n    if center == e1 == e2:\n        cnt += 2\n    else:\n        break\n\nans = (l + cnt) // 2\nprint(ans)\n", "s = list(map(int, list(input())))\nans = len(s)\nfor i in range(len(s)-1):\n    if s[i]!=s[i+1]:\n        ans = min(ans, max(i+1, len(s)-i-1))\nprint(ans)\n", "S = input()\nMIN = 10 ** 8\nflag = 1\nfor i in range(len(S)-1):\n    if S[i] != S[i+1]:\n        flag = 0\n        MIN = min(MIN, max(i + 1, len(S) - i - 1))\nif flag:\n    MIN = len(S)\nprint(MIN)", "S = input()\nL = len(S)\n\nans = L\nfor i in range(L - 1):\n    if S[i] != S[i+1]:\n        ans = min(max(L - i - 1, i + 1),ans)\nprint(ans)\n", "def rle(s):\n    # ex. '01100011110' -> [1 2 3 4 1]\n    before_c = s[0]\n    ret = list()\n    cnt = 0\n    for c in s:\n        if before_c == c:\n            cnt += 1\n        else:\n            ret.append(cnt)\n            before_c = c\n            cnt = 1\n    if cnt > 0:\n        ret.append(cnt)\n    return ret\n\n\ndef main():\n    S = input()\n    N = len(S)\n    seq_cnt = rle(S)\n    if len(seq_cnt) == 1:\n        print(seq_cnt[0])\n        return\n    if len(seq_cnt) == 2:\n        print(max(seq_cnt))\n        return\n    # cumsum\n    cumsum_seq_cnt = [0 for _ in range(len(seq_cnt))]\n    rev_cumsum_seq_cnt = [0 for _ in range(len(seq_cnt))]\n    cumsum_seq_cnt[0] = seq_cnt[0]\n    rev_cumsum_seq_cnt[0] = seq_cnt[-1]\n    for i in range(1, len(seq_cnt)):\n        cumsum_seq_cnt[i] = cumsum_seq_cnt[i-1] + seq_cnt[i]\n        rev_cumsum_seq_cnt[i] = rev_cumsum_seq_cnt[i-1] + seq_cnt[-1-i]\n    # search\n    max_k = cumsum_seq_cnt[0]\n    rev_max_k= rev_cumsum_seq_cnt[0]\n    for i in range(1, len(seq_cnt)):\n        k = cumsum_seq_cnt[i]\n        if k <= N - cumsum_seq_cnt[i-1]:\n            max_k = k\n        rev_k = rev_cumsum_seq_cnt[i]\n        if rev_k <= N - rev_cumsum_seq_cnt[i-1]:\n            rev_max_k = rev_k\n    print(max([max_k, rev_max_k]))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "#\u521d\u3081\u306f0\u30681\u3067\u591a\u3044\u65b9\u3060\u3068\u601d\u3063\u305f\n#\u6b63\u78ba\u306b\u3084\u3063\u3066\u306f\u306a\u3044\u3051\u3069\u9023\u7d9a\u3059\u308b0or1\u3088\u308a\u9577\u304f\u306a\u3044\u3068\u3060\u3081\n#\u4e0a\u9650\u304c\u4f55\u304b\u3092\u8003\u3048\u308b\ns=input()\nl=len(s)\n\nans=1000000000000\nfor i in range(l-1):\n    if s[i]!=s[i+1]:\n        ne=max(i+1,l-i-1)\n        ans=min(ans,ne)\nif ans==1000000000000:\n    print(l)\nelse:\n    print(ans)\n\n", "S = input()\nlength = len(S)\ntemp = []\nfor i in range(1,length):\n    if S[i] != S[i-1]:\n        temp.append(max(i , length - i))\nif len(temp) == 0:\n    print(length)\nelse:\n    print(min(temp))", "S = input()\n\nl = (len(S)-1)//2\nr = len(S)//2\nm = S[l]\nwhile l >= 0:\n    if S[l] != m or S[r] != m:\n        break\n    l -= 1\n    r += 1\nif l < 0:\n    print((len(S)))\nelse:\n    print(r)\n\n", "I = input()\n\nn     = len(I)\nleft  = 0\nright = n - 1\n\nblock_left_index  = 0\nblock_right_index = n\n\n## Example:\n## 000011000\n## |     |\n##    or\n##     |    |\nwhile left < right:\n    if I[left] != I[left+1]:\n        block_left_index = left+1\n    if I[right] != I[right-1]:\n        block_right_index = right\n    left  += 1\n    right -= 1\n\nans = min(n-block_left_index, block_right_index)\nprint(ans, flush=True)\n", "def main():\n    s = input()\n    ans = len(s)\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            tmp = max(i+1, len(s)-i-1)\n            ans = min(ans, tmp)\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n  S = input()\n  j = 0\n  m = S[0]\n  ls = []\n  for i in range(len(S)):\n    if m!=S[i]:\n      ls.append(i-j)\n      j = i\n      m = S[i]\n  ls.append(len(S)-j)\n  N = len(ls)\n  if N<3:\n    print(max(ls))\n  else:\n    ans = float('inf')\n    sls = [ls[0]]\n    for i in range(1,N):\n      sls += [sls[-1]+ls[i]]\n    ans = min(max(sls[i], sls[-1]-sls[i]) for i in range(N-1))\n    print(ans)\n\ndef __starting_point():\n  main()\n__starting_point()", "from itertools import groupby, accumulate\n\nS = list(input())\nn = len(S)\ns = list(accumulate([len(list(j)) for i, j in groupby(S)]))\ns = [max(i, n - i) for i in s]\n\nprint((min(s)))\n"]