["nmq = input().split(' ')\nn, m, q = int(nmq[0]), int(nmq[1]), int(nmq[2])\nmt = []\nfor i in range(0, n):\n    mt.append([])\n    for j in range(0, m):\n        mt[-1].append((i, j))\nres = []\nfor i in range(0, n):\n    res.append([])\n    for j in range(0, m):\n        res[-1].append(0)\nfor i in range(0, q):\n    ins = input().split(' ')\n    if ins[0] == '1':\n        r = int(ins[1]) - 1\n        b = mt[r][0]\n        for j in range(0, m-1):\n            mt[r][j] = mt[r][j+1]\n        mt[r][m-1] = b\n    if ins[0] == '2':\n        c = int(ins[1]) - 1\n        b = mt[0][c]\n        for j in range(0, n-1):\n            mt[j][c] = mt[j+1][c]\n        mt[n-1][c] = b\n    if ins[0] == '3':\n        r = int(ins[1]) - 1\n        c = int(ins[2]) - 1\n        x = int(ins[3])\n        p = mt[r][c]\n        res[p[0]][p[1]] = x\nfor i in range(0, n):\n    for j in range(0, m-1):\n        print(res[i][j],' ', end='')\n    print(res[i][-1])\n    \n", "def rotate_r(ar, row, n):\n\tar[row] = ar[row][-n:] + ar[row][:-n]\n\treturn ar\n\ndef rotate_c(ar, m, col):\n\t#c = ar[col][0]\n\tc = ar[m - 1][col]\n\tfor i in range(m - 1, 0, -1):\n\t#for i in range(m - 1):\n\t\tar[i][col] = ar[i - 1][col]\n\t#ar[col][m - 1] = c\n\tar[0][col] = c\n\treturn ar\n\ndef print_matr(ar, n):\n\tfor i in range(n):\n\t\tprint(*ar[i])\t\t\n\nar2 = []\t\n\nn, m, q = list(map(int, input().split()))\n#for i in range(n):\n#\tar = list(map(int, input().split()))\n#\tar2.append(ar)\n\n\nquery = [0 for i in range(q)]\nrows = [0 for i in range(q)]\ncols = [0 for i in range(q)]\nnums = [0 for i in range(q)]\n\nfor i in range(q):\n\tar = list(map(int, input().split()))\n\tquery[i] = ar[0]\n\tif ar[0] == 3:\n\t\trows[i] = ar[1] - 1\n\t\tcols[i] = ar[2] - 1\n\t\tnums[i] = ar[3]\n\telif ar[0] == 1:\n\t\trows[i] = ar[1] - 1\n\telse:\n\t\tcols[i] = ar[1] - 1\n\n#print(query)\nans = [[0] * m for i in range(n)]\n\nfor i in range(q - 1, -1, -1):\n\tif query[i] == 3:\n\t\tans[rows[i]][cols[i]] = nums[i]\n\t\t#print('\\n')\n\t\t#print_matr(ans, n)\n\t\t#print(\"l\", rows[i] + 1, cols[i] + 1)\n\t\t#print(i, nums[i])\n\telif query[i] == 1:\n\t\tans = rotate_r(ans, rows[i], 1)\n\t\t#print('\\n')\n\t\t#print_matr(ans, n)\n\telse:\n\t\tans = rotate_c(ans, n, cols[i])\n\t\t#print('\\n')\n\t\t#print_matr(ans, n)\n\n#row, n = map(int, input().split())\n\n#print(rotate_r(ar2, 0, n))\nprint_matr(ans, n)\n#ans = rotate_c(ans, n, 0)\n#print_matr(ans, n)\n", "n,m,q=(int(z) for z in input().split())\ns=[]\nres=[]\nfor i in range(n):\n\tres.append([0]*m)\nfor i in range(q):\n\ts.append([int(z) for z in input().split()])\nwhile len(s)>0:\n\tif s[-1][0]==3:\n\t\tres[s[-1][1]-1][s[-1][2]-1]=s[-1][3]\n\telif s[-1][0]==2:\n\t\tr=res[-1][s[-1][1]-1]\n\t\tfor i in range(n-1,0,-1):\n\t\t\tres[i][s[-1][1]-1]=res[i-1][s[-1][1]-1]\n\t\tres[0][s[-1][1]-1]=r\n\telse:\n\t\tr=res[s[-1][1]-1][-1]\n\t\tfor i in range(m-1,0,-1):\n\t\t\tres[s[-1][1]-1][i]=res[s[-1][1]-1][i-1]\n\t\tres[s[-1][1]-1][0]=r\n\ts.pop()\nfor i in range(n):\n\tprint(' '.join(map(str,res[i])))", "a, b, c = map(int, input().split())\narr = []\nmat = [[0 for j in range(b)] for i in range(a)]\nfor i in range(c):\n    arr.append(input())\narr = arr[::-1]\nfor command in arr:\n    arra = [int(i) for i in command.split()]\n    if arra[0] == 1:\n        swp = mat[arra[1] - 1][b - 1]\n        for i in range(b):\n            mat[arra[1] - 1][i], swp = swp, mat[arra[1] - 1][i]\n    elif arra[0] == 2:\n        swp = mat[a - 1][arra[1] - 1]\n        for i in range(a):\n            mat[i][arra[1] - 1], swp = swp, mat[i][arra[1] - 1]\n    else:\n        mat[arra[1] - 1][arra[2] - 1] = arra[3]\nfor i in mat:\n    for j in i:\n        print(j, end=\" \")\n    print()", "m,n,q = map(int,input().split())\ninps = [map(lambda x: int(x)-1,input().split()) for _ in range(q)]\nmatrix = [[-1]*n for _ in range(m)]\nfor x in reversed(inps):\n    t,c,*cc = x\n    if t == 0:\n        matrix[c] = [matrix[c][-1]] + matrix[c][:-1]\n    elif t == 1:\n        new = [matrix[i][c] for i in range(m)]\n        for i,x in enumerate([new[-1]] + new[:-1]):\n            matrix[i][c] = x\n    elif t == 2:\n        matrix[c][cc[0]] = cc[1]\nfor x in matrix:\n    print(' '.join(map(lambda v: str(v+1), x)))", "n, m, q = map(int, input().split())\nqueries = [tuple(map(lambda x: int(x) - 1, input().split())) for i in range(q)]\nmatrix = [[0]*m for i in range(n)]\nwhile queries:\n    query = queries.pop()\n    if query[0] == 0:\n        row = [matrix[query[1]][-1]]\n        row.extend(matrix[query[1]][:-1])\n        matrix[query[1]] = row\n    elif query[0] == 1:\n        cell = matrix[n-1][query[1]]\n        for i in range(n):\n            matrix[i][query[1]], cell = cell, matrix[i][query[1]]\n    else:\n        matrix[query[1]][query[2]] = query[3] + 1\n[print(*row) for row in matrix]\n", "def main():\n    n, m, q = list(map(int, input().split()))\n    nm = [\"0\"] * (m * n)\n    qq = [input() for _ in range(q)]\n    for s in reversed(qq):\n        k, *l = s.split()\n        if k == \"3\":\n            nm[(int(l[0]) - 1) * m + int(l[1]) - 1] = l[2]\n        elif k == \"2\":\n            j = int(l[0]) - 1\n            x = nm[j - m]\n            for i in range((n - 1) * m + j, j, -m):\n                nm[i] = nm[i - m]\n            nm[j] = x\n        else:\n            j = (int(l[0]) - 1) * m\n            x = nm[j + m - 1]\n            for i in range(j + m - 1, j, -1):\n                nm[i] = nm[i - 1]\n            nm[j] = x\n    for i in range(0, n * m, m):\n        print(' '.join(nm[i:i + m]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, m, q = map(int, input().split())\nnm = [\"0\"] * (m * n)\nqq = [input() for _ in range(q)]\nfor s in reversed(qq):\n    k, *l = s.split()\n    if k == \"3\":\n        nm[(int(l[0]) - 1) * m + int(l[1]) - 1] = l[2]\n    elif k == \"2\":\n        j = int(l[0]) - 1\n        x = nm[j - m]\n        for i in range((n - 1) * m + j, j, -m):\n            nm[i] = nm[i - m]\n        nm[j] = x\n    else:\n        j = (int(l[0]) - 1) * m\n        x = nm[j + m - 1]\n        for i in range(j + m - 1, j, -1):\n            nm[i] = nm[i - 1]\n        nm[j] = x\nfor i in range(0, n * m, m):\n    print(' '.join(nm[i:i + m]))", "f = lambda: map(int, input().split())\nn, m, q = f()\np = [[0] * m for j in range(n)]\nfor t in [list(f()) for k in range(q)][::-1]:\n    j = t[1] - 1\n    if t[0] == 1: p[j].insert(0, p[j].pop())\n    elif t[0] == 2: \n        s = p[-1][j]\n        for i in range(n - 1, 0, -1): p[i][j] = p[i - 1][j]\n        p[0][j] = s\n    else: p[j][t[2] - 1] = t[3]\nfor d in p: print(*d)", "f = lambda: list(map(int, input().split()))\nn, m, q = f()\np = [[0] * m for j in range(n)]\nfor t in [list(f()) for k in range(q)][::-1]:\n    j = t[1] - 1\n    if t[0] == 1: p[j].insert(0, p[j].pop())\n    elif t[0] == 2: \n        s = p[-1][j]\n        for i in range(n - 1, 0, -1): p[i][j] = p[i - 1][j]\n        p[0][j] = s\n    else: p[j][t[2] - 1] = t[3]\nfor d in p: print(*d)\n", "f = lambda: list(map(int, input().split()))\n\nn, m, q = f()\n\np = [[0] * m for j in range(n)]\n\nfor t in [list(f()) for k in range(q)][::-1]:\n\n    j = t[1] - 1\n\n    if t[0] == 1: p[j].insert(0, p[j].pop())\n\n    elif t[0] == 2: \n\n        s = p[-1][j]\n\n        for i in range(n - 1, 0, -1): p[i][j] = p[i - 1][j]\n\n        p[0][j] = s\n\n    else: p[j][t[2] - 1] = t[3]\n\nfor d in p: print(*d)\n\n\n\n\n# Made By Mostafa_Khaled\n"]