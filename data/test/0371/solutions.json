["n = int(input())\nl, r = 0, 10**16\nD = [x ** 3.0 for x in range(2, 170417)]\nDD = [x*x*x for x in range(2, 170417)]\nwhile l < r:\n    m = (l+r) // 2\n    if sum(int(m/d) for d in D) < n:\n        l = m + 1\n    else:\n        r = m;\nif sum(l//d for d in DD) == n:\n    print(l);\nelse :\n    print((-1));\n", "SIZE = 171000\nL = [i ** 3 for i in range(SIZE)]\n\ndef get_count(n):\n    MAX = int(n ** (1 / 3)) + 1\n    if L[MAX] > n:\n        MAX -= 1\n\n    res = 0\n    for i in range(2, MAX + 1):\n        x = n // L[i]\n        if x != 1:\n            res += x\n        else:\n            res += MAX - i + 1\n            break\n    return res\n\ndef bin_search(m):\n    beg = int(4.8 * m)\n    end = min(8 * m, int(5e15))\n    while beg <= end:\n        mid = (beg + end) // 2\n        count_mid = get_count(mid)\n        if count_mid == m:\n            if beg == end:\n                return mid\n            end = mid\n        elif count_mid > m:\n            end = mid - 1\n        else:\n            beg = mid + 1\n    return -1\n\nm = int(input())\nprint(bin_search(m))\n", "def main():\n    m = int(input())\n    if m < 1000000:\n        lo = m*4\n        hi = m*8\n    else:\n        lo = int(4.949 * m)\n        hi = int(4.9492 * m)\n    while lo < hi - 1:\n        mid = (lo + hi)//2\n        nposs = countposs(mid)\n        if nposs < m:\n            lo = mid\n        else:\n            hi = mid\n    if m == countposs(hi):\n        print(hi)\n    else:\n        print(-1)\n\ndef countposs(maxtake):\n    k = 2\n    ans = 0\n    while True:\n        term = maxtake//(k*k*k)\n        if term == 0:\n            return ans\n        ans += term\n        k += 1\n\nmain()", "def main():\n    m = int(input())\n    lo = m*4\n    hi = m*8\n    loposs = countposs(lo)\n    hiposs = countposs(hi)\n    while lo < hi - 1:\n        if hi - lo > 10000:\n            mid = lo + int((m-loposs)/(hiposs-loposs)*(hi-lo))\n            mid = max(lo + 1, min(hi - 1, mid))\n        else:\n            mid = (hi + lo)//2\n        nposs = countposs(mid)\n        if nposs < m:\n            lo = mid\n        else:\n            hi = mid\n    if m == countposs(hi):\n        print(hi)\n    else:\n        print(-1)\n\ndef countposs(maxtake):\n    k = 2\n    ans = 0\n    while True:\n        term = maxtake//(k*k*k)\n        if term == 0:\n            return ans\n        ans += term\n        k += 1\n\nmain()", "n = int(input())\nl, r = 0, 10**16\nD = [x ** 3.0 for x in range(2, 170417)]\nDD = [x*x*x for x in range(2, 170417)]\nwhile l < r:\n    m = (l+r) // 2\n    if sum(int(m/d) for d in D) < n:\n        l = m + 1\n    else:\n        r = m;\nif sum(l//d for d in DD) == n:\n    print(l);\nelse :\n    print((-1));\n", "t = [k ** 3 for k in range(2, 170417)]\ns = m = int(input())\na, b = 1, 9 * m\nwhile a < b:\n    c = (a + b) // 2\n    d = sum(int(c / k) for k in t)\n    if d < m: a = c + 1\n    else: s, b = d, c\nprint(a if s == m else -1)", "cubes = [i**3.0 for i in range(2, int(1.8e5+5))]\n\ndef valid(mid):\n    return sum([mid//i for i in cubes if i <= mid])\n\ndef binary_search(k):\n    l = int(4.8 * k)\n    r = min(8.0 * k, 5.0 * (10**15))\n    while (l+1 < r):\n        mid = (l+r) / 2.0\n        res = valid(mid)\n        if (res < k):\n            l = mid\n        else:\n            r = mid\n    return int(r) if int(valid(r)) == k else -1\n\ndef main():\n    k = int(input())\n    print(binary_search(k))\n\nmain()\n", "n = int(input()) \nl, r = 0, 10**16 \nD = [x ** 3.0 for x in range(2, 170417)] \nDD = [x*x*x for x in range(2, 170417)] \nwhile l < r: \n\tm = (l+r) // 2 \n\tif sum(int(m/d) for d in D) < n: \n\t\tl = m + 1 \n\telse: \n\t    r = m; \nif sum(l//d for d in DD) == n: \n\tprint(l); \nelse : \n    print(-1);", "import math\nfrom bisect import bisect_right, bisect_left\nfrom collections import Counter, defaultdict\nfrom heapq import heappop, heappush\nfrom itertools import accumulate\n\nR = lambda: map(int, input().split())\n\nt = int(input())\ntab = [x*x*x for x in range(2, 2*10**5)]\nl, r = 1, 5*10**15\nwhile l < r:\n    n = (l + r) // 2\n    s = sum(n // x for x in tab)\n    if s < t:\n        l = n + 1\n    elif s > t:\n        r = n - 1\n    else:\n        r = n\ns = sum(l // x for x in tab)\nif s != t:\n    print(-1)\nelse:\n    print(l)", "N = int(2e5)\nn = int(input()) \ncb = [x*x*x for x in range(2, N)]\n\ndef valid(m):\n    return sum(m//i for i in cb) < n\n\ndef binary_search():\n    l, r = 0, int(1e16)\n    while l < r:\n        m = (l+r) // 2\n        if valid(m):\n            l = m + 1\n        else:\n            r = m\n    return l\n\nres = binary_search()\nprint(res if sum(res//i for i in cb) == n else -1)\n"]