["import sys\ninput = sys.stdin.readline\n\nimport numpy as np\n\nMOD = 10**9 + 7\n\nN,M,K = map(int,input().split())\n\ndef cumprod(arr):\n    L = len(arr); Lsq = int(L**.5+1)\n    arr = np.resize(arr,Lsq**2).reshape(Lsq,Lsq)\n    for n in range(1,Lsq):\n        arr[:,n] *= arr[:,n-1]; arr[:,n] %= MOD\n    for n in range(1,Lsq):\n        arr[n] *= arr[n-1,-1]; arr[n] %= MOD\n    return arr.ravel()[:L]\n\nU = 10**6\nx = np.full(U,2,dtype=np.int64); x[0] = 1\npow2 = cumprod(x)\nx = np.full(U,3,dtype=np.int64); x[0] = 1\npow3 = cumprod(x)\nx = np.full(U,pow(2,MOD-2,MOD),dtype=np.int64); x[0] = 1\npow2_inv = cumprod(x)\nx = np.full(U,pow(3,MOD-2,MOD),dtype=np.int64); x[0] = 1\npow3_inv = cumprod(x)\nx = np.arange(U,dtype=np.int64); x[0] = 1\nfact = cumprod(x)\nx = np.arange(U,0,-1,dtype=np.int64); x[0] = pow(int(fact[-1]),MOD-2,MOD)\nfact_inv = cumprod(x)[::-1]\n\nL = N+M\nA = np.zeros(N+M,dtype=np.int64)\nA[1:L] = (-1) * pow2[0:L-1] * pow3_inv[0:L-1] % MOD\nA[1:L] *= fact[K+1:K+L] * fact_inv[K] % MOD * fact_inv[1:L] % MOD; A %= MOD\nA[1:L] *= pow3_inv[K+1]; A %= MOD\nA[0] = 3 * (1 - pow3_inv[K+1]) % MOD * pow2_inv[1] % MOD\nnp.cumsum(A,out=A); A %= MOD\nA *= pow3[:L]; A %= MOD\nA *= pow2_inv[:L]; A %= MOD\n\ncomb = fact[N-1:N+M] * fact_inv[:M+1] % MOD * fact_inv[N-1] % MOD\nanswer = (comb * pow3[K+M:K-1:-1] % MOD * A[N-1:N+M] % MOD).sum() % MOD\nprint(answer)"]