["from collections import Counter\n\ns = input()\nn = int(input())\n\nd = Counter()\n\nfor c in s:\n    d[c] += 1\n\nif len(d) > n:\n    print(-1)\nelse:\n    left = 0\n    right = 10**10\n    s = \"\"\n    lastok = (\"\", 0)\n    while left + 1 < right:\n        mid = (left + right) // 2\n        s = \"\"\n        for (c, cnt) in list(d.items()):\n            cntnow = (cnt - 1) // mid + 1\n            s += c * cntnow\n        if len(s) < n:\n            s += 'a' * (n - len(s))\n        if len(s) == n:\n            lastok = (s, mid)\n            right = mid\n        else:\n            left = mid\n    print(lastok[1])\n    print(lastok[0])\n", "s = input()\nn = int(input())\nfreq = [0 for i in range(0, 300)]\nraport = [0 for i in range(0, 300)]\ndifferentLetters = 0\ntickets = 0\nsol = ''\n\nfor c in s: freq[ord(c)] += 1\nfor i in freq:\n    if i > 0: differentLetters += 1\n\nif differentLetters > n:\n    print('-1')\n    return\n\nfor i in 'abcdefghijklmnopqrstuvwxyz':\n    if freq[ord(i)] == 0: continue\n    sol += i\n    freq[ord(i)] -= 1\n    raport[ord(i)] = freq[ord(i)]\n\n\nfor i in range(differentLetters, n):\n    #pun litera cu cea mai mare frecventa\n\n    maxRaport = raport[ord('z')]\n    chosenLetter = 'z'\n    for j in 'abcdefghijklmnopqrstuvwxyz':\n        if raport[ord(j)] > maxRaport:\n            maxRaport = raport[ord(j)]\n            chosenLetter = j\n\n\n    sol += chosenLetter\n    raport[ord(chosenLetter)] = freq[ord(chosenLetter)] / sol.count(chosenLetter)\n    \n\nfor i in sol:\n    a = s.count(i)\n    b = sol.count(i)\n\n    if a%b == 0: tickets = max(tickets, int(a//b))\n    else: tickets = max(tickets, int(a//b) + 1)\n\nprint(tickets)\nprint(sol)\n        \n\n\n", "import math\nfrom fractions import Decimal\nS=input()\n\nN=int(input())\nSrep={}\nansrep={}\nfor item in \"abcdefghijklmnopqrstuvwxyz\":\n    Srep[item]=0\n    ansrep[item]=0\n\nfor item in S:\n    Srep[item]+=1\n    ansrep[item]+=1\n\nQ=list(set(S))\n\nif(len(Q)>N):\n    print(-1)\n\nelse:\n    n=len(Q)\n    ans=list(S)\n    num=1\n    req=1\n    n=len(ans)\n    while(len(ans)>N):\n        n=len(ans)\n        minn=req+1005\n        removal=ans[0]\n        k=True\n        for item in ans:\n            if(ansrep[item]==1):\n                continue\n            if(math.ceil(Srep[item]/(ansrep[item]-1))>req):\n                if(minn>math.ceil(Srep[item]/(ansrep[item]-1))):\n                    minn=math.ceil(Srep[item]/(ansrep[item]-1))\n                    removal=str(item)\n                continue\n            else:\n                ansrep[item]-=1\n                ans.remove(item)\n                k=False\n                break\n        if(k):\n            ansrep[removal]-=1\n            req=math.ceil(Srep[removal]/ansrep[removal])\n            ans.remove(removal)\n    g=\"\"\n    if(len(ans)<N):\n        g=S[0]*(N-len(ans))\n    print(req)\n    for item in ans:\n        print(item,end=\"\")\n    print(g)\n        \n        \n        \n        \n    \n    \n    \n\n\n", "s = input()\nn = int(input())\n\nsymb_cnt = {}\nfor c in s:\n\tsymb_cnt[c] = symb_cnt[c] + 1 if c in symb_cnt else 1\nfor cnt in range(1, len(s) + 1):\n\ts1 = \"\"\n\tfor c in symb_cnt:\n\t\ts1 += c * ((symb_cnt[c] + cnt - 1) // cnt)\n\tif len(s1) <= n:\n\t\tfor i in range(n - len(s1)):\n\t\t\ts1 += 'a'\n\t\tprint(cnt)\n\t\tprint(s1)\n\t\treturn\nprint(-1)\n", "s = input()\nn = int(input())\n\nd = {}\nfor c in s:\n    if c not in d: d[c] = 0\n    d[c] += 1\n    \ndcl = list(d.values())\n\nfound = False\nfor x in range(1,1001):\n    if sum([(dc-1)//x+1 for dc in dcl]) <= n:\n        found = True\n        print(x)\n        s = ''.join([key*((d[key]-1)//x+1) for key in sorted(d.keys())])\n        s += (n-len(s))*'a'\n        print(s)\n        break\nif not found:\n    print(-1)\n", "from math import ceil\np = {i: 0 for i in 'abcdefghijklmnopqrstuvwxyz'}\nt = input()\nfor i in t: p[i] += 1\np = {i: p[i] for i in p if p[i] > 0}\nn = int(input())\nif len(p) > n: print(-1)\nelif len(t) > n:\n    r = [[p[i], p[i], 1, i] for i in p]\n    for i in range(n - len(p)):\n        j = max(r)\n        j[2] += 1\n        j[0] = j[1] / j[2]\n    print(ceil(max(r)[0]))\n    print(''.join(j[3] * j[2] for j in r))     \nelse: print('1\\n' + t * (n // len(t)) + t[: n % len(t)])  ", "from collections import Counter\nfrom heapq import heappushpop\n\n\ndef main():\n    cnt, n = Counter(input()), int(input())\n    if n < len(cnt):\n        print(-1)\n        return\n    h = list((1 / v, 1, c) for c, v in cnt.most_common())\n    res = list(cnt.keys())\n    _, v, c = h.pop(0)\n    for _ in range(n - len(cnt)):\n        res.append(c)\n        v += 1\n        _, v, c = heappushpop(h, (v / cnt[c], v, c))\n    print((cnt[c] + v - 1) // v)\n    print(''.join(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "s = input()\n\nn = int(input())\n\n\n\nd = {}\n\nfor c in s:\n\n    if c not in d: d[c] = 0\n\n    d[c] += 1\n\n    \n\ndcl = list(d.values())\n\n\n\nfound = False\n\nfor x in range(1,1001):\n\n    if sum([(dc-1)//x+1 for dc in dcl]) <= n:\n\n        found = True\n\n        print(x)\n\n        s = ''.join([key*((d[key]-1)//x+1) for key in sorted(d.keys())])\n\n        s += (n-len(s))*'a'\n\n        print(s)\n\n        break\n\nif not found:\n\n    print(-1)\n\n", "import sys\nimport math\nsys.setrecursionlimit(100000)\n\n#sys.stdin = open(\"INP.txt\", 'r')\n# sys.stdout = open(\"OUT.txt\", 'w')\n\n\ndef main():\n    s = input()\n    n = int(input())\n    M = dict()\n    for char in s:\n        if char in M:\n            M[char] += 1\n        else:\n            M[char] = 1\n    if n < len(M):\n        print(-1)\n    else:\n        l = 1\n        r = len(s)\n        while l != r:\n            k = l+(r-l)//2\n            smallest_n = 0\n            for it in list(M.values()):\n                tmp = math.ceil(it/k)\n                smallest_n += tmp\n            if smallest_n <= n:\n                r = k\n            else:\n                l = k+1\n        sticker = ''\n        for char, occ in zip(list(M.keys()), list(M.values())):\n            sticker += (char*math.ceil(occ/l))\n\n        if len(sticker) < n:\n            sticker += (n-len(sticker))*list(M.keys())[0]\n        print(\"{}\\n{}\".format(l, sticker))\n\n\nmain()\n", "s = input()\nn = int(input())\ncnt = {}\nfor c in s:\n    if cnt.get(c) == None:\n        cnt[c] = 1\n    else:\n        cnt[c] += 1\n\nif (n < len(cnt)):\n    print(-1)\nelse:\n    ansNum = 0;\n    while(True):\n        ansNum+=1\n        l = 0;\n        char = []\n        for c, v in cnt.items():\n            need = (v + ansNum -1)//ansNum\n            l+= need\n            char.append((c, need))\n        if (l > n):\n            continue\n        print(ansNum)\n        ans = \"\".join([str(c[0])*c[1] for c in char])\n        ans = ans + 'a'*(n - len(ans))\n        print(ans)\n        break", "s = input()\nn = int(input())\ncnt = {}\nfor c in s:\n    if cnt.get(c) == None:\n        cnt[c] = 1\n    else:\n        cnt[c] += 1\n \nif (n < len(cnt)):\n    print(-1)\nelse:\n    ansNum = 0;\n    while(True):\n        ansNum+=1\n        l = 0;\n        char = []\n        for c, v in cnt.items():\n            need = (v + ansNum -1)//ansNum\n            l+= need\n            char.append((c, need))\n        if (l > n):\n            continue\n        \n        print(ansNum)\n        ans = \"\".join([str(c[0])*c[1] for c in char])\n        ans = ans + 'a'*(n - len(ans))\n        print(ans)\n        break", "s = input()\nn = int(input())\ncnt = {}\nfor c in s:\n    if cnt.get(c) == None:\n        cnt[c] = 1\n    else:\n        cnt[c] += 1\n \nif (n < len(cnt)):\n    print(-1)\nelse:\n    ansNum = 0;\n    while(True):\n        ansNum+=1\n        l = 0;\n        char = []\n        for c, v in cnt.items():\n            need = (v + ansNum -1)//ansNum\n            l+= need\n            char.append((c, need))\n        if (l > n):\n            continue\n        \n        \n        print(ansNum)\n        ans = \"\".join([str(c[0])*c[1] for c in char])\n        ans = ans + 'a'*(n - len(ans))\n        print(ans)\n        break", "import math\nfrom sys import stdin\nfrom math import ceil\n\ndef __starting_point():\n    s = input()\n    n = int(input())\n    dictionary = {}\n\n    for i in s:\n        if i in dictionary:\n            dictionary[i] = dictionary[i] + 1\n        else:\n            dictionary[i] = 1\n\n    if len(dictionary) > n:\n        print(-1)\n    else:\n        if len(s) < n:\n            print(1)\n            newS = s\n        else:\n            lengthS = len(s) // n\n            newLength = len(s)\n            while lengthS < newLength:\n                mid = (lengthS + newLength) // 2\n                total = 0\n                for i in dictionary:\n                    total = total + ceil(dictionary[i] / mid)\n                if total > n:\n                    lengthS = mid + 1\n                else:\n                    newLength = mid\n            print(lengthS)\n            newS = ''\n            for i in dictionary:\n                for j in range(ceil(dictionary[i] / lengthS)):\n                    newS = newS + i\n        for i in range(n - len(newS)):\n            newS = newS + s[0]\n        print(newS)\n\n__starting_point()", "def check(mid):\n    ans = []\n    res = 0\n    for c, count in d:\n        tmp = count // mid\n        if (count % mid != 0):\n            tmp += 1\n        ans.append((c, tmp))\n        res += tmp\n    return res <= n, ans\n        \n\na = input()\nn = int(input())\nd = dict()\nt = 0\nfor i in a:\n    if i not in d:\n        d[i] = 1\n        t += 1\n    else: d[i] += 1\nans = []\nres = \"\"\nfor i in d:\n    ans.append(i)\n    res = i\nif n >= len(a):\n    print(1)\n    print(a, end = '')\n    n -= len(a)\n    for u in range(n):\n        print(res, end ='')\nelse:\n    d = (sorted(d.items(), key = lambda d:(d[1], d[0])))\n    l = 1\n    r = len(a)\n    res = []\n    count_res = 0\n    while (l <= r):\n        mid = (l + r) // 2\n        flag, tmp = check(mid)\n        if (flag):\n            r = mid - 1\n            count_res = mid\n            res = tmp\n        else:\n            l = mid + 1\n        #print(l, r, tmp)\n    if (len(res) == 0):\n        print(-1)\n    else:\n        ttt = 0\n        print(count_res)\n        for c, sl in res:\n            for j in range(sl):\n                print(c, end = '')\n                ttt += 1\n        n -= ttt\n        for i in range(n):\n            print(a[0], end = '')\n\n \n    \n\n", "s = input()\nn = int(input())\n\nfrom collections import Counter\nc = Counter(s)\nout = Counter()\ncontrib = Counter()\n\nfor letter in c:\n    out[letter] = 1\n    contrib[letter] = c[letter]\n\nsum_vals = sum(out.values())\nfrom math import ceil\nfrom fractions import Fraction\n\nif sum_vals > n:\n    print(-1)\nelse:\n    while sum_vals < n:\n        el, _ = contrib.most_common(1)[0]\n        out[el] += 1\n        sum_vals += 1\n        contrib[el] = ceil(Fraction(c[el], out[el]))\n\n    print(max(contrib.values()))\n    print(''.join(out.elements()))\n        \n    \n    \n", "s = input()\nn = int(input())\nd = {}\nr = 0\nfor a in s:\n    d.setdefault(a, 0)\n    d[a] += 1\n    if(d[a] > r):\n        r = d[a]\nif (len(d) > n):\n    print(-1)\nelse:\n    l = 0\n    while r - l > 1:\n        k = (l + r) // 2\n        cur = 0\n        for x in d.values():\n            cur += (x+k-1) // k\n        if cur > n:\n            l = k\n        else:\n            r = k\n    print(r)\n    s = ''\n    for a in d.keys():\n        s += a * ((d[a] + r - 1) // r)\n    l=len(s)\n    s += 'a' * (n-len(s))\n    print(s)"]