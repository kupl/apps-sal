["import getpass\nimport sys\n\nif getpass.getuser() != 'frohenk':\n    filename = 'half'\n    # sys.stdin = open('input.txt')\n    # sys.stdout = open('output.txt', 'w')\nelse:\n    sys.stdin = open('input.txt')\n    # sys.stdin.close()\n\nimport math\nimport string\nimport re\nimport random\nfrom decimal import Decimal, getcontext\nfrom collections import deque\n\nmod = 10 ** 9 + 7\n\n\ndef ria():\n    return [int(i) for i in input().split()]\n\n\nn=ria()[0]\nar=[0]*n\nfor i in range(n-1):\n    a,b=ria()\n    a-=1\n    b-=1\n    ar[a]+=1\n    ar[b]+=1\nprint('NO' if ar.count(2) else 'YES')", "import sys\ninput = sys.stdin.readline\n\nN = int(input())\nX = [[] for i in range(N)]\nfor i in range(N-1):\n    x, y = list(map(int, input().split()))\n    X[x-1].append(y-1)\n    X[y-1].append(x-1)\n\nfor x in X:\n    if len(x) == 2:\n        print(\"NO\")\n        break\nelse:\n    print(\"YES\")\n\n\n", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nE=[list(map(int,input().split())) for i in range(n-1)]\n\nD=[0]*n\n\nfor x,y in E:\n    D[x-1]+=1\n    D[y-1]+=1\n\nif 2 in D:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "import collections\ndef add_on_tree():\n    n = int(input())\n    edges = []\n    for i in range(n-1): edges.append([int(x) for x in input().split()])\n    graph = collections.defaultdict(set)\n    for u, v in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    ans = 'YES'\n    for node in graph:\n        if len(graph[node]) == 2:\n            ans = 'NO'\n            break\n    print(ans)\n\nadd_on_tree()\nreturn", "n=int(input())\nl=[0 for a in range(n)]\nfor _ in range(n-1):\n    a,b=map(int,input().split(' '))\n    l[a-1]+=1\n    l[b-1]+=1\nfor i in range(n):\n    if l[i]==2:\n        print('NO')\n        return\nprint('YES')", "from collections import defaultdict\n\nn = int(input())\nd = defaultdict(int)\n\n\nfor i in range(n-1):\n    sa = input().split()\n    d[sa[0]] += 1\n    d[sa[1]] += 1\n\nfor v in list(d.values()):\n    if v == 2:\n        print('NO')\n        return\n\nprint('YES')\n\n", "n = int(input())\n\ndegrees = [0 for _ in range(n)]\n\nfor _ in range(n-1):\n    u, v = tuple(map(int, input().rstrip().split()))\n    degrees[u-1] += 1\n    degrees[v-1] += 1\n\nres = 'YES'\n\nfor d in degrees:\n    if d == 2:\n        res = 'NO'\n\nprint(res)\n", "from collections import defaultdict\n\nn = int(input())\nedges = defaultdict(int)\nfor _ in range(n - 1):\n    a, b = list(map(int, input().split()))\n    edges[a] += 1\n    edges[b] += 1\n\nfor key in edges:\n    if edges[key] == 2:\n        print('NO')\n        return\n\nprint('YES')\n", "n = input()\nn = int(n)\n\nedges = []\nfor i in range(n-1):\n    edges.append(input())\n\ngraph = {}\nfor i in range(1,n+1):\n    graph[i] = []\n\nfor edge in edges:\n    x = edge.split(' ')\n    x = [int(y) for y in x]\n    x = list(x)\n\n    graph[x[0]].append(x[1])\n    graph[x[1]].append(x[0])\n\nq = 0\nfor key, value in list(graph.items()):\n    if len(value) == 2:\n        q = 1\n        break\n\nif q == 1:\n    print(\"NO\")\n\nif q == 0:\n    print(\"YES\")\n", "n = int(input())\nGraph = [0]*n\nfor i in range(1,n):\n    data = [int(s) for s in input().split()]\n    Graph[data[0]-1] += 1\n    Graph[data[-1]-1] += 1\nflag = True\nfor i in Graph:\n    if i == 2:\n        flag = False\nif flag == True:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "n = int(input())\n\nnodes = [0]*n\n\nfor i in range (0,n-1):\n    for x in map(int,input().split()):\n        nodes[x-1] += 1\n\nif 2 in nodes:\n    print(\"NO\")\n\nelse:\n    print(\"YES\")\n", "n = int(input())\nd = [0] * (n + 1)\nfor i in range(n - 1):\n    u, v = list(map(int, input().split()))\n    d[u] += 1\n    d[v] += 1\nans = 0\nfor i in range(n):\n    if d[i + 1] == 2:\n        ans += 1\nif ans == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "n=int(input())\nt={}\nclass node(object):\n\t\"\"\"docstring for node\"\"\"\n\tdef __init__(self):\n\t\tself.vois = []\n\t\n\tdef insv(self,voi):\n\t\tself.vois.append(voi)\n\nfor i in range(1,n+1):\n\tt[i]=node()\nfor i in range(n-1):\n\tu,v=map(int,input().split())\n\tt[u].insv(v)\n\tt[v].insv(u)\nfor i in range(1,n+1):\n\tif len(t[i].vois)==2:\n\t\tprint(\"NO\")\n\t\tbreak\nelse:\n\tprint(\"YES\")", "n=int(input())\nList=[]\nvertecies=[0]*n\nfor i in range(0,n-1):\n  OP=[]\n  OP=list(map(int, input().split()))\n  List.append(OP)\n  vertecies[OP[0]-1]=vertecies[OP[0]-1]+1\n  vertecies[OP[1]-1]=vertecies[OP[1]-1]+1\n#print(vertecies)\nk=0\nfor i in range (0,n):\n  if vertecies[i]==2:\n    k=k+1\nif k>0:\n  print(\"NO\")\nelse:\n  print(\"YES\")", "n = int(input())\na, flag = [0] * (n + 1), False\nfor i in range(n - 1):\n    u, v = [int(x) for x in input().split()]\n    a[u] += 1\n    a[v] += 1\nfor j in range(1, n + 1):\n    if a[j] == 2:\n        flag = True\nif flag:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "import sys\nN = int(input())\nEdge = [[] for _ in range(N)]\nDim = [0]*N\nfor _ in range(N-1):\n    a, b = map(int, sys.stdin.readline().split())\n    a -= 1\n    b -= 1\n    Edge[a].append(b)\n    Edge[b].append(a)\n    Dim[a] += 1\n    Dim[b] += 1\nLeaf = [d for d in Dim if d == 1]\nif [d for d in Dim if d == 2]:\n    print('NO')\nelif len(Leaf)*(len(Leaf) - 1)//2 < N - 1:\n    print('NO')\nelse:\n    print('YES')", "from collections import Counter\n\nn = int(input())\n\nd = Counter()\n\nfor _ in range(n - 1):\n    u, v = list(map(int, input().split()))\n    d[u] += 1\n    d[v] += 1\n\nif any(x == 2 for x in list(d.values())):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "I = lambda : map(int,input().split())\nn = int(input())\n#li = list(I())\nif n == 1 or n==2 :\n    print(\"YES\");return\nif n==3 :\n    print(\"NO\");return\nlii = [ [] for i in range (n+1)]\nfor i in range (n-1) :\n    x , y = I()\n    lii[x] += [y]\n    lii[y] += [x]\npp = 0 \nfor i in range (1,n+1) :\n    if len(lii[i]) == 1 :\n        continue\n    elif len(lii[i]) == 2 :\n        pp = 1\n        break\nif pp == 1 :\n    print(\"NO\");return\nprint(\"YES\");return        ", "t=int(input())\nlst=[[] for c in range(t+1)]\nfor c in range(t-1):\n    m,n=map(int,input().split())\n    lst[m].append(n)\n    lst[n].append(m)\nfor c in range(len(lst)):\n    if len(lst[c])==2:\n        print(\"NO\")\n        return\nprint(\"YES\")", "from collections import Counter\nn = int(input())\ncounter = Counter()\nfor i in range(n - 1):\n    a, b = map(int, input().split())\n    counter.update([a, b])\nif 2 in counter.values():\n    print(\"NO\")\nelse:\n    print(\"YES\")", "n = int(input())\nadj = [[] for i in range(n)]\nfor _ in range(n-1):\n  u, v = map(int, input().split())\n  adj[u-1].append(v)\n  adj[v-1].append(u)\n\nfor v in adj:\n  if len(v) == 2:\n    print('NO')\n    break\nelse:\n  print('YES')", "n=int(input())\nl=[0]*(n+1)\nfor i in range(n-1):\n    u,v=input().split()\n    u,v=[int(u),int(v)]\n    l[u]+=1\n    l[v]+=1\nl=list(set(l))\n#print(l)\nif len(l)<=2:\n    print(\"YES\")\nelif l[2]==2:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "n = int(input())\ncounts = [0] * n\n\nfor _ in range(n-1):\n\tu, v = map(int, input().split())\n\tu -= 1\n\tv -= 1\n\tcounts[u] += 1\n\tcounts[v] += 1\n\nall_possible = all(count != 2 for count in counts)\n\nif all_possible:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "from collections import defaultdict\nn = int(input())\ngraph = defaultdict(list)\nflag=0\nfor i in range(n-1):\n    a,b = list(map(int,input().split()))\n    graph[a].append(b)\n    graph[b].append(a)\nfor j in range(1,n+1):\n    if(len(graph[j])==2):\n        flag=1\n        break\nif(flag==1):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    \n", "n = int(input())\na = []\nfor i in range(n):\n  a.append(0)\nfor i in range(n - 1):\n  b, c = input().split()\n  a[int(b) - 1] += 1\n  a[int(c) - 1] += 1\nif2 = False\nfor i in range(n):\n  if a[i] == 2:\n    if2 = True\nif if2:\n  print(\"NO\")\nelse:\n  print(\"YES\")\n"]