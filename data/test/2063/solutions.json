["def main():\n    from collections import defaultdict\n    def f(x):\n        inc = [0 for i in range(n + w)]\n        cur_inc = 0\n        days = m\n        for i, v in enumerate(arr):\n            cur_inc -= inc[i]\n            v += cur_inc\n            if x - v > days:\n                return False\n            if x > v:\n                cur_inc += x - v\n                days -= x - v\n                inc[i + w] += x - v\n        return True\n    \n    \n    n, m, w = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    \n    left, right = min(arr), max(arr) + m + 1\n    while right - left > 1:\n        middle = (left + right) // 2\n        if f(middle):\n            left = middle\n        else:\n            right = middle\n    \n    print(left)\n\n\nmain()\n", "def main():\n    def check(x):\n        b = [0] * (n + 1)\n        curr = 0\n        day = 0\n        for i in range(n):\n            curr += b[i]\n            if a[i] + curr < x:\n                tmp = x - a[i] - curr\n                b[min(i + w, n)] -= tmp\n                day += tmp\n                curr += tmp\n            if day > m:\n                break\n        return day \n    n, m, w = map(int, input().split())\n    a = list(map(int, input().split()))\n     \n    l = min(a)\n    r = max(a) + m + 1\n    while l + 1 < r:\n        mid = (l + r) // 2\n        if check(mid) <= m:\n            l = mid\n        else:\n            r = mid\n\n    print(l)\n    \nmain()", "def Check(target,rest,table):\n    b=[0]*n\n    delta=0\n    for i in range(n):\n        if(b[i]<0): delta+=b[i]\n        if(table[i]+delta<target):\n            sub=target-table[i]-delta\n            rest-=sub\n            if(rest<0): return False\n            delta+=sub\n            if(i+w<n): b[i+w]-=sub\n    return True\n\nn,m,w = list(map(int,input().split()))\na = list(map(int,input().split()))\nhead = min(a)\ntail = head+m\nans = head\nwhile(head<=tail):\n    mid = (head+tail)//2\n    if(Check(mid,m,a)):\n        ans=mid\n        head=mid+1\n    else: tail=mid-1\nprint(ans)\n", "n, m, w = map(int, input().split())\nt = list(map(int, input().split()))\n\ndef f(x):\n    p = [0] * w\n    d = s = j = 0\n    for i in t:\n        d -= p[j]\n        q = max(0, x - i - d)\n        d += q\n        s += q\n        p[j] = q\n        j += 1\n        if j == w: j = 0\n    return s\n\na = min(t)\nb = a + m + 1\nwhile b - a > 1:\n    c = (a + b) // 2\n    p = f(c)\n    if p > m: b = c\n    else: a = c\nprint(a)", "n, m, w = list(map(int, input().split()))\nt = list(map(int, input().split()))\n\ndef check(x):\n    p = [0] * w\n    d = s = j = 0\n    for i in t:\n        d -= p[j]\n        q = max(0, x - i - d)\n        d += q\n        s += q\n        p[j] = q\n        j += 1\n        if j == w: j = 0\n    return s\n\na = min(t)\nb = a + m + 1\nwhile b - a > 1:\n    c = (a + b) // 2\n    p = check(c)\n    if p > m: b = c\n    else: a = c\nprint(a)\n", "n, m, w = map(int, input().split())\nt = list(map(int, input().split()))\n\ndef check(x):\n    p = [0] * w\n    d = s = j = 0\n    for i in t:\n        d -= p[j]\n        q = max(0, x - i - d)\n        d += q\n        s += q\n        p[j] = q\n        j += 1\n        if j == w: j = 0\n    return s\n\na = min(t)\nb = a + m + 1\nwhile b - a > 1:\n    c = (a + b) // 2\n    p = check(c)\n    if p > m: b = c\n    else: a = c\nprint(a)", "def foo(a, m, w, desired_height):\n\tdays_left = m\n\tcurrent_height = 0\n\theights = []\n\tfor i in range(0, len(a)):\n\t\tif i >= w:\n\t\t\tcurrent_height -= heights[i - w]\n\t\tcurrent_value = a[i] + current_height\n\t\tif current_value < desired_height:\n\t\t\tdays_needed = desired_height - current_value\n\t\t\tif days_needed > days_left:\n\t\t\t\treturn False\n\t\t\tdays_left -= days_needed\n\t\t\theights.append(days_needed)\n\t\telse:\n\t\t\theights.append(0)\n\t\tcurrent_height += heights[i]\n\treturn True\n\n\nn, m, w = map(int, input().split())\na = list(map(int, input().split()))\nx = 1\ny = 1000100000\nwhile x < y:\n    mi = (x + y + 1) // 2\n    if foo(a, m, w, mi):\n        x = mi\n    else:\n        y = mi - 1\nprint ((x))", "a, b, c = list(map(int,input().split(' ')))\n\nl = list(map(int,input().split(' ')))\n\nlo = 0\nhi = 2*10**9\n\nwhile lo < hi:\n    mid = int((lo+hi+1)/2)\n\n    check = mid\n\n    seg = 0\n    add = [0] * a\n    tot = 0\n\n    for i in range(a):\n        if l[i] + seg < check:\n            add[i] = check - l[i] - seg\n            tot += check - l[i] - seg\n            seg += check - l[i] - seg\n            \n        if c <= i+1:\n            seg -= add[i-c+1]\n\n    if tot > b:\n        hi = mid - 1\n\n    else:\n        lo = mid\n\n\nprint(lo)\n", "from sys import stdin\n_data = iter(stdin.read().split('\\n'))\ninput = lambda: next(_data)\n\nn, m, w = list(map(int, input().split()))\na = list(map(int, input().split()))\nub, lb = 2 * 10 ** 9, 0\n\ndef check(x):\n    u = m\n    s = [0] * (n + 1)\n    for i in range(n):\n        if i > 0:\n            s[i] += s[i - 1]\n        v = a[i] + s[i]\n        if v < x:\n            d = x - v\n            u -= d\n            if u < 0:\n                return False\n            s[i] += d\n            s[min(i + w, n)] -= d\n    return True\n            \n\nwhile ub - lb > 1:\n    mid = (ub + lb) // 2\n    if check(mid):\n        lb = mid\n    else:\n        ub = mid\nprint(lb)\n", "n, m, w = map(int, input().split(' '))\nh = list(map(int, input().split(' ')))\n\np = [0] * n\n\ndef doit(k):\n    ts = 0\n    td = 0\n    for i in range(n):\n        if h[i] + ts < k:\n            p[i] = k - ts - h[i]\n            td += p[i]\n        else:\n            p[i] = 0\n        ts += p[i]\n        if (i >= w - 1):\n            ts -= p[i - w + 1]\n   # print(' '.join(map(str, [k, td])))\n    if (td <= m):\n        return 1\n    else:\n        return 0\n\nmir = min(h)\nmar = mir + m\nwhile mar > mir:\n    mid = (mar + mir + 1) // 2\n    if doit(mid):\n        mir = mid\n    else:\n        mar = mid - 1\nprint(mir)", "import sys\nimport filecmp\n\nFILE_IO = False\n\nif FILE_IO:\n    input_stream = open('input_test.txt')\n    sys.stdout = open('current_output.txt', 'w')\nelse:\n    input_stream = sys.stdin\n\ninput_line = input_stream.readline().split()\n\narray_len = int(input_line[0])\nnum_of_days = int(input_line[1])\nstripe_len = int(input_line[2])\n\ninput_line = input_stream.readline().split()\n\ninput_list = []\nfor i in range(0, array_len):\n    input_list.append(int(input_line[i])) \n\nmin_input = min(input_list)\nmax_input = max(input_list)\nleft = min_input \nright = max_input + num_of_days\ncurrent_solution = left\nwhile left <= right:\n    mid = int(right + (left - right) / 2 )\n\n    number_of_additions_list = [0 for _ in input_list]\n    needed_steps = 0\n    for index, current_flower_state in enumerate(input_list):\n        needed_addtion = 0\n        if index > 0:\n            prv_elem = number_of_additions_list[index-1]\n        else:\n            prv_elem = 0\n        current_addition = prv_elem + number_of_additions_list[index]\n        if current_flower_state < mid:\n          \n            state_with_prev_addition = (current_flower_state + current_addition)\n            \n            if state_with_prev_addition < mid:\n                needed_addtion = mid - state_with_prev_addition\n                needed_steps += needed_addtion\n\n                \n                if (index + stripe_len < len(input_list)):\n                    number_of_additions_list[index + stripe_len] = (needed_addtion * -1)\n            \n        number_of_additions_list[index] = current_addition + needed_addtion\n    if needed_steps > num_of_days:\n        right = mid - 1\n    else:\n        if current_solution < mid:\n            current_solution = mid\n        left = mid + 1\nprint(current_solution)\n                \n\n\nif FILE_IO:\n    assert filecmp.cmp('current_output.txt','expected_output.txt',shallow=False) == True", "R = lambda: map(int, input().split())\nn, m, w = R()\narr = list(R())\nl, r = min(arr), min(arr) + m\nwhile l < r:\n    mid = (l + r + 1) // 2\n    acc, h = 0, [0] * (w + n)\n    for i in range(n):\n        acc += h[i]\n        h[i + w] -= max(0, mid - arr[i] - acc)\n        acc -= h[i + w]\n    if -sum(h) > m:\n        r = mid - 1\n    else:\n        l = mid\nprint(l)", "n, m, w = list(map(int, input().split()))\n\nt = list(map(int, input().split()))\n\n\n\ndef check(x):\n\n    p = [0] * w\n\n    d = s = j = 0\n\n    for i in t:\n\n        d -= p[j]\n\n        q = max(0, x - i - d)\n\n        d += q\n\n        s += q\n\n        p[j] = q\n\n        j += 1\n\n        if j == w: j = 0\n\n    return s\n\n\n\na = min(t)\n\nb = a + m + 1\n\nwhile b - a > 1:\n\n    c = (a + b) // 2\n\n    p = check(c)\n\n    if p > m: b = c\n\n    else: a = c\n\nprint(a)\n\n\n\n# Made By Mostafa_Khaled\n", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/13/20\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\n\ndef solve(N, M, W, A):\n    def check(val):\n        needs = [val-v for v in A]\n        delta = [0 for _ in range(N)]\n        water = 0\n        i = 0\n        curr = 0\n        while i < N:\n            curr += delta[i]\n            if needs[i] > curr:\n                w = needs[i] - curr\n                water += w\n                curr += w\n                if i + W < N:\n                    delta[i + W] -= w\n                if water > M:\n                    return False\n            i += 1\n        return water <= M\n    \n    lo, hi = min(A), max(A) + M\n    while lo <= hi:\n        m = (lo + hi) // 2\n        if check(m):\n            lo = m + 1\n        else:\n            hi = m - 1\n            \n    return hi\n\n\nN, M, W = map(int, input().split())\nA = [int(x) for x in input().split()]\nprint(solve(N, M, W, A))", "def solve(n,m,w,l):\n    low = min(l)\n    high = max(l) + m\n    while low < high:\n        mid = (low + high + 1) // 2\n        val = 0\n        arr = [0 for i in range(w+n)]\n        for i in range(n):\n            val += arr[i]\n            arr[i + w] -= max(0,mid - l[i] - val)\n            val -= arr[i + w]\n        if -sum(arr) > m:\n            high = mid - 1\n        else:\n            low = mid\n    print(low)\nn,m,w = map(int,input().split())\nl = [*map(int,input().split())]\nsolve(n,m,w,l)", "def R(): return map(int, input().split())\ndef I(): return int(input())\ndef S(): return str(input())\n\ndef L(): return list(R())\n\nfrom collections import Counter \n\nimport math\nimport sys\n\nfrom itertools import permutations\n\n\nimport bisect\n\n#print(bisect.bisect_right([1,2,3],2))\n#print(bisect.bisect_left([1,2,3],2))\n\nn,m,w=R()\n\na=L()\n\nl=0\nr=10**10\n\n\nwhile l<r-1:\n    mid=(l+r)//2\n    b=[0]*n\n\n    fl=True\n\n    cur=0\n    days=0\n    for i in range(n):\n        bold=b[i]\n        cur+=b[i]\n\n        if a[i]+cur<mid:\n            delta=mid-a[i]-cur\n            days+=delta\n            cur+=delta\n\n            if i+w<n:\n                b[i+w]-=delta\n\n\n        if days>m:\n            fl=False\n            break\n\n    if fl:\n        l=mid\n    else:\n        r=mid\n\nprint(l)", "def R(): return map(int, input().split())\ndef I(): return int(input())\ndef S(): return str(input())\n\ndef L(): return list(R())\n\nfrom collections import Counter \n\nimport math\nimport sys\n\nfrom itertools import permutations\n\n\nimport bisect\n\n#print(bisect.bisect_right([1,2,3],2))\n#print(bisect.bisect_left([1,2,3],2))\n\nn,m,w=R()\n\na=L()\n\nl=0\nr=10**10\n\n\nwhile l<r-1:\n    mid=(l+r)//2\n    b=[0]*n\n\n    fl=True\n\n    cur=0\n    days=0\n    for i in range(n):\n        cur+=b[i]\n\n        if a[i]+cur<mid:\n            delta=mid-a[i]-cur\n            days+=delta\n            cur+=delta\n\n            if i+w<n:\n                b[i+w]-=delta\n\n\n        if days>m:\n            fl=False\n            break\n\n    if fl:\n        l=mid\n    else:\n        r=mid\n\nprint(l)", "n,m,w=map(int,input().split())\na=list(map(int,input().split()))\n\ndef check(x):\n    b=[0]*n\n    cur=cnt=0\n    for i in range(n):\n        if i-w>=0:\n            cur-=b[i-w]\n        if a[i]+cur<x:\n            b[i]=x-a[i]-cur\n            cur+=b[i]\n            cnt+=b[i]\n        if cnt>m:\n            return 0\n    return 1\n\nleft=1\nright=1e9+1e6\nans=0\nwhile left<=right:\n    mid=(left+right)//2\n    if check(mid):\n        left=mid+1\n        ans=mid\n    else:\n        right=mid-1\n\nprint(int(ans))", "'''\n    Auther: ghoshashis545 Ashis Ghosh\n    College: jalpaiguri Govt Enggineering College\n\n'''\nfrom os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque,defaultdict as dd \nfrom bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil,sqrt,log,gcd\ndef ii():return int(input())\ndef si():return input()\ndef mi():return list(map(int,input().split()))\ndef li():return list(mi())\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\ndef bo(i):\n    return ord(i)-ord('a')\n\n\n\n\n\ndef solve():\n    \n    n,m,w=mi()\n    a=li()\n    \n    def fessible(mid):\n        \n        b=[0]*n\n        moves=0\n        if(a[0]<mid):\n            b[0]+=(mid-a[0])\n            if(w<n):\n                b[w]-=(mid-a[0])\n            moves+=(mid-a[0])\n            if(moves>m):\n                return 0\n        for i in range(1,n):\n            b[i]+=b[i-1]\n            x=a[i]+b[i]\n            if(x<mid):\n                b[i]+=(mid-x)\n                if(i+w<n):\n                    b[i+w]-=(mid-x)\n                moves+=(mid-x)\n            if(moves>m):\n                return 0\n        return 1\n            \n        \n    \n    l=1\n    r=1e10\n    while(l<=r):\n        mid=l+(r-l)//2\n        if(fessible(mid)):\n            l=mid+1\n            ans=mid\n        else:\n            r=mid-1\n    print(int(ans))\n        \n    \n    \n    \n        \n        \n        \n        \ndef __starting_point():\n    solve()\n\n__starting_point()", "'''\n    Auther: ghoshashis545 Ashis Ghosh\n    College: jalpaiguri Govt Enggineering College\n\n'''\nfrom os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque,defaultdict as dd \nfrom bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil,sqrt,log,gcd\ndef ii():return int(input())\ndef si():return input()\ndef mi():return list(map(int,input().split()))\ndef li():return list(mi())\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\ndef bo(i):\n    return ord(i)-ord('a')\n\n\n\n\n\ndef solve():\n    \n    n,m,w=mi()\n    a=li()\n    \n    def fessible(mid):\n        \n        b=[0]*(n+1)\n        moves=0\n        for i in range(1,n+1):\n            b[i]+=b[i-1]\n            x=a[i-1]+b[i]\n            \n            if(x<mid):\n                b[i]+=(mid-x)\n                if(i+w<=n):\n                    b[i+w]-=(mid-x)\n                moves+=(mid-x)\n            \n        return moves<=m\n            \n        \n    \n    l=1\n    r=1e10\n    while(l<=r):\n        mid=l+(r-l)//2\n        if(fessible(mid)):\n            l=mid+1\n            ans=mid\n        else:\n            r=mid-1\n    print(int(ans))\n        \n    \n    \n    \n        \n        \n        \n        \ndef __starting_point():\n    solve()\n\n__starting_point()", "def check(num):\n\tadd = 0\n\tsub = [0]*(2*n)\n\tfor i in range(n):\n\t\tadd -= sub[i]\n\t\tif (a[i]+add)<num:\n\t\t\td = num-a[i]-add\n\t\t\tsub[i+w] = d\n\t\t\tadd = num - a[i]\n\t# print (num,sub)\n\tcount = 0\n\tfor i in sub:\n\t\tcount += i\n\tif count<=m:\n\t\treturn True\n\treturn False\n\nn,m,w = map(int,input().split())\na = list(map(int,input().split()))\nlow = 0\nhigh = min(a)+m\nwhile low<high:\n\tmid = (low+high)//2\n\tif check(mid):\n\t\tlow = mid+1\n\telse:\n\t\thigh = mid-1\nif check(low):\n\tprint (low)\nelse:\n\tprint (low-1)", "MAXN=10**9+10**5\nn,m,w=map(int,input().split())\na=[*map(int,input().split())]\ndef bs(x):\n    incre=[0]*n\n    inc_curr=0\n    moves=0\n    for i in range(n):\n        inc_curr-=[0,incre[i-w]][i-w>=0]\n        if a[i]+inc_curr<x:\n            incre[i]=x-(a[i]+inc_curr)\n            inc_curr+=incre[i]\n            moves+=incre[i]\n        if moves>m:\n            return False\n    return moves<=m\nl=1;r=MAXN\nx=0\nwhile l<=r:\n    mid=(l+r)//2\n    if bs(mid):\n        x=mid\n        l=mid+1\n    else:r=mid-1\nprint(x)"]