["3\n\nimport copy\n\n\ndef rotate90(n, f):\n    return [[f[n - j - 1][i] for j in range(n)] for i in range(n)]\n\ndef fliphor(n, f):\n    return [[f[i][n - j - 1] for j in range(n)] for i in range(n)]\n\ndef flipver(n, f):\n    return [[f[n - i - 1][j] for j in range(n)] for i in range(n)]\n\ndef eq(n, f, g):\n    for i in range(n):\n        for j in range(n):\n            if f[i][j] != g[i][j]:\n                return False\n    return True\n\n\nn = int(input())\nf = [list(input()) for i in range(n)]\ng = [list(input()) for i in range(n)]\n\nfor doflipv in range(2):\n    for dofliph in range(2):\n        for nrot in range(4):\n            h = copy.deepcopy(f)\n            if dofliph == 1:\n                h = fliphor(n, h)\n            if doflipv == 1:\n                h = flipver(n, h)\n            for i in range(nrot):\n                h = rotate90(n, h)\n            if eq(n, h, g):\n                print(\"Yes\")\n                return\n\nprint(\"No\")", "N = int(input())\ns1 = [list(input()) for i in range(N)]\ns2 = [list(input()) for i in range(N)]\n\ndef rotate(s):\n    ret = [[None for i in range(N)] for j in range(N)]\n    for i in range(N):\n        for j in range(N):\n            ret[i][j] = s[j][N-1-i]\n    return ret\n\ndef v_mirror(s):\n    return list(reversed(s))\n\ndef h_mirror(s):\n    return [list(reversed(row)) for row in s]\n\ndef solve():\n    nonlocal s1\n    for i in range(4):\n        if s1 == s2: return True\n        if v_mirror(s1) == s2: return True\n        if h_mirror(s1) == s2: return True\n        if v_mirror(h_mirror(s1)) == s2: return True\n        s1 = rotate(s1)\n    return False\n\nprint('Yes' if solve() else 'No')\n", "n=int(input())\nns=[]\nfor i in range(n):\n    s=input()\n    ns.append(s)\nns2=[]\nfor i in range(n):\n    s=input()\n    ns2.append(s)\n\n\ndef rotate(i,j):\n    return j,n-1-i\ndef flip(i,j):\n    return j,i\n\ndef main():\n    same=True\n    for i in range(n): # 0\n        for j in range(n):\n            if ns[i][j]!=ns2[i][j]:\n                same=False\n                break\n        if same==False:\n            break\n    if same:\n        return True\n\n    same=True\n    for i in range(n):  # 1\n        for j in range(n):\n            a, b = rotate(i, j)\n            if ns[i][j] != ns2[a][b]:\n                same = False\n                break\n        if same == False:\n            break\n    if same:\n        return True\n\n    same=True\n    for i in range(n):  # 2\n        for j in range(n):\n            a, b = rotate(i, j)\n            a, b = rotate(a, b)\n            if ns[i][j] != ns2[a][b]:\n                same = False\n                break\n        if same == False:\n            break\n    if same:\n        return True\n\n    same=True\n    for i in range(n):\n        for j in range(n):  # 3\n            a, b = rotate(i, j)\n            a, b = rotate(a, b)\n            a, b = rotate(a, b)\n            if ns[i][j] != ns2[a][b]:\n                same = False\n                break\n        if same == False:\n            break\n    if same:\n        return True\n\n    same=True\n    for i in range(n): # 0\n        for j in range(n):\n            a,b=flip(i,j)\n            if ns[a][b]!=ns2[i][j]:\n                same=False\n                break\n        if same==False:\n            break\n    if same:\n        return True\n\n    same=True\n    for i in range(n):  # 1\n        for j in range(n):\n            a, b = rotate(i, j)\n            a, b = flip(a, b)\n            if ns[i][j] != ns2[a][b]:\n                same = False\n                break\n        if same == False:\n            break\n    if same:\n        return True\n\n    same=True\n    for i in range(n):  # 2\n        for j in range(n):\n            a, b = rotate(i, j)\n            a, b = rotate(a, b)\n            a, b = flip(a, b)\n            if ns[i][j] != ns2[a][b]:\n                same = False\n                break\n        if same == False:\n            break\n    if same:\n        return True\n\n    same=True\n    for i in range(n):\n        for j in range(n):  # 3\n            a, b = rotate(i, j)\n            a, b = rotate(a, b)\n            a, b = rotate(a, b)\n            a, b = flip(a, b)\n            if ns[i][j] != ns2[a][b]:\n                same = False\n                break\n        if same == False:\n            break\n    if same:\n        return True\n    else:\n        return False\n\nif main():\n    print('Yes')\nelse:\n    print('No')\n\n\n\n", "def solve(board):\n  n=len(board)\n  ans=0\n  for i in range(n):\n    for j in range(n):\n      if board[i][j] is 'X':\n        ans+=2**(i*n+j)\n  return ans \n\ndef reverse_array(arr):\n  for i in range(len(arr)):\n    arr[i].reverse()\n\ndef rotate(matrix, degree):\n    if degree == 0:\n        return matrix\n    elif degree > 0:\n        return rotate(zip(*matrix[::-1]), degree-90)\n    else:\n        return rotate(zip(*matrix)[::-1], degree+90)\n\ndef make_list(board):\n    board=list(board)\n    arr=[]\n    for i in range(len(list(board))):\n        arr.append(list(board[i]))\n    return arr\n\ndef add_rotations(board,st):\n  for i in range(4):\n    st.add(solve(board))\n    reverse_array(board)\n    st.add(solve(board))\n    reverse_array(board)\n    board=make_list(rotate(board, 90))\n    \n\nn=int(input())\narr1=[]\narr2=[]\nfor _ in range(n):\n    arr1.append(list(input().strip()))\nfor _ in range(n):\n    arr2.append(list(input().strip()))\ns=set()\ns.add(solve(arr1))\nadd_rotations(arr1,s)\nl1=len(s)\n#print(s,arr1,arr2)\ns.add(solve(arr2))\nadd_rotations(arr2,s)\n#print(s)\nl2=len(s)\nif l1==l2:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "N = int(input())\nfirst = []\nsecond = []\nfor i in range(N):\n    first.append([s for s in input()])\nfor i in range(N):\n    second.append([s for s in input()])\n\ndef rotate_90(matrix):\n    return list(zip(*matrix[::-1]))\n\ndef flip(matrix):\n    return matrix[::-1]\n\ndef compare_matrices(first, second):\n    for i in range(N):\n        for j in range(N):\n            if first[i][j] != second[i][j]:\n                return False\n    return True\n\ndef wrap(first, second):\n    if compare_matrices(first, second) == True:\n        return 'Yes'\n    hold_first = first[::]\n    for _ in range(3):\n        first = rotate_90(first)\n        if compare_matrices(first, second) == True:\n            return 'Yes'\n    first = hold_first\n    first = flip(first)\n    if compare_matrices(first, second) == True:\n        return 'Yes'\n    for _ in range(3):\n        first = rotate_90(first)\n        if compare_matrices(first, second) == True:\n            return 'Yes'\n    return 'No'\n\nprint(wrap(first, second))", "from itertools import chain, combinations, permutations\n\ndef powerset(iterable):\n    \"\"\"\n    powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\n    \"\"\"\n    xs = list(iterable)\n    # note we return an iterator rather than a list\n    return chain.from_iterable(combinations(xs,n) for n in range(len(xs)+1))\n\nn = int(input())\ncl1 = []\ncl2 = []\nfor i in range(n):\n  s = input()\n  a = []\n  for j in range(n):\n    a.append(s[j])\n  cl1.append(a)\n\nfor i in range(n):\n  s = input()\n  a = []\n  for j in range(n):\n    a.append(s[j])\n  cl2.append(a)\n\ndef copy(m):\n  res = []\n  for i in range(n):\n    a = []\n    for j in range(n):\n      a.append(m[i][j])\n    res.append(a)\n  return res\n\ndef pow(m):\n  res = []\n  for i in range(n):\n    a = []\n    for j in range(n):\n      a.append(m[n-1-j][i])\n    res.append(a)\n  return res\n  \ndef vert(m):\n  res = []\n  for i in range(n):\n    res.append(m[i][::-1])\n  return res\n  \ndef gor(m):\n  res = []\n  for i in range(n):\n    a = []\n    for j in range(n):\n      a.append(m[i][n-1-j])\n    res.append(a)\n  return res\n\ncomblist = [[1], []]\ncm = [pow, pow, pow, vert, gor]\ncm = list(powerset(cm))\nres = False\nif cl1 == cl2:\n  res = True\nelse:\n  for x in cm:\n    for y in permutations(x):\n      t = copy(cl1)\n      for z in y:\n        t = z(t)\n      if t==cl2:\n        res = True\n      \nif res:\n  print('Yes')\nelse:\n  print('No')", "#codeforces.com/contest/958/problem/A1\ndef flipH(A,N):\n    B=[[0 for i in range(N)] for j in range(N)]\n    for i in range(N):\n        for j in range(N):\n            B[i][j]=A[i][N-j-1]\n    return B\n\ndef flipV(A,N):\n    B=[[0 for i in range(N)] for j in range(N)]\n    for i in range(N):\n        for j in range(N):\n            B[i][j]=A[N-i-1][j]\n    return B\n\ndef rotate90(A):\n    ans = zip(*A[::-1])\n    ans=list(map(list,ans))\n    return ans\n\ndef check(A,B,N):\n    for i in range(N):\n        for j in range(N):\n            if A[i][j]!=B[i][j]:\n                return False\n    return True\n\nN=int(input())\nA=[]\nX=[]\nfor i in range(N):\n    A.append(list(input()))\nfor i in range(N):\n    X.append(list(input()))\nB=flipH(A,N)\nC=flipV(A,N)\nflag=False\nfor i in range(4):\n    if check(A,X,N) or check(B,X,N) or check(C,X,N):\n        flag=True\n        break\n    else:\n        A=rotate90(A)\n        B=rotate90(B)\n        C=rotate90(C)\nif flag:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "import copy\nn = int(input())\nflg=0\nmat1 = []\nmat2 = []\n\nmats = []\nfor i in range(0, n): mat1.append(tuple(input().strip()))\nfor i in range(0, n): mat2.append(tuple(input().strip()))\nmats.append(mat2)\nmatu = copy.copy(mat2)\nmatv = copy.copy(mat2)\nmatv = list(zip(*matv))\nmats.append(matv)\n\nmattem = copy.copy(matu)\nfor i in range(0, 3):\n\tmattem = list(zip(*list(reversed(mattem))))\n\tmats.append(mattem)\nmattem = copy.copy(matv)\nfor i in range(0, 3):\n\tmattem = list(zip(*list(reversed(mattem))))\n\tmats.append(mattem)\n\nflg = 0\nfor cmat in mats:\n\tflg2 = 1\n\tfor ri in range(0, n):\n\t\tif cmat[ri]!=mat1[ri]:\n\t\t\tflg2=0\n\t\t\tbreak\n\tif flg2==1:\n\t\tflg=1\n\t\tbreak\nif flg==1: print(\"Yes\")\t\t\t\nelse: print(\"No\")\n\n", "def rotate(L):\n    L1 = ['' for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            L1[n - j - 1] += L[i][j]\n    return L1\n\ndef flip_v(L):\n    L1 = []\n    for i in range(n):\n        L1.append(L[i][::-1])\n    return L1\n\ndef flip_h(L):\n    L1 = []\n    for i in range(n):\n        L1.append(L[n - i - 1])\n    return L1\n\nn = int(input())\nL = []\nM = []\nfor i in range(n):\n    L.append(input())\nfor i in range(n):\n    M.append(input())\nL1 = rotate(L)\nL2 = rotate(L1)\nL3 = rotate(L2)\nL4 = flip_v(L)\nL5 = flip_h(L)\nL6 = rotate(L4)\nL7 = rotate(L6)\nL8 = rotate(L7)\nL9 = rotate(L5)\nL10 = rotate(L9)\nL11 = rotate(L10)\nif L == M or L1 == M or L2 == M or L3 == M or L4 == M or L5 == M or L6 == M or L7 == M or L8 == M or L9 == M or L10 == M or L11 == M:\n    print('Yes')\nelse:\n    print('No')", "def check(x, y):\n    return ''.join([''.join(s) for s in x]) == ''.join([''.join(s) for s in y])\n\nn = int(input())\na = [list(input()) for i in range(n)]\nb = [list(input()) for i in range(n)]\nfor i in range(4):\n    for j in range(2):\n        if check(a, b):\n            print('Yes')\n            return\n        b = b[::-1]\n    for j in range(2):\n        if check(a, b):\n            print('Yes')\n            return\n        b = [s[::-1] for s in b]\n    c = [['' for t in range(n)] for u in range(n)]\n    for t in range(n):\n        for u in range(n):\n            c[t][u] = b[u][n - t - 1]\n    b = c[:]\n    if check(a, b):\n        print('Yes')\n        return\nprint('No')\n", "def check(x, y):\n    return ''.join([''.join(s) for s in x]) == ''.join([''.join(s) for s in y])\n\nn = int(input())\na = [list(input()) for i in range(n)]\nb = [list(input()) for i in range(n)]\nfor i in range(4):\n    for j in range(2):\n        if check(a, b):\n            print('Yes')\n            return\n        b = b[::-1]\n    for j in range(2):\n        if check(a, b):\n            print('Yes')\n            return\n        b = [s[::-1] for s in b]\n    c = [['' for t in range(n)] for u in range(n)]\n    for t in range(n):\n        for u in range(n):\n            c[t][u] = b[u][n - t - 1]\n    b = c[:]\n    if check(a, b):\n        print('Yes')\n        return\nprint('No')", "N = int(input())\nmap_1 = [list(input()) for i in range(N)]\nmap_2 = [list(input()) for i in range(N)]\n\nmaps = list()\n\nmaps.append([[map_2[i][j] for j in range(N)] for i in range(N)])\nmaps.append([[map_2[i][N - 1 - j] for j in range(N)] for i in range(N)])\nmaps.append([[map_2[N - 1 - i][j] for j in range(N)] for i in range(N)])\nmaps.append([[map_2[N - 1 - i][N - 1 - j] for j in range(N)] for i in range(N)])\nmaps.append([[map_2[j][i] for j in range(N)] for i in range(N)])\nmaps.append([[map_2[j][N - 1 - i] for j in range(N)] for i in range(N)])\nmaps.append([[map_2[N - 1 - j][i] for j in range(N)] for i in range(N)])\nmaps.append([[map_2[N - 1 - j][N - 1 - i] for j in range(N)] for i in range(N)])\n\nprint(('No', 'Yes')[any(map_1 == el for el in maps)])\n", "def check(x, y):\n    return ''.join([''.join(s) for s in x]) == ''.join([''.join(s) for s in y])\n\nn = int(input())\na = [list(input()) for i in range(n)]\nb = [list(input()) for i in range(n)]\nfor i in range(4):\n    for j in range(2):\n        if check(a, b):\n            print('Yes')\n            return\n        b = b[::-1]\n    for j in range(2):\n        if check(a, b):\n            print('Yes')\n            return\n        b = [s[::-1] for s in b]\n    c = [['' for t in range(n)] for u in range(n)]\n    for t in range(n):\n        for u in range(n):\n            c[t][u] = b[u][n - t - 1]\n    b = c[:]\n    if check(a, b):\n        print('Yes')\n        return\nprint('No')", "#def pr():\n#\tprint()\n#\tfor i in range(n):\n#\t\tfor j in range(n):\n#\t\t\tprint(map1[i][j], end = \"\")\n#\t\tprint()\n#\tprint()\n#-----------------------------------------------\ndef check():\n\tf = True\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tif map1[i][j] != map2[i][j]:\n\t\t\t\tf = False\n\t\t\t\tbreak\n\tif f:\n\t\treturn True\n\t\n\tf = True\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tif map1[i][j] != map2[n - 1 - i][j]:\n\t\t\t\tf = False\n\t\t\t\tbreak\n\tif f:\n\t\treturn True\n\t\n\tf = True\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tif map1[i][j] != map2[i][n - 1 - j]:\n\t\t\t\tf = False\n\t\t\t\tbreak\n\tif f:\n\t\treturn True\n\t\n\ndef rotate():\n\twk1=[]\n\tfor i in range(n):\n\t\twk1.append([])\n\t\tfor j in range(n):\n\t\t\twk1[i].append(map1[i][j])\n\t\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tmap1[i][j] = wk1[j][n - 1 - i]\n\n\nn = int(input())\nmap1 = []\nfor i in range(n):\n\tst = input()\n\tmap1.append([])\n\tfor j in st:\n\t\tmap1[i].append(j)\n\nmap2 = []\nfor i in range(n):\n\tst = input()\n\tmap2.append([])\n\tfor j in st:\n\t\tmap2[i].append(j)\n\n\nf = False\nfor k in range(4):\n\tif check():\n\t\tf = True\n\t\tbreak\n\trotate()\n\nif f:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "def check(x, y):\n    return ''.join([''.join(s) for s in x]) == ''.join([''.join(s) for s in y])\n\nre = int(input())\na = [list(input()) for i in range(re)]\nb = [list(input()) for i in range(re)]\nfor i in range(4):\n    for j in range(2):\n        if check(a, b):\n            print('Yes')\n            return\n        b = b[::-1]\n    for j in range(2):\n        if check(a, b):\n            print('Yes')\n            return\n        b = [s[::-1] for s in b]\n    c = [['' for t in range(re)] for u in range(re)]\n    for t in range(re):\n        for u in range(re):\n            c[t][u] = b[u][re - t - 1]\n    b = c[:]\n    if check(a, b):\n        print('Yes')\n        return\nprint('No')", "n = int(input())\nf = lambda: ''.join(input() for i in range(n))\na, b = f(), f()\ng = lambda k: k // n + n * (n - 1 - k % n)\ne = lambda k: k\nh = lambda k: n * (n - 1 - k // n) + k % n\nv = lambda k: n * (k // n) + n - 1 - k % n\nfor i in (e, v, h):\n    for j in [e, g, lambda k: g(g(k)), lambda k: g(g(g(k)))]:\n        if all(a[k] == b[i(j(k))] for k in range(n * n)): (print('Yes'));return\nprint('No')", "# Function to rotate the matrix \n# 90 degree clockwise \ndef rotate90Clockwise(A): \n    N = len(A[0]) \n    for i in range(N // 2): \n        for j in range(i, N - i - 1): \n            temp = A[i][j] \n            A[i][j] = A[N - 1 - j][i] \n            A[N - 1 - j][i] = A[N - 1 - i][N - 1 - j] \n            A[N - 1 - i][N - 1 - j] = A[j][N - 1 - i] \n            A[j][N - 1 - i] = temp \ndef check(A,B):\n    c1=0\n    c2=0\n    for i in range(N):\n        for j in range(N):\n            if(A[i][j]==B[N-1-i][j]):\n                c1+=1\n            if(A[i][j]==B[i][N-1-j]):\n                c2+=1\n    if(c1==N**2 or c2==N**2):return True\n    else:return False\nN=int(input())\nA=[]\nfor i in range(N):\n    a=input()\n    aa=[]\n    for j in range(N):\n        aa.append(a[j])\n    A.append(aa)\nB=[]    \nfor j in range(N):\n    b=input()\n    bb=[]\n    for j in range(N):\n        bb.append(b[j])\n    B.append(bb)\nflag=False    \nif(A==B):flag=True\nif(check(A,B)):flag=True\nrotate90Clockwise(A)\nif(A==B):flag=True\nif(check(A,B)):flag=True\nrotate90Clockwise(A)\nif(A==B):flag=True\nif(check(A,B)):flag=True\nrotate90Clockwise(A)\nif(A==B):flag=True\nif(check(A,B)):flag=True\nif(flag):print(\"Yes\")\nelse:print(\"No\")"]