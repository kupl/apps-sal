["from math import floor, sqrt\nimport bisect\n\nimport math\n\n\ndef rwh_primes2(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Input n>=6, Returns a list of primes, 2 <= p < n \"\"\"\n    correction = (n%6>1)\n    n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]\n    sieve = [True] * (n//3)\n    sieve[0] = False\n    for i in range(int(n**0.5)//3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        sieve[      ((k*k)//3)      ::2*k]=[False]*((n//6-(k*k)//6-1)//k+1)\n        sieve[(k*k+4*k-2*k*(i&1))//3::2*k]=[False]*((n//6-(k*k+4*k-2*k*(i&1))//6-1)//k+1)\n    return [2,3] + [3*i+1|1 for i in range(1,n//3-correction) if sieve[i]]\n\n\nk = int(input())\n\nprimes = rwh_primes2(k)\n\na = 1\np2 = 2\nfor i in primes[::-1]:\n    if k%i == 0:\n        p2 = i\n        break\n\nxx = range(k-p2+1, k+1)\n#print(list(xx))\nif p2>240:\n    p1 = primes[bisect.bisect_left(primes, int(math.ceil(xx[0]/2)))]\n    print(p1+1)\nelse:\n    ans = k\n    p1 = 1\n    for x1 in xx:\n        for i in primes[::-1]:\n\n            if i >= x1:\n                continue\n\n            if x1 % i == 0:\n                p1 = i\n                break\n        ans = min(ans, x1-p1+1)\n\n    print(ans)", "x2 = int(input())\n\nn = 1000001\nmax_prime_div = [0] * n\nsieve = list(range(n))\nsieve[1] = 0\nfor i in sieve:\n    if i > 1 and sieve[i]:\n        for j in range(2 * i, n, i):\n            sieve[j] = 0\n            max_prime_div[j] = i\n\nmin_x0 = n\nfor x in range(x2 - max_prime_div[x2] + 1, x2 + 1):\n    max_div = max_prime_div[x]\n    tmp = x - max_div + 1\n    if max_div and tmp < min_x0:\n        min_x0 = tmp\nprint(min_x0)", "x2 = int(input())\n\nn = 1000001\nmax_prime_div = [0] * n\nsieve = list(range(n))\nsieve[1] = 0\nfor i in sieve:\n    if sieve[i]:\n        for j in range(2 * i, n, i):\n            sieve[j] = 0\n            max_prime_div[j] = i\n\nmin_x0 = n\nfor x in range(x2 - max_prime_div[x2] + 1, x2 + 1):\n    max_div = max_prime_div[x]\n    tmp = x - max_div + 1\n    if max_div and tmp < min_x0:\n        min_x0 = tmp\n    if max_div and x // max_div == 2:\n        break\nprint(min_x0)", "import array\n\nx2 = int(input())\n\nn = 1000001\nmax_prime_div = array.array('i', [0] * n)\nsieve = array.array('i', list(range(n)))\nsieve[1] = 0\nfor i in sieve:\n    if sieve[i]:\n        for j in range(2 * i, n, i):\n            sieve[j] = 0\n            max_prime_div[j] = i\n\nmin_x0 = n\nfor x in range(x2 - max_prime_div[x2] + 1, x2 + 1):\n    max_div = max_prime_div[x]\n    tmp = x - max_div + 1\n    if max_div and tmp < min_x0:\n        min_x0 = tmp\n    if max_div and x // max_div == 2:\n        break\nprint(min_x0)", "import array\n\nx2 = int(input())\n\nn = 1000001\nmax_prime_div = array.array('i', [0] * n)\nsieve = array.array('i', list(range(n)))\nsieve[1] = 0\nfor i in sieve:\n    if sieve[i]:\n        for j in range(2 * i, n, i):\n            sieve[j] = 0\n            max_prime_div[j] = i\n\nmin_x0 = n\nfor x in range(x2 - max_prime_div[x2] + 1, x2 + 1):\n    max_div = max_prime_div[x]\n    tmp = x - max_div + 1\n    if max_div and tmp < min_x0:\n        min_x0 = tmp\n    if max_div and x // max_div == 2:\n        break\nprint(min_x0)", "x=int(input())\np=[1]*(x+1)\na=2\np[0]=0\np[1]=0\nwhile a<=x:\n    if p[a]:\n        for i in range(a**2,x+1,a):\n            p[i]=0\n    a+=1\nc=[]\nfor i in range(2,len(p)-1):\n    if p[i]:\n        c.append(i)\nfor i in range(len(c)-1,-1,-1):\n    if not x%c[i]:\n        low=c[i]\n        break\nposs=[i for i in range(max(x-low+1,3),x)]\nans=poss[0]\nl=0\nr=1\ntry:\n    while poss[0]>=c[r+1]*2:\n        r+=1\nexcept IndexError:\n    ...\nfor i in poss:\n    while i-c[l]+1>=ans:\n        l+=1\n    if c[r]*2<=i:\n        r+=1\n    if l>r:\n        break\n    for j in range(l,r+1):\n        if not i%c[j] and i-c[j]>1:\n            ans=min(ans,i-c[j]+1)\nprint(ans)", "x=int(input())\np=[1]*(x+1)\na=2\np[0]=0\np[1]=0\nwhile a<=x:\n    if p[a]:\n        for i in range(a**2,x+1,a):\n            p[i]=0\n    a+=1\nc=[]\nfor i in range(2,len(p)-1):\n    if p[i]:\n        c.append(i)\nfor i in range(len(c)-1,-1,-1):\n    if not x%c[i]:\n        low=c[i]\n        break\nposs=[i for i in range(max(x-low+1,3),x)]\nans=poss[0]\nl=0\nr=1\ntry:\n    while poss[0]>=c[r+1]*2:\n        r+=1\nexcept IndexError:\n    ...\nfor i in poss:\n    while i-c[l]+1>=ans:\n        l+=1\n    if c[r]*2<=i:\n        r+=1\n    if l>r:\n        break\n    for j in range(l,r+1):\n        if not i%c[j] and i-c[j]>1:\n            ans=min(ans,i-c[j]+1)\nprint(ans)", "n = int(input())\n\nsiv = [0 for _ in range(n + 1)]\n\nfor i in range(2, n + 1):\n    if siv[i] == 0:\n        for j in range(i + i, n + 1, i):\n            siv[j] = i\n    siv[i] = i - siv[i] + 1;\n\nans = n\nfor i in range(siv[n], n + 1):\n    ans = min(ans, siv[i])\n\nprint(ans)\n", "x2 = int(input())\n\ns = [-1] * (x2 + 1)\nfor i in range(2, x2+1):\n\tif s[i] == -1:\n\t\tfor j in range(i, x2+1, i):\n\t\t\ts[j] = i\n\t\nans = x2\nfor x1 in range(x2 - s[x2] + 1, x2 + 1):\n\tx0 = x1 - s[x1] + 1\n\tif x0 > 1:\n\t\tans = min(ans, x0)\n\nprint(ans)\n", "nmax = 1000010\nprimes = [0 for i in range(nmax)]\n\ndef get_primes():\n    nonlocal primes\n\n    n = 2\n    while n < nmax:\n        num = 2*n\n        while num < nmax:\n            primes[num] = n\n            num += n\n        num = n + 1\n        while num < nmax and primes[num] != 0 :\n            num += 1\n        n = num\n\ndef algo(x2):\n    nonlocal primes\n\n    p2 = primes[x2]\n    min_x1 = x2-p2+1\n    min_x0 = nmax\n\n    for x1 in range(min_x1, x2+1):\n        p1 = primes[x1]\n        x0 = x1 - p1 + 1\n\n        if x0 < min_x0:\n            min_x0 = x0\n            # print(\"p1 is \", p1, \" for \", x0)\n    return min_x0\n\n\nx2 = int(input().strip())\nget_primes()\nprint(algo(x2))\n", "x2 = int(input())\ns = [-1] * (x2+1)\nfor i in range(2, x2+1):\n    if s[i] == -1:\n        for j in range(i, x2+1, i):\n            s[j] = i;\nans = x2\nfor x1 in range(x2-s[x2]+1, x2+1):\n    x0 = x1 - s[x1] + 1\n    if x0 > 1:\n        ans = min(ans, x0)\nprint(ans)\n", "from sys import stdin\nmaxn = 1000006\nprime = [0] * maxn\ndef getPrimes():\n    n = 2\n    while(n < maxn):\n        num = n*2\n        while(num < maxn):\n            prime[num] = n\n            num += n\n        num = n + 1\n        while(  num < maxn and prime[num]!= 0 ):\n            num += 1\n        n = num\n\n\ndef main():\n    getPrimes()\n    n = int(stdin.readline().strip())\n    a = 0\n    b = prime[n]\n    x0 = 9999999\n    for i in range(n-b+1,n+1):\n        \n        a = prime[i]\n        x0 = min(i-a+1,x0)\n        #print(\"i\",i,\"prime[i]\",prime[i],\"x0\",x0)\n    print(x0)\n\nmain()\n", "n = int(input())\n\nans = n\n\nf = [0]*(n+1)\n\nfor i in range(2, n+1):\n\n    if f[i]==0:\n\n        for j in range(i*2, n+1, i):\n\n            f[j] = i\n\n    f[i] = i-f[i]+1\n\nfor i in range(f[n], n+1):\n\n    ans = min(ans, f[i])\n\nprint(ans)\n\n\n\n# Made By Mostafa_Khaled\n", "def max_less_prime_divisor(n): # 1 for primes\n    d, max_d = 2, 1\n    while d * d <= n:\n        while n % d == 0:\n            max_d = d\n            n //= d\n        d += 1\n    return n if n != 1 and max_d != 1 else max_d\n\nn = int(input())\nm = n - max_less_prime_divisor(n) + 1\nanswer = m\nis_prime = [True] * m\nfor i in range(2, m):\n    if is_prime[i]:\n        d = (m - 1) - (m - 1) % i\n        if d + i <= n:\n            answer = min(answer, d + 1)\n        for j in range(i * i, m, i):\n            is_prime[j] = False\nprint(answer)\n    \n", "n = int(input())\n\nis_prime = [True] * n\nfor i in range(2, n):\n    if is_prime[i]:\n        for j in range(i * i, n, i):\n            is_prime[j] = False\nprimes = [i for i in range(2, n) if is_prime[i]]\n\nm = n - 1\nfor p in primes:\n    if n % p == 0:\n        m = n - p\n\nanswer = m + 1\nfor p in primes:\n    if p > m:\n        break\n    d = m - m % p\n    if d + p <= n:\n        answer = min(answer, d + 1)\nprint(answer)\n    \n", "n = int(input())\n\nis_prime = [True] * n\nfor i in range(2, n):\n    if is_prime[i]:\n        for j in range(i * i, n, i):\n            is_prime[j] = False\nprimes = [i for i in range(2, n) if is_prime[i]]\n\nm = n - 1\nfor p in primes:\n    if n % p == 0:\n        m = n - p\n\nanswer = m + 1\nfor p in primes:\n    if p > m:\n        break\n    d = m - m % p\n    if d + p <= n:\n        answer = min(answer, d + 1)\nprint(answer)\n    \n", "n = int(input())\nis_prime = [True] * n\nfor i in range(2, n):\n    if is_prime[i]:\n        for j in range(i * i, n, i):\n            is_prime[j] = False\nprimes = [i for i in range(2, n) if is_prime[i]]\nm = n - 1\nfor p in primes:\n    if n % p == 0:\n        m = n - p\nanswer = m + 1\nfor p in primes:\n    if p > m:\n        break\n    d = m - m % p\n    if d + p <= n:\n        answer = min(answer, d + 1)\nprint(answer)\n", "x = int(input())\nn = x\nvis = [False for i in range(n+1)]\nflag = [0 for i in range(n+1)]\nfor i in range(2, n+1):\n    if not vis[i]:\n        for j in range(i+i, n+1, i):\n            vis[j] = True\n            flag[j] = i\nans = x\nfor i in range(x - flag[x] + 1, x+1):\n    ans = min(ans, i - flag[i] + 1)\nprint(ans)\n", "# By Sieve of Erastoteles\ndef getPrimes(n):\n\tprimes = [0 for _ in range(n + 1)] # Initialize 'primes' in 0\n\tfor i in range(2, n + 1): # n + 1 is the last we will need\n\t    if not primes[i]: # if it is zero, apply algorithm\n\t        for j in range(2*i, n + 1, i):\n\t            primes[j] = i\n\t    primes[i] = i - primes[i] + 1; # Game\n\t# print(primes)\n\treturn primes\n\nx2 = int(input())\nprimes = getPrimes(x2)\n\nres = x2\nfor i in range(primes[x2], x2 + 1):\n\tres = min(res, primes[i])\n\nprint(res)", "n = int(input())\n\nsiv = [0 for _ in range(n+1)]\n\nfor i in range(2, n+1):\n    if siv[i] == 0:\n        for j in range(i+i, n+1, i):\n            siv[j] = i\n    siv[i] = i - siv[i] + 1;\n\nresult = n\nfor i in range(siv[n], n + 1):\n    result = min(result, siv[i])\n\nprint(result)", "x = int(input())\n\narr = [0 for i in range(x + 1)]\n\nfor i in range(2, x+1):\n    if(arr[i] == 0):\n        for j in range(i + i, x + 1, i):\n            arr[j] = i\n    arr[i] = i - arr[i] + 1;\n\nresult = x\nfor i in range(arr[x], x + 1):\n    result = min(result, arr[i])\n\nprint(result)\n", "lectura = int(input())\nlista0 = [0]*(lectura+1)\nfor i in range(2, lectura+1):\n    #print(\"i= \"+str(i))\n    if lista0[i]==0:\n        for j in range(2*i, lectura+1, i):\n            #print(\"j= \"+str(j))\n            lista0[j] = i\n    lista0[i] = i-lista0[i]+1\nconclusion = lectura\nfor i in range(lista0[lectura], lectura+1):\n    conclusion = min(conclusion, lista0[i])\nprint(conclusion)"]