["n, k, m, s = map(int, input().split())\na = list(map(int, input().split()))\nc = list(map(int, input().split()))\nneed = len(c)\nrez = n - m * k\nkek = [0 for i in range(500007)]\ncur_kek = [0 for i in range(500007)]\nfor i in c:\n    kek[i] += 1\nr = 0\nif (rez == 0):\n    lol = need\n    for i in range(0, n, k):\n        for j in range(i, i + k):\n            if kek[a[j]] > cur_kek[a[j]]:\n                need -= 1\n            cur_kek[a[j]] += 1\n        if (need == 0):\n            print(0)\n            break\n        for j in range(i, i + k):\n            cur_kek[a[j]] = 0\n    else:\n        print(-1)\n    return\nmeshayut = 0 if kek[a[0]] else 1\nif kek[a[0]]:\n    need -= 1\ncur_kek[a[0]] += 1\nans = []\nfor l in range(n):\n    while need > 0 and r < n - 1:\n        r += 1\n        if (kek[a[r]] > cur_kek[a[r]]):\n            need -= 1\n            cur_kek[a[r]] += 1\n        else:\n            cur_kek[a[r]] += 1\n            meshayut += 1\n        #print(r, need)\n    need_to_cut = l % k\n    cur = r - l + 1\n    razn = cur - k\n    #print(l, r, need_to_cut, razn, meshayut, cur, need)\n    #print(need, razn + need_to_cut, rez, meshayut + not_useful, razn + need_to_cut)\n    if (need == 0 and razn + need_to_cut <= rez and meshayut >= razn):\n        rezhem = razn\n        for j in range(l - need_to_cut, l):\n            ans.append(j + 1)\n        for j in range(l, r + 1):\n            if kek[a[j]]:\n                kek[a[j]] -= 1\n            elif rezhem:\n                ans.append(j + 1)\n                rezhem -= 1\n        print(len(ans))\n        print(' '.join(map(str, ans)))\n        break\n    if (kek[a[l]]):\n        if cur_kek[a[l]] > kek[a[l]]:\n            meshayut -= 1\n        else:\n            need += 1\n    else:\n        meshayut -= 1\n    cur_kek[a[l]] -= 1\nelse:\n    print(-1)"]