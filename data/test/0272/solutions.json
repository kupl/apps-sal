["a = input()\nb = input()\n\nsymbols = {}\npairs = []\n\nfor i in range(len(a)):\n    if a[i] in symbols:\n        if symbols[a[i]] != b[i]:\n            print('-1')\n            break\n    elif b[i] in symbols:\n        if symbols[b[i]] != a[i]:\n            print('-1')\n            break\n    else:\n        symbols[a[i]] = b[i]\n        symbols[b[i]] = a[i]\n        if a[i] != b[i]:\n            pairs.append((a[i], b[i]))\nelse:\n    print(len(pairs))\n    for elem in pairs:\n        print(elem[0], elem[1])", "s1 = input()\ns2 = input()\nused = ['$'] * 256\nfor i in range(len(s1)):\n    c1 = s1[i]\n    c2 = s2[i]\n    if (c1 == c2):\n        if (used[ord(c1)] == '$' or used[ord(c1)] == '%') and (used[ord(c2)] == '$' or used[ord(c2)] == '%'):\n            used[ord(c1)] = '%'\n            used[ord(c2)] = '%'\n        else:\n            print(-1)\n            return\n    else:\n        if (used[ord(c1)] == '$' or used[ord(c1)] == c2) and (used[ord(c2)] == '$' or used[ord(c2)] == c1):\n            used[ord(c1)] = c2\n            used[ord(c2)] = c1\n        else:\n            print(-1)\n            return\nans = []\nfor i in range(256):\n    if (used[i] == '$' or used[i] == '%'):\n        continue\n    else:\n        if ord(used[i]) < i:\n            ans.append([used[i], chr(i)])\nprint(len(ans))\nfor elem in ans:\n    print(elem[0], elem[1])\n", "s=input()\ns2=input()\na=[set() for i in range(97)]\nfor i in range(len(s)):\n    a[ord(s[i])-97].add(ord(s2[i])-97)\n    a[ord(s2[i])-97].add(ord(s[i])-97)\nif max([len(i) for i in a])>1:\n    print(-1)\nelse:\n    t=set()\n    for i in range(26):\n        if a[i]!=set():\n            o=tuple(sorted([chr(i+97),chr(list(a[i])[0]+97)]))\n            if o[0]!=o[1]:\n                t.add(o)\n    print(len(t))\n    for i in t:\n        print(i[0],i[1])\n", "def chk(l1, l2, known_keys):\n    if l1 not in known_keys and l2 not in known_keys:\n        known_keys[l1] = l2\n        known_keys[l2] = l1\n    elif (l1 in known_keys and known_keys[l1] != l2) or (l2 in known_keys and known_keys[l2] != l1):\n        raise ValueError(\"bad kbd\")\n\ndef m():\n    keys = {}\n    s1 = input()\n    s2 = input()\n    try:\n        for i in map(lambda x, y: chk(x, y, keys), s1, s2):\n            pass\n    except ValueError:\n        print(-1)\n        return\n    k1 = list([x for x in keys if ord(x) < ord(keys[x])])\n    print(len(k1))\n    for k in k1:\n        print(k, keys[k])\n\ndef __starting_point():\n    m()\n\n\n__starting_point()", "import math\ndef main():\n    s = str(input())\n    t = str(input())\n    st_dict = dict()\n    for i in range(len(t)):\n        if s[i] != t[i]:\n            if s[i] in list(st_dict.keys()) and st_dict[s[i]] != t[i]:\n                print(-1)\n                return\n            st_dict[s[i]] = t[i]\n            st_dict[t[i]] = s[i]\n\n    result = ''\n    for i in range(len(t)):\n        if t[i] in list(st_dict.keys()):\n            result += st_dict[t[i]]\n        else:\n            result += t[i]\n\n    if result == s:\n        print(int(len(list(st_dict.keys()))/2))\n        for key in list(st_dict.keys()):\n            if key > st_dict[key]:\n                print('{} {}'.format(key, st_dict[key]))\n    else:\n        print(-1)\nmain()\n", "a = input()\nb = input()\nans = {}\nt = True\nfor i in range(len(a)):\n\tif a[i] in ans.keys():\n\t\tif ans[a[i]] != b[i]:\n\t\t\t\tt = False\n\tif b[i] in ans.keys():\n\t\tif ans[b[i]] != a[i]:\n\t\t\t\tt = False\n\telse:\n\t\tans[a[i]] = b[i]\n\t\tans[b[i]] = a[i]\n\nif t:\n\tan = []\n\tfor i in ans.keys():\n\t\tif i != ans[i] and i not in an and ans[i] not in an:\n\t\t\tan.append(i) \n\t\t\tan.append(ans[i])\n\tprint(len(an)//2)\n\tfor i in range(0, len(an) - 1, 2):\n\t\tprint(an[i], an[i + 1])\nelse:\n\tprint(-1)", "s1 = input()\ns2 = input()\n\nd = {}\nd2 = {}\n\nflag = False\n\nfor i in range(len(s1)):\n    if s1[i] in d:\n        if d[s1[i]] != s2[i]:\n            flag = True\n            break\n\n    if s2[i] in d:\n        if d[s2[i]] != s1[i]:\n            flag = True\n            break\n    else:\n        d[s1[i]] = s2[i]\n        d[s2[i]] = s1[i]\n        if s1[i] != s2[i]:\n            d2[s1[i]] = s2[i]\n\nif flag:\n    print(-1)\nelse:\n    l = len(d2)\n    if not l:\n        print(0)\n    else:\n        print(l)\n        for item in d2:\n            print(item, d2[item])\n            \n            \n", "s1 = input()\ns2 = input()\nd = dict()\nfor i in range(len(s1)):\n    if s2[i] != s1[i]:\n        res1 = d.get(s1[i], -1)\n        res2 = d.get(s2[i], -1)\n        if (res1 == -1 and res2 == -1) or (res1 == s2[i] and res2 == s1[i]):\n            d[s1[i]] = s2[i]\n            d[s2[i]] = s1[i]\n        else:\n            print(-1)\n            return\n    if s2[i] == s1[i]:\n        res = d.get(s1[i], -1)\n        if res != -1 and res != s1[i]:\n            print(-1)\n            return\n        d[s1[i]] = s1[i]\nans = len(d)\nfor i in d:\n    if i == d[i]:\n        ans -= 1\nprint(ans // 2)\nused = dict()\nfor i in d:\n    used[i] = 0\nfor i in d:\n    if not used[i] and i != d[i]:    \n        print(i, d[i])\n        used[d[i]] = 1", "s = input()\nt = input()\nlet = {}\nprinted = []\nf = True\nans = 0\nif s == t:\n    print(0)\nelse:\n    for i in range(len(s)):\n        if s[i] in let:\n            if t[i] != let[s[i]]:\n                print(-1)\n                f = False\n                break\n        elif t[i] in let:\n            if s[i] != let[t[i]]:\n                print(-1)\n                f = False\n                break\n        else:\n            if s[i] != t[i] and (s[i] not in let or t[i] not in let):\n                ans += 1\n            let[s[i]] = t[i]\n            let[t[i]] = s[i]\n    if f:\n        print(ans)\n        for l in let:\n            if let[l] != l and let[l] not in printed:\n                print(let[l], l)\n                printed.append(l)\n", "def main():\n    abra, shacked = str(input()), str(input())\n    dictionary = dict()\n    for i in range(len(shacked)):\n        if not (shacked[i] == abra[i]):\n            if abra[i] in list(dictionary.values()) and dictionary[abra[i]] != shacked[i]:\n                print(-1)\n                return\n            dictionary[abra[i]] = shacked[i]\n            dictionary[shacked[i]] = abra[i]\n \n    making = ''\n    for i in range(len(shacked)):\n        if shacked[i] in list(dictionary.values()):\n            making += dictionary[shacked[i]]\n        else:\n            making += shacked[i]\n \n    if making != abra:\n        print(-1)\n        return\n \n    print(int(len(list(dictionary.keys())) / 2))\n    for key in list(dictionary.values()):\n        if key < dictionary[key]:\n            print(key, dictionary[key])\nmain()\n", "s = input()\ns1 = input()\nmistake = False\nd = dict()\nans = []\n\nfor i in range(len(s)):\n    if s[i] != s1[i]:\n        if s[i] in d and s1[i] in d:\n            if not (d[s[i]] == s1[i] and d[s1[i]] == s[i]):\n                mistake = True\n                break\n\n        elif s[i] in d or s1[i] in d:\n                mistake = True\n                break\n        else:\n            d[s[i]] = s1[i]\n            d[s1[i]] = s[i]\n    else:\n        if s[i] in d and d[s[i]] != s[i]:\n            mistake = True\n            break\n        d[s[i]] = s[i]\n        \nif mistake:\n    print(-1)\nelse:\n    ans = []\n    last = set()\n    for elem in d:\n        if elem not in last and elem != d[elem]:\n            ans.append([elem, d[elem]])\n        last.add(elem)\n        last.add(d[elem])\n        \n    print(len(ans))\n    for elem in ans:\n        print(*elem)\n        \n", "q=input()\nw=input()\nl=len(q)\na=[]\ns=[0 for i in range(0,130)]\nt=[]\nfor i in range(0,l):\n    if q[i]==w[i]:\n        t.append(q[i])\nfor i in range(0,l):\n    if q[i]!=w[i]:\n        a.append([q[i],w[i]])\n        s[ord(q[i])]+=1\n        s[ord(w[i])]+=1\n        c=q[i]\n        if (q[i] in t) | (w[i] in t):\n            s[0]=10\n        q=q.replace(q[i],w[i])\n        w=w.replace(c,w[i])\nif max(s)>1:\n    print(-1)\nelse:\n    print(len(a))\n    for i in a:\n        print(i[0],i[1])\n", "correct = input()\nincorrect = input()\n\nother = dict()#to correct from incorrect\n\nfor i in range(ord('a'), ord('z') + 1):\n    other[chr(i)] = chr(i)\n    #print(i)\n\ncan = True\n\nfor i in range(len(correct)):\n    if other[correct[i]] == incorrect[i]:\n        continue\n    \n    if other[correct[i]] != correct[i]:\n        can = False\n        break\n    \n    if other[incorrect[i]] != incorrect[i]:\n        can = False\n        break\n    \n    other[correct[i]] = incorrect[i]\n    other[incorrect[i]] = correct[i]\n  \nif can:\n    for i in range(len(correct)):\n        if other[correct[i]] != incorrect[i]:\n            can = False\n            break\nif not can:\n    print(-1)\nelse:\n    ans = set()\n    for i in range(ord('a'), ord('z') + 1):\n        if other[chr(i)] != chr(i):\n            a, b = i, ord(other[chr(i)])\n            ans.add((chr(min(a, b)), chr(max(a, b))))\n            \n    print(len(ans))\n    for x in ans:\n        print(*x)\n\n", "a = input()\nb = input()\nalph = [0] * 26\nfor i in range(26):\n   alph[i] = chr(97 + i)\nans = []\nfor i in range(len(a)):\n   if a[i] != alph[ord(b[i]) - 97]:\n      if (alph[ord(a[i]) - 97] == a[i]) and (alph[ord(b[i]) - 97] == b[i]):\n         alph[ord(a[i]) - 97] = b[i]\n         alph[ord(b[i]) - 97] = a[i]\n         ans.append((a[i], b[i]))\n      else:\n         print(-1)\n         return\nfor i in range(len(b)):\n   if a[i] != alph[ord(b[i]) - 97]:\n      print(-1)\n      return\nprint(len(ans))\nfor i in range(len(ans)):\n   print(ans[i][0], ans[i][1])", "s = input()\nt = input()\nd1 = {}\nd2 = {}\nimp = False\nfor i in range(0, len(t)):\n    if d1.get(s[i], '') != '' and d1[s[i]] != t[i]:\n        imp = True\n        break\n    d1[s[i]] = t[i]\n    if d2.get(t[i], '') != '' and d2[t[i]] != s[i]:\n        imp = True\n        break\n    d2[t[i]] = s[i]\n\n\nfor e in d1:\n    if d1.get(d1[e], '') != '' and d1.get(d1[e], '') != e:\n        imp = True\n        break\nif imp == True:\n    print(-1)\nelse:\n    swaps = []\n    for e in d1:\n        if d1[e] != d2[d1[e]]:\n            if not (d1[e], d2[d1[e]]) in swaps and not (d2[d1[e]], d1[e]) in swaps:\n                swaps.append( (d1[e], d2[d1[e]]))\n    print(len(swaps))\n    for e in swaps:\n        print(e[0], e[1])\n", "s1, s2 = input(), input()\nn = len(s1)\nd = dict()\nfor i in range(n):\n    a = s1[i]\n    b = s2[i]\n    if b < a:\n        a, b = b, a\n    if a not in d and b not in d:\n        d[a] = b\n        d[b] = a\n    elif ((a in d and b not in d) or (a not in d and b in d)):\n        print(-1)\n        break\n    elif d[a] != b or d[b] != a:\n        print(-1)\n        break\nelse:\n    k = []\n    for i in d.items():\n        if i[0] < i[1]:\n            k.append('{} {}'.format(i[0], i[1]))\n    print(len(k))\n    print(*k, sep='\\n')", "s = input()\nt = input()\nletters = dict()\nerr = 0\nans = 0\nanswer = set()\nfor i in range(len(s)):\n    if ((s[i] in letters) and (letters[s[i]] != t[i])) or ((t[i] in letters) and (letters[t[i]] != s[i])):\n        print(-1)\n        err = 1\n        break\n    elif not (s[i] in letters):\n        letters[s[i]] = t[i]\n        letters[t[i]] = s[i]\n        st = s[i] + ' ' + t[i]\n        if s[i] == t[i]:\n            continue\n        answer.add(st)\n        ans += 1       \nif err == 0:\n    print(ans)\n    for st in answer:\n        print(st)", "s = input()\ns1 = input()\nq = set()\nz =set()\nflag=0\nfor i in range(len(s)):\n    if(s[i]!=s1[i] and (s1[i],s[i]) not in q and (s[i],s1[i])not in q):\n        q.add((s[i],s1[i]))\n        if(s[i] in z or s1[i] in z):\n            flag = 1\n        z.add(s[i])\n        z.add(s1[i])\nfor i in range(len(s)):\n    if(s[i]==s1[i] and s[i] in z):\n        flag = 1\nif(flag):\n    print(-1)\nelse:\n    print(len(q))\n    for item in q:\n        print(item[0],item[1])\n", "s1, s2 = input(), input()\nalph1, alph2 = [], set()\nans = 0\nfor i in range(len(s1)):\n    fff = [max(s1[i], s2[i]), min(s1[i], s2[i])]\n    ff = fff not in alph1\n    if ff and (s1[i] in alph2 or s2[i] in alph2):\n        ans = -1\n        break\n    elif ff:\n        alph1.append(fff)\n        if s1[i] != s2[i]:\n            ans += 1\n    alph2.add(s1[i])\n    alph2.add(s2[i])\nprint(ans)\nif ans != -1:\n    for i in range(len(alph1)):\n        if alph1[i][0] != alph1[i][1]:\n            print(alph1[i][0], alph1[i][1])", "s1 = input()\ns2 = input()\nn = len(s1)\nd = dict()\nfor i in range(n):\n    a = s1[i]\n    b = s2[i]\n    if b < a:\n        a, b = b, a\n    if a not in d and b not in d:\n        d[a] = b\n        d[b] = a\n    elif (a in d and b not in d) or (a not in d and b in d):\n        print(-1)\n        break\n    elif d[a] != b or d[b] != a:\n        print(-1)\n        break\nelse:\n    ans = []\n    for i in list(d.items()):\n        if i[0] < i[1]:\n            ans.append((i[0], i[1]))\n    print(len(ans))\n    for elem in ans:\n        print(*elem)\n", "s=input()\nt=input()\nif s==t:\n    print(0)\nelse:\n    p=[]\n    w=[]\n    n=len(s)\n    k=0\n    for i in range(n):\n        if s[i]!=t[i]:\n            if s[i] in w or t[i] in w:\n                print(-1)\n                k=-1\n                break\n            if s[i]<t[i]:\n                q=s[i]+t[i]\n            else:\n                q=t[i]+s[i]\n            if not (q in p):\n                for j in range(k):\n                    if (s[i] in p[j]) != (t[i] in p[j]):\n                        print(-1)\n                        k=-1\n                        break\n                if k>-1:\n                    k+=1\n                    p.append(q)\n                else:\n                    break\n        else:\n            f=True\n            for j in range(k):\n                if s[i] in p[j]:\n                    f=False\n            if f:\n                w.append(s[i])\n            else:\n                k=-1\n                print(-1)\n                break\n        if k==-1:\n            break\n    if k>0:\n        print(k)\n        for i in range(k):\n            s=p[i]\n            print(s[0],s[1])\n", "def main():\n    a = input()\n    b = input()\n    keyboard = dict()\n    for i in range(ord(\"a\"), ord(\"z\") + 1):\n        keyboard[chr(i)] = \" \"\n    index = 1\n    size = 0\n    out = \"\"\n    size = 0\n    \n    for i in range(len(a)):\n        if a[i] != b[i]:\n            if keyboard[a[i]] == \" \" and keyboard[b[i]] == \" \":\n                keyboard[a[i]] = b[i]\n                keyboard[b[i]] = a[i]\n                size += 1\n                out += a[i] + \" \" + b[i] + \"\\n\"\n            elif not(keyboard[a[i]] == b[i] and keyboard[b[i]] == a[i]):\n                print(-1)\n                return 0\n        else:\n            if keyboard[a[i]] == \" \":\n                keyboard[a[i]] = a[i]\n            elif keyboard[a[i]] != a[i]:\n                print(-1)\n                return 0\n    \n    print(size)\n    if size > 0:\n        print(out)\n\nmain()", "s = input()\ns1 = input()\nd = dict()\nf = True\nfor i in range(len(s)):\n    a = min(s[i], s1[i])\n    b = max(s[i], s1[i])\n    if a != b:\n        if (a in d and d[a] != b) or (b in d and d[b] != a):\n            f = False\n            break\n        else:\n            d[a] = b\n            d[b] = a\n    else:\n        if a in d and d[a] != a:\n            f = False\n            break\n        else:\n            d[a] = a\nif f:\n    a = []\n    for i in list(d.items()):\n        if i[0] < i[1]:\n            a.append((i[0], i[1]))\n    print(len(a))\n    for i in a:\n        print(*i)\nelse:\n    print(-1)\n", "s, t = input(), input()\nfr = set()\nk = dict()\nl = 0\nfor i in range(len(s)):\n    fr.add(tuple(sorted([s[i], t[i]])))\n    if s[i] in k:\n        if k[s[i]] != t[i]:\n            print(-1)\n            return\n    if t[i] in k:\n        if k[t[i]] != s[i]:\n            print(-1)\n            return\n    k[t[i]] = s[i]\n    k[s[i]] = t[i]\nfor i in fr:\n    if i[0] != i[1]:\n        l += 1\ns1 = [i[0] for i in fr]\ns2 = [i[1] for i in fr]\nprint(l)\nfor i in fr:\n    if i[0] != i[1]:\n        print(i[0], i[1])", "s = input()\nt = input()\nA = dict()\nans = set()\nper  =0\nfor j in range(len(s)):\n    if s[j] in A and t[j] in A:\n        if A[s[j]] != t[j] or A[t[j]] != s[j]:\n            per = 1\n            break\n        \n            \n    elif t[j] in A and s[j] not in A:\n        per=1\n        break\n    elif s[j] in A and t[j] not in A:\n        per=1\n        break\n    else:\n        A[s[j]] = t[j]\n        A[t[j]] = s[j]\n        if s[j] != t[j]:\n            if s[j]+t[j] not in ans and t[j]+s[j] not in ans:\n                ans.add(s[j]+t[j])\nif per != 1:\n    print(len(ans))\n    for j in ans:\n        print(j[0], j[1])\nelse:\n    print(-1)"]