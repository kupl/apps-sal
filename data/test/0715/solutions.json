["\"\"\"\nCodeforces Round 250 Div 2 Problem A\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\nclass IOHandlerObject(object):\n    def getInput(self, mode=2):\n        # 0: String\n        # 1: List of strings\n        # 2: List of integers\n        inputs = input().strip()\n        if mode == 0:\n            return inputs\n        if mode == 1:\n            return inputs.split()\n        if mode == 2:\n            return [int(x) for x in inputs.split()]\n\n    def writeOutput(self, s=\"\\n\"):\n        if isinstance(s, list): s = \" \".join(s)\n        print(s)\n\nIOHandler = IOHandlerObject()\ng = IOHandler.getInput\nw = IOHandler.writeOutput\n\n############################## SOLUTION ##############################\na,b,c,d = g(0),g(0),g(0),g(0)\nr = [(len(a)-2,0), (len(b)-2,1), (len(c)-2,2), (len(d)-2,3)]\nr.sort()\nt = -1\nif r[0][0]*2 <= r[1][0]: t = r[0][1]\nif r[3][0] >= r[2][0] * 2:\n    if not t+1:\n        t = r[3][1]\n    else:\n        t = 5\n\nif t == -1 or t == 5:\n    print(\"C\")\nelse:\n    print(chr(65+t))", "a = []\nfor i in range(4):\n    x = input().strip()[2:]\n    a.append(len(x))\ngood = []\nfor i in range(4):\n    fl = True\n    for j in range(4):\n        if j != i and a[i] / a[j] < 2:\n            fl = False\n    if fl:\n        good.append(i)\n    else:\n        fl = True\n        for j in range(4):\n                if j != i and a[j] / a[i] < 2:\n                    fl = False \n        if fl:\n            good.append(i)\nif len(good) == 1:\n    print(chr(ord('A') + good[0]))\nelse:\n    print('C')", "s = []\nlength = [0] * 4\nfor i in range(4):\n    s.append(input().rstrip())\n    s[i] = s[i][2:]\n    length[i] = len(s[i])\nvar = []\nfor i in range(4):\n    if length[i] >= 2 * max(length[:i] + length[i + 1:]) or length[i] <= min(length[:i] + length[i + 1:]) // 2:\n        var.append(i)\nif len(var) == 1:\n    print(chr(ord('A') + var[0]))\nelse:\n    print(\"C\")\n\n", "a = [len(input()) - 2 for i in range(4)]\ncnt = 0\nres = 2\nfor i in range(4):\n    flag1 = True\n    flag2 = True\n    for j in range(4):\n        if j != i:\n            if a[i] < a[j] * 2:\n                flag1 = False\n            if a[i] * 2 > a[j]:\n                flag2 = False\n    if flag1 or flag2:\n        cnt += 1\n        res = i\nif cnt == 1:\n    print([\"A\", \"B\", \"C\", \"D\"][res])\nelse:\n    print(\"C\")", "def main():\n    s = \"ABCD\"\n    arr = [len(input()) - 2 for i in range(4)]\n\n    decides = []\n    Min = min(arr)\n    tmp = arr[:]; tmp.remove(Min)\n    if Min * 2 <= min(tmp):\n        decides.append(s[arr.index(Min)])\n    \n    Max = max(arr)\n    tmp = arr[:]; tmp.remove(Max)\n    if Max >= max(tmp) * 2:\n        decides.append(s[arr.index(Max)])\n    \n    if len(decides) == 1:\n        print(decides[0])\n    else:\n        print(\"C\")\n\nmain()\n", "def prov(la, lb, lc, ld):\n    if la/lb >= 2 and la/lc >= 2 and la/ld >= 2:\n        return True\n    return False\ndef prov1(la, lb, lc, ld):\n    if  lb/la >= 2 and lc/la >= 2 and ld/la >= 2:\n        return True\n    return False\na = list(input())\nb = list(input())\nc = list(input())\nd = list(input())\na = a[2:]\nb = b[2:]\nc = c[2:]\nd = d[2:]\nla = len(a)\nlb = len(b)\nlc = len(c)\nld = len(d)\nq = []\nif prov(la, lb, lc, ld) or prov1(la, lb, lc, ld):\n    q.append('A')\nif prov(lb, la, lc, ld) or prov1(lb, la, lc, ld):\n    q.append('B')\nif prov(lc, la, lb, ld) or prov1(lc, ld, la, lb):\n    q.append('C')\nif prov(ld, la, lb, lc) or prov1(ld, la, lb, lc):\n    q.append('D')\nif len(q) == 1:\n    print(q[0])\nelse:\n    print('C')", "import sys\na = len(input()) - 2\nb = len(input()) - 2\nc = len(input()) - 2\nd = len(input()) - 2\nx = [0, 0, 0, 0]\nif (a >= 2 * b and a >= 2 * c and a >= 2 * d )or (2 * a <= b and 2 * a <=  c and 2 * a <=  d):\n    x[0] = 1\nif (b >= 2 * a and b >= 2 * c and b >= 2 * d )or (2 * b <=a and 2 * b <=  c and 2 * b <=  d):\n    x[1] = 1\nif (c >= 2 * b and c >= 2 * a and c >= 2 * d )or (2 * c <= a and 2 * c <= b and 2 * c <=  d):\n    x[2] = 1\nif (d >= 2 * b and d >= 2 * c and d >= 2 * a )or (2 * d <= b and 2 * d <=  c and 2 * d <= a):\n    x[3] = 1\n\nif sum(x) == 1:\n    if x[0] == 1:\n        print('A')\n    if x[1] == 1:\n        print('B')\n    if x[2] == 1:\n        print('C')\n    if x[3] == 1:\n        print('D')\nelse:\n    print('C')\n    \n\n", "#! /usr/bin/env python\n\na = len(input()[2:])\nb = len(input()[2:])\nc = len(input()[2:])\nd = len(input()[2:])\n\narr = [a, b, c, d]\n\ncandi = []\nfor i, x in enumerate(arr):\n    sf = True\n    bf = True\n    for j, y in enumerate(arr):\n        if i != j:\n            if x > y / 2:\n                sf = False\n            if x < y * 2:\n                bf = False\n    if sf or bf:\n        candi.append(i)\n\nif len(candi) == 1:\n    print(chr(ord('A') + candi[0]))\nelse:\n    print(\"C\")\n", "answerlist=[]\nlengthlist=[]\ngreat=0\nfinallist=['A','B','C','D']\nfor i in range(4):\n    answerlist.append(str(input()))\n    lengthlist.append(len(answerlist[i])-2)\n\nlengthlist1=lengthlist[:]\nlengthlist.sort()\n\nif lengthlist[0]*2<=lengthlist[1]:\n    great=1\nif lengthlist[3]>=lengthlist[2]*2:\n    if great==1:\n        great=0\n    else:\n        great=2\nif great==0:\n    print('C')\nif great==1:\n    print(finallist[lengthlist1.index(lengthlist[0])])\nif great==2:\n    print(finallist[lengthlist1.index(lengthlist[3])])", "variants = [len(input()[2:]) for i in range(4)]\nis_awesome = [1]*4\nfor i in range(4):\n    for j in range(4):\n        if i != j and (not variants[i] * 2 <= variants[j]):\n            is_awesome[i] = 0\n    if not is_awesome[i]:\n        is_awesome[i] = 1\n        for j in range(4):\n            if i != j and (not variants[i] / 2 >= variants[j]):\n                is_awesome[i] = 0\nif sum(is_awesome) == 1:\n    print(chr(ord('A') + is_awesome.index(1)))\nelse:\n    print(\"C\")\n", "varianti=[input()[2:] for i in range(4)]\nlenz=[len(varianti[i]) for i in range(4)]\ncounter=0\nfor i in range(4):\n    dub=lenz[:]\n    now=dub.pop(i)\n    c1=0\n    c2=0\n    for z in range(3):\n        if(now/dub[z]>=2):\n            c1+=1\n        elif (dub[z]/now>=2):\n            c2+=1\n    if c1==3 or c2==3 :\n        zamechat=i\n        counter+=1\nif counter==1:\n    print(['A','B','C','D'][zamechat])\nelse:\n    print('C')\n", "import sys\n#sys.stdin = open('input.txt', 'r')\nt, a = input().split('.')\nt, b = input().split('.')\nt, c = input().split('.')\nt, d = input().split('.')\nk = [0]*4\nif 2*len(a) <= len(b) and 2*len(a) <= len(c) and 2*len(a) <= len(d): k[0]=1\nif 2*len(b) <= len(a) and 2*len(b) <= len(c) and 2*len(b) <= len(d): k[1]=1\nif 2*len(c) <= len(a) and 2*len(c) <= len(b) and 2*len(c) <= len(d): k[2]=1\nif 2*len(d) <= len(a) and 2*len(d) <= len(b) and 2*len(d) <= len(c): k[3]=1\ns = [0]*4\nif 2*len(b) <= len(a) and 2*len(c) <= len(a) and 2*len(d) <= len(a): s[0]=1\nif 2*len(a) <= len(b) and 2*len(c) <= len(b) and 2*len(d) <= len(b): s[1]=1\nif 2*len(a) <= len(c) and 2*len(b) <= len(c) and 2*len(d) <= len(c): s[2]=1\nif 2*len(a) <= len(d) and 2*len(b) <= len(d) and 2*len(c) <= len(d): s[3]=1\nif sum(k) + sum(s) == 1:\n\tif k[0] == 1: print('A')\n\tif k[1] == 1: print('B')\n\tif k[2] == 1: print('C')\n\tif k[3] == 1: print('D')\n\tif s[0] == 1: print('A')\n\tif s[1] == 1: print('B')\n\tif s[2] == 1: print('C')\n\tif s[3] == 1: print('D')\nelse:\n\tprint('C')\n\n\n\n\n\n\n\n", "a = input()\nb = input()\nc = input()\nd = input()\n\neles = [a, b , c , d]\nelems = [a[2:], b[2:], c[2:], d[2:]]\n#print(elems)\ng = []\nl = [len(elems[0]),len(elems[1]), len(elems[2]), len(elems[3])]\n#print(l)\nfor i in range(4):\n    ele = l[i]\n    r = []\n    for j in range(4):\n        \n        if i == j :\n            continue\n        else:\n            ratio = ele / l[j]\n            #print(ratio)\n            r.append(ratio)\n    #print(r)\n    count = 0\n    for k in range(len(r)):\n        if r[k] <= 0.5  :\n            count += 1\n    if count == 3 :\n        g.append(i)\n    else:\n        count1 = 0\n        for c in range(len(r)):\n            if r[c] >= 2:\n                count1 += 1\n        if count1 == 3:\n            g.append(i)\n            \n    \n\nif len(g) == 1:\n    print(eles[g[0]][0])\nelse:\n    print('C')\n", "a = [0] * 4\nfor i in range(4):\n    s = input().strip()\n    a[i] = len(s) - 2\nans = 'C'\nf = 0\nfor i in range(4):\n    f1 = 1\n    f2 = 1\n    for j in range(4):\n        if i != j and a[i] < 2 * a[j]:\n            f1 = 0\n        if  i != j and 2 * a[i] > a[j]:\n            f2 = 0\n    if f1 :\n        ans = chr(ord(\"A\") + i)\n        f += 1\n    if f2:\n        ans = chr(ord(\"A\") + i)\n        f += 1\nif f == 1:\n    print(ans)\nelse:\n    print(\"C\")", "a = [len(input()[2:]), 'A']\nb = [len(input()[2:]), 'B']\nc = [len(input()[2:]), 'C']\nd = [len(input()[2:]), 'D']\nans = None\n\nl = list(sorted([a, b, c, d]))\n\nif l[0][0] * 2 <= l[1][0] and l[2][0] * 2 > l[3][0]:\n    ans = l[0][1]\nelif l[2][0] * 2 <= l[3][0] and l[0][0] * 2 > l[1][0]:\n    ans = l[3][1]\nelse:\n    ans = 'C'\n\nprint(ans)\n", "x, y = {}, {}\n\ndef get_len(path):\n    return int(len(path[1]))\n\nx['A'] = input()\nx['B'] = input()\nx['C'] = input()\nx['D'] = input()\n\ny = sorted(list(x.items()), key=get_len)\n\nif (len(y[0][1]) - 2) * 2 <= (len(y[1][1]) - 2) and (len(y[3][1]) - 2) < (len(y[2][1]) - 2) * 2:\n    print( y[0][0] )\nelif (len(y[3][1]) - 2) >= (len(y[2][1]) - 2) * 2 and (len(y[0][1]) - 2) * 2 > (len(y[1][1]) - 2):\n    print( y[3][0] )\nelse:\n    print( \"C\" )\n", "s = []\nlength = [0 for i in range(4)]\nfor i in range(4):\n    s.append(input()[2:])\n    length[i] = len(s[i])\n\nvar = []\nfor i in range(4):\n    if length[i] >= 2*max(length[:i] + length[i+1:]) or \\\n       length[i] <= min(length[:i] + length[i+1:])//2:\n        var.append(i)\n\nif len(var) == 1:\n    print(chr(ord('A') + var[0]))\nelse:\n    print('C')\n", "q, t = 0, sorted([(len(input()) - 2, i) for i in 'ABCD'])\nif 2 * t[0][0] <= t[1][0]: q += 1\nif t[3][0] >= 2 * t[2][0]: q += 2\nprint(['C', t[0][1], t[3][1], 'C'][q])", "a=input()[2:]\nb=input()[2:]\nc=input()[2:]\nd=input()[2:]\n\nL=[a,b,c,d]\nS=\"ABCD\"\nx=0\ne=[]\nfor i in range(4):\n    l=True\n    s=True\n    for j in range(4):\n        if(j==i):\n            continue\n        if(len(L[i])<len(L[j])*2):\n            l=False\n        if(len(L[j])<len(L[i])*2):\n            s=False\n    if(l and not s):\n        x+=1\n        e.append(i)\n    elif(s and not l):\n        x+=1\n        e.append(i)\nif(x==1):\n    print(S[e[0]])\nelse:\n    print(\"C\")\n", "a = []\na.append(input())\na.append(input())\na.append(input())\na.append(input())\nb = []\n\nfor i in range(len(a)):\n    b.append(len(a[i]) - 2)\n\nb.sort()\n\nres = []\n\nif b[0] * 2 <= b[1] and b[1] != 0:\n    res.append(b[0])\n\nif b[2] * 2 <= b[3] and b[3] != 0:\n    res.append(b[3])\n\n\nif len(res) == 1:\n    for i in range(len(a)):\n        if len(a[i]) - 2 == res[0]:\n            print(a[i][:1])\nelse:\n    print('C')", "x = []\nx.append((len(input())-2, 'A'))\nx.append((len(input())-2, 'B'))\nx.append((len(input())-2, 'C'))\nx.append((len(input())-2, 'D'))\n\nx.sort()\n\nif x[0][0] * 2 <= x[1][0] and x[2][0] * 2 <= x[3][0]:\n    print('C')\nelse:\n    if x[0][0] * 2 <= x[1][0]:\n        print(x[0][1])\n    else:\n        if x[2][0] * 2 <= x[3][0]:\n            print(x[3][1])\n        else:\n            print('C')", "a = sorted(zip((len(input()) - 2 for i in range(4)), \"ABCD\"))\nif 2 * a[2][0] <= a[3][0] and 2 * a[0][0] > a[1][0]:\n  print(a[3][1])\nelif 2 * a[2][0] > a[3][0] and 2 * a[0][0] <= a[1][0]:\n  print(a[0][1])\nelse:\n  print(\"C\")", "answers = ['A', 'B', 'C', 'D']\nvariants = []\nfor i in range(0, 4):\n    variants.append((len(input()) - 2, answers[i]))\nasc = sorted(variants, key=lambda variant: variant[0])\ndes = sorted(variants, key=lambda variant: variant[0], reverse = True)\n\ngood_variants = []\nif (2 * asc[0][0] <= asc[1][0]):\n    good_variants.append(asc[0])\nif (2 * des[1][0] <= des[0][0]):\n    good_variants.append(des[0])\nprint(good_variants[0][1] if len(good_variants) == 1 else 'C')", "v = [input()[2:] for i in range(4)]\nl = [(len(s),s) for s in v]\n\nmin_l, min_s = min(l)[0], min(l)[1]\nmax_l, max_s = max(l)[0], max(l)[1]\n\nmin_ind = 0\nmax_ind = 0\n\nfor i in range(4):\n    if i != v.index(min_s) and len(v[i]) / min_l >= 2:\n        min_ind += 1\n    if i != v.index(max_s) and max_l / len(v[i]) >= 2:\n        max_ind += 1\n\nif min_ind == 3 and max_ind != 3:\n    print(chr(65 + v.index(min_s)))\nelif max_ind == 3 and min_ind != 3:\n    print(chr(65 + v.index(max_s)))\nelse:print('C')", "questionNames = ['A', 'B', 'C', 'D']\n\nlengths = [(len(input()) - 2, questionNames[i]) for i in range(4)]\nlengths.sort()\n\nfirstIsGreat = (lengths[0][0] <= lengths[1][0] // 2)\nlastIsGreat = (lengths[3][0] >= lengths[2][0] * 2)\n\nif firstIsGreat ^ lastIsGreat:\n\tif firstIsGreat:\n\t\tprint(lengths[0][1])\n\telse:\n\t\tprint(lengths[3][1])\nelse:\n\tprint('C')\n"]