["p = 10 ** 9 + 7\nn, b, k, x = [int(s) for s in input().split()]\nblock = [int(s) for s in input().split()]\nD = [0 for i in range(10)]\nfor s in block:\n    D[s] += 1\nA = [[0 for t in range(x)]]\npows = [pow(10, 1<<j, x) for j in range(b.bit_length())]\nfor i in range(10):\n    A[0][i%x] += D[i]\nfor j in range(b.bit_length()-1):\n    B = A[-1]\n    C = [sum(B[i]*B[(t - i*pows[j])%x] for i in range(x)) % p for t in range(x)]\n    A.append(C)\nans = None\nfor j in range(b.bit_length()):\n    if (b>>j)&1:\n        if ans is None:\n            ans = A[j][:]\n        else:\n            ans = [sum(A[j][(t - i*pows[j])%x]*ans[i] for i in range(x)) % p for t in range(x)]\nprint(ans[k])\n\n", "def g(b,w):\n    if(b,w)in x:return x[(b,w)]\n    x[(b,w)]=sum(c[i]for i in r(len(c))if i%m==w)if b==1else sum(g(b//2,l)*g(b-b//2,(w-(l*pow(10,b-b//2,m))%m+m)%m)for l in r(m))%(10**9+7)\n    return x[(b,w)]\nq,r=input,range\nn,b,w,m=map(int,q().split())\na,x=list(map(int,q().split())),{}\nc=[a.count(i)for i in r(10)]\nprint(g(b,w))", "def g(b,w):\n    if(b,w)in x:return x[(b,w)]\n    x[(b,w)]=sum(c[i]for i in r(len(c))if i%m==w)if b==1else sum(g(b//2,l)*g(b-b//2,(w-(l*pow(10,b-b//2,m))%m+m)%m)for l in r(m))%(10**9+7)\n    return x[(b,w)]\nq,r,k=input,range,'map(int,q().split())'\nn,b,w,m=eval(k)\na,x=list(eval(k)),{}\nc=[a.count(i)for i in r(10)]\nprint(g(b,w))", "def g(b,w):\n    if(b,w)in x:return x[(b,w)]\n    x[(b,w)]=sum(c[i]for i in r(len(c))if i%m==w)if b==1else sum(g(b//2,l)*g(b-b//2,(w-(l*pow(10,b-b//2,m))%m+m)%m)for l in r(m))%(10**9+7)\n    return x[(b,w)]\nq,r,k,t=input,range,'map(int,q().split())',eval\nn,b,w,m=t(k)\na,x=list(t(k)),{}\nc=[a.count(i)for i in r(10)]\nprint(g(b,w))", "f = lambda: map(int, input().split())\nm = 1000000007\nn, b, k, x = f()\ns = [0] * x\nfor q in f(): s[q % x] += 1\n\ndef g(t, d):\n    if not t: return s\n    p = [0] * x\n    for i, a in enumerate(t):\n        for j, b in enumerate(s):\n            p[(i + d * j) % x] += a * b\n    return [q % m for q in p]\n\nt = []\nu, v = 1, 10\nwhile b:\n    if b & 1:\n        t = g(t, u)\n        u = v * u % x\n    s = g(s, v)\n    v = v * v % x\n    b >>= 1\nprint(t[k])", "f = lambda: map(int, input().split())\nm = 1000000007\nn, b, k, x = f()\ns = [0] * x\nfor q in f(): s[q % x] += 1\n\ndef g(t, d):\n    p = [0] * x\n    for i, a in enumerate(t):\n        for j, b in enumerate(s):\n            p[(i + d * j) % x] += a * b\n    return [q % m for q in p]\n\nt = []\nu, v = 1, 10\nwhile b:\n    if b & 1:\n        t = g(t, u) if t else s\n        u = v * u % x\n    s = g(s, v)\n    v = v * v % x\n    b >>= 1\n\nprint(t[k])", "\nn,b,k,x=map(int,input().split())\narr=list(map(int,input().split()))\n\nflg=[0]*x\nmod = 10**9+7\n\nfor i in arr:\n    flg[i%x]+=1\n\ndef mul(dp,flg,rank):\n    nonlocal x\n    res=[0]*x\n    for i in range(x):\n        for j in range(x):\n            res[ ( (i*rank)%x+j)%x ] += dp[i]*flg[j]%mod\n            res[ ( (i*rank)%x+j)%x ] %= mod\n            # print(i,j,dp[i],dp[j],res[ ( (i*rank)%x+j)%x ])\n    return res\n\ndef pow(n):\n    nonlocal x\n    res=1\n    base=10\n    while n:\n        if n&1:\n            res=(res*base)%x\n        base=(base*base)%x\n        n>>=1\n    return res\n\ndp=[0]*x\ndp[0]=1\n# print(mul(dp,flg,1))\nrank=1\nwhile b:\n    if b&1:\n        dp=mul(dp,flg,pow(rank))\n    flg=mul(flg,flg,pow(rank))\n    rank<<=1\n    b>>=1\n\nprint(dp[k])   ", "R = lambda : list(map(int, input().split()))\nn,b,k,x = R()\nv = list(R())\nmod = 10**9+7\n\narr_0 = [0]*x\nfor bd in v:\n    arr_0[bd%x]+=1\n\ndef cross(arr1,arr2,x,mod):\n    arr = [0]*len(arr1)\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            arr[(i+j)%x] += arr1[i]*arr2[j]\n    for i in range(len(arr)):\n        arr[i] %= mod\n    return arr\n\ndef move(arr,s,x):\n    m = pow(10,s,x)\n    res = [0]*x\n    for i in range(x):\n        res[(i*m)%x]+=arr[i]\n    return res\n\ndef solve(b,x,arr_0,mod):\n    if b==1:\n        return arr_0\n    if b%2==1:\n        sol = solve(b-1,x,arr_0,mod)\n        return cross(move(sol,1,x),arr_0,x,mod)\n    else:\n        sol = solve(b//2,x,arr_0,mod)\n        return cross(move(sol,b//2,x),sol,x,mod)\n\nsol = solve(b,x,arr_0,mod)\nprint(sol[k])\n\n"]