["def can(n, k):\n    total = n\n    s = 0\n\n    while n > 0:\n        cur = min(n, k)\n        s += cur\n        n -= cur\n\n        n -= n // 10\n\n    return s * 2 >= total\n\nn = int(input())\n\nle = 0\nrg = n\n\nwhile rg - le > 1:\n    mid = (rg + le) // 2\n\n    if can(n, mid):\n        rg = mid\n    else:\n        le = mid\n\nprint(rg)\n", "def consumed(n, k):\n    res = 0\n    while n:\n        eaten = min(n, k)\n        res += eaten\n        n -= eaten\n        n -= n // 10\n    return res\n\nn = int(input())\n\nlo = 1\nhigh = (n+1) // 2\n\nwhile lo != high:\n    mid = (lo + high) // 2\n    if consumed(n, mid) * 2 >= n:\n        high = mid\n    else:\n        lo = mid + 1\n\nprint(lo)\n", "def read_input():\n\treturn map(int, input().split())\n\nn = int(input())\n\ndef eat(k, n):\n\tans = 0\n\twhile n >= k:\n\t\tans += k\n\t\tn = max(0, (n - k) - (n - k) // 10)\n\tans += n\n\treturn ans\n\nl = 1\nr = n + 1\n\nwhile r - l > 1:\n\tm = (l + r) >> 1\n\tif 2 * eat(m, n) >= n:\n\t\tr = m\n\telse:\n\t\tl = m\n\nprint(l if 2 * eat(l, n) >= n else l + 1)", "\n\n\n\ndef how_much_he_eats(n, k):\n    result = 0\n    while n != 0:\n        eats = min([n, k])\n        result += eats\n        n -= eats\n        n -= n // 10\n    return result\n\n\nn = int(input())\n\na, b, c = 1, n, 0\n\nwhile a < b:\n    c = (a + b) // 2\n\n    if 2 * how_much_he_eats(n, c) >= n:\n        b = c\n    else:\n        a = c + 1\n\nprint(a)\n", "N = int(input())\n\ndef check(k):\n    r = N\n    a = 0\n    while 1:\n        if r < k:\n            a += r\n            break\n        r -= k\n        a += k\n        r -= r//10\n    return a*2 >= N\n\n\nleft = 0; right = 10**18+1\nwhile left+1 < right:\n    mid = (left + right) // 2\n    if check(mid):\n        right = mid\n    else:\n        left = mid\nprint(right)\n", "n=int(input())\ndef query(k):\n    t=n\n    g=(n+1)//2\n    while t:\n        if t<k:\n            g-=t\n            break\n        t-=k\n        g-=k\n        t=t-t//10\n    if g<=0:return 1\n    else:return 0\n\ndef bs(l,r):\n    if l==r: return l\n    m=(l+r)//2\n    if query(m):return bs(l,m)\n    else: return bs(m+1,r)\n\nprint(bs(1,1000000000000000000))\n", "n = int(input())\nl = 1\nr = n\nwhile l < r:\n    m = (l + r) // 2\n    cur = n\n    k = m\n    p = 0\n    v = 0\n    while cur:\n        v += min(cur, k)\n        cur -= min(cur, k)\n        p += cur // 10\n        cur -= cur // 10\n    if v >= (n + 1) // 2:\n        r = m\n    else:\n        l = m + 1\nprint(l)\n", "def ii():\n    return int(input())\ndef mi():\n    return map(int, input().split())\ndef li():\n    return list(mi())\n    \ndef f(n, k):\n    c = 0\n    e = 0\n    while n > 0:\n        e += min(k, n)\n        n -= k\n        n -= n // 10\n        c += 1\n    return e\n\nn = ii()\nlo = 1\nhi = th = (n + 1) // 2\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    cnt = f(n, mid)\n    if cnt >= th:\n        hi = mid\n    else:\n        lo = mid + 1\nprint(lo)", "def f(n, k):\n  m = n\n  p, v = 0, 0\n  while n > 0:\n    p += min(k, n)\n    n -= min(n, k)\n    if p >= m // 2:\n      break\n    v += n // 10\n    n -= n // 10\n    if v > m // 2:\n      break\n  return p >= v\n\nn = int(input())\n\nl, u = 1, n\nwhile (l != u):\n  m = (l + u) // 2\n  if not f(n, l) and not f(n, m):\n    l = m + 1\n  elif f(n, m) and f(n, u):\n    u = m\nprint(l)\n", "n = int(input())\n\n\ndef check(p):\n    V = 0\n    n_ = n\n    while n_ > 0:\n        temp = min(n_, p)\n        V += temp\n        n_ -= temp\n        n_ -= n_ // 10\n\n    return 2 * V >= n\n\n\ndef binSearch(a, b):\n    left, right = a - 1, b + 1\n\n    while right - left > 1:\n        mid = (left + right) // 2\n\n        if check(mid):\n            right = mid\n\n        else:\n            left = mid\n\n    return right\n\n\nprint(binSearch(1, n // 2))\n", "n = int(input())\n\n\ndef eat(n, k):\n    first = 0\n    old = n\n    while n > 0:\n        if n > k:\n            n -= k\n            first += k\n        else:\n            first += n\n            n = 0\n        n -= n // 10\n    if 2 * first >= old:\n        return True\n    return False\n\n\nr = n + 1\nl = 1\n\n\nwhile l + 1 < r:\n    m = l + (r - l - 1) // 2\n    if eat(n, m):\n        r = m + 1\n    else:\n        l = m + 1\n\nprint(l)\n", "n = int(input())\n\nhalf = (n-1) // 2 + 1\n\ndef simulate(k):\n    remain = n\n    vasya = 0\n    \n    while remain > 0:\n        vasya += min(k, remain)\n        remain -= k\n        remain -= remain // 10\n        \n    return vasya >= half\n\nhi = n\nlo = 0\n\nwhile hi - lo > 1:\n    mid = (hi + lo) // 2\n    \n    if simulate(mid):\n        hi = mid\n    else:\n        lo = mid\n\nprint(hi)", "import math\nn = int( input() )\n\ndef eat( k ):\n    vasya = petya = 0\n    candy = n\n    while candy > 0:\n        ate = 0\n        ate = min( candy, k )\n        vasya += ate\n        candy -= ate\n        if candy > 9:\n            ate = candy // 10\n            petya += ate\n            candy -= ate\n    return vasya >= petya\n\nl = int( math.log( n, 2 ) )\na = 0\nwhile l >= 0:\n    b = 1 << l\n    c = n - a - b\n    if c > 0 and eat( c ):\n        a += b\n    l -= 1\n\nprint( n - a )\n", "n = int(input())\n\nif n <= 10:\n\tprint(\"1\")\n\treturn\n\ndef check(k):\n\tout = 0\n\tcur = n\n\twhile cur != 0:\n\t\ttmp = min(cur, k)\n\t\tcur -= tmp\n\t\tout += tmp\n\t\tif cur >= 10:\n\t\t\tcur -= cur // 10\n\treturn out\n\nl = 0\nr = 10 ** 18 + 1\nk = (l + r) // 2\nwhile r - l > 1:\n\tif 2 * check(k) >= n:\n\t\tr = k\n\telse:\n\t\tl = k\n\tk = (l + r) // 2\n\nprint(k + 1)\n", "n = int(input())\n\ndef check(k):\n    a, b = 0, 0\n    i = n\n    while i > 0:\n        t = min(k, i)\n        a += t\n        i -= t\n\n        t = i // 10\n        b += t\n        i -= t\n    # dbvar(k, a, b)\n    return a >= b\n\nleft = 1\nright = n\nwhile right - left > 1:\n    m = (left + right) // 2\n    if check(m):\n        right = m\n    else:\n        left = m\nprint(left if check(left) else right)", "# \n#      ___           ___                       ___       ___           ___       ___     \n#     /\\__\\         /\\  \\          ___        /\\__\\     /\\  \\         /\\__\\     /\\  \\    \n#    /:/  /        /::\\  \\        /\\  \\      /:/  /    /::\\  \\       /:/  /    /::\\  \\   \n#   /:/__/        /:/\\:\\  \\       \\:\\  \\    /:/  /    /:/\\:\\  \\     /:/  /    /:/\\ \\  \\  \n#  /::\\__\\____   /::\\\u02c9\\:\\  \\      /::\\__\\  /:/  /    /:/  \\:\\__\\   /:/  /    _\\:\\\u02c9\\ \\  \\ \n# /:/\\:::::\\__\\ /:/\\:\\ \\:\\__\\  __/:/\\/__/ /:/__/    /:/__/ \\:|__| /:/__/    /\\ \\:\\ \\ \\__\\\n# \\/_|:|\u02c9\u02c9|\u02c9    \\/__\\:\\/:/  / /\\/:/  /    \\:\\  \\    \\:\\  \\ /:/  / \\:\\  \\    \\:\\ \\:\\ \\/__/\n#    |:|  |          \\::/  /  \\::/__/      \\:\\  \\    \\:\\  /:/  /   \\:\\  \\    \\:\\ \\:\\__\\  \n#    |:|  |          /:/  /    \\:\\__\\       \\:\\  \\    \\:\\/:/  /     \\:\\  \\    \\:\\/:/  /  \n#    |:|  |         /:/  /      \\/__/        \\:\\__\\    \\::/__/       \\:\\__\\    \\::/  /   \n#     \\|__|         \\/__/                     \\/__/     \u02c9\u02c9            \\/__/     \\/__/    \n#\n\nn = int(input())\n\ndef che(k):\n    nn = n\n    cnt = 0\n    while nn:\n        if nn <= k:\n            cnt += nn\n            break\n        cnt += k\n        nn -= k\n        nn -= nn//10\n    return (cnt<<1) >= n\n\nl, r = 1, 1000000000000000000\nwhile l < r:\n    mid = (l+r)>>1\n    if (che(mid)):\n        r = mid\n    else:\n        l = mid+1\nprint(r)\n", "\nimport sys\nimport math\nimport os.path\nimport random\nfrom copy import deepcopy\nfrom functools import reduce\nfrom collections import Counter, ChainMap, defaultdict\nfrom itertools import cycle, chain\nfrom queue import Queue, PriorityQueue\nfrom heapq import heappush, heappop, heappushpop, heapify, heapreplace, nlargest, nsmallest\nimport bisect\nfrom statistics import mean, mode, median, median_low, median_high\n# CONFIG\nsys.setrecursionlimit(1000000000)\n# LOG \ndef log(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n# INPUT\ndef ni():\n    return map(int, input().split())\ndef nio(offset):\n    return map(lambda x: int(x) + offset, input().split())\ndef nia():\n    return list(map(int, input().split()))\n# CONVERT\ndef toString(aList, sep=\" \"):\n    return sep.join(str(x) for x in aList)\ndef toMapInvertIndex(aList):\n    return {k: v for v, k in enumerate(aList)}\n# SORT\ndef sortId(arr):\n    return sorted(range(arr), key=lambda k: arr[k])\n# MATH\ndef gcd(a,b):\n    while b:\n        a, b = b, a % b\n    return a\n# MAIN\n\nn, = ni()\n\ndef check(k):\n    v = 0\n    p = 0\n    x = n\n    # log(\"check\",k)\n    while (x > 0):\n        if (x > k):\n            v += k\n            x -= k\n            if (x > 9):\n                pd = x // 10\n                p += pd\n                x -= pd\n        else:\n            v += x\n            x = 0\n        \n        # log(\" \", x, v, p)\n    \n    # log(k,v,p)\n    return v >= p\n\ndef bsearch(low, high):\n    # log(low,high)\n    if (low >= high):\n        return low\n    mid = (low + high) // 2\n    if check(mid):\n        return bsearch(low, mid)\n    else:\n        return bsearch(mid+1, high)\n\n\nx = bsearch(1,n)\n# log(x)\nprint(x)", "n = int(input())\n\nl = 0\nr = n\n\ndef eats(n, k):\n\tres = 0\n\twhile n > 0:\n\t\tif n < k:\n\t\t\tres += n\n\t\t\tn = 0\n\t\telse:\n\t\t\tres += k\n\t\t\tn -= k\n\t\t\tn -= n//10\n\treturn res\n\nwhile r-l > 1:\n\tmid = (r + l) // 2\n\tif eats(n, mid) >= (n+1) // 2:\n\t\tr = mid\n\telse:\n\t\tl = mid\n\nprint(r)\n", "DEBUG = True\nn = input().strip().split(\" \")\nn = int(n[0])\n\ndef oneTest(N, k):\n    n = N\n\n    nv = 0\n    np = 0\n\n    while n > 0:\n        if n <= k:\n            nv += n\n            n = 0\n        else:\n            n -= k\n            nv += k\n\n            x = n // 10\n            n -= x\n            np += x\n\n    assert nv + np == N\n    return nv * 2 >= N\n\n\ndef getResult(n):\n    lo = 1\n    hi = n\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if not oneTest(n, mid):\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n\n\nk = getResult(n)\nprint(k)\n\nif DEBUG:\n    if k > 1:\n        assert not oneTest(n, k-1)\n    assert oneTest(n, k)\n    assert oneTest(n, k+1)\n", "n=int(input())\ndef f(k):\n s=(n+1)//2;m=n\n while s>0and m:\n  l=min(k,m);s-=l;m-=l;m-=m//10\n return s<=0\nl=[1,1]\nif not f(1):\n l[1]=n//2\n while l[1]-l[0]>1:\n  m=sum(l)//2\n  l[f(m)]=m\nprint(l[1])", "n = int(input())\nleft = 1\nright = n\n\ndef modulate(k):\n    e = n\n    Vasya = 0\n    Petya = 0\n    while e > 0:\n        #print(e)\n        if e <= k:\n            Vasya += e\n            break\n        diff = e - k\n        Vasya += k\n        e -= k\n        if e >= 10:\n            Petya +=  diff // 10\n            e -= diff // 10\n        #print(e, ' left')\n    #print(Vasya, 'ate Vasya overall')\n    #print(Petya, 'ate Petya overall')\n    if Vasya >= Petya:\n        return True\n    else:\n        return False\n\nwhile right - left > 1:\n    middle = (right + left) // 2\n    if not modulate(middle):\n        left = middle\n    else:\n        right = middle\n\nif modulate(left):\n    print(left)\nelse:\n    print(right)\n"]