["###Prediction and Restriction\nn,k=list(map(int,input().split()))\nr,s,p=list(map(int,input().split()))\nt=input()\nwin=[False]*n\ndef janken(char):\n    if char=='r':\n        return p\n    elif char=='s':\n        return r\n    else:\n        return s\ncnt=0\nfor i in range(n):\n    if i-k<0:\n        point=janken(t[i])\n        cnt+=point\n        win[i]=True\n    else:\n        if t[i]!=t[i-k]:\n            point=janken(t[i])\n            cnt+=point\n            win[i]=True\n        else:\n            if not win[i-k]:\n                point=janken(t[i])\n                cnt+=point\n                win[i]=True\n\nprint(cnt)\n", "#!/usr/bin/env python3\ndef main():\n    N, K = list(map(int, input().split()))\n    R, S, P = list(map(int, input().split()))\n    T = input()\n\n    command = [''] * N\n    ans = 0\n    for i, t in enumerate(T):\n        if t == 'r':\n            point = P\n            command_candidate = 'p'\n        elif t == 's':\n            point = R\n            command_candidate = 'r'\n        else:\n            point = S\n            command_candidate = 's'\n\n        if i >= K and command[i - K] == command_candidate:\n            point = 0\n            command_candidate = ''\n        ans += point\n        command[i] = command_candidate\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# import itertools\n# import math\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n\n# N = int(input())\n# S = input()\n# n, *a = map(int, open(0))\nN, K = map(int, input().split())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\n#         arr.append([n, 1])\n#     return arr\n\nR, S, P = map(int, input().split())\nT = input()\nwin = {\"r\": [\"p\", P], \"s\": [\"r\", R], \"p\": [\"s\", S]}\n\nhands = []\ntot = 0\nfor i, c in enumerate(T):\n    if i >= K and win[c][0] == hands[i - K]:\n        hands.append(\"anything\")\n        continue\n    hands.append(win[c][0])\n    tot += win[c][1]\n        \nprint(tot)", "n, k = [int(i) for i in input().split()]\nr, s, p = [int(i) for i in input().split()]\nt = list(input())\nans = 0\ndic = {'p': s, 's': r, 'r': p}\nfor i in range(k):\n  ans += dic[t[i]]\ndic_ls = []\nfor i in range(k, n):\n  if t[i] != t[i - k]:\n    ans += dic[t[i]]\n  else:\n    t[i] = 'j'\nprint(ans)", "N, K = map(int, input().split())\nR, S, P = map(int, input().split())\nT = input()\n\ndef janken(n):\n    if n == \"r\":\n        return P\n    elif n == \"s\":\n        return R\n    else:\n        return S\n\nans = 0\n\nfor i in range(K):\n    h = T[i::K]\n    l = len(h)\n    f = 1\n    a = \"\"\n    for j in range(l):\n        if a != h[j]:\n            a = h[j]\n            f = 0\n            ans += janken(h[j])\n        else:\n            ans += f * janken(h[j])\n            f = - (f - 1)\n\nprint(ans)", "import copy\n\nN, K = list(map(int, input().split()))\nmy_R, my_S, my_P = list(map(int, input().split()))\nhand_score = {'r': my_P, 's': my_R, 'p': my_S}\nT = input()\nans = 0\n\nfor i in range(K):\n    cnt = (N - i - 1) // K + 1\n    dp = {'R': 0, 'S': 0, 'P': 0}\n    new_dp = {'R': 0, 'S': 0, 'P': 0}\n    for j in range(cnt):\n        check = {'r': 0, 's': 0, 'p': 0}\n        check[T[(j * K) + i]] = hand_score[T[(j * K) + i]]\n\n        new_dp['R'] = max(dp['S'] + check['s'], dp['P'] + check['p'])\n        new_dp['S'] = max(dp['P'] + check['p'], dp['R'] + check['r'])\n        new_dp['P'] = max(dp['R'] + check['r'], dp['S'] + check['s'])\n\n        dp = copy.copy(new_dp)\n    ans += max(dp.values())\nprint(ans)\n", "from collections import deque\n\nn, k = map(int,input().split())\nr, s, p = map(int,input().split())\nt = input()\n\nd = {\"s\":r, \"p\":s, \"r\":p}\nbefore = deque([])\nans = 0\nfor i in range(n):\n    if i<k:\n        before.append(t[i])\n        ans += d[t[i]]\n    else:\n        b = before.popleft()\n        if t[i]!=b:\n            before.append(t[i])\n            ans += d[t[i]]\n        else:\n            before.append(\"n\")\nprint(ans)", "N, K = map(int,input().split())\nR, S, P = map(int,input().split())\nT = input()\nans = 0\ncheck = [0] * N\nfor i in range(N):\n  j = T[i]\n  if i >= K:\n    if j == check[i-K]: continue\n  if j == \"r\": ans += P\n  elif j == \"s\": ans += R\n  else: ans += S\n  check[i] = j\n \nprint(ans)", "N,K=map(int,input().split())\nR,S,P=map(int,input().split())\nT=input()\n\nmoi=[['x'] for i in range(K)]\n\nfor i in range(N):\n    moi[i%K].append(T[i])\n\nfor i in range(K):\n    moi[i].pop(0)\n\nmoji=''\n\nfor i in range(K):\n    cnt=0\n    for j in range(len(moi[i])):\n        if j==0:\n            moji+=moi[i][j]\n        else:\n            if moi[i][j-1]!=moi[i][j]:\n                moji+=moi[i][j]\n                cnt=0\n            if moi[i][j-1]==moi[i][j] and cnt==1:\n                moji+=moi[i][j]\n                cnt=0\n            elif moi[i][j-1]==moi[i][j] and cnt==0:\n                cnt+=1\n\nans=0\nfor i in range(len(moji)):\n    if moji[i]=='r':\n        ans+=P\n    elif moji[i]=='s':\n        ans+=R\n    else:\n        ans+=S\n\nprint(ans)", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, K = list(map(int, readline().split()))\n    point = list(map(int, readline().split()))\n    T = readline().strip()\n\n    T = T.translate(str.maketrans('rsp', '012'))\n    T = list(map(int, T))\n\n    ans = 0\n    for i in range(K):\n        vec = T[i::K]\n        M = len(vec)\n\n        dp = [[0] * 3 for _ in range(M + 1)]\n        for j in range(M):\n            for k in range(3):\n                dp[j + 1][k] = max(dp[j][(k + 1) % 3], dp[j][(k + 2) % 3])\n                if (k + 1) % 3 == vec[j]:\n                    dp[j + 1][k] += point[k]\n        ans += max(dp[M])\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = map(int, input().split())\nscores = {k: v for k, v in zip('spr', map(int, input().split()))}\nzero_score_index = set()\nt = input()\ntotal = sum(scores[tt] for tt in t)\nfor i in range(n):\n  if i < k:\n    continue\n  if t[i] == t[i - k] and i - k not in zero_score_index:\n    zero_score_index.add(i)\n    total -= scores[t[i]]\nprint(total)", "N,K=list(map(int, input().split()))\nR,S,P=list(map(int, input().split()))\nT=input()\n\nw1=''\nw2=''\nans=0\nfor i in range(N):\n    if T[i]=='r':\n        w1+='p'\n    elif T[i]=='p':\n        w1+='s'\n    else:\n        w1+='r'\n\nfor i in range(0,K):\n    if T[i]=='r':\n        w2+='p'\n        ans+=P\n    elif T[i]=='p':\n        w2+='s'\n        ans+=S\n    else:\n        w2+='r'\n        ans+=R\n\nif N>=2:\n    for i in range(K,N):\n        if w1[i]==w2[i-K]:\n            w2+='_'\n        else:\n            if w1[i]=='p':\n                w2+='p'\n                ans+=P\n            elif w1[i]=='s':\n                w2+='s'\n                ans+=S\n            else:\n                w2+='r'\n                ans+=R\nprint(ans)\n", "n,k = map(int, input().split())\nr,s,p = map(int, input().split())\nt = list(input())\n\nrsp = {\"r\":p, \"s\":r, \"p\":s}\nans = 0\nfor i in range(n):\n  if i < k: ans += rsp[t[i]]\n  else:\n    if t[i] != t[i-k]: ans += rsp[t[i]]\n    else: t[i] = \"a\"\nprint(ans)", "# D - Prediction and Restriction\nN,K = map(int,input().split())\nscore = list(map(int,input().split()))\nT = input()\n\n# dp[i][j]: i\u56de\u76ee\u306e\u3058\u3083\u3093\u3051\u3093\u3067 j \u3092\u51fa\u3057\u305f\u3068\u304d\u306e\u6700\u5927\u306e\u5408\u8a08\u70b9\u6570\n# \u30b0\u30fc: 0, \u30c1\u30e7\u30ad: 1, \u30d1\u30fc: 2\ndp = [[0]*3 for _ in range(N+1)]\n\ndef judge(a,b):\n    # \u30d1\u30fc\u3067\u52dd\u3064\u3068\u304d\n    if a == 'r' and b == 2:\n        return score[2]\n    # \u30b0\u30fc\u3067\u52dd\u3064\u3068\u304d\n    elif a == 's' and b == 0:\n        return score[0]\n    # \u30c1\u30e7\u30ad\u3067\u52dd\u3064\u3068\u304d\n    elif a == 'p' and b == 1:\n        return score[1]\n    return 0\n    \n# i \u56de\u76ee\u306e\u3058\u3083\u3093\u3051\u3093\nfor i in range(1,N+1):\n    # i\u56de\u76ee\u306e\u3058\u3083\u3093\u3051\u3093\u3067 j \u3092\u51fa\u3057\u305f\u3068\u304d\n    for j in range(3):\n        # i-K \u56de\u76ee\u306e\u3058\u3083\u3093\u3051\u3093\u3067 k \u3092\u51fa\u3057\u305f\u3068\u304d\n        for k in range(3):\n            # i = K \u56de\u4ee5\u4e0a\u306e\u3068\u304d\n            if i > K:\n                # K \u56de\u524d\u3068\u540c\u3058\u624b\u3092\u51fa\u3057\u305f\u3089\u30b9\u30eb\u30fc\n                if j == k:\n                    continue\n            # i < K \u56de\u306e\u3068\u304d\n            else:\n                # \u52dd\u3061\u7d9a\u3051\u308b\u306e\u304c\u6700\u9069\n                dp[i][j] = judge(T[i-1],j)\n                continue\n            # K \u56de\u524d\u306b k \u3092\u51fa\u3057\u305f\u3068\u304d\u306e\u5f97\u70b9\u306b\u3001j \u3092\u51fa\u3057\u3066\u5f97\u305f\u5f97\u70b9\u3092\u52a0\u70b9\n            dp[i][j] = max(dp[i][j],dp[i-K][k] + judge(T[i-1],j))\n\nans = 0\nfor a in dp[-K:]:\n    ans += max(a)\nprint(ans)", "def rle(a):\n    ll,l=[],1\n    for i in range(len(a)-1):\n        if a[i]==a[i+1]:\n            l+=1\n        else:\n            ll.append([l,a[i]])\n            l=1\n    ll.append([l,a[-1]])\n    return ll\nn,k=list(map(int,input().split()))\nr,s,p=list(map(int,input().split()))\nt=input()\nans=0\nw=[]\nfor i in range(k):\n    j=i\n    b=\"\"\n    while j<n:\n        b+=t[j]\n        j+=k\n    w.append(b)\nfor i in t:\n    if i==\"r\":\n        ans+=p\n    elif i==\"s\":\n        ans+=r\n    else:\n        ans+=s\nfor x in w:\n    st=rle(x)\n    for i,j in st:\n        if j==\"r\":\n            ans-=(i//2)*p\n        elif j==\"s\":\n            ans-=(i//2)*r\n        else:\n            ans-=(i//2)*s\nprint(ans)\n", "import math\n\ndef main():\n\tN, K = [int(n) for n in input().split(\" \")]\n\tR, S, P = [int(p) for p in input().split(\" \")]\n\tT = list(input())\n\tT.reverse()\n\tcnt = 0\n\tfor i in range(K):\n\t\ttmp = []\n\t\tfor j in range(math.ceil((N - i) / K)):\n\t\t\tif len(tmp) == 0 or T[i + j * K] != tmp[-1][0]:\n\t\t\t\tif T[i + j * K] == \"r\":\n\t\t\t\t\ttmp.append([\"r\", P, 1])\n\t\t\t\telif T[i + j * K] == \"s\":\n\t\t\t\t\ttmp.append([\"s\", R, 1])\n\t\t\t\telif T[i + j * K] == \"p\":\n\t\t\t\t\ttmp.append([\"p\", S, 1])\n\t\t\telse:\n\t\t\t\ttmp[-1][2] += 1\n\t\tfor l in range(len(tmp)):\n\t\t\tcnt += tmp[l][1] * math.ceil(tmp[l][2] / 2)\n\n\tprint(cnt)\n\n\nmain()", "n,k=map(int,input().split())\np=list(map(int,input().split()))\nt=input()\ns='rsp'\ndp=[[-10**10]*(n+k) for _ in range(3)]\nfor i in range(k):\n  for j in range(3):\n    dp[j][i]=0\nfor i in range(n):\n  for j in range(3):\n    for l in range(3):\n      if j==l:\n        continue\n      res=((s.index(t[i])-l+3)%3==1)*p[l]\n      if dp[l][i+k]<dp[j][i]+res:\n        dp[l][i+k]=dp[j][i]+res\nans=0\nfor i in range(n,n+k):\n  ans+=max(dp[0][i],dp[1][i],dp[2][i])\nprint(ans)", "N,K = map(int,input().split())\nR,S,P = map(int,input().split())\nT = list(input())\n\nfor n in range(N-K):\n  if T[n+K]==T[n]:\n    T[n+K]=\"\"\n    \nprint(P*T.count(\"r\")+R*T.count(\"s\")+S*T.count(\"p\"))", "N, K = list(map(int, input().split()))\nR, S, P = list(map(int, input().split()))\nT = input()\n\nT_split = [[] for i in range(K)]\nfor i in range(N):\n    T_split[i%K].append(T[i])\n#print(T_split)\n\nans = 0\nflag = 0\n\nfor i in range(len(T_split)):\n    for j in range(len(T_split[i])):\n        if flag == 1:\n            flag = 0\n            continue\n        if T_split[i][j] == 'r':\n            point = P\n        elif T_split[i][j] == 's':\n            point = R\n        elif T_split[i][j] == 'p':\n            point = S\n        ans += point\n        if j != len(T_split[i]) - 1:\n            if T_split[i][j] == T_split[i][j+1]:\n                flag = 1\nprint(ans)\n", "def jan(x,a,b,c):\n    if x == \"s\":\n        return a\n    elif x == \"r\":\n        return c\n    else:\n        return b\n\nn,k = map(int,input().split())\nr,s,p = map(int,input().split())\nr = int(r)\ns = int(s)\np = int(p)\nt = list(input())\nm = [0]*n\nans = 0\n\nfor i in range(n):\n    if i>=k:\n        if t[i] == t[i-k]:\n            if m[i-k] == 1:\n                ans += jan(t[i],r,s,p)\n            else:\n                m[i] = 1\n        else:\n            ans += jan(t[i],r,s,p)\n    else:\n        ans += jan(t[i],r,s,p)\n\nprint(ans)", "n, k = map(int ,input().split())\nR, S, P= map(int ,input().split())\nt = input()\n\nv = {'r':P, 's': R ,'p':S}\n\nans = 0\n\nfor i in range(k):\n    check = t[i]\n    ans += v[check]\n    while True:\n        i+= k\n        if i >= n:\n            break\n        if check == t[i]:\n            check ='-1'\n        else :\n            ans += v[t[i]]\n            check = t[i]\n\n\nprint(ans)", "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nN, K = list(map(int, input().split()))\nR, S, P = list(map(int, input().split()))\nT = list(input())\n\nans = 0\n\nfor i in range(K):\n    last = \"\"\n    for j in range(i, N, K):\n        if T[j] == last:\n            last = \"\"\n            continue\n\n        if T[j] == \"r\":\n            ans += P\n        elif T[j] == \"s\":\n            ans += R\n        else:\n            ans += S\n\n        last = T[j]\n\nprint(ans)\n", "N,K=map(int,input().split())\nR,S,P=map(int,input().split())\nT=input()+'*'*K\nh=['']*N\nf,n='',''\nans=0\nfor i in range(N):\n    if K<=i:f=h[i-K]\n    n=T[i+K]\n    if T[i]=='r':\n        if f=='p':h[i]=n\n        else:ans+=P;h[i]='p'\n    if T[i]=='p':\n        if f=='s':h[i]=n\n        else:ans+=S;h[i]='s'\n    if T[i]=='s':\n        if f=='r':h[i]=n\n        else:ans+=R;h[i]='r'\nprint(ans)", "from collections import deque\n\n\ndef calc(t, r, s, p):\n    if t == \"r\":\n        return p\n    elif t == \"s\":\n        return r\n    else:\n        return s\n\n\nn, k = list(map(int, input().split()))\nr, s, p = list(map(int, input().split()))\nT = input()\nd = deque()\nans = 0\nfor i, t in enumerate(T):\n    if i < k:\n        ans += calc(t, r, s, p)\n        d.append(t)\n    else:\n        x = d.popleft()\n        if x == t:\n            d.append(0)\n        else:\n            ans += calc(t, r, s, p)\n            d.append(t)\nprint(ans)\n", "n, k = map(int, input().split())\nr, s, p = map(int, input().split())\nt = input()\n\nme = \"\"\n\nans = 0\n\nfor i in range(n):\n    if t[i] == \"r\":\n        if i < k:\n            me += \"p\"\n            ans += p\n        elif me[i-k] != \"p\":\n            me += \"p\"\n            ans += p\n        else:\n            if t[i-k] == \"p\":\n                me += \"p\"\n                ans += p\n            else:\n                me += \"r\"\n\n    elif t[i] == \"s\":\n        if i < k:\n            me += \"r\"\n            ans += r\n        elif me[i-k] != \"r\":\n            me += \"r\"\n            ans += r\n        else:\n            if t[i-k] == \"r\":\n                me += \"r\"\n                ans += r\n            else:\n                me += \"s\"\n\n    else:\n        if i < k:\n            me += \"s\"\n            ans += s\n        elif me[i-k] != \"s\":\n            me += \"s\"\n            ans += s\n        else:\n            if t[i-k] == \"s\":\n                me += \"s\"\n                ans += s\n            else:\n                me += \"p\"\n\nprint(ans)", "n, k = map(int, input().split())\nr, s, p = map(int, input().split())\nt = [ti for ti in input()]\nscore = {\"z\": 0, \"r\": p, \"s\": r, \"p\": s}\nfor i in range(k, n):\n    if t[i] == t[i-k]: t[i] = \"z\"\nprint(sum([score[ti] for ti in t]))", "def main():\n    n,k = list(map(int,input().split()))\n    r,s,p = list(map(int,input().split()))\n    t = input()\n    dp = [0]*n\n    hnd = [0]*n\n    point = {'r':p,'s':r,'p':s}\n    h = {'r':'p','s':'r','p':'s'}\n    dp[0]=point[t[0]]\n    hnd[0] = h[t[0]]\n    for i in range(1,k):\n        dp[i] = dp[i-1]+point[t[i]]\n        hnd[i] = h[t[i]]\n    for i in range(k,n):\n        if hnd[i-k]!=h[t[i]]:\n            hnd[i] = h[t[i]]\n            dp[i] += dp[i-1]+point[t[i]]\n        else:\n            dp[i]=dp[i-1]\n    print((dp[-1]))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\nN,K=list(map(int,input().split()))\nr,s,p=list(map(int,input().split()))\n\nS=input()\nli=[1]*(K)\nans=[0,0,0]\n\nfor i in range(N-K):\n    if S[i]==S[i+K]:\n        li[i%K]+=1\n    else:\n        if S[i]==\"r\":\n            ans[0]+=(li[i%K]+1)//2\n        if S[i]==\"s\":\n            ans[1]+=(li[i%K]+1)//2\n        if S[i]==\"p\":\n            ans[2]+=(li[i%K]+1)//2\n        li[i%K]=1\n\n\nfor j in range(N-K,N):\n    if S[j]==\"r\":\n            ans[0]+=(li[j%K]+1)//2\n    if S[j]==\"s\":\n            ans[1]+=(li[j%K]+1)//2\n    if S[j]==\"p\":\n            ans[2]+=(li[j%K]+1)//2\n    \n    \nprint((p*ans[0]+r*ans[1]+s*ans[2]))\n", "def rle(a):\n    ll,l=[],1\n    for i in range(len(a)-1):\n        if a[i]==a[i+1]:\n            l+=1\n        else:\n            ll.append([l,a[i]])\n            l=1\n    ll.append([l,a[-1]])\n    return ll\nn,k=map(int,input().split())\nr,s,p=map(int,input().split())\nt=input()\nans=0\nw=[]\nfor i in range(k):\n    j=i\n    b=\"\"\n    while j<n:\n        b+=t[j]\n        j+=k\n    w.append(b)\nfor i in t:\n    if i==\"r\":\n        ans+=p\n    elif i==\"s\":\n        ans+=r\n    else:\n        ans+=s\nfor x in w:\n    st=rle(x)\n    for i,j in st:\n        if j==\"r\":\n            ans-=(i//2)*p\n        elif j==\"s\":\n            ans-=(i//2)*r\n        else:\n            ans-=(i//2)*s\nprint(ans)", "n,k = map(int, input().split())\nr,s,p = map(int, input().split())\nt = list(input())\n\nrsp = {\"r\":p, \"s\":r, \"p\":s}\nans = 0\nfor i in range(n):\n  if i < k: ans += rsp[t[i]]\n  else:\n    if t[i] != t[i-k]: ans += rsp[t[i]]\n    else: t[i] = \"a\"\nprint(ans)", "n, k = map(int, input().split())  \nr, s, p = map(int, input().split())  \nread_data = input()\n\nres = 0\nlog = []\nfor i in range(len(read_data)):\n    # k = 2\n    if len(log) < k:\n        if read_data[i] == 'r':\n            res+=p\n        if read_data[i] == 's':\n            res+=r\n        if read_data[i] == 'p':\n            res+=s\n\n        log.append(read_data[i])\n\n    else:\n        tmp = log.pop(0)\n        if tmp != read_data[i]:\n            if read_data[i] == 'r':\n                res+=p\n            if read_data[i] == 's':\n                res+=r\n            if read_data[i] == 'p':\n                res+=s\n            log.append(read_data[i])\n        else:\n            log.append('-')\n    \n    \nprint(res)", "from collections import deque\nn,k = map(int, input().split())\nr,s,p = map(int, input().split())\n\npoint = {}\npoint[\"r\"]=r\npoint[\"s\"]=s\npoint[\"p\"]=p\n\nt = input()\n# \u30b0\u30fc:r\n# \u30c1\u30e7\u30ad:s\n# \u30d1\u30fc:p\n\ndef janken(opp, rireki, point, k):\n    if opp==\"r\":\n        rireki.append(\"p\")\n        return point[\"p\"]\n    elif opp==\"s\":\n        rireki.append(\"r\")\n        return point[\"r\"]\n    elif opp==\"p\":\n        rireki.append(\"s\")\n        return point[\"s\"]\n    \n        \nans = 0\nrireki = deque()\nfor i in range(n):\n    hand = t[i]\n    ans += janken(hand, rireki, point, k)\nfor i in range(k,n):\n    if rireki[i]==rireki[i-k]:\n        ans -= point[rireki[i]]\n        rireki[i]=\"else\"\nprint(ans)", "N,K=list(map(int,input().split()))\nR,S,P=list(map(int,input().split()))\nT=input()\nl=[]\nfor i in range(K):\n    l.append([T[K-i-1]])\nfor j in range(K,N):\n    if l[K-1-j%K][j//K-1]!=T[j]:\n        l[K-1-j%K].append(T[j])\n    else:\n        l[K-1-j%K].append(\"t\")\nans=0\nfor k in l:\n    ans+=k.count(\"r\")*P+k.count(\"s\")*R+k.count(\"p\")*S\nprint(ans)\n    \n    \n\n\n\n\n        \n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n    \n\n        \n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n        \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n    \n\n\n    \n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n", "n, k = map(int, input().split())\nR, S, P = map(int, input().split())\nT = list(input())\n\nfor i in range(n-k):\n    if T[i] == T[i+k]:\n        T[i+k] = 0\n        \nans = [0] * n\nfor i in range(n):\n    if T[i] == \"r\":\n        ans[i] = P\n    if T[i] == \"s\":\n        ans[i] = R\n    if T[i] == \"p\":\n        ans[i] = S\n\nprint(sum(ans))", "n, k = map(int, input().split())\nr, s, p = map(int, input().split())\nt = input()\n\nc = [''] * n\nans = 0\nfor i in range(n):\n    if t[i] == 'r':\n        rsp = 'p'\n        point = p\n    elif t[i] == 's':\n        rsp = 'r'\n        point = r\n    elif t[i] == 'p':\n        rsp = 's'\n        point = s\n    \n    if i >= k and c[i-k] == rsp:\n        rsp = ''\n        point = 0\n    \n    c[i] = rsp\n    ans += point\nprint(ans)", "n, k = map(int, input().split())\nr, s, p = map(int, input().split())\nt = input()\ndp = [0] * (len(t) + 1)\ndp[0] = 0\n\ndef pon(d):\n if d  == 'r':\n    return p\n elif d == 's':\n    return r\n else:\n    return s\n\nm = []\nfor i,j in enumerate(t):\n    m.append(j)\n    if i >= k:\n        if m[i-k] == j:\n            dp[i+1] = dp[i]\n            m[i] = 'skip'\n        else:\n            dp[i+1] = dp[i]+pon(j)\n    else:\n        dp[i+1] = dp[i] + pon(j)\nprint(dp[-1])", "import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\n\ndef main():\n    n, k = map(int, input().split())\n    r, s, p = map(int, input().split())\n    t = input()\n\n    dp = [[0] * 3 for _ in range(n + k)]\n    for i1 in range(k):\n        i2 = i1 + k\n        while i2 - k < n:\n            dp[i2][0] = max(dp[i2-k][1], dp[i2-k][2])\n            dp[i2][0] += r if t[i2-k] == 's' else 0\n            dp[i2][1] = max(dp[i2-k][0], dp[i2-k][2])\n            dp[i2][1] += s if t[i2-k] == 'p' else 0\n            dp[i2][2] = max(dp[i2-k][0], dp[i2-k][1])\n            dp[i2][2] += p if t[i2-k] == 'r' else 0\n            i2 += k\n    r = 0\n    for j1 in range(-k, 0, 1):\n        r += max(dp[j1])\n    print(r)\n\ndef __starting_point():\n    main()\n__starting_point()", "n,k = (int(x) for x in input().split())\nr,s,p = (int(x) for x in input().split())\nt = input()\na = []\nans = 0\n\nfor i in range(0,n):\n    a.append(t[i])\n\nfor j in range(0,n):\n    if j - k >= 0 and a[j - k] == a[j]:\n           a[j] = \"o\"\n    p\n    if a[j] == \"r\":\n        ans = ans + p\n    if a[j] == \"s\":\n        ans = ans + r\n    if a[j] == \"p\":\n        ans = ans + s\n\n\nprint(ans)", "import sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = 10**20\ndef I(): return int(input())\ndef F(): return float(input())\ndef S(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LS(): return input().split()\n\ndef resolve():\n    N, K = LI()\n    RSP_score = LI()\n    rsp_num = {'r': 0, 's': 1, 'p': 2}\n    T = [rsp_num[i] for i in S()]\n\n    # dp[i][j]: i\u56de\u76ee\u306bj\u3092\u51fa\u3057\u305f\u3068\u304d\u306e\u5408\u8a08\u70b9\u6570\n    # K\u306emod\u6bce\u306b\u72ec\u7acb\n    dp = [[0] * 3 for _ in range(N)]\n    for i in range(N):\n        for j in range(3):\n            # \u30b0\u30fc\u3092\u51fa\u3059\u5834\u5408\u3001K\u56de\u524d\u307e\u3067\u306b\u30b0\u30fc\u4ee5\u5916\u51fa\u3057\u305f\u3068\u304d\u306e\u6700\u5927\u5f97\u70b9\u306b\u52a0\u3048\u3066\u3001\u4eca\u56de\u76f8\u624b\u304c\u30c1\u30e7\u30ad\u3060\u3063\u305f\u3089\u52dd\u70b9R\u3092\u8db3\u3059\n            if i - K >= 0:\n                dp[i][j] += max([dp[i-K][k] for k in range(3) if k != j])\n            if (j + 1) % 3 == T[i]:\n                dp[i][j] += RSP_score[j]\n\n    # for i in dp:\n    #     print(i)\n    ans = sum([max(i) for i in dp[N-K:]])\n    print(ans)\n\ndef __starting_point():\n    resolve()\n__starting_point()", "import math\nini = lambda : int(input())\ninm = lambda : map(int,input().split())\ninl = lambda : list(map(int,input().split()))\ngcd = lambda x,y : gcd(y,x%y) if x%y else y\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n \n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n \n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n \n        if x == y:\n            return\n \n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n \n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n \n    def size(self, x):\n        return -self.parents[self.find(x)]\n \n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n \n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n \n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n \n    def group_count(self):\n        return len(self.roots())\n \n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n \n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\nmod = 10**9 + 7\nsigma = lambda x : x*(x+1)//2\n\n#--maincode----------------\n\nn,k = inm()\nr,s,p = inm()\nt = input()\nd = {'r':p,'s':r,'p':s}\nl = []\nans = 0\nfor i in range(k):\n    ans += d[t[i]]\nfor i in range(k,n):\n    if t[i-k] == t[i]:\n        t = t[:i] + 'n' + t[i+1:]\n        continue\n    ans += d[t[i]]\nprint(ans)", "n,k=map(int,input().split())\nB=list(map(int,input().split()))\nS=list(input())\nA=[[] for i in range(k)]\nfor i in range(n):\n  if S[i]==\"s\":\n    A[i%k].append(0)\n  elif S[i]==\"p\":\n    A[i%k].append(1)\n  else:\n    A[i%k].append(2)\nans=0\nfor i in range(k):\n  f=0\n  for j in range(len(A[i])):\n    if f==0:\n      ans=ans+B[A[i][j]]\n      if j!=len(A[i])-1:\n        if A[i][j]==A[i][j+1]:\n          f=1\n    else:\n      f=0\nprint(ans)", "n, k = map(int, input().split())\n\nr, s, p = map(int, input().split())\n\nt = input()\n\nli = list(t[:k])\n\ncnt = 0\n\nfor itr, val in enumerate(t):\n\n  if itr >= k and val == li[itr % k]:\n\n    li[itr % k] = \"x\"\n\n  else:\n\n    if val == \"r\":\n\n      cnt += p\n\n    elif val == \"s\":\n\n      cnt += r\n\n    else:\n\n      cnt += s\n\n    li[itr % k] = val\n\nprint(cnt)", "N, K = map(int, input().split())\nR, S, P = map(int, input().split())\np = {\"r\":P, \"s\":R, \"p\":S}\n\nT = [s for s in input()]\nans = 0\nfor i in range(N):\n  if i >= K and T[i] == T[i-K]:\n    T[i] = \".\"\n    continue\n  #print(p[T[i]])\n  ans += p[T[i]]\nprint(ans)", "n, k = list(map(int, input().split()))\nr, s, p = list(map(int, input().split()))\nt = list(input())\n\nscr = 0\n#k\u56de\u76ee\u307e\u3067\u306e\u51e6\u7406\nfor i in range(k):\n    if t[i] == \"r\":\n        scr += p\n    elif t[i] == \"s\":\n        scr += r\n    elif t[i] == \"p\":\n        scr += s\n#print(scr)\n\n#k\uff0b\uff11\u56de\u76ee\u4ee5\u964d\u306e\u51e6\u7406\n#\u524d\u306b\u51fa\u3057\u305f\u624b\u306e\u305b\u3044\u3067\u52dd\u3066\u306a\u3044\u5834\u5408\u306f\u3001\u6b21\u306e\u624b\u306e\u90aa\u9b54\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306a\u624b\u3092\u51fa\u3059\nfor i in range(k, n):\n    if t[i] == t[i - k]:\n        scr += 0\n        t[i] = \"q\"\n    else:\n        if t[i] == \"r\":\n            scr += p\n        elif t[i] == \"s\":\n            scr += r\n        elif t[i] == \"p\":\n            scr += s\n\nprint(scr)\n", "N,K = list(map(int, input().split()))\nR,S,P = list(map(int, input().split()))\nT = input()\n\nscore_list = []\n\nans = 0\nfor i in range(K):\n    pre_word = \"dummy\"\n    for j in range(i,N,K):\n        if(T[j] != pre_word):\n            if(T[j] == \"r\"):\n                ans += P\n                pre_word = \"r\"\n            elif(T[j] == \"s\"):\n                ans += R\n                pre_word = \"s\"\n            else:\n                ans += S\n                pre_word = \"p\"\n        else:\n            pre_word = \"dummy\"\n        \n\nprint(ans)", "N,K = map(int,input().split())\nS,P,R = map(int,input().split())\npoint = {'s':S,'p':P,'r':R}\nT = str(input())\nmax_point = 0\nfor i in range(K):\n  while i < N:\n    if i+K < N and T[i] == T[i+K]:\n      max_point += point[T[i]]\n      i = i+2*K\n    else:\n      max_point += point[T[i]]\n      i = i+K\nprint(max_point)", "N,K=list(map(int,input().split()))\nR,S,P=list(map(int,input().split()))\nT=input()\ncnt=[0 for _ in range(N)]\nscore={'r':P,'s':R,'p':S}\nfor i in range(N):\n    if i<K:\n        cnt[i]=score[T[i]]\n    else:\n        if T[i-K]!=T[i]:\n            cnt[i]=score[T[i]]\n        else:\n            if cnt[i-K]==0:\n                cnt[i]=score[T[i]]\nprint((sum(cnt)))\n", "n, k = list(map(int, input().split()))\nr, s, p = list(map(int, input().split()))\nt = input()\n\ndef score(hand):\n    if hand == 's':\n        return r\n    if hand == 'p':\n        return s\n    if hand == 'r':\n        return p\n\nans = 0\nchanged = [0] * n\n\nfor i in range(n):\n    if i >= k and t[i] == t[i - k] and changed[i - k] == 0:\n        changed[i] = 1\n        continue    \n    ans += score(t[i])\n\nprint(ans)\n", "n, k = map(int, input().split())\nR, S, P = map(int, input().split())\nT = input()\n\ndict = {\n    'r': 'p',\n    's': 'r',\n    'p': 's'\n}\n\nhand = []\nfor t in T:\n    hand.append(dict[t])\n\nfor i in range(n - k):\n    if hand[i] == hand[i + k]:\n        hand[i + k] = 'x'\n\nans = 0\nfor t in hand:\n    if t == 'r':\n        ans += R\n    elif t == 's':\n        ans += S\n    elif t == 'p':\n        ans += P\nprint(ans)", "n, k = list(map(int, input().split()))\nr, s, p = list(map(int, input().split()))\nt = input()\n\ntt = list(t)\nd = {'r':p, 's': r, 'p':s}\ndp = [d[t[i]] for i in range(n)]\n\nfor i in range(n-k):\n    if tt[i]==tt[i+k]:\n        dp[i+k] = 0\n        tt[i+k] = 'x'\n\nprint((sum(dp)))\n\n", "def main():\n    N,K = list(map(int,input().split()))\n    R,S,P = list(map(int,input().split()))\n    T = input()\n    dict = {'r':P,'s':R, 'p':S}\n    check = []\n    ans = 0\n    for i in range(N):\n        if i-K < 0:\n            ans += dict[ T[i] ]\n            check.append(1)\n        else:\n            if T[i-K] != T[i]:\n                ans += dict[ T[i] ]\n                check.append(1)\n            elif T[i-K] == T[i]:\n                if i-2*K < 0:\n                    ans += 0\n                    check.append(0)\n                else:\n                    if T[i-2*K] == T[i]:\n                        if check[i-K] == 1:\n                            ans += 0\n                            check.append(0)\n                        else:\n                            ans += dict[ T[i] ]\n                            check.append(1)\n                    else:\n                        ans += 0\n                        check.append(0)\n    return ans\n\nprint((main()))\n", "N,K = map(int, input().split())\nR,S,P = map(int, input().split())\nT = input()\n\ntrans = {'r':'p', 's':'r', 'p':'s'}\nscore = {'r':R, 's':S, 'p': P, 't':0}\n\na = [trans[t] for t in T]\n\nfor i in range(K, N):\n    if a[i] == a[i-K]:\n        a[i] = 't'\nprint(sum([score[s] for s in a]))", "N,K = map(int,input().split())\nR,S,P = map(int,input().split())\nT = list(input())\ndic = {'r':P,'s':R,'p':S}\nans  = 0\nfor i in range(K):\n    ans += dic[T[i]]\nfor i in range(K,N):\n    if T[i-K] != T[i]:\n        ans += dic[T[i]]\n    else:\n        T[i] = 'e'\nprint(ans)", "N,K = map(int,input().split())\nR,S,P = map(int,input().split())\nT = list(input())\n \nfor n in range(N-K):\n  if T[n+K]==T[n]:\n    T[n+K]=\"\"\n    \nprint(P*T.count(\"r\")+R*T.count(\"s\")+S*T.count(\"p\"))", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, K = list(map(int, readline().split()))\n    point = list(map(int, readline().split()))\n    T = readline().strip()\n\n    T = list(map(int, T.translate(str.maketrans('rsp', '012'))))\n\n    ans = 0\n    for i in range(K):\n        M = (N - i + K - 1) // K\n        dp = [[0] * 3 for _ in range(M + 1)]\n        for j in range(M):\n            for k in range(3):\n                dp[j + 1][k] = max(dp[j][(k + 1) % 3], dp[j][(k + 2) % 3])\n                if (k + 1) % 3 == T[i + j * K]:\n                    dp[j + 1][k] += point[k]\n        ans += max(dp[M])\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, K = list(map(int, readline().split()))\n    point = list(map(int, readline().split()))\n    T = readline().strip()\n\n    T = list(map(int, T.translate(str.maketrans('rsp', '012'))))\n\n    hand = [0] * N\n    ans = 0\n    for i, h in enumerate(T):\n        win = (h - 1) % 3\n        if i >= K and win == hand[i - K]:\n            hand[i] = -1\n        else:\n            hand[i] = win\n            ans += point[win]\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = map(int, input().split())\ns, p, r = map(int, input().split()) \ndic = {\"p\":p, \"r\":r, \"s\":s}\nt = input()\nans = 0\nfor i in range(k):\n    bef = \"a\"\n    for j in range(i, n, k):\n\n        if bef == t[j]:\n            bef = \"a\"\n        else:\n            ans += dic[t[j]]\n            bef = t[j]\nprint(ans)", "#!/usr/bin/env python3\n\ndef main():\n    n, k = list(map(int, input().split()))\n    r, s, p = list(map(int, input().split()))\n    t = input()\n    c = \"\"\n    ans = 0\n\n    for i in range(n):\n        if t[i] == \"r\":\n            if i >= k and c[i-k] == 'p':\n                c += 'x'\n            else:\n                c += \"p\"\n                ans += p\n        elif t[i] == \"s\":\n            if i >= k and c[i-k] == 'r':\n                c += 'x'\n            else:\n                c += \"r\"\n                ans += r\n        else:\n            if i >= k and c[i-k] == 's':\n                c += 'x'\n            else:\n                c += \"s\"\n                ans += s\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# FileName: \tD\n# CreatedDate:  2020-08-30 13:56:28 +0900\n# LastModified: 2020-08-30 14:22:16 +0900\n#\n\n\nimport os\nimport sys\n# import numpy as np\n# import pandas as pd\nfrom collections import Counter\n\n\ndef main():\n    N, K = list(map(int, input().split()))\n    R, S, P = list(map(int, input().split()))\n    T = input()\n    takahashi = ''\n    for t in T:\n        if t == 's':\n            takahashi += 'r'\n        elif t == 'p':\n            takahashi += 's'\n        else:\n            takahashi += 'p'\n\n    for i in range(K, N):\n        if takahashi[i-K] == takahashi[i]:\n            takahashi = takahashi[:i] + '_' + takahashi[i+1:]\n    ans = takahashi.count('r')*R + takahashi.count('s')*S + takahashi.count('p')*P\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, K = [int(x) for x in input().split()]\nR, S, P = [int(x) for x in input().split()]\nT = input()\n\n\npoint = {'r':P, 's':R, 'p':S}\nwin = [False] * N\ntotal = 0\nfor i in range(N):\n    if i < K or T[i] != T[i - K] or win[i - K] == False:\n        total += point[T[i]]\n        win[i] = True\n\nprint(total)", "from math import ceil\ndef point(x,y,r,s,p):\n    if y == 'r':\n        y = p\n    if y == 's':\n        y = r\n    if y == 'p':\n        y = s\n    return ceil(x/2) * y\nn,k = map(int,input().split())\nr,s,p = map(int,input().split())\nt = list(input())\nans = 0\nfor _ in range(k):\n    l = t[_::k]\n    x = 1\n    y = l[0]\n    for i in l[1:]:\n        if i != y:\n            ans += point(x,y,r,s,p)\n            x = 1\n            y = i\n        else:\n            x += 1\n    ans += point(x,y,r,s,p)\nprint(ans)", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\nimport string\n\ndef main():\n    n,k = i_map()\n    r,s,p = i_map()\n    dic = {\"r\":p,\"s\":r,\"p\":s}\n    t = list(s_input())\n    ans = 0\n\n    for i,j in enumerate(t):\n        if i < k:\n            ans += dic[j]\n        else:\n            if j != t[i-k]:\n                ans += dic[j]\n            else:\n                t[i] = \"z\"\n    print(ans)\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = map( int, input().split() )\nr, s, p = map( int, input().split() )\nt = str( input() )\n\nt_list = [ c for c in t ]\nfor i in range( k, n ):\n    if t_list[ i ] == t_list[ i - k ]:\n        t_list[ i ] = \"x\"\n\nscore = 0\nfor hand in t_list:\n    if hand == \"r\":\n        score += p\n    elif hand == \"s\":\n        score += r\n    elif hand == \"p\":\n        score += s\n\nprint( score )", "n, k = list(map(int, input().split()))\nr, s, p = list(map(int, input().split()))\nT = input()\nrecord = [False for _ in range(n)]\nans = 0\n\n\ndef win(t):\n    if t == \"r\":\n        return p\n    elif t == \"s\":\n        return r\n    else:\n        return s\n\n\nfor i, t in enumerate(T):\n    if i < k:\n        ans += win(t)\n        record[i] = t\n\n    else:\n        f = record[i - k]\n        if f:\n            if f == t:\n                continue\n            else:\n                ans += win(t)\n                record[i] = t\n        else:\n            ans += win(t)\n            record[i] = t\nprint(ans)\n", "def inp(r, s, p, jan):\n  if jan == 's':\n    return r\n  elif jan == 'p':\n    return s\n  else:\n    return p\n\nn, k = map(int, input().split(\" \"))\nr,s,p = map(int, input().split(\" \"))\nt = list(input())\ntotal = 0\nfor i in range(n):\n  if i < k:\n    #print(2)\n    total += inp(r,s,p,t[i])\n  else:\n    if t[i] != t[i-k]:\n      #print(\"OK\")\n      total += inp(r,s,p,t[i])\n    else:\n      #print(\"NG\")\n      t[i] = 'x'\nprint(total)", "n,k=map(int,input().split())\nr,s,p=map(int,input().split())\nt=input()\nans=0\nfor i in range(k):\n  R=0\n  S=0\n  P=0\n  cnt=0\n  while i+cnt*k<n:\n    if i+cnt*k-k<0:\n      if t[i+cnt*k]=='r':\n        ans+=p\n        P=1\n      elif t[i+cnt*k]=='s':\n        ans+=r\n        R=1\n      else:\n        ans+=s\n        S=1\n    elif i+cnt*k-k>=0 and t[i+cnt*k]==t[i+cnt*k-k]:\n      if t[i+cnt*k]=='r' and P==0:\n        ans+=p\n        P=1\n      elif t[i+cnt*k]=='r' and P==1:\n        P=0\n      elif t[i+cnt*k]=='s' and R==0:\n        ans+=r\n        R=1\n      elif t[i+cnt*k]=='s' and R==1:\n        R=0\n      elif t[i+cnt*k]=='p' and S==0:\n        ans+=s\n        S=1\n      elif t[i+cnt*k]=='p' and S==1:\n        S=0\n    elif i+cnt*k-k>=0 and t[i+cnt*k]!=t[i+cnt*k-k]:\n      if t[i+cnt*k]=='r':\n        ans+=p\n        P=1\n      elif t[i+cnt*k]=='s':\n        ans+=r\n        R=1\n      else:\n        ans+=s\n        S=1\n    cnt+=1\nprint(ans)", "def main():\n  n,k=map(int,input().split())\n  p=list(map(int,input().split()))\n  t=input()\n  s='rsp'\n  dp=[[-10**10]*(n+k) for _ in range(3)]\n  for i in range(k):\n    for j in range(3):\n      dp[j][i]=0\n  for i in range(n):\n    for j in range(3):\n      for l in range(3):\n        if j==l:\n          continue\n        res=((s.index(t[i])-l+3)%3==1)*p[l]\n        if dp[l][i+k]<dp[j][i]+res:\n          dp[l][i+k]=dp[j][i]+res\n  ans=0\n  for i in range(n,n+k):\n    ans+=max(dp[0][i],dp[1][i],dp[2][i])\n  print(ans)\nmain()", "import sys\ninput = sys.stdin.readline\n\n\n\ndef main():\n    N, K = map(int, input().split())\n    R, S, P = map(int, input().split())\n    T = list(input().rstrip())\n\n    D = [[] for _ in range(K)]\n    for i, t in enumerate(T):\n        D[i%K].append(t)\n\n    ans = 0\n    for List in D:\n        pre = -1\n        for i, p in enumerate(List):\n            if p == \"r\":\n                s = P\n            elif p == \"s\":\n                s = R\n            else:\n                s = S\n            if pre != p:\n                ans += s\n                pre = p\n            else:\n                pre = -1\n    print(ans)\n            \n\ndef __starting_point():\n    main()\n__starting_point()", "N, K = map(int,input().split())\nR, S, P = map(int,input().split())\nd = {'r': P, 's': R, 'p': S}\nT = input()\n\nans = 0\n\nfor i in range(min(N, K)):\n    flag = 0\n    tmp = T[i::K]\n    for j in range(len(tmp) - 1):\n        if tmp[j] != tmp[j+1] or flag:\n            ans += d[tmp[j]]\n            flag = 0\n        else:\n            flag = 1\n    ans += d[tmp[-1]]\n\nprint(ans)", "import math\nn, k = list(map(int, input().split()))\nr, s, p = list(map(int, input().split()))\nt = input()\n#r<-p, s<-r, p<-s\ndic = {'r': p, 's': r, 'p': s}\npoint = 0\nlose = False\n\nfor j in range(k):\n    point += dic[t[j]]\n    for i in range(j+k, n, k):\n        if t[i-k] != t[i] or lose:\n            point += dic[t[i]]\n            lose = False\n        else:\n            lose = True\n    lose = False\nprint(point)\n", "N, K = list(map(int, input().split()))\npt = list(map(int, input().split()))\nT = input()\n\npc_hand = [0]*N\nmy_hand = [0]*N\n\nfor i in range(N):\n    if T[i] == 'r':\n        pc_hand[i] = 0\n    elif T[i] == 's':\n        pc_hand[i] = 1\n    else:\n        pc_hand[i] = 2\n\npoint = 0\n\nfor i in range(N):\n    if i >= K and T[i] == T[i - K] and (my_hand[i - K] + 1) % 3 == pc_hand[i - K]:\n        my_hand[i] = pc_hand[i]\n    else:\n        my_hand[i] = (pc_hand[i] - 1) % 3\n        point += pt[my_hand[i]]\n\nprint(point)", "n,k=map(int,input().split())\nr,s,p=map(int,input().split())\nt=input()\nx=list(t)\nans=0\nfor i in range(n):\n  if x[i]==\"r\":x[i]=\"p\"\n  elif x[i]==\"p\":x[i]=\"s\"\n  else:x[i]=\"r\"\nfor i in range(k):\n  if x[i]==\"r\":ans+=r\n  elif x[i]==\"p\":ans+=p\n  else:ans+=s\nfor i in range(k,n):\n  if x[i]==x[i-k]:\n    x[i]=\"-\"\n    continue\n  if x[i]==\"r\":ans+=r\n  elif x[i]==\"p\":ans+=p\n  else:ans+=s\nprint(ans)", "n,k = list(map(int,input().split()))\nr,s,p = list(map(int,input().split()))\nT = input()\n\n#dp[i][j]:i\u56de\u76ee\u306bj\u3092\u51fa\u3057\u305f\u6642\u306e\u305d\u308c\u307e\u3067\u306e\u5408\u8a08\u70b9\u306e\u6700\u5927\u5024\u3002j:0\u30b0\u30fc1\u30c1\u30e7\u30ad2\u30d1\u30fc\ndp = [[0 for j in range(3)] for i in range(n)]\nfor i in range(0,k):\n    if T[i] == 'r':\n        dp[i][2] = p \n    elif T[i] == 's':\n        dp[i][0] = r \n    else:\n        dp[i][1] = s \n    for j in range(k,n-i,k):\n        if T[i+j] == 'r':\n            dp[i+j][2] = max(dp[i+j-k][0]+p,dp[i+j-k][1]+p)\n            dp[i+j][1] = max(dp[i+j-k][0],dp[i+j-k][2])\n            dp[i+j][0] = max(dp[i+j-k][1],dp[i+j-k][2])\n        elif T[i+j] == 's':\n            dp[i+j][0] = max(dp[i+j-k][1]+r,dp[i+j-k][2]+r)\n            dp[i+j][1] = max(dp[i+j-k][0],dp[i+j-k][2])\n            dp[i+j][2] = max(dp[i+j-k][0],dp[i+j-k][1])\n        else:\n            dp[i+j][1] = max(dp[i+j-k][2]+s,dp[i+j-k][0]+s)\n            dp[i+j][0] = max(dp[i+j-k][1],dp[i+j-k][2])\n            dp[i+j][2] = max(dp[i+j-k][0],dp[i+j-k][1])\n    \ntotal = 0\n#print(dp)\nfor i in range(n-1,max(0,n-1-k),-1):\n    total += max(dp[i])\nprint(total)\n        \n    \n\n", "def decide_hand2(T, hand, i, K, N):\n    if T[i] == \"r\":\n        if i <= K - 1:\n            hand[i] = \"p\"\n        else:\n            if hand[i - K] == \"p\":\n                hand[i] = \"-\"\n            else:\n                hand[i] = \"p\"\n\n    elif T[i] == \"p\":\n        if i <= K - 1:\n            hand[i] = \"s\"\n        else:\n            if hand[i - K] == \"s\":\n                hand[i] = \"-\"\n            else:\n                hand[i] = \"s\"\n\n    elif T[i] == \"s\":\n        if i <= K - 1:\n            hand[i] = \"r\"\n        else:\n            if hand[i - K] == \"r\":\n                hand[i] = \"-\"\n            else:\n                hand[i] = \"r\"\n\ndef main():\n    N, K = map(int, input().split())\n    R, S, P = map(int, input().split())\n    T = input()\n    hand = [\"\" for _ in range(N)]\n\n    for i in range(N):\n        decide_hand2(T, hand, i, K, N)\n\n    ans = 0\n    for i in range(N):\n        if hand[i] == \"r\":\n            ans += R\n        elif hand[i] == \"s\":\n            ans += S\n        elif hand[i] == \"p\":\n            ans += P\n\n    print(ans)\n    \ndef __starting_point():\n    main()\n__starting_point()", "N, K = map(int,input().split())\nR, S, P = map(int,input().split())\nT = input()\n\nans = 0\ncheck = [0] * N\n\nfor i in range(N):\n  j = T[i]\n  if i >= K:\n    if j == check[i-K]: continue\n  if j == \"r\": ans += P\n  elif j == \"s\": ans += R\n  else: ans += S\n  check[i] = j\n\nprint(ans)", "n, k = map(int, input().split())\nR, S, P = map(int, input().split())\nT = list(input())\n\nfor i in range(n-k):\n    if T[i] == T[i+k]:\n        T[i+k] = \"\"\n\nans = 0\nfor i in range(n):\n    if T[i] == \"r\":\n        ans += P\n    if T[i] == \"s\":\n        ans += R\n    if T[i] == \"p\":\n        ans += S\n\nprint(ans)", "N,K = map(int,input().split())\nR,S,P = map(int,input().split())\nT = input()\nd = []\nfor i in range(N):\n    if T[i] == \"r\":\n        if i < K or d[i-K] != \"p\":\n            d.append(\"p\")\n        else:\n            d.append(\"a\")\n    elif T[i] == \"s\":\n        if i < K or d[i-K] != \"r\":\n            d.append(\"r\")\n        else:\n            d.append(\"a\")\n    else:\n        if i < K or d[i-K] != \"s\":\n            d.append(\"s\")\n        else:\n            d.append(\"a\")\nans = d.count(\"r\") * R + d.count(\"s\") * S + d.count(\"p\") * P\nprint(ans)", "n, k = map(int, input().split())\nr, s, p = map(int, input().split())\nt = list(input())\nl = [0] * n\n\nfor i in range(n):\n    if t[i] == 'r':\n        l[i] = p\n    elif t[i] == 's':\n        l[i] = r\n    else:\n        l[i] =s\n\nans = sum(l)\nfor i in range(k, n):\n    if t[i] == t[i - k]:\n        ans -= l[i]\n        t[i] = 'o'\n\nprint(ans)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Sep  8 22:36:36 2020\n\n@author: liang\n\"\"\"\n\nN, K = list(map(int,input().split()))\nR, S, P = list(map(int,input().split()))\nT = input()\nhand = {\"r\":P, \"s\":R, \"p\":S}\nans = 0\nfor i in range(K):\n    s = str()\n    tmp = i\n    while tmp < N:\n        s += T[tmp]\n        tmp += K\n    #print(s)\n    count = 1\n    prev = str()\n    for j in range(len(s)):\n        if s[j] == prev:\n            count += 1\n        else:\n            count = 1\n        if count%2 == 0:\n            continue\n        prev = s[j]\n        \"\"\"\n        if s[j] == \"r\":\n            ans += P\n        elif s[j] == \"s\":\n            ans += R\n        else:\n            ans += S\n        \"\"\"\n        ans += hand[s[j]]\nprint(ans)\n", "n,k = map(int,input().split())\nr,s,p = map(int,input().split())\nt = [_ for _ in str(input())]\nans = 0\nfor i in range(n):\n  if  i - k < 0:\n    if t[i] == \"r\":\n      ans += p\n    elif t[i] == \"s\":\n      ans += r\n    elif t[i] == \"p\":\n      ans += s\n  else:\n    if t[i] == \"r\" and t[i-k] != \"r\":\n      ans += p\n    elif t[i] == \"s\" and t[i-k] != \"s\":\n      ans += r\n    elif t[i] == \"p\" and t[i-k] != \"p\":\n      ans += s\n    else:\n      t[i] = \"a\"\nprint(ans)", "n,k=map(int,input().split())\nr,s,p=map(int,input().split())\nt=list(input())\nrsp={\"r\":p,\"s\":r,\"p\":s}\nsumt=0\nchk=[1]*n\nfor i in range(len(t)):\n  sumt+=rsp[t[i]]\n  if i>=k and t[i]==t[i-k]:\n    chk[i]=chk[i-k]+1\n    chk[i-k]=1\nans=sumt\nfor i in range(len(chk)):\n  if chk[i]!=1:\n    chg=chk[i]//2\n    ans-=(rsp[t[i]])*chg\nprint(ans)", "N, K = map(int, input().split())\ndic = {}\ndic['s'], dic['p'], dic['r'] = map(int, input().split())\nT = input()\nscore = [0]*N\nfor i in range(N):\n  if i>=K and T[i]==T[i-K] and score[i-K]>0:\n    continue\n  score[i] = dic[T[i]]\nprint(sum(score))", "n,k=map(int,input().split())\nr,s,p=map(int,input().split())\nd={'r':p,'s':r,'p':s}\nt=input()\nans=0\nfor i in range(k):\n  x=t[i]\n  ans+=d[x]\n  for j in range(i+k,n,k):\n    if t[j]!=x:\n      x=t[j]\n      ans+=d[x]\n    else:\n      x='z'\nprint(ans)", "N, K = [int(_) for _ in input().split()]\nR, S, P = [int(_) for _ in input().split()]\nT = input()\n\ns = {\"r\": P, \"s\": R, \"p\": S}\n\nscore = []\nfor i in range(N):\n    if i < K:\n        score.append(s[T[i]])\n        continue\n    if T[i] == T[i-K] and score[i-K] != 0:\n        score.append(0)\n    else:\n        score.append(s[T[i]])\n\nprint((sum(score)))\n", "def main():\n    N, K = list(map(int, input().split()))\n    R, S, P = list(map(int, input().split()))\n    T = input()\n\n    ans = 0\n    U = []\n    for i, t in enumerate(T):\n        if t == 'r':\n            if i-K >= 0:\n                if U[i-K] == 'p':\n                    U.append('rs')\n                    continue\n            U.append('p')\n            ans += P\n        elif t == 's':\n            if i-K >= 0:\n                if U[i-K] == 'r':\n                    U.append('sp')\n                    continue\n            U.append('r')\n            ans += R\n        else:\n            if i-K >= 0:\n                if U[i-K] == 's':\n                    U.append('rp')\n                    continue\n            U.append('s')\n            ans += S\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,k = map(int,input().split())\nr,s,p = map(int,input().split())\nt = input()\n\npoint = {\"r\":(p,\"p\"), \"s\":(r,\"r\"), \"p\":(s,\"s\")}\nans = 0\n\nhand = \"\"\nfor i in range(n):\n  if i < k:\n    ans += point[t[i]][0]\n    hand += point[t[i]][1]\n  else:\n    if (t[i-k] != t[i]):\n      ans += point[t[i]][0]\n      hand += point[t[i]][1]\n    else:\n      if hand[i-k] != point[t[i]][1]:\n        ans += point[t[i]][0]\n        hand += point[t[i]][1]\n      else:\n        if (i+k) < n:\n          hand += \"rsp\".replace(point[t[i+k]][1],\"\").replace(hand[i-k],\"\")[0]\n        else:\n          hand += \"rsp\".replace(hand[i-k],\"\")[0]\n  \n      \nprint(ans)", "N,K=map(int,input().split())\nR,S,P=map(int,input().split())\nT=input()\n\nans=0\nchk=[0]*N\nfor n in range(N):\n  c=T[n]\n  if n>=K and T[n-K]==c and chk[n-K]==0:\n    chk[n]=1 # not used\n    continue\n  if c=='r':\n    ans+=P\n  elif c=='s':\n    ans+=R\n  else:\n    ans+=S\n\nprint(ans)", "N, K = list(map(int, input().split()))\nR, S, P = list(map(int, input().split()))\nT = input()\n\nans = 0\nfor i in range(0, K):\n    rsp_K = T[i::K]\n    rsp_before = ''\n    for rsp in rsp_K:\n        if rsp == 'r':\n            if rsp_before != 'r':\n                ans += P\n                rsp_before = 'r'\n            else:\n                rsp_before = ''\n        elif rsp == 's':\n            if rsp_before != 's':\n                ans += R\n                rsp_before = 's'\n            else:\n                rsp_before = ''\n        elif rsp == 'p':\n            if rsp_before != 'p':\n                ans += S\n                rsp_before = 'p'\n            else:\n                rsp_before = ''\n\nprint(ans)\n", "N,K=map(int,input().split())\nR,S,P=map(int,input().split())\nT=input()\nG=[[] for n in range(K)]\n\nfor n in range(N):\n  G[n%K].append(T[n])\n\ncnt=0\nfor g in G:\n  r,s,p=True,True,True\n  for g2 in g:\n    if g2=='r':\n      if p:\n        p=False\n        r,s=True,True\n        cnt+=P\n      else:\n        r,s,p=True,True,True\n    if g2=='s':\n      if r:\n        r=False\n        p,s=True,True\n        cnt+=R\n      else:\n        r,s,p=True,True,True\n    if g2=='p':\n      if s:\n        s=False\n        r,p=True,True\n        cnt+=S\n      else:\n        r,s,p=True,True,True\n\nprint(cnt)", "from collections import deque\nN,K = map(int,input().split())\nR,S,P = map(int,input().split())\nTlist = input()\nAnswer = 0\ndef po(x):\n    if x == 's':\n        return R\n    elif x == 'r':\n        return P\n    else:\n        return S\nfor i in range(K):\n    TK = list(Tlist[i::K]).copy()\n    TK.append('')\n    T2 = TK[0]\n    sig = 2\n    for i in range(1,len(TK)):\n        T1 = T2\n        T2 = TK[i]\n        if T1 == T2 and i != len(TK)-1:\n            sig += 1\n        else:\n            Answer += po(T1)*(sig//2)\n            sig = 2\nprint(Answer)", "N, K = [int(n) for n in input().split()]\nR, S, P = [int(n) for n in input().split()]\nT = list(input())\n\np = {'r':R, 's':S, 'p':P}\ncnv = {'r': 'p', 's': 'r', 'p': 's'}\n\nscore = 0\nhuman = [0] * N\n\nfor i in range(K):\n    human[i] = cnv[T[i]]\n    score += p[human[i]]\n\nfor i in range(K, N):\n    #human[i] = cnv[T[i]]\n    if human[i - K] == cnv[T[i]]:\n        #human[i] = T[i]\n        continue\n    else:\n        human[i] = cnv[T[i]]\n        score += p[human[i]]\n\nprint(score)\n", "n,k=map(int,input().split())\nrp,sp,pp=map(int,input().split())\np={\"r\":pp,\"s\":rp,\"p\":sp}\nt=[s for s in input()]\nans=0\nfor i in range(n):\n    if i>=k and t[i]==t[i-k]:\n        t[i]=\".\"\n        continue\n    ans+=p[t[i]]\nprint(ans)", "def main():\n    N,K = map(int,input().split())\n    R,S,P = map(int,input().split())\n    T = input()\n    dict = {'r':P,'s':R, 'p':S}\n    check = []\n    ans = 0\n    for i in range(N):\n        if i-K < 0:\n            ans += dict[ T[i] ]\n            check.append(1)\n        else:\n            if T[i-K] != T[i]:\n                ans += dict[ T[i] ]\n                check.append(1)\n            elif T[i-K] == T[i]:\n                if i-2*K < 0:\n                    ans += 0\n                    check.append(0)\n                else:\n                    if T[i-2*K] == T[i]:\n                        if check[i-K] == 1:\n                            ans += 0\n                            check.append(0)\n                        else:\n                            ans += dict[ T[i] ]\n                            check.append(1)\n                    else:\n                        ans += 0\n                        check.append(0)\n    return ans\n \nprint(main())", "N, K = list(map(int, input().split()))\nR, S, P = list(map(int, input().split()))\nT = input()\n\n# point = {'r':P, 's':R, 'p':S}\n# skip = {'r':[], 's':[], 'p':[]}\n\n# ans = 0\n# cnt = 0\n# for i in range(N):\n# \tcnt += 1\n# \tspell = T[i]\n# \tif i < K:\n# \t\tans += point[spell]\n# \t\tcontinue\n# \tif T[i - K] == spell:\n# \t\tif i - K in skip[spell]:\n# \t\t\tans += point[spell]\n# \t\telse:\n# \t\t\tskip[spell].extend([i])\n# \telse:\n# \t\tans += point[spell]\n# print(ans)\n\nans = [''] * N\npoint = 0\n\nfor i, t in enumerate(T):\n\tif t == 'r':\n\t\tans_tmp = 'p'\n\t\tpoint_tmp = P\n\telif t == 's':\n\t\tans_tmp = 'r'\n\t\tpoint_tmp = R\n\telif t == 'p':\n\t\tans_tmp = 's'\n\t\tpoint_tmp = S\n\n\tif i - K >= 0:\n\t\tif ans[i - K] == ans_tmp:\n\t\t\tans_tmp = ''\n\t\t\tpoint_tmp = 0\n\n\tans[i] = ans_tmp\n\tpoint += point_tmp\n\nprint(point)\n\n", "n, k = map(int, input().split())\nr, s, p = map(int, input().split())\nt = input()\na = 0\nfor i in range(k):\n    l = \"z\"\n    m = 0\n    for c in t[i::k]:\n        if c == l:\n            m += 1\n        else:\n            if l == \"r\":\n                a += p*(m//2)\n            elif l == \"s\":\n                a += r*(m//2)\n            elif l == \"p\":\n                a += s*(m//2)\n            l = c\n            m = 2\n    else:\n        if l == \"r\":\n            a += p*(m//2)\n        elif l == \"s\":\n            a += r*(m//2)\n        elif l == \"p\":\n            a += s*(m//2)\nprint(a)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Sep  8 22:36:36 2020\n\n@author: liang\n\"\"\"\n\nN, K = list(map(int,input().split()))\nR, S, P = list(map(int,input().split()))\nT = input()\n\nans = 0\nfor i in range(0,K):\n    s = str()\n    tmp = i\n    while tmp < N:\n        s += T[tmp]\n        tmp += K\n    #print(s)\n    count = 1\n    prev = str()\n    for j in range(len(s)):\n        if s[j] == prev:\n            count += 1\n        else:\n            count = 1\n        if count%2 == 0:\n            continue\n        prev = s[j]\n        if s[j] == \"r\":\n            ans += P\n        elif s[j] == \"s\":\n            ans += R\n        else:\n            ans += S\nprint(ans)\n", "N,K = map(int,input().split())\nRSP = list(map(int,input().split()))\nT = input()\n\n# dp[i][j]: i \u56de\u76ee\u306b j \u3092\u51fa\u3057\u305f\u3068\u304d\u306e\u5f97\u70b9\n# 0: \u30b0\u30fc, 1: \u30c1\u30e7\u30ad, 2: \u30d1\u30fc\ndp = [[0]*3 for _ in range(N+1)]\n\ndef judge(a,b):\n    # \u30d1\u30fc\u3067\u52dd\u3063\u305f\u3068\u304d\n    if a == 'r' and b == 2:\n        return RSP[2]\n    # \u30b0\u30fc\u3067\u52dd\u3063\u305f\u3068\u304d\n    elif a == 's' and b == 0:\n        return RSP[0]\n    # \u30c1\u30e7\u30ad\u3067\u52dd\u3063\u305f\u3068\u304d\n    elif a == 'p' and b == 1:\n        return RSP[1]\n    return 0\n\n# i \u56de\u76ee\u306e\u3058\u3083\u3093\u3051\u3093\nfor i in range(1,N+1):\n    # i \u56de\u76ee\u306b\u51fa\u3057\u305f\u624b\n    for j in range(3):\n        # i-K \u56de\u76ee\u306b\u51fa\u3057\u305f\u624b\n        for k in range(3):\n            # K \u56de\u524d\u3068\u540c\u3058\u624b\u3092\u51fa\u3057\u305f\u3068\u304d\n            if j == k:\n                continue\n            # j \u3092\u51fa\u3057\u305f\u3068\u304d\n            dp[i][j] = max(dp[i][j],dp[i-K][k] + judge(T[i-1],j))\n            \nans = 0\nfor k in range(K):\n    ans += max(dp[N-k])\nprint(ans)", "n,k = list(map(int, input().split()))\nr,s,p = list(map(int, input().split()))\nt = input()\n\n# Mod K\u3067\u306f\u3001\u76f4\u524d\u306b\u51fa\u3057\u305f\u624b\u3092\u51fa\u305b\u306a\u3044\u5236\u7d04\n# \u305d\u308c\u305e\u308c\u6700\u5584\u624b\u3092\u6c42\u3081\u3066\u3001\u5f97\u70b9\u3092\u5408\u8a08\u3059\u308b\nans = 0\nfor i in range(k):\n    R,S,P = 0,0,0\n    for hand in t[i::k]:\n        if hand == 'r':\n            R,S,P = max(S,P), max(R,P), max(R,S) + p\n        elif hand == 's':\n            R,S,P = max(S,P) + r, max(R,P), max(R,S)\n        elif hand == 'p':\n            R,S,P = max(S,P), max(R,P) + s, max(R,S)\n    ans += max(R,S,P)\n\nprint(ans)", "n,k = map(int,input().split())\nr,s,p = map(int,input().split())\nt = list(input())\n\nif k < n:\n    for i in range(k,n):\n        if t[i] == t[i-k]:\n            t[i] = \"*\"\n            \nprint(p*t.count(\"r\") + r*t.count(\"s\") + s*t.count(\"p\"))"]