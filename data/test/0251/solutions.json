["def ii():\n    return int(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\n\nn, k = mi()\nh = li()\nm = max(h)\nf = [0] * (m + 1)\nfor hi in h:\n    f[hi] += 1\nfor i in range(m - 1, 0, -1):\n    f[i] += f[i + 1]\n\nans = 0\ni = m\nwhile i > 0:\n    if f[i] == n:\n        break\n    j = i\n    cur = 0\n    while j > 0:\n        if cur + f[j] > k:\n            break\n        cur += f[j]\n        j -= 1\n    ans += 1\n    i = j\nprint(ans)\n", "import sys\nimport os\n\ndef solve(n, k, h):\n    h.sort()\n    top = h[len(h) - 1]\n\n    s = [n] * top\n    c = 0\n    for i in range(top):\n        s[i] = n - c\n        while c < n and h[c] == i + 1:\n            c += 1\n\n    pack = 0\n    result = 0\n    c = top - 1\n    while s[c] < n:\n        diff = s[c]\n        c -= 1\n\n        if pack + diff <= k:\n            pack += diff\n        else:\n            pack = diff\n            result += 1\n\n    if pack > 0:\n        result += 1\n\n    return result\n\n\n\ndef main():\n    n, k = (int(x) for x in input().split())\n    h = list(int(x) for x in input().split())\n    print(solve(n, k, h))\n\ndef __starting_point():\n    main()\n__starting_point()", "n, k = list(map(int, input().split()))\nh = list(map(int, input().split()))\n\nhs = {}\n\nmx = 0\nmn = 10**6\nfor a in h:\n    mx = max(mx, a)\n    mn = min(mn, a)\n    if a not in hs:\n        hs[a] = 0\n    hs[a] += 1\nans = 0\ncur = 0\ncurcl = 0\nfor i in range(mx, mn, -1):\n    if i not in hs:\n        nc = 0\n    else:\n        nc = hs[i]\n    if cur + nc + curcl <= k:\n        cur += nc + curcl\n        curcl += nc\n    else:\n        ans +=1\n        curcl += nc\n        cur = curcl\nif cur > 0:\n    ans += 1\nprint(ans)\n", "n, k = [int(i) for i in input().split()]\nh = [int(i) for i in input().split()]\nh.sort()\nhh = h[0]\nfor i in range(len(h)):\n    h[i] -= hh\ng = [0] * h[-1]\nlast = 0\nfor i in range(1, len(h)):\n    if h[i] > h[i-1]:\n        for j in range(last, h[i]):\n            g[j] = n - i\n            last = h[i]\ng.reverse()\ns = 0\nans = 0\nfor i in range(len(g)):\n    if s + g[i] > k:\n        ans += 1\n        s = g[i]\n    else:\n        s += g[i]\nif s > 0:\n    ans += 1\nprint(ans)\n", "n,k = list(map(int,input().split()))\nhhh = list(map(int,input().split()))\n\nh = [0] *200005\nhp = [0] * 200005\n\nmx = 0\nfor i in hhh:\n    h[i] +=1\n    mx = max(mx,i)\n\nres = n\nfor j in range(200003):\n    hp[j] = res\n    res -= h[j]\n\n\nans = 0\nrr = 0\nfor t in range(mx,0,-1):\n    if hp[t] == n:\n        break\n\n    rr += hp[t]\n    if rr > k:\n        rr = hp[t]\n        ans += 1\n\n\n\nif rr:\n    ans += 1\n\nprint(ans)\n\n\n", "from sys import stdin\nn,m=list(map(int,stdin.readline().strip().split()))\ns=tuple(map(int,stdin.readline().strip().split()))\nma=max(s)\nmi=min(s)\ndp=[0 for i in range(ma+3)]\nfor i in s:\n    dp[i]+=1\nfor i in range(len(dp)-2,-1,-1):\n    dp[i]+=dp[i+1]\nx=0\nans=0\nacum=0\nl=-1\nfor i in range(len(dp)-2,mi-1,-1):\n    dp[i]+=dp[i+1]\n    if dp[i]-acum>m:\n        acum=dp[i+1]\n        ans+=1\n        l=i\nif l!=mi and mi!=ma:\n    ans+=1\nprint(ans)\n\n\n", "a,b=map(int,input().split())\nn=list(map(int,input().split()))\nx=0\nz=100000\ni=0\nwhile i<a:\n    if n[i]>x:\n        x=n[i]\n    i+=1\nk=[0]*x\ni=0\nwhile i<a:\n    k[n[i]-1]+=1\n    i+=1\ni=x-1\nj=1\nz=0\nc=b\nwhile i>-1:\n    if k[i]+z==a:\n        break\n    if k[i]+z<=c:\n        c-=k[i]+z\n    else:\n        c=b-k[i]-z\n        j+=1\n    z+=k[i]\n    i-=1\nif k[x-1]==a:\n    print (0)\nelse:\n    print (j)", "\ndef main():\n    n, k = [int(x) for x in input().split(\" \")]\n    h = list([int(x) for x in input().split(\" \")])\n    # f[i] i slice to?\n    num = [0 for i in range(max(h)+5)]\n\n    for i in h:\n        num[i] += 1\n\n    ans = 0\n    now = max(h)\n    now_cost = 0\n    now_tower = 0\n    # print(\"h\", h)\n    # print(\"num\", num)\n    while now:\n        # print(ans, now, now_cost, num[now])\n        if num[now] + now_cost <= k:\n            pass\n        else:\n            # print(\"cut\")\n            ans += 1\n            now_cost = 0\n        if num[now] == n:\n            break\n        now_cost += num[now]\n        now -= 1\n        num[now] += num[now+1]\n    if now_cost != 0:\n        # print(\"cut\")\n        ans += 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = [int(x) for x in input().split()]\nh = [int(x) for x in input().split()]\nmih = min(h)\nmah = max(h)\nif mah == mih:\n    print(0)\n    return\ncotam = dict()\nlotam = list()\nsotam = set()\nfor th in h:\n    if th > mih:\n        if th in sotam:\n            cotam[th] += 1\n        else:\n            sotam.add(th)\n            lotam.append(th)\n            cotam[th] = 1\nlotam.sort(reverse=True)\n\nsc = 0\ncc = 0\nrk = 0\nfor i in range(len(lotam)):\n    ch = lotam[i]\n    nh = (mih if i >= len(lotam) - 1 else lotam[i+1])\n    cc += cotam[ch]\n    if rk >= cc:\n        hrbrk = min(ch-nh, rk // cc)\n        rk -= cc * hrbrk\n        ch -= hrbrk\n    while ch > nh:\n        hrbk = min(ch-nh, k // cc)\n        sc += 1\n        ch -= hrbk\n        rk = k - hrbk * cc\nprint(sc)\n", "3\n\nimport math\nimport sys\n\n\nDEBUG = False\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\ndef solve(N, K, H):\n    H.sort(reverse=True)\n    while len(H) >= 2 and H[-2] == H[-1]:\n        H.pop()\n\n    width = 0\n    cnt = 0\n    remain = 0\n    for i in range(len(H) - 1):\n        h = H[i]\n        h1 = H[i + 1]\n\n        width += 1\n\n        height = h - h1\n\n        dprint('i={} h={} h1={} width={} height={} cnt={} remain={}'.format(\n            i, h, h1, width, height, cnt, remain))\n\n        if height == 0:\n            continue\n\n        if remain + width * height < K:\n            remain += width * height\n            continue\n\n        dh = (K - remain) // width\n        dprint('dh={}'.format(dh))\n        assert dh <= height\n        remain = 0\n        height -= dh\n        cnt += 1\n\n        if width * height < K:\n            remain += width * height\n            continue\n\n        dprint('A: height={} cnt={}'.format(height, cnt))\n\n        t = K // width\n        assert t >= 1\n        dprint('t={}'.format(t))\n\n        sets = height // t - 1\n        dprint('sets={}'.format(sets))\n        height -= t * sets\n        cnt += sets\n        dprint('B: height={} cnt={}'.format(height, cnt))\n\n        while width * height >= K:\n            height -= t\n            cnt += 1\n            dprint('C: height={} cnt={}'.format(height, cnt))\n\n        assert width * height < K\n        remain += height * width\n\n    assert remain < K\n    if remain > 0:\n        cnt += 1\n\n    return cnt\n\n\ndef main():\n    N, K = [int(e) for e in inp().split()]\n    H = [int(e) for e in inp().split()]\n    assert len(H) == N\n    print(solve(N, K, H))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def cell(num):\n    if int(num) < num:\n        return num + 1\n    return num\nn, k = list(map(int,input().split()))\nhi = list(map(int,input().split()))\nhi.sort()\nnum = 0\nif n == 1:\n    print(0)\nelse:\n    height = hi[-1]\n    sumHeight = 0\n    num2 = 1\n    for i in range(n-2,-1,-1):\n        sumHeight2 = sumHeight + num2 * (height - hi[i])\n        if sumHeight2 == k:\n            num += 1\n            sumHeight = 0\n        elif sumHeight2 > k:\n            num5 = k // num2\n            j = height\n            num6 = sumHeight\n            while num6 <= k:\n                num6 += num2\n                j -= 1\n            num += 1\n            num += (j + 1 - hi[i]) // num5\n            sumHeight = (j + 1 - hi[i]) % num5 * num2\n        else:\n            sumHeight = sumHeight2\n        height = hi[i]\n        num2 += 1\n    if sumHeight > 0:\n        num += 1\n    print(num)\n    \n        \n", "n, k = list(map( int, input().split() ))\nhs = list( map( int, input().split() ) )\nmh = max( hs )\nh = []\nfor i in range( 0, mh + 1 ):\n    h.append( 0 )\nfor hh in hs:\n    h[ hh ] += 1\n\nl = 0\ngood = 0\nfor i in range( mh, 0, -1 ):\n    if h[ i ] == n:\n        break\n    if l + h[ i ] > k:\n        good += 1\n        l = h[ i ]\n    else:\n        l = l + h[ i ]\n    h[ i - 1 ] += h[ i ]\n\nprint( good + ( 1 if l > 0 else 0 ) )\n", "n, m = map(int, input().split())\nb = [0 for i in range(200002)]\nc = [0 for i in range(200002)]\nhmax = 0\nhmin = 200005\na = list(map(int, input().split()))\nfor i in range(n):\n    hmax = max(hmax, a[i])\n    hmin = min(hmin, a[i])\n    c[a[i]] += 1\nb[200000] = c[200000]\nfor i in range(200000 - 1, -1, -1):\n    b[i] = b[i + 1] + c[i]\ncur = hmax\nans = 0\n#print(b[:5])\nwhile cur > hmin:\n    cnt = 0\n    while cnt <= m:\n        if (cnt + b[cur] <= m) and cur > hmin:\n            cnt += b[cur]\n            cur -= 1\n        else:\n            ans += 1\n            cnt = 0\n            break\n        #print(cur, cnt)\n    if cur == hmin:\n        break\nprint(ans)", "def get_input_list():\n\treturn list(map(int, input().split()))\nn,k = get_input_list()\nh = get_input_list()\nh.sort()\nl = []\nfor i in range(n-1,0,-1):\n\tif h[i] != h[i-1]:\n\t\tfor _ in range(h[i] - h[i-1]):\n\t\t\tl.append(n-i)\n\nif len(l) == 0:\n\tprint(0)\nelse:\n\tp = 0\n\tr = 1\n\tfor i in l:\n\t\tif p + i <= k:\n\t\t\tp += i\n\t\telse:\n\t\t\tr += 1\n\t\t\tp = i\n\tprint(r)", "towers, max_bite_size = list(map(int, input().strip().split()))\ngen = list(map(int, input().strip().split()))\n\nmax_height = 2 * 10 ** 5\n\nheights = [0] * (max_height)\nfor num in gen:\n    heights[num - 1] += 1\n\nnum_blocks = 0\n\nnum_slices = 0\ncurr_slice_size = 0\n\nblock_sizes = [0] * (max_height)\nfor idx, num in enumerate(reversed(heights)):\n    if num_blocks + num == towers:\n        break\n    num_blocks += num\n    block_sizes[idx] = num_blocks\n    if curr_slice_size + num_blocks > max_bite_size:\n        num_slices += 1\n        curr_slice_size = num_blocks\n    else:\n        curr_slice_size += num_blocks\nif curr_slice_size > 0:\n    num_slices += 1\nbest_so_far = num_slices\n\n\nnum_slices = 0\ncurr_slice_size = 0\n\nfor num in reversed(block_sizes):\n    if curr_slice_size + num > max_bite_size:\n        num_slices += 1\n        curr_slice_size = num\n    else:\n        curr_slice_size += num\nif curr_slice_size > 0:\n    num_slices += 1\n\nprint(min(num_slices, best_so_far))\n", "from collections import Counter\n\nn, k = list(map(int, input().split()))\nh = list(map(int, input().split()))\n\ncnt = Counter(h)\n\nelems = 0\ncosts = []\n\nhs = list(reversed(sorted(cnt.keys())))\ncur_sum = 0\nans = 0\n\nfor i in range(len(hs) - 1):\n  v, c = hs[i], cnt[hs[i]]\n  next_v = hs[i+1]\n  diff = v - next_v\n  elems += c\n\n  if cur_sum + elems > k:\n    ans += 1\n    cur_sum = 0\n  \n  if cur_sum + diff * elems <= k:\n    cur_sum += diff * elems\n  else:\n    if cur_sum != 0:\n      diff -= (k - cur_sum) // elems\n      ans += 1\n    per_cut = k // elems\n    cuts = diff // per_cut\n    cur_sum = (diff % per_cut) * elems\n    ans += cuts\n    \nans += cur_sum > 0\nprint(ans)", "n,k=[int(x) for x in input().split()]\n\nd={}\nns=[int(x) for x in input().split()]\nminn=min(ns)\nns=[x-minn for x in ns]\n\nfor c in ns:\n    if c in d:\n        d[c]+=1\n    else:\n        d[c]=1\n\ndef eat(i,need):\n    al=(ns[i]-ns[i+1])*d[ns[i]]\n    if al>need:\n        thick=d[ns[i]]\n        eath=need//thick\n        d[ns[i] - eath]=d[ns[i]]\n        ns[i]-=eath\n        return i,0\n    if al==need:\n        d[ns[i+1]]+=d[ns[i]]\n        return i+1,0\n    if al<need:\n        d[ns[i + 1]] += d[ns[i]]\n        return i+1,need-al\n\n\nns=list(d.keys())\nns.sort(reverse=True)\n\n\n\n\nans=0\n\ni=0\nnewn=k\n\nwhile i<len(ns)-1:\n    i,newn=eat(i,newn)\n    if newn>0 and i>=len(ns)-1:\n        ans+=1\n        break\n    if newn==0:\n        ans+=1\n        newn=k\n\n\n\n\n\nprint(ans)\n\n\n\n\n", "import math as ma\nimport sys\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n\treturn list(map(int , input().split()))\n\n\n# https://www.geeksforgeeks.org/multiplicative-inverse-under-modulo-m/\ndef modInverse(a , m):\n\tm0 = m\n\ty = 0\n\tx = 1\n\tif (m == 1):\n\t\treturn 0\n\twhile (a > 1):\n\t\tq = a // m\n\t\tt = m\n\t\tm = a % m\n\t\ta = t\n\t\tt = y\n\t\ty = x - q * y\n\t\tx = t\n\tif (x < 0):\n\t\tx = x + m0\n\treturn x\n\n\ndef num():\n\treturn map(int , input().split())\n\n\ndef nu():\n\treturn int(input())\n\n\ndef find_gcd(x , y):\n\twhile (y):\n\t\tx , y = y , x % y\n\treturn x\n\n\nn,k=num()\nh=li()\na=[0]*(max(h)+5)\nmx=max(h)\nmn=min(h)\nfo=True\nfor i in range(1,n):\n\tif(h[i]!=h[i-1]):\n\t\tfo=False\n\t\tbreak\nfor i in range(n):\n\ta[0]+=1\n\ta[h[i]+1]-=1\nfor i in range(1,len(a)):\n\ta[i]=a[i]+a[i-1]\ns=a[mx]\ncc=0\nfl=False\nfor i in range(mx-1,mn,-1):\n\tif(s+a[i]>k):\n\t\tfl=True\n\t\ts=a[i]\n\t\tcc+=1\n\telse:\n\t\tfl=False\n\t\ts+=a[i]\nif(s<=k and fo==False):\n\tcc+=1\nprint(cc)", "n,k = map(int,input().split())\narr = list(map(int,input().split()))\n\narr.sort()\nheights = []\ncounter=arr[0]\nfor i in range(n):\n    while arr[i]>=counter:\n        heights.append(n-i)\n        counter+=1\n\nheights.reverse()\n\n\nans=0\ncontainer=0\nfor i in range(len(heights)-1):\n    if heights[i]+container<=k:\n        container+=heights[i]\n    else:\n        container=heights[i]\n        ans+=1\nif container>0:ans+=1\n\nprint(ans)", "n,k = map(int, input().split())\nL = list(map(int, input().split()))\nma = max(L)\nf = [0]*(ma+1)\nfor i in L:\n    f[i] += 1\nfor i in reversed(range(ma)):\n    f[i] = f[i] + f[i+1]\nc = 0\ns = 0\nif f[ma] == n:\n    print(0)\n    quit()\nfor i in reversed(range(ma+1)):\n    if f[i] == n:\n        break\n    s += f[i]\n    if s > k:\n        c += 1\n        s = f[i]\nprint(c+1)", "n, k = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort(reverse=True)\n\nans = 0\ng = A[-1]\nh = A[0]\np = 0\ni = 1\nc = 0\nl = 0\nwhile h > g and i < n:\n  if A[i] == A[p]:\n    p += 1\n    i += 1\n    continue\n\n  for j in range(A[p] - A[i]):\n    c += p+1\n    l += 1\n    if c > k:\n      ans += 1\n      h -= l-1\n      c = p+1\n      l = 0\n      if h <= g:\n        break\n  \n  p = i\n  i += 1\n\nif h > g:\n  ans += 1\n  \nprint(ans)", "[n, k] = [int(i) for i in input().split()]\n\nh = [0 for i in range(2 * 10 ** 5 + 1)]\n\nfor i in input().split():\n\th[int(i)] += 1\nh[0] = n\nans = 0\ncur = 0\nij = 0\nfor i in range(2 * 10 ** 5, -1, -1):\n\t#print(i, ans, cur)\n\tij += h[i]\n\tif ij == n:\n\t\tans += (cur != 0)\n\t\tprint(ans)\n\t\treturn\n\tif cur + ij <= k:\n\t\tcur += ij\n\telse:\n\t\tans += 1\n\t\tcur = ij\n\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\nhs1 = [0 for _ in range(a[-1])]\nfor i in range(n):\n    hs1[a[i] - 1] += 1\npluser = 0\nhs = [0 for _ in range(a[-1])]\nfor i in range(a[-1]):\n    pluser += hs1[a[-1] - i - 1]\n    hs[a[-1] - i - 1] = pluser\nfloor = a[-1] - 1\nans = 0\ncount = 0\nwhile floor > a[0] - 1:\n    while floor > a[0] - 1 and count + hs[floor] <= k:\n        count += hs[floor]\n        floor -= 1\n    ans += 1\n    count = 0\nprint(ans)\n", "\nn,k=list(map(int,input().split()))\n\nh=list(map(int,input().split()))\nmin1=min(h)\n\nm=max(h)+1 - min1\na=[0 for i in range(m+5)]\n\nfor i in range(n):\n    h[i]-=min1\n    a[h[i]]+=1\n\nfor i in range(m-2,-1,-1):\n    a[i]+=a[i+1]\ncnt=0\ncnt1=0\n#print(a)\nfor i in range(m-1,0,-1):\n    if(cnt1+a[i]>k):\n        cnt1=a[i]\n        cnt+=1\n    else:\n        cnt1+=a[i]\nif(cnt1):\n    cnt+=1\nprint(cnt)\n    \n    \n    \n\n\n    \n\n\n", "from collections import defaultdict\n\ndef ii():\n    return list(map(int, input().split()))\n\nmaxv = int(2e5) + 1\nn, k = ii()\ncnt = defaultdict(int)\n\nfor a in ii():\n    cnt[a] += 1\n\nfor i in range(maxv, -1, -1):\n    cnt[i] += cnt[i + 1]\n\ncur, ans = 0, 0\ni = maxv\n\nwhile True:\n    if cnt[i] == n:\n        if cur:\n            ans += 1\n        break\n    if cur + cnt[i] > k:\n        ans += 1\n        cur = 0\n    cur += cnt[i]\n    i -= 1\n\nprint(ans)\n"]