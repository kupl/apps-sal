["# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n# \n# \n# @stop_watch\ndef solve(N, ABs):\n    ABs.sort(key=lambda x: x[1])\n    time = 0\n    ans = 'Yes'\n    for A, B in ABs:\n        time += A\n        if time > B:\n            ans = 'No'\n            break\n    print(ans)\n\n\ndef __starting_point():\n    # S = input()\n    N = int(input())\n    # N, M = map(int, input().split())\n    ABs = [[int(i) for i in input().split()] for _ in range(N)]\n    # Bs = [int(i) for i in input().split()]\n    solve(N, ABs)\n\n__starting_point()", "import sys\n\n# D - Megalomania\nN = int(input())\njobs = []\n\nfor _ in range(N):\n  a, b = map(int, input().split())\n  jobs.append([a, b])\n\n# \u7de0\u3081\u5207\u308a\u6642\u523b\u306e\u9806\u306b\u30bd\u30fc\u30c8\njobs.sort(key=lambda x:x[1])\n\ntime = 0\n\nfor i in range(N):\n  time += jobs[i][0]\n\n  if time > jobs[i][1]:\n    print('No')\n    return\n\nprint('Yes')", "import sys\ninput = sys.stdin.readline\ndef main():\n   N = int(input())\n   T = [list(map(int, input().split())) for i in range(N)] \n   S = [[b, a] for a,b in T]\n   U = sorted(S)\n   time = 0\n   for b, a  in U:\n        time += a\n        if time > b:\n           print('No')\n           return\n   print('Yes')\n\ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\nN, *AB = list(map(int, open(0).read().split()))\nAB_sorted = sorted(zip(AB[0::2], AB[1::2]), key=lambda x: x[1])\ncurrent = 0\nfor a, b in AB_sorted:\n    current += a\n    if current > b:\n        print(\"No\")\n        return\nprint(\"Yes\")\n", "import heapq\n\ndef solve():\n    N = int(input())\n    que = []\n    for i in range(N):\n        a, b = list(map(int, input().split()))\n        heapq.heappush(que, (-b, a))\n    now = 10 ** 10\n    while que:\n        b, a = heapq.heappop(que)\n        b = -b\n        if now > b:\n            now = b\n        now -= a\n        if now < 0:\n            return False\n    return True\n\nif solve():\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "def main():\n    N = int(input())\n    A = []\n    for _ in range(N):\n        a, b = map(int, input().split())\n        A.append(tuple([b,a]))\n    A.sort()\n    total = 0\n    for a, b in A:\n        total+=b\n        if a < total:\n            print('No')\n            return\n    print('Yes')\nmain()", "n = int(input())\nal = list(list(map(int, input().split())) for _ in range(n))\nal_s = sorted(al, key=lambda x:x[1])\n\ntime_sum = 0\nfor i in range(n):\n    time, limit = al_s[i][0], al_s[i][1]\n    time_sum += time\n    if limit < time_sum:\n        print('No')\n        return\nelse:\n    print('Yes')\n", "import numpy as np\n\nN = int(input())\nAB = [tuple(map(int, input().split())) for _ in range(N)]\n\nAB_sort = sorted(AB, key = lambda x: x[1])\n\nA = [x[0] for x in AB_sort]\nB = [x[1] for x in AB_sort]\n\nA_cum = np.array(A).cumsum()\n\nfor i in range(N):\n    if A_cum[i] > B[i]:\n        print('No')\n        return\n\nprint('Yes')\n", "def main():\n    n = int(input())\n    ab_lst = [list(map(int, input().split())) for _ in range(n)]\n\n    ba_lst = [0] * n\n    for i in range(n):\n        a = ab_lst[i][0]\n        b = ab_lst[i][1]\n        ba = [b, a]\n        ba_lst[i] = ba\n    ba_lst.sort()\n\n    lst = []\n    b = ba_lst[0][0]\n    a = ba_lst[0][1]\n    for i in range(n):\n        b_tmp = ba_lst[i][0]\n        a_tmp = ba_lst[i][1]\n\n        if b == b_tmp:\n            if i != 0:\n                a += a_tmp\n            if i == n - 1:\n                lst.append([b, a])\n\n        else:\n            lst.append([b, a])\n            b = b_tmp\n            a = a_tmp\n\n    if len(lst) > 1:\n        if ba_lst[-1][0] != ba_lst[-2][0]:\n            lst.append([ba_lst[-1][0], ba_lst[-1][1]])\n\n\n    accumulate = 0\n    flag = True\n    for i in range(len(lst)):\n        accumulate += lst[i][1]\n        if accumulate > lst[i][0]:\n            flag = False\n            break\n\n    if flag:\n        print('Yes')\n    else:\n        print('No')\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N=int(input())\nBA=[]\nfor _ in range(N):\n    A,B=list(map(int,input().split()))\n    BA.append([B,A])\nBA.sort()\nT=0\nfor i in range(N):\n    T+=BA[i][1]\n    if T>BA[i][0]:\n        print(\"No\")\n        break;\nelse:\n    print(\"Yes\")\n", "n = int(input())\ns = []\nfor i in range(n):\n    a,b = map(int,input().split())\n    s.append([b,a])\ns.sort()\nt = 0\nts = 0\nfor i in s:\n    ts = i[0]\n    t += i[1]\n    if t>ts:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")", "N=int(input())\nl=[]\nfor _ in range(N):\n    ab=list(map(int,input().split()))\n    l.append(ab)\nl.sort(key=lambda x:x[1])\ntime=0\nflag=True\nfor i in range(N):\n    time+=l[i][0]\n    if time>l[i][1]:\n        flag=False\n        break\nif flag==True:\n    print('Yes')\nelse:\n    print('No')", "from operator import itemgetter\nn = int(input())\n\nl = []\n\nfor i in range(n):\n  a,b = map(int,input().split())\n  l.append([a,b])\n\nl = sorted(l, key=itemgetter(1))\n\n\n# print(l)\n\ntmp = 0\nf = 1\nfor i,j in l:\n  tmp += i\n  if tmp > j:\n    f = 0\n\ndef Y(a,t = 0):\n  if a==t : print('YES')\n  else : print('NO')\ndef y(a, t =0):\n  if a==t : print('Yes')\n  else : print('No')\n\ny(f,1)", "N=int(input())\nAB=[list(map(int,input().split())) for i in range(N)]\n\nAB.sort(key=lambda x:x[1])\ntotal=0\nfor i in range(N):\n    total+=AB[i][0]\n    if total<=AB[i][1]:\n        continue\n    else:\n        print('No')\n        return\n\nprint('Yes')", "n = int(input())\nx = [[0, 0]]\nfor _ in range(n):\n    a, b = map(int, input().split())\n    x.append([b, a])\nx.sort()\nfor i in range(1, n + 1):\n    x[i][1] += x[i - 1][1]\n    if x[i][0] < x[i][1]:\n        print(\"No\")\n        return\nprint(\"Yes\")", "import numpy as np\nn=int(input())\na=[0]*n\nb=[0]*n\nfor i in range(n):\n  a[i],b[i]=map(int,input().split())\n\nflag=True\nsum=0\nsorted_index=np.argsort(b)\nfor i in sorted_index:\n  sum+=a[i]\n  if sum>b[i]:\n    flag=False\n    break\n    \nif flag:\n  print('Yes')\nelse:\n  print('No')", "import itertools\nn = int(input())\nwork_lst = []\n\nfor _ in range(n):\n    a,b = map(int,input().split())\n    work_lst.append((a,b))\n\nwork_lst.sort(key=lambda x: x[1])\nwork_acc = [i[0] for i in work_lst]\nwork_acc = itertools.accumulate(work_acc)\nwork_dead = [i[1] for i in work_lst]\nfor x, dead in zip(work_acc, work_dead):\n    if x > dead:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")", "c=D=0\nfor b,a in sorted([tuple(map(int,input().split()))[::-1] for _ in range(int(input()))]):\n c+=a\n if b<c:D=1\nprint('No' if D else 'Yes')", "n = int(input())\nx = [list(map(int, input().split())) for i in range(n)]\ny = []\ny = sorted(x, key = lambda x:x[1])\na = 0\nfor i in y:\n    a += i[0]\n    if a > i[1]:\n        print(\"No\")\n        return\nprint(\"Yes\")\n", "Row = int(input())\nList = []\nfor i in range (Row):\n  List.append(list(map(int, input().split())))\nList = sorted(List, key=lambda x: x[1])  #[1]\u306b\u6ce8\u76ee\u3057\u3066\u30bd\u30fc\u30c8\nres = 0\nflag = True\nfor i in range(Row):\n  res += List[i][0]\n  if res > List[i][1]:\n    flag = False\n    break\nif flag:\n  print(\"Yes\")\nelse:\n  print(\"No\")", "import numpy\nN = int(input())\ntask = numpy.array([list(map(int, input().split())) for _ in range(N)])\ntask = task[numpy.argsort(task[:, 1])]\n\nans = 'Yes'\n\ntime = 0\nfor j in task:\n    time += j[0]\n    if time > j[1]:\n        ans = 'No'\n        break\n\nprint(ans)", "A=sorted([tuple(map(int,input().split())) for _ in range(int(input()))], key=lambda x: x[1])\n\nc=0\nD=[]\nfor a,b in A:\n c+=a\n D.append(c<=b)\nprint('Yes' if all(D) else 'No')", "c=D=0\nfor b,a in sorted([tuple(map(int,input().split()))[::-1] for _ in range(int(input()))]):\n c+=a\n D|=b<c\nprint('No' if D else 'Yes')", "from operator import *\nN = int(input())\nAB = [list(map(int,input().split())) for n in range(N)]\nAB = sorted(AB,key=itemgetter(1))\nans = \"Yes\"\nT = 0\n\nfor a,b in AB:\n  T+=a\n  if b<T:\n    ans = \"No\"\n\nprint(ans)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Sep 16 12:27:12 2020\n\n@author: liang\n\"\"\"\n\nN = int(input())\nW = list()\nfor i in range(N):\n    a, b = map(int, input().split())\n    W.append((a,b))\n\nW.sort(key= lambda x:x[1])\n\nres = 0\nfor i in range(N):\n    res += W[i][0]\n    if res > W[i][1]:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy\nfrom operator import itemgetter\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nn = ni()\nab = [na() for _ in range(n)]\nab.sort(key=itemgetter(1, 0))\nnow = 0\nans = 'Yes'\nfor i in range(n):\n    a, b = ab[i]\n    now += a\n    if now > b:\n        ans = 'No'\n        break\nprint(ans)", "n = int(input())\nt = 0\nab = [list(map(int, input().split())) for i in range(n)]\nabt = sorted(ab, key= lambda x:x[1])\nfor i in range(n):\n  t += abt[i][0]\n  if t > abt[i][1]:\n    print('No')\n    return\nprint('Yes')\n", "import numpy as np\nN = int(input())\nA_list =[0]*N\nB_list =[0]*N\nfor i in range(N):\n    A_list[i],B_list[i] = list(map(int,input().split()))\nx = np.argsort(B_list)\nA_list = np.array(A_list)[x]\nB_list = np.array(B_list)[x]\nans = 0\nfor i,j in zip(A_list,B_list):\n    ans +=i\n    if(ans<=j):\n        pass\n    else:\n        print('No')\n        return\nprint('Yes')\n", "n = int(input())\nab = sorted([list(map(int, input().split())) for _ in range(n)], key=lambda x: x[1])\n\nt = 0\nfor a, b in ab:\n    t += a\n    if t > b:\n        print('No')\n        return\nprint('Yes')", "N=int(input())\nA=[list(map(int,input().split())) for i in range(N)]\nA=sorted(A,key=lambda x:x[1])\nS=0\nT=True\nfor i in range(N):\n    S+=A[i][0]\n    if A[i][1]<S:\n        T=False\nif T==True:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "time=0\nn=int(input())\ntodo=[]*n\n\nfor i in range(n):\n  a,b=map(int, input().split())\n  todo.append([b,a])\n\ntodo.sort()\nd=True\n\nfor i in range(n):\n  time += todo[i][1]\n  if todo[i][0]<time:\n    d=False\n    break\n\nif d:\n  print('Yes')\nelse:\n  print('No')", "import operator\n\nN = int(input())\nwork = sorted([tuple(map(int, input().split())) for _ in range(N)], key=operator.itemgetter(1), reverse=True)\n\nt = work[0][1]\n\nfor i in range(N):\n    if t > work[i][1]:\n        t = work[i][1]\n    t -= work[i][0]\n\nprint(['No', 'Yes'][t >= 0])", "n = int(input())\nab = []\nnow = 0\nfor i in range(n):\n    _a, _b = map(int, input().split())\n    ab.append([_a, _b])\n\nab.sort(key=lambda x: x[1])\nfor a, b in ab:\n    now += a\n    if now>b:\n        print('No')\n        return\nprint('Yes')", "N = int(input())\n\nlimit2time = []\n\nfor i in range(N):\n    time, limit = map(int, input().split())\n\n    limit2time.append((limit, time))\n\nlimit2time  = sorted(limit2time, key=lambda x: x[0])\n\n# print(limit2time)\ncur = 0\nfor item in limit2time:\n    # print(item)\n    key, time = item\n    if cur + time > key:\n        print(\"No\")\n        break\n    cur += time\nelse:\n    print(\"Yes\")", "n=int(input())\nAB = [list(map(int,input().split())) for i in range(n)]\nAB.sort(key=lambda x:x[1])\nt = 0\nfor ab in AB:\n  t += ab[0]\n  if t > ab[1]:\n    print(\"No\")\n    break\nelse:\n  print(\"Yes\")", "n = int(input())\nwork = [list(map(int,input().split())) for _ in range(n)]\nwork = sorted(work,key = lambda x:x[1])\na = [0] * n\na[0] = work[0][0]\nfor i in range(1,n):\n    a[i] = a[i-1] + work[i][0]\nans = 'Yes'\nfor j in range(n):\n    if a[j] > work[j][1]:\n        ans = 'No'\n        break\nprint(ans)", "N = int(input())\ntasks = []\ntime = 0\nans = \"Yes\"\nfor _ in range(N):\n  A, B = map(int, input().split())\n  tasks.append((B, A))\ntasks.sort()\nfor b, a in tasks:\n  time += a\n  if b < time:\n    ans = \"No\"\n    break\nprint(ans)", "n=int(input())\na=[]\nb=[]\nfor _ in range(n):\n    c=list(map(int,input().split()))\n    a.append(c[0])\n    b.append(c[1])\nd=list(zip(b,a))\nd.sort()\n#print(d)\n\ntime=0\nfor i in range(n):\n    time+=d[i][1]\n    if d[i][0]<time:\n        print(\"No\")\n        return\nprint(\"Yes\")\n", "n = int(input())\nab = []\nfor _ in range(n):\n    ab.append(tuple(map(int,input().split())))\n\nab = sorted(ab,key=lambda x:x[1])\nans = True\nt = 0\nfor i in range(n):\n    t += ab[i][0]\n    if t>ab[i][1]:\n        ans = False\nprint(\"Yes\" if ans==True else \"No\")", "n = int(input())\nt = []\nfor i in range(n):\n  a, b = map(int, input().split())\n  t.append([b, a])\nt.sort()\np = 0\nans = 'Yes'\nfor i in range(n):\n  p += t[i][1]\n  if p > t[i][0]:\n    ans = 'No'\n    break\nprint(ans)", "N = int(input())\nAB = [list(map(int, input().split())) for _ in range(N)]\n\nAB.sort(key=lambda x: x[1])\n\ntime = 0\n\nfor a, b in AB:\n    time += a\n    if time > b:\n        print(\"No\")\n        return\n\nprint(\"Yes\")", "n = int(input())\nl = [0]*n\nfor i in range(n):\n    l[i] = list(map(int,input().split()))\n\nl.sort(key = lambda x:x[1])\n\ncnt = 0\nfor i in range(n):\n    cnt += l[i][0]\n    if cnt > l[i][1]:\n        print(\"No\")\n        return\n\nprint(\"Yes\")", "N = int(input())\n\nwork = [[] for i in range(N)]\n\nfor i in range(N):\n    a,b = map(int,input().split())\n    work[i] = [b,a]\n\nwork.sort()\ntotal = 0\nfor i in range(N):\n    total += work[i][1]\n    if total > work[i][0]:\n        print('No')\n        return\nprint('Yes')", "import sys\n\n\ninint = lambda: int(sys.stdin.readline())\ninintm = lambda: map(int, sys.stdin.readline().split())\ninintl = lambda: list(inintm())\ninstrm = lambda: map(str, sys.stdin.readline().split())\ninstrl = lambda: list(instrm())\n\n\nn = inint()\n\nwt = []\n\nfor i in range(n):\n    a, b = inintm()\n    wt.append([a,b])\n\nwt = sorted(wt, reverse=True, key=lambda x: x[1])[::-1]\n\nt = 0\n\nfor j in range(n):\n    t += wt[j][0]\n    if t > wt[j][1]:\n        print(\"No\")\n        return\n\nprint(\"Yes\")", "from operator import itemgetter\nn = int(input())\nab = [list(map(int,input().split())) for i in range(n)]\nab = sorted(ab, key = itemgetter(1))\nfor i in range(n):\n  if ab[i][0] > ab[i][1]:\n    print(\"No\")\n    return\n  if i != n-1:\n    ab[i+1][0] += ab[i][0]\n  else:\n    print(\"Yes\")", "import numpy as np\n\nn = int(input())\nab = []\nfor _ in range(n):\n    ab.append(list(map(int, input().split())))\n\nab = np.array(ab)\nab = ab[ab[:, 1].argsort()]\n\ntotal_time = 0\nflag = 0\nfor _a, _b in zip(ab[:,0], ab[:, 1]):\n    total_time += _a\n    if total_time > _b:\n        flag = 1\n        break\n\nif flag:\n    print('No')\nelse:\n    print('Yes')\n", "n = int(input())\ntask = sorted([tuple(map(int, input().split())) for _ in range(n)], key=lambda x: x[1])\n\nt = 0\nfor a, b in task:\n    t += a\n    if t > b:\n        print('No')\n        return\nprint('Yes')", "def main():\n    N = int(input())\n    works = []\n    for i in range(N):\n        A, B = list(map(int, input().split()))\n        works.append((A, B))\n    \n    works.sort(key=lambda x: x[1])\n\n    time = 0\n    for i in range(N):\n        a, b = works[i]\n        time += a\n        if time > b:\n            print('No')\n            return\n    print('Yes')\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# FileName: \tD\n# CreatedDate:  2020-09-03 21:15:23 +0900\n# LastModified: 2020-09-03 21:29:19 +0900\n#\n\n\nimport os\nimport sys\n# import numpy as np\n# import pandas as pd\n\n\ndef main():\n    n = int(input())\n    S = []\n    for _ in range(n):\n        S.append(list(map(int, input().split())))\n    S.sort(key=lambda x:x[1])\n    current_time = 0\n    for s in S:\n        current_time += s[0]\n        if current_time <= s[1]:\n            pass\n        else:\n            print('No')\n            return\n    print('Yes')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N=int(input())\nP=[]\nfor i in range(N):\n    a,b=map(int,input().split())\n    P.append([b,a])\nP=sorted(P)\ntime=0\nfor i in range(N):\n    time+=P[i][1]\n    if time>P[i][0]:\n        print('No')\n        return\nprint('Yes')", "N=int(input())\nli=[]\nans=\"Yes\"\nt=0\nfor i in range(N):\n    A,B=list(map(int,input().split()))\n    li.append([B,A])\nli.sort()\n\nfor j in range(N):\n    t+=li[j][1]\n    if t<=li[j][0]:\n        pass\n    else:\n        ans=\"No\"\n        \nprint(ans)\n", "n = int(input())\ntasks = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    tasks.append([a, b])\n\ntasks = sorted(tasks, key=lambda x: x[1])\ntime = 0\nfor task in tasks:\n    time += task[0]\n    if time > task[1]:\n        print(\"No\")\n        return\nprint(\"Yes\")", "n = int(input())\nworks = {}\nfor _ in range(n):\n    a, b = list(map(int, input().split()))\n    if b not in works:\n        works.setdefault(b, [a])\n    else:\n        works[b].append(a)\nworks = sorted(list(works.items()), key=lambda x: x[0])\ntotal = 0\nfor key, value in works:\n    total += sum(value)\n    if total > key:\n        print('No')\n        break\nelse:\n    print('Yes')\n", "n=int(input())\nlst=[]\n\nfor i in range(n):\n  a=list(map(int,input().split()))\n  lst.append(a)\n  \nlst.sort(key=lambda x:x[1])\n\ntime=0\n\nfor i in lst:\n  time+=i[0]\n  if time>i[1]:\n    print('No')\n    return\n    \n    \nprint('Yes')", "N = int(input())\njobs = [0]*N\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    jobs[i] = (a, b)\n\njobs.sort(key=lambda x:x[1])\n\nnow = 0\njobIndex = 0\nfor i in range(N):\n    if now + jobs[i][0] > jobs[i][1]:\n        print(\"No\")\n        return\n    now += jobs[i][0]\n\nprint(\"Yes\")\n", "N = int(input())\nDic = dict()\nfor i in range(N):\n    A,B = list(map(int,input().split()))\n    if B not in Dic:\n        Dic[B] = A\n    else:\n        Dic[B] += A\nDeadlines = sorted(Dic)\nTime = 0\nfor Deadline in Deadlines:\n    if Time+Dic[Deadline] <= Deadline:\n        Time += Dic[Deadline]\n    else:\n        Ans = 'No'\ntry:\n    if Ans =='No':\n        print(Ans)\nexcept:\n    print('Yes')\n", "import bisect, collections, copy, heapq, itertools, math, string, sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = float('inf')\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    N = I()\n    AB = [LI() for _ in range(N)]\n    AB.sort(key=lambda x: x[1])\n\n    ans = 'Yes'\n    t = 0\n    limit = 0\n    for A, B in AB:\n        limit = B\n        t += A\n        if t > limit:\n            ans = 'No'\n            break\n\n    print(ans)\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "def main():\n\tN = int(input())\n\ttasks = []\n\tfor i in range(N):\n\t\tA, B = [int(x) for x in input().split(\" \")]\n\t\ttasks.append({\n\t\t\t\"time\" : A,\n\t\t\t\"deadline\" : B\n\t\t})\n\ttasks.sort(key=lambda task: task[\"deadline\"])\n\ttot = 0\n\tin_time = \"Yes\"\n\tfor i in range(len(tasks)):\n\t\tt = tasks[i][\"time\"]\n\t\td = tasks[i][\"deadline\"]\n\t\ttot += t\n\t\tif tot > d:\n\t\t\tin_time = \"No\"\n\t\t\tbreak\n\tprint(in_time)\n\nmain()", "N=int(input())\na=list()\nfor _ in range(N):\n  A,B=list(map(int,input().split()))\n  a.append((B,A))\na.sort()\nt=0\nfor i in range(N):\n  t+=a[i][1]\n  if t>a[i][0]:\n    print(\"No\")\n    return\nprint(\"Yes\")\n", "N = int(input())\ntasks = []\nfor i in range(N):\n    A, B = [int(x) for x in input().split()]\n    tasks.append([B, A])\ntasks.sort()\n\nok = True\nS = 0\nfor i in range(N):\n    B, A = tasks[i][0], tasks[i][1]\n    S += A\n    if S > B:\n        ok = False\n        break\n\nif ok == True:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "N=int(input())\n\nAB=[list(map(int,input().split())) for _ in range(N)]\n\nAB=sorted(AB,key=lambda i:i[1])\n\ncount=0\nfor i in range(N):\n  \n  count+=AB[i][0]\n \n  if AB[i][1] < count:\n    print('No')\n    return\nelse:\n  print('Yes')", "N=int(input())\ntask=[[]]*N\nfor i in range(N):task[i]=list(map(int,input().split()))\ntask.sort(key=lambda x: x[1])\nt=0\nfor i in range(N):\n    t+=task[i][0]\n    if task[i][1]<t:\n        print('No')\n        return\nprint('Yes')", "N = int(input())\n\nAB = []\nfor _ in range(N):\n  AB.append(list(map(int, input().split())))\n\nsorted_AB = sorted(AB, key=lambda x:(x[1], -x[0]))\nworked = 0\nfor ab in sorted_AB:\n  worked += ab[0]\n  if worked > ab[1]:\n    print('No')\n    return\n\nprint('Yes')\n", "n = int(input())\nl = [list(map(int, input().split())) for i in range(n)]\n\nl.sort(key=lambda l:l[1])\n\nt = 0\n\nfor i in l:\n    t += i[0]\n    if(t > i[1]):\n        print(\"No\")\n        return\nprint(\"Yes\")", "import sys\n\nn=int(input())\nba=[[0]*2 for i in range(n)]\nfor i in range(n):\n    ai,bi=map(int,input().split())\n    ba[i]=[bi,ai]\n    \nba.sort() \n\nt=0\nfor i in range(n):\n    t+=ba[i][1]\n    if t>ba[i][0]:\n        print(\"No\")\n        return\nprint(\"Yes\") ", "N=int(input())\nA=[tuple(map(int,input().split())) for _ in range(N)]\n\nA=sorted(A, key=lambda x: x[1])\nc=0\nD=[]\nfor a,b in A:\n c+=a\n D.append(c<=b)\nprint('Yes' if all(D) else 'No')", "N=int(input())\nli_=[]\nfor i in range(N):\n  A,B=list(map(int,input().split()))\n  li_.append((B,A))\nli_.sort()\ntime=0\nfor i in range(N):\n  time+=li_[i][1]\n  if time>li_[i][0]:\n    print(\"No\")\n    return\nprint(\"Yes\")\n", "n = int(input())\ntask = []\nfor i in range(n):\n    a,b = map(int,input().split())\n    task.append([b,a])\nsorted_task = sorted(task)\n#print(sorted_task)\nisOK = True\nans = 0\nfor i in range(n):\n    ans += sorted_task[i][1]\n    #print(sorted_task[i][0],ans)\n    if ans > sorted_task[i][0]:\n        isOK = False\n        break\nif isOK:\n    print('Yes')\nelse:\n    print('No')", "import sys\n\nn = int(input())\nwork = [list(map(int, input().split())) for i in range(n)]\nwork = sorted(work, key=lambda x:x[1])\n\nsum = 0\n\nfor i in range(n):\n  sum += work[i][0]\n  if sum > work[i][1]:\n      print('No')\n      return\n\nprint('Yes')", "n=int(input())\nwork=[]\nfor i in range(n):\n  a,b=list(map(int,input().split()))\n  work.append((a,b))\nwork=sorted(work,key=lambda x:(x[1],x[0]))\n\nt=0\nfor time,limit in work:\n  t+=time\n  if t>limit:\n    print('No')\n    return\nprint('Yes')\n", "def __starting_point():\n    N = int(input())\n    tasks = []\n    for _ in range(N):\n        a, b = list(map(int, input().split()))\n        tasks.append((b, a))\n    tasks.sort()\n    t = 0\n    for b, a in tasks:\n        if t + a > b:\n            break\n        t += a\n    else:\n        print(\"Yes\")\n        return\n    print(\"No\")\n\n__starting_point()", "N = int(input())\ninputs = [tuple(map(int, input().split(' '))) for i in range(N)]\n\ninputs = sorted(inputs, key=lambda x:x[1])\n\ntime = 0\nfor ai, bi in inputs:\n    time += ai\n    if time > bi:\n        print('No')\n        break\n    \nif time <= bi:\n    print('Yes')", "N = int(input())\nAB = [tuple(map(int,input().split())) for _ in range(N)]\nAB.sort(key=lambda x:x[1])\ncnt = 0\nfor a,b in AB:\n    cnt += a\n    if cnt > b:\n        print(\"No\")\n        return\nprint(\"Yes\")", "import heapq\n\ndef solve():\n    N = int(input())\n    que = []\n    for i in range(N):\n        a, b = list(map(int, input().split()))\n        heapq.heappush(que, (b, a))\n    now = 0\n    while que:\n        b, a = heapq.heappop(que)\n        now += a\n        if now > b:\n            return False\n    return True\n\nif solve():\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "N = int(input())\nAB = [list(map(int,input().split())) for i in range(N)]\nAB.sort(key=lambda x:x[1])\ntime = 0\nans = \"Yes\"\nfor i in range(N):\n    time += AB[i][0]\n    if time > AB[i][1]:\n        ans = \"No\"\n        break\nprint(ans)", "n = int(input())\nab = [list(map(int, input().split())) for _ in range(n)]\nab.sort(key = lambda x: x[1])\ntime = 0\nans = \"Yes\"\nfor i in range(n):\n    time += ab[i][0]\n    if time <= ab[i][1]:\n        continue\n    else:\n        ans = \"No\"\n        break\nprint(ans)\n", "# AtCoder Beginner Contest 131\n# D - Megalomania\n\nimport numpy as np\n\n\nN=int(input())\nls=[]\nfor _ in range(N):\n    p=list(map(int,input().split()))\n    ls.append(p)\n\nls.sort(key= lambda x:x[1])\n# print(ls)\n\ntime=0\n\nfor i in range (N):\n    time+=ls[i][0]\n    if ls[i][1] < time:\n        print(\"No\")\n        return\n    else:\n        pass\n\nprint(\"Yes\")", "n = int(input())\ntask_time = {}\ntask_limit = {}\nfor i in range(1,n+1):\n    a,b = list(map(int,input().split()))\n    task_time[i] = a\n    task_limit[i] = b\n\ntask_limit_sorted = sorted(list(task_limit.items()), key=lambda x:x[1])\n\ntime = 0\nfor i in task_limit_sorted:\n    time += task_time[i[0]]\n    if task_limit[i[0]] < time:\n        print (\"No\")\n        exit ()\n\nprint (\"Yes\")\n", "N = int(input())\nt = [0] * N\nfor i in range(N):\n    t[i] = list(map(int, input().split()))\n\nt = sorted(t, key = lambda x: x[1])\n\nn = 0\nd = 0\nf = 0\nfor i in range(N):\n    n += t[i][0]\n    if n > t[i][1]:\n        f = 1\n        break\n\nif f == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "import sys\n\ninput = sys.stdin.readline\nal = [list(map(int, input().split())) for _ in range(int(input()))]\nal = sorted(al, key=lambda x: x[1])\ns = 0\nfor i, j in al:\n    s += i\n    if s > j:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")", "import numpy as np\nN = int(input())\nAB = ['']*N\nfor i in range(N):\n  AB[i] = list(map(int, input().split()))\n#AB = np.array(AB)\n\nAB = sorted(AB, key=lambda x: x[1])\n#print(AB)\ntotal = 0\nflag = 1\nfor i in range(N):\n  total += AB[i][0]\n  if total > AB[i][1]:\n    flag = 0\n    break\nif flag == 1:\n  print('Yes')\nelse:\n  print('No')", "import pprint\nn = int(input())\na = [[0]*2 for i in range(n)]\nmemo = 0 \nahozon = 0\nfor i in range(n):\n  a[i][0],a[i][1]=map(int,input().split())\na.sort(key=lambda x: x[1])\nfor j in range(n):\n  if(memo<=1):\n    if(a[j][1]-a[j][0]-ahozon>=0):\n      ahozon+=a[j][0]\n    else:\n      memo +=1\nif(memo>=1):\n  print(\"No\")\nelse:\n  print(\"Yes\")", "# 52 D - Megalomania\nN = int(input())\nwork = []\nfor _ in range(N):\n    a,b = map(int,input().split())\n    work.append((a,b))\n\n# \u7de0\u3081\u5207\u308a\u304c\u65e9\u3044\u9806\u306b\u30bd\u30fc\u30c8\nwork = sorted(work,key = lambda x:x[1],reverse = False)\n\nresult = 'Yes'\nt = 0\nfor i,j in work:\n    t += i\n    if t>j:\n        result = 'No'\n        break\nprint(result)", "n=int(input())\nba=[]\nfor i in range(n):\n  a,b=map(int,input().split())\n  ba.append([b,a])\nba.sort()\nt=0\nfor i in range(n):\n  t+=ba[i][1]\n  if t<=ba[i][0]:\n    continue\n  else:\n    print('No')\n    return\nprint('Yes')", "A=sorted([tuple(map(int,input().split())) for _ in range(int(input()))], key=lambda x: x[1])\n\nc=0\nD=1\nfor a,b in A:\n c+=a\n if b<c:D=0\n\nprint('Yes' if D else 'No')", "n=int(input())\nAB = [list(map(int,input().split())) for i in range(n)]\nAB.sort(key=lambda x:x[1])\nt = 0\nfor ab in AB:\n  t += ab[0]\n  if t > ab[1]:\n    print(\"No\")\n    break\nelse:\n  print(\"Yes\")", "c=0\nD=1\nfor b,a in sorted([tuple(map(int,input().split()))[::-1] for _ in range(int(input()))]):\n c+=a\n if b<c:D=0\n\nprint('Yes' if D else 'No')", "from itertools import accumulate\nn = int(input())\nab = [list(map(int, input().split())) for _ in range(n)]\nab.sort(key=lambda x: x[1])\na, b = zip(*ab)\na = list(a)\nb = list(b)\na = list(accumulate(a))\nfor i, j in zip(a, b):\n    if i > j:\n        print('No')\n        break\nelse:\n    print('Yes')", "import sys\nn=int(input())\nl=[]\n\nfor i in range(n):\n    a,b=map(int,input().split())\n    l.append([a,b])\n\nl=sorted(l,key=lambda x:(x[1]))\n\nc=0\nfor i in range(n):\n    c+=l[i][0]\n    if c>l[i][1]:\n        print('No')\n        return\n    else:\n        continue\n\nprint('Yes')", "N = int(input())\n\na = [list(map(int, input().split())) for _ in range(N)]\n\na = sorted(a, key=lambda x: x[1])\n\nhours = 0\n\nans = \"Yes\"\nfor pair in a:\n    hours += pair[0]\n    deadline = pair[1]\n\n\n    if hours > deadline:\n        ans = \"No\"\n        break\n\nprint(ans)", "import sys\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readlines\n\ndef main():\n\n    lines = input()\n    n = int(lines[0].strip())\n\n    E = [list(map(int, lines[i].split())) for i in range(1, n+1)]\n    E = sorted(E, key=lambda x: x[1])\n\n    cur_t = 0\n\n    for i in range(n):\n        cur_t += E[i][0]\n        if cur_t > E[i][1]:\n            print('No')\n            return\n\n    print('Yes')\n\nmain()", "c=0\nD=1\nfor a,b in sorted([tuple(map(int,input().split())) for _ in range(int(input()))], key=lambda x:x[1]):\n c+=a\n if b<c:D=0\n\nprint('Yes' if D else 'No')", "N = int(input())\nW =[]\nfor i in range(N):\n  W.append(list(map(int,input().split())))\n\nW = sorted(W,key =lambda x:(x[1],x[0]))\nnow = 0\nfor w in W:\n  #print(now,w[0])\n  if now +w[0] > w[1]:\n    print(\"No\")\n    return\n  now+=w[0]\nprint(\"Yes\")", "N = int(input())\n\nBA = []\nfor i in range(N):\n  A,B = map(int,input().split())\n  BA.append([B,A])\n  \nBA.sort()\n\ncheck = True\nsum_A = 0\nfor j in range(N):\n  sum_A += BA[j][1]\n  if sum_A > BA[j][0]:\n    check = False\n    break\n    \nprint(\"Yes\" if check else \"No\")", "def main():\n    point = 0\n    ab = []\n    for i in range(int(input())):\n        t = list(map(int, input().split()))\n        ab.append(t)\n    ab.sort(key=lambda x: x[1])\n    for i in range(len(ab)):\n        point += ab[i][0]\n        # print(point, ab[i])\n        if point > ab[i][1]:\n            print(\"No\")\n            return\n    print(\"Yes\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\n\ndef main():\n    n = i_input()\n    l = [i_list() for i in range(n)]\n    l = sorted(l, key= lambda x: x[1])\n\n    trial = 0\n    for i,k in l:\n        trial += i\n        if trial > k:\n            print(\"No\")\n            return\n    print(\"Yes\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n = int(input())\n    adic = dict()\n    bdic = dict()\n\n    for i in range(n):\n        a, b = map(int, input().split())\n        adic[i+1] = a\n        bdic[i+1] = b\n    \n    bdic2 = sorted(bdic.items(),key = lambda x:x[1])\n    time = 0\n\n    for dic in bdic2:\n        shigoto = dic[0]\n        time += adic[shigoto]\n        if time > dic[1]:\n            print(\"No\")\n            return\n    \n    print('Yes')\n\n\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n,t=int(input()),0\nAB=[list(map(int,input().split())) for _ in range(n)]\nAB.sort(key=lambda X: X[1])\n\nfor ab in AB:\n  t += ab[0]\n  if t > ab[1]:\n    print(\"No\")\n    return\n    \nprint(\"Yes\")"]