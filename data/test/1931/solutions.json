["for zz in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 1:\n        ans += 1\n        cr = 2\n        while n >= cr:\n            n -= cr\n            cr += 3\n    print(ans)\n", "import sys\n\nreadline = sys.stdin.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: list(map(int, readline().split()))\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n    n = ni()\n    ans = 0\n    while n > 1:\n        ok, ng = 0, 10**5\n        while ng - ok > 1:\n            mid = (ok + ng) // 2\n            if mid*(mid+1)*3//2 - mid <= n:\n                ok = mid\n            else:\n                ng = mid\n        n -= ok*(ok+1)*3//2 - ok\n        ans += 1\n    print(ans)\n\n\n# solve()\n\nT = ni()\nfor _ in range(T):\n    solve()\n", "import sys\nimport heapq\nimport math\nimport bisect\n\ndef input():\n    return sys.stdin.readline().strip()\n \ndef iinput():\n    return int(input())\n \ndef rinput():\n    return map(int, input().split())\n\ndef rlinput():\n    return list(map(int, input().split()))\n\ndef srlinput():\n    return sorted(list(map(int, input().split())))\n\nq = [2]\ni = 2\nwhile q[-1] < 1e9:\n    q.append(q[-1] + 2 * i + i - 1)\n    i +=1\ndef main():\n    n = iinput()\n    res = 0\n    while n >= q[0]:\n        #print(bisect.bisect_right(q, n) - 1, q[bisect.bisect_right(q, n) - 1], n)\n        n -= q[bisect.bisect_right(q, n) -1]\n        res += 1\n    print(res)\n    \n\n    \n            \nfor sdfghjkl in range(iinput()):\n    main()", "import os\nimport sys\nif os.path.exists('/mnt/c/Users/Square/square/codeforces'):\n\tf = iter(open('B.txt').readlines())\n\tdef input():\n\t\treturn next(f)\nelse:\n\tinput = sys.stdin.readline\n\ndef func(k):\n\treturn (k * (k + 1)) // 2 * 3 - k\n\nt = int(input())\nfor _ in range(t):\n\tn = int(input())\n\t\n\tres = 0\n\tk = 1\n\twhile func(k) <= n:\n\t\tk += 1\n\twhile n > 0:\n\t\twhile k > 0 and func(k) > n:\n\t\t\tk -= 1\n\t\tif k != 0:\n\t\t\tres += 1\n\t\t\tn -= func(k)\n\t\telse:\n\t\t\tbreak\n\tprint(res)", "poss=[2]\ni=2\nwhile poss[-1]<=1000000000:\n    poss.append(poss[-1]+2*i+i-1)\n    i+=1\nfor f in range(int(input())):\n    n=int(input())\n    m=0\n    i=0\n    while poss[i+1]<=n:\n        i+=1\n    n-=poss[i]\n    if n>=0:\n        m+=1\n    while n>1:\n        while poss[i]>n:\n            i-=1\n        n-=poss[i]\n        m+=1\n    print(m)", "import bisect\n\nlist=[]\nfor i in range(1,10**5):\n    list.append((3*i**2+i)//2)\n\nfor _ in range(int(input())):\n    n=int(input())\n    count=0\n    while n>=2:\n        r=bisect.bisect_right(list,n)\n        n-=list[r-1]\n        count+=1\n    print(count)\n", "t = int(input())\nfor q in range(0, t):\n    n = int(input())\n    number = 0\n    while n > 1:\n        left = 1\n        right = n\n        while right - left > 1:\n            m = (right + left) // 2\n            if 3 * m * (m + 1) // 2 - m > n:\n                right = m\n            else:\n                left = m\n        n -= (3 * left * (left + 1) // 2 - left)\n        number += 1\n    print(number)\n", "# Contest No.: 639\n# Problem No.: B\n# Solver:      JEMINI\n# Date:        20200503\n\nimport sys\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(sys.stdin.readline().strip())\n        ans = 0\n        while n > 1:\n            cnt = 1\n            temp = 2\n            while n >= (temp + cnt + 2 * (cnt + 1)):\n                temp += cnt + 2 * (cnt + 1)\n                cnt += 1\n            n -= temp\n            ans += 1\n        print(ans)\n        \n    return\n\ndef __starting_point():\n    main()\n__starting_point()", "T = int(input())\np = []\ni = 0\nnp = 0\nwhile np < 10 ** 9:\n   i += 1\n   np += 3 * i - 1\n   p.append(np)\nfor case in range(T):\n\tt = int(input())\n\tc = 0\n\twhile t >= 2:\n\t   for e in p[::-1]:\n\t      if t >= e:\n\t         t -= e\n\t         c += 1\n\t         break\n\t\n\t\n\tprint(c)\n", "T = int(input())\n\nfor tc in range(T):\n    n = int(input())\n    count = 0\n    while(n>=2):\n        h = (-1 + (1 + 24*n)**0.5)//6\n        stack_cards = (3*(h**2) + h)//2\n        count+=1\n        n = n - stack_cards\n\n    print(count)\n", "def generatepyramids():\n    start = 2\n    total = 2\n    pyramids = [0, 2]\n    for i in range(40000):\n        start += 3\n        total += start\n        pyramids.append(total)\n    return pyramids\n\ndef largestpyramid(n, pyramids):\n    lo = 0\n    hi = len(pyramids)\n    mid = (lo + hi) // 2\n    while lo != hi:\n        mid = (lo + hi) // 2\n        cur_pyramid = pyramids[mid]\n        if cur_pyramid <= n:\n            lo = mid + 1\n        else:\n            hi = mid\n    if cur_pyramid <= n:\n        return pyramids[mid]\n    else:\n        return pyramids[mid-1]\n\npyramids = generatepyramids()\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    answer = 0\n    while n > 1:\n        cur = largestpyramid(n, pyramids)\n        n -= cur\n        answer += 1\n    print (answer)\n        \n\n    \n", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    cnt = 0\n    while n > 1:\n        h = 1\n        now = 2\n        while n >= now + 2 * (h + 1) + h:\n            now += (h + 1) * 2 + h\n            h += 1\n        n -= now\n        cnt += 1\n    print(cnt)", "t=int(input())\nfor tt in range(t):\n\tx=int(input())\n\ttemp=x\n\tcc=0\n\twhile temp>0:\n\t\tstart=0\n\t\tend=temp\n\t\tans=0\n\t\twhile start<=end:\n\t\t\tmid=(start)+(end-start)//2\n\t\t\txx=mid*((3*mid)+1)//2\n\t\t\tif xx<=temp:\n\t\t\t\tstart=mid+1\n\t\t\t\tans=max(ans,mid)\n\t\t\telse:\n\t\t\t\tend=mid-1\n\t\tif ans==0:\n\t\t\tbreak\n\t\ttemp-=(ans*((3*ans)+1))//2\n\t\tcc+=1\n\tprint(cc)", "import sys\n# from collections import deque\n\n# print(help(deque))\n# 26\ninput = lambda: sys.stdin.readline().strip()\nipnut = input\ndp = [0]\nn = 0\nwhile dp[-1]<1000000000:\n    n+=1\n    dp.append(n*(3*n+1)//2)\n# print(dp[:10])\nfor i in range(int(input())):\n    n = int(input())\n    # s = list(map(int,input()))\n    k = 0\n    while n>1:\n        k+=1\n        l = 0\n        r = len(dp)\n        while r-l>1:\n            m = (r+l)//2\n            if dp[m]<=n:\n                l = m\n            else:\n                r = m\n        n-=dp[l]\n    print(k)\n\"\"\"\n10\n10 11 12 13 14 15 16 17 11 11\n\"\"\"", "for i in range(int(input())):\n    n = int(input())\n    c = 0\n    while n > 1:\n        l = 0\n        r = 1000000\n        while r - l != 1:\n            s = (l + r) // 2\n            if s*(3*s + 1) // 2 > n:\n                r = s\n            else:\n                l = s\n        c += 1\n        n -= l*(3*l + 1) // 2\n    print(c)\n", "arr = []\nn = 1\nwhile 1:\n    v = n*(n+1)//2*3 - n\n    if v > 10**9: break\n    arr.append(v)\n    n += 1\n\nfrom bisect import bisect\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    ans = 0\n    while N >= 2:\n        i = bisect(arr,N)\n        v = arr[i-1]\n        N -= v\n        ans += 1\n    print(ans)\n", "#  =========     /\\       /|    |====/|\n#      |        /  \\       |    |   / |\n#      |       /____\\      |    |  /  |\n#      |      /      \\     |    | /   |\n#  ========= /        \\  =====  |/====|  \n#  code\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n\n        cnt = 0\n        while n > 1:\n            i = 0\n            while i <= n * n:\n                i += 1\n                total = i * (i + 1) + (i * (i - 1)) // 2\n                if total > n:\n                    break\n            i -= 1\n            n -= i * (i + 1) + (i * (i - 1)) // 2\n            i = 1\n            cnt += 1\n        print(cnt)\n    return\n\ndef __starting_point():\n    main()\n__starting_point()", "for i in range(int(input())):\n    n = int(input())\n    n = n\n    ans = 0\n    while n >= 2:\n        ch = 2\n        deff = 5\n        while ch + deff <= n:\n            ch += deff\n            deff += 3\n        ans += 1\n        n -= ch\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n\n    def f(x): return ((3 * (x + 1) * x) // 2) - x\n\n    ans = 0\n    while n > 1:\n        left, right = 1, int(1e5)\n        while left < right:\n            mid = (left + right + 1) // 2\n            if f(mid) > n:\n                right = mid - 1\n            else:\n                left = mid\n\n        n -= f((left+right + 1)//2)\n        ans += 1\n    print(ans)\n", "def calc(n):\n\treturn 3*((n*(n+1)))//2 - n\ndef binSearch(start, end, num):\n\tmid = (start+end)//2\n\ta = calc(mid)\n\tb = calc(mid + 1)\n\tif(a<=num and b>num):\n\t\treturn a\n\telif(a<num):\n\t\treturn binSearch(mid+1, end, num)\n\treturn binSearch(start, mid-1, num)\nfor tt in range(int(input())):\n\tn = int(input())\n\tc = 0\n\twhile(n>1):\n\t\tn -= binSearch(1, n, n)\n\t\tc+=1\n\tprint(c)", "for _ in range(int(input())):\n    n = int(input())\n    x = 0\n    while (3 * x * x + x) // 2 < n:\n        x += 1\n    ans = 0\n    while n > 1:\n        if (3 * x * x + x) // 2 <= n:\n            n = n - (3 * x * x + x) // 2\n            ans += 1\n        else:\n            x -= 1\n    print(ans)", "import math\nt = int(input())\nimport math\ndelay = []\nfor _ in range(t):\n    n = int(input())\n    k = 0\n    while(n > 0):\n        x = math.floor(((24*n+1)**(0.5) - 1)/6)\n        if x <= 0:\n            break\n        n -= x*(3*x+1)/2\n        k+=1 \n    print(k)", "import sys\nT = int(sys.stdin.readline().strip())\n\ncache = [2]\nL = 1\n\nfor t in range(T):\n    n = int(sys.stdin.readline().strip())\n    while cache[-1] < n:\n        L += 1\n        cache.append(L*(L+1) + L * (L-1)//2)\n    l = 0; r = L\n    while l < r-1:\n        m = (l+r)//2\n        if cache[m] <= n and( m+1 == L or cache[m+1] > n): l = m; break\n        if cache[m] < n: l = m\n        else: r = m\n    cnt = 0\n    while l >= 0 and n > 1:\n        if n >= cache[l]: n -= cache[l]; cnt += 1\n        else: l -= 1\n    print(cnt)\n", "from sys import stdin,stdout                           #\nimport math                                            #\nimport heapq                                           #\n                                                       #\nt = 1                                                  #\ndef aint():                                            #\n\treturn int(input().strip())                        #\ndef lint():                                            #\n\treturn list(map(int,input().split()))              #\ndef fint():                                            #\n\treturn list(map(int,stdin.readline().split()))     #\n                                                       #\t\n########################################################\nfrom bisect import bisect_right\ns=[2]\nfor h in range(2,40000):\n\ts.append(s[-1]+3*h-1)\ndef main():\n\tn=aint()\n\tans=0\n\twhile n>=2:\n\t\ti=bisect_right(s,n)\n\t\t#print(i,s[i],n)\n\t\tn-=s[i-1]\n\t\tans+=1\n\tprint(ans)\n\t#solve\n\nt=int(input())\n\n########################################################\nfor i in range(t):                                     #\n\t#print(\"Case #\"+str(i+1)+\":\",end=\" \")\t\t       #\n\tmain()                                             #", "'''\n\n\n5\n3\n14\n15\n24\n1\n\n\n\n'''\n\nn=int(input())\nL=[2,7]\nS=8;\nfor i in range(1,100000):\n    L.append(L[i]+S);\n    S+=3;\nfor i in range(0,n):\n    o=int(input())\n    tot=0;\n    while(1):\n        I=0;\n        V=-1;\n        J=len(L)-1;\n        while(I<=J):\n            m=(I+J)//2;\n            if L[m]>o:\n                J=m-1;\n            else:\n                V=m;\n                I=m+1;\n        if V!=-1:\n            tot+=1;\n            o-=L[V];\n        else:\n            break;\n    print(tot)", "pref = [2]\nfor i in range(2, 30000):\n    pref.append(i*3-1)\n    pref[-1]+= pref[-2]\nt = int(input())\n\nfor uuu in range(t):\n    n = int(input())\n    cnt = 0\n    while(n>1):\n        l = 0\n        r = 30000\n        while(r-l > 1):\n            mid = (r+l)//2\n            if(pref[mid] > n):\n                r = mid\n            else:\n                l = mid\n        n -= pref[l]\n        cnt+=1\n    print(cnt)", "def check(x,n):\n    used = 2*x\n    used += (3*x*(x-1)//2)\n\n    if used <= n:\n        return True\n\n    return False\n\ndef find(n):\n    low = 0\n    high = n\n    h = 0\n    while low <= high:\n        mid = (low+high)//2\n        if check(mid,n):\n            h = mid\n            low = mid+1\n        else:\n            high = mid-1\n\n    used = 2*h\n    used += 3*h*(h-1)//2\n    return used\n\ndef solve(n,ans):\n    total = 0\n    while n > 0:\n        used = find(n)\n        #print(used)\n        if used > 0:\n            total += 1\n            n -= used\n        else:\n            break\n\n    ans.append(total)\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        n = int(input())\n        solve(n,ans)\n\n    for i in ans:\n        print(i)\n        \n\n\nmain()\n", "import sys\n\ninput = sys.stdin.readline\n\n\ndef pyramid(n, l, r):\n    if l == r:\n        return l\n    mid = (l + r + 1) // 2\n    if (3 * mid * mid + mid) // 2 > n:\n        return pyramid(n, l, mid - 1)\n    else:\n        return pyramid(n, mid, r)\n\nfor _ in range(int(input())):\n    n = int(input())\n    cnt = 0\n    while n >= 2:\n        x = pyramid(n, 1, n)\n        n -= (3 * x * x + x) // 2\n        cnt += 1\n    print(cnt)\n", "\n\ndef main():\n    n = int(input())\n    st = set()\n    st.add(2)\n    number = 2\n    change = 2\n\n    while number <= n:\n        change += 3\n        number += change\n        st.add(number)\n    st = sorted(list(st))\n    have = 0\n    for i in range(len(st) - 1, -1, -1):\n        while n >= st[i]:\n            n -= st[i]\n            have += 1\n    print(have)\n\n\ndef __starting_point():\n    t = int(input())\n    for i in range(t):\n        main()\n__starting_point()", "import math as m\ndef func(a):\n    return int((m.sqrt(24*a+1)-1)//6)\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    c=0\n    while n>1:\n        a=func(n)\n        n=n-(3*a*a+a)//2\n        c=c+1\n    print(c)", "A = []\nx = 0\ni = 1\nwhile x <= 10 ** 11:\n    x += 3 * i - 1\n    A.append(x)\n    i += 1\nfor i in range(int(input())):\n    n = int(input())\n    ans = 0\n    k = int(n ** 0.5) + 1\n    while n >= 0 and k >= 0:\n        #print(k)\n        if n < A[k]:\n            k -= 1\n        else:\n            n -= A[k]\n            ans += 1\n\n    print(ans)", "import bisect\nseq = [i * (3 * i + 1) // 2 for i in range(30000)]\n\n\ndef solve():\n    n = int(input())\n    cnt = 0\n    while n > 1:\n        p = bisect.bisect_left(seq, n + 1) - 1\n        n -= seq[p]\n        cnt += 1\n    return cnt\n\n\ntests = int(input())\nfor _ in range(tests):\n    print(solve())\n"]