["from collections import defaultdict as dd\nimport math\nimport heapq\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\nn, m=mi()\nA=[]\nfor i in range(n):\n\tA.append(lm())\n\nB=[]\nfor i in range(n):\n\tB.append(lm())\n\ndef check(A,B):\n\tfor i in range(n):\n\t\tcount=0\n\t\tfor j in range(m):\n\t\t\tcount+=abs(A[i][j]-B[i][j])\n\n\t\tif not count%2==0:\n\t\t\treturn 'No'\n\n\tfor j in range(m):\n\t\tcount=0\n\t\tfor i in range(n):\n\t\t\tcount+=abs(A[i][j]-B[i][j])\n\t\tif not count%2==0:\n\t\t\treturn 'No'\n\n\treturn 'Yes'\n\nprint(check(A,B))\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return tuple(map(int, sys.stdin.readline().split()))\ndef LLI(): return [tuple(map(int, l.split())) for l in sys.stdin]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\ndef main():\n    n,m = LI()\n    a = [LI() for _ in range(n)]\n    b = [LI() for _ in range(n)]\n    for i in range(n):\n        t = 0\n        for j in range(m):\n            if a[i][j] != b[i][j]:\n                t += 1\n        if t % 2 == 1:\n            return 'No'\n\n    for j in range(m):\n        t = 0\n        for i in range(n):\n            if a[i][j] != b[i][j]:\n                t += 1\n        if t % 2 == 1:\n            return 'No'\n\n    return 'Yes'\n\nprint(main())\n\n\n", "def main():\n    n, m = map(int, input().split())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    kek = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            arr[i][j] ^= kek[i][j]\n    f = 1\n    for i in range(n):\n        s = 0\n        for j in range(m):\n            s += arr[i][j]\n        if s & 1:\n            f = 0\n            break\n    for i in range(m):\n        s = 0\n        for j in range(n):\n            s += arr[j][i]\n        if s & 1:\n            f = 0\n            break\n    if f:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return 0\nmain()", "n,m = list(map(int,input().split()))\nA = [[int(x) for x in input().split()] for _ in range(n)]\nB = [[int(x) for x in input().split()] for _ in range(n)]\n\nfor i in range(n-1):\n    for j in range(m-1):\n        if A[i][j] != B[i][j]:\n            A[i][j] = 1 - A[i][j]\n            A[i+1][j] = 1 - A[i+1][j]\n            A[i][j+1] = 1 - A[i][j+1]\n            A[i+1][j+1] = 1 - A[i+1][j+1]\n\nif A == B:\n    print('Yes')\nelse:\n    print('No')\n", "n,m = list(map(int,input().split()))\nA = [list(map(int,input().split())) for _ in range(n)]\nB = [list(map(int,input().split())) for _ in range(n)]\n\ndef rev(i, j):\n    A[i][j] ^= 1\n    A[i + 1][j] ^= 1\n    A[i][j + 1] ^= 1\n    A[i + 1][j + 1] ^= 1\n\nfor i in range(n - 1):\n    for j in range(m - 1):\n        # A[i][j] -> B[i][j]\n        if A[i][j] != B[i][j]:\n            rev(i, j)\n\nif A == B:\n    print('Yes')\nelse:\n    print('No')\n", "def get_inp(nf):\n    a = b = 0\n    for _ in range(nf):\n        inp = input()\n        a ^= int(inp.replace(' ', ''), 2)\n        b = b * 2 + inp.count('1') % 2\n    return a, b\n\n\nn = int(input().split()[0])\nif get_inp(n) == get_inp(n):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "n, m = [int(i) for i in input().split()]\nA = []\nfor i in range(n):\n    B = [int(j) for j in input().split()]\n    A.append(B)\n\nB = []\nfor i in range(n):\n    C = [int(j) for j in input().split()]\n    B.append(C)\n\nchangesx = []\nchangesy = []\n\nfor i in range(n):\n    for j in range(m):\n        if A[i][j] != B[i][j]:\n            changesx.append(i)\n            changesy.append(j)\n\nfrom collections import defaultdict\n\nddx = defaultdict(int)\nddy = defaultdict(int)\n\nfor i in changesx:\n    ddx[i] += 1\nfor i in changesy:\n    ddy[i] += 1\n\nok = 1\n\nfor i in ddx:\n    if ddx[i]%2 != 0:\n        ok = 0\nfor i in ddy:\n    if ddy[i]%2 != 0:\n        ok = 0\n\nif ok:\n    print('Yes')\nelse:\n    print('No')\n", "n, m = list(map(int, input().split()))\n\nA = []\nB = []\n\nfor i in range(n):\n    A.append(list(map(int, input().split())))\n\nfor i in range(n):\n    B.append(list(map(int, input().split())))\n    \nv = True\n\nfor r in range(n-1):\n    for c in range(m - 1):\n        if A[r][c] != B[r][c]:\n            A[r][c] ^= 1\n            A[r+1][c] ^= 1\n            A[r][c+1] ^= 1\n            A[r+1][c+1] ^= 1\n    if A[r][m-1] != B[r][m-1] : v = False\nif A[n-1] != B[n-1]: v = False\n\nif v == True:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "n, m = map(int, input().split())\nA1 = [list(map(int, input().split())) for i in range(n)]\nA2 = [list(map(int, input().split())) for wi in range(n)]\nfor i in range(n):\n    if A1[i].count(0) % 2 != A2[i].count(0) % 2:\n        print('No')\n        return\nfor j in range(m):\n    z1 = 0\n    z2 = 0\n    for i in range(n):\n        if A1[i][j] == 0:\n            z1 += 1\n        if A2[i][j] == 0:\n            z2 += 1\n    if z1 % 2 != z2 % 2:\n        print('No')\n        return\nprint('Yes')", "N, M = list(map(int, input().split()))\nA = [[int(a) for a in input().split()] for i in range(N)]\nB = [[int(a) for a in input().split()] for i in range(N)]\nC = [[A[i][j]^B[i][j] for j in range(M)] for i in range(N)]\n\nfor i in range(N):\n    if sum(C[i]) % 2:\n        print(\"No\")\n        break\n    if i < N-1:\n        for j in range(M):\n            C[i+1][j] ^= C[i][j]\n\nelse:\n    if sum(C[N-1]) == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n", "n,m=map(int,input().split())\nmata=[None]*n\nfor i in range(n):\n         mata[i]=list(map(int,input().split()))\nmatb=[None]*n\nfor i in range(n):\n         matb[i]=list(map(int,input().split()))\nfor i in range(n-1):\n         for j in range(m-1):\n                  if(mata[i][j]==0):\n                           mata[i][j]=1\n                           mata[i+1][j]^=1\n                           mata[i][j+1]^=1\n                           mata[i+1][j+1]^=1\n                  if(matb[i][j]==0):\n                           matb[i][j]=1\n                           matb[i+1][j]^=1\n                           matb[i][j+1]^=1\n                           matb[i+1][j+1]^=1\nif(mata==matb):\n         print(\"Yes\")\nelse:\n         print(\"No\")", "n, m = map(int, input().split())\na = [tuple(map(int, input().split())) for i in range(n)]\nb = [tuple(map(int, input().split())) for i in range(n)]\ndiff = [[a[i][j] ^ b[i][j] for j in range(m)] for i in range(n)]\nfor line in diff:\n\tif line.count(1) & 1:\n\t\tprint('No')\n\t\treturn\nfor j in range(m):\n\tif [diff[i][j] for i in range(n)].count(1) & 1:\n\t\tprint('No')\n\t\treturn\nprint('Yes')", "N,M = list(map(int,input().split()))\nA = [list(map(int,input().split())) for i in range(N)]\nB = [list(map(int,input().split())) for i in range(N)]\n\nif N==1 or M==1:\n    print('Yes' if A==B else 'No')\n    return\n\nD = []\nfor arow,brow in zip(A,B):\n    D.append([abs(a-b) for a,b in zip(arow,brow)])\n\nfor i in range(N-1):\n    ds = [j for j in range(M) if D[i][j]]\n    if len(ds)%2:\n        print('No')\n        return\n    for j in ds:\n        D[i+1][j] = 1 - D[i+1][j]\nprint('No' if any(D[-1]) else 'Yes')    \n", "from collections import defaultdict\nn,m = list(map(int,input().split())) \n# rows # columns\nm1 = [list(input().split()) for _ in range(n)]\nm2 = [list(input().split()) for _ in range(n)]\n\nrow_change = defaultdict(int)\ncol_change = defaultdict(int)\ncount_change = 0\n\nfor x in range(n):\n    for y in range(m):\n        if m1[x][y] != m2[x][y]:\n            count_change += 1\n            row_change[x] += 1\n            col_change[y] += 1\nif count_change%2:\n    print (\"No\")\n    return\nif all(v%2 == 0 for k,v in list(row_change.items())) and all(v%2 == 0 for k,v in list(col_change.items())):\n    print (\"Yes\")\n    return\nprint (\"No\")\n", "n, m = list(map(int, input().split()))\nA = []\nB = []\nAcount = []\nBcount = []\nfor i in range(n):\n    A.append(list(map(int, input().split())))\n\nfor i in range(n):\n    B.append(list(map(int, input().split())))\n\nfor i in range(n):\n    count = 0\n    for j in range(m):\n        if A[i][j] == 1:\n            count += 1\n    Acount.append(count)\nfor i in range(m):\n    count = 0\n    for j in range(n):\n        if A[j][i] == 1:\n            count += 1\n    Acount.append(count)\n\nfor i in range(n):\n    count = 0\n    for j in range(m):\n        if B[i][j] == 1:\n            count += 1\n    Bcount.append(count)\nfor i in range(m):\n    count = 0\n    for j in range(n):\n        if B[j][i] == 1:\n            count += 1\n    Bcount.append(count)\n\nflag = 1\nfor i in range(n+m):\n    if (Acount[i] - Bcount[i]) % 2 == 1:\n        flag = 0\nif flag == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "def Solve(A,B,n,m):\n    for i in range(n-1):\n        for j in range(m-1):\n            if A[i][j] != B[i][j]:\n                A[i][j] = int(not A[i][j])\n                A[i][j+1] = int(not A[i][j+1])\n                A[i+1][j] = int(not A[i+1][j])\n                A[i+1][j+1] = int(not A[i+1][j+1])\n\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] != B[i][j]:\n                print('No')\n                return\n    print('Yes')\n\ndef main():\n    n,m = list(map(int,input().split()))\n    A = []\n    B = []\n    for i in range(n):\n        A.append(list(map(int,input().split())))\n    for i in range(n):\n        B.append(list(map(int,input().split())))\n\n    Solve(A,B,n,m)\n\n\nmain()\n", "from collections import defaultdict as DD\nfrom bisect import bisect_left as BL\nfrom bisect import bisect_right as BR\nfrom itertools import combinations as IC\nfrom itertools import permutations as IP\nfrom random import randint as RI\nimport sys\nMOD=pow(10,9)+7\n\ndef IN(f=0):\n    if f==0:\n        return ( [int(i) for i in sys.stdin.readline().split()] )\n    else:\n        return ( int(sys.stdin.readline()) )\n\nn,m=IN()\na=[]\nb=[]\nc=[]\nfor i in range(n):\n    rr=IN()\n    a.append(rr)\n    c.append(rr)\nfor i in range(n):\n    b.append(IN())\n\nfr=[0 for i in range(n)]\nfc=[0 for i in range(m)]\n\nfor i in range(n):\n    for j in range(m):\n        if c[i][j]==b[i][j]:\n            c[i][j]=0\n        else:\n            c[i][j]=1\n            fr[i]+=1\n            fc[j]+=1\nf=\"Yes\"\nfor i in fr:\n    if i%2!=0:\n        f=\"No\"\n        break\nfor i in fc:\n    if i%2!=0:\n        f=\"No\"\n        break\nprint(f)\n\n            \n", "# -*- coding: utf-8 -*-\n# @Time    : 2019/4/6 20:26\n# @Author  : LunaFire\n# @Email   : gilgemesh2012@gmail.com\n# @File    : C. Ramesses and Corner Inversion.py\n\ndef main():\n    n, m = map(int, input().split())\n\n    a, b = [], []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(n):\n        b.append(list(map(int, input().split())))\n\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if a[i][j] != b[i][j]:\n                a[i][j] = 1 - a[i][j]\n                a[i + 1][j] = 1 - a[i + 1][j]\n                a[i][j + 1] = 1 - a[i][j + 1]\n                a[i + 1][j + 1] = 1 - a[i + 1][j + 1]\n\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != b[i][j]:\n                print('No')\n                return\n    print('Yes')\n\n\ndef __starting_point():\n    main()\n__starting_point()"]