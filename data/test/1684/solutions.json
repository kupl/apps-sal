["import math\n\n\nclass CodeforcesTask1147BSolution:\n    def __init__(self):\n        self.result = ''\n        self.n_m = []\n        self.points = []\n\n    def read_input(self):\n        self.n_m = [int(x) for x in input().split(\" \")]\n        for x in range(self.n_m[1]):\n            self.points.append([int(y) for y in input().split(\" \")])\n\n    def process_task(self):\n        can = False\n        segm = {}\n        for point in self.points:\n            segm[\"{0}_{1}\".format(*point)] = True\n            segm[\"{1}_{0}\".format(*point)] = True\n        for k in range(1, self.n_m[0]):\n            if not self.n_m[0] % k:\n                #print(k)\n                do = True\n                for p in self.points:\n                    a, b = (p[0] + k) % self.n_m[0], (p[1] + k) % self.n_m[0]\n                    if not a:\n                        a = self.n_m[0]\n                    if not b:\n                        b = self.n_m[0]\n                    if not \"{0}_{1}\".format(a, b) in segm:\n                        do = False\n                        break\n                if do:\n                    can = do\n                    break\n        self.result = \"Yes\" if can else \"No\"\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask1147BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()", "def check(k,g):\n    for i in g:\n        a = (i[0] + k) % n\n        b = (i[1] + k) % n\n        if not (min(a, b), max(a, b)) in g:\n            return False\n    return True\n\nn, m =[int(i) for i in input().split()]\n\ng = set()\nfor i in range(m):\n    a, b = [int(i) for i in input().split()]\n    a -= 1\n    b -= 1\n    # usar tupla ao inves de uma lista pois tuplas sao hashable\n    g.add((min(a, b), max(a, b)))\n \nfor i in range(1, n):\n    if n % i == 0:\n        if not check(i,g):\n            continue\n        print('Yes')\n        break\nelse:\n    print('No')\n# else depois de um for \u00e9 executado se ele n quebrar\n"]