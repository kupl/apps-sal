["3\n\ndef solve(N, A):\n    cnt = [0] * (N + 1)\n\n    evd = {}\n    xs = []\n    for a, b in A:\n        if a not in evd:\n            evd[a] = [0, 0]\n            xs.append(a)\n        if b not in evd:\n            evd[b] = [0, 0]\n            xs.append(b)\n\n        evd[a][0] += 1\n        evd[b][1] += 1\n\n    xs.sort()\n\n    px = xs[0] - 1\n    pop = 0\n    for x in xs:\n        cnt[pop] += x - px - 1\n        cnt[pop + evd[x][0]] += 1\n        pop -= evd[x][1]\n        pop += evd[x][0]\n        px = x\n\n    return cnt[1:]\n\n\ndef main():\n    N = int(input())\n    A = [tuple([int(e) for e in input().split(' ')]) for _ in range(N)]\n    print(*solve(N, A))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from copy import deepcopy\nimport itertools\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nimport math\nfrom collections import deque\n\n\ndef read():\n    return int(input())\n\n\ndef readmap():\n    return list(map(int, input().split()))\n\n\ndef readlist():\n    return list(map(int, input().split()))\n\n\n# C\nN = read()\nLIST = []\nleft = 0\nright = 1\nfor i in range(N):\n    l, r = readmap()\n    LIST.append((l, left))\n    LIST.append((r, right))\n\nLIST.sort()\n\ncnt = [0] * (N+1)  # DO NOT USE cnt[0]\n\nn = 1\nx = LIST[0][0]\ndir = left\nfor item in LIST[1:]:\n    if item[1] == left:\n        if dir == left:\n            cnt[n] += item[0] - x\n            n += 1\n            x = item[0]\n            dir = left\n        else:\n            cnt[n] += item[0] - x - 1\n            n += 1\n            x = item[0]\n            dir = left\n    else:\n        if dir == left:\n            cnt[n] += item[0] - x + 1\n            n -= 1\n            x = item[0]\n            dir = right\n        else:\n            cnt[n] += item[0] - x\n            n -= 1\n            x = item[0]\n            dir = right\n\nprint(\" \".join(list(map(str, cnt[1:]))))\n\n", "from collections import defaultdict\n\nans = defaultdict(int)\nn = int(input())\n\nbeg, end = [0] * n, [0] * n\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    beg[i] = a\n    end[i] = b + 1\nbeg.sort()\nend.sort()\n\npa, pb = 0, 0\n\ncur = 0\nlst = -1\n\nwhile pb < n:\n    pos = end[pb]\n    if pa < n:\n        pos = min(pos, beg[pa])\n\n    ans[cur] += pos - lst\n\n    ad = 0\n    mn = 0\n    while (pa < n and beg[pa] == pos):\n        ad += 1\n        pa += 1\n    while (pb < n and end[pb] == pos):\n        pb += 1\n        mn -= 1\n\n    lst = pos\n    cur += ad + mn\n\nfor i in range(1, n + 1):\n    print(ans[i], end = ' ')", "point = {}\n\nn = int(input())\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    r += 1\n    if l not in point:\n        point[l] = 0\n    if r not in point:\n        point[r] = 0\n    point[l] += 1\n    point[r] -= 1\n\nline = []\nfor key in point:\n    line.append((key,point[key]))\nline.sort()\nans = [0] * (n+1)\n\nlast_index = 0\nlast_value = 0\n\nfor index, value in line:\n    ans[last_value] += index - last_index\n    last_index = index\n    last_value += value\n\nfor cnt in ans[1:]:\n    print(cnt,end=' ')", "from collections import defaultdict\nn = int(input())\narr = defaultdict(int)\nfor a0 in range(n):\n\tl,r = input().strip().split()\n\tl,r=int(l),int(r)\n\tarr[l]+=1\n\tarr[r+1]-=1\n\nbrr=[0]*(n+1)\n\nl=sorted(arr.keys())\nsum=arr[l[0]]\nprevpoint=l[0]\nfor key in l[1:]:\n\tbrr[sum]+=key-prevpoint\n\tprevpoint=key\n\tsum+=arr[key]\nprint(*brr[1:])", "n = int(input())\nfrom collections import defaultdict, Counter\na = defaultdict(list)\ncount_left = Counter()\ncount_right = Counter()\n\nfor _ in range(n):\n\tl, r = map(int, input().split())\n\tcount_left[l] += 1\n\tcount_right[r] += 1\n\ncount = [0] * (n + 1)\n\n\npts = sorted(set(count_left.keys()) | set(count_right.keys()))\n# pts.append(pts[-1])\nc = 0\nprev = pts[0]\nfor pt in pts:\n\t# print(prev, pt, c)\n\tif count_left[pt]:\n\t\tcount[c] += pt - prev - 1\t\t\n\t\tc += count_left[pt]\n\t\tcount[c] += 1\n\t\tc -= count_right[pt]\n\telse:\n\t\tcount[c] += pt - prev\n\t\tc -= count_right[pt]\n\n\t\n\n\tprev = pt\n\t# print(count)\n\nprint(' '.join(map(str, count[1:])))", "n = int(input())\nleft = []\nright = []\nfor i in range(n):\n\tdata = input().split()\n\tleft.append(int(data[0]))\n\tright.append(int(data[1]))\n\t\nleft.sort()\nright.sort()\ni = 0\nj = 0\ncount = 1\nans = [0] * (n + 1)\nleft += [max(right) + 1]\nright += [max(right) + 2]\nwhile (i < n) and (j < n):\n\twhile left[i + 1] <= right[j]:\n\t\tans[count] += (left[i + 1] - left[i])\n\t\tcount += 1\n\t\ti += 1\n\tans[count] += (right[j] - left[i] + 1)\n\ti += 1\t\n\tcount -= 1\n\t\n\twhile ((i == n) or (right[j + 1] < left[i])) and (j < n - 1):\n\t\tans[count] += (right[j + 1] - right[j])\n\t\tcount -= 1\n\t\tj += 1\n\tans[count] += (left[i] - right[j] - 1)\n\tj += 1\n\tcount += 1\n#\tprint(i, j)\n\n\t\nfor i in range(1, n + 1):\n\tprint(ans[i], end = \" \")\nprint()\n\t\n", "from collections import defaultdict\nn, s = int(input()), []\nfor i in range(n):\n  a = [int(x) for x in input().split()]\n  s += [(a[0], 0), (a[1], 1)]\ns.sort()\nnow = 0\nrev = defaultdict(int)\nfor a,b in zip(s, s[1:]):\n  # print(a,b)\n  if(a[1] == 0):\n    now += 1\n    # print(\"now: %d\" % now)\n    rev[now] += b[0] - a[0]\n    if b[1] == 1: \n      # print(\"add %d\" % (b[0] - a[0] + 1))\n      rev[now] += 1\n    # else:\n    #   print(\"add %d\" % (b[0] - a[0]))\n  else:\n    now -= 1\n    # print(\"now: %d\" % now)\n    if b[0] != a[0]: \n      rev[now] += b[0] - a[0]\n      if b[1] == 0: \n        # print(\"add %d\" % (b[0] - a[0] - 1))\n        rev[now] -= 1\n      # else:\n      #   print(\"add %d\" % (b[0] - a[0]))\n# print(rev)\nfor i in range(1, n+1):\n  print(rev[i], end=\" \")", "from collections import defaultdict\nn, s= int(input()), []\nfor i in range(n):\n  a = [int(x) for x in input().split()]\n  s += [(a[0], 0), (a[1], 1)]\ns.sort()\nnow, rev = 0, defaultdict(int)\nfor a, b in zip(s, s[1:]):\n  now += 1 if a[1] == 0 else -1\n  if(a[1] == 0):\n    rev[now] += b[0] - a[0] + (1 if b[1] == 1 else 0)\n  elif b[0] != a[0]:\n    rev[now] += b[0] - a[0] - (1 if b[1] == 0 else 0)\n[print(rev[i], end=\" \") for i in range(1, n+1)]\n", "n=int(input())\na=[]\nfor i in range(n):\n    l,r=list(map(int,input().split()))\n    a.append([l,1])\n    a.append([r+1,-1])\na.sort()\n\nc=0\nans=[0]*(n+1)\nfor i in range(2*n):\n    c+=a[i][1]\n    if (i+1)<len(a) and a[i][0]!=a[i+1][0]:\n        ans[c]+=a[i+1][0]-a[i][0]\n\nprint(*ans[1:])\n", "n = int(input())\nl = []\nfor i in range(n):\n    a,b = map(int,input().split())\n    l.append((a,1))\n    l.append((b+1,0))\nl.sort()\nans = [0 for i in range(n+1)]\nval = 0;\nfor i in range(2*n-1):\n    if(l[i][1]==1):\n        val += 1\n    else:\n        val -= 1\n    ans[val] += l[i+1][0] - l[i][0]\nfor i in ans[1:]:\n    print(i,' ',sep='',end='')\n\n", "def ii():\n    return int(input())\ndef mi():\n    return map(int, input().split())\ndef li():\n    return list(mi())\nfrom collections import Counter\n\nn = ii()\na1 = [tuple(mi()) for i in range(n)]\na = []\nfor l, r in a1:\n    a.append((l, 0))\n    a.append((r, 1))\nc = Counter(a)\nb = [(k[0], k[1], v) for k, v in c.items()]\nb.sort()\nans = [0] * (n + 1)\np = -1\ncnt = 0\nfor x, y, z in b:\n    if y == 0:\n        ans[cnt] += x - p - 1\n        cnt += z\n        ans[cnt] += 1\n    else:\n        if x != p:\n            ans[cnt] += x - p\n        cnt -= z\n    p = x\nprint(*ans[1:])", "n=int(input())\na=[]\nfor i in range(n):\n\tl,r=map(int,input().split())\n\ta.append([l,1])\n\ta.append([r+1,-1])\na.sort()\n# print(a)\nans=[0]*(n+1)\nidx=0\nfor i in range(len(a)-1):\n\tidx+=a[i][1]\n\tans[idx]+=a[i+1][0]-a[i][0]\nfor i in range(1,n+1):\n\tprint(ans[i],end=\" \")\nprint()", "from collections import defaultdict\n\nn = int(input())\narr = defaultdict(int)\n\nfor a0 in range(n):\n    l, r = input().strip().split()\n    l, r = int(l), int(r)\n    arr[l] += 1\n    arr[r + 1] -= 1\n\nbrr = [0] * (n + 1)\n\nl = sorted(arr.keys())\nsum = arr[l[0]]\nprevpoint = l[0]\n\nfor key in l[1:]:\n    brr[sum] += key - prevpoint\n    prevpoint = key\n    sum += arr[key]\n\nprint(*brr[1:])\n", "n = int(input())\npos = {}\nfor _ in range(n):\n    L, R = list(map(int, input().split()))\n    if L in pos: pos[L] += 1\n    else: pos[L] = 1\n    if R+1 in pos: pos[R+1] -= 1\n    else: pos[R+1] = -1\na = sorted(list(pos.items()), key=lambda x: x[0])\nres = [0]*n\ns = 0\nfor i in range(len(a)):\n    if 1 <= s <= n:\n        res[s - 1] += a[i][0] - a[i - 1][0]\n    s += a[i][1]\nprint(*res)\n", "n = int(input())\npoints = set()\nstarts = {}\nends = {}\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    points.add(a)\n    points.add(b)\n    starts[a] = 1 + starts.get(a, 0)\n    ends[b] = 1 + ends.get(b, 0)\n\nspoints = sorted(points)\n\ndwd = {}\n\nprev_point = spoints[0]\ndensity = 0\nfor i, cur_point in enumerate(spoints):\n    interval_length = cur_point - prev_point - 1\n    if interval_length > 0:\n        dwd[density] = interval_length + dwd.get(density, 0)\n\n    starts_here = starts.get(cur_point, 0)\n    density += starts_here\n\n    dwd[density] = 1 + dwd.get(density, 0)\n\n    ends_here = ends.get(cur_point, 0)\n    density -= ends_here\n    prev_point = cur_point\n\nfor i in range(1, n + 1):\n    print(dwd.get(i, 0), end=' ')\n", "n = int(input())\npoints = set()\nstarts = {}\nends = {}\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    points.add(a)\n    points.add(b)\n    starts[a] = 1 + starts.get(a, 0)\n    ends[b] = 1 + ends.get(b, 0)\n\nspoints = sorted(points)\n\ndensity_stats = {}\n\nprev_point = spoints[0]\ndensity = 0\nfor cur_point in spoints:\n    interval_length = cur_point - prev_point - 1\n    if interval_length > 0:\n        density_stats[density] = interval_length + density_stats.get(density, 0)\n\n    starts_here = starts.get(cur_point, 0)\n    density += starts_here\n    density_stats[density] = 1 + density_stats.get(density, 0)\n\n    ends_here = ends.get(cur_point, 0)\n    density -= ends_here\n    prev_point = cur_point\n\nfor i in range(1, n + 1):\n    print(density_stats.get(i, 0), end=' ')\n", "import bisect\n\nn = int(input())\nlis = list()\nidx = dict()\nfor i in range(n):\n    l,r = map(int,input().split())\n    idx[l]=1\n    idx[r+1]=1\n    lis.append([l,r])\nval = [key for key,val in idx.items()]\nval.sort()\n\n\ncnt = [0]*((2*n)+1)\nfor item in lis:\n    f1 = bisect.bisect_left(val,item[0])\n    f2 = bisect.bisect_left(val,item[1]+1)\n   \n    cnt[f1]+=1\n    cnt[f2]-=1\n\nfor i in range(1,2*n):\n    cnt[i]+=cnt[i-1]\n\n\nans = [0]*(n+1)\n\nfor i in range(1,len(val)):\n    sm = val[i]-val[i-1]\n\n    ans[cnt[i-1]]+=sm\n\nfor i in range(1,n+1):\n    print(ans[i],end=\" \")\n    \n    ", "from collections import*\nn=int(input())\nd=defaultdict(int)\nfor _ in [0]*n:\n l,r=list(map(int,input().split()));d[l]+=1;d[r+1]-=1\ns=p=0\nf=[0]*(n+1)\nfor k,v in sorted(d.items()):\n f[s]+=k-p;s+=v;p=k\nprint(*f[1:])\n", "from collections import*\nn=int(input())\nd=defaultdict(int)\nfor _ in [0]*n:\n l,r=map(int,input().split());d[l]+=1;d[r+1]-=1\ns=p=0\nf=[0]*(n+1)\nfor k in sorted(d):\n f[s]+=k-p;s+=d[k];p=k\nprint(*f[1:])", "BEGIN = 'begin'\nEND = 'end'\n\n\ndef main():\n    n = int(input())\n    points = dict()\n\n    for _ in range(n):\n        li, ri = list(map(int, input().split()))\n\n        update_point_status(points, li, BEGIN)\n        update_point_status(points, ri, END)\n\n    points = sorted(list(points.items()), key=lambda x: x[0])\n    answer = [0] * (n + 1)\n\n    start = -1\n    count = 0\n    for point in points:\n        points_amount = point[0] - start - 1\n        answer[count] += points_amount\n\n        count += point[1][BEGIN]\n        answer[count] += 1\n        count -= point[1][END]\n\n        start = point[0]\n\n    print(' '.join(list(map(str, answer[1:]))))\n\n\ndef update_point_status(lines, point, status):\n    if point not in lines:\n        lines[point] = {BEGIN: 0, END: 0}\n\n    lines[point][status] += 1\n\n\nmain()\n", "import sys\n\n\nclass main:\n\n    def __init__(self):\n        self.n=int(sys.stdin.readline())\n\n        self.line=dict()\n        for i in range(self.n):\n            a,b=(int(s) for s in sys.stdin.readline().rstrip().split(' '))\n            self.line[a]=self.line.get(a,0)+1\n            self.line[b+1]=self.line.get(b+1,0)-1\n\n    def calc(self):\n        self.result=dict()\n        sorted_keys = sorted(self.line.keys())\n\n        count=0\n        last=sorted_keys[0]\n        for k in sorted_keys:\n            self.result[count]=self.result.get(count,0)+k-last\n            count=count+self.line[k]\n            last=k\n        del self.result[0]\n\n    def out(self):\n        for k in range(1,self.n):\n            print(self.result.get(k,0),end=' ')\n        print(self.result.get(self.n, 0), end='')\n\n    def solve(self):\n        self.calc()\n        self.out()\n\n\ndef __starting_point():\n    m=main()\n    m.solve()\n    pass\n\n__starting_point()", "import sys\n\nn = int(sys.stdin.readline())\nstart = dict()\nend = dict()\nfor i in range(n):\n    b, c = (int(s) for s in sys.stdin.readline().rstrip().split(' '))\n    start[b] = start.setdefault(b, 0) + 1\n    start.setdefault(c, 0)\n    end[c] = end.setdefault(c, 0) + 1\n    end.setdefault(b, 0)\nkeys = sorted(start.keys())\nk = 0\na = [0 for x in range(n+1)]\nprev = -1\nstart_c = 0\nend_c = 0\nfor key in keys:\n    if prev != -1 and key - prev > 1:\n        a[start_c - end_c] += key - prev - 1\n    start_c += start[key]\n    a[start_c - end_c] += 1\n    end_c += end[key]\n    prev = key\nprint(' '.join(str(x) for x in a[1:n+1]))"]