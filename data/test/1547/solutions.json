["#!/usr/bin/env python3\n\nn, m, k = [int(x) for x in input().split()]\n\nrow = [(0, -1)] * n\ncol = [(0, -1)] * m\nfor i in range(0, k):\n    t, num, color = [int(x) for x in input().split()]\n    num -= 1\n    if t == 1:\n        row[num] = (color, i)\n    else:\n        assert t == 2\n        col[num] = (color, i)\n\nfor r in row:\n    for c in col:\n        if c[1] > r[1]:\n            print(c[0], end=' ')\n        else:\n            print(r[0], end=' ')\n    print()\n\n", "n, m, k = map(int, input().split())\nlines = [[0, 0] for i in range(n)]\ncolumns = [[0, 0] for i in range(m)]\nfor i in range(k):\n    task, num, color = map(int, input().split())\n    if task == 1:\n        lines[num-1] = [color, i+1]\n    else:\n        columns[num-1] = [color, i+1]\nfor i in range(n):\n    for j in range(m):\n        if lines[i][1] > columns[j][1]:\n            print(lines[i][0], end = ' ')\n        else:\n            print(columns[j][0], end = ' ')\n        \n    print('')\n", "def main():\n    from sys import stdin, stdout\n    n, m, op = list(map(int, stdin.readline().split()))\n    hor = dict()\n    vert = dict()\n    for i in range(op):\n        a, b, c = list(map(int, input().split()))\n        b -= 1\n        if a == 1:\n            hor[b] = (c, i)\n        else:\n            vert[b] = (c, i)\n    for i in range(n):\n        for j in range(m):\n            if i not in hor:\n                hor[i] = (0, -1)\n            if j not in vert:\n                vert[j] = (0, -1)\n            if hor[i][1] > vert[j][1]:\n                stdout.write(str(hor[i][0]) + ' ')\n            else:\n                stdout.write(str(vert[j][0]) + ' ')\n        stdout.write('\\n')\n                \n\nmain()\n", "# You lost the game.\nn, m, k = map(int, input().split())\nQ = [list(map(int, input().split())) for _ in range(k)]\n\nT = [[0 for _ in range(m)] for _ in range(n)]\nR = [[0,-1] for _ in range(n)]\nC = [[0,-1] for _ in range(m)]\n\n\"\"\"for i in range(n):\n    for j in range(m):\n        for l in range(k-1,-1,-1):\n            if (Q[l][0] == 1 and Q[l][1] == i+1) or (Q[l][0] == 2 and Q[l][1] == j+1):\n                T[i][j] = Q[l][2]\n                break\"\"\"\n\nfor i in range(k):\n    q = Q[i]\n    if q[0] == 1:\n        R[q[1]-1] = [q[2],i]\n    else:\n        C[q[1]-1] = [q[2],i]\n\nfor i in range(n):\n    for j in range(m):\n        if R[i][1] > C[j][1]:\n            T[i][j] = R[i][0]\n        else:\n            T[i][j] = C[j][0]\n\nfor i in range(n):\n    for j in range(m):\n        print(T[i][j],end=\" \")\n    print()\n\n    \n", "n, m, k = [int(x) for x in input().split()]\nr = [(0, -1) for i in range(n)]\nc = [(0, -1)for i in range(m)]\n\nfor i in range(k):\n    ax, crd, clr = [int(x) for x in input().split()]\n    if ax == 1: r[crd - 1] = (clr, i)\n    else:       c[crd - 1] = (clr, i) # ax === 2\nfor i in range(n):\n    s = []\n    for j in range(m):\n        clr = r[i][0] if r[i][1] > c[j][1] else c[j][0]\n        s.append(str(clr))\n    print(\" \".join(s))\n", "def main():\n    n, m, k = map(int, input().split())\n    B1 = [[0, 0, 0, 0] for i in range(n)]\n    B2 = [[0, 0, 0, 0] for i in range(m)]\n    for i in range(k):\n        a, b, c = map(int, input().split())\n        b -= 1\n        if a == 1:\n            B1[b] = [i, a, b, c]\n        else:\n            B2[b] = [i, a, b, c]\n\n    C = sorted(B1 + B2, key = lambda x: x[0])\n\n    A = [[0] * m for i in range(n)]\n        \n    for i in range(len(C)):\n        x, a, b, c = C[i]\n        if a == 1:\n            A[b] = [c] * m\n        elif a == 2:\n            for j in range(n):\n                A[j][b] = c\n    for row in A:\n        print(' '.join(map(str, row)))\n\n\nmain()", "n,m,k = map(int,input().split())\nt = [[0]*m for i in range(n)]\nused = set()\na = []\nfor i in range(k):\n    q, b, c = tuple(map(int,input().split()))\n    b = b - 1\n    a.append((q, b, c))\n\na = a[::-1]\nfor i in range(k):\n    if a[i][0:2] not in used:\n        if a[i][0] == 1:\n            for s in range(m):\n                if t[a[i][1]][s] == 0:\n                    t[a[i][1]][s] = a[i][2]\n        else:\n            for s in range(n):\n                if t[s][a[i][1]] == 0:\n                    t[s][a[i][1]] = a[i][2]\n        used.add(a[i][0:2])\nfor i in range(n):\n    for j in range(m):\n        print(t[i][j], end = ' ')\n    print()\n                ", "n, m , k = map(int, input().split())\na = [(0, -1)] * n\nb = [(0, -1)] * m\nfor i in range(k):\n    t, pl, col = map(int, input().split())\n    if t == 1:\n        a[pl - 1] = (col, i)\n    else:\n        b[pl - 1] = (col, i)\nfor i in range(n):\n    for j in range(m):\n        if a[i][1] > b[j][1]:\n            print(a[i][0], end=' ')\n        else:\n            print(b[j][0], end=' ')\n    print()        \n", "n, m, k = map(int, input().split())\nstol = [[0, -1] for i in range(m)]\nstrok = [[0, -1] for i in range(n)]\nfor i in range(k):\n    c, ri, ai = map(int, input().split())\n    if c == 1:\n        strok[ri - 1][0] = ai\n        strok[ri - 1][1] = i\n    else:\n        stol[ri - 1][0] = ai\n        stol[ri - 1][1] = i\ndata = [[0 for i in range(m)] for j in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if strok[i][1] > stol[j][1]:\n            data[i][j] = strok[i][0]\n        else:\n            data[i][j] = stol[j][0]\nfor i in range(n):\n    print(*data[i])", "n,m,k = map(int,input().split())\ncolumns = [[0]*2 for i in range(n)]\nstrokes = [[0]*2 for i in range(m)]\nfor i in range(n):\n    columns[i][1] = -1\nfor i in range(m):\n    strokes[i][1] = -1\nfor i in range(k):\n    num,rci,ai = map(int,input().split())\n    if num == 2:\n        strokes[rci-1][0] = ai\n        strokes[rci-1][1] = i\n    else:\n        columns[rci-1][0] = ai\n        columns[rci-1][1] = i\nnm = [[[0]*2 for i in range(m)] for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if columns[i][1] >= nm[i][j][1]:\n            nm[i][j][0] = columns[i][0]\n            nm[i][j][1] = columns[i][1]\n        if strokes[j][1] >= nm[i][j][1]:\n            nm[i][j][0] = strokes[j][0]\n            nm[i][j][1] = strokes[j][1]\n        \nfor i in range(n):\n    for j in range(m):\n        print(nm[i][j][0],end=\" \")\n    print()\n", "n, m, k = list(map(int, input().split()))\n\nrows = [[0, 0] for i in range(n)]\ncols = [[0, 0] for i in range(m)]\nfor i in range(k):\n    typ, p, x = list(map(int, input().split()))\n    if typ == 1:\n        rows[p-1] = [x, i+1]\n    elif typ == 2:\n        cols[p-1] = [x, i+1]\n    else:\n        print('WTF?!')\n\nfor i in range(n):\n    line = []\n    for j in range(m):\n        if rows[i][1] > cols[j][1]:\n            line.append(rows[i][0])\n        else:\n            line.append(cols[j][0])\n    print(' '.join(map(str, line)))\n", "# fin = open('input.txt', 'r')\n# fout = open('output.txt', 'w')\n\nn, m, k = map(int, input().split())\n\nl = [[0, 0] for i in range(n + 1)]\nc = [[0, 0] for i in range(m + 1)]\n\nfor i in range(k):\n    dim, ind, col = map(int, input().split())\n    ind -= 1\n    if dim == 1:\n        l[ind][0] = col\n        l[ind][1] = i\n    else:\n        c[ind][0] = col\n        c[ind][1] = i\n\nfor i in range(n):\n    for j in range(m):\n        if l[i][1] > c[j][1]:\n            print(l[i][0], end=\" \")\n        elif l[i][1] < c[j][1]:\n            print(c[j][0], end=\" \")\n        else:\n            if l[i][0] != 0:\n                print(l[i][0], end=\" \")\n            else:\n                print(c[j][0], end=\" \")\n\n    print()\n", "n, m, k = [int(i) for i in input().split()]\n## n rows, m columns, k queries\n\nprintops = []\nfor i in range(k):\n    printops.append([int(i) for i in input().split()])\n\ndef pm():\n    for r in matrix:\n        for i in r:\n            print(i, end=' ')\n        print()\n\nrow_status = [True] * n\ncol_status = [True] * m\n\nmatrix = [[0]*m for i in range(n)]\nfor i in range(k):\n    j = k - i - 1\n    rc_indicator, rc, color = printops[j]\n    rc -= 1\n\n    # print()\n\n    # pm()\n\n    if rc_indicator == 1:\n        if row_status[rc]:\n            for c in range(m):\n                if col_status[c]:\n                    matrix[rc][c] = color\n            row_status[rc] = False\n    else:\n        if col_status[rc]:\n            for r in range(n):\n                if row_status[r]:\n                   matrix[r][rc] = color\n            col_status[rc] = False\n\npm()\n", "INP = lambda : list(map(int, input().split()))\nn,m,k = INP()\ninstructions = {\n}\nA = [[0 for i in range(m)] for j in range(n)]\nfor i in range(k):\n    inp = INP()\n    key = (inp[0],inp[1])\n    val = [i,inp[2]]\n    instructions[key] = val\n\nfor item in sorted(list(instructions.items()), key=lambda item: item[1][0]):\n    key = item[0]\n    val = item[1]\n    if key[0] == 1:\n        A[key[1]-1] = [val[1] for i in range(m)]\n    else:\n        for j in range(n):\n            A[j][key[1]-1] = val[1]\n\nfor row in A:\n    print(\" \".join(map(str,row)))\n", "def fill_column(num, color):\n    nonlocal canvas\n    for i in range(n):\n        canvas[i][num] = color\n\ndef fill_row(num, color):\n    nonlocal canvas\n    for i in range(m):\n        canvas[num][i] = color\n\n(n, m, k) = map(int, input().split())\ncanvas = [[0 for j in range(m)] for i in range(n)]\n(T, num, color) = (0, 0, 0)\na = []\nT1 = [-1 for i in range(n)]\nT2 = [-1 for j in range(m)]\nfor i in range(k):\n    (T, num, color) = map(int, input().split())\n    a.append((T, num - 1, color))\n    if T == 1:\n        T1[num - 1] = i\n    else:\n        T2[num - 1] = i\n\nfor i in range(k):\n    if a[i][0] == 1:\n        if T1[a[i][1]] == i:\n            fill_row(a[i][1], a[i][2])\n    else:\n        if T2[a[i][1]] == i:\n            fill_column(a[i][1], a[i][2])\n\nfor i in range(n):\n    for j in range(m):\n        print(canvas[i][j], end = ' ')\n    print()\n\n    \n    \n", "n, m, k = map(int, input().split())\ncanvas = [['0']*m for i in range(n)]\ncomands = [input().split() for i in range(k)]\ncolored_rows = set()\ncolored_columns = set()\nimportant_comands = []\nwhile comands and len(colored_rows) != n and len(colored_columns) != m:\n    comand = comands.pop()\n    if comand[0] == '1':\n        if comand[1] not in colored_rows:\n            important_comands.append(comand)\n            colored_rows.add(comand[1])\n    else:\n        if comand[1] not in colored_columns:\n            important_comands.append(comand)\n            colored_columns.add(comand[1])\nfor comand in important_comands[-1::-1]:\n    mark, number, color = comand\n    if mark == '1':\n        canvas[int(number)-1] = [color]*m\n    else:\n        for i in range(n):\n            canvas[i][int(number)-1] = color\nfor i in range(n):\n    print(\" \".join(canvas[i]))", "mx = []\nops = []\nnx=list(map(int,input().split()))\nn=nx[0]\nm=nx[1]\nk=nx[2]\nflagn=[(-1,-1,i) for i in range (0,n)]\nflagm=[(-1,-1,i) for i in range (0,m)]\nfor i in range (0,n):\n    mx.append([0]*m)\nfor i in range (0,k):\n    temp=(list(map(int,input().split())))\n    if temp[0]==1:\n        flagn[temp[1]-1]=(i,temp[2],temp[1]-1)\n    else:\n        flagm[temp[1]-1]=(i,temp[2],temp[1]-1)\nflagn.sort(key=lambda x:x[0])\nflagm.sort(key=lambda x:x[0])\npntn=0\npntm=0\nfor i in range (0,n+m):\n    if ((pntn<n)&(pntm<m)):\n        if flagn[pntn][0]<=flagm[pntm][0]:\n            if (flagn[pntn][0]!=-1):\n                for j in range (0,m):\n                    mx[flagn[pntn][2]][j]=flagn[pntn][1]\n            i+=1\n            pntn+=1\n        else:\n            if flagm[pntm][0]!=-1:\n                for j in range (0,n):\n                    mx[j][flagm[pntm][2]]=flagm[pntm][1]\n            i+=1\n            pntm+=1\n    else:\n        if (pntn<n):\n            if (flagn[pntn][0]!=-1):\n                for j in range (0,m):\n                    mx[flagn[pntn][2]][j]=flagn[pntn][1]\n            i+=1\n            pntn+=1\n        if (pntm<m):\n            if flagm[pntm][0]!=-1:\n                for j in range (0,n):\n                    mx[j][flagm[pntm][2]]=flagm[pntm][1]\n            i+=1\n            pntm+=1      \nfor i in range (0,n):\n    for j in range (0,m):\n        print (mx[i][j],end=' ')\n    print()\n", "import sys\nn, m, k = [int(x) for x in input().split()]\nlines, columns = [(0, 0, i, 1) for i in range(n)], [(0, 0, i, 2) for i in range(m)]\nfor i, line in enumerate(sys.stdin):\n    t, r, c = [int(x) for x in line.split()]\n    if t == 1:\n        lines[r-1] = (i, c, r-1, 1)\n    else:\n        columns[r-1] = (i, c, r-1, 2)\nstrings = lines + columns\nstrings.sort()\nmatrix = [[0] * m for i in range(n)]\nfor i, c, r, t in strings:\n    if t == 1:\n        matrix[r] = [c for i in range(m)]\n    else:\n        for j in range(n):\n            matrix[j][r] = c\n\nfor i in range(n):\n    sys.stdout.write(' '.join(map(str, matrix[i])) + '\\n')\n", "n, m, q = list(map(int,input().split()))\ntimeR, timeC, color = [0] * n, [0] * m, [0] * (q + 1)\n\nfor query in range(1, q + 1):\n\ttypeQ, posQ, color[query] = list(map(int, input().split()))\n\tif typeQ == 1:\n\t\ttimeR[posQ - 1] = query\n\telse:\n\t\ttimeC[posQ - 1] = query\n\nfor i in range(n):\n\tout = str()\n\tfor j in range(m):\n\t\tout += str(color[max(timeR[i], timeC[j])])\n\t\tout += \" \"\n\tprint(out)\n", "import sys\nn, m, k = [int(x) for x in input().split()]\nL, C = [(-1, 0) for i in range(n)], [(-1, 0) for i in range(m)]\nfor i, line in enumerate(sys.stdin):\n    t, r, c = [int(x) for x in line.split()]\n    if t == 1:\n        L[r-1] = (i, c)\n    else:\n        C[r-1] = (i, c)\n\nfor i in range(n):\n    sys.stdout.write(' '.join(str(L[i][1]) if L[i][0] > C[j][0] else str(C[j][1]) for j in range(m)) + '\\n')\n", "import sys\nn, m, k = [int(x) for x in input().split()]\nL, C = [(-1, 0) for i in range(n)], [(-1, 0) for i in range(m)]\nfor i, line in enumerate(sys.stdin):\n    t, r, c = [int(x) for x in line.split()]\n    if t == 1:\n        L[r-1] = (i, c)\n    else:\n        C[r-1] = (i, c)\n\nmatrix = [[max(L[i], C[j])[1] for j in range(m)] for i in range(n)]\n\nfor i in range(n):\n    sys.stdout.write(' '.join(map(str, matrix[i])) + '\\n')\n", "n,m,k=map(int,input().split())\nc=[(0,0)]*(m+1)\nr=[(0,0)]*(n+1)\nfor i in range(k):\n    q,a,b=map(int,input().split())\n    if q==1: r[a]=(i+1,b)\n    else: c[a]=(i+1,b)\nfor i in range(n):\n    s=\"\"\n    for j in range(m):\n        t=r[i+1][1]\n        if c[j+1][0]>r[i+1][0]: t=c[j+1][1]\n        s+=str(t)+' '\n    print(s)", "n,m,k=map(int,input().split())\nc=[(0,0)]*(m+1)\nr=[(0,0)]*(n+1)\nfor i in range(k):\n    q,a,b=map(int,input().split())\n    if q==1: r[a]=(i+1,b)\n    else: c[a]=(i+1,b)\nfor i in range(n):\n    s=[]\n    for j in range(m):\n        t=r[i+1][1]\n        if c[j+1][0]>r[i+1][0]: t=c[j+1][1]\n        s+=[str(t)]\n    print(' '.join(s))", "n, m, k = map(int, input().split())\nA = [0] * n\nfor i in range(n):\n    A[i] = [0,0]\nB = [0] * m\nfor i in range(m):\n    B[i] = [0,0]\nfor i in range(k):\n    per = input().split()\n    if per[0] == '1':\n        A[int(per[1])-1] = [int(per[2]), i+1]\n    else:\n        B[int(per[1])-1] = [int(per[2]), i+1]\nans = [0] * n\nfor i in range(n):\n    ans[i] = [0] * m\n\nfor i in range(n):\n    for j in range(m):\n        \n        if A[i][1] > B[j][1]:\n            ans[i][j] = A[i][0]\n        else:\n            ans[i][j] = B[j][0]\n\nfor i in ans:\n    print(' '.join(map(str,i)))", "n, m, k = list(map(int, input().split(' ')))\n\nrow, col = [(0,0)]*n, [(0,0)]*m\nfor i in range(k):\n    t, r, a = list(map(int, input().split(' ')))\n    if t == 1:\n        row[r-1] = (a, i+1)\n    elif t == 2:\n        col[r-1] = (a, i+1)\n\nsheet = [[0]*m for i in range(n)]\nfor i in range(n):\n    for j in range(m):\n        if row[i][1] >= col[j][1]:\n            sheet[i][j] = row[i][0]\n        else:\n            sheet[i][j] = col[j][0]\n    print(' '.join(map(str, sheet[i])))\n"]