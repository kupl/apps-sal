["from sys import stdin, stdout, exit\n\nmod = 998244353\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\nans = 0\n\ndef l(x):\n    if x == 0:\n        return 0\n    return 1 + l(x//10)\n\nlens = [0]*15\nfor x in a:\n    lens[l(x)] += 1\n\ndef space_out(x, l):\n    ans = []\n    for i,c in enumerate(reversed(str(x))):\n        ans.append(c)\n        if i < l:\n            ans.append(\"0\")\n    return int(''.join(reversed(ans))) \n\nfor i in range(n):\n    x = a[i]\n    cur_head = x//10\n    cur = x\n    prev = x\n    for l in range(11):\n#        print(cur, cur_head)\n        if l > 0:\n            ans += lens[l]*(cur+10*prev)#space_out(x,l)\n            ans %= mod\n        prev = cur\n        cur -= cur_head*10**(2*l+1)\n        cur += cur_head*10**(2*l+2)\n        cur_head //=10\n\n\nstdout.write(str(ans) + \"\\n\")\n", "#!/usr/bin/env python3\nimport math\nimport sys\nfrom collections import Counter\n\nMOD = 1000000007  # Facebook Hacker Cup mod\n\ndef f(a, b):\n  ret = 0\n  pow10 = 1\n  while a and b:\n    ret += (b % 10) * pow10\n    pow10 *= 10\n    b //= 10\n    ret += (a % 10) * pow10\n    pow10 *= 10\n    a //= 10\n  ret += a * pow10\n  ret += b * pow10\n  return ret\n\n\ndef ndigits(a):\n  # requires a >= 1\n  ret = 0\n  while a:\n    ret += 1\n    a //= 10\n  return ret\n\n\ndef contrib_for_digs(x, part_digs, x_is_a):\n  # x: the number\n  # part_digs: digits of partner\n  # x_is_a: true if x is a, false if x is b\n  partner = 10 ** (part_digs - 1)\n  a1, b1 = partner, x\n  a2, b2 = 2 * partner, x\n  if x_is_a:\n    a1, b1 = b1, a1\n    a2, b2 = b2, a2\n\n  # totally heinous\n  return 2 * f(a1, b1) - f(a2, b2)\n\n\ndef contrib(a, cnt):\n  ret = 0\n  for part_digs, part_cnt in list(cnt.items()):\n    ret += part_cnt * contrib_for_digs(a, part_digs, True)\n    ret += part_cnt * contrib_for_digs(a, part_digs, False)\n  return ret\n\n\ndef solve_case():\n  n = int(input())\n  a = [int(p) for p in input().split()]\n  a.sort()\n  digs = [ndigits(ai) for ai in a]\n  cnt = Counter(digs)\n  ret = 0\n  for ai in a:\n    ret += contrib(ai, cnt)\n\n  print(ret % 998244353)\n\n\nif __name__ == '__main__' and not hasattr(sys, 'ps1'):\n  solve_case()\n", "n = int(input())\n\ndef cal(X):\n    ans = 0\n    _len = len(X)\n    for i in range(_len):\n        ans += int(X[i]) * 100 ** (_len - 1 - i)\n    return ans * 11\n\nA = input().split()\ndef LOL(n):\n    if(n == ''):\n        return 0\n    else:\n        return int(n)\ncnt = [0 for i in range(11)]\nfor i in A:\n\tcnt[len(i)] += 1\n\nans = 0\nfor i in A:\n\t_len = len(i)\n\tfor j in range(1, 1+_len):\n\t\tans += cnt[j] * (2 * LOL(i[:_len - j]) * 100 ** j + cal(i[_len-j:]))\n\tfor j in range(_len+1, 11):\n\t    ans += cal(i) * cnt[j]\nprint(ans % 998244353)", "n = int(input())\nmod = 998244353\nans = 0\nai = input().split()\nlengths = [0] * 11\nfor i in range(n):\n    temp = len(ai[i])\n    lengths[temp] += 1\n\ntens = [0] * 25\nfor i in range(25):\n    tens[i] = 10 ** i\nfor i in range(n):\n    temp = len(ai[i])\n    num = 0\n    for j in range(temp,11):\n        num += lengths[j]\n        \n    for z in range(temp):\n        ans += num * tens[z*2] * int(ai[i][-z-1])\n        ans += num * tens[z*2+1] * int(ai[i][-z-1])\n        \n    for j in range(1,temp):\n        if lengths[j] != 0:\n            for z in range(j):\n                ans += lengths[j] * tens[z*2] * int(ai[i][-z-1])\n                ans += lengths[j] * tens[z*2+1] * int(ai[i][-z-1])\n            for z in range(temp-j):\n                ans += 2 * lengths[j] * tens[j*2 + z] * int(ai[i][-(z + j)-1])\n    ans %= mod\n    \nprint(ans)\n", "from collections import Counter\n\n_MODER = 998244353\n\n\n# split s\n# def split_str(s):\n#     return '0'.join(list(s)) + '0'\n\ndef solve(n, a):\n    r = 0\n    c = Counter()  # c[k]; number of elements whose length is k\n    for e in a:\n        c[len(str(e))] += 1\n\n    for e in a:\n        s = str(e)\n\n        current_len = len(s)\n        for k, v in list(c.items()):\n            # s is a\n            if k >= current_len:\n                ns = '0'.join(list(s)) + '0'\n            else:\n                ns = s[:current_len - k] + '0'.join(list(s[current_len - k:])) + '0'\n            r = (r + (int(ns) * v) % _MODER) % _MODER\n\n            # s is b\n            if k >= current_len - 1:\n                ns = '0'.join(list(s))\n            else:\n                ns = s[:current_len - k - 1] + '0'.join(list(s[current_len - k - 1:]))\n            r = (r + (int(ns) * v) % _MODER) % _MODER\n    return r\n\n\nn = int(input())\na = list(map(int, input().split()))\n\nr = solve(n, a)\nprint(r)\n", "mod = 998244353\npws = [1]\nfor i in range(1, 22):\n    pws.append(pws[i - 1] * 10)\nn = int(input())\nh = list(map(int, input().split()))\na = [[] for i in range(n)]\nfor i in range(n):\n    x = h[i]\n    while x:\n        a[i].append(x % 10)\n        x = x // 10\ncnt = [0] * 11\nfor i in range(n):\n    cnt[len(a[i])] += 1\ns = 0\nfor i in range(n):\n    for j in range(len(a[i])):\n        cur = 0\n        for k in range(1, j):\n            s = (s + a[i][j] * pws[j + k] * cnt[k]) % mod\n            cur += cnt[k]\n        s = (s + a[i][j] * pws[2 * j] * (n - cur)) % mod\n        cur = 0\n        for k in range(1, j + 1):\n            s = (s + a[i][j] * pws[j + k] * cnt[k]) % mod\n            cur += cnt[k]\n        s = (s + a[i][j] * pws[2 * j + 1] * (n - cur)) % mod\nprint(s)", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nA=list(input().split())\nmod= 998244353\n\ndef calc(a,k):\n    a0=a[-k:]\n    a1=a[:-k]\n    A1=0\n\n    if a1!=\"\":\n        A1 = int(a1)*(10**(k*2))*2\n\n    ANS=\"\"\n    for k in a0:\n        ANS+=k*2\n\n    return A1+int(ANS)\n\nL=[len(a) for a in A]\n\nfrom collections import Counter\n\nC=Counter(L)\nANS=0\n\nfor a in A:\n    #LEN_a=len(a)\n\n    for k in range(1,11):\n        x=C[k]\n        #if k==LEN_a:\n        #    x-=1\n\n        ANS=(ANS+calc(a,k)*x)%mod\n\nprint(ANS)\n\n        \n", "import math\n\nn=int(input())\n\narr=[i for i in input().split()]\n\n\nCT = [0 for i in range(40)]\nfor i in arr:\n\tCT[len(i)]+=1\n\n\nP = [0 for i in range(40)]\nM = 998244353 \nans = 0\n\nhowmanyhavelengthlesser = [0 for i in range(40)]\nhowmanyhavelengthgreater = [0 for i in range(40)]\n\nfor i in range(40):\n\tfor j in range(i):\n\t\thowmanyhavelengthlesser[i]+=CT[j]\n\tfor j in range(i+1,40):\n\t\thowmanyhavelengthgreater[i]+=CT[j]\n\n#second\n\t\t\t\nfor i in arr:\n\tcur=0\n\tfor j in range(len(i)-1,-1,-1):\n\t\tfor k in range(cur,2*cur+1):\n\t\t\tif (k!=2*cur):\n\t\t\t\tP[k]+=int(i[j])*(CT[cur-(2*cur-k)])#>something\n\t\t\telse:\n\t\t\t\t#print (i[j],k,cur,howmanyhavelengthgreater[cur]+CT[cur])\n\t\t\t\tP[k]+=int(i[j])*(howmanyhavelengthgreater[cur]+CT[cur])#>something\n\t\tcur+=1\n\t\n\t\t\n\n#first\n\t\t\t\nfor i in arr:\n\tcur=0\n\tfor j in range(len(i)-1,-1,-1):\n\t\tfor k in range(cur+1,2*cur+2):\n\t\t\tif(k==2*cur+1):P[k]+=int(i[j])*(howmanyhavelengthgreater[cur+1]+CT[cur+1])#>something\n\t\t\telse: P[k]+=int(i[j])*(CT[cur+1-(2*cur+1-k)])#>something\n\t\tcur+=1\n\t#print(P)\n\t\t\n\n\nfor i in range(30):\n\tans = (ans+P[i]*pow(10,i,M))%M;\nprint (ans)", "from collections import Counter\n\nn = int(input())\na = list(map(int, input().split()))\n\nc = Counter()\n\nfor ai in a:\n    l = len(str(ai))\n    c[l] += 1\n\nres = 0\nmod = 998244353\n\nfor ai in a:\n    s = str(ai)\n    l = len(s)\n    for key, value in c.items():\n        if key >= l:\n            eq = '0'.join(s)\n            res = (res + int(eq)*value)%mod\n            eq = '0'.join(s) + '0'\n            res = (res + int(eq) * value) % mod\n        else:\n            eq = []\n            for i in range(l-key, l):\n                eq.append(s[i]*2)\n            eq = [s[:-key]] + eq\n            eq = ''.join(eq)\n            res = (res + (int(eq) + int(s[:-key]+'0'*2*key)) * value) % mod\n\nprint(res)", "import sys\nfrom collections import deque\n\nIS_LOCAL = False\n\n\ndef read_one(dtype=int):\n    return dtype(input())\n\n\ndef read_multiple(f, dtype=int):\n    return f(list(map(dtype, input().split())))\n\n\ndef swap(x, y):\n    return y, x\n\n\ndef main():\n    n = 3\n    a = [12, 3, 45]\n\n    if not IS_LOCAL:\n        n = read_one()\n        a = read_multiple(list)\n\n    d = 998_244_353\n    s, k = 0, 1\n    tot = n\n    z = 0\n    while tot > 0:\n        zeroed = 0\n\n        for i in range(n):\n            if a[i] == 0:\n                continue\n\n            t = a[i] % 10\n            a[i] //= 10\n            if a[i] == 0:\n                zeroed += 1\n\n            s = (s + t * z * k * 2) % d\n            s = (s + t * tot * k * k * 11) % d\n\n        k *= 10\n        z += k * zeroed\n        tot -= zeroed\n\n    print(s)\n\ndef __starting_point():\n    if len(sys.argv) > 1 and sys.argv[1] == 'True':\n        IS_LOCAL = True\n    main()\n\n__starting_point()", "from collections import Counter\n\nb = 998244353\n\ndef __starting_point():\n    n = int(input())\n    arr = input().split()\n    mp = list(map(lambda x: len(x),arr))\n    cnt = Counter(mp)\n\n    s = 0\n    for a in arr:\n        l = list(reversed(a))\n        for num, ln in cnt.items():\n            l1 = int(\"\".join(list(reversed([\"%s0\" % x if i < num else x for i, x in enumerate(l)]))))\n            l2 = int(\"\".join(list(reversed([\"0%s\" % x if j < num else x for j, x in enumerate(l)]))))\n            s = (s + l1 * ln) % b\n            s = (s + l2 * ln) % b\n\n    print(s)\n__starting_point()", "n=int(input())\n\nsum=0\nline=input().split()\n\nfreq=[];\nfor i in range(0, 11):\n    freq.append(0);\nfor item in line:\n    freq[len(item)]+=1\n\ndef solve1(str, l):\n    n=len(str)\n    i=0\n    s=\"\"\n    if n>=l:\n        s=str[0:n-l]\n        i=n-l\n    for k in range(i, n):\n        s=s+str[k]+\"0\"\n    return s\n    \ndef solve2(str, l):\n    n=len(str)\n    i=0\n    s=\"\"\n    if n>=l:\n        s=str[0:n-l]\n        i=n-l\n    for k in range(i, n):\n        s=s+\"0\"+str[k]\n    return s\n  \nfor i in range(0,n):\n    for l in range(1, 11):\n        if freq[l]!=0:\n            temp1=solve1(line[i], l)\n            temp2=solve2(line[i], l)\n            sum=sum + (int(temp1)+int(temp2))*freq[l]\n            sum%=998244353\n\nprint(sum)", "modulo = 998244353\nfrom collections import Counter\n\ndef conv(x):\n    res = 0\n    for v in x:\n        res = (res * 100 + int(v)) % modulo\n    return res\n \nn = int(input())\nx = list(input().split())\nc = Counter(len(v) for v in x)\nres = 0\nfor v in x:\n    u = len(v)\n    for w, k in list(c.items()):\n        if w >= u:\n            res += k * 11 * conv(v)\n        else:\n            d = u - w\n            res += k * 11 * conv(v[d:])\n            res += k * 2 * int(v[:d]) * (10 ** (2*w))\n    res %= modulo        \nprint(res)\n", "# s = list(map(int,input().split(\" \")))\n\nn = int(input())\nmod = 998244353\nans = 0\n\narr = list(map(int,input().split(\" \")))\n\ncounti = [0]*(11);\n\nmaxi = -1\n\nfor i in range(n):\n\tval = len(str(arr[i]))\n\tcounti[val] += 1\n\tmaxi = max(maxi,val)\t\n\n\nfor i in range(n):\n\tx = arr[i]\n\n\tcurr = str(x)\n\t\n\n\tcurrl = len(curr)\n\n\tfor f in range(1,maxi+1):\n\t\tcurrc = counti[f]\n\t\treq1 = curr[0]\n\t\tif currc == 0:\n\t\t\tcontinue\n\t\tif f >= currl:\n\t\t\ttmp = 0\n\t\t\tfor j in range(1,len(curr)):\n\t\t\t\treq1 += \"0\"\n\t\t\t\treq1 += curr[j]\n\t\t\t\t\n\t\t\treq2 = req1 + \"0\"\t\n\t\telse:\n\t\t\tposl = currl - f;\n\t\t\treq1 = \"\"\n\t\t\tfor j in range(0,posl):\n\t\t\t\treq1 += curr[j];\n\n\t\t\treq2 = req1\t\n\t\t\t\n\t\t\treq1 += curr[posl]\n\t\t\t\n\t\t\tfor j in range(posl+1,len(curr)):\n\t\t\t\treq1 += \"0\"\n\t\t\t\treq1 += curr[j]\n\t\t\t\n\t\t\treq1 += \"0\"\t\n\t\t\tfor j in range(posl,len(curr)):\n\t\t\t\treq2 += \"0\"\n\t\t\t\treq2 += curr[j]\n\t\t\n\t\tv1 = int(req2)\n\t\tv2 = int(req1)\n\t\tv1 = ((v1%mod)*(currc%mod))%mod\n\t\tv2 = ((v2%mod)*(currc%mod))%mod\n\t\tans = (ans%mod + v1%mod)%mod\n\t\tans = (ans%mod + v2%mod)%mod\n\t\n\nprint(ans)\t\n\n\n\n", "# alpha = \"abcdefghijklmnopqrstuvwxyz\"\nprime = 998244353 \n# INF = 1000_000_000\n\n# from heapq import heappush, heappop\n# from collections import defaultdict\n# from math import sqrt\n# from collections import deque      \n# from math import gcd\n\nn = int(input())\n# arr = (map(int, input().split()))\narr = list( input().split())\ncount = [0 for i in range(11)]\ncount2 = [0 for i in range(11)]\nfor i in arr:\n    count[len(i)]+=1\nfor i in range(1,11):\n    count2[i] = count2[i-1] + count[i]\nans = 0\nfor i in arr:\n    place = 1\n    k = 1\n    for j in range(len(i)-1, -1, -1):\n        # tmp = ans\n        ans =  (ans + (count2[10]-count2[k-1])*place*int(i[j]) )%prime\n        ans =  (ans + (count2[10]-count2[k-1])*place*int(i[j])*10 )%prime\n        for l in range(1,k):\n            ans = (ans + 2*count[l]*pow(10,l+k-1)*int(i[j]) )%prime\n        place = place*100\n        # print(\"check\", int(i[j]), ans, ans-tmp)\n        k+=1\nprint(ans)", "def dig_cnt(n):\n\tans = 0\n\twhile n>=1:\n\t\tans += 1\n\t\tn /= 10\n\treturn ans\n\nn = int(input())\narr = [int(x) for x in input().split()]\ndig_count = [0 for _ in range(11)]\nfor i in arr:\n\tdig_count[dig_cnt(i)] += 1\n\nans = 0\nmod = 998244353\n\nfor x in range(n):\n\tgv = str(arr[x])\n\tlist_dig = []\n\tfor i in gv:\n\t\tlist_dig.append(i)\n\tlist_dig = list_dig[::-1]\n\tdigs = dig_cnt(arr[x])\n\tnum = 0\n\tfor i in gv:\n\t\tnum=num*10+int(i)\n\t\tnum=num*10+int(i)\n\tans += num*dig_count[digs]\n\tfor i in range(digs):\n\t\tif dig_count[i] == 0:\n\t\t\tcontinue\n\t\tnum1,num2 = \"\",\"\"\n\t\tzeroth = [str(0) for _ in range(i)]\n\t\tp = 0\n\t\twhile p<i:\n\t\t\tnum1 += list_dig[p]\n\t\t\tnum1 += zeroth[p]\n\t\t\tp += 1\n\t\twhile p < digs:\n\t\t\tnum1 += list_dig[p]\n\t\t\tp += 1\n\t\tp = 0\n\t\twhile p<i:\n\t\t\tnum2 += zeroth[p]\n\t\t\tnum2 += list_dig[p]\n\t\t\tp += 1\n\t\twhile p < digs:\n\t\t\tnum2 += list_dig[p]\n\t\t\tp += 1\n\t\tnum1 = num1[::-1]\n\t\tnum2 = num2[::-1]\n\t\tans += (int(num1)+int(num2))*dig_count[i]\n\n\tfor i in range(digs+1,11):\n\t\tif dig_count[i] == 0:\n\t\t\tcontinue\n\t\tnum1,num2 = \"\",\"\"\n\t\tzeroth = [str(0) for _ in range(i)]\n\t\tp = 0\n\t\twhile p<digs:\n\t\t\tnum1 += list_dig[p]\n\t\t\tnum1 += zeroth[p]\n\t\t\tp += 1\n\t\tnum1 += \"0\"\n\t\tp = 0\n\t\twhile p<digs:\n\t\t\tnum2 += zeroth[p]\n\t\t\tnum2 += list_dig[p]\n\t\t\tp += 1\n\t\tnum2 += \"0\"\n\t\tnum1 = num1[::-1]\n\t\tnum2 = num2[::-1]\n\t\tans += (int(num1)+int(num2))*dig_count[i]\n\nprint(ans%mod)", "n=int(input())\narr=list(map(str,input().split()))\ncnt=[0]*12\nfor val in arr:\n  cnt[len(val)]+=1\nacumcnt=[0]*12\nacumcnt[10]=cnt[10]\nfor i in range(9,-1,-1):\n  acumcnt[i]=acumcnt[i+1]+cnt[i]\nmod=998244353\nans=0\nmodarr=[0]*(20)\nfor i in range(20):\n  modarr[i]=((10**i)%mod)%mod\nfor s in arr:\n  for i in range(1,len(s)+1):\n    tmp=int(s[-i])\n    if i==1:\n      ans+=((acumcnt[2]+cnt[1])*tmp*modarr[1])%mod\n      ans+=((acumcnt[2]+cnt[1])*tmp*modarr[0])%mod\n    elif i==2:\n      ans+=((acumcnt[3]+cnt[2])*tmp*modarr[3])%mod\n      ans+=((acumcnt[3]+cnt[2]+2*cnt[1])*tmp*modarr[2])%mod\n    else:\n      for j in range(i,i*2):\n        if j==i*2-1:\n          ans+=((acumcnt[i+1]+cnt[i])*tmp*modarr[j])%mod\n        elif j==i*2-2:\n          ans+=((acumcnt[i+1]+cnt[i]+2*cnt[i-1])*tmp*modarr[j])%mod\n        else:\n          ans+=(2*cnt[j-i+1]*tmp*modarr[j])%mod\nprint(ans%mod)", "mod=998244353\ns=0\ninput()\nd=[0]*11\ndef get(n,l,i):\n\tif l<i: return (n,(d[i]*11*(int(n)%mod))%mod)\n\tt=((int(n)%mod)*10)%mod\n\tn=n[:-(2*i-1)]+'0'+n[-(2*i-1):]\n\treturn (n,(d[i]*(t+int(n)%mod)%mod)%mod)\nl=input().split()\nfor i in l:\n\td[len(i)]+=1\nfor i in l:\n\tn=i\n\tx=len(n)\n\tfor j in range(1,11):\n\t\tn,tmp=get(n,x,j)\n\t\ts=(s+tmp)%mod\nprint(s)", "def dig_cnt(n):\n\tans = 0\n\twhile n>=1:\n\t\tans += 1\n\t\tn /= 10\n\treturn ans\n\nn = int(input())\narr = [int(x) for x in input().split()]\ndig_count = [0 for _ in range(11)]\nfor i in arr:\n\tdig_count[dig_cnt(i)] += 1\n\nans = 0\nmod = 998244353\n\nfor x in range(n):\n\tgv = str(arr[x])\n\tlist_dig = []\n\tfor i in gv:\n\t\tlist_dig.append(i)\n\tlist_dig = list_dig[::-1]\n\tdigs = dig_cnt(arr[x])\n\tnum = 0\n\tfor i in gv:\n\t\tnum=num*10+int(i)\n\t\tnum=num*10+int(i)\n\tans += num*dig_count[digs]\n\tfor i in range(digs):\n\t\tif dig_count[i] == 0:\n\t\t\tcontinue\n\t\tnum1,num2 = \"\",\"\"\n\t\tp = 0\n\t\twhile p<i:\n\t\t\tnum1 += list_dig[p]\n\t\t\tnum1 += \"0\"\n\t\t\tp += 1\n\t\twhile p < digs:\n\t\t\tnum1 += list_dig[p]\n\t\t\tp += 1\n\t\tp = 0\n\t\twhile p<i:\n\t\t\tnum2 += \"0\"\n\t\t\tnum2 += list_dig[p]\n\t\t\tp += 1\n\t\twhile p < digs:\n\t\t\tnum2 += list_dig[p]\n\t\t\tp += 1\n\t\tnum1 = num1[::-1]\n\t\tnum2 = num2[::-1]\n\t\tans += (int(num1)+int(num2))*dig_count[i]\n\n\tfor i in range(digs+1,11):\n\t\tif dig_count[i] == 0:\n\t\t\tcontinue\n\t\tnum1,num2 = \"\",\"\"\n\t\tp = 0\n\t\twhile p<digs:\n\t\t\tnum1 += list_dig[p]\n\t\t\tnum1 += \"0\"\n\t\t\tp += 1\n\t\tnum1 += \"0\"\n\t\tp = 0\n\t\twhile p<digs:\n\t\t\tnum2 += \"0\"\n\t\t\tnum2 += list_dig[p]\n\t\t\tp += 1\n\t\tnum2 += \"0\"\n\t\tnum1 = num1[::-1]\n\t\tnum2 = num2[::-1]\n\t\tans += (int(num1)+int(num2))*dig_count[i]\n\nprint(ans%mod)", "n = int(input())\nx = input()\nx = [i for i in x.split()]\nlength = {}\nfor i in x:\n    if len(i) not in length:\n        length[len(i)] = 1\n    else:\n        length[len(i)] = length[len(i)] + 1\n \ndict = {}\nans = 0\n \nfor i in range(n):\n    l = \"\"\n    r = \"\"\n    for j in range(1,11):\n        num = x[i]\n        extra = \"\"\n        if len(num) > j:\n            extra = num[0:len(num)-j]\n        if len(num) - j >= 0:\n            l = \"0\" + num[len(num) - j] + l\n            r =  num[len(num) - j] + \"0\" + r\n        # print(num)\n        # print(\"l = \", l)\n        # print(r)\n        le = extra + l\n        re = extra + r\n        # print(\"length = \", j)    \n        # print(num)\n        # print(\"extra l = \", l)\n        # print(r)\n        if j in length:\n            ans += int(le)*length[j]\n            ans += int(re)*length[j]\n# print(ans)       \nprint(ans%998244353)", "def dig_cnt(n):\n\tans = 0\n\twhile n>=1:\n\t\tans += 1\n\t\tn /= 10\n\treturn ans\n\nn = int(input())\narr = [int(x) for x in input().split()]\ndig_count = [0 for _ in range(11)]\nfor i in arr:\n\tdig_count[dig_cnt(i)] += 1\n\nans = 0\nmod = 998244353\n\nfor x in range(n):\n\tgv = str(arr[x])\n\tlist_dig = []\n\tfor i in gv:\n\t\tlist_dig.append(i)\n\tlist_dig = list_dig[::-1]\n\tdigs = dig_cnt(arr[x])\n\tnum = 0\n\tfor i in gv:\n\t\tnum=num*10+int(i)\n\t\tnum=num*10+int(i)\n\tans += num*dig_count[digs]\n\tfor i in range(digs):\n\t\tif dig_count[i] == 0:\n\t\t\tcontinue\n\t\tnum1,num2 = \"\",\"\"\n\t\tp = 0\n\t\twhile p<i:\n\t\t\tnum1 += list_dig[p]\n\t\t\tnum1 += \"0\"\n\t\t\tp += 1\n\t\twhile p < digs:\n\t\t\tnum1 += list_dig[p]\n\t\t\tp += 1\n\t\tp = 0\n\t\twhile p<i:\n\t\t\tnum2 += \"0\"\n\t\t\tnum2 += list_dig[p]\n\t\t\tp += 1\n\t\twhile p < digs:\n\t\t\tnum2 += list_dig[p]\n\t\t\tp += 1\n\t\tnum1 = num1[::-1]\n\t\tnum2 = num2[::-1]\n\t\tans += (int(num1)+int(num2))*dig_count[i]\n\n\tfact = 0\n\tfor i in range(digs+1,11):\n\t\tfact += dig_count[i];\n\t\n\tnum1,num2 = \"\",\"\"\n\tp = 0\n\twhile p<digs:\n\t\tnum1 += list_dig[p]\n\t\tnum1 += \"0\"\n\t\tp += 1\n\tnum1 += \"0\"\n\tp = 0\n\twhile p<digs:\n\t\tnum2 += \"0\"\n\t\tnum2 += list_dig[p]\n\t\tp += 1\n\tnum2 += \"0\"\n\tnum1 = num1[::-1]\n\tnum2 = num2[::-1]\n\tans += (int(num1)+int(num2))*fact\n\nprint(ans%mod)", "from sys import stdin\n\ndef main():\n    n = int(input())\n    aa = input().split()\n    aad = [[int(ad) for ad in a] for a in aa]\n    sums = []\n    dcount = []\n    for a in aad:\n        l = len(a)\n        for i in range(l):\n            if i >= len(sums):\n                sums.append(a[-i-1])\n                dcount.append(1)\n            else:\n                sums[i] += a[-i-1]\n                dcount[i] += 1\n    digits = len(sums)\n    sums += [0] * digits\n    lencount = [dcount[n] - dcount[n+1] for n in range(digits-1)] + [dcount[-1]]\n    sums2 = [0]*(digits *2)\n    for i in range(digits):\n        sums2[i*2] = sums[i]*dcount[i]\n        sums2[i*2+1] = sums[i]*dcount[i]\n        for j in range(i):\n            sums2[i*2] += sums[i*2-j-1]*lencount[j]*2\n            sums2[i*2+1] += sums[i*2-j]*lencount[j]*2\n    res = 0\n    for i in range(len(sums2)-1, -1, -1):\n        res = (sums2[i] + res*10 ) % 998244353\n\n    print(res)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def le2(num):\n\n    s = str(num)\n    ans = ''\n    for i in s:\n        ans += i + '0'\n    ans = ans[:-1]\n    return int(ans)\n\ndef m1(num,less):\n    sn = str(num)\n    sr = ''\n    for i in range(less):\n        sr+='0'+sn[-1]\n        sn = sn[:-1]\n    sr = sn+sr[::-1]\n    return int(sr)\n\ndef m2(num,less):\n    sn = str(num)\n    sr = ''\n    for i in range(less):\n        sr+=sn[-1]+'0'\n        sn = sn[:-1]\n    sr = sn+sr[::-1]\n    return int(sr)\n\nmod = 998244353\nans = 0\nn = int(input())\nd = [[]for i in range(11)]\na = list(map(int,input().split()))\n\nfor i in a:\n    d[len(str(i))].append(i)\n\nprev = 0\nfor i in range(1,11):\n    curlen = len(d[i])\n\n    #less\n    for lessnum in d[i-1]:\n        prev = (prev + le2(lessnum)) % mod\n    ans = (ans+prev*curlen)%mod\n\n    for lessdigits in range(1,i):\n        downsum = 0\n        for curnum in d[i]:\n            downsum = (downsum+m1(curnum,lessdigits))%mod\n        ans = (ans + downsum*len(d[lessdigits]))\n\n    #equal\n    cursuml1 = 0\n\n    for enum in d[i]:\n        res = le2(enum)\n        ans = (ans + curlen * 11  * res) % mod\n        cursuml1 = (cursuml1+10*res)%mod\n\n    #more\n    for moredigits in range(i+1,11):\n        ans = (ans+cursuml1*len(d[moredigits]))%mod\n        moresum = 0\n\n        for morenum in d[moredigits]:\n            moresum = (moresum+m2(morenum,i))%mod\n        ans = (ans+moresum*curlen)%mod\n\nprint(ans)\n\n\n"]