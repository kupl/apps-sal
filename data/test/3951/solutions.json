["from fractions import gcd\nfrom random import randint, shuffle\nfrom collections import Counter\n\n\ndef read_numbers():\n    return list(map(int, input().split()))\n\n\ndef get_original_array(n, numbers):\n    cnt = Counter(numbers)\n\n    array = []\n    for new_number in sorted(numbers, reverse=True):\n        if cnt[new_number]:\n            cnt[new_number] -= 1\n            for number in array:\n                table_entry = gcd(new_number, number)\n                cnt[table_entry] -= 2\n            array.append(new_number)\n    assert cnt.most_common()[0][1] == 0\n    return array\n\n\ndef test(n):\n    print(n)\n    array = [randint(0, 10**9) for _ in range(n)]\n    table = [gcd(a, b) for a in array for b in array]\n    shuffle(table)\n    print(sorted(array) == sorted(get_original_array(n, table)))\n\ndef __starting_point():\n#    n = 4\n#    numbers = [2, 1, 2, 3, 4, 3, 2, 6, 1, 1, 2, 2, 1, 2, 3, 2]\n#    print(get_original_array(n, numbers))\n#    test(10)\n#    test(100)\n#    test(200)\n#    test(300)\n#    test(400)\n#    test(500)\n#else:\n    n = int(input())\n    numbers = read_numbers()\n    print(' '.join(map(str, get_original_array(n, numbers))))\n\n__starting_point()", "input()\ndictionary = {}\nfor element in map(int, input().split()):\n    if element not in dictionary: dictionary[element] = 1\n    else: dictionary[element] += 1\n\nanswer = []\nfor number in sorted(dictionary.keys(), reverse=True):\n    while dictionary[number] > 0:\n        answer.append(number)\n        for key in answer:\n            num = number\n            while num: key, num = num, key%num\n            dictionary[key] -= 2\n        dictionary[number] += 1\n\nprint(' '.join(map(str, answer)))", "from collections import Counter\nfrom fractions import gcd\ninput()\ng, v = Counter(map(int, input().split())), []\nwhile g:\n    x = max(g)\n    g[x] -= 1\n    for y in v:\n        g[gcd(x, y)] -= 2\n    v.append(x)\n    g += Counter()\nprint(' '.join(map(str, v)))", "def gcd(a,b):\n    while b: a,b=b,a%b\n    return a\nn=int(input())\nl=list(map(int,input().split()))\nm={}\nans=[]\nfor x in l: m[x]=m.get(x,0)+1\nfor x in sorted(m.keys())[::-1]:\n    while m[x]:\n      for y in ans: m[gcd(x,y)]-=2\n      ans+=[x]\n      m[x]-=1\nprint(' '.join(map(str,ans)))", "import fractions\n\nn = int(input())\nns = list(map(int, input().strip().split(' ')))\n\na = []\nskip = {}\nns = sorted(ns, reverse=True)\n\nfor i, num in enumerate(ns):\n    if num in skip and skip[num] > 0:\n        skip[num] -= 1\n        continue\n\n    a.append(num)\n    if len(a) == n:\n        break\n\n    for other in a:\n        gcd = fractions.gcd(other, num)\n        if not gcd in skip:\n            skip[gcd] = 0\n        skip[gcd] += 2\n\nprint(' '.join(map(str, a)))\n", "from fractions import gcd\n\nn = int(input()) \na = sorted(list(map(int, input().split())))\ncount = {}\nfor i in a:\n    count[i] = count.get(i,0) + 1 \n\nans = []\ni = n-1\nwhile(len(ans) < n):\n    top = a.pop()\n    while( count[top] < 1 ):\n        top = a.pop()\n    count[top] -= 1\n    ans.append(top)\n    for i in range(len(ans)):\n        count[gcd(ans[-1], ans[i])] -= 2\nprint(' '.join(str(x) for x in ans))", "from fractions import gcd\n\nn = int(input()) \na = sorted(list(map(int, input().split())))\ncount = {}\nfor i in a:\n    count[i] = count.get(i,0) + 1 \n\nans = []\ni = n-1\nwhile(len(ans) < n):\n    top = a.pop()\n    while( count[top] < 1 ):\n        top = a.pop()\n    count[top] -= 1\n    ans.append(top)\n    for i in range(len(ans)):\n        count[gcd(ans[-1], ans[i])] -= 2\nprint(' '.join(str(x) for x in ans))\n", "def main():\n    from collections import Counter\n    from math import gcd, sqrt\n    n = int(input())\n    cnt = Counter(list(map(int, input().split())))\n    kk = sorted(list(cnt.keys()), reverse=True)\n    res = []\n    for k in kk:\n        c = Counter()\n        for k0, v0 in res:\n            q = gcd(k, k0)\n            c[q] += v0\n        b = c[k]\n        del c[k]\n        v = int(sqrt(b * b + cnt[k])) - b\n        res.append((k, v))\n        for k0, v0 in list(c.items()):\n            cnt[k0] -= v0 * v * 2\n    print(*sorted((k for k, v in res for _ in range(v))))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    from collections import Counter\n    from math import gcd, sqrt\n    input()\n    cnt = Counter(list(map(int, input().split())))\n    kk, res = sorted(list(cnt.keys()), reverse=True), []\n    for k in kk:\n        if cnt[k]:\n            c = Counter()\n            for k0, v0 in res:\n                q = gcd(k, k0)\n                c[q] += v0\n            b = c[k]\n            v = int(sqrt(b * b + cnt[k])) - b\n            res.append((k, v))\n            for k0, v0 in list(c.items()):\n                cnt[k0] -= v0 * v * 2\n    print(*sorted((k for k, v in res for _ in range(v))))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter\nfrom fractions import gcd\ninput()\ng, v = Counter(map(int, input().split())), []\nwhile g:\n    x = max(g)\n    g[x] -= 1\n    for y in v:\n        g[gcd(x, y)] -= 2\n    v.append(x)\n    g += Counter()\nprint(' '.join(map(str, v)))", "from collections import Counter\nfrom fractions import gcd\ninput()\ng, v = Counter(list(map(int, input().split()))), []\nwhile g:\n    x = max(g)\n    g[x] -= 1\n    for y in v:\n        g[gcd(x, y)] -= 2\n    v.append(x)\n    g += Counter()\nprint(' '.join(map(str, v)))\n", "from collections import Counter\nfrom fractions import gcd\ninput()\ng, v = Counter(list(map(int, input().split()))), []\nwhile g:\n    x = max(g)\n    g[x] -= 1\n    for y in v:\n        g[gcd(x, y)] -= 2\n    v.append(x)\n    g += Counter()\nprint(' '.join(map(str, v)))\n", "from collections import Counter\nfrom fractions import gcd\ninput()\ng, v = Counter(list(map(int, input().split()))), []\nwhile g:\n    x = max(g)\n    g[x] -= 1\n    for y in v:\n        g[gcd(x, y)] -= 2\n    v.append(x)\n    g += Counter()\nprint(' '.join(map(str, v)))\n", "from collections import Counter\nfrom fractions import gcd\ninput()\ng, v = Counter(list(map(int, input().split()))), []\nwhile g:\n    x = max(g)\n    g[x] -= 1\n    for y in v:\n        g[gcd(x, y)] -= 2\n    v.append(x)\n    g += Counter()\nprint(' '.join(map(str, v)))\n", "from collections import Counter\nfrom fractions import gcd\ninput()\ng, v = Counter(list(map(int, input().split()))), []\nwhile g:\n    x = max(g)\n    g[x] -= 1\n    for y in v:\n        g[gcd(x, y)] -= 2\n    v.append(x)\n    g += Counter()\nprint(' '.join(map(str, v)))\n", "from collections import Counter\nfrom fractions import gcd\ninput()\ng, v = Counter(list(map(int, input().split()))), []\nwhile g:\n    x = max(g)\n    g[x] -= 1\n    for y in v:\n        g[gcd(x, y)] -= 2\n    v.append(x)\n    g += Counter()\nprint(' '.join(map(str, v)))\n", "from collections import Counter\nfrom fractions import gcd\ninput()\ng, v = Counter(list(map(int, input().split()))), []\nwhile g:\n    x = max(g)\n    g[x] -= 1\n    for y in v:\n        g[gcd(x, y)] -= 2\n    v.append(x)\n    g += Counter()\nprint(' '.join(map(str, v)))\n", "from collections import Counter\nfrom fractions import gcd\ninput()\ng, v = Counter(list(map(int, input().split()))), []\nwhile g:\n    x = max(g)\n    g[x] -= 1\n    for y in v:\n        g[gcd(x, y)] -= 2\n    v.append(x)\n    g += Counter()\nprint(' '.join(map(str, v)))\n", "from collections import Counter\nfrom fractions import gcd\ninput()\ng, v = Counter(list(map(int, input().split()))), []\nwhile g:\n    x = max(g)\n    g[x] -= 1\n    for y in v:\n        g[gcd(x, y)] -= 2\n    v.append(x)\n    g += Counter()\nprint(' '.join(map(str, v)))\n\n\n\n\n# Made By Mostafa_Khaled\n", "from collections import Counter\nfrom fractions import gcd\ninput()\ng, v = Counter(map(int, input().split())), []\nwhile g:\n    x = max(g)\n    g[x] -= 1\n    for y in v:\n        g[gcd(x, y)] -= 2\n    v.append(x)\n    g += Counter()\nprint(' '.join(map(str, v)))", "from math import gcd\nn=int(input())\nl=list(map(int,input().split()))\nd={}\nfor x in l :\n    d[x]=d.get(x,0)+1\nd={x:d[x]for x in sorted(d,key=lambda w:-w)}\nout=[]\nfor x in d :\n    while d[x] :\n        for y in out :\n            d[gcd(y,x)]-=2\n        out+=[x]\n        d[x]-=1\nprint(*out)\n    \n    \n", "def gcd(a,b):\n    if b==0: return a \n    return gcd(b,a%b)\nn=int(input())\nfrom collections import Counter \nl=[int(i) for i in input().split()]\ng=Counter(l)\nans=[]\n\nwhile g:\n    m=max(g)\n    g[m]-=1 \n    for i in ans:\n        g[gcd(m,i)]-=2 \n    ans+=[m]\n    g+=Counter()\nprint(*ans)\n", "n = int(input())\na = sorted(map(int, input().split()), reverse=True)\n\nm = [[-1] * n for _ in range(n)]\nans = [-1] * n\n\nfrom math import gcd\nfrom bisect import bisect_left\nfrom collections import Counter\n\nc = Counter(a)\ni = 0\nj = n - 1\n\nfor i in range(n * n):\n\tif c[a[i]] == 0:\n\t\tcontinue\n\n\tans[j] = m[j][j] = a[i]\n\n\tc[a[i]] -= 1\n\n\tfor k in range(j + 1, n):\n\t\tm[j][k] = m[k][j] = gcd(ans[j], ans[k])\n\t\tc[m[j][k]] -= 1\n\t\tc[m[k][j]] -= 1\n\n\tj -= 1\n\n\nprint(*ans)", "\"\"\"\nAuthor    : co_devil Chirag Garg\nInstitute : JIIT\n\"\"\"\n\n\nimport itertools, os, sys, threading\nfrom collections import deque, Counter, OrderedDict, defaultdict\nimport heapq\nfrom math import ceil,floor,log,sqrt,factorial,pow,pi,gcd\n# from bisect import bisect_left,bisect_right\n# from decimal import *,threading\n\"\"\"from io import BytesIO, IOBase\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    from builtins import str as __str__\n    str = lambda x=b'': x if type(x) is bytes else __str__(x).encode()\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._buffer = BytesIO()\n        self._fd = file.fileno()\n        self._writable = 'x' in file.mode or 'r' not in file.mode\n        self.write = self._buffer.write if self._writable else None\n\n    def read(self):\n        return self._buffer.read() if self._buffer.tell() else os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b, ptr = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE)), self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n            self.newlines += b.count(b'\\n') + (not b)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n    def flush(self):\n        if self._writable:\n            os.write(self._fd, self._buffer.getvalue())\n            self._buffer.truncate(0), self._buffer.seek(0)\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(b'\\r\\n')\n\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop('sep', b' '), kwargs.pop('file', sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop('end', b'\\n'))\n    if kwargs.pop('flush', False):\n        file.flush()\n\n\"\"\"\n\n\ndef ii(): return int(input())\ndef si(): return str(input())\ndef mi(): return list(map(int,input().split()))\ndef li(): return list(mi())\n\n\nabc = 'abcdefghijklmnopqrstuvwxyz'\nabd = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12,\n       'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24,\n       'z': 25}\nmod = 1000000007\ndx, dy = [-1, 1, 0, 0], [0, 0, 1, -1]\ndef getKey(item): return item[0]\ndef sort2(l): return sorted(l, key=getKey)\ndef d2(n, m, num): return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo(x): return (x and (not (x & (x - 1))))\ndef decimalToBinary(n): return bin(n).replace(\"0b\", \"\")\ndef ntl(n): return [int(i) for i in str(n)]\ndef powerMod(x, y, p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n# For getting input from input.txt file\n# sys.stdin = open('input.txt', 'r')\n\n# Printing the Output to output.txt file\n# sys.stdout = open('output.txt', 'w')\n\ngraph = defaultdict(list)\nvisited = [0] * 1000000\ncol = [-1] * 1000000\ndef dfs(v, c):\n    if visited[v]:\n        if col[v] != c:\n            print('-1')\n            return\n        return\n    col[v] = c\n    visited[v] = 1\n    for i in graph[v]:\n        dfs(i, c ^ 1)\n\ndef bfs(d,v):\n    q=[]\n    q.append(v)\n    visited[v]=1\n    while len(q)!=0:\n        x=q[0]\n        q.pop(0)\n        for i in d[x]:\n            if visited[i]!=1:\n                visited[i]=1\n                q.append(i)\n        print(x)\n    print(l)\n\ndef make_graph(e):\n    d={}\n    for i in range(e):\n        x,y=mi()\n        if x not in list(d.keys()):\n            d[x]=[y]\n        else:\n            d[x].append(y)\n        if y not in list(d.keys()):\n            d[y] = [x]\n        else:\n            d[y].append(x)\n    return d\ndef gr2(n):\n    d={}\n    for i in range(n):\n        x,y=mi()\n        if x not in list(d.keys()):\n            d[x]=[y]\n        else:\n            d[x].append(y)\n    return d\n\ndef connected_components(graph):\n    seen = set()\n    def dfs(v):\n        vs = set([v])\n        component=[]\n        while vs:\n            v = vs.pop()\n            seen.add(v)\n            vs |= set(graph[v]) - seen\n            component.append(v)\n        return component\n    ans=[]\n    for v in graph:\n        if v not in seen:\n            d=dfs(v)\n            ans.append(d)\n    return ans\n\n\nii()\ng, v = Counter(mi()), []\nwhile g:\n    x = max(g)\n    g[x] -= 1\n    for y in v:\n        g[gcd(x, y)] -= 2\n    v.append(x)\n    g += Counter()\nprint(' '.join(map(str, v)))\n\n"]