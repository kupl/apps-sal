["n=int(input())\nmagic=int((n-1)/2)\nx = []\nfor t in range(magic, -1, -1):\n    x.append(t*'*'+'D'*(n-2*t)+t*'*')\nfor u in range(1, magic+1):\n    x.append(u*'*'+'D'*(n-2*u)+u*'*')\n\nno = 1\nne = 2\nfor i in range(n):\n    for j in range(n):\n        if (x[i][j] == 'D'):\n            print(no, end = ' ')\n            no += 2\n        else:\n            print(ne, end = ' ')\n            ne += 2\n    print()\n", "n = int(input())\na = [[0] * n for _ in range(n)]\n\ndef od(i, j):\n    k = min(i + 1, n - i)\n    return abs(j - n // 2) < k\n\nu, v = 0, 0\nfor i in range(n):\n    for j in range(n):\n        if od(i, j):\n            u += 1\n            a[i][j] = u * 2 - 1\n        else:\n            v += 1\n            a[i][j] = v * 2\n\nprint('\\n'.join([' '.join(map(str, x)) for x in a]))\n", "n=int(input())\no=1\ne=2\nimport sys\nfor i in range(n):\n    for j in range(n):\n        if abs(i-n//2)+abs(j-n//2)<=n//2:\n            sys.stdout.write(str(o))\n            o+=2\n        else:\n            sys.stdout.write(str(e))\n            e+=2\n        sys.stdout.write(' ')\n    sys.stdout.write('\\n')", "N = int(input())\nevens = [n for n in range(1, N * N + 1) if n % 2 == 0]\nodds = [n for n in range(1, N * N + 1) if n % 2 != 0]\ns = 0\nt = 0\nfor i in range(N):\n    n_even = max(N // 2 - i, i - N // 2)\n    n_odd = N - n_even * 2\n    res = []\n    for ne in range(n_even):\n        res.append(evens[s])\n        s += 1\n    for no in range(n_odd):\n        res.append(odds[t])\n        t += 1\n    for ne in range(n_even):\n        res.append(evens[s])\n        s += 1\n    print(\" \".join(map(str, res)))\n", "n = int(input())\nc = n // 2\nm = []\no = 1\ne = 2\nfor i in range(n):\n    row = []\n    for j in range(n):\n        if abs(i - c) + abs(j - c) <= c:\n            row.append(str(o))\n            o += 2\n        else:\n            row.append(str(e))\n            e += 2\n    m.append(row)\nfor row in m:\n    print(\" \".join(row))\n", "'''\nFind an n\u2009\u00d7\u2009n matrix with different numbers from 1 to n^2, \nso the sum in each row, column and both main diagonals are odd.\n\nInput\n\nThe only line contains odd integer n (1\u2009\u2264\u2009n\u2009\u2264\u200949).\n\nOutput\n\nPrint n lines with n integers. All the integers should \nbe different and from 1 to n2. The sum in each row, \ncolumn and both main diagonals should be odd.\n'''\n\nimport io\nimport sys\nimport time\nimport random\n#~ start = time.clock()\n#~ test ='''5\n#~ '''\n\n#~ sys.stdin = io.StringIO(test)\n\nn = int(input())\nk = n//2\n# input is 2k+1\n\nm = [ [1 for j in range(n)] for i in range(n) ]\nfor i in range(1,k+1):\n   for j in range(1,k+2-i):\n      m[i-1][j-1] = 0\n      m[n-i][j-1] = 0\n      m[i-1][n-j] = 0\n      m[n-i][n-j] = 0\n\neven_index = 1\nodd_index = 1\nfor i in range(n):\n   for j in range(n):\n      if m[i][j]==0: # get next even number\n         m[i][j] = even_index*2\n         even_index += 1\n      else:\n         m[i][j] = odd_index*2-1\n         odd_index += 1\n         \nfor i in range(n):\n   for j in range(n):\n      print(m[i][j],end=' ')\n   print()\n         \n#~ dur = time.clock()-start\n#~ print(\"Time:\",dur)\n", "n = int(input())\nm = n ** 2\nch = []\nnech = []\nfor i in range(1, m + 1):\n    if i % 2 == 0:\n        ch += [i]\n    else:\n        nech += [i]\nline = []  \nfor i in range(n):\n    line += [[]]\nfor i in range(n):\n    for j in range(n):\n        if i < n // 2:\n            if j < n // 2 - i or j > n//2 + i:\n                line[i] += [ch[-1]]\n                ch.pop()\n            else:\n                line[i] += [nech[-1]]\n                nech.pop()\n        elif i == n // 2:\n            line[i] += [nech[-1]]\n            nech.pop()\n        else:\n            i1 = n - i - 1\n            if j < n // 2 - i1 or j > n//2 + i1:\n                line[i] += [ch[-1]]\n                ch.pop()\n            else:\n                line[i] += [nech[-1]]\n                nech.pop()         \nfor i in range(n):\n    print(\" \".join(map(str, line[i])))\n", "n = int(input())\n\nodds = [[False] * n for _ in range(n)]\nnumbers = [[None] * n for _ in range(n)]\n\n\nfor i in range(n//2):\n\tfor j in range(n):\n\t\tmid = n // 2\n\t\tif mid-i <= j <= mid+i:\n\t\t\todds[i][j] = True\n\nodds[n//2] = [True] * n\n\nfor i in range(n//2+1, n):\n\tfor j in range(n):\n\t\tmid = n // 2\n\t\tdist = n - i - 1\n\t\tif mid-dist <= j <= mid+dist:\n\t\t\todds[i][j] = True\n\n\n\n# Fill the table\nodd, even = 1, 2\nfor i in range(n):\n\tfor j in range(n):\n\t\tif odds[i][j]:\n\t\t\tnumbers[i][j] = odd\n\t\t\todd += 2\n\t\telse:\n\t\t\tnumbers[i][j] = even\n\t\t\teven += 2\n\nprint('\\n'.join(' '.join(map(str, row)) for row in numbers))\n", "n = int(input()) #always odd\n#takes the shape of an expanding cross\nevenNums = list(range(2, n**2+1, 2))\noddNums = list(range(1, n**2+1, 2))\nfor i in range(n):\n    outList = []\n    if i > n//2:\n        oddNumIndeces = (list(range(n//2+i-n+1,n//2-(i-n))))\n    else:\n        oddNumIndeces = list(range(n//2-i,n//2+i+1))   \n    for j in range(n):\n        \n        \n            \n        if j not in oddNumIndeces:\n            outList.append(str(evenNums[0]))\n            evenNums.pop(0)\n        else:\n            outList.append(str(oddNums[0]))\n            oddNums.pop(0)\n        \n    print(\" \".join(outList))", "n=int(input())\na=2\nb=1\nfor i in range(n):\n\tfor j in range(n):\n\t\tif j>=i and j!=n//2 and j<=n-1-i:\n\t\t\tprint(a,end=' ')\n\t\t\ta=a+2\n\t\t\n\t\telif j>=n-1-i and j!=n//2 and j<=i:\n\t\t\tprint(a,end=' ')\n\t\t\ta=a+2\n\t\telse:\n\t\t\tprint(b,end=' ')\n\t\t\tb=b+2\n\tprint()\n", "#!/usr/bin/env\tpython\n#-*-coding:utf-8 -*-\nn=int(input())\ni=j=n>>1\na=1\nb=2\nfor _ in range(n):\n\tfor y in range(n):\n\t\tif min(i,j)<=y<=max(i,j):\n\t\t\tc=a\n\t\t\ta+=2\n\t\telse:\n\t\t\tc=b\n\t\t\tb+=2\n\t\tprint(c,end=' 'if n-1>y else'\\n')\n\ti-=1\n\tj+=1\n\tif 0>i:i,j=n-2,1\n"]