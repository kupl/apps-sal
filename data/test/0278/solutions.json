["import sys\n\nn = int(input())\np = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\nans = 0\nnum_cycles = 0\nchecked = set()\n\nfor i in range(n):\n    if i in checked:\n        continue\n\n    checked.add(i)\n\n    nxt = p[i] - 1\n\n    while nxt != i:\n        checked.add(nxt)\n        nxt = p[nxt] - 1\n\n    num_cycles += 1\n\nans += num_cycles if num_cycles != 1 else 0\nans += (sum(b) % 2) == 0\n\nprint(ans)", "n = int(input())\np = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nans = 0\nvisited = [False for i in range(n)]\nfor i in range(n):\n    if visited[i]:\n        continue\n    ans += 1\n    while not visited[i]:\n        visited[i] = True\n        i = p[i] - 1\nif ans == 1:\n    ans = 0\nans += (sum(b) + 1) % 2\nprint(ans)\n", "read = lambda: list(map(int, input().split()))\n\nn = int(input())\n\np = list(read())\n\nb = list(read())\n\nans = (b.count(1) + 1) % 2\n\nwas = [0] * n\n\ncnt = 0\n\nfor i in range(n):\n\n    if not was[i]:\n\n        cnt += 1\n\n        v = i\n\n        while not was[v]:\n\n            was[v] = 1\n\n            v = p[v] - 1\n\nif cnt > 1: ans += cnt\n\nprint(ans)\n\n\n\n# Made By Mostafa_Khaled\n", "import sys\n \nn = int(input())\np = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n \nans = 0\nnum_cycles = 0\nchecked = set()\n \nfor i in range(n):\n    if i in checked:\n        continue\n \n    checked.add(i)\n \n    nxt = p[i] - 1\n \n    while nxt != i:\n        checked.add(nxt)\n        nxt = p[nxt] - 1\n \n    num_cycles += 1\n \nans += num_cycles if num_cycles != 1 else 0\nans += (sum(b) % 2) == 0\n \nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\nclass Unionfind:\n    def __init__(self, n):\n        self.par = [-1]*n\n        self.rank = [1]*n\n    \n    def root(self, x):\n        p = x\n        \n        while not self.par[p]<0:\n            p = self.par[p]\n        \n        while x!=p:\n            tmp = x\n            x = self.par[x]\n            self.par[tmp] = p\n        \n        return p\n    \n    def unite(self, x, y):\n        rx, ry = self.root(x), self.root(y)\n        \n        if rx==ry: return False\n        \n        if self.rank[rx]<self.rank[ry]:\n            rx, ry = ry, rx\n        \n        self.par[rx] += self.par[ry]\n        self.par[ry] = rx\n    \n        if self.rank[rx]==self.rank[ry]:\n            self.rank[rx] += 1\n    \n    def is_same(self, x, y):\n        return self.root(x)==self.root(y)\n    \n    def count(self, x):\n        return -self.par[self.root(x)]\n\nn = int(input())\np = list(map(int, input().split()))\nb = list(map(int, input().split()))\nuf = Unionfind(n)\n\nfor i in range(n):\n    uf.unite(i, p[i]-1)\n\nrs = set(uf.root(i) for i in range(n))\n\nif len(rs)==1:\n    ans = 0\nelse:\n    ans = len(rs)\n\nif b.count(1)%2==0:\n    ans += 1\n\nprint(ans)", "n = int(input())\np = [int(i) for i in input().split()]\nzeros = [int(i) for i in input().split()]\n\nans = 0\n\nif not sum(zeros) % 2:\n    ans += 1\n\nvisited = [False for i in range(n)]\n\nciclos = 0\nfor i in range(n):\n    if not visited[i]:\n        ciclos += 1\n    j = i\n    while not visited[j]:\n        visited[j] = True\n        j = p[j] - 1\n\nif ciclos == 1:\n    ans += 0\nelse:\n    ans += ciclos\n\nprint(ans)\n"]