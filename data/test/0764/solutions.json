["from collections import deque\nimport math\n\nnum = int(input())\nx = tuple(map(int, list(input())))\n\n#if x == \"0\"*num: print(num); return\n\ninteger = 0\n\ndic = dict()\n\nfor i in range(1,num+1):\n    a = math.gcd(i,num)\n    if a in dic:\n        integer += dic[a]\n    else:\n        lijst = [0]*a\n        \n        for j in range(num):\n            b = j%a\n            lijst[b] += x[j]\n\n        for k in range(a):\n            if lijst[k]%2 != 0:\n                dic[a] = 0\n                break\n        else:\n            integer += 1\n            dic[a] = 1\nprint(integer)", "import math\n\nnum = int(input())\nx = tuple(map(int, list(input())))\n\ninteger = 0\n\ndic = dict()\n\nfor i in range(1,num+1):\n    a = math.gcd(i,num)\n    if a in dic:\n        integer += dic[a]\n    else:\n        lijst = [0]*a\n        \n        for j in range(num):\n            b = j%a\n            lijst[b] += x[j]\n\n        for k in range(a):\n            if lijst[k]%2 != 0:\n                dic[a] = 0\n                break\n        else:\n            integer += 1\n            dic[a] = 1\nprint(integer)", "import sys\nimport math\n\nn = int(sys.stdin.readline().strip())\ns = sys.stdin.readline().strip()\n\na = [1] * n\nfor c in s:\n\tif c != '0':\n\t\ta[0] = 0\n\nfor k in range(1, n):\n\tif n % k == 0:\n\t\tt = [0] * k\n\t\tfor i, c in enumerate(s):\n\t\t\tif c != '0':\n\t\t\t\tt[i % k] += 1\n\t\tif sum([_ % 2 for _ in t]) != 0:\n\t\t\ta[k] = 0\n\telse:\n\t\ta[k] = a[math.gcd(n, k)]\n\nsys.stdout.write('{0}\\n'.format(sum(a)))\n", "from math import gcd\n\ndef canHash(n, ln):\n    if n == '0'*ln:\n        return ln\n    ans = 0\n    yes = []\n    for i in range(1, ln):\n        if ln%i == 0:\n            token = 1\n            for k in range(i):\n                a = sum([int(b) for b in n[k::i]])\n                if a%2 != 0:\n                    token = 0\n            if token == 1:\n                yes.append(i)\n                ans += 1\n        else:\n            if gcd(ln, i) in yes:\n                ans += 1\n    return ans\n\n\ndef __starting_point():\n    ln = int(input())\n    print(canHash(input(), ln))\n__starting_point()"]