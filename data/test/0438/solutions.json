["n = int(input())\nans = []\nnxt = 1\nwhile n > 0:\n  x = nxt\n  n -= nxt\n  nxt += 1\n  if n < nxt:\n    x += n\n    n = 0\n  ans.append(str(x))\nprint(len(ans))\nprint(\" \".join(ans))\n", "n = int(input())\ncur = 1\nans = []\nwhile n > cur:\n    n -= cur\n    ans.append(cur)\n    cur += 1\nif n < cur:\n    ans[-1] += n\nelse:\n    ans.append(n)\nprint(len(ans))\nprint(*ans)\n", "n = int(input().strip())\nk = int(((8 * n + 1) ** 0.5 - 1) // 2)\ns = \"\"\n\na = []\nfor i in range(k - 1):\n    s += str(i + 1) + \" \"\ns += str(n - (k * (k - 1)) // 2)\n\nprint(k)\nprint(s)\n", "n = int(input())\nans = 0\nL = []\ni = 1\nwhile i <= n:\n    ans += 1\n    L.append(i)\n    n -= i\n    i += 1\nL[-1] += n\nprint(ans)\nprint(*L)", "n = int(input())\nx = n\ni = 1\nwhile n >= i:\n    n -= i\n    i += 1\nprint(i-1)\nfor j in range(1,i):\n    if j == i-1:\n        print(x)\n        break\n    else:\n        print(j,end= ' ')\n        x -= j", "q=int(input())\na=[1]\nq-=1\nl=1\nwhile q>a[l-1]:\n    q-=l+1\n    a.append(l+1)\n    l+=1\na[l-1]+=q\nprint(len(a))\nfor i in a:\n    print(i,end=' ')\n", "n = int(input()) - 1\nans = [1]\nwhile n > ans[-1]:\n    n -= ans[-1] + 1\n    ans.append(ans[-1] + 1)\nans[-1] += n\nprint(len(ans))\nprint(*ans)", "n = int(input())\narr = []\non = 1\nwhile n>2*on:\n  n-=on\n  arr.append(on)\n  on+=1\narr.append(n)\nprint(len(arr))\nprint(' '.join(map(str,arr)))", "n = int(input())\nk = int(-0.4999999 + (0.25 + 2*n)**0.5)\nprint(k)\nfor i in range(1,k):\n    print(i, end = \" \")\nprint(n - k*(k-1)//2)    ", "n = int(input())\ncur = 1\nwhile(n>=cur):\n    n-=cur\n    cur+=1\nprint(cur-1)\nfor i in range(1,cur-1):\n    print(i,end=' ')\nprint(cur-1+n)\n\n", "#!/usr/bin/env python3\n\ndef main():\n    try:\n        while True:\n            t = n = int(input())\n            result = 0\n            i = 1\n            while n >= i:\n                n -= i\n                i += 1\n                result += 1\n            print(result)\n            for i in range(1, result):\n                print(i, end=' ')\n            print(t - sum(range(result)))\n\n    except EOFError:\n        pass\n\nmain()\n", "n = int(input())\nk = 0\nsize = n\nfor i in range(1,size+1):\n\tn -= i\n\tk += 1\n\tif n<=i: break\n\nprint(k)\nL = size\nfor i in range(1,L+1):\n\tif size-i<=i:\n\t\tprint(size)\n\t\tbreak\n\tprint(i, end=\" \")\n\tsize -= i\n\t\n", "n = int(input())\nk = 1\nwhile k * (k + 1) // 2 <= n:\n    k += 1\nk -= 1\nprint(k)\nfor i in range(1, k):\n    print(i, end=' ')\nprint(n - k * (k - 1) // 2)\n", "from math import *\ndef Main(n):\n    sm = 0\n    A = []\n    for i in range(1,n + 1):\n        sm += i\n        A.append(i)\n        if(sum(A) == n):\n            break\n        elif(sum(A) > n):\n            break\n    # print(A)\n    rez = abs(n - sum(A))\n\n    if rez in A:\n        value_index = A.index(rez)\n        A.pop(value_index)\n\n    print(len(A))\n    print(*A)\n\n\n    # print(int(sqrt(n)))\n    # if n%2 == 1:\n    #     res = n//2\n    #     print(res, end = \" \")\n    #     for i in range(res - 1, 1, -1):\n    #         print(i, end = ' ')\n    #     print()\n\ndef __starting_point():\n    n = int(input())\n    Main(n)\n__starting_point()", "candies = int(input())\n\ndef printCandies(touse):\n    print(len(result))\n    resultS = \"\"\n    for child in touse:\n        resultS += str(child) + \" \"\n    print(resultS)\n\nif candies >= 1 and candies <= 1000:\n    result = []\n    for i in range(1, candies + 1):\n        result.append(i)\n        if sum([int(i) for i in result]) > candies:\n            result = result[0:-1]\n            break\n    sumN = sum(result)\n    if sumN == candies:\n        printCandies(result)\n    else:\n        remain = candies - sum(result)\n\n        for i in range(remain, 0, -1):\n            result[-1 - (i-1)] += 1\n        \n        printCandies(result)\n        \n", "max = -float('inf')\ncur = []\n\ndef candies(n, arr):\n\tnonlocal cur, max\n\tif sum(arr) == n:\n\t\tif len(arr) > max or (len(arr) == max and sum(arr) > sum(cur)):\n\t\t\tmax = len(arr)\t\n\t\t\tcur = arr[:]\t\t\t\t\n\t\treturn 0 \n\n\tif sum(arr) > n:\n\t\tarr.pop()\n\t\tif len(arr) > max or (len(arr) == max and sum(arr) > sum(cur)):\t\t\n\t\t\tmax = len(arr)\n\t\t\tcur = arr[:]\t\t\t\t\n\t\treturn 0\n\n\tfor i in range(1, n+1):\n\t\tif i not in arr:\n\t\t\tarr.append(i)\t\t\t\n\t\t\tif candies(n, arr) == 0:\t\n\t\t\t\tbreak\n\t\t\tif i in arr: arr.remove(i);\n\t#print(cur)\n\treturn 1\n\t\t\n\nn = int(input())\n\n\ncandies(n, [])\nprint(max)\nfor each in cur:\n\tprint(each, end=\" \") \n\n", "n = int(input())\nans = list()\ni = 1\nwhile 1:\n\tif n < i :\n\t\tbreak\n\tn-=i \n\tans.append(i)\n\ti +=1\nans[len(ans)-1] += n\nprint(len(ans))\nfor i in ans :\n\tprint(i,end=' ')\n", "n = int(input())\na = [0]\n\nwhile n > 2*(a[-1]+1):\n\tn -= a[-1]+1\n\ta.append(a[-1]+1)\n\nif n != 0:\n\ta.append(n)\n\na.remove(0)\n\nprint(len(a))\nprint(*a)", "N = int(input())\nM = 0\nwhile (M + 1) * (M + 2) / 2 <= N :\n\tM += 1\nprint(M)\nfor i in range(1, M) :\n\tprint(i, end = ' ')\n\tN -= i\nprint(N)\t\n", "n=int(input())\ns=''\ni=0\nwhile True:\n    i+=1\n    n-=i\n    if n>i:\n        s+=str(i)+' '\n    else:\n        s+=str(n+i)\n        break\nprint(i)\nprint(s)", "n = int(input())\nk = 1\nwhile k * (k + 1) // 2 <= n:\n    k += 1\nk -= 1\nprint(k)\nfor i in range(1, k):\n    print(i, end=' ')\nprint(n - k * (k - 1) // 2)", "n=int(input())\nif n==1:\n    print(1)\n    print(1)\nelif n==2:\n    print(1)\n    print(2)\nelse:\n    t=[]\n    i=1\n    while i<=n:\n        n-=i\n        t.append(i)\n        i+=1\n    k=len(t)\n    t[k-1]+=n\n    print(k)\n    for i in t:\n        print(i,end=\" \")", "#not submitted not completed\n#http://codeforces.com/problemset/problem/753/A\nn = int(input())\nsum = 0\nnumbers = []\ni = 1\nwhile sum < n:\n\tnumbers.append(i)\n\tsum += i\n\ti += 1\nif sum > n:\n\tdel numbers[sum - n - 1]\nprint(len(numbers))\nfor j in numbers:\n\tprint(j, end=\" \")\nprint()", "n = int(input())\nc=1\nsol = []\nwhile n>c:\n    n = n-c\n    sol.append(c)\n    c=c+1\nif n >= c:\n    sol.append(n)\nelse:\n    sol[-1] += n\nprint(len(sol))\nprint(*sol)\n"]