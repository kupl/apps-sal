["n, k = map(int, input().split())\ns = input()\nl, r = int(-1), int(n)\n\nwhile r - l > 1:\n    m = (l+r)//2\n    c, p = 1, 0\n    cond = True\n    while p < n and c < k:\n        i = p + m + 1\n        while i >= p and (i >= n or s[i] == '1'):\n            i = i - 1;\n        if (i == p):\n            break\n        c = c + 1\n        p = i\n    cond = cond and (p == n-1)\n    if cond:\n        r = m\n    else:\n        l = m\nprint(int(r))", "def check(p):\n    cur = k - 2\n    p+=1\n    lastfree = 0\n    lasteat = 0\n    for i in range(1, n-1):\n        if tm[i] == '0':\n            lastfree = i\n        if i - lasteat >= p:\n            if lasteat == lastfree or cur <= 0:\n                return False\n            lasteat = lastfree\n            cur -= 1\n    return True\n\n\ndef bs(l, r):\n    while(l < r):\n        mid = (l + r) >> 1\n        if check(mid):\n            r = mid\n        else:\n            l = mid + 1\n    return l\n\nn, k = map(int, input().split())\ntm = input()\n\nprint(bs(0, n))", "n=0\nk=0\ns=\"\"\nfor i in input().split():\n    if n==0:\n        n=int(i)\n    else:\n        k=int(i)\n\ns=str(input())\nnode=[]\nfor i in range(len(s)):\n    if s[int(i)]=='0':\n        node.append(i+1)\n\nnode.append(1000000000)\ndef check(dis):\n    current=0\n    num=k-2\n    for i in range(len(node)-1):\n        if num<1:\n            break\n        if node[i]-node[current]<=dis and node[i+1]-node[current]>dis:\n            current=i\n            num-=1\n    if n-node[current]>dis:\n        return -1\n\n    return 1\n\nleft=1\nright=n\nwhile left+1<right:\n    mid=int((left+right)/2)\n    t=check(mid)\n    if t==1:\n        right=mid\n    else:\n        left=mid\nfor i in range(left,right+1):\n    if check(i)==1:\n        print(i-1)\n        return\nprint(0)", "def ok(x, k, s, n):\n    i = 0\n    k-=1\n    while i < len(s):\n        if(i + x + 1 >= len(s)):\n            k -= 1\n            #print(len(s) - 1)\n            break\n        j = n[i + x + 1]\n        if(j == i):\n            return 0\n        i = j\n        \n        #print(i)\n        k -= 1\n        if i == len(s) - 1:\n            break\n    #print(k)\n    return k >= 0\n\nn, k = list(map(int, input().split()))\ns = input()\nn = [0]\nfor i in range(1, len(s)):\n    if s[i] == '0':\n        n.append(i)\n    else:\n        n.append(n[-1])\n#print(ok(2, k, s, n))\n#return\nl = -1\nr = len(s)\nwhile r - l > 1:\n    m = (l + r)//2\n    if ok(m, k, s, n):\n        r = m\n    else:\n        l = m\nprint(r)\n", "import sys\nfrom math import *\nfrom fractions import gcd\nfrom random import * # randint(inclusive,inclusive)\nreadints=lambda:list(map(int, input().strip('\\n').split()))\nfrom itertools import permutations, combinations\ns = \"abcdefghijklmnopqrstuvwxyz\"\n# print('', end=\" \")\n# for i in {1..5}; do echo \"hi\"; done\n\n\n\n\nn,k=readints()\ns=input()\n\nlo=-1\nhi=n+1\n\n\n\ndef test(x):\n    have=k-1\n    last=0\n    arr=[]\n    for i in range(n):\n        if s[i]=='0':\n            arr.append(i)\n\n    arr.append(10**9)\n\n    for i in range(1,len(arr)):\n        if arr[i]-last-1>x:\n            if arr[i-1]==last:\n                return False\n            if have==0:\n                return False\n            if arr[i-1]-last-1>x:\n                return False\n            last=arr[i-1]\n            have-=1\n\n    return True\n\n\n\nwhile hi-lo>1:\n    mid=(lo+hi)//2\n    if test(mid):\n        hi=mid\n    else:\n        lo=mid\n\n\nprint(hi)\n", "import sys\nfrom math import *\nfrom fractions import gcd\nfrom random import * # randint(inclusive,inclusive)\nreadints=lambda:list(map(int, input().strip('\\n').split()))\nfrom itertools import permutations, combinations\ns = \"abcdefghijklmnopqrstuvwxyz\"\n# print('', end=\" \")\n# for i in {1..5}; do echo \"hi\"; done\n\n\n\n\nn,k=readints()\ns=input()\n\nlo=-1\nhi=n+1\n\nhop = [0]*n\nfor i in range(n):\n    if s[i]=='0':\n        hop[i]=i\n    else:\n        hop[i]=hop[i-1]\n\ndef test(jump):\n    at=0\n    used=0\n\n    while used < k-2:\n        if at+jump<n:\n            to = hop[at+jump]\n            if to == at:\n                break\n            at = to\n            used += 1\n        else:\n            break\n            \n\n\n    if n-1-at>jump:\n        return False\n    return True \n\n\n\nwhile hi-lo>1:\n    mid=(lo+hi)//2\n    if test(mid):\n        hi=mid\n    else:\n        lo=mid\n\n\nprint(hi-1)\n", "import sys\nfrom math import *\nfrom fractions import gcd\nfrom random import * # randint(inclusive,inclusive)\nreadints=lambda:list(map(int, input().strip('\\n').split()))\nfrom itertools import permutations, combinations\ns = \"abcdefghijklmnopqrstuvwxyz\"\n# print('', end=\" \")\n# for i in {1..5}; do echo \"hi\"; done\n\n\n\n\nn,k=readints()\ns=input()\n\ng=[0]*n\nfor i in range(n):\n    if s[i]=='0':\n        g[i]=i\n    else:\n        g[i]=g[i-1]\n\n\ndef f(hop):\n    at=0\n    used=0\n    while used<k-2 and at+hop<n:\n        to=g[at+hop]\n        if to==at:\n            break\n        used+=1\n        at=to\n\n    if n-1-at>hop:\n        return False\n    return True\n\n\nlo=-1\nhi=n+1\n\nwhile hi-lo>1:\n    mid=(lo+hi)//2\n    if f(mid):\n        hi=mid\n    else:\n        lo=mid\n\nprint(hi-1)\n", "import sys\nfrom math import *\nfrom fractions import gcd\nfrom random import * # randint(inclusive,inclusive)\nreadints=lambda:list(map(int, input().strip('\\n').split()))\nfrom itertools import permutations, combinations\ns = \"abcdefghijklmnopqrstuvwxyz\"\n# print('', end=\" \")\n# for i in {1..5}; do echo \"hi\"; done\n\n\n\n\nn,k=readints()\ns=input()\n\ng=[0]*n\nfor i in range(n):\n    if s[i]=='0':\n        g[i]=i\n    else:\n        g[i]=g[i-1]\n\n\ndef f(hop):\n    at=0\n    used=0\n    while used<k-2 and n-1-at>hop:\n        to=g[at+hop]\n        if to==at:\n            break\n        used+=1\n        at=to\n\n    if n-1-at>hop:\n        return False\n    return True\n\n\nlo=-1\nhi=n+1\n\nwhile hi-lo>1:\n    mid=(lo+hi)//2\n    if f(mid):\n        hi=mid\n    else:\n        lo=mid\n\nprint(hi-1)\n"]