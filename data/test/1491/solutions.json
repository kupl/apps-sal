["n = int(input())\n\ncandies = list(map(int, input().strip().split()))\n\ndef intkoren(n):\n    k = int(n**0.5)\n    while (k+1)*(k+1) <= n:\n        k += 1\n    while k*k > n:\n        k -= 1\n    return k\n\ncnt1 = 0\ncnt2 = 0\nnew = []\nfor e in candies:\n    u = intkoren(e)\n    if e == 0:\n        new.append((2,1))\n        cnt1 += 1\n    elif u*u == e:\n        new.append((1,1))\n        cnt1 += 1\n    else:\n        mini = min(e - u*u, (u+1)*(u+1)-e)\n        new.append((mini, -1))\n        cnt2 += 1\n\nnew.sort()\n\n#print(new, cnt1,cnt2)\n\ncount = 0\nif cnt1 >= cnt2:\n    todo = (cnt1 - cnt2)//2\n    for steps, v in new:\n        if todo == 0:\n            break\n        if v == 1:\n            count += steps\n            todo -= 1\nelse:\n    todo = (cnt2 - cnt1)//2\n    for steps,v in new:\n        if todo == 0:\n            break\n        if v == -1:\n            count += steps\n            todo -= 1\nprint(count)\n", "from sys import stdin, stdout\n\nn = int(stdin.readline().rstrip())\na = list(map(int,stdin.readline().rstrip().split()))\na.sort()\n\nsquareList = [i*i for i in range(int(1000000000**0.5)+2)]\n\nsquareCount = 0\nzeroCount = 0\nlowerSquare=-1\nupperSquare=0\nindex=0\ndistanceList=[]\nfor x in a:\n    while x>upperSquare:\n        index+=1\n        upperSquare=squareList[index]\n        lowerSquare=squareList[index-1]\n    if x==upperSquare:\n        squareCount+=1\n        if x==0:\n            zeroCount+=1\n    else:\n        distanceList.append(min([upperSquare-x,x-lowerSquare]))\ndistanceList.sort()\n\n\n\nchange=0\nif squareCount>n//2:\n    nonZeroCount=squareCount-zeroCount\n    if squareCount-n//2<=nonZeroCount:\n        change=squareCount-n//2\n    else:\n        change = nonZeroCount + 2*(squareCount-n//2-nonZeroCount)\nelif squareCount<n//2:\n    change = sum(distanceList[:n//2-squareCount])\n    \nprint(change)\n    \n    \n", "n=int(input())\narr=list(map(int,input().strip().split(' ')))\nsq=0\nnsq=0\nsqq=[]\nnsqq=[]\nfor i in arr:\n    t=int(i**.5)\n    if(t*t==i):\n        sq+=1\n        sqq.append(i)\n    else:\n        nsq+=1\n        nsqq.append(i)\nif(sq==nsq):\n    print(0)\nelif(sq>nsq):\n    d=sq-n//2\n    cost=[]\n    for i in sqq:\n        if(i!=0):\n            cost.append(1)\n        else:\n            cost.append(2)\n    cost.sort()\n    s=0\n    for i in range(d):\n        s+=cost[i]\n    print(s)\nelse:\n    d=nsq-n//2\n    cost=[]\n    for i in nsqq:\n        t=int(i**.5)\n        pp=t*t\n        ppp=(t+1)*(t+1)\n        cost.append(min(abs(i-pp),abs(i-ppp)))\n    cost.sort()\n    s=0\n    for i in range(d):\n        s+=cost[i]\n    print(s)\n", "from math import sqrt, floor\nn = int(input())\nflsq = lambda x: floor(sqrt(x))\nclsd = lambda f, x: min(x-f**2, (f+1)**2-x)\na = sorted(list([(clsd(flsq(int(s)), int(s)), int(s)) for s in input().split()]))\nprint(sum(x[0] for x in a[:n//2])+sum((1 if a[j][1]!=0 else 2) if a[j][0]==0 else 0 for j in range(n//2, n)))\n", "from sys import stdin, stdout\n\n\n\nsze = 10 ** 5\npower = []\nfor i in range(sze):\n    power.append(i * i)\n\n\ndef sqrt(v):\n    l, r = 0, sze\n    \n    while (r - l > 1):\n        m = (l + r) >> 1\n        \n        if power[m] <= v:\n            l = m\n        else:\n            r = m\n    \n    return l\n\n\ndef add_f(v):\n    if not v:\n        first.append(2)\n    else:\n        first.append(1)\n\n\ndef add_s(v):\n    l, r = 0, sze\n    \n    while r - l > 1:\n        m = (l + r) >> 1\n        \n        if power[m] <= v:\n            l = m\n        else:\n            r = m\n    \n    second.append(min(v - power[l], power[r] - v))\n\n\nn = int(stdin.readline())\nvalues = list(map(int, stdin.readline().split()))\nfirst, second = [], []\n\nfor v in values:\n    a = sqrt(v)\n    \n    if a * a == v:\n        add_f(v)\n    else:\n        add_s(v)\n\nfirst.sort()\nsecond.sort()\nans = 0\n\nk = n // 2\n\nif len(first) < len(second):\n    for i in range(k - len(first)):\n        ans += second[i]\nelif len(first) > len(second):\n    for i in range(k - len(second)):\n        ans += first[i]\n\nstdout.write(str(ans))", "import decimal\ndecimal.getcontext().prec = 20\n\n\ndef nearest(a):\n    a=int(a)\n    x=str(decimal.Decimal(a).sqrt()) + '.'\n    x=int(x[:x.find('.')])\n    return min((a-x*x),(x+1)**2-a)\n\nn=int(input())\nb=list(map(int,input().split()))\nb.sort()\na=list(map(nearest,b))\na.sort()\nif(a[n//2]==0):\n    count=0\n    for i in range(n//2):\n        if(a[i+n//2]==0):\n            count+=1\n        else:\n            break\n    for i in range(n//2):\n        if(b[i+n//2]==0):\n            count+=1\n        else:\n            break\n    print(count)\nelse:\n    print(sum(a[:n//2]))\n    \n", "from math import *\nn = int(input())\nb = list(map(int, input().split(\" \")))\nmaxim = max(b)\nsquad = []\nfor i in range(0, int(sqrt(maxim)) + 1):\n    squad.append(i ** 2)\n\nto_quad = 0\nquad_list = []\nnot_quad = 0\nnot_quad_list = []\nfor i in range(0, len(b)):\n    if sqrt(b[i]) == int(sqrt(b[i])):\n        to_quad += 1\n        quad_list.append(b[i])\n    else:\n        not_quad += 1\n        not_quad_list.append(b[i])\nif(to_quad == not_quad):\n    print(0)\nelse:\n    if(to_quad > not_quad):\n        t = []\n        answer = 0\n        c = to_quad - int(n / 2)\n        for i in range(0, len(quad_list)):\n            if(quad_list[i] == 0):\n                t.append(2)\n            else:\n                t.append(1)\n        t = sorted(t)\n        for i in range(0, c):\n            answer += t[i]\n        print(answer)\n    else:\n        c = not_quad - int(n / 2)\n        t = []\n        answer = 0\n        for i in range(0, len(not_quad_list)):\n            tmp = int(sqrt(not_quad_list[i]))\n            r = (tmp + 1) ** 2\n            l = (tmp - 1) ** 2\n            t.append(min(abs(not_quad_list[i] - r), min(abs(not_quad_list[i] - tmp ** 2), abs(not_quad_list[i] - l))))\n        t = sorted(t)\n        for i in range(0, c):\n            answer += t[i]\n        print(answer)\n\n            \n        \n\n\n\n\n\n\n", "import math\n\n[n] = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nsqr_list_dist = []\nnon_sqr_dist = []\nfor i in a:\n  if (i**0.5)%1==0:\n    if i == 0: sqr_list_dist.append(2)\n    else: sqr_list_dist.append(1)\n  else:\n    lower = math.floor(i**0.5)**2\n    upper = math.ceil(i**0.5)**2\n    non_sqr_dist.append(min(i - lower, upper - i))\ndiff = len(sqr_list_dist) - (n//2)\nif diff == 0:\n  print(0)\nelif diff > 0:\n  sqr_list_dist.sort()\n  print(sum(sqr_list_dist[:diff]))\nelse:\n  non_sqr_dist.sort()\n  print(sum(non_sqr_dist[:abs(diff)]))", "from math import *\ndef lInt(d = None): return list(map(int, input().split(d)))\nn, *_ = lInt()\na = list(lInt())\nis_sq = [0]*n\nsq = 0; ans = 0\npos = []\n\ndef closest(v):\n  w = sqrt(v)\n  f = floor(w)\n  c = f+1\n  fsq = f*f\n  csq = c*c\n\n  fd = v-fsq\n  cd = csq-v\n  return min(fd, cd)\n  \ndef isS(v):\n  w = int(sqrt(v))\n  return w*w == v\n\nfor i, v in enumerate(a):\n  w = int(sqrt(v))\n  \n  if w*w == v:\n    is_sq[i] = 1\n    sq += 1\n\nif sq > n//2:\n  for i, v in enumerate(a):\n    if is_sq[i] and sq > n//2:\n      if a[i]:\n        ans += 1\n        sq -= 1\n        is_sq[i] = 0\n  for i, v in enumerate(a):\n    if is_sq[i] and sq > n//2:\n      ans += 2\n      sq -= 1\nelif sq < n//2:\n  for i, v in enumerate(a):\n    if not is_sq[i]:\n      pos.append(closest(a[i]))\n  pos.sort()\n  for j in range(n//2-sq):\n    ans += pos[j]\nelse:\n  ans = 0\nprint(ans)\n", "n=int(input())\ns=0\nkolzero=0\nl=[int(i) for i in input().split()]\nkv=0\nfor i in range(n):\n    if int(l[i]**0.5)**2==l[i]:\n        kv+=1\ng=[0]*n\nfor i in range(n):\n    if l[i]==0:\n        kolzero+=1\n    a=int(l[i]**0.5)\n    b=a+1\n    a=a**2\n    b=b**2\n    if l[i]-a<b-l[i]:\n        g[i]=l[i]-a\n    else:\n        g[i]=b-l[i]\ni=0\nx=0\nif kv>=n//2:\n    s=kv-n//2\n    if kolzero>n//2:\n        s+=kolzero-n//2\n    print(s)\nelse:\n    g.sort()\n    while x<n//2-kv:\n        if g[i]!=0:\n            s+=g[i]\n            x+=1\n        i+=1\n    print(s)", "n=int(input())\na=list(map(int,input().split()))\nx=[]\nfor i in a:\n    s=i**0.5\n    s=round(s)\n    x.append((abs(s**2-i),i))\n\nx.sort()\nn2=n//2\nans=0\nfor i in range(n2):\n    ans+=x[i][0]\nfor i in range(n2,n):\n    if x[i][0]==0:\n        if x[i][1]==0:\n            ans+=2\n        else:\n            ans+=1\nprint(ans)\n", "n = int(input())\nli = input().strip().split(' ')\nnums=[]\nct=0\nzeros=0\nfor i in li:\n    i = int(i)\n    if i==0:zeros+=1\n    if round(i**0.5)**2==i:ct+=1\n    tmp = int(i**0.5)\n    nums.append(min(i-tmp*tmp,(tmp+1)**2-i))\nnums.sort()\nhalf = int(n/2)\nif ct<=half:print( sum(nums[:half]))\nelse:\n    rst=ct-half\n    if zeros>half:\n        rst+=zeros-half\n    print(rst)\n", "from math import sqrt\nn = int(input())\nsz = n // 2\nbins = [int(i) for i in input().split()]\nsqr = 0\nzeros = 0\nfor cnt in bins:\n    if sqrt(cnt).is_integer():\n        sqr += 1\n    if cnt == 0:\n        zeros += 1\nif sqr >= sz:\n    left = sqr - sz\n    nonzeros = sqr - zeros\n    first = max(0, left - nonzeros)\n    print(left + first)\nelse:\n    add = [0] * (n - sqr)\n    i = 0\n    for cnt in bins:\n        root = sqrt(cnt)\n        if not root.is_integer():\n            lower = int(root) ** 2\n            upper = (int(root) + 1) ** 2\n            add[i] = min(cnt - lower, upper - cnt)\n            i += 1\n    add.sort()\n    print(sum(add[:sz - sqr]))\n    \n    \n    \n", "n = int(input())\na = [int(i) for i in input().split()]\nb, v, ans = [], [], 0\nfor i in a:\n    c = int(i ** (1 / 2))\n    if c * c == i or (c + 1) * (c + 1) == i or (c - 1) * (c - 1) == i:\n        b.append(i)\nb.sort(reverse=True)\nfor i in range(len(b) - n // 2):\n    if b[i] == 0:\n        ans += 2\n    else:\n        ans += 1\nfor i in a:\n    c = int(i ** (1 / 2))\n    if c * c == i or (c + 1) * (c + 1) == i or (c - 1) * (c - 1) == i:\n        continue\n    v.append(min(i - c * c, (c + 1) * (c + 1) - i))\nv.sort()\nfor i in range(n // 2 - len(b)):\n    ans += v[i]\nprint(ans)\n", "n = int(input())\na = [int(i) for i in input().split()]\nb, v, ans = [], [], 0\nfor i in a:\n    c = int(i ** (1 / 2))\n    if c * c == i:\n        b.append(i)\n    else:\n        v.append(min(i - c * c, (c + 1) * (c + 1) - i))\nb.sort(reverse=True)\nv.sort()\nfor i in range(len(b) - n // 2):\n    ans += 1 + (b[i] == 0)\nfor i in range(n // 2 - len(b)):\n    ans += v[i]\nprint(ans)\n", "n = int(input())\na = [int(i) for i in input().split()]\nb, v, ans = [], [], 0\nfor i in a:\n    c = int(i ** (1 / 2))\n    if c * c == i:\n        b.append(i)\n    else:\n        v.append(min(i - c * c, (c + 1) * (c + 1) - i))\nb.sort(reverse=True)\nv.sort()\nfor i in range(len(b) - n // 2):\n    ans += 1 + (b[i] == 0)\nfor i in range(n // 2 - len(b)):\n    ans += v[i]\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Dec 16 19:33:27 2017\n\n@author: ms\n\"\"\"\nfrom math import sqrt\n\ndef main():\n    n = int(input())\n    piles = [int(x) for x in input().split()]\n    spiles = sorted(piles)\n    nearest = []\n    cost = []\n    for a in piles:\n        tmp = (int(sqrt(a)))\n        lower = tmp**2\n        upper = (tmp+1)**2\n        if (a-lower)<=(upper-a):\n            nearest.append(lower)\n        else:\n            nearest.append(upper)\n        cost.append(abs(a-nearest[-1]))\n    \n    cost = sorted(cost)\n    summ = 0\n    for i in range(int(n/2)):\n        summ += cost[i]\n    \n    for j in range(int(n/2),n):\n        if (cost[j] == 0):\n            summ += 1\n            if (spiles[j] == 0):\n                summ += 1\n        else:\n            break\n    print(summ)\n\nmain()\n\n", "sq=[i*i for i in range(10**5+5)]\na=[]\nnules=0\nap=a.append\nfrom bisect import bisect_left\nn=int(input())//2\nfor i in map(int,input().split()):\n    if i==0:\n        ap(0)\n        nules+=1\n    else:\n        ind=bisect_left(sq,i)\n        #print(ind)\n        ap(min(i-sq[ind-1],sq[ind]-i))\na=sorted(a)\ns=sum(a[:n])\n#print(a,n,s)\n#print(a,s)\nif s==0:\n    print(n-a[::-1].index(0)+max(0,nules-n))\nelse:\n    print(s)\n\n\n", "import math\nn = int(input())\narr = list(map(int,input().split()))\nchecks = []\nzc = 0\nfor i in arr:\n\tx = i**0.5\n\tif int(x)*int(x)==i:\n\t\tchecks.append(0)\n\t\tif not i:\n\t\t\tzc+=1\n\telse :\n\t\tl = math.ceil(x)\n\t\tm = math.floor(x)\n\t\tchecks.append(min(abs(l*l-i),abs(i-m*m)))\nchecks.sort()\nmarks = n//2\nif checks.count(0)==marks:\n\tprint(0)\nelif checks.count(0)<marks:\n\tl = checks.count(0)\n\ts = 0\n\twhile l<marks:\n\t\ts+=checks[l]\n\t\tl+=1\n\tprint(s)\nelse:\n\tl = checks.count(0)\n\tnon_zero_sq =  l - zc\n\tnon_sq = n-l\n\tans = 0\n\tmarks-=non_sq\n\twhile non_zero_sq>0 and marks>0:\n\t\tmarks-=1\n\t\tnon_zero_sq-=1\n\t\tans+=1\n\twhile marks>0 and zc>0:\n\t\tzc-=1\n\t\tmarks-=1\n\t\tans+=2\n\tprint(ans)\n", "import math\nn = int(input())\nnums = [int(i) for i in input().split()]\na = [1000000000] * n\nzero = 0\ns = 0\nfor i in range(n):\n    num = nums[i]\n    k = int(math.sqrt(num))\n    if k * k == num:\n        if num == 0:\n            zero += 1\n        s += 1\n    else:\n        a[i] = min(num - k * k, (k + 1) * (k + 1) - num)\nans = 0\nif s > n - s:\n    delta = (s - (n - s)) // 2\n    if delta <= s - zero:\n        ans += delta\n    else:\n        ans += 2 * (delta - (s - zero)) + (s - zero)\nelse:\n    delta = ((n - s) - s) // 2\n    a.sort()\n    ans = sum(a[:delta])\nprint(ans)\n        \n", "n = int(input())\nf = lambda x: min(x - int(x**0.5)**2, (int(x**0.5)+1)**2 - x)\na = sorted([[f(int(i)), int(i)] for i in input().split()])\nans = sum(i[0] for i in a[:n//2]) + sum((int(i[1]**0.5)**2 == i[1]) + (i[1] == 0) for i in a[n//2:])\nprint(ans)", "n = int(input())\nf = lambda x: min(x - int(x**0.5)**2, (int(x**0.5)+1)**2 - x)\na = sorted([[f(int(i)), int(i)] for i in input().split()])\nans = sum(i[0] for i in a[:n//2]) + sum((int(i[1]**0.5)**2 == i[1]) + (i[1] == 0) for i in a[n//2:])\nprint(ans)", "import math as m\nn = int(input())\na = [int(z) for z in input().split()]\nans = 0\ndef sq(a):\n    tmp = int(m.sqrt(a))\n    s = tmp * tmp\n    tmp += 1\n    b = tmp * tmp\n    if abs(a - s) < abs(a - b):\n        return abs(a - s)\n    else:\n        return abs(a - b)\nd = []\nfor i in range(n):\n    d.append((sq(a[i]), a[i]))\nd.sort()\nfor i in range(n // 2):\n    ans += d[i][0]\nfor i in range(n // 2, n):\n    if d[i][0] == 0:\n        if d[i][1] == 0:\n            ans += 2\n        else:\n            ans += 1\nprint(ans)", "def solve():\n    sq=[i*i for i in range(32630)]\n    a=[]\n    nules=0\n    ap=a.append\n    from bisect import bisect_left\n    n=int(input())//2\n    for i in map(int,input().split()):\n        if i==0:\n            ap(0)\n            nules+=1\n        else:\n            ind=bisect_left(sq,i)\n            #print(ind)\n            ap(min(i-sq[ind-1],sq[ind]-i))\n    a=sorted(a)\n    s=sum(a[:n])\n    #print(a,n,s)\n    #print(a,s)\n    if s==0:\n        print(n-a[::-1].index(0)+max(0,nules-n))\n    else:\n        print(s)\nsolve()\n\n\n", "n = input()\nm = input().split()\na = []\nb = []\nfor s in m:\n    i = int(s)\n    if int(i**(1/2))**2 == i:\n        a.append(i)\n    else:\n        b.append(i)\n\nif len(a)>=len(b):\n    ans = 0\n    a = sorted(a)\n    for i in range(len(a)-1,len(a)-(len(a)-len(b))//2-1,-1):\n        if a[i]!=0:\n            ans+=1\n        else:\n            ans+=2\n    print(ans)\n\nelse:\n    k = 0\n    r = len(b) - len(a)\n    r = int(r/2)\n    a = []\n    for i in b:\n        q = int(i**(1/2))\n        q1=q**2\n        q2=(q+1)**2\n        q1 = i-q1\n        q2 = q2-i\n        if q1<q2:\n            q = q1\n        else:\n            q = q2\n        a.append(q)\n    print(sum(sorted(a)[:r]))\n    \n"]