["n, m = list(map(int, input().split()))\nprev_points = [[] for _ in range(n)]\nfor _ in range(m):\n    u, v = list(map(int, input().split()))\n    u -= 1\n    v -= 1\n    prev_points[v].append(u)\nk = int(input())\np = [int(pi) - 1 for pi in input().split()]\nbest_ways_d = [-1] * n\nbest_ways_nm1 = [0] * n\nq = [(p[-1], 0)]\nfor u, d in q:\n    if best_ways_d[u] < 0:\n        best_ways_d[u] = d\n        d += 1\n        for v in prev_points[u]:\n            q.append((v, d))\n    elif best_ways_d[u] == d:\n        best_ways_nm1[u] += 1\nans1 = ans2 = 0\nfor i in range(1, k):\n    u, v = p[i - 1], p[i]\n    if best_ways_d[u] <= best_ways_d[v]:\n        ans1 += 1\n        ans2 += 1\n    elif best_ways_nm1[u]:\n        ans2 += 1\nprint(ans1, ans2)\n", "import sys\nfrom collections import deque\ninput = lambda : sys.stdin.readline().strip()\n# for i in range(int(input())):\nn,m = list(map(int,input().split()))\ng = {}\nfor i in range(m):\n    a,b = list(map(int,input().split()))\n    if b-1 in g:\n        g[b-1].append(a-1)\n    else:\n        g[b-1]=[a-1]\nk = int(input())\nway = list([int(x)-1 for x in input().split()])\nbfs = deque()\nbfs.append(way[-1])\nlvl = [-1]*n\nans = [0]*n\na = [set() for j in range(n)]\nlvl[way[-1]]=0\nwhile bfs:\n    v = bfs.popleft()\n    for u in g[v]:\n        if lvl[u]==-1:\n            lvl[u]=lvl[v]+1\n            a[u].add(v)\n            bfs.append(u)\n        elif lvl[u]==lvl[v]+1:\n            ans[u]=1\n            a[u].add(v)\nansv = 0\nans1 = 0\nfor v in range(k-1):\n    if k-v-1!=lvl[way[v]] and way[v+1] not in a[way[v]]:\n        ans1+=1\n    elif k-v-1 == lvl[way[v]]:\n        break\nfor v in range(k-1):\n    if ans[way[v]] or  a[way[v]].pop()!=way[v+1]:#\n        ansv +=1\n\nprint(ans1,ansv)\n"]