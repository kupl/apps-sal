["def solve(x, y, p, q):\n    if p == 0: return 0 if x == 0 else -1\n    pp = (x - 1) // p + 1 if p != 0 else 0\n    L = max((y - 1) // q + 1, pp) - 1\n    L = max(L, -1)\n    z = y - x\n    INF = L + 10 ** 10\n    R = INF\n    while R - L > 1:\n        M = (L + R) >> 1\n        cur = q * M\n        curp = p * M\n        curz = cur - curp\n        dl = cur - y\n        if curp >= x and curz >= z:\n            R = M\n        else:\n            L = M\n        #print(L, R)\n    if R == INF:\n        return -1\n    return R * q - y\n\nread = lambda: map(int, input().split())\nt = int(input())\nfor i in range(t):\n    x, y, p, q = read()\n    print(solve(x, y, p, q))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nclass solution:\n    def __init__(self, a=0, b=0):\n        self.x = a\n        self.y = b\n\ndef eu (a, b, sol):\n    if a == 0:\n        sol.x = 0\n        sol.y = 1\n        return b\n    sol2 = solution()\n    d = eu (b%a, a, sol2)\n    sol.x = sol2.y - (b // a) * sol2.x\n    sol.y = sol2.x\n    return d\n\n\ndef find_any_solution (a, b, c, sol):\n    g = eu(abs(a), abs(b), sol)\n    if c % g != 0:\n        return -1\n    sol.x *= c // g\n    sol.y *= c // g\n    if (a < 0):\n        sol.x *= -1\n    if (b < 0):\n        sol.y *= -1\n    return g\n\n\ndef shift_solution (sol, a, b, cnt):\n    sol.x += cnt * b\n    sol.y -= cnt * a\n\n\ndef find_all_solution(a, b, c, minx, maxx, miny, maxy):\n    sol = solution()\n    g = find_any_solution(a, b, c, sol)\n    if g == -1:\n        return (-1, -1)\n\n    a //= g\n    b //= g\n\n    sign_a = 1\n    if a < 0:\n        sign_a = -1\n    sign_b = 1\n    if b < 0:\n        sign_b = -1\n\n    shift_solution(sol, a, b, (minx - sol.x) // b)\n    if sol.x < minx:\n        shift_solution (sol, a, b, sign_b)\n    if sol.x > maxx:\n        return (-1, -1)\n    lx1 = sol.x\n\n    shift_solution (sol, a, b, (maxx - sol.x) // b)\n    if sol.x > maxx:\n        shift_solution (sol, a, b, -sign_b)\n    rx1 = sol.x\n\n    shift_solution (sol, a, b, - (miny - sol.y) // a)\n    if sol.y < miny:\n        shift_solution (sol, a, b, -sign_a)\n    if sol.y > maxy:\n        return (-1, -1)\n    lx2 = sol.x\n\n    shift_solution (sol, a, b, - (maxy - sol.y) // a)\n    if sol.y > maxy:\n        shift_solution (sol, a, b, sign_a)\n    rx2 = sol.x\n\n    if lx2 > rx2:\n        lx2, rx2 = rx2, lx2\n    lx = max (lx1, lx2)\n    rx = min (rx1, rx2)\n\n    if lx > rx:\n        return (-1, -1)\n    return (lx, rx)\n\ndef solve():\n    s = input().split()\n    x = int(s[0])\n    y = int(s[1])\n    p = int(s[2])\n    q = int(s[3])\n\n    # x, y, p, q = 3, 10, 1, 2\n \n    if p == 0:\n        if x == 0:\n            return 0\n        else:\n            return -1\n    if q == p:\n        if x == y:\n            return 0\n        return -1\n    if p * y - q * x == 0:\n        return 0\n\n    a = q - p\n    b = -p\n    c = p * y - q * x\n\n    ans1, ans2 = find_all_solution(a, b, c, 0, int(10 ** 20), 0, int(10 ** 20))\n\n    ansy1 = (p * y - q * x - (q - p) * ans1) // (-p)\n    ansy2 = (p * y - q * x - (q - p) * ans2) // (-p)\n\n    # print(x, y)\n\n    sum1 = int(10 ** 25)\n    if ans1 >= 0 and ansy1 >= 0 and (x + ans1) * q == (y + ansy1 + ans1) * p:\n        sum1 = min(sum1, ans1 + ansy1)\n\n    if ans2 >= 0 and ansy2 >= 0 and (x + ans2) * q == (y + ansy2 + ans2) * p:\n        sum1 = min(sum1, ans2 + ansy2)\n    if sum1 == int(10 ** 25):\n        return -1\n    return sum1\n# print(solve())\n\nt = int(input())\nfor i in range(t):\n    print(solve())", "t = int(input())\nfor i in range(t):\n    x, y, p, q = map(int, input().split())\n    \n    if p == q:\n        if x != y:\n            print(-1)\n        else:\n            if x == y == 0:\n                print(1)\n            else:\n                print(0)\n        continue\n    if p == 0:\n        if x == 0:\n            if y == 0:\n                print(1)\n            else:\n                print(0)\n        else:\n            print(-1)\n        continue\n    \n    k = max((y - x + q - p - 1) // (q - p), (x + p - 1) // p) \n    print(k * q - y)", "def gcd(a, b):\n\tif a == 0:\n\t\treturn [b, 0, 1]\n\td = gcd(b % a, a)\n\treturn [d[0], d[2] - (b // a) * d[1], d[1]]\n\nt = int(input())\nwhile t > 0:\n\tt -= 1\n\tx, y, p, q = list(map(int, input().split()))\n\tif p == q:\n\t\tif x == y:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tprint(-1)\n\t\tcontinue\n\tif p == 0:\n\t\tif x == 0:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tprint(-1)\n\t\tcontinue\n\ta = p - q\n\tb = p\n\tc = q * x - p * y\n\tg, xa, ya = gcd(abs(a), abs(b))\n\tif c % g != 0:\n\t\tprint(-1)\n\telse:\n\t\txa *= c // g\n\t\tya *= c // g\n\t\tif a < 0:\n\t\t\txa = -xa\n\t\tif b < 0:\n\t\t\tya = -ya\n\t\tif xa < 0:\n\t\t\tgaps = (-xa + (b // g) - 1) // (b // g)\n\t\t\txa += gaps * (b // g)\n\t\t\tya -= gaps * (a // g)\n\t\tif ya < 0:\n\t\t\tgaps = (-ya + (-a // g) - 1) // (-a // g)\t\t\n\t\t\txa += gaps * (b // g)\n\t\t\tya -= gaps * (a // g)\n\t\t#print(xa, ya, a, b, c)\n\t\tif xa < 0 or ya < 0:\n\t\t\tprint(-1)\n\t\telse:\n\t\t\taddon = min(xa // (b // g), ya // (-a // g))\n\t\t\txa -= addon * (b // g)\n\t\t\tya += addon * (a // g)\n\t\t\tprint(xa + ya)\n", "import sys\ndef de(x, y):\n\tif (x % y == 0):\n\t\t return x // y\n\treturn x // y + 1\n\ndef euc(a, b):\n\tif (b == 0):\n\t\treturn 1, 0\n\tx, y = euc(b, a % b)\n\treturn -y, -x - y * (a // b)\n\n\n\ndef solve( x, y, p, q):\n\tif (q == p):\n\t\tif (x == y):\n\t\t\t return 0\n\t\treturn -1\n\tif (p == 0):\n\t\tif (x == 0):\n\t\t\t return 0\n\t\treturn -1\n\t\n\t\t\n\ta0, b0 = euc(p, q)\n\tg = a0 * p - q * b0\n\tc = x * q - p * y\n\tif (c % g):\n\t\treturn -1\n\ta0 = a0 * (c // g)\n\tb0 = b0 * (c // g)\n\tt1 = a0 // q\n\t\n\tt = max(de(b0 - a0, q - p), de(-b0, p))\n\ta = a0 + q * t\n\tb = b0 + p * t\n\n\treturn a\n\n\n#sys.stdin = open('input.txt', 'r')\n\n\nt = int(input())\nfor it in range(t):\n\tx, y, p, q = list(map(int, input().split()))\n\tprint(solve(x, y, p, q))\n", "def xgcd(a, b):\n    if b == 0:\n        return 1, 0\n    x1, y1 = xgcd(b, a % b)\n    return y1, x1 - (a // b) * y1\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nt = int(input())\nfor kek in range(t):\n    x, y, p, q = map(int, input().split())\n    if p == 0:\n        if x == 0:\n            print(0)\n        else:\n            print(-1)\n        continue\n    if p == q:\n        if x == y:\n            print(0)\n        else:\n            print(-1)\n        continue\n\n    v = p * y - q * x\n    g = gcd(q - p, p)\n    k0, l0 = xgcd(q - p, p)\n    l0 *= -1\n    g1 = v // g\n    k0 *= g1\n    l0 *= g1\n\n    xx = (-k0 + p - 1) // p\n    \n    xx = max(xx, (-l0 + q - p - 1) // (q - p))\n    \n    l = l0 + xx * (q - p)\n    k = k0 + xx * p;\n\n    print(k + l)", "def gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n\n    g, x1, y1 = gcd(b % a, a);\n\n    y = x1;\n    x = y1 - (b // a) * x1;\n    return g, x, y;\n\ndef comp(da, db, t, a, b):\n    ra = a + da * t\n    rb = b + db * t\n\n    # assert(ra.v0 >= 0);\n    # assert(ra.v1 >= 0);\n    # assert(rb.v0 >= 0);\n    # assert(rb.v1 >= 0);\n    return ra + rb\n\ndef solve():\n    x, y, p, q = list(map(int, input().split()))\n\n    if p == q:\n        if x == y:\n            print(0)\n        else:\n            print(-1)\n        return\n\n    if p == 0:\n        if x == 0:\n            print(0)\n        else:\n            print(-1)\n        return;\n\n    r = x * q - y * p;\n    g, a, b = gcd(p - q, p);\n    if r % g != 0:\n        print(-1)\n        return\n\n    a *= r // g;\n    b *= r // g;\n\n    da = p;\n    db = q - p;\n    minT = -10**18;\n    minT = max(minT, ((-a + (da - 1)) // da));\n    minT = max(minT, ((-b + (db - 1)) // db));\n\n    t = minT;\n    rr = comp(da, db, t, a, b);\n    print(rr)\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        solve()\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "def gcd(a, b):\n\tif (a == 0):\n\t\treturn (b, 0, 1)\n\n\t(g, x, y) = gcd(b % a, a)\n\treturn (g, y - (b // a) * x, x) \n\n\nt = int(input())\n\nfor i in range(t):\n\t(x, y, p, q) = list(map(int, input().split()))\n\tval = p * y - q * x\n\t(g, a, b) = gcd(q, -p)\n\n\tif (val % g != 0):\n\t\tprint(-1)\n\t\tcontinue\n\n\ta *= val // g\n\tb *= val // g\n\n\tda = abs(p // g)\n\tdb = abs(q // g)\n\n\tif (a < 0):\n\t\tif (da == 0):\n\t\t\tprint(-1)\n\t\t\tcontinue\n\n\t\tmul = (abs(a) + da - 1) // da\n\t\ta += mul * da\n\t\tb += mul * db\n\n\n\tif (b < 0):\n\t\tif (db == 0):\n\t\t\tprint(-1)\n\t\t\tcontinue\n\n\t\tmul = (abs(b) + db - 1) // db;\n\t\ta += mul * da\n\t\tb += mul * db\n\n\tif (a > b):\n\t\tif (da == db):\n\t\t\tprint(-1)\n\t\t\tcontinue\n\n\t\tdiff = a - b\n\t\tstep = db - da\n\t\tmul = (diff + step - 1) // step\n\t\ta += mul * da\n\t\tb += mul * db\n\n\tmul = b // db;\n\tif (da != 0):\n\t\tmul = min(mul, a // da)\n\n\tif (da != db):\n\t\tmul = min(mul, (b - a) // (db - da))\n\n\tprint(b - db * mul) \n", "INF = 10**40\n\ndef gcd_ex(A, B):\n    if A == 0:\n        return B, 0, 1\n    g, a1, b1 = gcd_ex(B % A, A)\n    a = b1 - (B // A) * a1\n    b = a1\n    return g, a, b\n\ndef round_down(a, b):\n    s = (a < 0) != (b < 0)\n    a = abs(a)\n    b = abs(b)\n    if not s:\n        return a // b\n    return -((a + b - 1) // b)\n\ndef round_up(a, b):\n    s = (a < 0) != (b < 0)\n    a = abs(a)\n    b = abs(b)\n    if not s:\n        return (a + b - 1) // b\n    return -(a // b)\n\ndef solve():\n    x, y, p, q = list(map(int, input().split()))\n\n    A = q\n    B = -p\n    C = p * y - q * x\n\n    g, a0, b0 = gcd_ex(A, -B)\n    b0 *= -1\n\n    if C % g != 0:\n        print(-1)\n        return\n    a0 *= C // g\n    b0 *= C // g\n\n    k_up1 = 0\n    if B == 0:\n        if -a0 > 0:\n            print(-1)\n            return\n        k_up1 = INF\n    else:\n        k_up1 = round_down(-a0, B // g)\n\n    k_down2 = 0\n    k_up2 = 0\n    if A + B == 0:\n        if b0 - a0 < 0:\n            print(-1)\n            return\n        k_down2 = -INF\n        k_up2 = INF\n    elif A + B > 0:\n        k_down2 = -INF\n        k_up2 = round_down(b0 - a0, (A + B) // g)\n    else:\n        k_down2 = round_up(b0 - a0, (A + B) // g)\n        k_up2 = INF\n\n    k_down = k_down2\n    k_up = min(k_up1, k_up2)\n    if k_down > k_up:\n        print(-1)\n        return\n\n    if k_up == INF:\n        raise Exception\n    b = b0 - (A // g) * k_up\n\n    print(b)\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        solve()\n\nmain()\n", "t = int(input())\n\nfor i in range(t):\n    x, y, p, q = [int(i) for i in input().split()]\n    \n    if p == 0:\n        if x == 0:\n            print(0)\n        else:\n            print(-1)\n        continue\n\n    l = 0\n    r = 10000000000\n\n    while l < r:\n        t = (l + r) // 2\n\n        c1 = p * t - x\n        c2 = q * t - y - c1\n\n        if c1 >= 0 and c2 >= 0:\n            r = t\n        else:\n            l = t + 1\n\n    if r == 10000000000:\n        print(-1)\n    else:\n        print(q * l - y)\n", "def gcd(a, b):\n    if b > a:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef works(a, b, c, d, x):\n    return b <= d * x and a <= c * x and d * x - b >= c * x - a\n\ndef solve():\n    a, b, c, d = list(map(int, input().rstrip().split()))\n    if c == d == 1 and not a / b == 1:\n        print(-1)\n        return\n    if c == 0 and not a == 0:\n        print(-1)\n        return\n    g = gcd(c, d)\n    c //= g\n    d //= g\n    low = -1\n    high = 1000000000000\n    while low + 1 < high:\n        mid = (low + high) // 2\n        if works(a, b, c, d, mid):\n            high = mid\n        else:\n            low = mid\n    print(d * high - b)\n\ndef __starting_point():\n    t = int(input())\n    for _ in range(t):\n        solve()\n\n__starting_point()", "# cook your code here\ndef solve():\n    x, y, p, q = map(int, input().split())\n    \n    if p == 0:\n        if x == 0:\n            print(0)\n            return\n        else:\n            print(-1)\n            return\n        \n    if p == q:\n        if x == y:\n            print(0)\n            return\n        else:\n            print(-1)\n            return\n        \n    var1 = ( p + x - 1 ) // p;\n    var2 = ((y - x) + (q - p) - 1) // (q - p);\n    max1 = max(var1, var2);\n    solution = (max1 * q) - y;\n    \n    print(solution)\n    return\n\n\ndef main():\n    n = int(input())\n    for i in range (n):\n        solve()\n        \nmain()", "for i in range(int(input())):\n    x, y, p, q = map(int, input().split())\n    print(-(x > 0) if not p else -(y > x) if p == q else max((x - 1) // p, (y - x - 1) // (q - p)) * q + q - y)", "import math\nimport sys\nt=int(input())\nfor j in range(1,(t+1)):\n    x,y,p,q=(list(map(int,input().split())))\n    f1=0\n    if(p!=q and p!=0):\n            tmp=max(((y-x)+(q-p)-1)//(q-p),(x+p-1)//p)\n            #print(tmp)\n            #include<FU*k> test case\n            print((q*tmp)-y)\n            f1=1\n           \n    if(p==0 and x==0):\n            print(0)\n    elif(p==q and x==y):\n            print(0)\n    elif (not f1):\n            print(-1)\n        \n        \n\n\n    \n", "for case in range(int(input())):\n    x,y,p,q = map(int, input().split())\n\n    lo = 0\n    hi = 10**10\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n         \n        np,nq = mid*p, mid*q\n        if nq >= y and np >= x:\n            if nq - y >= np - x:\n                hi = mid\n            else:\n                lo = mid + 1\n        else:\n            lo = mid + 1\n     \n    print(lo * q - y if lo != 10**10 else -1)", "for _ in range(int(input())):\n\n  x,y,p,q=list(map(int,input().split()))\n\n  l,r,res=0,10**18,-1\n\n  while l<=r:\n\n    mid=(l+r)//2\n\n    a,b=p*mid-x,q*mid-y\n\n    if a<=b and a>-1 and b>-1:res=b;r=mid-1\n\n    else :l=mid+1\n\n  print(res)\n\n\n\n# Made By Mostafa_Khaled\n", "R = lambda: map(int, input().split())\nmx = 10**9 + 7\nt = int(input())\nfor i in range(t):\n    a, b, p, q = R()\n    l, r = 1, mx\n    while l < r:\n        k = (l + r) // 2\n        x, y = k * p - a, k * q - b\n        if 0 <= x <= y and y >= 0:\n            r = k\n        else:\n            l = k + 1\n    if r >= mx:\n        print(\"-1\")\n    else:\n        print(r * q - b)", "N = int(input())\nimport math\nfor _ in range(N):\n    x,y,p,q = [int(x) for x in input().split()]\n    if (p == 0) or (p==q):\n        if (x*q == p*y):\n            print(0)\n        else:\n            print(-1)\n        continue\n    n = math.ceil((y-x)/(q-p))\n    n = max(n,math.ceil(x/p))\n    n = max(n,math.ceil(y/q))\n    print(n*q-y)\n", "import math\nfor _ in range(int(input())):\n    x,y,p,q = [int(x) for x in input().split()]\n    print(math.ceil(max((y-x)/(q-p),x/p,y/q))*q-y) if p%q else print(0) if (x*q == p*y) else print(-1)\n", "#https://codeforces.com/problemset/problem/773/A\n\nt = int(input())\nfor i in range(t):\n    x, y, p, q = list(map(int, input().split()))\n    left = -1\n    right = 10**9\n    r = right\n    while left + 1 < right:\n        t = (left + right) // 2\n        if p*t >= x and q*t - p*t >= y - x:\n            right = t\n        else:\n            left = t\n    if not (p*r >= x and q*r - p*r >= y - x):\n        print(-1)\n    else:\n        print(q*right - y)\n    \n", "from math import ceil\nfor _ in range(int(input())):\n    x, y, p, q = list(map(int, input().split()))\n    if p == q and x != y:\n        print(-1)\n    elif p == q:\n        print(0)\n    elif p == 0 and x == 0:\n        print(0)\n    elif p == 0:\n        print(-1)\n    else:\n        a = y // q\n        r = y % q\n        g1 = (x - p * a + p - 1) // p\n        g2 = ceil((x - r - p * a) / (p - q))\n        print(max(g1, g2) * q - r)\n", "import math\nfor _ in range(int(input())):\n    x, y, p, q = list(map(int,input().split()))\n    if p == 0 or  p == q :\n        print(0 if  x * q == p * y else  -1 )\n        continue    \n    n = math.ceil((y - x) / (q - p) )\n    n = max(n, math.ceil(x / p))\n    n = max(n, math.ceil(y / q))\n    print(n * q - y )\n", "T = int(input())\n\nfor t in range(T):\n  x, y, p, q = map(int, input().split())\n  if p == q and x != y:\n      print(-1)\n      continue\n\n  INF = 10000000000\n  lb = -1\n  ub = INF\n  mod_y = (q - y % q) % q\n\n  while ub - lb > 1:\n    mid = (ub + lb) // 2\n    diff = mod_y + q * mid\n    bunbo = y + diff\n    bunshi = p * bunbo // q\n    if bunshi >= x and bunshi - x <= diff:\n      ub = mid\n    else:\n      lb = mid\n  if ub == INF:\n    print(-1)\n  else:\n    print(mod_y + q * ub)", "def chec(a,b,p,q,mid):\n    if p*r>=a and (q-p)*mid>=b-a:\n        return True\n    else:\n        return False\ndef check(np, nq):\n  return np >= a and nq >= b and (np - a <= nq - b)    \nfor _ in range(int(input())):\n    a,b,p,q = list(map(int,input().split()))\n    l=0\n    r=10000000000\n    if check(p*r,q*r)==False:\n        print(-1)\n        continue\n    while l<=r:\n        mid = l +(r-l)//2\n        if check(p*mid,q*mid):\n            r=mid-1\n        else:\n            l=mid+1\n    print(l*q-b)\n", "def div(a, b):\n\treturn (a+b-1)//b\n\nfor t in range(int(input())):\n\tx,y,p,q = map(int,input().split())\n\tif q == 1:\n\t\tif p == 0 and x == 0 or p == 1 and x == y:\n\t\t\tprint(0)\n\t\telse:\n\t\t\tprint(-1)\n\telse:\n\t\tz = max(max(div(x,p),div(y,q)),max(div(y-x,q-p),0))\n\t\tprint(z*q-y)"]