["n = int(input())\nu = [int(u) for u in input().split()]\n\nNMAX = 100005\n\nsuma = [0 for _ in range(NMAX)]\ntotal = [0 for _ in range(NMAX)]\n\ndiferentes = 0\nsol = 0\nmaximo = 1\n\nfor i, v in enumerate(u):\n\tif total[v] == 0:\n\t\tdiferentes += 1\n\telse:\n\t\tsuma[total[v]] -= 1\n\ttotal[v] += 1\n\tsuma[total[v]] += 1\n\n\tmaximo = max(maximo, total[v])\n\n\t#print(i, v, \":\", diferentes)\n\t#print(suma)\n\t#print(total)\n\t#print(maximo, \":\", suma[maximo], suma[maximo+1], diferentes-1)\n\t#print(maximo, \":\", suma[maximo-1], suma[maximo], diferentes-1)\n\n\tif diferentes <= 1:\n\t\tsol = i\n\n\tif suma[maximo-1] == diferentes-1 and suma[maximo] == 1:\n\t\tsol = i\n\n\tif suma[maximo] == diferentes-1 and suma[1] == 1:\n\t\tsol = i\n\n\tif suma[1] == diferentes:\n\t\tsol = i\n\t\n\t#print(\"SOL\", sol)\n\nprint(sol+1)\n", "n = int(input())\na = [int(x) - 1 for x in input().split()]\ncounts = [0] * 10\nfor ind, i in enumerate(a):\n    counts[i] += 1\n    k = sorted([i for i in counts if i])\n    if len(k) == 1 or (k[0] == k[-2] and k[-1] - k[-2] == 1) or (k[0] == 1 and k[1] == k[-1]):\n        best = ind\nprint(best + 1)", "def main():\n    from sys import stdin, stdout\n\n    def read():\n        return stdin.readline().rstrip('\\n')\n\n    def read_array(sep=None, maxsplit=-1):\n        return read().split(sep, maxsplit)\n\n    def read_int():\n        return int(read())\n\n    def read_int_array(sep=None, maxsplit=-1):\n        return [int(a) for a in read_array(sep, maxsplit)]\n\n    def write(*args, **kwargs):\n        sep = kwargs.get('sep', ' ')\n        end = kwargs.get('end', '\\n')\n        stdout.write(sep.join(str(a) for a in args) + end)\n\n    def write_array(array, **kwargs):\n        sep = kwargs.get('sep', ' ')\n        end = kwargs.get('end', '\\n')\n        stdout.write(sep.join(str(a) for a in array) + end)\n\n    n = read_int()\n    nums = read_int_array()\n    counts = {}\n    import collections\n    inv_counts = collections.defaultdict(int)\n    out = 0\n    for i, x in enumerate(nums):\n        c = inv_counts[x]\n        if c:\n            counts[c].remove(x)\n            if not counts[c]:\n                counts.pop(c)\n        c += 1\n        inv_counts[x] = c\n        counts.setdefault(c, set()).add(x)\n        if len(counts) == 2 and any(len(s) == 1 and ((k-1 in counts) or k == 1) for k, s in list(counts.items())):\n            out = i + 1\n        elif len(counts) == 1:\n            k = next(iter(list(counts.keys())))\n            if k == 1 or len(counts[k]) == 1:\n                out = i + 1\n    write(out)\n\nmain()\n", "NUMS = [0 for i in range(10)]\n\ndef check(nums):\n    maxi = max(nums)\n    category = nums.count(maxi)\n    if category == 1:\n        oneof = 0\n        for n in nums:\n            if n == maxi:\n                continue\n            if n == 0:\n                continue\n            if oneof != 0 and (n != oneof or n != maxi - 1):\n                return False\n            oneof = n\n    \n        return True\n    \n    else:\n        if maxi != 1:\n            if nums.count(1) != 1:\n                return False\n            if nums.count(0) != len(nums) - category - 1:\n                return False\n            return True\n        else:\n            return True\n\nn = int(input())\ncolors = list(map(int, input().split()))\nres = 0\nfor i in range(n):\n    NUMS[colors[i] - 1] += 1\n    if check(NUMS):\n        res = i + 1\n\nprint(res)", "N = int(input())\nA = [int(a) for a in input().split()]\n\nC = [0] * 101010\nma = 0\nmacnt = 0\nposcnt = 0\ncntofone = 0\nans = 0\nfor i in range(N):\n    C[A[i]] += 1\n    if C[A[i]] > ma:\n        ma = C[A[i]]\n        macnt = 1\n    elif ma == C[A[i]]:\n        macnt += 1\n    if C[A[i]] == 1:\n        poscnt += 1\n        cntofone += 1\n    elif C[A[i]] == 2:\n        cntofone -= 1\n    if i <= 1 or (cntofone >= 1 and ((poscnt - 1) * ma == i)) or (macnt == 1 and (poscnt * (ma - 1) == i)):\n        ans = i + 1\n\nprint(ans)\n", "n = int(input())\nl = list(map(int,input().split()))\nm =[0 for i in range(11)]\nwyn = 0\nfor i in range(n):\n\tm[l[i]] += 1\n\tb = [m[i] for i in range(11) if m[i] != 0]\n\tb = sorted(b)\n\t#print(b)\n\tif len(b) == 1:\n\t\twyn = i + 1\n\tif len(b) > 1:\n\t\tif b[0] == 1 and sum(b) == 1 + len(b)*b[1]-b[1]:\n\t\t\twyn = i + 1\n\t\telse:\n\t\t\tif (b[0] == b[-2] and b[-1] == b[0] + 1):\n\t\t\t\twyn = i + 1\nprint(wyn)", "n = int(input())\na = list(map(int, input().split()))\nc = [0] * 11\nma = 1\nfor i in range(n):\n    c[a[i]] += 1\n    for k in range(1, 11):\n        if c[k] > 0:\n            c[k] -= 1\n            s = {}\n            for j in range(1, 11):\n                if c[j] > 0:\n                    if c[j] not in s:\n                        s[c[j]] = 1\n                    else:\n                        s[c[j]] += 1\n            c[k] += 1\n            if len(s) == 1:\n                ma = max(ma, i + 1)\n                break\n\nprint(ma)\n", "n = int(input())\narr = list(map(int, input().split()))\nd = [0] * 10\nmax_ = 1\nfor i in range(n):\n    d[arr[i] - 1] += 1\n    lol = sorted([x for x in d if x > 0])\n    kek = True\n    for j in range(len(lol) - 2):\n        if lol[j] != lol[j + 1]:\n            kek = False\n            break\n    if kek and len(lol) == 1:\n        max_ = max(max_, i + 1)\n        continue\n    elif kek and lol[-1] - 1 == lol[-2]:\n        max_ = max(max_, i + 1)\n        continue\n\n    kek = True\n    for j in range(1, len(lol) - 1):\n        if lol[j] != lol[j + 1]:\n            kek = False\n            break\n    if kek and lol[0] - 1 == 0:\n        max_ = max(max_, i + 1)\nprint(max_)\n", "ii = lambda:int(input())\nkk=lambda:list(map(int,input().split()))\nk2=lambda:[int(x)-1 for x in input().split()]\nll=lambda:list(kk())\nn=ii()\nd = [0]*10\nmaxi = 2\nfor j,v in enumerate(k2()):\n\td[v]+=1\n\tvs = {}\n\tfor i in range(10):\n\t\tif d[i] ==0: continue\n\t\tif d[i] not in vs: vs[d[i]] = 0\n\t\tvs[d[i]]+=1\n\tif len(vs) >2: continue\n\tif len(vs) == 2:\n\t\tval = max(list(vs.keys()))\n\t\tif (1 in vs and vs[1]==1) or(val-1 in vs and vs[val]==1): \n\t\t\tmaxi = j\n\telif len(vs) == 1 and (1 in vs or d.count(0) == 9):\n\t\tmaxi = j\n\nprint(max(maxi+1, min(2, n)))\n", "n = int(input())\na = list(map(int,input().split()))\nb = [0]*11\nm = 0\nb[a[0]] = 1\nfor i in range(1,n):\n    b[a[i]]+=1\n    c = set(b)\n    if len(c)==2:\n        c = sorted(c)\n        t = c[0] + c[1]\n        if 1 in c:\n            m = i\n        elif b.count(t)==1:\n            m = i\n        \n        \n        \n    elif len(c)==3:\n        d = sorted(c)\n        if d[1] == 1 and b.count(1)==1:\n            m = i\n        elif d[2]-d[1] == 1 and b.count(d[2])==1:\n            m = i\n\n    \nprint(m+1)", "from random import random\nfrom collections import defaultdict\nimport math\nimport re\nimport fractions\n\nN = int(input())\n# N, M = map(int, input().split(\" \"))\nA = list(map(int, input().split(\" \")))\narr = [0]*(10**5+1)\nexisting = set()\nfor a in A:\n  arr[a] += 1\n  existing.add(a)\n\naccumulate = defaultdict(int)\nfor count in arr:\n  accumulate[count] += 1\n\nfor i in range(len(A)-1, -1, -1):\n  a = A[i]\n  length = i+1\n\n  if len(existing) in [0, 1, length]:\n    break\n\n  expected_1 = (i+1-1)//(len(existing)-1)\n  if accumulate[expected_1] * expected_1 + 1 == length and accumulate[1] == 1:\n    break\n\n  expected_k_1 = (i+1-1)//len(existing)\n  if accumulate[expected_k_1] * expected_k_1 + expected_k_1 + 1 == length and accumulate[expected_k_1+1] == 1:\n    break\n\n  accumulate[arr[a]] -= 1\n  arr[a] -= 1\n  if arr[a] == 0:\n    existing.discard(a)\n  accumulate[arr[a]] += 1\n  # print(accumulate)\nprint(length)\n\n", "n = int(input())\na = list(map(int,input().split()))\n\nd = {}\nfor i in range(n):\n\td[a[i]] = 0\n\n\n# numOdd = 0\n# for i in range(n):\n# \td[a[i]] += 1\n\n# \tif(d[a[i]] % 2 != 0):\n# \t\tnumOdd += 1\n\n# \telse:\n# \t\tnumOdd -= 1\n\n# \tif(numOdd == 1):\n# \t\tx = i+1\n\n# print(x)\n\nx = 1\nfor i in range(1,n):\n\tif(a[i] == a[i-1]):\n\t\t# print(\"yo\")\n\t\tx = i+1\n\telse:\n\t\tbreak\n\nfor i in range(n):\n\td[a[i]] += 1\n\n\tl = list(d.values())\n\tl = list(set(l))\n\tll = list(d.values())\n\tl.sort()\n\t# print(l)\n\tif(l[0] == 0):\n\t\tl.pop(l[0])\n\t\n\tif(len(l) == 2):\n\t\tif(abs(l[0] - l[1]) == 1 and ll.count(l[1]) == 1):\n\t\t\tx = max(x,i+1)\n\t\telif(l[0] == 1 and ll.count(1) == 1):\n\t\t\tx = max(x,i+1)\n\tif(len(l) == 1 and l[0] == 1):\n\t\tx = max(x,i+1)\n\nprint(x)", "n = int(input())\n\na = list(map(int,input().split()))\nif(n == 1 or n == 2):\n    print(n)\n    return\nnotpar = 0\nocc = [0 for i in range(10**5 + 1)]\nbase = 1\ngotone = False\nleader = -1\nleadby = 0\nbest = 0\nocc[a[0]] += 1\ncnt = 1\nat1 = 1\n\n\n\nfor i in range(1, n):\n    occ[a[i]] +=1\n    \n    if(occ[a[i]] == 1):\n        notpar += 1\n        at1 += 1\n        cnt += 1\n    elif(occ[a[i]] == 2):\n        at1 -= 1\n    if(occ[a[i]] == base):\n        notpar -= 1\n    elif(occ[a[i]] > base):\n        if(gotone):\n            if(a[i] != leader):\n                base += 1\n                notpar = cnt - 2\n                leadby -= 1\n                if(leadby == 0):\n                    gotone = False\n                    leader = -1\n            else:\n                leadby += 1\n        else:\n            gotone = True\n            leader = a[i]\n            leadby = 1\n    if(notpar == 0 and (leadby == 1 or (leadby == 0 and base == 1)) or (notpar == 1 and leadby == 0 and at1 > 0)):\n        best = i + 1\n    if(cnt == 1):\n        best = i + 1\n    #print(i, base, leader, leadby, gotone, notpar, cnt)\nprint(best)\n                    \n                    \n", "\n# -*- coding: utf-8 -*-\n\ndef __starting_point():\n    n  = int(input())\n    a = list(map(int, input().split()))\n    b = [0 for i in range(10)]\n    pos = 1\n    for i in range(n):\n        b[a[i]-1]+=1\n        c = []\n        for j in range(10):\n            if (b[j]>0):\n                c.append(b[j])\n        c.sort()\n        if (c[len(c)-1]==i+1) or (c[len(c)-1]==c[len(c)-2]+1 and c[len(c)-2]==c[0])\\\n            or (c[len(c)-1]==c[1] and c[0]==1):\n            pos = i+1\n    print(pos)\n__starting_point()", "n = int(input())\na = list(map(int, input().split()))\ndic = {a[0]:1}\n#board= ['*']*11\nsu = 1\nkq = 1\nfor i in range(1, n):\n    if dic.get(a[i], 0)==0:\n        dic.update({a[i]:1})\n    else:\n        dic[a[i]]+=1\n    su+=1\n    cach = len(list(dic.keys()))\n    c = 0\n    c_=0\n    for z in list(dic.keys()):\n        if cach==1:\n            continue\n        if cach == su:\n            kq = su\n            continue\n        if dic[z]== (su-1)/(cach-1):\n            c+=1\n        if dic[z]== (su-1)/cach:\n            c_+=1\n    if c==cach-1 or c_==cach-1:\n        kq = su\n\nprint(kq)       \n    \n", "import sys\n\nn = int(input())\nnums = list(map(int, input().split()))\neleCount = {}\npossibleMax = 1\nfor i in range(n):\n    if nums[i] in list(eleCount.keys()):\n        eleCount[nums[i]] += 1\n        if len(list(eleCount.keys())) == 1:\n            possibleMax = i+1\n        else:\n            x = list(eleCount.values())\n            x.sort()\n            if x[0] == 1 and x[-1] == 1:\n                possibleMax = i + 1\n            elif x[0] == 1 and x[1] != 1:\n                if len(set(x[1:])) == 1:\n                    possibleMax = i + 1\n            else:\n                x[-1] = x[-1] - 1\n                if len(set(x)) == 1:\n                    possibleMax = i + 1\n    else:\n        eleCount[nums[i]] = 1\n        if len(list(eleCount.keys())) == 1:\n            possibleMax = i+1\n        else:\n            x = list(eleCount.values())\n            x.sort()\n            if x[0] == 1 and x[-1] == 1:\n                possibleMax = i + 1\n            elif x[0] == 1 and x[1] != 1:\n                if len(set(x[1:])) == 1:\n                    possibleMax = i + 1\n            else:\n                x[-1] = x[-1] - 1\n                if len(set(x)) == 1:\n                    possibleMax = i + 1\nprint(possibleMax)\n", "n = int(input())\na = [int(i) for i in input().split()]\nb=[]\nfor i in range(11):\n    b.append(0)\nm = 0\nb[a[0]] = 1\nfor i in range(1,n):\n    b[a[i]]+=1\n    c = set(b)\n    if len(c)==2:\n        c = sorted(c)\n        t = c[0] + c[1]\n        if 1 in c:\n            m = i\n        elif b.count(t)==1:\n            m = i\n        \n        \n        \n    elif len(c)==3:\n        d = sorted(c)\n        if d[1] == 1 and b.count(1)==1:\n            m = i\n        elif d[2]-d[1] == 1 and b.count(d[2])==1:\n            m = i\n\n    \nprint(m+1)", "def check():\n    mn = float('inf')\n    mx = 0\n    k = 0\n    for i in mas:\n        if i != 0:\n            k += 1\n            mx = max(mx, i)\n            mn = min(mn, i)\n    if (mx - mn <= 1 and mas.count(mx) == 1) or (mn == 1 and k == 1 + mas.count(mx)) or (mn == mx == 1):\n        return True\n    return False\nn = int(input())\nl = list(map(int, input().split()))\nmas = [0] * 10\nans = 0\nfor i in range(n):\n    mas[l[i] - 1] += 1\n    if check():\n        #print(i)\n        #print('check')\n        ans = i\nprint(ans + 1)", "# -*- coding: utf-8 -*-\n# @Time    : 2019/5/9 23:15\n# @Author  : LunaFire\n# @Email   : gilgemesh2012@gmail.com\n# @File    : B1. Cat Party (Easy Edition).py\n\nfrom collections import Counter\n\n\ndef check(counter, curr_len, curr_color, curr_one):\n    if curr_len == 1 or curr_color == 1 or curr_one == curr_len:\n        return True\n\n    # if curr_len == 13:\n    #     print(counter)\n    if curr_one == 1:\n        curr_color -= 1\n    if (curr_len - 1) % curr_color != 0:\n        return False\n    correct_num = (curr_len - 1) // curr_color\n    # if curr_len == 13:\n    #     print(correct_num)\n\n    false_count, false_num = 0, 0\n    for i in range(1, 11):\n        if counter[i] != correct_num and counter[i] != 0:\n            false_count += 1\n            false_num = counter[i]\n    # if curr_len == 13:\n    #     print(false_count)\n\n    return false_count == 1 and (false_num - 1 == correct_num or false_count - 1 == 0)\n\n\ndef main():\n    n = int(input())\n    u = list(map(int, input().split()))\n\n    counter = Counter()\n    max_days, curr_color, curr_one = 0, 0, 0\n    for i in range(n):\n        if counter[u[i]] == 0:\n            curr_color += 1\n            curr_one += 1\n\n        if counter[u[i]] == 1:\n            curr_one -= 1\n\n        counter[u[i]] += 1\n        if check(counter, i + 1, curr_color, curr_one):\n            max_days = i + 1\n    print(max_days)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]