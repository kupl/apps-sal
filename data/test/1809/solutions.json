["line = input().split()\nn = int(line[0])\nm = int(line[1])\n\nW = [int(w) for w in input().split()]\nB = [int(b) for b in input().split()]\n\nans = 0\nlst = [0 for i in range(n)]\nfor i in range(m):\n    arr = list(lst)\n    for j in range(i):\n        if B[i - j - 1] == B[i]:\n            break\n        arr[B[i - j - 1] - 1] = 1\n    for i in range(n):\n        if arr[i] == 1:\n            ans += W[i]\nprint(ans)\n            \n", "\"\"\"\nCodeforces Contest Good Bye 2014 Contest Problem C\n\nAuthor  : chaotic_iak\nLanguage: Python 3.4.2\n\"\"\"\n\n################################################### SOLUTION\n\ndef main():\n    n,m = read()\n    w = read()\n    b = read()\n    bookset = set(range(1,n+1))\n    print(solve(b, w, bookset, n))\n\ndef solve(b, w, bookset, n):\n    if len(b) <= 1: return 0\n    used = [0] * (n+1)\n    sm = 0\n    for i in range(len(b)):\n        if not used[b[i]]:\n            sm += 1\n        if sm == len(bookset):\n            res = solve(b[:i], w, bookset - {b[i]}, n)\n            for j in range(i, len(b)):\n                for k in range(n+1):\n                    if used[k] > used[b[j]]: res += w[k-1]\n                used[b[j]] = j+1\n            return res\n        used[b[i]] = i+1\n    bookset = set(filter(lambda x: x, used))\n    return solve(b, w, bookset, n)\n\n#################################################### HELPERS\n\n\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0: return inputs\n    if mode == 1: return inputs.split()\n    if mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\nwrite(main())", "import sys\nsys.setrecursionlimit(10 ** 9)\n\nn, m = map(int, input().split())\nw = [int(i) for i in input().split()]\narr = [(int(i) - 1) for i in input().split()]\nv = []\ns = 0\nused = [False] * n\nfor i in range(m):\n    if not used[arr[i]]:\n        used[arr[i]] = True\n        v.append(arr[i])\nfor i in range(m):\n    j = 0\n    while v[j] != arr[i]:\n        s += w[v[j]]\n        j += 1\n    #print(v)\n    v = [v[j]] + v[0:j] + v[j + 1:]\nprint(s)", "n,m = list(map(int,input().split()))\nw = list(map(int,input().split()))\nb = list(map(int,input().split()))\nwhen = []\n\nj = n+m\nfor i in range(n):\n    try:\n        j = b.index(i+1)\n    except:\n        pass\n    if j != n+m:\n        when.append([j,i])\n    j = n+m\n\nwhen = list(sorted(when))\nstack = []\nfor i in range(len(when)):\n    stack.append(when[i][1])\n\ncount = 0\nwhere = n+m\nfor i in range(m):\n    where = stack.index(b[i]-1)\n    for j in range(where):\n        count += w[stack[j]]\n    stack = [stack[where]]+stack[:where]+stack[where+1:]\n\nprint(count)\n", "import sys\n\ndef main():\n    n,m = tuple([int(x) for x in input().split()])\n    w = [int(x) for x in input().split()]\n    b = [int(x) - 1 for x in input().split()]\n    o = []\n    for i in range(m):\n        if len(o) == n:\n            break\n        if b[i] not in [x[0] for x in o]:\n            o.append((b[i],w[b[i]]))\n    s = 0\n    for i in range(m):\n        ind = [o[i][0] for i in range(len(o))].index(b[i]) \n        s += sum([o[i][1] for i in range(ind)])\n        el = o.pop(ind)\n        o.insert(0,el)\n    print(s)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, m = list(map(int, input().split()))\nw = list(map(int, input().split()))\nb = list(map(int, input().split()))\nans = list()\nused = [False] * (n + 1)\nfor i in range(len(b)):\n    if not used[b[i]]:\n        ans.append(b[i])\n        used[b[i]] = True\nanss = 0\nfor i in range(len(b)):\n    top = -1\n    for j in range(len(ans)):\n        if ans[j] == b[i]:\n            top = ans[j]\n            \n            for k in range(j, 0, -1):\n                ans[k] = ans[k - 1]\n                anss += w[ans[k - 1] - 1]\n            break\n    ans[0] = top\nprint(anss)\n", "from collections import deque\n\ndef intput():\n    return [int(x) for x in input().split(\" \")]\n\n\ndef main(ws, ords):\n    stack = []\n    seen = set()\n    for o in ords:\n        if o not in seen:\n            stack.append(o)\n            seen.add(o)\n        if len(stack) == len(ws):\n            break\n\n    s = 0\n    for o in ords:\n        idx = stack.index(o)\n        # print(stack, o, idx)\n        w = [ws[b - 1] for b in stack[:idx]]\n        # print(w)\n        s += sum(w)\n        stack.insert(0, stack.pop(idx))\n\n    print(s)\n\ndef parse():\n    _ = intput()\n    ws = intput()\n    ords = intput()\n    # print(ws, ords)\n    return ws, ords\n\nmain(*parse())\n", "from itertools import permutations as perm\n\n\ndef weigh(seq, order_seq):\n    ret = 0\n    w_seq = list(seq[:])\n    for idx,i in enumerate(order_seq):\n        for book_idx in w_seq[:w_seq.index(i)]:\n            # print(book_idx)\n            ret += weights[book_idx-1]\n        w_seq.insert(0, w_seq.pop(w_seq.index(i)))\n    return ret\n\nn, m = tuple(map(int, input().split(' ')))\nweights = tuple(map(int, input().split(' ')))\norder = tuple(map(int, input().split(' ')))\n\nalready = []\nfor i in order:\n    if i not in already:\n        already.append(i)\nprint(weigh(already, order))\n\n\n# min_ret = 100001\n# for p in perm([x for x in range(1,n+1)]):\n#     # print(p)\n#     w = weigh(p, order)\n#     if w < min_ret:\n#         min_ret = w\n# print(min_ret)\n", "__author__ = 'Rakshak.R.Hegde'\n\"\"\"\nCreated on Dec 30 2014 PM 09:40\n\n@author: Rakshak.R.Hegde\n\"\"\"\n\nfrom collections import deque\nfrom bisect import bisect\n\n\ndef mint(): return map(int, input().split())\n\n\nn, m = mint()\nw = tuple(mint())\nb = mint()\nstack = []\nlifts = 0\nfor x in b:\n    for i, v in enumerate(stack):\n        if v == x:\n            stack.pop(i)\n            break\n    else:\n        i = 0\n    # print('i:{}; stack:{}'.format(i, stack))\n    for i in range(i, len(stack)):\n        lifts += w[stack[i] - 1]\n    stack.append(x)\nprint(lifts)", "a, b = list(map(int, input().split(' ')))\nc = list(map(int, input().split(' ')))\nd = list(map(int, input().split(' ')))\ne = []\ndictx = {}\nfor i in range(1, a+1):\n    dictx[i] = c[i-1]\nfor i in d:\n    if i not in e:\n        e.append(i)\n\ntot = 0\nfor i in d:\n    indx = e.index(i)\n    tot += sum([dictx[i] for i in e[:indx]])\n    e = [e[indx]] + e[:indx] + e[indx+1:]\nprint(tot)\n", "n,m=map(int,input().split())\nw=list(map(int,input().split()))\nb=list(map(int,input().split()))\nA=0\nfor i in range(m):\n d,j={},i-1\n while j>=0 and b[j]!=b[i]:\n  if (d.get(b[j],1)):\n   A+=w[b[j]-1]\n   d[b[j]]=0\n  j-=1\nprint(A)", "#!/usr/bin/env python3\n\nn, m = list(map(int, input().split()))\nw = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nans = 0\nfor i in range(m):\n    flag = dict()\n    for j in range(i-1, -1, -1):\n        if b[j] == b[i]:\n            break\n        if flag.get(b[j], True):\n            ans += w[b[j] - 1]\n            flag[b[j]] = False\n\nprint(ans)\n", "input()\nw = list(map(int, input().split()))\nb = list(map(int, input().split()))\na = []\nans = 0\nfor x in b:\n    x -= 1\n    cur_sum = 0\n    for i, num in enumerate(a):\n        if num == x:\n            a = [num] + a[:i] + a[i + 1:]\n            break\n        cur_sum += w[num]\n    else:\n        a = [x] + a\n    ans += cur_sum\nprint(ans)", "def ans():\n    n, m= [int(i) for i in input().split()]\n    w= [int(i) for i in input().split()]\n    b= [int(i) for i in input().split()]\n    \n    books= []\n    for i in b:\n        if i not in books:\n            books.append(i)\n    \n    #print(books, w)\n    ans= 0        \n    for i in b:\n        arr= books[:books.index(i)]\n        #print(i, arr, \"h\")\n        for j in arr:\n            ans+= w[j-1]\n            #print(i, j, w[i-1], ans)\n        \n        books.remove(i)\n        books.insert(0, i)\n    \n    print(ans)\n    return\n\nans()", "input()\nw = list(map(int, input().split()))\nb = list(map(int, input().split()))\na = []\nans = 0\nfor x in b:\n    x -= 1\n    cur_sum = 0\n    for i, num in enumerate(a):\n        if num == x:\n            a = [num] + a[:i] + a[i + 1:]\n            break\n        cur_sum += w[num]\n    else:\n        a = [x] + a\n    ans += cur_sum\nprint(ans) ", "n, m = [int(x) for x in input().split()]\nw = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nans = 0\nstate = [0] * n\nused = [0] * n\nptr = 0\nfor i in b:\n\tif not used[i - 1]:\n\t\tused[i - 1] = 1\n\t\tstate[ptr] = (i, w[i - 1])\n\t\tptr += 1\nfor i in b:\n\tind = state.index((i, w[i - 1]))\n\tans += sum(x[1] for x in state[: ind])\n\tstate = [state[ind]] + state[: ind] + state[ind + 1: ]\nprint(ans)\n", "N_M=list(map(int,input().split()))\nWeights=list(map(int,input().split()))\nGood_Books=list(map(int,input().split()))\nTimes=[]\nCount=sum(N_M)\nfor I in range(N_M[0]):\n    try:\n        Count=Good_Books.index(I+1)\n    except ValueError:\n        pass\n    if not Count==sum(N_M):\n        Times.append([Count,I])\n    Count=sum(N_M)\nTimes.sort()\nTimes=list(Times)\nHeap=[]\nfor I in range(len(Times)):\n    Heap.append(Times[I][1])\nCount=0\nPositions=sum(N_M)\nfor I in range(N_M[1]):\n    Positions=Heap.index(Good_Books[I]-1)\n    for I_2 in range(Positions):\n        Count+=Weights[Heap[I_2]]\n    Heap=[Heap[Positions]]+Heap[:Positions]+Heap[Positions+1:]\nprint(Count)\n", "#!/usr/bin/env python3\n\nn, m = (int(x) for x in input().split())\nw = [int(x) for x in input().split()]  # len(w) == n\nb = [int(x) - 1 for x in input().split()]  # len(b) == m\n\nvisited = [False] * n\nstack = []\nfor book in b:\n    if not visited[book]:\n        stack.append(book)\n        visited[book] = True\nstack.reverse()\n\ntotal_weight = 0\nfor reading in b:\n    p = len(stack) - 1\n    while stack[p] != reading:\n        total_weight += w[stack[p]]\n        p -= 1\n    else:\n        stack.__delitem__(p)\n        stack.append(reading)\n\nprint(total_weight)", "def main():\n    input()\n    ww = list(map(int, input().split()))\n    bb = [int(_) - 1 for _ in input().split()]\n    aa = []\n    for i in bb:\n        if i not in aa:\n            aa.append(i)\n    aa.reverse()\n    tot = 0\n    for b in bb:\n        idx = aa.index(b)\n        del aa[idx]\n        tot += sum([ww[_] for _ in aa[idx:]])\n        aa.append(b)\n    print(tot)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, m = map(int,input().split())\nw = [int(x) for x in input().split()]\nb = [(int(x)-1) for x in input().split()]\nw  += [0]\na = 0\nfor i in range(m):\n    for j in range(i-1,-1,-1):\n        if b[j] == b[i]:\n            b[j] = n\n            break\n        a += w[b[j]]\nprint(a)", "n, m = map(int, input().split())\nw = [0] + list(map(int, input().split()))\nt, p = [], [0] * (n + 1)\ns = 0\nfor i in map(int, input().split()):\n    if p[i]:\n        k = t.index(i)\n        s += sum(w[j] for j in t[k + 1: ])\n        t.append(t.pop(k))\n    else:\n        s += sum(w[j] for j in t)\n        t.append(i)\n        p[i] = 1\nprint(s)", "# coding: utf-8\nn, m = [int(i) for i in input().split()]\nw = [0]+[int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nbooks = []\nfor book in b:\n    if book not in books:\n        books.append(book)\nbooks.reverse()\nans = 0\nfor book in b:\n    index = books.index(book)\n    ans += sum([w[i] for i in books[index+1:]])\n    del(books[index])\n    books.append(book)\nprint(ans)\n", "books,reads=list(map(int,input().split()))\n\nbooksw=list(map(int,input().split()))\n\nreadl=list(map(int,input().split()))\n\nres=[]\n\nfor b in readl:\n    if(b not  in res):\n        res.append(b)\nsum=0\nfor l in readl:\n    for b in res:\n        if(b==l):\n            res.remove(b)\n            poped=b\n            break\n        sum=sum+booksw[b-1]\n    res=[poped]+res\n\nprint(sum)\n", "def f(s):\n    return int(s) - 1\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(f, input().split()))\nc = [[0] * n for i in range(n)]\no = 0\nfor i in range(m):\n    for j in range(n):\n        if j != b[i]:\n            c[j][b[i]] = 1\n    for j in range(n):\n        if c[b[i]][j] == 1:\n            o += a[j]\n        c[b[i]][j] = 0\nprint(o)", "n,m=list(map(int,input().split()))\nw=list(map(int,input().split()))\nl=list(map(int,input().split()))\nk=0\nf=[]\nfor x in l :\n    x-=1\n    if x not in f :\n        for y in f :\n            k+=w[y]\n        f=[x]+f\n    else :\n        for i in range(len(f)) :\n            if f[i]!=x :\n                k+=w[f[i]]\n            else :\n                break\n        del(f[i])\n        f=[x]+f\nprint(k)\n        \n    \n        \n        \n        \n"]