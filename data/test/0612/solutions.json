["n, k, p = [int(c) for c in input().split()]\na = [int(c) for c in input().split()]\n\nnech= []\nch = []\n\nfor i in range(len(a)):\n    if a[i] % 2 == 0:\n        ch.append(a[i])\n    else:\n        nech.append(a[i])\n\nneeded_nech = k - p\n\nfree_nech = len(nech) - needed_nech\nav_ch = len(ch) + (free_nech // 2)\n\nsets = []\n\n\nif free_nech < 0 or free_nech % 2 != 0 or av_ch < p:\n    print('NO')\nelse:\n    print('YES')\n    while needed_nech > 0:\n        sets.append([nech.pop()])\n        needed_nech -= 1\n\n    while p > 0:\n        if len(ch) > 0:\n            sets.append([ch.pop()])\n        else:\n            sets.append([nech.pop(), nech.pop()])\n        p -= 1\n\n    sets[0] = sets[0] + nech + ch\n\nfor i in range(len(sets)):\n    print(len(sets[i]),' '.join(map(str,sets[i])))", "def solve():\n\tn, k, p = list(map(int, input().split()))\n\ta = list(map(int, input().split()))\n\n\teven = list([x for x in a if x % 2 == 0])\n\todd = list([x for x in a if x % 2 == 1])\n\n\tif (len(odd) - (k - p)) % 2 != 0:\n\t\tprint('NO')\n\t\treturn\n\n\tans = [[] for _ in range(k)]\n\n\tfor i in range(k - p):\n\t\tif odd:\n\t\t\tans[i].append(odd.pop())\n\t\telse:\n\t\t\tprint('NO')\n\t\t\treturn\n\n\tfor i in range(k - p, k):\n\t\tif even:\n\t\t\tans[i].append(even.pop())\n\t\telif len(odd) >= 2:\n\t\t\tans[i].append(odd.pop())\n\t\t\tans[i].append(odd.pop())\n\t\telse:\n\t\t\tprint('NO')\n\t\t\treturn\n\n\tans[0] += even\n\tans[0] += odd\n\tprint('YES')\n\tfor part in ans:\n\t\tprint(len(part), ' '.join(map(str, part)))\n\nsolve()\n", "def solve():\n\tn, k, p = list(map(int, input().split()))\n\ta = list(map(int, input().split()))\n\n\teven = list([x for x in a if x % 2 == 0])\n\todd = list([x for x in a if x % 2 == 1])\n\n\tif (len(odd) - (k - p)) % 2 != 0:\n\t\tprint('NO')\n\t\treturn\n\n\tans = [[] for _ in range(k)]\n\n\tfor i in range(k - p):\n\t\tif odd:\n\t\t\tans[i].append(odd.pop())\n\t\telse:\n\t\t\tprint('NO')\n\t\t\treturn\n\n\tfor i in range(k - p, k):\n\t\tif even:\n\t\t\tans[i].append(even.pop())\n\t\telif len(odd) >= 2:\n\t\t\tans[i].append(odd.pop())\n\t\t\tans[i].append(odd.pop())\n\t\telse:\n\t\t\tprint('NO')\n\t\t\treturn\n\n\tans[0] += even\n\tans[0] += odd\n\tprint('YES')\n\tfor part in ans:\n\t\tprint(len(part), ' '.join(map(str, part)))\n\nsolve()\n", "def solve():\n\tn, k, p = list(map(int, input().split()))\n\ta = list(map(int, input().split()))\n\n\teven = list([x for x in a if x % 2 == 0])\n\todd = list([x for x in a if x % 2 == 1])\n\n\tif (len(odd) - (k-p)) % 2 != 0:\n\t\tprint('NO')\n\t\treturn\n\n\tans = [[] for i in range(k)]\n\n\tfor i in range(k-p):\n\t\tif odd:\n\t\t\tans[i].append(odd.pop())\n\t\telse:\n\t\t\tprint('NO')\n\t\t\treturn\n\n\tfor i in range(k-p, k):\n\t\tif even:\n\t\t\tans[i].append(even.pop())\n\t\telif len(odd) >= 2:\n\t\t\tans[i].append(odd.pop())\n\t\t\tans[i].append(odd.pop())\n\t\telse:\n\t\t\tprint('NO')\n\t\t\treturn\n\n\tans[0] += even+odd\n\tprint('YES')\n\tfor part in ans:\n\t\tprint(len(part), ' '.join(map(str, part)))\n\ndef __starting_point():\n\tsolve()\n\n__starting_point()", "n,k,p = list(map(int,input().split()))\nl = list(map(int,input().split()))\neven = list([x for x in l if x %2 ==0])\nodd = list([x for x in l if x%2 == 1])\n\nif (len(odd) - (k-p))% 2!=0:\n    print(\"NO\")\n    return\nans = [[] for _ in range(k)]\nfor i in range(k-p):\n    if odd:\n        ans[i].append(odd.pop())\n    else:\n        print(\"NO\")\n        return\n\nfor i in range(k-p,k):\n    if even:\n        ans[i].append(even.pop())\n    elif len(odd)>=2:\n        ans[i].append(odd.pop())\n        ans[i].append(odd.pop())\n    else:\n        print(\"NO\")\n        return\n\nans[0] += even + odd\nprint(\"YES\")\nfor i in ans:\n    print(len(i),\" \".join(map(str,i)))\n", "n,k,p = list(map(int,input().split()))\nl = list(map(int,input().split()))\nodd,even=[],[]\nfor i in l:\n    if i%2:\n        odd.append(i)\n    else:\n        even.append(i)\nif (len(odd) - (k-p))% 2!=0:\n    print(\"NO\")\n    return\nans = [[] for _ in range(k)]\nfor i in range(k-p):\n    if odd:\n        ans[i].append(odd.pop())\n    else:\n        print(\"NO\")\n        return \nfor i in range(k-p,k):\n    if even:\n        ans[i].append(even.pop())\n    elif len(odd)>=2:\n        ans[i].append(odd.pop())\n        ans[i].append(odd.pop())\n    else:\n        print(\"NO\")\n        return\nans[0] += even + odd\nprint(\"YES\")\nfor i in ans:\n    print(len(i),*i)\n"]