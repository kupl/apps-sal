["n = int(input())\na = [tuple(map(int, input().split())) for _ in range(n)]\ns = {a[q]: q+1 for q in range(n)}\na.sort()\nq, q1 = 0, 1\nd, d1, d2 = [[[a[0]]]], [], []\nwhile q1 < n:\n    while q1 < n and a[q][0] == a[q1][0]:\n        while q1 < n and a[q][1] == a[q1][1]:\n            d[-1][-1].append(a[q1])\n            q1 += 1\n        if q1 < n and a[q][0] == a[q1][0]:\n            d[-1].append([a[q1]])\n            q = q1\n            q1 += 1\n    if q1 < n:\n        d.append([[a[q1]]])\n        q = q1\n        q1 += 1\nfor q in range(len(d)):\n    for q1 in range(len(d[q])):\n        for q2 in range(1, len(d[q][q1]), 2):\n            print(s[d[q][q1][q2-1]], s[d[q][q1][q2]])\n        if len(d[q][q1]) % 2 == 1:\n            d[q][q1] = d[q][q1][-1]\n        else:\n            d[q][q1] = -1\nfor q in range(len(d)):\n    d1.append([])\n    for q1 in range(len(d[q])):\n        if d[q][q1] != -1:\n            d1[-1].append(d[q][q1])\nfor q in range(len(d1)):\n    for q1 in range(1, len(d1[q]), 2):\n        print(s[d1[q][q1-1]], s[d1[q][q1]])\n    if len(d1[q]) % 2 == 1:\n        d2.append(d1[q][-1])\nfor q in range(1, len(d2), 2):\n    print(s[d2[q-1]], s[d2[q]])\n", "import sys\n\nn = -1\ndata = []\nfor line in sys.stdin:\n    if n == -1:\n        n = int(line)\n        continue\n    data.append(tuple([int(i) for i in line.split()]))\n    if len(data) == n:\n        break\n\ndata = list(zip(data, list(range(1, n+1))))\ndata.sort()\n\ndata2 = []\nremovedLast = False\nfor i in range(n):\n    if removedLast:\n        removedLast = False\n        continue\n    if i+1<n and data[i][0][0] == data[i+1][0][0] and data[i][0][1] == data[i+1][0][1]:\n        print(\"%d %d\"%(data[i][1], data[i+1][1]))\n        removedLast = True\n    else:\n        data2.append(data[i])\n\ndata3 = []\nremovedLast = False\nfor i in range(len(data2)):\n    if removedLast:\n        removedLast = False\n        continue\n    if i+1<len(data2) and data2[i][0][0] == data2[i+1][0][0]:\n        print(\"%d %d\"%(data2[i][1], data2[i+1][1]))\n        removedLast = True\n    else:\n        data3.append(data2[i])\n\nfor i in range(0, len(data3), 2):\n    print(\"%d %d\"%(data3[i][1], data3[i+1][1]))\n    \n", "from sys import stdin,stdout\nn=int(stdin.readline())\nl=[]\nfor i in range(n):\n    x=list(map(int,stdin.readline().split()))\n    l.append([x,i+1])\nl.sort()\n#print(l)\ndeleted=[0]*n\nfor i in range(n-1):\n    if deleted[i]:\n        continue\n    if l[i][0][0]==l[i+1][0][0] and l[i][0][1]==l[i+1][0][1]:\n        print(l[i][1],l[i+1][1])\n        deleted[i]=deleted[i+1]=1\nremaining=[]\nfor i in range(n):\n    if deleted[i]==0:\n        remaining.append(l[i])\ndel deleted\nn=len(remaining)\ndeleted=[0]*n\nfor i in range(n-1):\n    if deleted[i]:\n        continue\n    if remaining[i][0][0]==remaining[i+1][0][0]:\n        print(remaining[i][1],remaining[i+1][1])\n        deleted[i]=deleted[i+1]=1\nlast=[]\nfor i in range(n):\n    if deleted[i]==0:\n        last.append(remaining[i])\nfor i in range(0,len(last),2):\n    print(last[i][1],last[i+1][1])\n", "import sys\nfrom collections import defaultdict\nreadline = sys.stdin.readline\n        \nN = int(readline())\n\nXYZ = [tuple(map(int, readline().split())) for _ in range(N) ]\nXYZI = [(x, y, z, i) for i, (x, y, z) in enumerate(XYZ, 1)]\n\n\nXYZI.sort()\nX, Y, Z, IDX = map(list, zip(*XYZI))\n\nDi = defaultdict(list)\nfor i in range(N):\n    x, y, z, idx = X[i], Y[i], Z[i], IDX[i]\n    Di[x].append((y, z, idx))\nAns = []\nAma = []\n\nfor L in Di.values():\n    D2 = defaultdict(int)\n    for y, _, _ in L:\n        D2[y] += 1\n    pre = None\n    st = None\n    for y, z, i in L:\n        if st is None and D2[y] == 1:\n            if pre is not None:\n                Ans.append((pre, i))\n                pre = None\n            else:\n                pre = i\n        else:\n            if st is not None:\n                Ans.append((st, i))\n                st = None\n            else:\n                st = i\n        D2[y] -= 1\n    \n    if st:\n        Ama.append(st)\n    if pre:\n        Ama.append(pre)\nLe = len(Ama)\nfor i in range(Le//2):\n    Ans.append((Ama[2*i], Ama[2*i+1]))\n\nfor a in Ans:\n    sys.stdout.write('{} {}\\n'.format(*a))", "n = int(input())\ncoors =[]\nfor i in range(n):\n    coors.append(list(map(int,input().split()))+[i+1])\n# print(coors)\ncoors=sorted(coors,key=lambda x:(x[0],x[1],x[2]))\n# for i in range(0,n,2):\n#     if coors[i][0]==coors[i+1][0]:\n#         if coors[i][1]==coors[i+1][1]:\n#             print(coors[i][3],coors[i+1][3])\n#         else:\nleft=[]\ndef oneD(co,remain):\n    if len(co)%2==0:\n        for i in range(0, len(co), 2):\n            print(co[i][3],co[i+1][3])\n    else:\n        remain.append(co[-1])\n        for i in range(0, len(co)-1, 2):\n            print(co[i][3],co[i+1][3])\n    return remain\ndef twoD(co):\n    if len(co)==1:\n        left.append(*co)\n        return\n    remain = []\n    l = 1\n    for i in range(len(co)-1):\n        if co[i][1] == co[i + 1][1]:\n            l += 1\n        else:\n            remain = oneD(co[i+1 -l:i + 1],remain)\n            l=1\n    remain = oneD(co[len(co)-l:],remain)\n    if len(remain)%2==0:\n        for i in range(0, len(remain), 2):\n            print(remain[i][3],remain[i+1][3])\n    else:\n        left.append(remain[-1])\n        for i in range(0, len(remain)-1, 2):\n            print(remain[i][3],remain[i+1][3])\n\nl=1\nfor i in range(n-1):\n    if coors[i][0]==coors[i+1][0]:\n        l+=1\n    else:\n        twoD(coors[i+1-l:i+1])\n        l=1\ntwoD(coors[n-l:])\n# print(left)\nfor i in range(0,len(left),2):\n    print(left[i][3],left[i+1][3])", "import sys\nimport math\ninput = sys.stdin.readline\n\nn=int(input())\n\narr=[]\nfor i in range(n):\n\tarr.append(list(map(int,input().split())))\n\tarr[-1].append(i+1)\n\nans=[]\narr.sort()\n#print(arr)\ndone=[0]*n\ni=0\nj=1\nwhile i<n and j<n:\n\tif arr[i][0]==arr[j][0] and arr[i][1]==arr[j][1]:\n\t\tans.append([arr[i][3], arr[j][3]])\n\t\tdone[arr[i][3]-1]+=1\n\t\tdone[arr[j][3]-1]+=1\n\t\ti+=2\n\t\tj+=2\n\telse:\n\t\ti+=1\n\t\tj+=1\n#print(ans)\n#print(done)\narr1=[]\nfor i in range(n):\n\tif done[arr[i][3]-1]==0:\n\t\tarr1.append(arr[i])\nn=len(arr1)\n#print(\"arr1\",arr1)\ni=0\nj=1\nwhile i<n and j<n:\n\tif arr1[i][0]==arr1[j][0]:\n\t\tans.append([arr1[i][3], arr1[j][3]])\n\t\tdone[arr1[i][3]-1]+=1\n\t\tdone[arr1[j][3]-1]+=1\n\t\ti+=2\n\t\tj+=2\n\telse:\n\t\ti+=1\n\t\tj+=1\n#print(ans)\narr2=[]\n#print(\"arr1\", arr1)\nfor i in range(n):\n\tif done[arr1[i][3]-1]==0:\n\t\tarr2.append(arr1[i])\n#print(done)\nn=len(arr2)\n#print(arr2)\nfor i in range(n):\n\tif i%2==0:\n\t\tans.append([arr2[i][3], arr2[i+1][3]])\n\nfor i in range(len(ans)):\n\tprint(*ans[i])", "def solve(n, p):\n    p = sorted(p, key=lambda x: (x[0], x[1], x[2]))\n    # print('solve', p)\n    p.append([10**20, 10**20, 10**20, 10**20])\n    # eliminate matching x coord ones:\n    c = 1\n    pn = []\n    for i in range(1, len(p)):\n        if p[i][0] == p[i-1][0]:\n            c += 1\n        else:\n            if c >= 2:\n                s = solve_2d(p[i-c:i])\n                if s:\n                    pn.append(s)\n            else:\n                pn.append(p[i-1])\n            c = 1\n    # print(pn)\n    for i in range(0, len(pn)-1, 2):\n        print(pn[i][3], pn[i+1][3])\n\n\ndef solve_2d(p1):\n    # print('solve_2d', p1)\n    p1.append([10**20, 10**20, 10**20, 10**20])\n    c = 1\n    p1n = []\n    i = 1\n    while i < len(p1):\n        if p1[i][1] == p1[i-1][1]:\n            print(p1[i][3], p1[i-1][3])\n            i += 2\n        else:\n            p1n.append(p1[i-1])\n            i += 1\n    for i in range(0, len(p1n)-1, 2):\n        print(p1n[i][3], p1n[i+1][3])\n    if len(p1n) % 2 == 1:\n        return p1n[-1]\n    else:\n        return 0\n\n\ndef main():\n    n = int(input())\n    p = []\n    for i in range(n):\n        pt = [int(i) for i in input().split()]\n        p.append(pt + [i+1])\n    solve(n, p)\n\n\nmain()\n", "n = int(input())\nl = [list(map(int,input().split())) for i in range(n)]\na = [[l[i],i+1] for i in range(n)]\nused = [0] * (n+1)\na.sort()\nd = {}\nfor i in a:\n\td[i[0][0]] = []\nfor i in a:\n\td[i[0][0]].append([i[0][1],i[0][2], i[1]])\nfor x in d:\n\t#doing for 2d\n\tl = d[x] # this is restricted to x-coordinate\n\tb = {}\n\tfor i in l:\n\t\tb[i[0]] = []\n\tfor i in l:\n\t\tb[i[0]].append([i[1], i[2]]) #{z, n}\n\tfor i in l:\n\t\tb[i[0]].sort()\n\tfor y in b:\n\t\tpom = 0\n\t\twhile pom + 1 < len(b[y]):\n\t\t\tprint(b[y][pom][1], b[y][pom+1][1])\n\t\t\tused[b[y][pom][1]] = 1\n\t\t\tused[b[y][pom+1][1]] = 1\n\t\t\tpom += 2\n\tc = []\n\tfor gg in l:\n\t\tif used[gg[2]] == 0:\n\t\t\tc.append(gg)\n\tcc = [[c[gg][0], c[gg][2]] for gg in range(len(c))]\n\tcc.sort()\n\tg = 0\n\twhile g < len(cc) - 1:\n\t\tprint(cc[g][-1], cc[g+1][-1])\n\t\tused[cc[g][-1]] = 1\n\t\tused[cc[g+1][-1]] = 1\n\t\tg += 2\nc = []\nfor i in range(0, n):\n\tif used[a[i][1]] == 0:\n\t\tc.append([a[i][0][0],a[i][1]])\n\tc.sort()\ni = 0\nwhile i < len(c) - 1:\n\tprint(c[i][1], c[i+1][1])\n\ti += 2"]