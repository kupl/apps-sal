["n = int(input())\na = list(map(int, input().split()))\ninfo = 0\ni = 0\ndir = 1\nresult = 0\nwhile True:\n    if info >= a[i]:\n        info += 1\n        a[i] = n + 1\n    if info == n:\n        break\n    i += dir\n    if i < 0 or i == n:\n        dir = -dir\n        i += dir\n        result += 1\nprint(result)\n", "n = int(input())\na = list(map(int, input().split()))\nk = 0\nans = 0\nwhile k != n:\n    if ans % 2 == 0:\n        for i in range(n):\n            if a[i] <= k:\n                k += 1\n                a[i] = 10000\n    else:\n        for i in range(n - 1, -1, -1):\n            if a[i] <= k:\n                k += 1\n                a[i] = 10000\n    ans += 1\nprint(ans - 1)\n", "n = int(input())\n\nl = input().split()\nl = [int(i) for i in l]\n\nhacked = []\n\nturns = -1\n\nwhile len(hacked) < n:\n    new = []\n    for i in range(len(l)):\n        if l[i] <= len(hacked):\n            new = [i] + new\n            hacked.append(i)\n    for i in new:\n        l.pop(i)\n    l.reverse()\n    turns += 1\n\nprint(turns)\n", "import sys\n\n\n#sys.stdin = open(\"input.txt\")\n#sys.stdout = open(\"output.txt\", \"w\")\n\nn = int(input())\nlst = [int(i) for i in input().split()]\nwas = [False for i in range(n)]\ncur = 0\nind = 0\nans = 0\ncurdir = 1\nwhile cur < n:\n\t#print(\"ind = \", ind)\n\tif not was[ind]:\n\t\tif lst[ind] <= cur:\n\t\t\tcur += 1\n\t\t\twas[ind] = True\n\t\t\tif cur == n:\n\t\t\t\tbreak\n\tif ind == n - 1 and curdir > 0 or ind == 0 and curdir < 0:\n\t\tcurdir = -curdir\n\t\tans += 1\n\tind += curdir\n\nprint(ans)\n\n", "n = int(input())\nlst = [int(x) for x in input().split()]\n\npower = 0\nanswer = 0\nwhile power != len(lst):\n\tfor i in range(len(lst)):\n\t\tif lst[i] <= power:\n\t\t\tpower += 1\n\t\t\tlst[i] = float('inf')\n\t\n\tif power == len(lst):\n\t\tbreak\n\tanswer += 1\n\t\n\tfor i in range(len(lst)-1, -1, -1):\n\t\tif lst[i] <= power:\n\t\t\tpower += 1\n\t\t\tlst[i] = float('inf')\n\t\n\tif power == len(lst):\n\t\tbreak\n\tanswer += 1\n\nprint(answer)", "n=int(input())\ncomp=list(map(int,input().split(' ')))\ndone=0\nchecked=[]\nc=0\nt=-1\nd=-1\nwhile done<n:\n    t+=1\n    d*=-1\n    if 0 not in checked:\n        if comp[0]==0:\n            done+=1\n            checked.append(0)\n    c+=d\n    while c>=0 and c<n:\n        if c not in checked:\n            if comp[c]<=done:\n                done+=1\n                checked.append(c)\n        c+=d\nprint(t)", "n = int(input())\na = list(map(int, input().split()))\nused = [False] * n\nflag = True\ncur = 0\nans = 0\ni = 0\nwhile cur < n:\n    ans += 1\n    if (i == 0):\n        for i in range(n):\n            if (not used[i]) and (a[i] <= cur):\n                cur += 1\n                used[i] = True\n    else:\n        for i in range(n - 1, -1, -1):\n            if (not used[i]) and (a[i] <= cur):\n                cur += 1\n                used[i] = True\nprint(ans - 1)\n    \n", "n=int(input())\nl=list(map(int,input().split()))\nf=[0]*n\nk=0\nans=0\nwhile k<n:\n  for i in range(n):\n    if f[i]==0 and l[i]<=k: k+=1; f[i]=1\n  if k==n: break\n  ans+=1\n  for i in range(n):\n      if f[n-i-1]==0 and l[n-i-1]<=k: k+=1; f[n-i-1]=1\n  if k==n: break\n  ans+=1\nprint(ans)", "n = int(input())\na = list(map(int, input().split(' ')[:n]))\nn_infos = 0\ndirection = 1\nres = 0\n\nwhile True:\n    if direction == 1:\n        r = list(range(n))\n    else:\n        r = list(range(n-1, -1, -1))\n\n    for i in r:\n        if n_infos >= a[i]:\n            a[i] = float(\"inf\")\n            n_infos += 1\n\n    if n_infos == n:\n        break\n\n    direction = -direction\n    res += 1\nprint(res)\n", "n = int(input())\na = [int(x) for x in input().split()]\nk = 0\npov = 0\nused = [False] * n\nfor i in range(n):\n    for j in range(n):\n        if used[j] == False and a[j] <= k:\n            used[j] = True\n            k += 1\n    r = 0\n    for j in range(n):\n        if used[j] == False:\n            r = 1\n    if r == 0:\n        print(pov)\n        break\n    else:\n        pov += 1\n    for j in range(n - 1, -1, -1):\n        if used[j] == False and a[j] <= k:\n            used[j] = True\n            k += 1\n    r = 0\n    for j in range(n):\n        if used[j] == False:\n            r = 1\n    if r == 0:\n        print(pov)\n        break\n    else:\n        pov += 1", "3\n\nimport itertools as ittls\nfrom collections import Counter\n\nfrom pprint import pprint as pprint\n\nimport re\nimport math\n\n\ndef sqr(x):\n    return x*x\n\ndef inputarray(func=int):\n    return list(map(func, input().split()))\n\n# --------------------------------------\n# --------------------------------------\n\nN = int(input())\nA = list(inputarray())\n\npower, i = 0, 0\nmask = [0]*N\n\nwhile power < N:\n    s = 0\n\n    domain = list(range(N)) if i&1 != 1\\\n            else list(range(N - 1, -1, -1))\n    for j in domain:\n        if mask[j] == 0 and A[j] <= power:\n            mask[j] = 1\n            power = power + 1\n\n    i = i + 1\n\nprint(i - 1)\n", "import sys\nlines = iter(sys.stdin.read().split(\"\\n\"))\nn = int(next(lines))\nnums = list(map(int, next(lines).strip(\" \").split(\" \")))\ntotal = 0\ncount = 0\nturns = -1\ndirection = 1\ndef traverse(nums, direction, total, count):\n    \"\"\"direction - 0: left to right, 1: right to left\"\"\"\n    if direction == 0:\n        for i, num in enumerate(nums):\n            if num != -1 and num <= total:\n                count += 1\n                total += 1\n                nums[i] = -1\n    elif direction == 1:\n        for i in range(len(nums) - 1, -1, -1):\n            num = nums[i]\n            if num != -1 and num <= total:\n                count += 1\n                total += 1\n                nums[i] = -1\n    return total, count\nwhile count < n:\n    turns += 1\n    direction = 1 - direction\n    total, count = traverse(nums, direction, total, count)\nprint(turns)\n", "n=int(input())\na=list(map(int,input().split()))\ns=0\nr=0\ni=0\nk=1\nf=0\nwhile s!=n:\n\tif a[i]<=s:\n\t\ts+=1\n\t\ta[i]=9999\n\tif (s!=n)and((i==n-1)or((i==0)and(f))):\n\t\tr+=1\n\t\tk*=-1\n\t\tf=1\n\ti+=k\nprint(r)\n", "n = int(input())\na = [int(x) for x in input().split()]\n\nk = 0\nt = -1\n\nwhile a:\n    t += 1\n\n    next_a = []\n    for elem in a:\n        if elem <= k:\n            k += 1\n        else:\n            next_a.append(elem)\n\n    next_a.reverse()\n    a = next_a\n\nprint(t)", "n = int(input())\nL = list(map(int, input().split()))\nP = [ 0 for _ in range(n)]\nr = 0\nt = 0\nwhile t < n:\n    for k in range(n):\n        if P[k] == 0 and L[k] <= t:\n            t+=1\n            P[k] = 1\n    r+=1\n    if t == n:\n        break\n    for k in range(n):\n        if P[n-k-1] == 0 and L[n-k-1] <= t:\n            t+=1\n            P[n-k-1] = 1\n    r+=1\nprint(r-1)", "n = int(input())\na = list(map(int, input().split()))\n#a = [4, 2, 3, 0, 1]\nused = [False for i in range(n)]\nk = 0\n\nfor i in range(n):\n    flag = False\n    for j in range(n):\n        if a[j] <= k and used[j] == False:\n            used[j] = True\n            k += 1\n    for j in range(n):\n        if used[j] == False:\n            flag = True\n    if flag == False:\n        print(2 * i)\n        break\n    for j in range(n - 1, -1, -1):\n        if a[j] <= k and used[j] == False:\n            used[j] = True\n            k += 1  \n    flag = False\n    for j in range(n):\n        if used[j] == False:\n            flag = True\n    if flag == False:\n        print(2 * i + 1)\n        break    \n", "_ = input()\nns = map(int, input().split())\nc = 0\ncur = 0\nwhile True:\n    new = []\n    for i in ns:\n        if i <= cur:\n            cur += 1\n        else:\n            new.append(i)\n    if not new:\n        break\n    ns = reversed(new)\n    c += 1\nprint(c)", "n = int(input())\na = list(map(int,input().split()))\nq = 0\nc = 0\nwhile len(a) > 0:\n    de = set()\n    for i in range(len(a)):\n        if a[i] <= q:\n            q += 1\n            de.add(i)\n    c += 1\n    a = [a[i] for i in reversed(range(len(a))) if i not in de]\nprint(c-1)", "n = int(input())\nl = list(map(int, input().split()))\nnl = [-1]*n\nkeys = 0\nturns = 0\n#print(l)\n#print(\"BEGIN-----------------\")\nwhile l != nl:\n    if turns % 2 == 0:\n        for pos in range(n):\n            if l[pos] <= keys and l[pos] != -1:\n                keys += 1\n                l[pos] = -1\n    else:\n        for pos in range(n-1, -1, -1):\n            if l[pos] <= keys and l[pos] != -1:\n                keys += 1\n                l[pos] = -1\n    #print(l)\n    turns += 1\nprint(turns-1)\n", "n = int(input())\nlst = list(map(int, input().split()))\nans = 0\nzap = 0\nused = [False] * (n)\nwhile zap != n:\n    if zap != 0:\n        ans += 1\n    for i in range(n):\n        if not used[i] and zap >= lst[i]:\n            used[i] = True\n            zap += 1\n      \n    if zap == n:\n        break\n    ans += 1\n    for i in range(n - 1, -1, -1):\n        if not used[i] and zap >= lst[i]:\n            used[i] = True\n            zap += 1\n\nprint(ans)    \n", "#!/usr/bin/env python\n\nfrom sys import stdin\n\nn = int(stdin.readline())\na = [int(x) for x in stdin.readline().split()]\nvisited = [False] * n\nvisited_count = 0\nturns = 0\n\ndir = 1\nposition = 0\n\nwhile True:\n    if not visited[position] and a[position] <= visited_count:\n        visited[position] = True\n        visited_count += 1\n    if visited_count == n:\n        break\n    if dir == 1 and position == n-1 or dir == -1 and position == 0:\n        dir = -dir\n        turns += 1\n    position += dir\n\nprint(turns)\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn = int(input())\nC = list(map(int,input().split()))\n\ndef check(init):\n    d = init\n    done = [False for i in range(n)]\n    cracked = 0\n    changed = 0\n    while cracked < n:\n        if d == 0:\n            for i in range(n):\n                if not done[i] and C[i] <= cracked:\n                    done[i] = True\n                    cracked += 1\n        else:\n            for i in range(n)[::-1]:\n                if not done[i] and C[i] <= cracked:\n                    done[i] = True\n                    cracked += 1\n        d = d ^ 1\n        if cracked < n:\n            changed += 1\n    return changed\n\nprint(check(0))\n", "def main():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    used = [False] * n\n    napr = True\n    c = 0\n    ans = 0\n    while False in used:\n        if napr:\n            for i in range(n):\n                if c >= arr[i] and used[i] == False:\n                    used[i] = True\n                    c += 1\n        else:\n            for i in range(n-1, 0-1, -1):\n                if c >= arr[i] and used[i] == False:                \n                    used[i] = True\n                    c += 1    \n        napr = not(napr)\n        if False in used:\n            ans += 1\n             \n    print(ans)\n        \nmain()", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\nn   = int(input())\nA   = [int(i) for i in input().split()]\n\nstart = time.time()\n\nt   = 0\nnow = 0\nans = -1\n\nwhile(t < n):\n    ans += 1\n    for i in range(n):\n        if A[i] >= 0 and A[i] <= t:\n            t    += 1\n            A[i] = -1\n    if (t == n):\n        break\n    ans += 1\n    for i in range(n):\n        if A[n-1-i]>= 0 and A[n-1-i] <= t:\n            t        += 1\n            A[n-1-i] = -1\n\nprint(ans)\nfinish = time.time()\n#print(finish - start)\n", "def getNum(n, arr):\n    st1 = []\n    st2 = []\n    worth = 0\n    count = 0\n    \n    for i in range(n):\n        if arr[i] <= worth:\n            worth += 1\n        else:\n            st1.append(arr[i])\n    \n    if len(st1) == 0:\n        return count\n    \n    count += 1\n    while len(st1) != 0:\n        if st1[-1] <= worth:\n            st1.pop()\n            worth += 1\n        else:\n            st2.append(st1.pop())\n        \n        if len(st1) == 0:\n            if len(st2) == 0:\n                return count\n            \n            st1 = st2\n            st2 = []\n            count += 1\n    \n    return count\n    \n    \nn = int(input())\n\narr = list(map(int, input().split()))\n\nprint(getNum(n, arr))"]