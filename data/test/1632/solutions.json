["MAX_N = 5001\n\na = [0] * MAX_N;\nraz = [0] * (MAX_N + 10);\ns = [0] * (MAX_N + 10);\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nfor i in range(n):\n    for j in range(n):\n        if a[i] - a[j] > 0:\n            raz[a[i] - a[j]] += 1\n\n\nfor i in range(1, MAX_N + 1):\n     s[i] = s[i - 1] + raz[i]\n     \nans = 0;\n\nfor i in range(1, MAX_N):\n    if raz[i] == 0:\n        continue\n    for j in range(1, MAX_N):\n        if i + j > MAX_N:\n            break\n        if raz[j] == 0:\n            continue\n        ans += raz[i] * raz[j] * (s[MAX_N] - s[i + j])\n\nans = ans * 1.0\nans /= s[MAX_N]\nans /= s[MAX_N]\nans /= s[MAX_N]\n\nprint(ans)", "import sys\n\n# sys.stdin = open(\"ivo.in\")\n\nn = int(sys.stdin.readline())\n\na = [int(s) for s in sys.stdin.readline().split()]\n\na.sort()\n\ndiffs1 = []\n\nfor i in range(5000):\n    diffs1.append(0)\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        diffs1[a[j] - a[i]] += 1\n\n# for i in range(1, n):\n#    diffs1[i] += diffs1[i - 1]\n\ndiffs2 = []\nfor i in range(10000):\n    diffs2.append(0)\n\nfor i in range(len(diffs1)):\n    for j in range(i, len(diffs1)):\n        if i == j:\n            diffs2[i + j] += diffs1[i] * diffs1[j]\n        else:\n            diffs2[i + j] += 2 * diffs1[i] * diffs1[j]\n\nfor i in range(1, len(diffs2)):\n    diffs2[i] += diffs2[i - 1]\n\n\ngood = 0\nfor u in range(n - 1, 0, -1):\n    for t in range(u - 1, -1, -1):\n        good += diffs2[a[u] - a[t] - 1]\n\nall = (n * (n - 1)) // 2\nall = all * all * all\n\nprint(float(good) / float(all))", "cnt = [0] * 5001\nways = [0] * 5001\ns_ways = [0] * 5001\nn = int(input())\na = list(map(int, input().split()))\n\nfor i in a:\n\tcnt[i] += 1\n\nfor diff in range(4999, 0, -1):\n\tfor i in a:\n\t\tif i >= diff and cnt[i - diff] > 0:\n\t\t\tways[diff] += 1\n\tways[diff] /= (n * (n - 1) / 2)\n\ts_ways[diff] = s_ways[diff + 1] + ways[diff]\n\t\nans = 0\nfor diff1 in range(1, 5000):\n\tfor diff2 in range(1, 5000 - diff1):\n\t\ttargetdiff = diff1 + diff2 + 1\n\t\tans += ways[diff1] * ways[diff2] * s_ways[targetdiff]\n\nprint(ans)", "ways = [0] * 5001\ns_ways = [0] * 5001\nn = int(input())\na = set(map(int, input().split()))\n\nfor diff in range(4999, 0, -1):\n\tfor i in a:\n\t\tif i >= diff and (i - diff in a):\n\t\t\tways[diff] += 1\n\tways[diff] /= (n * (n - 1) / 2)\n\ts_ways[diff] = s_ways[diff + 1] + ways[diff]\n\nans = 0\nfor diff1 in range(1, 5000):\n\tfor diff2 in range(1, 5000 - diff1):\n\t\ttargetdiff = diff1 + diff2 + 1\n\t\tans += ways[diff1] * ways[diff2] * s_ways[targetdiff]\n\nprint(ans)", "n = int(input())\nt = sorted(map(int, input().split()))\nm = 5001\nd = [0, 0] * m\nfor a in t:\n    for b in t: d[b - a] += 1\nfor i in range(m, 2 * m): d[i] = d[i - 1] + d[i]\ns = 0\nfor i in range(1, m):\n    s += d[i] * sum(d[j] * d[-1 - i - j] for j in range(1, m - i))\nprint(8 * s / (n * n - n) ** 3)", "n = int(input())\nt = list(map(int, input().split()))\n\ns, k = 0, 5001\nd = [0, 0] * k\n\nfor a in t:\n    for b in t: d[b - a] += 1\nfor i in range(k, 2 * k): d[i] += d[i - 1]\n\nfor i in range(1, k):\n    s += d[i] * sum(d[j] * d[-1 - i - j] for j in range(1, k - i))\n\nprint(8 * s / (n * n - n) ** 3)", "n = int(input())\nt = list(map(int, input().split()))\n\ns, k = 0, 5001\nd = [0, 0] * k\n\nfor a in t:\n    for b in t: d[b - a] += 1\nfor i in range(k, 2 * k): d[i] += d[i - 1]\n\nfor i in range(1, k):\n    s += d[i] * sum(d[j] * d[-1 - i - j] for j in range(1, k - i))\n\nprint(8 * s / (n * n - n) ** 3)\n", "n = int(input())\nt = list(map(int, input().split()))\n\ns, k = 0, 5001\nd = [0, 0] * k\n\nfor a in t:\n    for b in t: d[b - a] += 1\nfor i in range(k, 2 * k): d[i] += d[i - 1]\n\nfor i in range(1, k):\n    s += d[i] * sum(d[j] * d[-1 - i - j] for j in range(1, k - i))\n\nprint(8 * s / (n * n - n) ** 3)\n", "from itertools import accumulate\n\nR = lambda: map(int, input().split())\nn = int(input())\narr = sorted(R())\nones = [0] * 5005\nfor i in range(n):\n    for j in range(i):\n        ones[abs(arr[i] - arr[j])] += 1\ntwos = [0] * 10005\nfor i in range(1, 5001):\n    for j in range(1, 5001):\n        if ones[i] and ones[j]:\n            twos[i + j] += ones[i] * ones[j]\nstwos = list(accumulate(twos))\nsat, sm = 0, 0\nfor i in range(1, 5001):\n    if ones[i]:\n        sat += ones[i] * stwos[i - 1]\n        sm += ones[i] * stwos[-1]\nprint(sat / max(1, sm))"]