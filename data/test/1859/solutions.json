["#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        #print(*args, **kwargs, file=sys.stderr)\n        # in python 3.4 **kwargs is invalid???\n        print(*args,  file=sys.stderr)\n    dprint('debug mode')\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif outId>0:\n    dprint('use output', outId)\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, = getIntList()\n#print(N)\n\nif N%2==0:\n    print(N//2)\n    return\n\nfor i in range(2,110000):\n    if N%i==0:\n        print( (N-i)//2 +1)\n        return\n\nprint(1)\n\n\n", "import math\nn = int(input())\nd = 0\nfor i in range(2,int(math.sqrt(n))+1):\n    if n%i == 0:\n        d = i\n        break\nif d == 0:\n    d = n\nif d == 2:\n    print(n//d)\nelse:\n    print(1+(n-d)//2)\n", "n = int(input())\nif n % 2 == 0:\n    print(n // 2)\n    return\n\nfor x in range(2, int(n**0.5 + 1)):\n    if n % x == 0:\n        print(1 + (n - x) // 2)\n        return\nprint(1)\n", "n=int(input())\nans=0\nif n%2!=0:\n   i=3\n   while n%i!=0 and i*i<n:i+=2\n   if n%i!=0:i=n\n   n-=i\n   ans=1\nans+=n//2\nprint(ans)", "n = int(input())\ni = 2\nm = 0\nwhile n%i!=0 and i*i<=n:\n    i+=1\nif n%i==0:\n    m+=1\n    n-=i\n    m+=n//2\n    print(m)\nelse:\n    print(1)\n", "n=int(input())\nc=0\nfor i in range(2,int(n**0.5+1)):\n    if n%i==0:\n        c=1\n        break\nif c==0:print(1)\nelse:print((n-i)//2+1)", "n=int(input())\ncount=0\nwhile n!=0:\n    if n%2==0:\n       count+=n//2\n       break\n    flag=0\n    for i in range(2,int(n**(0.5)+100)):\n        if n%i==0:\n            flag=1 \n            break\n    count+=1\n    if flag==0:\n        break\n    else:\n        n-=i\nprint(count)", "import math\nimport sys\nn = int(input())\n\nfor i in range(2,int(math.sqrt(n)) + 1):\n    if n%i == 0:\n        print(int((n - i)/2 + 1))\n        return\nprint(1)\n", "n=int(input())\nif(n%2==0):\n    print(n//2)\nelse:\n    lp=n\n    i=2\n    while(i*i<=n):\n        if(n%i==0):\n            lp=i\n            break\n        i+=1\n    print((n-lp)//2+1)\n\n\n'''\n////////////////      //////        ///////      //             ///////     //  //   //\n////          //    ///   ///     ///    ///     //            ///  ///     ////     //\n////    ////       ///     ///   ///      ///    //           /////////     ////     ///////\n////     /////    ///       /// ///        ///   //          ///    ///     ////     //   //\n//////////////     ///////////   ///////////     //////     ///     ///     //  //   //   //\n'''\n\n", "import math\n\nn = int(input())\n\nsubs = 0\n\nwhile(n > 0):\n  if (n % 2 == 0):\n    subs += n // 2\n    n = 0\n  else:\n    sq = int(math.sqrt(n))\n    found = False\n    for i in range(2, sq + 1):\n      if (n % i) == 0:\n        found = True\n        break\n\n    if found:\n      subs += 1\n      n -= i\n    else:\n      subs += 1\n      n = 0\n\nprint(subs)", "import math\ndef find(n):\n    if n==2:\n        return 2\n    for i in range(2,int(math.sqrt(n))+2):\n        if n%i==0:\n            return i\n    return n\nn=int(input())\nans=0\nfro=2\nwhile n>0:\n    if n%2==0:\n        ans+=n//2\n        break\n    f=find(n)\n    ans+=1\n    n-=f\nprint(ans)\n", "n = int(input())\n\nfor i in range(2, n + 1):\n    if n % i == 0:\n        if i == 2:\n            print(n // i)\n            return\n        else:\n            print(1 + (n - i) // 2)\n            return\n    if i * i > n * 2:\n        break\n\nprint(1 if n > 0 else 0)\n", "def ii():\n    return int(input())\ndef mi():\n    return map(int, input().split())\ndef li():\n    return list(mi())\nMX = 10 ** 5\n\nn = ii()\nif n % 2 == 0:\n    ans = n // 2\nelse:\n    c = 3\n    ans = 0\n    while c <= MX:\n        if n % c == 0:\n            n -= c\n            ans += 1\n            break\n        c += 1\n    if ans:\n        ans += n // 2\n    else:\n        ans = 1\nprint(ans)", "x = int(input())\nfor a in range(2, 10**6):\n    if (x % a == 0):\n        print(1 + (x - a) // 2)\n        return\nprint(1)", "from math import sqrt,ceil\ndef f(n):\n\tfor i in range(2,int(sqrt(n))+2):\n\t\tif n%i==0:\n\t\t\treturn i\n\treturn n\n\n\nn = int(input())\ncnt = 0\n\nwhile n%2!=0:\n\tn -= f(n)\n\tcnt+=1\nprint(cnt+n//2)\n", "def is_prime(n):\n    for i in range(2, int(n**0.5)+1):\n        if not n%i:\n            return False\n    return True\n\nn=int(input())\nc=0\nwhile True:\n    if n%2==0:\n        c+=n//2\n        break\n    if is_prime(n):\n        c+=1\n        break\n    for i in range(2,n):\n        if is_prime(i) and n%i==0:\n            break\n    n-=i\n    c+=1\n    if n==0:\n        break\nprint(c)", "n=int(input())\n\nimport math\nimport sys\n\nif n%2==0:\n    print(n//2)\n    return\n\n\n\nxn=math.ceil(math.sqrt(n))\nfor i in range(2,xn+2):\n    if n%i==0:\n        print((n-i)//2+1)\n        return\n        \n\nprint(1)\n", "from math import floor, sqrt\ntry: \n    int\nexcept NameError: \n    long = int\n \ndef fac(n):\n    step = lambda x: 1 + (x<<2) - ((x>>1)<<1)\n    maxq = int(floor(sqrt(n)))\n    d = 1\n    q = n % 2 == 0 and 2 or 3 \n    while q <= maxq and n % q != 0:\n        q = step(d)\n        d += 1\n    return q <= maxq and [q] + fac(n//q) or [n]\ndef _try_composite(a, d, n, s):\n    if pow(a, d, n) == 1:\n        return False\n    for i in range(s):\n        if pow(a, 2**i * d, n) == n-1:\n            return False\n    return True # n  is definitely composite\n \ndef is_prime(n, _precision_for_huge_n=16):\n    if n in _known_primes or n in (0, 1):\n        return True\n    if any((n % p) == 0 for p in _known_primes):\n        return False\n    d, s = n - 1, 0\n    while not d % 2:\n        d, s = d >> 1, s + 1\n    # Returns exact according to http://primes.utm.edu/prove/prove2_3.html\n    if n < 1373653: \n        return not any(_try_composite(a, d, n, s) for a in (2, 3))\n    if n < 25326001: \n        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5))\n    if n < 118670087467: \n        if n == 3215031751: \n            return False\n        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7))\n    if n < 2152302898747: \n        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7, 11))\n    if n < 3474749660383: \n        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7, 11, 13))\n    if n < 341550071728321: \n        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7, 11, 13, 17))\n    # otherwise\n    return not any(_try_composite(a, d, n, s) \n                   for a in _known_primes[:_precision_for_huge_n])\n \n_known_primes = [2, 3]\n_known_primes += [x for x in range(5, 1000, 2) if is_prime(x)]\n \nn=int(input())\nx=fac(n)[0]\nif is_prime(n):\n    print(1)\nelif n%2==0:\n    print(n//2)\nelse:\n    print(((n-x)//2)+1)\n\n\n", "import math\ndef find(n):\n    if n==2:\n        return 2\n    for i in range(2,int(math.sqrt(n))+2):\n        if n%i==0:\n            return i\n    return n\nn=int(input())\nlol=0\nkek=2\nwhile n>0:\n    if n%2==0:\n        lol+=n//2\n        break\n    f=find(n)\n    lol+=1\n    n-=f\nprint(lol)", "import math\ndef primeFactors(n): \n    if(n%2==0):\n        return 2   \n    for i in range(3,int(math.sqrt(n))+1,2): \n        if(n % i== 0): \n            return i \n    if(n > 2): \n        return n \n           \nn=int(input())\nk=primeFactors(n)\nif(k==2):\n    print(n//k)\nelif(k==n):\n    print(1)\nelse:\n    n-=k\n    print(1+(n//2))", "n = int(input())\nif n % 2 == 0:\n    print(n // 2)\nelse:\n    i = 3\n    while i <= n // i:\n        if n % i == 0:\n            n -= i\n            print(1 + (n // 2))\n            return\n        i += 1\n    print(1)\n", "import sys\nfrom math import ceil, sqrt\n\ninput = sys.stdin.readline\n\nn = int(input())\n\nif n % 2 == 0:\n    print(int(n/2))\nelse:\n    prime = n\n    for i in range(2, ceil(sqrt(n)) + 1):\n        if n % i == 0:\n            prime = i\n            break\n    print(1 + int((n - prime)/2))", "from math import sqrt\ndef kek(n):\n    if n==2:\n        return 2\n    for i in range(2,int(sqrt(n))+2):\n        if n%i==0:\n            return i\n    return n\n\nn=int(input())\nk=0\nwhile n>0:\n    if n%2==0:\n        k+=n//2\n        break\n    k+=1\n    n-=kek(n)\nprint(k)\n    \n    \n", "from sys import stdin, stdout\nfrom math import *\n\ndef nStep(n):\n    if (n==0):\n        return 0\n    if (n==2):\n        return 1\n    for i in range(2,floor(sqrt(n)+2),1):\n        if (n % i == 0):\n            if (i==2):\n                return floor(n/2)\n            else:\n                return 1+nStep(n - i)\n    return 1\ndef main():\n    n=int(stdin.readline())\n    stdout.write(str(nStep(n)))\n    return 0\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\ndef factors(k):\n    L = []\n    for i in range(2,int(math.sqrt(k))+1):\n        if k % i == 0:\n            if i == k//i:\n                L.append(i)\n            else:\n                L.append(i)\n                L.append(k//i)\n    L.append(k)\n    return L\n    \n\ndef prime(p):\n    for i in range(2,int(math.sqrt(p))+1):\n        if p % i == 0:\n            return 0\n    return 1\n\n\nn = int(input())\nif n % 2 == 0:\n    print(n//2)\nelse:\n    a = factors(n)\n    for i in a:\n        if prime(i):\n            print(((n-i)//2)+1)\n            break"]