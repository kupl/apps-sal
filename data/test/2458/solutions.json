["m = 1000000007\n(t, k) = [int(i) for i in input().split(' ')]\nn = 100000\ndp=[0]*(n+1)\n\ndp[0] = 1\nfor i in range(1, n+1):\n    dp[i] = (dp[i-1] + (0 if i-k < 0 else dp[i-k])) % m\n    \ns = [0]*(n+1)\ns[1] = dp[1]\ns[0] = 0\nfor i in range(2, n+1):\n    s[i] = (s[i-1] + dp[i]) % m\n \nfor _ in range(t):\n    (a, b) = [int(i) for i in input().split(' ')]\n    print((s[b] - s[a-1] + m) % m)\n    \n    \n", "t, k = list(map(int, input().split(' ')))\nvalues = [0] + [1] + [0] * (10**5+10)\nsums = [0] + [1] + [0] * (10**5+10)\nfor i in range(2, 10**5+10):\n    values[i] = (values[i-1] + values[max(0, i-k)])%(10**9+7)\n    sums[i] = (sums[i-1] + values[i])%(10**9+7)\n    \nfor i in range(t):\n    a, b = list(map(int, input().split(' ')))\n    print((sums[b+1]-sums[a])%(10**9+7))\n", "from sys import stdin, stdout\n\nlines = list([_f for _f in stdin.read().split('\\n') if _f])\n\ndef parseline(line):\n\treturn list(map(int, line.split()))\n\nlines = list(map(parseline, lines))\nt, k = lines[0]\n\nassert len(lines) >= t + 1\n\nmax_flowers = 10 ** 5\nmodulo = 10 ** 9 + 7\n\nA = [0] * (1 + max_flowers)\nA[0] = 1\nA_sum = [0] * (1 + max_flowers)\n\nfor i in range(1, 1 + max_flowers):\n\tAi_m_k = A[i-k] if i >= k else 0\n\tA[i] = (A[i-1] + Ai_m_k) % modulo\n\tA_sum[i] = (A_sum[i-1] + A[i]) % modulo\n\ndef tests():\n\tfor i in range(1, t + 1):\n\t\tyield lines[i]\n\nfor a, b in tests():\n\tprint((A_sum[b] - A_sum[a-1]) % modulo)\n", "3\n\nMOD = 1000000007\nt, k = map(int, input().split())\na, b = [], []\nfor i in range(t):\n    _a, _b = map(int, input().split())\n    a.append(_a)\n    b.append(_b)\nupper = max(b) + 1\nway = [1]\nsum_way = [1]\nfor i in range(1, upper):\n    way.append((way[i - 1] + (way[i - k] if i >= k else 0)) % MOD)\n    sum_way.append((sum_way[i - 1] + way[i]) % MOD)\nfor i in range(t):\n    print((sum_way[b[i]] - sum_way[a[i] - 1]) % MOD)", "t, k = list(map(int, input().split()))\nMAXA = 10**5 + 1\nmod = 10**9 + 7\nf = [0] * MAXA\ns = [0] * MAXA\nfor i in range(k):\n    f[i] = 1\nfor i in range(k, MAXA):\n    f[i] = (f[i-1] + f[i-k]) % mod\nfor i in range(1, MAXA):\n    s[i] = (s[i-1] + f[i]) % mod\nfor i in range(t):\n    a, b = list(map(int, input().split()))\n    result = (s[b] - s[a-1] + mod) % mod\n    print(result)\n", "t, k = map(int, input().split())\nn, m = 100001, 1000000007\np, r = [0] * n, [0] * n\np[: k] = [1] * k\nfor i in range(k, n): p[i] = (p[i - 1] + p[i - k]) % m\nfor i in range(1, n): p[i] = (p[i] + p[i - 1]) % m\nfor i in range(t):\n    a, b = map(int, input().split())\n    print((p[b] - p[a - 1]) % m)", "import sys\n\ndef solve():\n    MOD = 1000000007\n    size = 100003\n    t, groupsize = read()\n    mem = [0]*size\n    summ = [0]*size\n    for i in range(len(mem)):\n        mem[i] = ((mem[i - 1] + mem[i - groupsize] if i >= groupsize else mem[i-1]) % MOD) if i > 0 else 1\n    for i in range(len(summ)):\n        summ[i] = (mem[i] + summ[i - 1])%MOD if i > 0 else mem[i]\n    for i in range(t):\n        a, b = read()\n        print((summ[b]-summ[a-1]+MOD)%MOD)\n    \ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\ndef solve():\n    MOD = 1000000007\n    size = 100003\n    t, groupsize = read()\n    mem = [0]*size\n    summ = [0]*size\n    for i in range(len(mem)):\n        mem[i] = ((mem[i - 1] + mem[i - groupsize] if i >= groupsize else mem[i-1]) % MOD) if i > 0 else 1\n    for i in range(len(summ)):\n        summ[i] = (mem[i] + summ[i - 1]) % MOD if i > 0 else mem[i]\n    res = list()\n    for i in range(t):\n        a, b = read()\n        res.append((summ[b]-summ[a-1]+MOD)%MOD)\n        # print((summ[b]-summ[a-1]+MOD)%MOD)\n    return res\n\ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \"\\n\".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\ndef solve():\n    MOD = 1000000007\n    size = 100003\n    t, groupsize = read()\n    mem = [0]*size\n    summ = [0]*size\n    for i in range(len(mem)):\n        mem[i] = ((mem[i - 1] + mem[i - groupsize] if i >= groupsize else mem[i-1]) % MOD) if i > 0 else 1\n    for i in range(len(summ)):\n        summ[i] = (mem[i] + summ[i - 1]) % MOD if i > 0 else mem[i]\n    res = list()\n    for i in range(t):\n        a, b = read()\n        res.append((summ[b]-summ[a-1]+MOD)%MOD)\n        # print((summ[b]-summ[a-1]+MOD)%MOD)\n    return res\n\ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \"\\n\".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\ndef solve():\n    MOD = 1000000007\n    size = 100003\n    t, groupsize = read()\n    mem = [0]*size\n    summ = [0]*size\n    mem[0] = 1\n    for i in range(1, len(mem)):\n        mem[i] = (mem[i - 1] + mem[i - groupsize] if i >= groupsize else mem[i-1]) % MOD\n    summ[0] = mem[0]\n    for i in range(1, len(summ)):\n        summ[i] = (mem[i] + summ[i - 1]) % MOD\n    res = list()\n    for i in range(t):\n        a, b = read()\n        res.append((summ[b]-summ[a-1]+MOD)%MOD)\n    return res\n\ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \"\\n\".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\ndef solve():\n    MOD = 1000000007\n    size = 100003\n    t, groupsize = read()\n    mem = [0]*size\n    summ = [0]*size\n    mem[0] = 1\n    for i in range(1, len(mem)):\n        mem[i] = (mem[i - 1] + mem[i - groupsize] if i >= groupsize else mem[i-1]) % MOD\n    summ[0] = mem[0]\n    for i in range(1, len(summ)):\n        summ[i] = (mem[i] + summ[i - 1]) % MOD\n    res = list()\n    for i in range(t):\n        a, b = read()\n        res.append((summ[b]-summ[a-1]+MOD)%MOD)\n    return res\n\ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \"\\n\".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\ndef solve():\n    MOD = 1000000007\n    size = 100003\n    t, groupsize = read()\n    mem = [0]*size\n    summ = [0]*size\n    mem[0] = 1\n    for i in range(1, groupsize):\n        mem[i] = (mem[i-1]) % MOD\n    for i in range(groupsize, len(mem)):\n        mem[i] = (mem[i - 1] + mem[i - groupsize]) % MOD\n    summ[0] = mem[0]\n    for i in range(1, len(summ)):\n        summ[i] = (mem[i] + summ[i - 1]) % MOD\n    res = list()\n    for i in range(t):\n        a, b = read()\n        res.append((summ[b]-summ[a-1]+MOD)%MOD)\n    return res\n\ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \"\\n\".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\nimport array\n\n\ndef solve():\n    MOD = 1000000007\n    size = 100003\n    t, groupsize = read()\n    mem = array.array('i',(0 for i in range(0,size)))\n    summ = array.array('i',(0 for i in range(0,size)))\n    mem[0] = 1\n    for i in range(1, groupsize):\n        mem[i] = (mem[i-1]) % MOD\n    for i in range(groupsize, len(mem)):\n        mem[i] = (mem[i - 1] + mem[i - groupsize]) % MOD\n    summ[0] = mem[0]\n    for i in range(1, len(summ)):\n        summ[i] = (mem[i] + summ[i - 1]) % MOD\n    res = list()\n    for i in range(t):\n        a, b = read()\n        res.append((summ[b]-summ[a-1]+MOD)%MOD)\n    return res\n\ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \"\\n\".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\nimport array\n\n\ndef solve():\n    MOD = 1000000007\n    size = 100003\n    t, groupsize = read()\n    mem = array.array('i',(0 for i in range(0,size)))\n    summ = array.array('i',(0 for i in range(0,size)))\n    mem[0] = 1\n    for i in range(1, groupsize):\n        mem[i] = (mem[i-1]) % MOD\n    for i in range(groupsize, len(mem)):\n        mem[i] = (mem[i - 1] + mem[i - groupsize]) % MOD\n    summ[0] = mem[0]\n    for i in range(1, len(summ)):\n        summ[i] = (mem[i] + summ[i - 1]) % MOD\n    res = list()\n    for i in range(t):\n        a, b = read()\n        res.append((summ[b]-summ[a-1]+MOD)%MOD)\n    return res\n\ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \"\\n\".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\nimport array\n\n\ndef solve():\n    MOD = 1000000007\n    size = 100003\n    t, groupsize = read()\n    mem = array.array('i',(0 for i in range(0,size)))\n    summ = array.array('i',(0 for i in range(0,size)))\n    mem[0] = 1\n    for i in range(1, groupsize):\n        mem[i] = (mem[i-1]) % MOD\n    for i in range(groupsize, len(mem)):\n        mem[i] = (mem[i - 1] + mem[i - groupsize]) % MOD\n    summ[0] = mem[0]\n    for i in range(1, len(summ)):\n        summ[i] = (mem[i] + summ[i - 1]) % MOD\n    res = list()\n    for i in range(t):\n        a, b = read()\n        res.append((summ[b]-summ[a-1]+MOD)%MOD)\n    return res\n\ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \"\\n\".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    #if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\nimport array\nimport io\n\n\ndef solve():\n    MOD = 1000000007\n    size = 100003\n    t, groupsize = read()\n    mem = array.array('i',(0 for i in range(0,size)))\n    summ = array.array('i',(0 for i in range(0,size)))\n    mem[0] = 1\n    for i in range(1, groupsize):\n        mem[i] = (mem[i-1]) % MOD\n    for i in range(groupsize, len(mem)):\n        mem[i] = (mem[i - 1] + mem[i - groupsize]) % MOD\n    summ[0] = mem[0]\n    for i in range(1, len(summ)):\n        summ[i] = (mem[i] + summ[i - 1]) % MOD\n    # res = list()\n    output = io.StringIO()\n    for i in range(t):\n        a, b = read()\n        strtemp = str((summ[b]-summ[a-1]+MOD)%MOD)\n        output.write(strtemp+'\\n')\n        # res.append((summ[b]-summ[a-1]+MOD)%MOD)\n    print(output.getvalue())\n\ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \"\\n\".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\nt, k = (int(x) for x in sys.stdin.readline().split())\nmod = 1000000007\nl = [0] * 100001\nl[0] = 1\nfor i in range(1, 100001):\n\tl[i] = (l[i - 1] + (l[i - k] if i - k >= 0 else 0)) % mod\nfor i in range(1, 100001):\n\tl[i] = (l[i] + l[i - 1]) % mod\nfor line in sys.stdin.readlines():\n\ta, b = (int(x) for x in line.split())\n\tprint((l[b] - l[a - 1] + mod) % mod)\n", "import sys\nt, k = (int(x) for x in sys.stdin.readline().split())\nmod = 1000000007\nl = [0] * 100001\nl[0] = 1\nfor i in range(1, 100001):\n\tl[i] = (l[i - 1] + (l[i - k] if i - k >= 0 else 0)) % mod\nfor i in range(1, 100001):\n\tl[i] = (l[i] + l[i - 1]) % mod\nfor i in range(t):\n\ta, b = (int(x) for x in sys.stdin.readline().split())\n\tprint((l[b] - l[a - 1] + mod) % mod)\n", "def main():\n    t, k = map(int, input().split())\n    mod = 1000000007\n    l = [1] * 100001\n    for i in range(k, 100001):\n        a = l[i - 1] + l[i - k]\n        l[i] = a - mod if a >= mod else a\n    for i in range(1, 100001):\n        a = l[i] + l[i - 1]\n        l[i] = a - mod if a >= mod else a\n    res = []\n    for _ in range(t):\n        a, b = map(int, input().split())\n        a = l[b] - l[a - 1]\n        res.append(a + mod if a < 0 else a)\n    print('\\n'.join(map(str, res)))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "#a, b, c, d = [int(x) for x in stdin.readline().split()]\n#a, b, c, d = map( int, stdin.readline().split() )\nfrom sys import stdin, stdout\nmodconst=1000000007\n\nn,k=list(map(int, stdin.readline().split()))\nf=[0]*100001\nss=[0]*100001\n\nf[0]=0\nfor i in range(1,k):\n    f[i]=1\nf[k]=2\nfor i in range(k+1,100001):\n    f[i]=(f[i-1]+f[i-k])%modconst\n\nss[0]=0;\nfor i in range(1,100001):\n    ss[i]=(ss[i-1]+f[i])%modconst\n \nfor i in range(n):\n    a,b=list(map(int, stdin.readline().split()))\n    stdout.write( str( (ss[b]-ss[a-1]+modconst )%modconst ) + \"\\n\" )\n", "#a, b, c, d = [int(x) for x in stdin.readline().split()]\n#a, b, c, d = map( int, stdin.readline().split() )\nfrom sys import stdin, stdout\nmodconst=1000000007\n\nn,k=list(map(int, stdin.readline().split()))\nf=[0]*100001\nss=[0]*100001\n\nf[0]=0\nfor i in range(1,k):\n    f[i]=1\nf[k]=2\nfor i in range(k+1,100001):\n    f[i]=(f[i-1]+f[i-k])%modconst\n\nss[0]=0;\nfor i in range(1,100001):\n    ss[i]=(ss[i-1]+f[i])%modconst\n \nfor i in range(n):\n    a,b=list(map(int, stdin.readline().split()))\n    stdout.write( str( (ss[b]-ss[a-1]+modconst )%modconst ) + \"\\n\" )\n", "3\nfrom sys import stdin, stdout\nt , k = map(int,stdin.readline().split())\na = [0] * 100001\ns = [0] * 100001\nMOD =  1000000007\nfor i in range(0,100001):\n    if i < k:\n        a[i] = 1\n    else:\n        a[i] = (a[i - 1] + a[i - k])%MOD\n    s[i] = (s[i - 1] + a[i])%MOD    \nfor i in range(0 , t):\n    l , r = map(int,stdin.readline().split())\n    stdout.write( str( (s[r]-s[l-1]+MOD )%MOD ) + \"\\n\" )", "t, k = map(int, input().split())\ndp = [0 for x in range(100001)]\n\nfor x in range(1,k + 1):\n\tdp[x] = 1\ndp[k] += 1\n\nfor x in range(k + 1, 100001):\n\tdp[x] = (dp[x-1] + dp[x - k])%1000000007\n\nfor x in range(2,100001):\n\tdp[x] = (dp[x] + dp[x-1])%1000000007\n\nfor x in range(t):\n\ta, b = map(int, input().split())\n\tprint(dp[b] - dp[a-1] if dp[b] >= dp[a-1] else dp[b] - dp[a-1] + 1000000007)"]