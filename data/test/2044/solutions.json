["import sys\nimport io\n\nstream_enable = 0\n\ninpstream = \"\"\"\n3 5\n3 7 9\n\n\"\"\"\n\nif stream_enable:\n    sys.stdin = io.StringIO(inpstream)\n    input()\n\ndef inpmap():\n    return list(map(int, input().split()))\n\nn, m = inpmap()\narr = inpmap()\ns = 0\nfor x in arr:\n    s += x\n    print(s // m, end=' ')\n    s %= m\nprint()\n", "'''input\n1 100\n99\n'''\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nc = 0\nfor d in range(n):\n\tc += a[d]\n\tprint(c // m, end=' ')\n\tc %= m\n\n", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nx = a[0]\ny = 0\nfor i in range(n-1):\n    print(x//m - y//m, end = \" \")\n    x+=a[i+1]\n    y+=a[i]\nprint(x//m - y//m, end = \" \")", "n, m = map(int,input().split())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(len(a)):\n    cnt += a[i]\n    print(cnt // m, end=' ')\n    cnt = cnt % m", "n, m = map(int, input().split())\na = list(map(int, input().split()))\n\ns = 0\nans = 0\nfor i in range(n):\n    s += a[i]\n    print(s // m - ans, end=' ')\n    ans = s // m", "from collections import defaultdict\n\nn, m = [int(i) for i in input().split()]\nx = [int(i) for i in input().split()]\n\nr = 0\ns = \"\"\nfor i in x:\n    r += i\n    s += str(r // m) + \" \"\n    r %= m\n\nprint(s)\n", "def mi():\n\treturn map(int, input().split())\n\nn,m = mi()\na = list(mi())\ns = 0\nt = []\nfor i in a:\n\ts+=i\n\tt.append(s//m)\nfor i in range(n):\n\tif i==0:\n\t\tprint (t[i], end = ' ')\n\telse:\n\t\tprint (t[i]-t[i-1], end=  ' ')", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nleft = m\nfor x in a:\n    turn = 0\n    if x < left:\n        left -= x\n    else:\n        x -= left\n        turn = 1 + x // m\n        left = m - x % m\n    print(turn, end= ' ')\nprint()\n", "cur = 0\nn, m = list(map(int, input().split()))\nans = []\nfor a in map(int, input().split()):\n  cur += a\n  ans += [cur // m]\n  cur %= m\nprint(' '.join(map(str, ans)))\n", "def main():\n    n, m = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n\n    delim = 0\n\n    for i, e in enumerate(a):\n        e += delim\n        p, delim = divmod(e, m)\n        print(p, end=' ')\n\n    print()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, M = map(int, input().split())\ncurname = 0\n\narr = map(int, input().split())\nfor a in arr:\n    curname += a\n    cnt = curname // M\n    curname = curname % M\n    print(cnt, end=' ')\n    \n\n\n", "n,m=[int(x) for x in input().split()]\na=[int(x) for x in input().split()]\nk=0\nans=0\nfor i in a:\n    k+=i\n    ans=k//m\n    k=k%m\n    print(ans,end=\" \")\n    \n", "from sys import stdin,exit\ndef listInput():\n\treturn list(map(int,stdin.readline().rstrip().split()))\nn,m= listInput()\nli = listInput()\nrem = 0\nans = []\nfor i in li:\n\tans.append((i+rem)//m)\n\trem = (i+rem)%m\nprint(\" \".join([str(i) for i in ans]))", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nrec = []\npre = 0\nfor i in range(n):\n    rec.append((a[i] + pre) // m)\n    pre = (a[i] + pre) % m\n\nprint(\" \".join(map(str, rec)))", "n, m = map(int, input().split())\ns = list(map(int, input().split()))\nt = 0\nk = 0\nfor i in range(len(s)):\n    k = (t + s[i]) // m\n    print(k, end = \" \")\n    t = (t + s[i]) % m\n    \n", "n, m = (int(x) for x in input().split())\na = [int(x) for x in input().split()]\n\nc = 0\nres = []\nfor x in a:\n    res.append((c + x) // m - c // m)\n    c += x\nprint(' '.join([str(x) for x in res]))\n", "n, m = map(int, input().split())\narr = list(map(int, input().split()))\ns = 0\nfor i in arr:\n    s += i\n    print(s // m, end = \" \")\n    s = s % m\n\n", "n, m = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0\nfor i in a:\n    cnt += i\n    print(cnt//m, end=' ')\n    cnt %= m\n", "n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nbal = 0\nfor i in range(n):\n    print((bal + a[i]) // m, end=' ')\n    bal = (bal + a[i]) % m", "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        print(*args, **kwargs, file=sys.stderr)\n    dprint('debug mode')\nexcept ModuleNotFoundError:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif outId>0:\n    dprint('use output', outId)\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, M = getIntList()\nza =  getIntList()\n\nres = []\n\nc = 0\nfor i in range(N):\n    t = c + za[i]\n    x = t//M\n    c = t%M\n    res.append(str(x))\n\nprint(' '.join(res))\n\n\n\n\n\n\n", "#codeforces_1016A_live\ngi = lambda: list(map(int,input().split(\" \")))\nn,m = gi()\nline = gi()\nacc = 0\nfor k in range(n):\n\tacc += line[k]\n\tprint(acc//m,end=\" \")\n\tacc %= m", "n, m = map(int, input().split())\na = [int(x) for x in input().split()]\npages = 0\n\nfor i in a:\n    pages += i\n    print(pages // m, end = ' ')\n    if pages >= m:\n        pages %= m\n", "n, m = map(int, input().split())\ncopy = 0\na = list(map(int, input().split()))\nfor i in a:\n    copy += i\n    print(copy // m, end = ' ')\n    copy %= m", "n, m = list(map(int,input().split()))\n\ndata = list( map(int,input().split()))\n\nanswer = [0 for i in range(n)]\n\nind = 0\nprev = 0\n\nfor el in data:\n    val = prev + el\n    t = val // m\n    prev = val % m\n    \n    answer[ind] = t\n    ind += 1\n\nprint(\" \".join(str(el) for el in answer))\n", "n, m = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nfor i in range(1, n):\n    a[i] += a[i - 1]\n\ncurrent = 1\nfor i in range(n):\n    page = a[i] // m + 1\n    print(page - current, end = \" \")\n    current = page\nprint()"]