["#!/usr/local/bin/python3.3 -tt\n\nimport sys\n\ndef __starting_point():\n    def _(f):\n        for l in f:\n            for i in l.split():\n                yield int(i)\n\n    g = _(sys.stdin)\n\n    v = next(g)\n\n    ar = []\n    for i in range(9):\n        ar.append((next(g), i + 1))\n\n    dominant = min(ar, key=lambda t: (t[0], -t[1]))\n    \n    digits = v // dominant[0]\n\n    v -= dominant[0] * digits\n\n    ar = [(a - dominant[0], n) for a, n in ar if a > dominant[0] and n > dominant[1]]\n    \n    ar.sort(key=lambda x: (-x[1], x[0]))\n\n    print(ar, file=sys.stderr)\n    \n    s = ''\n\n    for a, n in ar:\n        if a <= v:\n            q = v // a\n            v -= q * a\n            s += str(n) * q\n\n    s = '%s%s' % (s, str(dominant[1]) * (digits - len(s)))\n    \n    if s:\n        print(s)\n    else:\n        print(-1)\n\n__starting_point()", "import sys\nv=int(sys.stdin.readline())\n\nA=list(map(int,sys.stdin.readline().split()))\n\nind=1\nvol=A[0]\n\nfor i in range(1,10):\n    if(A[i-1]<vol):\n        vol=A[i-1]\n        ind=i\n    elif(A[i-1]==vol and i>ind):\n        vol=A[i-1]\n        ind=i\n\nused=(v//vol)*vol\n\nrest=v-used\n\nx=rest-1\nz=0\nans=list(str(ind)*(v//vol))\n\nwhile(len(ans)!=0 and x!=rest and z<len(ans)):\n    x=rest\n    for i in range(9,0,-1):\n        if(A[i-1]-A[ind-1]<=rest):\n            rest-=A[i-1]-A[ind-1]\n            ans[z]=str(i)\n            z+=1\n            break\nAns=\"\"\nfor item in ans:\n    Ans+=item\nif(len(Ans)==0):\n    print(-1)\nelse:\n    sys.stdout.write(Ans)\n\n", "v = int(input())\na = list(map(int, input().split()))\n\ni = 0\nfor j in range(1, len(a)):\n  if a[j] <= a[i]:\n    i = j\n\nn = v // a[i]\ns = a[i] * n\nb = []\nwhile s <= v:\n  j = len(a) - 1\n  while j > i:\n    if s + (a[j] - a[i]) <= v:\n      break\n    j -= 1\n  if j == i:\n    break\n  s += a[j] - a[i]\n  b += [j + 1]\n  \nif s > 0:\n  print(''.join(map(str, b + [i + 1] * (n - len(b)))))\nelse:\n  print(-1)", "3\n\ndef readln(): return tuple(map(int, input().split()))\n\nn, = readln()\na = readln()\nm = min(a)\nind = [i for i, _ in enumerate(a) if _ == m][-1]\ncnt = [0] * 11\ncnt[ind + 1] = n // m\nost = n % m\nwhile cnt[ind + 1] > 0:\n    ost += m\n    var = [i for i, _ in enumerate(a) if m < _ <= ost and i > ind]\n    if var:\n        cnt[ind + 1] -= 1\n        cnt[var[-1] + 1] += 1\n        ost -= a[var[-1]]\n    else:\n        break\nif cnt[ind + 1]:\n    for i in range(9, 0, -1):\n        print(str(i) * cnt[i], end='')\n    print()\nelse:\n    print(-1)\n", "def f(t, k, d):\n    j = k - 1\n    for i in range(k, 9):\n        if d >= t[i]: j = i\n    return d - t[j], j + 1\n\nn = int(input())\nt = list(map(int, input().split()))\nm, k = t[0], 1\nfor i, x in enumerate(t, 1):\n    if x <= m: m, k = x, i\nif n < m: print(-1)\nelse:\n    d, j, s = n % m, k + 1, []\n    while j != k:\n        d, j = f(t, k, d + m)\n        s.append(j)\n    print(''.join(map(str, s)) + str(k) * (n // m - len(s)))", "import sys\nv=int(sys.stdin.readline())\n\nA=list(map(int,sys.stdin.readline().split()))\nind=1\nind=1\nvol=A[0]\n\nfor i in range(1,10):\n    if(A[i-1]<vol):\n        vol=A[i-1]\n        ind=i\n    elif(A[i-1]==vol and i>ind):\n        vol=A[i-1]\n        ind=i\n\nused=(v//vol)*vol\n\nrest=v-used\n\nx=rest-1\nz=0\nans=list(str(ind)*(v//vol))\n\nwhile(len(ans)!=0 and x!=rest and z<len(ans)):\n    x=rest\n    for i in range(9,0,-1):\n        if(A[i-1]-A[ind-1]<=rest):\n            rest-=A[i-1]-A[ind-1]\n            ans[z]=str(i)\n            z+=1\n            break\nAns=\"\"\nfor item in ans:\n    Ans+=item\nif(len(Ans)==0):\n    print(-1)\nelse:\n    sys.stdout.write(Ans)\n\n", "v = int(input())\ndigits =[int(i) for i in input().split()]\n\nm, ind = digits[0], 0\nfor i in range(1, 9):\n    if digits[i] <= m: m, ind = digits[i], i\n\nnumber = str(ind + 1) * (v // m)\nl = len(number)\nif l == 0: print(-1)\nelse:\n    cost = l * m\n    for i in range(l):\n        for j in reversed(list(range(ind + 1, 9))):\n            if v - cost + m >= digits[j]:\n                number = number[: i] + str(j + 1) + number[i + 1: ]\n                cost = cost - m + digits[j]\n                break\n\n    print(number)\n\n\n", "v=int(input())\na=list(map(int,input().split()))\ni=0\nfor j in range(1,9):\n    if a[j]<=a[i]:\n        i=j\nif v//a[i]==0:\n    print(-1)\nelse:\n    length=v//a[i]\n    b=(v//a[i])*a[i]\n    ans=[]\n    while v>=b:\n        j=8\n        while j>i:\n            if v>=b+a[j]-a[i]:\n                break\n            j-=1\n        if j==i:\n            break\n        b+=a[j]-a[i]\n        ans+=[j+1]\n    print(''.join(map(str,ans+[i+1]*(length-len(ans)))))\n    \n", "import math\n\nstart = int(input())\ncosts = list(map(int, input().split()))\nscosts = [(x+1, costs[x]) for x in range(len(costs))]\nscosts.sort(reverse = True)\nmincost = scosts[0][1]\nminnum = scosts[0][0]\nfor val, cost in scosts:\n    if cost < mincost:\n        mincost = cost\n        minnum = val\nbest = [minnum for x in range(start//mincost)]\nrem = start - (start//mincost)*mincost\nfor i in range(len(best)):\n    changed = False\n    for val, cost in scosts:\n        if val > best[i] and (cost-mincost) <= rem:\n            rem += mincost\n            rem -= cost\n            best[i] = val\n            changed = True\n            break\n    if not changed:\n        break\nif len(best) == 0: print(-1)\nelse:\n    ans = \"\"\n    for val in best:\n        ans+=str(val)\n    print(ans)", "import math\n\nstart = int(input())\ncosts = list(map(int, input().split()))\nscosts = [(x+1, costs[x]) for x in range(len(costs))]\nscosts.sort(reverse = True)\nmincost = scosts[0][1]\nminnum = scosts[0][0]\nfor val, cost in scosts:\n    if cost < mincost:\n        mincost = cost\n        minnum = val\nbest = [minnum for x in range(start//mincost)]\nrem = start - (start//mincost)*mincost\nfor i in range(len(best)):\n    changed = False\n    for val, cost in scosts:\n        if val > best[i] and (cost-mincost) <= rem:\n            rem += mincost\n            rem -= cost\n            best[i] = val\n            changed = True\n            break\n    if not changed:\n        break\nif len(best) == 0: print(-1)\nelse:\n    ans = ''.join(map(str,best))\n    # for val in best:\n    #     ans+=str(val)\n    print(ans)", "import math\n\nstart = int(input())\ncosts = list(map(int, input().split()))\nscosts = [(x+1, costs[x]) for x in range(len(costs))]\nscosts.sort(reverse = True)\nmincost = scosts[0][1]\nminnum = scosts[0][0]\nfor val, cost in scosts:\n    if cost < mincost:\n        mincost = cost\n        minnum = val\nbest = [minnum for x in range(start//mincost)]\nrem = start - (start//mincost)*mincost\nfor i in range(len(best)):\n    changed = False\n    for val, cost in scosts:\n        if val > best[i] and (cost-mincost) <= rem:\n            rem += mincost\n            rem -= cost\n            best[i] = val\n            changed = True\n            break\n    if not changed:\n        break\nif len(best) == 0: print(-1)\nelse:\n    ans = ''.join(map(str,best))\n    print(ans)", "import sys\n\nTESTING = False\n\ndef solve():\n    start, = read()\n    costs = read()\n    scosts = [(x+1, costs[x]) for x in range(len(costs))]\n    scosts.sort(reverse = True)\n    mincost = scosts[0][1]\n    minnum = scosts[0][0]\n    for val, cost in scosts:\n        if cost < mincost:\n            mincost = cost\n            minnum = val\n    best = [minnum for x in range(start//mincost)]\n    rem = start - (start//mincost)*mincost\n    for i in range(len(best)):\n        changed = False\n        for val, cost in scosts:\n            if val > best[i] and (cost-mincost) <= rem:\n                rem += mincost\n                rem -= cost\n                best[i] = val\n                changed = True\n                break\n        if not changed:\n            break\n    if len(best) == 0: return -1\n    else:\n        ans = ''.join(map(str,best))\n        return ans\n\n\n\n\n\n\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0: return inputs\n    if mode == 1: return inputs.split()\n    if mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\ndef run():\n    if TESTING: sys.stdin  = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\n\nTESTING = False\n\ndef solve():\n    start, = read()\n    costs = read()\n    scosts = [(x+1, costs[x]) for x in range(len(costs))]\n    scosts.sort(reverse = True)\n    mincost = scosts[0][1]\n    minnum = scosts[0][0]\n    for val, cost in scosts:\n        if cost < mincost:\n            mincost = cost\n            minnum = val\n    best = [minnum for x in range(start//mincost)]\n    rem = start - (start//mincost)*mincost\n    for i in range(len(best)):\n        changed = False\n        for val, cost in scosts:\n            if val > best[i] and (cost-mincost) <= rem:\n                rem += mincost\n                rem -= cost\n                best[i] = val\n                changed = True\n                break\n        if not changed:\n            break\n    if len(best) == 0: return -1\n    else:\n        ans = ''.join(map(str,best))\n        return ans\n\ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs #String\n    if mode == 1: return inputs.split() #List of strings\n    if mode == 2: return list(map(int, inputs.split())) # List of integers\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\ndef run():\n    if TESTING: sys.stdin  = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "v = int(input())\na = [int(i) for i in input().split()]\nans = (v//min(a))*[9-a[::-1].index(min(a))]\nv %= min(a)\nfor i in range(len(ans)):\n    for j in range(8,-1,-1):\n        if j+1 > ans[i] and a[j]-a[ans[i]-1] <= v:\n            v -= a[j]-a[ans[i]-1]\n            ans[i] = j+1\n    if v <= 0:\n        break\nif ans:\n    print(\"\".join([str(i) for i in ans]))\nelse:\n    print(-1)\n", "n=int(input())\n\nS=list(map(int,input().split()))\nK=[0]*9\nm=min(S)\nd=0\ndi=0\nlen = n//m\nif not len:\n    print(-1)\nelse:\n    for i in range(8,-1,-1):\n        if S[i]==m:\n            d=i+1\n            break\n    n-=(n//m)*m\n    S=list(map(lambda x: x-m, S))\n    for i in range (8,-1,-1):\n        if S[i]:\n            print(str(i+1)*(n//S[i]),end='')\n            len -= n//S[i]\n            n-= (n//S[i])*S[i]\n        else:\n            print(str(i+1)*len)\n            n=0\n            break\n", "x = int(input())\nl = [0]+list(map(int, input().split(' ')))\nm = 10**9\nind = 0\nfor i in range(1, 10):\n    if l[i] <= m:\n        m = l[i]\n        ind = i\n\nif m > x:\n    print(-1)\n    quit()\n\ndig = x // m\n\nk = [ind] * dig\nleft = x-dig*m\nfor i in range(dig):\n    for j in range(9, 0, -1):\n        diff = l[j]-l[k[i]]\n        if diff <= left:\n            left -= diff\n            k[i] = str(j)\n            break\n    k[i] = str(k[i])\n\nprint(''.join(k))\n", "__author__ = \"runekri3\"\n\nv = int(input())\ndigit_costs = [10 ** 7] + list(map(int, input().split()))\ntemp_list = list(enumerate(digit_costs[:]))\ntemp_list.sort(key=lambda item: item[1], reverse=True)\ntemp_list.reverse()\ndigits_by_price = [digit for digit, cost in temp_list]\ncheapest_digit = digits_by_price[0]\nextra_costs = [digit_cost - digit_costs[cheapest_digit] for digit_cost in digit_costs]\nbetter_digits = [i for i in range(1, 10) if i > cheapest_digit]\nbetter_digits.sort(reverse=True)\n\nmax_len = int(v / digit_costs[cheapest_digit])\nif max_len > 0:\n    current_number = [str(cheapest_digit)] * max_len\n    leftover = v % digit_costs[cheapest_digit]\n    for index_being_changed in range(max_len):\n        for better_digit in better_digits:\n            if extra_costs[better_digit] <= leftover:\n                leftover -= extra_costs[better_digit]\n                current_number[index_being_changed] = str(better_digit)\n                break\n        else:  # Not enough paint to change digits\n            break\nelse:\n    current_number = \"-1\"\nprint(\"\".join(current_number))\n", "v = int(input())\nA = list(map(int, input().split()))\nif v < min(A):\n\tprint(-1)\nelse:\n\tbasic = 1\n\tfor i in range(9):\n\t\tif A[i] <= A[basic - 1]:\n\t\t\tbasic = i + 1\n\tans = [basic] * (v // A[basic - 1])\n\tost = v % A[basic - 1]\n\tnow = 0\n\tfind = True\n\twhile find:\n\t\tfind = False\n\t\tfor i in range(8, basic - 1, -1):\n\t\t\tif A[i] <= A[basic - 1] + ost:\n\t\t\t\tans[now] = i + 1\n\t\t\t\tost = ost + A[basic - 1] - A[i]\n\t\t\t\tnow += 1\n\t\t\t\tfind = True\n\t\t\t\tbreak\n\tprint(\"\".join(list(map(str, ans))))\n\n", "def main():\n    v = int(input())\n    l = list((w, 9 - d) for d, w in enumerate(map(int, input().split())))\n    w, d0 = min(l)\n    le = v // w\n    if not le:\n        print(-1)\n        return\n    res = [str(10 - d0)] * le\n    v -= w * le\n    base, start = w, 0\n    l = sorted(((10 - d, w - base) for w, d in l if d < d0))\n    while l:\n        d, w = l.pop()\n        delta = v // w\n        res[start:start + delta] = [str(d)] * delta\n        start += delta\n        v -= w * delta\n    print(''.join(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "v = int(input())\na = list(map(int, input().split()))\nm = list(enumerate(a, 1))\nk = sorted(m, key=lambda x:(-x[1], x[0]))[-1]\nt = v // k[1]\nv -= t * k[1]\nnum = [k[0]] * t\nfor i in range(t):\n    if v + k[1] > min(a):\n        num[i] = list(q for q in m if q[1] <= v + k[1])[-1][0]\n        v -= a[num[i] - 1] - k[1]\n    else:\n        break;\nprint(''.join(map(str, num)) or -1)\n", "n = int(input())\nai = [int(x) for x in input().split()]\nmcDigit = 0\nfor i in range (9):\n    if ai[i] <= ai[mcDigit]:\n        mcDigit = i\n\ndi = [ x-mcDigit for x in ai]\nresLen = n // ai[mcDigit]\nres = [mcDigit] * resLen\nremain = n - resLen * ai[mcDigit]\nfor i in range(resLen):\n    if remain <= 0:\n        break\n    d = 8\n    while d>mcDigit:\n        if remain >= (ai[d] - ai[mcDigit]):\n            res[i] = d\n            remain -= (ai[d] - ai[mcDigit])\n            break\n        d -= 1\n    if d == mcDigit:\n        break\n\nout = \"\"\nfor i in res:\n    out = out + str(i+1)\nif resLen == 0:\n    print (\"-1\")\nelse :\n    print (out)", "v = int(input())\na = list(map(int, input().split()))\n\nindex, val = -1, 10**12\nfor i in range(len(a)):\n    if a[i] <= val:\n        val = a[i]\n        index = i\n\nm = v // val\n\nans = [str(index + 1) for x in range(m)]\n\n\nif not len(set(a)) == 1:\n    left = v - m*val\n    for i in range(len(ans)):\n        potential = left + val\n        for j,k in enumerate(reversed(a)):\n            if k <= potential:\n                left = potential - k\n                ans[i] = str(9 - j)\n                break\n\nprint(\"\".join(ans) if ans else -1)", "v = int(input())\na = [-1] + list(map(int, input().split()))\nq = [0] * 10\nif v < min(a[1:]):\n  print(-1)\nelse:\n  top_digit = -1\n  for i in range(1, 10):\n    if a[i] == min(a[1:]):\n      top_digit = i\n  q[top_digit] = v // a[top_digit]\n  rem = v % a[top_digit]\n  for i in range(9, top_digit, -1):\n    if a[i] - a[top_digit] <= rem:\n      add = min(rem // (a[i] - a[top_digit]), q[top_digit])\n      q[i] += add\n      q[top_digit] -= add\n      rem = rem - add * (a[i] - a[top_digit])\n  print(\"\".join([str(i) * q[i] for i in range(9, 0, -1)]))", "v = int(input())\na=list(map(int,input().split()))\nm,j=a[0],0\nfor i,x in enumerate(a,1):\n    if x<=m: m,j=x,i\nx=int(v/m)\nif(x==0):\n    print(-1)\nelse:\n    while x:\n        x-=1\n        i=9\n        while i:\n            i-=1\n            if ((v>=a[i])&(int((v-a[i])/m) == x)):\n                v-=a[i]\n                print(i+1,end='')\n                break\n        if i+1==j:\n            break\n    print(x*str(j))"]