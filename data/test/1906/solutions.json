["n = int(input())\na = [2, 3 ,5, 7]\nans = 0\nimport operator\nimport itertools\nimport functools\nfor i in range(1, 5):\n    for p in itertools.combinations(a, i):\n        x = functools.reduce(operator.mul, p)\n        ans += (-1) ** (i + 1) * (n // x)\n\nprint(n - ans)\n", "x = int(input())\n#x, y = map(int, input().split())\n\ny = x//210*48\n\nfor i in range(1, x%210 + 1):\n\t\n\tif i%2 and i%3 and i%5 and i%7:\n\t\ty+=1\nprint(y)\n\n", "n = int(input())\n\nneg = [2, 3, 5, 7, 2*3*5, 2*3*7, 2*5*7, 3*5*7]\npos = [1, 2*3, 2*5, 2*7, 3*5, 3*7, 5*7, 2*3*5*7]\n\nret = 0\nfor x in neg:\n    ret -= n // x\n    \nfor x in pos:\n    ret += n // x\n    \nprint(ret)", "def __starting_point():\n\n    n = int(input())\n\n    res = n\n\n    res -= n//2\n    res -= n//3\n    res -= n//5\n    res -= n//7\n\n    res += n//6\n    res += n//10\n    res += n//14\n    res += n//15\n    res += n//21\n    res += n//35\n\n    res -= n//(3*5*7)\n    res -= n//(2*5*7)\n    res -= n//(2*3*7)\n    res -= n//(2*3*5)\n\n    res += n//(2*3*5*7)\n\n    print(res)\n__starting_point()", "def main():\n    n = int(input())\n    one = n // 2 + n // 3 + n // 5 + n // 7\n    two = n // (2*3) + n // (2*5) + n // (2*7) + n // (3*5) + n // (3*7) + n // (5*7)\n    three = n // (2*3*5) + n // (2*3*7) + n // (2*5*7) + n // (3*5*7)\n    four = n // (2*3*5*7)\n    print(n - one + two - three + four)\n\ndef __starting_point():\n    main()\n__starting_point()", "from functools import reduce\nfrom math import factorial\nn = int(input())\nprint(n - n//2 - n//3 - n//5 - n//7 + n//14 + n//6 + n//10 + n//15 + n//21 + n//35 - n//30 - n//70 - n//42 - n//105 + n//210)\n", "n=int(input())\nprint(n-n//2-n//3-n//5-n//7+n//6+n//15+n//35+n//10+n//14+n//21-n//105-n//70-n//30-n//42+n//210)\n", "n = int(input())\na = 2\nb = 3\nc = 5\nd = 7\nprint(n - n // a - n // b - n // c - n // d + n // (a * b) + n // (a * c) + n // (a * d) + n // (b * c) + n // (b * d) + n // (c * d) - n // (a * b * c) - n // (a * b * d) - n // (a * c * d) - n // (b * c * d) + n // (a * b * c * d))", "n = int(input())\nprint(n - n // 2 - n // 3 - n // 5 - n // 7 + n // 6 + n // 10 + n // 14 + n // 15 + n // 21 + n // 35 - n // 30 - n // 105 - n // 70 - n // 42 + n // 210)", "n = int(input())\nprint (n // 1 - n // 2 - n // 3 - n // 5 - n // 7 + n // 6 + n // 10 + n // 14 + n // 15 + n // 21 + n // 35 - n // 30 - n // 42 - n // 70 - n // 105 + n // 210)", "def write(n):\n    print(0, 2, 3, 5, 7, 6, 10, 14, 15, 21, 35)\n    print(n, n // 2, n // 3, n // 5, n // 7, n // 6, n // 10, n // 14, n // 15, n // 21, n // 35)\n\nn = int(input())\nprint(n - n // 2 - n // 3 - n // 5 - n // 7 + n // 6 + n // 10 + n // 14 + n // 15 + n // 21 + n // 35 - n // (2 * 3 * 5) - n // (2 * 3 * 7) - n // (2 * 5 * 7) - n // (3 * 5 * 7) + n // (2 * 3 * 5 * 7))", "n=int(input())\nt=[False]*2521\nsum=0\nfor a in range(2521):\n    t[a]=(a%2==0 or a%3==0 or a%4==0 or a%5==0 or a%6==0 or a%7==0 or a%8==0 or a%9==0 or a%10==0)\n    if not t[a]:\n        sum+=1\n\nret=sum*(n//2520)\nfor a in range(n%2520+1):\n    ret+=(not t[a])\nprint(ret)\n", "n = int(input())\nans = 0\nans = (n - n // 2 - n // 3 - n // 5 - n // 7 + n // (2 * 3) + n // (2 * 5) + n // (2 * 7) + n // (3 * 5) + n // (3 * 7) + n // (5 * 7) - n // (2 * 3 * 5) - n // (2 * 3 * 7) - n // (2 * 5 * 7) - n // (3 * 5 * 7) + n // (2 * 3 * 5 * 7))\nprint(ans)", "\nfrom fractions import gcd\ni = int(input())\nfull = i // 2520\nrest = i%2520\nct = 576*full\nfor asdf in range(1, rest+1):\n    if gcd(asdf, 2520) == 1:\n        ct += 1\nprint(ct)\n", "n = int(input())\nf = lambda x: n // x\na1 = f(2) + f(3) + f(5) + f(7)\na2 = f(6) + f(10) + f(14) + f(15) + f(21) + f(35)\na3 = f(30) + f(42) + f(70) + f(105)\na4 = f(210)\nans = n - (a1 - a2 + a3 - a4)\nprint(ans)\n", "n=int(input())\na=[2,3,5,7]\n\nans=n\n\nfor i in a:\n    ans-=n//i\n\nfor i in range(len(a)):\n    for j in range(i+1,len(a)):\n        ans+=n//(a[i]*a[j])\n\nfor i in range(len(a)):\n    for j in range(i+1,len(a)):\n        for k in range(j+1,len(a)):\n            ans-=n//(a[i]*a[j]*a[k])\n\nfor i in range(len(a)):\n    for j in range(i+1,len(a)):\n        for k in range(j+1,len(a)):\n            for l in range(k+1,len(a)):\n                ans+=n//(a[i]*a[j]*a[k]*a[l])\n\nprint(ans)\n", "n = int(input())\na = n // 2 + n // 3 + n // 5 + n // 7\nb = n // 6 + n // 10 + n // 14 + n // 15 + n // 21 + n // 35\nc = n // 30 + n // 42 + n // 70 + n // 105\nd = n // 210\nprint(n - (a - b + c - d))\n", "n = int(input())\nprint((n - n//2 - n//3 - n//5 - n//7\n      + n//6 + n//10 + n//14\n      + n//15 + n//21 + n//35\n      - n//30 - n//42 - n//70\n      - n//105\n      + n//210))\n", "n = int(input())\nres = n//2 + n//3 + n//5 + n//7 - n//6 - n//10 - n//14 - n//15 - n//21 - n//35 + (n//30+n//42+n//70+n//105) - (n//210)\nprint(n - res)\n", "def brute(n):\n\n    sol = 0\n\n    for x in range(1, n + 1):\n\n        valid = 1\n\n        for j in range(2, 11):\n            if x % j == 0:\n                valid = 0\n\n        sol += valid\n\n    return sol\n\nN = int(input())\n\nsol = 0\nprimes = [2, 3, 5, 7]\n\nfor state in range(1, 2 ** len(primes)):\n\n    numbBits = 0\n    prod = 1\n\n    for j in range(len(primes)):\n        if (1 << j) & state:\n            numbBits += 1\n            prod *= primes[j]\n\n    if numbBits % 2 == 1:\n        sol += N // prod\n    else:\n        sol -= N // prod\n\nprint(N - sol)\n#print(brute(N))\n", "incl = [2, 3, 5, 7, 30, 42, 70, 105]\nexcl = [6, 10, 14, 15, 21, 35, 210]\n\nn = int(input())\nansw = 0\n\nfor k in incl:\n    answ += n // k\n    \nfor k in excl:\n    answ -= n // k\n    \nprint(n-answ)", "n = int(input())\nx = 0\nx += (n//2520)*576\nfor i in range(1,n%2520+1):\n    d = True\n    for j in range(2,11):\n        if i%j == 0:\n            d = False\n            break\n    if d:\n        x += 1\nprint(x)", "M = 2 * 3 * 5 * 7\nv = [0] * M\nfor i in range(1, M):\n    v[i] = v[i - 1] + bool(i % 2 and i % 3 and i % 5 and i % 7)\nn = int(input())\nprint(n // M * v[-1] + v[n % M])", "data = [2, 3, 5, 7]\nn = int(input())\nhelp = 0\nfor i in range(4):\n    for j in range(4):\n        if j > i:\n            help += n // (data[i] * data[j])\nprint(n - (n // 2 + n // 3 + n // 5 + n // 7 - help + n // (2 * 3 * 5) + n // (2 * 3 * 7) + n // (5 * 7 * 3) + n // (5 * 7 * 2) - n // (2 * 3 * 5 * 7)))", "n = int(input())\nprint(n - n // 2 - n // 3 - n // 5 - n // 7 + n // (2 * 3) + n // (2 * 5) + n // (3 * 5) + n // (2 * 7) + n // (3 * 7) + n // (5 * 7) - n // (2 * 3 * 5) - n // (2 * 3 * 7) - n // (2 * 5 * 7) - n // (3 * 5 * 7) + n // (2 * 3 * 5 * 7))"]