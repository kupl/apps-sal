["import sys\nn,r,avg=list(map(int,input().split()))\nL=[]\ntot=0\nfor i in range(n):\n    L.append(list(map(int,input().split())))\n    L[i][0],L[i][1]=L[i][1],L[i][0]\n    tot+=L[i][1]\n    L[i][1]=r-L[i][1]\nreq=avg*n\nL.sort()\nind=0\nans=0\nwhile(ind<n and req>tot):\n    diff=req-tot\n    if(L[ind][1]>=diff):\n        ans+=diff*L[ind][0]\n        tot+=diff\n        L[ind][1]-=diff\n    else:\n        ans+=L[ind][1]*L[ind][0]\n        tot+=L[ind][1]\n        L[ind][1]=0\n    ind+=1\nprint(ans)\n", "__author__ = 'PrimuS'\n\nn, r, a = (int(x) for x in input().split())\nmarks = [[0, 0]] * n\ns = 0\nfor i in range(n):\n    ss = input()\n    marks[i] = [int(x) for x in ss.split()]\n    s += marks[i][0]\n\nif (s / n) >= a:\n    print(0)\nelse:\n    x = a * n - s\n\n    def ccmp(b):\n        return b[1]\n    marks.sort(key=ccmp)\n\n    i = 0\n    res = 0\n    while x > 0:\n        y = min(x, r - marks[i][0])\n        x -= y\n        res += marks[i][1] * y\n        i += 1\n\n    print(res)\n", "def main():\n    n, r, avg = map(int, input().split())\n\n    need = avg * n\n\n    d = sorted([list(map(int, input().split())) for _ in range(n)], key = lambda x: x[1])\n    cur = sum(x[0] for x in d)\n    #print(d, cur)\n    ret = 0\n    left = need - cur\n    if left <= 0:\n        return 0\n    for x in d:\n        can = min(r - x[0], left)\n        ret += can * x[1]\n        left -= can\n        if left == 0:\n            return ret\n\nprint(main())", "n, r, avg = list(map(int, input().split()))\n\narray = []\ns = 0\n\nfor index in range(0, n):\n    array.append(list(map(int, input().split())))\n    s += array[index][0]\n\narray.sort(key=lambda x: x[1])\nindex = 0\nanswer = 0\nwhile s // n < avg :\n    if s + r - array[index][0] >= avg * n:\n        answer += array[index][1] * (avg * n - s)\n        break\n    s += r - array[index][0]\n    answer += array[index][1] * (r - array[index][0])\n    index += 1\n\nprint(answer)\n", "n,r,avg = list(map(int, input().split()))\nscore = []\ntotal = 0\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    score.append((b, a))\n    total += a\nneed_point = max(0, avg * n - total)\nscore.sort()\nans = 0\nfor b, a in score:\n    if need_point == 0:\n        break\n    if a < r:\n        ans += b * min(r - a, need_point)\n        need_point -= min(r - a, need_point)\nprint(ans)    \n\n\n\n\n", "__author__ = 'valeriy.shevchuk'\n\nfrom math import ceil\n\nn, r, avg = map(int, input().split())\ndata = []\nsum_v = 0\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    sum_v += a\n    data.append((a, b))\n\nneed = ceil(max(avg * n - sum_v, 0))\ndata = sorted(data, key=lambda x: x[1])\n\nref = 0\nfor i in range(len(data)):\n    if need <= 0:\n        break\n\n    if data[i][0] < r:\n        grades = min(r - data[i][0], need)\n        ref += grades * data[i][1]\n        need -= grades\n\nprint(ref)", "n, r, avg = list(map(int, input().split()))\nexams, need, ans = [], avg * n, 0\nfor x in range(n):\n    a, b = list(map(int, input().split()))\n    exams.append([b, a])\n    need -= a\nexams.sort()\ni = 0\nwhile need > 0 and i < n:\n    ans += exams[i][0] * min(r - exams[i][1], need)\n    need -= min(r - exams[i][1], need)\n    i += 1\nprint(ans)\n", "n, r, avg = list(map(int, input().split()))\na = []\ncur = 0\nfor i in range(n):\n    t1, t2 = list(map(int, input().split()))\n    cur += t1\n    a.append((t2, t1))\n\na = sorted(a)\nans = 0\navg = avg * n\nfor i in range(n):\n    if cur >= avg:\n        break\n    need = avg - cur\n    temp = min(need, r - a[i][1])\n    cur += temp\n    ans += temp * a[i][0]\n\n\nprint(ans)\n\n    \n", "first = input().split()\nn = int(first[0])\nr = int(first[1])\navg = int(first[2])\nmarks = {}\ntotal = 0\nessays = []\nfor i in range(n):\n    inp = input().split()\n    inp[0] = int(inp[0])\n    inp[1] = int(inp[1])\n    total += inp[0]\n    essays.append(inp[1])\n    if inp[1] in marks:\n        marks[inp[1]].append(inp[0])\n    else:\n        marks[inp[1]] = [inp[0]]\n\nif total/n >= avg:\n    print(0)\nelse:\n    out = 0\n    essays = list(set(essays))\n    essays.sort()\n    deficit = avg * n - total\n    ind = 0\n    while deficit > 0:\n        current = essays[ind]\n        for i in range(len(marks[current])):\n            if marks[current][i] < r:\n               x = r - marks[current][i]\n               if deficit >= x:\n                   out += current * x\n                   deficit -= x\n               else:\n                   out += current * deficit\n                   deficit = 0\n               if deficit == 0:\n                   break\n        ind += 1\n    print(out)\n                \n", "line = input().split(' ')\nn = int(line[0])\nr = int(line[1])\navg = int(line[2])\n\nclass Exam:\n    \n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def __repr__(self):\n        return repr((self.a, self.b))\n        \n\ni = 0\ns = 0\nlst = []\nwhile i < n:\n    line = input().split(' ')\n    a = int(line[0])\n    b = int(line[1])\n    lst.append(Exam(a, b))\n    s += a\n    i += 1\n\nlst.sort(key = lambda exam: exam.b)\n\nans = 0\navg *= n\nfor exam in lst:\n    if s >= avg:\n        break\n    ans += min(r - exam.a, avg - s) * exam.b\n    s += min(r - exam.a, avg - s)\n\nprint(ans)\n", "from sys import stdin\n\n\ndef main():\n    n, r, avg = list(map(int, stdin.readline().strip().split()))\n    aa, bb = [], []\n    for _ in range(n):\n        a, b = list(map(int, stdin.readline().strip().split()))\n        aa.append(a)\n        bb.append(b)\n    now = sum(aa)\n    ineed = n * avg\n    if now >= ineed:\n        return 0\n    pref = sorted(list(range(n)), key=bb.__getitem__)\n    tot = 0\n    for i in pref:\n        a, b = aa[i], bb[i]\n        delta = min(ineed - now, r - a)\n        tot += b * delta\n        now += delta\n        if now == ineed:\n            return tot\n\n\nprint(main())\n", "n, r, avg = list(map(int, input().split()))\na = [list(reversed(list(map(int, input().split())))) for i in range(n)]\na.sort()\ncur = 0\nreq = avg * n\nfor i in range(n):\n    cur += a[i][1]\ni = 0\nans = 0\nwhile i < n and cur < req:\n    d = min(req - cur, r - a[i][1])\n    ans += min(req - cur, r - a[i][1]) * a[i][0]\n    i += 1\n    cur += d\nprint(ans)\n    \n", "n, r, avg = [int(i) for i in input().split()]\na = [0] * n\nb = [[0] * 2 for i in range(n)]\nfor j in range(n):\n    a[j], b[j][0] = [int(i) for i in input().split()]\n    b[j][1] = j\nb.sort()\nmid = -1\nsum1 = sum(a)\nres = 0\nhod = 0\nsumOLD = 0\nif sum1 / n < avg:\n    while mid < avg:\n        sumOLD = sum1\n        sum1 += min(r - a[b[hod][1]], avg * n - sumOLD)\n        res += b[hod][0] * min(r - a[b[hod][1]], avg * n - sumOLD)\n        hod += 1\n        mid = sum1 / n\n    print(res)\nelse:\n    print(0)\n\n", "n, r, avg = map(int, input().split())\navg *= n\na = [0] * n\nb = [0] * n\nmas = [[0, 0]] * n\nsumm = 0\nfor i in range(n):\n    a[i], b[i] = map(int, input().split())\n    summ += a[i]\n    mas[i] = [b[i], a[i] - r]\nmas.sort()\nfor i in range(n):\n    mas[i][1] *= -1\ni = 0\ncnt = 0\nwhile i < n and summ < avg:\n    cnt += min(mas[i][1], avg - summ) * mas[i][0]\n    summ += min(mas[i][1], avg - summ)\n    i += 1\nprint(cnt)", "__author__ = 'Ekaterina'\nn, r, avg = (int(m) for m in input().split())\nexams = []\nfor i in range(n):\n    input_i = [int(m) for m in input().split()]\n    exams.append([input_i[1], input_i[0]])\nexams.sort()\ncurrent_sum = exams[0][1]\nworks_to_do = 0\nfor x in range(1, n):\n    current_sum += exams[x][1]\nneeded_points = avg*n - current_sum\nif needed_points <= 0:\n    print(0)\nelse:\n    j = 0\n    while needed_points > 0:\n        points_subject = r - exams[j][1]\n        if needed_points == points_subject:\n            works_to_do = works_to_do + exams[j][0]*points_subject\n            break\n        elif needed_points < points_subject:\n            works_to_do = works_to_do + exams[j][0]*needed_points\n            break\n        elif needed_points > points_subject:\n            needed_points = needed_points - points_subject\n            works_to_do = works_to_do + exams[j][0]*points_subject\n        j += 1\n    print(works_to_do)", "stat = []\nn, r, avg = map(int, input().split(' '))\nfor i in range(n):\n    a, b = map(int, input().split(' '))\n    stat.append([a, b, r-a])\n\nreq = n * avg\ncurr = sum([i[0] for i in stat])\nneed = req - curr\n\nstat.sort(key = lambda x: x[1])\n        \ncurr = 0\ntot = 0\nwhile need > 0:\n    if stat[curr][2] <= need:\n        tot += stat[curr][2] * stat[curr][1]\n        need -= stat[curr][2]\n        curr += 1\n    else:\n        tot += stat[curr][1] * need\n        need = 0\nprint(tot)", "n, r, avg = list(map(int, input().split()))\ntotal = 0\nexams = []\nfor i in range(n):\n    score, cost = list(map(int, input().split()))\n    total += score\n    exams.append((cost,score))\nneed = n*avg - total\nresult = 0\nexams.sort()\nfor cost, score in exams:\n    if need <= 0:\n        break\n    x = min(need, r-score)\n    result += cost*x\n    need -= x\nprint(result)\n", "__author__ = 'Rakshak.R.Hegde'\nn, r, avg = map(int, input().split())\nab = []\nd = n * avg\nfor i in range(n):\n    a, b = map(int, input().split())\n    d -= a\n    ab.append((b, a))\nab.sort()\ncost = 0\nfor t in ab:\n    if d <= 0: break\n    if t[1] < r:\n        m = min(d, r - t[1])\n        cost += m * t[0]\n        d -= m\nprint(cost)", "import operator\nn,r,avg=list(map(int,input().split()))\nGoal=n*avg\nSum,ans=0,0\nExam=[]\nfor i in range(n):\n    a,b=list(map(int,input().split()))\n    Sum+=a\n    Exam.append([a,b])\nExam.sort(key=operator.itemgetter(1))\n#print(Exam)\ni=0\nwhile Sum<Goal and i<n:\n    d=min(Goal-Sum,r-Exam[i][0])\n    ans+=d*Exam[i][1]\n    Sum+=d\n    i=i+1\nprint(ans)\n", "import sys\nimport math\n\nn, r, avg = [int(x) for x in (sys.stdin.readline()).split()]\nres = 0\nk = []\nvsum = 0\nfor i in range(n):\n    a, b = [int(x) for x in (sys.stdin.readline()).split()]\n    if(a >= r):\n        vsum += r\n    else:\n        vsum += a\n        k.append((r - a, b))\n        \nk.sort(key = lambda x: x[1])\n\nval = n * avg - vsum\nif(val <= 0):\n    print(0)\n    return\n\nz = 0\ni = 0\nwhile(z < val):\n    z += k[i][0]\n    res += k[i][1] * k[i][0]\n    i += 1\n    \ni -= 1\nif(z > val):\n    res -= (z - val) * k[i][1]\n    print(res)\nelse:\n    print(res)\n        \n\n\n    \n", "n, r, avg = list(map(int, input().split()))\n\na = []\nsum = int(round(avg*n))\nsum1 = 0\nres = 0\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    a.append([y, x])\n    sum1 += x\n\na.sort()\ni = 0\nwhile sum > sum1:\n    if sum - sum1 > r - a[i][1]:\n        sum1 += (r - a[i][1])\n        res += (r - a[i][1])*a[i][0]\n        i += 1\n    else:\n        res += (sum - sum1)*a[i][0]\n        sum1 = sum\n\nprint(res)\n\n\n\n\n", "n, r, avg = list(map(int, input().split(' ')))\n\nexams = [list(map(int, input().split(' '))) for _ in range(n)]\n\nexams.sort(key=lambda x: x[1])\n\ntotal = n*avg\ncur = sum(e[0] for e in exams)\nessays = 0\nfor e in exams:\n  if cur >= total:\n    break\n  its = min(r-e[0], total-cur)\n  cur += its\n  e[0] += its\n  essays += its * e[1]\n\nprint(essays)\n", "import operator\nn,r,avg=list(map(int,input().split()))\nx,y=0,0\ns=0\nl=[]\nfor i in range(n):\n    x,y=list(map(int,input().split()))\n    l.append([x,y])\n    s+=x\nl.sort(key=operator.itemgetter(1))\ns=n*avg-s\nans,i=0,0\nwhile s>0 and i<n:\n    ans+=min(s,r-l[i][0])*l[i][1]\n    s-=min(s,r-l[i][0])\n    i+=1\nprint(ans)\n    \n\n", "n,r,avg = list(map(int, input().split(' ')))\nL = []\nfor i in range(n) :\n    x = list(map(int, input().split(' ')))\n    L.append(x)\n\nL.sort(key = lambda x : x[1])\n\ns = 0\nfor i in L :\n    s += i[0]\n\nneed = avg*n - s\n\nif need <= 0 :\n    ans = 0\nelse :   \n    ans = 0\n    start = 0\n    while(need > 0) :\n        a = L[start][0]\n        b = L[start][1]\n        k = r-a\n        if k > need :\n            ans += need*b\n            need = 0\n        else :\n            ans += k*b\n            need -= k\n        start += 1\nprint(ans)\n", "t = input().split()\nn = int(t[0])  # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\nr = int(t[1])  # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\navg = int(t[2])  # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\na = []  # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n    \nfor i in range(n):\n    a.append(input().split())\n    t = int(a[i][0])\n    a[i][0] = int(a[i][1])\n    a[i][1] = t\n\na = sorted(a)\n# \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\nref = 0  # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\nnew = 0\nfor i in range(n):\n    new += a[i][1]\nnew /= n\n# \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\ni = 0\nwhile (new < avg) and (i < n):\n    x = min(r-a[i][1], round((avg-new)*n))  # \ufffd\ufffd, \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n    new += (1/n) * x  # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n    ref += a[i][0] * x  # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n    i += 1\n    \nprint(round(ref))"]