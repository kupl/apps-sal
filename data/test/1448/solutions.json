["n, d = list(map(int, input().split()))\n\nfor i in range(int(input())):\n    x, y = list(map(int, input().split()))\n    print(('YES' if x+y in range(d, n + n - d + 1) and x-y in range(-d, d + 1) else 'NO'));\n", "n, d = map(int, input().split())\nm = int(input())\nfor i in range(m):\n    x, y = map(int, input().split())\n    if (abs(y - x) <= d and x + y >= d and x + y <= 2 * n - d):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "n, d = list(map(int, input().split()))\ndown = d\nleft = -d\nright = d\nup = 2 * n - d\nt = int(input())\nfor i in range(t):\n    x, y = list(map(int, input().split()))\n    x, y = x - y, x + y\n    if left <= x <= right and down <= y <= up:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n", "n, d = list(map(int, input().split()))\nm = int(input())\nn2d = n*2-d\nfor _ in range(m):\n    x, y = list(map(int, input().split()))\n    if n2d >= x+y >= d and abs(x-y) <= d:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n", "n, d = [int(x) for x in input().split()]\nfor i in range(int(input())):\n    x, y = [int(j) for j in input().split()]\n    if (d <= x + y and x + y <= (n + n - d)) and (y <= x + d and y >= x - d):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n        \n", "n, d = [int(i) for i in input().split()]\nm = int(input())\nfor i in range(m):\n    x, y = [int(i) for i in input().split()]\n    if y <= x + d and y <= -1 * x + n - d + n and y >= x - d and y >= -1 * x + d:\n        print('YES')\n    else:\n        print('NO')", "import math\nimport sys\ninf = 2000000000\n\n\nclass Point:\n    x, y = 0, 0\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, vec):  # point + VECTOR\n        return Point(self.x + vec.x, self.y + vec.y)\n\n    def __sub__(self, vec):  # point - VECTOR\n        self.x -= vec.x\n        self.y -= vec.y\n\n    def __str__(self):\n        return str(self.x) + ' ' + str(self.y)\n\n    def dist_to_point(self, pA):\n        return vector_by_points(self, pA).length()\n\n    def dist_to_line(self, line):\n        if math.sqrt(line.a * line.a + line.b * line.b) == 0:\n            return inf\n        return (self.x * line.a + self.y * line.b + line.c) / math.sqrt(line.a * line.a + line.b * line.b)\n\n    def dist_to_segment(self, pA, pB):\n        AB = vector_by_points(pA, pB)\n        AC = vector_by_points(pA, self)\n        if AB * AC < 0:  # this means angle CAB > 90\n            return self.dist_to_point(pA)\n        BA = -AB\n        BC = vector_by_points(pB, self)\n        if BA * BC < 0:  # this means angle CBA > 90\n            return self.dist_to_point(pB)\n        return abs(self.dist_to_line(line_by_points(pA, pB)))\n\n    def dist_to_ray(self, pA, pB):\n        AC = vector_by_points(pA, self)\n        AB = vector_by_points(pA, pB)\n        if AC * AB < 0:\n            return self.dist_to_point(pA)\n        return abs(self.dist_to_line(line_by_points(pA, pB)))\n\n\nclass Vector:\n    x, y = 0, 0\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def length(self):  # |vector|\n        return math.sqrt(self.x * self.x + self.y * self.y)\n\n    def __mul__(self, vec):  # scalar multiplication\n        return self.x * vec.x + self.y * vec.y\n\n    def __pow__(self, vec):  # vector multiplication\n        return self.x * vec.y - self.y * vec.x\n\n    def __truediv__(self, x):  # vector / number\n        return Vector(self.x / x, self.y / x)\n\n    def __add__(self, vec):  # vector1 + vector2\n        return Vector(self.x + vec.x, self.y + vec.y)\n\n    def __sub__(self, vec):  # vector1 - vector2\n        return Vector(self.x - vec.x, self.y - vec.y)\n\n    def __neg__(self):  # -vector\n        return Vector(-self.x, -self.y)\n\n    def __str__(self):\n        return str(self.x) + ' ' + str(self.y)\n\n    def normalize(self):  # vector / |vector|\n        ln = self.length()\n        self.x /= ln\n        self.y /= ln\n\n    def to_len(self, x):\n        self.normalize()\n        self.x *= x\n        self.y *= x\n\n    def angle_rad(self, vec):\n        angle = math.atan2(self ** vec, self * vec)\n        if angle < 0:\n            angle += 2 * math.pi\n        return angle\n\n    def angle(self, vec):\n        return self.angle_rad(vec) / math.pi * 180\n\n    def polar(self):\n        return self.angle_rad(Vector(1, 0))\n\n\nclass Line:\n    a, b, c = 0, 0, 0\n\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def __str__(self):\n        return str(self.a) + ' ' + str(self.b) + ' ' + str(self.c)\n\n    def normalize(self):\n        z = math.sqrt(self.a * self.a + self.b * self.b)\n        self.a /= z\n        self.b /= z\n        self.c /= z\n\n    def intersection(self, ln):\n        opred = self.a * ln.b - self.b * ln.a\n        opred_x = self.c * ln.b - self.b * ln.c\n        opred_y = self.a * ln.c - self.c * ln.a\n        x = -opred_x / opred\n        y = -opred_y / opred\n        return Point(x, y)\n\n\ndef vector_by_points(p1, p2):\n    return Vector(p2.x - p1.x, p2.y - p1.y)\n\n\ndef normal_to_line(line):\n    return Vector(line.a, line.b)\n\n\ndef line_by_points(p1, p2):\n        b = p1.x - p2.x\n        a = p2.y - p1.y\n        c = -(a * p1.x + b * p1.y)\n        return Line(a, b, c)\n\n\ndef segment_intersect(pA, pB, pC, pD):  # does AB intersect CD?\n    AB = vector_by_points(pA, pB)\n    AC = vector_by_points(pA, pC)\n    AD = vector_by_points(pA, pD)\n    CD = vector_by_points(pC, pD)\n    CB = vector_by_points(pC, pB)\n    CA = -AC\n    if (AB ** AC) * (AB ** AD) <= 0 and (CD ** CB) * (CD ** CA) <= 0 and (min(pC.x, pD.x) <= max(pA.x, pB.x) <= max(pC.x, pD.x) or min(pA.x, pB.x) <= max(pC.x, pD.x) <= max(pA.x, pB.x)):\n        return True\n    return False\n\n\ndef segment_to_segment(pA, pB, pC, pD):\n    if segment_intersect(pA, pB, pC, pD):\n        return 0\n    mn = min(pA.dist_to_segment(pC, pD), pB.dist_to_segment(pC, pD))\n    mn = min(mn, pC.dist_to_segment(pA, pB))\n    mn = min(mn, pD.dist_to_segment(pA, pB))\n    return mn\n\n\ndef ray_to_ray(pA, pB, pC, pD):\n    pt = line_by_points(pA, pB).intersection(line_by_points(pC, pD))\n    if pt.dist_to_ray(pA, pB) == 0 and pt.dist_to_ray(pC, pD) == 0:\n        return 0\n    return min(pA.dist_to_ray(pC, pD), pC.dist_to_ray(pA, pB))\n\n\ndef area(a):  # a is list of Points (shape not necessary convex)\n    prev = Vector(a[-1].x, a[-1].y)\n    ans = 0\n    for pt in a:\n        cur = Vector(pt.x, pt.y)\n        ans += prev ** cur / 2\n        prev = cur\n    return abs(ans)\n\n\nn, d = map(int, input().split())\nfield = [Point(0, d), Point(d, 0), Point(n, n - d), Point(n - d, n)]\ns = area(field)\nq = int(input())\nfor i in range(q):\n    x, y = map(int, input().split())\n    cur = Point(x, y)\n    ar = area([field[0], field[1], cur]) + area([field[1], field[2], cur]) + area([field[2], field[3], cur]) + area([field[3], field[0], cur])\n    if ar == s:\n        print('YES')\n    else:\n        print('NO')", "def check(n, d, x, y):\n    if (y >= -x + d) and (y <= 2 * n - d - x) and (y <= d + x) and (y >= x - d):\n        return True\n    return False\n\n\nn, d = list(map(int, input().split()))\nm = int(input())\nans = []\nfor i in range(m):\n    x, y = list(map(int, input().split()))\n    if check(n, d, x, y):\n        ans.append('YES')\n    else:\n        ans.append('NO')\nfor i in range(m):\n    print(ans[i])\n", "n,d=list(map(int,input().split()))\nN=int(input())\nfor i in range(N):\n    x,y=list(map(int,input().split()))\n    if (x+y>=d) and (x+y<=n+n-d) and (x+y>=d) and (abs(x-y)<=d):\n        print('YES')\n    else:\n        print('NO')\n", "\nn,d = (int(e) for e in input().split(' '))\n\nfor i in range(int(input())):\n  x,y = (int(e) for e in input().split(' '))\n  d1,d2 = x-y,x+y\n  if(-d<=d1<=d and d<=d2<=n-d+n):\n    print('YES')\n  else:\n    print('NO')\n\n\"\"\"\n7 2\n4\n2 4\n4 1\n6 3\n4 5\n\nYES\nNO\nNO\nYES\n\n\"\"\"", "class Vec:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __sub__(self, other):\n        return Vec(self.x - other.x, self.y - other.y)\n    def __add__(self, other):\n        return Vec(self.x + other.x, self.y + other.y)\n    def __mod__(self, other):\n        return self.x * other.y - self.y * other.x\nn, d = map(int, input().split())\nm = int(input())\nc = [[int(e) for e in input().split()] for i in range(m)]\npa, pb, pc, pd = Vec(d, 0), Vec(n, n - d), Vec(n - d, n), Vec(0, d)\nab, bc, cd, da = pb - pa, pc - pb, pd - pc, pa - pd\nfor x, y in c:\n    p = Vec(x, y)\n    ap, bp, cp, dp = p - pa, p - pb, p - pc, p - pd\n    if ab % ap >= 0 and bc % bp >= 0 and cd % cp >= 0 and da % dp >= 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "n, d = list(map(int, input().split(' ')))\nfor i in range(int(input())):\n    x, y = list(map(int, input().split(' ')))\n    if (y <= (x + d)) and (y >= (x - d)) and (y >= (-x + d)) and (y <= (-x + 2*n - d)):\n        print('YES')\n    else:\n        print('NO')\n                                              \n", "n, d = [int(x) for x in input().split()]\nm = int(input())\ncnt = 0\nfor i in range(m):\n    x, y = [int(x) for x in input().split()]\n    if -x + d <= y <= -x + 2 * (n - d) + d and x - d <= y <= x + d:\n        print('YES')\n    else:\n        print('NO')", "n, d = list(map(int, input().split()))\nm = int(input())\nfor i in range(m):\n    x, y = list(map(int, input().split()))\n    if (y <= x + d) and (y >= x - d) and (y >= d - x) and (y <= 2 * n - d - x):\n        print('YES')\n    else:\n        print('NO')", "def make_line(x1, y1, x2, y2):\n    b = (x1 * y2 - x2 * y1) / (x1 - x2)\n    k = (y1 - y2) / (x1 - x2)\n    return (k, b)\n\n\nn, d = map(int, input().split())\nk1, b1 = make_line(0, d, d, 0)\nk2, b2 = make_line(0, d, n - d, n)\nk3, b3 = make_line(n - d, n, n, n - d)\nk4, b4 = make_line(n, n - d, d, 0)\nm = int(input())\nfor i in range(m):\n    x, y = map(int, input().split())\n    if y >= k1 * x + b1 and y <= k2 * x + b2 and y <= k3 * x + b3 and y >= k4 * x + b4:\n        print('YES')\n    else:\n        print('NO')", "n,d=list(map(int,input().split()))\nm=int(input())\na=['0']*m\nfor i in range(m):\n    x,y=list(map(int,input().split()))\n    if y<=x+d and y>=x-d and y>=-x+d and y<=(2*n-d)-x:\n        a[i]='YES'\n    else:\n        a[i]='NO'\nfor x in a:\n    print(x)\n", "def F(px, py, ax, ay, bx, by):\n  return (bx-ax)*(py-ay)-(by-ay)*(px-ax)\n\n\nn, d = list(map(int, input().split()))\nm = int(input())\nfor i in range(m):\n  x, y = list(map(int, input().split()))\n  if F(x, y, d, 0, n, n - d) >= 0 and F(x, y, n, n - d, n - d, n) >= 0 and F(x, y, n - d, n, 0, d) >= 0 and F(x, y, 0, d, d, 0) >= 0:\n    print('YES')\n  else:\n    print('NO')\n\n#(bx-ax)*(py-ay)-(by-ay)*(px-ax)\n", "n, d = list(map(int, input().split()))\nm = int(input())\n\nfor i in range(m):\n    x, y = list(map(int, input().split()))\n    if (y >= x - d) and (y <= x + d) and (y >= -x + d) and (y <= -x + 2*n - d):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "n, d = [int(i) for i in input().split()]\nm = int(input())\nfor i in range(m):\n    x, y = [int(i) for i in input().split()]\n    if (y >= x - d and y <= x + d and y >= -x + d and y <= -x + 2*n - d):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "n, d = list(map(int, input().split()))\nk = int(input())\nanss = []\nfor kuzn in range(k):\n    x, y = list(map(int, input().split()))\n    if x - d <= y <= x + d and -x + d <= y <= -x + 2*n - d:\n        anss.append('YES')\n    else:\n        anss.append('NO')\nfor ans in anss:\n    print(ans)\n", "n, d = map(int, input().split())\nm = int(input())\nfor i in range(m):\n    x, y = map(int, input().split())\n    if (x + y) < d:\n        print(\"NO\")\n    elif (x + y) > n * 2 - d:\n        print(\"NO\")\n    elif abs(x - y) > d:\n        print(\"NO\")\n    else:\n        print(\"YES\")", "n, d = list(map(int, input().split()))\nm = int(input())\n\nfor _ in range(m):\n    x, y = list(map(int, input().split()))\n    first = y <= x + d\n    second = y >= x - d\n    third = y >= -x + d\n    fourth = y <= -x + 2 * n - d\n\n    if first and second and third and fourth:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "n, d = list(map(int, input().split()))\nm = int(input())\nfor i in range(m):\n    x, y = list(map(int, input().split()))\n    if y >= d - x and y <= x + d and y >= x - d and y <= -x - d + 2 * n:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Vector:\n    def __init__(self, begin, end):\n        self.x = end.x - begin.x\n        self.y = end.y - begin.y\n\n    def mult(self, other):\n        return self.x * other.y - self.y * other.x\n\nn, d = list(map(int, input().split()))\nm = int(input())\nans = []\nvector1 = Vector(Point(d, 0), Point(0, d))\nvector2 = Vector(Point(d, 0), Point(n, n - d))\nvector3 = Vector(Point(n - d, n), Point(0, d))\nvector4 = Vector(Point(n - d, n), Point(n, n - d))\nfor i in range(m):\n    x, y = list(map(int, input().split()))\n    vector15 = Vector(Point(d, 0), Point(x, y))\n    vector35 = Vector(Point(n - d, n), Point(x, y))\n    if (vector15.mult(vector1) * vector15.mult(vector2) <= 0) and (vector35.mult(vector3) * vector35.mult(vector4) <= 0):\n        ans.append(\"YES\")\n    else:\n        ans.append(\"NO\")\nfor i in ans:\n    print(i)", "n,d=list(map(int,input().split()))\nm=int(input())\nfor i in range(m):\n    x,y=list(map(int,input().split()))\n    if(x<0 or y<0 or x>n or y>n or x+y<d or y+n-x<n-d or n-y+x<n-d or n+n-x-y<d):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n"]