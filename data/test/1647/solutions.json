["# import sys\n# sys.stdin = open('in.txt', 'r')\n\n_ = input()\ns = input()\nt = input()\n\npar = [i for i in range(26)]\ndef find(x):\n    if par[x] != x:\n        par[x] = find(par[x])\n        return par[x]\n    else:\n        return x\n\nfor i in range(len(s)):\n    a, b = find(ord(s[i])-97), find(ord(t[i])-97)\n    if a != b:\n        par[a] = b\n\nres = 0\nfor i in range(26):\n    find(i)\n\nfor i in range(26):\n    res += max(0, par.count(i) - 1)\nprint(res)\n\nfor i in range(26):\n    d = []\n    for j in range(26):\n        if par[j] == i:\n            d.append(chr(j+97))\n\n    for j in range(len(d)-1):\n        print(d[j], d[j+1])\n", "n = int(input())\nv = input()\nt = input()\nrank = [0] * 26\npar = [i for i in range(26)]\n\n\ndef find(x):\n    if par[x] == x:\n        return x\n    else:\n        par[x] = find(par[x])\n        return par[x]\n\n\ndef unite(x, y):\n    x = find(x)\n    y = find(y)\n    if x == y:\n        return\n    if rank[x] > rank[y]:\n        par[y] = x\n    else:\n        par[x] = y\n        if rank[x] == rank[y]:\n            rank[y] += 1\n\n\ndef same(x, y):\n    return find(x) == find(y)\n\n\nrec = []\nnum = 0\nfor i in range(n):\n    a, b = ord(v[i]) - ord(\"a\"), ord(t[i]) - ord(\"a\")\n\n    if not same(a-1, b-1):\n        unite(a - 1, b - 1)\n        rec.append((v[i], t[i]))\n        num += 1\n\nprint(num)\nfor p, q in rec:\n    print(p, q)", "n = int(input())\nS = set()\nSlovar = []\nsviter = input()\nfutbol = input()\nres = 0\nAns = []\nfor i in range(n):\n    if sviter[i] != futbol[i]:\n        if sviter[i] not in S and futbol[i] not in S:\n            Slovar.append(sviter[i] + futbol[i])\n            S.add(sviter[i])\n            S.add(futbol[i])\n            res += 1\n            Ans.append([sviter[i], futbol[i]])\n        elif sviter[i] in S and futbol[i] not in S:\n            S.add(futbol[i])\n            for j in range(len(Slovar)):\n                if sviter[i] in Slovar[j]:\n                    Slovar[j] += futbol[i]\n                    res += 1\n                    Ans.append([sviter[i], futbol[i]])                    \n                    break\n        elif sviter[i] not in S and futbol[i] in S:\n            S.add(sviter[i])\n            for j in range(len(Slovar)):\n                if futbol[i] in Slovar[j]:\n                    Slovar[j] += sviter[i]\n                    res += 1\n                    Ans.append([sviter[i], futbol[i]])                     \n                    break\n        elif sviter[i] in S and futbol[i] in S:\n            for j in range(len(Slovar)):\n                if futbol[i] in Slovar[j]:\n                    a = j\n                if sviter[i] in Slovar[j]:\n                    b = j                \n            if a != b:\n                Slovar[a] = Slovar[a] + Slovar[b]\n                Slovar[b] = ''\n                res += 1\n                Ans.append([sviter[i], futbol[i]])\n        #print(i, res, Slovar, S)\nprint(res)\nfor i in range(res):\n    print(*Ans[i])", "n = int(input())\n\nt = input()\nv = input()\n\ns = list(set(list(t)).union(set(list(v))))\nuf = [i for i in range(len(s))]\n\ndef find(uf,i):\n    p = uf[i]\n    return p if i==p else find(uf,p)\n\ndef union(uf,i,j):\n    uf[find(uf,i)] = find(uf,j)\n\nres = []    \nfor i in range(n):\n    ti = s.index(t[i])\n    vi = s.index(v[i])\n    if (find(uf,ti) != find(uf,vi)):\n        union(uf,ti,vi)\n        res.append((t[i],v[i]))\n\nprint(len(res))\nfor i in range(len(res)):\n    print(res[i][0],res[i][1])", "#!/usr/bin/env python3\n#! -*- coding: utf-8 -*-\nfrom random import getrandbits\n\np = []\n\ndef get(v):\n\tnonlocal p\n\tif p[v] == v:\n\t\treturn v\n\tp[v] = get(p[v])\n\treturn p[v]\n\ndef unite(u, v):\n\tnonlocal p\n\tu, v = get(u), get(v)\n\tif u == v:\n\t\treturn False\n\tif getrandbits(1):\n\t\tu, v = v, u\n\tp[u] = v\n\treturn True\n\ndef main():\n\tn = int(input())\n\tnonlocal p\n\tp = list(range(26))\n\ts = input()\n\tt = input()\n\tans = []\n\tfor i, x in enumerate(zip(s, t)):\n\t\ta, b = x\n\t\tif unite(ord(a) - ord('a'), ord(b) - ord('a')):\n\t\t\tans.append((a, b))\n\tprint(len(ans))\n\tfor x in ans:\n\t\tprint(*x)\n\ndef __starting_point():\n\tmain()\n__starting_point()", "def f(x):\n    if data[x] != x:\n        data[x] = f(data[x])\n        return data[x]\n    else:\n        return x\n\nn = int(input())\ns = input()\nt = input()\ndata = [i for i in range(26)]\nfor i in range(n):\n    a, b = f(ord(s[i]) - ord(\"a\")), f(ord(t[i]) - ord(\"a\"))\n    if a != b:\n        data[a] = b\nans = 0\nfor i in range(26):\n    f(i)\nfor i in range(26):\n    ans += max(0, data.count(i) - 1)\nprint(ans)\nfor i in range(26):\n    ans = []\n    for j in range(26):\n        if data[j] == i:\n            ans.append(chr(j + ord(\"a\")))\n    for j in range(len(ans) - 1):\n        print(ans[j], ans[j + 1])", "def f(x):\n    if data[x] != x:\n        data[x] = f(data[x])\n        return data[x]\n    return x\n\nn = int(input())\ns = input()\nt = input()\ndata = [i for i in range(26)]\nfor i in range(n):\n    a, b = f(ord(s[i]) - ord(\"a\")), f(ord(t[i]) - ord(\"a\"))\n    if a != b:\n        data[a] = b\nans = 0\nfor i in range(26):\n    f(i)\nfor i in range(26):\n    ans += max(0, data.count(i) - 1)\nprint(ans)\nfor i in range(26):\n    ans = []\n    for j in range(26):\n        if data[j] == i:\n            ans.append(chr(j + ord(\"a\")))\n    for j in range(len(ans) - 1):\n        print(ans[j], ans[j + 1])", "parent = [i for i in range(200)]\n\ndef fin (x):\n    if parent[x] == x:\n        return x\n    x = parent[x]\n    parent[x] = fin(x)\n    return parent[x]\n\n\n#import sys\n#sys.stdin = open ('464-D.in', 'r')\n\nn = int(input())\na = input()\nb = input()\nlst = []\nfor i in range(0,n):\n    x = ord(a[i])-48\n    y = ord(b[i])-48\n    u = fin(x)\n    v = fin(y)\n    if u!=v:\n        lst.append((ord(a[i])-48,ord(b[i])-48))\n        parent[u] = v\n\nprint(len(lst))\nfor i, j in lst:\n    print (chr(i+48), chr(j+48))", "n = int(input())\nfirst, second = input(), input()\nletters = {i:i for i in [chr(i) for i in range(ord('a'), ord('z')+1)]}\n# print(letters)\n# res = []\n\nfor i in range(n):\n    s1, s2 = first[i], second[i]\n    if letters[s1] == letters[s2]:\n        continue\n    if s1 > s2:\n        s1, s2 = s2, s1\n    frm, to = letters[s2], letters[s1]\n    for key in letters:\n        if letters[key] == frm:\n            letters[key] = to\nresult = []\nfor k, v in list(letters.items()):\n    if k != v:\n        result.append((k, v))\nprint(len(result))\nfor r in result:\n    print(f'{r[0]} {r[1]}')\n", "from collections import defaultdict\n\n\nlength = int(input().strip())\ns1 = input().strip()\ns2 = input().strip()\n\nadj = defaultdict(list)\nnodes = set()\n\nfor c1, c2 in zip(s1, s2):\n    if c1 != c2:  # add to undirected graph\n        adj[c1].append(c2)\n        adj[c2].append(c1)\n        nodes.add(c1)\n        nodes.add(c2)\n\nv = set()\nst = []\n\n\ndef dfs(n):\n    v.add(n)\n    for neighbor in adj[n]:\n        if neighbor not in v:\n            st.append((n, neighbor))\n            dfs(neighbor)\n\n\nfor n in nodes:\n    if n not in v:\n        dfs(n)\n\nprint(len(st))\nfor pair in st:\n    print(*pair)", "\nclass DSet:\n    def __init__(self, n):\n        self.parents = [-1 for i in range(n)]\n        self.rank = [0 for i in range(n)]\n\n    def find(self, n):\n        if self.parents[n] is -1:\n            return n\n        ret = self.find(self.parents[n])\n        self.parents[n] = ret\n        return ret\n\n    def union(self, a, b):\n        if a is -1 or b is -1:\n            return False\n        x, y = self.find(a), self.find(b)\n        if self.find(a) == self.find(b) and x is not -1:\n            return False\n        if self.rank[x] == self.rank[y]:\n            self.parents[x] = y\n            self.rank[x] = self.rank[y] = self.rank[x] + 1\n        elif self.rank[x] > self.rank[y]:\n            self.parents[y] = x\n            self.rank[y] = self.rank[x]\n        else:\n            self.parents[x] = y\n            self.rank[x] = self.rank[y]\n        return True\n\n\nds = DSet(2 * int(input()))\nstr1, str2 = input(), input()\n\nalphaHash = [-1 for i in range(26)]\nfor i in range(len(str1)):\n    ds.union(i, alphaHash[ord(str1[i]) - ord('a')])\n    alphaHash[ord(str1[i]) - ord('a')] = i\n    ds.union(len(str1) + i, alphaHash[ord(str2[i]) - ord('a')])\n    alphaHash[ord(str2[i]) - ord('a')] = len(str1) + i\n\nans = []\nfor i in range(len(str1)):\n    if ds.union(i, len(str1) + i):\n        ans.append((str1[i], str2[i]))\n\nprint(len(ans))\nfor x in ans:\n    print(x[0] + \" \" + x[1])\n", "def main():\n    p = [i for i in range(26)]\n\n    def find(v):\n        if p[v] != v:\n            p[v] = find(p[v])\n        return p[v]\n\n    n = int(input())\n    s1 = input()\n    s2 = input()\n\n    ans = []\n\n    for i in range(n):\n        a = find(ord(s1[i]) - ord('a'))\n        b = find(ord(s2[i]) - ord('a'))\n\n        if a != b:\n            p[a] = b\n            ans.append((chr(ord('a') + a), chr(ord('a') + b)))\n\n    print(len(ans))\n\n    for a, b in ans:\n        print(a, b)\n        \n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import defaultdict\nfrom queue import Queue\n\nIS_WAY_CACHE = set()\n\n\ndef read_nums():\n    return [int(x) for x in input().split()]\n\n\ndef is_way(char_map, ch1, ch2):\n    nonlocal IS_WAY_CACHE\n    q = Queue()\n    q.put(ch1)\n    visited = {ch1}\n    while not q.empty():\n        cur_node = q.get()\n        if cur_node == ch2:\n            return True\n        visited.add(cur_node)\n        neighbours = char_map[cur_node]\n        for n in neighbours:\n            IS_WAY_CACHE.add((ch1, n))\n            if n not in visited:\n                q.put(n)\n    return False\n\n\ndef is_way_cache(ch1, ch2):\n    return (ch1, ch2) in IS_WAY_CACHE\n\n\ndef main():\n    input()\n    one, two = input(), input()\n    char_map = defaultdict(set)\n    res = []\n    for ch1, ch2 in zip(one, two):\n        if ch1 == ch2:\n            continue\n        if is_way_cache(ch1, ch2):\n            continue\n        if is_way_cache(ch2, ch1):\n            continue\n        if is_way(char_map, ch1, ch2):\n            continue\n        if is_way(char_map, ch2, ch1):\n            continue\n        res.append((ch1, ch2))\n        char_map[ch1].add(ch2)\n        char_map[ch2].add(ch1)\n\n    print(len(res))\n    for ch1, ch2 in res:\n        print(ch1, ch2)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from collections import defaultdict\nfrom queue import Queue\n\nIS_WAY_CACHE = set()\n\n\ndef is_way(char_map, ch1, ch2):\n    nonlocal IS_WAY_CACHE\n    q = Queue()\n    q.put(ch1)\n    visited = {ch1}\n    while not q.empty():\n        cur_node = q.get()\n        if cur_node == ch2:\n            return True\n        visited.add(cur_node)\n        neighbours = char_map[cur_node]\n        for n in neighbours:\n            IS_WAY_CACHE.add((ch1, n))\n            if n not in visited:\n                q.put(n)\n    return False\n\n\ndef is_way_cache(ch1, ch2):\n    return (ch1, ch2) in IS_WAY_CACHE\n\n\ndef main():\n    input()\n    one, two = input(), input()\n    char_map = defaultdict(set)\n    res = []\n    for ch1, ch2 in zip(one, two):\n        if ch1 == ch2:\n            continue\n        if is_way_cache(ch1, ch2):\n            continue\n        if is_way(char_map, ch1, ch2):\n            continue\n        res.append((ch1, ch2))\n        char_map[ch1].add(ch2)\n        char_map[ch2].add(ch1)\n\n    print(len(res))\n    for ch1, ch2 in res:\n        print(ch1, ch2)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def initialize(arr,n):\n    for i in range(n):\n        arr.append(i)\n    return arr\n\ndef root(arr,n):\n    while(arr[n]!=n):\n        n=arr[n]\n    return n\n\ndef union(arr,a,b):\n    arr[a]=arr[b]\n\nn=int(input())\na=input()\nb=input()\narr=initialize([],26)\ncnt=0\nans=[]\nfor i in range(n):\n    a1=ord(a[i])-97\n    b1=ord(b[i])-97\n    x=root(arr,a1)\n    y=root(arr,b1)\n    if(x!=y):\n        cnt+=1\n        union(arr,x,y)\n        ans.append([a[i],b[i]])\nprint(cnt)\nfor i in ans:\n    print(i[0],i[1])\n", "\n#k=int(input())\n#n,m=map(int,input().split())\n\n#a=list(map(int,input().split()))\n\n#b=list(map(int,input().split()))\n\n\ndef dfs(x):\n    for s in range(1,cnt[x]+1):\n        if label[alp2[x][s]]==0:\n           label[alp2[x][s]]=label[x]\n           dfs(alp2[x][s])\n\nn=int(input())\na=input()\nb=input()\n\nl=n\n\nalp=[0]*27\nalp2=[0]*27\ncnt=[0]*27\nlabel=[-1]*27\n\nfor i in range(27):\n    alp[i]=[0]*27\n    alp2[i]=[0]*27\n\nfor i in range(l):\n    label[ord(a[i])-ord('a')+1]=0\n    label[ord(b[i])-ord('a')+1]=0\n\ncntlet=0\nfor i in range(27):\n    if label[i]==0:\n        cntlet+=1\n\nfor i in range(l):\n    alp[ord(a[i])-ord('a')+1][ord(b[i])-ord('a')+1]=1\n    alp[ord(b[i])-ord('a')+1][ord(a[i])-ord('a')+1]=1\n\nfor i in range(27):\n    for j in range(i+1,27):\n        if alp[i][j]==1:\n            cnt[i]+=1\n            cnt[j]+=1\n            alp2[i][cnt[i]]=j\n            alp2[j][cnt[j]]=i\n\ncon=0\n\n\nfor i in range(1,27):\n    if(label[i]==0):\n        con+=1\n        label[i]=con\n        dfs(i)\n\nprint(cntlet-con)\n\nfor i in range(1,con+1):\n    for j in range(1,27):\n        if label[j]==i:\n            break\n\n    for k in range(j+1,27):\n        if label[k]==i:\n            print(chr(j-1+ord('a')), chr(k-1+ord('a')))", "def find(x,parent,rank):\n    if(parent[x]!=x):\n        parent[x]=find(parent[x],parent,rank)\n    return parent[x]\n\ndef union(x,y,parent,rank):\n    \n    xroot=parent[x]\n    yroot=parent[y]\n    \n    if(rank[xroot]<rank[yroot]):\n        parent[xroot]=yroot\n    elif(rank[xroot]>rank[yroot]):\n        parent[yroot]=xroot\n    else:\n        parent[yroot]=xroot\n        rank[xroot]+=1\n    \n    \n    \nn=int(input())\nstr1=input()\nstr2=input()\n\nhashd=dict()\nrev=dict()\ni=0\nk=0\nwhile(i<len(str1)):\n    if(str1[i] not in hashd):\n        hashd[str1[i]]=k\n        rev[k]=str1[i]\n        k+=1\n    i+=1\ni=0\nwhile(i<len(str2)):\n    if(str2[i] not in hashd):\n        hashd[str2[i]]=k\n        rev[k]=str2[i]\n        k+=1\n    i+=1\n\nrank=[0 for x in range(k)]\nparent=[x for x in range(k)]\nsums=0\ni=0\narr1=[]\narr2=[]\nwhile(i<n):\n    if(find(hashd[str1[i]],parent,rank)!=find(hashd[str2[i]],parent,rank)):\n        sums+=1\n        union(hashd[str1[i]],hashd[str2[i]],parent,rank)\n        arr1.append(str1[i])\n        arr2.append(str2[i])\n    i+=1\nprint(sums)\ni=0\nwhile(i<len(arr1)):\n    print(arr1[i]+' '+arr2[i])\n    i+=1\n", "n=int(input())\na=input()\n\nb=input()\ndiff=[]\nfor i in range(n):\n    if(a[i]!=b[i]):\n        posai=-1\n        posbi=-1\n        \n        for j in range(len(diff)):\n            if(a[i] in diff[j]):\n                posai=j\n            if(b[i] in diff[j]):\n                posbi=j\n        if(posbi!=-1 and posai!=-1):\n            if(posbi==posai):\n                pass\n            else:\n                diff[posai]=diff[posai].union(diff[posbi])\n                del diff[posbi]\n        elif(posbi!=-1):\n            diff[posbi].add(a[i])\n        elif(posai!=-1):\n            diff[posai].add(b[i])\n        else:\n            diff.append({a[i],b[i]})\n#print(diff)\ndiff2=[]\nfor i in diff:\n    diff2.append([])\n    for j in i:\n        diff2[-1].append(j)\nans=0\nfor i in diff2:\n    ans+=len(i)-1\nprint(ans)\nfor i in diff2:\n    for j in range(1,len(i)):\n        print(i[j-1],i[j])\n    \n    \n", "n = int(input())\na = input()\nb = input()\nf = lambda c: ord(c) - 97\ng = lambda x: chr(97 + x)\nfa = [i for i in range(26)]\nget_fa = lambda x: x if fa[x] == x else get_fa(fa[x])\nfor i in range(n):\n    child = f(b[i])\n    father = get_fa(child)\n    while (child != father):\n        child = fa[child]\n    fa[child] = get_fa(f(a[i]))\nprint(sum(i != get_fa(i) for i in range(26)))\nfor i in range(26):\n    l = i\n    r = fa[i]\n    if l != r:\n        print(g(l), g(r))\n", "def getfather(x):\n    if (x == fa[x]): return x\n    fa[x] = getfather(fa[x])\n    return fa[x]\n\nn = int(input())\ns = list(input())\nt = list(input())\nfa = [_ for _ in range(26)]\n\nans = []\ntot = 0\nfor i in range(n):\n    x = ord(s[i]) - 97\n    y = ord(t[i]) - 97\n    fx = getfather(x)\n    fy = getfather(y)\n    if fx != fy:\n        fa[fx] = fy\n        tot += 1\n        ans.append((chr(x + 97),chr(y + 97)))\n\nprint(tot)\nfor i in ans:\n    print(i[0] + \" \" + i[1])\n    \n\n", "\ndef find(list, v):\n  if list[v] != v:\n    list[v] = find(list, list[v])\n  return list[v]\n\ndef union(list, a, b):\n  list[a] = b\n\nd = [i for i in range(26)]\nans = []\n\nn = int(input())\ns1 = input()\ns2 = input()\n\nfor i in range(n):\n  a = find(d, ord(s1[i]) - ord('a'))\n  b = find(d, ord(s2[i]) - ord('a'))\n  if a == b:\n    continue\n\n  union(d, a, b)\n  ans.append((chr(ord('a') + a), chr(ord('a') + b)))\n\nprint(len(ans))\nfor a, b in ans:\n  print(a, b)\n", "class Union_Find():\n    def __init__(self, value):\n        self.parents = None\n        self.value = None\n\n    def find_parents(self):\n        if (self.parents == None):\n            return self\n        else:\n            self.parents = self.parents.find_parents()\n            return self.parents\n\n\nn = int(input().strip())\ns1 = input().strip()\ns2 = input().strip()\n\ndp = dict()\nfor i in s1:\n    if i not in dp:\n        dp[i] = Union_Find(i)\nfor i, v in enumerate(s2):\n    if v not in dp:\n        dp[v] = Union_Find(v)\n    fr = dp[v].find_parents()\n    to = dp[s1[i]].find_parents()\n    if (fr != to):\n        fr.parents = to\n\nans = dict()\ncnt = 0\nfor i in dp:\n    now = dp[i].find_parents()\n    if now in ans:\n        ans[now].append(i)\n        cnt += 1\n    else:\n        ans[now] = [i]\nprint(cnt)\nfor i in ans:\n    for j in range(1, len(ans[i])):\n        print(ans[i][j - 1], ans[i][j])", "n = int(input())\na = input()\nb = input()\n\npr = {}\nans = []\n\nfor i in range(0, 26):\n    pr[i] = i\n\ndef find_set(v):\n    if pr[v] == v:\n        return v\n    pr[v] = find_set(pr[v])\n    return pr[v]\n\ndef union_set(x, y):\n    pr[x] = y\n    ans.append((x, y))\n\nfor i in range(len(a)):\n    pa = find_set(ord(a[i]) - 97)\n    pb = find_set(ord(b[i]) - 97)\n    if pa == pb:\n        continue\n    union_set(pa, pb)\n\nprint(len(ans))\nfor i in ans:\n    print(chr(97 + i[0]), chr(97 + i[1]))", "from collections import defaultdict\n\nadj_matrix = defaultdict(list)\n\nn = int(input())\ns1 = input()\ns2 = input()\n\n#Create Graph\nfor i in range(n):\n    if(s1[i] != s2[i]):\n        adj_matrix[s1[i]].append(s2[i])\n        adj_matrix[s2[i]].append(s1[i])\n\nvisited = set()\nmst = []\ncount = 0\ndef dfs_util(vertices):\n    nonlocal  count\n    for vertex in adj_matrix[vertices]:\n        if vertex not in visited:\n            count += 1\n            mst.append((vertices, vertex))\n            visited.add(vertex)\n            dfs_util(vertex)\n\nfor vertices in adj_matrix:\n    if vertices not in visited:\n        visited.add(vertices)\n        dfs_util(vertices)\nprint(count)\nfor finds in mst:\n    print(finds[0], finds[1])", "links = [{i} for i in range(26)]\nspells = []\n\ncount = 0\nn = int(input())\ns1 = input()\ns2 = input()\n\nfor i in range(0,n):\n  n1 = ord(s1[i]) - 97\n  n2 = ord(s2[i]) - 97\n  if n1 != n2 and not (n2 in links[n1]):\n    links[n1] = links[n1].union(links[n2])\n    links[n2] = links[n2].union(links[n1])\n    for j in links[n1]:\n      if j != n1:\n        links[j] = links[n1].union(links[j])\n\n    count = count + 1\n    spells.append(chr(97+n1) + \" \" + chr(97+n2))\n\nprint(count)\n\nfor i in spells:\n  print(i)"]