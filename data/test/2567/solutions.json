["t=int(input())\nfor t in range(t):\n\tn=int(input())\n\ts=input()\n\ta=[int(x) for x in s]\n\tp=a[n-1]\n\tprint(str(p)*n)", "for nt in range(int(input())):\n\tn = int(input())\n\ts = input()\n\tprint (s[n-1]*n)", "for it in range(1, int(input()) + 1):\n    n = int(input())\n    s = input()\n    if s.count('0') > s.count('1'):\n        print('0' * n)\n    else:\n        print('1' * n)\n", "import math\n\nT = int(input())\n\n#lets = 'abcdefghijklmnopqrstuvwxyz'\n#key = {lets[i]:i for i in range(26)}\n\nfor t in range(T):\n  n = int(input())\n  #n,m = map(int, input().split())\n  #a = list(map(int,list(input().split())))\n  #a = list(input())\n  a = input()\n  d = False\n  print(a[n-1]*n)\n\n\n", "import sys\nlines = sys.stdin.read().splitlines()\nlincnt = -1 \n\ndef input():\n    nonlocal lincnt\n    lincnt += 1\n    return lines[lincnt]\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(n * s[n-1])\n\n", "import sys\n\ncases = True\n\ndef c2(n):\n    return n * (n+1) // 2\n\ndef get():\n    return list(map(int, input().split()))\n\ndef bits(n: int):\n    return list(bin(n)).count('1')\n\ndef main(test_case = False):\n    n = int(input()) if test_case else 1\n    for _ in range(n):\n        test()\n\ndef flush():\n    sys.stdout.flush()\n\ndef parr(arr):\n    print(*arr, sep=' ')\n\ndef gcd(a, b):\n    while b:\n        if b % a == 0:\n            break\n        tmp = a\n        a = b % a\n        b = tmp\n    return a\n\ndef test():\n    n = int(input())\n    s = input()\n    c = s[n-1]\n    t = c * n\n    print(t)\n\nmain(cases)", "for _ in range(int(input())):\n  n = int(input())\n  print(input()[n - 1] * n)", "for _ in range (int(input())):\n    n = int(input())\n    s=input()\n    char = s[n-1]\n    ans = ''\n    for i in range (n):\n        ans += char\n    print(ans)", "import sys\nsys.setrecursionlimit(10000)\n# default is 1000 in python\n\n# increase stack size as well (for hackerrank)\n# import resource\n# resource.setrlimit(resource.RLIMIT_STACK, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))\n\n\nt = int(input())\n# t = 1\n\nfor _ in range(t):\n\tn = int(input())\n\ts = input()\n\tans = \"\"\n\tfor i in range(n):\n\t\tans += s[n-1]\n\tprint(ans)\n\n\n# try:\n\t# raise Exception\n# except:\n\t# print(\"-1\")\n\n\n# from itertools import combinations \n# all_combs = list(combinations(range(N), r))\n\n\n\n# from collections import OrderedDict \n# mydict = OrderedDict() \n\n\n# thenos.sort(key=lambda x: x[2], reverse=True)\n\n\n# int(math.log(max(numbers)+1,2))\n\n\n# 2**3 (power)\n\n\n# a,t = (list(x) for x in zip(*sorted(zip(a, t))))\n\n\n# to copy lists use .copy()\n\n\n# pow(p, si, 1000000007) for modular exponentiation\n\n\n# my_dict.pop('key', None)\n# This will return my_dict[key] if key exists in the dictionary, and None otherwise.\n\n\n# bin(int('010101', 2))\n\n", "import math\n\nt = int(input())\n\nfor q in range(t):\n    n = int(input())\n    s = input()\n    for i in range(n):\n        print(s[n - 1], end = '')\n    print('')\n", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    print(s[n - 1]*n)\n"]