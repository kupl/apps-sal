["def flatten(grid):\n    k = len(grid[0]) // 2\n    seek = list(range(2*k + 2)) + list(range(2*k + 2, 4*k + 2))[::-1]\n    return [seek[v] for v in grid[0] + grid[1][::-1] if v]\n\ndef solve(grid):\n    grid = list(map(list, grid))\n    k = len(grid[0]) // 2\n    flat = flatten(grid)\n\n    m = {\n        'L': 'l'*2*k + 'u' + 'r'*2*k + 'd',\n        'R': 'u' + 'l'*2*k + 'd' + 'r'*2*k,\n        'C': 'l'*k + 'u' + 'r'*k + 'd',\n        'D': 'CC' + 'R'*(2*k + 1) + 'CC' + 'R'*(2*k + 2),\n        'F': 'R'*(k - 1) + 'DD' + 'R'*(2*k + 1) + 'D' + 'L'*2*k + 'DD' + 'L'*k,\n        'G': 'FF',\n    }\n\n    [(i, j)] = [(i, j) for i in range(2) for j in range(2*k + 1) if grid[i][j] == 0]\n    st = 'r'*(2*k - j) + 'd'*(1 - i)\n\n    for v in range(2, 4*k + 2):\n        ct = flat.index(v)\n\n        if ct >= 2:\n            st += 'L'*(ct - 2) + 'GR'*(ct - 2) + 'G'\n            flat = flat[ct - 1: ct + 1] + flat[:ct - 1] + flat[ct + 1:]\n\n        if ct >= 1:\n            st += 'G'\n            flat = flat[1:3] + flat[:1] + flat[3:]\n\n        st += 'L'\n        flat = flat[1:] + flat[:1]\n        \n    if flat[0] == 1: return st, m\n\ndef main():\n    def get_line():\n        return [0 if x == 'E' else int(x) for x in input().split()]\n\n    for cas in range(int(input())):\n        k = int(input())\n        grid = [get_line() for i in range(2)]\n        assert all(len(row) == 2*k + 1 for row in grid)\n        res = solve(grid)\n        if res is None:\n            print('SURGERY FAILED')\n        else:\n            print('SURGERY COMPLETE')\n            st, m = res\n            print(st)\n            for shortcut in list(m.items()): print(*shortcut)\n            print('DONE')\n\nmain()\n", "def solve(k, grid):\n    seek = *list(range(2*k + 2)), *list(range(4*k + 1, 2*k + 1, -1))\n    flat = [seek[v] for v in grid[0] + grid[1][::-1] if v]\n\n    m = {\n        'L': 'l'*2*k + 'u' + 'r'*2*k + 'd',\n        'R': 'u' + 'l'*2*k + 'd' + 'r'*2*k,\n        'C': 'l'*k + 'u' + 'r'*k + 'd',\n        'D': 'CC' + 'R'*(2*k + 1) + 'CC' + 'R'*(2*k + 2),\n        'F': 'R'*(k - 1) + 'DD' + 'R'*(2*k + 1) + 'D' + 'L'*2*k + 'DD' + 'L'*k,\n        'G': 'FF',\n    }\n\n    [(i, j)] = [(i, j) for i in range(2) for j in range(2*k + 1) if grid[i][j] == 0]\n    st = 'r'*(2*k - j) + 'd'*(1 - i)\n\n    for v in range(2, 4*k + 2):\n        ct = flat.index(v)\n\n        if ct >= 2:\n            st += 'L'*(ct - 2) + 'GR'*(ct - 2) + 'G'\n            flat = flat[ct - 1: ct + 1] + flat[:ct - 1] + flat[ct + 1:]\n\n        if ct >= 1:\n            st += 'G'\n            flat = flat[1:3] + flat[:1] + flat[3:]\n\n        st += 'L'\n        flat = flat[1:] + flat[:1]\n        \n    if flat[0] == 1: return st, m\n\ndef main():\n    def get_line():\n        return [0 if x == 'E' else int(x) for x in input().split()]\n\n    for cas in range(int(input())):\n        res = solve(int(input()), [get_line() for i in range(2)])\n        if res is None:\n            print('SURGERY FAILED')\n        else:\n            print('SURGERY COMPLETE')\n            st, m = res\n            print(st)\n            for shortcut in list(m.items()): print(*shortcut)\n            print('DONE')\n\nmain()\n", "def solve(k, grid):\n    seek = *range(2*k + 2), *range(4*k + 1, 2*k + 1, -1)\n    flat = [seek[v] for v in grid[0] + grid[1][::-1] if v]\n\n    m = {\n        'L': 'l'*2*k + 'u' + 'r'*2*k + 'd',\n        'R': 'u' + 'l'*2*k + 'd' + 'r'*2*k,\n        'C': 'l'*k + 'u' + 'r'*k + 'd',\n        'D': 'CC' + 'R'*(2*k + 1) + 'CC' + 'R'*(2*k + 2),\n        'F': 'R'*(k - 1) + 'DD' + 'R'*(2*k + 1) + 'D' + 'L'*2*k + 'DD' + 'L'*k,\n        'G': 'FF',\n    }\n\n    [(i, j)] = [(i, j) for i in range(2) for j in range(2*k + 1) if grid[i][j] == 0]\n    st = 'r'*(2*k - j) + 'd'*(1 - i)\n\n    for v in range(2, 4*k + 2):\n        ct = flat.index(v)\n\n        if ct >= 2:\n            st += 'L'*(ct - 2) + 'GR'*(ct - 2) + 'G'\n            flat = flat[ct - 1: ct + 1] + flat[:ct - 1] + flat[ct + 1:]\n\n        if ct >= 1:\n            st += 'G'\n            flat = flat[1:3] + flat[:1] + flat[3:]\n\n        st += 'L'\n        flat = flat[1:] + flat[:1]\n        \n    if flat[0] == 1: return st, m\n\ndef main():\n    def get_line():\n        return [0 if x == 'E' else int(x) for x in input().split()]\n\n    for cas in range(int(input())):\n        res = solve(int(input()), [get_line() for i in range(2)])\n        if res is None:\n            print('SURGERY FAILED')\n        else:\n            print('SURGERY COMPLETE')\n            st, m = res\n            print(st)\n            for shortcut in m.items(): print(*shortcut)\n            print('DONE')\n\nmain()", "def solve(k, grid):\n    seek = *range(2*k + 2), *range(4*k + 1, 2*k + 1, -1)\n    flat = [seek[v] for v in grid[0] + grid[1][::-1] if v]\n\n    m = {\n        'L': 'l'*2*k + 'u' + 'r'*2*k + 'd',\n        'R': 'u' + 'l'*2*k + 'd' + 'r'*2*k,\n        'C': 'l'*k + 'u' + 'r'*k + 'd',\n        'D': 'CC' + 'R'*(2*k + 1) + 'CC' + 'R'*(2*k + 2),\n        'F': 'R'*(k - 1) + 'DD' + 'R'*(2*k + 1) + 'D' + 'L'*2*k + 'DD' + 'L'*k,\n        'G': 'FF',\n    }\n\n    [(i, j)] = [(i, j) for i in range(2) for j in range(2*k + 1) if grid[i][j] == 0]\n    st = 'r'*(2*k - j) + 'd'*(1 - i)\n\n    for v in range(2, 4*k + 2):\n        ct = flat.index(v)\n\n        if ct >= 2:\n            st += 'L'*(ct - 2) + 'GR'*(ct - 2) + 'G'\n            flat = flat[ct - 1: ct + 1] + flat[:ct - 1] + flat[ct + 1:]\n\n        if ct >= 1:\n            st += 'G'\n            flat = flat[1:3] + flat[:1] + flat[3:]\n\n        st += 'L'\n        flat = flat[1:] + flat[:1]\n        \n    if flat[0] == 1: return st, m\n\ndef main():\n    def get_line():\n        return [0 if x == 'E' else int(x) for x in input().split()]\n\n    for cas in range(int(input())):\n        res = solve(int(input()), [get_line() for i in range(2)])\n        if res is None:\n            print('SURGERY FAILED')\n        else:\n            print('SURGERY COMPLETE')\n            st, m = res\n            print(st)\n            for shortcut in m.items(): print(*shortcut)\n            print('DONE')\n\nmain()"]