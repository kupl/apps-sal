["n, k = map(int, input().split())\ns = input()\nour = set()\nopened = set()\nfor i in range(ord('A'), ord('Z') + 1):\n    sym = chr(i)\n    if sym in s:\n        our.add(s.rfind(sym))\nfor i in range(len(s)):\n    if s[i] not in opened:\n        opened.add(s[i])\n        k -= 1\n        if k < 0:\n            print('YES')\n            return\n    if i in our:\n        k += 1\nprint('NO')", "n,k=input().split()\nn=int(n)\nk=int(k)\nl=input()\nd={}\nfor val in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n\td[val]=0\nfor val in l:\n\td[val]+=1\nopened={}\nflag=0\nfor val in l:\n\tif(val not in opened):\n\t\topened[val]=1\n\td[val]-=1\n\tif(len(opened)>k):\n\t\tflag=1\n\t\tbreak\n\tif(d[val]==0):\n\t\tdel(opened[val])\nif(flag==0):\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")", "from string import ascii_uppercase as let\nimport sys\n\n\ndef main():\n    n, k = map(int, input().split())\n    l = input()\n    a = [0 for i in range(26)]\n    for i in l:\n        a[let.index(i)] += 1\n    fk = k\n    od = set()\n    for i in l:\n        if i not in od:\n            fk -= 1\n            if fk < 0:\n                print('YES')\n                return\n            od.add(i)\n        a[let.index(i)] -= 1\n        if a[let.index(i)] == 0:\n            od.remove(i)\n            fk += 1\n    print('NO')\nmain()", "n, k = list(map(int,input().split()))\ns = input()\nstart = [-1]*26\nend = [-1]*26\n\nfor i in range(n):\n    door = ord(s[i])-ord('A')\n    end[door] = i\n    if start[door] == -1:\n        start[door] = i\n\nl = []\nfor i in range(26):\n    l.append([i,1,start[i]])\n    l.append([i,-1,end[i]])\n\nl = sorted(l,key=lambda x: x[2])\n\nnum = 0\nm = 0\nfor i in l:\n    num += i[1]\n    m = max(m,num)\n\nif m > k:\n    print('YES')\nelse:\n    print('NO')\n", "from sys import stdin, stdout\nimport string\n\nn,k = list(map(int,stdin.readline().rstrip().split()))\ns = list(stdin.readline().rstrip())\n\ndoorOpen = {}\ndoorClosed = {}\n\nfor i in range(n):\n    if s[i] not in list(doorOpen.keys()):\n        doorOpen[s[i]] = i\n\nfor i in range(n-1,-1,-1):\n    if s[i] not in list(doorClosed.keys()):\n        doorClosed[s[i]] = i\n\nevents = [(x,'o') for x in list(doorOpen.values())] + [(x,'x') for x in list(doorClosed.values())]\n\nevents.sort(key=lambda x: x[1])\nevents.sort(key = lambda x:x[0])\n\n\nopened = 0\nunguarded = False\nfor i in range(len(events)):\n    if events[i][1]=='o':\n        opened+=1\n    else:\n        opened-=1\n    if opened>k:\n        unguarded = True\n        break\n\nif unguarded:\n    print('YES')\nelse:\n    print('NO')\n        \n", "n,k = [int(i) for i in input().strip().split()]\ng_l = input().strip()\n\nclosing_i = dict()\nis_closing = [False for i in range(n)]\nfor i in range(n):\n\ti = n-i-1\n\tif g_l[i] not in closing_i:\n\t\tclosing_i[g_l[i]] = i\n\t\tis_closing[i] = True\nopen_d = dict()\ncur_open = 0\ng_open = 0\nfor i in range(n):\n\tif g_l[i] not in open_d:\n\t\topen_d[g_l[i]] = True\n\t\tcur_open += 1\n\t\tg_open = max(cur_open,g_open)\n\tif is_closing[i]:\n\t\tcur_open -= 1\nif g_open > k: print('YES')\nelse: print('NO')\n", "n, k = [int(i) for i in input().split()]\na = input()\nd = [[n + 1, 0] for i in range(26)]\nfor i in range(n):\n    s = ord(a[i]) - ord('A')\n    d[s][0] = min(d[s][0], i)\n    d[s][1] = i\nev = []\nfor i in d:\n    if i[0] != n + 1:\n        ev.append([i[0], 0])\n        ev.append([i[1], 1])\nev.sort()\nb = 0\nmb = 0\nfor i in range(len(ev)):\n    if ev[i][1] == 1:\n        b -= 1\n    else:\n        b += 1\n    mb = max(mb, b)\nprint(['NO', 'YES'][int(mb > k)])\n", "from sys import stdin\n\nn, k = list(map(int, stdin.readline().rstrip().split()))\ndata = stdin.readline().rstrip()\n\ndoors = {}\nfor c in data:\n    if c in doors:\n        doors[c] += 1\n    else:\n        doors[c] = 1\n\nopening_doors_count = 0\nopened_doors = {}\n\nfor c in data:\n    if c not in opened_doors:\n        opened_doors[c] = True\n        opening_doors_count += 1\n\n    if opening_doors_count > k:\n        print('YES')\n        return\n\n    doors[c] -= 1\n\n    if doors[c] == 0:\n        opening_doors_count -= 1\n        opened_doors[c] = False\n\nprint('NO')\n", "\"\"\"\n\tAuthor\t\t: Arif Ahmad\n\tDate  \t\t: \n\tAlgo  \t\t: \n\tDifficulty\t: \n\"\"\"\nfrom sys import stdin, stdout\n\ndef main():\n\tn, k = [int(_) for _ in stdin.readline().strip().split()]\n\ts = stdin.readline().strip()\n\n\n\tlast = dict()\n\tfor i in range(26):\n\t\tc = chr(ord('A') + i)\n\t\tfor j in range(n-1, -1, -1):\n\t\t\tif s[j] == c:\n\t\t\t\tlast[c] = j\n\t\t\t\tbreak\n\n\tguardAssigned = dict()\n\tfor i in range(26):\n\t\tc = chr(ord('A') + i)\n\t\tguardAssigned[c] = False\n\n\ttotalGuard = 0\n\tmaxGuard = 0\n\tfor i, c in enumerate(s):\n\t\tif not guardAssigned[c]:\n\t\t\tguardAssigned[c] = True\n\t\t\ttotalGuard += 1\n\t\t\tmaxGuard = max(maxGuard, totalGuard)\n\t\tif i == last[c]:\n\t\t\ttotalGuard -= 1\n\n\t#print('maxgurad:', maxGuard)\n\tif maxGuard > k: stdout.write('YES\\n')\n\telse: stdout.write('NO\\n')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k= input().split()\nn, k= int(n), int(k)\ns= input()\nd= {}\nf= {}\nfor i in range(65, 65+26):\n    d[chr(i)]= 0\n    f[chr(i)]= 0\n\nfor i in s:\n    d[i]+=1\n\nnum= 0\n\nfor i in s:\n    if(f[i]== 0):\n        num+= 1\n        if(num > k):\n            print('YES')\n            return\n    f[i]+= 1\n    if(f[i]== d[i]):\n        num-= 1\n\nprint('NO')\n\n", "n, k = list(map(int, input().split()))\ns = list(input())\n\nop = [n for _ in range(26)]\ncl = [-1 for _ in range(26)]\nfor i in range(n):\n    j = ord(s[i]) - ord(\"A\")\n    op[j] = min(op[j], i)\n    cl[j] = max(cl[j], i)\n\ncnt = [0 for _ in range(2 * n + 1)]\nfor i in range(26):\n    if op[i] < n:\n        cnt[op[i] * 2 + 1] += 1\n    if -1 < cl[i]:\n        cnt[cl[i] * 2 + 2] -= 1\nfor i in range(1, 2 * n + 1):\n    cnt[i] += cnt[i - 1]\n\nif k < max(cnt):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "string_len, condition_value = (int(x) for x in input().split())\nidx___letter = list(input())\n\nletter___start__finish = {}\n\nfor idx, letter in enumerate(idx___letter):\n    if letter not in letter___start__finish:\n        letter___start__finish[letter] = [idx, idx]\n    if letter___start__finish[letter][1] < idx:\n        letter___start__finish[letter][1] = idx\n\nmax_events_open = 0\ncurr_events_open = 0\nfor idx, letter in enumerate(idx___letter):\n    start, close = letter___start__finish[letter]\n    if idx == start:\n        curr_events_open += 1\n        max_events_open = max(max_events_open, curr_events_open)\n    if idx == close:\n        curr_events_open -= 1\nif max_events_open > condition_value:\n    print('YES')\nelse:\n    print('NO')\n\n", "#!/usr/bin/env python3\nfrom sys import stdin, stdout\n\ndef rint():\n    return list(map(int, stdin.readline().split()))\n#lines = stdin.readlines()\n\n\nn, k = rint()\ns = input()\nsl = {}\nfor i in range(len(s)):\n    if not s[i] in sl:\n        sl[s[i]] = [i,i]\n    else:\n        sl[s[i]][1] = i\ncnt = 0\nfor i in range(len(s)):\n    if sl[s[i]][0] == i:\n        cnt+=1\n    if cnt > k:\n        print(\"YES\")\n        return\n    if sl[s[i]][1] == i:\n        cnt-=1\n\nprint(\"NO\")\n\n\n", "n,k = list(map(int,input().split()))\ndata = input()\nd = {}\nc = {}\nfor i in data:\n    if i not in c:\n        c[i]=1\n    else:\n        c[i]+=1\ncount = 0\nm = 0\n#print(c)\nfor i in data:\n    #print(m,d,count)\n    if i not in d: \n        count+=1\n        d[i]=1\n        m = max(m, count)\n        if d[i]==c[i]:\n            del d[i]\n            count-=1        \n    else:\n        d[i]+=1\n        if d[i]==c[i]:\n            del d[i]\n            count-=1\nif m<=k :\n    print('NO')\nelse:\n    print('YES')\n", "n, k = list(map(int, input().split()))\ns = input()\n\ncq = [0] * 26\ndo = [0] * 26\n\na = ord('A')\n\nfor i in s:\n    cq[ord(i) - a] += 1\n\ncntr = 0\n\nfor i in s:\n    ind = ord(i) - a\n    if do[ind] == 0:\n        cntr += 1\n    do[ind] += 1\n    if cntr > k:\n        print('YES')\n        return\n    if do[ind] == cq[ind]:\n        cntr -= 1\n    \n\nprint('NO')\n", "n, k = list(map(int, input().split()))\ns = input()\n\na = [None] * n\nd = {}\n\nfor i in range(n):\n    if s[i] not in d:\n        a[i] = 1\n        d[s[i]] = True\n\nd.clear()\nfor i in range(n - 1, -1, -1):\n    if s[i] not in d:\n        if a[i] is None:\n            a[i] = 0\n        else:\n            a[i] = -1\n        d[s[i]] = True\nc = 0\nfor el in a:\n    if el is not None and el == 1:\n        c += 1\n    if el is not None and el == 0:\n        c -= 1\n    if el is not None and el == -1:\n        if c + 1 > k:\n            print('YES')\n            return\n    if c > k:\n        print('YES')\n        return\nprint('NO')\n", "from collections import defaultdict as dd\n\na,k=[int(i) for  i in input().split()]\nb=input()\nal=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\ncome=[0]*(26)\nout=[0]*(26)\nfor i in range(a):\n    if come[al.index(b[i])]==0:\n        come[al.index(b[i])]=i+1\n        out[al.index(b[i])]=i+1\n    else:\n        out[al.index(b[i])]=i+1\ncm=[]\nfor i in range(26):\n    if come[i]!=0 and out[i]!=0:\n        cm.append((come[i],1))\n        cm.append((out[i],2))\ncm.sort()\nma=0\nans=0\nfor i in cm:\n    if i[1]==1:\n        ma+=1\n    else:\n        ma-=1\n    ans=max(ma,ans)\nif (k>=ans):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    \n\n", "n, k = list(map(int, input().split()))\np = input()\nls, nlaps = [], 0\nfor i in range(65, 91):\n    if chr(i) in p:\n        start = p.index(chr(i))\n        end = p.rfind(chr(i))\n        ls.append((start,'start'))\n        ls.append((end,'end'))\nls = list(sorted(ls, key=lambda x: x[0]))\n# print(ls)\nmaxl = 0\nfor i,x in enumerate(ls):\n    if x[1] == 'start':\n        nlaps += 1\n    else:\n        nlaps -= 1\n    maxl = max(maxl, nlaps)\nif k >= maxl:\n    print('NO')\nelse:\n    print('YES')\n    \n\n", "from collections import defaultdict as dd\n\n#milanmilanmilan\na,k=[int(i) for  i in input().split()]\nb=input()\nal=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\ncome=[0]*(26)\nout=[0]*(26)\nfor i in range(a):\n    if come[al.index(b[i])]==0:\n        come[al.index(b[i])]=i+1\n        out[al.index(b[i])]=i+1\n    else:\n        out[al.index(b[i])]=i+1\ncm=[]\nfor i in range(26):\n    if come[i]!=0 and out[i]!=0:\n        cm.append((come[i],1))\n        cm.append((out[i],2))\ncm.sort()\nma=0\nans=0\nfor i in cm:\n    if i[1]==1:\n        ma+=1\n    else:\n        ma-=1\n    ans=max(ma,ans)\nif (k>=ans):\n    print(\"NO\")\nelse:\n    print(\"YES\")", "from collections import defaultdict as dd\n\na,k=[int(i) for  i in input().split()]\nb=input()\nal=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\ncome=[0]*(26)\nout=[0]*(26)\nfor i in range(a):\n    if come[al.index(b[i])]==0:\n        come[al.index(b[i])]=i+1\n        out[al.index(b[i])]=i+1\n    else:\n        out[al.index(b[i])]=i+1\ncm=[]\nfor i in range(26):\n    if come[i]!=0 and out[i]!=0:\n        cm.append((come[i],1))\n        cm.append((out[i],2))\n#hello hi hello hi heljishfihfiefef\n#hello hi hello hi heljishfihfiefefhello hi hello hi heljishfihfiefef\n\n\n#hello hi hello hi heljishfihfiefef\n#hello hi hello hi heljishfihfiefef\n#hello hi hello hi heljishfihfiefef\n\n#hello hi hello hi heljishfihfiefef\n#hello hi hello hi heljishfihfiefefhello hi hello hi heljishfihfiefef\n\n\n#hello hi hello hi heljishfihfiefef\n#hello hi hello hi heljishfihfiefef\n#hello hi hello hi heljishfihfiefef\ncm.sort()\nma=0\nans=0\nfor i in cm:\n    if i[1]==1:\n        ma+=1\n    else:\n        ma-=1\n    ans=max(ma,ans)\nif (k>=ans):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n#hello hi hello hi heljishfihfiefef\n#hello hi hello hi heljishfihfiefefhello hi hello hi heljishfihfiefef\n\n\n#hello hi hello hi heljishfihfiefef\n#hello hi hello hi heljishfihfiefef\n#hello hi hello hi heljishfihfiefef\n", "n, k = [int(x) for x in input().split()]\nguests = list(input())\ndoors = dict()\ngt = dict()\nopened = 0\nf = True\nfor u in guests:\n    gt[u] = gt.get(u, 0) + 1\nfor i in guests:\n    if i not in doors:\n        doors[i] = 1\n        opened += 1\n    else:\n        doors[i] += 1\n    if opened > k:\n        print('YES')\n        f = False\n        break\n    if doors[i] == gt[i]:\n        opened -= 1\nif f:\n    print('NO')", "n,k=(int(i )for i in input().split())\ns=input()\na=[0]*n\nb=[]\nx=k\ny=0\nalf='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nend=[s.rfind(i) for i in alf]\nbegin=[s.find(i) for i in alf]\n\nf=False\nans=False\nfor i in range(n):\n    find=alf.find(s[i])\n    if ((i!=end[find]) and not(s[i] in b)) or ((begin[find]==end[find])):\n        b.append(s[i])\n        x-=1;\n    elif (i==end[find]) and  (i!=begin[find]):\n        x+=1\n    if x<0:\n        ans=True\n        break\n    if begin[find]==end[find]:\n        x+=1\nprint('YES' if ans else 'NO')\n", "n, k = map(int, input().split())\ns = input()\nif k >= len(set(s)):\n  print(\"NO\")\n  quit()\nl = {}\nfor e in set(s):\n  l[e] = len(s) - 1 - s[::-1].index(e)\ng = set()\nfor x in range(n):\n  if s[x] in g:\n    if x >= l[s[x]]:\n      k += 1\n      g.discard(s[x])\n  elif x >= l[s[x]]:\n    if k > 0:\n      continue\n    else:\n      print(\"YES\")\n      quit()\n  else:\n    g.add(s[x])\n    k -= 1\n    if k < 0:\n      print(\"YES\")\n      quit()\nprint(\"YES\" if k < 0 else \"NO\")", "n, k = [ int(i) for i in input().split(' ')]\nguests = input()\nflag = 'NO'\n\nguards = [' '] * k\n\nfor i in range(0, n):\n\tif guests[i] in guards:\n\t\tcontinue\n\tif ' ' in guards:\n\t\tguards[guards.index(' ')] = guests[i]\n\t\tcontinue\n\trest_guests = guests[i:]\n\tflag = 'YES'\n\tfor g in guards:\n\t\tif g in rest_guests:\n\t\t\tcontinue\n\t\telse:\n\t\t\tguards[guards.index(g)] = guests[i]\n\t\t\tflag = 'NO'\n\tif flag == 'YES':\n\t\tbreak\nprint(flag)"]