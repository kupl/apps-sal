["import sys\n\nreadline = sys.stdin.readline\nreadall = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\n\ndef solve():\n    a, b, c, d = nm()\n    m = 10**6 + 10\n    l = [0]*m\n    for i in range(a, b+1):\n        l[i+b] += 1\n        l[i+c+1] += -1\n    for i in range(m-1):\n        l[i] += l[i-1]\n    for i in range(m-2, -1, -1):\n        l[i] += l[i+1]\n    print(sum(l[i+1] for i in range(c, d+1)))\n    return\n\nsolve()\n\n# T = ni()\n# for _ in range(T):\n#     solve()\n", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\na, b, c, d = read_ints()\nans = 0\nm = min(c - b, d - c)\nn = max(c - b, d - c)\nfor delta in range(d - b + 1):\n    right = 0\n    if delta <= m:\n        right = delta + 1\n    elif delta <= n:\n        right = m + 1\n    else:\n        right = d - b - delta + 1\n    left = max(0, b - max(delta + 1, a) + 1)\n    ans += left * right\nprint(ans)\n", "a, b, c, d = map(int, input().split())\n\nans = 0\n\nru = [0] * (10 ** 6 + 10)\nfor x in range(a, b + 1):\n    l = x + b\n    r = x + c + 1\n    ru[l] += 1\n    ru[r] -= 1\nfor i in range(10 ** 6 + 9):\n    ru[i + 1] += ru[i]\n\nfor i in range(10 ** 6 + 9):\n    ru[i + 1] += ru[i]\n\nans = 0\nfor z in range(c, d + 1):\n    ans += ru[-1] - ru[z]\n\nprint(ans)", "def cnt(x) :\n\treturn x * (x + 1) // 2\nt = 1\nwhile t > 0:\n\tt -= 1\n\ta, b, c, d = map(int, input().split())\n\tans = 0\n\tfor x in range(a, b + 1) :\n\t\tl, r = x + b, x + c\n\t\tans += cnt(min(r, d) - c) - cnt(max(min(l - 1, d) - c, 0))\n\t\tans += max(0, r - max(d, l - 1)) * (d - c + 1)\n\tprint(ans)", "import sys\n\ndef solve():\n    input = sys.stdin.readline\n    A, B, C, D = map(int, input().split())\n    ans = 0\n    fib = [0] * (D + 1)\n    fib[1] = 1\n    for i in range(2, D + 1): \n        if i <= C - B + 1: fib[i] = fib[i-1] + i\n        else: fib[i] = fib[i-1] + (C - B + 1)\n    for z in range(C, D + 1):\n        if B + C <= z: continue\n        else:\n            xlow = z - C + 1\n            pN = B - xlow + 1\n            psubN = A - xlow\n            if xlow >= A: ans += fib[pN]\n            else: ans += fib[pN] - fib[psubN]\n\n    print(ans)\n\n    return 0\n\ndef __starting_point():\n    solve()\n__starting_point()", "import sys\n\ninput = sys.stdin.readline\n\n\ndef sum1(x):\n\tk = min(d, c + x - 1, b + x - 1)\n\tif k < c:\n\t\treturn 0\n\telse:\n\t\treturn (c - b + 1) * (k - c + 1)\n\ndef sum2(x):\n\tk = min(d, c + x - 1)\n\tl = max(b + x, c)\n\tif k < l:\n\t\treturn(0)\n\telse:\n\t\treturn (c + x) * (k - l + 1) - (k + l) * (k - l + 1) // 2\n\na, b, c, d = list(map(int, input().split()))\nres = 0\nfor x in range(a, b + 1):\n\tres += sum1(x) + sum2(x)\nprint(res)\n", "import sys\ninput = sys.stdin.readline\n\nA,B,C,D=list(map(int,input().split()))\n\ndef sm2(x,A,B,C):\n    MIN=A+B\n    MAX=B+C\n    fr=min(B-A,C-B)\n\n    sa=min(x-MIN,MAX-x,fr)\n\n    return sa+1\n\ndef calc(x,C,D):\n    return max(0,min(x-1,D)-C+1)\n\nANS=0\nfor x in range(A+B,B+C+1):\n    smplus=sm2(x,A,B,C)\n    ANS+=smplus*calc(x,C,D)\n\n    #print(x,smplus,ANS)\n\nprint(ANS)\n\n    \n", "a,b,c,d=map(int,input().split())\nsol=0\nz=c\nsm=min(c-b,b-a)\nbg=max(c-b,b-a)\nwhile b+c>=z and z<=d:\n    mn=a+b\n    m1=mn+sm\n    mx=b+c\n    m2=mx-sm\n    maxi=(sm+1)*(bg+1)\n    if mn>z:\n        sol+=maxi\n    if mn<=z and m1>z:\n        foo=z+1-mn\n        sol+=maxi\n        sol-=((foo)*(foo+1))//2\n    if m1<=z and m2>z:\n        foo=sm*(sm+1)\n        foo//=2\n        maxi-=foo\n        foo=z+1-m1\n        maxi-=(sm+1)*foo\n        sol+=maxi\n    if m2<=z and mx>z:\n        foo=mx-z\n        sol+=(foo*(foo+1))//2\n    z+=1\nprint(sol)", "A, B, C, D = [int(i) for i in input().split()]\n\ncount_ymz = [None for i in range(D-B + 1)]\nfor i in range(len(count_ymz)):\n\tcount_ymz[i] = min(C, D-i) - max(C-i, B) + 1\n\npre_count_ymz = [None for i in range(len(count_ymz))]\npre_count_ymz[0] = count_ymz[0]\nfor i in range(1, len(count_ymz)):\n\tpre_count_ymz[i] = pre_count_ymz[i-1] + count_ymz[i]\nans = 0\nfor x in range(A, B+1):\n\tif x > D-B + 1:\n\t\tans += pre_count_ymz[-1]\n\telse:\n\t\tans += pre_count_ymz[x-1]\n\nprint(ans)"]