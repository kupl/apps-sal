["n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nmask = list(map(int, input().split()))\n\nresult = sum(a[i] if mask[i] == 1 else 0 for i in range(n))\n\nh = [a[i] if mask[i] == 0 else 0 for i in range(len(a))]\nbest_awake = sum(h[:k])\ncurr = best_awake\nfor j in range(k, n):\n    curr += h[j]\n    curr -= h[j - k]\n    best_awake = max(best_awake, curr)\nprint(result + best_awake)\n", "\n\nimport sys\nn,k=list(map(int,input().split()))\n\nl=list(map(int,input().split()))\nt=list(map(int,input().split()))\nif(k>n):\n    print(sum(l))\n    return\nbase=0\nfor i in range(n):\n    if(t[i]==1):\n        base+=l[i]\n        l[i]=0\nmax1=0\ncur=sum(l[:k])\nmax1=cur\nfor i in range(k,n):\n    cur-=l[i-k]\n    cur+=l[i]\n    max1=max(cur,max1)\nprint(max1+ base)\n\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\ns = [0] * (n-k+1)\nres = 0\n\nfor i in range(n):\n    if t[i]== 1:\n        res += a[i]\n\nfor i in range(k):\n    if t[i]==0:\n        s[0] += a[i]\n\nfor i in range(1, n-k+1):\n    w = 0\n    if (t[i - 1] == 0): \n        w -= a[i - 1]\n    if (t[i + k - 1] == 0):\n        w += a[i + k - 1]\n    s[i] = s[i - 1] + w\n\nprint(res + max(s))", "n,k = list(map(int,input().split()))\n\nA = [int(x) for x in input().split()]\nT = [int(x) for x in input().split()]\n\nthe = 0\n\nfor i in range(n):\n    if T[i]:\n        the += A[i]\n        A[i] = 0\n\ns = sum(A[:k])\nboost = s\nfor i in range(k,n):\n    s = s - A[i-k] + A[i]\n    boost = max(s,boost)\n\nprint(the+boost)\n", "import atexit\nimport io\nimport sys\n\n# Buffering IO\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\ndef write():\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n    \n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    t = [int(x) for x in input().split()]\n    \n    mx = 0\n    for i in range(n):\n        if i < k:\n            mx += a[i]\n        else:\n            mx += a[i] * t[i]\n    \n    xx = mx\n    for i in range(n):\n        if i + k >= n:\n            break\n        xx -= a[i]\n        xx += a[i]*t[i]\n        xx += a[i+k]\n        xx -= a[i+k]*t[i+k]\n        mx =max(xx,mx)\n        \n    print(mx)\n    \n    \n\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "n,k = list(map(int,input().split()))\na = list(map(int,input().split()))\nc = list(map(int,input().split()))\ns = 0\nss = 0\nfor i in range(n):\n    if c[i] == 1:ss += a[i]\nfor i in range(k):\n    if c[i] == 0:\n        s += a[i]\nm = s\n#print(s)\nfor i in range(n-k):\n    if c[i] == 0:\n        s -= a[i]\n    if c[i+k] == 0:\n        s += a[i+k]\n    m = max(m,s)\n    #print(s)\nprint(ss+m)\n", "\nn, m = list(map(int,input().split()))\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\ns = [0]*n\nif b[0]==0:\n\ts[0] = a[0]\nsu = 0\nfor i in range(n):\n\tif b[i]==1:\n\t\tsu+=a[i]\nfor i in range(1,n):\n\tif b[i]==0:\n\t\ts[i] = a[i]\nmax_init_sum = init_sum = sum(s[:m])\nk = m\nfor i in range(k, n):\n\tinit_sum = init_sum - s[i-k] + s[i]\n\t#print (init_sum, s[i-k], s[k])\n\tmax_init_sum = max(max_init_sum, init_sum)\nprint(max_init_sum+su)\n", "n, k = map(int, input().split())\nA = list(map(int, input().split()))\nT = list(map(int, input().split()))\n\ngain = [0] * (n-k+1)\nfor i in range(k):\n    if T[i] == 0:\n        gain[0] += A[i]\n\nfor i in range(1, n-k+1):\n    gain[i] = gain[i-1]\n    if T[i-1] == 0:\n        gain[i] -= A[i-1]\n    if T[i+k-1] == 0:\n        gain[i] += A[i+k-1]\n\nsum = 0\nfor i in range(n):\n    if T[i] == 1:\n        sum += A[i]\n\nprint(sum + max(gain))", "from collections import Counter\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    print(solve(n, k, a, t))\n\ndef solve(n, k, a, t):\n    minsum = sum(ai for ai, ti in zip(a,t) if ti == 1)\n    inc = sum(ai for ai, ti in zip(a[:k], t[:k]) if ti == 0)\n    best_inc = inc\n    for i in range(1, n - k + 1):\n        if t[i - 1] == 0:\n            inc -= a[i - 1]\n        if t[i + k - 1] == 0:\n            inc += a[i + k - 1]\n        if inc > best_inc:\n            best_inc = inc\n    return minsum + best_inc\n\nmain()\n", "R = lambda: list(map(int, input().split()))\nn, k = R()\na = R()\nt = R()\n\ng = 0\nfor i in range(n):\n\tif t[i]:\n\t\tg += a[i]\n\nl = 0\nfor i in range(0, k):\n\tif t[i] == 0:\n\t\tl += a[i]\n\nmax_l = l\nfor i in range(k, n):\n\ta_new = a_old = 0\n\tif t[i-k] == 0:\n\t\ta_old = a[i-k]\n\tif t[i] == 0:\n\t\ta_new = a[i]\n\tl += a_new - a_old\n\tmax_l = max(max_l, l)\n\t\t\nprint(g + max_l)", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\n\nans = sum([a[i] for i in range(n) if t[i] == 1])\n\nz = [i for i in range(n) if t[i] == 0]\nln = len(z)\n\nd = 0\nnow = 0\nleft, right = 0, -1\nfor i in range(2 * ln):\n    if right + 1 < ln and z[right + 1] - z[left] < k:\n        right += 1\n\n        now += a[z[right]]\n        d = max(d, now)\n\n    else:\n        now -= a[z[left]]\n\n        left += 1\n\nprint(ans + d)\n", "t = input().split(' ')\nn = int(t[0])\nk = int(t[1])\nA = input().split(' ')\nB = input().split(' ')\nfor i in range(len(A)):\n    A[i] = int(A[i])\n    B[i] = int(B[i])\nsm = 0\nfor i in range(len(B)):\n    if B[i] == 1:\n        sm += A[i]\nmx = 0\nfor i in range(k):\n    if B[i] == 0:\n        mx += A[i]\ncur = mx\nfor j in range(n-k):\n    if B[j] == 0:\n        cur -= A[j]\n    if B[j+k] == 0:\n        cur += A[j+k]\n    if cur > mx:\n        mx = cur\nprint(mx + sm)\n", "def read_data():\n    n, m = map(int, list(input().strip().split()))\n    a = list(map(int, list(input().strip().split())))\n    b = list(map(int, list(input().strip().split())))\n    return n, m, a, b\n\ndef solve():\n    val = 0\n    for i in range(n):\n        if b[i] == 1:\n            val += a[i]\n    for i in range(k):\n        if b[i] == 0:\n            val += a[i]\n    i = k\n    max = val\n    while i < n:\n        if b[i-k] == 0:\n            val -= a[i-k]\n        if b[i] == 0:\n            val += a[i]\n        if val > max:\n            max = val\n        i += 1\n    return max\n\nn, k, a, b = read_data()\nprint(solve())", "def potential(a):\n    return a[0] if a[1] == 0 else 0\n\ndef theorems(a):\n    return a[0] if a[1] == 1 else 0\n\nn, k = list(map(int, input().split()))\nA = list(zip(\n    list(map(int, input().split())),\n    list(map(int, input().split())))\n)\n\nawake = 0\nfor a in A[:k]:\n    awake += potential(a)\n\nbest = awake\nfor i, a in enumerate(A[k:]):\n    awake += potential(a)\n    awake -= potential(A[i])\n    if awake > best:\n        best = awake\n\nalready = sum(\n    theorems(a)\n    for a in A\n)\n\nprint(already + best)\n", "n,k=list(map(int,input().split()))\nL=list(map(int,input().split()))\nT=list(map(int,input().split()))\nout=0\nfor i in range(n):\n    if T[i]==1:\n        out+=L[i]\n        L[i]=0\n\nps=[0]*(n+1)\nfor i in range(1,n+1):\n    ps[i]=ps[i-1]+L[i-1]\nx=0\nfor i in range(n-k+1):\n    x=max(x,ps[i+k]-ps[i])\nprint(x+out)\n", "n, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [0] * n\nnum1 = 0\nfor i in range(n):\n    if b[i] == 0:\n        c[i] = a[i]\n    else:\n        num1 += a[i]\n\nnum2 = 0\ns = sum(c[:k])\nfor i in range(n - k + 1):\n    num2 = max(num2, num1 + s)\n    if i != n - k:\n        s = s - c[i] + c[i + k]\n\nprint(num2)", "n,k=[int(x) for x in input().split()[:2]]\nan=[int(x) for x in input().split()[:n]]\ntn=[int(x) for x in input().split()[:n]]\n\nfirst=0\nfor i in range(k):\n    first+=an[i]\nfor i in range(k,n):\n    first+=an[i]*tn[i]\nans=first\nfor i in range(1,n-k+1):\n    new=i+k-1\n    last=i-1\n    if tn[last]==0:\n        first-=an[last]\n    if tn[new]==0:\n        first+=an[new]\n    ans=max(first,ans)\nprint(ans)", "n, k =[int(x) for x in input().split()]\na =[int(x) for x in input().split()] \nbodr = [int(x) for x in input().split()] \nsu = 0\nfor i in range(n):\n    if bodr[i]:\n        su += a[i]\n        a[i] = 0\nsumma = sum(a[:k])\nhead = 0\nmaxi = summa\nfor i in range(k, n):\n    summa -= a[head]\n    head += 1\n    summa += a[i]\n    maxi = max(summa, maxi)\nprint(su + maxi)", "L = input().split();\nn,m = list(map(int,L));\nL = input().split();\na = list(map(int,L));\nL = input().split();\nt = list(map(int,L));\nttot = [0]*(n+5);\nttot[0] = 0;\nta = [0]*(n+5);\nta[0] = 0;\nfor i in range(n):\n    ttot[i+1] = ttot[i] + a[i];\n    ta[i+1] = ta[i] + a[i]*t[i];\nMax = 0;\nfor i in range(n-m+1):\n    tmp = ta[i];\n    tmp = tmp + ttot[i+m]-ttot[i];\n    tmp = tmp + (ta[n]-ta[i+m]);\n    if (tmp>Max):\n        Max = tmp;\n        pos = i+1;\n#print(ttot, ta);\nprint(Max);\n", "import sys;\n\nclass MyReader:\n#    file = null;\n    def __init__(self):\n        filename = \"file.in\";\n        if self.isLocal():\n            self.file = open(filename);\n        self.str = [\"\"];\n        self.ind = 1;\n            \n    def isLocal(self):\n        return len(sys.argv) > 1 and sys.argv[1] == \"SCHULLZ\";\n\n    def nextString(self):\n        if self.isLocal():\n            return self.file.read();\n        else:\n            return input();\n        \n    def nextInt(self):\n        return int(self.nextToken());\n\n    def nextToken(self):\n        if (self.ind >= len(self.str)):\n            self.ind = 0;\n            self.str = self.nextString().split();\n        self.ind += 1;\n        return self.str[self.ind - 1];\n\n\n\nrdr = MyReader();\n\nn = rdr.nextInt();\nk = rdr.nextInt();\n\na = [];\nisAwake = [];\nmissed = [];\n\nfor i in range (0, n):\n    a.append(rdr.nextInt());\n    \nawaken = 0;\n\nfor i in range (0, n):\n    isAwake.append(rdr.nextInt());\n    missed.append(0);\n    if (0 == isAwake[i]):\n        missed[i] = a[i];\n    else:\n        awaken += a[i];\n        missed[i] = 0;\n\ntres = 0;\nfor i in range(0, k):\n    tres += missed[i];\n\nres = tres;\n\nfor i in range(k, n):\n    tres -= missed[i - k];\n    tres += missed[i];\n    res = max(res, tres);\n\n    \nsys.stdout.write(str(res + awaken));\n\nsys.stdout.flush()", "n, k = map(int, input().split())\na = [int(i) for i in input().split()]\nt = [int(i) for i in input().split()]\npref_sum = [0] * n\npref_score = [0] * n\nfor i in range(n):\n    pref_sum[i] = pref_sum[i - 1] + a[i]\n    pref_score[i] = pref_score[i - 1] + a[i] * t[i]\nans = pref_sum[k - 1] + pref_score[n - 1] - pref_score[k - 1]\n#print(pref_score, pref_sum)\nfor i in range(k, n):\n    ans = max(ans, pref_score[i - k] + pref_score[n - 1] - pref_score[i] + pref_sum[i] - pref_sum[i - k])\nprint(ans)", "def invert(x):\n    if x == 1:\n        return 0\n    else:\n        return 1\n\nn, k = list(map(int, input().strip().split()))\na = list(map(int, input().strip().split()))\nt = list(map(int, input().strip().split()))\n\nbase = sum([a*b for a,b in zip(a,t)])\n\nt = list(map(invert, t))\nt = [a*b for a,b in zip(a, t)]\nfor i in range(1, len(t)):\n    t[i] += t[i-1]\n\nrslt = t[k-1]\nfor i in range(1, n-k+1):\n    rslt = max(rslt, t[i+k-1] - t[i-1])\n\nprint(rslt+base)\n", "n,k=map(int,input().split())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nsumx=0\nsum1=0\ns=0\nfor i in range(n):\n\tif(b[i]==1):\n\t\tsum1+=a[i]\nfor i in range(k):\n\tif(b[i]==0):\n\t\tsumx+=a[i]\ns=sumx+sum1\nfor i in range(k,n):\n\tif(b[i-k]==0):\n\t\tsumx-=a[i-k]\n\tif(b[i]==0):\n\t\tsumx+=a[i]\n\tif(sumx+sum1>s):\n\t\ts=sumx+sum1\nprint(s)", "def calculate_prefix_sum(a, t):\n    s = [0]\n    for a_, t_ in zip(a, t):\n        if not t_:\n            s += [s[-1] + a_]\n        else:\n            s += [s[-1]]\n    return s\n\n\ndef calculate_sum_on_range(s, a, b):\n    assert a < b\n    return s[min(b, len(s)-1)] - s[a]\n\n\ndef calculate_sums(a, t, k):\n    psum = calculate_prefix_sum(a, t)\n    s = []\n\n    for i in range(len(a)):\n        s.append(calculate_sum_on_range(psum, i, i+k))\n\n    return s\n\n\ndef calculate_max(a, t, k):\n    s = calculate_sums(a, t, k)\n    ms = max(s)\n    return ms\n\n\ndef calculate_answer(a, t, k):\n    ms = calculate_max(a, t, k)\n    s = 0\n    for a_, t_ in zip(a, t):\n        if t_:\n            s += a_\n    return ms + s\n\n\nr=lambda:list(map(int,input().split()))\n_,k=r()\nprint(calculate_answer(r(),r(),k))", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nt = list(map(int, input().split()))\n\ns = sum([a[i] * t[i] for i in range(n)])\ns += sum([a[i] * (1 - t[i]) for i in range(k)])\nans = s\nfor i in range(n - k):\n    s -= a[i] * (1 - t[i])\n    s += a[i + k] * (1 - t[i + k])\n    ans = max(ans, s)\nprint(ans)\n"]