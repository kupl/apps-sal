["N = int(input())\ngrid = []\nx1 = 50\ny1 = 50\nx2 = -1\ny2 = -1\nfor y in range(N):\n    grid.append(list(map(int, input())))\n    for x, num in enumerate(grid[-1]):\n        if num == 4:\n            x1 = min(x1, x)\n            y1 = min(y1, y)\n            x2 = max(x2, x)\n            y2 = max(y2, y)\n\nif x1 == 51:\n    print('No')\nelse:\n    for y in range(N):\n        for x in range(N):\n            ex = 0\n            if x1 <= x <= x2 and y1 <= y <= y2:\n                ex = 4\n            elif (x == x1-1 or x == x2+1) and y1 <= y <= y2:\n                ex = 2\n            elif (y == y1-1 or y == y2+1) and x1 <= x <= x2:\n                ex = 2\n            elif (x == x1-1 or x == x2+1) and (y == y1-1 or y == y2+1):\n                ex = 1\n            if ex != grid[y][x]:\n                print('No')\n                break\n        else:\n            continue\n        break\n    else:\n        print('Yes')\n", "import sys, math\ndef bfs(x, y):\n    Q=[[x,y]]\n    ptr = 0\n    min_=[1000,1000]\n    max_=[0,0]\n    while ptr < len(Q):\n        v = Q[ptr]\n        ptr+=1\n        x = v[0]; y=v[1]\n        if matrix[x][y] == 4:\n            used[x][y] = 1\n            if x+1 < n:\n                if used[x+1][y]==0:\n                    Q.append([x+1,y])\n                    used[x+1][y]=1\n            if x-1 > -1:\n                if used[x-1][y]==0:\n                    Q.append([x-1,y])\n                    used[x-1][y]=1\n            if y+1 < n:\n                if used[x][y+1]==0:\n                    Q.append([x,y+1])\n                    used[x][y+1]=1\n            if y-1 > -1:\n                if used[x][y-1]==0:\n                    Q.append([x,y-1])\n                    used[x][y-1]=1\n            if x < min_[0] or (x==min_[0] and y < min_[1]):\n                min_=[x,y]\n            if x > max_[0] or (x==max_[0] and y > max_[1]):\n                max_=[x,y]\n        else:\n            used[x][y]=0\n    for i in range(min_[0], max_[0]+1):\n        for j in range(min_[1], max_[1]+1):\n            if matrix[i][j] != 4:\n                print('No')\n                return\n    for i in range(n):\n        for j in range(n):\n            if used[i][j] == 0 and matrix[i][j] >= 3:\n                print('No')\n                return\n    #print('h')\n    if min_[0] > 0:\n        w = min_[0] - 1\n        for j in range(min_[1], max_[1]+1):\n            used[w][j] = 1\n            if matrix[w][j] != 2:\n                print('No')\n                return\n    #print('h')\n    if max_[0] < n-1:\n        w = max_[0] + 1\n        for j in range(min_[1], max_[1]+1):\n            used[w][j] = 1\n            if matrix[w][j] != 2:\n                print('No')\n                return\n    if min_[1] > 0:\n        w = min_[1] - 1\n        for j in range(min_[0], max_[0]+1):\n            used[j][w] = 1\n            if matrix[j][w] != 2:\n                print('No')\n                return\n    #print('h')\n    if max_[1] < n-1:\n        w = max_[1] + 1\n        for j in range(min_[0], max_[0]+1):\n            used[j][w] = 1\n            if matrix[j][w] != 2:\n                print('No')\n                return\n    if min_[0] > 0 and min_[1] > 0:\n        x=min_[0]-1\n        y=min_[1]-1\n        if matrix[x][y]!=1:\n            print('No')\n            return\n        used[x][y] =1\n    if max_[0] < n-1 and max_[1] < n-1:\n        x=max_[0]+1\n        y=max_[1]+1\n        if matrix[x][y]!=1:\n            print('No')\n            return\n        used[x][y] =1\n    if min_[0] > 0 and max_[1] < n-1:\n        x=min_[0]-1\n        y=max_[1]+1\n        if matrix[x][y]!=1:\n            print('No')\n            return\n        used[x][y] =1\n    if max_[0] < n-1 and min_[1] > 0:\n        x=max_[0]+1\n        y=min_[1]-1\n        if matrix[x][y]!=1:\n            print('No')\n            return\n        used[x][y] =1\n    for i in range(n):\n        for j in range(n):\n            if used[i][j]==1:\n                continue\n            elif matrix[i][j] != 0:\n                print('No')\n                return\n    print('Yes')\n            \n    \nn=int(input())\nmatrix = [[0]*n for i in range(n)]\nfor i in range(n):\n    z=input()\n    for j in range(n):\n        matrix[i][j]=int(z[j])\nused = [[0]*n for i in range(n)]\nflag = 0\nfor i in range(n):\n    for j in range(n):\n        if matrix[i][j] == 4:\n            flag = 1\n            x = i\n            y = j\n            break\n    if flag:\n        break\nif not flag:\n    print('No')\n    return\nbfs(x,y)", "def main():\n    size = int(input())\n    sq = [[int(c) for c in input().strip()] for _ in range(size)]\n    print('Yes' if haslair(sq) else 'No')\n        \ndef haslair(sq):\n    corners = [(r, c) for r, row in enumerate(sq) for c, count in enumerate(row)\n                if count==1]\n    if len(corners) != 4:\n        return False\n    left, right, top, bottom = corners[0][1], corners[3][1], corners[0][0], corners[3][0]\n    if right == left + 1 or bottom == top + 1:\n        return False\n    for r, row in enumerate(sq):\n        for c, count in enumerate(row):\n            score = 3 if top < r < bottom else 1 if r in (top, bottom) else 0\n            score += 3 if left < c < right else 1 if c in (left, right) else 0\n            if count != (0, 0, 1, 0, 2, None, 4)[score]:\n                return False\n    return True\n\nmain()", "def check_cell(i, j, n):\n\tk = 0\n\tif i > 1 and field[i-1][j]: k += 1\n\tif i < n-1 and field[i+1][j]: k += 1\n\tif j > 1 and field[i][j-1]: k += 1\n\tif j < n-1 and field[i][j+1]: k += 1\n\tif k < 2:\n\t\treturn 0\n\telif k < 4:\n\t\treturn k-1\n\telse:\n\t\treturn 4\n\nn = int(input())\nfield = []\n\nfor i in range(n):\n\ttemp = [int(x) for x in input()]\n\tfield.append(temp)\n\ndef main():\n\tfor i in range(n):\n\t\tfor j in range(n):\n\t\t\tif field[i][j] and not field[i][j] == check_cell(i, j, n):\n\t\t\t\tprint('No')\n\t\t\t\treturn 0\n\n\tprint('Yes')\n\nmain()", "from sys import stdin\n\nn = int(stdin.readline())\nnn = [[int(x) for x in stdin.readline().rstrip()] for i in range(n)]\n\ndef run():\n    for row in range(n):\n        for col in range(n):\n            if(nn[row][col] == 0):\n                continue\n            if(countAdj(row, col, n-1)):\n                print('No')\t\n                return 0\n    print('Yes')\n\ndef countAdj(row, col, n):\n    cnt = 0\n    adj = 0\n    if(row > 1 and nn[row-1][col]):\n        cnt += 1\n        adj += nn[row-1][col]\n    if(row < n and nn[row+1][col]):\n        cnt += 1\n        adj += nn[row+1][col]\n    if(col > 1 and nn[row][col-1]):\n        cnt += 1\n        adj += nn[row][col-1]\n    if(col < n and nn[row][col+1]):\n        cnt += 1\n        adj += nn[row][col+1]\n\n    if(cnt <= 1):\n        return True\n    elif(cnt < 4 and nn[row][col] == cnt-1):\n        if(nn[row][col] == 1 and adj != 4):\n            return True\n        if(nn[row][col] == 2 and not (6 <= adj <= 8)):\n            return True\n        return False\n    elif(cnt == 4 and nn[row][col] == cnt):\n        if(nn[row][col] == 4 and not (adj == 8 or adj == 10 or adj == 12 or adj == 14 or adj == 16)):\n            return True\n        return False\n    return True\n\nrun()", "n = int(input())\ns = [list(map(int, input())) for _ in range(n)]\nINF = 10 ** 9\nx1, x2, y1, y2 = INF, -INF, INF, -INF\nfor i in range(n):\n    for j in range(n):\n        if s[i][j] != 0:\n            x1, x2, y1, y2 = min(x1, i), max(x2, i), min(y1, j), max(y2, j)\nneed = [[0] * n for _ in range(n)]\nfor i in range(x1, x2 + 1):\n    for j in range(y1, y2 + 1):\n        if i == x1 or i == x2:\n            if j == y1 or j == y2:\n                need[i][j] = 1\n            else:\n                need[i][j] = 2\n        elif j == y1 or j == y2:\n            need[i][j] = 2\n        else:\n            need[i][j] = 4\nprint(\"Yes\" if need == s else \"No\")\n", "n = int(input())\naux = []\ngrid = []\nflag = True\nans = -1\num = 0\ndois = 0\nquatro = 0\nwhile(n):\n        n-=1\n        x = str(int(input()))\n        if(x!='0'):\n                aux.append(x)\nfor i in aux:\n        txt = ''\n        for j in i:\n                if(j!='0'):\n                        txt+=j\n        grid.append(txt)\nfor i in grid:\n        for j in i:\n                if(j == '1'):\n                        um+=1\n                if(j == '2'):\n                        dois+=1\n                if(j == '4'):\n                        quatro+=1\n        if(ans==-1 or len(i)==ans):\n                ans = len(i)\n        else:\n                flag = False\nif(um!=4 or dois!=len(grid)*2+len(grid[0])*2-8 or quatro!=(len(grid)*len(grid[0]))-(len(grid)*2+len(grid[0])*2-4)):\n        flag = False\nif(flag):\n        for i in range(0, len(grid)):\n                if(len(grid)-i-1 < i):\n                        break\n                if(grid[i] != grid[len(grid)-i-1]):\n                        flag = False\n        for i in range(0, len(grid)):\n                for j in range(0, len(grid[0])):\n                        if(len(grid)-j-1 < j):\n                                break\n                        if(grid[i][j] != grid[i][len(grid[i])-j-1]):\n                                flag = False\nif(flag and ans!=-1):\n        print('Yes')\nelse:\n        print('No')\n", "n = int(input())\naux = []\ngrid = []\nflag = True\nans = -1\num = 0\ndois = 0\nquatro = 0\nwhile(n):\n        n-=1\n        x = str(int(input()))\n        if(x!='0'):\n                aux.append(x)\nfor i in aux:\n        txt = ''\n        for j in i:\n                if(j!='0'):\n                        txt+=j\n        grid.append(txt)\nfor i in grid:\n        for j in i:\n                if(j == '1'):\n                        um+=1\n                if(j == '2'):\n                        dois+=1\n                if(j == '4'):\n                        quatro+=1\n        if(ans==-1 or len(i)==ans):\n                ans = len(i)\n        else:\n                flag = False\nif(um!=4 or dois!=len(grid)*2+len(grid[0])*2-8 or quatro!=(len(grid)*len(grid[0]))-(len(grid)*2+len(grid[0])*2-4)):\n        flag = False\nif(flag):\n        for i in range(0, len(grid)):\n                if(len(grid)-i-1 < i):\n                        break\n                if(grid[i] != grid[len(grid)-i-1]):\n                        flag = False\n        for i in range(0, len(grid)):\n                for j in range(0, len(grid[0])):\n                        if(len(grid)-j-1 < j):\n                                break\n                        if(grid[i][j] != grid[i][len(grid[i])-j-1]):\n                                flag = False\nif(flag and ans!=-1):\n        print('Yes')\nelse:\n        print('No')\n# 1523803863385\n", "n = int(input())\naux = []\ngrid = []\nflag = True\nans = -1\num = 0\ndois = 0\nquatro = 0\nwhile(n):\n        n-=1\n        x = str(int(input()))\n        if(x!='0'):\n                aux.append(x)\nfor i in aux:\n        txt = ''\n        for j in i:\n                if(j!='0'):\n                        txt+=j\n        grid.append(txt)\nfor i in grid:\n        for j in i:\n                if(j == '1'):\n                        um+=1\n                if(j == '2'):\n                        dois+=1\n                if(j == '4'):\n                        quatro+=1\n        if(ans==-1 or len(i)==ans):\n                ans = len(i)\n        else:\n                flag = False\nif(um!=4 or dois!=len(grid)*2+len(grid[0])*2-8 or quatro!=(len(grid)*len(grid[0]))-(len(grid)*2+len(grid[0])*2-4)):\n        flag = False\nif(flag):\n        for i in range(0, len(grid)):\n                if(len(grid)-i-1 < i):\n                        break\n                if(grid[i] != grid[len(grid)-i-1]):\n                        flag = False\n        for i in range(0, len(grid)):\n                for j in range(0, len(grid[0])):\n                        if(len(grid)-j-1 < j):\n                                break\n                        if(grid[i][j] != grid[i][len(grid[i])-j-1]):\n                                flag = False\nif(flag and ans!=-1):\n        print('Yes')\nelse:\n        print('No')"]