["im = int(input())\n\nbest_steps = 0\nbest_length = 0\n\ndef rec(m, steps, substracted):\n    nonlocal best_steps, best_length \n    if m == 0:\n        if steps > best_steps:\n            best_steps = steps\n            best_length = substracted\n        elif steps == best_steps:\n            best_length = max(best_length, substracted)\n        return\n\n    a = 1\n    while (a + 1)**3 <= m:\n        a += 1\n\n    rec(m - a**3, steps + 1, substracted + a**3)\n\n    if a - 1 != 0:\n        rec(a**3-1-(a-1)**3, steps + 1, substracted + (a-1)**3)\n\nrec(im, 0, 0)\nprint(best_steps, best_length)", "from sys import *\nsetrecursionlimit(1000000)\n#d={}\ndef c(n):\n#    t=d.get(n,(0,0))\n#    if t!=(0,0): return t\n    if n<8: return n,n\n    t1=int(n**(1/3)+0.00000000001)\n    t2=t1-1\n    v1=c(n-t1*t1*t1)\n    v1=v1[0]+1,v1[1]+t1*t1*t1\n    v2=c(t1*t1*t1-1-t2*t2*t2)\n    v2=v2[0]+1,v2[1]+t2*t2*t2\n    if v2>v1: v1=v2\n#    d[n]=v1\n    return v1\n    \nprint(' '.join(map(str,c(int(input())))))", "def main():\n    def f(n):\n        if n < 8:\n            return [n, n]\n        a = int((n + .5) ** 0.3333333333333333)\n        r1 = f(n - a * a * a)\n        r1[1] += a * a * a\n        a -= 1\n        r2 = f(3 * a * (a + 1))\n        r2[1] += a * a * a\n        if r1 < r2:\n            r1 = r2\n        r1[0] += 1\n        return r1\n\n    print(*f(int(input())))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "MAX = 100005\n\ndef big_pow3(n):\n    l = 0; p = MAX\n    while p-l != 1:\n        mid = (p+l+1)//2\n        if (mid*mid*mid <= n):\n            l = mid\n        else:\n            p = mid\n    return l\n\ndef f(n):\n    if n < 8:\n        return [n, n]\n    a = int((n+ 0.5) ** 0.33333333333333333)\n    r1 = f(n-a**3)\n    r1 = [r1[0] + 1, r1[1] + a**3]\n    a -= 1\n    r2 = f(3*a*(a+1))\n    r2 = [r2[0] + 1, r2[1] + a**3]\n    return max(r1, r2)\n        \n\ndef __starting_point():\n    m = int(input()) \n    print(*f(m))\n\n__starting_point()", "n, c = 0, 0\ndef dfs(now, m, t):\n\tnonlocal n, c\n\tif now == 0:\n\t\tif m > n:\n\t\t\tn, c = m, t\n\t\treturn\n\ti = 1\n\twhile i**3 <= now:\n\t\ti += 1\n\ti -= 1\n\tdfs(now-i**3, m+1, t+i**3)\n\tdfs(i**3-1-(i-1)**3, m+1, t+(i-1)**3)\nm = int(input())\ndfs(m, 0, 0)\nprint(n, c)\n", "n, c = 0, 0\ndef dfs(now, m, t):\n\tnonlocal n, c\n\tif now == 0:\n\t\tif m > n:\n\t\t\tn, c = m, t\n\t\treturn\n\ti = 1\n\twhile i**3 <= now:\n\t\ti += 1\n\ti -= 1\n\tdfs(now-i**3, m+1, t+i**3)\n\tdfs(i**3-1-(i-1)**3, m+1, t+(i-1)**3)\nm = int(input())\ndfs(m, 0, 0)\nprint(n, c)", "n, c = 0, 0\ndef dfs(now, m, t):\n\tnonlocal n, c\n\tif now == 0:\n\t\tif m > n:\n\t\t\tn, c = m, t\n\t\treturn\n\ti = 1\n\twhile i**3 <= now:\n\t\ti += 1\n\ti -= 1\n\tdfs(now-i**3, m+1, t+i**3)\n\tdfs(i**3-1-(i-1)**3, m+1, t+(i-1)**3)\nm = int(input())\ndfs(m, 0, 0)\nprint(n, c)", "n, c = 0, 0\ndef dfs(now, m, t):\n\tnonlocal n, c\n\tif now == 0:\n\t\tif m > n:\n\t\t\tn, c = m, t\n\t\treturn\n\ti = 1\n\twhile i**3 <= now:\n\t\ti += 1\n\ti -= 1\n\tdfs(now-i**3, m+1, t+i**3)\n\tdfs(i**3-1-(i-1)**3, m+1, t+(i-1)**3)\nm = int(input())\ndfs(m, 0, 0)\nprint(n, c) ", "m = int(input())\n\ndef rec(m):\n    if m < 0:\n        return -1, 0\n    if m == 0:\n        return 0, 0\n    a = int((m + 1e-9) ** (1 / 3))\n    u = m - a ** 3\n    v = a ** 3 - (a - 1) ** 3 - 1\n    x, y = rec(u)\n    q, w = rec(v)\n    return max((x + 1, a ** 3 + y), (q + 1, (a - 1) ** 3 + w))\n\nprint(*rec(m))", "def rec(m):\n    if m <= 0:\n        return m, 0\n    a = int((m + 1e-9) ** (1 / 3))\n    x, y = rec(m - a ** 3)\n    q, w = rec(a ** 3 - (a - 1) ** 3 - 1)\n    return max((x + 1, a ** 3 + y), (q + 1, (a - 1) ** 3 + w))\nprint(*rec(int(input())))", "import math\n\ndef f(m):\n    if m < 8: return (m,m)\n    c = math.floor(m**(1.0/3))\n    if not (c**3 <= m and m < (c+1)**3):\n        if ((c+1)**3 <= m and m < (c+2)**3):\n            c = c+1\n        elif ((c-1)**3 <= m and m < c**3):\n            c = c-1\n        else:\n            assert False\n    ans1, x1 = f(m-c**3)\n    ans2, x2 = f(c**3-1-(c-1)**3)\n    return max((1+ans1,x1+c**3), (1+ans2,x2+(c-1)**3))\n\ndef __starting_point():\n    m = int(input())\n\n    print(*f(m))\n\n__starting_point()", "def g(m, s, n):\n    k = int(m ** (1 / 3))\n    if m == 0 or k == 1: return s + m, n + m\n    x, y = k ** 3, (k - 1) ** 3\n    a = g(m - x, s + x, n + 1)\n    b = g(x - y - 1, s + y, n + 1)\n    return b if a[1] < b[1] else a\ns, n = g(int(input()), 0, 0)\nprint(n, s)", "import math\n\ndef root(m):\n\tret = m**(1.0/3.0)\n\tif(math.ceil(ret)**3 == m):\n\t\tret = math.ceil(ret)\n\telse: ret = math.floor(ret)\n\treturn ret\n\nF = {}\n\ndef f(m):\n\tif(m < 0):\n\t\treturn [-1e5 - 10, -1e15 - 1]\n\tif(m <= 7):\n\t\treturn [m, m]\n\trootm = root(m)\n\tans1 = [0, 0]\n\tans2 = [0, 0]\n\tans1 = f(m - rootm**3)\n\tif(rootm != 1):\n\t\tans2 = f(rootm**3 - 1 - (rootm-1)**3);\n\t\tans2[1] += (rootm-1)**3;\n\t\tans2[0] += 1;\n\tans1[1] += rootm**3;\n\tans1[0] += 1;\n\tif(ans1[0] > ans2[0]):\n\t\treturn ans1\n\telif(ans1[0] < ans2[0]):\n\t\treturn ans2\n\telse:\n\t\tif(ans1[1] > ans2[1]):\n\t\t\treturn ans1\n\t\telse:\n\t\t\treturn ans2\n\nm = int(input())\nans = f(m)\nprint(ans[0], ans[1])\n\n", "def cube(a):\n    return a ** 3\n\n\ndef steps(m):\n    if m <= 7:\n        return m\n    x = 1\n    while cube(x + 1) <= m:\n        x += 1\n    return  1 + steps(max(m - cube(x), cube(x) - 1 - cube(x - 1)))\n\n\nclass CodeforcesTask679BSolution:\n    def __init__(self):\n        self.result = ''\n        self.m = 0\n\n    def read_input(self):\n        self.m = int(input())\n\n    def process_task(self):\n        sub = 0\n        ste = 0\n        while self.m:\n            ste += 1\n            x = 1\n            while cube(x + 1) <= self.m:\n                x += 1\n            if steps(self.m) == 1 + steps(self.m - cube(x)):\n                self.m -= cube(x)\n                sub += cube(x)\n            else:\n                self.m = cube(x) - 1 - cube(x - 1)\n                sub += cube(x - 1)\n        self.result = \"{0} {1}\".format(ste, sub)\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask679BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()"]