["s=input()\nt=int(input())\n\nans=[]\nn=len(s)\nclue=[0]*n\nfor i in range(n-1):\n    if(s[i]==s[i+1]):\n        clue[i]+=1\nL=[clue[0]]\nfor i in range(1,n):\n    L.append(L[i-1]+clue[i])\n\nfor i in range(t):\n    A,B=input().split()\n    A=int(A)-1\n    B=int(B)-1\n    r=0\n    x=L[B-1]\n    y=L[A-1]\n    if(A-1<0):\n        y=0\n    ans.append(x-y)\n\nfor i in range(t):\n    print(ans[i])\n    \n", "c = ''\nd = [0]\nfor i in input():\n  if i == c:\n    d.append(d[-1] + 1)\n  else:\n    d.append(d[-1])\n  c = i\nfor i in range(int(input())):\n  l, r = map(int, input().split())\n  print(d[r] - d[l])", "c = ''\nd = [0]\nfor i in input():\n  if i == c:\n    d.append(d[-1] + 1)\n  else:\n    d.append(d[-1])\n  c = i\nfor i in range(int(input())):\n  l, r = map(int, input().split())\n  print(d[r] - d[l])", "import math\nimport re\nfrom fractions import Fraction\nfrom collections import Counter\n\nclass Task:\n    s = ''\n    queries = []\n    answer = ''\n    \n    def __init__(self):\n        self.s = input()\n        self.queries = [[] for _ in range(int(input()))]\n        for i in range(len(self.queries)):\n            self.queries[i] = [int(x) for x in input().split()]\n\n    def solve(self):\n        s, queries = self.s, self.queries\n        d = [0] * len(s)\n        d[0] = 1 if s[0] == s[1] else 0\n        for i in range(1, len(d) - 1):\n            d[i] = d[i - 1] + (s[i + 1] == s[i])\n        d[-1] = d[-2]\n\n        for current in queries:\n            localAnswer = d[current[1] - 2]\n            localAnswer -= d[current[0] - 2] if current[0] >= 2 else 0\n            #self.answer += str(localAnswer) + '\\n'\n            print(localAnswer)\n\n    #def printAnswer(self):\n    #    print(self.answer)\n\ntask = Task()\ntask.solve()\n#task.printAnswer()\n", "import math\nimport re\nfrom fractions import Fraction\nfrom collections import Counter\n\nclass Task:\n    s = ''\n    queries = []\n    answer = []\n    \n    def __init__(self):\n        self.s = input()\n        self.queries = [[] for _ in range(int(input()))]\n        for i in range(len(self.queries)):\n            self.queries[i] = [int(x) for x in input().split()]\n\n    def solve(self):\n        s, queries = self.s, self.queries\n        d = [0] * len(s)\n        d[0] = 1 if s[0] == s[1] else 0\n        for i in range(1, len(d) - 1):\n            d[i] = d[i - 1] + (s[i + 1] == s[i])\n        d[-1] = d[-2]\n\n        for current in queries:\n            localAnswer = d[current[1] - 2]\n            localAnswer -= d[current[0] - 2] if current[0] >= 2 else 0\n            self.answer += [localAnswer]\n\n    def printAnswer(self):\n        for x in self.answer:\n            print(x)\n\ntask = Task()\ntask.solve()\ntask.printAnswer()\n", "def main():\n    s = input()\n    n = int(input())\n  \n    res = [0]\n    for i in range(1,len(s)):\n        res.append(res[i-1] + (s[i] == s[i-1]))\n\n    for _ in range(n):\n        l,r = map(int,input().split())\n        print(res[r-1]-res[l-1])\n\nmain()", "import sys\nimport io\nfin = io.StringIO(sys.stdin.read())\ns = fin.readline().strip()\nn = len(s)\ntable = [0] * n\nfor i in range(n - 1):\n    table[i] = int(s[i] == s[i + 1]) + (table[i - 1] if i > 0 else 0)\nm = int(fin.readline())\nfor _ in range(m):\n    l, r = list(map(int, fin.readline().split()))\n    print(table[r - 2] - (table[l - 2] if l > 1 else 0))\n", "s=input()\nL=[s[i] for i in range(len(s))]\nA=[]\nListOfSum=[0]\nfor i in range(len(L)-1):\n    if L[i]==L[i+1]: ListOfSum.append(ListOfSum[i]+1)\n    else: ListOfSum.append(ListOfSum[i])\nm=int(input())\nfor i in range(m):\n    Z=[int(t) for t in input().split()]\n    A.append(ListOfSum[Z[1]-1]-ListOfSum[Z[0]-1])\nfor i in range(m): print(A[i])", "v = input()\nn = int(input())\nq, s = [], [0 for i in range(-1, len(v))]\nsol = ''\n\nfor i in range(1, len(v)):\n    s[i] = s[i-1]\n    if v[i] == v[i-1]: s[i] += 1\n\nfor i in range(0, n):\n    x = tuple(map(int, input().split()))\n    sol += str(s[x[1]-1] - s[x[0]-1]) + '\\n'\nprint(sol)\n", "import sys\nf = sys.stdin\n#f = open(\"input.txt\", \"r\")\ns = f.readline()\nf.readline()\ncount = [0]\nt = \"\"\nq = [map(int, i.split()) for i in f.read().strip().split(\"\\n\")]\ndef solve():\n    nonlocal t\n    for i in s:\n        if i == t:\n            count.append(count[-1] + 1)\n        else:\n            count.append(count[-1])\n        t = i\n    for i in q:\n        l, r = i\n        print(count[r]-count[l])\nsolve()", "s = input()\nm = int(input())\ncalc = [0]\nout = []\nfor i in range(1, len(s)):\n    count = calc[i-1]\n    if s[i] == s[i-1]:\n        count += 1\n    calc.append(count)\n    \nfor q in range(m):\n    L = [int(it) for it in input().split()]\n    l, r, count = L[0] - 1, L[1] - 1, 0\n    out.append(calc[r] - calc[l])\nfor c in out:\n    print(c)\n", "s=input()\nn=int(input())\na,b=[0 for i in range(n)],[0 for i in range(n)]\nfor i in range(0,n):\n    a[i],b[i]=list(map(int,input().split()))\ncount=[0 for i in range(len(s))]\ncount[0]=0\nfor i in range(1,len(s)):\n    count[i]=count[i-1]\n    if s[i-1]==s[i]:\n        count[i]+=1\nfor i in range(0,n):\n    print(count[b[i]-1]-count[a[i]-1])\n    \n    \n\n        \n", "s=input()\nn=int(input())\na,b=[0 for i in range(n)],[0 for i in range(n)]\nfor i in range(0,n):\n    a[i],b[i]=list(map(int,input().split()))\n#dp represents a list of the counts to each point in the string\ndp=[0]*(len(s))\nfor i in range(len(s)-1):\n    if s[i]==s[i+1]:\n        dp[i+1]=dp[i]+1\n    else:\n        dp[i+1]=dp[i]\n\nfor i in range(0,n):\n    print(dp[b[i]-1]-dp[a[i]-1])\n", "string=input()\n#dp represents a list of the counts to each point in the string\nn=int(input())\na,b=[0 for i in range(n)],[0 for i in range(n)]\nfor i in range(n):\n    a[i],b[i]=list(map(int,input().split()))\ndp=[0]*(len(string))\nfor i in range(len(string)-1):\n    if string[i]==string[i+1]:\n        dp[i+1]=dp[i]+1\n    else:\n        dp[i+1]=dp[i]\ndp.append(dp[-1])\n\nfor i in range(n):\n    print(dp[b[i]-1]-dp[a[i]-1])\n", "string=input()\n#dp represents a list of the counts to each point in the string\nn=int(input())\na,b=[0 for i in range(n)],[0 for i in range(n)]\nfor i in range(n):\n    a[i],b[i]=map(int,input().split())\ndp=[0]*(len(string))\nfor i in range(len(string)-1):\n    if string[i]==string[i+1]:\n        dp[i+1]=dp[i]+1\n    else:\n        dp[i+1]=dp[i]\n\nfor i in range(n):\n    print(dp[b[i]-1]-dp[a[i]-1])", "s=input()\nn=int(input())\n\nl,r=[0 for i in range(n)],[0 for i in range(n)]\nfor i in range(n):\n    l[i],r[i]=list(map(int,input().split()))\n\nd=[0]*len(s)\nfor i in range(len(s)-1):\n    d[i+1]=d[i]\n    if(s[i]==s[i+1]):\n        d[i+1]=d[i]+1\n\nfor i in range(n):\n    print(d[r[i]-1]-d[l[i]-1])\n", "s=input()\nn=int(input())\n\nl,r=[0 for i in range(n)],[0 for i in range(n)]\nfor i in range(n):\n    l[i],r[i]=list(map(int,input().split()))\n\nd=[0]*len(s)\nfor i in range(len(s)-1):\n    d[i+1]=d[i]\n    if(s[i]==s[i+1]):\n        d[i+1]=d[i]+1\n\nsol=\"\"\nfor i in range(n):\n    sol+=str(d[r[i]-1]-d[l[i]-1])+\"\\n\"\nprint(sol)\n", "import sys\n\nl = sys.stdin.readline().strip()\nls = len(l)\n\nc = input()\nc = int(c)\n\nr = []\n\nd = []\n\nk = 0\nd.append(0)\nfor i in range (0, ls - 1):\n    if l[i] == l[i + 1]:\n        k = k + 1\n    d.append(k)\n\nfor i in range (0, c):\n    (n, m) = sys.stdin.readline().strip().split(' ')\n    n, m = int(n) - 1, int(m) - 1\n    r.append(d[m] - d[n])\n\nfor s in r:\n    print(s)\n", "import sys\nimport math\n\nst = sys.stdin.readline()\nlength = len(st) - 1\nan = [0] * length\n\nv = st[0]\nfor i in range(1,  length):\n    k = 0\n    if(v == st[i]):\n        k = 1\n    \n    v = st[i]\n    an[i] = an[i - 1] + k\n    \nc = int(sys.stdin.readline())\nfor i in range(c):\n    li,  ri = [int(x) for x in (sys.stdin.readline()).split()]\n    print(an[ri - 1] - an[li - 1])\n        \n", "s = input()\nquery_time = int(input())\n\nqueries = [list([int(x) - 1 for x in input().split()])\n           for _ in range(query_time)]\n\n\nk = 0\nf = [0]\nfor i in range(len(s) - 1):\n    if s[i] == s[i + 1]:\n        k += 1\n    f.append(k)\n\n\nfor query in queries:\n    begin, end = query\n    repeat = f[end] - f[begin]\n\n    print(repeat)\n", "magic_string = input()\nquery_count = int(input())\n\nqueries = []\nfor i in range(query_count):\n    queries.append([int(x) for x in input().split()])\n\nsaved = [0]\nfor i in range(1, len(magic_string)):\n    saved.append(saved[i - 1] + (1 if magic_string[i-1] == magic_string[i] else 0))\n\nfor query in queries:\n    print(saved[query[1] - 1] - saved[query[0] - 1])", "from fileinput import *\n\ndata = []\nfor line in input():\n    if lineno() == 1:\n        s = line.strip()\n    if lineno() == 2:\n        m = int(line.strip())\n    if lineno() >= 3 and lineno() < 3 + m:\n        data += [list(map(int, line.split()))]\n\nslen = len(s)\na = [0] * slen\n\ncount = 0\nfor i in range(1, slen):\n    if s[i] == s[i-1]:\n        count += 1\n    a[i] = count\n\nfor [l, r] in data:\n    ll = l - 1\n    rr = r - 1\n    print(a[rr]-a[ll])\n", "import sys\n\ndef solve():\n    s = input()\n    m = int(input())\n    mem = [0] * (len(s) + 1)\n    res = list()\n    for i in range(1, len(s) + 1):\n        mem[i] = mem[i - 1] + (1 if i < len(s) and s[i - 1] == s[i] else 0)\n    for query in range(m):\n        l, r = map(int, input().split())\n        res.append(mem[r - 1] - mem[l - 1])\n    print('\\n'.join(map(str, res)))\n    \nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsolve()"]