["import sys\nimport bisect\ninput = sys.stdin.readline\n\ntrips = int(input())\ndyn = [int(input()) for i in range(trips)]\n\ncmap = [0,20] + [0 for i in range(trips-1)]\n\nfor i in range(2,trips+1):\n    cmap[i] = min(cmap[i-1] + 20,\n                  cmap[bisect.bisect_left(dyn,dyn[i-1]-89)] + 50,\n                  cmap[bisect.bisect_left(dyn,dyn[i-1]-1439)] + 120)\n\nfor i in range(1,trips+1):\n    print(cmap[i]-cmap[i-1])\n\n", "n = int(input())\n\ntravel_times = list()\ntravel_pay = list()\n\npay_ticket1 = 0\ntime_ticket1 = 0\n\npay_ticket2 = 0\ntime_ticket2 = 0\n\nfor travel_id in range(n):\n    t = int(input())\n    travel_times.append(t)\n    \n    pay2 = 20\n    \n    sum_time1 = t - travel_times[time_ticket1]\n    sum_time2 = t - travel_times[time_ticket2]\n\n    if sum_time1 >= 90:\n        pay_ticket1 -= travel_pay[time_ticket1]\n        \n        for id2 in range(time_ticket1+1, travel_id+1):\n            if t - travel_times[id2] < 90:\n                time_ticket1 = id2\n                break\n            else:\n                pay_ticket1 -= travel_pay[id2]\n\n        sum_time1 = t - travel_times[time_ticket1]\n\n\n    if sum_time2 >= 1440:\n        pay_ticket2 -= travel_pay[time_ticket2]\n        \n        for id2 in range(time_ticket2+1, travel_id+1):\n            if t - travel_times[id2] < 1440:\n                time_ticket2 = id2\n                break\n            else:\n                pay_ticket2 -= travel_pay[id2]\n\n        sum_time2 = t - travel_times[time_ticket2]\n\n    \n\n    if pay_ticket1 + pay2 > 50:\n        pay2 = 50 - pay_ticket1\n\n    if pay_ticket2 + pay2 > 120:\n        pay2 = 120 - pay_ticket2\n\n    \n    pay_ticket1 += pay2\n    pay_ticket2 += pay2\n    \n    travel_pay.append(pay2)\n    \nfor pay in travel_pay:\n    print(pay)", "import bisect\n\ndef getIndex(a, x):\n    \n    for i in range(0, len(a)):\n        if  a[i] > x:\n            return i\n    return 0\n\n\nn = int(input())\n\ntimes = []\ntotal = 0\nfor i in range(0, n):\n    time = int(input())\n    times.append(time)\n    total += time \n    \ncost = [0 for i in range(0, n + 1)]\ncost[0] = 0\ncost[1] = 20\n\nfor i in range(2, n + 1):\n    cost[i] =  min(cost[i - 1] + 20, \n        cost[bisect.bisect_left(times, times[i-1] - 89)] + 50, \n        cost[bisect.bisect_left(times, times[i-1] - 1439)] + 120)\n    \n    # print(cost[getIndex(89, times, i - 1)] + 50)\n# print(cost)\n# print(times)\nfor i in range(1, n + 1):\n    print(cost[i] - cost[i - 1])\n", "def main():\n\tN = int(input())\n\tS = [0]\n\tT = [0]\n\tkh = 0\n\tkd = 0\n\tfor n in range(1, N+1):\n\t\tT.append(int(input()))\n\t\tfor i in range(kh + 1, n):\n\t\t\t#print(T[n], T[i])\n\t\t\tif T[n] - T[i] < 90:\n\t\t\t\tkh = i - 1\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tkh = i\n\t\tfor i in range(kd + 1, n):\n\t\t\tif T[n] - T[i] < 1440:\n\t\t\t\tkd = i - 1\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tkd = i\n\t\t#print(n, kh, kd)\n\t\t#print(20, S[n - 1], 50, S[kh], 120, S[kd])\n\t\tS.append(min(20 + S[n - 1], 50 + S[kh], 120 + S[kd]))\n\t\t#print(T)\n\t\t#print(S)\n\t\tprint(S[n] - S[n - 1])\n\nmain()\n\n# 1509134058412\n", "n=int(input())\nex1=0\nex2=0\nL=[]\nf=[0]*(n+1)\nfor i in range(n):\n    L.append(int(input()))\n    while (L[i] - L[ex1 ] >= 90):\n        ex1+=1\n    while (L[i] - L[ex2 ] >= 1440):\n        ex2+=1\n    f[i+1] = min(min(f[ex1] + 50, f[ex2] + 120), f[i] + 20)\n    print(f[i+1] - f[i])\n", "n=int(input())\ntrips=[]\nprix=[0]\nk=0\nj=0\nfor i in range (n):\n    trips.append(int(input()))\n    while trips[i]-trips[j]>=90 :\n        j+=1\n    while trips[i]-trips[k]>=1440:\n        k+=1\n    prix.append(min(min(prix[k]+120,prix[j]+50),prix[-1]+20))\n    print(prix[-1]-prix[-2])\n    \n", "n=int(input())\ntrips=[]\nprix=[0]\nk=0\nj=0\nfor i in range (n):\n    \n    trips.append(int(input()))\n    while trips[i]-trips[j]>=90 :\n        j+=1\n    while trips[i]-trips[k]>=1440:\n        k+=1\n    prix.append(min(min(prix[k]+120,prix[j]+50),prix[-1]+20))\n    print(prix[-1]-prix[-2])\n", "\nn = int(input())\na = [0,]\nfor i in range(n):\n\tx = int(input())\n\ta.append(x)\n\ndp = [0] * (n + 1)\ndp[0] = 0\np90 = 1\np1440 = 1\nfor i in range(1, n + 1):\n\tdp[i] = dp[i - 1] + 20\n\twhile a[p90] + 90 <= a[i]:\n\t\tp90 = p90 + 1\n\tdp[i] = min(dp[i], dp[p90 - 1] + 50)\n\twhile a[p1440] + 1440 <= a[i]:\n\t\tp1440 = p1440 + 1\n\tdp[i] = min(dp[i], dp[p1440 - 1] + 120)\nfor i in range(1, n + 1):\n\tprint(dp[i] - dp[i - 1])", "n=int(input())\n\ntrips=[]\n\nprix=[0]\n\nk=0\n\nj=0\n\nfor i in range (n):\n\n    trips.append(int(input()))\n\n    while trips[i]-trips[j]>=90 :\n\n        j+=1\n\n    while trips[i]-trips[k]>=1440:\n\n        k+=1\n\n    prix.append(min(min(prix[k]+120,prix[j]+50),prix[-1]+20))\n\n    print(prix[-1]-prix[-2])\n\n    \n\n\n\n\n\n# Made By Mostafa_Khaled\n", "import math\nimport sys\nfrom bisect import bisect_right, bisect_left, insort_right\nfrom collections import Counter, defaultdict\nfrom heapq import heappop, heappush\nfrom itertools import accumulate, permutations, combinations\nfrom sys import stdout\n\nR = lambda: map(int, input().split())\nn = int(input())\narr = []\nfor _ in range(n):\n    arr.append(int(input()))\ncst = [math.inf] * n + [0]\nfor i in range(n):\n    cst[i] = min(cst[i - 1] + 20, cst[bisect_left(arr, arr[i] - 89) - 1] + 50, cst[bisect_left(arr, arr[i] - 1439) - 1] + 120)\nfor i in range(n):\n    print(cst[i] - cst[i - 1])", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\nfrom functools import lru_cache\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\n\nn = val()\nl = []\n\nfor i in range(n):l.append(val())\n\nl.sort()\n\nl1 = [0]\nl2 = [-float('inf')]\n\nfor i in l:\n    ind2 = br(l2, i - 90) - 1\n    ind1 = br(l2, i - 1) - 1\n    ind3 = br(l2, i - 1440) - 1\n    # print(ind1, ind2, ind3)\n    l2.append(i)\n    l1.append(min(l1[ind1] + 20, l1[ind2] + 50, l1[ind3] + 120))\n    # print(l1, l2)\nl2[0] = 0\n# print(l2)\nfor i in range(1, n + 1):\n    print(l1[i] - l1[i - 1])\nprint()\n", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\nfrom functools import lru_cache\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\n\nn = val()\nl = []\n\nfor i in range(n):l.append(val())\n\nl.sort()\n\nl1 = [0]\nl2 = [-float('inf')]\n\nfor i in l:\n    ind2 = br(l2, i - 90) - 1\n    ind1 = br(l2, i - 1) - 1\n    ind3 = br(l2, i - 1440) - 1\n    # print(ind1, ind2, ind3)\n    l2.append(i)\n    l1.append(min(l1[ind1] + 20, l1[ind2] + 50, l1[ind3] + 120))\n    # print(l1, l2)\nl2[0] = 0\n# print(l2)\nfor i in range(1, n + 1):\n    print(l1[i] - l1[i - 1])\nprint()\n"]