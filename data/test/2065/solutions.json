["n, m = map(int, input().split())\nadj = [[] for _ in range(n)]\ncp = [-1] * n\n\nfor i in range(m):\n    p, c = map(int, input().split())\n    adj[p - 1].append(c - 1)\n    cp[c - 1] = p - 1\n\npres = [i - 1 for i in map(int, input().split())]\n\nlevel = [0] * n\nfrom collections import deque\ndef bfs(v):\n    q = deque([v])\n    while q:\n        v = q.pop()\n        if cp[v] >= 0:\n            level[v] = level[cp[v]] + 1\n        for nv in adj[v]:\n            q.append(nv)\n\nfor i in range(n):\n    if cp[i] == -1:\n        bfs(i)\n\nfor i in range(n):\n    if level[i] > 0:\n        par = cp[i]\n        if pres[i] != pres[par] and level[pres[i]] <= level[par]:\n            print(-1)\n            return\n\npres = list(set(pres))\npres = sorted(pres, key = lambda i : level[i], reverse = True)\n\nprint(len(pres))\npres = [i + 1 for i in pres]\nprint(\"\\n\".join(map(str, pres)))"]