["import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor testcases in range(t):\n    n=int(input())\n\n    LIST=[input().strip() for i in range(n)]\n    SET=set()\n\n    ANS=0\n    CHANGE=set()\n    for i in range(n):\n        if LIST[i] in SET:\n            ANS+=1\n            CHANGE.add(i)\n        else:\n            SET.add(LIST[i])\n\n    ALIST=[]\n\n    for i in range(n):\n        if i in CHANGE:\n            flag=0\n            now=LIST[i]\n            \n            for j in range(4):\n                for k in range(10):\n                    x=now[:j]+str(k)+now[j+1:]\n\n                    if x in SET:\n                        continue\n                    else:\n                        ALIST.append(x)\n                        SET.add(x)\n                        flag=1\n                        break\n                if flag:\n                    break\n\n        else:\n            ALIST.append(LIST[i])\n    print(ANS)\n    print(\"\\n\".join(ALIST))\n\n    \n\n    \n", "\nt=int(input())\nfor nt in range(t):\n    n=int(input())\n    a=[None]*n\n    tc=[]\n    d=set()\n    for i in range(n):\n        a[i]=input()\n        if a[i] in d:\n            tc+=[i]\n        d.add(a[i]);\n    for i in tc:\n        for j in range(10):\n            if a[i][:3]+str(j) not in d:\n                a[i]=a[i][:3]+str(j)\n                d.add(a[i])\n                break\n    print(len(tc))\n    for i in a:\n        print(i)\n", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(input())\n\n    added = set()\n    everything = set(a)\n    out = []\n    res = 0\n    for code in a:\n        if code not in added:\n            added.add(code)\n            out.append(code)\n        else:\n            res += 1\n            done = False\n            for i in range(4):\n                for d in range(9+1):\n                    nw = code[:i] + str(d) + code[i+1:]\n                    if nw not in everything:\n                        added.add(nw)\n                        everything.add(nw)\n                        out.append(nw)\n                        done = True\n                        break\n                if done: break\n    print(res)\n    print('\\n'.join(out))\n", "def solve():\n    n = int(input())\n    d = {}\n    ss = [input() for i in range(n)]\n    for s in ss:\n        d[s] = d.get(s,0)+1\n    ans = sum(i-1 for i in d.values())\n    print(ans)\n    used = set(d.keys())\n    l = []\n    for s in ss:\n        if d[s] > 1:\n            t = list(s)\n            f = False\n            for i in range(4):\n                for j in range(10):\n                    t[i] = str(j)\n                    u = \"\".join(t)\n                    if u not in used:\n                        l.append(u)\n                        used.add(u)\n                        d[s] -= 1\n                        f = True\n                        break\n                if f:\n                    break\n        else:\n            l.append(s)\n            used.add(s)\n    print(*l, sep=\"\\n\")\n\nt = int(input())\nfor i in range(t):\n    solve()", "for _ in range(int(input())):\n\tn = int(input())\n\tl = [int(input()) for a in range(n)]\n\tans = 0\n\tfor i in range(n):\n\t\tif l[i] in l[i+1:]:\n\t\t\tans += 1\n\t\t\twhile l[i] in l[i+1:] + l[:i]:\n\t\t\t\tl[i] += 1000\n\t\t\t\tl[i] %= 10000\n\tprint(ans)\n\tfor i in l:\n\t\tprint(\"%04d\" % i)\n", "import sys\ndef I():\n        return sys.stdin.readline().rstrip()\n\nfor _ in range(int(I())):\n    n = int(I())\n    c = 0\n    l = [ I() for _ in range(n) ]\n    r = []\n    for s in l:\n        if s in r:\n            c += 1\n            for i in range(10):\n                sn = s[:-1] + chr(ord('0')+i) \n                if sn not in l and sn not in r:\n                    s = sn\n                    break\n        r.append( s )\n    print(c)\n    for s in r:\n        print(s)\n", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    p = []\n    s = []\n    d = {}\n    for j in range(n):\n        st = input()\n        s.append(st)\n        p.append(list(map(int, list(st))))\n        if st in list(d.keys()):\n            d[st].append(j)\n        else:\n            d[st] = [j]\n    \n    poss = [i for i in range(10)]\n    for j in range(n):\n        poss[p[j][0]] = -1\n    rest = [x for x in poss if x != -1]\n    r_i = 0\n    res = 0\n    for k in list(d.keys()):\n        if len(d[k]) > 1:\n            for r in d[k][1:]:\n                p[r][0] = rest[r_i]\n                r_i += 1\n                res += 1\n    print(res)\n    for o in p:\n        print(\"\".join(map(str, o)))\n    \n    \n", "def run_length_compress(string):\n    string.append(\"@\")\n    n = len(string)\n\n    begin = 0\n    end = 1\n    cnt = 1\n    ans = []\n    while True:\n        if end >= n:\n            break\n        if string[begin] == string[end]:\n            end += 1\n            cnt += 1\n        else: \n            ans.append((cnt, string[begin]))\n            begin = end\n            end = begin + 1\n            cnt = 1\n    \n    return ans\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [input() for i in range(n)]\n    set_ = set([])\n    init_set = set([])\n    for i in range(n):\n        init_set.add(p[i])\n    ans_num = 0\n    ans = []\n    for i in range(n):\n        flag = False\n        if p[i] not in set_ and p[i] in init_set:\n            ans.append(p[i])\n            set_.add(p[i])\n            continue\n        while True:\n            if p[i] not in set_ and p[i] not in init_set:\n                ans.append(p[i])\n                set_.add(p[i])\n                if flag:\n                    ans_num += 1\n                break\n            else:\n                p[i] = str((int(p[i][0])+1) % 10) + p[i][1:]\n                flag = True\n    print(ans_num)\n    for i in ans:\n        print(i)", "t = int(input())\n\ndef change(p, dct):\n    if dct[p] == 1:\n        return [p, 0]\n    for j in range(4):\n        for i in range(10):\n            nw = list(p[:])\n            nw[j] = str(i)\n            nw = ''.join(nw)\n            if nw not in dct:\n                return [nw, 1]\n\nfor _ in range(t):\n    n = int(input())\n    l = {}\n    pins = []\n    for i in range(n):\n        s = input()\n        pins.append(s)\n        if s in l:\n            l[s] += 1\n        else:\n            l[s] = 1\n    res = []\n    cnt = 0\n    for p in pins:\n        c, d = change(p, l)\n        cnt += d\n        l[p] -= 1\n        if l[p] == 0:\n            del l[p]\n        if c not in l:\n            l[c] = 1\n        else:\n            l[c] += 1\n        res.append(c)\n    print(cnt)\n    for i in res:\n        print(i)", "\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    k = []\n    for i in range(n):\n        k.append(input())\n    total = 0\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if k[i] == k[j]:\n                count += 1\n        if count > 1:\n            temp = k[i]\n            for a in ['0','1','2','3','4','5','6','7','8','9']:\n                if a + k[i][1:] not in k:\n                    k[i] = a + k[i][1:]\n                    break\n            if temp == k[i]:\n                for a in ['0','1','2','3','4','5','6','7','8','9']:\n                    if k[i][0] + a + k[i][2:] not in k:\n                        k[i] = a + k[i][1:]\n                        break\n            total += 1\n    print(total)\n    for i in range(n):\n        print(k[i])\n", "for _ in range(int(input())):\n\tn=int(input())\n\tl=[]\n\tfor i in range(n):\n\t\tl.append(input())\n\tans1=0\n\tans2=[None]*n\n\tfor j in range(n):\n\t\tif l[j] not in ans2:\n\t\t\tans2[j]=l[j]\n\tfor j in range(n):\n\t\tif ans2[j]==None:\n\t\t\tfor pos in range(4):\n\t\t\t\tfor d in range(9):\n\t\t\t\t\tjd=l[j][:pos]+chr(ord('0')+d)+l[j][pos+1:]\n\t\t\t\t\tif jd not in ans2:\n\t\t\t\t\t\tans1+=1\n\t\t\t\t\t\tans2[j]=jd\n\t\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tcontinue\n\t\t\t\tbreak\n\tprint(ans1)\n\tfor i in ans2:\n\t\tprint(i)", "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    vis=set()\n    it=[input() for i in range(n)]\n    ss={}\n    ans=[]\n    j=0\n    for i in it:\n        try:\n        \n            ss[i].append(j)\n        except:\n            ss[i]=[j]\n        j+=1\n    tot=0\n    x=list(ss.keys())[:]\n    for i in x:\n        if len(ss[i])==1:\n            continue\n        for kk in ss[i][1:]:\n            for jj in range(10):\n\n                j=i\n                j=j[:3]+str(jj)\n                try:\n                    x=ss[j]\n                except:\n                    tot+=1\n                    ss[j]=[kk]\n                    break\n        ss[i]=[ss[i][0]]\n    for i in ss:\n        ans.append([i,ss[i][0]])\n    \n    ans.sort(key=lambda x:x[1])\n    print(tot)\n    for i in ans:\n        print(i[0])\n    \n    \n            \n    \n    \n    \n", "for _ in range(int(input())):\n\tn = int(input())\n\n\tans = []\n\n\tps = [input() for _ in range(n)]\n\n\tsuf = {}\n\n\tfor i in range(n):\n\t\tp = ps[i]\n\t\ts = p[1:]\n\t\tif s not in suf:\n\t\t\tsuf[s] = [str(A) for A in range(10)]\n\n\t\tif p[0] in suf[s]:\n\t\t\tsuf[s].remove(p[0])\n\n\n\tcnt = 0\n\n\tused = {}\n\n\tfor i in range(n):\n\t\tp = ps[i]\n\t\ts = p[1:]\n\n\t\tif s in used and p[0] in used[s]:\n\t\t\tp = suf[s][-1] + s\n\t\t\tcnt += 1\n\t\t\tsuf[s].pop()\n\n\t\tused.setdefault(s, set()).add(p[0])\n\n\t\tans.append(p)\n\n\tprint(cnt)\n\tprint(*ans, sep = \"\\n\")", "t=int(input())\nfor i in range(t):\n    n=int(input())\n    a=dict()\n    b=[]\n    for i in range(n):\n        c=input()\n        a[c]=a.get(c,-1)+1\n        b.append(c)\n    print(sum(a.values()))\n    rlb=list(range(len(b)))\n    for i in rlb:\n        v=b[i]\n        if a.get(v,0)==0:\n            print(v)\n        else:\n            v,vo=v[1:],v\n            for i in range(10):\n                if not str(i)+v in a:\n                    a[str(i)+v]=0\n                    a[vo]-=1\n                    print(str(i)+v)\n                    break\n", "from math import *\nfrom collections import *\nimport sys\nsys.setrecursionlimit(10**9)\n\nt = int(input())\nfor y in range(t):\n\tn = int(input())\n\ta = []\n\tfor i in range(n):\n\t\ta.append(list(input()))\n\t\n\tch = 0\n\tfor i in range(n):\n\t\tkey = 0\n\t\tfor j in range(n):\n\t\t\tif(j == i): continue\n\t\t\tif(a[i] == a[j]):\n\t\t\t\tkey = 1\n\t\t\t\tbreak\n\t\tif(key == 1):\n\t\t\t#print(a[i])\n\t\t\tfor j in range(4):\n\t\t\t\tb = a[i][::]\n\t\t\t\tflag = 0\n\t\t\t\tfor k in range(10):\n\t\t\t\t\tb[j] = str(k)\n\t\t\t\t\tif(b not in a):\n\t\t\t\t\t\tch += 1\n\t\t\t\t\t\ta[i][::] = b\n\t\t\t\t\t\tflag = 1 \n\t\t\t\t\t\tbreak\n\t\t\t\tif(flag == 1):\n\t\t\t\t\tbreak\n\tprint(ch)\n\tfor i in a:\n\t\tprint(\"\".join(i))\n", "from collections import Counter\n\nDIGS = \"0123456789\"\n\nt = int(input())\n\nfor _ in range(t):\n\tn = int(input())\n\tP = [input() for _ in range(n)]\n\t\n\tprint(sum(v-1 for v in Counter(P).values()))\n\t\n\tfor i in range(len(P)):\n\t\tif P[i] in P[:i]:\n\t\t\tfor dig in DIGS:\n\t\t\t\tif (dig + P[i][1:]) not in P:\n\t\t\t\t\tP[i] = dig + P[i][1:]\n\t\t\t\t\tbreak\n\t\n\tfor p in P:\n\t\tprint(p)", "a = int(input())\nfor i in range(a):\n    n = int(input())\n    l = []\n    ls = []\n    for i in range(n):\n        k = input()\n        l.append(k)\n        ls.append(k)\n    d = list(set(l))\n    a = [[0 for i in range(11)] for j in range(5)]\n    for i in range(len(d)):\n        for j in range(4):\n            a[j][int(d[i][j])] = 1\n    f = set()\n    ans = 0\n    ansl = []\n    for i in l:\n        if i in f:\n            r = 0\n            ik = 0\n            for j in range(10):\n                if a[0][j] == 0:\n                    a[0][j] = 1\n                    r = 1\n                    ik = j\n                    break\n            ansl.append(str(ik) + i[1:])\n            ans += 1\n            if r == 0:\n                r = 0\n                ik = 0\n                for j in range(10):\n                    if a[1][j] == 0:\n                        a[1][j] = 1\n                        r = 1\n                        ik = j\n                        break\n                ansl.append(i[0] + str(ik) + i[2:])\n                ans += 1  \n                if r == 0:\n                    r = 0\n                    ik = 0\n                    for j in range(10):\n                        if a[2][j] == 0:\n                            a[2][j] = 1\n                            r = 1\n                            ik = j\n                            break\n                    ansl.append(i[0:2] + str(ik) + i[3:])\n                    ans += 1 \n                    if r == 0:\n                        r = 0\n                        ik = 0\n                        for j in range(10):\n                            if a[3][j] == 0:\n                                a[3][j] = 1\n                                r = 1\n                                ik = j\n                                break\n                        ansl.append(i[0:-1] + str(ik))\n                        ans += 1                     \n        else:\n            f.add(i)\n            ansl.append(i)\n    print(ans)\n    for i in ansl:\n        print(i)\n", "\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    cards = list()\n    cou = 0\n    for j in range(n):\n        cards.append(input())\n    br = False\n    for j in range(n):\n        br = False\n        if cards.count(cards[j]) > 1:\n            for k in range(4):\n                for m in range(10):\n                    temp = list(cards[j])\n                    temp[k] = str(m)\n                    temp = \"\".join(temp)\n                    if temp not in cards:\n                        cards[j] = temp\n                        cou += 1\n                        br = True\n                        break\n                if br:\n                    break\n    print(cou)\n    print(*cards, sep=\"\\n\")\n", "t=int(input())\nfor i in range(t):\n  dc = {}\n  n=int(input())\n  arr=[]\n  out = 0\n  hm = {}\n  arr2 = []\n  for i in range(n):\n    tem=input()\n    arr2.append(tem)\n    if tem in dc:\n      dc[tem]+=1\n      out+=1\n    else:\n      dc[tem]=1\n      arr.append(tem)\n      hm[tem] = [tem]\n  arr.sort()\n  cur = 0\n  for i in range(len(arr)):\n    for j in range(dc[arr[i]]-1):\n      cur = '0'\n      trun = arr[i][:3]\n      while trun+cur in dc:\n        cur = chr(ord(cur)+1)\n      dc[trun+cur] = 1\n      hm[arr[i]].append(trun+cur)\n  print(out)\n  for i in range(len(arr2)):\n    dc[arr2[i]] -= 1\n    arr2[i] = hm[arr2[i]][dc[arr2[i]]]\n    print(arr2[i])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    Ans = [0] * N\n    coll = []\n    V = set()\n    for n in range(N):\n        s = input().strip()\n        if s in V:\n            coll.append((s, n))\n        Ans[n] = s\n        V.add(s)\n    for c, pos in coll:\n        for i in range(4):\n            tVal = int(c[i])\n            for j in range(1, 10):\n                c = c[:i] + str((tVal + j)%10) + c[i+1:]\n                if c not in V:\n                    V.add(c)\n                    break\n            else:\n                c = c[:i] + str(tVal) + c[i+1:]\n                continue\n            break\n        Ans[pos] = c\n    print(len(coll), *Ans, sep = '\\n')\n", "def withZeros(m):\n    t=str(m)\n    if m<1000:\n        t=\"0\"+t\n        if m<100:\n            t=\"0\"+t\n            if m<10:\n                t=\"0\"+t\n    return t\n                    \nq=int(input())\nfor query in range(q):\n    n=int(input())\n    r=[0 for i in range(n)]\n    for i in range(n):\n        r[i]=int(input())\n    w=[r[i] % 1000 for i in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if r[i]==r[j]:\n                ans+=1\n                for a in range(10):\n                    if ((r[i]+a*1000+1000) % 10000) not in r:\n                        r[i]=(r[i]+a*1000+1000) % 10000\n                        break\n    print(ans)\n    for i in range(n):\n        print(withZeros(r[i]))", "\"\"\"\nNTC here\n\"\"\"\nfrom sys import stdin, setrecursionlimit\nsetrecursionlimit(10**7)\n\ndef iin(): return int(stdin.readline())\n \n \ndef lin(): return list(map(int, stdin.readline().split()))\n\n# range = xrange\n# input = raw_input\n\ndef main():\n    t=iin()\n    while t:\n        t-=1\n        n=iin()\n        ans=[]\n        dc=set()\n        ch=0\n        todo=[]\n        for _ in range(n):\n            s=input()\n            if s in dc:\n                ans.append(s)\n                todo.append(_)\n            else:\n                ans.append(s)\n                dc.add(s)\n        for j in todo:\n            s=ans[j]\n            ch+=1\n            for i in range(10):\n                if str(i)+s[1:] not in dc:\n                    ans[j]=str(i)+s[1:]\n                    dc.add(ans[j])\n                    break\n        \n        print(ch)\n        print(*ans,sep='\\n')\n\n\n\n            \n\nmain()", "\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(input())\n\n    p = '0123456789'\n    ans = 0\n    for i in range(n-1):\n        if arr[i] in arr[i+1:]:\n            ans +=1\n            brr = []\n            for j in range(n):\n                brr.append(arr[j][0])\n            for j in p:\n                if j not in brr:\n                    arr[i] = j + arr[i][1:]\n                    break\n    print(ans)       \n    for i in arr:\n        print(i)\n    \n            \n    \n        \n", "t=int(input())\nfor ij in range(0,t):\n\tn=int(input())\n\tl=[]\n\tans=0\n\tla=[]\n\tli=[]\n\tfor i in range(0,n):\n\t\ts=input()\n\t\tla.append(s)\n\t\tif s in l:\n\t\t\tans+=1\n\t\t\tli.append(i)\n\t\telse:\n\t\t\tl.append(s)\n\tprint(ans)\n\tfor i in li:\n\t\ts=la[i]\n\t\tfor k in range(0,4):\n\t\t\tt=0\n\t\t\tfor j in range(0,10):\n\t\t\t\ts1=s[:k]+str(j)+s[k+1:]\n\t\t\t\tif s1 not in l:\n\t\t\t\t\tl.append(s1)\n\t\t\t\t\tla[i]=s1\n\t\t\t\t\tt=1\n\t\t\t\t\tbreak\n\t\t\tif t==1:\n\t\t\t\tbreak\n\tfor i in la:\n\t\tprint(i)", "3\n\nimport os\nimport sys\n\n\ndef main():\n    T = read_int()\n    for _ in range(T):\n        N = read_int()\n        c, ans = solve(N, [read_int() for _ in range(N)])\n        print(c)\n        for a in ans:\n            print('{:04}'.format(a))\n\n\ndef solve(N, P):\n    d = {}\n    for p in P:\n        if p not in d:\n            d[p] = 0\n        d[p] += 1\n\n    c = 0\n    ans = []\n    for p in P:\n        if d[p] == 1:\n            ans.append(p)\n            continue\n\n        c += 1\n        np = -1\n        a = [p % 10, (p // 10) % 10, (p // 100) % 10, p // 1000]\n        for i in range(4):\n            for j in range(10):\n                if a[i] == j:\n                    continue\n                orig = a[i]\n                a[i] = j\n                v = a[0] + a[1] * 10 + a[2] * 100 + a[3] * 1000\n                if v not in d:\n                    np = v\n                    break\n                a[i] = orig\n            if np != -1:\n                break\n\n        ans.append(np)\n        d[p] -= 1\n        d[np] = 1\n\n    return c, ans\n\n\n###############################################################################\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]