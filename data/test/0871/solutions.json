["n, s = [int(x) for x in input().split()]\n\nts = []\nfor _ in range(n):\n    h, m = [int(x) for x in input().split()]\n    ts.append(h * 60 + m)\n\nif ts[0] >= s + 1:\n    print(0, 0)\n    return\n\ndiffs =  [y - x for x, y in zip(ts, ts[1:])]\n\nfor i, diff in enumerate(diffs):\n    if diff >= 2 * s + 2:\n        break\nelse:\n    i = len(ts) - 1\n\nt = ts[i] + s + 1\nprint(t // 60, t % 60)\n", "a, b = map(int, input().split())\nc = [-b-1]\nfor i in range(a):\n    k, l = map(int, input().split())\n    c.append(k*60+l)\nc.append(10000000000000000)\nfor i in range(a+1):\n    if c[i+1]-c[i]> 2*b+1:\n        u = c[i]+b+1\n        print(u//60, u%60)\n        break", "n,s = list(map(int,input().split()))\na = []\nfor i in range(n):\n    h,m = list(map(int,input().split()))\n    a.append(60*h + m)\na.append(10000000000)\nif a[0] > s:\n    print(0,0)\nelse:\n    for i in range(n):\n        if (a[i+1]-a[i] > 2*s+1):\n            print((a[i]+s+1)//60,(1+a[i]+s)%60)\n            break\n", "def run():\n    n, s = [int(x) for x in input().split()]\n    d = [[int(x) for x in input().split()] for _ in range(n)]\n\n    first = d[0]\n    first = first[0]*60+first[1]\n    if first >= s+1:\n        print(0, 0)\n        return\n\n    for i in range(n-1):\n        lft, rgt = d[i], d[i+1]\n        lft = lft[0]*60+lft[1]\n        rgt = rgt[0]*60+rgt[1]\n\n        if rgt - lft >= (s+1)*2:\n            ans = lft+s+1\n            print(ans//60, ans%60)\n            return\n\n    rgt = d[-1]\n    rgt = rgt[0] * 60 + rgt[1]\n    ans = rgt+s+1\n    print(ans // 60, ans % 60)\n\n\nrun()", "def main():\n    [n, s] = [int(i) for i in input().split()]\n    times = []\n    for i in range(n):\n        [hour, minute] = [int(i) for i in input().split()]\n        times.append(hour * 60 + minute)\n    ans = earliest(times, s)\n    hour = ans // 60\n    minute = ans % 60\n    print(hour, minute)\ndef earliest(times, s):\n    n = len(times)\n    if times[0] >= s + 1:\n        return 0\n    for i in range(n - 1):\n        bef = times[i]\n        aft = times[i + 1]\n        if aft - bef >= 2 * s + 2:\n            return bef + s + 1\n    return times[n - 1] + s + 1\ndef __starting_point():\n    main()\n\n__starting_point()", "n,s = map(int, input().split())\na,b = map(int, input().split())\nif a*60+b>=s+1:\n    print(0,0)\nelse:\n    X = 0\n    for i in range(n-1):\n        c,d = map(int, input().split())\n        if c*60+d - (a*60+b) >= 2*s+2:\n            M = a*60+b+1+s\n            print(M//60,M%60)\n            X = 1\n            break\n        else:\n            a,b = c,d\n    if X==0:\n        M = a*60+b+1+s\n        print(M//60,M%60)", "a = True\nn, s = [int(x) for x in input().split()]\nph, pm = [int(x) for x in input().split()]\n\nif ph*60 + pm >= s+1:\n    print(0, 0)\n    a = False\n    return\nfor x in range(n - 1):\n    h, m = [int(x) for x in input().split()]\n    if h*60+m >= ph*60+pm + 2 + 2 * s:\n        print((ph*60+pm+s+1) // 60, (ph*60+pm+s+1) % 60)\n        a = False\n        break\n    else:\n        ph = h\n        pm = m\nif a:\n    print((ph*60+pm+s+1) // 60, (ph*60+pm+s+1) % 60)\n", "# python3\n\ndef readline(): return tuple(map(int, input().split()))\n\n\ndef readlines(count):\n    while count:\n        count -= 1\n        yield readline()\n\n\ndef main():\n    n, s = readline()\n    shedule = [h*60 + m for (h, m) in readlines(n)]\n\n    shedule.append(float('inf'))\n    prev = -s\n\n    for time in shedule:\n        if prev + s < time - s:\n            print(*divmod(prev + s, 60))\n            break\n        prev = time + 1\n\n\n\nmain()\n", "n,s=map(int,input().split())\nt=[]\nfor i in range(n):\n\th,m=map(int,input().split())\n\tt.append(60*h+m)\nx,y=0,0\nif t[0]<s+1:\n\tfor i in range(n-1):\n\t\tif t[i+1]-t[i]>=2*s+2:\n\t\t\tx=t[i]+s+1\n\t\t\tbreak\n\tif x==0:\n\t\tx=t[n-1]+s+1\ny=x%60\nx=x//60\nprint(x,y)", "n,s=map(int,input().split())\ntime=[0]*n\nfor i in range(n):\n  h,m=map(int,input().split())\n  time[i]=h*60+m\n\ngogo=0\nif time[0]-1-gogo>=s:\n  print(0,0)\n  return\n\nfail=True\nfor i in range(n-1):\n  gogo=time[i]+1+s\n  if time[i+1]-gogo-1>=s:\n    ans=gogo\n    fail=False\n    break\n\nif fail: gogo=time[-1]+s+1 \nhour=gogo//60\nmin=gogo%60\nprint(hour,min)", "n, s = [int(w) for w in input().split()]\n\nr = 0\n\nfor _ in range(n):\n    h, m = [int(w) for w in input().split()]\n    t = 60*h+m\n    if t > r+s:\n        break\n    r = t+s+1\n\nprint(r//60, r%60)\n", "num_landings, min_interval = (int(x) for x in input().split())\nlandings = [[int(x) for x in input().split()] for _ in range(num_landings)]\nlandings_in_minutes = [-min_interval - 1] + [60*clock[0] + clock[1] for clock in landings] + [float('inf')]\n\nfor left_landing, right_landing in zip(landings_in_minutes[:-1], landings_in_minutes[1:]):\n    if left_landing + 2*min_interval + 2 <= right_landing:\n        takeoff = left_landing + 1 + min_interval\n        break\n\ntakeoff_hours = takeoff // 60\ntakeoff_mins = takeoff % 60\nprint(takeoff_hours, takeoff_mins)\n        \n\n", "\ndef to_minutes(h, m):\n    return h * 60 + m\ndef to_retard(m):\n    return divmod(m, 60)\n\nn, s = [int(i) for i in input().split(' ')]\n\ntakeoffs = []\nfor i in range(n):\n    takeoff_time = to_minutes(*([int(i) for i in input().split(' ')]))\n    takeoffs.append(takeoff_time)\n\ndef solve():\n    if takeoffs[0] > s:\n        return 0\n    for i in range(n-1):\n        if takeoffs[i+1] - takeoffs[i] - 1 >= 2*s +1:\n            return takeoffs[i] + s + 1\n    return takeoffs[-1] + s + 1\n\nprint(*to_retard(solve()))\n", "n, s = list(map(int, input().split()))\na = []\nind = True\nfor i in range(n):\n\tx, y = list(map(int, input().split()))\n\ttime = (60 * x) + y\n\tif len(a) == 0 and time >= s + 1 and ind:\n\t\tprint(0, 0)\n\t\tind = False\n\telif len(a) > 0 and ind:\n\t\tlast = a[len(a) - 1]\n\t\tif time - last >= (2 * s) + 2:\n\t\t\ty = last + s + 1\n\t\t\tprint(y // 60, y % 60)\n\t\t\tind = False\n\ta.append(time)\n#print(a)\t\nif ind:\n\ty = a[len(a) - 1] + s + 1\n\t#print(y)\n\tprint(y // 60, y % 60)\t\t\n\n", "import sys\nn, s = [int(x) for x in input().split()]\nh1,m1 = [int(x) for x in input().split()]\nif h1*60+m1>=s+1:\n    print(0, 0)\n    return\nfor i in range(n-1):\n    h2, m2 = [int(x) for x  in input().split()]\n    if h2*60+m2>=h1*60+m1+2+s*2:\n        z= h1*60+m1+1+s\n        print(z//60, z%60)\n        return\n    h1=h2\n    m1=m2\n\nz=h1*60+m1+1+s\nprint(z//60, z%60)\n\n        \n", "n, s = input().split(' ')\nn, s = int(n), int(s)\nrst = [-1, -1]\nlast = [0, 0]\nh, m = input().split(' ')\nh, m = int(h), int(m)\nif (h - last[0]) * 60 + (m - last[1]) >= s + 1:\n    rst = [0, 0]\nelse:\n    last = [h, m]\n    for i in range(1, n):\n        h, m = input().split(' ')\n        h, m = int(h), int(m)\n        if (h - last[0]) * 60 + (m - last[1]) >= 2 * s + 2:\n            rst = [last[0] + s // 60, last[1] + s % 60 + 1]\n            break\n        last = [h, m]\nif rst == [-1, -1]:\n    rst = [last[0] + s // 60, last[1] + s % 60 + 1]\nif rst[1] >= 60:\n    rst[0] += 1\n    rst[1] -= 60\nprint(rst[0], rst[1])\n", "n, s = map(int, input().split())\nchegadas = []\nfor _ in range(n):\n    h, m = map(int, input().split())\n    chegadas.append(h*60+m)\npos = -1\n\nif chegadas[0] > s:\n    print(0, 0)\nelse:\n    for i in range(n-1):\n        if chegadas[i+1] - chegadas[i] > ((s*2) + 1):\n            pos = i\n            break\n\n    t = chegadas[pos] + s + 1\n    h, m = int(t / 60), t % 60\n    print(h, m)", "n, s = map(int, input().split(' '))\nl = list()\nfor i in range(n):\n    a, b = map(int, input().split(' '))\n    l.append(a * 60 + b)\nif l[0] - s >= 1:\n    print(0, 0)\nelse:\n    for i in range(n - 1):\n        t = l[i + 1] - l[i] - 1 - 2 * s\n        if t >= 1:\n            tt = l[i] + 1 + s\n            h, m = tt // 60, tt % 60\n            print(h, m)\n            break\n    else:\n        tt = l[-1] + 1 + s\n        h, m = tt // 60, tt % 60\n        print(h, m)", "n, s = map(int, input().split())\na = []\nfor _ in range(n):\n    h, m = map(int, input().split())\n    a.append((h,m))\nb = [h*60+m for (h,m) in a]\nc = -1\nif b[0] > s:\n    print(0,0)\nelse:\n    for i in range(n-1):\n        if b[i+1]-b[i] > s*2+1:\n            c = i\n            break\n    r = ((b[c]+s+1) // 60,(b[c]+s+1) % 60)\n    print(r[0],r[1])", "n,s = list(map(int,input().split(' ')))\nv0 = 0\nfl = False\n\n\n\nfor i in range(n):\n  h,m = list(map(int,input().split(' ')))\n  v = h*60+m\n  if i==0 and (v-1) >= s:\n    m2 = 0\n    h2 = 0\n    fl = True\n    break\n  elif (v-v0-2) // 2 >= s:\n    v2 = v0+s+1\n    m2 = (v2)%60\n    h2 = (v2)//60\n    fl = True\n    break\n  else:\n    v0 = v\nif fl:\n  print(h2,m2)\nelse:\n  m2 = (v0+s+1)%60\n  h2 = (v0+s+1)//60\n  print(h2,m2)\n", "n, s = [int(x) for x in input().split(\" \")]\n\nlast = 0\nfound = False\nrng = 2 * s + 2\n\nfirst = s + 1\n\nf = False\n\nff = False\n\nfor _ in range(n):\n\n    h, m = [int(x) for x in input().split(\" \")]\n    x = h * 60 + m\n    if not f:\n        if abs(x - last) >= first:\n            found = True\n            ff = True\n        else:\n            last = x\n    elif not found:\n        if abs(x - last) >= rng:\n            found = True\n        else:\n            last = x\n    f = True\n\n\n# if found:\nif ff:\n    print(0, 0)\nelse:\n    res = last + s + 1\n    print(\"{} {}\".format(res // 60, res % 60))\n# else:\n#     print()\n", "rd = lambda: list(map(int, input().split()))\nn, s = rd()\na = [- s - 1]\nfor _ in range(n):\n    h, m = rd()\n    a.append(h * 60 + m)\nx = 0\nfor i in range(1, len(a)):\n    if a[i - 1] + s + 1 <= x <= a[i] - s - 1:\n        break\n    x = a[i] + s + 1\nprint(x // 60, x % 60)\n", "def preobr(s):\n    h, m = list(map(int,s.split()))\n    return h * 60 + m\n\n\nn, s = list(map(int,input().split()))\nt = preobr(input())\ns += 1\nfl = False\nif t >= s:\n    res = 0\n    fl = True\nfor i in range(n - 1):\n    new_t = preobr(input())\n    if fl:\n        continue\n    if new_t - t >= 2 * s:\n        res = t + s\n        fl = True\n    else:\n        t = new_t\nif not fl:\n    res = t + s\nprint(res // 60, res % 60)\n        \n"]