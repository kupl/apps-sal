["n = int(input())\nlst = [int(x) for x in input().split()]\ntmp = [False] * 100007\ntmp2 = [False] * 100007\n\nfor x in lst:\n\ttmp[x] = True\n\n\n\nanswer, index = [], 1\nfor x in lst:\n\tif not tmp2[x] and x <= len(lst):\n\t\tanswer.append(x)\n\t\ttmp2[x] = True\n\telse:\n\t\twhile tmp[index]:\n\t\t\tindex += 1\n\t\ttmp[index] = True\n\t\tanswer.append(index)\n\n\nprint(' '.join(map(str, answer)))", "n = int(input())\na = [int(x)-1 for x in input().split()]\ncount = [0 for i in range(len(a))]\nans = [-1 for i in range(len(a))]\nfor i in range(len(a)):\n\tif a[i] < len(count):\n\t\tcount[a[i]] += 1\n\nfor i in range(len(a)):\n\tif a[i] < len(count):\n\t\tif count[a[i]] >= 1:\n\t\t\tans[i] = a[i]\n\t\t\tcount[a[i]] = -1\n\njIt = 0\nfor i in range(len(ans)):\n\tif ans[i] == -1:\n\t\twhile count[jIt] < 0:\n\t\t\tjIt += 1\n\t\tans[i] = jIt\n\t\tjIt += 1\n\nprint(\" \".join(str(x+1) for x in ans))", "def main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n\n    d = [0] * n\n    for i in range(n):\n        if a[i] > n or d[a[i] - 1] == 1:\n            a[i] = -1\n        else:\n            d[a[i] - 1] = 1\n    for s in range(n):\n        if d[s] == 0:\n            break\n    for i in a:\n        if i == -1:\n            print(s + 1, end=' ')\n            for s in range(s + 1, n):\n                if d[s] == 0:\n                    break\n        else:\n            print(i, end=' ')\n            \nmain()\n", "n = int(input())\na = list(map(int, input().split()))\nc = [0] * 100000\nfor i in range(n):\n    c[a[i] - 1] += 1\ns = []\nfor i in range(n):\n    if c[i] == 0:\n        s.append(i + 1)\nif not s:\n    print(*a)\n    return\nans = a[:]\nx = 0\nfor i in range(n):\n    if c[a[i] - 1] > 1 or a[i] > n:\n        c[a[i] - 1] -= 1\n        ans[i] = s[x]\n        x += 1\nprint(*ans)", "n = int(input())\n\nnums = [False] * n\nseen = [False] * n\ni = 0\nA = list(map(int, input().split()))\n\n# First walk\nfor num in A:\n    if 1 <= num <= n:\n        nums[num - 1] = True\n\n# Second walk\nfor num in A:\n    if 1 <= num <= n:\n        if not seen[num - 1]:\n            seen[num - 1] = True\n            print(num, end = \" \")\n        else:\n            while nums[i]:\n                i += 1\n            nums[i] = True\n            i += 1\n            print(i, end = \" \")\n    else:\n        while nums[i]:\n            i += 1\n        nums[i] = True\n        i += 1\n        print(i, end = \" \")", "n = int(input())\na = input().split()\nd = {}\nfor i in range(n):\n    d[i+1] = 0\nfor i in range(n):\n    a[i] = int(a[i])\n    if not a[i] in d:\n        d[a[i]] = 1\n    else:\n        d[a[i]] += 1\nnls_pos = []\nfor i in range(n):\n    if d[i+1] == 0:\n        nls_pos.append(i+1)\nfor i in range(n):\n    if d[a[i]] > 1 or a[i]>n:\n        d[a[i]] -= 1\n        a[i] = nls_pos[-1]\n        nls_pos.pop()\nfor i in a:\n    print(i, end=\" \")", "N = int(input())\nthings = list(map(int, input().split()))\nans = []\ndif = set(things)\ndouble = set()\nto_zen = []\npnt = 0\nfor i in things:\n    if i > N:\n        dif.discard(i)\n        to_zen += [pnt]\n    elif i in double:\n        to_zen += [pnt]\n    double.add(i)\n    pnt += 1\nfor i in range(1, N + 1):\n    if i not in dif:\n        things[to_zen.pop()] = i\n        dif.add(i)\nprint(' '.join(list(map(str, things))))", "def read_list(t): return [t(x) for x in input().split()]\ndef read_line(t): return t(input())\ndef read_lines(t, N): return [t(input()) for _ in range(N)]\n\nN = read_line(int)\nA = read_list(int)\nunused = list(set(range(1, N+1)) - set(A))\ncur = 0\nused = [False] * (N+1)\n\nfor i, a in enumerate(A):\n    if a > N or used[a]:\n        A[i] = unused[cur]\n        used[A[i]] = True\n        cur += 1\n    else:\n        used[a] = True\nprint(*A)\n", "n = int(input())\na = [int(i) for i in input().split()]\nc = [0] * (n+1)\n\nfor e in a:\n    if e <= n:\n        c[e] = 1\nl = [e for e in range(1,n+1) if c[e] == 0]\n\ns = 0\nc = [0] * (n+1)\nfor i in range(n):\n    if a[i] <= n and c[a[i]] < 1:\n        c[a[i]] = 1\n    else:\n        a[i] = l[s]\n        s += 1\n\nfor e in a:\n    print(e, end = ' ')\n            \n        \n", "n = int(input())\npin = input().split(\" \")\narr = [int(i)-1 for i in pin]\nfree = [True]*n\nchange = []\nfor i in range(n):\n    if arr[i] <n:\n        if free[arr[i]]:\n            free[arr[i]] = False\n        else:\n            change.append(i)        \n    else:\n        change.append(i)\n        \nfor i in range (n):\n    if free[i]:\n        arr[change.pop()] = i\n\nfor i in arr:\n    print (i+1, end=\" \")", "import sys\n\n\nn = int(input())\nx = str(input()).split()\na = {a : 1 for a in range(1, n + 1)}\nc = []\n\nfor i in range(n):\n    if int(x[i]) > n:\n        c.append(i)\n        continue\n    if a.get(int(x[i])) == 1:\n        a.pop(int(x[i]))\n        continue\n    else:\n        c.append(i)\n\nfor i in range(len(c)):\n    x[c[i]] = a.popitem()[0]\n\nfor i in range(n - 1):\n    print(x[i], end=\" \")\nprint(x[n - 1])\n", "n = int(input())\n\nthings_numbers = list(map(int, input().split()))\nthings_numbers_set = set(things_numbers)\nis_not_free = set()\n\nj = 1\nfor i in range(0, n):\n    if things_numbers[i] not in is_not_free and things_numbers[i] <= n:\n        is_not_free.add(things_numbers[i])\n    else:\n        while j in things_numbers_set:\n            j += 1\n        things_numbers[i] = j\n        j += 1\n\nprint(*things_numbers)", "import sys\n\nn = int(sys.stdin.readline())\nthings = list(map(int, sys.stdin.readline().split()))\n\n#maxnum = max(things)\nlastnum = 1\ncount = [0] * (n + 1)\nfor num in things:\n    if num <= n:\n        count[num] = 1\n\nfor num in things:\n    if num > n or count[num] > 1:\n        while count[lastnum]:\n            lastnum += 1\n        count[lastnum] = 1\n        sys.stdout.write(str(lastnum) + ' ')\n    else:\n        count[num] = 2\n        sys.stdout.write(str(num) + ' ')", "from collections import Counter\n\nn = int(input())\nA = list(map(int, input().split()))\n\ndef change():\n    set_list = set(A)\n    for i in range(1, n + 1):\n        if i not in set_list:\n            yield i\n            \nC = Counter(A)        \nch = change()\nfor i in range(n):\n    if C[A[i]] > 1:\n        C[A[i]] -= 1\n        A[i] = next(ch)\n    elif A[i] > n:\n        A[i] = next(ch)\n\nfor i in A:\n    print(i, end = ' ')", "n = int(input())\nlst = list(map(int, input().split()))\nmn = set()\nans = set()\nsp = []\nfor i in range(1, n + 1):\n    mn.add(i)\nfor i in lst:\n    if i in mn:\n        mn.remove(i)\nfor i in lst:\n    if i in ans or i > n:\n        a = mn.pop()\n        ans.add(a)\n        sp.append(a)\n    if i not in ans and i <= n:\n        ans.add(i)\n        sp.append(i)\n    \nprint(*sp)    \n", "n = int(input())\n\na = [int(i) for i in input().split(' ')]\n\nm = {}\n\nfor i in range(1, 100001):\n    m[i] = []\n\nzeroIndexes = []\n\nfor i in range(n):\n    m[a[i]].append(i)\n\nfor i in range(1, n+1):\n    if len(m[i])==0:\n        zeroIndexes.append(i)\n\nfor i in range(1, 100001):\n    if len(m[i])==0: continue\n    mx = 1 if i<=n else 0\n    while len(m[i])>mx:\n        a[m[i][-1]] = zeroIndexes[-1]\n        m[i].pop()\n        zeroIndexes.pop()\n\nprint(' '.join([str(s) for s in a]))", "def main():\n    read = lambda: map(int, input().split())\n    \n    n = int(input())\n    a = list(read())\n    used = [True] * (n + 1)\n    C = {i + 1 for i in range(n)}    \n    A = {i for i in a if i <= n}\n    B = A ^ C\n    for i in a:\n        if i > n or not used[i]:\n            print(B.pop(), end = ' ')\n        else:\n            print(i, end = ' ')\n            used[i] = False\nmain()", "n = int(input())\nnums = list(map(int, input().strip().split(' ')))\n\nsnums = sorted(enumerate(nums), key=lambda x: x[1])\n\nbonus = set()\nholes = set()\nskip = set()\ncount = 1\n\nfor i, v in snums:\n    if v < count or v > n:\n        bonus.add(i)\n    if v == count:\n        count += 1\n    elif v > count:\n        holes.update(j for j in range(min(n+1, count), min(n+1, v)))\n        count = v + 1\n\nwhile len(bonus) > 0 and len(holes) > 0:\n    idx = bonus.pop()\n    x = holes.pop()\n    nums[idx] = x\n    skip.add(idx)\n\nif len(holes) == 0:\n    last = snums[-1][1] + 1\n    for i in bonus:\n        nums[i] = last\n        last += 1\nelse:\n    assert(len(bonus) == 0)\n    for i, v in snums[::-1]:\n        if i in skip:\n            continue\n        if len(holes) == 0:\n            break\n        x = holes.pop()\n        nums[i] = x\n\nprint(' '.join([str(x) for x in nums]))\n", "num = int(input())\nlist1 = input().split(' ')\n\ninv = set()\n\nfor i in list1:\n    inv.add(int(i))\n    \nmissing = []\nnotE = []\n\nfor i in range(1,num+1):\n    if i not in inv:\n        missing.append(i)\n\nwritten = set()\n\nj = 0\n\nfor i in range(len(list1)):\n    if list1[i] in written or int(list1[i])>num:\n        list1[i] = str(missing[j])\n        written.add(list1[i])\n        j += 1\n    else:\n        written.add(list1[i])\n        \n        \nprint(*list1)\n", "n = int(input())\ninp = list(map(int,input().split(' ')))\nused = set(inp)\nseen = set()\ntoadd = set(i+1 for i in range(n) if i+1 not in used)\nres = []\nfor num in inp:\n    if num < 1 or num > n or num in seen:\n        num = toadd.pop()\n    else:\n        seen.add(num)\n    res.append(num)\nprint(*res)", "n = int(input())\nbox = list(map(int, input().split()))\nused = [False for i in range(n)]\naccepted = [False for i in range(n)]\nj = 0\nfor i in box:\n    if i <= n and not used[i - 1]:\n        accepted[j] = True\n        used[i - 1] = True\n    j += 1\nj = 0\nfor i in range(n):\n    if not accepted[i]:\n        while used[j] != False:\n            j += 1\n        j += 1\n        print(j, end=' ')\n    else:\n        print(box[i], end=' ')\n        ", "n = int(input())\ninp = list(map(int,input().split(' ')))\nused = set(inp)\nseen = set()\ntoadd = {i+1 for i in range(n)}.difference(used)\nres = []\nfor num in inp:\n    if num < 1 or num > n or num in seen:\n        num = toadd.pop()\n    else:\n        seen.add(num)\n    res.append(num)\nprint(*res)", "n = int(input())\na = list(map(int, input().split()))\nc = [0] * (100001)\nfor ai in a:\n    c[ai] += 1\nb = [x for x in range(1, n + 1) if c[x] == 0]\nj = 0\nfor i, ai in enumerate(a):\n    if c[ai] > 1 or ai > n:\n        a[i] = b[j]\n        j += 1\n        c[ai] -= 1\nprint(' '.join(map(str, a)))", "n = int(input())\ninp = list(map(int,input().split(' ')))\nused = set(x for x in inp if x > 0 and x <= n)\ntoadd = {i+1 for i in range(n)}.difference(used)\nres = []\nfor num in inp:\n    if num in used:\n        used.remove(num)\n    else:\n        num = toadd.pop()\n    res.append(num)\nprint(*res)"]