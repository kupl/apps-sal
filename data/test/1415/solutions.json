["a, b, x, y = map(int, input().split())\ns = input()\np = []\nfor i in range(a + 1):\n    p.append([0] * (b + 1))\nsum = 0\nfor i in range(len(s)):\n    if p[x][y] == 0:\n        p[x][y] = 1\n        print(1, end = ' ')\n        sum += 1\n    else:\n        print(0, end = ' ')\n    if s[i] == 'U' and x != 1:\n        x -= 1\n    if s[i] == 'D' and x != a:\n        x += 1\n    if s[i] == 'L' and y != 1:\n        y -= 1\n    if s[i] == 'R' and y != b:\n        y += 1\nprint(a * b - sum)\n\n        \n", "x, y, x0, y0 = map(int, input().split())\nmoves = input()\n\nseen = [[False] * y for i in range(x)]\ncurrX, currY = x0 - 1, y0 - 1\n\ntotal = 0\n\nfor i in range(len(moves)):\n    #print(currX, currY)\n    #print(\"Seen:\", seen[currX][currY])\n    #print()\n    if not seen[currX][currY]:\n        print(\"1\", end=\" \")\n        total += 1\n    else:\n        print(\"0\", end=\" \")\n    seen[currX][currY] = True\n    if moves[i] == \"L\":\n        currY = max(currY - 1, 0)\n    elif moves[i] == \"R\":\n        currY = min(currY + 1, y - 1)\n    elif moves[i] == \"U\":\n        currX = max(currX - 1, 0)\n    else:\n        currX = min(currX + 1, x - 1)\nprint(x * y - total)", "#!/usr/bin/env python3\n\nDELTAS = {\n    'U': (-1, 0),\n    'R': (0, 1),\n    'D': (1, 0),\n    'L': (0, -1),\n}\n\ntry:\n    while True:\n        h, w, y, x = map(int, input().split())\n        y -= 1\n        x -= 1\n        s = input()\n        total = h * w - 1\n        used = [[False] * w for i in range(h)]\n        used[y][x] = True\n        print(end=\"1 \")\n        last = len(s) - 1\n        for i, c in enumerate(s):\n            dy, dx = DELTAS[c]\n            ny = y + dy\n            nx = x + dx\n            if 0 <= ny < h and 0 <= nx < w:\n                if i != last:\n                    if used[ny][nx]:\n                        print(end=\"0 \")\n                    else:\n                        print(end=\"1 \")\n                        used[ny][nx] = True\n                        total -= 1\n                y = ny\n                x = nx\n            elif i != last:\n                print(end=\"0 \")\n        print(total)\n\nexcept EOFError:\n    pass\n", "x, y, x0, y0 = list(map(int, input().split()))\na = [[0] * (y + 1) for i in range(x + 1)]\ns = input()\ncount = x * y\nresult = [0] * (len(s))\nfor i in range(len(s)):\n    if a[x0][y0] == 0:\n        a[x0][y0] = 1\n        result[i] = 1\n        count -= 1\n    if s[i] == 'U' and x0 > 1:\n        x0 -=1\n    elif s[i] == 'D' and x0 < x:\n        x0 +=1\n    elif s[i] == 'L' and y0 > 1:\n        y0 -= 1\n    elif s[i] == 'R' and y0 < y:\n        y0 += 1\n        \nprint(\" \".join(map(str,result)), count)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n#   = input()\n#   = int(input())\n\n#() = (i for i in input().split())\n#   = [i for i in input().split()]\n\n(a, b, x, y) = (int(i) for i in input().split())\n\ns   = input()\nans = [0 for i in range(len(s) + 1) ]\n\nstart = time.time()\n\nacc = 0\nx  -= 1\ny  -= 1\n\nmap = [[ 0 for i in range(b)] for j in range(a)]\n\nfor i in range(len(s)):\n    if map[x][y] == 0:\n        ans[i] += 1\n        map[x][y] = 1\n    if s[i] == 'L' and y > 0:\n        y -= 1\n    elif s[i] == 'R' and y < b-1:\n        y += 1\n    elif s[i] == 'D' and x < a-1:\n        x += 1\n    elif s[i] == 'U' and x > 0:\n        x -= 1\n\n\nans[len(s)] = a*b - sum([sum(i) for i in map])\n\nfor i in ans:\n    print(i, end= ' ')\nprint()\nfinish = time.time()\n#print(finish - start)\n", "x, y, a, b = list(map(int, input().split()))\n\ns = input()\n\nm = [[0] * y for i in range(x)]\n\nans = '1 '\nk = 1\nm[a - 1][b - 1] = 1\n\nfor i in range(len(s)):\n    if s[i] == 'D':\n        a = min (a + 1, x)\n        m[a - 1][b - 1] += 1\n        if m[a - 1][b - 1] == 1:\n            k += 1\n            ans += '1 '\n        else:\n            ans += '0 '\n\n    elif s[i] == 'U':\n        a = max (a - 1, 1)\n        m[a - 1][b - 1] += 1\n        if m[a - 1][b - 1] == 1:\n            k += 1\n            ans += '1 '\n        else:\n            ans += '0 '\n\n    elif s[i] == 'R':\n        b = min (b + 1, y)\n        m[a - 1][b - 1] += 1\n        if m[a - 1][b - 1] == 1:\n            k += 1\n            ans += '1 '\n        else:\n            ans += '0 '\n\n    else:\n        b = max (b - 1, 1)\n        m[a - 1][b - 1] += 1\n        if m[a - 1][b - 1] == 1:\n            k += 1\n            ans += '1 '\n        else:\n            ans += '0 '\n\n\nans = ans[:-1]\nk -= int(ans[-1])\nans = ans[:-1]\nans += str(x * y - k)\n\nprint(ans)\n        \n    \n", "x, y, x0, y0 = map(int, input().split())\n\nS = input()\n\ns = []\nfor i in range(len(S)):\n    s.append(S[i])\n\nX = [[0 for i in range(y + 2)] for j in range(x + 2)]\n\nfor i in range(y + 2):\n    X[0][i] = -1\n    X[x + 1][i] = -1\n\nfor i in range(x + 2):\n    X[i][0] = -1\n    X[i][y + 1] = -1\n\n\nX[x0][y0] = 1\nresult = [1]\nnr_explore = 1\n\nfor move in s:\n    dx = 0\n    dy = 0\n    if move == 'U':\n        dx = -1\n        dy = 0\n    elif move == 'D':\n        dx = 1\n        dy = 0\n    elif move == 'R':\n        dx = 0\n        dy = 1\n    elif move == 'L':\n        dx = 0\n        dy = -1\n\n    if X[x0 + dx][y0 + dy] != -1:\n        x0 += dx\n        y0 += dy\n        if X[x0][y0] == 0:\n            nr_explore += 1\n            X[x0][y0] = 1\n            result.append(1)\n        else:\n            result.append(0)\n    else:\n        result.append(0)\n\nresult[-1] += x * y - nr_explore\nfor r in result:\n    print(r, end=\" \")\n", "A, B, C, D = input().split()\na = int(A)\nb = int(B)\nc = int(C)\nd = int(D)\nlista = [[0 for i in range(555)] for j in range(555)]\nc -= 1\nd -= 1\nlista[c][d] = 1\ns = input()\nk = len(s)\nl = 1\nprint(\"1 \", end = \"\")\nfor i in range(k):\n\tif i + 1 == k:\n\t\tprint(a * b - l)\n\t\tbreak\n\tif s[i] == 'U':\n\t\tif c:\n\t\t\tc -= 1\n\telif s[i] == 'D':\n\t\tif c < a-1:\n\t\t\tc += 1\n\telif s[i] == 'R':\n\t\tif d < b - 1:\n\t\t\td += 1\n\telse:\n\t\tif d:\n\t\t\td -= 1\n\tif lista[c][d] == 0:\n\t\tprint(\"1 \", end = \"\")\n\t\tl += 1\n\telse:\n\t\tprint(\"0 \", end = \"\")\n\tlista[c][d] = 1\n\t\n", "x, y, x0, y0 = [int(x) for x in input().split()]\nx0 -= 1\ny0 -= 1\ncommands = input()\nxy = x * y\nl = len(commands)\na = [0] * (l + 1)\nn = 0\nfield = [[-1]*y for i in range(x)]\nfield[x0][y0] = 0\nfor i in range(l):\n\tcommand = commands[i];\n\tif command == 'U':\n\t\tif x0 > 0:\n\t\t\tx0 -= 1\n\telif command == 'D':\n\t\tif x0 + 1 < x:\n\t\t\tx0 += 1\n\telif command == 'L':\n\t\tif y0 > 0:\n\t\t\ty0 -= 1\n\telif command == 'R':\n\t\tif y0 + 1 < y:\n\t\t\ty0 += 1\n\tif field[x0][y0] < 0:\n\t\tfield[x0][y0] = i + 1\nfor i in range(x):\n\tfor j in range(y):\n\t\ta[field[i][j]] += 1\nprint(' '.join(str(x) for x in a))\n\n", "__author__ = 'MoonBall'\n\nimport sys\n# sys.stdin = open('data/B.in', 'r')\nT = 1\n\ndef process():\n    x, y, x0, y0 = list(map(int, input().split()))\n    s = input()\n    d = {}\n    L = len(s)\n\n    cnt = [0] * (L + 1)\n    d[x0] = {}\n    d[x0][y0] = 0\n\n    for idx, _s in enumerate(s):\n        if _s == 'L':\n            y0 = max(1, y0 - 1)\n        elif _s == 'R':\n            y0 = min(y, y0 + 1)\n        elif _s == 'U':\n            x0 = max(1, x0 - 1)\n        elif _s == 'D':\n            x0 = min(x, x0 + 1)\n\n        if not d.get(x0):\n            d[x0] = {}\n        t = d[x0]\n        if t.get(y0) == None:\n            t[y0] = idx + 1\n\n    for i, _ in list(d.items()):\n        for j, v in list(_.items()):\n            cnt[v] = cnt[v] + 1\n\n    cnt[L] = cnt[L] + x * y - sum(cnt)\n    print(' '.join(map(str, cnt[0:L+1])))\n\n\n\n\n\n\n\nfor _ in range(T):\n    process()\n", "x, y, x0, y0 = tuple(map(int, input().split()))\ns = input()\nl = len(s)\nres = [0] * (l + 1)\nlocation = [x0, y0]\nmovement = {tuple(location)}\nfor i in range(1, l + 1):\n    let = s[i - 1]\n    #print(location)\n    if let == 'L':\n        if location[1] - 1 > 0: \n            location[1] -= 1\n    if let == 'R':\n        if location[1] + 1 <= y:\n            location[1] += 1\n    if let == 'U':\n        if location[0] - 1 > 0:\n            location[0] -= 1        \n    if let == 'D':\n        if location[0] + 1 <= x:\n            location[0] += 1\n    if tuple(location) in movement: res[i] = 0\n    else: res[i] = 1\n    movement.add(tuple(location))\nres[0] = 1\n\n\nres[l] += x * y - sum(res)\n    \n    \n        \nprint(' '.join(list(map(str, res))))\n        \n", "# fin = open(\"cfr335a.in\", \"r\")\n\n# x, y, xc, yc = map(int, fin.readline().strip().split())\nx, y, xc, yc = map(int, input().strip().split())\nyc -= 1; xc -= 1\n# program = fin.readline().strip()\nprogram = input().strip()\ncommands = {'U': (-1, 0), 'D': (1, 0), 'R': (0, 1), 'L': (0, -1)}\n\nused = [[False] * y for i in range(x)]\nused[xc][yc] = True\n\nresult = []\n\nprint(1, end=' ')\n# print(xc + 1, yc + 1)\ncnt = 1\nfor i in range(len(program)):\n    cmd = program[i]\n    xc += commands[cmd][0] if -1 < xc + commands[cmd][0] < x else 0\n    yc += commands[cmd][1] if -1 < yc + commands[cmd][1] < y else 0\n    if not used[xc][yc] and i != len(program) - 1:\n        print(1, end=' ')\n        result.append(1)\n        cnt += 1\n        # used[xc][yc] = True\n    elif i != len(program) - 1:\n        print(0, end=' ')\n        result.append(0)\n    else:\n        # print(x*y - cnt - (1 if used[xc][yc] else 0), end=' ')\n        print(x*y - cnt, end=' ')\n    used[xc][yc] = True\n    # print(xc + 1, yc + 1)\n# print()\n# print(1, end=' ')\n# for res in result:\n#     print(res, end=' ')\n# # print(x*y - cnt - (1 if used[xc][yc] else 0))\n# print(x*y - cnt)", "x, y, x0, y0 = list(map(int, input().split()))\ns = input()\ns = s[:len(s) - 1]\nvisited = [[False for i in range(y + 1)] for j in range(x + 1)]\nvisited[x0][y0] = True\nans = '1 '\ncnt = 1\nfor i in s:\n    if i == 'U':\n        if x0 != 1:\n            x0 -= 1\n            if not visited[x0][y0]:\n                ans += '1 '\n                cnt += 1\n                visited[x0][y0] = True\n            else:\n                ans += '0 '\n        else:\n            ans += '0 '\n    elif i == 'D':\n        if x0 != x:\n            x0 += 1\n            if not visited[x0][y0]:\n                ans += '1 '\n                cnt += 1\n                visited[x0][y0] = True\n            else:\n                ans += '0 '\n        else:\n            ans += '0 '\n    elif i == 'L':\n        if y0 != 1:\n            y0 -= 1\n            if not visited[x0][y0]:\n                ans += '1 '\n                cnt += 1\n                visited[x0][y0] = True\n            else:\n                ans += '0 '\n        else:\n            ans += '0 '\n    else:\n        if y0 != y:\n            y0 += 1\n            if not visited[x0][y0]:\n                ans += '1 '\n                cnt += 1\n                visited[x0][y0] = True\n            else:\n                ans += '0 '\n        else:\n            ans += '0 '\nz = str(x * y - cnt)\nprint(ans + z)\n", "__author__ = 'Utena'\nx,y,x0,y0=list(map(int,input().split()))\nx1=x0\ny1=y0\ns=list(input())\nk=0\nl=[]\nl1=[[x0,y0]]\nl2=[[0]*(y+1)for i in range(x+1)]\nfor i in s:\n    if i==\"R\" and y0<y:\n        y0+=1\n        l1.append([x0,y0])\n    elif i==\"L\" and y0>1:\n        y0-=1\n        l1.append([x0,y0])\n    elif i==\"U\" and x0>1:\n        x0-=1\n        l1.append([x0,y0])\n    elif i==\"D\" and x0<x:\n        x0+=1\n        l1.append([x0,y0])\n    else:\n        l1.append([x0,y0])\nfor j in range(len(s)):\n    x1=l1[j][0]\n    y1=l1[j][1]\n    l2[x1][y1]+=1\n    if l2[x1][y1]>1:l.append('0')\n    else:\n        l.append(\"1\")\n        k+=1\nprint(\" \".join(l)+\" %d\"%(x*y-k))\n", "x, y, x0, y0 = [int(x) for x in input().split()]\ns = input()\nwas_in = [[False for y1 in range(y+1)] for x1 in range(x + 1)]\nlength = 1\nmoves = {'D' : (1, 0), 'U' : (-1, 0), 'R' : (0, 1), 'L' : (0, -1)}\nstate = (x0, y0)\ncount = [1]\nwas_in[x0][y0] = True\nfor c in s:\n    new_state = (state[0] + moves[c][0], state[1] + moves[c][1])\n    new_state = new_state if 0 < new_state[0] <= x and 0 < new_state[1] <= y else state\n    state = new_state\n    if was_in[state[0]][state[1]]:\n        count.append(0)\n    else:\n        count.append(1)\n        was_in[state[0]][state[1]] = True\n        length += 1\ncount[-1] += x * y - length\nfor i in count:\n    print(i, end = ' ')\n", "x, y, x0, y0 = list(map(int, input().split(' ')))\ng = [[0]* (y+1) for i in range(x + 1)]\ns = input()\nresult = [0] * len(s)\ncount = x*y\nfor i in range(len(s)):\n\tif g[x0][y0] == 0:\n\t\tg[x0][y0] = 1\n\t\tresult[i] = 1\n\t\tcount -= 1\n\tif s[i] == 'U' and x0 > 1:\n\t\tx0 -=1\n\tif s[i] == 'D' and x0 < x:\n\t\tx0 += 1\n\tif s[i] == 'L' and y0 > 1:\n\t\ty0 -= 1\n\tif s[i] == 'R' and y0 < y:\n\t\ty0 += 1\nprint(' '.join(map(str, result)), count)\n", "q,b,c,d = map(int,input().split())\ns = input()\nx,y =c,d\nl = 1\nprint(1,end = ' ')\na = set()\na.add((c,d))\nfor i in range(len(s)-1):\n    item = s[i]\n    if (item == 'U'):\n        if(x == 1 or (x-1,y) in a):\n            print(0,end = ' ')\n            if(x-1,y) in a:\n                x-=1\n        else:\n            print(1,end = ' ')\n            x-=1\n            l+=1\n    elif item == 'R':\n        if(y == b or (x,y+1) in a):\n            print(0,end =' ')\n            if(x,y+1) in a:\n                y+=1\n        else:\n            print(1,end = ' ')\n            y+=1\n            l+=1\n    elif item == 'L':\n        if(y == 1 or (x,y-1) in a):\n            print(0,end = ' ')\n            if(x,y-1) in a:\n                y-=1\n        else:\n            print(1,end = ' ')\n            y-=1\n            l+=1\n    else:\n        if(x == q or (x+1,y) in a):\n            print(0,end = ' ')\n            if(x+1,y) in a:\n                x+=1\n        else:\n            print(1,end = ' ')\n            x+=1\n            l+=1\n    a.add((x,y))\nprint(q*b-l)", "x, y, sx, sy = map(int, input().split())\nsx, sy = sx - 1, sy - 1\n\ndirection = {'U' : (-1, 0), 'D' : (1, 0), 'L' : (0, -1), 'R' : (0, 1)}\n\nvisited = [[False] * y for i in range(x)]\nprev = sx, sy\n\ns = input()\nsm = x * y - 1\n\nprint (1, end = ' ')\nvisited[prev[0]][prev[1]] = True\n\nfor c in s[:-1]:\n    d = direction[c]\n    cur = tuple(map(sum, zip(prev, d)))\n    if not 0 <= cur[0] < x or not 0 <= cur[1] < y:\n        cur = prev\n    p = 1 - visited[cur[0]][cur[1]]\n    print (p, end = ' ')\n    sm -= p\n    visited[cur[0]][cur[1]] = True\n    prev = cur\n\nprint (sm)\n\n\n", "n, m, x, y = [int(x) for x in input().split(\" \")]\ncommands = input()\n\n#n, m, x, y = [3, 4, 2, 2]\n#commands = \"UURDRDRL\"\n\nx, y = x - 1, y - 1\n\nmove = dict([\n    (\"U\", (-1, 0)),\n    (\"D\", (1, 0)),\n    (\"L\", (0, -1)),\n    (\"R\", (0, 1))\n])\n\nplace = set()\nplace.add((x, y))\nprint(\"1\", end=\" \")\n\nfor command in commands[:-1]:\n    oldX, oldY = x, y\n    x, y = x + move[command][0], y + move[command][1]\n    # print(\"x,y: \", x, y)\n    if (x < 0 or y < 0) or (x >= n or y >= m):\n        print(\"0\", end=\" \")\n        x, y = oldX, oldY\n        continue\n    else:\n        if (x, y) in place:\n            print(0, end=\" \")\n        else:\n            print(\"1\", end=\" \")\n    place.add((x, y))\n\nx, y = x + move[commands[-1]][0], y + move[commands[-1]][1]\n\n#print()\n#print(place)\n#print()\nif (x < 0 or y < 0) or (x >= n or y >= m):\n    print(\"0\")\nelse:\n    print(n * m - len(place))\n", "#!/usr/bin/env python3\n# 606B_robots.py - Codeforces.com/problemset/problem/606/B by Sergey 2015\n\nimport unittest\nimport sys\n\n###############################################################################\n# Robots Class (Main Program)\n###############################################################################\n\n\nclass Robots:\n    \"\"\" Robots representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(it) if it else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        [self.x, self.y, self.x0, self.y0] = list(map(int, uinput().split()))\n\n        # Reading a single line of multiple elements\n        self.nums = list(uinput())\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        xy = self.x * self.y\n        loc = (self.x0, self.y0)\n        locs = set([loc])\n        result = [1]\n        for (i, d) in enumerate(self.nums):\n            nx, ny = loc\n            if d == \"U\":\n                nx = max(1, loc[0] - 1)\n            if d == \"D\":\n                nx = min(self.x, loc[0] + 1)\n            if d == \"L\":\n                ny = max(1, loc[1] - 1)\n            if d == \"R\":\n                ny = min(self.y, loc[1] + 1)\n            loc = (nx, ny)\n            if len(locs) == xy:\n                result.append(0)\n            elif i == len(self.nums) - 1:\n                result.append(xy - len(locs))\n            elif loc in locs:\n                result.append(0)\n            else:\n                result.append(1)\n            locs.add(loc)\n\n        return \" \".join(map(str, result))\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Robots class testing \"\"\"\n\n        # Constructor test\n        test = \"3 4 2 2\\nUURDRDRL\"\n        d = Robots(test)\n        self.assertEqual(d.x, 3)\n        self.assertEqual(d.y, 4)\n        self.assertEqual(d.x0, 2)\n        self.assertEqual(d.y0, 2)\n        self.assertEqual(d.nums[:2], [\"U\", \"U\"])\n\n        # Sample test\n        self.assertEqual(Robots(test).calculate(), \"1 1 0 1 1 1 1 0 6\")\n\n        # Sample test\n        test = \"2 2 2 2\\nULD\"\n        self.assertEqual(Robots(test).calculate(), \"1 1 1 1\")\n\n        # Sample test\n        test = \"\"\n        # self.assertEqual(Robots(test).calculate(), \"0\")\n\n        # My tests\n        test = \"\"\n        # self.assertEqual(Robots(test).calculate(), \"0\")\n\n        # Time limit test\n        # self.time_limit_test(5000)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        numnums = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        test += \"\\n\".join(numnums) + \"\\n\"\n        nums = [random.randint(1, 10000) for i in range(nmax)]\n        test += \" \".join(map(str, nums)) + \"\\n\"\n\n        # Run the test\n        start = timeit.default_timer()\n        d = Robots(test)\n        calc = timeit.default_timer()\n        d.calculate()\n        stop = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(stop-start, calc-start, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Robots().calculate())\n\n__starting_point()", "\"\"\"\nCodeforces Round #335 (Div. 2)\nProblem 606 B. Testing Robots\n\n@author yamaton\n@date 2015-12-11\n\"\"\"\n\nimport itertools as it\nimport functools\nimport operator\nimport collections\nimport math\nimport sys\n\n\ndef solve(x, y, x0, y0, s):\n    dir = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n    seen = set()\n    pos = (x0, y0)\n    result = []\n\n    for c in s:\n        if pos in seen:\n            result.append(0)\n        else:\n            result.append(1)\n            seen.add(tuple(pos))\n        dx, dy = dir[c]\n        (nx, ny) = (pos[0] + dx, pos[1] + dy)\n        pos0 = nx if 1 <= nx <= x else pos[0]\n        pos1 = ny if 1 <= ny <= y else pos[1]\n        pos = (pos0, pos1)\n        # pp(pos)\n\n    result.append(x * y - len(seen))\n    return result\n\n\ndef pp(*args, **kwargs):\n    return print(*args, file=sys.stderr, **kwargs)\n\n\ndef main():\n    x, y, x0, y0 = map(int, input().split())\n    s =  input().strip()\n    result = solve(x, y, x0, y0, s)\n    print(*result)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "rows, cols, r, c = map(int, input().split())\ns = input()\nr -= 1\nc -= 1\n\nfield = [[0] * cols for i in range(rows)]\nres = [0] * len(s)\n\nfield[r][c] = 1\ncnt = 1\n\nfor i in range (len(s)):\n    if s[i] == 'U':\n        if r > 0 : r -= 1\n    elif s[i] == 'R':\n        if c < cols - 1: c += 1\n    elif s[i] == 'D':\n        if r < rows - 1: r += 1\n    elif s[i] == 'L':\n        if c > 0: c -= 1\n    \n    if field[r][c] == 0:\n        res[i] = 1\n        cnt += 1\n        field[r][c] = 1    \n\nres[len(s) - 1] += rows * cols - cnt\n\nprint (1, ' '.join(map(str, res)))", "rs, cs, r, c = map(int, input().split())\ns = input()\nr -= 1\nc -= 1\n\nf = [[0] * cs for i in range(rs)]\nres = [0] * len(s)\ncnt = 0\n\nfor i in range (len(s)):\n    if f[r][c] == 0:\n        res[i] = 1\n        cnt += 1\n        f[r][c] = 1    \n\n    if s[i] == 'U' and r > 0:\n        r -= 1\n    elif s[i] == 'R' and c < cs - 1:\n        c += 1\n    elif s[i] == 'D' and r < rs - 1:\n        r += 1\n    elif s[i] == 'L' and c > 0:\n        c -= 1\n    \nprint (' '.join(map(str, res)), rs * cs - cnt)", "x, y, x0, y0 = map(int, input().split())\ns = input()\nz = set()\nk = (len(s)+1)*[0]\nk[0] = 1\nu = 0\nz.add((x0, y0))\nfor i in s:\n    u += 1\n    if i == 'U' and x0 > 1:\n        x0 -= 1\n    elif i == 'D' and x0 < x:\n        x0 += 1\n    elif i == 'L' and y0 > 1:\n        y0 -= 1\n    elif i == 'R' and y0 < y:\n        y0 += 1\n    \n    if not (x0, y0) in z:\n        k[u]+=1\n        z.add((x0, y0))\n    \nk[len(s)] += (x*y)-sum(k)\nfor i in k:\n    print(i, end=' ')\n", "x,y,x0,y0=list(map(int,input().split()))\ns1=input()\nr=x*y\nres=\"1 \"\nk=1\na = [[0] * y for i in range(x)]\na[x0-1][y0-1]=1\nfor i in range(len(s1)-1):\n    if s1[i]==\"U\":\n        if x0-1>=1 and k<r:\n            x0=x0-1\n            if a[x0-1][y0-1]==0:\n                res=res+\"1 \"\n                k=k+1\n                a[x0-1][y0-1]=1\n            else:\n                res=res+\"0 \"\n        else:\n            res=res+\"0 \"\n    if s1[i]==\"D\":\n        if x0+1<=x and k<r:\n            x0=x0+1\n            if a[x0-1][y0-1]==0:\n                res=res+\"1 \"\n                k=k+1\n                a[x0-1][y0-1]=1\n            else:\n                res=res+\"0 \"\n        else:\n            res=res+\"0 \"\n    if s1[i]==\"L\":\n        if y0-1>=1 and k<r:\n            y0=y0-1\n            if a[x0-1][y0-1]==0:\n                res=res+\"1 \"\n                k=k+1\n                a[x0-1][y0-1]=1\n            else:\n                res=res+\"0 \"\n        else:\n            res=res+\"0 \"\n    if s1[i]==\"R\":\n        if y0+1<=y and k<r:\n            y0=y0+1\n            if a[x0-1][y0-1]==0:\n                res=res+\"1 \"\n                k=k+1\n                a[x0-1][y0-1]=1\n            else:\n                res=res+\"0 \"\n        else:\n            res=res+\"0 \"\nprint(res+str(r-k))\n"]