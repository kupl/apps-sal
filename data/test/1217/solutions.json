["#!/usr/bin/env python3\n\nfrom bisect import bisect\n\ntry:\n    while True:\n        n, m = map(int, input().split())\n        a = list(map(int, input().split()))\n        a.sort()\n        for x in map(int, input().split()):\n            print(bisect(a, x), end=' ')\n        print()\n\nexcept EOFError:\n    pass\n", "def bin_search(k):\n    l = -1\n    r = n-1\n    while (r - l > 1):\n        h = (l+r) // 2\n        if (lst1[h] > k):\n            r = h\n        else:\n            l = h\n    if lst1[r] <= k:\n        return r+1\n    else:\n        return r\n        \nn, m  = [int(x) for x in input().split()]\nlst1 = [int(x) for x in input().split()]\nlst2 = [int(x) for x in input().split()]\nlst1.sort()\nfor i in range(m):\n    print(bin_search(lst2[i]), end = ' ')\n", "a, b = map(int, input().split(' '))\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\na.sort()\nbp = [[b[i], i, 0] for i in range(len(b))]\nbp.sort()\na.append(10**15)\nptr = 0\ncum = 0\nind = 0;\nwhile ptr < len(a) and ind < len(bp):\n    while (bp[ind][0] >= a[ptr]):\n        ptr+=1\n    bp[ind][2] = ptr\n    ind += 1\nbp.sort(key = lambda x:x[1])\nfor i in bp:\n    print(i[2], end = ' ')\n", "n, m = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nresb = dict()\nsa = sorted(a)\nsb = sorted(b)\ni = 0\nj = 0\nwhile j < len(sb):\n\twhile i < len(sa) and sa[i] <= sb[j]:\n\t\ti += 1\n\tresb[sb[j]] = i\n\tj += 1\nfor i in b:\n\tprint(resb[i], end=' ')\n", "import bisect\n\nn, m = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\na.sort()\nfor i in range(m):\n    print(bisect.bisect_right(a, b[i]), end=\" \")", "\nimport sys\n#sys.stdin=open(\"data.txt\")\ninput=sys.stdin.readline\n\nn,m=map(int,input().split())\n\na=sorted(map(int,input().split()))\n\nfor q in map(int,input().split()):\n    if q>=a[-1]:\n        print(n,end=\" \")\n    else:\n        low=0\n        high=n\n        while high-low:\n            t=(low+high)//2\n            if q>=a[t]:\n                low=t+1\n            else:\n                high=t\n        print(low,end=\" \")\n", "__author__ = 'sandeepmellacheruvu'\nfrom bisect import bisect_right\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na.sort()\nc = []\nfor (i, ele) in enumerate(b):\n    p = bisect_right(a, ele)\n    c.append(p)\nfor (i, ele) in enumerate(c):\n    print(ele, end = \" \")\nprint()", "n, m = list(map(int, input().split(' ')))\na = list(sorted(map(int, input().split(' '))))\nb = list(map(int, input().split(' ')))\nc = sorted(set(b))\n\nl = {}\nj = 0\nfor i in c:\n    while j < n and a[j] <= i:\n        j += 1\n    l[i] = j\n\ns = []\nfor i in b:\n    s.append(l[i])\nprint(' '.join(map(str, s)))\n\n", "from math import ceil, modf\nfrom bisect import bisect\nn, m = [int(s) for s in input().split()]\na = [int(s) for s in input().split()]\na.sort()\nfor i in input().split():\n    print(bisect(a, int(i)), end = \" \")\n", "n, m = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [[int(i), 0] for i in input().split()]\nfor i in range(m):\n    b[i][1] = i\na.sort()\nb.sort(key = lambda x: x[0])\nress = [0] * m\ni = j = 0\nres = 0\nwhile i < len(a) and j < len(b):\n    if a[i] <= b[j][0]:\n        res += 1\n        i += 1\n    else:\n        ress[b[j][1]] = res\n        j += 1\nwhile j < len(b):\n    ress[b[j][1]] = res\n    j += 1\nfor i in ress:\n    print(i, end = \" \")\n    \n", "n, m = map(int, input().split())\na = sorted(list(map(int, input().split())))\norigB = list(map(int, input().split()))\nb = sorted(origB)\ncounts = {}\nc = 0\ni = 0\nj = 0\nwhile i < n and j < m:\n    if a[i] <= b[j]:\n        c = c + 1\n        i = i + 1\n    else:\n        counts[b[j]] = c\n        j = j + 1\n        \nwhile j < m:\n    counts[b[j]] = c\n    j = j + 1\n    \nfor j in origB:\n    print(counts[j], end=' ')\n", "import bisect\nn, m = [int(x) for x in input().split(\" \")]\na = [int(x) for x in input().split(\" \")]\nb = [int(x) for  x in input().split(\" \")]\n\na = sorted(a)\nmax = a[n-1]\nmin = a[0]\nres = []\n\n\nfor i in range(0,m):\n\tif b[i] >= max:\n\t\tb[i] = n\n\telse:\n\t\tb[i] = bisect.bisect_right(a, b[i])\n\nprint(\" \".join([str(x) for x in b])) \n\n\n", "import bisect\n\ndef __starting_point():\n\n    n , m = [int(x) for x in input().strip().split()]\n    a = sorted([int(x) for x in input().strip().split()])\n    b = [int(x) for x in input().strip().split()]\n\n    res = []\n    for bi in b:\n        pos = bisect.bisect_left( a , bi)\n        if pos < n and a[pos] == bi:\n            res.append( bisect.bisect_right( a , bi ) )\n        else:\n            res.append( pos )\n\n    print( \" \".join([str(x) for x in res]) )\n\n__starting_point()", "n, mm = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na.sort()\nfor i in range(mm):\n    b[i] = [b[i], i]\nb.sort()\nans = ['0' for i in range(mm)]\nlast = -1\nfor i in b:\n    l = last\n    r = n\n    while r - l > 1:\n        m = (r + l) // 2\n        if a[m] <= i[0]:\n            l = m\n        else:\n            r = m\n    last = l\n    ans[i[1]] = str(l + 1)\nprint(' '.join(ans))\n", "#!/usr/bin/env python3\n# 600B_query.py - Codeforces.com/problemset/problem/600/B by Sergey 2015\n\nimport unittest\nimport sys\n\n###############################################################################\n# Query Class (Main Program)\n###############################################################################\n\n\ndef rbound(v, n):\n    b = 0\n    e = len(v)\n    while b != e:\n        mid = (b + e + 1) // 2\n        if v[mid - 1] <= n:\n            b = mid\n        else:\n            e = mid - 1\n    return b\n\n\nclass Query:\n    \"\"\" Query representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(it) if it else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        [self.n, self.m] = list(map(int, uinput().split()))\n\n        # Reading a single line of multiple elements\n        self.numa = list(map(int, uinput().split()))\n        self.numb = list(map(int, uinput().split()))\n\n        self.snuma = sorted(self.numa)\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        result = []\n        for n in self.numb:\n            result.append(rbound(self.snuma, n))\n\n        return str(\" \".join(map(str, result)))\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Query class testing \"\"\"\n\n        # Constructor test\n        test = \"5 4\\n1 3 5 7 9\\n6 4 2 8\"\n        d = Query(test)\n        self.assertEqual(d.n, 5)\n        self.assertEqual(d.m, 4)\n\n        # Sample test\n        self.assertEqual(Query(test).calculate(), \"3 2 1 4\")\n\n        # Sample test\n        test = \"5 5\\n1 2 1 2 5\\n3 1 4 1 5\"\n        self.assertEqual(Query(test).calculate(), \"4 2 4 2 5\")\n\n        # Sample test\n        test = \"\"\n        # self.assertEqual(Query(test).calculate(), \"0\")\n\n        # My tests\n        test = \"\"\n        # self.assertEqual(Query(test).calculate(), \"0\")\n\n        # Time limit test\n        # self.time_limit_test(5000)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        numnums = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        test += \"\\n\".join(numnums) + \"\\n\"\n        nums = [random.randint(1, 10000) for i in range(nmax)]\n        test += \" \".join(map(str, nums)) + \"\\n\"\n\n        # Run the test\n        start = timeit.default_timer()\n        d = Query(test)\n        calc = timeit.default_timer()\n        d.calculate()\n        stop = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(stop-start, calc-start, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Query().calculate())\n\n__starting_point()", "import bisect\nn,m=map(int,input().split(' '))\na=list(map(int,input().split(' ')))\nb=list(map(int,input().split(' ')))\na.sort()\nans=[]\nfor i in b:\n    ans.append(bisect.bisect(a,i))\nprint(str(ans).replace('[', '').replace(']', '').replace(',', ''))", "import bisect\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na = sorted(a)\nc = [bisect.bisect_right(a, i) for i in b]\nprint(' '.join(map(str, c)))\n", "def main():\n    input()\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], \"a\") for i in range(len(a))]\n    c.extend([(b[i], \"b\") for i in range(len(b))])\n    c.sort(key=lambda x: x[0])\n    more_then = {}\n    count = 0\n    for i in range(len(c)):\n        if c[i][1] == 'b':\n            more_then[c[i][0]] = i - count\n            count += 1\n    ans = []\n    for i in range(len(b)):\n        ans.append(more_then[b[i]])\n    print(\" \".join(map(str, ans)))\n\ndef __starting_point():\n    main()\n__starting_point()", "from bisect import bisect_right\nimport sys\n\nclass Scanner:\n\n    def __init__(self):\n        self.current_tokens = []\n\n    def remaining_tokens(self):\n        return len(self.current_tokens)\n\n    def nextline(self):\n        assert self.remaining_tokens() == 0, \"Reading next line with remaining tokens\"\n        return input()\n\n    def nexttokens(self):\n        return self.nextline().split()\n    \n    def nexttoken(self):\n        if len(self.current_tokens) == 0:\n            self.current_tokens = self.nexttokens()\n        assert self.remaining_tokens() > 0, \"Not enough tokens to parse.\"\n        return self.current_tokens.pop(0)\n\n    def nextints(self, n=-1):\n        if n == -1:\n            return list(map(int, self.nexttokens()))\n        else:\n            return [self.nextint() for i in range(n)]\n    \n    def nextint(self):\n        return int(self.nexttoken())\n\ndef quit():\n    return\n\nstdin = Scanner()\nnextint = stdin.nextint\nnextints = stdin.nextints\nnextline = stdin.nextline\n\nm, n = nextints()\n\na = nextints()\nb = nextints()\n\nres = []\n\na = sorted(a)\n\nfor i in b:\n    res.append(str(bisect_right(a, i)))\n\nprint(\" \".join(res))\n", "import bisect\nn, m = list(map(int,input().split()))\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\na.sort()\nres = []\nfor i in range(m):\n    res.append(bisect.bisect_right(a, b[i]))\nprint(' '.join(map(str,res)))\n", "import bisect\nn, m = map(int,input().split())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\na.sort()\nres = []\nfor i in range(m):\n    res.append(bisect.bisect_right(a, b[i]))\nprint(' '.join(map(str,res)))", "\"\"\"\nCodeforces Educational Round 2\n\nProblem 600 B.\n\n@author yamaton\n@date 2015-11-30\n\"\"\"\n\nimport bisect\n\n\ndef solve(xs, ys, n, m):\n    xs.sort()\n    return [bisect.bisect_right(xs, y) for y in ys]\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    xs = [int(c) for c in input().split()]\n    ys = [int(c) for c in input().split()]\n    assert len(xs) == n\n    assert len(ys) == m\n    result = solve(xs, ys, n, m)\n    print(*result)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import bisect\n\nn, m = map(int, input().split())\na = list(sorted(list(map(int, input().split()))))\nb = list(map(int, input().split()))\n\nr = []\nfor bb in b:\n\ti = bisect.bisect_right(a, bb)\n\tr.append(str(i))\n\nprint(' '.join(r))"]