["def cin():\n    return list(map(int, input().split()))\n\ndef dfs(n):\n    if not C[n]:\n        C[n]=True\n        s[0]+=1\n    for i in B[n]:\n        if not C[i]:dfs(i)\n\nn,m,k=cin()\nA=cin()\nA=[i-1 for i in A]\nB=[list([]) for i in range(n)]\nC=[False for i in range(n)]\nans=mx=0\nfor i in range(m):\n    a,b=[i-1 for i in cin()]\n    B[a].append(b)\n    B[b].append(a)\n\nfor i in range(k):\n    s=[0]\n    dfs(A[i])\n    ans+=s[0]*(s[0]-1)//2\n    mx=max(mx,s[0])\n\nans-=mx*(mx-1)//2\nfor i in range(n):\n    if not C[i]:\n        s=[0]\n        dfs(i)\n        mx+=s[0]\n\nprint(ans-m+mx*(mx-1)//2)\n", "class DisjointSet:\n    def __init__(self, n):\n        self._n = n\n        self._size = [1 for _ in range(n)]\n        self._depth = [0 for _ in range(n)]\n        self._root = [u for u in range(n)]\n    \n    def root(self, u):\n        if self._root[u] != u:\n            self._root[u] = self.root(self._root[u])\n        return self._root[u]\n\n    def join(self, u, v):\n        rootU = self.root(u)\n        rootV = self.root(v)\n        if rootU == rootV:\n            return\n        if self._depth[rootU] < self._depth[rootV]:\n            self._root[rootU] = rootV\n            self._size[rootV] += self._size[rootU]\n        else:\n            self._root[rootU] = rootV\n            self._size[rootV] += self._size[rootU]\n\n    def size(self, u):\n        return self._size[u]\n\n    def roots(self):\n        return [u for u in range(self._n) if self._root[u] == u]\n\nReadMany = lambda: list(map(int, input().split()))\nSubtractOne = lambda c: [x - 1 for x in c]\nC2 = lambda n: n * (n - 1) // 2\n\nn, m, k = ReadMany()\nc = list(SubtractOne(ReadMany()))\n\ndegree = [0 for _ in range(n)]\nds = DisjointSet(n)\n\nfor i in range(m):\n    u, v = SubtractOne(ReadMany())\n    ds.join(u, v)\n    degree[u] += 1\n    degree[v] += 1\n\n\n\nccDegree = [0 for _ in range(n)]\nfor u in range(n):\n    ccDegree[ds.root(u)] += degree[u]\n\ncRoots = list(map(ds.root, c))\nbiggestCRoot = max(list(map(ds.size, cRoots)))\n\nanswer = 0\nfor u in ds.roots():\n    answer += C2(ds.size(u)) - ccDegree[u] // 2\n    if u not in cRoots:\n        answer += ds.size(u) * biggestCRoot\n        biggestCRoot += ds.size(u)\n\nprint(answer)\n", "n,m,k=map(int,input().split())\ncap=[int(x)-1 for x in input().split()]\nman=[[]for i in  range(n)]\nvisited=[False]*n\nfor i in range(m):\n    a,b=map(int,input().split())\n    man[a-1].append(b-1)\n    man[b-1].append(a-1)\nsv=[]\ndef dfs(v,p=None,r=None):\n    p.append(v)\n    r.append(len(man[v]))\n    visited[v]=True\n    for x in man[v]:\n        if not visited[x]:\n            dfs(x,p,r)\n    return p,r\ndef analise():\n    p,r=[],[]\n    c=[]\n    res=0\n    mxcp=0\n    mxcpr=0\n    for i in range(n):\n        if not visited[i]:\n            p,r=[],[]\n            p,r=dfs(i,p,r)\n            a=len(p)\n            b=sum(r)//2\n            res+=((a-1)*a)//2-b\n            if len(set(cap)&set(p))==1:\n                if a>mxcp:\n                    mxcp=a\n                    mxcpr=b\n            else:\n                c.append([a,b])\n    for x in c:\n        res+=x[0]*mxcp\n        mxcp+=x[0]\n    return res\nprint(analise())", "from collections import deque\n\nn, m, k = [int(i) for i in input().split()]\nc = [int(i) for i in input().split()]\n\nadj_dict = dict()\nfor i in range(1,n+1):\n    adj_dict[i] = []\nfor i in range(m):\n    u, v = [int(i) for i in input().split()]\n    adj_dict[u].append(v)\n    adj_dict[v].append(u)\n\nsize = [0 for i in range(k)]\nremain = n\nvisited = set()\nfor i in range(k):\n    subc = c[i]\n    q = deque([subc])\n    while q:\n        cur = q[0]\n        q.popleft()\n        size[i] += 1\n        remain -= 1\n        visited.add(cur)\n        for x in adj_dict[cur]:\n            if x not in visited:\n                q.append(x)\n                visited.add(x)\n\nsize_list = sorted(size)\nsize_list[-1]+= remain\nprint(sum([ i*(i-1)//2 for i in size_list])-m)", "import sys\nfrom copy import deepcopy\ninput = sys.stdin.readline\nv, e, g = list(map(int, input().split()))\nconnect = [set() for i in range(v)]\ngov = list(map(int, input().split()))\nfor i in range(e):\n  x,y = list(map(int, input().split()))\n  connect[x-1].add(y)\n  connect[y-1].add(x)\nsizes = []#\nfor i in gov:\n  reached = {i}\n  while True:\n    old = deepcopy(reached)\n    for j in range(v):\n      if j+1 in reached:\n        reached.update(connect[j])\n      elif not connect[j].isdisjoint(reached):\n        reached.add(j+1)\n    if old == reached:\n      break\n  sizes.append(len(reached))\nans = -e\nfor i in sizes:\n  ans += i*(i-1)//2\nbig = max(sizes)\nfor i in range(v-sum(sizes)):\n  ans += big\n  big += 1\nprint(ans)\n", "n,m,k = list(map(int, input().split()))\nspecial = list(map(int, input().split()))\n\nroot = [p for p in range(n+1)]\n\ndef par(p):\n\tif p != root[p]:\n\t\troot[p] = par(root[p])\n\treturn root[p]\n\nfor i in range(m):\n\tu,v = list(map(par, list(map(int, input().split()))))\n\troot[v] = u\n\nsz = [0 for i in range(n+1)]\n\nfor i in range(n+1):\n\tsz[par(i)] += 1\n\nleftover = n\nans = 0\nlargest = 0\n\nfor x in special:\n\td = par(x)\n\tlargest = max(largest, sz[d])\n\tans += sz[d] * (sz[d] - 1) // 2\n\tleftover -= sz[d]\n\nans -= largest * (largest - 1) // 2\nans += (largest+leftover) * ((largest+leftover) - 1) // 2\nans -= m\n\nprint(ans)\n", "n,m,k = list(map(int, input().split()))\nspecial = list(map(int, input().split()))\n\nroot = [p for p in range(n+1)]\n\ndef par(p):\n\tif p != root[p]:\n\t\troot[p] = par(root[p])\n\treturn root[p]\n\nfor i in range(m):\n\tu,v = list(map(par, list(map(int, input().split()))))\n\troot[v] = u\n\nsz = [0 for i in range(n+1)]\n\nfor i in range(n+1):\n\tsz[par(i)] += 1\n\nleftover = n\nans = 0\nlargest = 0\n\nfor x in special:\n\td = par(x)\n\tlargest = max(largest, sz[d])\n\tans += sz[d] * (sz[d] - 1) // 2\n\tleftover -= sz[d]\n\nans -= largest * (largest - 1) // 2\nans += (largest+leftover) * ((largest+leftover) - 1) // 2\nans -= m\n#\nprint(ans)\n", "class Union:\n\n    def __init__(self, n):\n        self.ancestors = [i for i in range(n+1)]\n        self.size = [0]*(n+1)\n\n    def get_root(self, node):\n        if self.ancestors[node] == node:\n            return node\n        self.ancestors[node] = self.get_root(self.ancestors[node])\n        return self.ancestors[node]\n\n    def merge(self, a, b):\n        a, b = self.get_root(a), self.get_root(b)\n        self.ancestors[a] = b\n\n\ndef combination(number):\n    return (number * (number - 1)) >> 1\n\n\nn, m, k = map(int, input().split())\nbiggest, others, res = 0, n, -m\nhomes = list(map(int, input().split()))\nunion = Union(n)\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    union.merge(a, b)\n\nfor i in range(1, n+1):\n    union.size[union.get_root(i)] += 1\n\nfor home in homes:\n    size = union.size[union.get_root(home)]\n    biggest = max(biggest, size)\n    res += combination(size)\n    others -= size\n\nres -= combination(biggest)\nres += combination(biggest + others)\nprint(res)", "from collections import Counter as cntr\nfrom math import inf\ndef cin():\n\treturn map(int, input().split(' '))\ndef dfs(graph, src):\n\tnonlocal visited, cnt\n\tcnt += 1\n\tfor v in graph[src]:\n\t\tif visited[v] == False:\n\t\t\tvisited[v] = True\n\t\t\tdfs(graph, v)\n\treturn cnt\n\nn,m,k = cin()\ngovs = list(cin())\nhong = {i:[] for i in range(n)}\nfor i in range(m):\n\tu, v = cin()\n\tu -= 1\n\tv -= 1\n\thong[u].append(v)\n\thong[v].append(u)\n\n\nvisited = [False for i in range(n)]\ncount = []\nfor gov in govs:\n\tgov -= 1\n\tvisited[gov] = True\n\tcnt = 0\n\tcount.append(dfs(hong, gov))\n\n\n\ncount = sorted(count)\nfor i in range(n):\n\tif visited[i] == False:\n\t\tvisited[i] = True\n\t\tcnt = 0\n\t\tcount[-1]+=dfs(hong, i)\nsu = 0\nfor i in count:\n\tsu += i*(i-1)//2\nprint(su-m)", "def cin():\n    return list(map(int, input().split()))\n\ndef dfs(n):\n    if not C[n]:\n        C[n]=True\n        s[0]+=1\n    for i in B[n]:\n        if not C[i]:dfs(i)\n\nn,m,k=cin()\nA=cin()\nA=[i-1 for i in A]\nB=[list([]) for i in range(n)]\nC=[False for i in range(n)]\nans=mx=0\nfor i in range(m):\n    a,b=[i-1 for i in cin()]\n    B[a].append(b)\n    B[b].append(a)\n\nfor i in range(k):\n    s=[0]\n    dfs(A[i])\n    ans+=s[0]*(s[0]-1)//2\n    mx=max(mx,s[0])\n\nans-=mx*(mx-1)//2\nfor i in range(n):\n    if not C[i]:\n        s=[0]\n        dfs(i)\n        mx+=s[0]\n\nprint(ans-m+mx*(mx-1)//2)\n\n\n\n\n# Made By Mostafa_Khaled\n", "n,m,k=list(map(int,input().split()))\nC=list(map(int,input().split()))\ng=[[0]*(n+1) for _ in range(n+1)]\nfor _ in range(m):\n    a,b=list(map(int, input().split()))\n    g[a][b]=g[b][a]=1\n\ny=[0]*k\nv=[0]*(n+1)\ndef dfs(c, x):\n    y[c]+=1\n    v[x]=1\n    for j in range(n+1):\n        if g[x][j]==1 and v[j]==0:\n            dfs(c,j)\n\nfor c in range(k):\n    v=[0]*(n+1)\n    dfs(c,C[c])\ns=n-sum(y)\nmm=max(y)\nfor i in range(k):\n    if y[i]==mm:\n        y[i]+=s\n        break\n\ny = list([w*(w-1)//2 for w in y])\nprint(sum(y)-m)\n", "n,m,c=list(map(int,input().split()))\nl=list(map(int,input().split()))\n\n\n\nqa=n\nd=[[] for i in range(n+1)]\nVisited=[False for i in range(n+1)]\nf=0\nL=[]\nfor i in range(m) :\n    a,b=list(map(int,input().split()))\n    d[a].append(b)\n    d[b].append(a)\n    L.append([a,b])\nma=0\n\nd1={}\nfor x in l:\n    q=[x]\n    r=0\n    t=0\n    while q :\n        v=q[0]\n        r+=1\n        Visited[v]=True\n        t+=len(d[v])\n        for y in d[v] :\n            if Visited[y]==False :\n                q.append(y)\n                Visited[y]=True\n        del q[0]\n    qa-=r\n    d1[r]=d1.get(r,[])+[t]\n    \n    \n\nfor x in L :\n    if Visited[x[0]]==Visited[x[1]]==False :\n        f+=1\nrr=True\ny=sorted(d1,reverse=True)\nout=-f\n\nfor x in y :\n    for e in d1[x] :\n        if rr :\n            u=qa+x\n            out+=u*(u-1)//2-e//2\n            rr=False\n        else :\n            out+=x*(x-1)//2-e//2\nprint(out)\n    \n\n        \n\n    \n        \n\n\n        \n                \n    \n", "gr={}\nclass node:\n\tdef __init__(self):\n\t\tself.adj=set()\n\tdef add(self,b):\n\t\tself.adj.add(b)\nn,m,k=map(int,input().split())\na=list(map(int,input().split()))\nfor i in range(n):\n\tgr[i+1]=node()\nfor i in range(m):\n\tu,v=map(int,input().split())\n\tgr[u].add(v)\n\tgr[v].add(u)\nv=[False for i in range(n+1)]\nv[0]=True\nans=0\nmaxi=0\nc=0\nfor i in a:\n\ts=set([i])\n\ted=0\n\tne=0\n\tlast=0\n\twhile s:\n\t\tx=s.pop()\n\t\ted+=len(gr[x].adj)\n\t\tne+=1\n\t\tv[x]=True\n\t\tfor j in gr[x].adj:\n\t\t\tif j==last or v[j]:continue\n\t\t\ts.add(j)\n\t\tlast=x\n\tif maxi<ne:maxi=ne;c=ed//2\n\tans+=ne*(ne-1)//2-ed//2\nb=v.count(False)\nif b!=0:\n\tedge=0\n\tfor i in range(1,n+1):\n\t\tif v[i]:continue\n\t\ts=set([i])\n\t\ted=0\n\t\tlast=0\n\t\twhile s:\n\t\t\tx=s.pop()\n\t\t\ted+=len(gr[x].adj)\n\t\t\tv[x]=True\n\t\t\tfor j in gr[x].adj:\n\t\t\t\tif j==last or v[j]:continue\n\t\t\t\ts.add(j)\n\t\t\tlast=x\n\t\t\n\t\tedge+=ed//2\n\tans=ans-maxi*(maxi-1)//2+(maxi+b)*(maxi+b-1)//2-edge\nprint(ans)", "n, m, k = list(map(int, input().split()))\nis_gov = [0] * (n+1)\nprt = [0] * (n+1)\ncnt_gov = [0] * (n+1)\nadj = [[] for _ in range(n+1)]\n\nif k == 1: \n    arr = [int(input())]\nelse:      \n    arr = list(map(int, input().split()))\nfor i in arr:\n    is_gov[i] = 1\nfor i in range(m):\n    u, v = list(map(int, input().split()))\n    adj[u].append(v)\n    adj[v].append(u)\n\ndef dfs(u, p, ID):\n    stk = [(u, p, ID)]\n    while stk:\n        u, p, ID = stk[-1]\n        stk.pop()\n        if prt[u] != 0:\n            continue\n        prt[u] = ID\n        cnt_gov[ID] += 1\n        for v in adj[u]:\n            if v != p:\n                stk.append((v, u, ID))\n\nfor i in range(1, n+1):\n    if is_gov[i] == 1:\n        dfs(i, -1, i)\nmax_nodes, res = 0, 0\nfor i in range(1, n+1):\n    if is_gov[i] == 1:\n        res += cnt_gov[i] * (cnt_gov[i]-1) // 2\n        max_nodes = max(max_nodes, cnt_gov[i])\nres -= max_nodes * (max_nodes-1) // 2\nmax_nodes += prt.count(0) - 1\nres += max_nodes * (max_nodes-1) // 2\nprint(res - m)\n", "import sys\ninput = sys.stdin.readline\n\nclass Unionfind:\n    def __init__(self, n):\n        self.par = [-1]*n\n        self.rank = [1]*n\n    \n    def root(self, x):\n        r = x\n        \n        while not self.par[r]<0:\n            r = self.par[r]\n        \n        t = x\n        \n        while t!=r:\n            tmp = t\n            t = self.par[t]\n            self.par[tmp] = r\n        \n        return r\n    \n    def unite(self, x, y):\n        rx = self.root(x)\n        ry = self.root(y)\n        \n        if rx==ry:\n            return\n        \n        if self.rank[rx]<=self.rank[ry]:\n            self.par[ry] += self.par[rx]\n            self.par[rx] = ry\n            \n            if self.rank[rx]==self.rank[ry]:\n                self.rank[ry] += 1\n        else:\n            self.par[rx] += self.par[ry]\n            self.par[ry] = rx\n    \n    def is_same(self, x, y):\n        return self.root(x)==self.root(y)\n    \n    def count(self, x):\n        return -self.par[self.root(x)]\n\nn, m, k = map(int, input().split())\nc = list(map(int, input().split()))\nuf = Unionfind(n)\n\nfor _ in range(m):\n    u, v = map(int, input().split())\n    uf.unite(u-1, v-1)\n\nsizes = [uf.count(ci-1) for ci in c]\nsizes.sort()\nsizes[-1] += n-sum(sizes)\nans = 0\n\nfor size in sizes:\n    ans += size*(size-1)//2\n\nans -= m\n\nprint(ans)", "from collections import defaultdict\ngraph = defaultdict(list)\nn,m,k = list(map(int,input().split()))\narr = list(map(int,input().split()))\nfor i in range(m):\n    u,v = list(map(int,input().split()))\n    graph[u].append(v)\n    graph[v].append(u)\nd = {}\nvisited = [False for i in range(n)]\nfor i in arr:\n    cur = i\n    q = []\n    d[cur] = []\n    q.append(cur)\n    visited[cur-1] = True\n    while q!=[]:\n        u = q.pop(0)\n        d[cur].append(u)\n        for j in graph[u]:\n            if visited[j-1]==False:\n                visited[j-1] = True\n                q.append(j)\nvisited = [False for i in range(n)]\nfor i in d:\n    for j in d[i]:\n        visited[j-1] = True\nrem = 0\nfor i in visited:\n    if i==False:\n        rem+=1\nans = []\nfor i in d:\n    ans.append(len(d[i]))\nans.sort()\nans[-1]+=rem\ntmp = 0\n# print(ans)\nfor i in ans:\n    tmp+=(i*(i-1))//2\nprint(tmp-m)\n", "def cin():\n    return list(map(int, input().split()))\n \ndef dfs(n):\n    if not C[n]:\n        C[n]=True\n        s[0]+=1\n    for i in B[n]:\n        if not C[i]:dfs(i)\n \nn,m,k=cin()\nA=cin()\nA=[i-1 for i in A]\nB=[list([]) for i in range(n)]\nC=[False for i in range(n)]\nans=mx=0\nfor i in range(m):\n    a,b=[i-1 for i in cin()]\n    B[a].append(b)\n    B[b].append(a)\n \nfor i in range(k):\n    s=[0]\n    dfs(A[i])\n    ans+=s[0]*(s[0]-1)//2\n    mx=max(mx,s[0])\n \nans-=mx*(mx-1)//2\nfor i in range(n):\n    if not C[i]:\n        s=[0]\n        dfs(i)\n        mx+=s[0]\n \nprint(ans-m+mx*(mx-1)//2)", "#inputs\nn, m, ngovs = [int(x) for x in input().split()]\n\ngovs=[int(i)-1 for i in input().split()]\n\n#build graph\ngraph=[list([]) for i in range(n)]\nvisited=[False for i in range(n)]\nfor i in range(m):\n    verts = tuple(int(x) -1 for x in input().split())\n    graph[verts[0]].append(verts[1])\n    graph[verts[1]].append(verts[0])\n\n\n#DFS\nres = 0\ncur_max = 0\n\ndef dfs(node):\n    if not visited[node]:\n        visited[node]=1\n        seen[0]+=1\n    for i in graph[node]:\n        if not visited[i]:\n            dfs(i)\n\nfor i in govs:\n    seen=[0]\n    dfs(i)\n    res+=seen[0]*(seen[0]-1)//2\n    cur_max=max(cur_max,seen[0])\n \nres-=cur_max*(cur_max-1)//2\nfor i in range(n):\n    if not visited[i]:\n        seen=[0]\n        dfs(i)\n        cur_max+=seen[0]\n \nres= res - m+cur_max*(cur_max-1)//2\n\nprint(res)", "def solve():\n    nodes, edges, distinct = list(map(int, input().split(\" \")))\n    govt = {x-1: 1 for x in list(map(int, input().split(\" \")))}\n    connections = {}\n\n    # Add edges\n    for _ in range(edges):\n        x, y = list(map(int, input().split(\" \")))\n\n        if x-1 not in connections:\n            connections[x-1] = [y-1]\n        else:\n            connections[x-1].append(y-1)\n\n        if y-1 not in connections:\n            connections[y-1] = [x-1]\n        else:\n            connections[y-1].append(x-1)\n\n    discovered = {}\n    cycles = {m: [] for m in [\"G\", \"N\"]}\n    for i in range(nodes):\n        is_govt = False if i not in govt else True\n\n        # Node is already been lookd at\n        if i in discovered:\n            continue\n\n        cycle = [i]\n        # Nodes with no edges to other nodes\n        if i not in connections:\n            discovered[i] = 1\n            if is_govt:\n                cycles[\"G\"].append(cycle)\n            else:\n                cycles[\"N\"].append(cycle)\n            continue\n\n        path = connections[i]\n        # Find all the nodes reachable\n        while len(path) > 0:\n            node = path.pop(0)\n\n            if node in discovered:\n                continue\n            discovered[node] = 1\n\n            if node in govt:\n                is_govt = True\n\n            path = connections[node] + path\n            cycle.append(node)\n\n        if is_govt:\n            cycles[\"G\"].append(list(set(cycle)))\n        else:\n            cycles[\"N\"].append(list(set(cycle)))\n\n    ordered_cycles = sorted(cycles[\"G\"], key=len)\n\n    highest = len(ordered_cycles[-1])\n    ordered_cycles.pop(len(ordered_cycles) - 1)\n    for cycle in cycles[\"N\"]:\n        highest += len(cycle)\n\n    total = highest * (highest - 1) // 2\n    for j in ordered_cycles:\n        if len(j) == 1:\n            continue\n        total += len(j) * (len(j) - 1) // 2\n\n    print(total - edges)\nsolve()", "def solve():\n    order = list\n    length = len\n    unique = set\n    nodes, edges, distinct = order(map(int, input().split(\" \")))\n    govt = {x-1: 1 for x in order(map(int, input().split(\" \")))}\n    connections = {}\n\n    # Add edges\n    for _ in range(edges):\n        x, y = order(map(int, input().split(\" \")))\n\n        if x-1 not in connections:\n            connections[x-1] = [y-1]\n        else:\n            connections[x-1].append(y-1)\n\n        if y-1 not in connections:\n            connections[y-1] = [x-1]\n        else:\n            connections[y-1].append(x-1)\n\n    discovered = {}\n    cycles = {m: [] for m in [\"G\", \"N\"]}\n    for i in range(nodes):\n        is_govt = False if i not in govt else True\n\n        # Node is already been lookd at\n        if i in discovered:\n            continue\n\n        cycle = [i]\n        # Nodes with no edges to other nodes\n        if i not in connections:\n            discovered[i] = 1\n            if is_govt:\n                cycles[\"G\"].append(cycle)\n            else:\n                cycles[\"N\"].append(cycle)\n            continue\n\n        path = connections[i]\n        # Find all the nodes reachable\n        while length(path) > 0:\n            node = path.pop(0)\n\n            if node in discovered:\n                continue\n            discovered[node] = 1\n\n            if node in govt:\n                is_govt = True\n\n            path = connections[node] + path\n            cycle.append(node)\n\n        if is_govt:\n            cycles[\"G\"].append(order(unique(cycle)))\n        else:\n            cycles[\"N\"].append(order(unique(cycle)))\n\n    ordered_cycles = sorted(cycles[\"G\"], key=len)\n\n    highest = length(ordered_cycles[-1])\n    ordered_cycles.pop(length(ordered_cycles) - 1)\n    for cycle in cycles[\"N\"]:\n        highest += length(cycle)\n\n    total = highest * (highest - 1) // 2\n    for j in ordered_cycles:\n        total += length(j) * (length(j) - 1) // 2\n\n    print(total - edges)\nsolve()", "\ndef dfs(u,vis):\n\tvis.add(u)\n\tfor v in g[u]:\n\t\tif v not in vis:\n\t\t\tdfs(v,vis)\n\n\nn,m,k = list(map(int,list(input().split())))\ngovs_ind = list(map(int,list(input().split())))\norig = set()\ncountries = set(range(1,n+1))\n\ng = [ [] for i in range(n+1) ]\n\nfor i in range(m):\n\tu,v = list(map(int,list(input().split())))\n\tif(u>v):\n\t\tu,v = v,u\n\torig.add((u,v))\n\tg[u].append(v)\n\tg[v].append(u)\n\ngov_nods = []\n\nfor u in govs_ind:\n\tvis = set()\n\tdfs(u,vis)\n\tgov_nods.append(vis)\n\nno_govs = countries.copy()\n\n\nnvoss = 0\nfor reg in gov_nods:\n\tno_govs -= reg\n\tsize = len(reg)\n\tnvoss += (size*(size-1))//2\n\nsize = len(no_govs)\nnvoss += (size*(size-1))//2\n\nmaxi = 0\nfor i in range(len(gov_nods)):\n\tif len(gov_nods[i]) > len(gov_nods[maxi]) :\n\t\tmaxi = i\nmax_gov = gov_nods[maxi]\n\nnvoss += len(max_gov)*len(no_govs)\nnvoss -= len(orig)\nprint(nvoss)\n", "\"\"\"\n\u041d\u0430\u043a\u043e\u043d\u0435\u0446-\u0442\u043e \u041a\u043e\u0440\u043e\u0432\u043e\u043a\u043e\u043d\u0433 \u0441\u0442\u0430\u043b \u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u0435\u043c \u043c\u0438\u0440\u0430 \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0432\u0435\u0441\u0442\u0438 \u0432 \u043d\u0451\u043c \u043f\u043e\u0440\u044f\u0434\u043e\u043a.\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043d \u0445\u043e\u0447\u0435\u0442, \u0447\u0442\u043e\u0431\u044b \u043b\u044e\u0434\u044f\u043c \u0431\u044b\u043b\u043e \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u043e \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0432\u043e\u0438\u0445 \u0441\u0442\u0440\u0430\u043d.\n\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c \u043c\u0438\u0440 \u043a\u0430\u043a \u043d\u0435\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0433\u0440\u0430\u0444 \u0438\u0437 n \u0432\u0435\u0440\u0448\u0438\u043d (\u0433\u043e\u0440\u043e\u0434\u043e\u0432) \u0438 m \u0440\u0451\u0431\u0435\u0440 (\u0434\u043e\u0440\u043e\u0433).\nk \u0438\u0437 \u044d\u0442\u0438\u0445 \u0432\u0435\u0440\u0448\u0438\u043d \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u0442\u043e\u043b\u0438\u0446\u0430\u043c\u0438 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432 (\u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u043e\u043b\u0438\u0446\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 k \u0441\u0442\u0440\u0430\u043d).\n\u041b\u044e\u0431\u0430\u044f \u043f\u0430\u0440\u0430 \u0432\u0435\u0440\u0448\u0438\u043d \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0430 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u043e\u0434\u043d\u0438\u043c \u0440\u0435\u0431\u0440\u043e\u043c, \u0438 \u043d\u0438\u043a\u0430\u043a\u043e\u0435 \u0440\u0435\u0431\u0440\u043e \u043d\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0432\u0435\u0440\u0448\u0438\u043d\u0443 \u0441\u0430\u043c\u0443 \u0441 \u0441\u043e\u0431\u043e\u0439.\n\u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0434\u0432\u0443\u0445 \u0432\u0435\u0440\u0448\u0438\u043d, \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0442\u043e\u043b\u0438\u0446\u0430\u043c\u0438, \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0443\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u0434\u0432\u0443\u043c\u044f \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438.\n\u041b\u044e\u0431\u043e\u0439 \u0433\u0440\u0430\u0444, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0439 \u0432\u0441\u0435\u043c \u044d\u0442\u0438\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c.\n\u041a\u043e\u0440\u043e\u0432\u043e\u043a\u043e\u043d\u0433 \u0445\u043e\u0447\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0433\u0440\u0430\u0444 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0451\u0431\u0435\u0440, \u0442\u0430\u043a \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0432\u0441\u0451 \u0435\u0449\u0451 \u043e\u0441\u0442\u0430\u0432\u0430\u043b\u0441\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c. \u0412\u044b\u044f\u0441\u043d\u0438\u0442\u0435, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0451\u0431\u0435\u0440 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 n, m \u0438 k (1\u2009\u2264\u2009n\u2009\u2264\u20091\u2009000, 0\u2009\u2264\u2009m\u2009\u2264\u2009100\u2009000, 1\u2009\u2264\u2009k\u2009\u2264\u2009n)\n\u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u0438 \u0440\u0451\u0431\u0435\u0440 \u0432 \u0433\u0440\u0430\u0444\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d, \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0442\u043e\u043b\u0438\u0446\u0430\u043c\u0438.\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b k \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b c_1,\u2009c_2,\u2009...,\u2009c_k (1\u2009\u2264\u2009c_i\u2009\u2264\u2009n), \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u043d\u043e\u043c\u0435\u0440\u0430 \u0432\u0435\u0440\u0448\u0438\u043d, \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0442\u043e\u043b\u0438\u0446\u0430\u043c\u0438.\n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 m \u0441\u0442\u0440\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 u_i \u0438 v_i (1\u2009\u2264\u2009u_i,\u2009v_i\u2009\u2264\u2009n), \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0440\u0451\u0431\u0440\u0430 \u043d\u0435\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u0440\u0430\u0444\u0430.\n\u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0433\u0440\u0430\u0444 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0451\u0431\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u041a\u043e\u0440\u043e\u0432\u043e\u043a\u043e\u043d\u0433 \u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0438\u043c\u0435\u044e\u0449\u0438\u0439\u0441\u044f \u0433\u0440\u0430\u0444, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043e\u0441\u0442\u0430\u043b\u0441\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c.\n\"\"\"\n\n\ndef dfs(u,vis): # \u043f\u043e\u0438\u0441\u043a \u0432 \u0433\u043b\u0443\u0431\u0438\u043d\u0443\n\tvis.add(u)\n\tfor v in g[u]:\n\t\tif v not in vis:\n\t\t\tdfs(v,vis)\n\n\nn,m,k = list(map(int,list(input().split()))) # n-\u0432\u0435\u0440\u0448\u0438\u043d, m-\u0440\u0435\u0431\u0435\u0440, k-\u0441\u0442\u043e\u043b\u0438\u0446\ngovs_ind = list(map(int,list(input().split()))) # \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u0442\u043e\u043b\u0438\u0446\norig = set() \t\t\t\t\t\t\t# \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0431\u0435\u0440 (\u0440\u0435\u0431\u0440\u0430 - \u043a\u043e\u0440\u0442\u0435\u0436\u0438 (u, v))\ncountries = set(range(1,n+1))\t\t\t# \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n\ng = [ [] for i in range(n+1) ]\n\nfor i in range(m):\n\tu,v = list(map(int,list(input().split()))) \n\torig.add((u,v)) \t\t# \u0432 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0440\u0435\u0431\u0440\u0430\n\tg[u].append(v)\n\tg[v].append(u)\n\ngov_nods = []\n\nfor u in govs_ind:\n\tvis = set()\n\tdfs(u,vis)\n\tgov_nods.append(vis)\n\nno_govs = countries.copy()\n\n\nnvoss = 0\nfor reg in gov_nods:\n\tno_govs -= reg\n\tsize = len(reg)\n\tnvoss += (size*(size-1))//2\n\nsize = len(no_govs)\nnvoss += (size*(size-1))//2\n\nmaxi = 0\nfor i in range(len(gov_nods)):\n\tif len(gov_nods[i]) > len(gov_nods[maxi]) :\n\t\tmaxi = i\nmax_gov = gov_nods[maxi]\n\nnvoss += len(max_gov)*len(no_govs)\nnvoss -= len(orig)\nprint(nvoss)\n", "\"\"\"\n\u041d\u0430\u043a\u043e\u043d\u0435\u0446-\u0442\u043e \u041a\u043e\u0440\u043e\u0432\u043e\u043a\u043e\u043d\u0433 \u0441\u0442\u0430\u043b \u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u0435\u043c \u043c\u0438\u0440\u0430 \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0432\u0435\u0441\u0442\u0438 \u0432 \u043d\u0451\u043c \u043f\u043e\u0440\u044f\u0434\u043e\u043a.\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043d \u0445\u043e\u0447\u0435\u0442, \u0447\u0442\u043e\u0431\u044b \u043b\u044e\u0434\u044f\u043c \u0431\u044b\u043b\u043e \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u043e \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u0432\u043e\u0438\u0445 \u0441\u0442\u0440\u0430\u043d.\n\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u043c \u043c\u0438\u0440 \u043a\u0430\u043a \u043d\u0435\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0433\u0440\u0430\u0444 \u0438\u0437 n \u0432\u0435\u0440\u0448\u0438\u043d (\u0433\u043e\u0440\u043e\u0434\u043e\u0432) \u0438 m \u0440\u0451\u0431\u0435\u0440 (\u0434\u043e\u0440\u043e\u0433).\nk \u0438\u0437 \u044d\u0442\u0438\u0445 \u0432\u0435\u0440\u0448\u0438\u043d \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u0442\u043e\u043b\u0438\u0446\u0430\u043c\u0438 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432 (\u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u043e\u043b\u0438\u0446\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 k \u0441\u0442\u0440\u0430\u043d).\n\u041b\u044e\u0431\u0430\u044f \u043f\u0430\u0440\u0430 \u0432\u0435\u0440\u0448\u0438\u043d \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0430 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u043e\u0434\u043d\u0438\u043c \u0440\u0435\u0431\u0440\u043e\u043c, \u0438 \u043d\u0438\u043a\u0430\u043a\u043e\u0435 \u0440\u0435\u0431\u0440\u043e \u043d\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0432\u0435\u0440\u0448\u0438\u043d\u0443 \u0441\u0430\u043c\u0443 \u0441 \u0441\u043e\u0431\u043e\u0439.\n\u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e, \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0434\u0432\u0443\u0445 \u0432\u0435\u0440\u0448\u0438\u043d, \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0442\u043e\u043b\u0438\u0446\u0430\u043c\u0438, \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0443\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u0434\u0432\u0443\u043c\u044f \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438.\n\u041b\u044e\u0431\u043e\u0439 \u0433\u0440\u0430\u0444, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0439 \u0432\u0441\u0435\u043c \u044d\u0442\u0438\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c.\n\u041a\u043e\u0440\u043e\u0432\u043e\u043a\u043e\u043d\u0433 \u0445\u043e\u0447\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0433\u0440\u0430\u0444 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0451\u0431\u0435\u0440, \u0442\u0430\u043a \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u0432\u0441\u0451 \u0435\u0449\u0451 \u043e\u0441\u0442\u0430\u0432\u0430\u043b\u0441\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c. \u0412\u044b\u044f\u0441\u043d\u0438\u0442\u0435, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0451\u0431\u0435\u0440 \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 n, m \u0438 k (1\u2009\u2264\u2009n\u2009\u2264\u20091\u2009000, 0\u2009\u2264\u2009m\u2009\u2264\u2009100\u2009000, 1\u2009\u2264\u2009k\u2009\u2264\u2009n)\n\u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u0438 \u0440\u0451\u0431\u0435\u0440 \u0432 \u0433\u0440\u0430\u0444\u0435, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d, \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0442\u043e\u043b\u0438\u0446\u0430\u043c\u0438.\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b k \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b c_1,\u2009c_2,\u2009...,\u2009c_k (1\u2009\u2264\u2009c_i\u2009\u2264\u2009n), \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u043d\u043e\u043c\u0435\u0440\u0430 \u0432\u0435\u0440\u0448\u0438\u043d, \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0442\u043e\u043b\u0438\u0446\u0430\u043c\u0438.\n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 m \u0441\u0442\u0440\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 u_i \u0438 v_i (1\u2009\u2264\u2009u_i,\u2009v_i\u2009\u2264\u2009n), \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0445 \u0440\u0451\u0431\u0440\u0430 \u043d\u0435\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0433\u0440\u0430\u0444\u0430.\n\u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0433\u0440\u0430\u0444 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0451\u0431\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u041a\u043e\u0440\u043e\u0432\u043e\u043a\u043e\u043d\u0433 \u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0438\u043c\u0435\u044e\u0449\u0438\u0439\u0441\u044f \u0433\u0440\u0430\u0444, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043e\u0441\u0442\u0430\u043b\u0441\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u043c.\n\"\"\"\n\n\ndef dfs(u,vis): # \u043f\u043e\u0438\u0441\u043a \u0432 \u0433\u043b\u0443\u0431\u0438\u043d\u0443\n\tvis.add(u)\n\tfor v in g[u]:\n\t\tif v not in vis:\n\t\t\tdfs(v,vis)\n\n\nn,m,k = list(map(int,list(input().split()))) \t\t# n-\u0432\u0435\u0440\u0448\u0438\u043d, m-\u0440\u0435\u0431\u0435\u0440, k-\u0441\u0442\u043e\u043b\u0438\u0446\ngovs_ind = list(map(int,list(input().split()))) # \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u0442\u043e\u043b\u0438\u0446\norig = set() \t\t\t\t\t\t\t# \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0431\u0435\u0440 (\u0440\u0435\u0431\u0440\u0430 - \u043a\u043e\u0440\u0442\u0435\u0436\u0438 (u, v)) \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\ncountries = set(range(1,n+1))\t\t\t# \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n\ng = [ [] for i in range(n+1) ]\t\t\t# \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0433\u0440\u0430\u0444\u0430 (\u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0434\u0441\u043f\u0438\u0441\u043e\u043a \u0435\u0441\u0442\u044c \u0432\u0435\u0440\u0448\u0438\u043d\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0434\u0440\u0443\u0433\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u0438, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0441\u0432\u044f\u0437\u0430\u043d)\n\nfor i in range(m):\n\tu,v = list(map(int,list(input().split())))\n\torig.add((u,v)) \t\t\t\t\t# \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0440\u0435\u0431\u0440\u043e \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0431\u0435\u0440 \u0432 \u0432\u0438\u0434\u0435 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 (u, v)\n\tg[u].append(v)\t\t\t\t\t\t# \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u0433\u0440\u0430\u0444 \u0432\u0441\u0435 \u0441\u0432\u044f\u0437\u0438\n\tg[v].append(u)\n\ngov_nods = []\t\t\t\t# \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u0438\n\nfor u in govs_ind:\n\tvis = set()\t\t\t\t# \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u043d\u044b\u0445 \u0432\u0435\u0440\u0448\u0438\u043d\n\tdfs(u,vis)\t\t\t\t# \u043f\u043e\u0438\u0441\u043a \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u0438\n\tgov_nods.append(vis)\n\n\nno_govs = countries.copy()\t# \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d, \u0431\u0435\u0437 \u0441\u0432\u044f\u0437\u0438 \u0438 \u043d\u0435 \u0441\u0442\u043e\u043b\u0438\u0446\u044b\n\nnvoss = 0\t\t\t\t\t# ?\nfor reg in gov_nods:\n\tno_govs -= reg\t\t\t# \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0437 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0432\u0441\u0435, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438 \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u0438\n\tsize = len(reg)\n\tnvoss += int((size*(size-1))/2)\n\nsize = len(no_govs)\nnvoss += int((size*(size-1))/2)\n\nmaxi = 0\nfor i in range(len(gov_nods)):\t\t\t\t\t\t# \u043f\u043e\u0438\u0441\u043a \u043c\u0430\u043a\u0441 \u043a\u043e\u043c\u043f \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u0438\n\tif len(gov_nods[i]) > len(gov_nods[maxi]) :\n\t\tmaxi = i\nmax_gov = gov_nods[maxi]\n\nnvoss += len(max_gov)*len(no_govs)\t\t# \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0430\u043a\u0441 \u043a\u043e\u043b-\u0432\u043e \u0440\u0435\u0431\u0435\u0440 \u0441 \u0438\u0437\u043e\u043b\u0438\u0440 \u0432\u0435\u0440\u0448\u0438\u043d\u0430\u043c\u0438 \u0438 \u043c\u0430\u043a\u0441 \u043a\u043e\u043c\u043f \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u0438\nnvoss -= len(orig)\t\t\t\t\t\t# \u043e\u0442\u043d\u0438\u043c\u0430\u0435\u043c \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0431\u0440\u0430\n\nprint(nvoss)\n"]