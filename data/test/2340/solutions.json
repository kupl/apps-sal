["import sys\nimport math\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom itertools import permutations\ninput = lambda : sys.stdin.readline().rstrip()\nread = lambda : list(map(int, input().split()))\ndef write(*args, sep=\"\\n\"):\n  for i in args:\n    sys.stdout.write(\"{}\".format(i) + sep)\nINF = float('inf')\nMOD = int(1e9 + 7)\n\nfor q in range(int(input())):\n  h, n = read()\n  arr = list(read()) + [0]\n  \n  if n == 1:\n    write(0)\n    continue\n  \n  ans = 0\n\n  cur = h \n  for i in range(1, n):\n    if cur == arr[i]:\n      continue\n    else:\n      if arr[i + 1] == arr[i] - 1:\n        cur = arr[i] - 1\n      else:\n        ans += 1\n  \n  write(ans)\n    \n", "def mp():\n    return map(int, input().split())\n\nt = int(input())\nfor tt in range(t):\n    h, n = mp()\n    a = list(mp()) + [0]\n    \n    ans = 0\n    last = h\n    i = 1\n    while i < n:\n        #print('last =', last, '; i =', i, '; a[i] =', a[i], '; a[i + 1] =', a[i + 1], '; ans =', ans)\n        last = min(last, a[i] + 1)\n        if a[i + 1] == last - 2:\n            last = a[i + 1]\n            i += 2\n        else:\n            ans += 1\n            last -= 2\n            i += 1\n    print(ans)", "from sys import stdin,stdout\ntests=int(stdin.readline().strip())\nfor t in range(tests):\n    n,m=list(map(int,stdin.readline().strip().split()))\n    s=list((list(map(int,stdin.readline().strip().split()))))\n    s=s[::-1]\n    cur=n\n    ans=0\n    while( cur>0) and len(s)!=0:\n        if(cur<=2):\n            break\n        while len(s)>0 and s[-1]>=cur:\n            s.pop()\n        if(len(s)==0):\n            break\n        if cur-s[-1]>1:\n            cur=s[-1]+1\n            continue\n        if len(s)==1:\n            ans+=1\n            break\n        if (s[-2]+1)==s[-1]:\n            cur=s[-2]\n            continue\n        ans+=1\n        cur=s[-2]+1\n    print(ans)\n", "q=int(input())\nfor _ in range(q):\n    h,n=[int(w) for w in input().split()]\n    p=[int(w) for w in input().split()]\n    p.append(0)\n    r=0\n    i=1\n    while i<n:\n        if p[i]==p[i+1]+1:\n            i+=2\n        else:\n            i+=1\n            r+=1\n    print(r)\n", "T = int(input())\nfor t in range(T):\n    h,n = list(map(int,input().strip().split(' ')))\n    steps = list(map(int,input().strip().split(' ')))\n    steps.append(0)\n    cur = n\n    danger = 0\n    ret = 0\n    index = 1\n    cur = steps[index] + 1\n    while cur > 2:\n        if steps[index+1] == cur - 2:\n            index += 2\n        else:\n            index += 1\n            ret += 1\n        cur = steps[index] + 1\n    print(ret)\n", "import sys\ndef I():\n    return sys.stdin.readline().rstrip()\n\nq = int(I())\nfor _ in range(q):\n    h, n = list(map( int, I().split() ))\n    p = list(map(int,I().split()))\n    i, ans = 0, 0\n    while i < n:\n        if h == p[ i ]:\n            pass\n        elif p[ i ] == 1:\n            h = 0\n        elif i < n - 1 and p[ i ] - 1 == p[ i + 1 ]:\n            h = p[ i + 1 ]\n        else:\n            ans += 1\n            h = p[ i ] - 1\n        i += 1\n    print( ans )\n", "for _ in range(int(input())):\n    h,n=map(int,input().split())\n    p=list(map(int,input().split()))\n    xyz=set(p)\n    ans=0\n    for i in p:\n        if i<h:\n            h=i+1\n        if(h<=2):\n            break\n        if i==(h-1):\n            if (h-2) in xyz:\n                h-=2\n            else:\n                ans+=1\n                h-=2\n    print(ans)", "q=int(input())\nfor i in range(q):\n    h,n=map(int,input().split())\n    p=list(map(int,input().split()))\n    used=[0]\n    for i in range(1,n):\n        if i==1:\n            used.append(1)\n        else:\n            if p[i]>=1:\n                var=10000000000000\n                if p[i-1]-p[i]==1:\n                    used.append(used[i-2])\n                else:\n                    used.append(used[i-1]+1)\n    i=n-1\n    ans=0\n    if p[i]>2:\n        print(used[-1])\n    else:\n        if n>=2 and p[i]==1:\n            print(min(used[-2],used[-1]))\n        else:\n            print(used[-1])", "import sys\nimport math\ninput = sys.stdin.readline\n\nq=int(input())\nfor i in range(q):\n    h,n=list(map(int,input().split()))\n    arr=list(map(int,input().split()))\n    arr.append(0)\n    count=0\n    cur=0\n    now=arr[cur]\n    cur=1\n    while cur<n:\n       # print(\"now\", now, \"count\", count)\n        try:\n            if now-arr[cur]==1:\n                if now-arr[cur+1]==2:\n                    now=arr[cur+1]\n                    cur+=2\n                else:\n                    count+=1\n                    now = arr[cur+1]+1\n                    cur+=1\n            else:\n                now=arr[cur]+1\n        except:\n            break\n\n    print(count)\n", "q=int(input())\nfor i in range(q):\n    h,n=[int(x) for x in input().split()]\n    a=[int(x) for x in input().split()]+[10**10]\n    counter=0\n    arr=0\n    for i in range(1,n+1):\n        if a[i]==a[i-1]-1:\n            counter+=1\n        else:\n            if counter%2==1 and a[i-1]!=1:\n                arr+=1\n            counter=1\n    print(arr)\n", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef getcnt(fromplatform, toplatform):\n    return (fromplatform-toplatform)//2\n\nfor _ in range(int(input())):\n    h, n = list(map(int, input()[:-1].split()))\n    platforms = deque(list(map(int, input()[:-1].split())))\n    currenth = h\n    platforms.popleft()\n    platforms.append(-200)\n    ans = 0\n    while currenth > 2:        \n        if currenth - 1 == platforms[0]:\n            if currenth - 2 == platforms[1]:\n                platforms.popleft()\n                platforms.popleft()\n                currenth-=2\n            else:\n                platforms.popleft()\n                ans+=1\n                currenth = platforms[0]+1\n        else:\n            currenth = platforms[0]+1\n        #print(currenth)\n    print(ans)\n\n", "import bisect\nimport sys\ninput = sys.stdin.readline\n\n\nq = int(input())\nfor _ in range(q):\n    h, n = map(int, input().split())\n    p = list(map(int, input().split())) + [0]\n    cnt = 1\n    ans = 0\n    pos = h\n    i = 1\n    while True:\n        if i >= n+1:\n            break\n        if pos == p[i] + 1:\n            pos = p[i]\n            cnt += 1\n            i += 1\n        else:\n            pos = p[i] + 1\n            if cnt % 2 == 0:\n                ans += 1\n                cnt = 1\n    print(ans)", "for itr in range(int(input())):\n    h,o=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    a=a[::-1]\n    a.pop(-1)\n    ans=0\n    while h>2:\n        if len(a)==0: break\n        if h-1==a[-1]:\n            if len(a)>1 and h-2==a[-2]: \n                h-=2\n                a.pop(-1)\n                a.pop(-1)\n            else:\n                ans+=1\n                h-=2\n                a.pop(-1)\n        else: h=a[-1]+1\n    print(ans)", "q = int(input())\nfor i in range(q):\n    h, n = input().split()\n    h = int(h)\n    n = int(n)\n    p = [int(j) for j in input().split()]+[0]\n    s = 1\n    a = 0\n    for i in range(len(p)-1):\n        if p[i]-p[i+1] >= 2 and s % 2 == 0:\n            a += 1\n            s = 2\n        elif p[i]-p[i+1] >= 2 and s % 2 == 1:\n            s = 2\n        else:\n            s += 1\n    print(a)\n", "q = int(input())\nfor _ in range(q):\n    h, n = list(map(int, input().split()))\n    ps = list(map(int, input().split())) + [0, 0]\n    ps.reverse()\n    cur = n-1\n    crystals = 0\n    while ps and ps[-1] > 1:\n        if ps[-2] == h - 1:\n            if ps[-3] == h - 2:\n                ps.pop()\n                ps.pop()\n            else:\n                ps.pop()\n                ps[-1] = h - 2\n                crystals += 1\n            h -= 2\n        else:\n            ps[-1] = ps[-2] + 1\n            h = ps[-1]\n    print(crystals)\n", "'''input\n1\n10000 7\n10000 8 7 6 5 3 2\n'''\n# its a simulation\nfrom sys import stdin\nfrom bisect import bisect_left\n    \n     \n# main starts\nq = int(stdin.readline().strip())\nfor _ in range(q):\n\th, n = list(map(int, stdin.readline().split()))\n\tmoved = set(list(map(int, stdin.readline().split())))\n\toriginal = list(moved)\n\toriginal.sort()\n\tpos = h\n\tcount = 0\n\twhile pos > 0:\n\t\t# print('pos', pos, count)\n\t\tif pos - 1 in moved:\n\t\t\tif pos - 2 in moved:\n\t\t\t\tpos -= 2\n\t\t\t\t\t\n\t\t\telse:\n\t\t\t\tif pos - 2 != 0:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tpos -= 2\n\t\t\t\telse:\n\t\t\t\t\tpos -= 2\n\n\t\telse:\n\t\t\tindex = bisect_left(original, pos)\n\t\t\tif index == 0:\n\t\t\t\tpos = 0\n\t\t\telse:\n\t\t\t\tpos = original[index - 1] + 1\n\t\t\tmoved.add(pos)\n\tprint(count)", "import sys\ninput = sys.stdin.readline\n\nq=int(input())\n\nfor testcases in range(q):\n    h,n=list(map(int,input().split()))\n    P=list(map(int,input().split()))\n    P.append(-10)\n\n    NOW=h\n    ANS=0\n    ind=1\n\n    while NOW>=3:\n        #print(NOW,ind,ANS)\n        if P[ind]<NOW-1:\n            NOW=P[ind]+1\n            continue\n\n        if P[ind]==NOW-1 and P[ind+1]==NOW-2:\n            NOW-=2\n            ind+=2\n            continue\n\n        if P[ind]==NOW-1 and P[ind+1]!=NOW-2:\n            NOW-=2\n            ind+=1\n            ANS+=1\n\n\n    print(ANS)\n            \n        \n        \n\n    \n", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    hn = input().split()\n    h = int(hn[0])\n    n = int(hn[1])\n    pos = input().split()\n    pos = [int(val) for val in pos]\n    curr = h\n    curr_pos = 1\n    no_crystal = 0\n    while(curr > 2):\n        if curr_pos >= len(pos):\n            break\n        if (curr - 1) == pos[curr_pos]:\n            if(curr_pos == (len(pos) - 1) or (curr - 2) != pos[curr_pos + 1]):\n                no_crystal = no_crystal + 1\n                curr = curr - 2\n                curr_pos = curr_pos + 1\n            else:\n                curr_pos = curr_pos + 2\n        else:\n            curr = pos[curr_pos] + 1\n    print(no_crystal)", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\nfor _ in range(INT()):\n    H, N = MAP()\n    A = LIST() + ([0]*2)\n\n    ans = 0\n    i = 0\n    while i < N:\n        if A[i+1] - A[i+2] <= 1:\n            i += 2\n        else:\n            ans += 1\n            A[i+1] += 1\n            i += 1\n    print(ans)\n", "t = int(input())\nfor q in range(t):\n    h, n = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    s = 0\n    i = 1\n    while h > 2 and i < n:\n        if h - p[i] == 1:\n            if i + 1 < n:\n                if p[i] - p[i + 1] > 1: # falling down is not safe\n                    s += 1\n                    h = p[i] - 1\n                    i += 1\n                else: # falling down is safe\n                    h = p[i + 1]\n                    i += 2\n            else: # falling down is not restrickted by the lower platform\n                if p[i] == 1:\n                    h = 0\n                else:\n                    s += 1\n                    h = p[i] - 1\n                    i += 1\n        else:\n            h = p[i] + 1\n    print(s)\n", "import sys\n\nq = int(input())\nfor _ in range(q):\n  h, n = list(map(int, sys.stdin.readline().split()))\n  p = iter(list(map(int, sys.stdin.readline().split())) + [0])\n  cost = 0\n  akt = next(p)\n  a = next(p)\n  if a == 0:\n    print(0)\n  else:\n    b = next(p)\n    while True:\n      if a-b == 1:\n        akt = b\n        if akt == 0:\n          break\n        else:\n          a = next(p)\n        if a == 0:\n          break\n        else:\n          b = next(p)\n      else:\n        cost += 1\n        akt = a-1\n        a = b\n        if a == 0:\n          break\n        else:\n          b = next(p)\n    print(cost)\n", "t= int(input())\nfor _ in range(t):\n    h, n =  list(map(int, input().split()))\n    p= list(map(int,input().split()))\n    p.reverse()\n    s=n-1\n    # print(s)\n    c=0\n    l=h\n    while 1:\n        if l<3:\n            break\n        if s<1:\n            break\n        if l -p[s-1]>1:\n            l= p[s-1]+1\n        elif s<2:\n            if p[s]-2 >0:\n                c+=1\n            break\n        elif l-p[s-2]==2:\n            l=p[s-2]\n            s-=2\n        else:\n            c+=1\n            l-=2\n            s-=1\n    print(c)\n", "q = int(input())\n\nfor _ in range(q):\n    h, n = list(map(int, input().split()))\n\n    p = list(map(int, input().split()))[1:]\n    dangers = []\n\n    rows = 1\n    i = 0\n    while i < len(p):\n        if i > 0 and p[i] == p[i - 1] - 1:\n            rows += 1\n        else:\n            rows = 1\n\n        if (i == len(p) - 1 or p[i + 1] != p[i] - 1) and p[i] > 1:\n            if rows % 2:\n                dangers.append(p[i])\n        #print(rows, i, p[i])\n        i += 1\n   \n    print(len(dangers))\n", "q = int(input())\nfor i in range(q):\n\tinp = input()\n\tinp_arr = inp.split(\" \")\n\th = int(inp_arr[0])\n\tn = int(inp_arr[1])\n\tinp_p = input()\n\tinp_p_arr = inp_p.split(\" \")\n\tinp_p_arr = [int(j) for j in inp_p_arr]\n\tinp_p_arr.append(0)\n\tcount = 0\n\tpar_che = 1\n\tfor j in range(1, n):\n\t\tif inp_p_arr[j]-inp_p_arr[j+1] == 1:\n\t\t\tpar_che += 1\n\t\telse:\n\t\t\tif par_che %2==1:\n\t\t\t\tcount+=1\n\t\t\tpar_che = 1\n\n\tprint(count)"]