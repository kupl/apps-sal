["import itertools\nimport math\n\ndef minusv(L):\n    return [-x for x in L]\n\ndef adamar(M):\n    return [L*2 for L in M] + [L + minusv(L) for L in M]\n\nk = int(input())\na = [[1]]\nfor i in range(k):\n    a = adamar(a)\nfor L in a:\n    print(''.join(['+' if c==1 else '*' for c in L]))\n\n", "def vec(x):\n\tif x == 0:\n\t\treturn [[1]]\n\ts = vec(x-1)\n\ty = vec(x-1)\n\tfor i in range(2**(x-1)):\n\t\tfor j in range(2**(x-1)):\n\t\t\ty[i][j] = -y[i][j]\n\tout = [s[i]+y[i] for i in range(2**(x-1))]\n\tout2 = [s[i]+s[i] for i in range(2**(x-1))]\n\treturn (out+out2)\nx = int(input())\ns=vec(x)\nfor i in range(2**x):\n\tret = \"\"\n\tfor j in range(2**x):\n\t\tif s[i][j] == 1:\n\t\t\tret+=\"+\"\n\t\telse:\n\t\t\tret+=\"*\"\n\tprint(ret)\n", "def anti(s):\n    return \"\".join(['+' if s[i] == '*' else '*' for i in range(len(s))])\n\nk = int(input())\nresult = [[] for i in range(k + 2)]\nresult[0] = [ '+' ]\nfor i in range(1, k + 1):\n    for e in result[i - 1]:\n        result[i] += [e + e]\n        result[i] += [e + anti(e)]\n                \nprint(\"\\n\".join(result[k]))\n", "import sys\n\ndef check(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = 0\n            for k in range(n):\n                if arr[i][k] == arr[j][k]:\n                    diff += 1\n                else:\n                    diff -= 1\n            if diff:\n                return (arr[i], arr[j])\n    return False\n\ndef inv(arr):\n    return [(not x) for x in arr]\n\ndef gen(n):\n    if n == 1:\n        return [[True]]\n    curr = gen(n // 2)\n    ans = []\n    ans.extend((x +     x  for x in curr))\n    ans.extend((x + inv(x) for x in curr))\n    return ans\n\nk = int(input())\nans = gen(2 ** k)\nfor x in ans:\n    sys.stdout.write(\"\".join([\"+\" if el else \"*\" for el in x]))\n    sys.stdout.write(\"\\n\")", "k = int(input())\n\na = [['' for _ in range(2 ** k)] for _ in range(2 ** k)]\na[0][0] = '+'\n\nfor m in range(1, k+1):\n    p = 2 ** (m - 1)\n    for i in range(p):\n        for j in range(p):\n            a[p+i][j] = a[i][j]\n            if i % 2 == 0:\n                a[i][p+j] = '*' if a[i][j] == '+' else '+'\n                a[p+i][p+j] = a[i][j]\n            else:\n                a[i][p+j] = a[i][j]\n                a[p+i][p+j] = '*' if a[i][j] == '+' else '+'\n\nprint('\\n'.join(''.join(x) for x in a))\n", "def minusv(L):\n    return [-x for x in L]\n\ndef adamar(M):\n    return [L*2 for L in M] + [L + minusv(L) for L in M]\n\nk = int(input())\na = [[1]]\nfor i in range(k):\n    a = adamar(a)\nfor L in a:\n    print(''.join(['+' if c==1 else '*' for c in L]))\n", "__author__ = 'Utena'\ndef t(x):\n    a=''\n    for l in x:\n        if l=='+':\n            a+='*'\n        elif l=='*':\n            a+='+'\n    return a\nk=int(input())\nif k==0:\n    print('+')\n    return\nm=['++','+*']\ns=1\nfor i in range(k-1):\n    m=m+m\n    s*=2\n    for j in range(s):\n        m[j]+=m[j]\n        m[s+j]+=t(m[s+j])\nfor y in m:\n    print(y)", "Not = lambda x: '+' if x == '*' else '*'\nk = int(input())\nn = 2 ** k\na = [['+'] * n for i in range(n)]\nfor p in range(k):\n    n = 2 ** p\n    for i in range(n):\n        for j in range(n):\n            a[i][j + n] = a[i][j]\n            a[i + n][j] = a[i][j]\n            a[i + n][j + n] = Not(a[i][j])\n[print(''.join(map(str, i))) for i in a]\n", "def rev(i):\n    t=\"\"\n    for x in i:\n        if x==\"+\":\n            t+=\"*\"\n        else:\n            t+=\"+\"\n    return t\ndef f(n):\n    if n==1:\n        return [\"++\",\"+*\"]\n    x=f(n-1)\n    p=list(i+i for i in x)\n    p=p+list(i+rev(i) for i in x)\n    return p\nN=int(input())\nif N==0:\n    print(\"+\")\nelse:\n    t=f(N)\n    for i in t:\n        print(i)", "import sys\nif False:\n\tinp = open('C.txt', 'r')\nelse:\n\tinp = sys.stdin\n\ndef inverse(string):\n\tans = ''\n\tfor char in string:\n\t\tif char == '*':\n\t\t\tans += '+'\n\t\telse:\n\t\t\tans += '*'\n\treturn ans\n\ndef recursion(k):\n\tif k == 0:\n\t\treturn ['+']\n\tans = recursion(k-1)\n\tans = ans + ans\n\tfor i in range(2**(k-1)):\n\t\tans[i] = 2*ans[i]\n\t\tans[i + 2**(k-1)] += inverse(ans[i + 2**(k-1)])\n\treturn ans\nk = int(inp.readline())\n\nfor string in recursion(k):\n\tprint(string)\n\n", "def neg(a):\n    if(a=='+'):\n        return '*'\n    else:\n        return '+'\ndef gen(s,e,k,l,a):\n    if((s+1)<e):\n        mid=int((s+e)/2)\n        a[mid]=[];\n        for i in range (0,pow(2,l)):\n            a[mid].append(a[s][i])\n        for i in range (pow(2,l),pow(2,(l+1))):\n            a[mid].append(neg(a[s][i]))\n        for i in range (pow(2,(l+1)),k):\n            a[mid].append(a[mid][int(i%pow(2,(l+1)))])\n        gen(s,mid,k,l+1,a)\n        gen(mid,e,k,l+1,a)\n    return\ndef print_l(a,n):\n    b=\"\"\n    for i in range (0,n):\n        b+=str(a[i])\n    print(b)\n    return\nn=int(input())\na=[None]*(pow(2,n))\na[0]=['+']*pow(2,n)\ngen(0,pow(2,n),pow(2,n),0,a)\nfor i in range (0,pow(2,n)):\n    print_l(a[i],pow(2,n));\n", "def f(k):\n    if(k == '+'):\n        return '*'\n    else:\n        return '+'\n\ndef g(k):\n    s = []\n    for c in k:\n        s.append(f(c))\n    return ''.join(s)\n\n\ndef solve(k):\n    if(k == 0):\n        return ['+']\n    else:\n        h = solve(k - 1)\n        n = 1 << k\n        q = n >> 1\n        for i in range(q):\n            h.append(h[i] + g(h[i]))\n            h[i] += h[i]\n        return h\n\nk = int(input())\nh = solve(k)\nfor a in h:\n    print(a)", "k = int(input())\n\na = [['' for _ in range(2 ** k)] for _ in range(2 ** k)]\na[0][0] = '+'\n\nfor m in range(1, k+1):\n    p = 2 ** (m - 1)\n    for i in range(p):\n        for j in range(p):\n            a[p+i][j] = a[i][j]\n            if i % 2 == 0:\n                a[i][p+j] = '*' if a[i][j] == '+' else '+'\n                a[p+i][p+j] = a[i][j]\n            else:\n                a[i][p+j] = a[i][j]\n                a[p+i][p+j] = '*' if a[i][j] == '+' else '+'\n\nprint('\\n'.join(''.join(x) for x in a))", "from functools import reduce\nfrom operator import *\nfrom math import *\nfrom sys import *\nfrom string import *\nfrom collections import *\nsetrecursionlimit(10**7)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nRI=lambda: list(map(int,input().split()))\nRS=lambda: input().rstrip().split()\n#################################################\ndef inv(x):\n    s=\"\"\n    for i in x:\n        s+= \"+*\"[i=='+']\n    return s\nx=['+']\nn=RI()[0]\nfor i in range(n):\n    t=[]\n    for j in range(len(x)):\n        t.append(x[j]+x[j])\n        t.append(x[j]+inv(x[j]))\n    x=t\nprint(*x, sep='\\n')\n\n\n", "k = int(input())\n\nif (k == 0):\n    print('+')\n    return\n\nanswer = [['+', '+'], ['+', '*']]\nlength = 2\nfor i in range(k - 1):\n    new = []\n    for i in answer:\n        temp = []\n        for j in range(length):\n            if i[j] == '+':\n                temp += ['+', '+']\n            else:\n                temp += ['*', '*']\n        new.append(temp)\n    for i in answer:\n        temp = []\n        for j in range(length):\n            if i[j] == '+':\n                temp += ['+', '*']\n            else:\n                temp += ['*', '+']\n        new.append(temp)\n    answer = new\n    length *= 2\n\nprint('\\n'.join([''.join(i) for i in answer]))\n", "#!/usr/bin/env python3\nimport sys\n\ndef flatten(iter_lst):\n    return list(item for iter_ in iter_lst for item in iter_)\n\ndef repeatPattern(a, b, totalLength):\n\n  totalLength = len(a)*len(b)\n  ret = [None]*totalLength\n  x = 0\n  for i in a:\n    for j in b:\n      ret[x] = i*j\n      x += 1\n  return tuple(ret)\n\ndef vectors(k):\n  if k == 0:\n    return set([(1,)])\n  if k == 1:\n    return set(((1, 1), (1, -1)))\n  else:\n    vk = vectors(k-1)\n    ret = set()\n    for a in vectors(1):\n      for b in vk:\n        ret.add(repeatPattern(a, b, None))\n    return ret\n\ndef string(v):\n  return ''.join(\"+\" if i == 1 else \"*\" for i in v)\n\ndef strings(k):\n  return list(map(string, vectors(k)))\n\nN = int(input())\nfor s in strings(N):\n  print(s)\n# for _ in range(100):\n#   strings(N)\n", "def solve():\n    K = int(input())\n\n    e = [[\"++\", \"**\"], [\"+*\", \"*+\"]]\n    vs = [\"+\"]\n    for i in range(K):\n        nv = []\n        for j in range(2):\n            for v in vs:\n                x = []\n                for c in v:\n                    x.append(e[j][0] if c == '+' else e[j][1])\n                nv.append(''.join(x))\n        vs = nv\n\n    for v in vs:\n        print(v)\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "n=int(input())\nk=0\nv=[[1]]\nwhile(k<n):\n    k=k+1\n    #print(v)\n    for i in range(len(v)):\n        v[i].extend(v[i])\n    #print(v)\n    for i in range(len(v)):\n        v2=[]\n        for j in range(len(v[i])):\n            v2.append(v[i][j])\n        v.append(v2)\n    #print(v)\n    for i in range(int(len(v)/2),len(v)):\n        for j in range(int(len(v[i])/2),len(v[i])):\n            #print(i,j)\n            v[i][j] = v[i][j]*(-1)\n    #print(v)\nfor i in range(len(v)):\n    for j in range(len(v)):\n        if(v[i][j]==1):\n            print('+',end=\"\")\n        else:\n            print('*',end=\"\")\n    print()\n"]