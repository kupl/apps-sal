["def main():\n    n, a, z = int(input()), 0, 10 ** 10\n    b, *cc = list(map(int, input().split()))\n    dp = [(0, z, z), (z, 0, z), *[(z, z, z)] * ((n - 1) // 2)]\n    for i, c in enumerate(cc, 1):\n        u, v, w = dp[i // 2 + 1]\n        dz = max(0, c - b + 1)\n        du = max(0, b - c + 1)\n        dw = max(0, min(a - 1, b) - c + 1)\n        for j in range(i // 2, -1, -1):\n            x, y, z = u, v, w\n            u, v, w = dp[j]\n            dp[j + 1] = (x if x < z else z, min(u + du, w + dw), y + dz)\n        a, b = b, c\n    print(' '.join(map(str, list(map(min, dp[1:])))))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from sys import stdin\nfrom math import ceil\nn=int(stdin.readline().strip())\ns=tuple([0]+list(map(int,stdin.readline().strip().split()))+[0])\nlim=ceil(n/2)+1\ndp=[[2000000002 for i in  range(n+1)] for j in range(lim)]\nvis=[[False for i in  range(n+1)] for j in range(lim)]\nfor  i in range(n+1):\n    dp[0][i]=0\nans=[0 for i in range(lim-1)]\nfor i in range(1,lim):\n    for j in range(1,n+1):\n        x=0\n        y=s[j-1]\n        if vis[i-1][j-2]:\n            y=min(y,s[j-2]-1)\n        if y>=s[j]:\n            x=y-s[j]+1\n        if s[j+1]>=s[j]:\n            x+=s[j+1]-s[j]+1\n        if j==1:\n            if dp[i-1][0]+x<=dp[i][j-1]:\n                vis[i][j]=True\n                dp[i][j]=dp[i-1][0]+x\n            else:\n                dp[i][j]=dp[i][j-1]\n        else:\n            if dp[i-1][j-2]+x<=dp[i][j-1]:\n                vis[i][j]=True\n                dp[i][j]=dp[i-1][j-2]+x\n            else:\n                dp[i][j]=dp[i][j-1]\n    ans[i-1]=dp[i][-1]\nprint(*ans)\n", "from sys import stdin\nfrom math import ceil\nn=int(stdin.readline().strip())\ns=tuple([0]+list(map(int,stdin.readline().strip().split()))+[0])\nlim=ceil(n/2)+1\ndp=[[2000000002 for i in  range(n+1)] for j in range(lim)]\nvis=[[False for i in  range(n+1)] for j in range(lim)]\nfor  i in range(n+1):\n    dp[0][i]=0\nans=[0 for i in range(lim-1)]\nfor i in range(1,lim):\n    for j in range(1,n+1):\n        x=0\n        y=s[j-1]\n        if vis[i-1][j-2]:\n            y=min(y,s[j-2]-1)\n        if y>=s[j]:\n            x=y-s[j]+1\n        if s[j+1]>=s[j]:\n            x+=s[j+1]-s[j]+1\n        if j==1:\n            if dp[i-1][0]+x<=dp[i][j-1]:\n                vis[i][j]=True\n                dp[i][j]=dp[i-1][0]+x\n            else:\n                dp[i][j]=dp[i][j-1]\n        else:\n            if dp[i-1][j-2]+x<=dp[i][j-1]:\n                vis[i][j]=True\n                dp[i][j]=dp[i-1][j-2]+x\n            else:\n                dp[i][j]=dp[i][j-1]\n    ans[i-1]=dp[i][-1]\nprint(*ans)", "import math\nimport sys\nimport time\n\nlength = int(input())\n# heights = [random.randint(0, 500) for x in range(0, length)]\nheights = [int(x) for x in input().split(' ')]\nstart = time.time()\ncache = {}\ncache[(length, heights[length - 1])] = []\ncache[(length, heights[length - 2] - 1)] = []\n\ndef min_list(modifyable, modifier):\n    for i in range(0, len(modifier)):\n        if (i == len(modifyable)):\n            modifyable.append(modifier[i])\n        else:\n            modifyable[i] = min(modifyable[i], modifier[i])\n\ndef new_step(index, last_height):\n    height = heights[index]\n    if index == length - 1:\n        return [max(0, last_height - height + 1)]\n    \n    next_height = heights[index + 1]\n\n    result = cache[(index + 1, height)].copy()\n    b = cache[(index + 2, next_height)]\n    min_list(result, b)\n    \n    new_difference = max(0, last_height - height + 1) + max(0, next_height - height + 1)\n    c = [new_difference]\n    d = cache[(index + 2, min(next_height, height - 1))]\n    for value in d:\n        c.append(value + new_difference)\n    min_list(result, c)\n    return result\n\ni = length - 1\nwhile i > 0:\n    cache[(i, heights[i - 1])] = new_step(i, heights[i - 1])\n    \n    if i > 1 and heights[i - 2] <= heights[i - 1]:\n        cache[(i, heights[i - 2] - 1)] = new_step(i, heights[i - 2] - 1)\n\n    i -= 1\n\nprint(' '.join(map(str, new_step(0, -sys.maxsize))))\nend = time.time()\n# print(end - start)\n"]