["n = int(input())\np = [int(i) for i in input().split()]\nfor i in range(n):\n    tmp = [0] * n\n    j = i\n    while tmp[j] != 1:\n        tmp[j] = 1\n        j = p[j] - 1\n    print(j + 1, end = \" \")\n", "n=int(input())\nl=list(map(int,input().strip().split()))\nfor i in range(1,n+1):\n\tl1=[0 for i in range(n+1)]\n\tl1[i]=1\n\tj=l[i-1]\n\twhile(True):\n\t\tif l1[j]==0:\n\t\t\tl1[j]=1\n\t\t\tj=l[j-1]\n\t\telse:\n\t\t\tprint (j,end=\" \")\n\t\t\tbreak\nprint ()\n\n", "n = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    a[i] -= 1\n\nrec = []\nfor i in range(n):\n    s = set()\n    k = i\n    while k not in s:\n        s.add(k)\n        k = a[k]\n\n    rec.append(k + 1)\n\nprint(\" \".join(map(str, rec)))", "n = int(input())\np = input().split(\" \")\nfor i in range(len(p)):\n    p[i] = int(p[i])\nans = []\nfor i in range(len(p)):\n    scores = [0 for _ in range(n)]\n    max_score = 0\n    curr = i\n    while True:\n        #print(scores, curr)\n        scores[curr] += 1\n        if scores[curr] == 2:\n            ans.append(curr + 1)\n            break\n        curr = p[curr] - 1\ns = \"\"\nfor i in range(len(ans)):\n    if i != len(ans) - 1:\n        s += str(ans[i]) + \" \"\n    else:\n        s += str(ans[i])\nprint(s)\n", "n=int(input())\n# for i in range(t):\np=list(map(int,input().strip().split()))\n\nl=[0]*n\n\n\nfor i in range(1,n+1):\n    l=[0]*(n+1)\n    j=i\n    while(l[j]!=1):\n        l[j]=l[j]+1\n        j=p[j-1]\n    print(j,end=\" \")", "import sys\nimport io\n\nstream_enable = 0\n\ninpstream = \"\"\"\n3\n2 3 2\n\"\"\"\n\nif stream_enable:\n    sys.stdin = io.StringIO(inpstream)\n    input()\n\ndef inpmap():\n    return list(map(int, input().split()))\n\nn = int(input())\narr = [x - 1 for x in inpmap()]\nfor i in range(n):\n    vis = [0] * n\n    p = i\n    while True:\n        if vis[p]:\n            print(p + 1, end=' ')\n            break\n        vis[p] = 1\n        p = arr[p]\nprint()\n", "from sys import stdin\nfrom math import *\n\nline = stdin.readline().rstrip().split()\nn = int(line[0])\n\nnumbers = list(map(int, stdin.readline().rstrip().split()))\n\n\n\nfor i in range(n):\n    point = i + 1\n    holed = [False] * n\n    while not holed[point-1]:\n        holed[point-1] = True\n        point = numbers[point-1]\n    print(point, end=\" \")\n\n", "n=int(input())\nl=list(map(int,input().split()))\n\nfor i in range(n):\n    p=[0]*n\n    j=i\n    while p[j]!=2:\n        p[j]+=1\n        j=l[j]-1\n    print(j+1,end=' ')", "n = int(input())\nls = list(map(int,input().split()))\nrls =[]\nfor i in range(n):\n  mls = [0]*n\n  mls[i]+=1\n  up = i\n  for j in range(n):\n    up = ls[up]-1\n    mls[up]+=1\n    if(mls[up]==2):\n      rls.append(up+1)\n      break\nprint(*rls)", "n=int(input())\narr=list(map(int,input().split()))\narr.insert(0,0)\narrx=[]\nfor i in range(1,n+1):\n    arr1=[0]*(n+1)\n    arr1[i]=1\n    flag=0\n    k=i\n    ans=-1\n    while(flag==0):\n        if(arr1[arr[k]]==1):\n            ans=arr[k]\n            flag=1\n            break\n        else:\n            arr1[arr[k]]=1\n            k=arr[k]\n    arrx.append(ans)\nprint(*arrx)\n", "n=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n    z=[0]*n\n    z[i]+=1\n    j=i\n    while z[j]!=2:\n        j=a[j]-1\n        z[j]+=1\n    print(j+1,end=' ')\n        \n", "from math import sqrt, floor\nfrom collections import defaultdict\n\nn = int(input())\np = list(map(int, input().split()))\ndic = defaultdict(int)\n\nfor i in range(n):\n    dic[i + 1] = p[i]\n\nans = [0]\nfor i in range(1, n + 1):\n    dic_ = defaultdict(int)\n    dic_[i] += 1\n    tmp = dic_[i]\n    cur = i\n    while tmp != 2:\n        cur = dic[cur]\n        dic_[cur] += 1\n        tmp = dic_[cur]\n    #     print(cur, tmp, sep=' ')\n    # print()\n    print(cur, end=' ')", "n=int(input())\na=list(map(int,input().split()))\nb=[0]*(n+1)\nq=[]\nfor i in range(1,n+1):\n    b[i]=a[i-1]\nfor i in range(1,n+1):\n    c=[0]*(n+1)\n    c[i]=1\n    x=i\n    while(1):\n        x=b[x]\n        if c[x]==1:\n            q.append(x)\n            break\n        else:\n            c[x]=1\nprint(*q)            \n        \n", "def main():\n    n = int(input())\n    a = [int(x) - 1 for x in input().split()]\n\n    for i, s1 in enumerate(a):\n        visited = {i}\n\n        next = s1\n        while next not in visited:\n            visited.add(next)\n            next = a[next]\n\n        print(next + 1, end=' ')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "USE_STDIO = False\n\nif not USE_STDIO:\n    try: import mypc\n    except: pass\n\ndef main():\n    n, = list(map(int, input().split(' ')))\n    p = [x-1 for x in map(int, input().split(' '))]\n    ans = [-1] * n\n    for i in range(n):\n        cnts = [0] * n\n        j = i\n        while True:\n            cnts[j] += 1\n            if cnts[j] == 2:\n                ans[i] = j + 1\n                break\n            j = p[j]\n    print(*ans)\n\n\n\n    pass\n\ndef __starting_point():\n    main()\n\n\n\n\n__starting_point()", "def f(i, a):\n\tused = [False] * n\n\twhile not used[i]:\n\t\tused[i] = True\n\t\ti = a[i] - 1\n\treturn i\n\t\n\nn = int(input())\na = [int(i) for i in input().split()]\nfor i in range(n):\n\tprint(f(i, a) + 1, end = ' ')", "n = int(input())\np = [int(x) for x in input().split()]\nans = []\nfor i in range(n):\n    mask = [0]*n\n    st = [i]\n    while len(st) > 0:\n        a = st.pop()\n        if mask[a] == 1:\n            ans.append(str(a+1))\n            break\n        mask[a] = 1\n        st.append(p[a]-1)\nprint(' '.join(ans))\n\n", "3\n\ndef solve(N, A):\n    ans = []\n    for a in range(N):\n        visited = bytearray(N)\n        p = a\n        while True:\n            if visited[p] == 1:\n                ans.append(p + 1)\n                break\n            visited[p] = 1\n            p = A[p] - 1\n\n    return ans\n\n\ndef main():\n    N = int(input())\n    A = [int(e) for e in input().split(' ')]\n    assert len(A) == N\n    print(*solve(N, A))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nS = [int(x) for x in input().split(\" \")]\nlookup = {}\n\nfor i, v in enumerate(S):\n    lookup[i+1] = v\n\nfor i in range(1, N + 1):\n    visited = {}\n    student = i\n\n    while not (student in visited):\n        visited[student] = True\n        student = lookup[student]\n\n    print(student, end=\" \")\n", "n = int(input())\nl = [-1]+list(map(int,input().split()))\nfor i in range(1,n+1):\n    x = [0]*(n+1)\n    x[i]+=1\n    z = i\n    while(1):\n        x[l[z]]+=1\n        if(x[l[z]]==2):\n            print(l[z],end=' ')\n            break\n        z = l[z]", "import sys\nimport os\n\ndef dfs(p, result, visited, start):\n    q = [start]\n    ret = None\n    while len(q) > 0:\n        s = q[len(q) - 1]\n        if ret is not None:\n            visited.remove(s)\n            r = ret\n            if r - 1 in visited:\n                result[s] = s + 1\n            else:\n                result[s] = r\n            q.pop()\n            continue\n\n        if result[s] > 0:\n            ret = result[s]\n            q.pop()\n            continue\n        if s in visited:\n            ret = s + 1\n            q.pop()\n            continue\n\n        next = p[s] - 1\n        visited.add(s)\n        q.append(next)\n\ndef solve(p):\n    n = len(p)\n    result = [-1] * n\n    visited = set()\n    for i in range(n):\n        if i not in visited:\n            dfs(p, result, visited, i)\n\n    return result\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    print(' '.join(map(str, solve(p))))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\nfrom sys import stdin, stdout\n\ndef rint():\n    return map(int, stdin.readline().split())\n#lines = stdin.readlines()\n\nn = int(input())\np = list(rint())\np = [0] + p\n\nans = []\nfor i in range(1, n+1):\n    cnt = [0]*(n+1)\n    a = i\n    cnt[a] +=1\n    while True:\n        if cnt[a] == 2:\n            ans.append(a)\n            break\n        cnt[p[a]] += 1\n        a = p[a]\n\nprint(*ans)", "n = int(input())\np = list(map(int, input().split()))\n\nans = list()\nfor i in range(n):\n    co = [0 for i in range(n)]\n    co[i] = 1\n\n    k = i\n    for j in range(n):\n        k = p[k] - 1\n\n        if co[k]:\n            ans.append(k + 1)\n            break\n\n        co[k] += 1\n\nprint(' '.join(map(str, ans)))\n", "\nn = int(input())\npointers = list([int(x) - 1 for x in input().split()])\nresults = []\n\nfor i in range(n):\n    visited = [False] * n\n    while not visited[i]:\n        visited[i] = True\n        i = pointers[i]\n    results.append(str(i+1))\n\nprint(' '.join(results))\n\n", "n = int(input())\ninp = [int(i) - 1 for i in input().split()]\nans = []\nfor i in range(n):\n    a = [False] * n\n    ii = i\n    while not a[ii]:\n        a[ii] = True\n        ii = inp[ii]\n    ans.append(ii + 1)\nprint(*ans)\n"]