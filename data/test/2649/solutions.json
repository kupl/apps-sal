["n = int(input())\na = []\nb = []\nfor i in range(n):\n  x,y = list(map(int, input().split()))\n  a.append(x+y)\n  b.append(x-y)\na.sort()\nb.sort()\n\nans = a[-1]-a[0]\nc = b[-1]-b[0]\nprint((max(ans,c)))\n", "\n\ndef main():\n    n = int(input())\n    z = [[], []]\n    for i in range(n):\n        x, y = list(map(int, input().split()))\n        z[0].append(x + y)\n        z[1].append(x - y)\n    z[0] = sorted(z[0])\n    z[1] = sorted(z[1])\n    print((max(z[0][-1] - z[0][0], z[1][-1] - z[1][0])))\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def mdmax(x):\n    a = []\n    b = []\n    for i in range(len(x)):\n        a.append(x[i][0] - x[i][1])\n        b.append(x[i][0] + x[i][1])\n    return max(max(a) - min(a), max(b) - min(b))\n\nn = int(input())\ndata = []\nfor i in range(n):\n    ininput_data = input()\n    input_data = list(map(int, ininput_data.split()))\n    data.append(input_data)\nprint(mdmax(data))", "N = int(input())\na,b = [], []\nfor i in range(N):\n  x,y = map(int, input().split())\n  a.append(x+y)\n  b.append(x-y)\na.sort()\nb.sort()\nans = max(a[-1] - a[0], b[-1] - b[0])\nprint(ans)", "n = int(input())\n\nx, y = [], []\nfor i in range(n):\n    xi, yi = map(int, input().split())\n    x.append(xi+yi)\n    y.append(xi-yi)\n\nx.sort()\ny.sort()\n\nans = max((x[-1]-x[0]), (y[-1]-y[0]))\nprint(ans)", "n = int(input())\nxy = [list(map(int, input().split())) for i in range(n)]\nans = []\nl = [xy[i][0]+xy[i][1] for i in range(n)]\nans.append(max(l)-min(l))\nl = [xy[i][0]-xy[i][1] for i in range(n)]\nans.append(max(l)-min(l))\nl = [-xy[i][0]+xy[i][1] for i in range(n)]\nans.append(max(l)-min(l))\nl = [-xy[i][0]-xy[i][1] for i in range(n)]\nans.append(max(l)-min(l))\nprint(max(ans))", "n=int(input())\nzp=[]\nzl=[]\nfor i in range(n):\n    a,b=map(int,input().split())\n    zp.append(a+b)\n    zl.append(a-b)\nans=max((max(zp)-min(zp)),(max(zl)-min(zl)))\nprint(ans)", "def solve(n, x, y):\n    z = [u + v for u, v in zip(x, y)]\n    w = [u - v for u, v in zip(x, y)]\n    return max([max(z) - min(z), max(w) - min(w)])\n\nn = int(input())\nx, y = zip(*[map(int, input().split()) for i in range(n)])\nprint(solve(n, x, y))", "N=int(input())\nA=[]\nB=[]\nfor _ in range(N):\n    x,y=map(int, input().split())\n    A.append(x+y)\n    B.append(x-y)\n\nA=sorted(A)\nB=sorted(B)\n\nprint(max(A[-1]-A[0],B[-1]-A[0],A[-1]-A[0],B[-1]-B[0]))", "n = int(input())\nu = []\nv = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    u.append(x + y)\n    v.append(x - y)\n    \nu.sort()\nv.sort()\nprint(max(u[-1] - u[0], v[-1] - v[0]))", "import sys\n\ndef solve():\n    input = sys.stdin.readline\n    N = int(input())\n    dx = []\n    dy = []\n    for _ in range(N):\n        x, y = map(int, input().split())\n        dx.append(x + y)\n        dy.append(x - y)\n    dx.sort()\n    dy.sort()\n    print(max(dx[N-1] - dx[0], dy[N-1] - dy[0]))\n\n    return\n\ndef __starting_point():\n    solve()\n__starting_point()", "n=int(input())\na,b,c,d=-10**9,10**9,-10**9,10**9\nfor _ in range(n):\n\tx,y=map(int,input().split())\n\ta=max(a,x+y)\n\tb=min(b,x+y)\n\tc=max(c,x-y)\n\td=min(d,x-y)\nprint(max(a-b,c-d))", "n=int(input())\nxy=[list(map(int, input().split())) for i in range(n)]\nz=list(map(lambda x: x[0]+x[1], xy))\nw=list(map(lambda x: x[0]-x[1], xy))\nprint(max(max(z)-min(z), max(w)-min(w)))", "N = int(input())\nx, y = map(int, input().split())\nd = [x - y, x - y, x + y, x + y]\nfor i in range(1,N):\n  x, y = map(int, input().split())\n  d[0] = max(d[0], x-y)\n  d[1] = min(d[1], x-y)\n  d[2] = max(d[2], x+y)\n  d[3] = min(d[3], x+y)\nprint(max(d[0]-d[1], d[2]-d[3]))", "# coding: utf-8\n# Your code here!\nN=int(input())\n\nZ=[]\nW=[]\n\nfor _ in range(N):\n    x,y=map(int,input().split())\n    Z.append(x+y)\n    W.append(x-y)\n    \nprint(max(max(Z)-min(Z),max(W)-min(W)))", "n = int(input())\nxy_array = [list(map(int, input().split())) for _ in range(n)]\n\nth = pow(10, 9)\nright_up_max = -th\nleft_down_min = th\nleft_up_max = -th\nright_down_min = th\n\nfor x, y in xy_array:\n    right_up_max = max(x + y, right_up_max)\n    left_down_min = min(x + y, left_down_min)\n    left_up_max = max(x - y, left_up_max)\n    right_down_min = min(x - y, right_down_min)\n\nans = max(right_up_max - left_down_min, left_up_max - right_down_min)\nprint(ans)", "# import itertools\n# import math\n# from functools import reduce\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n# from collections import deque\n# import heapq\n\n# \u5165\u529b\nN = int(input())\n# S = input()\n# n, *a = map(int, open(0))\n# H, N = map(int, input().split())\n# A = list(map(int, input().split()))\n# A = list(map(lambda x: int(x)*(-1), input().split()))\n# B = list(map(int, input().split()))\nx_y = [list(map(int,input().split())) for _ in range(N)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# edges = [list(map(int,input().split())) for _ in range(N - 1)]\n# tree = [[] for _ in range(N + 1)]\n\n# for edge in edges:\n#     tree[edge[0]].append(edge[1])\n#     tree[edge[1]].append(edge[0])\n\n# depth = [-1] * (N + 1)\n# depth[1] = 0\n# count = [0] * (N + 1)\n\n# for i in range(Q):\n#     p, x = map(int, input().split())\n#     count[p] += x\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + 1\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# \u7d20\u56e0\u6570\u5206\u89e3\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\n#         arr.append([n, 1])\n#     return arr\n\n# \u7d04\u6570\u5217\u6319\n# def make_divisors(n):\n#     lower_divisors , upper_divisors = [], []\n#     i = 1\n#     while i*i <= n:\n#         if n % i == 0:\n#             lower_divisors.append(i)\n#             if i != n // i:\n#                 upper_divisors.append(n//i)\n#         i += 1\n#     return lower_divisors + upper_divisors[::-1]\n\n# bfs\n# tree = [[] for _ in range(N + 1)]\n# edges = [list(map(int,input().split())) for _ in range(M)]\n\n# for edge in edges:\n#     tree[edge[0]].append(edge[1])\n#     tree[edge[1]].append(edge[0])\n\n# depth = [-1] * (N + 1)\n# depth[1] = 0\n\n# d = deque()\n# d.append(1)\n\n# ans = [0] * (N + 1)\n# while d:\n#  v = d.popleft()\n#  for i in tree[v]:\n#    if depth[i] != -1:\n#      continue\n#    depth[i] = depth[v] + 1\n#    ans[i] = v\n#    d.append(i)\n\n# # ans = depth[2:]\n# print('Yes')\n# print(*ans[2:], sep=\"\\n\")\n\n# def gcd_list(numbers):\n#     return reduce(math.gcd, numbers)\n\n# # \u9ad8\u901f\u7d20\u56e0\u6570\u5206\u89e3\u6e96\u5099\n# MAXN = 10**6+10\n# sieve = [i for i in range(MAXN+1)]\n# p = 2\n# while p*p <= MAXN:\n#     if sieve[p] == p:\n#         for q in range(2*p, MAXN+1, p):\n#             if sieve[q] == q:\n#                 sieve[q] = p\n#     p += 1\n\n\n# 45\u5ea6\u56de\u8ee2\nZ = []\nW = []\nfor l in x_y:\n    Z.append(l[0] + l[1])\n    W.append(l[0] - l[1])\n\nprint(max((max(Z) - min(Z)), (max(W) - min(W))))", "a,b=[],[]\nn=int(input())\nfor _ in range(n):\n  x,y=map(int,input().split())\n  a+=[x-y]\n  b+=[x+y]\nprint(max(max(a)-min(a),max(b)-min(b)))", "n=int(input())\na,b=[],[]\nfor i in range(n):\n  x,y=list(map(int,input().split()))\n  a.append(x+y)\n  b.append(x-y)\nprint((max(max(a)-min(a),max(b)-min(b))))\n", "N = int(input())\na = []\nb = []\nfor i in range(N):\n  x,y = map(int, input().split())\n  a.append(x+y)\n  b.append(x-y)\n\na.sort()\nb.sort()\nans = max(a[-1] - a[0], b[-1] - b[0])\nprint(ans)", "n = int(input())\na = [0] * n\nb = [0] * n\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    a[i] = x + y\n    b[i] = x - y\nprint((max(max(a) - min(a), max(b) - min(b))))\n", "N=int(input())\n\na,b=[],[]\n\nfor i in range(N):\n  x,y=map(int,input().split())\n  a.append(x+y)\n  b.append(x-y)\na.sort()\nb.sort()\n\nans=max(a[-1]-a[0],b[-1]-b[0])\nprint(ans)", "n=int(input())\na=[]\nj=k=0\ndef s(a):\n    return a[0]+a[1]\ndef ss(a):\n    return a[0]-a[1]\nfor i in range(n):\n    f=list(map(int,input().split()))\n    a.append(f)\naa=min(map(s,a))\nb=max(map(s,a))\nc=min(map(ss,a))\nd=max(map(ss,a))\nprint(max(abs(d-c),abs(b-aa)))", "n = int(input())\na, b = [], []\nfor _ in range(n):\n    x, y = map(int, input().split())\n    a.append(x+y)\n    b.append(x-y)\n \na.sort()\nb.sort()\n \nans = max(a[-1]-a[0], b[-1]-b[0])\nprint(ans)", "n=int(input())\nl=[]\nar=[]\nbr=[]\nfor i in range(n):\n  l.append(list(map(int,input().split())))\n  ar.append(l[-1][0]+l[-1][1])\n  br.append(l[-1][0]-l[-1][1])\nar.sort()\nbr.sort()\nan=max(abs(ar[-1]-ar[0]),abs(br[-1]-br[0]))\nprint(an)", "N = int(input())\nXY = [list(map(int, input().split())) for _ in range(N)]\n\nz = []\nw = []\nfor x, y in XY:\n    z.append(x + y)\n    w.append(x - y)\n\nprint(max(max(z) - min(z), max(w) - min(w)))", "n=int(input())\nmaxa=maxb=-2e9\nmina=minb=2e9\nfor i in range(n):\n  x,y=list(map(int,input().split()))\n  maxa=max(maxa,x+y)\n  mina=min(mina,x+y)\n  maxb=max(maxb,x-y)\n  minb=min(minb,x-y)\nprint((max(maxa-mina,maxb-minb)))\n", "N = int(input())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\nL1 = [0]*N\nL2 = [0]*N\nfor i in range(N):\n    L1[i] = L[i][0]+L[i][1]\n    L2[i] = L[i][0]-L[i][1]\n\nL1.sort()\nL2.sort()\nprint(max(L1[-1]-L1[0], L2[-1]-L2[0]))", "N = int(input())\nxy = [list(map(int, input().split())) for _ in range(N)]\n\nadd = sorted([x+y for x, y in xy])\nsub = sorted([x-y for x, y in xy])\n\nprint(max(add[-1]-add[0], sub[-1]-sub[0]))", "n=int(input())\nlx=[]\nly=[]\nfor i in range(n):\n  x,y=map(int,input().split())\n  lx.append(x+y)\n  ly.append(x-y)\nprint(max(max(lx)-min(lx),max(ly)-min(ly)))", "N = int(input())\nl0 = [[int(i) for i in input().split()] for _ in range(N)]\nl1 = [0] * N\nl2 = [0] * N\nfor cnt, val in enumerate(l0):\n    l1[cnt] = val[0] + val[1]\n    l2[cnt] = val[0] - val[1]\nl1.sort()\nl2.sort()\nprint((max(l1[-1] - l1[0], l2[-1] - l2[0])))\n", "def main():\n    n = int(input())\n    xym, xyM, x_ym, x_yM = 10**9, -10**9, 10**9, -10**9\n    for _ in range(n):\n        x, y = map(int, input().split())\n        xy, x_y = x+y, x-y\n        xym, xyM, x_ym, x_yM = min(xym, xy), max(xyM, xy), min(x_ym, x_y), max(x_yM, x_y)\n    print(max(xyM-xym, x_yM-x_ym))\n\ndef __starting_point():\n    main()\n__starting_point()", "N=int(input())\nA=[0]*(N)\nB=[0]*(N)\nfor i in range(N):\n    x,y=map(int, input().split())\n    A[i]=x+y\n    B[i]=x-y\n\nA=sorted(A)\nB=sorted(B)\n\nprint(max(A[-1]-A[0],B[-1]-A[0],A[-1]-A[0],B[-1]-B[0]))", "n = int(input())\nu = []\nv = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    u.append(x + y)\n    v.append(x - y)\n    \nu.sort()\nv.sort()\nprint(max(u[-1] - u[0], v[-1] - v[0]))", "N = int(input())\nA = []; B = []\nfor i in range(N):\n  x,y = map(int,input().split())\n  a = x+y; A.append(a)\n  b = x-y; B.append(b)\nA.sort();B.sort()\nMax_A = A[-1] - A[0]\nMax_B = B[-1] - B[0]\nans = max(Max_A,Max_B)\nprint(ans)", "import sys\n\nleft_right_max = 0\nleft_right_min = float('inf')\nright_left_max = float('-inf')\nright_left_min = float('inf')\nr3_max = float('-inf')\nr3_min = float('inf')\n\nn = int(sys.stdin.readline().strip())\n\nfor idx in range(n):\n    x, y = sys.stdin.readline().strip().split(' ')\n    x = int(x)\n    y = int(y)\n\n    left_right_tmp = x + y\n    if left_right_tmp > left_right_max:\n        left_right_max = left_right_tmp\n      \n    if left_right_tmp < left_right_min:\n        left_right_min = left_right_tmp\n        #res_lr[2] = (x, y)\n\n    right_left_tmp = x - y\n    if right_left_tmp > right_left_max:\n        right_left_max = right_left_tmp\n        #res_rl[1] = (x, y)\n    if right_left_tmp < right_left_min:\n        right_left_min = right_left_tmp\n        #res_rl[2] = (x, y)\n        \n    r3_tmp = y - x\n    if r3_tmp > r3_max:\n        r3_max = r3_tmp\n        #res_3[1] = (x, y)\n    if r3_tmp < r3_min:\n        r3_min = r3_tmp\n        #res_3[2] = (x, y)\n\nreslr_dist = left_right_max - left_right_min\nresrl_dist = right_left_max - right_left_min\nres3_dist = r3_max - r3_min\n\nprint((max(resrl_dist, reslr_dist, res3_dist)))\n", "N = int(input())\nlst = []\nfor i in range(N):\n    lst.append(tuple(map(lambda i: int(i), input().split())))\nlstP = [xy[0]+xy[1] for xy in lst]\nlstM = [xy[0]-xy[1] for xy in lst]\nlstP, lstM\nz = max(lstP) - min(lstP)\nw = max(lstM) - min(lstM)\nprint(max(z,w))", "import sys\nfrom operator import itemgetter\n\nN = int(input())\nV = set()\nfor s in sys.stdin.readlines():\n    x, y = list(map(int, s.split()))\n    V.add((x + y, x - y))\n\ny_max = max(V, key=itemgetter(1))[1]\ny_min = min(V, key=itemgetter(1))[1]\nx_max = max(V, key=itemgetter(0))[0]\nx_min = min(V, key=itemgetter(0))[0]\n\nprint((max(x_max - x_min, y_max - y_min)))\n", "N = int(input())\na = list()\nb = list()\nfor i in range(N):\n  x,y = map(int, input().split())\n  a.append(x+y)\n  b.append(x-y)\na.sort()\nb.sort()\nans = max(a[-1] - a[0], b[-1] - b[0])\nprint(ans)", "def get_ints():\n    return list(map(int,input().split()))\n\nn = int(input())\na, b = [], []\nfor i in range(n):\n    x, y = get_ints()\n    a.append(x-y)\n    b.append(x+y)\n\na.sort()\nb.sort()\nans = max(a[-1] - a[0], b[-1] - b[0])\nprint(ans)", "\"\"\"AtCoder Beginner Contest 178.\n\nE\n\"\"\"\n\nimport sys\n\n\ndef input() -> str:  # noqa: A001\n    \"\"\"Input.\"\"\"\n    return sys.stdin.readline()[:-1]\n\n\ndef calc(p1: list, p2: list) -> int:\n    \"\"\"Calc Manhattan Distance.\"\"\"\n    return abs(p2[1] - p1[1]) + abs(p2[0] - p1[0])\n\n\ndef main():\n    \"\"\"Run.\"\"\"\n    n = int(input())\n\n    patterns = {\n        'lt': (1, 1),\n        'rt': (-1, 1),\n        'lb': (-1, -1),\n        'rb': (1, -1),\n    }\n\n    points: dict = {k: None for k in list(patterns.keys())}\n\n    for _ in range(n):\n        p = list(map(int, input().split(' ')))\n\n        for k, (x, y) in list(patterns.items()):\n            max_p = points[k]\n\n            if max_p:\n                max_p_pos = (max_p[0] * x) + (max_p[1] * y)\n                p_pos = (p[0] * x) + (p[1] * y)\n                if max_p_pos < p_pos:\n                    points[k] = p\n            else:\n                points[k] = p\n\n    ans = 0\n    for i, p1 in enumerate(points.values()):\n        for p2 in list(points.values())[i + 1:]:\n            ans = max(ans, calc(p1, p2))\n\n    print(ans)\n\n\nmain()\n", "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nX,Y = [None] * N, [None] * N\nfor i in range(N):\n  x,y = list(map(int,readline().split()))\n  X[i],Y[i] = x + y,x - y\n\nprint((max(abs(max(X) - min(X)),abs(max(Y) - min(Y)))))\n", "n = int(input())\na, b = [], []\nfor _ in range(n):\n    x, y = map(int, input().split())\n    a.append(x+y)\n    b.append(x-y)\n\na.sort()\nb.sort()\n\nans = max(a[-1]-a[0], b[-1]-b[0])\nprint(ans)", "#!/usr/bin/env python3\n\n\ndef get_points_and_convert(pts):\n    x, y = pts\n    return x + y, x - y\n\n\ndef main():\n    n = int(input())\n    points = [\n        get_points_and_convert(list(map(int, input().split())))\n        for _ in range(n)\n    ]\n    plus_coords, minus_coords = list(zip(*points))\n    plus_dist = max(plus_coords) - min(plus_coords)\n    minus_dist = max(minus_coords) - min(minus_coords)\n    print((max(plus_dist, minus_dist)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nXY = [[int(_) for _ in input().split()] for _ in range(N)]\nans = -1\nfor dx, dy in ((1, 1), (-1, 1), (-1, -1), (1, -1)):\n    xy2 = [x * dx + y * dy for x, y in XY]\n    ans = max(ans, max(xy2) - min(xy2))\nprint(ans)\n", "N = int(input())\nA = [0]*N\nB = [0]*N\nfor i in range(N):\n  x,y = map(int,input().split())\n  A[i] = x+y\n  B[i] = x-y\na = max(A)-min(A)\nb = max(B)-min(B)\nprint(max(a,b))", "n = int(input())\nl = [[] for i in range(4)]\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    l[0].append(x+y)\n    l[1].append(x-y)\n    l[2].append(-x+y)\n    l[3].append(-x-y)\nfor i in range(4):\n    l[i].sort()\nans = 0\nfor i in range(4):\n    ans = max(ans, l[i][-1] - l[i][0])\nprint(ans)\n", "N = int(input())\na = []\nb = []\nfor i in range(N):\n  x,y = map(int,input().split())\n  a.append(x-y)\n  b.append(x+y)\n  \na.sort()\nb.sort()\nans = max(a[-1] - a[0], b[-1] - b[0])\nprint(ans)", "N=int(input())\nzls=[0 for _ in range(N)]\nwls=[0 for _ in range(N)]\nfor i in range(N):\n  x,y=[int(s) for s in input().split()]\n  zls[i]=x+y\n  wls[i]=x-y\nprint(max([max(zls)-min(zls),max(wls)-min(wls)]))", "n=int(input())\na=[]\nb=[]\nfor i in range(n):\n  x,y=map(int,input().split())\n  a.append(x+y)\n  b.append(x-y)\nprint(max(max(a)-min(a),max(b)-min(b)))", "import sys\nimport re\nimport queue\nfrom math import ceil, floor, sqrt, pi, factorial, gcd\nfrom copy import deepcopy\nfrom collections import Counter, deque\nfrom heapq import heapify, heappop, heappush\nfrom itertools import accumulate, product, combinations, combinations_with_replacement\nfrom bisect import bisect, bisect_left, bisect_right\nfrom functools import reduce\nfrom decimal import Decimal, getcontext\n# input = sys.stdin.readline\ndef i_input(): return int(input())\ndef i_map(): return map(int, input().split())\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\ndef lcm(a, b): return a * b // gcd(a, b)\nsys.setrecursionlimit(10 ** 6)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nnum_list = []\nstr_list = []\n\n\n\ndef main():\n\tN = i_input()\n\n\tx_y_list = []\n\n\tfor i in range(0,N):\n\t\ttmpx,tmpy = i_map()\n\t\tx_y_list.append((tmpx,tmpy))\n\n\tz_list = []\n\tw_list = []\n\tfor i in range(0,N):\n\t\ttmpz = x_y_list[i][0] + x_y_list[i][1]\n\t\ttmpw = x_y_list[i][0] - x_y_list[i][1]\n\t\tz_list.append(tmpz)\n\t\tw_list.append(tmpw)\n\n\tprint(max(max(map(lambda x : (x),z_list))-min(map(lambda x: (x), z_list)),max(map(lambda x : (x),w_list))-min(map(lambda x: (x),w_list))))\n\t\n\treturn\n\n\ndef __starting_point():\n\tmain()\n__starting_point()", "n=int(input())\na,b,c,d=2*10**9,0,10**9,-10**9\n\nfor i in range(n):\n  x,y=list(map(int,input().split()))\n  a=a if a<x+y else x+y\n  b=b if b>x+y else x+y\n  c=c if c<y-x else y-x\n  d=d if d>y-x else y-x\n\nprint((b-a if b-a>d-c else d-c))\n", "n=int(input())\np=[]\nq=[]\nfor _ in range(n):\n  x,y=map(int,input().split())\n  p.append(x+y)\n  q.append(x-y)\nprint(max(max(p)-min(p),max(q)-min(q)))", "n=int(input())\nl=[list(map(int,input().split())) for i in range(n)]\na=10**9\nz_max=-1*a\nz_min=a\nw_max=-1*a\nw_min=a\nfor x,y in l: #\u70b9\u306ex\u5ea7\u6a19\u3068y\u5ea7\u6a19\u306e\u548c\u306e\u6700\u5927\u5024\u3068\u6700\u5c0f\u5024\u306e\u5dee\u304b\u5ea7\u6a19\u306e\u5dee\u306e\u6700\u5927\u5024\u3068\u6700\u5c0f\u5024\u306e\u5dee\u304c\u7b54\u3048\n  z_max=max(z_max,x+y)\n  z_min=min(z_min,x+y)\n  w_max=max(w_max,x-y)\n  w_min=min(w_min,x-y)\nprint(max(z_max-z_min,w_max-w_min))", "n = int(input())\nu = []\nv = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    u.append(x + y)\n    v.append(x - y)\n    \nu.sort()\nv.sort()\nprint(max(u[-1] - u[0], v[-1] - v[0]))", "n = int(input())\nxy_array = [list(map(int, input().split())) for _ in range(n)]\n\nth = pow(10, 9)\nz_max = -th\nz_min = th\nw_max = -th\nw_min = th\n\nfor x, y in xy_array:\n    z_max = max(x + y, z_max)\n    z_min = min(x + y, z_min)\n    w_max = max(x - y, w_max)\n    w_min = min(x - y, w_min)\n\nans = max(z_max - z_min, w_max - w_min)\nprint(ans)", "n = int(input())\n\nxy = []\nfor index in range(n):\n  x, y = map(int, input().split())\n  xy.append([x, y])\n\npos_max = xy[0][0]+xy[0][1]\npos_min = xy[0][0]+xy[0][1]\nneg_max = xy[0][0]-xy[0][1]\nneg_min = xy[0][0]-xy[0][1]\nfor item in xy:\n  pos_v = item[0] + item[1]\n  neg_v = item[0] - item[1]\n  pos_max = pos_v if pos_v > pos_max else pos_max\n  pos_min = pos_v if pos_v < pos_min else pos_min\n  neg_max = neg_v if neg_v > neg_max else neg_max\n  neg_min = neg_v if neg_v < neg_min else neg_min\n\npos_result = pos_max - pos_min\nneg_result = neg_max - neg_min\nprint(pos_result if pos_result >= neg_result else neg_result)", "n = int(input())\nu = []\nv = []\nfor _ in range(n):\n    x, y = list(map(int, input().split()))\n    u.append(x + y)\n    v.append(x - y)\n\nans = max(max(u) - min(u), max(v) - min(v))\nprint(ans)\n", "import numpy as np\ndef solve(n, x, y):\n    x = np.asarray(x)\n    y = np.asarray(y)\n    z = x + y\n    w = x - y\n    return max(np.max(z) - np.min(z), np.max(w) - np.min(w))\n\nn = int(input())\nx, y = list(zip(*[list(map(int, input().split())) for i in range(n)]))\nprint((solve(n, x, y)))\n", "import sys\ndef Ii():return int(sys.stdin.readline())\ndef Mi():return map(int,sys.stdin.readline().split())\ndef Li():return list(map(int,sys.stdin.readline().split()))\n\nn = Ii()\nans = 0\npoints = []\nxymax = 0\nxymin = 10**11\ndxymax = -10**11\ndxymin = 10**11\nfor i in range(n):\n  point = Li()\n  xy = point[0]+point[1]\n  if xy > xymax:\n    xymax = xy\n  if xy < xymin:\n    xymin = xy\n  dxy = point[0]-point[1]\n  if dxy > dxymax:\n    dxymax = dxy\n  if dxy < dxymin:\n    dxymin = dxy\nans = max(dxymax-dxymin,xymax-xymin)\nprint(ans)", "n = int(input())\n# n = 2*10**5\n\nmin_u = float('inf')\nmax_u = -float('inf')\nmin_v = float('inf')\nmax_v = -float('inf')\n\n\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    # x, y = (10**9 , 10**9)\n    u, v = (x+y, x-y)\n    if u <= min_u:\n        min_u = u\n    if u >= max_u:\n        max_u = u\n    if v <= min_v:\n        min_v = v\n    if v >= max_v:\n        max_v = v\n\nprint((max(max_u - min_u, max_v - min_v)))\n", "import numpy as np\n\nN = int(input())\nxy = [list(map(int, input().split())) for _ in range(N)]\n\nxy45 = [[xy[i][0] - xy[i][1], xy[i][0] + xy[i][1]] for i in range(N)]\nxy45 = np.array(xy45)\n\nprint((max(max(xy45[:, 0]) - min(xy45[:, 0]), max(xy45[:, 1]) - min(xy45[:, 1]))))\n", "import sys\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\nN = int(input())\n\nplus = []\nminus = []\nfor _ in range(N):\n    x, y = list(map(int, input().split()))\n    plus.append(x+y)\n    minus.append(x-y)\n\nprint((max(max(plus)-min(plus), max(minus)-min(minus))))\n", "n = int(input())\n\nplus,minus = [],[]\nfor i in range(n):\n    a,b = map(int,input().split())\n    plus.append(a+b)\n    minus.append(a-b)\n\nplus.sort()\nminus.sort()\n\nprint(max(plus[-1]-plus[0],minus[-1]-minus[0]))", "def get_ints():\n  return list(map(int,input().split()))\n\nn = int(input())\na,b = [],[]\nfor i in range(n):\n  x,y = get_ints()\n  a.append(x+y)\n  b.append(x-y)\n\na.sort()\nb.sort()\nans = max(a[-1]-a[0], b[-1]-b[0])\nprint(ans)\n\n\n\n", "n = int(input())\npoints = [tuple(map(int, input().split())) for _ in range(n)]\nplus = [p[0] + p[1] for p in points]\nminus = [p[0] - p[1] for p in points]\nprint(max(max(plus) - min(plus), max(minus) - min(minus)))", "n = int(input())\na, b = [], []\n\nfor _ in range(n):\n    x, y = list(map(int, input().split()))\n    a.append(x - y)\n    b.append(x + y)\n\nans = max(max(a) - min(a), max(b) - min(b))\nprint(ans)\n", "N = int(input())\nx = [0 for _ in range(N)]\ny = [0 for _ in range(N)]\n\nfor i in range(N):\n    x[i], y[i] = map(int,input().split())\n\nX = [0 for _ in range(N)]\nY = [0 for _ in range(N)]\n\nfor i in range(N):\n    X[i], Y[i] = x[i] - y[i], x[i] + y[i]\n\nans = 0\nans = max(max(X)-min(X),max(Y)-min(Y))\n\nprint(ans)", "def main():\n    n = int(input())\n    X, Y = [], []\n    for _ in range(n):\n        x, y = list(map(int, input().split()))\n        X.append(x + y)\n        Y.append(x - y)\n    X.sort()\n    Y.sort()\n    print((max(X[-1] - X[0], Y[-1] - Y[0])))\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "import numpy as np\nN = int(input())\n\nx = []\ny = []\nxy1 = []\nxy2 = []\n\nfor i in range(N):\n    a, b = (int(t) for t in input().split())\n    x.append(a)\n    y.append(b)\n    xy1.append(a + b)\n    xy2.append(a - b)\n\nmax1 = max(xy1) - min(xy1)\nmax2 = max(xy2) - min(xy2)\nprint((max((max1, max2))))\n", "def manhattan(n, x, y):\n    x2 = [0] * n\n    y2 = [0] * n\n    for i in range(n):\n        x2[i] = x[i] - y[i]\n        y2[i] = x[i] + y[i]\n    print((max(max(x2) - min(x2), max(y2) - min(y2))))\n\nn = int(input())\nx = [0] * n\ny = [0] * n\nfor i in range(n):\n    x[i] , y[i] = list(map(int, input().split()))\nmanhattan(n, x, y)\n", "# -*- coding: utf-8 -*-\n\nN = int(input())\n\nXY = []\nfor n in range(N):\n    (x, y) = (int(i) for i in input().split())\n    XY.append([x, y])\n\nplus = []\nminus = []\nfor [x, y] in XY:\n    plus.append(x + y)\n    minus.append(x - y)\n\nprint((max(max(plus)- min(plus), max(minus) - min(minus))))\n", "_,*Z=open(0);A,B=[],[]\nfor z in Z:x,y=map(int,z.split());A+=[x+y];B+=[x-y]\nprint(max(max(A)-min(A),max(B)-min(B)))", "N=int(input())\na = []\nb = []\nfor i in range(N):\n  x,y=map(int,input().split())\n  a.append(x+y)\n  b.append(x-y)\nA = max(a)-min(a)\nB = max(b)-min(b)\nprint(max(A,B))", "n=int(input())\nzmi=wmi=int(1e+10)\nzma=wma=int(-1e+10)\nfor i in range(n):\n    xi,yi=list(map(int,input().split()))\n    zma=max(xi+yi,zma)\n    wma=max(xi-yi,wma)\n    zmi=min(xi+yi,zmi)\n    wmi=min(xi-yi,wmi)\nprint((max(zma-zmi,wma-wmi)))\n", "n = int(input())\nk = [0] * n\nl = [0] * n\nfor i in range(n):\n  x, y = [int(i) for i in input().split()]\n  k[i] = x + y\n  l[i] = x - y\nprint(max(max(k)-min(k), max(l)-min(l)))", "def main():\n    N = int(input())\n    x, y = list(map(int, input().split()))\n    a1 = x + y\n    a2 = x + y\n    b1 = y - x\n    b2 = y - x\n    N -= 1\n    while N != 0:\n        x, y = list(map(int, input().split()))\n        a1 = max(a1, x + y)\n        a2 = min(a2, x + y)\n        b1 = max(b1, y - x)\n        b2 = min(b2, y - x)\n        N = N - 1\n    print((max(a1 - a2, b1 - b2)))\n\nmain()\n", "N =  int(input())\nA =  [list(map(int, (input().split(' ')))) for i in range(N)]\n\nhoge = [sum(a) for a in A]\nfuga = [a[0] - a[1] for a in A]\nprint((max(max(hoge) - min(hoge), max(fuga) - min(fuga))))\n", "n = int(input())\n\np_one = input()\np_one_list = p_one.split(' ')\n\nzmax = int(p_one_list[0]) + int(p_one_list[1])\nzmin = int(p_one_list[0]) + int(p_one_list[1])\nwmax = int(p_one_list[0]) - int(p_one_list[1])\nwmin = int(p_one_list[0]) - int(p_one_list[1])\n\n\nfor i in range(1, n):\n    line = input()\n    tmp = line.split(' ')\n    z = int(tmp[0]) + int(tmp[1])\n    w = int(tmp[0]) - int(tmp[1])\n    zmax = max(zmax, z)\n    wmax = max(wmax, w)\n    zmin = min(zmin, z)\n    wmin = min(wmin, w)\n\n\nz_ans = zmax - zmin\nw_ans = wmax - wmin\n\n\nprint(f'{max(z_ans, w_ans)}')\n", "N=int(input())\nL=[list(map(int,input().split())) for i in range(N)]\nzmax=zmin=L[0][0]+L[0][1]\nwmax=wmin=L[0][0]-L[0][1]\nfor a,b in L:\n    z,w=a+b,a-b\n    zmax=max(zmax,z)\n    zmin=min(zmin,z)\n    wmax=max(wmax,w)\n    wmin=min(wmin,w)\nprint(max(zmax-zmin,wmax-wmin))", "import re\nimport sys\nimport math\nimport itertools\nimport bisect\nimport heapq#.heapify:Priority Queue\u306b\u5909\u63db \n#.heappop:\u6700\u5c0f\u5024\u53d6\u5f97, .heappush:\u8981\u7d20\u633f\u5165\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return list(map(int,input().split()))\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b//math.gcd(a,b)\nsys.setrecursionlimit(10 ** 6)\nmod = 10**9+7\ncnt = 0\nans = 0\nnum = []\ninf = float(\"inf\")\nal = \"abcdefghijklmnopqrstuvwxyz\"\nAL = al.upper()\n\nimport numpy as np  \nfrom scipy.spatial.distance import euclidean, cityblock  \n\nn = k()\np = 0\n\na = []\nb = []\nfor i in range(n):\n    A,B = I()\n    a.append(A)\n    b.append(B)\n\nz = []\nw = []\n\nfor i in range(n):\n    z.append(a[i]+b[i])\n    w.append(a[i]-b[i])\n\nprint((max(max(z)-min(z), max(w)-min(w))))\n", "N = int(input())\na,b = [], []\nfor i in range(N):\n  x,y = map(int, input().split())\n  a.append(x-y)\n  b.append(x+y)\na.sort()\nb.sort()\nans = max(a[-1] - a[0], b[-1] - b[0])\nprint(ans)", "n=int(input())\na,b,c,d=2*10**9,0,10**9,-10**9\n\nfor i in range(n):\n  x,y=list(map(int,input().split()))\n  a=min(a,x+y)\n  b=max(b,x+y)\n  c=min(c,y-x)\n  d=max(d,y-x)\n\nprint((max(b-a,d-c)))\n", "n = int(input())\nz = []\nw = []\nfor i in range(n):\n    x,y = map(int,input().split())\n    z.append(x+y)\n    w.append(x-y)\nzmax = max(z)-min(z)\nwmax = max(w)-min(w)\nprint(max(zmax,wmax))", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\nn = int(input())\nA = [[int(i) for i in input().split()]for j in range(n)]    # n\u306f\u884c\u6570\n\ntmp = 0\nres = 0\n\nul = INF\nur = INF\nbl = INF\nbr = INF\nul_index = 0\nur_index = 0\nbl_index = 1\nbr_index = 1\nfor i in range(n):\n    x, y = A[i]\n    if x + 10e9 - y <= ul:\n        ul = x + 10e9 - y\n        ul_index = i\n    if 10e9 - x + 10e9 - y <= ur:\n        ur = 10e9 - x + 10e9 - y\n        ur_index = i\n    if x + y <= bl:\n        bl = x + y\n        bl_index = i\n    if 10e9 - x + y <= br:\n        br = 10e9 - x + y\n        br_index = i\nres = max(abs(A[ul_index][0] - A[br_index][0]) + abs(A[ul_index][1] - A[br_index][1]), abs(A[ur_index][0] - A[bl_index][0]) + abs(A[ur_index][1] - A[bl_index][1]))\n\nprint(res)\n", "n= int(input())\na = [list(map(int, input().split())) for i in range(n)]\nb = []\nc = []\nfor i in range(n):\n  b.append(a[i][0]+a[i][1])\n  c.append(a[i][0]-a[i][1])\nmaxbc=[max(b)-min(b), max(c)-min(c)]\nprint(max(maxbc))", "def main():\n    n = int(input())\n    pt = []\n    for _ in range(n):\n        x,y = map(int,input().split())\n        pt.append([x,y])\n    a,b,c = [],[],[]\n    for p in pt:\n        a.append(p[0]+p[1])\n        b.append(p[0]-p[1])\n        c.append(p[1]-p[0])\n    ans = 0\n    if max(a)-min(a)>ans:\n        ans = max(a)-min(a)\n    if max(b)-min(b)>ans:\n        ans = max(b)-min(b)\n    if max(c)-min(c)>ans:\n        ans = max(c)-min(c)\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\n\n\ndef main():\n    n = int(input())\n\n    ls = []\n    for i in range(n):\n        p = list(map(int, input().split()))\n        np = (p[0] + p[1], p[0] - p[1])\n        ls.append(np)\n\n    minx = float(\"inf\")\n    miny = float(\"inf\")\n    maxx = -float(\"inf\")\n    maxy = -float(\"inf\")\n\n    for i in range(len(ls)):\n        x, y = ls[i]\n        minx = min(minx, x)\n        miny = min(miny, y)\n        maxx = max(maxx, x)\n        maxy = max(maxy, y)\n\n    print((max(maxx - minx, maxy - miny)))\n\n\nmain()\n\n", "N=int(input())\nz=[]\nw=[]\nfor _ in range(N):\n    x,y=map(int,input().split())\n    z.append(x+y)\n    w.append(x-y)\nz.sort()\nw.sort()\nans=max(abs(z[-1]-z[0]),abs(w[-1]-w[0]))\nprint(ans)", "N = int(input())\n\nxyp = []\nxym = []\n\nfor _ in range(N):\n    x, y = map(int, input().split())\n    xyp.append(x+y)\n    xym.append(x-y)\n    \nxyp.sort()\nxym.sort()\n\nprint(max(xyp[-1] - xyp[0], xym[-1] - xym[0]))", "n = int(input())\nz,w = [],[]\nfor _ in range(n):\n  x,y = map(int,input().split())\n  z.append(x+y)\n  w.append(x-y)\nprint(max(max(z)-min(z),max(w)-min(w)))", "import sys\ninput=sys.stdin.readline\n\nn=int(input())\na,b,c,d=-10**9,10**9,-10**9,10**9\nfor _ in range(n):\n\tx,y=map(int,input().split())\n\ta=max(a,x+y)\n\tb=min(b,x+y)\n\tc=max(c,x-y)\n\td=min(d,x-y)\nprint(max(a-b,c-d))", "def solve():\n    n = int(input())\n    z = [0 for _ in range(n)]\n    w = [0 for _ in range(n)]\n    for i in range(n):\n        a, b = list(map(int, input().split()))\n        z[i] = a+b\n        w[i] = a-b\n    print((max(max(z)-min(z), max(w)-min(w))))\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "N = int(input())\na, b = [], []\nfor i in range(N):\n    x, y = list(map(int, input().split()))\n    a.append(x - y)\n    b.append(x + y)\n\na.sort()\nb.sort()\nans = max(a[-1] - a[0], b[-1] - b[0])\n\nprint(ans)\n", "def ans():\n    N = int(input())\n    Z = []  # x + y\n    W = []  # x - y\n    for _ in range(N):\n        x, y = map(int, input().split())\n        Z.append(x + y)\n        W.append(x - y)\n\n    z_max, z_min = max(Z), min(Z)\n    w_max, w_min = max(W), min(W)\n\n    max_d = max((z_max - z_min, w_max - w_min))\n    print(max_d)\n\n\ndef __starting_point():\n    ans()\n__starting_point()", "N = int(input())\n\nxpy = []\nxmy = []\n\n\nfor _ in range(N):\n    x, y = map(int, input().split())\n\n    xpy.append(x + y)\n    xmy.append(x - y)\n\nprint(max(max(xpy) - min(xpy), max(xmy) - min(xmy)))", "import sys\n\nleft_right_max = 0\nleft_right_min = float('inf')\nright_left_max = float('-inf')\nright_left_min = float('inf')\nr3_max = float('-inf')\nr3_min = float('inf')\n\nn = int(sys.stdin.readline().strip())\n\nfor idx in range(n):\n    x, y = sys.stdin.readline().strip().split(' ')\n    x = int(x)\n    y = int(y)\n\n    left_right_tmp = x + y\n    if left_right_tmp > left_right_max:\n        left_right_max = left_right_tmp\n    if left_right_tmp < left_right_min:\n        left_right_min = left_right_tmp\n\n    right_left_tmp = x - y\n    if right_left_tmp > right_left_max:\n        right_left_max = right_left_tmp\n    if right_left_tmp < right_left_min:\n        right_left_min = right_left_tmp\n        \n    r3_tmp = y - x\n    if r3_tmp > r3_max:\n        r3_max = r3_tmp\n    if r3_tmp < r3_min:\n        r3_min = r3_tmp\n\nprint(max(left_right_max - left_right_min, right_left_max - right_left_min, r3_max - r3_min))"]