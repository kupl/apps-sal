["def seg(x, y, h):\n    A = [x - h, x + h]\n    B = [y - h, y + h]\n    Z = []\n    for a in A:\n        for b in B:\n            Z.append(a * b)\n    Z.sort()\n    return (Z[0], Z[-1])\n\ndef check(a, b, c, d, h):\n    x1, y1 = seg(a, d, h)\n    x2, y2 = seg(b, c, h)\n    return max(x1, x2) <= min(y1, y2)\n\na, b = list(map(int, input().split()))\nc, d = list(map(int, input().split()))\nl = 0\nr = max(abs(a), abs(b), abs(c), abs(d))\nfor i in range(100):\n    m = (l + r) / 2\n    if check(a, b, c, d, m):\n        r = m\n    else:\n        l = m\nprint((r + l) / 2)\n\n", "\"\"\"\nCodeforces Looksery Cup 2015 Problem H\n\nAuthor  : chaotic_iak\nLanguage: Python 3.4.2\n\"\"\"\n\n################################################### SOLUTION\n\ndef minimize(m):\n    ad = [m[0][0]*m[3][0], m[0][0]*m[3][1] + m[0][1]*m[3][0], m[0][1]*m[3][1]]\n    bc = [m[1][0]*m[2][0], m[1][0]*m[2][1] + m[1][1]*m[2][0], m[1][1]*m[2][1]]\n    det = [ad[0]-bc[0], ad[1]-bc[1], ad[2]-bc[2]]\n    if det[0] != 0:\n        disc = det[1]**2 - 4*det[0]*det[2]\n        if disc < 0: return []\n        return [(-det[1] + disc**.5) / (2*det[0]), (-det[1] - disc**.5) / (2*det[0])]\n    if det[1] != 0:\n        return [-det[2]/det[1]]\n    if det[2] != 0:\n        return []\n    return [0]\n\ndef main():\n    matrix = read() + read()\n    import itertools\n    r = range(4)\n    ans = 10**18\n    for i in range(5):\n        for k in itertools.combinations(r, i):\n            m = [((1 if j in k else -1), matrix[j]) for j in range(4)]\n            for res in minimize(m):\n                if abs(res) < ans: ans = abs(res)\n    print(ans)\n\n\n\n#################################################### HELPERS\n\n\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0: return inputs\n    if mode == 1: return inputs.split()\n    if mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\nwrite(main())", "store1=input(\"\").split(' ')\na=int(store1[0])\nb=int(store1[1])\nstore2=input(\"\").split(' ')\nc=int(store2[0])\nd=int(store2[1])\nlo=0\nhi=2*10**18\nwhile (hi-lo>10**-10*lo):\n    mid=(hi+lo)/2.0\n    mini=2*10**19\n    maxi=-2*10**19\n    for t in range ((1<<4)):\n        store=[a, b, d, c]\n        for k in range(4):\n            if (((1<<k)&t)!=0):\n                store[k]+=mid\n            else:\n                store[k]-=mid\n        x=store[0]*store[2]-store[1]*store[3]\n        if (x>=maxi):\n            maxi=x\n        if (x<=mini):\n            mini=x\n    if (mini<=maxi and maxi>=0 and mini<=0):\n        hi=mid\n    else:\n        lo=mid\nprint(lo)\n", "EPS = 1e-11\nINF = float(\"inf\")\n\n\ndef multiply ( a , b ):\n    m = INF\n    M = -INF\n    for i in range(2):\n        for j in range(2):\n            m = min(m, a[i] * b[j])\n            M = max(M, a[i] * b[j])\n\n    return (m, M)\n\ndef intersect ( a , b ):\n    return (a[0] <= b[1] and b[0] <= a[1])\n\n\na, b = list(map(float, input().split()))\nc, d = list(map(float, input().split()))\n\n\nlo = 0\nhi = 1e9\n\nnIters = 0\nwhile nIters < 1000 and abs(lo - hi) > EPS:\n    mi = (lo + hi) / 2\n\n    i1 = multiply((a - mi, a + mi), (d - mi, d + mi))\n    i2 = multiply((b - mi, b + mi), (c - mi, c + mi))\n\n    if ( intersect(i1, i2) ):\n        hi = mi\n    else:\n        lo = mi\n\n    nIters += 1\n\nprint(\"{:.10f}\".format(hi))\n", "__author__ = '\u0414\u0430\u043d\u0438\u043b\u0430'\na, b = list(map(int, input().split()))\nc, d = list(map(int, input().split()))\n\ndef solve(x,y,z):\n    if y**2 - 4*z*x < 0:\n        return -10**27\n    else:\n        disi = y**2 - 4*z*x\n        return min(abs((-y + disi**.5)/2*x), abs((-y - disi**.5)/2*x))\n\nif a*d-b*c == 0:\n    print(0)\nelse:\n    det = a*d - b*c\n    k = max(a + d + b + c, a - d + c - b, a - d - c + b, a + d - b - c, -a + d - b + c, -a + d - c + b, -a - d + b + c, -a - b - c - d)\n    a1 = abs(det/k)\n    ans = a1\n    if solve(2, -a - d - c + b, det) != -10**27:\n        ans = min(ans, solve(2, -a - d - c + b, det))\n    if solve(2, -a - d + c - b, det) != -10**27:\n        ans = min(ans, solve(2, -a - d + c - b, det))\n    if solve(2, a + d + c - b, det)!= -10**27:\n        ans = min(ans, solve(2, a + d + c - b, det))\n    if solve(2, a + d - c + b, det)!= -10**27:\n        ans = min(ans, solve(2, a + d - c + b, det))\n    if solve(-2, -a + d - c - b, det)!= -10**27:\n        ans = min(ans, solve(-2, -a + d - c - b, det))\n    if solve(-2, a - d - c - b, det)!= -10**27:\n        ans = min(ans, solve(-2, a - d - c - b, det))\n    if solve(-2, -a + d + c + b, det)!= -10**27:\n        ans = min(ans, solve(-2, -a + d + c + b, det))\n    if solve(-2, a - d + c + b, det)!= -10**27:\n        ans = min(ans, solve(-2, a - d + c + b, det))\n    print(ans)\n\n\n", "from decimal import *\n\ngetcontext().prec = 50\na, b = list(map(int, input().split()))\nc, d = list(map(int, input().split()))\n\nanswer = None\n\nfor k in range(1 << 4):\n    le = Decimal(0)\n    rg = Decimal(10 ** 11)\n\n    def f(t):\n        fi = a\n        if k & 1:\n            fi += t\n        else:\n            fi -= t\n\n        fi *= (d + t if k & (1 << 1) else d - t)\n\n        se = (b + t if k & (1 << 2) else b - t)\n        se *= (c + t if k & (1 << 3) else c - t)\n\n        return abs(fi - se)\n\n    for i in range(200):\n        m1 = le + (rg - le) / Decimal(3)\n        m2 = rg - (rg - le) / Decimal(3)\n\n        if f(m1) > f(m2):\n            le = m1\n        else:\n            rg = m2\n\n    if f(le) < 1e-8:\n        if answer == None:\n            answer = le\n        else:\n            answer = min(answer, le)\n\nprint(answer)\n", "a, b = map(int, input().split())\nc, d = map(int, input().split())\nl = 0\nr = 10 ** 10\nif (a * d == b * c):\n    print(0)\nelse:\n    for i in range(10000):\n        x = (l + r) / 2\n        a1 = (a - x) * (d - x)\n        a2 = (a + x) * (d + x)\n        a3 = (a + x) * (d - x)\n        a4 = (a - x) * (d + x)\n        b1 = (b - x) * (c - x)\n        b2 = (b + x) * (c + x)\n        b3 = (b + x) * (c - x)\n        b4 = (b - x) * (c + x)\n        mna = min(a1, a2, a3, a4)\n        mxa = max(a1, a2, a3, a4)\n        mnb = min(b1, b2, b3, b4)\n        mxb = max(b1, b2, b3, b4)\n        if (mxa >= mnb and mxb >= mna):\n            r = x\n        else:\n            l = x\n    print('%0.10f' % x)", "from math import sqrt\n\ndef f(sa, sb, sc, sd, A, B, C, D):\n    cA = sa * sd - sb * sc\n    cB = sa * D + sd * A - sb * C - sc * B\n    cC = A * D - B * C\n    if cA == 0:\n        if cB == 0:\n            return 0 if cC == 0 else float(\"inf\")\n        return abs(-cC / cB)\n    Dis = cB * cB - 4 * cA * cC\n    if Dis < 0:\n        return float(\"inf\")\n    x1 = (-cB + sqrt(Dis)) / (2 * cA)\n    x2 = (-cB - sqrt(Dis)) / (2 * cA)\n    return min(abs(x1), abs(x2))\n\ndef main():\n    import sys\n    \n    A, B, C, D = [int(i) for i in sys.stdin.read().split()]\n    result = float(\"inf\")\n    for sa in [-1, 1]:\n        for sb in [-1, 1]:\n            for sc in [-1, 1]:\n                for sd in [-1, 1]:\n                    result = min(result, f(sa, sb, sc, sd, A, B, C, D))\n    \n    print(result)\n    \n    \nmain()\n", "store1=input(\"\").split(' ')\na=int(store1[0])\nb=int(store1[1])\nstore2=input(\"\").split(' ')\nc=int(store2[0])\nd=int(store2[1])\nlo=0\nhi=2*10**18\nwhile (hi-lo>10**-9*lo):\n    mid=(hi+lo)/2.0\n    mini=2*10**19\n    maxi=-2*10**19\n    for t in range ((1<<4)):\n        store=[a, b, d, c]\n        for k in range(4):\n            if (((1<<k)&t)!=0):\n                store[k]+=mid\n            else:\n                store[k]-=mid\n        x=store[0]*store[2]-store[1]*store[3]\n        if (x>=maxi):\n            maxi=x\n        if (x<=mini):\n            mini=x\n    if (mini<=maxi and maxi>=0 and mini<=0):\n        hi=mid\n    else:\n        lo=mid\nprint(lo)", "store1=input(\"\").split(' ')\na=int(store1[0])\nb=int(store1[1])\nstore2=input(\"\").split(' ')\nc=int(store2[0])\nd=int(store2[1])\nlo=0\nhi=2*10**18\nwhile (hi-lo>10**-9*lo):\n    mid=(hi+lo)/2.0\n    mini=2*10**19\n    maxi=-2*10**19\n    for t in range ((1<<4)):\n        store=[a, b, d, c]\n        for k in range(4):\n            if (((1<<k)&t)!=0):\n                store[k]+=mid\n            else:\n                store[k]-=mid\n        x=store[0]*store[2]-store[1]*store[3]\n        if (x>=maxi):\n            maxi=x\n        if (x<=mini):\n            mini=x\n    if (mini<=maxi and maxi>=0 and mini<=0):\n        hi=mid\n    else:\n        lo=mid\nprint(lo)", "__author__ = '\u0414\u0430\u043d\u0438\u043b\u0430'\na, b = list(map(int, input().split()))\nc, d = list(map(int, input().split()))\n\ndef solve(x,y,z):\n    if y**2 - 4*z*x < 0:\n        return -10**27\n    else:\n        disi = y**2 - 4*z*x\n        return min(abs((-y + disi**.5)/2*x), abs((-y - disi**.5)/2*x))\n\nif a*d-b*c == 0:\n    print(0)\nelse:\n    det = a*d - b*c\n    k = max(a + d + b + c, a - d + c - b, a - d - c + b, a + d - b - c, -a + d - b + c, -a + d - c + b, -a - d + b + c, -a - b - c - d)\n    a1 = abs(det/k)\n    ans = a1\n    print(ans)\n\n\n", "a, b= list(map(int, input().split()))\nc, d = list(map(int, input().split()))\nif a * d - b * c == 0:\n    print(0)\nelse:\n    curpos = a * d - b * c >= 0\n    small = 0;\n    large = 1e18\n    for iteration in range(200):\n        avg = (small + large) / 2\n        works = False\n        for ach in range(-1, 2, 2):\n            for bch in range(-1, 2, 2):\n                for cch in range(-1, 2, 2):\n                    for dch in range(-1, 2, 2):\n                        newpos = (a + ach * avg) * (d + dch * avg) - (b + bch * avg) * (c + cch * avg) >= 0\n                        if newpos != curpos:\n                            works = True\n        if works:\n            large = avg\n        else:\n            small = avg\n    print(small)\n", "a, b = map(int, input().split())\nc, d = map(int, input().split())\n\nz = a * d - b * c\nif z == 0:\n    print(0)\n    return\nt = max(abs(a + b + c + d), abs(a + d - c - b), abs(a + c - b - d), abs(a + b - c - d))\nprint(abs(z / t))", "from math import sqrt\n\ndef f(sa, sb, sc, sd, A, B, C, D):\n    cA = sa * sd - sb * sc\n    cB = sa * D + sd * A - sb * C - sc * B\n    cC = A * D - B * C\n    if cA == 0:\n        if cB == 0:\n            return 0 if cC == 0 else float(\"inf\")\n        return abs(-cC / cB)\n    return float(\"inf\")\n\ndef main():\n    import sys\n    \n    A, B, C, D = [int(i) for i in sys.stdin.read().split()]\n    result = float(\"inf\")\n    for sa in [-1, 1]:\n        for sb in [-1, 1]:\n            for sc in [-1, 1]:\n                for sd in [-1, 1]:\n                    result = min(result, f(sa, sb, sc, sd, A, B, C, D))\n    \n    print(result)\n    \n    \nmain()", "import sys\nA, B, C, D = [int(i) for i in sys.stdin.read().split()]\nif A * D - B * C == 0:\n    result = 0\nelse:\n    result = float(\"inf\")\n    for sa in [-1, 1]:\n        for sb in [-1, 1]:\n            for sc in [-1, 1]:\n                for sd in [-1, 1]:\n                    coefA = sa * sd - sb * sc\n                    coefB = sa * D + sd * A - sb * C - sc * B\n                    coefC = A * D - B * C\n                    if coefA == 0 and coefB != 0:\n                        v = -coefC / coefB\n                        result = min(result, abs(v))\nprint(result)\n", "import sys\nA, B, C, D = [int(i) for i in sys.stdin.read().split()]\nif A * D - B * C == 0:\n    print(0)\nelse:\n    k1 = abs(A + D + B + C)\n    k2 = abs(A + D - B - C)\n    k3 = abs(A - D + B - C)\n    k4 = abs(A - D - B + C)\n    print(abs(A * D - B * C) / max(k1, k2, k3, k4))\n", "import sys\nA, B, C, D = [int(i) for i in sys.stdin.read().split()]\nif A == 0 and B == 0 and C == 0 and D == 0:\n    print(0)\nelse:\n    k1 = abs(A + D + B + C)\n    k2 = abs(A + D - B - C)\n    k3 = abs(A - D + B - C)\n    k4 = abs(A - D - B + C)\n    print(abs(A * D - B * C) / max(k1, k2, k3, k4))\n", "from decimal import *\ngetcontext().prec = 20\na, b = map(int, input().split(' '))\nc, d = map(int, input().split(' '))\n\nlo = 0\nhi = 10 ** 9\n\nhrd = 0\nwhile abs(Decimal(lo) - Decimal(hi)) > 10 ** (-10) and hrd < 10000:\n    mid = (lo + hi) / 2\n\n    a1 = a - mid\n    a2 = a + mid\n    b1 = b - mid\n    b2 = b + mid\n    c1 = c - mid\n    c2 = c + mid\n    d1 = d - mid\n    d2 = d + mid\n\n    l = False\n    h = False\n    \n    for i in [a1*d1, a1*d2, a2*d1, a2*d2]:\n        for j in [b1*c1, b1*c2, b2*c1, b2*c2]:\n            if i - j <= 0:\n                l = True\n            if i - j >= 0:\n                h = True\n\n    if l and h:\n        hi = mid\n\n    else:\n        lo = mid\n\n    hrd += 1\n\n\nprint(Decimal(hi))", "from decimal import *\ngetcontext().prec = 20\na, b = map(int, input().split(' '))\nc, d = map(int, input().split(' '))\n\nlo = 0\nhi = 10 ** 9\n\nhrd = 0\nwhile abs(Decimal(lo) - Decimal(hi)) > 10 ** (-10) and hrd < 10000:\n    mid = (lo + hi) / 2\n\n    a1 = a - mid\n    a2 = a + mid\n    b1 = b - mid\n    b2 = b + mid\n    c1 = c - mid\n    c2 = c + mid\n    d1 = d - mid\n    d2 = d + mid\n\n    l = False\n    h = False\n    \n    for i in [a1*d1, a1*d2, a2*d1, a2*d2]:\n        for j in [b1*c1, b1*c2, b2*c1, b2*c2]:\n            if i - j <= 0:\n                l = True\n            if i - j >= 0:\n                h = True\n\n    if l and h:\n        hi = mid\n\n    else:\n        lo = mid\n\n    hrd += 1\n\n\nprint(Decimal(lo))", "import math,string,itertools,fractions,heapq,collections,re,array,bisect\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict, deque\n\ndef VI(): return list(map(int,input().split()))\n\n\n\n\n\ndef main(info=0):\n    a,b = VI()\n    c,d = VI()\n\n    # the problem intend was to use some optimization / binary search, but a\n    # deterministic solution has been proposed and is used here.  idea: given\n    # A, the matrix B is same as A, with +/-x at every element (plus/minus\n    # depend on the signs of A elements. It's easiest to compute all possible\n    # cases (only 4). Then, we can formulate the equation for the determinant\n    # of this B, and set it to 0.\n    # This leads to:\n    #\n    # det(B) == 0 == ad-bc-x(a+b+c+d)+x^2-x^2 == ad-bc-x(a+b+c+d)+x^2-x^2\n    #\n    # since the first two terms are the determinant of A, and the last two go\n    # away, we get:\n    #\n    # 0 == det(A) - x(a+b+c+d)  <==>   x=det(A)/(a+b+c+d)\n    #\n    # after taking care of the other signs, one gets other potential solutions\n    # below.\n    #\n    # However, as has been noted, it has not been proven that this is the\n    # optimal solution. But it seems to be.\n\n    detA = a*d-b*c\n\n    denom = max(abs(a + b + c + d), abs(a + d - c - b),\n                abs(a + c - b - d), abs(a + b - c - d))\n    ans = 0 if detA == 0 else abs(detA/denom)\n    print(ans)\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "a, b = map(int, input().split())\nc, d = map(int, input().split())\nmn = min(a * d, b * c)\nmx = max(a * d, b * c)\nx = 10 ** 18\nif (a + b + c + d) != 0:\n    x = abs((b * c - a * d) / (a + b + c + d))\nif (a + b - c - d) != 0:\n    x = min(abs((b * c - a * d) / (a + b - c - d)), x)\nif (a - b + c - d) != 0:\n    x = min(abs((b * c - a * d) / (a - b + c - d)), x)\nif (a - b - c + d) != 0:\n    x = min(abs((b * c - a * d) / (a - b - c + d)), x)\nif (a + b + c + d) == 0:\n    x = 0\n\n\nprint(x)", "a, b = [int(x) for x in input().split()]\nc, d = [int(x) for x in input().split()]\n\ndef isCrossing(square1, square2):\n    for vert in square1:\n        if vert[0] == 0 or vert[1] == 0:\n            return True\n        if square2[0][1] <= vert[1] * square2[0][0] / vert[0] <= square2[1][1]:\n            return True\n        if square2[0][0] <= vert[0] * square2[0][1] / vert[1] <= square2[3][0]:\n            return True\n        if square2[3][1] <= vert[1] * square2[2][0] / vert[0] <= square2[2][1]:\n            return True\n        if square2[1][0] <= vert[0] * square2[1][1] / vert[1] <= square2[2][0]:\n            return True\n    for vert in square2:\n        if vert[0] == 0 or vert[1] == 0:\n            return True\n        if square1[0][1] <= vert[1] * square1[0][0] / vert[0] <= square1[1][1]:\n            return True\n        if square1[0][0] <= vert[0] * square1[0][1] / vert[1] <= square1[3][0]:\n            return True\n        if square1[3][1] <= vert[1] * square1[2][0] / vert[0]<= square1[2][1]:\n            return True\n        if square1[1][0] <= vert[0] * square1[1][1] / vert[1]<= square1[2][0]:\n            return True\n    return False\n\ndef binSearch(left, right, a, b, c, d):\n    m = (left + right) / 2\n    eps = 10 ** -10\n    while abs(m - left) > eps and abs(right - m) > eps:\n        if isCrossing(([a - m, b - m], [a - m, b + m], [a + m, b + m], [a + m, b - m]),\n                ([c - m, d - m], [c - m, d + m], [c + m, d + m], [c + m, d - m])):\n            right = m\n        else:\n            left = m\n        m = (left + right) / 2\n        #print(left, m, right)\n    return m\n\nprint(binSearch(10**-10, 2 * 10**9, a, b, c, d))\n", "a, b = [int(x) for x in input().split()]\nc, d = [int(x) for x in input().split()]\n\ndef isCrossing(square1, square2):\n    for vert in square1:\n        if vert[0] != 0 and square2[0][1] <= vert[1] * square2[0][0] / vert[0] <= square2[1][1]:\n            return True\n        if vert[1] != 0 and square2[0][0] <= vert[0] * square2[0][1] / vert[1] <= square2[3][0]:\n            return True\n        if vert[0] != 0 and square2[3][1] <= vert[1] * square2[2][0] / vert[0] <= square2[2][1]:\n            return True\n        if vert[1] != 0 and square2[1][0] <= vert[0] * square2[1][1] / vert[1] <= square2[2][0]:\n            return True\n    for vert in square2:\n        if vert[0] != 0 and square1[0][1] <= vert[1] * square1[0][0] / vert[0] <= square1[1][1]:\n            return True\n        if vert[1] != 0 and square1[0][0] <= vert[0] * square1[0][1] / vert[1] <= square1[3][0]:\n            return True\n        if vert[0] != 0 and square1[3][1] <= vert[1] * square1[2][0] / vert[0]<= square1[2][1]:\n            return True\n        if vert[1] != 0 and square1[1][0] <= vert[0] * square1[1][1] / vert[1]<= square1[2][0]:\n            return True\n    return False\n\ndef binSearch(left, right, a, b, c, d):\n    m = (left + right) / 2\n    eps = 10 ** -10\n    while abs(m - left) > eps and abs(right - m) > eps:\n        if isCrossing(([a - m, b - m], [a - m, b + m], [a + m, b + m], [a + m, b - m]),\n                ([c - m, d - m], [c - m, d + m], [c + m, d + m], [c + m, d - m])):\n            right = m\n        else:\n            left = m\n        m = (left + right) / 2\n        #print(left, m, right)\n    return m\n\nprint(binSearch(10**-10, 2 * 10**9, a, b, c, d))\n", "a, b = map(int, input().split())\nc, d = map(int, input().split())\n\nz = a * d - b * c\nif z == 0:\n    print(0)\n    return\nt = max(abs(a + b + c + d), abs(a + d - c - b), abs(a + c - b - d), abs(a + b - c - d))\nprint(abs(z / t))", "a, b = list(map(int, input().split()))\nc, d = list(map(int, input().split()))\nz = a * d - b * c\nif z == 0:\n    print(0)\n    return\nt = max(abs(a + b + c + d), abs(a - b - c + d), abs(a - b + c - d), abs(a + b - c- d))\nprint(abs(z / t))\n"]