["def ii():\n    return int(input())\ndef mi():\n    return map(int, input().split())\ndef li():\n    return list(mi())\n\nn, M = mi()\na = [0] + li() + [M]\nn = len(a)\nans = 0\np = [0] * n\nq = [0] * n\nfor i in range(1, n):\n    p[i] = p[i - 1]\n    q[i] = q[i - 1]\n    if i % 2 == 0:\n        p[i] += a[i] - a[i - 1]\n    else:\n        q[i] += a[i] - a[i - 1]\n\nans = q[-1]\nfor i in range(1, n):\n    if a[i] == a[i - 1] + 1:\n        continue\n    if i % 2 == 0:\n        ans = max(ans, q[i] + 1 + p[-1] - p[i], q[i] + a[i] - a[i - 1] - 1 + p[-1] - p[i])\n    else:\n        ans = max(ans, q[i] - 1 + p[-1] - p[i], q[i] - (a[i] - a[i - 1] - 1) + p[-1] - p[i])\nprint(ans)", "n, m = map(int, input().split())\na = list(map(int,input().split())) + [m,0]\nleft_on = [0] * (n+2)\nright_off = [0] * (n+2)\n\nstatus = 1\nfor i in range(n+1):\n    if status == 1:\n        left_on[i] = left_on[i-1] + a[i] - a[i-1]\n    else:\n        left_on[i] = left_on[i-1]\n    status = 1 - status\n\nstatus = 1 - status\nfor i in range(n-1,-1,-1):\n    if status == 1:\n        right_off[i] = right_off[i+1]\n    else:\n        right_off[i] = right_off[i+1] + a[i+1] - a[i]\n    status = 1 - status\n\n\nans = left_on[n]\n\nstatus = 1\nfor i in range(n+1):\n    if a[i] - a[i-1] != 1:\n        if status == 1:\n            ans = max(ans, left_on[i] - 1 + right_off[i])\n        else:\n            ans = max(ans, left_on[i] + a[i] - a[i-1] - 1 + right_off[i])\n    status = 1 - status \nprint(ans)", "n , M =list(map(int,input().split()))\ndata = list(map(int,input().split()))\nstate = False\n\nstates= [0 for i in range(n + 1)]\nstates[0] = (data[0], 0)\n\nfor i in range(1, n + 1):\n    value = (M if i == n else data[i]) - data[i - 1]\n    states[i] = (states[i - 1][0] + (value if state else 0), states[i - 1][1] + (0 if state else value))\n    state = not state\n\nans = states[n][0]\n\nfor i in range(n + 1):\n    if (M if i == n else data[i]) - (data[i - 1] if i > 0 else 0) > 1:\n        val = 0 \n        if i !=0 and i != n:\n            val = states[i - 1][0] +  states[n][1] - states[i][1]\n            val += (data[i] - data[i - 1] - 1)\n\n        if i == 0:\n            val = states[n][1]\n            val += data[0] - 1\n            \n        if i == n:\n            val = states[n - 1][0]\n            val += M - data[n - 1] - 1\n            \n        ans = max(ans, val)\n\nprint(ans)\n", "3\n\ndef solve(N, M, A):\n    A = [0] + A + [M]\n\n    D = [A[i + 1] - A[i] for i in range(N + 1)]\n    LD = len(D)\n\n    evensum = 0\n    oddsum = 0\n    for i in range(LD):\n        if i % 2 == 0:\n            evensum += D[i]\n        else:\n            oddsum += D[i]\n\n    best = evensum\n    accum = 0\n    for i in range(LD):\n        d = D[i]\n\n        if i % 2 == 0:\n            evensum -= d\n            if d > 1:\n                best = max(best, accum + d - 1 + oddsum)\n            accum += d\n        else:\n            oddsum -= d\n            if d > 1:\n                best = max(best, accum + d - 1 + oddsum)\n\n    return best\n\n\ndef main():\n    N, M = [int(e) for e in input().split(' ')]\n    A = [int(e) for e in input().split(' ')]\n    assert len(A) == N\n    print(solve(N, M, A))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m =list(map(int, input().split() ) )\na=list(map(int, input().split() ) )\ngar=[]\nshadow=[]\ngar.append(a[0])\nlight=False #\na.append(m)\nfor i in range(1,n+1):\n    dl=a[i]-a[i-1]\n    if light:\n        gar.append(dl)\n        light=False\n    else:\n        shadow.append(dl)\n        light=True\nlight=sum(gar)\ndark=sum(shadow)\nlightmax=light\nteclight=0\ntecdark=0\nif n%2==0:\n    n=n//2\nelse:\n    n=n//2+1\nfor i in range(n):\n    if i!=n-1:                         #!!!!!!!!!\n        teclight+=gar[i]\n        light-=gar[i]\n        if gar[i]>1:\n            newlight=teclight-1+dark\n            lightmax=max(lightmax, newlight)\n        tecdark+=shadow[i]\n        dark-=shadow[i]\n        if shadow[i]>1:\n            newlight=teclight+shadow[i]-1+dark\n            lightmax=max(lightmax, newlight)\n    else:\n        if len(shadow)==n:\n            teclight+=gar[i]\n            light-=gar[i]\n            if gar[i]>1:\n                newlight=teclight-1+dark\n                lightmax=max(lightmax, newlight)\n            tecdark+=shadow[i]\n            dark-=shadow[i]\n            if shadow[i]>1:\n                newlight=teclight+shadow[i]-1+dark\n                lightmax=max(lightmax, newlight)\nprint(lightmax)\n            \n        \n", "from math import ceil, log\nt = 1\nfor test in range(t):\n    n, m = list(map(int, input().split()))\n    arr = (list(map(int, input().split())))\n    arr.append(m)\n    prev = 0\n    on = 0\n    counter=0\n    for i in arr:\n        if counter%2==0:\n            on+=(i-prev)\n        prev = i\n        counter+=1\n    off = m-on\n\n    counter=0\n    ans = on\n    prev = 0\n    prevOn = 0\n    for i in arr:\n        if counter%2==0:\n            if i-prev != 1:\n                tmp = prevOn+i-prev-1+m-i-(on-prevOn-(i-prev))\n                if tmp > ans:\n                    ans = tmp\n            prevOn+=i-prev\n        else:\n            if i-prev != 1:\n                tmp = prevOn+i-prev-1+m-i-(on-prevOn)\n                if tmp > ans:\n                    ans = tmp\n        prev = i\n        counter+=1\n    print(ans)\n", "from itertools import accumulate\nn, m  = list(map(int, input().split()))\n\ntt = n//2 +1\nmoments = [0] + list(map(int, input().split())) + [m]\ntimes = [moments[i] - moments[i-1] for i in range(1,n+2)]\n# print(times)\nlight = times[::2]\ndark = times[1::2]\n\nlight_time = list(accumulate(light))\ndark_time  = [0]+ list(accumulate(dark))\n# print(light_time, dark_time)\nres = light_time[-1]\nfor i in range(tt):\n    if times[2*i] >1: # \u0435\u0441\u043b\u0438 \u0433\u043e\u0440\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u043c\u0438\u043d\u0443\u0442\u044b\n        # print('light to ', i, ' is ', light_time[i]-1, dark_time[-1]-dark_time[i], 'if switching light off')\n\n        res = max(res, light_time[i]-1 + (dark_time[-1]-dark_time[i]))\n\n    if i == 0 or times[2*i-1] >1: # \u0435\u0441\u043b\u0438 \u043d\u0435 \u0433\u043e\u0440\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u043c\u0438\u043d\u0443\u0442\u044b\n        # print('light to ', i, ' is ', light_time[i], dark_time[-1]-dark_time[i] -1)\n\n        res = max(res, light_time[i] + dark_time[-1]-dark_time[i] -1)\nprint(res)", "n, m = list(map(int, input().split()))\nc = list(map(int, input().split()))\nf = [0] * n\ngor = 0\nfor i in range(n):\n    if i % 2 == 0 and i > 0:\n        gor += c[i] - c[i - 1]\n    elif i % 2 == 0:\n        gor += c[i]\n    f[i] = gor\nif n % 2 == 0:\n    gor += m - c[n - 1]\n\n\nma = gor\n\nif c[0] > 1:\n    if m - gor + 1 > ma:\n        ma = m - gor + 1\n\nfor i in range(n):\n\n    if i != n - 1:\n        if c[i + 1] - c[i] > 1:\n            if i % 2 == 0:\n                t = (m - c[i] - 1) - (gor - f[i])\n\n            else:\n                t = (m - (c[i + 1] - 1)) - (gor - (f[i + 1] - 1))\n\n            if t + f[i] > ma:\n                ma = t + f[i]\n\n        \n    else:\n        if m - c[i] > 1:\n            if n % 2 == 1:\n                t = gor + m - c[i] - 1\n                if ma < t:\n                    ma = gor + m - c[i] - 1\n\nprint(ma)\n", "from copy import deepcopy\nimport itertools\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nimport math\nfrom collections import deque\n\n\ndef read():\n    return int(input())\n\n\ndef readmap():\n    return map(int, input().split())\n\n\ndef readlist():\n    return list(map(int, input().split()))\n\n\n# B\nN, M = readmap()\nA = [0] + readlist() + [M]\n\non_time = []\noff_time = []\nfor i in range(1, N+2):\n    if i % 2 == 1:\n        on_time.append(A[i] - A[i - 1])\n    else:\n        off_time.append(A[i] - A[i - 1])\n\nsum_on_time = sum(on_time)\nmax_on_time = sum_on_time\nif N % 2 == 1:\n    i = N + 1\n    while i > 0:\n        if A[i] - A[i - 1] > 1:\n            x = A[i - 1] + 1\n            max_on_time = max(max_on_time, sum_on_time + A[i] - x)\n        sum_on_time = sum_on_time + (A[i] - A[i - 1]) - (A[i - 1] - A[i - 2])\n\n        if A[i - 1] - A[i - 2] > 1:\n            x = A[i - 1] - 1\n            max_on_time = max(max_on_time, sum_on_time + x - A[i - 2])\n\n        i -= 2\n\n    print(max_on_time)\nelse:\n    i = N\n    sum_on_time -= A[N + 1] - A[N]\n    while i > 0:\n        if A[i] - A[i - 1] > 1:\n            x = A[i - 1] + 1\n            max_on_time = max(max_on_time, sum_on_time + A[i] - x)\n        sum_on_time = sum_on_time + (A[i] - A[i - 1]) - (A[i - 1] - A[i - 2])\n\n        if A[i - 1] - A[i - 2] > 1:\n            x = A[i - 1] - 1\n            max_on_time = max(max_on_time, sum_on_time + x - A[i - 2])\n\n        i -= 2\n\n    print(max_on_time)", "n, M = map(int, input().split(' '))\na = input().split(' ')\nfor i in range(n):\n    a[i] = int(a[i])\na.insert(0, 0)\na.append(M)\np = 0\no = 0\nfor i in range(1, n + 2):\n    if i%2 == 1:\n        p += a[i] - a[i-1]\n    else:\n        o += a[i] - a[i-1]\nraz = p\nind = -1\na_p = 0\na_o = 0\nfor i in range(1, n + 2):\n    if i%2 == 0:\n        if a[i] - a[i-1] != 1:\n            if a_p - 1 + o > raz:\n                raz = a_p-1+o\n        o -= a[i]-a[i-1]\n        a_o += a[i]-a[i-1]\n    else:\n        if a[i] - a[i-1] != 1:\n            if a_p + a[i] - a[i-1] - 1 + o > raz:\n                raz = a_p+a[i]-a[i-1]-1+o\n        p -= a[i]-a[i-1]\n        a_p += a[i]-a[i-1]\nprint(raz)", "n, k = [int(i) for i in input().split()]\nx = [0] + [int(i) for i in input().split()] + [k]\n\nlight = []\n\ns = 0\n\ne = 0\no = 0\neven = []\nodd = []\n\nfor i in range(len(x) - 1):\n    s = x[i + 1] - x[i]\n    light.append(s)\n\nfor i in range(len(light) - 1, -1, -1):\n    if i % 2 == 0:\n        e += light[i]\n    else:\n        o += light[i]\n    even.append(e)\n    odd.append(o)\n\neven = even[::-1]\nodd = odd[::-1]\nsum = 0\nm = 0\nfor i in range(len(light)):\n\n    if (light[i] != 1):\n        if i % 2 == 0:\n            if i + 1 >= len(light):\n                m = max(light[i] - 1 + sum, m)\n            else:\n                m = max(sum + even[i + 1], m)\n        else:\n\n            if i + 1 >= len(light):\n                m = max(light[i] - 1 + sum, m)\n            else:\n                m = max(light[i] - 1 + sum + odd[i + 1], m)\n\n    if i % 2 == 0:\n        sum += light[i]\n\nm = max(sum, m)\n\nprint(m)\n", "n, m = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\na.insert(0, 0)\na.append(m)\n\nn += 2\n\nprev = [0]*n\n\nfor i in range(1, n, 2):\n\tprev[i] = a[i] - a[i-1]\n\n# print(a)\n\nfor i in range(1, n):\n\tprev[i] = prev[i-1] + prev[i]\n\n# print(prev)\n\n\nflip = [0]*n\n\nfor i in range(1, n):\n\tj = n-1-i\n\tif (j%2 != 0):\n\t\t\tflip[j] = a[j+1] - a[j]\n\nfor i in range(1,n):\n\tj = n-1-i\n\tflip[j] = flip[j] + flip[j+1]\n\n# print(flip)\n\nprint(max(prev[-1], max(prev[i] + flip[i+1] + abs(a[i+1] - a[i] - 1) for i in range(n-1))))", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n(n, M) = (int(i) for i in input().split())\na   = [int(i) for i in input().split()]\n\nstart = time.time()\n\nnow = 0\nx   = []\n\nfor i in range(n):\n    x.append(a[i] - now)\n    now = a[i]\n\nx.append(M-now)\n\nans = 0\nro  = 0\nle  = 0\nnow = 0\n\nfor i in range(len(x)):\n    if i%2 == 1:\n        ro  += x[i]\n    else:\n        ans += x[i]\n\nfor i in range(len(x)):\n    if x[i] > 1:\n        now  = le+ro-1\n    if now > ans:\n        ans = now\n\n\n    if i%2 == 1:\n        ro  -= x[i]\n    else:\n        le  += x[i]\n\n\nprint(ans)\nfinish = time.time()\n#print(finish - start)\n", "n, m = list(map(int, input().split()))\ntm = [int(i) for i in input().split()]\n\nsum_d = 0\nsum_l = 0\n\nis_dark = n & 1\nlst = m\n\ntm.reverse()\ntm.append(0)\n\nMax = -1\n\nfor i in tm:\n    dis = lst - i\n    if is_dark:\n        sum_d += dis\n    else:\n        sum_l += dis\n\n    lst = i\n\n    if dis == 1:\n        is_dark ^= 1\n        continue\n\n    if is_dark:\n        # fake_d = sum_l + 1\n        fake_l = sum_d - 1\n    else:\n        # fake_d = sum_l - dis + 1\n        fake_l = sum_d + dis - 1\n    is_dark ^= 1\n    Max = max(Max, fake_l - sum_l)\n\nans = sum_l\nif Max > 0:\n    ans += Max\n\nprint(ans)\n# \u5947\u6570 \u6697(1)\uff0c\u5076\u6570 \u4eae\n", "MIS = lambda: map(int,input().split())\n\nn, m = MIS()\na = [0] + list(MIS()) + [m]\ninter = []\nfor i in range(n+1): inter.append(a[i+1] - a[i])\nS = sum(inter[::2])\n\nopt = S\ncur = S\nmul = 1 if n%2 == 1 else -1\nx = m\nfor i in range(n, 0, -1):\n    if a[i]+1 != a[i+1]:\n        cur+= (x - a[i] - 1) * mul\n        opt = max(opt, cur)\n        x = a[i]+1\n    cur+= (x - a[i]) * mul\n    x = a[i]\n    mul*= -1\n    if a[i]-1 != a[i-1]:\n        cur+= mul\n        opt = max(opt, cur)\n        x-= 1\nprint(opt)", "n, M = [int(x) for x in input().split()]\narr = [0] + [int(x) for x in input().split()] + [M]\nforward, backward = [0], []\n[forward.append(forward[i-1] + arr[i] - arr[i-1] if i%2 == 1 else forward[i-1]) for i in range(1, n+2)]\nmx = forward[-1]\nif n%2 == 0:\n  temp = arr[::-1]\n  backward = [0]\n  [backward.append(backward[i-1] + temp[i-1] - temp[i] if i%2 == 0 else backward[i-1]) for i in range(1, n+2)]\nelse:\n  temp = arr[::-1]\n  backward = [0]\n  [backward.append(backward[i-1] + temp[i-1] - temp[i] if i%2 == 1 else backward[i-1]) for i in range(1, n+2)]\nbackward = backward[::-1]\ni = 0\nfor a,b in zip(arr, arr[1:]):\n  # print(\"%d or %d: \" % (a+1, b-1))\n  res1 = forward[i] + (1 if i%2==0 else b - (a+1)) + backward[i+1]\n  if a+1 == b: res1 = -1\n  res2 = forward[i] + (b-1-a if i%2==0 else 1) + backward[i+1]\n  if b-1 == a: res2 = -1\n  # print(\"%d - %d: \" % (res1, res2))\n  mx = max(mx, res1, res2)\n  i += 1\n\nprint(mx)", "n,m=map(int,input().strip().split())\nl=list(map(int,input().strip().split()))\nl.insert(0,0)\nl.append(m)\nlc=[]\nlo=[]\non=0\noff=0\nlo.append([0,0])\nfor i in range(1,n+2):\n\tif (i%2==1):\n\t\ton=on+l[i]-l[i-1]\n\telse:\n\t\toff=off+l[i]-l[i-1]\n\tlo.append([on,off])\nmax1=on\nlc.append([on,off])\nfor i in range(1,n+2):\n\tif (i%2==1):\n\t\ton=on-l[i]+l[i-1]\n\telse:\n\t\toff=off-l[i]+l[i-1]\n\tlc.append([on,off])\nfor i in range(1,n+2):\n\tif (i%1==0 and l[i]-l[i-1]>1):\n\t\tcurron=lo[i-1][0]+l[i]-l[i-1]-1+lc[i][1]\n\t\tif (curron>max1):\n\t\t\tmax1=curron\n\telif (l[i]-l[i-1]>1):\n\t\tcurron=lo[i-1][0]+l[i]-1-l[i-1]+lc[i][1]\n\t\tif (curron>max1):\n\t\t\tmax1=curron\n\telse:\n\t\tcontinue\nprint (max1)", "n,m=map(int,input().split())\na=list(map(int,input().split()))\nb=[[abs(0-a[0]),0]];li=b[0][0];off=0\nfor i in range(n-1):\n    if i%2==0:\n        b.append([li,off+abs(a[i]-a[i+1])]);off+=abs(a[i]-a[i+1])\n    else:\n        b.append([li+abs(a[i]-a[i+1]),off]);li+=abs(a[i]-a[i+1])\nif n%2==0:\n    b.append([li+abs(m-a[-1]),off])\nelse:\n    b.append([li,off+abs(m-a[-1])])\nma=b[-1][0]\nfor i in range(1,len(b)):\n    ma=max(ma,b[i][1]-b[i-1][1]-1+b[i][0]+b[-1][1]-b[i][1])\nprint(ma)", "R = lambda: map(int, input().split())\n\nn, M = R()\na = list(R())\na = [0] + a + [M]\nb = [0]*(n+2)\nc = [0]*(n+2)\n\nfor i in range(1, n+2):\n    if i%2:\n        b[i] = b[i-1] + a[i] - a[i-1]\n        c[i] = c[i-1]\n    else:\n        b[i] = b[i-1]\n        c[i] = c[i-1] + a[i] - a[i-1]\n\nans = b[n+1]\nfor i in range(0,n+1):\n    if i%2:\n        k = a[i] + 1\n        if k == a[i+1]: continue\n        t = b[i] + (c[n + 1] - c[i+1]) + a[i+1] - k\n    else:\n        k = a[i+1] - 1\n        if k == a[i]: continue\n        t = b[i+1] + (c[n+1] - c[i]) - 1\n    # dbvar(t)\n    ans = max(ans, t)\nprint(ans)", "n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\na = [0] + a + [m]\nd = [0] * (n + 1)\nfor i in range(n + 1):\n\td[i] = a[i + 1] - a[i]\n\nfwd = [0] * len(a)\ns = 0\nfor i in range(1, len(a)):\n\tif i % 2 == 1:\n\t\ts += d[i - 1]\n\t\tfwd[i] = s\n\telse:\n\t\tfwd[i] = fwd[i - 1]\nbwd = [0] * len(a)\ns = 0\nfor i in range(1, len(a)):\n\tif (len(a) - 1 - i) % 2 == 0:\n\t\ts += d[-i]\n\t\tbwd[-i - 1] = s\n\telse:\n\t\tbwd[-i - 1] = bwd[- i]\nfrom itertools import accumulate\nfwd_ = list(accumulate([0] + d))\nbwd_ = list(accumulate([0] + d[::-1]))[::-1]\n# print(fwd)\n# print(bwd)\n# print(fwd_)\n# print(bwd_)\nmaxx = fwd[-1]\nfor i in range(n + 1):\n\tif a[i + 1] - a[i] > 1:\n\t\tif i % 2 == 0:\n\t\t\tx = fwd[i] + a[i + 1] - a[i] - 1 + bwd_[i + 1] - bwd[i + 1]\n\t\telse:\n\t\t\tx = fwd[i] + a[i + 1] - a[i] - 1 + bwd_[i + 1] - bwd[i + 1]\n\t\tif x > maxx:\n\t\t\tmaxx = x\nprint(maxx)\n\n", "def main():\n\tn, M = list(map(int, input().split()))\n\tseq = [0] + list(map(int, input().split())) + [M]\n\tseq = [seq[i + 1] - seq[i] for i in range(n + 1)]\n\tret = [sum([seq[i] for i in range(n + 1) if i % 2 == 0])]\n\tseq = [seq[i] * ((-1) ** i) for i in range(n + 1)]\n\ts = 0\n\ts0 = sum(seq)\n\tfor i in range(n + 1):\n\t\tret.append(-1 + (s - s0 + M) // 2)\n\t\ta = seq[i]\n\t\ts += a\n\t\ts0 -= a\n\tprint(max(ret))\n\treturn 0\nmain()", "n, M = list(map(int, input().split()))\nA = [0] + list(map(int, input().split())) + [M]\n\ntotal_on = 0\nfor i, a in enumerate(A):\n    if i%2:\n        total_on += a - A[i-1]\n\non = [[M-total_on]*(n+2), [total_on]*(n+2)]\n\nfor i in range(1, n+2):\n    sw = i%2\n    on[sw][i] = on[sw][i-1]-(A[i]-A[i-1])\n    on[1-sw][i] = on[1-sw][i-1]\n\nmaxon = total_on\nfor i in range(n+1):\n    if A[i] < A[i + 1] - 1:\n        maxon = max(maxon, total_on + on[0][i+1-i%2] - on[1][i+1] - 1)\n\nprint(maxon)\n\n", "n, m = map(int, input().strip().split(' '))\na = list(map(int, input().strip().split(' ')))\na.append(m)\na.insert(0, 0)\nn += 2\ndiff = [0] * (n - 1)\nd = n - 2\nfor i in range(n - 1, 0, -1):\n    diff[d] = a[i] - a[i - 1]\n    if (i < n - 2):\n        diff[d] += diff[d + 2]\n    d -= 1\nontime = diff[0] \nfor d in range(n - 1):\n    \n    if (d % 2 == 0):\n        prevontime = diff[0] - diff[d]\n        afterofftime = 0\n        if (d < n - 2):\n            afterofftime += diff[d + 1]\n        ontime = max(ontime,  prevontime + afterofftime + a[d + 1] - a[d] - 1)\n    else:\n        if (a[d] + 1 == a[d + 1]):\n            continue\n        prevontime = diff[0]\n        if (d < n - 2):\n            prevontime -= diff[d + 1]\n        afterofftime = 0\n        if (d < n - 3):\n            afterofftime += diff[d + 2]\n        ontime = max(ontime, prevontime + afterofftime + 1)\nprint(ontime)", "def main():\n    n, M = [int(i) for i in input().split(' ')]\n    a = [0] + [int(i) for i in input().split(' ')] + [M]\n\n    n = n + 2\n    incr_sum =  []\n    s = 0\n    for i in range(n):\n        if i % 2 == 1:\n            s += a[i] - a[i-1]\n        incr_sum.append(s)\n\n    max_sum = s\n    for i in range(n-1):\n        if a[i+1] - a[i] != 1:\n            to_add = a[i+1] - 1 # added in pos between i and i+1\n\n            s_ = incr_sum[i]\n            s_ += to_add - a[i]\n            s_ += (a[-1] - a[i+1]) - (incr_sum[-1] - incr_sum[i+1])\n\n            if s_ > max_sum:\n                max_sum = s_\n\n    print(max_sum)\n    \ndef __starting_point():\n    main()\n__starting_point()"]