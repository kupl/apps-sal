["from collections import Counter\nn, k = list(map(int, input().split()))\nc = Counter(input())\nans = min(c[chr(ord('A') + i)] for i in range(k))\nprint(k * ans)\n", "read = lambda: map(int, input().split())\nn, k = read()\ns = input()\nc = [0] * 26\nfor i in range(n):\n    if s[i] <= chr(ord('A') + k - 1):\n        c[ord(s[i]) - ord('A')] += 1\nprint(min(c[:k]) * k)", "n, k = map(int, input().split(' '))\ns = input()\nm = 10 ** 10\nfor i in range(k):\n    c = chr(ord('A') + i)\n    m = min(m, s.count(c))\nprint(m * k)", "ct = [0]*26\n\nn, k =[int(i) for i in input().split()]\ns = input()\n\nfor i in s:\n    ct[ord(i)-ord('A')]+=1\n\nprint(min(ct[:k])*k)\n", "import sys\nimport string\n\n\ndef ria():\n    return [int(i) for i in input().split()]\n\n\nn, k = ria()\nmp = {}\nfor i in string.ascii_uppercase[:k]:\n    mp[i] = 0\nfor i in input():\n    if i in mp:\n        mp[i] += 1\nprint(min(mp.values())*k)", "n, k = list(map(int, input().split()))\ncount = [0] * k\nfor c in input():\n    count[ord(c) - ord(\"A\")] += 1\nprint(k * min(count))\n\n", "def ii():\n    return int(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nfrom collections import Counter\n\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\nn, k = mi()\ns = input().strip()\nc = Counter(s)\nmn = 10 ** 9\nfor ch in alpha[:k]:\n    mn = min(mn, c[ch])\nprint(mn * k)\n", "from collections import Counter\n\n\ndef __starting_point():\n    n, k = list(map(int, input().split()))\n    s = input()\n    c = Counter(s)\n    min_symbols = min(c[chr(ord(\"A\") + i)] for i in range(k))\n    print(min_symbols * k)\n\n__starting_point()", "n, k = map(int, input().split())\ns = list(input())\na = ord('A')\ncnt = [0] * k\nfor ch in s:\n    cnt[ord(ch) - a] += 1\nprint(k * min(cnt))", "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        print(*args, **kwargs, file=sys.stderr)\n    dprint('debug mode')\nexcept ModuleNotFoundError:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif outId>0:\n    dprint('use output', outId)\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, K= getIntList()\nzs = input()\nt = {}\nfor x in zs:\n    if x not in t:\n        t[x] = 1\n    else:\n        t[x]+=1\nff = 100000\nfor y in t:\n    ff = min(ff, t[y])\nif len(t)<K:\n    ff = 0\nprint(ff*K)\n\n\n\n\n\n\n\n", "n, k = list(map(int, input().split()))\nu = list(input())\ns = [0] * k\nc = ord('A')\nfor i in range(n):\n    s[ord(u[i]) - c] += 1\nprint(min(s) * k)\n   \n", "from collections import Counter\n\nn, k = list(map(int, input().split()))\ns = input()\n\nletters = list(s)\n\nc = dict(Counter(letters))\n\nif len(c) < k:\n\tprint(0)\nelse:\n\tprint(k * min(c.values()))", "USE_STDIO = False\n\nif not USE_STDIO:\n    try: import mypc\n    except: pass\n\nfrom collections import Counter\n\ndef main():\n    n, k = list(map(int, input().split(' ')))\n    s = input()\n    cnts = Counter(s)\n    ans = n\n    for i in range(k):\n        ch = chr(ord('A') + i)\n        ans = min(ans, cnts.get(ch, 0))\n    print(ans * k)\n\ndef __starting_point():\n    main()\n\n\n\n\n__starting_point()", "n,k=map(int,input().split())\na=list(input())\ng=[0]*k\nfor i in a :\n    g[ord(i)-65]+=1\nprint(k*min(g))    ", "n, k = map(int, input().split())\ns = input()\nupper = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")[:k]\nd = dict()\nfor u in upper:\n\td[u] = 0\nfor l in s:\n\td[l] += 1\n\nprint(min(d.values()) * k)", "#Problem A\n\ninp = input().split()\nn = int(inp[0])\nk = int(inp[1])\n\ns = input()\n\ncnt = {}\nfor c in s:\n    cnt[c] = cnt.get(c,0)+1\n\nif(len(cnt)<k):\n    print(0)\nelse:\n    ans = cnt[\"A\"]\n    for c,v in cnt.items():\n        ans = min(ans,v)\n    print(ans*k)", "def mi():\n    return list(map(int, input().split(' ')))\n\n\nn,m = mi()\ns =input()\nans = 1000000\nfor i in range(m):\n    ans = min(ans,s.count(chr(65+i)))\n\nprint(ans*m)\n", "#!/usr/bin/env python3\n#-*- encoding: utf-8 -*-\n\nimport sys\nimport bisect\nfrom collections import Counter\n\nread_int = lambda : int(sys.stdin.readline())\nread_ints = lambda : list(map(int,sys.stdin.readline().split()))\nread_int_list = lambda : list(read_ints())\nread = lambda : sys.stdin.readline().strip()\nread_list = lambda : sys.stdin.readline().split()\n\ndef main():\n    n,k = read_ints()\n    s = read()\n    d = Counter(s)\n    res = k*min(d.values()) if len(d) == k else 0\n    print(res)\n\n\nmain()\n", "n,k=list(map(int,input().split()))\ns=input()\na=[0]*26\nfor i in s:\n\ta[ord(i)-ord('A')]+=1\nans=100000000\nfor i in range(k):\n\tans=min(ans,a[i])\nprint(ans*k)\n", "import sys\nimport os\n\ndef solve(s, k):\n    occ = [0] * 26\n    for i in range(len(s)):\n        occ[ord(s[i]) - ord('A')] += 1\n\n    result = None\n    for i in range(k):\n        if result is None:\n            result = occ[i]\n        else:\n            result = min(result, occ[i])\n\n    return result * k\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(s, k))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n, k = list(map(int, input().split()))\ns = input()\ng = [0] * k\nfor i in s:\n\tg[ord(i) - 65] += 1\nprint(k * min(g))\n", "n, k = list(map(int, input().split()))\ns = input()\n\ncnt = {k: 0 for k in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[:k]}\n\nfor c in s:\n    cnt[c] += 1\n\nv = n\nfor c in cnt:\n    v = min(v, cnt[c])\n\nprint(v * k)\n", "n, k = map(int, input().split())\ns = input()\nnum = dict()\nall1 = []\nans = 1000000000000\nfor i in range(65, 65 + k):\n    all1.append(chr(i))\nfor i in range(n):\n    if not s[i] in num:\n        num[s[i]] = 1\n    else:\n        num[s[i]] += 1\nfor i in range(k):\n    if all1[i] not in num:\n        ans = 0\n        break\n    ans = min(ans, num[all1[i]])\nprint(ans * k)", "n, k = map(int, input().split())\ns = input()\nd = [0 for _ in range(k)]\nfor i in s:\n    d[ord(i) - ord('A')] += 1\n#al = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n#for i in \nprint(min(d) * k)", "n,k=map(int,input().split())\ns=input()\nmin_c = n*2\nfor i in range(k):\n    c = chr(ord('A')+i)\n    min_c = min(min_c, s.count(c))\nprint(min_c*k)"]