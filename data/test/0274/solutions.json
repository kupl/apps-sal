["n = int(input())\nx = input()\nd = [0] * n\ncd = 0\nxp = []\nfor i in range(n):\n\tif x[i] == '[':\n\t\td[i] = cd\n\t\tcd = cd + 1\n\telse:\n\t\tcd = cd - 1\n\t\td[i] = cd\nfor i in range(n-1):\n\txp.append((x[i], d[i]))\n\tif x[i] == '[' and x[i+1] == ']':\n\t\txp.extend([(' ', d[i]), (' ', d[i]), (' ', d[i])])\nxp.append((x[n-1], d[n-1]))\nmd = max(d)\nh = md * 2 + 3\nres = []\nfor i in range(h):\n\tl = [' ' for j in xp]\n\tres.append(l)\nfor i in range(len(xp)):\n\tfor j in range(h):\n\t\tif xp[i][0] == '[' and j > xp[i][1] and j < h - xp[i][1] - 1:\n\t\t\tres[j][i] = '|'\n\t\telif xp[i][0] == ']' and j > xp[i][1] and j < h - xp[i][1] - 1:\n\t\t\tres[j][i] = '|'\n\t\telif xp[i][0] == '[' and (j == xp[i][1] or j == h - xp[i][1] - 1):\n\t\t\tres[j][i] = '+'\n\t\t\tres[j][i+1] = '-'\n\t\telif xp[i][0] == ']' and (j == xp[i][1] or j == h - xp[i][1] - 1):\n\t\t\tres[j][i] = '+'\n\t\t\tres[j][i-1] = '-'\n\nfor i in range(h):\n\tprint(''.join(res[i]))\n\n", "class Screen:\n    def __init__(self, n_rows):\n        self.rows = [[] for _ in range(n_rows)]\n        self.height = n_rows\n\n    def draw(self, x, y, c):\n        row = self.rows[y]\n        while x > len(row) - 1:\n            row.append(' ')\n        row[x] = c\n\n    def draw_open(self, x, height):\n        middle = self.height // 2\n        self.draw(x, middle, '|')\n        for dy in range(1, height + 1):\n            self.draw(x, middle + dy, '|')\n            self.draw(x, middle - dy, '|')\n        self.draw(x, middle + height + 1, '+')\n        self.draw(x + 1, middle + height + 1, '-')\n        self.draw(x, middle - height - 1, '+')\n        self.draw(x + 1, middle - height - 1, '-')\n\n    def draw_close(self, x, height):\n        middle = self.height // 2\n        self.draw(x, middle, '|')\n        for dy in range(1, height + 1):\n            self.draw(x, middle + dy, '|')\n            self.draw(x, middle - dy, '|')\n        self.draw(x, middle + height + 1, '+')\n        self.draw(x - 1, middle + height + 1, '-')\n        self.draw(x, middle - height - 1, '+')\n        self.draw(x - 1, middle - height - 1, '-')\n\n    def strings(self):\n        return [''.join(row) for row in self.rows]\n\n\ndef to_heights(seq):\n    depths = []\n    cur_depth = 0\n    for par in seq:\n        if par == '[':\n            depths.append(cur_depth)\n            cur_depth += 1\n        else:\n            cur_depth -= 1\n            depths.append(cur_depth)\n    max_depth = max(depths)\n    heights = [max_depth - depth for depth in depths]\n    return heights\n\n\ndef to_strings(seq, heights):\n    n_rows = 2 * (max(heights) + 1) + 1\n    screen = Screen(n_rows)\n    cur_x = 0\n    prev_par = None\n    for par, height in zip(seq, heights):\n        if par == '[':\n            screen.draw_open(cur_x, height)\n            cur_x += 1\n        if par == ']':\n            if prev_par == '[':\n                cur_x += 3\n            screen.draw_close(cur_x, height)\n            cur_x += 1\n        prev_par = par\n    return screen.strings()\n\n\n\n\n\nn = int(input())\nseq = input()\nheights = to_heights(seq)\nstrings = to_strings(seq, heights)\nfor string in strings:\n    print(string)\n\n", "N = int(input())\na = input()\nspaces = a.count('[]')\na = list(map(lambda x: 1 if x=='[' else -1, [x for x in str(a) if x=='[' or x==']']))\nmaxdepth = max([sum(a[:i+1]) for i in range(len(a))])\n\ndl = 5+(maxdepth-1)*2\nmaxdl = dl-2\n#for i in a:\njj = [[' ' for i in range(N+spaces*3)] for j in range(maxdl)]\nposx = 0\nfor i in range(len(a)):\n    if a[i] == 1:\n        dl -= 2\n        for j in range((maxdl-dl)//2,maxdl-(maxdl-dl)//2):\n                if j in [(maxdl-dl)//2,maxdl-(maxdl-dl)//2-1]:\n                    jj[j][posx]='+'\n                    jj[j][posx+1]='-'\n                else:\n                    jj[j][posx]='|'\n        if i < len(a) and a[i+1] == -1:\n            posx+=4\n        else:\n            posx+=1\n    elif a[i] == -1:\n        for j in range((maxdl-dl)//2,maxdl-(maxdl-dl)//2):\n                if j in [(maxdl-dl)//2,maxdl-(maxdl-dl)//2-1]:\n                    jj[j][posx]='+'\n                    jj[j][posx-1]='-'\n                else:\n                    jj[j][posx]='|'\n        dl += 2\n        posx+=1\nfor j in jj:\n    for i in j:\n        print(i,end='')\n    print()\n", "n = int(input())\ns = input()\nd = 0 # depth\nmd = 0 # max depth\nfor i in s:\n    if i == '[':\n        d += 1\n    else:\n        d -= 1\n    md = max(md, d)\n\n#print(md)\n\nnv = md * 2 - 1 # kol-vo palok at this moment\nout = \"\"\nres = []\ni = 0\nwhile i < n:\n    out += '+'\n    out += ('|' * nv)\n    out += '+'\n    res.append(out)\n    out = \"\"\n    while i != n-1 and s[i+1] == '[':\n        nv -= 2\n        \n        out += '-'\n        out += '+'\n        out += ('|' * nv)\n        out += '+'        \n        out += '-' \n        \n        res.append(out)\n        out = \"\"     \n        \n        i += 1\n    out += '-'\n    out += ' ' * nv\n    out += '-'\n    res.append(out)\n    out = \"\"\n    \n    res.append(\" \" * (nv + 2))\n    i += 1\n    \n    out += '-'\n    out += ' ' * nv\n    out += '-'\n    res.append(out)\n    out = \"\"    \n    \n    while i != n-1 and s[i+1] == ']':        \n        out += '-'\n        out += '+'\n        out += ('|' * nv)\n        out += '+'        \n        out += '-' \n        \n        res.append(out)\n        out = \"\"     \n        \n        nv += 2\n        i += 1\n    \n    out += '+'\n    out += ('|' * nv)\n    out += '+'\n    res.append(out)\n    out = \"\"    \n    #print(out)\n    i += 1\n\nnorm = md * 2 + 1\nfor i in range(len(res)):\n    if len(res[i]) == norm:\n        continue\n    else:\n        otk = (norm - len(res[i])) // 2\n        res[i] = (\" \" * otk) + res[i] + (\" \" * otk)\n\nfor i in range(norm):\n    for j in range(len(res)):\n        print(res[j][i], end=\"\")\n    print()\n\n\"\"\"\n8\n[[][]][]\n\n6\n[[[]]]\n\n6\n[[][]]\n\n2\n[]\n\n4\n[][]\n\"\"\"", "import sys\n\nn = int(input())\ns = input()\n\nheight = [1] * n\nmatching = [-1] * n\n\nfor i, c in enumerate(s):\n    if c == ']':\n        height[i] = height[matching[i]]\n        continue\n    balance = 1\n    for j in range(i + 1, n):\n        if s[j] == '[':\n            balance += 1\n        elif s[j] == ']':\n            balance -= 1\n        height[i] = max(height[i], balance)\n        if balance == 0:\n            matching[i] = j\n            matching[j] = i\n            break\n\nmax_height = max(height)\ncur_height, prev_height = max_height, -1\ncolumns = []\n\nm = 2 * max_height + 1\n\ndef draw_bar(pos, height):\n    while len(columns) <= pos:\n        columns.append([' ' for _ in range(m)])\n    upper_plus = max_height - height\n    lower_plus = m - upper_plus - 1\n    \n    columns[pos][upper_plus] = columns[pos][lower_plus] = '+'\n    for i in range(upper_plus + 1, lower_plus):\n        columns[pos][i] = '|'\n\ndef draw_lines(pos, height):\n    while len(columns) <= pos:\n        columns.append([' ' for _ in range(m)])\n\n    upper_minus = max_height - height\n    lower_minus = m - upper_minus - 1\n\n    columns[pos][upper_minus] = columns[pos][lower_minus] = '-'\n\npos, h = 0, max_height\nfor i, c in enumerate(s):\n    if i > 0:\n        if c == ']' and s[i-1] == '[':\n            pos += 3\n        if c == '[' and s[i-1] == '[':\n            h -= 1\n        elif c == ']' and s[i-1] == ']':\n            h += 1\n\n    draw_bar(pos, h)\n    if c == '[':\n        draw_lines(pos + 1, h)\n    elif c == ']':\n        draw_lines(pos - 1, h)\n\n    pos += 1\n\nfor i in range(m):\n    line = ''.join(column[i] for column in columns).rstrip()\n    print(line)\n", "n=int(input())\na=input()\nv=1\nq=0\nmaxlen=0\nfor i in range(1,len(a)):\n    if a[i]=='[':\n        v+=1\n    else:\n        v-=1\n    if(a[i-1]=='[' and a[i]==']'):\n        q+=1\n    maxlen=max(maxlen,v)\nv=[[\" \"]*(q*3+n) for i in range(3+ (max(0,maxlen-1)*2))]\ny=3+(max(0,maxlen-1)*2)\nx=0\nw=0\nfor i in range(n):\n    if a[i]=='[':\n        for j in range(w,y-w):\n            if(j==w or j==y-1-w):\n                v[j][x]='+'\n                v[j][x+1]='-'\n            else:\n                v[j][x]='|'\n        x+=1\n        w+=1\n    else:\n        if(a[i-1]=='['):\n            x+=3\n        w-=1\n        for j in range(w,y-w):\n            if(j==w or j==y-1-w):\n                v[j][x]='+'\n                v[j][x-1]='-'\n            else:\n                v[j][x]='|'\n        x+=1\nfor i in range(3+ (max(0,maxlen-1)*2)):\n    for j in range(q*3+n):\n        print(v[i][j],end=\"\")\n    print()    ", "lmap = lambda func, x: list(map(func, x))\n\n\n\n\n_, scobes = input(), input()#'', '[[[][][][][][][][]][]][]'\nscobes = scobes.replace('[]', '[   ]')\n\ndef empty_list(s):\n\treturn [0] * s\n\ndef two_dim_array(size):\n\treturn [empty_list(size[0]) for i in range(size[1])]\n\ndef process_scobes(scobes):\n\n\tdepthes = []\n\tdepth = 0\n\tfor i, scobe in enumerate(scobes):\n\t\tif scobe == '[':\n\t\t\tdepth+=1\n\t\tdepthes.append(depth)\n\n\t\tif scobe == ']':\n\t\t\tdepth-=1\n\n\t\n\tmax_depth = max(depthes)\n\tdepthes = lmap(lambda val: 2*(max_depth - val+1)+1, depthes)\n\treturn depthes\n\ndef set_on_interval(from_, to_):\n\tpass\n\ndef draw_scobes_into_array(scobes, heights):\n\tpicture = two_dim_array([len(scobes), max(heights)])\n\tmiddle = (max(heights) + 1)//2 \n\n\tfor i, scobe in enumerate(scobes):\n\t\th = heights[i] //2 - 1\n\t\tif scobe!=' ':\n\t\t\tfor height in range(middle-h - 1, middle+h):\n\t\t\t\tpicture[height][i] = 1\n\n\t\t\tpicture[middle - h - 2][i] = 2\n\t\t\tpicture[middle + h][i] = 2\n\t\t\toffset = 1 if scobe == '[' else -1\n\t\t\tpicture[middle - h - 2][i + offset] = 3\n\t\t\tpicture[middle + h][i + offset] = 3\n\n\treturn picture\n\n\n\nheights = process_scobes(scobes)\n\npicture = draw_scobes_into_array(scobes, heights)\n\n\ndraw_line = lambda line: ''.join(lmap(str, line)).replace('0', ' ').replace('1', '|').replace('2', '+').replace('3', '-')\nprint('\\n'.join(lmap(draw_line, picture)))\n\n#Here was me!\n", "input()\nmas = input()\nans = [0] * len(mas)\nstack = 0\n\nmaxx = 0\n\nfor i in mas:\n    if(i == \"[\"):\n        stack += 1\n    else:\n        stack -= 1\n    maxx = max(maxx, stack)\n\n\nstack = []\nfor i in range(len(mas)):\n    if(mas[i] == \"[\"):\n        stack.append(i)\n    else:\n        j = stack.pop()\n        ans[i] = len(stack)\n        ans[j] = len(stack)\n\n\nfor i in range(len(ans)):\n    ans[i] = maxx - ans[i]\n\n    \ni = 0\nwhile i != len(ans) - 1:\n    if(mas[i] == \"[\" and mas[i + 1] == \"]\"):\n        mas = mas[:i + 1] + \"___\" + mas[i + 1:]\n        ans.insert(i + 1, \"_\")\n        ans.insert(i + 1, \"_\")\n        ans.insert(i + 1, \"_\")\n        i += 2\n    i += 1\n\n\nfor i in range(maxx, 0, -1):\n    for x in range(len(ans)):\n        if(ans[x] == \"_\"):\n            if(ans[x - 1] == i or ans[x + 1] == i):\n                print(\"-\", end = \"\")\n            else:\n                print(\" \", end = \"\")\n        else:\n            if(ans[x] == i):\n                print(\"+\", end = \"\")\n            elif(ans[x] > i):\n                print(\"|\", end = \"\")\n            elif(ans[x - 1] == i or ans[x + 1] == i):\n                print(\"-\", end = \"\")\n            else:\n                print(\" \", end = \"\")\n    print()\n\n\nfor i in range(0, maxx + 1):\n    for x in range(len(ans)):\n        if(ans[x] == \"_\"):\n            if(ans[x - 1] == i or ans[x + 1] == i):\n                print(\"-\", end = \"\")\n            else:\n                print(\" \", end = \"\")\n        else:\n            if(ans[x] == i):\n                print(\"+\", end = \"\")\n            elif(ans[x] > i):\n                print(\"|\", end = \"\")\n            elif(ans[x - 1] == i or ans[x + 1] == i):\n                print(\"-\", end = \"\")\n            else:\n                print(\" \", end = \"\")\n    print()", "n = int(input())\ns = list(input())\n\nmax_len = 0\ncur_len = 0\nfor si in s:\n    if si == '[':\n        cur_len += 1\n    if si == ']':\n        cur_len -= 1\n    if cur_len > max_len:\n        max_len = cur_len\n\ncur_len = 0\nsize = []\nans = []\nfor si in s:\n    if si == '[':\n        cur_len += 1\n        size.append(max_len - cur_len + 1)\n        ans.append(size[-1])\n    if si == ']':\n        cur_len -= 1\n        ans.append(size[-1])\n        size = size[:-1]\n\n\ndef draw_bracket(pos, size, picture, open):\n    start = (len(picture) - 2*size - 1) // 2\n    picture[start][pos] = '+'\n    if open:\n        picture[start][pos + 1] = '-'\n    else:\n        picture[start][pos - 1] = '-'\n    \n    picture[len(picture) - start - 1][pos] = '+'\n    if open:\n        picture[len(picture) - start - 1][pos + 1] = '-'\n    else:\n        picture[len(picture) - start - 1][pos - 1] = '-'\n    \n    for i in range(start + 1, len(picture) - start - 1):\n        picture[i][pos] = '|'\n\n\ndef draw_picture(picture):\n    for i in picture:\n        print(''.join(i))\n\n\npic_size = 0\nfor i in range(n):\n    pic_size += 1\n    if i + 1 < n and s[i] == '[' and s[i + 1] == ']':\n        pic_size += 3\n\n\npicture = [[' ']*pic_size for i in range(2*max_len + 1)]\npos = 0\nfor i in range(n):\n    if s[i] == '[':\n        draw_bracket(pos, ans[i], picture, True)\n        if i + 1 < n:\n            if s[i + 1] == '[':\n                pos += 1\n            if s[i + 1] == ']':\n                pos += 4\n    if s[i] == ']':\n        draw_bracket(pos, ans[i], picture, False)\n        pos += 1\n\n\ndraw_picture(picture)\n", "input()\nbr = input()\nd = []\ncom = 0\nhmax = 0\nfor i in range(len(br)):\n\tif br[i] == '[':\n\t\td.append({\n\t\t\t'open': True,\n\t\t\t'com': com\n\t\t})\n\t\tcom += 2\n\telse:\n\t\tcom -= 2\n\t\td.append({\n\t\t\t'open': False,\n\t\t\t'com': com\n\t\t})\n\n\tif com > hmax:\n\t\thmax = com\n\nhmax -= 1\n\na = [[] for j in range(hmax + 2)]\ny = 0\nx = 0\nap = True\nfor j in range(len(d)):\n\n\tif ap:\n\t\tfor kek in range(len(a)):\n\t\t\ta[kek].append(' ')\n\telse:\n\t\tap = True\n\n\ti = d[j]\n\ty = i['com'] // 2\n\ty0 = y\n\ta[y][x] = '+'\n\tfor _ in range(hmax - i['com']):\n\t\ty += 1\n\t\ta[y][x] = '|'\n\ty += 1\n\ta[y][x] = '+'\n\n\tif i['open']:\n\t\tfor kek in range(len(a)):\n\t\t\ta[kek].append(' ')\n\t\tap = False\n\t\ta[y0][x + 1] = '-'\n\t\ta[y][x + 1] = '-'\n\telse:\n\t\ta[y0][x - 1] = '-'\n\t\ta[y][x - 1] = '-'\n\ttry:\n\t\tif i['open'] and not d[j + 1]['open']:\n\t\t\tx += 3\n\t\t\tfor kek in range(len(a)):\n\t\t\t\tfor _ in range(3):\n\t\t\t\t\ta[kek].append(' ')\n\texcept:\n\t\tpass\n\n\tx += 1\n\nfor i in a:\n\tprint(*i, sep='')", "import base64\ncode = \"aW5wdXQgKCkjbGluZToxCmJyID1pbnB1dCAoKSNsaW5lOjIKZCA9W10jbGluZTozCmNvbSA9MCAjbGluZTo0CmhtYXggPTAgI2xpbmU6NQpmb3IgaSBpbiByYW5nZSAobGVuIChiciApKTojbGluZTo2CglpZiBiciBbaSBdPT0nWyc6I2xpbmU6NwoJCWQgLmFwcGVuZCAoeydvcGVuJzpUcnVlICwnY29tJzpjb20gfSkjbGluZToxMQoJCWNvbSArPTIgI2xpbmU6MTIKCWVsc2UgOiNsaW5lOjEzCgkJY29tIC09MiAjbGluZToxNAoJCWQgLmFwcGVuZCAoeydvcGVuJzpGYWxzZSAsJ2NvbSc6Y29tIH0pI2xpbmU6MTgKCWlmIGNvbSA+aG1heCA6I2xpbmU6MjAKCQlobWF4ID1jb20gI2xpbmU6MjEKaG1heCAtPTEgI2xpbmU6MjMKYSA9W1tdZm9yIE8wTzAwME8wTzAwTzAwMDBPIGluIHJhbmdlIChobWF4ICsyICldI2xpbmU6MjUKeSA9MCAjbGluZToyNgp4ID0wICNsaW5lOjI3CmFwID1UcnVlICNsaW5lOjI4CmZvciBqIGluIHJhbmdlIChsZW4gKGQgKSk6I2xpbmU6MjkKCWlmIGFwIDojbGluZTozMQoJCWZvciBrZWsgaW4gcmFuZ2UgKGxlbiAoYSApKTojbGluZTozMgoJCQlhIFtrZWsgXS5hcHBlbmQgKCcgJykjbGluZTozMwoJZWxzZSA6I2xpbmU6MzQKCQlhcCA9VHJ1ZSAjbGluZTozNQoJaSA9ZCBbaiBdI2xpbmU6MzcKCXkgPWkgWydjb20nXS8vMiAjbGluZTozOAoJeTAgPXkgI2xpbmU6MzkKCWEgW3kgXVt4IF09JysnI2xpbmU6NDAKCWZvciBfIGluIHJhbmdlIChobWF4IC1pIFsnY29tJ10pOiNsaW5lOjQxCgkJeSArPTEgI2xpbmU6NDIKCQlhIFt5IF1beCBdPSd8JyNsaW5lOjQzCgl5ICs9MSAjbGluZTo0NAoJYSBbeSBdW3ggXT0nKycjbGluZTo0NQoJaWYgaSBbJ29wZW4nXTojbGluZTo0NwoJCWZvciBrZWsgaW4gcmFuZ2UgKGxlbiAoYSApKTojbGluZTo0OAoJCQlhIFtrZWsgXS5hcHBlbmQgKCcgJykjbGluZTo0OQoJCWFwID1GYWxzZSAjbGluZTo1MAoJCWEgW3kwIF1beCArMSBdPSctJyNsaW5lOjUxCgkJYSBbeSBdW3ggKzEgXT0nLScjbGluZTo1MgoJZWxzZSA6I2xpbmU6NTMKCQlhIFt5MCBdW3ggLTEgXT0nLScjbGluZTo1NAoJCWEgW3kgXVt4IC0xIF09Jy0nI2xpbmU6NTUKCXRyeSA6I2xpbmU6NTYKCQlpZiBpIFsnb3BlbiddYW5kIG5vdCBkIFtqICsxIF1bJ29wZW4nXTojbGluZTo1NwoJCQl4ICs9MyAjbGluZTo1OAoJCQlmb3Iga2VrIGluIHJhbmdlIChsZW4gKGEgKSk6I2xpbmU6NTkKCQkJCWZvciBfIGluIHJhbmdlICgzICk6I2xpbmU6NjAKCQkJCQlhIFtrZWsgXS5hcHBlbmQgKCcgJykjbGluZTo2MQoJZXhjZXB0IDojbGluZTo2MgoJCXBhc3MgI2xpbmU6NjMKCXggKz0xICNsaW5lOjY1CmZvciBpIGluIGEgOiNsaW5lOjY3CglwcmludCAoKmkgLHNlcCA9JycpCg==\"\neval(compile(base64.b64decode(code),'<string>','exec'))", "import sys\n\ndef vert(f, d, c, h):\n    f[d][c] = '+'\n    f[h-1-d][c] = '+'\n    for i in range(d+1,h-1-d):\n        f[i][c] = '|'\n    return f\n\nn = int(input())\ns = sys.stdin.readline().rstrip()\n\nd = 0\nmaxd=1\nfor c in s:\n    if c == '[':\n        d+=1\n        if d>maxd:\n            maxd=d\n    else:\n        d-=1\n\nh = 2*maxd +1\nopcl = s.count(\"[]\")\n\nw = opcl*5 + (len(s) - opcl*2)\n\nf = [[' ']*w for _ in range(h)]\n\nd = 0\nc = 0\nfor i in range(n):\n    if s[i] == '[':        \n        f = vert(f,d,c,h)\n        f[d][c+1] = '-'\n        f[h-1-d][c+1] = '-'        \n        d+=1\n    else:\n        if i>0 and s[i-1] == '[':\n            c+=3\n        d-=1\n        f = vert(f,d,c,h)\n        f[d][c-1] = '-'\n        f[h-1-d][c-1] = '-'\n        \n    c+=1\n\nans = [\"\".join(x) for x in f]\nprint(\"\\n\".join(ans))\n", "def draw(ind, type, size):\n    nonlocal ans, mid\n    ans[mid][ind] = '|'\n    for i in range(size // 2):\n        ans[mid + i][ind] = '|'\n        ans[mid - i][ind] = '|'\n    ans[mid + size // 2][ind] = '+'\n    ans[mid - size // 2][ind] = '+'\n    if type == \"left\":\n        ans[mid + size // 2][ind - 1] = '-'\n        ans[mid - size // 2][ind - 1] = '-'\n    else:\n        ans[mid + size // 2][ind + 1] = '-'\n        ans[mid - size // 2][ind + 1] = '-'\n\n\nn = int(input())\ns = input()\nmx = 0\ncs = 0\nfor i in range(n):\n    if s[i] == \"[\":\n        cs += 1\n    else:\n        cs -= 1\n    mx = max(mx, cs)\nmx -= 1\na = [mx]\nfor i in range(1, n):\n    if (s[i] == \"[\" and s[i - 1] == \"]\") or (s[i - 1] == \"[\" and s[i] == \"]\"):\n        a.append(a[-1])\n    elif s[i] == \"[\":\n        a.append(a[-1] - 1)\n    else:\n        a.append(a[-1] + 1)\nans = [[' ' for i in range(n * 3)] for j in range(3 + mx * 2)]\nmid = mx + 1\ndraw(0, \"right\", mx * 2 + 3)\nli = 0\nfor i in range(1, n):\n    if s[i] == \"[\" and s[i - 1] == \"]\":\n        li += 1\n        draw(li, \"right\", a[i] * 2 + 3)\n    elif s[i - 1] == \"[\" and s[i] == \"]\":\n        li += 4\n        draw(li, \"left\", a[i] * 2 + 3)\n    elif s[i] == \"[\":\n        li += 1\n        draw(li, \"right\", a[i] * 2 + 3)\n    else:\n        li += 1\n        draw(li, \"left\", a[i] * 2 + 3)\nfor i in ans:\n    for j in range(li + 1):\n        print(i[j], end=\"\")\n    print()\n", "input()\na = input()\nfield = [[\" \" for j in range(500)] for i in range(500)]\nmxb = -1\nb = 0\nfor i in range(len(a)):\n    if a[i] == \"[\":\n        b += 1\n    else:\n        b -= 1\n    mxb = max(mxb, b)\nm = (mxb * 2 + 1) // 2   \n\ndef opn(curpos, curb):\n    up = mxb - curb + 1\n    for i in range(up):\n        field[m + i][curpos] = \"|\"\n    for i in range(up):\n        field[m - i][curpos] = \"|\"\n    field[m + up][curpos] = \"+\"\n    field[m - up][curpos] = \"+\"\n    field[m + up][curpos + 1] = \"-\"\n    field[m - up][curpos + 1] = \"-\"\n    \n    \ndef clos(curpos,curb):\n    up = mxb - curb  + 1\n    for i in range(up):\n        field[m + i][curpos] = \"|\"\n    for i in range(up):\n        field[m - i][curpos] = \"|\"\n    field[m + up][curpos] = \"+\"\n    field[m - up][curpos] = \"+\"\n    field[m + up][curpos - 1] = \"-\"\n    field[m - up][curpos - 1] = \"-\"    \n    \n    \ncurb = 0\npos = 0\nfor i in range(len(a)):\n    if a[i] == \"[\":\n        curb += 1\n        opn(pos,curb)\n        pos += 1\n    else:\n        if a[i - 1] == \"[\":\n            pos += 3\n        clos(pos,curb)\n        curb -= 1\n        pos += 1\nans = []\nfor i in range(len(field)):\n    lst = -1\n    for j in range(len(field[0])):\n        if field[i][j] != \" \":\n            lst = j \n    ans.append(lst + 1)\nfor i in range(len(field)):\n    for j in range(ans[i]):\n        print(field[i][j],end=\"\")\n    if ans[i]:\n        print()\n    ", "n = input()\ns = input()\nbal = []\n\ncurbal = 0\nmaxbal = 0\nfor i in s:\n    if i == '[':\n        bal.append((curbal, 1))        \n        curbal += 1\n        maxbal = max(curbal, maxbal)\n    else:\n        bal.append((curbal, -1))\n        curbal -= 1        \n    \nbal = [(maxbal - i, j) for (i, j) in bal]\nstack = []\nans = [[] for _ in range(2 * maxbal + 1)]\n\nfor i in range(len(bal)):\n    if bal[i][1] == 1:\n        stack.append(bal[i][0])\n        if i == 0 or bal[i - 1][1] == 1:    \n            for j in range(maxbal - bal[i][0]):\n                ans[j].append(\" \")\n            ans[maxbal - bal[i][0]].append(\"+-\")\n            for j in range(maxbal - bal[i][0] + 1, maxbal + bal[i][0]):\n                ans[j].append(\"|\")\n            ans[maxbal + bal[i][0]].append(\"+-\")\n            for j in range(maxbal + bal[i][0] + 1, 2 * maxbal + 1):\n                ans[j].append(\" \")\n        else:\n            for j in range(maxbal - bal[i][0]):\n                ans[j].append(\"   \")\n            ans[maxbal - bal[i][0]].append(\"+-\")\n            for j in range(maxbal - bal[i][0] + 1, maxbal + bal[i][0]):\n                ans[j].append(\"|\")\n            ans[maxbal + bal[i][0]].append(\"+-\")\n            for j in range(maxbal + bal[i][0] + 1, 2 * maxbal + 1):\n                ans[j].append(\"   \")            \n    else:\n        if bal[i - 1][1] == 1:\n            for j in range(2 * maxbal + 1):\n                ans[j].append(\" \")\n            for j in range(maxbal - stack[-1]):\n                ans[j].append(\" \")\n            ans[maxbal - stack[-1]].append(\"-+\")\n            for j in range(maxbal - stack[-1] + 1, maxbal + stack[-1]):\n                ans[j].append(\"  |\")\n            ans[maxbal + stack[-1]].append(\"-+\")\n            for j in range(maxbal + stack[-1] + 1, 2 * maxbal + 1):\n                ans[j].append(\" \")               \n        else:\n            for j in range(maxbal - stack[-1]):\n                ans[j].append(\" \")\n            ans[maxbal - stack[-1]].append(\"-+\")\n            for j in range(maxbal - stack[-1] + 1, maxbal + stack[-1]):\n                ans[j].append(\"|\")\n            ans[maxbal + stack[-1]].append(\"-+\")\n            for j in range(maxbal + stack[-1] + 1, 2 * maxbal + 1):\n                ans[j].append(\" \")            \n        stack.pop()\nfor i in ans:\n    print(''.join(i))", "#This code is dedicated to Olya S.\nl=int(input())\nn=input()\n\ndef offset(ml,x):\n    return (ml-x)//2\n\ndef getstate(g,line,ml):\n    off=offset(ml,g[0])\n    if line<off or line>=g[0]+off:\n        return 0\n    elif line==off or line == g[0]+off-1:\n        return 1\n    else:\n        return 2\n    \n    \n    \n\n#Find max bracket#\nml=1\ncl=1\nfor b in n:\n    if b=='[':\n        cl+=2\n        if ml<cl:\n            ml=cl\n    else:\n        cl-=2\n######MAP######\nsc=[]\nfor b in n:\n    if b=='[':\n        sc.append([ml,True])\n        ml-=2\n    else:\n        ml+=2\n        sc.append([ml,False])\n#####################\nfor i in range(ml):\n    for j in range(l):\n        g=sc[j]\n        state=getstate(g,i,ml)\n        if state==1:\n            if g[1]:\n                print('+-',end='')\n            else:\n                print('-+',end='')\n        elif state==0:\n            if sc[j-1][0]-sc[j][0]!=2:\n                print('  ',end='')\n        else:\n            print('|',end='')\n        if sc[j][1] and not sc[j+1][1]:\n            if state==2:\n                print('   ',end='')\n            else:\n                print(' ',end='')\n        \n    print()\n\n    \n\n\n\n\n\n\n            \n", "def getHeight(s: str) -> int:\n    h = maxh = 0\n    for c in s:\n        h += (1 if c == '[' else -1)\n        maxh = max(h, maxh)\n    return maxh\n\n\ndef makeColumn(height: int, maximumHeight: int) -> str:\n    half = (maximumHeight - height) * [' '] + ['+'] + height * ['|']\n    return half + half[-2::-1]\n\n\nn, s = int(input()), input()\nh = getHeight(s)\nans = [makeColumn(h, h)]\ncurh = h - 1\nfor i in range(1, n):\n    if s[i] == ']':\n        if s[i - 1] == '[':\n            for j in range(3):\n                ans.append([' '] * (h * 2 + 1))\n        curh += 1\n        ans.append(makeColumn(curh, h))\n    else:\n        ans.append(makeColumn(curh, h))\n        curh -= 1\nfor line in zip(*ans):\n    for i in range(len(line)):\n        if ((i > 0 and line[i - 1] == '+') or\n          (i < len(line) - 1 and line[i + 1] == '+')) and line[i] == ' ':\n            print('-', end='')\n        else:\n            print(line[i], end='')\n    print()\n", "n = int(input())\ns = input()\nbal = 0\nm = 0\nv = [0] * n\nfor i in range(n):\n    if s[i] == '[':\n        bal += 1\n        v[i] = bal\n        m = max(m, bal)\n    else:\n        v[i] = -bal\n        bal -= 1\nfor j in range(1, 2 * m + 2):\n    for i in range(0, n):\n        if abs(v[i]) == j or abs(v[i]) == 2 * (m + 1) - j:\n            if v[i] > 0:\n                print('+-', end = '')\n            else:\n                print('-+', end = '')\n        elif abs(v[i]) < j and abs(v[i]) < 2 * (m + 1) - j:\n            print('|', end = '')\n            if i + 1 < n and v[i + 1] < 0 and v[i] == -v[i + 1]:\n                print('  ', end = '')\n        else:\n            print(' ', end = '')\n            if i > 0 and abs(v[i - 1]) >= abs(v[i]) and i + 1 < n and abs(v[i + 1]) >= abs(v[i]):\n                print(' ', end = '')\n        if i + 1 < n and v[i + 1] < 0 and v[i] == -v[i + 1]:\n            print(' ', end = '')\n    print()\n\n            \n", "n = input()\ns = input()\n\nb = 0\nmaxb = 0\nfor c in s:\n    if c == '[':\n        b += 1\n    else:\n        b -= 1\n    if b > maxb:\n        maxb = b\n\nres = [\"\"] * (maxb * 2 + 1)\nb = maxb\npred = \"\"\n\nfor k in range(len(s)):\n    c = s[k]\n    \n    if c == '[':\n        if k != len(s) - 1:\n            if s[k+1] == ']':\n                sep = '| '\n            else:\n                sep = '|'\n        else:\n            sep = '|'\n            \n        i = maxb - b\n        for j in range(i):\n            res[j] += ' '\n        \n        res[i] += '+-'        \n        for j in range(i + 1, len(res) - i - 1):\n            res[j] += sep\n        res[len(res) - i - 1] += '+-'\n\n        for j in range(len(res) - i, len(res)):\n            res[j] += ' '\n                        \n        pred = '['\n        b -= 1\n        \n    elif c == ']':\n        if k != len(s) - 1:\n            if s[k+1] == '[':\n                space = '   '\n            else:\n                space = ' '\n        else:\n            space = ' '\n        \n        b += 1\n        if pred == '[':\n            sep = ' |'\n            for j in range(len(res)):\n                res[j] += ' '\n        else:\n            sep = '|'\n                        \n        i = maxb - b\n        for j in range(i):\n                res[j] += space\n         \n        res[i] += '-+'              \n        for j in range(i + 1, len(res) - i - 1):\n            res[j] += sep              \n        res[len(res) - i - 1] += '-+'\n\n        for j in range(len(res) - i, len(res)):\n            res[j] += space\n                        \n        pred = ']'\n\nfor i in res:\n    print(i)\n\n\n\n\n        \n\n\n\n", "_, s = input(), input()\n\nMAX_H = 1 + 2 * max(s.count('[', 0, i) - s.count(']', 0, i) for i in range(len(s) + 1))\n\nline = lambda d: '+'.join((' ' * d, '|' * (MAX_H - 2 * d - 2), ' ' * d))\n\ndef draw(s, i, d):\n    return [line(d)] if s[i] == '[' else ([' ' * MAX_H] * 3 if s[i - 1] == '[' else []) + [line(d - 1)]\n\n[print(''.join(x).replace('+ ', '+-').replace(' +', '-+')) for x in zip(*sum((draw(s, i, s.count('[', 0, i) - s.count(']', 0, i)) for i in range(len(s))), []))]\n", "n = int(input())\ns = input()\nt = set()\na = [0]*len(s)\nq = 0\nm = 0\nans = []\nfor i in range(len(s)):\n    if(s[i]=='['):\n        q+=1\n        a[i]=q\n        m=max(m,q)\n    else:\n        a[i]=q\n        q-=1\n        m = max(m,q)\n        if(s[i-1]=='['):\n            t.add(i-1)\nfor i in range(m+1):\n    e=''\n    for j in range(len(s)):\n        if(a[j]-1==i):\n            if(s[j]=='['):\n                e+='+-'\n                if(j in t):\n                    e+=' '\n            else:\n                e+='-+'\n        elif(a[j]-1<i):\n            if(s[j]=='['):\n                e+='|'\n                if(j in t):\n                    e+='  '\n            elif(s[j]==']'):\n                if(j-1 in t):\n                    e+=' '\n                e+='|'\n        else:\n            if(s[j]=='['):\n                if(j>0 and s[j-1]==']' and a[j-1]==a[j]):\n                    e+=' '\n                e+=' '\n                if(j in t):\n                    e+=' '\n            else:\n                if(j!=len(s)-1 and s[j+1]!=']'):\n                    e+=' '\n                e+=' '\n    ans+=[e]\nfor i in range(len(ans)):\n    print(ans[i])\nfor i in range(len(ans)-2,-1,-1):\n    print(ans[i])\n\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Mar 11 23:20:54 2017\n\n@author: Alexandr\n\"\"\"\n\nn = int(input())\nbrackets = input()\nmax_deep = 0\ndeep = [0] * n\nd = 0\nfor i in range(n):\n    if brackets[i] == '[':\n        d += 1\n        deep[i] = d\n    else:\n        deep[i] = d\n        d -= 1\n\nmax_deep = max(deep)\n\nans = []\nheight = max_deep * 2 + 1\n\nfor i in range(n):\n    x = (max_deep - deep[i]) * 2 + 1\n    y = (height - x - 2) // 2    \n    s = '+' + '|'*x + '+'\n    if (\n        i != 0 \n        and brackets[i] == ']' \n        and brackets[i - 1] == '['\n    ):\n        ans.append(y * ' ' + '-' + x * ' ' + '-' + y * ' ')\n        ans.append(' ' * height)            \n        ans.append(y * ' ' + '-' + x * ' ' + '-' + y * ' ')\n    if (\n        i != 0 and i != n - 1\n        and deep[i] != 1 \n        and (deep[i] > deep[i - 1] or deep[i] > deep[i + 1])\n    ):\n        s = (y - 1) * ' ' + '-' + s + '-' + (y - 1) * ' '\n        \n    else:\n        s = y * ' ' + s + y * ' '\n    ans.append(s)\n\nfor i in zip(*ans):\n    print(''.join(i))", "def Paint(height,napr):\n   return ''\nrngOfseq=int(input())\nseq=input()\nmaxh=3\nheightes=[]\ncurrent=1\ntek=3\nfor i in range(rngOfseq-1):#maxh\n    if seq[i]=='[' and seq[i+1]=='[':\n        tek+=2\n    if seq[i]==']' and seq[i+1]==']':\n        tek-=2\n    if maxh<tek:\n        maxh=tek\ncurrent=maxh\nfor i in range(rngOfseq-1):#heightes\n    heightes.append(current)\n    if seq[i]=='[' and seq[i+1]=='[':\n        current-=2\n    if seq[i]==']' and seq[i+1]==']':\n        current+=2\nheightes.append(current)\ncurrent=maxh\nFlag=True\nfor j in range(maxh):#draw\n    currentraw=''\n    for i in range(rngOfseq):\n        if heightes[i]==current:\n            if seq[i]=='[':\n                currentraw+='+-'\n            else:\n                currentraw+='-+'\n        elif heightes[i]>current:\n            currentraw+='|'\n        else:\n            currentraw+=' '\n        try:\n            if heightes[i]==heightes[i+1]:\n                if heightes[i]==current:\n                    if seq[i] =='[' and seq[i+1]==']':\n                        currentraw+=' '\n                elif heightes[i]<current:\n                    if seq[i] ==']' and seq[i+1]=='[':\n                        currentraw+='  '\n                    if seq[i] =='[' and seq[i+1]==']':\n                        currentraw+=' '\n                else:\n                    if seq[i] =='[' and seq[i+1]==']':\n                        currentraw+='   '\n        except:\n            continue\n    if current==1:\n        Flag=False\n    if Flag:\n        current-=2\n    else:\n        current+=2\n    print(currentraw)", "def empty(d):\n\tt = '+- -+'\n\tres = [t]\n\tfor i in range(2 * d - 1): res.append('|   |')\n\tres.append('+- -+')\n\treturn res\n\ndef cover(l):\n\tnumspaces = len(l[0]) - 2\n\tspaces = numspaces * ' '\n\ttb = '+-' + spaces + '-+'\n\tres = [tb]\n\tfor s in l:\n\t\tns = '|' + s + '|'\n\t\tres.append(ns)\n\tres.append(tb)\n\treturn res\n\ndef do(s, d):\n\tblocks = list()\n\tstart = 0\n\tbalance = 0\n\tfor right in range(len(s)):\n\t\tif s[right] == '[':\n\t\t\tbalance += 1\n\t\telse: \n\t\t\tbalance -= 1\n\t\tif balance == 0:\n\t\t\tif start + 1 == right:\n\t\t\t\tblocks.append(empty(d))\n\t\t\telse:\n\t\t\t\tinner = do(s[start + 1 : right], d - 1)\n\t\t\t\tcovered = cover(inner)\n\t\t\t\tblocks.append(covered)\n\t\t\tstart = right + 1\n\tres = [\"\" for _ in range(2 * d + 1)]\n\tfor block in blocks:\n\t\tfor i in range(len(block)):\n\t\t\tres[i] += block[i]\n\treturn res\n\ndef depth(s):\n\tres = 0\n\tcur = 0\n\tfor c in s:\n\t\tif c == '[':\n\t\t\tcur += 1\n\t\telse:\n\t\t\tcur -= 1\n\t\tres = max(res, cur)\n\treturn res\n\nn = int(input())\ns = input()\nfor l in do(s, depth(s)):\n\tprint(l)"]