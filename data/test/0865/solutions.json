["import numpy as np\n \nN, T = map(int, input().split())\ndata = []\nfor i in range(N):\n  a, b = map(int, input().split())\n  data.append((a,b))\ndata.sort()\ndata = np.array(data)\n\ndp = np.zeros(T)\nans = 0\nfor a, b in data:\n    ans = max(ans,dp[-1]+b)\n    if a< T:\n        newtable = dp[:T-a] + b\n        dp[a:] = np.maximum(dp[a:], newtable)\n\nprint(int(ans))", "import numpy as np\nn,t = map(int,input().split())\nl = [list(map(int,input().split())) for i in range(n)]\nl.sort()\ndp = np.array([0]*t)\nans = 0\nfor a,b in l:\n    ans = max(ans,dp[-1]+b)\n    dp[a:] = np.maximum(dp[a:],dp[:-a]+b)\n    \n    \nprint(max(ans,dp[-1]))", "import numpy as np\n\nN, T = list(map(int, input().split()))\nAB = [list(map(int, input().split())) for _ in range(N)]\nAB.sort()\n# dp \u306f0\u304b\u3089T-1\u307e\u3067\ndp = np.zeros(T, dtype=np.int32)\ntemp_ans = 0\nfor a, b in AB:\n    temp_ans = max(temp_ans, dp.max() + b)\n    dp[a:] = np.maximum(dp[a:], dp[:-a]+b)\nprint(temp_ans) \n", "from numpy import zeros, maximum\n\nN, T, *AB = list(map(int, open(0).read().split()))\n\ndp = zeros(6010, int)\nfor w, v in sorted(zip(*[iter(AB)] * 2)):\n    dp[w:T + w] = maximum(dp[w:T + w], dp[:T] + v)\n\nprint((dp.max()))\n", "from numpy import*\nN,T,*L=map(int,open(0).read().split())\nd=zeros(6010,int)\nfor w,v in sorted(zip(*[iter(L)]*2)):d[w:T+w]=maximum(d[w:T+w],d[:T]+v)\nprint(max(d))", "import numpy as np\n \nN,T = map(int, input().split())\nAB = [list(map(int, input().split())) for _ in range(N)]\nAB = sorted(AB)\n\ndp = np.zeros(T,np.int64)  \nans = 0\nfor a, b in AB:\n    ans = max(ans, dp.max() + b)\n    np.maximum(dp[a:], dp[:-a] + b, out=dp[a:])\nprint(ans)", "def main():\n    import numpy as np\n    n,t=map(int,input().split())\n    F=[tuple(map(int,input().split())) for _ in range(n)]\n    F.sort(key=lambda x:x[0])\n\n    dp=np.zeros([n+1,t],dtype=np.int64)\n    for i in range(n):\n        a1=F[i][0]\n        b1=F[i][1]\n        dp[i+1][:a1]=dp[i][:a1]\n        dp[i+1][a1:]=np.maximum(dp[i][a1:],dp[i][:-a1]+b1)\n    \n    ans=0\n    for i in range(n):\n        ans=max(ans,dp[i][-1]+F[i][1])\n    print(ans)\n         \ndef __starting_point():\n    main()\n__starting_point()", "import sys\n\nimport numpy as np\n\nn, t = map(int, input().split())\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines = [tuple(map(int, line.split())) for line in sys.stdin]\ncuisines.sort()\ntmp_ans = 0\nfor a, b in cuisines:\n    tmp_ans = max(tmp_ans, knapsack.max() + b)\n    knapsack[a:] = np.maximum(knapsack[a:], knapsack[:-a] + b)\n\nprint(max(tmp_ans, knapsack.max()))", "n,t=list(map(int,input().split()))\nab=[list(map(int,input().split())) for _ in range(n)]\nab.sort(key=lambda x:x[0])\nimport numpy as np\nans=0\ndp=np.zeros(t,np.int64)\n# dp[i]:\u6642\u9593\u5408\u8a08i\u4ee5\u5185\u306b\u98df\u3079\u308c\u308b\u6599\u7406\u306e\u304a\u3044\u3057\u3055\u7dcf\u548c\u306e\u6700\u5927\nfor i in range(n):\n  a,b=ab[i]\n  ans=max(ans,dp[-1]+b)\n  dp[a:]=np.maximum(dp[a:],dp[:-a]+b)\nprint(ans)\n", "import numpy as np\n \nn, t = map(int, input().split())\na = []\nb = []\n\nfor _ in range(n):\n  a_tmp, b_tmp = map(int, input().split())\n  a.append(a_tmp)\n  b.append(b_tmp)\n    \narg = np.argsort(a)\na = np.array(a)[arg]\nb = np.array(b)[arg]\ndp = np.zeros((n, t), dtype=np.int)\n    \nfor i in range(n - 1):\n  dp[i+1, :a[i]] = dp[i, :a[i]]\n  dp[i+1, a[i]:] = np.maximum(dp[i, a[i]:], dp[i, :-a[i]] + b[i])\n  \nprint(np.max(dp[:, -1] + b))", "from numpy import zeros, maximum, array\n\ndef main():\n    N, T, *AB = list(map(int, open(0).read().split()))\n\n    dp = zeros(T + max(AB[::2]), int)\n    for w, v in sorted(zip(*[iter(AB)] * 2)):\n        dp[w:T + w] = maximum(dp[w:T + w], dp[:T] + v)\n\n    print((dp.max()))\n\nmain()\n", "import numpy as np\nn,t = list(map(int, input().split()))\nitem = [None]*n\nans = 0\ndp = np.zeros(t, dtype=int)\n\nfor i in range(n):\n    a,b = list(map(int, input().split()))\n    item[i]=[a,b]\nitem.sort(key=lambda x:x[0])\n\nfor i in range(n):\n    a,b = item[i]\n    ans = max(ans, dp.max()+b)\n    dp[a:] = np.maximum(dp[a:], dp[:-a]+b)\n\nprint(ans)\n", "import numpy as np\n\n\ndef solve():\n\n\n    N, T = list(map(int, input().split()))\n\n    A = []\n    B = []\n\n    for _ in range(N):\n        A_temp, B_temp = list(map(int, input().split()))\n        A.append(A_temp)\n        B.append(B_temp)\n\n    A = np.array(A, np.int)\n    B = np.array(B, np.int)\n\n    idx = np.argsort(A)\n    A = A[idx]\n    B = B[idx]\n\n    dp = np.zeros((N, T), np.int)\n\n    for i in range(N - 1):\n        dp[i + 1, :A[i]] = dp[i, :A[i]]\n        dp[i + 1, A[i]:] = np.maximum(dp[i, A[i]:], dp[i, :-A[i]] + B[i])\n\n    print((np.max(dp[:, -1] + B)))\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "import sys\nimport numpy as np\n\nn, t = list(map(int, input().split()))\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines = [tuple(map(int, line.split())) for line in sys.stdin]\ncuisines.sort()\ntmp_ans = 0\nfor a, b in cuisines:\n    tmp_ans = max(tmp_ans, knapsack.max() + b)\n    knapsack[a:] = np.maximum(knapsack[a:], knapsack[:-a] + b)\nprint(tmp_ans)\n", "def main():\n  e=enumerate\n  (n,t),*g=[list(map(int,t.split()))for t in open(0)]\n  d=[0]\n  g.sort()\n  dp=[]\n  d=[0]*t\n  for a,b in g:\n    p=d[:]\n    for i in range(a,t):\n      v=d[i-a]+b\n      if v>p[i]:p[i]=v\n    dp+=p,\n    d=p\n  a=m=0\n  for(*_,v),(_,w)in zip(dp[-2::-1],g[::-1]):\n    if w>m:m=w\n    if v+m>a:a=v+m\n  print(a)\nmain()", "import numpy as np\nn, t = map(int, input().split())\nlst = np.full((t), -float(\"inf\"))\nlst[0] = 0\nans = 0\nab = [list(map(int, input().split())) for i in range(n)]\nab.sort()\nfor a, b in ab:\n    ans = max(ans, max(lst) + b)\n    if a < t:\n        lst[a:] = np.maximum(lst[a:], lst[:-a] + b)\nans = int(ans)\nprint(ans)", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    N, T = list(map(int, input().split()))\n    items = [tuple(map(int, input().split())) for _ in range(N)]\n\n    items.sort()\n\n    capW = T-1\n    dp = [0] * (capW+1)\n    ans = 0\n    for wi, vi in items:\n        ans = max(ans, dp[-1]+vi)\n        for w in reversed(list(range(wi, capW+1))):\n            v0 = dp[w-wi] + vi\n            if v0 > dp[w]:\n                dp[w] = v0\n\n    print(ans)\n\n\nsolve()\n", "import numpy as np\n\nN, T = list(map(int, input().split()))\nC = [tuple(map(int, input().split())) for _ in range(N)]\nC.sort(key=lambda x: x[0])\n\ndp = np.zeros(T, dtype=int)\nans = 0\nfor i, (a, b) in enumerate(C):\n    ans = max(ans, dp[T - 1] + b)\n    new_dp = dp.copy()\n    new_dp[a:] = np.maximum(dp[a:], dp[:-a] + b)\n    dp = new_dp\nprint(ans)\n", "def main():\n    N, T = list(map(int, input().split()))\n    AB = [list(map(int, input().split())) for _ in range(N)]\n\n    dp = [-1] * (T + 3000)\n    dp[0] = 0\n    c = 0\n    for a, b in sorted(AB):\n        for j in range(c, -1, -1):\n            if dp[j] == -1:\n                continue\n            t = dp[j] + b\n            if dp[j + a] < t:\n                dp[j + a] = t\n        c = min(c + a, T - 1)\n    print((max(dp)))\n\n\nmain()\n", "from numpy import*\nN,T,*L=int64(open(0).read().split())\nd=zeros(6010,int)\nfor w,v in sorted(zip(*[iter(L)]*2)):d[w:T+w]=maximum(d[w:T+w],d[:T]+v)\nprint(max(d))", "import sys\ninput = sys.stdin.readline\nread = sys.stdin.read\nimport numpy as np\n\nn, t = map(int, input().split())\nm = map(int, read().split())\nAB = sorted(zip(m, m))\nA, B = zip(*AB)\ndp = np.zeros((n+1, t), dtype=np.int64)\nfor i, (a, b) in enumerate(AB):\n  np.maximum(dp[i, a:], dp[i, :-a]+b, out=dp[i+1, a:])\nmaxB = np.maximum.accumulate(B[::-1])[::-1]\nans = (dp[1:-1, -1]+maxB[1:]).max()\nprint(ans)", "import numpy as np\nN, T = map(int, input().split())\n\nmenu = []\nfor _ in range(N):\n    m = tuple(map(int, input().split()))\n    menu.append(m)\nmenu = sorted(menu, key=lambda m: m[0])\n\n# \u6599\u7406i-1\u3092j-1\u5206\u307e\u3067\u306b\u5b8c\u98df\u3059\u308b\u3068\u304d\u306e\u6e80\u8db3\u5ea6\u6700\u5927\u5024\ndp = np.zeros((N, T), dtype='int64')\nanss = []\n\nfor i in range(1, N):\n    # \u4e00\u3064\u307e\u3048\u306e\u30e1\u30cb\u30e5\u30fc\u306b\u3064\u3044\u3066\n    ai, bi = menu[i-1]\n    dp[i][:ai] = dp[i-1][:ai]  # \u6642\u9593\u304c\u8db3\u308a\u306a\u3044\u306e\u3067\u6ce8\u6587\u3057\u306a\u3044\n    dp[i][ai:] = np.fmax(\n        dp[i-1][ai:], # \u4f55\u3082\u6ce8\u6587\u3057\u306a\u3044\n        dp[i-1][:-ai] + bi # \u6ce8\u6587\u3057\u305f\u5834\u5408, ai\u5206\u304b\u304b\u3063\u3066\u3082\u5927\u4e08\u592b\u306a\u7bc4\u56f2\u304b\u3089\u53d6\u5f97\n    )\n    # \u52a0\u3048\u3066\u81ea\u8eab\u3092\u6700\u5f8c\u306b\u98df\u3079\u305f\u5834\u5408\u3092\u8a18\u9332\n    anss.append(dp[i][-1] + menu[i][1])\n\nprint(max(anss))", "from numpy import*\nN,T,*AB=map(int,open(0).read().split())\ndp=zeros(6010,int)\nfor w,v in sorted(zip(*[iter(AB)]*2)):dp[w:T+w]=maximum(dp[w:T+w],dp[:T]+v)\nprint(max(dp))", "import sys\n\nimport numpy as np\n\nn, t = list(map(int, input().split()))\nknapsack = np.zeros(t, dtype=np.int64)\ncuisines = [tuple(map(int, line.split())) for line in sys.stdin]\ncuisines.sort()\ntmp_ans = 0\nfor a, b in cuisines:\n    tmp_ans = max(tmp_ans, knapsack.max() + b)\n    knapsack[a:] = np.maximum(knapsack[a:], knapsack[:-a] + b)\n\nprint((max(tmp_ans, knapsack.max())))\n", "import numpy as np\nn,t = map(int, input().split())\nDP = np.full((t), -float(\"inf\"))\nDP[0] = 0\nans = 0\nab = [list(map(int, input().split())) for i in range(n)]\nab.sort()\nfor a,b in ab:\n    ans = max(ans, max(DP)+b)\n    if a<t:\n        DP[a:] = np.maximum(DP[a:], DP[:-a]+b)\n\nans = int(ans)\nprint(ans)", "import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nN, T = lr()\nAB = [lr() for _ in range(N)]\nAB.sort()\n# \u6642\u9593\u306e\u304b\u304b\u308b\u7269\u306f\u5f8c\u308d\u3078\ndp = np.zeros(T, np.int64)\nanswer = 0\nfor a, b in AB:\n    answer = max(answer, dp.max() + b)\n    prev = dp\n    dp[a:] = np.maximum(prev[a:], prev[:-a] + b)\n\nprint(answer)\n", "import numpy as np\n\nN, T = map(int, input().split())\nABs = [tuple(map(int, input().split())) for _ in range(N)]\n\ndp = np.zeros((N+1, 2, T), np.int64)\nfor i, (A, B) in enumerate(ABs):\n    dp[i+1] = dp[i]\n    dp[i+1, 1] = np.maximum(dp[i, 0] + B, dp[i+1, 1])\n    dp[i+1, :, A:] = np.maximum(dp[i, :, :-A] + B, dp[i+1, :, A:])\n\nprint(np.max(dp[N]))", "def main():\n    N, T = list(map(int, input().split()))\n    ab = [tuple(map(int, input().split())) for i in range(N)]\n    ab.sort(key=lambda x: x[0])\n    t = ab[-1][0]\n    dp = [-1]*(T+t+1)\n    dp[0] = 0\n    for a, b in ab:\n        for i in range(T-1, -1, -1):\n            if dp[i] < 0:\n                continue\n            if dp[i+a] < dp[i]+b:\n                dp[i+a] = dp[i]+b\n    ans = max(dp)\n    print(ans)\nmain()\n", "import sys\nimport numpy as np\ninput = sys.stdin.readline\n\nn, t = map(int, input().split())\nab = [list(map(int, input().split())) for _ in range(n)]\n\nab.sort(key=lambda x:(x[0], -x[1]))\n\ndp = np.array([0]*t)\nans = 0\n\nfor a, b in ab:\n    ans = max(ans, dp[-1] + b)\n    dp[a:] = np.maximum(dp[:-a]+b, dp[a:])\nprint(max(ans, dp[-1]))", "def knapsack_DP(N, W, weight, value):\n    import numpy as np\n    dishes = [(weight[i], value[i]) for i in range(N)]\n    dishes = sorted(dishes, key=lambda x: x[0])\n    dp = np.zeros(W, dtype=int)\n    ans=0\n    for w, v in dishes:\n        ans=max(dp[-1]+v, ans)\n        np.maximum(dp[:-w] + v, dp[w:], out=dp[w:]) \n    return ans\n\ndef __starting_point():\n    N, W = map(int, input().split())\n    weight = []\n    value = []\n    for i in range(N):\n        w, v= map(int, input().split())\n        weight.append(w)\n        value.append(v)\n    print(knapsack_DP(N, W, weight, value))\n__starting_point()", "import numpy as np\n\nn,t = map(int,input().split())\nab = [list(map(int,input().split())) for i in range(n)]\nab.sort()\ndp = np.array([0]*t)\nans = 0\nfor a,b in ab:\n    ans = max(ans,dp[-1]+b)\n    dp[a:] = np.maximum(dp[:-a]+b,dp[a:])\n# print(dp,ans)\nprint(max(ans,dp[-1]))", "import sys\nimport numpy as np\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef IS(): return sys.stdin.readline()[:-1]\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LII(rows_number): return [II() for _ in range(rows_number)]\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\n\ndef main():\n\tN,T = MI()\n\tmax_T = -1\n\tdish = []\n\tfor i in range(N):\n\t\tA,B = MI()\n\t\tdish.append([A,B])\n\t\tdish.sort(key=lambda x : x[0])\n\t\tmax_T = max(max_T, A)\n\n\tdp=np.array([-1 for _ in range(T+max_T)])\n\tdp[0] = 0\n\tupper = 1\n\tfor i in range(N):\n\t\tch = (dp>=0)\n\t\tch[T:] = False\n\t\tch2 = np.roll(ch, dish[i][0])\n\t\tch2[:dish[i][0]]=False\n\t\tdp[ch2] = np.maximum(dp[ch2] , dp[ch] + dish[i][1])\n\tprint(max(dp))\nmain()", "import numpy as np\n\nn, t = map(int, input().split())\na = []\nb = []\nfor _ in range(n):\n  a_tmp, b_tmp = map(int, input().split())\n  a.append(a_tmp)\n  b.append(b_tmp)\narg = np.argsort(a)\na = np.array(a)[arg]\nb = np.array(b)[arg]\ndp = np.zeros((n, t), dtype=np.int)\nfor i in range(n - 1):\n  dp[i+1, :a[i]] = dp[i, :a[i]]\n  dp[i+1, a[i]:] = np.maximum(dp[i, a[i]:], dp[i, :-a[i]] + b[i])\n  \nprint(np.max(dp[:, -1] + b))", "import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nN, T = lr()\nAB = [lr() for _ in range(N)]\nAB.sort()\n# \u6700\u5f8c\u306e\u6ce8\u6587\u306fAi\u304c\u9078\u3076\u6599\u7406\u3067\u6700\u5927\u3067\u3001T-1\u5206\u5f8c\u306b\u6ce8\u6587\u3059\u308b\u3068\u3057\u3066\u826f\u3044\ndp = np.zeros(T, np.int32)\ntemp_ans = 0\nfor a, b in AB:\n    temp_ans = max(temp_ans, dp.max()+b)\n    dp[a:] = np.maximum(dp[a:], dp[:-a]+b)\n\nprint(temp_ans)\n", "import numpy as np\n\nN, T = list(map(int, input().split()))\nAB = [tuple(map(int, input().split())) for _ in range(N)]\n\nAB.sort()\n\nans = 0\ndp = [0] * T\ndp = np.zeros(T, int)\n\nfor a, b in AB:\n    ans = max(ans, dp[-1] + b)\n    dp[a:] = np.maximum(dp[a:], dp[:-a] + b)\n    # for j in reversed(range(a, T)):\n    #     dp[j] = max(dp[j], dp[j-a] + b)\n\nprint(ans)\n", "import sys\nimport numpy as np\ninput = sys.stdin.readline\n\n_n, _t = list(map(int, input().split()))\nAB = [list(map(int, input().split())) for _ in range(_n)]\nAB.sort()\n\n\ndef dp(t, ablist):\n    ans = 0\n    table = np.zeros(t, int)\n    for a, b in ablist:\n        ans = max(ans, max(table) + b)\n        np.maximum(table[:-a] + b, table[a:], out=table[a:])\n\n    return ans\n\n\nprint((dp(_t, AB)))\n", "import numpy as np\nN,T = map(int,input().split())\n\nmeals = [tuple(map(int,input().split())) for _ in range(N)]\n\n# dp1[t]: i\u756a\u76ee\u306e\u6599\u7406\u307e\u3067\u3067t\u5206\u4ee5\u5185\u306b\u98df\u3079\u308c\u308b\u3082\u306e\u306e\u7f8e\u5473\u3057\u3055\n# dp2[t]: i\u756a\u76ee\u306e\u6599\u7406\u307e\u3067\u3067t\u5206\u4ee5\u5185\u306b\u98df\u3079\u308c\u308b\u3082\u306e\u306e\u7f8e\u5473\u3057\u3055 (\u6700\u5f8c\u306b\u98df\u3079\u308b\u7528\u306e\u3092\u9078\u3093\u3060\u4eee\u5b9a)\n\ndp1 = np.zeros(T,dtype=int)\ndp2 = np.zeros(T,dtype=int)\n\nfor a,b in meals:\n    ndp1 = dp1.copy()\n    ndp1[a:] = np.maximum(dp1[a:],dp1[:-a]+b)\n\n    ndp2 = dp2.copy()\n    ndp2[a:] = np.maximum(dp2[a:],dp2[:-a]+b)\n    ndp2 = np.maximum(ndp2,dp1+b)\n    dp1,dp2 = ndp1,ndp2\n\nprint(ndp2[-1])", "import numpy as np\nN, T = list(map(int, input().split()))\nAB = [list(map(int, input().split())) for _ in range(N)]\n\n\ndef knapsack(ab):\n    dp = np.zeros(T, dtype=np.int64)\n    res = [dp]\n    for a, b in ab:\n        newDP = res[-1].copy()\n        newDP[a:] = np.maximum(newDP[a:], newDP[:-a] + b)\n        res.append(newDP)\n    return res\n\n\ndp1 = knapsack(AB)\ndp2 = knapsack(AB[::-1])\ndp2 = dp2[::-1]\n\nans = 0\n\nfor i in range(N):\n    _, b = AB[i]\n    l = dp1[i]\n    r = dp2[i + 1][::-1]\n    tmp = (l + r).max() + b\n    ans = max(ans, tmp)\nprint(ans)\n", "# https://codeforces.com/blog/entry/71482\n# https://atcoder.jp/contests/abc145/submissions/8473167\n\nimport numpy\nn, t = map(int, input().split())\ntime = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    time.append((x, y))\n\n\ndp = numpy.zeros(t, dtype=int)\ntime.sort()\nans = 0\nfor a, b in time:\n    ans = max(ans, dp[-1]+b)\n    dp[a:] = numpy.maximum(dp[a:], dp[:-a]+b)\n\nprint(ans)", "import numpy as np\nN,T = map(int,input().split())\nAB = []\nfor _ in range(N):\n    AB.append(list(map(int,input().split())))\nAB.sort(key=lambda x:(x[0],-x[-1]))\ndp = np.array([0]*T)\nans = 0\nfor a,b in AB:\n    ans = max(ans,dp[-1]+b)\n    dp[a:] = np.maximum(dp[:-a]+b,dp[a:])\nprint(max(ans,dp[-1]))", "import numpy as np\n\nN,T = map(int, input().split())\nitem = [None]*N\nfor i in range(N):\n  w,v = map(int,input().split())\n  item[i] = [w,v]\nitem.sort(key=lambda x:x[0])\n\ndp = np.zeros(T, dtype=int)\nans=0\nfor i in range(N):\n    w,v=item[i]\n    ans=max(ans,dp.max()+v)\n    dp[w:] = np.maximum(dp[w:], dp[:-w] + v)\nprint(ans)", "import numpy as np\n\nN, T = map(int, input().split())\n\nA = []\nB = []\n\nfor _ in range(N):\n    A_temp, B_temp = map(int,input().split())\n    A.append(A_temp)\n    B.append(B_temp)\n\nA = np.array(A, np.int)\nB = np.array(B, np.int)\n\nidx = np.argsort(A)\nA = A[idx]\nB = B[idx]\n\ndp = np.zeros((N, T), np.int)\n\nfor i in range(N - 1):\n    dp[i+1, :A[i]] = dp[i, :A[i]]\n    dp[i+1, A[i]:] = np.maximum(dp[i, A[i]:], dp[i, :-A[i]] + B[i])\n\nprint(np.max(dp[:, -1] + B))", "import numpy as np\nN, T = list(map(int, input().split()))\nAB = [tuple(map(int, input().split())) for n in range(N)]\nAB.sort()\n\ndp = np.zeros(T, dtype=int)\nans = 0\nfor a, b in AB:\n    ans = max(ans, dp[-1]+b)\n    np.maximum(dp[a:], dp[:-a]+b, out=dp[a:])\nprint(ans)\n", "import numpy as np\nimport sys\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef main():\n    n, t = map(int, input().split())\n    dp = np.zeros(t,dtype=int)\n    food = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        food.append([a, b])\n    food.sort(key=lambda x: x[0]*-1)\n    for j in range(n):\n        a, b = food[j][0], food[j][1]\n        a=min(a,t)\n        dptmp=np.zeros(t,dtype=int)\n        dptmp[a:] = np.maximum(dp[a:],dp[:-a]+b)\n        dptmp[:a] = np.maximum(np.full(a,b,dtype=int), dp[:a])\n        dp=dptmp\n    print(dp[-1])\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def solve():\n    import numpy as np\n    from sys import stdin\n    f_i = stdin\n    \n    N, T = map(int, f_i.readline().split())\n    AB = [tuple(map(int, f_i.readline().split())) for i in range(N)]\n    AB.sort()\n    max_Ai = AB[-1][0]\n    \n    dp = [[0] * T for i in range(N + 1)]\n    dp = np.zeros(max_Ai + T, dtype=int)\n    \n    \n    for A_i, B_i in AB:\n        dp[A_i:A_i+T] = np.maximum(dp[A_i:A_i+T], dp[:T] + B_i)\n    \n    print(max(dp))\n\nsolve()", "from numpy import zeros, maximum, int32\n\ndef main():\n    N, T, *AB = list(map(int, open(0).read().split()))\n\n    dp = zeros(6010, int32)\n    for w, v in sorted(zip(*[iter(AB)] * 2)):\n        dp[w:T + w] = maximum(dp[w:T + w], dp[:T] + v)\n\n    print((dp.max()))\n\nmain()\n", "import numpy as np\n\nn, t = list(map(int, input().split()))\nab = [list(map(int, input().split())) for _ in range(n)]\n\nab.sort()\n\ndp = np.zeros(t, dtype=np.int64)\n\nans = 0\nfor a, b in ab:\n    ans = max(ans, dp[-1] + b)\n    np.maximum(dp[a:], dp[:-a] + b, out=dp[a:])\n\n\nprint(ans)\n", "import numpy as np\n\n\ndef solve():\n    N, T = map(int, input().split())\n    ab_l = [[0, 0] for _ in range(N)]\n    for i in range(N):\n        ab_l[i][0], ab_l[i][1] = map(int, input().split())\n    ab_l.sort()\n    dp = np.zeros(T, dtype=int)\n    ans = 0\n\n    for a, b in ab_l:\n        ans = max(ans, dp[-1] + b)\n        dp[a:] = np.maximum(dp[a:], dp[:-a]+b)\n\n    print(ans)\n\n\ndef __starting_point():\n    solve()\n__starting_point()", "import numpy as np\n \nN,T = map(int, input().split())\nAB = [list(map(int, input().split())) for _ in range(N)]\nAB = sorted(AB)\n\ncan_add = [0]*N\nfor n in range(N-1, 0, -1):\n  x = can_add[n]\n  y = AB[n][1]\n  can_add[n-1] = x if x>y else y\n\ndp = np.zeros(T,np.int64)  \nans = 0\nfor i, (a,b) in enumerate(AB):\n  np.maximum(dp[a:], dp[:-a].copy()+b, out=dp[a:])\n  x = dp.max() + can_add[i]\n  if ans < x:\n    ans = x\nprint(ans)     ", "import numpy as np\ndef main():\n    n, t = map(int, input().split())\n    dt = [list(map(int, input().split())) for _ in range(n)]\n    dt.sort()\n    dp = np.zeros(t, dtype=int)\n    ans = 0\n    for a, b in dt:\n        ans = max(ans, dp[-1]+b)\n        np.maximum(dp[a:], dp[:-a]+b, out=dp[a:])\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "def solve():\n    from sys import stdin\n    f_i = stdin\n    \n    N, T = map(int, f_i.readline().split())\n    AB = [tuple(map(int, f_i.readline().split())) for i in range(N)]\n    AB.sort()\n    \n    dp = [[0] * T for i in range(N + 1)]\n    \n    for i, AB_i in enumerate(AB, start=1):\n        A_i, B_i = AB_i\n        dp_i = dp[i]\n        dp_pre = dp[i-1]\n        dp_i[:A_i] = dp_pre[:A_i]\n        for j, t in enumerate(zip(dp_pre[A_i:], dp_pre), start=A_i):\n            x, y = t\n            if x < y + B_i:\n                dp_i[j] = y + B_i\n            else:\n                dp_i[j] = x\n    \n    ans = max(dp[k][-1] + AB[k][1] for k in range(N))\n    print(ans)\n\nsolve()", "N,T=map(int,input().split())\nimport numpy as np\ndp=np.zeros(T,dtype=int)\nmaxval=0\n\nmeals=[None]*N\nfor i in range(N):\n  a,b=map(int,input().split())\n  meals[i]=a,b\n\nmeals=sorted(meals,key=lambda x:x[0])\n\nfor i in range(N):\n  a,b=meals[i]\n  if maxval<dp[-1]+b:\n    maxval=dp[-1]+b\n  np.maximum(dp[:-a]+b,dp[a:],out=dp[a:])\n  \nprint(maxval)", "import sys\nimport numpy as np\nsys.setrecursionlimit(10 ** 7)\n\n# \u30fb\u6700\u9069\u89e3\u3092\u3068\u3063\u3066\u307f\u308b\n# \u30fb\u6700\u9069\u89e3\u306b\u4eee\u5b9a\u3067\u304d\u308b\u69cb\u9020\u3092\u63a2\u3059\n# \u30fb\u63a2\u7d22\u7a7a\u9593\u304c\u5c0f\u3055\u304f\u306a\u3063\u305f\u3089\u3001\u65e2\u77e5\u306e\u624b\u6cd5\u306b\u5f53\u3066\u306f\u307e\u308b\uff08dp\u306a\u3069\uff09\n\nN, T = list(map(int, input().split()))\nFOOD = [[int(x) for x in input().split()] for _ in range(N)]\n\nFOOD.sort()\ndp = np.array([np.zeros(T + 1, dtype=np.int64) for _ in range(N + 1)])\nans = 0\nfor i in range(N):\n    a, b = FOOD[i]\n    dp[i + 1][a:] = np.maximum(dp[i][:-a] + b, dp[i][a:])\n\n    # if len(dp[i][-a+1:T]) > 0:\n    # dp[i + 1][T] = max(dp[i + 1][T], max(dp[i][-a+1:T]) + b)\n    now = 0\n    if i != N-1:\n        now = dp[i + 1][T - 1] + max(FOOD[i + 1:], key=lambda x: x[1])[1]\n        #print(FOOD[i + 1:])\n        #print(max(FOOD[i + 1:], key=lambda x: x[1])[1])\n        #print(now)\n\n    ans = max(ans, now)\n\n    # print(dp[i+1])\n\nprint(ans)\n", "from numpy import zeros, maximum\n\ndef main():\n    N, T, *AB = list(map(int, open(0).read().split()))\n\n    dp = zeros(6010, int)\n    for w, v in sorted(zip(*[iter(AB)] * 2)):\n        dp[w:T + w] = maximum(dp[w:T + w], dp[:T] + v)\n\n    print((dp.max()))\n\nmain()\n", "N,T = map(int,input().split())\nimport numpy as np\nA,B = np.array([list(map(int,input().split())) for _ in range(N)]).T\ndp1 = np.array([[0]*T for _ in range(N+1)])\nrev_A,rev_B = A[::-1],B[::-1]\ndp2 = np.array([[0]*T for _ in range(N+1)])\n\n\nfor i in range(1,N+1):\n  a = A[i-1]\n  rev_a = rev_A[i-1]\n  b = B[i-1]\n  rev_b = rev_B[i-1]\n  \n  dp1[i,:a] = dp1[i-1,:a]\n  dp2[i,:rev_a] = dp2[i-1,:rev_a]\n  dp1[i,a:] = np.fmax(dp1[i-1,a:],dp1[i-1,:-a]+b)\n  dp2[i,rev_a:] = np.fmax(dp2[i-1,rev_a:],dp2[i-1,:-rev_a]+rev_b)\n\n      \nlis = [0]*N\nfor i in range(1,N+1):\n  lis[i-1] = (np.max(dp1[i-1]+dp2[N-i][::-1]) + B[i-1])\n \n    \nprint(max(lis))", "import numpy as np\n\n\ndef __starting_point():\n    # input\n    N, T = list(map(int,input().split()))\n    menu = list()\n    for i in range(N):\n        menu_i = tuple(map(int,input().split()))\n        menu.append(menu_i)\n    menu.sort()\n    dp = np.zeros(T, int)\n    ans = 0\n    # print(N,T,menu)\n\n    for ab in menu:\n        # print(ab[0],ab[1])\n        ans = max(ans, dp[-1]+ab[1])\n        dp[ab[0]:] = np.maximum(dp[ab[0]:], dp[:-ab[0]] + ab[1])\n    print(ans)\n\n__starting_point()", "import sys\nimport numpy as np\ninput = sys.stdin.readline\n\n_n, _t = list(map(int, input().split()))\nAB = [list(map(int, input().split())) for _ in range(_n)]\nAB.sort()\n\nans = 0\ntable = np.zeros(_t, int)\nfor a, b in AB:\n    ans = max(ans, max(table) + b)\n    np.maximum(table[:-a] + b, table[a:], out=table[a:])\n\n\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\nimport sys\nimport numpy as np\nfrom operator import itemgetter\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN, T = MAP()\nAB = []\nfor i in range(N):\n    a, b = MAP()\n    AB.append((a, b))\n\n# \u5404\u6599\u7406\u3092\u6642\u9593\u306e\u6607\u9806\u3067\u30bd\u30fc\u30c8\nAB.sort(key=itemgetter(1), reverse=True)\nAB.sort(key=itemgetter(0))\n\n# \u5f8c\u306f\u666e\u901a\u306e\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\nTMAX = 6007\ndp = np.zeros((N+1, TMAX), dtype=np.int64)\nfor i in range(N):\n    a, b = AB[i]\n    dp[i+1] = dp[i]\n    dp[i+1,a:a+T] = np.maximum(dp[i+1,a:a+T], dp[i,:T] + b)\nprint((dp[N].max()))\n", "#input\nN, T = map(int, input().split())\nA = []\nB = []\nfor i in range(N):\n    a, b = map(int, input().split())\n    A.append(a)\n    B.append(b)\n\n#output\nimport numpy as np\nA = np.array(A, np.int)\nB = np.array(B, np.int)\n\nidx = np.argsort(A)\n\nA = A[idx]\nB = B[idx]\n\ndp = np.zeros((N, T), np.int)\n#dp[\u54c1\u7269][\u6642\u9593]\n\nfor i in range(N-1):\n    dp[i+1, :A[i]] = dp[i, :A[i]]\n    dp[i+1, A[i]:] = np.maximum(dp[i, A[i]:], dp[i, :-A[i]]+B[i])\n\nprint(np.max(dp[:, -1] + B))", "import numpy as np\n\nn, t = list(map(int, input().split()))\nab = [list(map(int, input().split())) for _ in range(n)]\n\nab.sort()\n\ndp = np.zeros(t, dtype=np.int64)\n\nans = 0\nfor a, b in ab:\n    ans = max(ans, dp[-a:].max() + b)\n    np.maximum(dp[a:], dp[:-a] + b, out=dp[a:])\n\n\nprint(ans)\n", "import numpy as np\n\nN, T = list(map(int, input().split()))\nT -= 1\n\nAB = [list(map(int, input().split())) for _ in range(N)]\nAB.sort(key = lambda x: x[1])\nAB.sort(key = lambda x: x[0], reverse = True)\n\ndp = [[0] * (T + 1) for _ in range(N + 1)]\n\ndp = np.zeros(T + 1, dtype = np.int32)\n\nans = AB[N - 1][1]\nfor i in range(N - 1, 0, -1):\n    # for j in range(T + 1):\n    #     if j < AB[i][0]:\n    #         dp[i][j] = dp[i + 1][j]\n    #     else:\n    #         dp[i][j] = max(dp[i + 1][j], dp[i + 1][j - AB[i][0]] + AB[i][1])\n    if AB[i][0] <= T + 1:\n        dp[AB[i][0]:] = np.maximum(dp[AB[i][0]:], dp[:T + 1 - AB[i][0]] + AB[i][1])\n    tmp = dp[T] + AB[i - 1][1]\n    ans = max(ans, tmp)\n    \nprint (ans)\n# print (AB)\n\n# for i in dp:\n#     print (dp)\n", "from numpy import*\nN,T,*L=int_(open(0).read().split())\nd=zeros(6010,int)\nfor w,v in sorted(zip(*[iter(L)]*2)):d[w:T+w]=maximum(d[w:T+w],d[:T]+v)\nprint(max(d))", "import numpy as np\ndef solve(n, t, a, b):\n    dp = np.zeros(t, dtype=int)\n    candidates = []\n    for w, v in sorted(zip(a, b)):\n        candidates.append(dp[-1] + v)\n        if w > t:\n            continue\n        dp[w:] = np.maximum(dp[:-w] + v, dp[w:])\n    return np.max(candidates)\n\nn, t = map(int, input().split())\na = [0] * n\nb = [0] * n\nfor i in range(n):\n    a[i], b[i] = map(int, input().split())\nprint(solve(n, t, a, b))", "import numpy as np\n\nn, t = map(int, input().split())\ndt = [list(map(int, input().split())) for _ in range(n)]\ndt.sort()\ndp = np.zeros(t, dtype=int)\nans = 0\nfor a, b in dt:\n    ans = max(ans, dp[-1]+b)\n    np.maximum(dp[a:], dp[:-a]+b, out=dp[a:])\nprint(ans)", "import numpy as np\n\nn, t = list(map(int, input().split()))\nab = [list(map(int, input().split())) for _ in range(n)]\n\nab.sort()\n\ndp = np.zeros(t, dtype=np.int64)\n\nans = 0\nfor a, b in ab:\n    ans = max(ans, dp[-1] + b)\n    np.maximum(dp[a:], dp[:-a] + b, out=dp[a:])\n\n\nprint(ans)\n", "def main():\n  N,T=list(map(int,input().split()))\n  L=[[int(x) for x in input().split()] for _ in range(N)]\n  L.sort(key=lambda x:x[0])\n  dp=[0]+[-1]*(T+L[-1][0])\n\n  for a,b in L:\n    for j in range(T-1,-1,-1):\n      if dp[j]>=0 and dp[j+a]<dp[j]+b:\n        dp[j+a]=dp[j]+b\n\n  print((max(dp)))\n\ndef __starting_point():\n  main()\n\n__starting_point()", "def main():\n\t_, t, *L = list(map(int, open(0).read().split()))\n\td = [0] * t\n\tcand = 0\n\tfor w, v in sorted((x, y) for x, y in zip(*[iter(L)] * 2)):\n\t\tif cand < d[-1] + v:\n\t\t\tcand = d[-1] + v\n\t\tfor i in range(t - 1, w - 1, -1):\n\t\t\tif d[i - w] + v > d[i]:\n\t\t\t\td[i] = d[i - w] + v\n\tprint((max(cand, max(d))))\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "def main():\n    N, T = list(map(int, input().split()))\n    AB = [list(map(int, input().split())) for _ in range(N)]\n\n    dp = [-1] * (T + 3000)\n    dp[0] = 0\n    for a, b in sorted(AB):\n        for i in range(T - 1, -1, -1):\n            if dp[i] == -1:\n                continue\n            if dp[i + a] < dp[i] + b:\n                dp[i + a] = dp[i] + b\n    print((max(dp)))\n\n\nmain()\n", "from numpy import zeros, maximum\nN, T, *AB = map(int, open(0).read().split()) \ndp = zeros(6010, int)\nfor w, v in sorted(zip(*[iter(AB)] * 2)):\n  dp[w:T + w] = maximum(dp[w:T + w], dp[:T] + v)\nprint(dp.max())", "import numpy as np\n\nN, T = map(int, input().split())\nAB = []\nfor i in range(N):\n  A, B = map(int, input().split())\n  AB.append([A, B])\n\nAB.sort()\n\ndp = np.zeros(T, dtype=int)\n\nans = 0\nfor a, b in AB:\n  ans = max(ans, dp[-1] + b)\n  dp[a:] = np.maximum(dp[a:], dp[:-a] + b)\n\nprint(ans)", "import numpy as np\n\nN, T = map(int, input().split())\ndata = []\nfor i in range(N):\n  a, b = map(int, input().split())\n  data.append((a,b))\ndata.sort()\ndata = np.array(data)\n\n#print(data)\n\ndp = np.zeros(T)\nans = 0\nfor a, b in data:\n  ans = max(ans, dp[-1]+b)\n  if a < T:\n    newtable = dp[:T-a] + b\n    dp[a:] = np.maximum(dp[a:], newtable)\nprint(int(ans))", "import numpy as np\nimport sys\ninput = sys.stdin.readline\n\n\nn, t = map(int, input().split())\ndish = [list(map(int, input().split())) for _ in range(n)]\ndish.sort()\n\nans = 0\ndp = np.zeros(t, dtype=int)\nfor time, point in dish:\n    ans = max(ans, dp.max()+point)\n    np.maximum(dp[time:], dp[:-time]+point, out=dp[time:])\nprint(ans)", "def main():\n    N, T = list(map(int, input().split()))\n    AB = [list(map(int, input().split())) for _ in range(N)]\n\n    dp = [-1] * (T + 3000)\n    dp[0] = 0\n    for a, b in sorted(AB):\n        for j in range(T - 1, -1, -1):\n            if dp[j] == -1:\n                continue\n            if dp[j] + b > dp[j + a]:\n                dp[j + a] = dp[j] + b\n    print((max(dp)))\n\n\nmain()\n", "import sys\nimport numpy as np\n\ndef main():\n    input = sys.stdin.readline\n    N, T = map(int, input().split())\n    dishes = []\n    for _ in range(N):\n        a, b = map(int, input().split())\n        dishes.append((a, b))\n    \n    dishes = sorted(dishes, key=lambda x: x[0])\n    \n    ans = 0\n    dp = np.zeros(T, dtype=int)\n    for a, b in dishes:\n        ans = max(ans, dp.max() + b)\n        np.maximum(dp[:-a] + b, dp[a:], out=dp[a:])\n\n    return ans\n\ndef __starting_point():\n    print(main())\n__starting_point()", "import numpy as np\nn,t=map(int,input().split())\na=[list(map(int,input().split()))for i in range(n)]\nb=np.zeros((n+1,t))\nc=np.zeros((n+1,t))\nfor i in range(n):\n    b[i+1]=b[i]\n    b[i+1][a[i][0]:]=np.maximum(b[i+1][a[i][0]:],b[i][:-a[i][0]]+a[i][1])\n    c[-i-2]=c[-i-1]\n    c[-i-2][a[-i-1][0]:]=np.maximum(c[-i-2][a[-i-1][0]:],c[-i-1][:-a[-i-1][0]]+a[-i-1][1])\nq=0\nfor i in range(n):\n    q=max(q,max(b[i]+c[i+1][::-1])+a[i][1])\nprint(int(q))", "import numpy as np\nI = [int(_) for _ in open(0).read().split()]\nN, T = I[:2]\nA, B = I[2::2], I[3::2]\ndp = np.array([-1] * 6001, dtype=np.int64)\ndp[0] = 0\nfor a, b in sorted(zip(A, B)):\n    dp_new = dp[:]\n    dp_new[a:a + T] = np.maximum(dp[a:a + T], dp[:T] + b)\n    dp = dp_new\nprint((max(dp)))\n", "import numpy as np\nimport sys\nmod = 10**9+7\neps = 10**-7\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\ndef inpl_str(): return list(sys.stdin.readline().split())\n\nN,T = inpl()\ndp = np.zeros((6001),int)\nABs = [inpl() for _ in range(N)]\nABs.sort()\n\nfor A,B in ABs:\n    dp[A:T+A] = np.maximum(dp[A:T+A], dp[:T]+B)\n    # for i in reversed(range(A,T+A)):\n    #     dp[i] = max(dp[i-A] + B, dp[i])\n\n\nprint((max(dp)))\n", "from numpy import zeros, maximum, array\n\ndef main():\n    N, T, *AB = array(open(0).read().split(), int)\n\n    dp = zeros(6010, int)\n    for w, v in sorted(zip(*[iter(AB)] * 2)):\n        dp[w:T + w] = maximum(dp[w:T + w], dp[:T] + v)\n\n    print(dp.max())\n\nmain()", "# -*- coding: utf-8 -*-\n\nimport sys\nimport numpy as np\nfrom operator import itemgetter\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN, T = MAP()\nAB = []\nfor i in range(N):\n    a, b = MAP()\n    AB.append((a, b))\n\n# \u5404\u6599\u7406\u3092\u6642\u9593\u306e\u6607\u9806\u3067\u30bd\u30fc\u30c8\nAB.sort(key=itemgetter(0))\n\n# \u5f8c\u306f\u666e\u901a\u306e\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\nTMAX = 6007\ndp = np.zeros((N+1, TMAX), dtype=np.int64)\nfor i in range(N):\n    a, b = AB[i]\n    dp[i+1] = dp[i]\n    dp[i+1,a:a+T] = np.maximum(dp[i+1,a:a+T], dp[i,:T] + b)\nprint((dp[N].max()))\n", "from numpy import*\nN,T,*L=int_(open(0).read().split())\nd=int_([0]*6010)\nfor w,v in sorted(zip(*[iter(L)]*2)):d[w:T+w]=maximum(d[w:T+w],d[:T]+v)\nprint(max(d))", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, T, *AB = list(map(int, read().split()))\n    D = [(a, b) for a, b in zip(*[iter(AB)] * 2)]\n\n    D.sort()\n\n    dp = [0] * T\n    ans = 0\n\n    for i, (a, b) in enumerate(D[:-1]):\n        for t in range(T - 1, a - 1, -1):\n            if dp[t] < dp[t - a] + b:\n                dp[t] = dp[t - a] + b\n        if ans < dp[T - 1] + D[i + 1][1]:\n            ans = dp[T - 1] + D[i + 1][1]\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]