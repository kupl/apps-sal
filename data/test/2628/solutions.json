["class Solution:\n     def grayCode(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[int]\n         \"\"\"\n         res = []\n         for i in range(1<<n):\n             res.append(i ^ i >>1)\n         return res\n", "class Solution:\n     def grayCode(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[int]\n         \"\"\"\n               \n         result = [0, 1]\n         if n <= 1:\n             return result[:n+1]\n         res_len = 2 ** n\n         \n         cnt = 1\n         while len(result) != res_len:\n             cnt *= 2\n             result.extend(result[::-1])\n             #offset = 0 \n             start = len(result) // 2\n             for i in range(start, len(result)):\n                 #if i > 0 and i % cnt == 0:\n                 #    offset = cnt;\n                 #result[i] += offset \n                 result[i] += cnt\n             \n         return result", "class Solution:\n     def grayCode(self, n):\n         \n         if n == 0:\n             return [0]\n         \n         concat = ''\n         \n         res = [0, 1]\n         \n         for i in range(1, n):\n             newRes = []\n             \n             for j in res:\n                 newRes.append(j)\n             for j in reversed(res):\n                 newRes.append(j + (2 ** i))\n                 \n             res = newRes\n             \n         return res\n             \n             \n         \n         \"\"\"\n         :type n: int\n         :rtype: List[int]\n         \"\"\"\n", "class Solution:\n     def grayCode(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[int]\n         \"\"\"\n         if n == 0:\n             return [0]\n         result = [0, 1]\n         \n         # mirror the previous layer\n         # then padding '1' at the most significant bit position --- for the second half\n         # 0 1  --> 00 01 | 11 10 (1 + 1; 1 + 0)\n         \n         for i in range(2, n + 1):\n             mask = 1 << (i - 1)\n             temp = []\n             for j in range(len(result)):\n                 temp.append(result[-j - 1] | mask)\n             result += temp\n         return result\n         \n", "class Solution:\n     def helper(self, n):\n         if n == 0:\n             return ['0']\n         if n == 1:\n             return ['0', '1']\n         ret = []\n         for code in self.helper(n - 1):\n             ret.append('0' + code)\n         for code in reversed(self.helper(n - 1)):\n             ret.append('1' + code)\n         return ret\n     def grayCode(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[int]\n         \"\"\"\n         if n == 0:\n             return [0]\n         ret = []\n         code = self.grayCode(n - 1)\n         ret += code\n         for v in reversed(code):\n             ret.append(2 ** (n - 1) + v)\n         return ret\n         \n", "class Solution:\n     def grayCode(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[int]\n         \"\"\"\n         result = [0]\n         for i in range(n):\n             temp = [] \n             for num in result:\n                 temp.append(num + 2**i)\n             result += temp[::-1]\n             \n         return result\n", "class Solution:\n     def grayCode(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[int]\n         \"\"\"\n         if n == 0:\n             return [0]\n     \n         q = [0, -1]\n     \n         for i in range(n):\n             tag = 0\n             while q[0] != -1:\n                 item = q.pop(0)\n                 q.append(item * 2 + tag)\n                 q.append(item * 2 + (1 - tag))\n                 tag = 1 - tag\n             q.pop(0)\n             q.append(-1)\n     \n         q.pop(-1)\n         \n         return q", "class Solution:\n     def grayCode(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[int]\n         \"\"\"\n               \n         result = [0, 1]\n         if n <= 1:\n             return result[:n+1]\n         res_len = 2 ** n\n         \n         cnt = 1\n         while len(result) != res_len:\n             cnt *= 2\n             #orig_len = len(result)\n             for i in range(cnt - 1, -1, -1):\n                 result.append(result[i] + cnt)\n             \n         return result", "class Solution:\n     def grayCode(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[int]\n         \"\"\"\n         \n         if n < 0:\n             return []\n         elif n == 0:\n             return [0]\n         elif n == 1:\n             return [0, 1]\n         \n         result = [0, 1]\n         res_len = 2 ** n\n         \n         cnt = 1\n         while len(result) != res_len:\n             cnt *= 2\n             result.extend(result[::-1])\n             offset = 0 \n             for i in range(len(result)):\n                 if i > 0 and i % cnt == 0:\n                     offset = cnt;\n                 result[i] += offset\n             \n             \n         return result\n         \n         \n", "class Solution:\n     def grayCode(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[int]\n         \"\"\"\n         return [i >> 1 ^ i for i in range(1 << n)]\n", "class Solution:\n     # @return a list of integers\n     def grayCode(self, n):\n         res=[]\n         size=1<<n\n         for i in range(size):\n             res.append((i>>1)^i)\n         return res", "class Solution:\n     def grayCode(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: List[int]\n         \"\"\"\n         ans = [0]\n         mask = 0x1\n         for l in range(n):\n             for c in ans[::-1]: \n                 ans.append(mask | c)\n             mask <<= 1    \n         return ans    "]