["n = int(input())\nif n % 3 == 0:\n    print(2 * (n // 3))\nelse:\n    print(2 * (n // 3) + 1)\n", "a = int(input())\nprint(a//3*2+[0,1][a%3!=0])", "n = int(input())\n\nsol = (n//3) * 2\n\nif n % 3:\n    sol += 1\n\nprint(sol)\n", "n = int(input())\nanswer = (n//3)*2\nn = n%3\nif n != 0:\n    print(answer+1)\nelse:\n    print(answer)", "n = int(input())\ng = 3*(n//3)\nif n-g >= 1:\n    print(2*(n//3)+1)\nelse:\n    print(2*(n//3))\n", "n = int(input())\nprint((n // 3)* 2+ (n % 3 != 0))\n", "x = int(input())\ncore = (x//3)*2\nl= x-(x//3)*3\nif l == 0:\n\tprint (core)\nelse:\n\tprint (core+1)", "n = int(input())\nprint(n // 3 * 2 + (n % 3 > 0))", "parse_int = lambda: list(map(int, input().split()))\n\nn = int(input())\n\nres = (n//3)*2\nif n%3 > 0:\n    res += 1\nprint(res)", "a = int(input())\nprint((a//3)*2+bool(a%3))\n", "n = int(input())\n\nt = (n // 3) * 2\n\nif n % 3 != 0:\n\tt += 1\nprint(t)", "def solve():\n    N = int(input())\n\n    d3 = N // 3\n\n    m3 = N % 3\n\n    ans = d3 * 2\n\n    if m3 == 1:\n        ans += 1\n    elif m3 == 2:\n        ans += 1\n\n    print(ans)\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "def __starting_point():\n    #n, m = list(map(int, input().split()))\n    #s = list(input().split())\n    n = int(input())\n    if n % 3 == 0:\n        print(2 * (n // 3))\n    else:\n        print(2 * (n // 3) + 1)\n    \n\n__starting_point()", "n=int(input())\nans=0\nif n%3==0:\n    ans+=(n//3)*2\nelif n%3==1:\n    ans+=(n//3)*2+1\nelif n%3==2:\n    ans+=(n//3)*2+1\nprint(ans)", "n = int(input())\nif n == 2:\n    print(1)\nelse:\n    print(2 * (n // 3)  + (1 if n % 3 != 0 else 0))", "#!/usr/bin/env python3\n# 669A_presents.py - Codeforces.com/problemset/problem/669/A by Sergey 2016\n\nimport unittest\nimport sys\n\n###############################################################################\n# Presents Class (Main Program)\n###############################################################################\n\n\nclass Presents:\n    \"\"\" Presents representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(it) if it else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        [self.n] = list(map(int, uinput().split()))\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        result = (self.n // 3) * 2\n        if self.n % 3 != 0:\n            result += 1\n\n        return str(result)\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Presents class testing \"\"\"\n\n        # Constructor test\n        test = \"1\"\n        d = Presents(test)\n        self.assertEqual(d.n, 1)\n\n        # Sample test\n        self.assertEqual(Presents(test).calculate(), \"1\")\n\n        # Sample test\n        test = \"2\"\n        self.assertEqual(Presents(test).calculate(), \"1\")\n\n        # Sample test\n        test = \"3\"\n        self.assertEqual(Presents(test).calculate(), \"2\")\n\n        # My tests\n        test = \"5\"\n        self.assertEqual(Presents(test).calculate(), \"3\")\n\n        # Time limit test\n        # self.time_limit_test(5000)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        numnums = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        test += \"\\n\".join(numnums) + \"\\n\"\n        nums = [random.randint(1, 10000) for i in range(nmax)]\n        test += \" \".join(map(str, nums)) + \"\\n\"\n\n        # Run the test\n        start = timeit.default_timer()\n        d = Presents(test)\n        calc = timeit.default_timer()\n        d.calculate()\n        stop = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(stop-start, calc-start, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Presents().calculate())\n\n__starting_point()", "\nn = int(input())\n\nprint((n // 3) * 2 + (1 if n % 3 else 0))\n", "def solve(n):\n    x = n // 3\n    c = 2 * x\n    n -= 3 * x\n    if n:\n        c += 1\n    return c\n\nn = int(input())\n\nprint(solve(n))\n", "n = int(input())\nx=2*(n//3)\nif n%3 != 0:\n    x += 1\nprint(x)\n\n", "#listInput = list(map(int,input().split()))\nnum = int(input())\nnumleft = num%3\nout = 2*(num//3)\nif numleft == 0:\n    print(out)\nelse:\n    print(out + 1)", "n = int(input())\nprint((n // 3) * 2 + (n % 3 > 0))\n", "n = int(input())\nprint(int(n/3)*2 + (0 if n%3==0 else 1))", "a = int(input())\nb=int(a/3)*2\nc=a%3\nif c==0:\n    print(b)\nelse:\n    print(b+1)\n", "n = int(input())\nans = (n - 1) // 3 * 2 + int(n % 3 == 0) + 1\nprint(ans)\n", "n = int(input())\nif n % 3 == 0:\n    print(n // 3 * 2)\nelif n < 3:\n    print(1)\nelse:\n    print(n // 3 * 2 + 1)\n"]