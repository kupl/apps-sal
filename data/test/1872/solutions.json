["from math import sin, cos, pi\n\nn, r = map(int, input().split())\n\nprint(n * r**2 * sin(pi / n) * cos(pi * (n // 2) / n) / cos(pi * (n // 2 - 1) / n))", "import math\nn, R = [int(x) for x in input().split()]\nphi = math.pi/(2*n)\nA = math.sin(2*phi) * (math.cos(2*phi) - math.sin(2*phi) * math.tan(math.pi/2 - 3*phi))\nprint(n*R*R*A)\n\n\n", "3\n\nimport math\n# from matplotlib import pyplot as plt\n\nclass Vector:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\n\tdef length(self):\n\t\treturn math.hypot(self.x, self.y)\n\n\tdef dot(self, other):\n\t\treturn self.x * other.x + self.y * other.y\n\n\tdef angleWith(self, other):\n\t\treturn math.acos( self.dot(other) / (self.length() * other.length()) )\n\n\tdef normalize(self):\n\t\tself /= self.length()\n\n\tdef normalized(self):\n\t\treturn self / self.length()\n\n\tdef rotate(self, angle):\n\t\tsine = math.sin(angle)\n\t\tcosine = math.cos(angle)\n\t\tx = self.x * cosine - self.y * sine\n\t\ty = self.x * sine + self.y * cosine\n\n\t\tself.x = x\n\t\tself.y = y\n\n\tdef rotated(self, angle):\n\t\tsine = math.sin(angle)\n\t\tcosine = math.cos(angle)\n\t\tx = self.x * cosine - self.y * sine\n\t\ty = self.x * sine + self.y * cosine\n\n\t\treturn Vector(x, y)\n\n\tdef __iadd__(self, other):\n\t\tself.x += other.x\n\t\tself.y += other.y\n\t\treturn self\n\n\tdef __isub__(self, other):\n\t\tself.x -= other.x\n\t\tself.y -= other.y\n\t\treturn self\n\n\tdef __add__(self, other):\n\t\treturn Vector(self.x + other.x, self.y + other.y)\n\n\tdef __sub__(self, other):\n\t\treturn Vector(self.x - other.x, self.y - other.y)\n\n\tdef __imul__(self, other):\n\t\tself.x *= other\n\t\tself.y *= other\n\t\treturn self\n\n\tdef __itruediv__(self, other):\n\t\tself.x /= other\n\t\tself.y /= other\n\t\treturn self\n\n\tdef  __mul__(self, other):\n\t\treturn Vector(self.x * other, self.y * other)\n\n\tdef __truediv__(self, other):\n\t\treturn Vector(self.x / other, self.y / other)\n\n\tdef __neg__(self):\n\t\treturn Vector(-self.x, -self.y)\n\n\tdef __str__(self):\n\t\treturn str(self.x) + ' ' + str(self.y)\n\t\t# return \"{:.2f} {:.2f}\".format(self.x, self.y)\n\ndef point_coord(n, r, i):\n\td_angle = 2*math.pi / n\n\n\treturn Vector(0, r).rotated(-i*d_angle)\n\n# def line_intersection(p0, p1, p2, p3):\n# \t# xdiff = (line1[0][0] - line1[1][0], line2[0][0] - line2[1][0])\n# \t# ydiff = (line1[0][1] - line1[1][1], line2[0][1] - line2[1][1])\n\n# \tdx = (p0.x - p2.x, p1.x - p3.x)\n# \tdy = (p0.y - p2.y, p1.y - p3.y)\n\n# \tdef det(a, b):\n# \t\treturn a[0] * b[1] - a[1] * b[0]\n\n# \tdiv = det(dx, dy)\n# \tif div == 0:\n# \t\traise Exception('lines do not intersect')\n\n# \tline1 = ((p0.x, p0.y), (p1.x, p1.y))\n# \tline2 = ((p2.x, p2.y), (p3.x, p3.y))\n\n# \td = ( det(*line1), det(*line2) )\n\n# \tx = det(d, dx) / div\n# \ty = det(d, dy) / div\n# \treturn Vector(x, y)\n\ndef line_intersection(line1, line2):\n\txdiff = (line1[0][0] - line1[1][0], line2[0][0] - line2[1][0])\n\tydiff = (line1[0][1] - line1[1][1], line2[0][1] - line2[1][1]) #Typo was here\n\n\tdef det(a, b):\n\t\treturn a[0] * b[1] - a[1] * b[0]\n\n\tdiv = det(xdiff, ydiff)\n\tif div == 0:\n\t\traise Exception('lines do not intersect')\n\n\td = (det(*line1), det(*line2))\n\tx = det(d, xdiff) / div\n\ty = det(d, ydiff) / div\n\treturn x, y\n\n# print(line_intersection(((0,0), (4,4)), ((1,3), (3,1))))\n# print(line_intersection(Vector(0,0), Vector(4,4), Vector(1,3), Vector(3,1)))\n\nn, r = [int(i) for i in input().split()]\n\n# n = 7\n# r = 10\n\nfrom1 = 0\nfrom2 = 1\nto1 = n//2\nto2 = to1 + 2\n\n# p = []\n# for i in range(n):\n# \tp.append(point_coord(n, r, i))\n\n# x = [i.x for i in p]\n# y = [i.y for i in p]\n\n# plt.scatter(x, y)\n# plt.axis('equal')\n# plt.show()\n\np0 = point_coord(n, r, from1)\np1 = point_coord(n, r, from2)\np2 = point_coord(n, r, to1)\np3 = point_coord(n, r, to2)\n\n# plt.plot([p0.x, p2.x], [p0.y, p2.y])\n# plt.plot([p1.x, p3.x], [p1.y, p3.y])\n\n# print(p0)\n# print(p1)\n# print(p2)\n# print(p3)\n\nv1 = p2 - p0\nv2 = p3 - p1\n\n# phi = v1.angleWith(v2)\n# # omega = math.pi - phi\n# print(phi)\n\nline1 = ((p0.x, p0.y), (p2.x, p2.y))\nline2 = ((p1.x, p1.y), (p3.x, p3.y))\n\n# p_int =line_intersection(p0, p1, p2, p3)\nx,y =line_intersection(line1, line2)\np_int = Vector(x, y)\n# print(p_int)\n# plt.scatter([p_int.x], [p_int.y], c='r')\n# plt.show()\n\na = p_int.length()\n# print(a)\ntheta = math.pi / n\n# print(theta)\ns = 0.5*r*a*math.sin(theta)\nprint(2*n*s)\n\n# print(p_int)\n# print(p0)\n# print(p_int - p0)\n# print(d)\n# print()\n\n# s = 0.5 * d * d * phi\n# print(s)\n# print(math.pi*r*r - n*s)\n", "import math\nn, R = [int(x) for x in input().split()]\nphi = math.pi/(2*n)\nA = math.sin(2*phi) * (math.cos(2*phi) - math.sin(2*phi) * math.tan(math.pi/2 - 3*phi))\nprint(n*R*R*A)\n", "import math\nn,r = list(map(int,input().split()))\na = math.pi/n\nb = a/2\nc = math.pi-a-b\nside = r*math.sin(a)/(2*math.sin(c))\narea = 0.5*math.sin(b)*side*r*n*4\nprint(area)\n", "import math\n\nn, r = list(map(float, input().split()))\n\npi = math.pi\n\npart = pi / n\ns = n * r * r * math.sin(2. * part) / 2.\nbad = n * (math.sin(part) * r) ** 2 * math.tan(pi / 2. - 1.5 * part)\n\nprint(s - bad)\n", "from math import sin, cos, pi\n\nn, r = map(int, input().split())\n\nprint(n * r ** 2 * sin(pi / n) * cos(pi * (n // 2) / n) / cos(pi * (n // 2 - 1) / n))", "from decimal import *\nfrom math import sin , pi , sqrt\n\ndef getRadian( x ):\n    return x*Decimal(pi)/180\n\ndef area( a , b , c ):\n\n    p = (a+b+c)/2\n    return Decimal( sqrt( p*(p-a)*(p-b)*(p-c) ) )\n\ndef __starting_point():\n\n    getcontext().prec = 100\n    n , r = map( Decimal , input().split() )\n\n    beta = 90/n\n    beta_radian = getRadian( beta )\n    #print( beta_radian )\n\n    gamma = 180/n\n    gamma_radian = getRadian( gamma )\n    #print( gamma_radian )\n\n    S = r*r*Decimal(sin(beta_radian))*Decimal(sin(gamma_radian))/Decimal(sin(beta_radian+gamma_radian))\n    print(n*S)\n__starting_point()", "from math import sin, cos, pi\n\nn, r = map(int, input().split())\n\nprint(n * r**2 * sin(pi / n) * cos(pi * (n // 2) / n) / cos(pi * (n // 2 - 1) / n))", "import math\n\nn, r = list(map(int, input().split(' ')))\n\nalpha = math.pi/n/2\nbeta = math.pi/n\ngamma = math.pi-alpha-beta\n\nprint(r*r*math.sin(alpha)*math.sin(beta)/math.sin(gamma)*n)\n", "import math\nn, r = list(map(int, input().split()))\na = math.pi / n\nb = a / 2\nprint(r * math.sin(b) / math.sin(math.pi - a - b) * math.sin(a) * r * n)\n                               \n", "import math\nn, r = list(map(int, input().split()))\n\nX = 2 * r * math.sin(math.pi / n)\nY = X * math.sin(math.pi * (n - 3) / (2 * n)) / math.sin(3 * math.pi / n)\n\nS1 = 1 / 2 * Y * Y * math.sin(3 * math.pi / n)\nS2 = r * r * (math.pi / n - 1 / 2 * math.sin(2 * math.pi / n))\nans = math.pi * r * r - n * (S1 + S2)\nprint(ans)\n", "import math\nPI = math.acos(-1)\n\nn, R = list(map(int, input().split()))\nag = 2*PI / n\nL = 2 * math.sin(ag/2) * R\n\nSP = n * L / 2 * R * math.cos(ag/2) \n\nang = (PI - ag - ag / 2) / 2\nS = L**2 / 4 * math.tan(ang)\nSS = SP - S * n\nprint(\"%.10f\" % SS)\n    \n", "from sys import stdin\nfrom math import pi, sin, tan\nn, r = map(int, stdin.readline().split())\na = 2*pi/n\nA = r*r/2 * (a - sin(a))\nc = n//2 * 2*pi/n\nb = (c-a)/2\ns = 2*r*sin(a/2)\nh = tan(b)*s/2\nA = A + h*s/2\nresult = pi*r*r - n*A\nprint(result)", "import math\n\np,r = list(map(int,input().split() ))\n\nprint((math.sin(math.pi/p)**2 /math.tan(1.5*math.pi/p) - math.sin(2*math.pi/p)/2)*-r*r*p)\n", "import math\n\nn, r = list(map(int, input().split()))\nprint(n * r * r / (1 / math.tan(math.pi / (2*n)) + 1 / math.tan(math.pi/n)))\n", "import math\nPi = math.pi\nn, r = list(map(float, input().split()))\nx = math.tan (Pi / n)\ny = math.tan (Pi / n / 2)\nbase = r / (1 / x + 1 / y)\nprint(n * r * base)\n", "import math\nln = input().split(\" \")\nn = int(ln[0])\nr = int(ln[1])\n\ntot_area = n / 2 * (math.sin(2 * math.pi / n)) * r * r\n\nif n < 10 ** 6:\n    x = (1 - math.cos(2 * math.pi / n)) / (1 - math.cos(3 * math.pi / n))\nelse:\n    x = 4 / 9\nx *= r ** 2\n\nsmall_area = n / 2 * math.sin(3 * math.pi / n) * x\n\nprint(tot_area - small_area)\n", "from math import sin, sqrt, radians\n\nn, r = map(int, input().split())\n\no = 360 / (n * 2)\na = o / 2\nc = 180 - o - a\n\nA = (r * sin(radians(a))) / sin(radians(c))\nO = (r * sin(radians(o))) / sin(radians(c))\n\nS = (A + O + r) / 2\n\narea = 0.5 * A * r * sin(radians(o))\nprint(2 * n * area)", "from math import*\nn, r = map(int, input().split())\nx=360/n\na=x/4/180*pi\nb=x*3/4/180*pi\nx=tan(a)\ny=tan(b)\nS = (r**2)*sin(a)*cos(a)/2\nS1 = (r*sin(a)/tan(b))*r*sin(a)/2\nS2=S-S1\nprint(S2*2*n)", "from math import pi, sin, tan\n\n\ndef zvezda(n, r):\n    alpha = (2 * pi) / n\n    s1 = r * r * sin(alpha * 0.5) * sin(alpha * 0.5) / tan(0.5 * (alpha + 0.5 * alpha))\n    s2 = 0.5 * (alpha - sin(alpha)) * r * r\n    s3 = pi * r * r\n    return format(s3 - n * (s2 + s1), '.10f')\n\n\nN, R = [int(j) for j in input().split()]\nprint(zvezda(N, R))\n", "from math import *\n\npi = 3.141592653589793238462643383279502884197\nn, r = list(map(int, input().split()))\n\na = tan(pi/(2*n))\nb = tan(pi/n)\na = 1/a + 1/b\nprint(r*r/a*n)\n", "#More es mi pastor nada me faltara\nimport math\nln = input().split(\" \")\nn = int(ln[0])\nr = int(ln[1])\ntot_area = n / 2 * (math.sin(2 * math.pi / n)) * r * r\nif n < 10 ** 6:\n    x = (1 - math.cos(2 * math.pi / n)) / (1 - math.cos(3 * math.pi / n))\nelse:\n    x = 4 / 9\nx *= r ** 2\nsmall_area = n / 2 * math.sin(3 * math.pi / n) * x\nprint(tot_area - small_area)", "from math import *\n\nN, R = list(map(int, input().split()))\n\ndef get(i):\n    theta = 2 * pi / N * i\n    return R * cos(theta), R * sin(theta)\n\ndef line(p, q):\n    m = (q[1] - p[1]) / (q[0] - p[0])\n    b = p[1] - m * p[0]\n    return (m, b)\n\ndef intersect(l1, l2):\n    x = (l1[1] - l2[1]) / (l2[0] - l1[0])\n    y = l1[0] * x + l1[1]\n    return (x, y)\n\ndef dist(p, q):\n    return sqrt((p[0] - q[0])**2 + (p[1] - q[1])**2)\n\np0 = get(0)\np1 = get(N // 2)\n\np2 = get(1)\np3 = get(N // 2 + 2)\n\np4 = intersect(line(p0, p1), line(p2, p3))\n\nmidpt = (p0[0] + p2[0]) / 2, (p0[1] + p2[1]) / 2\n\nh1 = dist(midpt, p4)\nh2 = dist(midpt, (0, 0))\n\narea = 0.5 * (h2 - h1) * dist(p0, p2)\n\nprint(area * N)\n", "import os, sys, pdb\nimport time, calendar, datetime\nimport math, itertools\nimport operator as op\nfrom functools import reduce\n\ndef ncr(n, r):\n    r = min(r, n-r)\n    numer = reduce(op.mul, list(range(n, n-r, -1)), 1)\n    denom = reduce(op.mul, list(range(1, r+1)), 1)\n    return numer // denom\n\nn, r = list(map(int, input().split()))\ns = 2 * r * math.sin(math.pi / n)\nApoly = 1 / (4 * math.tan(math.pi / n))\nAsub  = math.tan(math.pi * (1/2 - 3/(2*n))) / 4\n\nprint(n*s**2*(Apoly - Asub))\n\n\n"]