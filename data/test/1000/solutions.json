["n,v = map(int,input().split())\nreq = n-1\n\nif req<=v:\n    print (req)\nelse:\n    total = v\n    remaining = req-v\n    for x in range(remaining):\n        total += 2+x\n    print (total)", "n, v = map(int, input().split())\ncur = 0\ntotal = 0\nfor i in range(n):\n    while cur < n - i - 1:\n        cur += 1\n        total += (i + 1)\n        if cur == v:\n            break\n    cur -= 1\nprint(total)", "n,k=map(int,input().split())\nif k>=n-1:\n    print(n-1)\nelse:\n    print(k+ ((n-k)*(n-k+1))//2 - 1)", "n, v = map(int, input().split())\n\nresult = v-1 + (n-v)*(n-v+1)//2 if n-1 > v else n-1\nprint(result)", "n, v = map(int, input().split())\nb = 0\nans = 0\nsss = 0\nfor i in range(1, n + 1):\n    while b < v:\n        if sss == n - 1:\n            break\n        sss += 1\n        ans += i\n        b += 1\n    b -= 1\nprint(ans)", "n,v = map(int, input().split())\nans = min(v, n-1)\nfor i in range(n - v - 1):\n    ans += i+2\nprint(ans)", "n, v = map(int, input().strip().split())\nanswer = 0\nn -= 1\nif n <= v:\n    print(n)\nelse:\n    answer =v\n\n    for i in range(1,n-v + 1):\n\n        answer += (i + 1)\n    print(answer)", "def __starting_point():    \n    nums = input().split()\n    n = int(nums[0])\n    v = int(nums[1])\n\n    if n < v+2:\n        print(n - 1)\n    else:\n        print(int(v-1 + (n-v)*(n-v+1)/2))\n__starting_point()", "from collections import defaultdict as dd\nimport math\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\n\n\nn,v=mi()\n\ndist=n-1\n\nif v>=dist:\n\tprint(dist)\n\nelse:\n\toff=dist-v\n\tprices=[i+2 for i in range(off)]\n\tprint(v+sum(prices))\n", "import copy\nimport fractions\nimport itertools\nimport numbers\nimport string\nimport sys\n\n###\n\ndef to_basex(num, x):\n\twhile num > 0:\n\t\tyield num % x\n\t\tnum //= x\n\ndef from_basex(it, x):\n\tret = 0\n\tp = 1\n\tfor d in it:\n\t\tret += d*p\n\t\tp *= x\n\treturn ret\n\n###\n\ndef core():\n\tn, v = [int(x) for x in input().split()]\n\t\n\tans = min(v, n-1)\n\t\n\tif n-v > 1:\n\t\tans += (2 + n-v)*(n-v - 2 + 1)//2\n\t\n\tprint(ans)\n\n\ncore()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#JMD\n#Nagendra Jha-4096\n\n \nimport sys\nimport math\n\n#import fractions\n#import numpy\n \n###File Operations###\nfileoperation=0\nif(fileoperation):\n    orig_stdout = sys.stdout\n    orig_stdin = sys.stdin\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\n    sys.stdin = inputfile\n    sys.stdout = outputfile\n\n###Defines...###\nmod=1000000007\n \n###FUF's...###\ndef nospace(l):\n    ans=''.join(str(i) for i in l)\n    return ans\n \n \n \n##### Main ####\nt=1\nfor tt in range(t):\n    #n=int(input())\n    n,v= map(int, sys.stdin.readline().split(' '))\n    ans=0\n    pe=0\n\n    for i in range(1,n+1):\n        dist=n-i\n        if(pe<dist):\n            ans+=(min(v,dist)-pe)*i\n            pe+=(min(v,dist)-pe)\n        pe-=1\n    print(ans)\n\n\n    #a=list(map(int,sys.stdin.readline().split(' ')))\n    \n    \n#####File Operations#####\nif(fileoperation):\n    sys.stdout = orig_stdout\n    sys.stdin = orig_stdin\n    inputfile.close()\n    outputfile.close()", "def solve(n, v):\n    fuel = min(n - 1, v)\n    cost = fuel\n    for i in range(2, n):\n        if fuel >= n - 1:\n            break\n        fuel += 1\n        cost += i\n    return cost\n\nn, v = list(map(int, input().split()))\nprint(solve(n, v))\n", "n, v = list(map(int, input().strip().split()))\n\nremaining_dist = n - 1\nadding = min(remaining_dist, v)\ncost = adding\n\nremaining_dist -= adding\n\ni = 2\nwhile remaining_dist > 0:\n    cost += i\n    i += 1\n    remaining_dist -= 1\n\nprint(cost)\n", "citys,cap=map(int,input().split())\nif citys-1<=cap:\n\tprint(citys-1)\nelse:\n\tn=citys-cap\n\tprint(n*(n+1)//2+cap-1)", "def read_nums():\n    return [int(x) for x in input().split()]\n\n\ndef main():\n    n, v = read_nums()\n    res = 0\n    cur_tank = 0\n    for c in range(1, n+1):\n        need_to_by = min(v - cur_tank, n - c - cur_tank)\n        res += need_to_by * c\n        cur_tank += need_to_by\n        cur_tank -= 1\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "a,b=list(map(int,input().split()))\nif b>=a-1:\n    print(a-1)\nelse:\n    summ=b\n    k=a-b\n    for i in range(2,k+1):\n        summ+=i\n    print(summ)\n", "n, v = [int(item) for item in input().split()]\n\nx = 0\nc = 0\nfor i in range(1, n):\n    if x < n - i:\n        c += i * min((n - i), v - x)\n        x += min((n - i), v - x)\n    x -= 1\n\nprint(c)\n", "n,k=map(int, input().split())\nif n-1 <= k:\n  print(n-1)\nelse:\n  cnt=k\n  ans=k\n  i=2\n  while(cnt!= n-1):\n    ans=ans+i\n    cnt+=1\n    i+=1\n  print(ans)  ", "n,m=list(map(int,input().split()))\nt=m\nif m>=n-1:\n    print(n-1)\nelse:\n    for i in range(2,n-m+1):\n        t=t+i\n    print(t)\n", "# Bismillahirahmanirahim\n# Soru 1\n\nnv = list(map(int, input().split()))\n\nn = nv[0] - 1\nv = nv[1]\nif v >= n:\n    print(n)\n    quit()\nk = 2\nmoney = v\nwhile n - v > 0:\n    n = n - 1\n    money += k\n    k += 1\nprint(money)", "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:fenc=utf-8\n#\n\n\"\"\"\n\"\"\"\n\nfrom operator import itemgetter\n\nn, v = list(map(int, input().split()))\n\nif v >= n-1:\n    ans = n-1\nelse:\n    ans = v + ((2+(2+n-v-2))*(n-v-1))//2\nprint(ans)\n", "n, v = input().split()\nn = int(n)\nv = int(v)\n\nif (n <= v):\n    print(n-1)\nelse:\n    summ = v\n    for i in range(n-v-1):\n        summ += i+2\n    print(summ)\n", "# import math\n# import sys\n\nn,v = [int(x) for x in input().strip().split(\" \")]\nif v>=(n-1):\n\tprint(n-1)\nelse:\n\tprint(n-1+((n-1-v)*(n-v)//2))\n", "n, m = map(int,input().split())\nbase = min(n-1,m)\ntt = (n-1)-m\ni=2\nwhile tt>0:\n\tbase += i\n\ti += 1\n\ttt -= 1\nprint(base)", "n,v=map(int,input().split())\nm=min(n-1,v)\nans=m\nfor i in range(2,n+1-m):\n  ans+=i\nprint(ans)"]