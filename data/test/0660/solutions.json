["n, b, p = map(int, input().split())\nanswer1 = 0\nanswer2 = n\nwhile n > 1:\n    k = 1\n    while k < n:\n        k *= 2\n    answer1 += k * b + (k // 2)\n    n = k // 2 + n - k\nprint(answer1, answer2 * p)", "n, b, p = map(int, input().split())\nr1 = 0\nr2 = p * n\nwhile n != 1:\n    curr = 1\n    while curr * 2 <= n:\n        curr *= 2\n    n -= curr // 2\n    r1 += curr * b + curr // 2\nprint(r1, r2)", "n, b, p = [int(x) for x in input().split()]\nb1, p1 = 0, n*p\nwhile n > 1:\n    n1 = 2 << (n.bit_length()-2)\n    b1 += (2*b + 1) * n1 // 2\n    n -= n1//2\nprint(b1, p1)\n", "n, b, p = list(map(int, input().split()))\ng1 = 2 * b + 1\ng2 = 2 * p\nprint((n - 1) * g1, n * p)\n", "n,b,p=map(int,input().split())\nans_b=0\nans_p=n*p\nwhile n!=1:\n    kol_m=n//2\n    ans_b+=kol_m*(2*b+1)\n    n=n-n//2\nprint(ans_b,ans_p)", "import math\nn, b, p = map(int, input().split())\ncurr = n\nans = 0\nwhile curr != 1:\n    l = 2 ** int(math.log(curr, 2))\n    ans += l * b + l // 2\n    curr -= (l // 2)\nprint(ans, n * p)", "import math\nfrom math import *\nn,b,p = map(int, input().split(' '))\n#n,b,p = 5,2,3\nansb = 0\nansp = p * n\nwhile n > 1:\n    t = floor(log(n)/log(2))\n    m = 2**t\n    ansb += (2*b + 1) * (m/2)\n    n -= m/2\nprint(int(ansb), int(ansp))", "n, b, p = map(int, input().split())\nm = n\nans = 0\nwhile m > 1:\n  lb = 0\n  rb = 10\n  while lb != rb:\n    mb = (lb + rb + 1) // 2\n    if 2**mb <= m:\n      lb = mb\n    else:\n      rb = mb - 1\n  ans += (2**lb) * b + 2**(lb - 1)\n  m -= 2**(lb - 1)\nprint(ans, n * p)", "n, b, p = list(map(int, input().split()))\nansb = p * n\nif n == 1:\n    print(0, ansb)\nelse:\n    k = 2\n    while 2 * k <= n:\n        k *= 2\n    ansa = 0\n    while n > 1:\n        k //= 2\n        ansa += b * 2 * k + k\n        n -= k\n        while 2 * k <= n:\n            k *= 2\n        while k > n:\n            k //= 2\n    print(ansa, ansb)\n", "n, b, p = [int(t) for t in input().split()]\nprint((n-1)*(2*b+1), n*p)", "n, b, p = list(map(int, input().split()))\n\nans1 = 0\nans2 = p * n\nwhile n != 1:\n    k = 1\n    while k * 2 <= n:\n        k *= 2\n    ans1 += k // 2 + b * k\n    n -= k // 2\n\nprint(ans1, ans2)\n", "n, b, p = map(int, input().split())\nc, v = n, 0\nwhile c > 1:\n    k = 2\n    while 2 * k <= c:\n        k *= 2\n    c -= k // 2\n    v += k * b + k // 2\nprint(v, n * p)", "import math\nn, bottles, towels = map(int, input().split())\nnum = n\ncnt = 0\nwhile n != 1:\n    cnt += math.floor(math.log2(n))\n    n -= math.floor(math.log2(n))\nprint(cnt * bottles * 2 + cnt, num * towels)", "n, b, p = list(map(int, input().split(\" \")))\ndup = n\nans = 0\nwhile n>1:\n\tans += (n//2)*(2*b + 1)\n\tn = n//2 + n%2\nprint(ans, p*dup)", "n,b, p = input().split();\nn= int(n)\nb=int(b)\np=int(p)\nprint((n-1)*2*b+(n-1),end=' ')\nprint(n*p)\n", "def read():\n  return [int(s) for s in input().split()]\n\n(n, b, p) = read()\nprint((n-1)*(2*b+1), n*p)\n", "n, b, p = [int(x) for x in input().split()]\nprint((2 * b + 1) * (n - 1), n * p)\n", "import collections\nimport math\n\nn, b, p = map(int, input().split())\nans, k, t = 0, 2, n\nwhile k <= n:\n    k *= 2\nk //= 2\nwhile n != 1:\n    ans += (2 * b + 1) * (k // 2)\n    n -= k // 2\n    while k > n:\n        k //= 2\nprint(ans, t * p)", "def func(n):\n    if n<2:\n        return 0\n    if n==2:\n        return 1\n    k=int(n/2)\n    remain=n-k*2\n    return k+func(k+remain)\n\ninf=list(map(int,input().split()))\nn,b,p=inf[0],inf[1],inf[2]\nwater=2*b+1\nmatch=func(n)\nprint(match*water,n*p)\n", "import queue\nimport math\nimport io\n\n\n# n = int(input())\n#\n# class Sphere:\n#     def __init__(self,x,y,r):\n#         self.x = x\n#         self.y = y\n#         self.r = r\n#         self.left =x-r\n#         self.right = 300 - x+r\n#\n#     def has_route(self, shere):\n#         return math.sqrt((self.x - shere.x)**2+(self.y-shere.y)**2) <=self.r+shere.r\n#\n#     def __str__(self):\n#         return str(self.x)+'_'+str(self.y)+'_'+str(self.r)\n#\n# to_ = []\n# sher = []\n# sheres = {}\n# sheres1 ={}\n# def bfs(start):\n#     q = queue.Queue()\n#     q.put(start)\n#     used ={}\n#     d ={}\n#     p ={}\n#     for sher1 in sheres:\n#         used[sher1]=False\n#         d[sher1]=0\n#         p[sher1]=0\n#     used[start]=True\n#     while not q.empty():\n#         v = q.get()\n#         for sh in sheres[v]:\n#             if not used[sh]:\n#                 used[sh]=True\n#                 q.put(sh)\n#                 d[sh]=d[v]+1\n#                 p[sh]=v\n#     return [used,d,p]\n#\n#\n# for i in range(n):\n#     [x,y,r] = [int(x) for x in input().split(' ')]\n#     sher.append(Shere(x,y,r))\n#     to_.append(sher[-1])\n#     sheres1[str(sher[-1])]=sher[-1]\n#\n# to_.sort(key=lambda x: x.left)\n#\n#\n#\n#\n# for i in range(len(sher)):\n#     for j in range(len(sher)):\n#         if i != j:\n#             if sher[i].has_route(sher[j]):\n#                 if str(sher[i]) in  sheres:\n#                     sheres[str(sher[i])].append(str(sher[j]))\n#                 else:\n#                     sheres[str(sher[i])] = [str(sher[j])]\n#             else:\n#                 if str(sher[i]) not in sheres:\n#                     sheres[str(sher[i])] = []\n#\n# [used,d,p] = bfs(str(sher[0]))\n#\n# print(d)\n# print(p)\n# print(sheres)\n# print(to_)\n\n\n\n\n#\n# def relax(to, p):\n#     v = to\n#     res = []\n#     while (v != -1):\n#         res.append(v)\n#         v = p[v]\n#     return res\n#\n#\n# [b, e, p, n, m] = [int(x) for x in input().split()]\n# g = []\n# for i in range(n+1):\n#     g.append([])\n# print(g)\n# for i in range(m):\n#     [to, v] = [int(x) for x in input().split()]\n#     g[to].append(v)\n#     g[v].append(to)\n#\n# [used1, d1, p1] = bfs(1, g)\n# [used2, d2, p2] = bfs(2, g)\n# [used3, d3, p3] = bfs(n, g)\n# mi = 10 ** 10\n# print(p1)\n# path = relax(2,p1)\n# for i in range(len(path)):\n#     cur_po = path[i]\n#     len_c = d3[path[i]]\n#     mi = min(i*b+(len(path)-i)*e+d3[path[i]]*p, mi)\n#\n#\n# print(min(mi, d3[1]*b+d3[2]*e))\n#io1 = open('discuss.in')\ns = [2,4,8,16,32,64,128,256,512]\n\ndef step(n):\n    st = 0\n    for i in range(len(s)):\n        if(s[i]>n):\n            st = s[i-1]\n            break\n    return [(n-st)+st//2, st//2]\n\n\n[n,b,p] = [int(x) for x in input().split(' ')]\nres = 0\nres_p = n*p\nwhile n > 1:\n    [n, rb]= step(n)\n    res+=rb*2*b+rb\nprint(str(res)+\" \"+str(res_p))", "#!/usr/bin/env python\nn, b, p = list(map(int, input().split()))\nb_sum = 0\np_sum = p * n\nimport math\nwhile n > 1:\n    b_sum += (2 * b + 1) * int(math.log2(n))\n    n -= int(math.log2(n))\nprint(b_sum, p_sum)\n", "def __starting_point():\n\n    n , b , p = map( int , input().split() )\n\n    res2 = n*p\n    res1 = 0\n    while n > 1:\n        res1 += (n//2)*(2*b+1)\n        n -= n//2\n\n    print( res1 , res2 )\n__starting_point()", "import math\n(n, b, p) = list(map(int, input().split()))\nm = n\nbottles = 0\npapers = p * n\nwhile m > 1:\n    k = 2 ** math.floor(math.log(m, 2))\n    bottles += k * b\n    bottles += k // 2\n    m = m - k + k // 2\nprint(bottles, papers)\n\n\n\n\n\n    \n", "3\n\nimport math\n\nn, b, p = [int(i) for i in input().split()]\n\ntowels = n * p\nbottles = 0\n\ndef less_power2(num):\n\treturn 2 ** int(math.log(num, 2))\n\nm = n\nwhile m > 1:\n\tk = less_power2(m)\n\tbottles += k*b + k//2\n\tm -= k // 2\n\nprint(bottles, towels)\n"]