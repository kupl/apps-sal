["def main():\n    from sys import stdin\n    k, n = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    res = set()\n    for i in range(k):\n        # putting b[0] on place i\n        our = set()\n        curr = b[0]\n        for j in range(i, -1, -1):\n            our.add(curr)\n            curr -= a[j]\n        first = curr\n        good = True\n        curr = b[0]\n        for j in range(i + 1, k):\n            curr += a[j]\n            our.add(curr)\n        for elem in b:\n            if elem not in our:\n                good = False\n                break\n        if good:\n            res.add(first)\n    print(len(res))\n    \n    \nmain()", "k, n = [int(x) for x in input().strip().split()]\na = [int(x) for x in input().strip().split()]\nb = [int(x) for x in input().strip().split()]\nsb = set(b)\nsm = [0] * k\nfor i in range(k):\n    sm[i] = sm[i - 1] + a[i]\n\nanswers = set()\nfor i in range(k):\n    beg = b[0] - sm[i]\n    t = set([beg + sm[j] for j in range(k)])\n    if len(sb - t) == 0:\n        answers.add(beg)\n\nprint(len(answers))\n", "import sys\n\ndef main():\n    k, n = map(int,sys.stdin.readline().split())\n    a = list(map(int,sys.stdin.readline().split()))\n    b = list(map(int,sys.stdin.readline().split()))\n    \n    for i in range(1,k):\n        a[i] = a[i-1]+a[i]\n\n    c = set()\n    for i in range(k):\n        x = b[0]-a[i]\n        u = {}\n        for j in range(k):\n            u[x+a[j]] = True\n        flag = True\n        for j in range(n):\n            if b[j] not in u:\n                flag = False\n                break\n        if flag:\n            c.add(x)\n\n    print(len(c))\n\nmain()", "import sys\n\nK, N = [int(x) for x in sys.stdin.readline().split()]\na_s = [int(x) for x in sys.stdin.readline().split()]\nb_s = [int(x) for x in sys.stdin.readline().split()]\n\nposs = set([])\nstart = 1\nfor b in b_s:\n    locls = set([])\n    for a in a_s:\n        b -= a\n        locls.add(b)\n    if start == 1:\n        poss = locls\n        start = 0\n    else:\n        poss = set.intersection(poss, locls)\n\nprint(len(poss))\n", "from itertools import accumulate\nk, n = map(int,input().split())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nsuma = list(accumulate(a))\n\ndef possible(s):\n    target = set(b)\n    for i in a:\n        s+= i\n        if s in target: target.remove(s)\n    return not target\n\npos = set()\nfor i in range(k):\n    ini = b[0]-suma[i]\n    if possible(ini):\n        pos.add(ini)\nprint(len(pos))", "k,n = list(map(int,input().split()))\na = []\nb = []\ntemp = input().split()\ns = 0\nfor i in range(k):\n    s += int(temp[i])\n    a.append(s)\nlist.sort(a)\ntemp = input().split()\nfor i in range(n):\n    b.append(int(temp[i]))\nlist.sort(b)\ncount = 0\nvisit = set()\nfor i in range(k-n+1):\n    dif = b[0]-a[0]\n    if dif not in visit:\n        visit.add(dif)\n        add = True\n        index = 0\n        for j in range(n):\n            while index < len(a):\n                if a[index] == b[j]-dif:\n                    break\n                elif a[index] > b[j]-dif:\n                    add = False\n                    break\n                else:\n                    index += 1\n            if index >= len(a):\n                add = False\n                break\n            if not add:\n                break\n        if add:\n            count += 1\n    a = a[1:]\nprint(count)\n", "I = lambda: list(map(int, input().split()))\nk, n = I()\na, b = list(I()), list(I())\ns = 0\nfor i in range(k):\n    s += a[i]\n    a[i] = s\n#print(a)\nans = [set() for x in range(n)]\nfor i, y in enumerate(b):\n    ans[i] = [y-x for x in a]\n#print(ans)\nans2 = set(ans[0])\n#print(ans2)\nfor x in ans:\n    ans2.intersection_update(x)\n#print(ans2)\nprint(len(ans2))\n", "import sys\n\ndef solve():\n\tk, n = list(map(int, sys.stdin.readline().split()))\n\tmks = list(map(int, sys.stdin.readline().split()))\n\tpts = list(map(int, sys.stdin.readline().split()))\n\n\tfor i in range(1, k):\n\t\tmks[i] = mks[i-1] + mks[i]\n\n\tmks = sorted(mks)\n\tpts = sorted(pts)\n\n\tvals = set()\n\n\tfor i in range(k - n + 1):\n\t\tcand = pts[0] - mks[i]\n\t\tj = 0\n\t\toff = 0\n\t\twhile j < len(pts):\n\t\t\twhile i + j + off < k and pts[j] - cand > mks[i + j + off]:\n\t\t\t\toff += 1\n\t\t\tif i + j + off < k and pts[j] - mks[i + j + off] == cand:\n\t\t\t\tj += 1\n\t\t\telse:\n\t\t\t\tbreak\n\t\tif j == len(pts):\n\t\t\tvals.add(cand)\n\n\tprint(len(vals))\n\nsolve()", "k, n = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nst = set()\nzn = b[0]\nsums = [a[0]]\nfor j in range(1, len(a)):\n    sums.append(sums[-1] + a[j])\nfor j in sums:\n    st.add(b[0] - j)\nfor i in b: # \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n    tmp = set()\n    for j in sums: #\ufffd\ufffd\ufffd\ufffd\ufffd\n        tmp.add(i - j)\n        \n    st = st.intersection(tmp)\n    #print(st)\n    if len(st) == 0:\n        break\nprint(len(st))\n        \n", "\"\"\"\nfrom time import sleep\nn,k=[int(i) for i in input().split()]\n\ninf=[None for i in range(10**5)]\nans=[0 for i in range(10**5)]\ndef howMany(i):\n    if i-k+1<0:\n        inf[i]=1\n        return\n    elif i==k-1:\n        inf[i]=2\n        return \n    else:\n        inf[i]=(inf[i-1]+inf[i-k])%(10**9+7)\n\nfor i in range(10**5):\n    howMany(i)\n    ans[i]=ans[i-1]+inf[i]\nfor i in range(n):\n    a,b=[int(i)-1 for i in input().split()]\n    print(ans[:20])\n    print((a-1) if a-1>=0 else 0)\n    print(ans[b]-ans[(a-1) if a-1>=0 else 0])%(10**9+7)\n\n#a={'WWWRRRR','RWWWRRR','RRWWWRR','RRRWWWR','RRRRWWW','RRRRRRR','WWWWWWR','WWWRWWW','RWWWWWW'}\n#print(len(a))\n\"\"\"\nk,n=[int(i) for i in input().split()]\na=[int(i) for i in input().split()]\nb=[int(i) for i in input().split()]\nc=[]\nans=0\ntest=set()\nfor i in a:\n    c.append(i if c==[] else (c[-1]+i))\n\ndef howMany(a1):\n    nonlocal ans\n    #print(a1)\n    for i in b:\n        if not i in a1: return \n    if a1[0] in test:\n        return \n    else: test.add(a1[0])\n    #print(b[0]-a1[0])\n    ans+=1\n\nfor i in c:\n    howMany(list([b[0]-i+x for x in c]))\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n", "k,n = list(map(int,input().split()))\nA = list(map(int,input().split()))\nB = list(map(int, input().split()))\nS = [0] * k\nfor i in range(k):\n\tif i == 0:\n\t\tS[0] = A[0]\n\telse:\n\t\tS[i] = S[i - 1] + A[i]\nS.sort()\nB.sort()\nans = set()\nfor i,s in enumerate(S):\n\tif i > 0 and S[i - 1] == s:\n\t\tcontinue\n\tt = B[0] - s\n\tif n > 1:\n\t\tj = i + 1\n\t\tflag = False\n\t\tfor m,u in enumerate(B[1:]):\n\t\t\twhile j < len(S):\n\t\t\t\tif u - S[j] == t:\n\t\t\t\t\tif m == n - 2:\n\t\t\t\t\t\tflag = True\n\t\t\t\t\tj += 1\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tj += 1\n\t\tif flag == True:\n\t\t\tans.add(t)\n\telse:\n\t\tans.add(t)\nprint(len(ans))\n\n\n\n", "def read():\n    return [int(x) for x in input().split()]\n\nk, n = read()\na = read()\nb = read()\n\nc = []\nfor x in a:\n    c.append((c[-1] if c else 0) + x)\nc = set(c)\n\nz = set()\n\ns = 0\nfor x in a:\n    s += x\n    i = b[0] - s\n    for y in b[1:]:\n        if y - i not in c:\n            break\n    else:\n        z.add(i)\n\nprint(len(z))\n", "from sys import stdin, stdout\n\nk, n = map(int, stdin.readline().split())\nmarks = list(map(int, stdin.readline().split()))\nvalues = list(map(int, stdin.readline().split()))\n\ncnt = [marks[0]]\nfor i in range(1, k):\n    cnt.append(cnt[-1] + marks[i])\n\ncnt.sort()\nvalues.sort()\nans = set()\n\nfor i in range(k - n + 1):\n    x = values[0] - cnt[i]\n    \n    pos = 1\n    ind = i + 1\n    label = 1\n    \n    while pos < n and ind < k:\n        if cnt[ind] + x < values[pos]:\n            ind += 1\n        elif cnt[ind] + x == values[pos]:\n            ind += 1\n            pos += 1\n        else:\n            label = 0\n            break\n    \n    if label and pos == n:\n        ans.add(x)\n\nstdout.write(str(len(ans)))", "#!/usr/bin/env python3\nfrom sys import stdin, stdout\n\ndef rint():\n    return list(map(int, stdin.readline().split()))\n#lines = stdin.readlines()\n\nk, n = rint()\n\na = list(rint())\nb = list(rint())\n\nfor i in range(1,k):\n    a[i] = a[i] + a[i-1]\n\na0 = min(a)\nfor i in range(len(a)):\n    a[i] -= a0\na = set(a)\n\nb0 = min(b)\nfor i in range(n):\n    b[i] -= b0\n\nans = 0\nfor aa in a:\n    diff = aa\n    ans +=1\n    for bb in b:\n        if bb + diff in a:\n            pass\n        else:\n            ans -= 1\n            break\n\nprint(ans)\n\n\n", "\ndef read():\n    return [int(x) for x in input().split()]\n\n\nk,n = read()\na = read()\nb = read()\n\nsum = set()\ntmp =[0]\nfor e in a:\n    tmp.append(tmp[-1]+e)\n    sum.add(tmp[-1])\n\nans = set()\nfor e in tmp[1:]:\n    init = b[0]-e\n    for bb in b[1:]:\n        if bb - init not in sum:\n            break\n    else:\n        ans.add(init)\n\nprint(len(ans))", "def read():\n    return [int(x) for x in input().split()]\n\nk, n = read()\na = read()\nb = read()\n\nc = []\nfor x in a:\n    c.append((c[-1] if c else 0) + x)\nc = set(c)\n\nz = set()\n\ns = 0\nfor x in a:\n    s += x\n    i = b[0] - s\n    for y in b[1:]:\n        if y - i not in c:\n            break\n    else:\n        z.add(i)\n\nprint(len(z))", "o=lambda:[int(f)for f in input().split()]\nk,n=o()\na=o()\nb=o()\ns=[]\nfor x in b:\n    t=x\n    t1=set()\n    for y in a:\n        t-=y\n        t1.add(t)\n    s+=[t1]\nprint(len(set.intersection(*s)))\n", "R= lambda: map(int,input().split())\nk,n=R()\na,b=list(R()),list(R())\nc=[a[0]]\nfor i in range(1,k):\n    c.append(c[-1]+a[i])\nc=set(c)\ns,cur=set(),0\nfor x in a:\n    cur+=x\n    new=b[0]-cur\n    for y in b[1:]:\n        if y-new not in c:\n            break\n    else:   s.add(new)\nprint(len(s))", "k, n = list(map(int, input().split()))\nj = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nb_set = set(b)\nmy_sum = [0 for i in range(k)]\nmy_sum[0] = j[0]\n\nfor i in range(1, k):\n    my_sum[i] = my_sum[i - 1] + j[i]\n\npos_val = set()\nfor score in my_sum:\n    pos_val.add(b[0] - score)\n\nans = 0\nfor start_val in pos_val:\n    score_set = set()\n    for marks in my_sum:\n        score = start_val + marks\n        score_set.add(score)\n\n    if (score_set & b_set) == b_set:\n        ans += 1\n\nprint(ans)\n", "k, n = list(map(int,input().split()))\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nall_maybe_all_b = []\nfor mast_b in b:\n    all_maybe_for_b_i=set()\n    for slog in a:\n        mast_b -= slog\n        all_maybe_for_b_i.add(mast_b)\n    all_maybe_all_b += [all_maybe_for_b_i]\npack_ans_intersection=set.intersection(*all_maybe_all_b)\n#print(all_maybe_all_b)\n#print(pack_ans_intersection)\nprint(len(pack_ans_intersection))\n", "import sys\n\nk, n = [int(i) for i in sys.stdin.readline().split()]\nrate = [int(i) for i in sys.stdin.readline().split()]\nrem = dict()\nfor i in sys.stdin.readline().split():\n\tv = int(i)\n\tif v in rem:\n\t\trem[v] += 1\n\telse:\n\t\trem[v] = 1\n\t\t\nfor i in range(len(rate)):\n\tif i > 0:\n\t\trate[i] += rate[i-1]\n\nans = set()\nref = next(iter(rem));\nfor i in range(len(rate)):\n\tcnt = rem.copy()\n\tfor j in range(len(rate)):\n\t\tv = ref + rate[j] - rate[i]\n\t\tif v in cnt:\n\t\t\tcnt[v] -= 1\n\t\t\tif cnt[v] == 0:\n\t\t\t\tdel cnt[v]\n\tif len(cnt) == 0:\n\t\tans.add(ref - rate[i])\n\nprint(len(ans))", "(k, n) = (int(i) for i in input().split())\n\na = []\nprev = 0\nfor i in input().split():\n\tprev =  prev+int(i)\n\ta.append(prev)\n\nb = [int(i) for i in input().split()]\nkands = set()\nfor i in a:\n\tkands.add(b[0]-i)\nb = set(b)\ncnt = 0\nfor i in kands:\n\tcur = set()\n\tfor j in a:\n\t\tcur.add(i+j)\t\n\tif b<=cur:\n\t\tcnt+=1\nprint(cnt)"]