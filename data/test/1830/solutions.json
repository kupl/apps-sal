["n, m = map(int, input().split())\nsum = n ** 2\ncolx = n\ncoly = n\nusedx = [False] * n\nusedy = [False] * n\nfor i in range(m):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    if not usedx[x]:\n        sum -= coly\n        usedx[x] = True\n        colx -= 1\n    if not usedy[y]:\n        sum -= colx\n        usedy[y] = True\n        coly -= 1\n    print(sum, end = ' ')\n", "n, m = list(map(int, input().split()))\nrow = set()\ncol = set()\ns = \"\"\nfor i in range(m):\n    r, c = list(map(int, input().split()))\n    row.add(r)\n    col.add(c)\n    dead = len(row)*n+len(col)*(n-len(row))\n    s += str(n*n - dead) + \" \"\nprint(s)\n", "from collections import *\nc,r=Counter(),Counter()\nn,k=list(map(int,input().split()))\nans=[]\nfor i in range(k):\n    i,j=list(map(int,input().split()))\n    c[i],r[j]=1,1\n    li,lj=len(c),len(r)\n    ans.append(n*n-li*n-lj*n+li*lj)\nprint(*ans)\n", "n, m = map(int,input().split())\nxyi = [list(map(int,input().split())) for i in range(m)]\nx = [0]*(n+1)\ny = [0]*(n+1)\nnumx = 0\nnumy = 0\nnum = n*n\nfor i in range(m):\n    if x[xyi[i][0]] == 0:\n        num += numy - n\n        numx += 1\n        x[xyi[i][0]] = 1\n    if y[xyi[i][1]] == 0:\n        num += numx - n\n        numy += 1\n        y[xyi[i][1]] = 1\n    print(num, end=\" \")\n    \n", "n, m = map(int, input().split())\n\nc = set()\nr = set()\n\nfor i in range(m):\n    x, y = map(int, input().split())\n    c.add(x)\n    r.add(y)\n\n    c1 = len(c)\n    r1 = len(r)\n    #print(c1, r1)\n\n    print((n * n) - (c1 * n + ((n - c1) * r1)), end=\" \")\n\nprint(\"\")\n    \n", "\nn, m = list(map(int, input().split()))\n\ncolumns = set()\nrows = set()\n\nresults = []\nfor _ in range(m):\n    x, y = list(map(int, input().split()))\n\n    columns.add(x)\n    rows.add(y)\n\n    result = n * (n - len(columns)) - (n - len(columns)) * len(rows)\n    results.append(result)\n\nprint(' '.join(map(str, results)))\n", "n,m=map(int,input().split())\nxs=[0 for i in range(n)]\nys=[0 for i in range(n)]\nl=0\nk=0\nfor i in range(m):\n    x,y=map(int,input().split())\n    if xs[x-1]!=1:\n        xs[x-1]=1\n        l+=1\n    if ys[y-1]!=1:\n        ys[y-1]=1\n        k+=1\n    print(n*n-(l+k)*n+l*k,end=' ')\n", "import sys\n\nn, rooks = map(int, input().split())\n\nrows = [False for _ in range(n+1)]\ncolumns = [False for _ in range(n+1)]\n\nempty_rows = n\nempty_columns = n\n\nfor i in range(rooks):\n\tx, y = map(int, input().split())\n\tif not rows[x]:\n\t\trows[x] = True\n\t\tempty_rows -= 1\n\tif not columns[y]:\n\t\tcolumns[y] = True\n\t\tempty_columns -= 1\n\tif i == rooks - 1:\n\t\tprint(empty_rows * empty_columns)\n\telse:\n\t\tprint(empty_rows * empty_columns, end=' ')\n\n", "n, m = map(int, input().split())\n\nfree_verticals = set(range(1, n+1))\nfree_horizontals = set(range(1, n+1))\n\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    free_verticals.discard(x)\n    free_horizontals.discard(y)\n    print(len(free_horizontals) * len(free_verticals), end=' ')\nprint()\n", "a,s=input().split()\na=int(a)\ns=int(s)\ntop1=a\ntop2=a\nl1=[]\nl2=[]\nl3=[]\nfor i in range(0,100007):\n    l1.append(0)\n    l2.append(0)\nfor i in range(0,s):\n    z,x=input().split()\n    z=int(z)\n    x=int(x)\n    if l1[z]==0:\n        top1-=1\n        l1[z]=1\n    if l2[x]==0:\n        top2-=1\n        l2[x]=1\n    l3.append(top1*top2)\nfor i in l3:\n    print(i,end=\" \")\n    \n", "n, m = map(int, input().split())\nxvis = [False]*(n+1)\nyvis = [False]*(n+1)\nxc = 0\nyc = 0\n\ndef cal():\n    s = (n-xc)*n - (n-xc)*yc\n    return s\n\nfor i in range(m):\n    x, y = map(int, input().split())\n    if not(xvis[x]):\n        xvis[x] = True\n        xc += 1\n    if not(yvis[y]):\n        yvis[y] = True\n        yc += 1\n    print(cal(), end = ' ')\n", "n,m=[int(i) for i in input().strip().split()]\nr_atk=set()\nc_atk=set()\nfor __ in range(m):\n  r,c=[int(i) for i in input().strip().split()]\n  if r not in r_atk:\n    r_atk.add(r)\n  if c not in c_atk:\n    c_atk.add(c)\n  print((n-len(r_atk))*(n-len(c_atk)),end=' ')", "n = input().split()\nm = int(n[1])\nn = int(n[0])\nx = set()\ny = set()\ns = list()\ne = 0\nfor i in range(0,m):\n    t = input().split()\n    x.add(int(t[0]))\n    y.add(int(t[1]))\n    num = (n-len(x))*(n-len(y))\n    if num < 0:\n        e = i\n        break;\n    s.append(str(num))\nif e != 0:\n    c = [\"0\" for l in range(e,m)]\n    #for i in range(e, m):\n    #    t = input()\n    s.extend(c)\nst=\" \"\nprint(st.join(s))", "read = lambda: list(map(int, input().split()))\nn, m = read()\nans = [0] * m\ndx = [0] * (n + 1)\ndy = [0] * (n + 1)\ncur = n ** 2\nkx = ky = 0\nfor i in range(m):\n    x, y = read()\n    if dx[x] == 0 and dy[y] == 0:\n        cur = cur - n - n + kx + ky + 1\n        kx += 1\n        ky += 1\n        dx[x] = 1\n        dy[y] = 1\n    elif dx[x] == 0 and dy[y] == 1:\n        cur = cur - n + ky\n        kx += 1\n        dx[x] = 1\n    elif dx[x] == 1 and dy[y] == 0:\n        cur = cur - n + kx\n        ky += 1\n        dy[y] = 1\n    ans[i] = cur\nprint(*ans)\n", "A = input().split()\nn=int(A[0])\nm=int(A[1])\ns=n**2\nB = [0] * (n+1)\nC = [0] * (n+1)\nx1=n\ny1=n\nfor i in range(m):\n   A = input().split()\n   x=int(A[0])\n   y=int(A[1])\n   if B[x]==0 and C[y]==0:\n       s=s-x1-y1+1\n       x1-=1\n       y1-=1\n   if B[x]==1 and C[y]==0:\n       s=s-y1\n       x1-=1\n   if B[x]==0 and C[y]==1:\n       s=s-x1\n       y1-=1    \n   B[x]=1\n   C[y]=1\n   print(s, end=' ')\n   \n", "n, m = [int(i) for i in input().split()]\ns = [[0, 0] for i in range(n)]\nr = n**2\nans = []\nq = 0\nw = 0\nfor i in range(m):\n\ta, b = [int(y) for y in input().split()]\n\tif not s[a-1][0]:\n\t\tq+=1\n\tif not s[b-1][1]:\n\t\tw+=1\n\ts[a-1][0]+=1\n\ts[b-1][1]+=1\n\tans.append(n**2-q*n-w*n+q*w)\nprint(*ans)\n", "n, m = list(map(int, input().strip().split()))\n\nremains = n*n\ndeleted_rows = set()\ndeleted_cols = set()\nanswer = []\nfor _ in range(m):\n    c, r = list(map(int, input().strip().split()))\n    col_deleted = c in deleted_cols\n    row_deleted = r in deleted_rows\n    if not (col_deleted and row_deleted):\n        if col_deleted:\n            remains -= (n - len(deleted_cols))\n        elif row_deleted:\n            remains -= (n - len(deleted_rows))\n        else:  # not x_in and not y_in\n            remains -= (2*n - len(deleted_cols) - len(deleted_rows) - 1)\n\n    deleted_cols.add(c)\n    deleted_rows.add(r)\n\n    answer.append(str(remains))\n\nprint(' '.join(answer))\n", "def pro():\n    n, m = map(int, input().split())\n    x = [False for i in range(n)]\n    x1 = n\n    y = [False for i in range(n)]\n    y1 = n\n    for i in range(m):\n        k,l = map(int, input().split())\n        if not x[k - 1]:\n            x[k - 1] = True\n            x1 -= 1\n        if not y[l - 1]:\n            y[l - 1] = True\n            y1 -= 1\n        print(x1 * y1, end=' ')\npro()", "N, M = map(int, input().split())\n\nr = N\nc = N\n\nR = [False for i in range(N)]\nC = R.copy()\n\nfor i in range(M):\n    a, b = map(int, input().split())\n\n    if not R[a-1]:\n        r -= 1\n        R[a-1] = True\n\n    if not C[b-1]:\n        c -= 1\n        C[b-1] = True\n\n    print(r*c, end=' ')\n"]