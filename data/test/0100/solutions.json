["3\n\ndef readln(): return list(map(int, input().split()))\nimport sys\ndef return:\n    print(-1)\n    return\n\nn, m = readln()\nmon = [list(input()) for _ in range(n)]\nhor = [i for i in range(n) if mon[i] != ['.'] * m]\nrmon = list(zip(*mon))\nver = [j for j in range(m) if rmon[j] != ('.',) * n]\nmini = hor[0]\nmaxi = hor[-1]\nminj = ver[0]\nmaxj = ver[-1]\ncnt_in = len([1 for i in range(mini + 1, maxi) for j in range(minj + 1, maxj) if mon[i][j] == 'w'])\ncnt_l = len([1 for i in range(mini + 1, maxi) if mon[i][minj] == 'w'])\ncnt_r = len([1 for i in range(mini + 1, maxi) if mon[i][maxj] == 'w'])\ncnt_d = len([1 for j in range(minj + 1, maxj) if mon[mini][j] == 'w'])\ncnt_u = len([1 for j in range(minj + 1, maxj) if mon[maxi][j] == 'w'])\nif cnt_in:\n    return\nif maxi - mini < maxj - minj:\n    k = maxj - minj + 1\n    if maxi == mini and cnt_d:\n        if mini >= k - 1:\n            mini -= k - 1\n        elif maxi + k - 1 < n:\n            maxi += k - 1\n        else:\n            return\n    else:\n        if not cnt_d:\n            mini = max(0, maxi - k + 1)\n        if maxi - maxi + 1 != k and not cnt_u:\n            maxi = min(mini + k - 1, n - 1)\n        if maxi - mini + 1 != k:\n            return\nelse:\n    k = maxi - mini + 1\n    if maxj == minj and cnt_l:\n        if minj >= k - 1:\n            minj -= k - 1\n        elif maxj + k - 1 < m:\n            maxj += k - 1\n        else:\n            return\n    else:\n        if not cnt_l:\n            minj = max(0, maxj - k + 1)\n        if maxj - minj + 1 != k and not cnt_r:\n            maxj = min(minj + k - 1, m - 1)\n        if maxj - minj + 1 != k:\n            return\nfor i in range(mini, maxi + 1):\n    if mon[i][minj] == '.':\n        mon[i][minj] = '+'\nfor i in range(mini, maxi + 1):\n    if mon[i][maxj] == '.':\n        mon[i][maxj] = '+'\nfor j in range(minj, maxj + 1):\n    if mon[mini][j] == '.':\n        mon[mini][j] = '+'\nfor j in range(minj, maxj + 1):\n    if mon[maxi][j] == '.':\n        mon[maxi][j] = '+'\nprint('\\n'.join([''.join(row) for row in mon]))\n", "from itertools import chain\n# To draw square: if point isn't 'w', draw '+'\ndef draw_square(scr, square_a, ymin, xmin):\n    for i in range(square_a + 1):\n        if scr[ymin][xmin + i] != 'w':\n            scr[ymin] = scr[ymin][:xmin + i] + '+' + scr[ymin][xmin + i + 1:]\n        if scr[ymin + square_a][xmin + i] != 'w':\n            scr[ymin + square_a] = scr[ymin + square_a][:xmin + i] + '+' + scr[ymin + square_a][xmin + i + 1:]\n        if scr[ymin + i][xmin] != 'w':\n            scr[ymin + i] = scr[ymin + i][:xmin] + '+' + scr[ymin + i][xmin + 1:]\n        if scr[ymin + i][xmin + square_a] != 'w':\n            scr[ymin + i] = scr[ymin + i][:xmin + square_a] + '+' + scr[ymin + i][xmin + square_a + 1:]\n    return scr\n# To find the side length of a square, and if there is some point beside the edge of a square it'll print '-1'\ndef find_a(pixel, y, x):\n    ymax = xmax = 0\n    ymin = y\n    xmin = x\n    ymaxl = []\n    yminl = []\n    xmaxl = []\n    xminl = []\n    count_pixel = len(pixel) // 2\n    for i in range(count_pixel):\n        if ymax < pixel[2 * i]:\n            ymax = pixel[2 * i]\n        if ymin > pixel[2 * i]:\n            ymin = pixel[2 * i]\n        if xmax < pixel[2 * i + 1]:\n            xmax = pixel[2 * i + 1]\n        if xmin > pixel[2 * i + 1]:\n            xmin = pixel[2 * i + 1]\n    for i in range(count_pixel):\n        f = True\n        if pixel[2 * i] == ymax:\n            f = False\n            ymaxl.append(pixel[2 * i])\n            ymaxl.append(pixel[2 * i + 1])\n        if pixel[2 * i] == ymin:\n            f = False\n            yminl.append(pixel[2 * i])\n            yminl.append(pixel[2 * i + 1])\n        if pixel[2 * i + 1] == xmax:\n            f = False\n            xmaxl.append(pixel[2 * i])\n            xmaxl.append(pixel[2 * i + 1])\n        if pixel[2 * i + 1] == xmin:\n            f = False\n            xminl.append(pixel[2 * i])\n            xminl.append(pixel[2 * i + 1])\n        # if some point beside the edge of a square: like the 'x'\n        # 5 7\n        # .......\n        # .+++...\n        # .+x+...\n        # .www...\n        # .......\n        if f:\n            print('-1')\n            return\n    return ymax, ymin, xmax, xmin, ymaxl, yminl, xmaxl, xminl\ndef main():\n    y, x = list(map(int, input().split()))\n    scr = []\n    for i in range(y):\n        scr.append(input())\n    pixel = []\n    # To collect the point info\n    for i in range(y):\n        for j in range(x):\n            if scr[i][j] == 'w':\n                pixel.append(i)\n                pixel.append(j)\n    ymax, ymin, xmax, xmin, ymaxl, yminl, xmaxl, xminl = find_a(pixel, y, x)\n    count_ymax = len(ymaxl) / 2\n    count_ymin = len(yminl) / 2\n    count_xmax = len(xmaxl) / 2\n    count_xmin = len(xminl) / 2\n    countx_ymax = ymaxl[1::2].count(xmax) + ymaxl[1::2].count(xmin)\n    countx_ymin = yminl[1::2].count(xmax) + yminl[1::2].count(xmin)\n    county_xmax = xmaxl[::2].count(ymax) + xmaxl[::2].count(ymin)\n    county_xmin = xminl[::2].count(ymax) + xminl[::2].count(ymin)\n    #print('ymax:%d,ymin:%d,xmax:%d,xmin:%d'%(ymax,ymin,xmax,xmin))\n    #print(f'ymaxl:\\n{ymaxl}\\nyminl:\\n{yminl}\\nxmaxl:\\n{xmaxl}\\nxminl:\\n{xminl}\\ncounty_xmax:{county_xmax}\\ncounty_xmin:{county_xmin}\\ncountx_ymax:{countx_ymax}\\ncountx_ymin:{countx_ymin}')\n    # There are three conditions:\n    # 1.height > width  2.height < width    3.height == width\n    # eg: 1.height > width:\n    # so square_a = height\n    if ymax - ymin > xmax - xmin:\n        square_a = ymax - ymin\n        # if the point form a rectangle:\n        # 5 7\n        # .......\n        # .ww....\n        # .wx....\n        # .ww....\n        # .......\n        # or\n        # 5 7\n        # .......\n        # .w.....\n        # .w.....\n        # .w.....\n        # .......\n        if county_xmax < count_xmax and county_xmin < count_xmin:\n            # 5 7\n            # .......\n            # .w++...\n            # .w.+...\n            # .w++...\n            # .......\n            if xmax == xmin:\n                if xmin + square_a < x:\n                    xmax = xmin + square_a\n                elif xmax - square_a >= 0:\n                    xmin = xmax - square_a\n                else:\n                    print('-1')\n                    return\n            else:\n                print('-1')\n                return\n        # if the point from the shape of [ like:\n        # 5 7\n        # .......\n        # .www...\n        # .w.....\n        # .www...\n        # .......\n        elif county_xmax < count_xmax and county_xmin == count_xmin:\n            xmin = xmax - square_a\n            if xmin < 0:\n                print('-1')\n                return\n        # if the point from the shape of ] like:\n        # 5 7\n        # .......\n        # .www...\n        # ...w...\n        # .www...\n        # .......\n        elif county_xmax == count_xmax and county_xmin < count_xmin:\n            xmax = xmin + square_a\n            if xmax >= x:\n                print('-1')\n                return\n        # if there is some point to make county_xmax == count_xmax and county_xmin == count_xmin like:\n        # 5 7\n        # .......\n        # .w.....\n        # .......\n        # ..w....\n        # .......\n        elif county_xmax == count_xmax and county_xmin == count_xmin:\n            if square_a < x:\n                if xmin + square_a < x:\n                    xmax = xmin + square_a\n                elif xmax - square_a >= 0:\n                    xmin = xmax - square_a\n                # sp:\n                # 5 5\n                # .w...\n                # .....\n                # .....\n                # .....\n                # ..w..\n                else:\n                    xmin = 0\n                    xmax = xmin + square_a\n            else:\n                print('-1')\n                return\n    elif ymax - ymin < xmax - xmin:\n        square_a = xmax - xmin\n        if countx_ymax < count_ymax and countx_ymin < count_ymin:\n            if ymax == ymin:\n                if ymin + square_a < y:\n                    ymax = ymin + square_a\n                elif ymax - square_a >= 0:\n                    ymin = ymax - square_a\n                else:\n                    print('-1')\n                    return\n            else:\n                print('-1')\n                return\n        elif countx_ymax < count_ymax and countx_ymin == count_ymin:\n            ymin = ymax - square_a\n            if ymin < 0:\n                print('-1')\n                return\n        elif countx_ymax == count_ymax and countx_ymin < count_ymin:\n            ymax = ymin + square_a\n            if ymax >= y:\n                print('-1')\n                return\n        elif countx_ymax == count_ymax and countx_ymin == count_ymin:\n            if square_a < y:\n                if ymin + square_a < y:\n                    ymax = ymin + square_a\n                elif ymax - square_a >= 0:\n                    ymin = ymax -square_a\n                else:\n                    ymin = 0\n                    ymax = ymin + square_a\n            else:\n                print('-1')\n                return\n    elif ymax - ymin == xmax - xmin:\n        square_a = xmax - xmin\n    #print('ymax:%d,ymin:%d,xmax:%d,xmin:%d,a:%d'%(ymax,ymin,xmax,xmin,square_a))\n    scr = draw_square(scr, square_a, ymin, xmin)\n    for i in range(y):\n        print(scr[i])\ndef __starting_point():\n    main()\n    #while True:\n    #    main()\n\n__starting_point()"]