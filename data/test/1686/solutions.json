["import math\nimport re\nfrom fractions import Fraction\nfrom collections import Counter\n\nclass Task:\n    ips = []\n    k = 0\n    answer = ''\n    \n    def __init__(self):\n        n, self.k = [int(x) for x in input().split()]\n        self.ips = ['' for _ in range(n)]\n        for i in range(len(self.ips)):\n            self.ips[i] = input()\n\n    def solve(self):\n        ips, k = self.ips, self.k\n        ipAsNumbers = []\n        for currentIp in ips:\n            number = 0\n            parts = currentIp.split('.')\n            for i in range(0, len(parts)):\n                number += int(parts[i]) * 2**(32 - (i + 1) * 8)\n            ipAsNumbers += [number]\n\n        mask = 0\n        for i in range(31, -1, -1):\n            mask += 2**i\n            netAddresses = set()\n            for ip in ipAsNumbers:\n                netAddresses.add(mask & ip)\n            if len(netAddresses) == k:\n                mask = bin(mask)[2:]\n                self.answer = '.'.join([str(int(mask[i : i + 8], 2)) \\\n                    for i in range(0, len(mask), 8)])\n                return\n        self.answer = '-1'\n\n\n    def printAnswer(self):\n        print(self.answer)\n        #for line in self.answer:\n        #    print(line)\n\ntask = Task()\ntask.solve()\ntask.printAnswer()\n", "def f(t):\n    a, b, c, d = map(int, t.split('.'))\n    return d + (c << 8) + (b << 16) + (a << 24)\n\ndef g(x):\n    p = [0] * 4\n    for i in range(4):\n        p[3 - i] = str(x % 256)\n        x //= 256\n    return '.'.join(p)\n\nn, k = map(int, input().split())\nt = [f(input()) for i in range(n)]\np = [0] * n\nx = 1 << 31\nfor i in range(32):\n    for j, y in enumerate(t):\n        if y & x: p[j] += x\n    if len(set(p)) >= k: break\n    x >>= 1\nprint(-1 if len(set(p)) != k else g((1 << 32) - x))", "def parse(ip_address):\n    a, b, c, d = [int(x) for x in ip_address.split('.')]\n    return (a << 24) | (b << 16) | (c << 8) | d\n\nn, k = [int(x) for x in input().split()]\nips = [parse(input()) for i in range(n)]\nall_ones = (1 << 32) - 1\neight_ones = (1 << 8) - 1\nfor n_zeros in range(31, 0, -1):\n    mask = all_ones << n_zeros\n    if len(set(mask & ip for ip in ips)) == k:\n        address = [(mask >> 24) & eight_ones, (mask >> 16) & eight_ones, (mask >> 8) & eight_ones, mask & eight_ones]\n        print('.'.join(str(x) for x in address))\n        return\n\nprint(-1)"]