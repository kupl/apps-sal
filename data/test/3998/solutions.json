["n = int(input())\nL = list(map(int, input().split()))\nans = 0\nM = []\nwhile max(L) != min(L):\n    ans += 1\n    k = max(L)\n    if L.count(k) == 3:\n        s = ''\n        for i in range(len(L)):\n            if L[i] == k:\n                s += '1'\n                L[i] -= 1\n            else:\n                s += '0'\n        M.append(s)    \n    else:      \n        max_1 = 0\n        max_2 = 1\n        if L[max_1] < L[max_2]:\n            max_1, max_2 = max_2, max_1\n        for i in range(2, n):\n            if L[i] > L[max_1]:\n                max_2, max_1 = max_1, i\n            elif L[i] > L[max_2]:\n                max_2 = i\n        s = ''\n        for i in range(n):\n            if i == max_1 or i == max_2:\n                s += '1'\n            else:\n                s += '0'\n        M.append(s)\n        L[max_1] -= 1\n        if L[max_1] < 0:\n            L[max_1] = 0\n        L[max_2] -= 1\n        if L[max_2] < 0:\n            L[max_2] = 0\nprint(max(L))\nprint(ans)\nfor i in M:\n    print(i)", "import collections\n\n\ndef temp(list1):\n    list2 = list(list1)\n    list3=[]\n    cnt = collections.Counter()\n    for i in range(len(list1)):\n        cnt[list1[i]]+=1\n    tep = max(list1)\n    if cnt[tep] != 1:\n        if cnt[tep] <= 5:\n            for i in range(5):\n                if tep in list2:\n                    list3.append(list2.index(tep))\n                    list2[list2.index(tep)] = -1\n                else:\n                    break\n        else:\n            for i in range(4):\n                if tep in list2:\n                    list3.append(list2.index(tep))\n                    list2[list2.index(tep)] = -1\n                else:\n                    break\n    else:\n        list3.append(list1.index(tep))\n        list2.remove(tep)\n        list3.append(list1.index(max(list2)))\n    return list3\n\n\n\n\nn = int(input())\nintgrade = list(map(int, input().split()))\nbitlists=[]\n\nif len(set(intgrade)) == 1:\n    print(intgrade[0])\n    print(0)\n\nelse:\n    while len(set(intgrade)) != 1:\n        listA = temp(intgrade)\n        bitlist=''\n\n        for i in range(len(listA)):\n            if intgrade[listA[i]] > 0:\n                intgrade[listA[i]]-=1\n\n        for i in range(n):\n            if i in listA:\n                bitlist+=\"1\"\n            else:\n                bitlist+=\"0\"\n        bitlists.append(bitlist)\n    print(intgrade[0])\n    print(len(bitlists))\n    for i in range(len(bitlists)):\n        print(bitlists[i])\n", "n = int(input())\nd = list(map(int, input().split()))\nanswer = []\nwhile not all(i == d[0] for i in d):\n\ti = max(range(n), key = lambda x: d[x])\n\tmax1 = d[i]\n\td[i] = -1\n\tj = max(range(n), key = lambda x: d[x])\n\tmax2 = d[j]\n\td[j] = -1\n\tz = max(range(n), key = lambda x: d[x])\n\tif max1 == max2 and max1 == d[z]:\n\t\tfor t in range(n):\n\t\t\tif t != i and t != j and t != z:\n\t\t\t\tbreak\n\t\tif all(d[v] == d[t] for v in range(n) if v != i and v != j and v != z) and d[t] < max1:\n\t\t\td[i] = max1 -1\n\t\t\td[j] = max2 - 1\n\t\t\td[z] -= 1\n\t\t\tanswer.append(''.join('1' if k == i or k == j or k ==z else '0' for k in range(n)))\n\t\t\tcontinue\n\t#print(i, j, max1, max2)\n\td[i] = max(max1 - 1, 0)\n\td[j] = max(max2 - 1, 0)\n\tanswer.append(''.join('1' if k == i or k == j else '0' for k in range(n)))\nprint(d[0])\nprint(len(answer))\nfor i in answer:\n\tprint(i)", "n = (int(input()))\nR = list(map(int,input().split()))\nTime = 0;\ncheck = False\nOutput = []\nwhile (check == False):\n    pos_max = [];     pos_sec = [];    Max_sec = -1;\n    Max_num = 0;    Max = -1;\n    Min = 999999999;     Time += 1;\n    string = ''\n    for i in range(len(R)-1,-1,-1):\n        if (R[i] < Min):\n            Min = R[i]\n        if (R[i] > Max):\n            Max_sec = Max;      Max = R[i];\n            pos_sec = pos_max;   pos_max = [];\n            pos_max.append(i);\n            Max_num = 1\n        elif (R[i] == Max):\n            Max_num += 1;\n            pos_max.append(i)\n        elif (R[i] > Max_sec):\n            Max_sec = R[i]\n            pos_sec = []\n            pos_sec.append(i)\n#    print(Max,' ',Max_sec,' ',pos_max,' ',pos_sec,' ',R)\n    if (Max == Min):\n        check = True\n        break\n    if (Max_num > 1):\n        if (Max_num % 2 == 1):\n            j = 0;  some = []\n            for k in range(n-1,-1,-1):\n                if (pos_max[j] == k):\n                    if (R[k] != 0): R[k] -= 1;\n                    some.append(k)\n                    j += 1;\n                    if (j > 2):  j = 0;\n            j = len(some)-1\n            for k in range(n):\n                if (some[j] == k):\n                    string += '1'\n                    j -= 1\n                    if (j < 0): j = 0;\n                else : string += '0';\n        else :\n            j = 0;      some = [];\n            for k in range(n-1,-1,-1):\n                if (pos_max[j] == k):\n                    if (R[k] != 0): R[k] -= 1;\n                    some.append(k);\n                  #  print('1', end='')\n                    j += 1;\n                    if (j > 1):  j = 1;\n            j = len(some)-1\n            for k in range(n):\n                if (some[j] == k):\n                    string += '1'\n                    j -= 1\n                    if (j < 0): j = 0;\n                else : string += '0';\n    else :\n        for k in range(n):\n         ##   print('k is ',k)\n            if (pos_max[0] == k):\n                if (R[k] != 0): R[k] -= 1;\n                string += '1'\n                #print('1', end='')\n                continue\n            if (pos_sec[0] == k):\n                if (R[k] != 0): R[k] -= 1;\n                string += '1'\n                #print('1', end='')\n                continue\n            string += '0'\n            #print('0', end='');\n     #   print('\\n')\n    Output.append(string)\n\nprint(Max)\nprint(Time-1)\nfor i in range(len(Output)):\n    print(Output[i])", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Nov  2 13:36:10 2017\n\n@author: savit\n\"\"\"\ndef sum1(b):\n    sum1=0\n    for i in range(len(b)):\n        sum1+=b[i][0]\n\n\n    return sum1\n\n\n\nn=int(input())\na=list(map(int,input().split()))\nif(n!=2):\n    do=True\n    b=[]\n    min2=min(a)\n    for i in range(n):\n        a[i]-=min2\n        b.append([a[i],i])\n    prin=[]\n    b.sort()\n    prinx=-1\n    if(sum(a)==1 and min2!=0):\n        min2-=1\n        for i in range(n):\n            b[i][0]+=1\n    if(sum1(b)%2):\n        if(b[-3][0]==0):\n            if(min2==0):\n                \n                do=False\n            else:\n                min2-=1\n                for i in range(n):\n                    b[i][0]+=1\n                        \n        if(do):   \n            b[-1][0]-=1\n            b[-2][0]-=1\n            b[-3][0]-=1\n            prinx=(b[-1][1],b[-2][1],b[-3][1])\n            b.sort()\n    while(b[-1][0]!=0 and do):\n        \n        if(b[-2][0]==0):\n            if(min2==0):\n                do=False\n            else:\n                min2-=1\n                for i in range(n):\n                    b[i][0]+=1\n                if(sum1(b)%2):\n                    if(prinx==-1):\n                        b[-1][0]-=1\n                        b[-2][0]-=1\n                        b[-3][0]-=1\n                        prinx=(b[-1][1],b[-2][1],b[-3][1])\n                        b.sort()                        \n                    else:\n                        prin.append([prinx[0],prinx[1]])\n                        prin.append([prinx[2],b[-1][1]])\n                        b[-1][0]-=1\n                        prinx=-1\n            \n                \n                \n            \n            \n        b[-1][0]-=1\n        b[-2][0]-=1\n        prin.append([b[-1][1],b[-2][1]])\n        b.sort()\n    if(not do):\n        while(b[-1][0]>0):\n            b[-1][0]-=1\n            prin.append([b[-1][1],b[-2][1]])\n        \n    \n    \n    \n    x=[0 for i in range(n)]\n    print(min2)\n    \n    if(prinx!=-1):\n        print(len(prin)+1)\n        x[prinx[0]]=1\n        x[prinx[1]]=1\n        x[prinx[2]]=1\n        print(*x,sep='')\n        x[prinx[0]]=0\n        x[prinx[1]]=0\n        x[prinx[2]]=0\n    else:\n        print(len(prin))\n\n    \n    \n    \n    for i in prin:\n        x[i[0]]=1\n        x[i[1]]=1\n        print(*x,sep='')\n        x[i[0]]=0\n        x[i[1]]=0\n        \nelse:\n    if(a[1]==a[0]):\n        print(a[0])\n        print(0)\n    else:\n        print(0)\n        print(max(a))\n        for i in range(max(a)):\n            print('11')\n            \n    \n", "n = int(input())\n\nL = list(map(int, input().split()))\n\nans = 0\n\nM = []\n\nwhile max(L) != min(L):\n\n    ans += 1\n\n    k = max(L)\n\n    if L.count(k) == 3:\n\n        s = ''\n\n        for i in range(len(L)):\n\n            if L[i] == k:\n\n                s += '1'\n\n                L[i] -= 1\n\n            else:\n\n                s += '0'\n\n        M.append(s)    \n\n    else:      \n\n        max_1 = 0\n\n        max_2 = 1\n\n        if L[max_1] < L[max_2]:\n\n            max_1, max_2 = max_2, max_1\n\n        for i in range(2, n):\n\n            if L[i] > L[max_1]:\n\n                max_2, max_1 = max_1, i\n\n            elif L[i] > L[max_2]:\n\n                max_2 = i\n\n        s = ''\n\n        for i in range(n):\n\n            if i == max_1 or i == max_2:\n\n                s += '1'\n\n            else:\n\n                s += '0'\n\n        M.append(s)\n\n        L[max_1] -= 1\n\n        if L[max_1] < 0:\n\n            L[max_1] = 0\n\n        L[max_2] -= 1\n\n        if L[max_2] < 0:\n\n            L[max_2] = 0\n\nprint(max(L))\n\nprint(ans)\n\nfor i in M:\n\n    print(i)\n\n\n\n# Made By Mostafa_Khaled\n", "# coding=utf-8\n\"\"\"Codeforces 730a solution.\"\"\"\n\nfrom operator import itemgetter\n\n\nclass CodeforcesTask730ASolution:\n    def __init__(self):\n        self.result = ''\n        self.players = 0\n        self.rating = []\n\n    def read_input(self):\n        self.players = int(input())\n        self.rating = [int(x) for x in input().split(\" \")]\n\n    def process_task(self):\n\n        if self.players > 2:\n            moves = []\n            players = [[x + 1, self.rating[x]] for x in range(self.players)]\n            players.sort(key=itemgetter(1), reverse=True)\n            while players[1][1] != players[-1][1]:\n                players[0][1] = max(0, players[0][1] - 1)\n                players[1][1] = max(0, players[1][1] - 1)\n                moves.append([players[0][0], players[1][0]])\n                players.sort(key=itemgetter(1), reverse=True)\n            if players[0][1] != players[-1][1]:\n                added = False\n                for m in moves:\n                    if not players[0][0] in m:\n                        m.append(players[0][0])\n                        players[0][1] = max(0, players[0][1] - 1)\n                        added = True\n                        break\n                if not added:\n                    #print(\"edge case 1\")\n                    #print(players)\n                    moves.append([players[-1][0], players[0][0]])\n                    players[0][1] = max(0, players[0][1] - 1)\n                    players[-1][1] = max(0, players[-1][1] - 1)\n                    players.sort(key=itemgetter(1), reverse=True)\n                    while players[0][1] != players[-1][1] and players[1][1] != players[-1][1]:\n                        #print(players)\n                        players[0][1] = max(0, players[0][1] - 1)\n                        players[1][1] = max(0, players[1][1] - 1)\n                        moves.append([players[0][0], players[1][0]])\n                        players.sort(key=itemgetter(1), reverse=True)\n                    if players[0][1] != players[-1][1]:\n                        added = False\n                        for m in moves:\n                            if not players[0][0] in m:\n                                m.append(players[0][0])\n                                players[0][1] = max(0, players[0][1] - 1)\n                                added = True\n                                break\n                        if not added:\n                            #print(players)\n                            #print(\"edge case 2\")\n                            moves.append([players[-1][0], players[0][0]])\n                            players[0][1] = max(0, players[0][1] - 1)\n                            players[-1][1] = max(0, players[-1][1] - 1)\n                            players.sort(key=itemgetter(1), reverse=True)\n                            while players[0][1] != players[-1][1] and players[1][1] != players[-1][1]:\n                                # print(players)\n                                players[0][1] = max(0, players[0][1] - 1)\n                                players[1][1] = max(0, players[1][1] - 1)\n                                moves.append([players[0][0], players[1][0]])\n                                players.sort(key=itemgetter(1), reverse=True)\n                            if players[0][1] != players[-1][1]:\n                                added = False\n                                for m in moves:\n                                    if not players[0][0] in m:\n                                        m.append(players[0][0])\n                                        players[0][1] = max(0, players[0][1] - 1)\n                                        added = True\n                                        break\n                                if not added:\n                                    # print(players)\n                                    #print(\"edge case 3\")\n                                    moves.append([players[-1][0], players[0][0]])\n                                    players[0][1] = max(0, players[0][1] - 1)\n                                    players[-1][1] = max(0, players[-1][1] - 1)\n                                    players.sort(key=itemgetter(1), reverse=True)\n                                    while players[0][1] != players[-1][1] and players[1][1] != players[-1][1]:\n                                        # print(players)\n                                        players[0][1] = max(0, players[0][1] - 1)\n                                        players[1][1] = max(0, players[1][1] - 1)\n                                        moves.append([players[0][0], players[1][0]])\n                                        players.sort(key=itemgetter(1), reverse=True)\n                                    if players[0][1] != players[-1][1]:\n                                        added = False\n                                        for m in moves:\n                                            if not players[0][0] in m:\n                                                m.append(players[0][0])\n                                                players[0][1] = max(0, players[0][1] - 1)\n                                                added = True\n                                                break\n                                        if not added:\n                                            # print(players)\n                                            #print(\"edge case 4\")\n                                            moves.append([players[-1][0], players[0][0]])\n                                            players[0][1] = max(0, players[0][1] - 1)\n                                            players[-1][1] = max(0, players[-1][1] - 1)\n                                            players.sort(key=itemgetter(1), reverse=True)\n                                            while players[0][1] != players[-1][1] and players[1][1] != players[-1][1]:\n                                                # print(players)\n                                                players[0][1] = max(0, players[0][1] - 1)\n                                                players[1][1] = max(0, players[1][1] - 1)\n                                                moves.append([players[0][0], players[1][0]])\n                                                players.sort(key=itemgetter(1), reverse=True)\n                                            if players[0][1] != players[-1][1]:\n                                                added = False\n                                                for m in moves:\n                                                    if not players[0][0] in m:\n                                                        m.append(players[0][0])\n                                                        players[0][1] = max(0, players[0][1] - 1)\n                                                        added = True\n                                                        break\n                                                if not added:\n                                                    # print(players)\n                                                    print(\"edge case 5\")\n\n\n            players.sort(key=itemgetter(1), reverse=True)\n            print(players[-1][1])\n            print(len(moves))\n            for m in moves:\n                print(\"\".join([\"1\" if x + 1 in m else \"0\" for x in range(self.players)]))\n        else:\n            if self.rating[0] == self.rating[1]:\n                print(self.rating[0])\n                print(\"0\")\n            else:\n                print(\"0\")\n                print(max(self.rating))\n                for x in range(max(self.rating)):\n                    print(\"11\")\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask730ASolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()", "# https://codeforces.com/problemset/problem/730/A\n# \n \nimport heapq\n\ndef solve_for_0(d, max_, ans):\n    pos_M = list(d[max_])[0]\n    pos_m = list(d[0])[0]\n    \n    for _ in range(max_):\n        ans.append([pos_M, pos_m])   \n\ndef solve_one_seg(d, max_, min_, ans):\n    seg = list(d[max_])\n    n = len(seg)\n    \n    if n <= 5:\n        for _ in range(max_ - min_):\n            ans.append(seg)\n    else:\n        ori = []\n        for i in range(0, n, 2):\n            if i == n-1:\n                ori[-1].append(seg[i])\n            else:\n                ori.append([seg[i], seg[i+1]])\n        \n        for _ in range(max_ - min_):\n            ans.extend(ori)    \n    \n    \ndef push(d, x, val, i):\n    if x not in d:\n        d[x] = set()\n        \n    if val == 1:    \n        d[x].add(i)\n    else:\n        d[x].remove(i)\n        \n    if len(d[x]) == 0:\n        del d[x]\n    \ndef check(d):\n    if len(d) != 2:\n        return 'none', None\n    \n    max_ = max(list(d.keys()))\n    min_ = min(list(d.keys()))\n    \n    if len(d[max_]) >= 2:\n        return 'seg', [max_, min_]\n    \n    elif min_ == 0:\n        return '0', [max_]\n    \n    return 'none', None\n\ndef pr(ans, n):\n    print(len(ans))\n    arr = [[0]*n for _ in range(len(ans))]\n    \n    for i, val in enumerate(ans):\n        for ind in val:\n            arr[i][ind] = 1\n    S = ''        \n    for s in arr:\n        S += ''.join([str(x) for x in s]) \n        S += '\\n'\n    print(S)    \n    \n#5\n#4 5 1 7 4\nn   = int(input())#len(arr) \narr = list(map(int, input().split()))#[1,3,1,3,2,3,2,3,2,3,2,3,2,3]\nans = []\nQ   = []\nd   = {}\n\nfor i, x in enumerate(arr):\n    push(d, x, 1, i)\n    heapq.heappush(Q, (-x, x, i))\n    \nif len(d) == 1:\n    print(list(d.keys())[0])\n    print(0)\nelse:\n    while True: \n        type_, arg = check(d)  \n        if  type_ == 'none':\n            val1, num1, i1 = heapq.heappop(Q)\n            val2, num2, i2 = heapq.heappop(Q)\n            push(d, num1, -1, i1)\n            push(d, num2, -1, i2)\n            ans.append([i1, i2])\n    \n            new1 = max(0, num1-1)\n            new2 = max(0, num2-1)\n            heapq.heappush(Q, (-new1, new1, i1))\n            heapq.heappush(Q, (-new2, new2, i2))\n            push(d, new1, 1, i1)\n            push(d, new2, 1, i2)\n        \n        elif type_ == 'seg':\n            max_, min_ = arg[0], arg[1]\n            solve_one_seg(d, max_, min_, ans)\n            \n            print(min_)\n            pr(ans, n)\n            break\n        else:\n            max_ = arg[0]\n            solve_for_0(d, max_, ans)\n            \n            print(0)\n            pr(ans, n)\n            break"]