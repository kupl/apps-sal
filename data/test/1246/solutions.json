["from heapq import *\nn=int(input())\nq,ans,k=[],[],0\nfor i in range(n):\n    ss=input()\n    if ss!=\"removeMin\": \n        s,mm=ss.split(); m=int(mm)\n        if s=='insert':\n            k+=1\n            heappush(q,m)\n        else:\n            while k==0 or q[0]!=m:\n                if k==0:\n                    heappush(q,m)\n                    ans+=['insert '+mm]\n                    k+=1\n                elif q[0]<m: \n                    k-=1\n                    t=heappop(q)\n                    ans+=['removeMin']\n                else: \n                    k+=1\n                    heappush(q,m)\n                    ans+=['insert '+mm]\n    else: \n        if k==0:\n            ans+=['insert 1']\n        else: \n            heappop(q)\n            k-=1\n    ans+=[ss]\nprint(len(ans))\nprint('\\n'.join(ans))", "from heapq import *\n\nn = int(input())\nheap = []\nops = []\nfor i in range(n):\n    ln = input().rstrip()\n    #print(\">\", ln, \"<=>\", heap)\n    if ln[0] == 'i': # insert X\n        X = int(ln.split()[1])\n        heappush(heap, X)\n        ops.append(ln)\n        continue\n    if ln[0] == 'g': # getMin X\n        X = int(ln.split()[1])\n        while heap and heap[0] < X:\n            heappop(heap)\n            ops.append(\"removeMin\")\n        if not heap or heap[0] > X:\n            ops.append(\"insert \" + str(X))\n            heappush(heap, X)\n        #else: heappop(heap)\n        ops.append(ln)\n        continue\n\n    # removeMin\n    if not heap:\n        ops.append(\"insert 1\")\n    else: heappop(heap)\n    ops.append(ln)\nprint(len(ops))\nprint(\"\\n\".join(ops))\n", "import heapq\n\nn = int(input())\nm = n\noperations = []\nheap = []\nfor i in range(n):\n    s = input() \n    a = s.split()\n    if a[0] == 'insert':\n        heapq.heappush(heap, int(a[1])) \n    elif a[0] == 'removeMin':\n        if heap:\n            heapq.heappop(heap)\n        else:\n            m += 1\n            operations.append('insert 1')\n    elif a[0] == 'getMin':\n        b = int(a[1])\n        while heap:\n            if heap[0] < b:\n                operations.append('removeMin')\n                m += 1\n                heapq.heappop(heap)\n            else:\n                break\n        else:\n            operations.append('insert {}'.format(b))\n            m += 1\n            heapq.heappush(heap, b)\n        if heap[0] > b:\n            operations.append('insert {}'.format(b))\n            m += 1\n            heapq.heappush(heap, b)\n    operations.append(s)\n\nprint(m)\nprint('\\n'.join(operations))\n", "from heapq import *\n\nn = int(input())\nheap = []\nops = []\nfor i in range(n):\n    ln = input().rstrip()\n    #print(\">\", ln, \"<=>\", heap)\n    if ln[0] == 'i': # insert X\n        X = int(ln.split()[1])\n        heappush(heap, X)\n        ops.append(ln)\n        continue\n    if ln[0] == 'g': # getMin X\n        X = int(ln.split()[1])\n        while heap and heap[0] < X:\n            heappop(heap)\n            ops.append(\"removeMin\")\n        if not heap or heap[0] > X:\n            ops.append(\"insert \" + str(X))\n            heappush(heap, X)\n        ops.append(ln)\n        continue\n\n    # removeMin\n    if not heap:\n        ops.append(\"insert 1\")\n    else: heappop(heap)\n    ops.append(ln)\nprint(len(ops))\nprint(\"\\n\".join(ops))\n", "import sys\nfrom collections import defaultdict\nfrom heapq import heappop,heappush\n\ndef main():\n    n = int(sys.stdin.readline())\n    h = []\n    d = sys.stdin.readlines()\n    res = []\n    for i in range(n):\n        x = d[i].split()\n        if x[0]==\"insert\":\n            t = int(x[1])\n            heappush(h,t)\n        elif x[0] == \"getMin\":\n            t = int(x[1])\n            while len(h)>0 and h[0]<t:\n                res.append(\"removeMin\")\n                heappop(h)\n                \n            if len(h)==0 or h[0]>t:\n                res.append(\"insert \"+x[1])\n                heappush(h,t)\n            \n        elif x[0] == \"removeMin\":\n            if len(h)==0:\n                res.append(\"insert 0\")  \n            else:\n                heappop(h)              \n                \n        res.append(d[i].rstrip())\n\n    print(len(res))\n    print(\"\\n\".join(res))\n\nmain()\n", "import heapq\n\nn = int(input())\nm = n\noperations = []\nheap = []\nfor i in range(n):\n    s = input() \n    a = s.split()\n    if a[0] == 'insert':\n        heapq.heappush(heap, int(a[1])) \n    elif a[0] == 'removeMin':\n        if heap:\n            heapq.heappop(heap)\n        else:\n            m += 1\n            operations.append('insert 1')\n    elif a[0] == 'getMin':\n        b = int(a[1])\n        while heap:\n            if heap[0] < b:\n                operations.append('removeMin')\n                m += 1\n                heapq.heappop(heap)\n            else:\n                break\n        else:\n            operations.append('insert {}'.format(b))\n            m += 1\n            heapq.heappush(heap, b)\n        if heap[0] > b:\n            operations.append('insert {}'.format(b))\n            m += 1\n            heapq.heappush(heap, b)\n    operations.append(s)\n\nprint(m)\nprint('\\n'.join(operations))", "import heapq\n\na = []\nh = []\nheapq.heapify(h)\n\nfor _ in range(int(input())):\n    l = input()\n\n    if l.startswith(\"insert\"):\n        heapq.heappush(h, int(l.split()[1]))\n\n    elif l.startswith(\"getMin\"):\n        m = int(l.split()[1])\n        while len(h) > 0 and h[0] != m:\n            if h[0] < m:\n                heapq.heappop(h)\n                a.append(\"removeMin\")\n            else:\n                heapq.heappush(h, m)\n                a.append(\"insert \" + str(m))\n        if len(h) == 0:\n            heapq.heappush(h, m)\n            a.append(\"insert \" + str(m))\n\n    elif l.startswith(\"removeMin\"):\n        if len(h) == 0:\n            a.append(\"insert 1\")\n        else:\n            heapq.heappop(h)\n\n    a.append(l)\n\nprint(len(a))\nprint(\"\\n\".join(a))", "import sys\nfrom heapq import *\n\nanswer = []\nn = int(input())\n\ndef main():\n    h = []\n\n    all_input = sys.stdin.readlines()\n\n    for q in all_input:\n        raw = q.split()\n\n        if raw[0] == \"insert\":\n            v = int(raw[1])\n            heappush(h, v)\n        elif raw[0] == \"getMin\":\n            v = int(raw[1])\n\n            while h and h[0] < v:\n                answer.append(\"removeMin\\n\")\n                heappop(h)\n\n            if not h or h[0] > v:\n                answer.append(\"insert \" + raw[1] + '\\n')\n                heappush(h, v)\n        elif h:\n            heappop(h)\n        else:\n            answer.append(\"insert 0\\n\")\n\n        answer.append(q)\n\ndef print_answer():\n    print(len(answer))\n    print(\"\".join(answer))\n\nmain()\nprint_answer()", "from heapq import heappush , heappop\n\ndef main():\n\n    heap = []\n    ans = []\n    n,hsize = int(input()),0\n\n    for i in range(n):\n        ss = input()\n        if ss != \"removeMin\":\n            a,bb = ss.split(); b = int(bb)\n\n            if a == \"insert\":\n                hsize += 1\n                heappush(heap,b)\n            else:\n                while hsize > 0 and heap[0] < b:\n                    ans += ['removeMin']\n                    hsize -= 1\n                    heappop(heap)\n                if hsize == 0 or heap[0] != b:\n                    ans += ['insert ' + bb]\n                    heappush(heap,b)\n                    hsize += 1\n\n        else:\n            if hsize == 0:\n                ans += ['insert 0']\n            else:\n                heappop(heap)\n                hsize -= 1\n        ans += [ss]\n    print(len(ans))\n    print(\"\\n\".join(ans))\n\n\n\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from heapq import heappush , heappop\n\ndef main():\n\n    heap = []\n    ans = []\n    n,hsize = int(input()),0\n\n    for i in range(n):\n        ss = input()\n        if ss != \"removeMin\":\n            a,bb = ss.split(); b = int(bb)\n\n            if a == \"insert\":\n                hsize += 1\n                heappush(heap,b)\n            else:\n                while hsize > 0 and heap[0] < b:\n                    ans.append('removeMin')\n                    hsize -= 1\n                    heappop(heap)\n                if hsize == 0 or heap[0] != b:\n                    ans.append('insert ' + bb)\n                    heappush(heap,b)\n                    hsize += 1\n\n        else:\n            if hsize == 0:\n                ans.append('insert 0')\n            else:\n                heappop(heap)\n                hsize -= 1\n        ans.append(ss)\n    print(len(ans))\n    print(\"\\n\".join(ans))\n\n\n\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from heapq import heappush , heappop\n\ndef main():\n\n    heap = []\n    ans = []\n    n,hsize = int(input()),0\n\n    for i in range(n):\n        ss = input()\n        if ss != \"removeMin\":\n            a,bb = ss.split(); b = int(bb)\n\n            if a == \"insert\":\n                hsize += 1\n                heappush(heap,b)\n            else:\n                while hsize > 0 and heap[0] < b:\n                    ans += ['removeMin']\n                    hsize -= 1\n                    heappop(heap)\n                if hsize == 0 or heap[0] != b:\n                    ans += ['insert ' + bb]\n                    heappush(heap,b)\n                    hsize += 1\n\n        else:\n            if hsize == 0:\n                ans += ['insert 0']\n            else:\n                heappop(heap)\n                hsize -= 1\n        ans += [ss]\n    print(len(ans))\n    print(\"\\n\".join(ans))\n\nmain()", "from heapq import heappush , heappop\nimport sys\ninp = sys.stdin.readline\n\ndef main():\n\n    heap = []\n    ans = []\n    n = int(inp())\n\n    for i in range(n):\n        ss = inp()\n        if ss != \"removeMin\\n\":\n            a,bb = ss.split(); b = int(bb)\n\n            if a == \"insert\":\n                heappush(heap,b)\n            else:\n                while heap and heap[0] < b:\n                    ans += ['removeMin\\n']\n                    heappop(heap)\n                if not heap or heap[0] != b:\n                    ans += ['insert %s\\n'%bb]\n                    heappush(heap,b)\n\n        else:\n            if not heap:\n                ans += ['insert 0\\n']\n            else:\n                heappop(heap)\n\n        ans += [ss]\n\n    print(len(ans))\n    print(\"\".join(ans))\n\nmain()", "import sys\n\n#@profile\ndef insert(heap, val):\n    idx = len(heap)\n    heap.append(val)\n\n    while idx > 0:\n        p = (idx - 1) >> 1\n\n        if heap[p] <= heap[idx]: break\n\n        heap[p], heap[idx] = heap[idx], heap[p]\n\n        idx = p\n\n#@profile\ndef removeMin(heap):\n    last = heap.pop()\n\n    L = len(heap)\n\n    if L == 0: return\n    heap[0] = last\n    idx = 0\n    while True:\n        l = (idx << 1) + 1\n        if l >= L: return\n\n        r = l + 1\n        best = r if r < L and heap[r] < heap[l] else l\n\n        if heap[best] >= heap[idx]:\n            return\n\n        heap[best], heap[idx] = heap[idx], heap[best]\n\n        idx = best\n\nanswer = []\nn = int(input())\n\ndef main():\n    h = []\n\n    all_input = sys.stdin.readlines()\n\n    for q in all_input:\n        raw = q.split()\n\n        if raw[0] == \"insert\":\n            v = int(raw[1])\n            insert(h, v)\n        elif raw[0] == \"getMin\":\n            v = int(raw[1])\n\n            while h and h[0] < v:\n                answer.append(\"removeMin\\n\")\n                removeMin(h)\n\n            if not h or h[0] > v:\n                answer.append(\"insert \" + raw[1] + '\\n')\n                insert(h, v)\n        elif h:\n            removeMin(h)\n        else:\n            answer.append(\"insert 0\\n\")\n\n        answer.append(q)\n\ndef print_answer():\n    print(len(answer))\n    print(\"\".join(answer))\n\nmain()\nprint_answer()", "import sys\nfrom heapq import *\n\nanswer = []\nn = int(input())\n\ndef main():\n    h = []\n\n    all_input = sys.stdin.readlines()\n\n    for q in all_input:\n        raw = q.split()\n\n        if raw[0] == \"insert\":\n            v = int(raw[1])\n            heappush(h, v)\n        elif raw[0] == \"getMin\":\n            v = int(raw[1])\n\n            while h and h[0] < v:\n                answer.append(\"removeMin\\n\")\n                heappop(h)\n\n            if not h or h[0] > v:\n                answer.append(\"insert \" + raw[1] + '\\n')\n                heappush(h, v)\n        elif h:\n            heappop(h)\n        else:\n            answer.append(\"insert 0\\n\")\n\n        answer.append(q)\n\ndef print_answer():\n    print(len(answer))\n    print(\"\".join(answer))\n\nmain()\nprint_answer()", "from heapq import heappush, heappop\n\nh = []\nans = []\n\ndef main():\n\tnonlocal h\n\n\tn = int(input())\n\tfor i in range(n):\n\t\ts = input()\n\t\tif s[0] == 'i':\n\t\t\tdata = int(s.split()[1])\n\t\t\theappush(h, data)\n\t\t\tans.append(s)\n\t\telif s[0] == 'g':\n\t\t\tdata = int(s.split()[1]) \n\t\t\twhile h and h[0] < data:\n\t\t\t\theappop(h)\n\t\t\t\tans.append('removeMin')\n\t\t\tif (not h) or (h[0] > data):\n\t\t\t\theappush(h, data)\n\t\t\t\tans.append('insert ' + str(data))\n\t\t\tans.append(s)\n\t\telse:\n\t\t\tif not h:\n\t\t\t\tans.append('insert 0')\n\t\t\telse:\n\t\t\t\theappop(h)\n\t\t\tans.append('removeMin')\n\n\tprint(len(ans))\n\tprint(\"\\n\".join(ans))\n\n\ndef __starting_point():\n    main()\n    \n\n__starting_point()", "from heapq import heappush , heappop\nimport sys\ninp = sys.stdin.readline\n\ndef main():\n\n    heap = []\n    ans = []\n    n = int(input())\n\n    all = sys.stdin.readlines()\n    for ss in all:\n        if ss != \"removeMin\\n\":\n            a,bb = ss.split(); b = int(bb)\n\n            if a == \"insert\":\n                heappush(heap,b)\n            else:\n                while heap and heap[0] < b:\n                    ans += ['removeMin\\n']\n                    heappop(heap)\n                if not heap or heap[0] != b:\n                    ans += ['insert %s\\n'%bb]\n                    heappush(heap,b)\n\n        else:\n            if not heap:\n                ans += ['insert 0\\n']\n            else:\n                heappop(heap)\n\n        ans += [ss]\n\n    print(len(ans))\n    print(\"\".join(ans))\n\ndef __starting_point():\n    main()\n__starting_point()", "import heapq\nn = int(input()); m = n; ans, hp_dgt = [], [] \nfor i in range(n):\n    s=input(); a=s.split()\n    if a[0] == 'insert':\n        heapq.heappush(hp_dgt, int(a[1])) \n    elif a[0] == 'removeMin':\n        if hp_dgt:\n            heapq.heappop(hp_dgt)\n        else:\n            m += 1; ans.append('insert 1')\n    elif a[0] == 'getMin':\n        x = int(a[1])\n        while hp_dgt:\n            if hp_dgt[0] < x:\n                m += 1; ans.append('removeMin'); heapq.heappop(hp_dgt)\n            else:\n                break\n        else:\n            m += 1; ans.append('insert '+str(x)); heapq.heappush(hp_dgt, x)\n        if hp_dgt[0] > x:\n            m += 1; ans.append('insert '+str(x)); heapq.heappush(hp_dgt, x)\n    ans.append(s)\nprint(m)\nprint('\\n'.join(ans))\n", "import heapq\nn = int(input()); m = n; ans, hp_dgt = [], [] \nfor i in range(n):\n    s=input(); a=s.split()\n    if a[0] == 'insert':\n        heapq.heappush(hp_dgt, int(a[1])) \n    else:\n        if a[0] == 'removeMin':\n            if hp_dgt:\n                heapq.heappop(hp_dgt)\n            else:\n                m += 1; ans.append('insert 1')\n        else:\n            x = int(a[1])\n            while hp_dgt:\n                if hp_dgt[0] < x:\n                    m += 1; ans.append('removeMin'); heapq.heappop(hp_dgt)\n                else:\n                    break\n            else:\n                m += 1; ans.append('insert '+str(x)); heapq.heappush(hp_dgt, x)\n            if hp_dgt[0] > x:\n                m += 1; ans.append('insert '+str(x)); heapq.heappush(hp_dgt, x)\n    ans.append(s)\nprint(m)\nprint('\\n'.join(ans))\n", "import sys\nfrom heapq import *\n\nanswer = []\nn = int(input())\n\ndef main():\n    h = []\n\n    all_input = sys.stdin.readlines()\n\n    for q in all_input:\n        raw = q.split()\n\n        if raw[0] == \"insert\":\n            v = int(raw[1])\n            heappush(h, v)\n        elif raw[0] == \"getMin\":\n            v = int(raw[1])\n\n            while h and h[0] < v:\n                answer.append(\"removeMin\\n\")\n                heappop(h)\n\n            if not h or h[0] > v:\n                answer.append(\"insert \" + raw[1] + '\\n')\n                heappush(h, v)\n        elif h:\n            heappop(h)\n        else:\n            answer.append(\"insert 0\\n\")\n\n        answer.append(q)\n\ndef print_answer():\n    print(len(answer))\n    print(\"\".join(answer))\n\nmain()\nprint_answer()", "\nfrom heapq import heappush, heappop\n\nh = []\nans = []\n\ndef main():\n\tnonlocal h\n\n\tn = int(input())\n\tfor i in range(n):\n\t\ts = input()\n\t\tif s[0] == 'i':\n\t\t\tdata = int(s.split()[1])\n\t\t\theappush(h, data)\n\t\t\tans.append(s)\n\t\telif s[0] == 'g':\n\t\t\tdata = int(s.split()[1]) \n\t\t\twhile h and h[0] < data:\n\t\t\t\theappop(h)\n\t\t\t\tans.append('removeMin')\n\t\t\tif (not h) or (h[0] > data):\n\t\t\t\theappush(h, data)\n\t\t\t\tans.append('insert ' + str(data))\n\t\t\tans.append(s)\n\t\telse:\n\t\t\tif not h:\n\t\t\t\tans.append('insert 0')\n\t\t\telse:\n\t\t\t\theappop(h)\n\t\t\tans.append('removeMin')\n\n\tprint(len(ans))\n\tprint(\"\\n\".join(ans))\n\n\ndef __starting_point():\n    main()\n    \n\n\n__starting_point()", "def main():\n    from heapq import heappop, heappush\n    from sys import stdin\n    h, res = [], []\n    for _ in range(int(input())):\n        s = input()\n        if s == (\"removeMin\"):\n            if h:\n                heappop(h)\n            else:\n                res.append(\"insert 1\")\n        else:\n            c, x = s.split()\n            x = int(x)\n            if c == \"insert\":\n                heappush(h, x)\n            else:\n                while h and h[0] < x:\n                    heappop(h)\n                    res.append(\"removeMin\")\n                if not h or h[0] > x:\n                    heappush(h, x)\n                    res.append(\"insert %d\" % x)\n        res.append(s)\n    print(len(res))\n    print('\\n'.join(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    from heapq import heappop, heappush\n    from sys import stdin\n    _, *l = stdin.read().splitlines()\n    h, res = [], []\n    for s in l:\n        if s == (\"removeMin\"):\n            if h:\n                heappop(h)\n            else:\n                res.append(\"insert 1\")\n        else:\n            c, x = s.split()\n            x = int(x)\n            if c == \"insert\":\n                heappush(h, x)\n            else:\n                while h and h[0] < x:\n                    heappop(h)\n                    res.append(\"removeMin\")\n                if not h or h[0] > x:\n                    heappush(h, x)\n                    res.append(\"insert %d\" % x)\n        res.append(s)\n    print(len(res))\n    print('\\n'.join(res))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from heapq import heappop, heappush\nfrom sys import stdin\nn, *l = stdin.read().splitlines()\nheap, res = [], []\nfor s in l:\n    array = s.split()\n    if array[0] == 'insert':\n        heappush(heap, int(array[1]))\n    elif array[0] == 'getMin':\n        key = int(array[1])\n        while heap and heap[0] < key:\n            heappop(heap)\n            res.append('removeMin')\n        if not heap or heap[0] != key:\n            heappush(heap, key)\n            res.append('insert ' + array[1])\n    else:\n        if heap:\n            heappop(heap)\n        else:\n            res.append('insert 0')\n    res.append(s)\nprint(len(res))\nprint('\\n'.join(res))\n", "from heapq import heappush, heappop\nfrom sys import stdin\nheap = []\nL = []\n\nn, *l = stdin.read().splitlines()\nfor string in l:\n    array = string.split()\n    if array[0] == 'insert':\n        heappush(heap, int(array[1]))\n    elif array[0] == 'getMin':\n        key = int(array[1])\n        while heap and heap[0] < key:\n            heappop(heap)\n            L.append('removeMin')\n        if not heap or heap[0] > key:\n            heappush(heap, key)\n            L.append('insert ' + str(key))\n    else:\n        if heap:\n            heappop(heap)\n        else:\n            L.append('insert 0')\n    L.append(string)\n\nprint(len(L))\nprint('\\n'.join(L))\n"]