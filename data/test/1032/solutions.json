["import sys\ninput = sys.stdin.readline\nn,p=map(int,input().split())\na=list(map(int,input().split()))\na.sort()\nmn=0\nmx=2000000000000000\nfor i in range(n):\n    d=a[i]-i\n    mn=max(d,mn)\n    if i>=p-1:\n        d2=a[i]-i+p-1\n        mx=min(mx,d2)\nprint(max(mx-mn,0))\nfor i in range(mn,mx):\n    print(i,end=\" \")", "def smallest_winner(matrix):\n    starting_x = 1\n    x = 1\n    for m in matrix:\n        if m > x:\n            starting_x += m - x\n            x += m - x\n        x += 1\n    return starting_x\n\n\ndef biggest_winner(matrix, p):\n    maxi = matrix[-1]\n    for i in range(len(matrix)):\n        if i + p - 1 >= len(matrix):\n            break\n        temp = matrix[i + p - 1] - i\n        maxi = min(maxi, temp)\n    return maxi\n\n\ndef check_multiple(matrix):\n    count = 0\n    maxi = 0\n    for i in range(1, len(matrix)):\n        if matrix[i] == matrix[i - 1]:\n            count += 1\n        else:\n            count = 1\n        maxi = max(maxi, count)\n    return maxi\n\n\ndef solve(n, p, matrix):\n    matrix = sorted(matrix)\n    min_x = smallest_winner(matrix)\n    max_x = biggest_winner(matrix, p) - 1\n    return [i for i in range(min_x, max_x + 1)]\n\n\n# T = int(input())\n# for _ in range(T):\nn, p = list(map(int, input().split()))\nmatrix = list(map(int, input().split()))\nres = solve(n, p, matrix)\nprint(len(res))\nprint(\" \".join(map(str, res)))\n", "import sys\ninput=lambda: sys.stdin.readline().rstrip()\nn,p=map(int,input().split())\nA=sorted([int(i) for i in input().split()])\nA=[A[i]-int(i) for i in range(n)]\nAA=[A[-1]]\nfor i in range(n-1):\n  AA.append(min(AA[-1],A[n-2-i]))\nAA=AA[::-1]\nAns=[]\nfor i in range(max(A),max(A)+p+1):\n  if i-AA[p-1]+1<p:\n    Ans.append(i)\nprint(len(Ans))\nprint(*Ans)", "n,p = map(int,input().split())\na = list(map(int,input().split()))\na.sort()\nans = 0\nansls = []\nmx = max(a)\nmn = max([a[i]-i for i in range(n)])\nansmx = -1\nfor j in range(p-1,n)[::-1]:\n  ansmx = max(ansmx,n-max(mn,a[j])+mn-(n-j-1))\nwhile ansmx < p:\n  ans += 1\n  ansls.append(mn)\n  mn += 1\n  ansmx += 1\nprint(ans)\nprint(*ansls)", "def ican(a, x):\n    k = x\n    wr = 0\n    for i in range(len(a)):\n        if a[i] <= k:\n            wr += 1\n        else:\n            wr -= a[i] - k\n            k = a[i]\n            if wr < 0:\n                return False\n            wr += 1\n    return True\ndef bnpleft(a):\n    r = max(a)\n    l = -1\n    while r - l > 1:\n        h = (r+l)//2\n        if ican(a, h): r = h\n        else: l = h\n    return l\ndef fa(a, x, p):\n    k = x\n    wr = 0\n    for i in range(len(a)):\n        if a[i] <= k:\n            wr += 1\n        else:\n            nk = wr // p * p\n            wr -= a[i] - k\n            if wr < nk:\n                return False\n            k = a[i]\n            if wr < 0:\n                return False\n            wr += 1\n    if wr >= p:\n        return False\n    else:\n        return True\n\ndef bnpr(a,p,left):\n    l = left\n    r = max(a)\n    while r - l > 1:\n        h = (r+l)//2\n        if fa(a, h, p): l = h\n        else: r = h\n    return l\ndef solve():\n    n, p = map(int, input().split())\n    lst = list(map(int,input().split()))\n    lst.sort()\n    ll = bnpleft(lst)\n    rr = bnpr(lst,p,ll)\n    print(rr-ll)\n    for i in range(ll + 1, rr + 1):\n        print(i, end=\" \")\nfor i in range(1):\n    solve()", "mod = 1000000007\neps = 10**-9\n\n\ndef main():\n    import sys\n    from collections import Counter\n    input = sys.stdin.readline\n    N, p = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    A.sort()\n\n    \"\"\"\n    C = Counter(A)\n    for a in A:\n        if C[a] >= p:\n            print(0)\n            print(\"\\n\")\n            return\n    \"\"\"\n    x0 = -1\n    for i in range(N):\n        x0 = max(x0, A[i] - i)\n    x1 = A[p-1]\n    \"\"\"\n    if x0 >= x1:\n        print(0)\n        print(\"\\n\")\n        return\n    \"\"\"\n\n    dic = {}\n    i = 0\n    for x in range(x0, x0 + 2*10**5+1):\n        while True:\n            if i == N-1:\n                break\n            if A[i+1] <= x:\n                i += 1\n            else:\n                break\n        dic[x] = i+1\n\n    ok = x0-1\n    ng = x1\n    mid = (ok+ng)//2\n    while ng - ok > 1:\n        x = mid\n        flg = 1\n        for i in range(N):\n            if (dic[x+i] - i) % p == 0:\n                flg = 0\n                break\n        if flg:\n            ok = mid\n        else:\n            ng = mid\n        mid = (ok+ng)//2\n    print(ok - x0 + 1)\n    X = list(range(x0, ok+1))\n    print(*X)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, p = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na.sort()\nleft = 0\nright = 10**9+1\nwhile right - left > 1:\n\n    mid = left + (right - left)//2\n    x = mid\n\n    flag = 1\n    for i in range(n):\n        if a[i] <= x:\n            x += 1\n        else:\n            flag = 0\n            break\n\n    if flag:\n        right = mid\n    else:\n        left = mid\n\nansleft = right\n\nleft = 0\nright = 10**9+1\n\nwhile right - left > 1:\n    mid = left + (right - left)//2\n    x = mid\n\n    flag = 1\n    r = 0\n    for i in range(n):\n        while r < n:\n            if a[r] <= x:\n                r += 1\n            else:\n                break\n\n        if r - i >= p:\n            flag = 0\n            break\n        x += 1\n\n    if flag:\n        left = mid\n    else:\n        right = mid\n\nansright = left\n\nans = [i for i in range(ansleft, ansright+1)]\nprint(len(ans))\nprint(*ans)\n", "import sys\nlines = sys.stdin.readlines()\n# (N, K) = map(int, lines[0].strip().split(\" \"))\n(n, p) = map(int, lines[0].strip().split(\" \"))\narr = list(map(int, lines[1].strip().split(\" \")))\narr.sort()\ncounter = {}\nfor a in arr:\n    if a not in counter:counter[a] = 0\n    counter[a] += 1\nlower = max(arr[-1] - n + 1, 1)\na, b, c, d = lower-1, -1, -1, arr[-1] + 1\n\ndef check(val):\n    pt = 0\n    cnt = 0\n    while pt < n and arr[pt] <= val:\n        cnt += 1; pt += 1\n    if cnt >= p: return 1\n    while cnt > 0:\n        val += 1\n        cnt -= 1\n        if val in counter: cnt += counter[val]\n        if cnt >= p: return 1\n        if val >= arr[-1]: break\n    if ( cnt <= 0 or val < arr[-1]): return -1\n    else: return 0\n\nexist = False\nwhile(a<d-1):\n    mid = (a+d)//2\n    res = check(mid)\n    if res == 1: d = mid\n    elif res == -1: a = mid\n    else:\n        exist = True; break\n\nif exist:\n    b = mid; c = mid\n    while(a < b-1):\n        mid = (a+b)//2\n        res = check(mid)\n        if res == 0: b = mid\n        else: a = mid\n    while(c < d-1):\n        mid = (c+d)//2\n        if check(mid) == 1: d = mid\n        else: c = mid\n\nif exist:\n    print(c-b+1)\n    print(' '.join(map(str, range(b, c+1))))\nelse: \n    print(0); print()", "#!usr/bin/env python3\nimport sys\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\n\ndef solve():\n    n,p = LI()\n    a = LI()\n    a.sort()\n    ap = [i for i in a[p-1:]]\n    ap = [ap[i]-i for i in range(len(ap))]\n    M = min(ap)\n    b = [a[i]-i for i in range(n)]\n    m = max(b)\n    ans = list(range(m,M))\n    print(len(ans))\n    print(*ans)\n    return\n\n#Solve\ndef __starting_point():\n    solve()\n\n__starting_point()", "def places(num,v):\n\tif num>=v+n:\n\t\treturn 0\n\tif num<v:\n\t\treturn n\n\treturn (n-(num-v))\n\n\ndef check(num):\n\tfor i in range(n-1,-1,-1):\n\t\tcount = max(0, places(b[i],num) - ((n-1)-i))\n\t\t# print (num,count)\n\t\tif count==0:\n\t\t\treturn True\n\t\tif count%p==0:\n\t\t\treturn False\n\treturn False\n\ndef check2(num):\n\tfor i in range(n-1,-1,-1):\n\t\tcount = max(0, places(b[i],num) - ((n-1)-i))\n\t\t# print (num,count)\n\t\tif count%p==0:\n\t\t\treturn True\n\treturn False\n\nn,p = map(int,input().split())\na = list(map(int,input().split()))\nb = sorted(a)\nminn = b[0]\nmaxx = b[-1]\nlow = 0\nhigh = maxx-1\nwhile low<high:\n\tmid = (low+high)//2\n\tif check(mid):\n\t\tlow = mid+1\n\telse:\n\t\thigh = mid-1\nif check(low):\n\tstart = low+1\nelse:\n\tstart = low\n\nlow = start\nhigh = maxx-1\nwhile low<high:\n\tmid = (low+high)//2\n\tif not check2(mid):\n\t\tlow = mid + 1\n\telse:\n\t\thigh = mid - 1\nif check2(low):\n\tend = low - 1\nelse:\n\tend = low\n\nans = []\nfor i in range(start,end+1):\n\tans.append(i)\nprint (len(ans))\nprint (*ans)", "n, p = list(map(int, input().split(' ')))\na = list(map(int, input().split(' ')))\na.sort()\nresult = []\n_min = 0\nfor i in range(len(a) - 1, -1, -1):\n    if _min <= a[i] - i:\n        _min = a[i] - i\n\n_max = a[-1]\nfor i in range(len(a) - 1, p-2, -1):\n    if _max >= p - 2 - i + a[i]:\n        _max = p - 2 - i + a[i]\n\nresult = max(_max - _min + 1, 0)\nprint(result)\nif result > 0:\n    for i in range(_min, _max + 1):\n        print(i, end=' ')\n\"\"\" print('max ', _max)\nprint('min ', _min) \"\"\"\n", "import copy\ncon = 10 ** 9 + 7; INF = float(\"inf\")\n\ndef getlist():\n\treturn list(map(int, input().split()))\n\ndef Binary_Search(N, P, A, dif):\n\t#\u521d\u671f\u5316\n\tleft = 0\n\tright = N - 1\n\tansleft = dif\n\tansright = -INF\n\t\n\t#\u4e8c\u5206\u63a2\u7d22\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tjud = \"Yes\"\n\n\t\tB = copy.deepcopy(A)\n\t\tB.append(INF)\n\t\tfor t in range(N):\n\t\t\tB[t] -= mid\n\n\t\t# \u5c3a\u53d6\u308a\n\t\tarray = [None] * N\n\t\ti = 0; j = 0\n\t\twhile True:\n\t\t\tif B[j] <= i:\n\t\t\t\tj += 1\n\t\t\telse:\n\t\t\t\tif (j - i) % P == 0:\n\t\t\t\t\tjud = \"No\"\n\t\t\t\t\tbreak\n\t\t\t\tarray[i] = j - i\n\t\t\t\ti += 1\n\t\t\tif i >= N:\n\t\t\t\tbreak\n\n\t\tif jud == \"Yes\":\n\t\t\tansright = max(ansright, dif + mid)\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\n\treturn ansleft, ansright\n\n#\u51e6\u7406\u5185\u5bb9\ndef main():\n\tN, P = getlist()\n\tA = getlist()\n\tA = sorted(A)\n\tdif = 0\n\t# \u914d\u5217\u306e\u521d\u671f\u5316\n\tfor i in range(N):\n\t\tdif = max(dif, A[i] - i)\n\tfor i in range(N):\n\t\tA[i] -= dif\n\n\tL, R = Binary_Search(N, P, A, dif)\n\tif R == -INF:\n\t\tprint(0)\n\t\tprint()\n\telse:\n\t\tXlis = [i for i in range(L, R + 1)]\n\t\tprint(len(Xlis))\n\t\tprint(*Xlis)\n\ndef __starting_point():\n\tmain()\n__starting_point()", "import math\nimport sys\ninput = sys.stdin.readline\nn, p = list(map(int, input().split()))\na = sorted([int(_) for _ in input().split()])\ninf = 10**18\nbad = dict()\nlow, high = 1, inf\nopt = [0] * p\nfor i in range(n):\n    j = (i + 1) % p\n    if a[i] >= j:\n        var = (a[i] - j) % p\n        opt[var] = max(opt[var], a[i] - j) \n    if j == 0:\n        high = min(high, a[i])\n    low = max(low, a[i] - i)\nfor i in range(p):\n    cur = opt[i]\n    while cur >= low:\n        bad[cur] = True\n        cur -= p\nresult = []\nfor i in range(low, high):\n    if bad.get(i, False) == False:\n        result.append(i)\nprint(len(result))\nprint(' '.join(map(str, result)))\n\n", "import bisect\nimport sys\ninput=sys.stdin.readline\n\nn,p=map(int,input().split())\narr1=list(map(int,input().split()))\narr1=sorted(arr1)\nmins=0\nfor i in range(n):\n    mins=max(mins,arr1[i]-i)\nmaxs=arr1[p-1]\narr2=[0]*n\nfor i in range(n):\n    arr2[i]=(n-arr1[n-i-1]-i)%p\narr2=arr2[::-1]\ncan=set(range(p))\npos=bisect.bisect_right(arr1,maxs-1)\nfor i in range(pos,n):\n    can.discard((p-arr2[i])%p)\nans=[]\nprev=pos\nfor x in range(maxs-1,mins-1,-1):\n    pos=bisect.bisect_right(arr1,x)\n    if pos==prev:\n        if x%p in can:\n            ans.append(x)\n    else:\n        for i in range(pos,prev):\n            can.discard((p-arr2[i])%p)\n        if x%p in can:\n            ans.append(x)\n    prev=pos\nans=ans[::-1]\nprint(len(ans))\nprint(*ans)", "n,p=list(map(int,input().split()))\na=list(map(int,input().split()))\na.sort()\nm=max(a[i]-i for i in range(n))\nM=a[p-1]-1\nban=[0 for i in range(p)]\nans=[]\n\nquery=[(a[i]-1-i,1,-100) for i in range(n)]\nfor x in range(m,M+1):\n    query.append((x,0,-100))\nfor i in range(n):\n    query.append((a[i],-1,i))\n\nquery.sort()\n#print(query)\nfor val,q,id in query:\n    if q==-1:\n        r=(val-id-1)%p\n        ban[r]-=1\n    elif q==0:\n        if ban[val%p]==0:\n            ans.append(val)\n    else:\n        ban[val%p]+=1\n\nans.sort()\nprint(len(ans))\nprint(*ans)\n", "n, p = map(int, input().split())\na = list(map(int, input().split()))\n\n\na = sorted(a)\nfor i in range(n):\n    a[i] -= i\nl = max(a)\n\nfor i in range(n):\n    a[i] += p - 1\nr = min(a[p - 1:])\n\nprint(max(r - l, 0))\nprint(*[val for val in range(l, r)])", "n, p = map(int,input().split())\nl = list(map(int,input().split()))\nl.sort()\n\nsmalls = [l[i] - i for i in range(n)]\ntols = [l[i]-i+p-1 for i in range(p-1,n)]\nsmol = max(smalls)\ntol = min(tols)\n\nout = list(range(smol,tol))\nprint(len(out))\nprint(' '.join(map(str,out)))", "def smallest_winner(matrix,starting_x,x):\n    for m in matrix:\n        if m > x:starting_x += m - x;x += m - x\n        x += 1\n    return starting_x\ndef biggest_winner(matrix, p,maxi):\n    for i in range(len(matrix)):\n        if i + p - 1 >= len(matrix):break\n        maxi = min(maxi, matrix[i + p - 1] - i)\n    return maxi\nn, p = map(int, input().split());matrix = sorted(list(map(int, input().split())));res = [i for i in range(smallest_winner(matrix,1,1), biggest_winner(matrix, p,matrix[-1]) )];print(len(res));print(\" \".join(map(str, res)))", "# f = open('test.py')\n# def input():\n# \treturn f.readline().replace('\\n','')\n\n# import heapq\n# import bisect\n# from collections import deque\n# from collections import defaultdict\ndef read_list():\n\treturn list(map(int,input().strip().split(' ')))\ndef print_list(l):\n\tprint(' '.join(map(str,l)))\n\n# N = int(input())\n# for _ in range(N):\nn,p= read_list()\na = read_list()\na.sort()\nmi = max(a[i]-i for i in range(n))\nres = []\nll = []\n\nx = mi\nnow = x \ni = 0\ndic = [[-1]]\nfor step in range(n):\n\twhile i<n and now>=a[i]:\n\t\ti+=1\n\tnow+=1\n\ttmp = (i - step)%p\n\ttmp = (p - tmp)%p\n\tif step>=tmp:\n\t\tdic.append([tmp,step])\ndic.pop(0)\n\nfor i in range(len(dic)-1,0,-1):\n\tif dic[i][0]<=dic[i-1][1]-1:\n\t\tdic[i-1][1] = dic[i][1]\n\t\tdic[i-1][0] = min(dic[i][0],dic[i-1][0])\n\t\tdic.pop(i)\n# print(dic)\n\nlas = 0\nfor d in dic:\n\tflag = True\n\tfor i in range(las,d[0]):\n\t\tif i>=p-1:\n\t\t\tflag = False\n\t\t\tbreak\n\t\tres.append(mi+i)\n\tlas = d[1]+1\n\tif not flag:\n\t\tbreak\nif dic:\n\tfor i in range(dic[-1][-1]+1,p-1):\n\t\tres.append(mi+i)\n\nprint(len(res))\nprint_list(res)\n\n\n"]