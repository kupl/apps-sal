["from collections import defaultdict\nn = int(input())\nA = [int(x) for x in input().split()]\nD = defaultdict(int)\nfor a in A: D[a] += 1\nS = set(D.keys())\nans = len(S) - 1\nwhile S:\n    for k in D:\n        D[k] -= 1\n        if D[k] <= 0 and k in S:\n            S.remove(k)\n    ans += len(S) - 1\nprint(ans + 1)\n", "def seq(a, new):\n    nonlocal count\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            new.append(a[i])\n    if len(a) > 1:\n        count += len(a) - len(new) - 1\n    if len(new) == 0:\n        return\n    else:\n        a = new[:]\n        new = []\n        seq(a, new)\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nnew = []\ncount = 0\nseq(a, new)\nprint(count)\n\n    \n    \n", "#! /usr/bin/env python3\n\ndef main():\n    input()\n    nums = map(int, input().split())\n\n    nums = sorted(nums)\n    length = len(nums)\n    count = 0\n    last_num = nums[0]\n    for i in range(length):\n        if nums[i] is None:\n            continue\n        last_num = nums[i]\n        for j in range(i + 1, length):\n            if nums[j] is None:\n                continue\n            if nums[j] > last_num:\n                count += 1\n                last_num = nums[j]\n                nums[j] = None\n\n    print(count)\n\n\nmain()", "#!/usr/bin/env python3\n\nN = int(input())\nA = list(map(int, input().split()))\n\nA = sorted(A)\nA = [(a, True) for a in A]\n\nhappiness = 0\nuses_left = N\n\nwhile True:\n\tlast_a = None\n\tfor i in range(len(A)):\n\t\ta, usable = A[i]\n\t\tif not usable: continue\n\t\tif last_a is None:\n\t\t\tlast_a = a\n\t\t\tA[i] = (a, False)\n\t\t\tuses_left -= 1\n\t\t\tcontinue\n\t\tif last_a < a:\n\t\t\thappiness += 1\n\t\t\tA[i] = (a, False)\n\t\t\tuses_left -= 1\n\t\t\tlast_a = a\n\t\t\tcontinue\n\tif uses_left == 0: break\n\nprint(happiness)", "from collections import *\nans=0\nc=Counter()\nn=int(input())\nfor x in input().split(): c[int(x)]+=1\nwhile len(c)>1:\n    ans+=len(c)-1\n    for x in set(c): \n        c[x]-=1\n        if c[x]==0: del c[x]\nprint(ans)\n", "n = int(input())\nA = list(map(int, input().split()))\nA.sort()\nfor i in range(n):\n    A[i] = [A[i], 0]\nanswer = 0\nper2 = -float('infinity')\nper = 0\nfor i in range(n-1):\n    if A[i][1] == 0:\n        A[i][1] = 1\n        per = A[i][0]\n        for j in range(i+1, n):\n            if A[j][1] == 0:\n                if A[j][0] > per:\n                    per = A[j][0]\n                    A[j][1] = 1\n                    answer+=1\nprint(answer)\n                    \n    \n", "n = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 1001\nfor ai in a:\n    c[ai] += 1\nans = 0\nfor t in range(max(c)):\n    was = False\n    for i in range(1, 1001):\n        if c[i] > 0:\n            if was:\n                ans += 1\n            else:\n                was = True\n            c[i] -= 1\nprint(ans)\n            \n", "read = lambda: list(map(int, input().split()))\nn = int(input())\na = list(read())\nwasr = [False] * n\nwasl = [False] * n\ncnt = 0\ninf = 10 ** 9\nfor i in range(n):\n    if wasl[i]: continue\n    wasl[i] = True\n    cur = a[i]\n    Min = inf\n    ind = -1\n    for j in range(n):\n        if wasr[j]: continue\n        if cur < a[j] < Min:\n            Min = a[j]\n            ind = j\n    if ind != -1:\n        wasr[ind] = True\n        cnt += 1\n        #print(cur, a[ind])\nprint(cnt)\n        \n", "n = int(input())\ncount = [0] * 1001\nc = [0] * 1001\npictures = list(map(int, input().split()))\nfor i in pictures:\n    count[i] += 1\nres = 0\nwhile count != c:\n    res -= 1\n    for i in range(len(count)):\n        if count[i] > 0:\n            count[i] -= 1\n            res += 1\nprint(res)", "n = int(input())\na = [int(x) for x in input().split()]\nb = {}\nfor x in a:\n    if x in b:\n        b[x] += 1\n    else:\n        b[x] = 1\nsumma = 0\nwhile len(b) > 0:\n    count = 0\n    c = b.copy()\n    for x in b:\n        c[x] -= 1\n        if c[x] == 0:\n            c.pop(x)\n        count += 1\n    b = c.copy()\n    summa += (count - 1)\nprint(summa)\n", "from collections import Counter\n\n\ndef read_input():\n    N = int(input())\n    A = [int(i) for i in input().strip().split()]\n    return A\n\n\ndef solution(A):\n    c = Counter(A)\n    ans = 0\n    stop = False\n    while not stop:\n        stop = True\n        count = 0\n        for key in c:\n            if c[key]:\n                count += 1\n                stop = False\n                c[key] -= 1\n        if count:\n            ans += (count - 1)\n    return ans\n\n\ndef __starting_point():\n    A = read_input()\n    print(solution(A))\n\n__starting_point()", "import functools\nimport math\nimport sys\n\nn = int(input())\na = list(map(int, input().split()))\nans = 0\na.sort()\nwhile len(a) > 1:\n    t = []\n    for i in range(1, len(a)):\n        if a[i] > a[i - 1]:\n            ans += 1\n        else:\n            t.append(a[i])\n            #temp += 1\n    a = t\nprint(ans)", "from collections import Counter\ninput()\na = map(int, input().split())\nb = Counter(a)\nb = list(b.values())\nprint(sum(b) - max(b))", "n = int(input())\npictures = list(map(int, input().split()))\nd = dict()\nfor i in pictures:\n    d[i] = 0\nfor i in pictures:\n    d[i] += 1\na = sorted(d.values())\ni = 1\nr = 0\nl = len(a) - 1\ns = 0\nwhile i < len(a):\n    c = i\n    while (i < len(a)) and (a[i] == a[i - 1]):\n        i += 1\n    s += l * (a[i - 1] - r)\n    l -= (i - c + 1)\n    r = a[i - 1]\n    i += 1\nprint(s)", "n=int(input().strip())\nd={}\nans=0\nfor i in input().strip().split():\n\tif i in d:\n\t\td[i]=d[i]+1\n\telse:\n\t\td[i]=1\nwhile d:\n\tl=list(d.keys())\n\tfor i in l:\n\t\tif d[i]==1:\n\t\t\tdel d[i]\n\t\telse:\n\t\t\td[i]=d[i]-1\n\tans=ans+len(l)-1\nprint(ans)", "n=int(input())\nx=[int(z) for z in input().split()]\nx.sort()\ny=[]\ncur=x[0]\ncurs=1\ni=1\ny=[]\nwhile i<n:\n    r=x[i]\n    if r==cur:\n        curs+=1\n    else:\n        d=[cur]*curs\n        y+=[d]\n        curs=1\n        cur=r\n    i+=1\ny+=[[cur]*curs]\nres=0\n\nwhile len(y)>1:\n    u=[]\n    for h in y:\n        h.pop()\n        if h!=[]:\n            u+=[h]\n    res+=len(y)-1\n    y=u[:]\nprint(res)\n        \n", "def __starting_point():\n    n = int(input())\n    lst = list(map(int,input().split(' ')))\n    lst.sort()\n    h,i = 0,0\n    trav = []\n    while i<n-1:\n        if i in trav:\n            i+=1\n            continue\n        j = i+1\n        s = lst[i]\n        while j<n:\n            #print(j,trav)\n            if lst[j]>s  and j not in trav:\n                h+=1\n                s=lst[j]\n                trav.append(j)\n            j+=1\n        trav.append(i)\n        i+=1  \n    print(h)\n        \n        \n        \n            \n        \n\n\n    \n\n__starting_point()", "# ATTENTION:\n# never attend codeforces if u're drunk\nn = int(input())\na = sorted([int(x) for x in input().split()])\nc = dict()\nfor x in a: c[x] = c[x]+1 if x in c else 1\nuniq = sorted(c.keys())\nC=0\nwhile n>0:\n    t = 0\n    for u in uniq:\n        if c[u] == 0:\n            continue\n        c[u] -= 1\n        n -= 1\n        t += 1\n    C += t-1\nprint(C)\n", "size = 1001\nn = int(input())\na = [0] * size\nans = 0\nnum = map(int, input().split())\nfor b in num:\n    a[b] += 1\n    \nwhile a.count(0) != size:\n    cnt = 0\n    for i in range(size):\n        if a[i]:\n            cnt += 1\n            a[i] -= 1\n    ans += cnt - 1\n\nprint(ans)", "def __starting_point():\n    n = int(input())\n    lst = list(map(int,input().split(' ')))\n    lst.sort()\n    h,i = 0,0\n    trav = []       #tracks travelled\n    while i<n-1:\n        if i in trav:\n            i+=1\n            continue\n        j = i+1\n        s = lst[i]\n        while j<n:\n            #print(j,trav)\n            if lst[j]>s  and j not in trav:\n                h+=1\n                s=lst[j]\n                trav.append(j)\n            j+=1\n        trav.append(i)\n        i+=1  \n    print(h)\n'''\nB. Beautiful Paintings\ntime limit per test\n1 second\nmemory limit per test\n256 megabytes\ninput\nstandard input\noutput\nstandard output\n\nThere are n pictures delivered for the new exhibition. The i-th painting has beauty ai. We know that a visitor becomes happy every time he passes from a painting to a more beautiful one.\n\nWe are allowed to arranged pictures in any order. What is the maximum possible number of times the visitor may become happy while passing all pictures from first to last? In other words, we are allowed to rearrange elements of a in any order. What is the maximum possible number of indices i (1\u2009\u2264\u2009i\u2009\u2264\u2009n\u2009-\u20091), such that ai\u2009+\u20091\u2009>\u2009ai.\nInput\n\nThe first line of the input contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u20091000) \u2014 the number of painting.\n\nThe second line contains the sequence a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u20091000), where ai means the beauty of the i-th painting.\nOutput\n\nPrint one integer \u2014 the maximum possible number of neighbouring pairs, such that ai\u2009+\u20091\u2009>\u2009ai, after the optimal rearrangement.\nExamples\nInput\n\n5\n20 30 10 50 40\n\nOutput\n\n4\n\nInput\n\n4\n200 100 100 200\n\nOutput\n\n2\n\nNote\n\nIn the first sample, the optimal order is: 10,\u200920,\u200930,\u200940,\u200950.\n\nIn the second sample, the optimal order is: 100,\u2009200,\u2009100,\u2009200.\n'''\n        \n        \n        \n            \n        \n\n\n    \n\n__starting_point()", "n = int(input())\na = sorted(list(map(int,input().split())))\nvis = [False for i in range(n)]\nfor i in range(n) :\n    for j in range(i+1,n) :\n        if i==j : continue\n        if a[i]<a[j] and  not vis[j] :\n            vis[j] = True\n            break\n\nprint(sum([fact for fact in vis]))\n            \n", "n = int(input())\ncount = [0] * 1001\nc = [0] * 1001\npictures = list(map(int, input().split()))\nfor i in pictures:\n    count[i] += 1\nres = 0\nwhile count != c:\n    res -= 1\n    for i in range(len(count)):\n        if count[i] > 0:\n            count[i] -= 1\n            res += 1\nprint(res)\n", "n = int(input())\nx = [0 for i in range(0, 1010)]\nfor i in map(int, input().split()):\n    x[i] += 1\nd = 0\nfor i in range(0, 1010):\n    d = max(d, x[i])\nprint(n - d)", "from collections import Counter\nn = int(input())\nprint(n - Counter(list(map(int, input().split()))).most_common(1)[0][1])\n"]