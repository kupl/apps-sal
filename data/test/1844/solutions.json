["from sys import *\n\nmaxn = 3 * 10 ** 5 + 5\n\nfre = [0 for i in range(maxn)]\nisprime = [1 for i in range(maxn)]\nprime = []\ndivi = [0 for i in range(maxn)]\nfact = [1] * 10\n\ndef nCr(n, r):\n\tif n < r:\n\t\treturn 0\n\tif n == r:\n\t\treturn 1\n\tpro = 1\n\tfor i in range(r):\n\t\tpro *= (n - i)\n\tpro //= fact[r]\n\treturn pro\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))\nfor i in arr:\n\tif i is 1:\n\t\tprint(1)\n\t\treturn\n\tfre[i] += 1\n\ndivi[1] = n\nfor i in range(2, maxn):\n\tif isprime[i] is 1:\n\t\tprime.append(i)\n\tfor j in range(1, maxn):\n\t\tif i * j >= maxn:\n\t\t\tbreak\n\t\tisprime[i * j] = 0\n\t\tdivi[i] += fre[i * j]\n\nfor i in range(1, 10):\n\tfact[i] = fact[i - 1] * i\n\nmobius = [0 for i in range(maxn)]\n\nfor i in range(1, maxn):\n\tmobius[i] = 1\nfor p in prime:\n\tif p * p >= maxn:\n\t\tbreak\n\tx = p * p\n\tfor j in range(x, maxn, x):\n\t\tmobius[j] = 0\nfor p in prime:\n\tfor j in range(p, maxn, p):\n\t\tmobius[j] *= -1 \n\t\t\nfor r in range(2, 10):\n\tcoprime = 0\n\tfor d in range(1, maxn):\n\t\tncr = nCr(divi[d], r)\n\t\tcoprime += mobius[d] * ncr\n\tif coprime > 0:\n\t\tprint(r)\n\t\treturn\nprint(-1)", "from sys import *\n\nmaxn = 3 * 10 ** 5 + 5\nfre = [0] * maxn\ndivi = [0] * maxn\nisprime = [0] * maxn\nprime = []\n\ndef seive(n):\n\tfor i in range(n):\n\t\tisprime[i] = True\n\tfor i in range(2, n):\n\t\tif isprime[i] is True:\n\t\t\tprime.append(i)\n\t\tfor j in range(1, n):\n\t\t\tif i * j >= n:\n\t\t\t\tbreak\n\t\t\tisprime[i * j] = False\n\t\t\tdivi[i] += fre[i * j]\n\nmobius = [0] * maxn\n\ndef calc_mobius(n):\n\tfor i in range(1, n):\n\t\tmobius[i] = 1\n\tfor p in prime:\n\t\tif p * p >= n:\n\t\t\tbreak\n\t\tx = p * p\n\t\tfor j in range(x, n, x):\n\t\t\tmobius[j] = 0\n\tfor p in prime:\n\t\tfor j in range(p, n, p):\n\t\t\tmobius[j] *= -1\n\nfact = [1] * 10\n\ndef calc_fact():\n\tfact[0] = 1\n\tfor i in range(1, 10):\n\t\tfact[i] = i * fact[i - 1]\n\ndef nCr(n, r):\n\tif n < r:\n\t\treturn 0\n\tif n is r:\n\t\treturn 1\n\tpro = 1\n\tfor i in range(r):\n\t\tpro *= (n - i)\n\tpro //= fact[r]\n\treturn pro\n\ndef count_coprime(r):\n\tcoprime = 0\n\tfor d in range(1, maxn):\n\t\tncr = nCr(divi[d], r)\n\t\tcoprime += mobius[d] * ncr\n\treturn coprime;\n\t\n\ndef __starting_point():\n\tn = int(stdin.readline())\n\tarr = list(map(int, stdin.readline().split()))\n\tfor i in arr:\n\t\tif i is 1:\n\t\t\tprint(1)\n\t\t\treturn\n\t\tfre[i] += 1\n\tdivi[1] = n\n\tseive(maxn)\n\tcalc_mobius(maxn)\n\tcalc_fact()\n\tfor r in range(2, 10):\n\t\tcoprime = count_coprime(r)\n\t\tif coprime > 0:\n\t\t\tprint(r);return\n\tprint(-1)\n__starting_point()", "from sys import *\n\nmaxn = 3 * 10 ** 5 + 5\nfre = [0] * maxn\ndivi = [0] * maxn\nisprime = [0] * maxn\nprime = []\n\ndef seive(n):\n\tfor i in range(n):\n\t\tisprime[i] = True\n\tfor i in range(2, n):\n\t\tif isprime[i] is True:\n\t\t\tprime.append(i)\n\t\tfor j in range(1, n):\n\t\t\tif i * j >= n:\n\t\t\t\tbreak\n\t\t\tisprime[i * j] = False\n\t\t\tdivi[i] += fre[i * j]\n\nmobius = [0] * maxn\n\ndef calc_mobius(n):\n\tfor i in range(1, n):\n\t\tmobius[i] = 1\n\tfor p in prime:\n\t\tif p * p >= n:\n\t\t\tbreak\n\t\tx = p * p\n\t\tfor j in range(x, n, x):\n\t\t\tmobius[j] = 0\n\tfor p in prime:\n\t\tfor j in range(p, n, p):\n\t\t\tmobius[j] *= -1\n\nfact = [1] * 10\n\ndef calc_fact():\n\tfact[0] = 1\n\tfor i in range(1, 10):\n\t\tfact[i] = i * fact[i - 1]\n\ndef nCr(n, r):\n\tif n < r:\n\t\treturn 0\n\tif n is r:\n\t\treturn 1\n\tpro = 1\n\tfor i in range(r):\n\t\tpro *= (n - i)\n\tpro //= fact[r]\n\treturn pro\n\ndef count_coprime(r):\n\tcoprime = 0\n\tfor d in range(1, maxn):\n\t\tncr = nCr(divi[d], r)\n\t\tcoprime += mobius[d] * ncr\n\treturn coprime;\n\t\n\ndef __starting_point():\n\tn = int(stdin.readline())\n\tarr = list(map(int, stdin.readline().split()))\n\tfor i in arr:\n\t\tif i is 1:\n\t\t\tprint(1)\n\t\t\treturn\n\t\tfre[i] += 1\n\tdivi[1] = n\n\tseive(maxn)\n\tcalc_mobius(maxn)\n\tcalc_fact()\n\tfor r in range(2, 8):\n\t\tcoprime = count_coprime(r)\n\t\tif coprime > 0:\n\t\t\tprint(r);return\n\tprint(-1)\n__starting_point()"]