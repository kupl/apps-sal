["import sys\n\n\ndef count(n, k, field):\n    blank = 0\n    cnt = [[0] * (n - k + 1) for _ in range(n)]\n    for i, row in enumerate(field):\n        l = row.find('B')\n        r = row.rfind('B')\n        if l == r == -1:\n            blank += 1\n            continue\n        if r - l + 1 > k:\n            continue\n        kl = max(0, r - k + 1)\n        kr = min(l + 1, n - k + 1)\n        cnt[i][kl:kr] = [1] * (kr - kl)\n\n    acc = [[0] * (n - k + 1) for _ in range(n - k + 1)]\n    t_cnt = list(zip(*cnt))\n    for i, col in enumerate(t_cnt):\n        aci = acc[i]\n        tmp = sum(col[n - k:])\n        aci[n - k] = tmp\n        for j in range(n - k - 1, -1, -1):\n            tmp += col[j]\n            tmp -= col[j + k]\n            aci[j] = tmp\n\n    return blank, acc\n\n\nn, k = list(map(int, input().split()))\nfield = [line.strip() for line in sys.stdin]\nbh, hor = count(n, k, field)\nt_field = [''.join(col) for col in zip(*field)]\nbv, t_var = count(n, k, t_field)\nvar = list(zip(*t_var))\n\nprint(bh + bv + max(h + v for (rh, rv) in zip(hor, var) for (h, v) in zip(rh, rv)))\n", "n,k=map(int,input().split())\nboard=[input() for _ in range(n)]\ncolumns=[[0]*n for _ in range(n)]\nrows=[[0]*n for _ in range(n)]\nwhites=0\nfor i in range(n):\n  first=-1\n  last=0\n  flag=False\n  for pos in range(n):\n    if flag==False:\n      if board[i][pos]=='B':\n        first=pos\n        flag=True\n    else:\n      if board[i][pos]=='B':\n        last=pos\n  if first==-1:\n    whites+=1\n    continue\n  if last==0:\n    last=first\n  if last-first<k:\n    for j in range(max(0,last-k+1),first+1):\n      columns[i][j]+=1\nfor i in range(n):\n  first=-1\n  last=0\n  flag=False\n  for pos in range(n):\n    if flag==False:\n      if board[pos][i]=='B':\n        first=pos\n        flag=True\n    else:\n      if board[pos][i]=='B':\n        last=pos\n  if first==-1:\n    whites+=1\n    continue\n  if last==0:\n    last=first\n  if last-first<k:\n    for j in range(max(0,last-k+1),first+1):\n      rows[j][i]+=1\nccounts=[[0]*n for _ in range(n)]\nrcounts=[[0]*n for _ in range(n)]\nfor i in range(n):\n  tmp=0\n  for j in range(k):\n    tmp+=columns[j][i]\n  ccounts[0][i]=tmp\n  for j in range(1,n-k+1):\n    tmp+=columns[j+k-1][i]\n    tmp-=columns[j-1][i]\n    ccounts[j][i]=tmp\nfor i in range(n):\n  tmp=0\n  for j in range(k):\n    tmp+=rows[i][j]\n  rcounts[i][0]=tmp\n  for j in range(1,n-k+1):\n    tmp+=rows[i][j+k-1]\n    tmp-=rows[i][j-1] \n    rcounts[i][j]=tmp\nans=whites\nfor x in range(n):\n  for y in range(n):\n    tmp=whites\n    tmp+=ccounts[x][y]\n    tmp+=rcounts[x][y]\n    ans=max(ans,tmp)\nprint(ans)", "from sys import stdin, stdout\nfrom collections import *\nfrom array import *\ndef iarr(delim = \" \"): return map(int, input().split(delim))\ndef mat(n, m, v = None): return [[v]*m for _ in range(n)]\n\nn, k, *_ = iarr()\nlc = [-1]*n\nrc = [n]*n\ntr = [-1]*n\nbr = [n]*n\nb = [input() for _ in range(n)]\nans = mat(n, n, 0)\npre, post = 0, 0\n\nfor i, r in enumerate(b):\n    for j, c in enumerate(r):\n        if c == 'B':\n            rc[i], br[j] = j, i\n            if lc[i] == -1: lc[i] = j\n            if tr[j] == -1: tr[j] = i\n            \nfor i in range(n):\n    if tr[i] == -1 and br[i] == n: pre += 1\n    if lc[i] == -1 and rc[i] == n: pre += 1\n\nfor col in range(n-k+1):\n    tot = 0\n    for row in range(k):\n        if lc[row] >= col and rc[row] < col+k: tot += 1\n    ans[0][col] = tot\n    for row in range(1, n-k+1):\n        if lc[row-1] >= col and rc[row-1] < col+k: tot -= 1\n        if lc[row+k-1] >= col and rc[row+k-1] < col+k: tot += 1\n        ans[row][col] = tot\n\nfor row in range(n-k+1):\n    tot = 0\n    for col in range(k):\n        tot += 1 if tr[col] >= row and br[col] < row+k else 0\n    post = max(post, ans[row][0]+tot)\n    for col in range(1, n-k+1):\n        if tr[col-1] >= row and br[col-1] < row+k: tot -= 1\n        if tr[col+k-1] >= row and br[col+k-1] < row+k: tot += 1\n        post = max(post, ans[row][col]+tot)\n\nprint(pre+post)", "n, k, *_ = map(int, input().split(\" \"))\nlc = [-1]*n\nrc = [n]*n\ntr = [-1]*n\nbr = [n]*n\nb = [input() for _ in range(n)]\nans = [[0]*n for _ in range(n)]\npre, post = 0, 0\n\nfor i in range(n):\n    for j in range(n):\n        if b[i][j] == 'B':\n            rc[i], br[j] = j, i\n            if lc[i] == -1:\n                lc[i] = j\n            if tr[j] == -1:\n                tr[j] = i\nfor i in range(n):\n    if tr[i] == -1 and br[i] == n:\n        pre += 1\n    if lc[i] == -1 and rc[i] == n:\n        pre += 1\n\nfor col in range(n-k+1):\n    tot = 0\n    for row in range(k):\n        if lc[row] >= col and rc[row] < col+k:\n            tot += 1\n    ans[0][col] = tot\n    for row in range(1, n-k+1):\n        if lc[row-1] >= col and rc[row-1] < col+k:\n            tot -= 1\n        if lc[row+k-1] >= col and rc[row+k-1] < col+k:\n            tot += 1\n        ans[row][col] = tot\nfor row in range(n-k+1):\n    tot = 0\n    for col in range(k):\n        if tr[col] >= row and br[col] < row+k:\n            tot += 1 \n    post = max(post, ans[row][0]+tot)\n    for col in range(1, n-k+1):\n        if tr[col-1] >= row and br[col-1] < row+k:\n            tot -= 1\n        if tr[col+k-1] >= row and br[col+k-1] < row+k:\n            tot += 1\n        post = max(post, ans[row][col]+tot)\n\nprint(pre+post)", "import sys\ninput = sys.stdin.readline\n\nn,k=list(map(int,input().split()))\n\nMAP=[input().strip() for i in range(n)]\n\n\nMINR=[1<<30]*n\nMAXR=[-1]*n\nMINC=[1<<30]*n\nMAXC=[-1]*n\n\nfor i in range(n):\n    for j in range(n):\n        if MAP[i][j]==\"B\":\n            MINR[i]=min(MINR[i],j)\n            MAXR[i]=max(MAXR[i],j)\n            MINC[j]=min(MINC[j],i)\n            MAXC[j]=max(MAXC[j],i)\n\nALWAYS=0\nfor i in range(n):\n    if MINR[i]==1<<30 and MAXR[i]==-1:\n        ALWAYS+=1\n    if MINC[i]==1<<30 and MAXC[i]==-1:\n        ALWAYS+=1\n\nANS=[[0]*(n-k+1) for i in range(n-k+1)]\n\nfor j in range(n-k+1):\n    NOW=0\n    for i in range(k):\n\n        if j<=MINR[i] and j+k-1>=MAXR[i] and MINR[i]!=1<<30 and MAXR[i]!=-1:\n            NOW+=1\n\n    ANS[0][j]+=NOW\n\n    for i in range(n-k):\n\n        if j<=MINR[i] and j+k-1>=MAXR[i] and MINR[i]!=1<<30 and MAXR[i]!=-1:\n            NOW-=1\n\n\n        if j<=MINR[i+k] and j+k-1>=MAXR[i+k] and MINR[i+k]!=1<<30 and MAXR[i+k]!=-1:\n            NOW+=1\n\n        ANS[i+1][j]+=NOW\n\nfor i in range(n-k+1):\n    NOW=0\n    for j in range(k):\n\n        if i<=MINC[j] and i+k-1>=MAXC[j] and MINC[j]!=1<<30 and MAXC[j]!=-1:\n            NOW+=1\n\n    ANS[i][0]+=NOW\n\n    for j in range(n-k):\n\n        if i<=MINC[j] and i+k-1>=MAXC[j] and MINC[j]!=1<<30 and MAXC[j]!=-1:\n            NOW-=1\n\n        if i<=MINC[j+k] and i+k-1>=MAXC[j+k] and MINC[j+k]!=1<<30 and MAXC[j+k]!=-1:\n            NOW+=1\n\n        ANS[i][j+1]+=NOW\n\nprint(max([max(a) for a in ANS])+ALWAYS)\n        \n        \n        \n", "def main():\n  n, k = list(map(int, input().split()))\n  ss = []\n  tate = [[0 for _ in range(n+1)] for _ in range(n+1)]\n  yoko = [[0 for _ in range(n+1)] for _ in range(n+1)]\n  for i in range(n):\n    s = input().strip()\n    for j, _s in enumerate(s):\n      tate[i+1][j+1] = tate[i][j+1] + (1 if _s == 'B' else 0)\n      yoko[i+1][j+1] = yoko[i+1][j] + (1 if _s == 'B' else 0)\n  lc = 0\n  for i in range(n):\n    if tate[n][i+1] == 0:\n      lc += 1\n    if yoko[i+1][n] == 0:\n      lc += 1\n  yans = [[0 for _ in range(n+1)] for _ in range(n+1)]\n  tans = [[0 for _ in range(n+1)] for _ in range(n+1)]\n  for i in range(n):\n    l, r = 0, k\n    while r <= n:\n      yans[i+1][l+1] = yans[i][l+1]\n      if yoko[i+1][n] != 0 and yoko[i+1][r] - yoko[i+1][l] == yoko[i+1][n]:\n        yans[i+1][l+1] += 1\n      l += 1\n      r += 1\n\n  for i in range(n):\n    l, r = 0, k\n    while r <= n:\n      tans[l+1][i+1] = tans[l+1][i]\n      if tate[n][i+1] != 0 and tate[r][i+1] - tate[l][i+1] == tate[n][i+1]:\n        tans[l+1][i+1] += 1\n      l += 1\n      r += 1\n\n  ans = lc\n  for i in range(n-k+1):\n    for j in range(n-k+1):\n      ans = max(ans, lc+yans[i+k][j+1]-yans[i][j+1]+tans[i+1][j+k]-tans[i+1][j])\n  # print(*tate, sep='\\n')\n  # print()\n  # print(*yoko, sep='\\n')\n  # print()\n  # print(*tans, sep='\\n')\n  # print()\n  # print(*yans, sep='\\n')\n  # print()\n  print(ans)\n\n\ndef __starting_point():\n  main()\n\n__starting_point()", "n,k=map(int,input().split())\ns=[]\nfor i in range(n):\n\ts+=[input()]\ny=[[n,0] for i in range(n)]\nz=[[n,0] for i in range(n)]\nr=0\nfor i in range(n):\n\tind1=n\n\tind2=-1\n\tfor j in range(n):\n\t\tif s[i][j]=='B':\n\t\t\tind1=min(j,ind1)\n\t\t\tind2=max(j,ind2)\n\tif ind1!=n:\n\t\ty[i]=[max(0,ind2+1-k),ind1]\n\telse:\n\t\tr+=1\nfor j in range(n):\n\tind1=n\n\tind2=-1\n\tfor i in range(n):\n\t\tif s[i][j]=='B':\n\t\t\tind1=min(i,ind1)\n\t\t\tind2=max(i,ind2)\n\tif ind1!=n:\n\t\tz[j]=[max(0,ind2+1-k),ind1]\n\telse:\n\t\tr+=1\nx=[[0 for i in range(n)] for i in range(n+1)]\nx2=[[0 for i in range(n+1)] for i in range(n)]\nfor a in range(n):\n\tfor b in range(n):\n\t\ti=n-1-a\n\t\tj=n-1-b\n\t\tx[i][j]+=x[i+1][j]\n\t\tif y[i][0]<=j<=y[i][1]:\n\t\t\tx[i][j]+=1\n\t\tif i+k<=n-1 and y[i+k][0]<=j<=y[i+k][1]:\n\t\t\tx[i][j]-=1\nfor b in range(n):\n\tfor a in range(n):\n\t\ti=n-1-a\n\t\tj=n-1-b\n\t\tx2[i][j]+=x2[i][j+1]\n\t\tif z[j][0]<=i<=z[j][1]:\n\t\t\tx2[i][j]+=1\n\t\tif j+k<=n-1 and z[j+k][0]<=i<=z[j+k][1]:\n\t\t\tx2[i][j]-=1\nm=0\nfor i in range(n):\n\tfor j in range(n):\n\t\tc=x[i][j]+x2[i][j]\n\t\tif c>m:\n\t\t\tm=c\nprint(m+r)", "import math\nimport sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    grid = [[] for _ in range(n)]\n    for i in range(n):\n        grid[i] = list(input().strip())\n    row_min = [math.inf] * n\n    row_max = [math.inf] * n\n    col_min = [math.inf] * n\n    col_max = [math.inf] * n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                row_min[i] = min(row_min[i], j)\n                row_max[i] = j\n\n            if grid[j][i] == 'B':\n                col_min[i] = min(col_min[i], j)\n                col_max[i] = j\n\n    res = 0\n    for r in range(n):\n        if row_min[r] == math.inf:\n            res += 1\n    for c in range(n):\n        if col_min[c] == math.inf:\n            res += 1\n\n    rows_plus = [[0 for _ in range(n)] for _ in range(n)]\n    for c in range(n-k+1):\n        added = 0\n        for r in range(k):\n            if row_min[r] >= c and row_max[r] <= c + k - 1:\n                added += 1\n        rows_plus[0][c] = added\n        r = 1\n        while r + k - 1 < n:\n            if row_min[r-1] >= c and row_max[r-1] <= c + k - 1:\n                added -= 1\n            if row_min[r+k-1] >= c and row_max[r+k-1] <= c+k-1:\n                added += 1\n            rows_plus[r][c] = added\n            r += 1\n\n    cols_plus = [[0 for _ in range(n)] for _ in range(n)]\n    for r in range(n-k+1):\n        added = 0\n        for c in range(k):\n            if col_min[c] >= r and col_max[c] <= r + k - 1:\n                added += 1\n        cols_plus[r][0] = added\n        c = 1\n        while c + k - 1 < n:\n            if col_min[c-1] >= r and col_max[c-1] <= r + k - 1:\n                added -= 1\n            if col_min[c+k-1] >= r and col_max[c+k-1] <= r+k-1:\n                added += 1\n            cols_plus[r][c] = added\n            c += 1\n    max_added = 0\n    for r in range(n):\n        for c in range(n):\n            max_added = max(max_added, rows_plus[r][c] + cols_plus[r][c])\n\n    print(res+max_added)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from sys import stdin\nfrom sys import setrecursionlimit as SRL; SRL(10**7)\nrd = stdin.readline\nrrd = lambda: list(map(int, rd().strip().split()))\n\n\nn,k = rrd()\n\ns = []\ncal = [[0]*(n+10) for _i in range(n+10)]\n\nfor i in range(n):\n    s.append(str(rd()))\n\nans = 0\n\nfor i in range(n):\n    j = 0\n    while j < n and s[i][j] == 'W':\n        j += 1\n    l = j\n\n    if j >= n:\n        ans += 1\n        continue\n\n    j = n-1\n    while j >= 0 and s[i][j] == 'W':\n        j -= 1\n    r = j\n\n    if r - l + 1 > k:\n        continue\n\n    l1 = max(0,i - k + 1)\n    r1 = i + 1\n    l2 = max(0,r - k + 1)\n    r2 = l + 1\n\n    cal[l1][l2] += 1\n    cal[r1][l2] -= 1\n    cal[l1][r2] -= 1\n    cal[r1][r2] += 1\n\n\nfor i in range(n):\n    j = 0\n    while j < n and s[j][i] == 'W':\n        j += 1\n    l = j\n\n    if j >= n:\n        ans += 1\n        continue\n\n    j = n-1\n    while j >= 0 and s[j][i] == 'W':\n        j -= 1\n    r = j\n\n    if r-l+1 > k:\n        continue\n\n    l1 = max(0,i - k + 1)\n    r1 = i + 1\n    l2 = max(0,r - k + 1)\n    r2 = l + 1\n\n    cal[l2][l1] += 1\n    cal[l2][r1] -= 1\n    cal[r2][l1] -= 1\n    cal[r2][r1] += 1\n\nfor i in range(n):\n    for j in range(n):\n        if j:\n            cal[i][j] += cal[i][j-1]\n\n\npans = 0\n\nfor j in range(n):\n    for i in range(n):\n        if i:\n            cal[i][j] += cal[i-1][j]\n        pans = max(pans,cal[i][j])\n\n\n\nprint(ans+pans)\n\n\n", "n, k = map(int, input().split())\na = [input() for _ in range(n)]\nm = n - k + 1\n\ndef solve(a):\n    p = [(r.find('B'), r.rfind('B')) for r in a]\n    get = lambda i, j: j <= p[i][0] and p[i][1] <= j + k - 1\n    res = [[0] * m for _ in range(m)]\n    for j in range(m):\n        res[0][j] = cnt = sum(x == -1 for x, _ in p) + sum(get(i, j) for i in range(k))\n        for i in range(k, n):\n            res[i - k + 1][j] = cnt = cnt + get(i, j) - get(i - k, j)\n    return res\n\nx = [v for r in solve(a) for v in r]\ny = [v for r in list(zip(*solve(list(''.join(y) for y in zip(*a))))) for v in r]\nprint(max(u + v for u, v in zip(x, y)))", "n, k = list(map(int, input().split()))\na = [input() for _ in range(n)]\n\n# n, k = 5, 3\n# a =[\"BWBBB\",\n# \t\"BWBBB\",\n# \t\"BBBBB\",\n# \t\"BBBBB\",\n# \t\"WBBBW\"]\n# n, k = 4, 2\n# a =[\"BWWW\",\n# \t\"WBBW\",\n# \t\"WBBW\",\n# \t\"WWWB\"]\n\nm = n - k + 1\n\ndef solve(a):\n\tp = [(r.find(\"B\"), r.rfind(\"B\")) for r in a]\n\tget = lambda i, j: j <= p[i][0] and p[i][1] <= j + k -1\n\tres = [[0]*m for i in range(m)]\n\n\tfor j in range(m):\n\t\tres[0][j] = cnt = sum(x ==- 1 for x, _ in p) + sum(get(i, j) for i in range(k))\n\n\t\tfor i in range(k, n):\n\t\t\tres[i -k + 1][j] = cnt = cnt + get(i, j) - get(i - k, j)\n\treturn res\n\nx = [v for r in solve(a) for v in r]\ny = [v for r in list(zip(*solve(list(''.join(y) for y in zip(*a))))) for v in r]\nprint(max(u+v for u, v in zip(x, y)))\n", "n, k = list(map(int, input().split()))\ns = [input() for _ in range(n)]\ng_row = [[] for _ in range(n)]\ng_col = [[] for _ in range(n)]\n\nalready_white_line_nums = 0\nfor i in range(n):\n    for j in range(n):\n        if s[i][j] == 'B':\n            g_row[i].append(j)\n            g_col[j].append(i)\n\nfor i in range(n):\n    if not g_row[i]:\n        already_white_line_nums += 1\n    # else:\n    #     g_row[i] = g_row[i][0], g_row[i][-1]\n    if not g_col[i]:\n        already_white_line_nums += 1\n    # else:\n    #     g_col[i] = g_col[i][0], g_col[i][-1]\n\nr = 0\n\nnew_white_line_nums_col = [[[0] for _ in range(n - k + 1)] for _ in range(n - k + 1)]\n# new_white_line_nums_row = [[[0] for _ in range(n - k + 1)] for _ in range(n - k + 1)]\n\nfor i in range(n - k + 1):\n    new_white_line_nums = 0\n    for l in range(0, k):\n        if g_col[l] and i <= g_col[l][0] and g_col[l][-1] < i + k:\n            new_white_line_nums += 1\n    new_white_line_nums_col[i][0] = new_white_line_nums\n\n    for old_col in range(n - k):\n        if g_col[old_col] and i <= g_col[old_col][0] and g_col[old_col][-1] < i + k:\n            new_white_line_nums -= 1\n        new_col = old_col + k\n        if g_col[new_col] and i <= g_col[new_col][0] and g_col[new_col][-1] < i + k:\n            new_white_line_nums += 1\n        new_white_line_nums_col[i][old_col + 1] = new_white_line_nums\n\nfor i in range(n - k + 1):\n    new_white_line_nums = 0\n    for l in range(0, k):\n        if g_row[l] and i <= g_row[l][0] and g_row[l][-1] < i + k:\n            new_white_line_nums += 1\n    # new_white_line_nums_row[0][i] = new_white_line_nums\n    r = max(r, new_white_line_nums_col[0][i] + new_white_line_nums)\n\n    for old_row in range(n - k):\n        if g_row[old_row] and i <= g_row[old_row][0] and g_row[old_row][-1] < i + k:\n            new_white_line_nums -= 1\n        new_row = old_row + k\n        if g_row[new_row] and i <= g_row[new_row][0] and g_row[new_row][-1] < i + k:\n            new_white_line_nums += 1\n        r = max(r, new_white_line_nums_col[old_row + 1][i] + new_white_line_nums)\n        # new_white_line_nums_row[old_row + 1][i] = new_white_line_nums\n\n# r = 0\n# for i in range(n - k + 1):\n#     for j in range(n - k + 1):\n#         r = max(r, new_white_line_nums_col[i][j] + new_white_line_nums_row[i][j])\n\nprint(r + already_white_line_nums)\n", "import sys\ninput = lambda: sys.stdin.readline().strip()\n\nn, k = list(map(int, input().split()))\narr = []\nfor i in range(n):\n    arr.append(list(input()))\nextra = 0\nres = []\nfor i in range(n-k+1):\n    res.append([])\n    for j in range(n-k+1):\n        res[-1].append(0)\n\n# ROWS\n\nl = {}\nr = {}\nfor i in range(n):\n    for j in range(n):\n        if arr[i][j]=='B': l[i] = j; break\n    for j in range(n-1, -1, -1):\n        if arr[i][j]=='B': r[i] = j; break\n    else: l[i] = None; r[i] = None; extra+=1\nfor j in range(n-k+1):\n    tmp = 0\n    for i in range(k):\n        if l[i] is not None and l[i]>=j and r[i]<=j+k-1:\n            tmp+=1\n    res[0][j]+=tmp\n    for i in range(1, n-k+1):\n        if l[i-1] is not None and l[i-1]>=j and r[i-1]<=j+k-1:\n            tmp-=1\n        if l[i+k-1] is not None and l[i+k-1]>=j and r[i+k-1]<=j+k-1:\n            tmp+=1\n        res[i][j]+=tmp\n\n# COLUMNS\n\nl = {}\nr = {}\nfor j in range(n):\n    for i in range(n):\n        if arr[i][j]=='B': l[j] = i; break\n    for i in range(n-1, -1, -1):\n        if arr[i][j]=='B': r[j] = i; break\n    else: l[j] = None; r[j] = None; extra+=1\nfor i in range(n-k+1):\n    tmp = 0\n    for j in range(k):\n        if l[j] is not None and l[j]>=i and r[j]<=i+k-1:\n            tmp+=1\n    res[i][0]+=tmp\n    for j in range(1, n-k+1):\n        if l[j-1] is not None and l[j-1]>=i and r[j-1]<=i+k-1:\n            tmp-=1\n        if l[j+k-1] is not None and l[j+k-1]>=i and r[j+k-1]<=i+k-1:\n            tmp+=1\n        res[i][j]+=tmp\n\nprint(max(max(i) for i in res)+extra)\n", "import sys\ninput = lambda: sys.stdin.readline().strip()\n \nn, k = list(map(int, input().split()))\narr = []\nfor i in range(n):\n    arr.append(list(input()))\nextra = 0\nres = []\nfor i in range(n-k+1):\n    res.append([])\n    for j in range(n-k+1):\n        res[-1].append(0)\n \n# ROWS\n \nl = {}\nr = {}\nfor i in range(n):\n    for j in range(n):\n        if arr[i][j]=='B': l[i] = j; break\n    for j in range(n-1, -1, -1):\n        if arr[i][j]=='B': r[i] = j; break\n    else: l[i] = None; r[i] = None; extra+=1\nfor j in range(n-k+1):\n    tmp = 0\n    for i in range(k):\n        if l[i] is not None and l[i]>=j and r[i]<=j+k-1:\n            res[0][j]+=1\n            tmp+=1\n    for i in range(1, n-k+1):\n        res[i][j]+=tmp\n        if l[i-1] is not None and l[i-1]>=j and r[i-1]<=j+k-1:\n            res[i][j]-=1\n            tmp-=1\n        if l[i+k-1] is not None and l[i+k-1]>=j and r[i+k-1]<=j+k-1:\n            res[i][j]+=1\n            tmp+=1\n \n# COLUMNS\n \nl = {}\nr = {}\nfor j in range(n):\n    for i in range(n):\n        if arr[i][j]=='B': l[j] = i; break\n    for i in range(n-1, -1, -1):\n        if arr[i][j]=='B': r[j] = i; break\n    else: l[j] = None; r[j] = None; extra+=1\nfor i in range(n-k+1):\n    tmp = 0\n    for j in range(k):\n        if l[j] is not None and l[j]>=i and r[j]<=i+k-1:\n            res[i][0]+=1\n            tmp+=1\n    for j in range(1, n-k+1):\n        res[i][j]+=tmp\n        if l[j-1] is not None and l[j-1]>=i and r[j-1]<=i+k-1:\n            res[i][j]-=1\n            tmp-=1\n        if l[j+k-1] is not None and l[j+k-1]>=i and r[j+k-1]<=i+k-1:\n            res[i][j]+=1\n            tmp+=1\n \nprint(max(max(i) for i in res)+extra)\n", "ac=[[0 for i in range(2010)]for j in range(2010)]\nn,k=map(int,input().split())\nv=[]\nfor i in range(n):\n    v.append(input())\nextra=0\n##row\nfor i in range(n):\n    L=n\n    R=-1\n    for j in range(n):\n        if v[i][j]=='B':\n            L=min(L,j)\n            R=max(R,j)\n    if L>R:\n        extra += 1\n    else:\n        if R-L+1<=k:\n            minx=max(0,i-k+1)\n            maxx=i\n            miny=max(0,R-k+1)\n            maxy=L\n            ac[minx][miny] += 1\n            ac[maxx + 1][maxy + 1] += 1\n            ac[maxx + 1][miny] -= 1\n            ac[minx][maxy + 1] -= 1\nfor j in range(n):\n    L=n\n    R=-1\n    for i in range(n):\n        if v[i][j]=='B':\n            L=min(L,i)\n            R=max(R,i)\n    if L>R:\n        extra += 1\n    else:\n        if R-L+1<=k:\n            minx=max(0,R-k+1)\n            maxx=L\n            miny=max(0,j-k+1)\n            maxy=j\n            ac[minx][miny] += 1\n            ac[maxx + 1][maxy + 1] += 1\n            ac[maxx + 1][miny] -= 1\n            ac[minx][maxy + 1] -= 1\nfor i in range(n):\n    for j in range(n):\n        if i >0 :\n            ac[i][j] += ac[i-1][j]\n        if j > 0:\n            ac[i][j] += ac[i][j-1]\n        if i > 0 and j>0:\n            ac[i][j] -= ac[i-1][j-1]\nans=0\nfor i in range(n-k+1):\n    for j in range(n-k+1):\n        ans=max(ans,ac[i][j])\nprint(ans+extra)", "n,k=list(map(int,input().split()))\nit=[[0]*n for i in range(n)]\nt=[[-1,-1] for i in range(n)]\ntt=[[-1,-1] for i in range(n)]\nfor i in range(n):\n    s=input()\n    c=-1\n    cc=-1\n    for j,ii in enumerate(s):\n        if ii==\"B\":\n            it[i][j]=1\n            if c==-1:\n                c=j\n            cc=j\n    t[i]=[c,cc]\n\nfor i in range(n):\n    p=[it[j][i] for j in range(n)]\n    c=-1\n    cc=-1\n    for j in range(n):\n        if p[j]:\n            if c==-1:\n                c=j\n            cc=j\n    tt[i]=[c,cc]\nrow_max=[[0]*(n-k+1) for i in range(n-k+1)]\ncol_max=[[0]*(n-k+1) for i in range(n-k+1)]\nfor col in range(n-k+1):\n    s=[0]*n\n    co=0\n    for i in range(k):\n        if t[i]!=[-1,-1]:\n            if t[i][0]>=col and t[i][0]<=col+k-1 and t[i][1]>=col and t[i][1]<=col+k-1:\n                co+=1\n                s[i]=1\n    row_max[col][0]=co\n    for row in range(1,n-k+1):\n        if s[row-1]:\n            co-=1\n        i=row+k-1\n        if t[i]!=[-1,-1]:\n            if t[i][0]>=col and t[i][0]<=col+k-1 and t[i][1]>=col and t[i][1]<=col+k-1:\n                co+=1\n                s[i]=1\n        row_max[col][row]=co\nfor row in range(n-k+1):\n    s=[0]*n\n    co=0\n    for i in range(k):\n        if tt[i]!=[-1,-1]:\n            if tt[i][0]>=row and tt[i][0]<=row+k-1 and tt[i][1]>=row and tt[i][1]<=row+k-1:\n                co+=1\n                s[i]=1\n    col_max[0][row]=co\n    for col in range(1,n-k+1):\n        if s[col-1]:\n            co-=1\n        i=col+k-1\n        if tt[i]!=[-1,-1]:\n            if tt[i][0]>=row and tt[i][0]<=row+k-1 and tt[i][1]>=row and tt[i][1]<=row+k-1:\n                co+=1\n                s[i]=1\n        col_max[col][row]=co\nma=0\nfor i in range(n-k+1):\n    for j in range(n-k+1):\n        ma=max(ma,row_max[i][j]+col_max[i][j])\nma+=t.count([-1,-1])\nma+=tt.count([-1,-1])\nprint(ma)\n\n\n    \n            \n    \n", "import sys\nfrom itertools import accumulate\nN, K = map(int, input().split())\nG = [[1 if s == 'B' else 0 for s in sys.stdin.readline().strip()] for _ in range(N)]\n\nAns = [[0]*(N+1) for _ in range(N+1)]\nans = 0\n\nfor i in range(N):\n    g = G[i]\n    if 1 not in g:\n        ans += 1\n        continue\n    r = g.index(1)\n    l = max(0, N - K - g[::-1].index(1))\n    j = max(0, i-K+1)\n    if l <= r:\n        Ans[j][l] += 1\n        Ans[j][r+1] -= 1\n        Ans[i+1][l] -= 1\n        Ans[i+1][r+1] += 1\n\nG = list(map(list, zip(*G)))\nAns = list(map(list, zip(*Ans)))\n\nfor i in range(N):\n    g = G[i]\n    if 1 not in g:\n        ans += 1\n        continue\n    r = g.index(1)\n    l = max(0, N - K - g[::-1].index(1))\n    j = max(0, i-K+1)\n    if l <= r:\n        Ans[j][l] += 1\n        Ans[j][r+1] -= 1\n        Ans[i+1][l] -= 1\n        Ans[i+1][r+1] += 1\n\nAns = [list(accumulate(g))[::-1] for g in Ans]\nAns = list(map(list, zip(*Ans)))\nAns = [list(accumulate(g))[::-1] for g in Ans]\n\nprint(ans + max(max(g) for g in Ans))    ", "n, k = [int(i) for i in input().split()]\nsz = n - k + 1\ncnt = []\nfor i in range(sz):\n    cnt.append([0]*(sz))\ndata = []\nextra = 0\nfor i in range(n):\n    data.append(input())\nfor r in range(n):\n    row = data[r]\n    li = row.find(\"B\") \n    if li == -1:\n        extra += 1\n        continue\n    ri = row.rfind(\"B\")\n    for i in range(max(ri - k+1,0), min(li+1, sz)):#??????????????\n        for j in range(max(0, r+1-k), min(sz, r+1)):\n            # print(\"row:\",r, li, ri, j, i)\n            cnt[j][i] += 1\n# b = []\n# b.rindex(1)\n\n\nfor c in range(n):\n    row = \"\".join([data[i][c] for i in range(n)])\n    li = row.find(\"B\")\n    if li == -1:\n        extra += 1\n        continue\n    ri = row.rfind(\"B\")\n    for i in range(max(ri - k+1,0),  min(li+1, sz)):\n        for j in range(max(0, c+1-k), min(sz, c+1)):\n            # print(\"col:\",c, li, ri,i,j)\n            cnt[i][j] += 1\n\nmx = 0\nfor i in range( sz):\n    for j in range(sz):\n        if cnt[i][j] > mx:\n            mx = cnt[i][j]\nprint(mx+extra)\n\n# print(cnt)\n", "from math import *\n\nMOD = int(1e9)+7\n\ndef nextInt():\n    return int(input())\n\ndef nextInts():\n    return list(map(int,input().split()))\n\ndef YN(x):\n    return \"YES\" if x else \"NO\"\n\ncum = None\nn,k = 0,0\n\ndef addRect(x0,x1,y0,y1):\n    nonlocal cum,n,k\n    x0 = max(x0,0)+1\n    x1 = min(x1,n-k)+1\n    y0 = max(y0,0)+1\n    y1 = min(y1,n-k)+1\n    #print(\"HA\",x0,x1,y0,y1)\n    if x0 > x1 or y0 > y1:\n        return\n    #print(\"BEF\",x0,x1,cum[1][1])\n    cum[x0][y0] += 1\n    #print(\"??\",cum[1][1])\n    cum[x1+1][y0] -= 1\n    #print(\"??\",x1+1,y0,cum[1][1],len(cum))\n    cum[x0][y1+1] -= 1\n    #print(\"??\",cum[1][1])\n    cum[x1+1][y1+1] += 1\n    #print(\"??\",cum[1][1])\n    #print(\"AFT\",cum[1][1])\n\ndef solve():\n    nonlocal cum,n,k\n    n,k = nextInts()\n    L = []\n    cum = [[0]*2005 for x in range(2005)]\n    # print(cum[0])\n    for i in range(n):\n        L.append(input())\n    for i in range(n):\n        mn,mx = MOD,-MOD\n        for j in range(n):\n            if L[i][j] == 'B':\n                mx = j\n                if mn == MOD:\n                    mn = j\n        if mn == MOD:\n            cum[1][1] += 1\n            continue\n        #print(i,mn,mx,mx-k+1,mn)\n        addRect(i-k+1,i,mx-k+1,mn)\n    for j in range(n):\n        mn,mx = MOD,-MOD\n        for i in range(n):\n            if L[i][j] == 'B':\n                mx = i\n                if mn == MOD:\n                    mn = i\n        if mn == MOD:\n            cum[1][1] += 1\n            continue\n        #print(j,mn,mx)\n        addRect(mx-k+1,mn,j-k+1,j)\n    ans = 0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            cum[i][j] += cum[i][j-1]+cum[i-1][j]-cum[i-1][j-1]\n            #print(\"HUH\",i,j,cum[i][j])\n            ans = max(ans,cum[i][j])\n    return ans\n\nprint(solve())\n# t = nextInt()\n# for i in range(t):\n#     print(YN(solve()))\n", "[n, k] = [int(x) for x in input().split()]\n\n# for every column\n# find earliest and latest b\n# create a list per column\n# True -> earliest <= curr, latest <= curr+k\n# False -> otherwise\n\n\n# BWWW 100 110\n# WBBW 010 020\n# WBBW 010 011\n# WWWB 001\n\n# BWWW 1000 100\n# WBBW 0110 121\n# WBBW 0001 001\n# WWWB\n\nc_p1 = [[-1] * 2010 for x in range(2010)]\nc_p2 = [[-1] * 2010 for x in range(2010)]\n\nr_p1 = [[-1] * 2010 for x in range(2010)]\nr_p2 = [[-1] * 2010 for x in range(2010)]\n\ncells = []\nfor i in range(n):\n\n    cells.append(input())\n\nbonus = 0\n\nfor y in range(n):\n    earliest = -1\n    latest = -1\n    for x in range(n):\n        if cells[y][x] == \"B\":\n            earliest = x\n            break\n    for x in range(n):\n        if cells[y][n - x - 1] == \"B\":\n            latest = n - x - 1\n            break\n\n    if earliest == -1:\n        bonus += 1\n    for x in range(n - k + 1):\n        r_p1[y][x] = int(earliest >= x and x + k - 1 >= latest)\n\nfor x in range(n - k + 1):\n    sum = 0\n    for y in range(n):\n        sum += r_p1[y][x]\n        if y - k >= 0:\n            sum -= r_p1[y - k][x]\n\n        if y - k + 1 >= 0:\n            r_p2[y - k + 1][x] = sum\n\n\nfor x in range(n):\n    earliest = -1\n    latest = -1\n    for y in range(n):\n        if cells[y][x] == \"B\":\n            earliest = y\n            break\n    for y in range(n):\n        if cells[n - y - 1][x] == \"B\":\n            latest = n - y - 1\n            break\n    if earliest == -1:\n        bonus += 1\n    for y in range(n - k + 1):\n        c_p1[y][x] = int(earliest >= y and y + k - 1 >= latest)\n\nfor y in range(n - k + 1):\n    sum = 0\n    for x in range(n):\n        sum += c_p1[y][x]\n        if x - k >= 0:\n            sum -= c_p1[y][x - k]\n\n        if x - k + 1 >= 0:\n            c_p2[y][x - k + 1] = sum\n\n# print(r_p2[0][:3])\n# print(r_p2[1][:3])\n# print(r_p2[2][:3])\n\n# print(c_p2[0][:3])\n# print(c_p2[1][:3])\n# print(c_p2[2][:3])\n\nans = 0\nfor y in range(n - k + 1):\n    for x in range(n - k + 1):\n        ans = max(ans, c_p2[y][x] + r_p2[y][x])\n# print(bonus)\nprint(ans + bonus)\n", "n, k = map(int ,input().split())\n\nc_p1 = [[-1] * 2001 for x in range(2001)]\nc_p2 = [[-1] * 2001 for x in range(2001)]\n \nr_p1 = [[-1] * 2001 for x in range(2001)]\nr_p2 = [[-1] * 2001 for x in range(2001)]\n \ncells = []\nfor i in range(n):\n \n    cells.append(input())\n \nbonus = 0\n \nfor y in range(n):\n    earliest = -1\n    latest = -1\n    for x in range(n):\n        if cells[y][x] == \"B\":\n            earliest = x\n            break\n    for x in range(n):\n        if cells[y][n - x - 1] == \"B\":\n            latest = n - x - 1\n            break\n \n    if earliest == -1:\n        bonus += 1\n    for x in range(n - k + 1):\n        r_p1[y][x] = int(earliest >= x and x + k - 1 >= latest)\n \nfor x in range(n - k + 1):\n    sum = 0\n    for y in range(n):\n        sum += r_p1[y][x]\n        if y - k >= 0:\n            sum -= r_p1[y - k][x]\n \n        if y - k + 1 >= 0:\n            r_p2[y - k + 1][x] = sum\n \n \nfor x in range(n):\n    earliest = -1\n    latest = -1\n    for y in range(n):\n        if cells[y][x] == \"B\":\n            earliest = y\n            break\n    for y in range(n):\n        if cells[n - y - 1][x] == \"B\":\n            latest = n - y - 1\n            break\n    if earliest == -1:\n        bonus += 1\n    for y in range(n - k + 1):\n        c_p1[y][x] = int(earliest >= y and y + k - 1 >= latest)\n \nfor y in range(n - k + 1):\n    sum = 0\n    for x in range(n):\n        sum += c_p1[y][x]\n        if x - k >= 0:\n            sum -= c_p1[y][x - k]\n \n        if x - k + 1 >= 0:\n            c_p2[y][x - k + 1] = sum\n \nans = 0\nfor y in range(n - k + 1):\n    for x in range(n - k + 1):\n        ans = max(ans, c_p2[y][x] + r_p2[y][x])\n\nprint(ans + bonus)", "import sys\nimport math as mt\n#input=sys.stdin.buffer.readline  \n#t=int(input())\nt=1\nfor __ in range(t):\n    n,k=list(map(int,input().split()))\n    arr=[]\n    lr={}\n    d={}\n    ans=0\n    for i  in range(n):\n        arr.append(input())\n        lr[i]=[]\n        for j in range(n):\n            if arr[i][j]=='B':\n                lr[i].append(j)\n                break\n        for j in range(n-1,-1,-1):\n            if arr[i][j]=='B':\n                lr[i].append(j)\n                break\n        if len(lr[i])==0:\n            lr[i].append(-1)\n            lr[i].append(-1)\n            d[i]=1\n            ans+=1\n        else:\n            d[i]=0\n    lr1={}\n    d1={}\n    for j in range(n):\n        lr1[j]=[]\n        for i in range(n):\n            if arr[i][j]=='B':\n                lr1[j].append(i)\n                break\n        for i in range(n-1,-1,-1):\n            if arr[i][j]=='B':\n                lr1[j].append(i)\n                break\n        if len(lr1[j])==0:\n            d1[j]=1\n            ans+=1\n            lr1[j].append(-1)\n            lr1[j].append(-1)\n\n        else:\n            d1[j]=0\n    #print(arr,lr)        \n    a={}\n    \n    i1=0\n    fans1=[[0 for j in range(n)] for i in range(n)]\n    fans2=[[0 for j in range(n)] for i in range(n)]\n    for i1 in range(n-k+1):\n        a[i1]=[]\n        ans1=0\n        #print(33,i1,i1+k-1)\n        for i in range(k):\n            if d[i]==0:\n                if k+i1>lr[i][1] and i1<=lr[i][0]:\n                    ans1+=1   \n        #print(111,ans1)\n            \n        #a[i1].append(ans1)\n        fans1[0][i1]=ans1\n        for i in range(n-k):\n            if d[i]==0 and k+i1>lr[i][1] and i1<=lr[i][0] :\n                ans1-=1\n            if d[i+k]==0 and lr[i+k][1]<k+i1 and i1<=lr[i+k][0]:\n                ans1+=1\n            fans1[i+1][i1]=ans1    \n            #a[i1].append(ans1)\n    b={}\n    #print(arr,lr1,d1)\n    for i1 in range(n-k+1):\n        b[i1]=[]\n        ans1=0\n        #print(33,i1,i1+k-1)\n        for i in range(k):\n            if d1[i]==0:\n                if k+i1>lr1[i][1] and i1<=lr1[i][0]:\n                    ans1+=1   \n        #print(111,ans1)\n        fans2[i1][0]=ans1    \n        b[i1].append(ans1)\n        for i in range(n-k):\n            if d1[i]==0 and k+i1>lr1[i][1] and i1<=lr1[i][0] :\n                ans1-=1\n            if d1[i+k]==0 and lr1[i+k][1]<k+i1 and i1<=lr1[i+k][0]:\n                ans1+=1\n            fans2[i1][i+1]=ans1    \n            b[i1].append(ans1)\n            \n        #print(fans)\n    maxi=0    \n    for i in range(n):\n        for j in range(n):\n            maxi=max(fans1[i][j]+fans2[i][j],maxi)\n            \n    #print(fans1)\n    #print(fans2)\n    print(maxi+ans)        \n    #n=int(input())\n    #h=list(map(int,input().split()))\n", "n,k = list(map(int,input().split()))\nmat = []\nfor i in range(n):\n\tmat.append(list(input()))\nprefr = [[0 for i in range(n)] for j in range(n)]\nprefc = [[0 for i in range(n)] for j in range(n)]\ndone = 0\nfor i in range(n):\n\tfor j in range(n):\n\t\tif j==0 and mat[i][j]==\"B\":\n\t\t\tprefr[i][j] = 1\n\t\telse:\n\t\t\tprefr[i][j] = prefr[i][j-1]\n\t\t\tif mat[i][j]==\"B\":\n\t\t\t\tprefr[i][j] += 1\n\t\tif i==0 and mat[i][j]==\"B\":\n\t\t\tprefc[i][j] = 1\n\t\telse:\n\t\t\tprefc[i][j] = prefc[i-1][j]\n\t\t\tif mat[i][j]==\"B\":\n\t\t\t\tprefc[i][j] += 1\nfor i in range(n):\n\tif prefc[-1][i]==0:\n\t\tdone += 1\n\tif prefr[i][-1]==0:\n\t\tdone += 1\ndr,dc = [[0 for i in range(n)] for j in range(n)],[[0 for i in range(n)] for j in range(n)]\nfor j in range(n-k+1):\n\tcount = []\n\ts = 0\n\tfor i in range(k):\n\t\tif j==0:\n\t\t\tif prefr[i][-1]-prefr[i][j+k-1]==0 and prefr[i][-1]!=0:\n\t\t\t\tcount.append(1)\n\t\t\t\ts += 1\n\t\t\telse:\n\t\t\t\tcount.append(0)\n\t\telse:\n\t\t\tif prefr[i][j-1] + (prefr[i][-1]-prefr[i][j+k-1]) == 0 and prefr[i][-1]!=0:\n\t\t\t\tcount.append(1)\n\t\t\t\ts += 1\n\t\t\telse:\n\t\t\t\tcount.append(0)\n\tdr[0][j] = s\n\t# print (count,s)\n\tfor i in range(1,n-k+1):\n\t\tif j==0:\n\t\t\tif prefr[i+k-1][-1]-prefr[i+k-1][j+k-1]==0 and prefr[i+k-1][-1]!=0:\n\t\t\t\tcount.append(1)\n\t\t\t\ts += 1\n\t\t\telse:\n\t\t\t\tcount.append(0)\n\t\telse:\n\t\t\tif prefr[i+k-1][j-1] + (prefr[i+k-1][-1]-prefr[i+k-1][j+k-1]) == 0 and prefr[i+k-1][-1]!=0:\n\t\t\t\tcount.append(1)\n\t\t\t\ts += 1\n\t\t\telse:\n\t\t\t\tcount.append(0)\n\t\t# print (i,j,s)\n\t\tif count[i-1]==1 and prefr[i-1][-1]!=0:\n\t\t\ts -= 1 \n\t\tdr[i][j] = s\n# print (dr)\nfor i in range(n-k+1):\n\tcount = []\n\ts = 0\n\tfor j in range(k):\n\t\tif i==0:\n\t\t\tif prefc[-1][j]-prefc[i+k-1][j]==0 and prefc[-1][j]!=0:\n\t\t\t\tcount.append(1)\n\t\t\t\ts += 1\n\t\t\telse:\n\t\t\t\tcount.append(0)\n\t\telse:\n\t\t\tif prefc[i-1][j] + (prefc[-1][j]-prefc[i+k-1][j]) == 0 and prefc[-1][j]!=0:\n\t\t\t\tcount.append(1)\n\t\t\t\ts += 1\n\t\t\telse:\n\t\t\t\tcount.append(0)\n\tdc[i][0] = s\n\t# print (count,s)\n\tfor j in range(1,n-k+1):\n\t\tif i==0:\n\t\t\tif prefc[-1][j+k-1]-prefc[i+k-1][j+k-1]==0 and prefc[-1][j+k-1]!=0:\n\t\t\t\tcount.append(1)\n\t\t\t\ts += 1\n\t\t\telse:\n\t\t\t\tcount.append(0)\n\t\telse:\n\t\t\tif prefc[i-1][j+k-1] + (prefc[-1][j+k-1]-prefc[i+k-1][j+k-1]) == 0 and prefc[-1][j+k-1]!=0:\n\t\t\t\tcount.append(1)\n\t\t\t\ts += 1\n\t\t\telse:\n\t\t\t\tcount.append(0)\n\t\t# print (i,j,s)\n\t\tif count[j-1]==1 and prefc[-1][j-1]!=0:\n\t\t\ts -= 1 \n\t\tdc[i][j] = s\n# print (dc)\nans = 0\nfor i in range(n):\n\tfor j in range(n):\n\t\tans = max(ans,dr[i][j]+dc[i][j])\nprint(ans+done)\n"]