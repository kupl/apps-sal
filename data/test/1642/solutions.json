["class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n    \n    def __sub__(self, other):\n        return Vector(self.x - other.x, self.y - other.y)\n    \n    def to(self, other):\n        return other - self\n    \n    def __repr__(self):\n        return \"(%s %s)\" % (self.x, self.y)\n\n    def dot(self, other):\n        return self.x * other.y - self.y * other.x\n    \n    def lensq(self):\n        return self.x ** 2 + self.y ** 2\n\nVec = Vector\n\ndef getH(p, a, b):\n    s2 = p.to(a).dot(p.to(b))\n    # a * h / 2 = s\n    # h = s * 2 / a\n    return s2 / (a.to(b).lensq() ** 0.5)\n\npts = [Vec(*list(map(int, input().split()))) for i in range(int(input()))]\nn = len(pts)\npts.append(pts[0])\npts.append(pts[1])\n\nans = 12351513153155135135\n\nfor i in range(n):\n    ans = min(ans, getH(pts[i + 1], pts[i], pts[i + 2])/2)\n\nprint(ans)\n", "from math import hypot\n\n\nn = int(input())\n\n\ndef square(a, b, c):\n\tfirst = [a[0] - c[0], a[1] - c[1]]\n\tsecond = [b[0] - c[0], b[1] - c[1]]\n\treturn abs(first[0] * second[1] - first[1] * second[0])\n\ndef height(a, b, c):\n\treturn square(a, b, c) / hypot(a[0] - b[0], a[1] - b[1])\n\n\npoints = []\nfor i in range(n):\n\tpoints.append(list(map(float, input().split())))\n_max = 3e9\n\nfor i in range(n):\n\ta = points[i]\n\tb = points[(i + 1) % n]\n\tc = points[(i + 2) % n]\n\t_max = min(_max, (height(a, b, c) / 2))\n\t_max = min(_max, height(c, a, b) / 2)\n\t_max = min(_max, (height(b, c, a) / 2))\n\nprint(_max)", "import math\nfrom decimal import Decimal\nn = int(input())\nd = [[] for i in range(n)]\nfor i in range(n):\n    d[i] = list(map(Decimal,input().split()))\ndef cnt(m):\n    l = m - 1\n    if (l < 0): l = n - 1\n    r = (m + 1) % n\n    lol = Decimal(2)\n    a = ((d[l][0] - d[m][0])**lol + (d[l][1] - d[m][1]) ** 2)**(Decimal(1/2))\n    b = ((d[m][0] - d[r][0]) ** lol + (d[m][1] - d[r][1]) ** 2)**(Decimal(1/2))\n    c = ((d[l][0] - d[r][0]) ** lol + (d[l][1] - d[r][1]) ** 2)**(Decimal(1/2))\n    p = (a + b + c) / lol\n    s = (p * (p - a) * (p - b) * (p - c))**(Decimal(1/2))\n    return Decimal(s / c)\n\nans = Decimal(cnt(0))\nfor i in range(0,n):\n    ans = min(ans, cnt(i))\n    # for j in range(0,n):\n    #     if i == j :continue;\n    #     cur = ((d[i][0] - d[j][0]) ** 2 + (d[i][1] - d[j][1]) ** 2) ** (1/2)\n    #     ans = min(ans, cur / 2)\n\nprint(ans)", "from math import inf\n\ndef vect(x, y):\n    return abs(sum([x[i]*(y[(i+1)%3]-y[(i+2)%3]) for i in range(3)]))\ndef l(x, y):\n    return ((x[0]-x[2])**2 + (y[0]-y[2])**2)**0.5\ndef h(x, y):\n    return vect(x, y) / l(x, y)\n\nn = int(input())\nx = []\ny = []\nfor i in range(n):\n    a, b = [int(x) for x in input().split()]\n    x.append(a)\n    y.append(b)\nx += x[:2]\ny += y[:2]\n\ndmin = inf\nfor i in range(n):\n    d = h(x[i:i+3], y[i:i+3])/2\n    if dmin > d:\n        dmin = d\n\nprint(dmin)", "import math\ndef dist(a, b, c):\n    return abs((c[1] - a[1])*b[0] - (c[0] - a[0])*b[1] + c[0]*a[1] - c[1]*a[0])/math.hypot(c[0]-a[0], c[1]- a[1]);\nN = int(input())\npts = [tuple(map(int, input().split())) for _ in range(N)]\nMIN = 10000000000.0\nfor i in range(N-2):\n    MIN = min(MIN, dist(pts[i], pts[i+1], pts[i+2]))\n\nMIN = min(MIN, dist(pts[N-2], pts[N-1], pts[0]))\nMIN = min(MIN, dist(pts[N-1], pts[0], pts[1]))\nprint(MIN/2)\n\n\n\n\n\n# Made By Mostafa_Khaled\n", "import math\n\n\nclass Pt:\n    def __init__(self, x, y):\n        self.x, self.y = x, y\n\n    def __sub__(self, other):\n        return Pt(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return self.x * other.x + self.y * other.y\n\n    def __xor__(self, other):\n        return self.x * other.y - self.y * other.x\n\n    def len(self):\n        return math.sqrt(self.x ** 2 + self.y ** 2)\n\n\nn = int(input())\ndata = []\nfor i in range(n):\n    data.append(Pt(*list(map(int, input().split()))))\nmin_ = 10 ** 10\nfor i in range(1, n - 1):\n    A = data[i - 1]\n    B = data[i + 1]\n    C = data[i]\n    r = abs((C - A) ^ (B - A)) / (B - A).len()\n    min_ = min(min_, r)\nA = data[0]\nB = data[n - 2]\nC = data[n - 1]\nr = abs((C - A) ^ (B - A)) / (B - A).len()\nmin_ = min(min_, r)\nA = data[1]\nB = data[n - 1]\nC = data[0]\nr = abs((C - A) ^ (B - A)) / (B - A).len()\nmin_ = min(min_, r)\nprint(min_ / 2)\n", "import sys\nimport math\n\ndata = sys.stdin.read().split()\ndata_ptr = 0\n\ndef data_next():\n    nonlocal data_ptr, data\n    data_ptr += 1\n    return data[data_ptr - 1]\n\nN = int(data_next())\narr = list(zip(list(map(int, data[1::2])), list(map(int, data[2::2]))))\n\ndef cross(x1, y1, x2, y2):\n    return x1 * y2 - x2 * y1\n\ndef dist(x, y):\n    return math.sqrt(x * x + y * y)\n\nans = 4000000000.0\nfor i in range(N):\n    x1, y1 = arr[i - 1]\n    x2, y2 = arr[i]\n    x1 -= arr[i - 2][0]\n    x2 -= arr[i - 2][0]\n    y1 -= arr[i - 2][1]\n    y2 -= arr[i - 2][1]\n    ans = min(ans, abs(cross(x1, y1, x2, y2) / dist(x2, y2) / 2))\nprint(ans)\n", "# from decimal import *\n# getcontext().prec=16\n# from math import sqrt\n# from scipy.special import binom\n# from collections import defaultdict\n# from math import sin,pi,sqrt\nfrom math import sqrt,hypot\n\ndef dist(a, b, c):\n    return abs((c[1] - a[1])*b[0] - (c[0] - a[0])*b[1] + c[0]*a[1] - c[1]*a[0])/hypot(c[0]-a[0], c[1]- a[1])/2\n\nn=int(input())\nliste=[ list(map(int,input().split(\" \"))) for _ in range(n)]\n\nd=-1\nfor i in range(n):\n    if i==n-1:\n        a,b,c=liste[n-2],liste[n-1],liste[0]\n    else:\n        a,b,c=liste[i-1],liste[i],liste[i+1]\n    if d!=-1:\n        d=min(d,dist(a,b,c))\n    else:\n        d=dist(a,b,c)\n\nprint(d)", "from math import *\nn=int(input())\nr=[list(map(int,input().split())) for _ in range(n)]\nans = 10 ** 20\nfor i in range(n):\n\tx0,y0=r[(i+n-1)%n]\n\tx1,y1=r[(i+1)%n]\n\tx,y=r[i]\n\tans=min(ans,abs((y1-y0)*x-(x1-x0)*y-(x0*y1-x1*y0))/sqrt((x1-x0)**2+(y1-y0)**2))\nprint(ans/2)"]