["#! usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom collections import deque\nimport heapq\nimport math\nimport bisect\n\n\ndef main():\n    N, M, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n\n    B = [(A[i], i) for i in range(N)]\n    B.sort(reverse=True)\n\n    used = [0] * N\n    ans = 0\n    for i in range(M*K):\n        idx = B[i][1]\n        used[idx] = 1\n        ans += B[i][0]\n\n    lst = []\n    cnt = le = 0\n    for i in range(N):\n        if used[i]:\n            cnt += 1\n        if cnt == M:\n            lst.append(i+1)\n            cnt = 0\n            le += 1\n            if le == K - 1:\n                break\n\n    print(ans)\n    print(*lst)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m,k=map(int,input().split())\nA=list(map(int,input().split()))\n\nB=list(enumerate(A))\nB.sort(key=lambda x:x[1])\nB.reverse()\n\nLIST=[0]*n\nANS=0\n\nfor i in range(m*k):\n    LIST[B[i][0]]=1\n    ANS+=B[i][1]\n\nANSLIST=[]\ncount=0\nfor i in range(n):\n    if LIST[i]==1:\n        count+=1\n\n    if count==m:\n        ANSLIST.append(i+1)\n        count=0\n\nprint(ANS)\nfor a in ANSLIST[:-1]:\n    print(a,end=\" \")\n", "n, m, k = map(int, input().split())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n    b.append((a[i], i + 1))\nb.sort(reverse=True)\nc = b[: m * k]\nc.sort(key=lambda x: x[1])\n\nans = 0\nfor i in c:\n    ans += i[0]\n\nprint(ans)\nfor i in range(len(c) - 1):\n    if (i + 1) % m == 0:\n        print(c[i][1], end=' ')", "def func(n):\n    return n[1]\n\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\nb = [[a[i], i] for i in range(len(a))]\nb.sort(reverse=True)\nb = b[:m * k]\nb.sort(key=func)\nans = []\nans2 = 0\nfor i in range(0, len(b), 1):\n    if (i + 1) % m == 0:\n        ans.append(b[i][1] + 1)\n    ans2 += b[i][0]\nprint(ans2)\nprint(' '.join(map(str, ans[:-1])))", "n, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nindexed_a = list(zip(a, list(range(n))))\n\nsorted_indexed_a = list(reversed(sorted(indexed_a)))\n\nsorted_a = list(reversed(sorted(a)))\n\npartition = list(sorted([y for x,y in sorted_indexed_a[:(m*k)]]))\nprint(sum(sorted_a[:(m*k)]))\nresult = [x + 1 for x in partition[(m-1)::m]]\nprint(' '.join([ str(x) for x in result[:-1]]))\n", "# -*- coding: utf-8 -*-\n# @Time    : 2019/2/10 22:11\n# @Author  : LunaFire\n# @Email   : gilgemesh2012@gmail.com\n# @File    : B. Yet Another Array Partitioning Task.py\n\n\ndef main():\n    n, m, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    ret = sum(a)\n\n    index = list(range(n))\n    index.sort(key=lambda i: a[i])\n    rm_flag = [False] * n\n    for i in range(n - m * k):\n        rm_flag[index[i]] = True\n        ret -= a[index[i]]\n\n    pos, cnt = [], 0\n    for i in range(n):\n        if not rm_flag[i]:\n            cnt += 1\n            if cnt == m:\n                pos.append(i + 1)\n                cnt = 0\n                if len(pos) == k - 1:\n                    break\n\n    print(ret)\n    print(*pos)\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "'''input\n2 1 2\n-1000000000 1000000000\n\n9 2 3\n5 2 5 2 4 1 1 3 2\n6 1 4\n4 1 3 2 2 3\n'''\nn, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = sorted([(a[i], i) for i in range(n)])\nok = [0] * n\nans = 0\nfor x, i in b[-k * m:]:\n\tok[i] = 1\n\tans += x\n# print(ok)\nt = 0\nli = []\nfor i in range(n):\n\tt += ok[i]\n\tif ok[i] and t % m == 0:\n\t\tli += [i + 1]\nprint(ans)\nprint(*li[:-1])\n", "import bisect\n\nn, m, k = list(map(int, input().strip().split()))\narray = list(map(int, input().strip().split()))\n\nnew_array = [(v, idx) for idx, v in enumerate(array)]\nnew_array.sort()\n\nto_select = new_array[-m*k:]\n\nto_select = [(b, a) for a, b in to_select]\nto_select.sort()\n\nres = 0\ncurr_m = 0\npartitions = []\nfor pos, val in to_select:\n\tres += val\n\tcurr_m += 1\n\tif curr_m == m:\n\t\tpartitions.append(str(pos+1))\n\t\tcurr_m = 0\n\n\nprint(res)\nprint(\" \".join(partitions[:-1]))\n\n"]