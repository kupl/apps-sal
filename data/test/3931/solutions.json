["def main():\n  trips, reg, cheap, cards, card_cost = list(map(int, input().split()))\n\n  costs = []\n  indexes = {}\n  total = 0\n  last = \"\"\n\n  for i in range(trips):\n    a, b = input().split()\n    pair = (min(a, b), max(a, b))\n\n    if pair in indexes:\n      index = indexes[pair]\n    else:\n      costs.append(0)\n      indexes[pair] = len(costs) - 1\n      index = len(costs) - 1\n\n    total += (cheap if a == last else reg)\n    costs[index] += (cheap if a == last else reg)\n    last = b\n\n  costs = sorted(costs, reverse = True)\n\n  for c in costs:\n    if c < card_cost or cards <= 0:\n      break\n    total -= c\n    total += card_cost\n    cards -= 1\n\n  print(total)\n\nmain()\n", "n,a,b,k,f = [int(i) for i in input().split()]\npred = \"_\"\nd = dict()\nfor i in range(n):\n    s1, s2 = [i for i in input().split()]\n    pr = a\n    if s1 == pred:\n        pr = b\n\n    if (s1, s2) in list(d.keys()):\n        d[(s1, s2)] += pr\n    elif (s2, s1) in list(d.keys()):\n        d[(s2, s1)] += pr\n    else:\n        d[(s1, s2)] = pr\n\n    pred = s2\n    \ncn = k\nans = sum(d.values())\nfor i in sorted(list(d.values()), reverse = True):\n    if cn == 0 or i <= f:\n        break\n    ans = ans - i + f\n    cn -= 1\n\nprint(ans)\n    \n", "n, a, b, k, f = map(int, input().split())\n\nslov = dict()\ntemp = input().split()\nslov[frozenset(temp)] = a\n\nfor i in range(1, n):\n    temp2 = input().split()\n    try:\n        if temp2[0] == temp[1]:\n            slov[frozenset(temp2)] += b\n        else:\n            slov[frozenset(temp2)] += a\n    except KeyError:\n        if temp2[0] == temp[1]:\n            slov[frozenset(temp2)] = b\n        else:\n            slov[frozenset(temp2)] = a\n    temp = temp2\n\ncosts = sorted(list(slov.values()), reverse=True)\n\nfor i in range(min(k, len(costs))):\n    if costs[i] > f:\n        costs[i] = f\n    else:\n        break\n\nprint(sum(costs))", "n, a, b, k, f = [int(i) for i in input().split()]\nstops = dict()\nprev = \"\"\nans = 0\nfor i in range(n):\n    x, y = [i for i in input().split()]\n    price = a\n    if x == prev:\n        price = b\n    prev = y\n    p, q = (min(x,y), max(x,y))\n    if (p, q) in stops:\n        stops[(p,q)] += price\n    else:\n        stops[(p,q)] = price\n    ans += price\nedge_cost = sorted([stops[key] for key in stops], reverse = True)\nfor i in edge_cost:\n    if k > 0 and f < i:\n        ans  = ans - i + f\n    else:\n        break\n    k -= 1\nprint(ans)\n", "import heapq\nimport sys\n\nnum_trips, a, b, k, f = sys.stdin.readline().strip().split(\" \")\na, b, k, f = int(a), int(b), int(k), int(f)\n#print(a, b, k, f)\ntrips = []\nfor line in sys.stdin:\n  trips.append(line.strip().split(\" \"))\n  \n\"\"\"\na = 5\nb = 3\nk = 1\nf = 8\n\ntrips = [[\"BerBank\", \"University\"],\n[\"University\", \"BerMall\"],\n[\"University\", \"BerBank\"],\n[\"University\", \"BerBank\"]]\n\n\"\"\"\n\nmy_dict = dict()\nfor i in range(0, len(trips)):\n  trip = trips[i]\n  cost = 0\n  if(i - 1 >= 0 and trips[i - 1][1] == trip[0]):\n    cost = b;\n  else:\n    cost = a\n  if (str(sorted(trip)) in my_dict):\n    my_dict[str(sorted(trip))] += cost\n  else:\n    my_dict[str(sorted(trip))] = cost\n    \nheap = [(-1 * my_dict[x], x) for x in my_dict]\nheapq.heapify(heap)\n\n#print(heap)\ntotal = sum(int(my_dict[x]) for x in my_dict)\nfor i in range(0, k):\n  if(len(heap) > 0):\n    cur_max = int(heapq.heappop(heap)[0]) * -1\n    if (cur_max > f):\n      total = total - (cur_max - f)\n\nprint(total)\n", "n, a, b, k, f = list(map(int, input().split()))\ntotalCost = {}\nlastStop = ''\ntotal = 0\nfor i in range(n):\n    s1, s2 = input().split()\n    cost = a if lastStop != s1 else b\n    key = (min(s1, s2), max(s1, s2))\n    if key not in totalCost:\n        totalCost[key] = cost\n    else:\n        totalCost[key] += cost\n    total += cost\n    lastStop = s2\n\nsortedTotalCost = [(totalCost[key], key[0], key[1]) for key in totalCost]\nsortedTotalCost.sort(reverse=True)\n\ni = 0\nwhile i < len(sortedTotalCost) and k > 0 and sortedTotalCost[i][0] > f:\n    total -= sortedTotalCost[i][0]\n    total += f\n    k -= 1\n    i += 1\nprint(total)\n"]