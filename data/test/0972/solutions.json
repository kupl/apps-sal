["def f():\n    n, m = map(int, input().split())\n    t = [input() for j in range(n)]\n\n    p = [''.join(i) for i in zip(*t)]\n    if h(p): return 1\n\n    i = 0\n    while i < n and not 'B' in t[i]: i += 1\n\n    while i < n:\n        a = t[i].find('B')\n        if a < 0:\n            i += 1\n            break\n        b = t[i].rfind('B')\n        if 'W' in t[i][a: b + 1]: return 1\n\n        for j in range(i + 1, n):\n            if a > 0 and t[j][a - 1] == 'B' and t[j][b] == 'W': return 1\n            if b < m - 1 and t[j][b + 1] == 'B' and t[j][a] == 'W': return 1\n        i += 1\n\n    while i < n:\n        if 'B' in t[i]: return 1\n        i += 1    \n\n    return 0  \n            \ndef h(t):\n    i, n = 0, len(t)\n    while i < n and not 'B' in t[i]: i += 1\n\n    while i < n:\n        a = t[i].find('B')\n        if a < 0:\n            i += 1\n            break\n        b = t[i].rfind('B')\n        if 'W' in t[i][a: b + 1]: return 1\n        i += 1\n\n    while i < n:\n        if 'B' in t[i]: return 1\n        i += 1    \n\n    return 0          \n    \nprint('YNEOS'[f():: 2])", "n, m = map(int, input().split())\nz = [[] for i in range(n+1)]\n\nfor i in range(n):\n    a = input()\n    for j in a:\n        z[i].append(j)\n\ndef solve(n, m):\n    for i in range(n):\n        cnt = 0\n        for j in range(1, m):\n            if z[i][j] != z[i][j - 1]:\n                cnt += 1\n        if cnt > 2:\n            return 1\n        if cnt == 2 and z[i][0] == 'B':\n            return 1\n\n    for j in range(m):\n        cnt = 0\n        for i in range(1, n):\n            if z[i][j] != z[i-1][j]:\n                cnt += 1\n        if cnt > 2:\n            return 1\n        if cnt == 2 and z[0][j] == 'B':\n            return 1\n    for i in range(n):\n        for j in range(m):\n            if z[i][j] == 'B':\n                for x in range(i, n):\n                    for y in range(m):\n                        if z[x][y] == 'B':\n                            if z[i][y]=='W' and z[x][j]=='W':\n                                return 1\n    return 0\n\nprint(['YES','NO'][solve(n, m)])", "def f():\n\n    n, m = list(map(int, input().split()))\n\n    t = [input() for j in range(n)]\n\n\n\n    p = [''.join(i) for i in zip(*t)]\n\n    if h(p): return 1\n\n\n\n    i = 0\n\n    while i < n and not 'B' in t[i]: i += 1\n\n\n\n    while i < n:\n\n        a = t[i].find('B')\n\n        if a < 0:\n\n            i += 1\n\n            break\n\n        b = t[i].rfind('B')\n\n        if 'W' in t[i][a: b + 1]: return 1\n\n\n\n        for j in range(i + 1, n):\n\n            if a > 0 and t[j][a - 1] == 'B' and t[j][b] == 'W': return 1\n\n            if b < m - 1 and t[j][b + 1] == 'B' and t[j][a] == 'W': return 1\n\n        i += 1\n\n\n\n    while i < n:\n\n        if 'B' in t[i]: return 1\n\n        i += 1    \n\n\n\n    return 0  \n\n            \n\ndef h(t):\n\n    i, n = 0, len(t)\n\n    while i < n and not 'B' in t[i]: i += 1\n\n\n\n    while i < n:\n\n        a = t[i].find('B')\n\n        if a < 0:\n\n            i += 1\n\n            break\n\n        b = t[i].rfind('B')\n\n        if 'W' in t[i][a: b + 1]: return 1\n\n        i += 1\n\n\n\n    while i < n:\n\n        if 'B' in t[i]: return 1\n\n        i += 1    \n\n\n\n    return 0          \n\n    \n\nprint('YNEOS'[f():: 2])\n\n\n\n# Made By Mostafa_Khaled\n", "n,m = list(map(int, input().split()))\n\nrow, col_sum, row_sum, black = [], [], [], []\nfor i in range(n):\n    row.append(input())\n    t = [0]\n    for j in range(m):\n        t += [t[j] + (row[i][j] == 'B')]\n    row_sum += [t]\n\nd = [[0,1], [1,0], [-1,0], [0,-1]]\nfor i in range(n):\n    for j in range(m):\n        if row[i][j] is 'W':\n            continue\n        w = 0\n        for di in d:\n            x = i + di[0]\n            y = j + di[1]\n            if x < 0 or y < 0 or x >= n or y >= m: \n                w += 1 ; continue\n            if row[x][y] is 'W': \n                w += 1\n        if w > 0: black.append((i,j))    \nfor i in range(m):\n    t = [0]\n    for j in range(n):\n        t += [t[j] + (row[j][i] == 'B')]\n    col_sum += [t]\n\ndef row_check(r, s, e):\n    if s > e: e, s = s, e\n    return row_sum[r][e + 1] - row_sum[r][s] == e - s + 1\n\ndef col_check(c, s, e):\n    if s > e: e,s = s,e\n    return col_sum[c][e + 1] - col_sum[c][s] == e - s + 1\n\nres = True\nfor i in black:\n    for j in black:\n        if i <= j:\n            continue\n        a = row_check(i[0], i[1], j[1]) and col_check(j[1], i[0], j[0])\n        b = row_check(j[0], i[1], j[1]) and col_check(i[1], i[0], j[0])\n        res = res and (a or b)\nprint('YES' if res else 'NO')\n", "#author: riyan\n\ndef solve(n, m):\n    grid = []\n    for i in range(n):\n        grid.append(input().strip())\n        cnt = 0\n        for j in range(1, m):\n            if grid[i][j] != grid[i][j - 1]:\n                cnt += 1\n        if (cnt > 2) or (cnt == 2 and grid[i][0] == 'B'):\n            #print('row2 check, cnt = ', cnt)\n            return False\n        \n    for j in range(m):\n        cnt = 0\n        for i in range(1, n):\n            #print(i, j, grid[i][j])\n            if grid[i][j] != grid[i - 1][j]:\n                cnt += 1\n        if (cnt > 2) or (cnt == 2 and grid[0][j] == 'B'):\n            #print('col2 check, cnt = ', cnt)\n            return False\n\n    bps = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                bp1 = (i, j)\n                for k in range(len(bps)):\n                    bp2 = bps[k]\n                    if not ( (grid[bp1[0]][bp2[1]] == 'B') or (grid[bp2[0]][bp1[1]] == 'B') ):\n                        #print(bp1, bp2)\n                        return False\n                bps.append((i, j))\n                \n    return True\n\ndef __starting_point():\n    n, m = list(map(int, input().strip().split()))\n \n    ans = solve(n, m)\n\n    if ans:\n        print('YES')\n    else:\n        print('NO')\n\n\n__starting_point()", "#author: riyan\n\ndef solve(n, m):\n    grid = []\n    for i in range(n):\n        grid.append(input().strip())\n        cnt = 0\n        for j in range(1, m):\n            if grid[i][j] != grid[i][j - 1]:\n                cnt += 1\n        if (cnt > 2) or (cnt == 2 and grid[i][0] == 'B'):\n            #print('row2 check, cnt = ', cnt)\n            return False\n        \n    for j in range(m):\n        cnt = 0\n        for i in range(1, n):\n            #print(i, j, grid[i][j])\n            if grid[i][j] != grid[i - 1][j]:\n                cnt += 1\n        if (cnt > 2) or (cnt == 2 and grid[0][j] == 'B'):\n            #print('col2 check, cnt = ', cnt)\n            return False\n\n    bps = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                bp1 = (i, j)\n                for k in range(len(bps)):\n                    bp2 = bps[k]\n                    if not ( (grid[bp1[0]][bp2[1]] == 'B') or (grid[bp2[0]][bp1[1]] == 'B') ):\n                        #print(bp1, bp2)\n                        return False\n                bps.append((i, j))\n                \n    return True\n\ndef __starting_point():\n    n, m = list(map(int, input().strip().split()))\n \n    ans = solve(n, m)\n\n    if ans:\n        print('YES')\n    else:\n        print('NO')\n\n\n__starting_point()", "n, m = list(map(int, input().split()))\nc = [input() for _ in ' ' * n]\ndef sol(n, m):\n    for i in range(n):\n        count = 0\n        for j in range(1, m):\n            if c[i][j] != c[i][j - 1]:\n                count += 1\n        if count > 2:\n            return False\n        if count == 2 and c[i][0]=='B':\n            return False\n\n    for j in range(m):\n        count = 0\n        for i in range(1, n):\n            if c[i][j] != c[i - 1][j]:\n                count += 1\n        if count > 2:\n            return False\n        if count == 2 and c[0][j]=='B':\n            return False\n\n    for i in range(n):\n        for j in range(m):\n            if c[i][j] == 'B':\n                for x in range(i, n):\n                    for y in range(m):\n                        if c[x][y] == 'B':\n                            if c[i][y] == 'W' and c[x][j] == 'W':\n                                return False\n    return True\n\n\nprint('NYOE S'[sol(n, m)::2])\n", "n, m = list(map(int, input().split()))\nc = [input() for _ in ' ' * n]\ndef sol(n, m):\n    for i in range(n):\n        count = 0\n        for j in range(1, m):\n            if c[i][j] != c[i][j - 1]:\n                count += 1\n        if count > 2:\n            return False\n        if count == 2 and c[i][0]=='B':\n            return False\n\n    for j in range(m):\n        count = 0\n        for i in range(1, n):\n            if c[i][j] != c[i - 1][j]:\n                count += 1\n        if count > 2:\n            return False\n        if count == 2 and c[0][j]=='B':\n            return False\n\n    for i in range(n):\n        for j in range(m):\n            if c[i][j] == 'B':\n                for x in range(i, n):\n                    for y in range(m):\n                        if c[x][y] == 'B':\n                            if c[i][y] == 'W' and c[x][j] == 'W':\n                                return False\n    return True\n\n\nprint('NYOE S'[sol(n, m)::2])\n"]