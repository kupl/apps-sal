["import sys\n\nn, k = list(map(int, input().split(' ')))\n\ns = input()\n\ndef max_streak(s):\n    result = 0\n\n    for i in range(len(s)):\n        j = i\n        while j < len(s) and s[j] == 'N':\n            j += 1\n\n        result = max(result, j - i)\n\n    return result\n\nfor i in range(n - k + 1):\n    cur = list(s)\n    for j in range(i, i + k):\n        if cur[j] == '?':\n            cur[j] = 'N'\n\n    for j in range(i):\n        if cur[j] == '?':\n            cur[j] = 'Y'\n\n    for j in range(i + k, n):\n        if cur[j] == '?':\n            cur[j] = 'Y'\n\n    if max_streak(cur) == k:\n        print('YES')\n        return\n\nprint('NO')\n", "n, k = list(map(int, input().split()))\ns = input()\n\ncnt, mx = 0, 0\n\nfor i in range(n):\n    if s[i] == \"N\":\n        cnt += 1\n    else:\n        cnt = 0\n    mx = max(mx, cnt)\n    \nif mx > k:\n    print(\"NO\\n\")\n    return\n\nfor r in range(k, n + 1):\n    l = r - k\n    if l > 0 and s[l - 1] == \"N\":\n        continue\n    if r < n and s[r] == \"N\":\n        continue\n    \n    bad = False\n    \n    for i in range(l, r):\n        if s[i] == \"Y\":\n            bad = True\n            break\n        \n    if not bad:\n        print(\"YES\\n\")\n        return\n\nprint(\"NO\\n\")\n", "n, k = map(int, input().split())\nk = int(k)\ns = input()\ns = \"Y\" + s + \"Y\"\nres = \"NO\"\ncnt = 0\ncan = True\nfor ch in s:\n    if(ch == 'N'):\n        cnt += 1\n        if(cnt > k):\n            can = False\n    else:\n        cnt = 0\n\nfor i in range(1,n+1):\n    if(i + k - 2 < n):\n        subs = s[i:i+k]\n        # print(subs)\n        flag = True\n        for ch in subs:\n            if(not ch in \"N?\"):\n                flag = False\n        if((s[i-1] in \"Y?\" and s[i+k] in \"Y?\") and flag):\n            res = \"YES\"\n            # print(s[i-1], subs, s[i+k])\nif can:\n    print(res)\nelse:\n    print(\"NO\")", "n, k = list(map(int, input().split()))\ns = list(input())\nans = False\n\nfor i in range(len(s) - k + 1):\n    flag = True\n    for j in range(i, i + k):\n        if (s[j] == 'Y'):\n            flag = False\n            break\n    if ((i + k) < len(s)) and s[i + k] == 'N': flag = False\n    if (i > 0) and (s[i - 1] == 'N'): flag = False\n    #print(i, flag)\n    if (flag):\n        ans = True\n        break\n    \nmaximum = 0\ni = 0\nwhile (i < len(s)):\n    now = 0\n    while (s[i] != 'N'):\n        i += 1\n        if (i >= len(s)):\n            break\n    if (i >= len(s)): break\n    while (i < len(s)) and (s[i] == 'N'):\n        i += 1\n        now += 1\n    maximum = max(maximum, now)\n    \nif ans and (maximum <= k):\n    print('YES')\nelse: print('NO')\n", "n, k = map(int, input().split())\nstring = input()\nseries = []\nnow = \"\"\nfor elem in string:\n    if elem == \"Y\":\n        if now:\n            series.append(now)\n        now = \"\"\n    else:\n        now += elem\nif now:\n    series.append(now)\n\nanswer = False\nno_max = True\nif not k:\n    for elem in series:\n        if elem.count('N'):\n            answer = True\n            \n    print(\"YES\" if not answer else \"NO\")\nelse:\n    for elem in series:\n        m = len(elem)\n        for i in range(m - k + 1):\n            if (not i or elem[i - 1] == '?') and ((i + k - 1) == m - 1 or elem[i + k] == '?'):\n                answer = True\n        \n        counter = 0\n        for letter in elem:\n            if letter == 'N':\n                counter += 1\n                if counter > k:\n                    no_max = False\n            else:\n                counter = 0\n               \n    print(\"YES\" if answer and no_max else \"NO\")", "n, m = list(map(int, input().split()))\ns = input()\ncnt = int(0)\nfor ch in s:\n    if ch == 'N':\n        cnt += 1\n    elif cnt > m:\n        print(\"NO\")\n        return;\n    else:\n        cnt = int(0)\nif cnt > m:\n    print(\"NO\")\n    return;\ns = \"Y\"+s\nfor i in range(0, n+1):\n    if s[i] == '?' or s[i] == 'Y':\n        cnt = int(0)\n        for j in range(i+1, n+1):\n            #print(i, j, cnt, end = \"\\n\")\n            if s[j] == 'Y':\n                if cnt == m:\n                    print(\"YES\")\n                    return\n                break\n            if s[j] == '?':\n                if cnt == m:\n                    print(\"YES\")\n                    return\n            cnt += 1\n        if cnt == m:\n            print(\"YES\")\n            return\nprint(\"NO\")", "from sys import stdin\nfrom functools import lru_cache\nfrom collections import defaultdict\ninfile = stdin\nN, K = map(int, infile.readline().split())\nwatched = infile.readline().strip()\n\nmem = set()\nmem.add((0,0,0))\nfor i, letter in enumerate(watched):\n    for d in range(K+1):\n        for c in range(K+1):\n            if (i,d,c) in mem:\n                if letter in ('N', '?'):\n                    mem.add((i+1, max(d, c+1), c+1))\n                if letter in ('Y', '?'):\n                    mem.add((i+1, d, 0))\n\ndef good():\n    for i,d,c in mem:\n        if i == N and d == K:\n            return 'YES'\n    return 'NO'\n\n\nprint(good())", "# from Crypto.Util.number import *\n# from Crypto.PublicKey import RSA\n# from Crypto.Cipher import PKCS1_OAEP\n#\n#\n# def gcd(a, b):\n#     if a == 0:\n#         return b, 0, 1\n#     d, x1, y1 = gcd(b % a, a)\n#     x = y1 - (b // a) * x1\n#     y = x1\n#     return d, x, y\n#\n#\n# def find_private_key(p, q, e):\n#     f = (p - 1) * (q - 1)\n#     d = gcd(e, f)[1]\n#     while d < 0:\n#         d += f\n#     return d\n#\n#\n# n = 114603416258617277914112950886933842277017613048768896986887063295795075651032133331342538430388087616693581335924733790772692053706860660493046367184589390096319068611843480381499933909451620838321468620579057390519217231379164202675046840772638142625114303262708400933811096588213415014292281310788830121449\n#\n# q = 8931970881300680082796820734365022222452747937209215859340339248013322229502496422895802649243487560690551112016430906973314030768362034269763079075131391\n#\n# p = 12830697477814509540399242283518279629025340392811455061638565349197540239841408191167449256086467748949090279070442786996339222196995600246150833643209239\n#\n# e = 78078409585916972042386784533013985111341440946219174025831418904974306682701\n#\n# f = 114603416258617277914112950886933842277017613048768896986887063295795075651032133331342538430388087616693581335924733790772692053706860660493046367184589368333650709496653857185436916026149769360233138599908136411614620020516694858770432777520732812669804663621317314060117126934960449656657765396876111780820\n#\n# d = 95617909040393155444786936446642179824041050920013801086828472351343249663960737590719979187458429568264589317317553181803837347371438624774016758221657991995265788792118497392951947899512373618098318332328397239065334523447713343639400315086378757038001615086063906730779984567240713176171007926923058722581\n#\n# rsa = RSA.construct((n, e, d))\n#\n#\n# #key = RSA.importKey(open('11.txt', 'r').read())\n# key = RSA.importKey(open('public_key', 'r').read())\n#\n# print(key.__dict__)\n#\n# n = 5629218730419894595823026663331501597897818160771697280840122531313799328035654852733468829411876184951508514832506002593002170978628016095067716010208905588870963783855109137307480667920058731486899983319164243850148229252772614367640165351224879369373847162133237931086116505957707781534245331485441\n# p = 2372597464893675257469711937093671629348264195072192501684944517176070474701064022851367306150417447503454422147341366642712704243329694637078892947639\n# q = n // p\n# e = 17\n#\n# d = find_private_key(p, q, e)\n#\n# encrypted = 1111861507760457047964156325933048837925622938918416900082721305322555941153755195985545404321101492441045781915244282849548935206776118071569007445626459132036648013508921232096378109573160336245447392600788211167388900011173139344891307651852665571685713133157519571136012382352182349879574471249590\n# result = pow(encrypted, d, n)\n#\n# result = hex(result)[2:]\n#\n# ans = b''\n# for i in range(0, len(result), 2):\n#     ans += bytes([int(result[i:i+2], 16)])\n#\n# print(ans)\n#\n# return\n#\n# key = RSA.construct((n, e, d))\n#\n# with open('22.txt', 'wb') as fi:\n#     fi.write(key.exportKey('PEM'))\n#\n# print('d =', d)\n\n\n\n\n\n# import time\n# import requests\n#\n# url = 'http://sql.training.hackerdom.ru/10lastlevel.php?text='\n# condition = 'ORD(SUBSTRING(COLUMN_NAME, {}, 1)) = {}'\n# query = \"IF(ORD(SUBSTRING(chocolate, {}, 1)) = {}, SLEEP(1), 1) FROM davidblayne;\"\n# pos = 1\n# sleep_time = 1\n# a = {''}\n#\n# s = ''\n# for i in range(1, 30):\n#     for c in range(32, 128):\n#         start = time.time()\n#         requests.get(url + query.format(i, c))\n#         end = time.time()\n#\n#         d = end - start\n#\n#         if d >= sleep_time:\n#             print(chr(c))\n#             s += chr(c)\n#             break\n#     else:\n#         break\n#\n# print(s)\n\ndef calc(s):\n    max_len = 0\n    cur_len = 0\n    for i in range(len(s)):\n        if s[i] == 'N':\n            cur_len += 1\n        else:\n            cur_len = 0\n        max_len = max(max_len, cur_len)\n    return max_len\n\n\nn, k = list(map(int, input().split()))\ns = input()\n\nif calc(s) > k:\n    print('NO')\n    return\n\nstart = 0\nwhile start + k - 1 < len(s):\n    good = True\n    for i in range(start, start + k):\n        if s[i] == 'Y':\n            good = False\n            break\n    if start - 1 >= 0 and s[start - 1] == 'N':\n        good = False\n    if start + k < len(s) and s[start + k] == 'N':\n        good = False\n    if good:\n        print('YES')\n        return\n    start += 1\n\nprint('NO')\n"]