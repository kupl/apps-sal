["import sys\nimport threading\nfrom bisect import bisect_left\n\nn   = int(input())\na   = list(map(int, input().split()))\ne   = {}\ng   = [[] for i in range(n)]\nd   = [0]*(n+5)\nans = [0]*n\np   = [0]*(n+5)\n\nfor i in range(n-1):\n        c, w = map(int, input().split())\n        c-= 1\n        g[c].append(i+1)\n        e[i+1] = w\n\ndef dfs(i, h):\n    nonlocal ans, a, e, g, d, p\n    p[h]=0\n    for j in g[i]:\n        d[h+1] = d[h]+e[j] \n        dfs(j, h+1)\n    x = bisect_left(d, d[h]-a[i], 0, h+1)\n    #print(x-1, i, h, d[h], d[h], a[i])\n    if x>=0:\n        p[x-1]-=1\n    p[h-1]+=p[h]+1\n    ans[i]=p[h]\n\n\n\ndef solve():  \n    nonlocal ans\n    dfs(0, 0)\n    print(' '.join(map(str, ans)))\n\nmax_recur_size = 10**5*2 + 1000\nmax_stack_size = max_recur_size*500\nsys.setrecursionlimit(max_recur_size)\nthreading.stack_size(max_stack_size)\nthread = threading.Thread(target=solve)\nthread.start()"]