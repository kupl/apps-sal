["import sys\ninput=sys.stdin.readline\n\nT=int(input())\nfor _ in range(T):\n    n,m=list(map(int,input().split()))\n    A=list(map(int,input().split()))\n    s=sum(A)\n    if (s==m):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "for _ in range(int(input())):\n    n,m = map(int,input().split())\n    List = [int(x) for x in input().split()]\n    if(sum(List) == m):\n        print(\"YES\")\n    else:\n        print(\"NO\")", "t = int(input())\nfor _ in range(t):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if sum(a) == m:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "from sys import stdin, stdout\ninput = stdin.readline\nfrom collections import defaultdict as dd\nimport math\ndef geti(): return list(map(int, input().strip().split()))\ndef getl(): return list(map(int, input().strip().split()))\ndef gets(): return input()\ndef geta(): return int(input())\ndef print_s(s): stdout.write(s+'\\n')\n\ndef solve():\n    for _ in range(geta()):\n        n,m=geti()\n        a=getl()\n        if sum(a)==m:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    n,m=map(int,input().split())\n    a=list(map(int,input().split()))\n    if sum(a)==m:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "#   ==========     //\\\\       //||     ||====//||\n#       ||        //  \\\\        ||     ||   // ||\n#       ||       //====\\\\       ||     ||  //  ||\n#       ||      //      \\\\      ||     || //   ||\n#   ========== //        \\\\  ========  ||//====|| \n#  code\n\ndef solve():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if sum(a) == m:\n        print('YES')\n    else:\n        print('NO')\n\n\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\n\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n,m = list(map(int,input().split()))\n    a = list(map(int,input().split()))\n    if m==sum(a):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "for t in range(int(input())):\n    n, m = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    if sum(nums) ==m:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "a=int(input())\nfor i in range(a):\n    x,y=list(map(int,input().split()))\n    z=list(map(int,input().split()))\n    if(sum(z)==y):\n        print('YES')\n    else:\n        print('NO')\n        \n", "from sys import stdin, stdout\nt=int(stdin.readline())\nfor i in range(t):\n\tn,m=list(map(int,stdin.readline().split()))\n\tarr=list(map(int,stdin.readline().split()))\n\tif sum(arr)==m:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n", "# map(int, input().split())\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    if sum(a) == m:\n        print('YES')\n    else:\n        print('NO')\n\n\nrw = int(input())\nfor wewq in range(rw):\n    main()", "# Anything is possible when you are inner peace. Master Shifu (Kung Fun Panda)\n# by : Blue Edge - Create some chaos\n\nfor _ in range(int(input())):\n    n,m=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    print([\"YES\",\"NO\"][sum(a)!=m])\n", "import sys\nimport re\nimport random\nimport math\nimport copy\nfrom heapq import heappush, heappop, heapify\nfrom functools import cmp_to_key\nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict, deque, Counter\n# sys.setrecursionlimit(1000000)\n\n# input aliases\ninput = sys.stdin.readline\ngetS = lambda: input().strip()\ngetN = lambda: int(input())\ngetList = lambda: list(map(int, input().split()))\ngetZList = lambda: [int(x) - 1 for x in input().split()]\n\nINF = float(\"inf\")\nMOD = 10**9 + 7\ndivide = lambda x: pow(x, MOD-2, MOD)\n\n\ndef calc(arr, idx):\n    ret = 0\n    for i in range(len(arr)):\n        if idx == 0:\n            break\n        if idx & 1:\n            ret += arr[i]\n        idx >>= 1\n\n    return ret\n\ndef get_all_comb(arr):\n    n = len(arr)\n    ret = []\n    for idx in range(1 << n):\n        ret.append(calc(arr, idx))\n\n    return ret\n\ndef solve():\n    n, m =getList()\n    li = getList()\n\n    if sum(li) == m:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n\n    return\ndef __starting_point():\n    main()\n    # solve()\n\n__starting_point()", "t = int(input())\nfor _ in range(t):\n\tn, m = map(int, input().split())\n\tarr = [int(j) for j in input().split()]\n\tif sum(arr) == m:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")", "def __starting_point():\n    t = int(input())\n    while t:\n        t -= 1\n        n, m = map(int, input().split())\n        a = [int(x) for x in input().split()]\n        sum = 0\n        for i in a:\n            sum += i\n        if sum == m:\n            print('YES')\n        else:\n            print('NO')\n__starting_point()", "def solve():\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if sum(a) == m:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        solve()\n    return\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "for t in range(int(input())):\n\tn,m=[int(x) for x in input().split(' ')]\n\ta=[int(x) for x in input().split(' ')]\n\tss=sum(a)\n\tif(ss==m):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")", "def solve(n,m):\n    s=list(map(int,input().split()))\n    if sum(s)==m :\n        return 'YES'\n    return 'NO'\n\nfor _ in range(int(input())):\n    n,m=list(map(int,input().split()))\n    print(solve(n,m))\n\n", "ans = []\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    u = list(map(int, input().split()))\n    if sum(u) == m:\n        ans.append('YES')\n    else:\n        ans.append('NO')\nprint(*ans, sep='\\n')\n", "for _ in range(int(input())):\n    n,m=list(map(int,(input().split())))\n    arr=list(map(int,input().split()))\n    if sum(arr)==m:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\nimport string\n\n\nORDA = 97  # a\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return [int(i) for i in input().split()]\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\ndef divs(n, start=2):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0: return False\n    return True\ndef convn(number, base):\n    new_number = 0\n    while number > 0:\n        new_number += number % base\n        number //= base\n    return new_number\ndef cdiv(n, k): return n // k + (n % k != 0)\ndef ispal(s):\n    for i in range(len(s) // 2 + 1):\n        if s[i] != s[-i - 1]:\n            return False\n    return True\n\n\nfor _ in range(ii()):\n    n, m = mi()\n    a = li()\n    if sum(a) == m:\n        print(\"YES\")\n    else:\n        print('NO')", "for u in range(int(input())):\n    n, m = map(int, input().split())\n    x = [int(w) for w in input().split()]\n    \n    if(sum(x) == m):\n        print(\"YES\")\n        \n    else:\n        print(\"NO\")", "t = int(input())\nfor _ in range(t):\n    n,m = map(int, input().split())\n    l=list(map(int, input().split()))\n    if sum(l)==m:\n        print('YES')\n    else:\n        print('NO')", "t=int(input())\nfor i in range(t):\n    n,m=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    if sum(b)==m:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "t = int(input())\n\nfor i in range(t):\n    n, m = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n\n    summ = 0\n    for i in range(n):\n        summ += a[i]\n\n    if summ == m:\n        print('YES')\n    else:\n        print('NO')"]