["import sys\ninput = sys.stdin.readline\n\ntestcases=int(input())\n\nfor testcase in range(testcases):\n    n,m=list(map(int,input().split()))\n    MAP=[input().strip() for i in range(n)]\n    #print(MAP)\n\n    STR=[[] for i in range(26)]\n\n    for i in range(n):\n        for j in range(m):\n            if MAP[i][j]!=\".\":\n                STR[ord(MAP[i][j])-97].append([i,j])\n\n    #print(STR)\n\n    for s in range(25,-1,-1):\n        if STR[s]==[]:\n            continue\n        \n        x,y=STR[s][0]\n        z,w=STR[s][-1]\n        flag=1\n        \n        if x==z:\n            for k in range(y,w+1):\n                if MAP[x][k]>=chr(s+97):\n                    continue\n                else:\n                    flag=0\n                    break\n                \n            for u,v in STR[s]:\n                if u==x:\n                    continue\n                else:\n                    flag=0\n                    break\n\n        elif y==w:\n            for k in range(x,z+1):\n                if MAP[k][y]>=chr(s+97):\n                    continue\n                else:\n                    flag=0\n                    break\n                \n            for u,v in STR[s]:\n                if v==y:\n                    continue\n                else:\n                    flag=0\n                    break\n\n        else:\n            flag=0\n\n        if flag==0:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n\n        for s in range(25,-1,-1):\n            if STR[s]!=[]:\n                ANS=s+1\n                ANONE=STR[s][0]\n                print(ANS)\n                break\n        else:\n            print(0)\n            continue\n\n        for ans in range(ANS):\n            if STR[ans]!=[]:\n                print(STR[ans][0][0]+1,STR[ans][0][1]+1,STR[ans][-1][0]+1,STR[ans][-1][1]+1)\n            else:\n                print(ANONE[0]+1,ANONE[1]+1,ANONE[0]+1,ANONE[1]+1)\n\n        \n\n            \n                \n            \n            \n\n        \n            \n", "import sys\ninput = sys.stdin.readline\n\nT = int(input())\nfor _ in range(T):\n    N, M = list(map(int, input().split()))\n    mar = [-1] * 26\n    mir = [2000] * 26\n    mac = [-1] * 26\n    mic = [2000] * 26\n    \n    X = [[-1 if a == \".\" else ord(a)-97 for a in input()] for i in range(N)]\n    R = [[a+1 for a in range(M)] for _ in range(N)]\n    D = [[i+1]*M for i in range(N)]\n    \n    # print(X)\n    ma = -1\n    for i in range(N):\n        for j in range(M):\n            k = X[i][j]\n            if k >= 0:\n                mar[k] = max(mar[k], i)\n                mir[k] = min(mir[k], i)\n                mac[k] = max(mac[k], j)\n                mic[k] = min(mic[k], j)\n                ma = max(ma, k)\n    f = 0\n    ans = 1\n    ANS = []\n    for k in range(ma+1)[::-1]:\n        if f and mar[k] == -1 and mir[k] == 2000:\n            ANS.append(ANS[-1])\n        elif mar[k] == mir[k]:\n            r = mar[k]\n            c = mic[k]\n            while c <= mac[k]:\n                if X[r][c] < k:\n                    ans = 0\n                    break\n                c = R[r][c]\n            else:\n                ANS.append((r+1, mic[k]+1, r+1, mac[k]+1))\n            R[r][mic[k]] = mac[k] + 1\n            if ans == 0:\n                break\n            f = 1\n        elif mac[k] == mic[k]:\n            c = mac[k]\n            r = mir[k]\n            while r <= mar[k]:\n                if X[r][c] < k:\n                    ans = 0\n                    break\n                r = D[r][c]\n            else:\n                ANS.append((mir[k]+1, c+1, mar[k]+1, c+1))\n            D[mir[k]][c] = mar[k] + 1\n            if ans == 0:\n                break\n            f = 1\n        else:\n            ans = 0\n            break\n    if ans == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(len(ANS))\n        for a in ANS[::-1]:\n            print(*a)\n", "import sys\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    N, M = map(int, input().split())\n    mar = [-1] * 26\n    mir = [2000] * 26\n    mac = [-1] * 26\n    mic = [2000] * 26\n    \n    X = [[-1 if a == \".\" else ord(a)-97 for a in input()] for i in range(N)]\n    # print(X)\n    ma = -1\n    for i in range(N):\n        for j in range(M):\n            k = X[i][j]\n            if k >= 0:\n                mar[k] = max(mar[k], i)\n                mir[k] = min(mir[k], i)\n                mac[k] = max(mac[k], j)\n                mic[k] = min(mic[k], j)\n                ma = max(ma, k)\n    f = 0\n    ans = 1\n    ANS = []\n    for k in range(ma+1)[::-1]:\n        if f and mar[k] == -1 and mir[k] == 2000:\n            ANS.append(ANS[-1])\n        elif mar[k] == mir[k]:\n            r = mar[k]\n            for c in range(mic[k], mac[k]+1):\n                if X[r][c] < k:\n                    ans = 0\n                    break\n            else:\n                ANS.append((r+1, mic[k]+1, r+1, mac[k]+1))\n            if ans == 0:\n                break\n            f = 1\n        elif mac[k] == mic[k]:\n            c = mac[k]\n            for r in range(mir[k], mar[k]+1):\n                if X[r][c] < k:\n                    ans = 0\n                    break\n            else:\n                ANS.append((mir[k]+1, c+1, mar[k]+1, c+1))\n            if ans == 0:\n                break\n            f = 1\n        else:\n            ans = 0\n            break\n    if ans == 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(len(ANS))\n        for a in ANS[::-1]:\n            print(*a)", "import sys\ninput = iter(sys.stdin.read().splitlines()).__next__\n\nfrom collections import defaultdict as di\n\ndef solve():\n    n,m = map(int,input().split())\n    B = [input() for _ in range(n)]\n\n    pos = di(list)\n    for i in range(n):\n        b = B[i]\n        for j in range(m):\n            pos[b[j]].append((i,j))\n    if '.' in pos:\n        del pos['.']\n\n    C = [list('.'*m) for _ in range(n)]\n    moves = []\n\n    if pos:\n        mxx = max(pos)\n        for i in range(97,ord(mxx)+1):\n            c = chr(i)\n            if c not in pos:\n                pos[c] = pos[mxx]\n            P = pos[c]\n            if all(p[0] == P[0][0] for p in P):\n                mn = min(p[1] for p in P)\n                mx = max(p[1] for p in P)\n                i = P[0][0]\n                for j in range(mn,mx+1):\n                    C[i][j] = c\n                moves.append((i+1,mn+1,i+1,mx+1))\n            elif all(p[1] == P[0][1] for p in P):\n                mn = min(p[0] for p in P)\n                mx = max(p[0] for p in P)\n                j = P[0][1]\n                for i in range(mn,mx+1):\n                    C[i][j] = c\n                moves.append((mn+1,j+1,mx+1,j+1))\n    \n    if [''.join(s) for s in C] == B:\n        print('YES')\n        print(len(moves))\n        for m in moves:\n            print(*m)\n    else:\n        print('NO')\n\ndef main():\n    t = int(input())\n\n    for _ in range(t):\n        solve()\nmain()", "import sys\ndef solve():\n    H, W = map(int, sys.stdin.readline().split())\n    G = [[ord(s) - 46 for s in sys.stdin.readline().strip()] for _ in range(H)]\n    k = 0\n    inf = 10**9\n    Stbw = [-inf]*77\n    Stsw = [inf]*77\n    Stbh = [-inf]*77\n    Stsh = [inf]*77\n    for h, G1 in enumerate(G, 1):\n        k = max(k, max(G1))\n        for w, g in enumerate(G1, 1):\n            if not g:\n                continue\n            Stbw[g] = max(Stbw[g], w)\n            Stsw[g] = min(Stsw[g], w)\n            Stbh[g] = max(Stbh[g], h)\n            Stsh[g] = min(Stsh[g], h)\n    if k == 0:\n        return []\n    A = []\n    for j in range(k, 50, -1):\n        if Stbw[j] == -inf and Stbh[j] == -inf:\n            A.append(A[-1])\n            continue\n        bw = (Stbw[j] == Stsw[j])\n        bh = (Stbh[j] == Stsh[j])\n        if not bw and not bh:\n            return False\n        if bw:\n            w = Stbw[j]- 1\n            for h in range(Stsh[j]-1, Stbh[j]):\n                if G[h][w] < j:\n                    return False\n        elif bh:\n            h = Stbh[j]- 1\n            for w in range(Stsw[j]-1, Stbw[j]):\n                if G[h][w] < j:\n                    return False\n        A.append((Stsh[j], Stsw[j], Stbh[j], Stbw[j]))\n    \n    return A[::-1]\n    \ndef __starting_point():\n    T = int(input())\n    for _ in range(T):\n        ans = solve()\n        if ans is False:\n            print('NO')\n            continue\n        print('YES')\n        print(len(ans))\n        for a in ans:\n            print(*a)\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\ndef solve():\n    H, W = map(int, input().split())\n    G = [[ord(s) - 46 for s in input().strip()] for _ in range(H)]\n    Gy = list(map(list, zip(*G)))\n    k = 0\n    St = [None]*77\n    for h, G1 in enumerate(G, 1):\n        k = max(k, max(G1))\n        for w, g in enumerate(G1, 1):\n            if not g:\n                continue\n            if St[g] is None:\n                St[g] = (h, w)\n            elif type(St[g]) == tuple:\n                h1, w1 = St[g]\n                if h == h1:\n                    St[g] = h\n                elif w == w1:\n                    St[g] = -w\n                else:\n                    return False\n            else:\n                if St[g] == h or St[g] == -w:\n                    continue\n                return False\n    if k == 0:\n        return []\n    A = []\n    for j in range(k, 50, -1):\n        if St[j] is None:\n            A.append(A[-1])\n            continue\n        if type(St[j]) == tuple:\n            A.append(St[j]*2)\n            continue\n        x = St[j]\n        if x > 0:\n            Gh = G[x-1]\n            p = None\n            e = None\n            for ig, g in enumerate(Gh):\n                if g == j:\n                    p = ig\n                    break\n            for ig, g in enumerate(Gh[::-1]):\n                ig = W - 1 - ig\n                if g == j:\n                    e = ig\n                    break\n            for ig in range(p, e + 1):\n                if Gh[ig] < j:\n                    return False\n            A.append((x, p+1, x, e+1))\n        else:\n            Gw = Gy[-x-1]\n            p = None\n            e = None\n            for ig, g in enumerate(Gw):\n                if g == j:\n                    p = ig\n                    break\n            for ig, g in enumerate(Gw[::-1]):\n                ig = H - 1 - ig\n                if g == j:\n                    e = ig\n                    break\n            for ig in range(p, e + 1):\n                if Gw[ig] < j:\n                    return False\n            A.append((p+1, -x, e+1, -x))\n    \n    return A[::-1]\n    \ndef __starting_point():\n    T = int(input())\n    for _ in range(T):\n        ans = solve()\n        if ans is False:\n            print('NO')\n            continue\n        print('YES')\n        print(len(ans))\n        for a in ans:\n            print(*a)\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\nT = int(input())\nfor _ in range(T):\n    n, m = list(map(int, input().split()))\n    minx = {}\n    maxx = {}\n    miny = {}\n    maxy = {}\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input().strip()))\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!='.':\n                try:\n                    minx[matrix[i][j]] = min(minx[matrix[i][j]], j)\n                except: minx[matrix[i][j]] = j\n                try:\n                    maxx[matrix[i][j]] = max(maxx[matrix[i][j]], j)\n                except: maxx[matrix[i][j]] = j\n                try:\n                    miny[matrix[i][j]] = min(miny[matrix[i][j]], i)\n                except: miny[matrix[i][j]] = i\n                try:\n                    maxy[matrix[i][j]] = max(maxy[matrix[i][j]], i)\n                except: maxy[matrix[i][j]] = i\n    copy = []\n    for i in range(n):\n        copy.append([])\n        for j in range(m):\n            copy[-1].append('.')\n    for char in range(ord('a'), ord('z')+1):\n        char = chr(char)\n        try:\n            if minx[char]==maxx[char]:\n                c = minx[char]\n                for r in range(miny[char], maxy[char]+1):\n                    copy[r][c] = char\n            else:\n                r = miny[char]\n                for c in range(minx[char], maxx[char]+1):\n                    copy[r][c] = char\n        except: pass\n    if matrix==copy:\n        print(\"YES\")\n        cnt = -1\n        for char in range(ord('z'), ord('a')-1, -1):\n            char = chr(char)\n            try:\n                minx[char]+=0\n                break\n            except: pass\n        else: cnt = 0\n        if cnt!=0:\n            cnt = ord(char)-ord('a')+1\n        print(cnt)\n        ans = []\n        for char in range(ord('a'), ord('a')+cnt):\n            char = chr(char)\n            try:\n                ans.append((miny[char], minx[char], maxy[char], maxx[char]))\n            except: pass\n        i = 0\n        for char in range(ord('a'), ord('a')+cnt):\n            char = chr(char)\n            print(ans[i][0]+1, ans[i][1]+1, ans[i][2]+1, ans[i][3]+1)\n            try: minx[char]+=0; i+=1\n            except: pass\n    else:\n        print(\"NO\")\n", "import sys\n#sys.stdin = open('inE', 'r')\nt = int(input())\nfor ti in range(t):\n    n,m = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(input())\n    top = {}\n    bot = {}\n    l = {}\n    r = {}\n    res = True\n    for y in range(n):\n        for x in range(m):\n            c = a[y][x]\n            if c != '.':\n                if c not in top:\n                    top[c] = y\n                    bot[c] = y\n                    l[c] = x\n                    r[c] = x\n                else:\n                    if top[c] == y:\n                        r[c] = x\n                        xi = x - 1\n                        while xi >= 0 and a[y][xi] != c:\n                            if a[y][xi] == '.' or a[y][xi] < c:\n                                res = False\n                            xi -= 1\n                    elif l[c] == x and r[c] == x:\n                        bot[c] = y\n                        yi = y - 1\n                        while yi >= 0 and a[yi][x] != c:\n                            if a[yi][x] == '.' or a[yi][x] < c:\n                                res = False\n                            yi -= 1\n                    else:\n                        res = False\n    if len(top) == 0:\n        sys.stdout.write('YES\\n')\n        sys.stdout.write('0\\n')\n    elif res:\n        mxc = max(top)\n        cnt = ord(mxc) & 31\n        sys.stdout.write('YES\\n')\n        sys.stdout.write(str(cnt)+'\\n')\n        for i in range(cnt):\n            ci = chr(ord('a') + i)\n            if ci not in top:\n                ci = mxc\n            sys.stdout.write(f'{top[ci]+1} {l[ci]+1} {bot[ci]+1} {r[ci]+1}\\n')\n    else:\n        sys.stdout.write('NO\\n')\n", "from heapq import heappush,heappop,heapify\nfrom collections import deque,defaultdict,Counter\nimport itertools\nfrom itertools import permutations,combinations,groupby\nimport sys\nimport bisect\nimport string\nimport math\nimport time\nimport random\ndef S_():\n    return input()\ndef LS():\n    return [i for i in input().split()]\ndef I():\n    return int(input())\ndef MI():\n    return map(int,input().split())\ndef LI():\n    return [int(i) for i in input().split()]\ndef LI_():\n    return [int(i)-1 for i in input().split()]\ndef NI(n):\n    return [int(input()) for i in range(n)]\ndef NI_(n):\n    return [int(input())-1 for i in range(n)]\ndef StoI():\n    return [ord(i)-97 for i in input()]\ndef ItoS(nn):\n    return chr(nn+97)\ndef LtoS(ls):\n    return ''.join([chr(i+97) for i in ls])\ndef GI(V,E,Directed=False,index=0):\n    org_inp=[]\n    g=[[] for i in range(n)]\n    for i in range(E):\n        inp=LI()\n        org_inp.append(inp)\n        if index==0:\n            inp[0]-=1\n            inp[1]-=1\n        if len(inp)==2:\n            a,b=inp\n            g[a].append(b)\n            if not Directed:\n                g[b].append(a)\n        elif len(inp)==3:\n            a,b,c=inp\n            aa=(inp[0],inp[2])\n            bb=(inp[1],inp[2])\n            g[a].append(bb)\n            if not Directed:\n                g[b].append(aa)\n    return g,org_inp\ndef bit_combination(k,n=2):\n    rt=[]\n    for tb in range(n**k):\n        s=[tb//(n**bt)%n for bt in range(k)]\n        rt+=[s]\n    return rt\ndef show(*inp,end='\\n'):\n    if show_flg:\n        print(*inp,end=end)\nYN=['Yes','No']\nmo=10**9+7\ninf=float('inf')\nl_alp=string.ascii_lowercase\nu_alp=string.ascii_uppercase\nts=time.time()\nsys.setrecursionlimit(10**5)\ninput=lambda: sys.stdin.readline().rstrip()\n\ndef ran_input():\n    import random\n    n=random.randint(4,16)\n    rmin,rmax=1,10\n    a=[random.randint(rmin,rmax) for _ in range(n)]\n    return n,a\n\nshow_flg=False\nshow_flg=True\n\nans=0\n\nt=I()\nfor _ in range(t):\n    h,w=LI()\n    ans=[]\n    t=[]\n    ng=False\n    rs=[[inf,-inf] for i in range(26)]\n    cs=[[inf,-inf] for i in range(26)]\n    \n    for i in range(h):\n        s=input()\n        t.append(s)\n        for j in range(w):\n            if s[j]!='.':\n                k=ord(s[j])-97\n                rs[k][0]=min(rs[k][0],i+1)\n                rs[k][1]=max(rs[k][1],i+1)\n                cs[k][0]=min(cs[k][0],j+1)\n                cs[k][1]=max(cs[k][1],j+1)\n    \n    ll=-1\n    for i in range(26):\n        if rs[i][0]!=inf:\n            ll=i\n    if ll==-1:\n        print('YES')\n        print(0)\n        continue\n    for i in range(ll+1)[::-1]:\n        if (rs[i][0]!=inf and rs[i][0]!=rs[i][1]) and (cs[i][0]!=inf and cs[i][0]!=cs[i][1]):\n            ng=True\n            break\n        else:\n            if rs[i][0]==inf:\n                ans.append(lsn)\n            else:\n                lsn=[rs[i][0],cs[i][0],rs[i][1],cs[i][1]]\n                ans.append(lsn)\n                for r in range(rs[i][0],rs[i][1]+1):\n                    for c in range(cs[i][0],cs[i][1]+1):\n                        #show(i,(r-1,c-1),t[r-1][c-1])\n                        if ord(t[r-1][c-1])-97<i:\n                            ng=True\n            #show(i,*rs[i],*cs[i])\n\n    if ng:\n        print('NO')\n        continue\n    else:\n        print('YES')\n        print(len(ans))\n        for i in ans[::-1]:\n            print(*i)\n"]