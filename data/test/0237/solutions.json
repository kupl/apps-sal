["n, m, k = map(int, input().split())\nans = 1\nm -= n\nleft = k - 1\nright = n - k\n\nput = 1\nwhile (m >= put):\n    m -= put\n    ans += 1\n    put += (left > 0) + (right > 0)\n    if (left): left -= 1\n    if (right): right -= 1\n    if (left == right == 0):\n        ans += (m // put)\n        break\nprint(ans)", "def v(ln, mx):\n    return mx * (mx + 1) // 2 - (0 if ln > mx else (mx - ln) * (mx - ln + 1) // 2) + max(0, ln - mx)\n\ndef ok(n, m, k, val):\n    return val + v(k - 1, val - 1) + v(n - k, val - 1) <= m\n\n\nn, m, k = map(int, input().split())\nl = -1\nr = 10 ** 10\nwhile l + 1 != r:\n    md = (l + r) // 2\n    if ok(n, m, k, md):\n        l = md\n    else:\n        r = md\nprint(l)", "def f(med):\n    left = k - 1\n    right = n - k\n    #print(med, left, right)\n    ans = 0\n    if med > left + 1:\n        d = med - left\n        ans += (med + d) * (med - d + 1) // 2\n    else:\n        ans += med * (med + 1) // 2\n        left -= (med - 1)\n        ans += left\n    #print(ans)\n    if med > right + 1:\n        d = med - right\n        ans += (med + d) * (med - d + 1) // 2\n    else:\n        ans += med * (med + 1) // 2\n        right -= (med - 1)\n        ans += right\n    #print(ans)\n    if ans - med <= m:\n        return True\n    else:\n        return False\n\nn, m, k = list(map(int, input().split()))\nl = 1\nr = m + 1\nwhile r - l > 1:\n    med = (r + l) // 2\n    if f(med):\n        l = med\n    else:\n        r = med\nprint(l)\n", "\ndef __starting_point():\n\tn, m, k = map(int, input().split())\n\tm -= n\n\tres = 1\n\tlvl = 0\n\twhile m > 0:\n\t\t#print(m)\n\t\tx = min(k, lvl+1) + min(n-k, lvl)\n\t\tif (x == n):\n\t\t\tres += m // n\n\t\t\tbreak\n\t\telif (m >= x):\n\t\t\tm -= x\n\t\t\tlvl += 1\n\t\t\tres += 1\n\t\telse:\n\t\t\tbreak\n\tprint(res)\n__starting_point()", "def summ(t):\n    ans = (t) * (t + 1) // 2\n    return ans\n\nn, m, k = map(int, input().split())\n\ndef res(p):\n    nonlocal n\n    tmp = n * p\n    l = k - 1\n    t = min(p - 1, l)\n    tmp -= summ(t)\n    tmp -= (p - 1) * (l - t)\n    r = n - k\n    t = min(p - 1, r)\n    tmp -= summ(t)\n    tmp -= (p - 1) * (r - t)\n    return tmp\n\n\nl = 0\nr = m + 1\nwhile r - l > 1:\n    mid = l + (r - l) // 2\n    if res(mid) <= m:\n        l = mid\n    else:\n        r = mid\nprint(l)", "n, m, k = map(int, input().split())\n\ndone = 0\n\nfor A in range(m // n,m+1):\n\n\tup = A\n\n\tif (k-1) >= (A-1):\n\t\tup = up + A * (A-1) / 2\n\t\tup = up + k - A\n\telse:\n\t\ts = A - k + 1\n\t\tup = up + (s + (A - 1)) * (A - s) / 2\n\n\n\tkk = n - k \n\n\tif (kk) >= (A-1):\n\t\tup = up + A * (A-1) / 2\n\t\tup = up + kk - (A-1)\n\telse:\n\t\ts = A - kk\n\t\tup = up + (s + (A - 1)) * (A - s) / 2\n\n\tif up > m:\n\t\tdone = 1\n\t\tprint(A-1)\n\t\tbreak\n\n\nif done == 0:\n\n\tprint(m)", "def f(a):\n    sums1=0\n    sums2=0\n    if k >=a:\n        sums1 = a*(a+1)//2\n        sums1+=k-a\n    else:\n        sums1 = k*(a+a-k+1)//2\n    \n    sums3 =0\n    sums4=0\n    k1 = n-k+1\n    if k1 >=a:\n        sums2 = a*(a+1)//2\n        sums2 +=k1-a\n    else:\n        sums2 = k1*(a+a-k1+1)//2    \n    if sums1+sums2-a<=m:\n        return True\n    else:\n        return False\nn,m,k = map(int,input().split())\nleft = 1\nright = 10**9+5\n\nwhile left+1!=right:\n    mid = (left+right)//2\n    if f(mid):\n        left=mid\n    else:\n        right = mid\nif f(right):\n    print(right)\nelse:\n    print(left)", "\n\ndef pillows_needed(height, width):\n    if height > width:\n        return height * (height + 1) // 2 - (height - width) * (height - width + 1) // 2\n    else:\n        return height * (height + 1) // 2 + (width - height)\n\nn, m, k = list(map(int, input().split()))\n\n\na, b, c = 0, m, 0\n\nwhile a < b:\n    c = (a + b + 1) // 2\n    if m >= c + pillows_needed(c - 1, n - k) + pillows_needed(c - 1, k - 1):\n        a = c\n    else:\n        b = c - 1\n\nprint(a)\n", "def pillows(n, k, h):\n    p = (h - 1) * h + h\n    left = 0\n    if k < h:\n        left = (h - k) * (h - k + 1) // 2\n    right = 0\n    if n - k + 1 < h:\n        right = (h - (n - k + 1)) * (h - (n - k + 1) + 1) // 2\n\n    return p - left - right\n\n\ndef solve(n, m, k):\n    p = m - n\n    if p == 0:\n        return 1\n\n    l = 0\n    r = 10**10\n    while r - l >= 2:\n        m = (l + r) // 2\n        mp = pillows(n, k, m)\n        if mp > p:\n            r = m\n        else:\n            l = m\n\n    return l + 1\n\nif False:\n    assert pillows(1, 1, 10) == 10\n    assert solve(1, 10, 1) == 10\n    assert solve(5, 5, 1) == 1\n    assert solve(5, 5, 5) == 1\n    assert solve(5, 5, 3) == 1\n    assert solve(5, 6, 2) == 2\n    assert solve(5, 6, 1) == 2\n    assert solve(5, 6, 5) == 2\n    assert solve(5, 7, 5) == 2\n    assert solve(5, 7, 1) == 2\n    assert solve(5, 8, 1) == 3\n    assert solve(5, 8, 5) == 3\n    assert solve(5, 8, 4) == 2\n    assert solve(5, 8, 2) == 2\n    assert solve(5, 8, 3) == 2\n    assert solve(5, 9, 3) == 3\n    assert solve(5, 9, 2) == 3\n    assert solve(5, 9, 1) == 3\n\nelse:\n    n, m, k = list(map(int, input().split()))\n    print(solve(n, m, k))\n", "n, m, k = list(map(int, input().split()))\nleft = 0\nright = 10000000000\nwhile (right - left > 1):\n    mid = (left + right) // 2\n    counter = mid\n    lh = k - 1\n    if lh >= mid - 1:\n        counter += (mid - 1) * mid // 2\n        counter += lh - (mid - 1)\n    else:\n        last_hobbit = mid - lh - 1\n        counter += (mid - 1) * mid // 2 - (last_hobbit) * (last_hobbit + 1) // 2\n    rh = n - k\n    if rh >= mid - 1:\n        counter += (mid - 1) * mid // 2\n        counter += rh - (mid - 1)\n    else:\n        last_hobbit = mid - rh - 1\n        counter += (mid - 1) * mid // 2 - (last_hobbit) * (last_hobbit + 1) // 2    \n    if counter > m:\n        right = mid\n    else:\n        left = mid\nprint(left)\n    \n", "def main():\n\tn, m, k = map(int, input().split())\n\tl = 1\n\tr = 10**10\n\twhile (l + 1 < r):\n\t\tmed = (l + r) // 2\n\t\tcnt = n\n\t\tleft = max(0, med - 1 - (k - 1))\n\t\tright = max(0, med - 1 - (n - k))\n\t\tleft_cord = max(1, k - med + 1)\n\t\tright_cord = min(k + med - 1, n)\n\n\t\tcnt += ((k - left_cord + 1) * (left + med - 1)) / 2\n\t\tcnt += ((right_cord - k + 1) * (right + med - 1)) / 2\n\t\tcnt -= med - 1\n\t\tif (cnt <= m):\n\t\t\tl = med\n\t\telse:\n\t\t\tr = med\n\tprint(l)\n\t\nmain()", "n, m, k = list(map(int, input().split()))\n\ndef __sum(n):\n\treturn n * (n + 1) // 2\n\ndef _sum(l, r):\n\tif l > r:\n\t\treturn 0\n\tdelta = 0\n\tif l <= 0:\n\t\tdelta = abs(l) + 1\n\t\tl = 1\n\n\t# print(l, r, __sum(r) - __sum(l - 1))\n\treturn __sum(r) - __sum(l - 1) + delta\n\n\n\nleft = 1\nright = int(1e9) + 2\nwhile right - left > 1:\n\tmid = (left + right) // 2\n\tsub = _sum(mid - k + 1, mid) + _sum(mid - (n - k), mid - 1)\n\tif sub <= m:\n\t\tleft = mid\n\telse:\n\t\tright = mid\n\nprint(left)\n", "def just_sum(n):\n    return (n * (n + 1)) // 2\n\n\ndef get_sum(a, b):\n    return just_sum(b) - just_sum(a - 1)\n\n\ndef check(middle):\n    left = k - 1\n    right = n - k\n    \n    if left < middle:\n        left_sum = get_sum(middle - left, middle - 1)\n    else:\n        left_sum = just_sum(middle - 1) + (left - (middle - 1))\n    \n    if right < middle:\n        right_sum = get_sum(middle - right, middle - 1)\n    else:\n        right_sum = just_sum(middle - 1) + (right - (middle - 1))\n    \n    return left_sum + right_sum + middle <= m\n    \n    \nn, m, k = map(int, input().split())\n\nl = 1\nr = m + 1\nwhile l < r - 1:\n    middle = (l + r) // 2\n    if check(middle):\n        l = middle\n    else:\n        r = middle\n        \nprint(l)", "n, m, k = list(map(int, input().split()))\n\nmin_delta = min(k - 1, n - k)\nmax_delta = max(k - 1, n - k)\n\ntop = ((k - 1) * k + (n - k) * (n - k + 1)) // 2 + (max_delta - min_delta) * min_delta + max_delta + 1\n\ndef get_level(n, k, level):\n\treturn 1 + min(level, k - 1) + min(level, n - k)\n\nif top <= m:\n\tprint(max_delta + 1 + (m - top) // n)\nelse:\n\tadd = m - n\n\tcurr_level = 0\n\twhile add >= get_level(n, k, curr_level):\n\t\tadd -= get_level(n, k, curr_level)\n\t\tcurr_level += 1\n\tprint(curr_level + 1)\n\n\n", "\n\ndef check(n, m, k, r):\n    a = r - k\n    u = 0\n    if a > 0:\n        u += (a + r) * (k + 1) // 2\n    else:\n        u += r * (r + 1) // 2\n\n    b = r - (n - 1 - k)\n    v = 0\n    if b > 0:\n        v += (b + r) * (n - k) // 2\n    else:\n        v += r * (r + 1) // 2\n\n    t = u + v - r\n    return t <= m\n\nn, m, k = list(map(int, input().split()))\nk -= 1\nm -= n\nINF = 10 ** 9 + 10\na = 0\nb = INF\nwhile b - a > 1:\n    mid = (a + b) // 2\n    if check(n, m, k, mid):\n        a = mid\n    else:\n        b = mid\nres = 1 + a\nprint(res)\n", "q,w,e=list(map(int,input().split()))\nw-=q\nz=e-1\nx=q-e\nz,x=min(z,x),max(z,x)\nans=1\nt=1\nwhile (w-t)>=0:\n    w-=t\n    ans+=1\n    if z==x==0:\n        ans+=w//t\n        break\n    if z>0:\n        z-=1\n        t+=1\n    if x>0:\n        x-=1\n        t+=1\nprint(ans)\n", "n,m,k=list(map(int,input().split()))\ns=0\nm-=n\ns+=1\nif m==0:\n    print(1)\n    return\nwhile m>=0:\n    if k>s and n-k+1>s and m>=2*(s-1)+1:\n        m-=2*(s-1)+1\n    elif k>s and m>=n-k+s:\n        m-=n-k+s\n    elif n-k+1>s and m>=k+s-1:\n        m-=k+s-1\n    elif m>=n:\n        s+=m//n\n        m-=n*(m//n)\n        print(s)\n        return\n    else:\n        break\n    s+=1\nprint(s)\n", "from sys import stdin, stdout\n\nn, m, k = map(int, stdin.readline().split())\n\nleft = k - 1\nright = n - k\nl = 1\nr = m + 1\n\nwhile r - l > 1:\n    mid = (r + l) // 2\n    cnt = mid\n    \n    if mid > left:\n        cnt += (2 * mid - 1 - left) * left // 2\n    else:\n        cnt += mid * (mid - 1) // 2 + left - (mid - 1)\n        \n    if mid > right:\n        cnt += (2 * mid - 1 - right) * right // 2\n    else:\n        cnt += mid * (mid - 1) // 2 + right - (mid - 1)\n    \n    if cnt <= m:\n        l = mid\n    else:\n        r = mid\n\nstdout.write(str(l))", "import sys\n\ndef sum_(a):\n    return max(0, a * (a + 1) // 2)\n\ndef check(a):\n    if a * n <= m:\n        return 1\n    a -= 1\n    ans = n\n    t1 = a - k + 1\n    #print(a)\n    if t1 >= 0:\n        ans += sum_(a) - sum_(t1 - 1)\n    else:\n        ans += sum_(a)\n    #print(ans)\n    z = n - k + 1\n    t2 = a - z + 1\n    #print('ts', t2)\n    if t2 >= 0:\n        ans += sum_(a - 1) - sum_(t2 - 1)\n    else:\n        ans += sum_(a - 1)\n    #print(ans)\n    return (ans <= m)\n\ndef bins():\n    l = 1\n    r = m + 1\n    while l + 1 != r:\n        m1 = (l + r) // 2\n        if check(m1):\n            l = m1\n        else:\n            r = m1\n    print(l)\n    \nn, m, k = list(map(int, input().split()))\n#print(check(2))\nbins()\n\n            \n", "n, m, k = map(int, input().split())\nkk1 = min(k-1, n-k)\nkk2 = n - kk1 - 1\nmm = m - n\ns1 = (kk1 + 1)**2\nif s1 >= mm:\n  res = 1 + int(mm**0.5)\nelse:\n  res = 1 + (kk1 + 1)\n  mmm = mm - s1 \n  a = 2*(kk1 + 1)\n  b = kk2-kk1 - 1\n  s2 = a*b + b*(b-1)//2\n  if s2 >= mmm:\n    res += int(-(2*a-1)/2 + (((2*a-1)/2)**2 + 2*mmm)**0.5)\n  else:\n    mmmm = mmm - s2 \n    res += b + mmmm//n\nprint(res)   ", "n,m,k = list(map(int,input().split()))\nl, r = 1, 10 ** 9 + 1\n\ndef ok(p):\n    rs = 0\n    if k >= p:\n        rs += p * (p + 1) // 2\n        rs += (k - p)\n    else:\n        rs += p * (p + 1) // 2\n        f = p - k\n        rs -= f * (f + 1) // 2\n    if (p - 1) <= n - k:\n        rs += p * (p - 1) // 2\n        rs += n - k - p + 1\n    else:\n        rs += p * (p - 1) // 2\n        f = (p - 1) - (n - k)\n        rs -= f * (f + 1) // 2\n    return rs <= m\n\nwhile r - l > 1:\n    mid = (l + r) // 2\n    if ok(mid):\n        l = mid\n    else:\n        r = mid\nprint(l)", "import sys\nimport math\n\nn, m, k = map(int, input().split())\n\nans = 1\nm -= n\nl = min(k - 1, n - k)\nstep = 1\n\nfor i in range(l):\n    if m - step < 0:\n        print(ans)\n        return\n\n    m -= step\n    step += 2\n    ans += 1\n\nwhile step < n:\n    if m - step < 0:\n        print(ans)\n        return\n\n    m -= step\n    step += 1\n    ans += 1\n\nans += m // n\n\nprint(ans)", "def v(length, start):\n    W = start * (start + 1) // 2\n    t = max(0, start - length)\n    T = t * (t + 1) // 2\n    return W - T + max(0, length - start)\n        \n\ndef check(p):\n    return p + v(k - 1, p - 1) + v(n - k, p - 1) <= m\n\nn, m, k = map(int, input().split())\nl = 0\nr = 10 ** 100\nwhile r - l > 1:\n    mid = (l + r) // 2\n    if not check(mid):\n        r = mid\n    else:\n        l = mid\nprint(l)", "n, m, k = map(int, input().split())\nbest = 1\nsleva = k - 1\nsprava = n - k\nm -= n\n\nput = 1\n\nwhile (m >= put):\n    m -= put\n    best+= 1\n    put += (sleva > 0) + (sprava > 0)\n    if sleva:\n        sleva -= 1\n    if sprava:\n        sprava -= 1\n    if sleva == sprava == 0:\n        best += (m // put)\n        break\n    \nprint(best)", "n, m, k = list(map(int, input().split()))\np = m - n\nmin_d, max_d = min(abs(n-k+1), k), max(abs(n-k+1), k)\ni = 1\nr = m+1\nl = 0\nwhile r - l > 1:\n    i = (r + l) // 2\n    min_dist = min_d-i\n    max_dist = max_d-i\n    min_summ = 0\n    max_summ = 0\n    if min_dist < 0:\n        min_summ = (abs(min_dist)*(abs(min_dist)+1))\n    if max_dist < 0:\n        max_summ = (abs(max_dist)*(abs(max_dist)+1))\n    summ = ((i*(i+1)) - i)*2 - min_summ - max_summ\n    #if min_dist < 0 and max_dist < 0:\n    #    print()\n    #    return\n    #if min_dist < 0 and max_dist < 0:\n        #summ += i\n    #print(min_summ, max_summ, (i*(i+1)-i))\n    #print(i, summ, min_dist, max_dist)\n    if summ > p*2:\n        r = i\n    else:\n        l = i\n    \nprint(r)\n"]