["n = int(input())\nc = input()\n\nw = 0\nr = c.count('R')\ni = 0\nans = max(w, r)\nwhile i <= n - 1:\n    if c[i] == 'W':\n        w += 1\n    else:\n        r -= 1\n    ans = min(ans, max(w, r))\n    i += 1\nprint(ans)", "from collections import Counter\nN = int(input())\ns = input()\nc = Counter(s)\nw, r = 0, c['R']\nans = max(w, r)\nfor i in range(N):\n    if s[i] == 'W': w += 1\n    else: r -= 1 \n    ans = min(ans, max(w, r))\n\nprint(ans)", "input()\nproblem = input()\nstones = []\nrs = []\n# \u8d64\u304c1,\u767d\u304c0\nW=0\nR=0\nfor s in problem:\n    if s == \"R\":\n        stones.append(1)\n        R+=1\n    else:\n        stones.append(0)\nrs.append(max(W, R))\nfor i in range(len(stones)):\n    if stones[i] == 0:\n        W+=1\n    else :\n        R-=1\n    rs.append(max(W, R))\nprint(min(rs))", "N=int(input())\nC=list(input())\nrednum=C.count('R')\nrednumleft=0\nfor i in range(rednum):\n    if C[i]=='R':\n        rednumleft+=1\nprint(rednum-rednumleft)", "def solve(string):\n    _, c = string.split()\n    r = c.count(\"R\")\n    return str(c[:r].count(\"W\"))\n\n\ndef __starting_point():\n    import sys\n    print((solve(sys.stdin.read().strip())))\n\n__starting_point()", "import heapq\n\ndef main():\n    N = int(input())\n    C = list(input())\n    R = []\n    W = []\n    for i, c in enumerate(C):\n        if c == 'R':\n            R.append(-i)\n        else:\n            W.append(i)\n    if len(R) == 0 or len(W) == 0:\n        print((0))\n        return\n    heapq.heapify(R)\n    heapq.heapify(W)\n    ans = 0\n    while True:\n        max_r = -1 * heapq.heappop(R)\n        min_w = heapq.heappop(W)\n        if max_r < min_w:\n            break\n        else:\n            heapq.heappush(R, -min_w)\n            heapq.heappush(W, max_r)\n            ans += 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter\n\n\nN = int(input())\nc = input()\ncntr = Counter(c)\n\nans = 0\nfor c, r in zip(c, \"R\" * cntr[\"R\"]):\n    if c != r:\n        ans += 1\nprint(ans)\n", "n=int(input())\nc=str(input())\na=c.count(\"R\")\nb=c[:a:].count(\"R\")\nprint(a-b)", "N = int(input())\nC = input()\n\nr = C.count(\"R\")\nprint(C[:r].count(\"W\"))", "n = int(input())\nc = list(input())\nrcnt = 0\nallrcnt = 0\nfor i in range(len(c)):\n    if c[i]=='R':\n        allrcnt += 1\nfor i in range(len(c)):\n    if i+1<=allrcnt and c[i]=='R':\n        rcnt += 1\n\nans = allrcnt-rcnt\n\nprint(ans)", "n = int(input())\nc = list(input())\nw = 0\nr = c.count(\"R\")\nans = r\nfor i in range(n) :\n    if c[i] == \"W\" :\n        w += 1\n    else :\n        r -= 1\n    if ans > max(w,r) :\n        ans = max(w,r)\n\nprint(ans)\n", "n = int(input())\nclist = input()\n\nwcount=clist.count('W')\nrcount=n-wcount\naclist='R'*rcount+'W'*wcount\n\nwrcount = 0\nrwcount = 0\n\nfor i in range(n):\n  if clist[i] == aclist[i]:\n    continue\n  else:\n    if clist[i] == 'W':\n      wrcount += 1\n    else:\n      rwcount += 1\n\nprint((max(wrcount,rwcount)))\n", "N = int(input())\nC = input()\n\nf = 0\nb = N - 1\nans = 0\n\nwhile True:\n    while  f <= N -1 and C[f] == \"R\":\n        f += 1\n    while b >= 0 and C[b] == \"W\":\n        b -= 1\n    if f > b:\n        print(ans)\n        break\n    ans += 1\n    f += 1\n    b -= 1", "n = int(input())\nc = list(input())\nc_goal = list(sorted(c))\n\ncount = 0\n\nfor x in range(n):\n  if c[x] != c_goal[x]:\n    count += 1\n    \ncount = count // 2\nprint(count)\n", "import sys\ndef input(): return sys.stdin.readline().rstrip()\nfrom collections import Counter\ndef main():\n    n = int(input())\n    C = input()\n    C_cunt = Counter(C)\n    cunt_r = C_cunt['R']\n    ans = 0\n    for i in range(cunt_r):\n        if C[i] == 'W':\n            ans += 1\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\nC = list(input())\n\na, b = 0, 0\nfor i in range(n):\n    if C[i] == \"R\":\n        a += 1\n    ans = max(a, b)\n\nfor i in range(n):\n    if C[i] == \"R\":\n        a -= 1\n    else:\n        b += 1\n    tmp = max(a, b)\n    ans = min(ans, tmp)\n\nprint(ans)", "import sys\nimport re\nimport queue\nimport collections\nfrom math import ceil, floor, sqrt, pi, factorial, gcd\nfrom copy import deepcopy\nfrom collections import Counter, deque\nfrom heapq import heapify, heappop, heappush\nfrom itertools import accumulate, product, combinations, combinations_with_replacement\nfrom bisect import bisect, bisect_left, bisect_right\nfrom functools import reduce\nfrom decimal import Decimal, getcontext\n# input = sys.stdin.readline\ndef i_input(): return int(input())\ndef i_map(): return map(int, input().split())\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\ndef lcm(a, b): return a * b // gcd(a, b)\nsys.setrecursionlimit(10 ** 8)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nnum_list = []\nstr_list = []\n\n\ndef main():\n\tN = i_input()\n\tC = s_input()\n\tc = []\n\tfor i in range(0,N):\n\t\tc.append(C[i])\n\n\tanswer = 40000000\n\n\ttmp = 0\n\tfor i in range(0,N):\n\t\tif(c[i]==\"R\"):\n\t\t\ttmp += 1\n\n\tanswer = min(answer,tmp)\n\n\ttmp = 0\n\tfor i in range(0,N):\n\t\tif(c[i]==\"W\"):\n\t\t\ttmp += 1\n\n\tanswer = min(answer,tmp)\n\n\twhiteCount = 0\n\tredCount = 0\n\tfor i in range(0,N):\n\t\tif(c[i]==\"R\"):\n\t\t\tredCount += 1\n\twhiteCount = N - redCount\n\n\t\n\tleftWhiteCount = 0\n\trightRedCount = redCount\n\tfor i in range(0,N):\n\t\tif(c[i] == \"W\"):\n\t\t\tleftWhiteCount += 1\n\t\telse:\n\t\t\trightRedCount += -1\n\t\tanswer = min(answer,max(leftWhiteCount,rightRedCount))\n\n\tprint(answer)\n\n\treturn\n\ndef __starting_point():\n\tmain()\n__starting_point()", "n = int(input())\nc = input()\ncnt = [0 for _ in range(n)]\nred = 0\nfor i in range(n):\n   if c[i] == 'R': red += 1\n   cnt[i] = red\n\nprint(red - cnt[red-1])", "n=int(input())\nc=list(input())\ncnt=0\nallcnt=c.count(\"R\")\nfor i in range(allcnt):\n  if c[i]==\"R\":\n    cnt+=1\nprint(allcnt-cnt)", "from collections import Counter\nn = int(input())\nc = list(input())\nnum = Counter(c)\nr = num[\"R\"]\n\nans = [\"R\"]*r + [\"W\"]*(n-r)\ncnt = 0\n\nfor i in range(n):\n    if c[i] != ans[i]:\n        cnt += 1\n        \nprint((cnt//2))\n\n", "N = int(input())\nc = list(input())\nRn = c.count(\"R\") # \u533a\u5207\u308a\u306e\u53f3\u5074\u306b\u5b58\u5728\u3059\u308bR\u306e\u6570\nWn = 0 # \u533a\u5207\u308a\u306e\u5de6\u5074\u306b\u5b58\u5728\u3059\u308bW\u306e\u6570\nans = N\nfor i in range(N+1):\n    if i == 0:\n        ans = Rn\n    else:\n        if c[i-1] == \"R\":\n            Rn -= 1\n        else:\n            Wn += 1\n        ans = min(ans, min(Rn, Wn) + abs(Rn - Wn))\nprint(ans)", "n, s = input(), input()\nprint(s[:s.count(\"R\")].count(\"W\"))", "n=int(input())\nS=input()\nc=S.count(\"R\")\ns=S[:c].count(\"R\")\nprint(c-s)", "n = int(input())\nC = input()\nR = C.count(\"R\")\nprint((C[: R].count(\"W\")))\n", "def solve1(n: int, c: str) -> int:\n    ans = 0\n    r, w = 0, 0\n\n    for i in range(n):\n        if c[i] == \"R\":\n            r += 1\n        else:\n            w += 1\n\n    s_pivot = c[:r] + \"|\" + c[r:]\n    s_check = \" \" * r + \"|\"\n\n    for i in range(r, n):\n        if c[i] == \"R\":\n            ans += 1\n            s_check += \"X\"\n        else:\n            s_check += \" \"\n\n    #print(s_pivot, s_check, sep=\"\\n\")\n    return ans\n\n\nn = int(input())\nc = input()\n\nprint((solve1(n, c)))\n", "n=int(input())\nc=input()\n\na=c.count('R')\n\ncnt=0\nfor i in range(a):\n    if c[i]=='W':\n        cnt+=1\nprint(cnt)", "n = int(input())\ns = input()\nres = 0\ntem = s.find('WR')\nif tem == -1:\n    print(res)\nelse:\n    i, j = 0, len(s)-1\n    while i<j:\n        while i < j and s[i] != 'W': i+=1\n        while i < j and s[j] != 'R':j -= 1\n        if s[i] == 'W' and s[j] == 'R':\n            res += 1\n            i += 1\n            j -= 1\n    print(res)\n\n", "number = int(input())\ndate = input()\ndate = list(date)\ncnt =0\ncnt2 =0\n\nfor i in range(number):\n  if date[i] ==\"R\":\n    cnt +=1\n\nfor s in range(cnt):\n  if date[s] ==\"W\":\n    cnt2 +=1\nprint(cnt2)", "n = int(input())\nc = list(input())\nhrcnt = 0\nrcnt = 0\nfor i in range(len(c)):\n    if c[i]=='R':\n        rcnt += 1\nfor i in range(len(c)):\n    if i+1<=rcnt and c[i]=='R':\n        hrcnt += 1\n\nwcnt = len(c)-rcnt\nif rcnt==len(c) or rcnt==0:\n    ans = 0\nelse:\n    ans = rcnt-hrcnt\n\nprint(ans)", "n = int(input())\nc = input()\n\na = c.count(\"R\")\nb = c[:a].count(\"W\")\nprint(b)\n\n", "n=int(input())\ns=input()\n\nr = s.count('R')\n\nans=0\nfor i in range(r):\n    if s[i]=='W':\n        ans+=1\n\nprint(ans)", "import math\nimport collections\nimport itertools\nimport copy\n\ndef YesNo(Bool):\n    if(Bool):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return\n\n\ndef resolve():\n\n    N=int(input())\n    C=input()\n\n    l=0\n    r=N-1\n    lfound=False\n    rfound=False\n\n    cnt=0\n    while True:\n        if(C[l]==\"W\"):\n            lfound=True\n        else:\n            l+=1\n\n        if(C[r]==\"R\"):\n            rfound=True\n        else:\n            r-=1\n\n        if(rfound and lfound):\n            cnt+=1\n            l+=1\n            r-=1\n            rfound=False\n            lfound=False\n        if(l>=r):\n            break\n\n    print(cnt)\n\n\nresolve()\n", "# \u521d\u671f\u5165\u529b\nfrom bisect import bisect_left\nimport sys\n#input = sys.stdin.readline  #\u6587\u5b57\u5217\u3067\u306f\u4f7f\u308f\u306a\u3044\nN = int(input())\nc =input().strip()\nans =0\nw =[i for i, x in enumerate(c) if x == 'W']\nr =[i for i, x in enumerate(c) if x == 'R']\nw_num =len(w) #\u5168\u4f53\u3067W\u306e\u6570\nr_num =len(r) #\u5168\u4f53\u3067R\u306e\u6570\n\nans =bisect_left(r,r_num)\nprint(r_num -ans)", "N = int(input())\nstr = input()\n\nr_sum = 0\nfor i in range(N):\n    if str[i] == \"R\":\n        r_sum += 1\nr_sum2 = 0\nfor i in range(r_sum):\n    if str[i] == \"R\":\n        r_sum2 += 1\n\nprint((r_sum - r_sum2))\n", "n = int(input())\nc = input()\n\nw = c.count(\"W\")\nr = c.count(\"R\")\n\nans = 0\nfor i in range(r):\n  if c[i] == \"W\": ans += 1\nprint(ans)", "N = int(input())\nc = list(input())\nw = 0\nr = N-1\nans = 0\nwhile w < r:\n    for i in range(w,r):\n        if c[i] == \"W\":\n            c[i] = \"R\"\n            w = i\n            break\n    else:\n        break\n    for j in range(r,w,-1):\n        if c[j] == \"R\":\n            c[j] = \"W\"\n            r = j\n            break\n    else:\n        break\n    ans += 1\nprint(ans)", "N = int(input())\ns = input()\n\nR = 0\nfor i in range(N):\n  if s[i] == \"R\":\n    R += 1\nW = 0\nans = R\n\nfor i in range(N):\n  if s[i] == \"R\":\n    R -= 1\n  else:\n    W += 1\n  ans = min(ans, max(W, R))\n  \nprint(ans)", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nINF = float('inf')\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n    return int(readline())\nn = I()\ns = input()\nC = Counter(s)\nw,r = 0,0\nfor k,v in list(C.items()):\n    if k == 'W':\n        w += v\n    else:\n        r += v\np = 'R' * r + 'W' * w\nans = 0\nfor i in range(n):\n    if p[i] == s[i]:\n        pass\n    else:\n        ans += 1\nprint((ans//2))\n", "def main():\n    n = int(input())\n    C = input()\n\n    rc = C.count('R')\n    rhc = C[:rc].count('R')\n    print((rc - rhc))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nc = input()\nx = 0\nfor i in range(n):\n    if c[i] == \"R\":\n        x += 1\n\ny = 0\nif x != 0:\n    for j in range(x):\n        if c[j] == \"W\":\n            y += 1\n\nprint(y)", "N = int(input())\nS = input()\nAnswer = 0\nWhite = 0\nRed = S.count('R')\nfor j in range(len(S)):\n    i = S[j]\n    if i == 'W':\n        White += 1\n    elif i == 'R' and White >0 and j+1 > Red:\n        Answer += 1\n        White -= 1\nprint(Answer)", "# import sys\n# input = sys.stdin.readline\nimport collections\n\ndef main():\n    n = int(input())\n    s = input()\n    a_list = []\n    for i in range(n):\n        if s[i] == \"W\":\n            a_list.append(0)\n        else:\n            a_list.append(1)\n    r_count = sum(a_list)\n    print((r_count - sum(a_list[0:r_count])))\n\n\ndef input_list():\n    return list(map(int, input().split()))\n\n\ndef input_list_str():\n    return list(map(str, input().split()))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nC = list(input())\ncount = list()\nW = 0\nR = 0\n\nfor i in C:\n    if i == \"R\":\n        R += 1\n\nif R == 0:\n    count.append(0)\n\nfor i in C:\n\n    if i == \"W\":\n        W += 1\n    else:\n        R -= 1\n\n    if W <= R:\n        count.append(R)\n    else:\n        count.append(W)\n\nprint(min(count))", "a = int(input())\ns = input()\nans = a\nw_to_r =0\nr_to_w =s.count('R')\nans = min(ans,max(w_to_r,r_to_w))\nfor i in range(a):\n    if s[i] =='W':\n        w_to_r +=1\n    else:\n        r_to_w -=1\n    ans = min(ans,max(w_to_r,r_to_w))\nprint(ans)       ", "N = int(input())\nc = str(input())\n\ncount_red = 0\nflag_red = []\n\nfor i in c:\n\tif i == 'W':\n\t\tflag_red.append(0)\n\telse:\n\t\tflag_red.append(1)\n\t\tcount_red += 1\n\nif count_red == 0:\n\tans = 0\nelse:\n\tans = count_red - sum(flag_red[0:count_red])\n\nprint(ans)", "import copy\n\n\ndef swap(data, i1, i2):\n    # i1 \u3068 i2\u3068\u30b9\u30ef\u30c3\u30d7\n    tmp = data[i1]\n    tmp2 = data[i2]\n    data[i2] = tmp\n    data[i1] = tmp2\n    return data\n\n\ndef check_finish(data):\n    out = True\n    for i in range(len(data)-1):\n        if data[i] == 'W' and data[i + 1] == 'R':\n            out = False\n            return out\n    return out\n\n\ndef __starting_point():\n    n = int(input())\n    c = list(input())\n    # print(c)\n    if 'R' not in c:\n        # print(\"'R' not in\")\n        print((0))\n    elif 'W' not in c:\n        # print(\"'W' not in\")\n        print((0))\n    else:\n        w_count = c.count('W')\n        r_count = c.count('R')\n\n        same_r_count = 0\n        for i in range(r_count):\n            if c[i] == 'R':\n                same_r_count += 1\n\n        # print(r_count, same_r_count)\n        A = r_count - same_r_count\n        print(A)\n\n__starting_point()", "import sys\n\nN = int(input())\nS = list(input())\n\nc = min(S.count('R'), S.count('W'))\nr = 0\ncount = 0\nfor l in range(N-c):\n    if S[l] == 'W':\n        for i in range(r, len(S)-c):\n            if S[-(i+1)] == 'R':\n                S[-(i + 1)] = 'W'\n                S[l] = 'R'\n                count += 1\n                break\n            r = i\n\nprint(count)", "n=int(input())\ns = str(input())\nr = 0\nw = 0\nd = 0\nfor i in range(n):\n    if (s[i] == 'R'):\n        r += 1\n    else:\n        w += 1\nsd = sorted(s)\nfor i in range(n):\n    if (s[i] != sd[i]):\n        d += 1\n\nif (w == 0 or r == 0):\n    print((0))\nelse:\n    print((min(r, w, int(d/2))))\n\n", "def solve(string):\n    n, c = string.split()\n    n, c = int(n), list(c)\n    wi, ri = 0, n - 1\n    while wi < n and c[wi] == \"R\":\n        wi += 1\n    while ri >= 0 and c[ri] == \"W\":\n        ri -= 1\n    ans = 0\n    while wi < n and ri >= 0 and wi < ri:\n        c[wi], c[ri], ans = c[ri], c[wi], ans + 1\n        wi, ri = wi + 1, ri - 1\n        while wi < n and c[wi] == \"R\":\n            wi += 1\n        while ri >= 0 and c[ri] == \"W\":\n            ri -= 1\n    return str(ans)\n\n\ndef __starting_point():\n    import sys\n    print((solve(sys.stdin.read().strip())))\n\n__starting_point()", "n = int(input())\ns = list(input().rstrip())\n\nleft_cur = 0\nright_cur = n - 1\nans = 0\nflag = False\nwhile(left_cur < right_cur and left_cur < n - 1 and right_cur > 0):\n    while(s[left_cur] == 'R'):\n        left_cur += 1\n        if (left_cur == n - 1):\n            flag = True\n            break\n    while(s[right_cur] == 'W'):\n        right_cur -= 1\n        if (right_cur == 0):\n            flag = True\n            break\n    if(left_cur > right_cur):\n        flag = True\n    if(flag):\n        break\n    ans += 1\n    left_cur += 1\n    right_cur -= 1\n\nprint(ans)\n", "n=int(input())\nC = list(input())\nans = 0\nN = n-1\nfor l in range(n):\n    if C[l] == \"W\":\n        for r in range(N,0,-1):\n            if r<=l:\n                print(ans)\n                return\n            if C[r] == \"R\":\n                #print(C)\n                C[l] = \"R\"\n                C[r] = \"W\"\n                #print(C)\n                #print(\"-----------------\")\n                ans += 1\n                N = r-1\n                break\nprint(ans)", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\nn = int(input())\nC = input()\n\ntmp = 0\nres = inf\n\nlr = 0\nlw = 0\nr = C.count(\"R\")\nw = C.count(\"W\")\nif r == 0 or w == 0:\n    res = 0\nelse:\n    for i in range(n):\n        tmp = max(lw, r - lr)\n        res = min(res, tmp)\n        if C[i] == \"R\":\n            lr += 1\n        else:\n            lw += 1\n\nprint(res)\n", "N=int(input())\nc=input()\nR=c.count('R')\nRR=c[0:R].count('R')\nprint(min(R-RR,R,N-R))", "import math\nN = int(input())\nC = str(input())\n\nC = C.replace('W', '1').replace('R', '0')\nC = list(C)\nsort_C = sorted(C)\n\ncnt = 0\n\nfor i in range(N):\n    if C[i] != sort_C[i]:\n        cnt += 1\n\nprint(math.ceil(cnt/2))", "import sys\n\nN = int(input())\nS = input()\n\nprint(S[S.count('R'):len(S)].count('R'))", "N = int(input())\nC = list(input())\n\nRn = C.count('R')\nprint(C[:Rn].count('W'))", "import sys\ndef rs(): return sys.stdin.readline().rstrip()\ndef ri(): return int(rs())\ndef rs_(): return [_ for _ in rs().split()]\ndef ri_(): return [int(_) for _ in rs().split()]\n\nN = ri()\nc = list(rs())\nans = 0\ns = 0\ne = N - 1\nwhile True:\n    while c[s] == 'R' and s < e:\n        s += 1\n    while c[e] == 'W' and s < e:\n        e -= 1\n    if s == e:\n        break\n    else:\n        c[s] = 'R'\n        c[e] = 'W'\n        ans += 1\nprint(ans)", "def __starting_point():\n    n = int(input())\n    s = list(input())\n    \n    #\u5b8c\u6210\u54c1\u306e\u4e26\u3073\u306b\u3059\u308b\n    ss = sorted(s)\n    \n    cnt = 0\n    #\u5207\u308a\u66ff\u308f\u308a\u306e\u5730\u70b9\u307e\u3067\uff1dW\u304c\u898b\u3064\u304b\u308b\u90e8\u5206\u307e\u3067\n    if \"W\" in s:\n        sind = ss.index(\"W\")\n\n        #sind\u307e\u3067\u306b\u542b\u307e\u308c\u308bW\u306e\u6570\uff1f\n        cnt = 0\n        for i in range(sind):\n            if s[i] == \"W\":\n                cnt += 1\n\n    print(cnt)\n\n__starting_point()", "N = int(input())\ns = str(input())\n\na = 0\nb = 0\n\nfor i in range(N):\n    if s[i] == 'R':\n        a = a + 1\nans = max(a,b)\nfor i in range(N):\n    if s[i] == 'R':\n        a = a - 1\n    else:\n        b = b + 1\n    now = max(a,b)\n    ans = min(ans, now)\nprint(ans)\n", "n = int(input())\ncl = input()\n\nif cl[:cl.count('R')].count('W') != 0:\n    print(min(cl[:cl.count('R')].count('W'), cl.count('R')))\nelse:\n    print(0)", "N=int(input())\nS=input()\nls=[0 for _ in range(N)]\nfor i in range(N):\n  if S[i]=='W':\n    ls[i]=1\nans=0\ni=0\nj=N-1\nwhile True:\n  if ls[i]==1 and ls[j]==0:\n    ls[i]=0\n    ls[j]=1\n    i+=1\n    j-=1\n    ans+=1\n  elif ls[i]==0 and ls[j]==0:\n    i+=1\n  elif ls[i]==1 and ls[j]==1:\n    j-=1\n  else:\n    i+=1\n    j-=1\n  if i>=j:\n    break\nprint(ans)", "n = int(input())\nmozi = input()\na_list = []\nfor i in range(n):\n    if mozi[i] == 'W':\n        a_list.append(0)\n    else:\n        a_list.append(1)\nr_count = sum(a_list)\nprint(r_count - sum(a_list[0:r_count]))", "N=int(input())\nS=input()\ni=0\nj=N-1\nans=0\nwhile True:\n    while S[j]=='W':\n        j-=1\n        if j<0:\n            break\n    while S[i]=='R':\n        i+=1\n        if i>=N:\n            break\n    if j<i:\n        break\n    ans+=1\n    i+=1\n    j-=1\n    if j<i:\n        break\nprint(ans)\n", "n = int(input())\nc = str(input())\ncc = c[:c.count(\"R\")]\nprint(cc.count(\"W\"))", "n=int(input())\ns=input()\nw=s.count('W')\nr=s.count('R')\n\nans=10**9\nif w==0 or r==0:\n  print(0)\n  return\n\nleft_white, right_red=0,r\nfor i in range(n):\n  if s[i]=='W':\n    left_white+=1\n  else:\n    right_red-=1\n  ans=min(ans,max(left_white,right_red))\n  \nprint(ans)", "def main():\n    n = int(input())\n    s = input()\n    rcount = s.count('R')\n    diff = s[0:rcount].count(\"W\")\n\n    print(diff)\n\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n=int(input())\nc=input()\n\nr_cnt=c.count('R')\nw_cnt=c.count('W')\n\nlast_c='R'*r_cnt+'W'*w_cnt\n\nnum=0\nfor i in range(n):\n  if c[i]!=last_c[i]:\n    num+=1\n\nprint((num+2-1)//2)", "n = int(input())\nwr = input()\nR_cnt = wr.count('R')\nans = wr.count('W',0,R_cnt)\nprint(ans)", "# RRR..WWW..\u3092\u76ee\u6307\u3059\nn = int(input())\ns = list(input())\nw_count, r_count = s.count(\"W\"), s.count(\"R\")\nt = list(\"R\" * r_count + \"W\" * w_count)\n\nans = 0\nfor i in range(n):\n    if s[i] != t[i]:\n        ans += 1\nprint(min(w_count, r_count, ans // 2))", "N = int(input())\nc = input()\nw = 0\nr = c.count('R')\nCand ={r}\nfor i in range(N):\n    if c[i] == 'R':\n        r -= 1\n    else:\n        w += 1\n    Cand.add(max(w,r))\nprint(min(Cand))", "def solve1(n: int, c: str) -> int:\n    ans = 0\n    r, w = 0, 0\n \n    for i in range(n):\n        if c[i] == \"R\":\n            r += 1\n        else:\n            w += 1\n \n    s_pivot = c[:r] + \"|\" + c[r:]\n    s_check = \" \" * r + \"|\"\n \n    for i in range(r, n):\n        if c[i] == \"R\":\n            ans += 1\n            s_check += \"X\"\n        else:\n            s_check += \" \"\n \n    #print(s_pivot, s_check, sep=\"\\n\")\n    return ans\n \n \nn = int(input())\nc = input()\n \nprint(solve1(n, c))", "n = int(input())\nC = list(input())\n\nif \"R\" not in C:\n    print(0)\n    return\n\nW = C.count(\"W\")\nR = C.count(\"R\")\nw = 0\nr = R\nans = float('inf')\n\nfor c in C:\n    if c == \"W\":\n        w += 1\n    else:\n        r -= 1\n    ans = min(ans, max(w, r))\nprint(ans)", "# N\u3068c\u306e\u5b9a\u7fa9\nN = int(input())\nC = input()\n\n# \u8d64\u8272\u306e\u500b\u6570\nred_num = str.count(C, \"R\")\n\n# \u5de6\u304b\u3089red_num\u500b\u307e\u3067\u306b\u542b\u307e\u308c\u308b\u767d\u8272\u306e\u500b\u6570\nwhite_num_left = str.count(C[:red_num], \"W\")\n\n# \u6700\u5c0f\u306e\u64cd\u4f5c\u56de\u6570\nmin_ope = white_num_left\n\n# \u6700\u5c0f\u306e\u64cd\u4f5c\u56de\u6570\u306e\u51fa\u529b\nprint(min_ope)", "N = int(input())\nc = input()\n\nR_r = c.count(\"R\")\nW_l = 0\nans = N\nfor i in range(N+1):\n  t = max(R_r,W_l)\n  ans = min(ans, t)\n  if R_r == 0:\n    break\n  if c[i] == \"R\":\n    R_r -= 1\n  else:\n    W_l += 1\n\nprint(ans)", "N=int(input())\nC=input()\n\nn=0\nc=0\nfor i in range(N)[::-1]:\n    if C[i]==\"R\":\n        while n<i:\n            if C[n]==\"W\":\n                c+=1\n                n+=1\n                break\n            n+=1\nprint(c)\n", "N = int(input())\nc = input()\nc = list(c)\nt = True\n\ni = 0\nj = N - 1\ncount = 0\n\nwhile t:\n\tif c[i] == \"R\":\n\t\ti += 1\n\telif c[j] == \"W\":\n\t\tj -= 1\n\telif c[i] == \"W\" and c[j] == \"R\":\n\t\tc[i] = \"R\"\n\t\tc[j] = \"W\"\n\t\tcount += 1\t\n\tif i >= j:\n\t\tt = False\n\t\tbreak\nprint(count)\n", "n = int(input())\nli_c = input()\nr_index = [i for i,x in enumerate(li_c) if x==\"R\"]\nw_index = [i for i,x in enumerate(li_c) if x==\"W\"]\nr_num = len(r_index)\nw_num = len(w_index)\n\nR = r_num\nW = 0\nans = max(R, W)\nfor i in range(n):\n    if li_c[i]==\"R\":\n        R -= 1\n    else:\n        W += 1\n    ans = min(ans, max(R, W))\nprint(ans)", "import sys\nfrom collections import Counter\n\ninput = sys.stdin.readline\nN = int(input())\nC = list(input().strip())\n\ncounter = Counter(C)\nif len(counter) == 1:\n    print(0)\nelse:\n    red_n = counter[\"R\"]\n    ans = 0\n    for i in range(N):\n        if red_n <= i:\n            break\n        if C[i] == \"W\":\n            ans += 1\n    print(ans)", "import collections\nn = int(input())\nwr = list(input())\n\ncc = collections.Counter(wr)\nr = cc['R']\n\nans = wr[:r].count('W')\n\nprint(ans)", "n = int(input())\nx = list(input())\n\nsx = len(set(x))\nif sx == 1:\n    print(0)\n    return\n\ncnt_r = x.count(\"R\")\ncnt = 0\nfor i in range(cnt_r):\n    if x[i] == \"W\":\n        cnt += 1\nprint(cnt)", "n = int(input())\nc = input()\nx = c.count(\"R\")\nc2 = c[:x]\nans = c2.count(\"W\")\nprint(ans)\n", "n = int(input())\n# cs = ['W' for i in range(200000)]\ncs = input()\n\nw_count = 0\nfor c in cs:\n    if c == 'W':\n        w_count += 1\n\nif w_count == 0:\n    print((0))\n    return\n\nrest = cs[-w_count:]\n\nanswer = 0\nfor c in rest:\n    if c == 'R':\n        answer += 1\nprint(answer)\n", "n = int(input())\nccc = input()\ncnt_r = ccc.count('R')\nans = 0\nfor i in range(cnt_r):\n    if ccc[i] == 'W':\n        ans += 1\nprint(ans)", "N=int(input())\nC=input()\n\n\nrw=C.count('R')\nwr=0\nans=rw\n\nfor i in range(N):\n    if C[i]=='R':\n        rw-=1\n    else:\n        wr+=1\n    ans=min(ans,max(rw,wr))\nprint(ans)", "\n# \u521d\u671f\u5165\u529b\nfrom bisect import bisect_left\nimport sys\n#input = sys.stdin.readline  #\u6587\u5b57\u5217\u3067\u306f\u4f7f\u308f\u306a\u3044\nN = int(input())\nc =input().strip()\nans =0\nr =[i for i, x in enumerate(c) if x == 'R'] #\u5168\u4f53\u306e\u4e2d\u3067R\u306eIndex\nr_num =len(r) #\u5168\u4f53\u3067R\u306e\u6570\n\nans =bisect_left(r,r_num) #\u546a\u308f\u308c\u306a\u3044\u305f\u3081\u306eR\u3068W\u306e\u5883\u754c\nprint(r_num -ans) #\u5883\u754c\u3088\u308a\u53f3\u5074\u306eR\u306e\u6570", "# D\nfrom collections import Counter\nn = int(input())\nc = list(input())\nd = Counter(c)\n# print(d)\n# print(d[\"R\"])\ne=Counter(c[:d[\"R\"]])\n# print(e[\"R\"])\nprint(d[\"R\"]-e[\"R\"])", "import sys\nsys.setrecursionlimit(10**7)\n\ndef input(): return sys.stdin.readline()[:-1]\nmod = 10**9 + 7\ndef readInt():return int(input())\ndef readIntList():return list(map(int,input().split()))\ndef readStringList():return list(input())\ndef readStringListWithSpace():return list(input().split())\ndef readString():return input()\n\nn = readInt()\ntext = readStringList()\nimport collections\nc  = collections.Counter(text)\nif c['W'] == 0:\n    print(\"0\")\n    return\ni,j,count = 0,len(text)-1,0\n\nwhile i <= j and i < len(text):\n    if text[i] == 'W':\n        while text[j] != 'R' and j > 0:\n            j -= 1\n        if i <= j and j > 0:\n            text[i],text[j] = text[j],text[i]\n            count += 1\n    i += 1\nprint(count)\n\n", "n = int(input())\nc = input()\n\nr = c.count(\"R\")\nans = 0\nfor i in range(r):\n  if c[i] == \"W\": ans += 1\nprint(ans)", "import math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\nimport sys\nimport random\nimport time\ninf = 10**9\n\n\ndef main():\n    n = int(input())\n    c = list(input())\n    l, r = 0, len(c) - 1\n\n    result = 0\n    while r - l > 0:\n        if c[l] == 'W' and c[r] == 'R':\n            c[l], c[r] = c[r], c[l]\n            result += 1\n        if c[r] == 'W':\n            r -= 1\n        if c[l] == \"R\":\n            l += 1\n        # print(c)\n    print(result)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N=int(input())\nC=list(input())\n\nR_count=C.count('R')\nif R_count==0:\n  print((0))\n  return\n\nC_count=C[:R_count].count('R')\nprint((R_count-C_count))\n", "n = int(input())\nc = input()\n\n# \u5165\u308c\u66ff\u3048\u3066\u3082\u8272\u3092\u5909\u3048\u3066\u3082\u30b3\u30b9\u30c8\u306f\u5909\u308f\u3089\u306a\u3044\n# \u6700\u3082\u5de6\u306b\u3042\u308bW\u3068\u6700\u3082\u53f3\u306b\u3042\u308bR\u3092\u5165\u308c\u66ff\u3048\u3001RRR\u30fb\u30fb\u30fbWWW\u30fb\u30fb\u30fb\u3092\u76ee\u6307\u3059\n# \u521d\u671f\u5c40\u9762\u3068\u6700\u7d42\u5c40\u9762\u3092\u6bd4\u8f03\u3059\u308b\u3068\u3001\u5165\u308c\u66ff\u3048\u308b\u3079\u304d\u77f3\u306e\u7dcf\u6570\u304c\u5206\u304b\u308b\n\nr_cnt = c.count('R')\nprint(c[:r_cnt].count('W'))", "n = int(input())\nc = input()\n\n# \u305d\u308c\u305e\u308c\u306e\u8272\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\nw = c.count(\"W\")\nr = c.count(\"R\")\n\nans = 0\nfor i in range(r): #\u3000\u8d64\u306e\u6570\u5206\u6587\u5b57\u5217\u3092\u78ba\u8a8d\u3059\u308b\n  if c[i] == \"W\": ans += 1 # \u30ab\u30a6\u30f3\u30c8\nprint(ans)", "import bisect\n\nN = int(input())\nc = list(input())\nc_sorted = sorted(c)\n\nR_count = bisect.bisect_right(c_sorted, 'R')\nans = 0\nfor i in range(R_count):\n    if c[i] != 'R':\n        ans += 1\nprint(ans)", "n = int(input())\nc = str(input())\nans = 0\n\nr_cnt = c.count('R')\n\nfor i in range(r_cnt):\n    if c[i] == 'W':\n        ans += 1\n\nprint(ans)\n", "#https://blacktanktop.hatenablog.com/entry/2020/08/05/073335 \u3092\u307e\u306d\u3057\u305f\nn = int(input())\nC = input()\nr_all = C.count('R')\n# C\u3092RWRWRWR\u3068\u3057\u305f\u6642\u306b\u3001\n# \u3069\u306e\u72b6\u614b\u306b\u3059\u308b\u306e\u304c\u6700\u5c0f\u624b\u6570\u304b\u304c\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u5168\u30d1\u30bf\u30fc\u30f3\u3067\u3042\u308b\u4ee5\u4e0b\u306e\u72b6\u614b\u306b\u304a\u3051\u308b\u6700\u5c0f\u624b\u6570\u3092\u8a08\u7b97\u3059\u308b\u3002\n# \u3042\u308b\u5834\u6240\u3092\u5883\u306b\u53f3\u5074\u3092W\u5de6\u5074\u3092R\u3068\u3059\u308b\u30a4\u30e1\u30fc\u30b8\u3002\n# |RWRWRWR\u2192WWWWWWW\n# R|WRWRWR\u2192RWWWWWW\n# RW|RWRWR\u2192RRWWWWW\n# .......\n# RWRWRW|R\u2192RRRRRRW\n# RWRWRWR|\u2192RRRRRRR\n# \u6700\u5c0f\u624b\u6570\u3092\u30ea\u30b9\u30c8\u306b\u5165\u308c\u3066\u304a\u304f\u3002\u30d1\u30bf\u30fc\u30f3\u306fn+1\nmove = [0] * (n+1)\n# \u5b9f\u969b\u306e\u4e26\u3073\u306b\u304a\u3044\u3066\u3001|\u306e\u5de6\u306eW\u53f3\u306eR\u306e\u6570\u3092w, r\u3068\u3059\u308b\n# \u521d\u671f\u5024\u306fw=0, r=C\u306e\u3046\u3061R\u306e\u6570\nw = 0\nr = r_all\n# move\u306e\u521d\u671f\u5024\u306f\u3059\u3079\u3066W\u3092\u76ee\u6307\u3059\u306e\u3067\nmove[0] = max(0, r_all)\n# for\u3067\uff11\u6587\u5b57\u305a\u3064\u898b\u3066\u3044\u304f\u306e\u306f\u533a\u5207\u308a\u3092\u4e00\u3064\u305a\u3064\u305a\u3089\u3057\u3066\u3044\u308b\u30a4\u30e1\u30fc\u30b8\n# C\u306e\u6587\u5b57\u3092\u307f\u3066W\u306a\u3089w\u30921\u5897\u3084\u3057\u3066R\u306a\u3089r\u30921\u6e1b\u3089\u3059\n# \uff08\u533a\u5207\u308a\u306e\u5de6\u306eW\u306e\u6570\u304cw\u3067\u53f3\u306eR\u306e\u6570\u304cr\u306a\u306e\u3067\uff09\nfor idx, c in enumerate(C):\n    if c == 'W':\n        w += 1\n    else:\n        r -= 1 \n    move[idx+1] = max(w, r)\nans = min(move)\nprint(ans) ", "N = int(input())\nC = input()\nR = C.count(\"R\")\nans = 0\n\nfor r in range(R):\n  if C[r]==\"W\":\n    ans+=1\n\nprint(ans)", "n = int(input())\nc = input()\n\nr_cnt = c.count(\"R\")\n\nprint(r_cnt - c[:r_cnt].count(\"R\"))", "def main():\n    n = int(input())\n    c = str(input())\n\n    w_count = 0\n    for i in range(n):\n        if c[i] == 'W':\n            w_count += 1\n\n    w_count_ano = 0\n    for i in range(w_count):\n        if c[- 1 - i] == 'W':\n            w_count_ano += 1\n\n    count = w_count - w_count_ano\n    print(count)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nread = sys.stdin.read\n#readlines = sys.stdin.readlines\ndef main():\n    n = int(input())\n    rc = tuple(input())\n    rc2 = [c == 'W' for c in rc]\n    r1 = sum(rc2) # \u767d\u3092\u3059\u3079\u3066\u8d64\u306b\u3057\u305f\u5834\u5408\n    r2 = n - r1  # \u8d64\u3092\u3059\u3079\u3066\u767d\u306b\u3057\u305f\u5834\u5408\u3002\n    r3 = sum(rc2[:r2]) # \u8d64\u3092\u5de6\u306b\u3064\u3081\u308b\u306e\u306b\u90aa\u9b54\u306b\u306a\u308b\u767d\u306e\u6570\n    print((min(r1, r2, r3)))\n\ndef __starting_point():\n    main()\n\n__starting_point()"]