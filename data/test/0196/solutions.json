["x, k = map(int, input().split())\nif x == 0:\n    print(0)\nelse:\n    mod = 10 ** 9 + 7\n    p = pow(2, k, mod)\n    ans = (x * (p * 2) - (p - 1)) % mod\n    print(ans)", "mod = 10**9+7\nx, k = list(map(int, input().split(' ')))\nif (x == 0):\n    print(0)\nelse:\n    val1 = pow(2,k+1,mod) * x\n    val2 = pow(2, k, mod) - 1\n    val1 -= val2\n    val1 %= mod\n    print(val1)\n", "\n\nx,k = map(int, input().strip().split())\n\nMOD = 1000000007\n\nif x > 0:\n\tr = (pow(2, k+1, MOD) * x - pow(2, k, MOD) + 1 + MOD * 10) % MOD\nelse:\n\tr = 0\n\nprint(r)", "from sys import stdin\n\nline = stdin.readline().rstrip().split()\nx = int(line[0])\nk = int(line[1])\n\nif x == 0:\n    print(0)\nelse:\n    nn = pow(2, k, 1000000007)\n    result = (nn*2*x - nn + 1) % 1000000007\n    print(result)\n\n\n\n", "l = input().split(' ')\nx = int(l[0])\nk = int(l[1])\n\nif x == 0:\n    print('0')\nelse:\n    mod = 1000000007\n\n    def pow_mod(a, b):\n        if b < 2:\n            return int(a ** b) % mod\n        elif b % 2 == 0:\n            return int(pow_mod(a, b // 2) ** 2) % mod\n        else:\n            return pow_mod(a, b - 1) * a % mod\n\n    twop = pow_mod(2, k)\n    high = x * twop\n    leafs = twop\n    low = high - leafs + 1\n    s = (high + 1) * high // 2 - (low - 1 + 1) * (low - 1) // 2\n    answer = s * 2 // leafs\n    answer %= mod\n\n    print(answer)", "x, k = map(int, input().split())\nans = 0\nmd = 1000000007\n\ndef bpow(base, exp, md):\n    if (exp == 0):\n        return 1\n    if (exp % 2 == 1):\n        return (base * bpow(base, exp-1, md)) % md\n    else:\n        k = bpow(base, exp//2, md)\n        return (k*k) % md\n\npw = bpow(2, k, md)\nans = (2 * pw * x) % md\nif (x != 0):\n    ans -= pw-1\nans = (ans + md) % md\nprint(ans)", "x, k = list(map(int, input().split()))\nif x == 0:\n    print(0)\n    return\nx = 2 * x - 1\nmod = 10**9 + 7\n\ndef pot(r, k):\n    if k == 0: return 1\n    if k % 2 == 1:\n        return r * pot(r, k - 1) % mod\n    y = pot(r, k // 2)\n    return y * y % mod\n\nprint((pot(2, k) * x + 1) % mod)\n", "mod = 1000000007\nx, k = map(int, input().split())\nif x == 0:\n    print(0)\nelse:\n    ans = (pow(2, k + 1, mod) * x % mod - (pow(2, k, mod) - 1 + mod) % mod + mod) % mod\n    print(ans)", "x, k = map(int, input().split())\nif x == 0:\n    print(0)\n    return\nres = pow(2, k + 1, 10 ** 9 + 7) * x - pow(2, k, 10 ** 9 + 7) + 1\nres %= 10 ** 9 + 7\nprint(res)", "x, k = map(int, input().split())\nmod = 1000000007\nflag = True\nif x==0:\n\tflag = False\n\nx = x%mod\ny = pow(2, k+1, mod)\nz = pow(2, k, mod) - 1\n\nx = x*y\nx = x%mod\nx = x-z\nif x==0:\n\tx=x+mod\nx = x%mod\n\nif flag:\n\tprint(x)\nelse:\n\tprint(0)", "from sys import stdin, stdout\n\n\nMOD = 10 ** 9 + 7\n\n\ndef bin_pow(n, k):\n    res = 1\n    \n    while k:\n        if k & 1:\n            res = (res * n) % MOD\n        \n        n = (n * n) % MOD\n        k >>= 1\n        \n    return res\n\n\nx, k = map(int, stdin.readline().split())\n\nif x == 0:\n    stdout.write('0')\nelse:\n    ans = (bin_pow(2, k + 1) * x - bin_pow(2, k) + 1) % MOD\n    stdout.write(str(ans))", "x,k = list(map(int, input().split()))\nmod = 10 ** 9 + 7\nprint(0 if x == 0 else (x * pow(2, k + 1, mod) - pow(2, k, mod) + 1 + mod) % mod)\n", "x, k = list(map(int, input().split()))\nmod = 1000000007\nif (k == 0):\n    print((2 * x) % mod)\nelif (x == 0):\n    print(0)\nelse:\n    ans = ((2 * x - 1) * pow(2, k, mod) + 1) % mod\n    print(ans)\n", "x, k = map(int, input().split())\n\nmod = 10**9+7\n\ndef bp(n,p):\n  if p == 0:\n    return 1\n  elif p % 2 == 0:\n    return bp(n**2 % mod, p // 2)\n  else:\n    return (bp(n**2 % mod, p // 2) * n) % mod\n\ndef f(n,x):\n  return (bp(2,n) * x - bp(2,n) + 1) % mod\n\nif x > 0:\n  print(f(k,2*x) % mod)\nelse:\n  print(0)", "def pwr(a,n,m):\n    if n==0:return 1\n    ans=pwr(a,n//2,m)\n    ans=ans*ans\n    ans%=m\n    if n%2==1:return (ans*a)%m\n    else: return ans\nM=1000000007\ntx,tn=input().split()\nx=int(tx)\nn=int(tn)\nans=pwr(2,n+1,M)*x\nans%=M\nans=ans-pwr(2,n,M)+1\nans=(ans+M)%M\nif x==0: ans=0\nprint(ans)\n", "#     Codeforces Round #489 (Div. 2)\nimport collections\nfrom functools import cmp_to_key\n#key=cmp_to_key(lambda x,y: 1 if x not in y else -1 )\n\nimport sys\ndef getIntList():\n    return list(map(int, input().split()))    \n\nimport bisect \n            \nbase = 10**9  + 7    \ndef get2k(k) :\n    f = 2\n    b = 1\n    r = 1\n    while k>=b:\n        if k &b >0:\n            r = r*f % base\n        b*=2\n        f = f*f % base\n    return r\n\nx, k = getIntList()\nif x ==0:\n    print(0)\n    return\nt2k = get2k(k)\n\nr = x *   t2k *2 - t2k + 1\nr = r% base\nprint(r)\n\n", "x, k = [int(x) for x in input().split()]\n\nif x == 0:\n    print(0)\n    return\n\nmod = 10 ** 9 + 7\n\nres = x * pow(2, k + 1, mod) % mod\nres = ((res - (pow(2, k, mod) - 1)) % mod + mod) % mod\n\nprint(res)\n", "def my_pow(a, n, m):\n\tif (n == 0) : return 1\n\tans = my_pow(a, n // 2, m)\n\tif (n % 2 == 0):\n\t\treturn ans * ans % m\n\telse:\n\t\treturn (ans * ans * a) % m\n\nx, k = map(int, input().split())\nif (x == 0):\n\tprint(0)\nelse:\n\tmod = 10**9 + 7\n\tx *= 2\n\tans = (x - 1) * my_pow(2, k, mod) + 1\n\tans %= mod\n\tans += 2 * mod\n\tprint(ans % mod)", "def binPow(x, n, r):\n\tif n == 0:\n\t\treturn 1\n\telif n == 1:\n\t\treturn x % r\n\tif n % 2 == 0:\n\t\treturn binPow((x * x) % r, n // 2, r)\n\treturn (binPow((x * x) % r, n // 2, r) * x) % r\n\nx, k = list(map(int, input().split()))\nr = 10 ** 9 + 7\nif x == 0:\n\tprint(0)\n\treturn\nelif k == 0:\n\tprint((x * 2) % r)\n\treturn\nprint((binPow(2, k, r) * (2 * x - 1) + 1) % r)\n", "MOD = 1000*1000*1000+7\n\ndef pow(x,e,m):\n    res = 1\n    x = x % m\n\n    while e>0:\n        if(e % 2 == 1):\n            res = (res*x) % m\n\n        e = e//2\n        x = (x*x) % m\n\n    return res\n\nx, k = map(int, input().split(' '))\n\n\nif x == 0:\n    print(0)\n\nelse:\n    myres = (pow(2,k,MOD)*(2*x-1) + 1) % MOD\n    print(myres)", "x,k = list(map(int,input().split()))\nmod = 10**9 + 7\nif x == 0:\n    print(0)\nelse:\n    print(((2*x-1)*pow(2,k,mod) + 1)%mod)\n", "def powermod(base, power):\n    if power == 0: return 1\n    if power == 1: return base\n    ret = powermod(base, power // 2)\n    ret *= ret\n    ret %= 1000000007\n    if power % 2 == 1:\n        ret *= base\n        ret %= 1000000007\n    return ret\n\nx, k = list(map(int, input().split()))\n\nb = x * 2 - 1\nans = b * powermod(2, k) + 1\nans %= 1000000007\n\nif x == 0: ans = 0\nprint (ans)\n", "#!/usr/bin/env python3\n\n\nmod = 10**9 + 7\n\n\n[x, k] = list(map(int, input().strip().split()))\n\nif x == 0:\n\tprint(0)\n\treturn\n\n\ndef pow2(n):\n\tif n == 0:\n\t\treturn 1\n\tif n % 2 == 0:\n\t\treturn (pow2(n // 2) ** 2) % mod\n\telse:\n\t\treturn (((pow2(n // 2) ** 2) % mod) * 2) % mod\n\nprint((pow2(k) * ((2 * x - 1) % mod) + 1) % mod)\n", "mod=1000000007\ndef fastexp(base,exp):\n    if(exp==0):\n        return 1;\n    if(exp==1):\n        return base%mod;\n    t=fastexp(base,exp//2);\n    if(exp%2==0):\n        return (t%mod*t%mod)%mod;\n    else:\n        return (t%mod*t%mod*base%mod)%mod;\nx,k=list(map(int,input().split()))\nif(x==0):\n    print((0));\nelse:\n    t=fastexp(2,k)%mod;\n    before=((2*t)%mod*x%mod)%mod-(t+mod-1)%mod\n    while(before<0):\n        before+=mod;\n    before=before%mod;\n    print(before)\n", "x, k = [int(v) for v in input().split()]\nmod = 10**9 + 7\n\nif x == 0:\n    print(0)\nelse:\n    print(((pow(2, k + 1, mod) * x) - (pow(2, k, mod) - 1)) % mod)\n"]