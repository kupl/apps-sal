["import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\nl = []\nfor _ in range(n):\n    l.append(input().strip())\n\ndef witch(s):\n    out = 0\n    if s[0] != s[1]:\n        out += 2\n    if s[1] != s[2]:\n        out += 1\n    return out\n\nif n >= 4 and m >= 4:\n    print(-1)\nelse:\n    if n < m:\n        n, m = m, n\n        l = [''.join([l[j][i] for j in range(m)]) for i in range(n)]\n    if m == 1:\n        print(0)\n    elif m == 2:\n        even = 0\n        odd = 0\n        first = l.pop(0)\n        if first == '00' or first == '11':\n            odd += 1\n        else:\n            even += 1\n        for nex in l:\n            if nex == '00' or nex == '11':\n                odd, even = even + 1, odd\n            else:\n                odd, even = even, odd + 1\n        print(min(even, odd))\n    elif m == 3:\n        #ee, eo, oe, oo = [0, 0, 0 ,0]\n        ll = [0, 0, 0, 0]\n        for nex in l:\n            ll.reverse()\n            ll[witch(nex)] += 1\n        print(n - max(ll))\n        \n        \n", "from collections import *\nfrom sys import stdin, stderr\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n\nn, m = rl()\nif n > 3:\n    print(-1)\n    return\nif n < 2:\n    print(0)\n    return\na = [[int(c) for c in stdin.readline().rstrip()] for _ in range(n)]\nif n == 2:\n    a.append(a[0])\nr = n * m\nfor target in range(4):\n    total = 0\n    for a0, a1, a2 in zip(*a):\n        if a0 ^ a1 != target & 1 or a1 ^ a2 != target >> 1:\n            total += 1\n        target ^= 3\n    if total < r:\n        r = total\nprint(r)\n", "from sys import stdin\ninput = stdin.readline\n\nn, m = map(int, input().split())\na = []\n\nfor x in range(n):\n    a.append(input().rstrip())\n\nif n == 1:\n    print(0)\nelif n >= 4:\n    print(-1)\nelif n == 2:\n    cnt1, cnt2 = 0, 0\n    \n    for x in range(m):\n        if x % 2 == 0:\n            cnt1 += (a[0][x] == a[1][x])\n            cnt2 += (a[0][x] != a[1][x])\n        else:\n            cnt1 += (a[0][x] != a[1][x])\n            cnt2 += (a[0][x] == a[1][x])\n\n    print(min(cnt1, cnt2))\n\nelif n == 3:\n    cnt1, cnt2, cnt3, cnt4 = 0, 0, 0, 0\n\n    for x in range(m):\n        if x % 2 == 0:\n            if a[0][x] == a[1][x] == a[2][x]:\n                cnt1 += 0\n            else:\n                cnt1 += 1\n            if a[0][x] == a[2][x] and a[0][x] != a[1][x]:\n                cnt2 += 0\n            else:\n                cnt2 += 1\n        else:\n            if a[0][x] == a[2][x] and a[0][x] != a[1][x]:\n                cnt1 += 0\n            else:\n                cnt1 += 1\n            if a[0][x] == a[1][x] == a[2][x]:\n                cnt2 += 0\n            else:\n                cnt2 += 1\n\n        if x % 2 == 0:\n            if a[0][x] == a[1][x] and a[0][x] != a[2][x]:\n                cnt3 += 0\n            else:\n                cnt3 += 1\n            if a[1][x] == a[2][x] and a[0][x] != a[1][x]:\n                cnt4 += 0\n            else:\n                cnt4 += 1\n        else:\n            if a[1][x] == a[2][x] and a[0][x] != a[1][x]:\n                cnt3 += 0\n            else:\n                cnt3 += 1\n            if a[0][x] == a[1][x] and a[0][x] != a[2][x]:\n                cnt4 += 0\n            else:\n                cnt4 += 1\n                \n    print(min(cnt1, cnt2, cnt3, cnt4))", "import sys\ninput = sys.stdin.readline\nn,m=map(int,input().split())\nmatrix=[0]*n\nfor i in range(n):\n    line=input()\n    matrix[i]=[0]*m\n    for j in range(m):\n        matrix[i][j]=int(line[j])\nif n>m:\n    matrix2=[0]*m\n    for i in range(m):\n        matrix2[i]=[0]*n\n        for j in range(n):\n            matrix2[i][j]=matrix[i][j]\n    n,m=m,n\n    matrix=[0]*n\n    for i in range(n):\n        matrix[i]=[0]*m\n        for j in range(m):\n            matrix[i][j]=matrix2[i][j]\nif n>3:\n    print(-1)\nelse:\n    if n==1:\n        print(0)\n    else:\n        if n==2:\n            poss=[[0,0],[1,0],[1,1],[0,1]]\n            costs=[0]*4\n            for i in range(m):\n                newcosts=[0]*4\n                for p in range(4):\n                    bc=0\n                    for foo in range(2):\n                        if poss[p][foo]!=matrix[foo][i]:\n                            bc+=1\n                    newcosts[p]=min(costs[p-1],costs[(p+1)%4])\n                    newcosts[p]+=bc\n                for p in range(4):\n                    costs[p]=newcosts[p]\n            print(min(costs))\n        else:\n            poss1=[[0,0,0],[0,1,0],[1,1,1],[1,0,1]]\n            poss2=[[1,0,0],[1,1,0],[0,1,1],[0,0,1]]\n            costs1=[0]*4\n            costs2=[0]*4\n            for i in range(m):\n                newcosts1=[0]*4\n                newcosts2=[0]*4\n                for p in range(4):\n                    bc1=0\n                    bc2=0\n                    for foo in range(3):\n                        if poss1[p][foo]!=matrix[foo][i]:\n                            bc1+=1\n                        if poss2[p][foo]!=matrix[foo][i]:\n                            bc2+=1\n                    newcosts1[p]=min(costs1[p-1],costs1[(p+1)%4])\n                    newcosts1[p]+=bc1\n                    newcosts2[p]=min(costs2[p-1],costs2[(p+1)%4])\n                    newcosts2[p]+=bc2\n                for p in range(4):\n                    costs1[p]=newcosts1[p]\n                    costs2[p]=newcosts2[p]\n            print(min(min(costs1),min(costs2)))", "import itertools\n\nn, m = list(map(int, input().split()))\n\nrows = []\n\nfor _ in range(n):\n    rows.append(list(map(int, input())))\n\n#if m < n:\n#    rows = [list(rows[i][j] for i in range(n)) for j in range(m)]\n\n# width m\n# height n\n# n <= m\n\nif m >= 4 and n>=4:\n    print(-1)\n    return\n    \nif m==1 or n==1:\n    print(0)\n    return\n    \nif n==2 or m==2:\n    if n==2:    \n        pars = [(rows[0][i]+rows[1][i])%2 for i in range(m)]\n    else:\n        pars = [(rows[i][0]+rows[i][1])%2 for i in range(n)]\n    best = 10**8\n    for to_match in [itertools.cycle([0, 1]), itertools.cycle([1, 0])]:\n        cost = 0\n        for x, y in zip(pars, to_match):\n            cost += abs(x-y)\n        best = min(best, cost)\n    print(best)\n    return\n    \n# n = 3\n\nbest = 10**8\nif n==3:\n    vals = [((rows[0][i]+rows[1][i])%2, (rows[1][i]+rows[2][i])%2) for i in range(m)]\nelse:\n    vals = [((rows[i][0]+rows[i][1])%2, (rows[i][1]+rows[i][2])%2) for i in range(n)]\nfor up, down in itertools.product([0, 1], repeat=2):\n    cost = 0\n\n    for cur_up, cur_down in vals:\n        up = 1-up\n        down = 1-down\n        diff = abs(cur_up-up)+abs(cur_down-down)\n        if diff == 2:\n            diff = 1\n        cost += diff\n        \n    best = min(best, cost)\nprint(best)\n        \n", "import sys\ninput = sys.stdin.readline\n\nn,m = list(map(int,input().split()))\na = []\n\ndef f(x,y):\n    res = 0\n    if x[0] != y[0]:\n        res += 1\n    if x[1] != y[1]:\n        res += 1\n    if x[2] != y[2]:\n        res += 1\n    return res\n\nif n >= 4 and m >= 4:\n    for i in range(n):\n        a.append(list(input()))\n    print(-1)\nelif n == 1 or m == 1:\n    for i in range(n):\n        a.append(list(input()))\n    print(0)\nelif n == 2 or m == 2:\n    c = []\n    if m == 2:\n        for i in range(n):\n            s = list(input())\n            c.append(s.count('1')%2)\n    elif n == 2:\n        for i in range(n):\n            a.append(list(input()))\n        for i in range(m):\n            tmp = 0\n            if a[0][i] == '1':\n                tmp += 1\n            if a[1][i] == '1':\n                tmp += 1\n            c.append(tmp%2)\n    res1 = 0\n    res2 = 0\n    for i in range(len(c)):\n        if i%2 == c[i]:\n            res1 += 1\n        else:\n            res2 += 1\n    print(min(res1,res2))\nelse:\n    a = []\n\n    if n == 3:    \n        b = list(input())\n        c = list(input())\n        d = list(input())\n        for i in range(m):\n            a.append(b[i]+c[i]+d[i])\n    elif m == 3:\n        s = input()\n        a.append(s)\n    r = max(n,m)\n    res1 = 0\n    res2 = 0\n    res3 = 0\n    res4 = 0\n    for i in range(r):\n        if i%2 == 0:\n            res1 += min(f(a[i],'111'),f(a[i],'000'))\n            res2 += min(f(a[i],'010'),f(a[i],'101'))\n            res3 += min(f(a[i],'110'),f(a[i],'001'))\n            res4 += min(f(a[i],'011'),f(a[i],'100'))\n        else:\n            res2 += min(f(a[i],'111'),f(a[i],'000'))\n            res1 += min(f(a[i],'010'),f(a[i],'101'))\n            res4 += min(f(a[i],'110'),f(a[i],'001'))\n            res3 += min(f(a[i],'011'),f(a[i],'100'))\n    print(min(res1,res2,res3,res4))\n\n\n", "import math\nimport sys\ninput = sys.stdin.readline\n\n\n# def solve_rec(R, moves):\n#     all_good = True\n#     # print('solve_rec', R, moves)\n#     for i in range(1, len(R)):\n#         for j in range(1, len(R[0])):\n#             if not R[i][j]:\n#                 all_good = False\n#                 break\n\n#     if all_good:\n#         return moves\n\n#     if moves >= 3:\n#         return math.inf\n\n#     answer = math.inf\n#     for i in range(len(R)-1):\n#         for j in range(len(R)-1):\n#             R2 = copy.deepcopy(R)\n#             R2[i][j] = not R2[i][j]\n#             R2[i+1][j] = not R2[i+1][j]\n#             R2[i][j+1] = not R2[i][j+1]\n#             R2[i+1][j+1] = not R2[i+1][j+1]\n#             answer = min(answer, solve_rec(R2, moves+1))\n#     return answer\n\n\nn, m = [int(_) for _ in input().split()]\nM = []\nfor i in range(n):\n    row = input()[:-1]\n    M.append(row)\n\nif n >= 4 and m >= 4:\n    print(-1)\nelif n == 1 or m == 1:\n    print(0)\nelse:\n    if n <= m:\n        R = [[True] * (m-1) for _ in range(2)]\n        for i in range(n-1):\n            for j in range(m-1):\n                count = 0\n                if M[i][j] == '1':\n                    count += 1\n                if M[i+1][j+1] == '1':\n                    count += 1\n                if M[i+1][j] == '1':\n                    count += 1\n                if M[i][j+1] == '1':\n                    count += 1\n                if not (count % 2):\n                    R[i][j] = False\n    else:\n        R = [[True] * (n-1) for _ in range(2)]\n        for i in range(m-1):\n            for j in range(n-1):\n                count = 0\n                if M[j][i] == '1':\n                    count += 1\n                if M[j+1][i+1] == '1':\n                    count += 1\n                if M[j+1][i] == '1':\n                    count += 1\n                if M[j][i+1] == '1':\n                    count += 1\n                if not (count % 2):\n                    R[i][j] = False\n\n    mnm = max(n, m)\n    dp_all_good = [math.inf] * (mnm)\n    dp_all_bad = [math.inf] * (mnm)\n    dp_top_bad = [math.inf] * (mnm)\n    dp_bot_bad = [math.inf] * (mnm)\n\n    dp_all_good[0] = 0\n    dp_all_bad[0] = 0\n    dp_top_bad[0] = 0\n    dp_bot_bad[0] = 0\n\n    for i in range(1, len(R[0])+1):\n        if R[0][i-1] and R[1][i-1]:\n            dp_all_good[i] = min(dp_all_good[i], dp_all_good[i-1])\n            dp_all_bad[i] = min(dp_all_bad[i], dp_all_bad[i-1]+1)\n            dp_top_bad[i] = min(dp_top_bad[i], dp_top_bad[i-1]+1)\n            dp_bot_bad[i] = min(dp_bot_bad[i], dp_bot_bad[i-1]+1)\n        if (not R[0][i-1]) and (not R[1][i-1]):\n            dp_all_good[i] = min(dp_all_good[i], dp_all_bad[i-1]+1)\n            dp_all_bad[i] = min(dp_all_bad[i], dp_all_good[i-1])\n            dp_top_bad[i] = min(dp_top_bad[i], dp_bot_bad[i-1]+1)\n            dp_bot_bad[i] = min(dp_bot_bad[i], dp_top_bad[i-1]+1)\n        if R[0][i-1] and (not R[1][i-1]):\n            dp_all_good[i] = min(dp_all_good[i], dp_bot_bad[i-1]+1)\n            dp_all_bad[i] = min(dp_all_bad[i], dp_top_bad[i-1]+1)\n            dp_top_bad[i] = min(dp_top_bad[i], dp_all_bad[i-1]+1)\n            dp_bot_bad[i] = min(dp_bot_bad[i], dp_all_good[i-1])\n        if (not R[0][i-1]) and R[1][i-1]:\n            dp_all_good[i] = min(dp_all_good[i], dp_top_bad[i-1]+1)\n            dp_all_bad[i] = min(dp_all_bad[i], dp_bot_bad[i-1]+1)\n            dp_top_bad[i] = min(dp_top_bad[i], dp_all_good[i-1])\n            dp_bot_bad[i] = min(dp_bot_bad[i], dp_all_bad[i-1]+1)\n\n    # print(R)\n    # print(dp_all_good)\n    # print(dp_all_bad)\n    # print(dp_top_bad)\n    # print(dp_bot_bad)\n\n    print(min(dp_all_good[mnm-1], dp_all_bad[mnm-1]+1, dp_bot_bad[mnm-1]+1, dp_top_bad[mnm-1]+1))\n"]