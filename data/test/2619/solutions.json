["import sys\n\n\ndef main():\n    n, q, c = list(map(int, sys.stdin.readline().split()))\n    a = []\n    c += 1\n    for i in range(c):\n        t = []\n        for j in range(102):\n            t.append([0] * 102)\n        a.append(t)\n\n    for i in range(n):\n        x, y, s = list(map(int, sys.stdin.readline().split()))\n        for j in range(c):\n            a[j][x][y] += s\n            s += 1\n            if s >= c:\n                s = 0\n\n    for k in range(c):\n        for i in range(102):\n            for j in range(1, 102):\n                a[k][i][j] += a[k][i][j - 1]\n\n    alans = [0] * q\n    for i in range(q):\n        t, x1, y1, x2, y2 = list(map(int, sys.stdin.readline().split()))\n        ans = 0\n        t = t % c\n        for j in range(x1, x2 + 1):\n            ans += a[t][j][y2] - a[t][j][y1 - 1]\n\n        alans[i] = str(ans)\n    print(\"\\n\".join(alans))\n\n\nmain()\n", "\nimport sys\n\na=[int(i) for i in sys.stdin.readline().split()]\ncc=a[2]\nst=[]\ns=[]\nch=[[[0,0,0,0,0,0,0,0,0,0,0] for i in range(101)] for j in range(101)]\nfor i in range(a[0]):\n    c=[int(j) for j in sys.stdin.readline().split()]\n    st.append((c[0],c[1]))\n    s.append(c[2])\n    ch[c[0]][c[1]][c[2]]+=1\ndp=[[[0,0,0,0,0,0,0,0,0,0,0] for i in range(102)] for j in range(102)]\nfor i in range(1,102):\n    for j in range(1,102):\n        for k in range(11):\n            dp[i][j][k] = dp[i-1][j][k] + dp[i][j-1][k] - dp[i-1][j-1][k]\n        for k in range(11):\n            dp[i][j][k] +=ch[i-1][j-1][k]\nanss=[]\nfor i in range(a[1]):\n    ans=0\n    l=[int(j) for j in sys.stdin.readline().split()]\n    pp=l[0]\n    i1=l[1]\n    j1=l[2]\n    i2=l[3]\n    j2=l[4]\n    count = [dp[i2+1][j2+1][k] + dp[i1][j1][k] - dp[i2+1][j1][k] - dp[i1][j2+1][k] for k in range(11)]\n    t=l[0]\n    for m in range(11):\n        lk=(m+t)%(cc+1)\n        ans+=(count[m]*lk)\n        #print(m,lk,ans)\n    anss.append(str(ans))\nprint(\"\\n\".join(anss))\n    #break\n", "n, q, c = list(map(int,input().split()))\n\nstars = [ list( map(int,input().split()) ) for i in range(n)]\nqueries = [ list( map(int,input().split()) ) for i in range(q)]\n\nprec = [[[0 for y in range(101)]for x in range(101)] for i in range(c+1)] #0, c\nfor x, y, s in stars:\n  for t in range(c+1):\n    prec[t][x][y] += s+t if s+t <= c else s+t-(c+1)\n\nfor s in range(len(prec)):\n  for x in range(len(prec[s])):\n    for y in range(len(prec[s][x])):\n      if x and y:\n        prec[s][x][y] += prec[s][x-1][y]+prec[s][x][y-1]-prec[s][x-1][y-1]\n\n\n\nfor t, x1, y1, x2, y2 in queries:\n  s = t%(c+1)\n  res = ( prec[s][x2][y2]-prec[s][x1-1][y2]-prec[s][x2][y1-1]+prec[s][x1-1][y1-1] )\n  print(res)\n\n\n", "\"\"\"\n    Author      : Arif Ahmad\n    Date        : \n    Algo        : \n    Difficulty  : \n\"\"\"\nfrom sys import stdin, stdout\n\ndef main():\n    n, q, c = [int(_) for _ in stdin.readline().strip().split()]\n\n    g = [[[0 for i in range(102)] for j in range(102)] for k in range(12)]\n    for _ in range(n):\n        x, y, s = [int(_) for _ in stdin.readline().strip().split()]\n        for t in range(c+1):\n            brightness = (s + t) % (c + 1)\n            g[t][x][y] += brightness\n\n    # dp stores cummulative brightness at time t\n    dp = [[[0 for i in range(102)] for j in range(102)] for k in range(12)]\n    for t in range(c+1):\n        for x in range(1, 101):\n            for y in range(1, 101):\n                dp[t][x][y] = dp[t][x-1][y] + dp[t][x][y-1] - dp[t][x-1][y-1]  + g[t][x][y]\n\n    for _ in range(q):\n        t, x1, y1, x2, y2 = [int(_) for _ in stdin.readline().strip().split()]\n        t = t % (c + 1)\n        ans = dp[t][x2][y2] - dp[t][x1-1][y2] - dp[t][x2][y1-1] + dp[t][x1-1][y1-1]\n        stdout.write(str(ans) + '\\n')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, q, c = list(map(int,input().split()))\n\nstars = [ list( map(int,input().split()) ) for i in range(n)]\nqueries = [ list( map(int,input().split()) ) for i in range(q)]\n\nprec = [[[0 for y in range(101)]for x in range(101)] for i in range(c+1)] #0, c\nfor x, y, s in stars:\n  for t in range(c+1):\n    prec[t][x][y] += s+t if s+t <= c else s+t-(c+1)\n\nfor s in range(len(prec)):\n  for x in range(len(prec[s])):\n    for y in range(len(prec[s][x])):\n      if x and y:\n        prec[s][x][y] += prec[s][x-1][y]+prec[s][x][y-1]-prec[s][x-1][y-1]\n\n\n\nfor t, x1, y1, x2, y2 in queries:\n  s = t%(c+1)\n  res = ( prec[s][x2][y2]-prec[s][x1-1][y2]-prec[s][x2][y1-1]+prec[s][x1-1][y1-1] )\n  print(res)\n", "# Fast I/O template\nimport sys \ndef getInt():\n    n = sys.stdin.readline()\n    return(int(n))\ndef getStr():\n    s = sys.stdin.readline()\n    return(s)\ndef getArr():\n    arr = list(map(int, sys.stdin.readline().split()))\n    return(arr)\ndef getPair():\n    a, b = list(map(int, sys.stdin.readline().split()))\n    return(a, b)\ndef put(n):\n    sys.stdout.write(str(n)+\"\\n\")\n\n# Your code goes here\na=getArr()\ncc=a[2]\nst=[]\ns=[]\nch=[[[0,0,0,0,0,0,0,0,0,0,0] for i in range(101)] for j in range(101)]\nfor i in range(a[0]):\n    c=getArr()\n    st.append((c[0],c[1]))\n    s.append(c[2])\n    ch[c[0]][c[1]][c[2]]+=1\ndp=[[[0,0,0,0,0,0,0,0,0,0,0] for i in range(102)] for j in range(102)]\nfor i in range(1,102):\n    for j in range(1,102):\n        for k in range(11):\n            dp[i][j][k] = dp[i-1][j][k] + dp[i][j-1][k] - dp[i-1][j-1][k]\n        for k in range(11):\n            dp[i][j][k] +=ch[i-1][j-1][k]\nfor i in range(a[1]):\n    ans=0\n    l=getArr()\n    i1=l[1]\n    j1=l[2]\n    i2=l[3]\n    j2=l[4]\n    count = [dp[i2+1][j2+1][k] + dp[i1][j1][k] - dp[i2+1][j1][k] - dp[i1][j2+1][k] for k in range(11)]\n    t=l[0]\n    for m in range(11):\n        lk=(m+t)%(cc+1)\n        ans+=(count[m]*lk)\n        #print(m,lk,ans)\n    print(ans)", "n,q,c = list(map(int,input().split()))\nsky = [[[0] * 11 for j in range(101)] for i in range(101)]\nc += 1\nfor i in range(n):\n    x,y,s = list(map(int,input().split()))\n    sky[y][x][s % c] += 1\n\nfor k in range(11):\n    i = 1\n    while i < 101:\n        j = 1\n        while j < 101:\n            sky[i][j][k] += (sky[i-1][j][k]  + sky[i][j-1][k] -  sky[i-1][j-1][k])\n            j += 1\n        i += 1\nreq = [list(map(int,input().split())) for i in range(q)]\nfor i in range(q):\n    t,x,y,x2,y2 = req[i]\n    ans = 0\n    j = 0\n    while j < c:\n        ans += (sky[y2][x2][j] - sky[y2][x-1][j] - sky[y-1][x2][j] + sky[y-1][x-1][j]) * ((j + t) % c)\n        j += 1\n    print(ans)\n", "import random, math\nfrom copy import deepcopy as dc\n\nMAXX = 101\nMAXY = 101\n\n\n# Function to take input\ndef input_test():\n\tn, q, c = list(map(int, input().strip().split(\" \")))\n\tst = [[[0 for i in range(MAXX)] for j in range(MAXY)] for k in range(c+1)]\n\t\n\t# Taking Input and marking the values in the \n\t# Frequency array and the grid that the star is present\n\tfor _ in range(n):\n\t\tx, y, s = list(map(int, input().strip().split(\" \")))\n\t\tfor t in range(c+1):\n\t\t\tst[t][x][y] += (s+t) % (c+1)\n\n\tfor k in range(c + 1):\n\t\tfor i in range(1,MAXX):\n\t\t\tfor j in range(1,MAXY):\n\t\t\t\tst[k][i][j] = st[k][i][j] + st[k][i-1][j] + st[k][i][j-1] - st[k][i-1][j-1]\n\t\n\n\tcomp = st\n\t# for i in comp:\n\t# \tfor j in i:\n\t# \t\tprint(j)\n\t# \tprint(\"Done\")\n\n\t# Taking the Queries\n\tfor _ in range(q):\n\t\tt, x1, y1, x2, y2 = list(map(int, input().strip().split(\" \")))\n\t\t# t = t % (c+1)\n\t\tt = t % (c+1)\n\t\tto_be_add = comp[t][x1-1][y1-1]\n\t\ttot = comp[t][x2][y2] - comp[t][x2][y1-1] - comp[t][x1-1][y2] + to_be_add\n\t\tprint(tot)\n\n\n\n\n# Function to check test my code\ndef test():\n\tpass\n\n\ninput_test()\n# test()\n", "def fun(n,q,c,stars,querry):\n    m=100\n    precom=[[[0]*m for _ in range(m)] for _ in range(c+1)]\n    for x,y,p in stars:\n        for i in range(c+1):\n            temp=(p+i)%(c+1)\n            precom[i][x-1][y-1]+=temp\n    for k in range(c+1):\n        for i in range(0,m):\n            for j in range(1,m):\n                precom[k][i][j]+=precom[k][i][j-1]\n    \n    for k in range(c+1):\n        for j in range(0,m):\n            for i in range(1,m):\n                precom[k][i][j]+= precom[k][i-1][j]\n    \n    for t,x1,y1,x2,y2 in querry:\n        t=t%(c+1)\n        x1,y1,x2,y2,a,b,C,d=x1-1,y1-1,x2-1,y2-1,0,0,0,0\n        a=precom[t][x2][y2]\n        if x1!=0:\n            b=precom[t][x1-1][y2]\n        if y1!=0:\n            C=precom[t][x2][y1-1]\n        if x1!=0 and  y1!=0:\n            d=precom[t][x1-1][y1-1]\n        print(a-b-C+d)\n    \nn,q,c=list(map(lambda x:int(x),input().split()))\nstars=[list(map(lambda x:int(x),input().split())) for _ in range(n)]\nquerry=[list(map(lambda x:int(x),input().split())) for _ in range(q)]\nfun(n,q,c,stars,querry)", "from sys import stdin\ninput = stdin.readline\nadd_mod = lambda a, b: (a % c + b % c) % c\nN = 101\n\nn, q, c = list(map(int, input().split()))\nc += 1\nstar = [list(map(int, input().split())) for _ in range(n)]\nview = [list(map(int, input().split())) for _ in range(q)]\ndp = [[[0 for _ in range(N)] for _ in range(N)] for _ in range(11)] \n\nfor mod in range(11):\n    for i, j, k in star:\n        dp[mod][i][j] += add_mod(k, mod)\n\nfor mod in range(11):\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[mod][i][j] += dp[mod][i][j - 1]\n\nall_res = []\nfor t, x1, y1, x2, y2 in view:\n    tem = 0\n    for i in range(x1, x2+1):\n        tem += dp[t%c][i][y2] - dp[t%c][i][y1-1]\n    all_res.append(str(tem))\n \nprint('\\n'.join(all_res))\n", "import sys\ninput=sys.stdin.readline\nn,q,c=list(map(int,input().split()))\ndp=[]\nfor i in range(101):\n    k=[]\n    for j in range(101):\n        k.append([0]*(11))\n    dp.append(k)\nfor i in range(n):\n    x,y,s=list(map(int,input().split()))\n    dp[x][y][s]+=1\nfor i in range(1,101):\n    for s in range(11):\n        dp[i][0][s]+=dp[i-1][0][s]\nfor i in range(1,101):\n    for s in range(11):\n        dp[0][i][s]+=dp[0][i-1][s]\nfor j in range(101):\n    for i in range(101):\n        if i>0 and j>0:\n            for s in range(11):\n                dp[i][j][s]+=(dp[i-1][j][s]+dp[i][j-1][s]-dp[i-1][j-1][s])\nfor j in range(q):\n    p,x1,y1,x2,y2=list(map(int,input().split()))\n    k=[0]*(11)\n    ans=0\n    for i in range(11):\n        if x1>0 and y1>0:\n            k[i]=(dp[x2][y2][i]-dp[x2][y1-1][i]-(dp[x1-1][y2][i]-dp[x1-1][y1-1][i]))\n        elif x1>0 and y1==0:\n            k[i] = (dp[x2][y2][i] - (dp[x1 - 1][y2][i]))\n        elif y1>0 and x1==0:\n            k[i] = (dp[x2][y2][i]-dp[x2][y1-1][i])\n        else:\n            k[i]=dp[x2][y2][i]\n        if i>=c:\n            if p==0:\n                r=i\n            else:\n                r=(p-1)%(c+1)\n        else:\n            if p>(c-i):\n                r=(p-1-(c-i))%(c+1)\n            else:\n                r=(p+i)\n        ans+=(k[i])*(r)\n    print(ans)\n\n\n\n\n\n\n\n\n\n", "input=__import__('sys').stdin.readline\nn,q,c=map(int,input().split())\ndp= [[[0 for i in range(101)] for j in range(101)]for k in range(c+1)]\nfor i in range(n):\n    x,y,s = map(int,input().split())\n    dp[s][x][y]+=1\nfor i in range(c+1):\n    for j in range(1,101):\n        for k in range(1,101):\n            dp[i][j][k] += dp[i][j-1][k]+dp[i][j][k-1]-dp[i][j-1][k-1]\nfor _ in range(q):\n    t,x1,y1,x2,y2 = map(int,input().split())\n    ans=0\n    for i in range(c+1):\n        bright = (i+t)%(c+1)\n        amt = dp[i][x2][y2] - dp[i][x1-1][y2] - dp[i][x2][y1-1] + dp[i][x1-1][y1-1]\n        ans+=(bright*amt)\n    print(ans)                     ", "import math,sys,bisect,heapq\nfrom collections import defaultdict,Counter,deque\nfrom itertools import groupby,accumulate\n#sys.setrecursionlimit(200000000)\nint1 = lambda x: int(x) - 1\n#input = iter(sys.stdin.buffer.read().decode().splitlines()).__next__\nilele = lambda: map(int,input().split())\nalele = lambda: list(map(int, input().split()))\nilelec = lambda: map(int1,input().split())\nalelec = lambda: list(map(int1, input().split()))\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n#MOD = 1000000000 + 7\ndef Y(c):  print([\"NO\",\"YES\"][c])\ndef y(c):  print([\"no\",\"yes\"][c])\ndef Yy(c):  print([\"No\",\"Yes\"][c])\n    \ndp = {}\n\ndef fun(A):\n    B = list2d(101,101,0)\n    for j in range(101):\n        B[0][j] = A[0][j]\n    for i in range(1,101):\n        for j in range(101):\n            B[i][j] = A[i][j] + B[i-1][j]\n    for i in range(101):\n        for j in range(1,101):\n            B[i][j] = B[i][j] + B[i][j-1]\n    return B\n\nn,q,c = ilele()\nG = defaultdict(list)\nfor i in range(n):\n    a,b,s = ilele()\n    G[(a,b)].append(s)\n#print(G)\nfor i in range(c+1):\n    #print(i,c)\n    A = list2d(101,101,0)\n    for j in range(1,101):\n        for k in range(1,101):\n            x  = G.get((j,k),[])\n            for l in x:\n                r = (l + i)%(c+1)\n                #print(j,k,r,l,i)\n                A[j][k] += r\n    B = fun(A)\n    dp[i] = B\n\nfor i in range(q):\n    t,x1,y1,x2,y2 = ilele()\n    t %= (c+1)\n    #print(dp[t][x2][y2],dp[t][x2][y1])\n    ans = dp[t][x2][y2]\n    ans -= dp[t][x2][y1-1]\n    ans -= dp[t][x1-1][y2]\n    ans += dp[t][x1-1][y1-1]\n    print(ans)", "import sys\nfrom collections import defaultdict \ninput=sys.stdin.readline\nn,q,c=map(int,input().split())\nd=defaultdict(lambda:[0]*11)\nfor _ in range(n):\n\tx,y,s=map(int,input().split())\n\tif (x,y) not in d:\n\t\td[(x,y)]=[0]*11\n\td[(x,y)][s]+=1\ng=[[[0]*11 for i in range(101)] for i in range(101)]\ng[1][1]=d[(1,1)]\nfor i in range(1,101):\n\tfor j in range(1,101):\n\t\tif i==1 and j==1:continue\n\t\tfor k in range(11):\n\t\t\tif i==1:\n\t\t\t\tg[i][j][k]=g[i][j-1][k]+d[(i,j)][k]\n\t\t\telif j==1:\n\t\t\t\tg[i][j][k]=g[i-1][j][k]+d[(i,j)][k]\n\t\t\telse:\n\t\t\t\tg[i][j][k]=g[i-1][j][k]+g[i][j-1][k]-g[i-1][j-1][k]+d[(i,j)][k]\nfor _ in range(q):\n\tt,x1,y1,x2,y2=map(int,input().split())\n\tans=0\n\tfor k in range(11):\n\t\tcnt=g[x2][y2][k]-g[x1-1][y2][k]-g[x2][y1-1][k]+g[x1-1][y1-1][k]\n\t\tans+=((t+k)%(c+1))*cnt\n\tprint(ans)", "import sys\nfrom collections import defaultdict \ninput=sys.stdin.readline\nn,q,c=map(int,input().split())\nd=defaultdict(lambda:[0]*11)\nfor _ in range(n):\n\tx,y,s=map(int,input().split())\n\tif (x,y) not in d:\n\t\td[(x,y)]=[0]*11\n\td[(x,y)][s]+=1\ng=[[[0]*11 for i in range(101)] for i in range(101)]\ng[1][1]=d[(1,1)]\nfor i in range(1,101):\n\tfor j in range(1,101):\n\t\tfor k in range(11):\n\t\t\tg[i][j][k]=g[i-1][j][k]+g[i][j-1][k]-g[i-1][j-1][k]+d[(i,j)][k]\nfor _ in range(q):\n\tt,x1,y1,x2,y2=map(int,input().split())\n\tans=0\n\tfor k in range(11):\n\t\tcnt=g[x2][y2][k]-g[x1-1][y2][k]-g[x2][y1-1][k]+g[x1-1][y1-1][k]\n\t\tans+=((t+k)%(c+1))*cnt\n\tprint(ans)", "import sys\ninput=sys.stdin.readline\nn,q,c=map(int,input().split())\ng=[[[0]*11 for i in range(101)] for i in range(101)]\nfor _ in range(n):\n\tx,y,s=map(int,input().split())\n\tg[x][y][s]+=1\nfor i in range(1,101):\n\tfor j in range(1,101):\n\t\tfor k in range(11):\n\t\t\tg[i][j][k]+=g[i-1][j][k]+g[i][j-1][k]-g[i-1][j-1][k]\nfor _ in range(q):\n\tt,x1,y1,x2,y2=map(int,input().split())\n\tans=0\n\tfor k in range(11):\n\t\tcnt=g[x2][y2][k]-g[x1-1][y2][k]-g[x2][y1-1][k]+g[x1-1][y1-1][k]\n\t\tans+=((t+k)%(c+1))*cnt\n\tprint(ans)", "from sys import stdin, stdout\nn,q,c=map(int,stdin.readline().split())\ncs=[[[0]*101 for _ in range(101)] for _ in range(11)]\nfor k in range(n):\n\tx,y,s=map(int,stdin.readline().split())\n\tcs[s][x][y]+=1\t\n\nfor i in range(1,101):\n\tfor j in range(1,101):\n\t\tfor k in range(11):\n\t\t\tcs[k][i][j]+=(cs[k][i-1][j]+cs[k][i][j-1]-cs[k][i-1][j-1])\n\nfor _ in range(q):\n\tt,x1,y1,x2,y2=map(int,stdin.readline().split())\n\ttotalb=0\n\tfor k in range(11):\n\t\ttotalb+=((k+t)%(c+1))*(cs[k][x2][y2]-cs[k][x2][y1-1]-cs[k][x1-1][y2]+cs[k][x1-1][y1-1])\n\tprint(totalb)"]