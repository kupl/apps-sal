["\ndef blokovi(x):\n    ret = [0]\n    for i in range(len(x) - 1):\n        if x[i] != x[i + 1]:\n            ret.append(i + 1)\n    return ret + [len(x)]\n\ns = input()\nt = input()\n\nss = blokovi(s)\ntt = blokovi(t)\n\nif s[-1] == 'a':\n    s += 'b'\nelse:\n    s += 'a'\n\nif t[-1] == 'a':\n    t += 'b'\nelse:\n    t += 'a'\n\ndef greedy(x, y, rev=False):\n    i, j = len(x) - 1, len(y) - 1\n    swaps = []\n    while True:\n        while i >= 0 and x[i] == 'a':\n            i -= 1\n        while j >= 0 and y[j] == 'b':\n            j -= 1\n        if i < 0 and j < 0:\n            break\n        x, y = y, x\n        if rev:\n            swaps.append((j + 1, i + 1))\n        else:\n            swaps.append((i + 1, j + 1))\n        i, j = j, i\n    return swaps\n\ndef solve(x, y):\n    p = greedy(x, y)\n    q = greedy(y, x, True)\n    if len(p) < len(q):\n        return p\n    return q\n\nprobao = set()\n\ntotal = len(ss) + len(tt)\nsol = solve(s[:-1], t[:-1])\nfor b, i in enumerate(ss):\n    for c in range((2 * b + len(tt) - len(ss)) // 2 - 2, (2 * b + len(tt) - len(ss) + 1) // 2 + 3):\n        if 0 <= c < len(tt):\n            j = tt[c]\n            bs = b + len(tt) - c - 1\n            bt = c + len(ss) - b - 1\n            if abs(bs - bt) > 2:\n                continue\n            proba = (bs, bt, s[i], t[j])\n            if proba in probao:\n                continue\n            probao.add(proba)\n            s2 = t[:j] + s[i:-1]\n            t2 = s[:i] + t[j:-1]\n            if i + j > 0: \n                if i + j == len(s) + len(t) - 2:\n                    cand = solve(t2, s2)\n                else:\n                    cand = [(i, j)] + solve(s2, t2)\n            else:\n                cand = solve(s2, t2)\n            if len(cand) < len(sol):\n                sol = cand\n\nprint(len(sol))\nfor i, j in sol:\n    print(i, j)\n"]