["def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[1] - a[0] == a[2] - a[1]:\n        d = a[1] - a[0]\n        c1 = a[0]\n        c2 = 'no'\n        for i in range(3, n):\n            if i * d + c1 == a[i]:\n                pass\n            elif c2 == 'no':\n                c2 = a[i] - d * i\n            elif i * d + c2 == a[i]:\n                pass\n            else:\n                print('No')\n                return\n        if c2 == 'no':\n            print('No')\n        else:\n            print('Yes')\n        return\n    else:\n        f = True\n        d = a[1] - a[0]\n        c1 = a[0]\n        c2 = a[2] - 2 * d\n        #print(d, c1, c2)\n        for i in range(3, n):\n            if (a[i] == i * d + c1) or (a[i] == i * d + c2):\n                pass\n            else:\n                f = False\n                break\n        if f:\n            print('Yes')\n            return\n        f = True\n        d = a[2] - a[1]\n        c1 = a[1] - d\n        c2 = a[0]\n        #print(d, c1, c2)\n        for i in range(3, n):\n            if (a[i] == i * d + c1) or (a[i] == i * d + c2):\n                pass\n            else:\n                f = False\n                break\n        if f:\n            print('Yes')\n            return\n        f = True\n        d = (a[2] - a[0]) / 2\n        c1 = a[0]\n        c2 = a[1] - d\n        #print(d, c1, c2)\n        for i in range(3, n):\n            #print(a[i], i * d + c1, i * d + c2)\n            if (a[i] == i * d + c1) or (a[i] == i * d + c2):\n                pass\n            else:\n                f = False\n                break\n        if f:\n            print('Yes')\n        else:\n            print('No')\n\nmain()\n", "n=int(input())\na=list(map(int,input().split()))\nanss =0 \nfor i in range (1,n):\n    ans = 0\n    k = -1\n    m = -1\n    j = 1\n    while (k == -1 and j< n ):\n        if (i*(a[j]-a[0])!=j*(a[i]-a[0])):\n            k= j\n        j=j+1\n    while ( j<n and m ==-1):\n        if (i*(a[j]-a[0])!=j*(a[i]-a[0])):\n            if (i*(a[j]-a[k])!=(j-k)*(a[i]-a[0])):\n                m = 1\n        j=j+1\n    if (m == -1 and k!= -1):\n        anss = 1\nif (anss == 1):\n    print(\"Yes\")\nelse:\n    i=0\n    if ((i-1)*(a[2]-a[1])!=a[i]-a[1]):\n        anss = 1\n    for i in range(3,n):\n        if ((i-1)*(a[2]-a[1])!=a[i]-a[1]):\n            anss = -1\n    if (anss == 1):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n            \n        \n        \n", "import sys\n\n\ndef main():\n    n = int(input())\n    s = list(map(int, sys.stdin.readline().split()))\n    x = [i + 1 for i in range(n)]\n    p1 = (0, 0)\n    x0 = 0\n    for z in range(2):\n        for i in range(1, n):\n            k = (s[i] - s[0]) / (x[i] - x[0])\n            oka = True\n            okp = False\n            for j in range(1, n):\n                if i == j:\n                    continue\n                c = (s[j] - s[0]) / (x[j] - x[0])\n                if c != k:\n                    if not okp:\n                        p1 = (x[j], s[j])\n                        okp = True\n                    else:\n                        k2 = (s[j] - p1[1]) / (x[j] - p1[0])\n                        if k != k2:\n                            oka = False\n                            break\n\n            if oka and okp:\n                print(\"Yes\")\n                return\n        s[1], s[0] = s[0], s[1]\n        x[1], x[0] = x[0], x[1]\n\n    print(\"No\")\n\n\nmain()\n", "def read_ints():\n\treturn [int(i) for i in input().split()]\n\nn = int(input())\np = [(i, int(k)) for i, k in enumerate(input().split())]\n\ndist = set()\nfor i in range(1, n):\n\tdist.add(p[i][1] - p[i - 1][1])\n\nif len(dist) == 1:\n\tprint('No')\n\treturn\n\ndist = set()\nfor i in range(2, n):\n\tdist.add(p[i][1] - p[i - 1][1])\n\nif len(dist) == 1:\n\tprint('Yes')\n\treturn\n\nsplited_pnt = dict()\n\nfor i in range(1, n):\n\tl = (p[i][1] - p[0][1]) / p[i][0]\n\tif l not in splited_pnt:\n\t\tsplited_pnt[l] = []\n\tsplited_pnt[l].append(i)\n\nfor l, pnt in splited_pnt.items():\n\tif len(p) - len(pnt) < 3:\n\t\tprint('Yes')\n\t\treturn\n\n\tother = [i for i in range(n) if i not in set(pnt + [0])]\n\n\n\tif all((p[i][1] - p[other[0]][1]) / (p[i][0] - p[other[0]][0]) == l for i in other[1:]):\n\t\tprint('Yes')\n\t\treturn\n\nprint('No')", "N = int(input())\na = list(map(int, input().split()))\nimport sys\nsys.setrecursionlimit(1500)\n\ndef solve(n, slope, d, slope2=None, d2 = 0, point=None):\n\tif n == N:\n\t\tif point is None:\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\t\n\tif a[n] == slope*n + d:\n\t\treturn solve(n+1, slope, d, slope2, d2, point)\n\telse:\n\t\tif point is None:\n\t\t\treturn solve(n+1, slope, d, slope2, d2, point=n)\n\t\telse:\n\t\t\tslope2 = (a[n] - a[point]) / (n - point)\n\t\t\tif slope2 != slope:\n\t\t\t\treturn False\n\t\t\td2 = a[point] - point*slope2\n\t\t\treturn solve(n+1, slope, d, slope2, d2, point)\n\nfor i, j in [(0, 1), (1, 2), (0, 2)]:\n\n\tslope = (a[j] - a[i]) / (j - i)\n\td = a[i] - i*slope\n\tif solve(0, slope, d):\t\n\t\tprint(\"Yes\")\n\t\tbreak\nelse:\n\tprint(\"No\")\n\t\t\t\n\t\n", "def f(m,c1,c2,l,n):\n    fl=True\n    for i in range(n):\n        if (l[i]-(m1*i+m1)!=c1) and (l[i]-(m1*i+m1)!=c2):\n            fl=False\n            break\n    return fl and c1!=c2\nn=int(input())\nl=list(map(int,input().split()))\nm1=l[1]-l[0]\nc1=l[0]-m1\nc2=c1\nfor i in range(n):\n    if l[i]-(m1*(i+1))!=c1:\n        c2=l[i]-(m1*(i+1))\nf1=f(m1,c1,c2,l,n)\nm1=l[1]-l[0]\nc1=l[0]-m1\nc2=l[2]-m1*3\nf2=f(m1,c1,c2,l,n)\nm1=(l[2]-l[0])/2\nc1=l[0]-m1\nc2=l[1]-m1*2\nf3=f(m1,c1,c2,l,n)\nm1=l[2]-l[1]\nc1=l[0]-m1\nc2=l[1]-m1*2\nf4=f(m1,c1,c2,l,n)\nif f1 or f2 or f3 or f4:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n", "n = int(input())\ny = list(map(int, input().split()))\n\ndef check(d):\n    return len(set(2 * yi - d * i for i, yi in enumerate(y))) == 2 \n\ns = 2*(y[1]-y[0]), 2*(y[2]-y[1]), y[2] - y[0]\nprint('Yes' if any(check(d) for d in s) else 'No')\n", "#B\ndef is_belong(A, C, x, y):\n    return A*x + y + C == 0\n\ndef solution():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n\n    #if n == 3:\n    #    print('Yes')\n    #    return\n    \n    other_pointes_indexes = []\n    for k in [0, 1]:\n        #\u0437\u0430\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u044f\u043c\u0443\u044e \u043f\u043e \u0434\u0432\u0443\u043c \u0442\u043e\u0447\u043a\u0430\u043c\n        for i in range(1, n):\n                if k == i:\n                    continue\n                #\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0430 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 Ax + y + C = 0\n                #A = (y2 - y1)/(x1 - x2)\n                #C = -y1 - Ax1\n                A = 0\n                if k - i != 0:\n                    A = (a[i] - a[k])/(k - i)\n                C1 = -a[k] - A*k\n                C2 = C1\n                \n                #\u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u044c \u0442\u043e\u0447\u0435\u043a \u043f\u0440\u044f\u043c\u044b\u043c\n                success = True\n                for j in range(n):\n                    if not is_belong(A, C1, j, a[j]):\n                        if C2 != C1:\n                            if not is_belong(A, C2, j, a[j]):\n                                success = False\n                                break\n                        else:\n                            C2 = -A*j - a[j]\n                if success:\n                    if C1 != C2:\n                        print('Yes')\n                        return\n            \n    print('No')\n    \nsolution()", "n=int(input())\nl=[int(i) for i in input().split()]\nslope= (l[n-1]-l[0])/(n-1)\nf=0\nfor j in range(1,n-1):\n    if (((l[j]-l[0])/(j))!= slope):\n        f=1\n        break\nif (f==0):\n    print ('No')\nelse:\n    flag=0\n    for i in range(1,n-1):\n        s= (l[i]-l[0])/i\n        l1=[]\n        for j in range(n):\n            l1.append(0)\n        l1[0]=1\n        l1[i]=1\n        l2=[]\n        for j in range(i+1,n):\n            if ((l[j]-l[0])/j ==s):\n                l1[j]=1\n        if (l1.count(0)==1):\n            print (\"Yes\")\n            flag=1\n            break\n        else:\n            for j in range(n):\n                if (l1[j]==0):\n                    l2.append([l[j],j])\n            length=len(l2)\n            s1= (l2[-1][0]-l2[0][0])/(l2[-1][1]-l2[0][1])\n            if (s1!=s):\n                continue\n            else:\n                check=0\n                for j in range(1,length-1):\n                    if ( ((l2[j][0]-l2[0][0])/(l2[j][1]-l2[0][1]))!=s1 ):\n                        check=1\n                        break\n                if (check==1):\n                    continue\n                else:\n                    print ('Yes')\n                    flag=1\n                    break\n    if (flag==0):\n        if (n==3):\n            print ('Yes')\n            flag=1\n        else:\n            s= (l[-2]-l[1])/ (n-3)\n            if (s==slope):\n                check=0\n                for i in range(2,n-2):\n                    if ( ((l[i]-l[1])/(i-1))!=s):\n                        check=1\n                        break\n                if (check==0):\n                    print ('Yes')\n                    flag=1\n        if (flag==0):\n            s= (l[-1]-l[1])/(n-2)\n            check=0\n            for i in range(2,n-1):\n                if ( ((l[i]-l[1])/(i-1))!=s ):\n                    check=1\n                    break\n            if (check==0):\n                print ('Yes')\n            else:\n                print ('No')", "n = input()\ny = list(map(int, input().split()))\n\ndef chk(limit):\n    return len(set(2 * yi - limit * i for i, yi in enumerate(y))) == 2\n\ns = 2 * (y[1] - y[0]), 2  * (y[2] - y[1]), y[2] - y[0]\n\nprint('Yes' if any(chk(x) for x in s) else 'No')\n", "def test(id1,id2,l,n):\n\ta = l[id1] - l[id2]\n\tb = id2 - id1\n\tc = ((id1)*l[id2]) - ((id2)*l[id1])\n\td=[]\n\tfor i in range(n):\n\t\tif a*i+b*l[i]+c!=0:\n\t\t\td+=[i]\n\tif len(d)==0:return False\n\tif len(d)==1:return True\n\n\taa = l[d[0]] - l[d[1]]\n\tbb = d[1] - d[0]\n\tcc = ((d[0])*l[d[1]]) - ((d[1])*l[d[0]])\n\n\tfor i in range(len(d)):\n\t\tif aa*d[i]+bb*l[d[i]]+cc!=0:\n\t\t\treturn False\n\treturn (l[id1]-l[id2])/(id1-id2)==(l[d[1]]-l[d[0]])/(d[1]-d[0]) \t\nn=int(input())\nl=[int(i)for i in input().split()]\nprint(\"Yes\"if test(0,1,l,n) or test(1,2,l,n) or test(0,2,l,n) else \"No\" )", "from math import isclose\n\nn = int(input())\ny = [0] + list(map(int, input().split()))\nans = True\nif n == 4:\n    if (y[1] - y[3])/2 == (y[2] - y[4])/2 or \\\n       (y[1] - y[4])/3 == (y[2] - y[3]):\n        print('Yes')\n        return\ncatch = None\nfor z in [1, 2]:\n    c = {}\n    for i in range(z+1, len(y)):\n        k = (y[i] - y[z])/(i - z)\n        if k not in c:\n            c[k] = 1\n        else:\n            catch = k\n            break\n    if catch != None:\n        break\nelse:\n    catch = (y[2] - y[1])\n\ny_new = []\n\nfor i in range(2, len(y)):\n    k = (y[i] - y[1])/(i - 1)\n    if not isclose(k, catch):\n        y_new.append((i, y[i]))\nif not y_new:\n    ans = False\nelif len(y_new) == 1:\n    ans = True\nelse:\n    for i in range(1, len(y_new)):\n        k = (y_new[0][1] - y_new[i][1])/(y_new[0][0] - y_new[i][0])\n        if not isclose(catch, k):\n            ans = False\n            break\n\nif ans:\n    print('Yes')\nelse:\n    print('No')\n\"\"\"\n6\n2 -1 2 5 14 17\n\"\"\"\n", "n = input()\ny = list(map(int, input().split()))\n\n\ndef chk(limit):\n    return len(set(2 * yi - limit * i for i, yi in enumerate(y))) == 2\n\n\ns = 2 * (y[1] - y[0]), 2 * (y[2] - y[1]), y[2] - y[0]\n\nprint('Yes' if any(chk(x) for x in s) else 'No')\n", "from fractions import Fraction\nfrom itertools import combinations\n\nN = int(input())\nYL = list(map(int, input().strip().split()))\nYM = dict(enumerate(YL, start=1))\n\n\ndef get_b(k, x):\n    y = YM[x]\n    b = y - k*x\n    return b\n\n\ndef extract(x1, x2):\n    y1 = YM[x1]\n    y2 = YM[x2]\n    k = Fraction(y2-y1, x2-x1)\n    b = get_b(k, x1)\n    return k, b\n\n\ndef fits(k, b, x):\n    return get_b(k, x) == b\n\n\ndef fits3(x1, x2, x):\n    k, b = extract(x1, x2)\n    return fits(k, b, x)\n\n\ndef getk5():\n    k_count = {}\n    num = min(5, N)\n    for x1, x2 in combinations(list(range(1, num+1)), 2):\n        k, _ = extract(x1, x2)\n        k_count[k] = k_count.get(k, 0) + 1\n\n    for k, count in list(k_count.items()):\n        if count > 2:\n            return k\n\n    return None\n\n\ndef main():\n    if N == 3:\n        print('Yes' if not fits3(1, 2, 3) else 'No')\n        return\n\n    k = getk5()\n    if k is None:\n        if N == 4:\n            x1 = 1\n            for x2 in (2, 3, 4):\n                k12, b12 = extract(x1, x2)\n                x3, x4 = [x for x in (1, 2, 3, 4) if x != x1 and x != x2]\n                k34, b34 = extract(x3, x4)\n                if k12 == k34 and b12 != b34:\n                    print('Yes')\n                    return\n                # else:\n                #     print('** %s-%s, %s-%s: %s %s vs %s %s' % (\n                #         (x1, YM[x1]), (x2, YM[x2]),\n                #         (x3, YM[x3]), (x4, YM[x4]),\n                #         k12, b12, k34, b34\n                #     ))\n            print('No')\n            return\n\n        print('No')\n        return\n\n    b_set = set()\n    for x in range(1, N+1):\n        b_set.add(get_b(k, x))\n    print('Yes' if len(b_set) == 2 else 'No')\n\nmain()\n\n", "n=int(input())\ny=list(map(int,input().split()))\ndef check(d):\n    return len(set(2*yi-d*i for i,yi in enumerate(y)))==2\n\nprint('Yes' if any(check(d) for d in [2*(y[1]-y[0]),2*(y[2]-y[1]),y[2]-y[0]]) else 'No')\n", "n = int(input())\nP = list(enumerate(map(int,input().split())))\n\nfrom fractions import gcd\n\n\ndef check(i,j):\n  x0,y0 = P[i]\n  x1,y1 = P[j]\n\n  dx = x1-x0\n  dy = y1-y0\n  offsets = [dx*y0-dy*x0]\n\n  for x,y in P:\n    o = dx*y-dy*x\n    if o not in offsets:\n      offsets.append(o)\n      if len(offsets) > 2:\n        return False\n\n  return len(offsets) == 2\n  \nprint('Yes' if any(check(i,j) for i,j in [(0,1),(1,2),(0,2)]) else 'No')", "n = int(input())\nyi = list(map(int, input().split()))\n\nsteps = yi[1] - yi[0], (yi[2] - yi[0])/2, yi[2] - yi[1]\nif any(len(set(l)) == 2 for l in ((y - i * step for i, y in enumerate(yi)) for step in steps)):\n    print('Yes')\nelse:\n    print('No')\n\n", "n = int(input())\nyi = list(map(int, input().split()))\n\nsteps = yi[1] - yi[0], (yi[2] - yi[0])/2, yi[2] - yi[1]\nif any(len(set(l)) == 2 for l in ([y - i * step for i, y in enumerate(yi)] for step in steps)):\n    print('Yes')\nelse:\n    print('No')\n\n", "n = int(input())\nyi = list(map(int, input().split()))\n\nsteps = yi[1] - yi[0], (yi[2] - yi[0])/2, yi[2] - yi[1]\nif any(len(set(l)) == 2 for l in [[y - i * step for i, y in enumerate(yi)] for step in steps]):\n    print('Yes')\nelse:\n    print('No')\n\n", "points = int(input())\ny = list(map(int, input().split()))\n\ndef slope(p1, p2):\n    return (p2[1] - p1[1])/(p2[0] - p1[0])\n\ndef passes(one, two, point):\n    return 0 == (one[0] * (two[1] - point[1]) + two[0] * (point[1] - one[1]) + point[0] * (one[1] - two[1]))\n\ndef possible(start, joint, coords):\n    others = list()\n\n    for point in coords:\n        if not passes(start, joint, point):        \n            others.append(point)\n\n    if len(others) == 0:\n        return (False, others)\n\n    elif len(others) == 1:\n        return (True, others)\n\n    elif len(others) >= 2:\n        other1, other2 = others[0], others[1]\n\n        for point in others:\n            if not passes(other1, other2, point):\n                return (False, others)\n\n        if slope(other1, other2) == slope(start, joint):\n            return (True, others)\n        else:\n            return (False, others)\n\ncoords = [(k+1, y[k]) for k in range(points)]\nstart = coords.pop(0)\n\nposs, others = possible(start, coords[0], coords)\nif (not poss) and len(others) > 0:\n    poss |= possible(start, others[0], coords)[0]\nif (not poss):\n    poss |= possible(coords[0], coords[1], coords + [start])[0]\n        \nif poss:\n    print('Yes')\nelse:\n    print('No')\n", "n = int(input())\narr = list(map(int,input().split()))\nmarr= [(arr[2]-arr[0])/2,arr[2]-arr[1],arr[1]-arr[0]]\nfor m in marr:\n\tarr1=[]\n\tfor x,y in enumerate(arr):\n\t\tarr1.append(y-m*(x+1))\n\tif len(set(arr1))==2:\n\t\tprint(\"Yes\")\n\t\treturn\nprint(\"No\")", "def coef(a, b):\n    ax, ay = a\n    bx, by = b\n    return (by-ay)/(bx-ax)\n\ndef coefl(line):\n    return coef(line[0], line[1])\n\ndef fitline(c, line):\n    if len(line) <= 1:\n        return True\n    return coef(line[0], line[1]) == coef(line[0], c)\n\ndef same(linea, lineb):\n    linec = list(lineb)\n    for p in linea:\n        if not fitline(p, linec):\n            return False\n        linec.append(p)\n    return True\n\ndef allpointsfit(linea, lineb, pointset):\n    for p in pointset:\n        if fitline(p, linea):\n            linea.append(p)\n        elif fitline(p, lineb):\n            lineb.append(p)\n        else:\n            return False\n    if len(linea) == 0 or len(lineb) == 0:\n        return False\n    if same(linea, lineb):\n        return False\n    fit = len(linea) == 1 or len(lineb) == 1 or (coefl(linea) == coefl(lineb))\n    return fit\n\nn = int(input())\na = [int(x) for x in input().split()]\nans = (len(set(a)) == 2)\npoints = [(idx+1, val) for idx, val in enumerate(a)]\nans = ans or allpointsfit([points[0], points[1]], [points[2]], points[3:])\nans = ans or allpointsfit([points[1], points[2]], [points[0]], points[3:])\nans = ans or allpointsfit([points[0], points[2]], [points[1]], points[3:])\nans = ans or allpointsfit([], [], points)\nprint('Yes' if ans else 'No')", "n=int(input())\ny=list(map(int,input().split()))\ndef check(d):\n    return len(set(2*yi-d*i for i,yi in enumerate(y)))==2\n\nprint('Yes' if any(check(d) for d in [2*(y[1]-y[0]),2*(y[2]-y[1]),y[2]-y[0]]) else 'No')", "n=int(input())\ny=list(map(int,input().split()))\ndef check(d):\n    return len(set(2*yi-d*i for i,yi in enumerate(y)))==2\n\nprint('Yes' if any(check(d) for d in [2*(y[1]-y[0]),2*(y[2]-y[1]),y[2]-y[0]]) else 'No')"]