["inpt=input().split(' ')\nn=int(inpt[0])\nk=int(inpt[1])\ni_lst=[]\nj_lst=[]\nm=0\ninpt=input().split(' ')\nfor i in range(len(inpt)):\n    inpt[i]=int(inpt[i])\nfor i in range(k):\n    mn=min(inpt)\n    mx=max(inpt)\n    if mn!=mx:\n        i_mn=inpt.index(mn)\n        i_mx=inpt.index(mx)\n        inpt[i_mn]+=1\n        inpt[i_mx]-=1\n        i_lst.append(i_mx)\n        j_lst.append(i_mn)\n        m+=1\n    else:\n        break\n#print(inpt)\ninstblity=max(inpt)-min(inpt)\nprint(str(instblity)+' '+str(m))\nfor i in range(len(i_lst)):\n    print(str(i_lst[i]+1)+' '+str(j_lst[i]+1))\n", "n, k = list(map(int, input().split(\" \")))\nt = list(map(int, input().split(\" \")))\n\ninst = max(t) - min(t)\ni = 0\nsteps = []\n\nwhile inst > 0 and i < k:\n    imax = t.index(max(t))\n    imin = t.index(min(t))\n    steps.append(imax+1)\n    steps.append(imin+1)\n\n    t[imax] -= 1\n    t[imin] += 1\n    inst = max(t) - min(t)\n    i += 1\n\nprint(inst, i)\nfor i in range(0, len(steps), 2):\n    print(steps[i], steps[i+1])\n", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nactions = [ ]\nfor i in range(k):\n    max_index = min_index = 0\n    max_value = min_value = a[0]\n    for j, value in enumerate(a):\n        if value > max_value:\n            max_index = j\n            max_value = value\n        elif value < min_value:\n            min_index = j\n            min_value = value\n    if max_value == min_value:\n        break\n    actions.append((max_index, min_index))\n    a[max_index] -= 1\n    a[min_index] += 1\nprint(max(a) - min(a), len(actions))\nfor i, j in actions:\n    print(i + 1, j + 1)\n", "f = input()\ns = input()\na = f.split(' ')\nn = int(a[0])\nk = int(a[1])\na = s.split(' ')\n\ni = 0\nwhile(i < n):\n\ta[i] = int(a[i])\n\ti = i + 1\n\nans = -1\nv1 = list()\nv2 = list()\nwhile(k > 0):\n\tposmn = -1\n\tposmx = -1\n\tmn = 2**16\n\tmx = -1\n\ti = 0\n\twhile(i < n):\n\t\tif(mn > a[i]):\n\t\t\tmn = a[i]\n\t\t\tposmn = i\n\t\tif(mx < a[i]):\n\t\t\tmx = a[i]\n\t\t\tposmx = i\n\t\ti = i + 1\n\tif(mx == mn):\n\t\tans = 0\n\t\tbreak\n\tv1.append(posmx + 1)\n\tv2.append(posmn + 1)\n\ta[posmx] = a[posmx] - 1\n\ta[posmn] = a[posmn] + 1\n\tk = k - 1\ni = 0\nmx = -1\nmn = 2**16\nwhile(i < n):\n\tmn = min(mn, a[i])\n\tmx = max(mx, a[i])\n\ti = i + 1\nans = mx - mn\nprint(str(ans) + ' ' + str(len(v1)))\ni = 0\nwhile(i < len(v1)):\n\tprint(str(v1[i]) + ' ' + str(v2[i]))\n\ti = i + 1", "import functools\nimport operator\ninfo_data = list(map(int, input().split()))\ndata = list(map(int, input().split()))\n\naver = functools.reduce(operator.add, data) / info_data[0]\n\ni = 0\nresult = []\nwhile i < info_data[1]:\n    max_v = data[0]\n    min_v = data[0]\n    max_j = 0\n    min_j = 0\n    for j in enumerate(data):\n        if max_v < j[1]:\n            max_v = j[1]\n            max_j = j[0]\n        if min_v > j[1]:\n            min_v = j[1]\n            min_j = j[0]\n\n    if data[min_j] < aver:\n        data[min_j] += 1\n        data[max_j] -= 1\n        result.append((max_j, min_j))\n    else:\n        break\n    i += 1\n\nmax_v = data[0]\nmin_v = data[0]\nmax_j = 0\nmin_j = 0\nfor j in enumerate(data):\n    if max_v < j[1]:\n        max_v = j[1]\n        max_j = j[0]\n    if min_v > j[1]:\n        min_v = j[1]\n        min_j = j[0]\n\n\nprint(\"{} {}\".format(max_v - min_v, i))\nfor i in result:\n    print(\"{} {}\".format(i[0]+1, i[1]+1))\n\n\n"]