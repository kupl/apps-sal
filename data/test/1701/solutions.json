["n, m = map(int, input().split())\n\na = {}\nfor i in range(n):\n    x, y = input().split()\n    a[y] = x\n    \nfor i in range(m):\n    x, y = input().split()\n    \n    print(x, y, \"#\" + a[y.replace(';', '')])", "n, m = map(int, input().split())\nd = {}\nfor i in range(n):\n\tim, num = input().split()\n\td[num] = im\nres = []\nfor j in range(m):\n\tim, num = input().split()\n\tres.append(im + ' ' + num + ' #' + d[num[:-1]])\nfor i in res:\n\tprint(i)", "R = lambda type_ = \"int\": list(map(eval(type_), input().split(' ')))\n\nn, m = R()\nd= dict()\n\nfor i in range(n):\n    a, b = R('str')\n    d[b] = a\n\nfor i in range(m):\n    a, b = R('str')\n    print(a + ' ' + b + ' ' + '#' + d[b[:-1]])\n\n", "n,m = map(int, input().split())\nd = {}\nfor i in range(n):\n    s = input()\n    s = s.split()\n    d[s[1]] = s[0]\nans = []\nfor i in range(m):\n    s = input()\n    s = s.split()\n    ip = s[1][:-1]\n    ans.append('{} #{}'.format(' '.join(s), d[ip]))\nfor a in ans:\n    print(a)", "n,m = list(map(int,input().strip().split(' ')))\n\nips = {}\n\nfor _ in range(n):\n\tname,ip = input().strip().split(' ')\n\tips[ip] = name\n\nfor _ in range(m):\n\tline = input().strip().split(' ')\n\tline[1] = line[1] + ' ' + '#' + ips[line[1][:-1]]\n\tprint(' '.join(line))\n", "n,m = list(map(int,input().split()))\n\nD = {}\nfor _ in range(n):\n    name,ip = input().split()\n    D[ip] = name\n\nfor _ in range(m):\n    s = input()\n    ip = s.split()[1][:-1]\n    s += ' #'+D[ip]\n    print(s)\n", "def gis():\n    return list(map(int, input().strip().split()))\n\n\ndef gi():\n    return int(input())\n\n\ndef gss():\n    return input().strip().split()\n\n\ndef problem():\n    n, m = gis()\n    ip = dict()\n    for i in range(n):\n        name, ips = gss()\n        ip[ips] = name\n    for i in range(m):\n        command, ips = gss()\n        print(command, ips, '#{}'.format(ip[ips[:-1]]))\n\n\ndef __starting_point():\n    problem()\n\n__starting_point()", "n,m=list(map(int,input().split()))\nip={}\nfor i in range(n):\n    a,b=input().split()\n    ip[b]=a\nfor i in range(m):\n    a,b=input().split()\n    print(a,b+' #'+ip[b[:-1]])\n", "n, m = map(int, input().split())\nd = {}\nfor i in range(n):\n    name, ip = input().split()\n    d[ip + ';'] = name;\nfor i in range(m):\n    command, ip = input().split()\n    print('{} {} #{}'.format(command, ip, d[ip]))", "n, m = [int(i) for i in input().split()]\nd = dict()\nfor i in range(n):\n\ta, b = [i.rstrip() for i in input().split()]\n\td[b] = a\n#print(d)\nfor i in range(m):\n\ta, b = [i.rstrip() for i in input().split()]\n\tb = b[:-1]\n\tprint(a, \" \", b, \"; #\", d[b], sep=\"\")", "n,m=map(int,input().split())\ns=dict()\nfor x in range(n):\n    name,ip=input().split()\n    s[ip]=name\nfor y in range(m):\n    a,b=input().split()\n    c=b[:-1]\n    #print(c)\n    print(a,b,\"#\"+s[c])", "n, m = list(map(int, input().split()))\nips = dict()\nfor _ in range(n):\n    s = input().strip().split()\n    ips[s[1]] = s[0]\nfor _ in range(m):\n    s = input().strip().split()\n    s[1] = s[1][:-1]\n    print(s[0], s[1]+\";\", \"#\"+ips[s[1]])\n", "n, m = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n    name, ip = input().split()\n    d[ip] = name\n\nfor i in range(m):\n    comm, ip = input().split()\n    name = d[ip[:-1]]\n    print(comm+\" \"+ip+\" #\"+name)\n", "n,m=map(int,input().split())\nd={}\nfor _ in range(n):\n  name,ip=input().split()\n  d[ip]=name\nfor _ in range(m):\n  s=input()\n  ip=s.split()[-1]\n  if ip[-1]==';':\n    ip=ip[:-1]\n  print(s,\"#\"+d[ip])", "n, m = list(map(int, input().split()))\n\nserver = {}\nfor i in range(n):\n    name, ip = input().split()\n    server[ip] = name\n\nfor i in range(m):\n    cmd, ip = input().split()\n    print('%s %s #%s' % (cmd, ip, server[ip[:-1]]))\n", "n, m = map(int, input().split())\nd = {}\nfor i in range(n):\n    t = input()\n    t = t.split()\n    s = t[1]\n    d[s] = t[0]\nfor i in range(m):\n    t = input()\n    s = t.split()[1][:-1]\n    t += ' #' + d[s]\n    print(t)", "n, m = map(int, input().strip().split(\" \"))\n\nimport collections\ns = collections.defaultdict(lambda: \"\")\n\nfor i in range(n):\n    server, ip = input().strip().split(\" \")\n    s[ip] = server\n\nfor i in range(m):\n    cmd, ip = input().strip().split(\" \")\n    print(cmd, ip, \"#\", end=\"\")\n    print(s[ip[:-1]])\n", "def main():\n  n,m = map(int, input().split())\n  nms={}\n  for i in range(n):\n    nm,ip = input().split()\n    nms[ip]=nm\n  for j in range(m):\n    nm,ip = input().split()\n    print('%s %s #%s'%(nm,ip,nms[ip[:-1]]))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n, m = [int(v) for v in input().split()]\n\nip2name = {}\nfor _ in range(n):\n    name, ip = input().split()\n    ip2name[ip] = name\n\nfor _ in range(m):\n    cmd, ip = input().split()\n    assert ip[-1] == ';'\n    ip = ip[:-1]\n    print('%s %s; #%s' % (cmd, ip, ip2name[ip]))\n", "\n\ndef main():\n    n, m = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        name, ip = input().split()\n        d[ip] = name\n\n    for i in range(m):\n        s = input()\n        com, ip = s.split()\n        ip = ip.strip(';')\n        print(s + ' #' + d[ip])\n\n\nmain()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "n,m = list(map(int,input().split()))\ng = {}\nfor i in range(n):\n    na,ip = input().split()\n    g[ip] = na\nfor i in range(m):\n    a= input()\n    c,ip = a.split()\n    print(a+' #'+g[ip[:-1]])\n", "n, m = list(map(int, input().split(' ')))\niptable = {}\nfor i in range(n):\n    a,b = input().split(' ')\n    iptable[b] = a\nfor i in range(m):\n    a,b = input().split(' ')\n    print(a,b,'#'+iptable[b[:-1]])\n", "from pprint import pprint as pp\ndef GI(): return int(input())\ndef GIS(): return list(map(int, input().split()))\n\ndef main():\n  n, m = GIS()\n\n  d = {}\n  for i in range(n):\n    name, ip = input().split()\n    d[ip] = name\n\n  for i in range(m):\n    s = input()\n    ip = s.split()[1][:-1]\n    print('%s #%s' % (s, d[ip]))\n\nmain()\n", "a,b = [int(i) for i in input().split()]\ndic1 = {}\nfor _ in range(a):\n\tn,m = input().split()\n\tdic1[m] = n\nfor _ in range(b):\n\tc,i = input().split()\n\tprint(c+\" \"+i+\" #\"+dic1[i[:-1]])\n"]