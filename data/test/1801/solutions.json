["n = int(input())\nc, d = {}, {}\nfor x, y in zip(input().split(), input().split()):\n    c[x] = c.get(x, 1) + 1\n    c[y] = c.get(y, 1) + 1\n    if x == y: d[x] = d.get(x, 0) + 2\ns, m = 1, int(input())\nfor k, v in c.items():\n    u = d.get(k, 0)\n    for i in range(v - u, v, 2): s = s * (i * i + i) // 2 % m\n    for i in range(1, v - u): s = s * i % m\nprint(s)", "from collections import defaultdict\n\n\ndef factorial(n, m, rep):\n    r = 1\n    for i in range(2, n + 1):\n        j = i\n        while j % 2 == 0 and rep > 0:\n            j = j// 2\n            rep -= 1\n        r *= j\n        r %= m\n    return r\n\n\n\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nm=int(input())\nans=1\nd=defaultdict(lambda:0)\ne=defaultdict(lambda:0)\n\ni=0\nwhile(i<n):\n    d[a[i]]+=1\n    d[b[i]]+=1\n    if a[i]==b[i]:\n        e[a[i]]+=1\n    i+=1\nans=1\nfor j in d:\n    k=d[j]\n    rep=e[j]\n    ans=(ans*factorial(k,m,rep))\n    ans=ans%m\nprint(int(ans))\n\n\n\n\n\n\n", "\nfrom math import sqrt,ceil,gcd\nfrom collections import defaultdict\n\n\n\ndef modInverse(b,m):\n    g = gcd(b, m)\n    if (g != 1):\n        # print(\"Inverse doesn't exist\")\n        return -1\n    else:\n        # If b and m are relatively prime,\n        # then modulo inverse is b^(m-2) mode m\n        return pow(b, m - 2, m)\n\ndef sol(n,m,rep):\n\n    r = 1\n    for i in range(2,n+1):\n        j = i\n        while j%2 == 0 and rep>0:\n\n            j//=2\n            rep-=1\n\n        r*=j\n        r%=m\n\n    return r\n\n\n\n\n\ndef solve():\n\n    n = int(input())\n    a = list(map(int,input().split()))\n    b = list(map(int,input().split()))\n    m = int(input())\n    hash = defaultdict(int)\n    e = defaultdict(int)\n    for i in range(n):\n        hash[a[i]]+=1\n        hash[b[i]]+=1\n        if a[i] == b[i]:\n            e[a[i]]+=1\n\n\n    ans = 1\n    for i in hash:\n\n        z1 = hash[i]\n        z2 = e[i]\n        ans*=sol(z1,m,z2)\n        ans%=m\n\n    print(ans)\n\n\n\n\n\n# t = int(input())\n# for _ in range(t):\nsolve()\n\n\n\n"]