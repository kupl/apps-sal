["X,Y=map(int,input().split())\nprint('Alice' if abs(X-Y) > 1 else 'Brown')", "x, y = map(int, input().split())\nif abs(x - y) <= 1:\n    print('Brown')\nelse:\n    print('Alice')", "a,b = map(int, input().split())\nprint('Alice' if abs(a-b) > 1 else 'Brown')", "x, y = list(map(int, input().split()))\nif -1 <= x - y <= 1:\n    print('Brown')\nelse:\n    print('Alice')\n\n# abs(x - y) <= 1 \u2192 abs(x - y) >= 2\n# abs(x - y) >= 2 \u2192 abs(x - y) <= 1\n", "x, y = list(map(int, input().split()))\nif abs(x - y) > 1:\n  print('Alice')\nelse:\n  print('Brown')\n", "x, y = list(map(int, input().split()))\n\nif abs(x - y) <= 1:\n    ans = \"Brown\"\nelse:\n    ans = \"Alice\"\n\nprint(ans)\n", "X, Y = list(map(int, input().split()))\nif abs(X - Y) > 1:\n    print('Alice')\nelse:\n    print('Brown')\n", "x,y = map(int,input().split())\nif abs(x - y) > 1:\n  print(\"Alice\")\nelse:\n  print(\"Brown\")", "X,Y=list(map(int,input().split()))\n\nif X+Y<=1:\n    print(\"Brown\")\n\nelse:\n    n=X-Y\n    if n<0:\n        n=(-1)*n\n    \n    if n<=1:\n        print(\"Brown\")\n    else:\n        print(\"Alice\")\n", "import sys\n\ndef main():\n    x,y=list(map(int,input().split()))\n    s=2*x+y\n    t=2*y+x\n    if s//3-(s%3==0)==t//3-(t%3==0):\n        print('Brown')\n    else:\n        print('Alice')\n\ndef __starting_point():\n    main()\n\n__starting_point()", "x, y = list(map(int, input().split()))\n\nprint(('Brown' if abs(x - y) <= 1 else 'Alice'))\n", "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(X: int, Y: int):\n    print((\"Brown\" if -1 <= X - Y <= 1 else \"Alice\"))\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    X = int(next(tokens))  # type: int\n    Y = int(next(tokens))  # type: int\n    solve(X, Y)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "X, Y = map(int, input().split())\nif abs(X - Y) <= 1:\n  print(\"Brown\")\nelse:\n  print(\"Alice\")", "X, Y = map(int, input().split())\nif abs(X - Y) <= 1:\n  print('Brown')\nelse:\n  print('Alice')", "X, Y = map(int, input().split())\nif abs(X - Y) > 1:\n  print(\"Alice\")\nelse:\n  print(\"Brown\")", "X, Y = list(map(int,input().split()))\nif abs(X-Y) <= 1:\n    print(\"Brown\")\nelse:\n    print(\"Alice\")\n", "x,y=map(int,input().split())\nif abs(x-y)>1:\n  print('Alice')\nelse:\n  print('Brown')", "x, y = map(int, input().split())\nif abs(x-y) <= 1:\n    print(\"Brown\")\nelse:\n    print(\"Alice\")", "x,y = map(int,input().split())\nif y > x:\n    x,y = y,x\n\nif x - y <= 1:\n    print(\"Brown\")\nelse:\n    print(\"Alice\")", "x,y=map(int,input().split())\nif x>y:\n  x,y=y,x\n  \nif y-x<=1:\n  print(\"Brown\")\nelse:\n  print(\"Alice\")", "def solve():\n    x, y = list(map(int, input().split()))\n    if abs(x - y) <= 1:\n        print('Brown')\n    else:\n        print('Alice')\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "a,b=map(int,input().split())\nprint(\"Alice\" if abs(a-b)>1 else \"Brown\")", "x,y=map(int, input().split())\nprint(\"Brown\"if abs(x-y)<2else\"Alice\")", "X, Y = list(map(int, input().split()))\nif abs(X - Y) <= 1:\n    print('Brown')\nelse:\n    print('Alice')\n", "x,y=map(int,input().split())\nif abs(x-y)>=2:\n  print(\"Alice\")\nelse:\n  print(\"Brown\")", "def main():\n    X, Y = list(map(int, input().split(' ')))\n    if abs(X - Y) > 1:\n        print('Alice')\n    else:\n        print('Brown')\n\n\ndef __starting_point():\n    main()\n__starting_point()", "X, Y = map(int, input().split())\nprint(\"Brown\" if abs(X - Y) <= 1 else 'Alice')", "X,Y=map(int,input().split())\nX,Y=max(X,Y),min(X,Y)\n#print(X,Y)\n\nif X<=1:\n  print(\"Brown\")\nelse:\n  if X-Y>=2:\n    print(\"Alice\")\n  else:\n    print(\"Brown\")", "x,y=map(int,input().split())\nprint(\"Brown\" if abs(x-y)<=1 else \"Alice\")", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nX, Y = MAP()\n\nmemo = list2d(1007, 1007, -1)\ndef rec(x, y):\n    if memo[x][y] != -1:\n        return memo[x][y]\n    if x < 2 and y < 2:\n        memo[x][y] = 0\n        return 0\n    res = 0\n    for i in range(2, x+1):\n        if not rec(x - i, y + i//2):\n            res = 1\n    for i in range(2, y+1):\n        if not rec(x + i//2, y - i):\n            res = 1\n    memo[x][y] = res\n    return res\n\n# for i in range(X+1):\n#     for j in range(Y+1):\n#         rec(i, j)\n# for i in range(X+1):\n#     print(memo[i][:Y+1])\n\nif abs(X - Y) >= 2:\n    print('Alice')\nelse:\n    print('Brown')\n", "x, y = map(int, input().split())\nif abs(x - y) < 2:\n    print('Brown')\nelse:\n    print('Alice')", "import sys\nsys.setrecursionlimit(10000000)\nMOD = 10 ** 9 + 7\nINF = 10 ** 15\n\ndef main():\n    X,Y = list(map(int,input().split()))\n    if abs(X - Y) <= 1:\n        print('Brown')\n    else:\n        print('Alice')\ndef __starting_point():\n    main()\n\n__starting_point()", "# \u89e3\u8aacAC\nX,Y = map(int, input().split())\nprint(\"Alice\" if abs(X - Y) > 1 else \"Brown\")", "x,y= list(map(int,input().split()))\nresult=abs(x-y)\n\n\nif result <=1:\n    print(\"Brown\")\nelse:\n    print(\"Alice\")\n", "X,Y = map(int, open(0).read().split())\nif abs(X-Y) <= 1:\n    print('Brown')\nelse:\n    print('Alice')", "x, y = map(int, input().split())\nprint('Alice' if abs(x-y) > 1 else 'Brown')", "X,Y=map(int,input().split())\nprint(\"Brown\" if abs(X-Y)<=1 else \"Alice\")", "a,b=map(int,input().split())\nif abs(a-b)>1:print(\"Alice\")\nelse:print(\"Brown\")", "X, Y = map(int, input().split())\nprint(\"Brown\" if abs(X-Y) <= 1 else \"Alice\")", "x,y=list(map(int,input().split()))\nprint((\"Alice\" if abs(x-y)>1 else \"Brown\"))\n", "n,m = map(int,input().split())\nif abs(n-m) < 2:\n  print('Brown')\nelse:\n  print('Alice')", "#01:25\na,b = map(int,input().split())\nif abs(a-b) <= 1:\n  print('Brown')\nelse:\n  print('Alice')", "X, Y = map(int,input().split())\nif abs(X - Y) < 2:\n    print(\"Brown\")\nelse:\n    print(\"Alice\")", "X,Y=map(int,input().split())\nif abs(X-Y)>1:\n    print(\"Alice\")\nelse:\n    print(\"Brown\")", "x,y=map(int,input().split())\nif abs(x-y)<=1:\n    print(\"Brown\")\nelse:\n    print(\"Alice\")", "import sys\n\nsys.setrecursionlimit(10 ** 6)\ndef MI(): return map(int, sys.stdin.readline().split())\n\ndef main():\n    x,y=MI()\n    if x>y:x,y=y,x\n    if y>x+1:print(\"Alice\")\n    else:print(\"Brown\")\n\nmain()", "x,y=map(int,input().split())\na=abs(x-y)\nif a==0 or a==1:\n  print(\"Brown\")\nelse:\n  print(\"Alice\")", "X,Y = list(map(int,input().split()))\n\nprint((\"Brown\" if abs(X-Y) <= 1 else \"Alice\"))\n", "X, Y = map(int, input().split())\n\nif X >= Y+2:\n  print('Alice')\nelif X <= Y-2:\n  print('Alice')\nelse:\n  print('Brown')", "#\u4e00\u554f\u76ee\nx,y=list(map(int,input().split()))\nif abs(x-y)<=1:\n    print(\"Brown\")\nelse:\n    print(\"Alice\")\n", "X, Y = map(int,input().split())\nprint('Brown' if abs(X - Y) <= 1 else 'Alice')", "x,y=list(map(int,input().split()))\nif abs(x-y)<=1:\n  print('Brown')\nelse:\n  print('Alice')\n", "a,b=map(int,input().split())\nif -2<a-b<2:print(\"Brown\")\nelse:print(\"Alice\")", "x, y = map(int,input().split())\n\nif abs(x-y) <= 1:\n  print(\"Brown\")\nelse:\n  print(\"Alice\")", "X,Y=list(map(int,input().split()))\nif X+Y<2 or abs(X-Y)<2: print(\"Brown\")\nelse : print(\"Alice\")\n", "x, y = list(map(int, input().split()))\n\nprint((\"Alice\" if abs(x - y) > 1 else \"Brown\"))\n", "x,y = map(int, input().split())\n\nif abs(x-y)>1:\n    print(\"Alice\")\nelse:\n    print(\"Brown\")", "X, Y = map(int,input().split())\nif abs(X-Y) <=1:\n  print('Brown')\nelse:\n  print('Alice')", "X,Y = map(int,input().split())\nif abs(X-Y)<=1:\n  print(\"Brown\")\nelse:\n  print(\"Alice\")", "import sys\n\nsys.setrecursionlimit(10 ** 8)\nini = lambda: int(sys.stdin.readline())\ninl = lambda: [int(x) for x in sys.stdin.readline().split()]\nins = lambda: sys.stdin.readline().rstrip()\ndebug = lambda *a, **kw: print(\"\\033[33m\", *a, \"\\033[0m\", **dict(file=sys.stderr, **kw))\n\n\ndef solve():\n    x, y = inl()\n    if x > y:\n        x, y = y, x\n    d = y - x\n    if d <= 1:\n        return False\n    return True\n\n\nprint(\"Alice\" if solve() else \"Brown\")\n", "x,y = list(map(int,input().split()))\nif abs(x-y) <= 1:\n    print(\"Brown\")\nelse:\n    print(\"Alice\")\n# a:x+y >1 , abs(x-y)>1\n# b:x+y >1 , abs(x-y) <=1\n# c:x+y <=1, (abs(x-y) <=1  )\u3000--> lose\n#\n#       c <--- a <---> b\n#       a <---> a\n", "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce, lru_cache\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\nsys.setrecursionlimit(10 ** 9)\nINF = float(\"inf\")\nmod = 10 ** 9 + 7\n\nX, Y = MAP()\nif abs(X-Y) <= 1:\n\tprint(\"Brown\")\nelse:\n\tprint(\"Alice\")\n", "X,Y=map(int,input().split())\nprint(['Alice','Brown'][abs(X-Y)<2])", "X, Y = map(int, input().split())\n\nif abs(X - Y) <= 1:\n    print ('Brown')\nelse:\n    print ('Alice')", "x,y = map(int,input().split())\n\nprint(\"Alice\" if abs(x-y)>1 else \"Brown\")", "import sys\n\ndef solve():\n    input = sys.stdin.readline\n    X, Y = map(int, input().split())\n    if abs(X - Y) > 1: print(\"Alice\")\n    else: print(\"Brown\")\n\n    return 0\n\ndef __starting_point():\n    solve()\n__starting_point()", "x,y=map(int,input().split())\nprint(\"BArloiwcne\"[abs(x-y)>1::2])", "x,y = map(int,input().split())\n\nif abs(x-y) <= 1:\n    print(\"Brown\")\nelse:\n    print(\"Alice\")", "x,y=map(int,input().split())\nprint('Brown' if abs(x-y)<=1 else 'Alice')", "x, y = list(map(int, input().split()))\nif abs(x-y) <= 1:\n    print('Brown')\nelse:\n    print('Alice')\n", "x,y = map(int,input().split())\nif abs(x-y)<=1:\n    print('Brown')\nelse:\n    print('Alice')", "x, y = list(map(int,input().split()))\nif abs(x-y) <= 1:\n    print('Brown')\nelse:\n    print('Alice')\n", "x,y=map(int,input().split())\nif abs(x-y)<=1:print(\"Brown\")\nelse:print(\"Alice\")", "X, Y = list(map(int, input().split()))\n\nprint(('Alice' if abs(X - Y) > 1 else 'Brown'))\n", "import sys\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nX, Y = lr()\n\nif abs(Y - X) >= 2:\n    print('Alice')\nelse:\n    print('Brown')\n\n# 24\n", "X, Y = map(int, input().split())\nif abs(X-Y) <= 1:\n    print('Brown')\nelse:\n    print('Alice')", "X, Y = list(map(int, input().split()))\nans = 'Brown' if abs(X - Y) <= 1 else 'Alice'\nprint(ans)\n", "X, Y = map(int, input().split())\nprint('Alice' if abs(X-Y)>=2 else 'Brown')", "# solution\nimport io\n\nnim,mike = map(int,input().split())\nprint(\"Brown\" if abs(nim-mike)<2 else \"Alice\")", "x,y=map(int,input().split())\nif abs(x-y)<=1:\n    print(\"Brown\")\nelse:\n    print(\"Alice\")", "a,b=list(map(int,input().split()))\ncnt=1\nif abs(a-b)<=1:\n    print('Brown')\nelse:\n    print('Alice')\n\n\n# if b>a:\n#     a,b=b,a\n# a=a-b\n# b=0\n# mod_a=a%3\n# if a==3:\n#     print('Alice')\n# elif mod_a==2:\n#     print('Alice')\n# elif mod_a==1:\n#     print('Brown')\n# elif (mod_a==0)and(a!=3):\n#     print('Brown')\n# if (mod_a==3)and(mod_b==3):\n#     print('Alice')\n# elif (mod_a==3)and(mod_b==1):\n#     print('Alice')\n# elif (mod_a==1)and(mod_b==3):\n#     print('Alice')\n# elif (mod_a==2)and(mod_b==0):\n#     print('Alice')    \n# elif (mod_a==0)and(mod_b==2):\n#     print('Alice')\n# else:\n#     print('Brown')\n", "x,y=map(int,input().split())\nprint(\"Brown\"if abs(x-y)<2else\"Alice\")", "x, y = map(int, input().split())\nprint(\"Alice\" if abs(x - y) > 1 else \"Brown\")", "a,b = map(int, input().split())\nif abs(a-b) <= 1:\n  print(\"Brown\")\nelse:\n  print(\"Alice\")", "x, y = map(int, input().split())\nif -1 <= x-y <= 1:\n  print(\"Brown\")\nelse:\n  print(\"Alice\")", "def main():\n    x, y = map(int, input().split())\n    if abs(x-y) <= 1:\n        print(\"Brown\")\n    else:\n        print(\"Alice\")\n\ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\nimport sys\n\n\ndef solve(X: int, Y: int):\n    return 'Alice' if abs(X-Y) > 1 else 'Brown'\n\n\n# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    X = int(next(tokens))  # type: int\n    Y = int(next(tokens))  # type: int\n    print((solve(X, Y)))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "X,Y = map(int,input().split())\ndiff = abs(X-Y)\nif(diff < 2):\n    print('Brown')\nelse:\n    print('Alice')", "a,b=map(int,input().split())\nif abs(a-b)<=1:\n  print(\"Brown\")\nelse:\n  print(\"Alice\")", "# editorial\n\ndef main():\n    X, Y = list(map(int, input().split()))\n\n    def solve(x, y):\n        \"\"\"\u624b\u756a\u304c\u52dd\u3064\u304b\"\"\"\n        return not ((X + Y <= 1) or (abs(X - Y) <= 1))\n\n    cond = solve(X, Y)\n    print(('Alice' if cond else 'Brown'))\n\n\ndef __starting_point():\n    main()\n\n# e,e\n# o,e\n# o,o\n# o,e\u9077\u79fb\u306f\u4eca\u56de\u306f\u95a2\u4fc2\u306a\u304b\u3063\u305f\n\n# \u8ca0\u3051\u72b6\u614b\n# 0,0\n# 0,1\n# 1,1\n# \u307e\u3068\u3081\u308b\u3068\n# X+Y<=1\n# abs(X-Y)<=1 <-> >1 \u3068\u4ea4\u4e92\n\n# \u307e\u3068\u3081\u65b9\n# \u5076\u5947\n# \u548c\u3068\u5dee\n\n__starting_point()", "X, Y = list(map(int, input().split()))\n\nif (X == 0 and Y == 0) or (X == 0 and Y == 1) or (\n        X == 1 and Y == 0) or (X == 1 and Y == 1):\n    print('Brown')\n    return\n\nnum = abs(X - Y)\n\nif num <= 1:\n    print('Brown')\nelse:\n    print('Alice')\n", "X, Y = list(map(int, input().split()))\n\nprint(('Brown' if abs(X - Y) < 2 else 'Alice'))\n", "x,y=map(int,input().split())\nif abs(x-y)<=1:\n  print('Brown')\nelse:\n  print('Alice')", "x,y=list(map(int,input().split()))\nif abs(x-y)<=1:\n  print(\"Brown\")\nelse:\n  print(\"Alice\")\n", "import sys\nimport heapq, math\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\nfrom itertools import accumulate, dropwhile, takewhile, groupby\nfrom functools import lru_cache\nfrom copy import deepcopy\n\n\nX, Y = map(int, input().split())\n\nprint(\"Brown\" if abs(X - Y) <= 1 else \"Alice\")", "X,Y=map(int,input().split())\nif X<Y:\n    X,Y=Y,X\n    \nprint('Brown' if (X-1<=Y and Y<=X+1) else 'Alice')", "x,y=map(int,input().split())\nif abs(x-y)<=1:\n  print(\"Brown\")\nelse:\n  print(\"Alice\")", "# 1: starting from there, P1 wins (who starts)\n# 0: P0 wins (who doesn't start)\n# \n# 0 0 1 1 1 1 1\n# 0 0 0 1 1\n# 1 0 0 0 \n# 1 1 0\n# 1 1\n# 1\n# 1\n# |X-Y| <= 1 : 0\n# |X-Y| >  1 : 1\n## X-Y: must change by 3\nX, Y = list(map(int, input().split()))\nif abs(X-Y) > 1:\n  print('Alice')\nelse:\n  print('Brown')\n\n"]