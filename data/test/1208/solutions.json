["def main():\n    n = int(input())\n    \n    result = 0\n    d = set()\n    for i in range(n):\n        t, a = input().split()\n        a = int(a)\n        if t == \"+\":\n            d.add(a)\n            result = max(result, len(d))\n        else:\n            if a in d:\n                d.remove(a)\n            else:\n                result += 1\n    \n    print(result)\n    \n    \nmain()\n", "n = int(input())\n\nroom = set()\ncap = 0\n\nfor i in range(n):\n    typ, r = input().split()\n    if typ == \"+\":\n        room.add(r)\n    else:\n        if r in room:\n            room.remove(r)\n        else:\n            cap += 1\n    cap = max(cap, len(room))\nprint(cap)\n", "n = int(input())\n\nmn = mx = cur = 0\ns = set()\nfor i in range(n):\n    cmd = input()\n    if cmd[0] == '+':\n        s.add(int(cmd[2:]))\n        cur += 1\n        mx = max(mx, cur)\n    else:\n        cur -= 1\n        try:\n            s.remove(int(cmd[2:]))\n        except KeyError:\n            mn -= 1\nprint(mx - mn)\n", "enum = int(input())\nbefore = set()\ncur = set()\nevents = [input().split() for i in range(enum)]\nfor i in range(enum):\n    events[i][1] = int(events[i][1])\nfor i in range(enum):\n    if events[i][0] == '-':\n        if events[i][1] not in cur:\n            before.add(events[i][1])\n            cur.add(events[i][1])\n        cur.remove(events[i][1])\n    else:\n        cur.add(events[i][1])\n\ncur = before\nmax_l = len(cur)\nfor i in range(enum):\n    if events[i][0] == '-':\n        cur.remove(events[i][1])\n    else:\n        cur.add(events[i][1])\n    max_l = max(max_l, len(cur))\nprint(max_l)\n", "n = int(input())\ncol = 0\nmax = 0\np = []\nq = []\ne = []\nfor i in range(n):\n    a, b = list(input().split())\n    b = int(b)\n    q.append([a, b])\n    if a == '-' and b not in p:\n        col += 1\n        e.append(b)\n    p.append(b)\nfor i in range(n):\n    if col >= max:\n        max = col\n    if q[i][0] == '+':\n        e.append(q[i][1])\n        col += 1\n    else:\n        e.remove(q[i][1])\n        col -= 1\n    if col >= max:\n        max = col\nprint(max)\n", "n = int(input())\n\nroom = set()\nmaximum = 0\nfor _ in range(n):\n    t, r = input().split()\n    r = int(r)\n    if t == '+':\n        room.add(r)\n        maximum = max(maximum, len(room))\n    else:\n        if r in room:\n            room.remove(r)\n        else:\n            maximum += 1\n\nprint(maximum)", "N = int(input())\nnumber = 0\nmaxnum = 0\nvisitors = dict()\nfor n in range(N):\n    inout, ID = input().split()\n    if inout == '+':\n        visitors[ID] = 1\n        number += 1\n    else:\n        if ID not in visitors:\n            maxnum += 1\n        else:\n            number -= 1\n        visitors[ID] = 0\n    if number > maxnum:\n        maxnum = number\nprint(maxnum)\n", "n = int(input())\nans = 0\nk = 0\nd = {}\nfor i in range(n):\n    s = input()\n    a = int(s[2:])\n    if s[0] == '+':\n        d[a] = 'yes'\n        k += 1\n        if k > ans:\n            ans = k\n    else:\n        if a not in d:\n            ans += 1\n        else:\n            d[a] = 'no'\n            k -= 1\nprint(ans)", "d = {}\nz = 0\na = 0\nn = int(input())\nfor e in range(n):\n    u, v = input().split()\n    v = int(v)\n    if u == '+':\n        z += 1\n        d[v] = 1\n    else:\n        if d.get(v) == 1:\n            d[v] = 0\n            z -= 1\n        else:\n            a += 1\n    a = max(a, z)\nprint(a)    \n", "n = int(input())\nl = [0] * (10 ** 6 + 1)\ncapacity = 0\ncur = 0\nfor i in range(n):\n    s = input().split()\n    visitor = int(s[1])\n    if s[0] == \"+\":\n        l[visitor] = 1\n        cur += 1\n        if cur > capacity:\n            capacity = cur\n    else:\n        if l[visitor] == 0:\n            capacity += 1\n        else:\n            l[visitor] = 0\n            cur -= 1\nprint (capacity)\n", "def __starting_point():\n    \n    n = int( input() )\n\n    visitors = set()\n    basevisitors = set()\n\n    log = []\n    for _ in range(n):\n\n        sign , ID = input().split()\n        log.append( ( sign , ID ) )\n\n        if sign == \"+\":\n            visitors.add( ID )\n        else:\n            if ID in visitors:\n                visitors.remove( ID )\n            else:\n                basevisitors.add( ID )\n\n\n    res = len( basevisitors )\n    for aLog in log:\n\n        if aLog[0] == \"+\":\n            basevisitors.add( aLog[1] )\n            res = max( res , len(basevisitors) )\n        else:\n            basevisitors.remove( aLog[1] )\n\n    print( res )\n\n__starting_point()", "c=[0]*1000001\nn=int(input())\nmi=ma=k=0\nfor i in range(n):\n   a,b=input().split()\n   b=int(b)\n   if a==\"+\": k+=1; c[b]=1\n   else: \n      if c[b]: k-=1; c[b]=0\n      else: ma+=1\n   ma=max(ma,k)\n   mi=min(mi,k)\nprint(ma-mi)\n", "n = int(input())\ns = set()\nnow = set()\nm = 0\nfor i in range(n):\n    a = input().split()\n    if a[0] == '+':\n        now.add(a[1])\n        s.add(a[1])\n        if len(now) > m:\n            m = len(now)\n    else:\n        if a[1] not in s:\n            m = max(m, len(now)) + 1\n            s.add(a[1])\n        else:\n            now.discard(a[1])\n    #print(m)\n    #print(now)\nprint(m)", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nn       = int(input())\nnow     = 0\nmax     = 0\nreaders = []\n\nfor i in range(n):\n    (flag, N)  = (i for i in input().split())\n    if flag == '+':\n        now += 1\n        if now > max:\n            max = now\n\n    else:\n        if N not in readers:\n            max += 1\n        else:\n            now -= 1\n\n    if N not in readers:\n        readers.append(N)\n\nprint(max)\n\n", "__author__ = 'user'\nn = int(input())\ns = set()\nans = 0\nx = set()\na = [\"0\"] * n\nb = [0] * n\nfor i in range(n):\n    type, id = map(str, input().split())\n    a[i], b[i] = type, id\n    id = int(id)\n    if type == \"+\":\n        s.add(id)\n    elif type == \"-\":\n        if id in s:\n            s.remove(id)\n        elif id not in s:\n            x.add(id)\n\ns.clear()\ns = set(x)\nans = max(ans, len(s))\nfor i in range(n):\n    type, id = a[i], b[i]\n    id = int(id)\n    if type == \"+\":\n        s.add(id)\n    elif type == \"-\":\n        if id in s:\n            s.remove(id)\n    #print(s)\n    ans = max(ans, len(s))\nprint(ans)", "#!/usr/bin/env python3\n\"\"\"\nCodeforces\n567 B.\n\n@author yamaton\n@date 2015-08-05\n\"\"\"\nimport sys\nimport collections\n\ndef solve(xs):\n    d = collections.defaultdict(int)\n    already_in = collections.defaultdict(bool)\n    for (sign, person) in xs:\n        if sign == '+':\n            d[person] += 1\n        else:\n            d[person] -= 1\n        if d[person] < 0:\n            already_in[person] = True\n\n    number = sum(dict(already_in).values())\n    history = [number]\n\n    for (sign, person) in xs:\n        if sign == '+':\n            number += 1\n        else:\n            number -= 1\n        history.append(number)\n\n    return max(history)\n\n\n\n# def print_stderr(*args, **kwargs):\n#     print(*args, file=sys.stderr, **kwargs)\n\n \ndef main():\n    n = int(input())\n    xs = [input().strip().split() for _ in range(n)]\n    result = solve(xs)\n    print(result)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\n\ncmax = 0\ncurr = 0\nrecords = set()\n\nfor i in range(n):\n    line = input()\n    r = int(line[2:])\n    if line[0] == '+':\n        curr += 1\n        cmax = max(curr, cmax)\n        records.add(r)\n    else:\n        if r in records:\n            curr -= 1\n            records.remove(r)\n        else:\n            cmax += 1\n\nprint(cmax)\n", "n=int(input())\ncount=[0]*(1000001)\ncur=0\nans=0\nfor i in range(n):\n    c,d=input().split()\n    d=int(d)\n    if c=='-' and count[d]:\n        cur-=1\n        count[d]-=1\n    elif c=='-' and not count[d]:\n        ans=ans+1\n    elif c=='+':\n        cur+=1\n        ans=max(ans,cur)\n        count[d]+=1\nprint(ans)\n", "a = int(input())\nb = [0 for i in range(1000001)]\nq = 0\ncnt = 0\nmx = 0\nfor i in range(a):\n    z, x = input().split()\n    x = int(x)\n    if z == '+':\n        b[x] = 1\n        cnt += 1\n    if z == '-':\n        if b[x] == 0:\n            mx = mx + 1\n            cnt += 1\n        b[x] = 0\n        cnt -= 1\n    mx = max(mx, cnt)\nprint(mx)\n", "peoplein= 0\ncapacity= 0\nn= int(input())\ndata= [0 for i in range(1, (10**6)+ 10)]\n\nfor i in range(n):\n    a, b= input().split()\n    b= int(b)\n    \n    if a== \"+\":\n        data[b]= 1\n        peoplein+= 1\n        capacity= max(capacity, peoplein)\n    elif a== \"-\":\n        if data[b]== 0:\n            data[b]= -1\n            #peoplein-= 1\n            capacity+= 1\n        elif data[b]== 1:\n            data[b]= -1\n            peoplein-= 1\n\nprint(capacity)\n", "n = int(input())\nmas = [0] * n\ndict = {}\n\nfor i in range(n):\n\tsign, r = input().split()\n\tr = int(r)\n\tif (i == 0):\n\t\tisMinus = sign == '-'\t\t\n\tif sign == '+':\n\t\tdict[r] = i\n\telse:\n\t\tstart = dict.get(r, 0)\n\t\tfor j in range(start, i):\n\t\t\tmas[j] += 1\n\t\tdict.pop(r, None)\n\t\t\nfor i in dict.values():\n\tfor j in range(i, n):\n\t\tmas[j] += 1\n\nmax = -1\nmini = -1\nfor i in range(n):\n\tif mas[i] > max:\n\t\tmax = mas[i]\n\t\tmini = i\n\nif mini == 0 and isMinus:\n\tmax += 1\nprint(max)", "n = int(input());\nminCapacity = 0;\ncapacity = 0;\nreadersIn = [];\nfor i in range(0, n):\n    rec = input().split();\n    if (rec[0] == '+'):\n        capacity += 1;\n        readersIn.append(rec[1]);\n    elif (rec[0] == '-'):\n        if(readersIn.__contains__(rec[1])):\n            readersIn.remove(rec[1]);\n            capacity -= 1;\n        else:\n            minCapacity += 1;\n    if (capacity > minCapacity):\n        minCapacity = capacity;\n\nprint((str(minCapacity)));\n", "def main():\n    n = int(input())\n    initial_population = 0\n    maximum_population = 0\n    current_population = 0\n    population_snapshots = [0] * (n + 1)\n    population_set = set()\n\n    def increase(index):\n        if index > 0:\n            population_snapshots[index] = population_snapshots[index - 1] + 1\n        else:\n            population_snapshots[index] = 1\n\n    def copy(index):\n        if index > 0:\n            population_snapshots[index] = population_snapshots[index - 1]\n        else:\n            population_snapshots[index] = 0\n\n    def decrease(index):\n        population_snapshots[index] = population_snapshots[index - 1] - 1\n\n    def increment_upto(end):\n        for i in range(end + 1):\n            population_snapshots[i] += 1\n\n    for index in range(1, n + 1):\n        direction, receipt = input().split()\n        if direction == '+':\n            increase(index)\n            current_population += 1\n            population_set.add(receipt)\n        else:\n            if receipt in population_set:\n                decrease(index)\n                current_population -= 1\n                population_set.remove(receipt)\n            else:\n                copy(index)\n                increment_upto(index - 1)\n                initial_population += 1\n        maximum_population = max(maximum_population, current_population)\n\n    print(max(population_snapshots))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "ins = []\nsumi = []\nous = []\n\nn = int(input())\nl = []\nfor i in range(n):\n    l.append(str(input()))\n    sumi.append(0)\n\nsumi.append(0)\n\nfor i in range(n):\n    if l[i][0] == \"+\":\n        ins.append(l[i][2:len(l[i])])\n        for j in range(i+1, n+1):\n            sumi[j]+=1\n    elif l[i][0] == \"-\" and l[i][2:len(l[i])] in ins:\n        ins.remove(l[i][2:len(l[i])])\n        for j in range(i+1, n+1):\n            sumi[j]-=1\n    else:\n        for j in range(0, i+1):\n            sumi[j]+=1\n            \n\nprint(max(sumi))", "n = int(input())\nres = 0\nnowin = []\nfor i in range(n):\n    op, name = input().split()\n    if op == \"+\":\n        nowin.append(name)\n        res = max(res, len(nowin))\n    else:\n        if name not in nowin:\n            res += 1\n        else:\n            nowin.remove(name)\nprint(res)\n"]