["n = int(input())\n\nboard =[]\n\nfor i in range(n):\n    board.append(list(input()))\n    \nf = 1\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == '.':\n            if i < n - 2 and j < n - 1 and j > 0 and board[i+1][j] == '.' and board[i+2][j] == '.' and board[i+1][j-1] == '.' and board[i+1][j+1] == '.':\n                board[i+1][j] = '#'\n                board[i+2][j] = '#'\n                board[i+1][j-1] = '#'\n                board[i+1][j+1] = '#'\n            else:\n                f = 0\n                break\n\nif f == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\") ", "n = int(input())\nboard = [[c for c in input()] for _ in range(n)]\n# x = row\nfor x in range(n):\n    # y = col\n    for y in range(n):\n        if board[x][y] == \".\":\n            if y == (n-1) or x >= (n-2) or y==0:\n                print (\"NO\")\n                return\n            board[x][y] = \"#\"\n            if board[x+1][y-1] == \"#\":\n                print (\"NO\")\n                return\n            board[x+1][y-1] = \"#\"\n            if board[x+1][y] == \"#\":\n                print (\"NO\")\n                return\n            board[x+1][y] = \"#\"\n            if board[x+1][y+1] == \"#\":\n                print (\"NO\")\n                return\n            board[x+1][y+1] = \"#\"\n            if board[x+2][y] == \"#\":\n                print (\"NO\")\n                return\n            board[x+2][y] = \"#\"\nprint (\"YES\")", "n = int(input())\nboard = [list(input()) for _ in range(n)]\n\ndef f(i, j):\n    if j == 0 or j == n - 1:\n        return False\n    if i >= n - 2:\n        return False\n    if '#' in (board[i + 1][j - 1], board[i + 1][j], board[i + 1][j + 1], board[i + 2][j]):\n        return False\n    return True\n\ndef g(i, j):\n    board[i][j] = '#'\n    board[i + 1][j - 1] = '#'\n    board[i + 1][j] = '#'\n    board[i + 1][j + 1] = '#'\n    board[i + 2][j] = '#'\n\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == '.':\n            if not f(i, j):\n                print('NO')\n                return\n            g(i, j)\n\nprint('YES')\n", "n = int(input().strip())\ngrid = [list(input().strip()) for _ in range(n)]\nfor i in range(1, n-1):\n\tfor j in range(1, n-1):\n\t\tif grid[i][j] == '.' and grid[i][j+1] == '.' and grid[i][j-1] == '.' and grid[i+1][j] == '.' and grid[i-1][j] == '.':\n\t\t\tgrid[i][j] = '#'\n\t\t\tgrid[i][j+1] = '#'\n\t\t\tgrid[i][j-1] = '#'\n\t\t\tgrid[i+1][j] = '#'\n\t\t\tgrid[i-1][j] = '#'\n\nfor i in range(n):\n\tfor j in range(n):\n\t\tif grid[i][j] == '.':\n\t\t\tprint('NO')\n\t\t\tquit()\n\nprint('YES')", "def can(i, j):\n    return 0 < i < n - 1 and 0 < j < n - 1 and g[i][j + 1] and g[i + 1][j] and g[i][j - 1] and g[i - 1][j] and g[i][j]\n\n\ndef fill(i, j):\n    g[i][j] = 0\n    g[i + 1][j] = 0\n    g[i - 1][j] = 0\n    g[i][j + 1] = 0\n    g[i][j - 1] = 0\n\n\nn = int(input())\ng = []\nfor _ in range(n):\n    g.append([1 if x == '.' else 0 for x in input()])\n\nfor i in range(n):\n    for j in range(n):\n        if can(i, j):\n            fill(i, j)\n\nv = True\n\nfor i in range(n):\n    for j in range(n):\n        if g[i][j]:\n            v = False\n\nprint(\"YES\" if v else \"NO\")\n", "def try_t(i, j):\n\tif i < 0 or i >= n or j < 0 or j >= n:\n\t\treturn False\n\tif A[i][j] == \"#\":\n\t\treturn False\n\tA[i][j] = \"#\"\n\treturn True\n\nn = int(input())\n\nA = []\nfor i in range(n):\n\ts = input()\n\tB = []\n\tfor elem in s:\n\t\tB.append(elem)\n\tA.append(B)\nT = True\nfor i in range(n):\n\tfor j in range(n):\n\t\tif A[i][j] == '.':\n\t\t\ta1 = try_t(i + 1, j)\n\t\t\ta2 = try_t(i + 2, j)\n\t\t\ta3 = try_t(i + 1, j + 1)\n\t\t\ta4 = try_t(i + 1, j - 1)\n\t\t\tif not(a1 and a2 and a3 and a4):\n\t\t\t\tT = False\n\t\t\t\tbreak\nif T:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "import sys\n\nn = int(input())\nB = [list(input()) for _ in range(n)]\n\ndef ok(x,y):\n    return 0 <= x < n and 0 <= y < n\n\ndef try_add(i,j):\n    if ok(i,j) and B[i][j] == '.':\n        B[i][j] = '#'\n        return True\n    return False\n\ndef add_plus(i,j):\n    if not try_add(i,j): return False\n    if not try_add(i+1,j): return False\n    if not try_add(i+2,j): return False\n    if not try_add(i+1,j-1): return False\n    if not try_add(i+1,j+1): return False\n    return True\n\nfor i in range(n):\n    for j in range(n):\n        if B[i][j] == '.':\n            if not add_plus(i,j):\n                print('NO')\n                return\nprint('YES')\n", "n = int(input())\na = []\nfor i in range(n):\n    a.append(list(input()))\n\nfor i in range(n):\n    for j in range(n):\n        if a[i][j] == '.':\n            if n - i < 3 or j == 0 or j == n - 1 or a[i + 1][j] == '#'\\\n                    or a[i + 2][j] == '#' or a[i + 1][j + 1] == '#' or a[i + 1][j - 1] == '#' or a[i][j] == '#':\n                print('NO')\n                return\n\n            a[i][j] = '#'\n            a[i + 1][j] = '#'\n            a[i + 2][j] = '#'\n            a[i + 1][j - 1] = '#'\n            a[i + 1][j + 1] = '#'\nprint('YES')\n", "def step(a, b):\n    if a > n - 3 or b == 0 or b == n - 1 or l[a + 1][b] == '#' or l[a + 2][b] == '#' or l[a + 1][b - 1] == '#' or l[a + 1][b + 1] == '#':\n        return False\n    else:\n        l[a] = l[a][:b] + '#' + l[a][b + 1:]\n        l[a + 1] = l[a + 1][:b - 1] + '###' + l[a + 1][b + 2:]\n        l[a + 2] = l[a + 2][:b] + '#' + l[a + 2][b + 1:]\n        return True\n\nn = int(input())\nl = [input() for i in range(n)]\nans = 'YES'\nfor i in range(n):\n    for j in range(n):\n        if l[i][j] == '.' and not step(i, j):\n            ans = 'NO'\nprint(ans)", "# Please DON'T hack me! TY!\nimport sys\n\n\nclass Main:\n    def __init__(self):\n        self.buff = None\n        self.index = 0\n\n    def __next__(self):\n        if self.buff is None or self.index == len(self.buff):\n            self.buff = self.next_line()\n            self.index = 0\n        val = self.buff[self.index]\n        self.index += 1\n        return val\n\n    def next_line(self, _map=str):\n        return list(map(_map, sys.stdin.readline().split()))\n\n    def next_int(self):\n        return int(next(self))\n\n    def solve(self):\n        n = self.next_int()\n        ss = [[s for s in next(self)] for _ in range(0, n)]\n        for i in range(0, n):\n            for j in range(0, n):\n                if ss[i][j] == '.':\n                    if j == 0 or j == n - 1 or i >= n - 2:\n                        print('NO')\n                        return\n                    if ss[i + 1][j - 1] != '.' or ss[i + 1][j] != '.' or ss[i + 1][j + 1] != '.' or ss[i + 2][j] != '.':\n                        print('NO')\n                        return\n                    ss[i + 1][j - 1] = '#'\n                    ss[i + 1][j] = '#'\n                    ss[i + 1][j + 1] = '#'\n                    ss[i + 2][j] = '#'\n        print('YES')\n\n\ndef __starting_point():\n    Main().solve()\n\n__starting_point()", "n = int(input())\ngrid = [list(input()) for _ in range(n)]\n\nwork = True\nfor i in range(n):\n\tfor j in range(n):\n\t\tif grid[i][j] != '.': continue\n\t\t# We have to fill down\n\t\tpos = [(i, j), (i + 1, j), (i + 2, j), (i + 1, j - 1), (i + 1, j + 1)]\n\t\tfor r, c, in pos:\n\t\t\tif r < 0 or r >= n or c < 0 or c >= n or grid[r][c] == '#':\n\t\t\t\t# Invalid\n\t\t\t\twork = False\n\t\t\t\tbreak\n\t\t\tgrid[r][c] = '#'\n\t\telse: continue\n\t\tbreak\n\telse: continue\n\tbreak\nif work:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "import math\nfrom decimal import Decimal\ndef na():\n\tn = int(input())\n\tb = [int(x) for x in input().split()]\n\treturn n,b\n\n\ndef nab():\n\tn = int(input())\n\tb = [int(x) for x in input().split()]\n\tc = [int(x) for x in input().split()]\n\treturn n,b,c\n\n\ndef dv():\n\tn, m = list(map(int, input().split()))\n\treturn n,m\n\n\ndef dva():\n\tn, m = list(map(int, input().split()))\n\ta = [int(x) for x in input().split()]\n\tb = [int(x) for x in input().split()]\n\treturn n,m,b\n\n\ndef nm():\n\tn = int(input())\n\tb = [int(x) for x in input().split()]\n\tm = int(input())\n\tc = [int(x) for x in input().split()]\n\treturn n,b,m,c\n\n\ndef dvs():\n\tn = int(input())\n\tm = int(input())\n\treturn n, m\n\n\nn = int(input())\na = []\nfor i in range(n):\n\ts = input()\n\ts = list(s)\n\ta.append(s)\nfor i in range(1, n - 1):\n\tfor j in range(1, n - 1):\n\t\tif a[i][j] == '.' and a[i][j + 1] == '.' and a[i][j - 1] == '.' and a[i - 1][j] == '.' and a[i + 1][j] == '.':\n\t\t\ta[i][j], a[i][j + 1], a[i][j - 1], a[i - 1][j], a[i + 1][j] = '#', '#', '#', '#', '#'\nf = True\nfor i in a:\n\tfor j in i:\n\t\tif j == '.':\n\t\t\tf = False\nif f:\n\tprint('YES')\nelse:\n\tprint('NO')\n", "def solve():\n    n = int(input())\n    b = [list(input()) for _ in range(n)]\n    for i in range(n - 2):\n        if b[i][0] == '.' or b[i][-1] == '.':\n            return 'NO'\n        for j in range(1, n - 1):\n            if b[i][j] == '.':\n                chg = [(i + 1, j), (i + 2, j), (i + 1, j - 1), (i + 1, j + 1)]\n                for x, y in chg:\n                    if b[x][y] == '#':\n                        return 'NO'\n                    b[x][y] = '#'\n\n    for i in range(n - 2, n):\n        for j in range(n):\n            if b[i][j] == '.':\n                return 'NO'\n\n    return 'YES'\n\n\nprint(solve())\n", "n = int(input())\narr = [[x for x in input()] for _ in range(n)]\nmove = [(1, -1), (1, 0), (1, 1), (2, 0)]\nfor i in range(n):\n    for j in range(n):\n        if arr[i][j] == '.':\n            arr[i][j] = '#'\n            for m in move:\n                mi, mj = i + m[0], j + m[1]\n                if 0 <= mi < n and 0 <= mj < n and arr[mi][mj] == '.':\n                    arr[mi][mj] = '#'\n                else:\n                    print('NO')\n                    return\nprint('YES')\n", "def mp():\n    return map(int, input().split())\n\nn = int(input())\na = [[j for j in input()] for i in range(n)]\n\nfail = False\nfor i in range(n):\n    for j in range(n):\n        if a[i][j] == '#':\n            continue\n        if (i + 1 < n and a[i + 1][j] == '.') and (i + 2 < n and a[i + 2][j] == '.') and (i + 1 < n and j + 1 < n and a[i + 1][j + 1] == '.') and (i + 1 < n and j - 1 >= 0 and a[i + 1][j - 1] == '.'):\n            a[i][j] = '#'\n            a[i + 1][j] = '#'\n            a[i + 2][j] = '#'\n            a[i + 1][j + 1] = '#'\n            a[i + 1][j - 1] = '#'\n        else:\n            fail = True\n        \n    if fail:\n        break\n    \nfor i in a:\n    for j in i:\n        if j != '#':\n            fail = True\n            break\n\nif fail:\n    print('NO')\nelse:\n    print('YES')", "n = int(input())\nmatrix = []\nfor i in range(n):\n    matrix.append(list(input()))\nfor i in range(n-2):\n    for j in range(1, n-1):\n        if matrix[i][j]=='.':\n            if matrix[i+1][j]=='.' and matrix[i+2][j]=='.' and matrix[i+1][j-1]=='.' and matrix[i+1][j+1]=='.':\n                matrix[i][j]='#'; matrix[i+1][j]='#'; matrix[i+2][j]='#'; matrix[i+1][j-1]='#'; matrix[i+1][j+1]='#'\n            else: print('NO'); return\nfor i in range(n):\n    for j in range(n):\n        if matrix[i][j]=='.': print('NO'); return\nprint('YES')\n", "import io, sys, atexit, os\n\nimport math as ma\nfrom decimal import Decimal as dec\nfrom itertools import permutations\nfrom random import randint as rand\n\n\ndef li ():\n\treturn list (map (int, input ().split ()))\n\n\ndef num ():\n\treturn map (int, input ().split ())\n\n\ndef nu ():\n\treturn int (input ())\n\n\ndef find_gcd ( x, y ):\n\twhile (y):\n\t\tx, y = y, x % y\n\treturn x\n\n\ndef lcm ( x, y ):\n\tgg = find_gcd (x, y)\n\treturn (x * y // gg)\n\n\nmm = 1000000007\nyp = 0\ndef solve ():\n\tt=1\n\tfor _ in range(t):\n\t\tn=nu()\n\t\tx=[0]*n\n\t\tfor i in range(n):\n\t\t\tx[i]=[0]*n\n\t\t\tpp=input()\n\t\t\tfor j in range(n):\n\t\t\t\tif(pp[j]==\".\"):\n\t\t\t\t\tx[i][j]=0\n\t\t\t\telse:\n\t\t\t\t\tx[i][j]=1\n\t\twhile(True):\n\t\t\tfl=False\n\t\t\tfor i in range(n):\n\t\t\t\tfor j in range(n):\n\t\t\t\t\tif((i-1)>=0 and (i+1)<n and (j-1)>=0 and (j+1)<n):\n\t\t\t\t\t\tif(x[i][j]==0 and x[i-1][j]==0 and x[i+1][j]==0 and x[i][j+1]==0 and x[i][j-1]==0):\n\t\t\t\t\t\t\tfl=True\n\t\t\t\t\t\t\tx [ i ] [ j ] = 1\n\t\t\t\t\t\t\tx [ i - 1 ] [ j ] =1\n\t\t\t\t\t\t\tx [ i + 1 ] [ j ] =1\n\t\t\t\t\t\t\tx [ i ] [ j + 1 ] =1\n\t\t\t\t\t\t\tx [ i ] [ j - 1 ] =1\n\t\t\t\t\t\t\tbreak\n\t\t\t\tif(fl):\n\t\t\t\t\tbreak\n\t\t\tif(fl==False):\n\t\t\t\tbreak\n\t\tpw=True\n\t\tfor i in range(n):\n\t\t\tfor j in range(n):\n\t\t\t\tif(x[i][j]==0):\n\t\t\t\t\tpw=False\n\t\tif(pw):\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n\n\n\ndef __starting_point():\n\tsolve ()\n__starting_point()", "#codeforces1150B_live\ngi = lambda : list(map(int,input().strip().split()))\nn, = gi()\nm = [list(input()) for e in range(n)]\nfor k in range(1,n-1):\n\tfor j in range(1,n-1):\n\t\tif m[k-1][j] == m[k+1][j] == m[k][j-1] == m[k][j+1] == m[k][j] == \".\":\n\t\t\tm[k-1][j] = m[k+1][j] = m[k][j-1] = m[k][j+1] = m[k][j] = \"#\"\nfor k in range(n):\n\tfor j in range(n):\n\t\tif m[k][j] == \".\":\n\t\t\tprint(\"NO\")\n\t\t\treturn\nprint(\"YES\")\n", "n = int(input())\nvisit = set()\nA = [['#'] * n] + [list(input()) for _ in range(n)] + [['#'] * n]\nfor i in range(len(A)):\n    A[i] = ['#'] + A[i] + ['#']\nfor i in range(1, len(A) - 1):\n    for j in range(1, len(A) - 1):\n        if A[i][j] == '.' and i * 10 ** 5 + j not in visit:\n            f = 1\n            for kek, lol in (i, j + 1), (i, j - 1), (i - 1, j), (i + 1, j):\n                if A[kek][lol] != '.' or kek * 10 ** 5 + lol in visit:\n                    f = 0\n            if f:\n                for kek, lol in (i, j + 1), (i, j - 1), (i - 1, j), (i + 1, j):\n                    visit.add(kek * 10 ** 5 + lol)\n                    visit.add(i * 10 ** 5 + j)\n        elif A[i][j] == '#':\n            visit.add(i * 10 ** 5 + j)\nif len(visit) == n * n:\n    print('YES')\nelse:\n    print('NO')", "kk=lambda:list(map(int,input().split()))\nll=lambda:list(kk())\ndef check(i,j):\n\tif 0 <= i < n and 0 <= j < n:\n\t\tif ls[i][j] == 0:\n\t\t\tls[i][j] = 1\n\t\t\treturn True\n\treturn False\n\nn = int(input())\nls = [None]*n\nfor i in range(n):\n\tls[i] = [(1 if i == \"#\" else 0) for i in input()]\nfor i in range(n):\n\tfor j in range(n):\n\t\tif ls[i][j] == 1: continue\n\t\tif check(i, j) and check(i+1, j) and check(i+2,j) and check(i+1, j+1) and check(i+1, j-1):\n\t\t\tpass\n\t\telse:\n\t\t\tprint(\"NO\")\n\t\t\treturn\nprint(\"YES\")\n", "n=int(input())\nmat=[]\nfor i in range(n):\n    mat.append(list(input()))\nfor i in range(1,n-1):\n    for j in range(1,n-1):\n        if mat[i][j]=='.':\n            if mat[i+1][j]=='.' and mat[i-1][j]=='.' and mat[i][j-1]=='.' and mat[i][j+1]=='.':\n                mat[i+1][j]='#'\n                mat[i-1][j]='#'\n                mat[i][j-1]='#'\n                mat[i][j+1]='#'\n                mat[i][j]='#'\n#print(mat)\ncnt=0\nfor i in range(n):\n    for j in range(n):\n        if mat[i][j]=='#':\n            cnt+=1 \nprint('YES' if cnt==n*n else 'NO')", "n = int(input())\na = [list(input()) for _ in range(n)]\nfor q in range(n):\n    for q1 in range(n):\n        if a[q][q1] == '.':\n            if q+2 < n and 0 < q1 and q1+1 < n:\n                if a[q+1][q1-1] == a[q+1][q1] == a[q+1][q1+1] == a[q+2][q1] == '.':\n                    a[q][q1] = a[q + 1][q1 - 1] = a[q + 1][q1] = a[q + 1][q1 + 1] = a[q + 2][q1] = '#'\n                    continue\n            print('NO')\n            return\nprint('YES')\n", "n=int(input())\ntab=[]\nfor i in range(n):\n    a=list(input())\n    tab.append(a)\nfor i in range(i):\n    for j in range(n):\n        if 0<i<n-1 and 0<j<n-1 and tab[i-1][j]==tab[i+1][j]==tab[i][j+1]==tab[i][j-1]==tab[i][j]=='.':\n            tab[i][j]='#'\n            tab[i-1][j]='#'\n            tab[i+1][j]='#'\n            tab[i][j-1]='#'\n            tab[i][j+1]='#'\nfor i in range(n):\n    for j in range(n):\n        if tab[i][j]=='.':\n            print('NO')\n            return\nprint('YES')\n", "n = int(input())\nfield = [list(input()) for i in range(n)]\nans = 1\nfor i in range(n):\n    for j in range(n):\n        if field[i][j] == \".\":\n            if i > n - 3 or j == n - 1 or field[i+1][j] != \".\" or field[i+2][j] != \".\" or field[i+1][j+1] != \".\" or field[i+1][j-1] != \".\":\n                ans = 0\n                break\n            field[i+1][j] = \"#\"\n            field[i+2][j] = \"#\"\n            field[i+1][j+1] = \"#\"\n            field[i+1][j-1] = \"#\"\n    if ans == 0:\n        break\nif ans == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "n=int(input())\na=[]\nfin=[]\nfor i in range(n):\n    b=input()\n    v=[0]*len(b)\n    a.append(b)\n    fin.append(v)\n\nfor i in range(n):\n    for j in range(n):\n        if(a[i][j]=='#'):\n            fin[i][j]=1\n\nfor i in range(1,n-1):\n    for j in range(1,len(a[i])-1):\n        if(a[i][j]=='.' and a[i-1][j]=='.' and a[i][j+1]=='.' and a[i][j-1]=='.' and a[i+1][j]=='.' and fin[i][j]==0 and fin[i-1][j]==0 and fin[i][j+1]==0 and fin[i][j-1]==0 and fin[i+1][j]==0):\n            fin[i][j]=fin[i-1][j]=fin[i][j+1]=fin[i][j-1]=fin[i+1][j]=1\nposs=0\nfor i in range(n):\n    for j in range(n):\n        if(fin[i][j]==0):\n            poss=1\n            break\nif(poss):\n    print('NO')\nelse:\n    print('YES')\n            \n"]