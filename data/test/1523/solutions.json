["n, k = list(map(int, input().strip().split()))\n\njobs = list(map(int, input().strip().split()))\ntimes = list(map(int, input().strip().split()))\n\ncounts_jobs = {}\nfor job in jobs:\n    if job in counts_jobs:\n        counts_jobs[job] += 1\n    else:\n        counts_jobs[job] = 1\n\ntimes_i = []\nfor i, time in enumerate(times):\n    times_i.append((time, i))\n\ntimes_i.sort()\njobs_left = k-len(counts_jobs.keys())\n\nans = 0\nfor time, i in times_i:\n    if jobs_left == 0:\n        break\n    if counts_jobs[jobs[i]] > 1:\n        ans += time\n        jobs_left -= 1\n        counts_jobs[jobs[i]] -= 1\n\nprint(ans)", "n,k = list(map(int, input().split()))\njobs = [int(s) for s in input().split()]\ncost = [int(s) for s in input().split()]\nd=[]\nc=[0]*(k+1)\nfor i in range(n):\n    d.append((cost[i], jobs[i]))\n    c[jobs[i]] += 1\nrest = 0\nfor i in range(1,k+1):\n    if c[i] == 0:\n        rest +=1\nd.sort(key = lambda x: x[0])\nallcost = 0\ni = 0\nwhile rest > 0:\n    if c[d[i][1]]>1:\n        c[d[i][1]] -=1\n        allcost += d[i][0]\n        rest-=1\n    i+=1\nprint(allcost)\n", "#https://codeforces.com/problemset/problem/1075/B\n\nn,k = list(map(int,input().split()))\nideal = list(map(str,input().split()))\nrelocation = list(map(int,input().split()))\njobs = {}\nuqjobs = {}\nextra_jobs = []\nfor i in range(n):\n    uqjobs[ideal[i]]=1\n    try:\n        jobs[str(ideal[i])].append(relocation[i])\n    except:\n        jobs[str(ideal[i])]=[relocation[i]]\n\n\nfor i in jobs:\n    if len(jobs[i])>1:\n        jobs[i].sort()\n        for j in range(len(jobs[i])-1):\n            extra_jobs.append(jobs[i][j])\n\nmissing=0\nsumm=0\nextra_jobs.sort()\nfor i in range(k-len(uqjobs)):\n    summ+=extra_jobs[i]\n    \n    \n    \n    \n\nprint(summ)\n", "from bisect import bisect_right as br\nfrom bisect import bisect_left as bl\nfrom collections import defaultdict\nfrom itertools import combinations\nimport sys\nimport math\nMAX = sys.maxsize\nMAXN = 10**5+10\nMOD = 10**9+7\ndef isprime(n):\n    n = abs(int(n))\n    if n < 2:\n        return False\n    if n == 2: \n        return True    \n    if not n & 1: \n        return False\n    for x in range(3, int(n**0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n\ndef mhd(a,b,x,y):\n    return abs(a-x)+abs(b-y)\n\ndef numIN():\n    return(list(map(int,sys.stdin.readline().strip().split())))\n\ndef charIN():\n    return(sys.stdin.readline().strip().split())\n\n\nn,k = numIN()\na = list(numIN())\nb = list(numIN())\nx = [0]*(MAXN)\nd = {}\nfor i in range(n):\n\tif not x[a[i]]:\n\t\tx[a[i]] = 1\n\t\td[a[i]] = [(b[i])]\n\telse:\n\t\td[a[i]].append(b[i])\nrem = x[1:k+1].count(0)\nl = []\nfor i in list(d.keys()):\n\tz = len(d[i])\n\tif z>1:\n\t\td[i].sort()\n\t\tl+=d[i][:z-1]\nl.sort()\nprint(sum(l[:rem]))\n\n\n\n\n\n\n", "n, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ntmp = {}\nvar = []\n\nfor x, y in zip(a, b):\n    old = tmp.get(x, -1)\n    if y > old:\n        if old > -1:\n            var.append(old)\n        tmp[x] = y\n    else:\n        var.append(y)\n        \nvar.sort()\nprint(sum(var[:k - len(tmp)]))\n", "n, k = map(int, input().split(' '))\na = list(map(int, input().split(' ')))\nb = list(map(int, input().split(' ')))\n\nc = [0]*n\nd = [0]*k\nt = list(range(1,n+1))\n\nfor i in range(n):\n    if c[a[i]-1] < b[i]:\n        c[a[i]-1] = b[i]\n        d[a[i]-1] = t[i]\n\nrp = list(set(t)-set(d))\nt2 = [0]*len(rp)\nfor i in range(len(rp)):\n    t2[i] = b[rp[i] - 1]\n\nt2.sort()\nrj = d.count(0)\ns = sum(t2[:rj])\n\nprint(s)", "n, k = list(map(int,input().split()))\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nd = {}\ne = []\nfor i in range(n):\n    if a[i] not in d:\n        d[a[i]] = [b[i]]\n    else:\n        d[a[i]].append(b[i])\n\n'''\nprint(a)\nprint(b)\nprint('--------')\nprint(d)\n'''\nfor i in d:\n    if len(d[i]) > 1:\n        d[i].pop(d[i].index(max(d[i])))\n        e.extend(d[i])\ne.sort()\n'''\nprint(d)\nprint(e)\n'''\n\nw = k - len(set(a))\n#print(w)\n\n#print(e[0:w])\nprint(sum(e[0:w]))\n\n\n\n\n\n\n", "3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef rl(proc=None):\n    if proc is not None:\n        return proc(sys.stdin.readline())\n    else:\n        return sys.stdin.readline().rstrip()\n\ndef srl(proc=None):\n    if proc is not None:\n        return list(map(proc, rl().split()))\n    else:\n        return rl().split()\n\ndef main():\n    n, k = srl(int)\n    A = srl(int)\n    B = srl(int)\n    spare = []\n    done = [-1] * k\n    for i in range(n):\n        task = A[i] - 1\n        if done[task] == -1:\n            done[task] = B[i]\n            continue\n        spare.append(min(done[task], B[i]))\n        done[task] = max(done[task], B[i])\n    spare.sort()\n    i = 0\n    r = 0\n    for d in done:\n        if d == -1:\n            r += spare[i]\n            i += 1\n    print(r)\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n_k = input().split()\nn = int(n_k[0])\nk = int(n_k[1])\nN = input().split()\nT = input().split()\nSvoboda = []\nif len(set(N)) == n:\n    s = 0\nelse:\n    dict47 = {}\n    j = 0\n    for i in N:\n        if i not in dict47:\n            temp = {int(i): int(T[j])}\n            dict47[i] = int(T[j])\n        elif dict47.get(i) < int(T[j]):\n            Svoboda.append(int(dict47.get(i)))\n            dict47[i] = int(T[j])\n        else:\n            Svoboda.append(int(T[j]))\n        j += 1\nj = int(len(set(N)))\ns = 0\nSvoboda.sort()\nfor i in range(0, len(Svoboda)):\n    if j < k:\n        s += int(Svoboda[i])\n        j += 1\nprint(s)", "from operator import itemgetter\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nA = []\nB = []\ns = []\nmax = 0\nsum = 0\nc = k - len(set(a))\nif c == 0:\n    print(0)\nelse:\n    for i in range(n):\n        A.append((a[i],b[i]))\n    B = sorted(A, key=itemgetter(0))\n    max = B[0][1]\n    for j in range(n-1):\n        if B[j][0] == B[j+1][0]:\n            if max < B[j+1][1]:\n                s.append(max)\n                max = B[j+1][1]\n            else:\n                s.append(B[j+1][1])\n        else:\n            max = B[j+1][1]\n    s.sort()\n    for k in range(c):\n        sum += s[k]\n    print(sum)", "from operator import itemgetter\nn,k=[int(x) for x in input().split()]\na=[int(x) for x in input().split()]\nb=[int(x) for x in input().split()]\nA=[]\nB=[]\ns=[]\nmax=0\nsum=0\nc=k-len(set(a))\nif c==0:\n    print(0)\nelse:\n    for i in range(n):\n        A.append((a[i],b[i]))\n    B=sorted(A,key=itemgetter(0))\n    max=B[0][1]\n    for j in range(n-1):\n        if B[j][0]==B[j+1][0]:\n            if max<B[j+1][1]:\n                s.append(max)\n                max=B[j+1][1]\n            else:\n                s.append(B[j+1][1])\n        else:\n            max=B[j+1][1]\n    s.sort()\n    for k in range(c):\n        sum+=s[k]\n    print(sum)\n", "from itertools import zip_longest\nfrom operator import itemgetter\n\n\ndef persuade(idler_nos, job_nos, job_chosen, idlers_persuade_time):\n    persuade_time = 0\n    job_chosen_nos = 0\n    job_item_chosen = {}\n    job_tuples = sorted(list(zip_longest(job_chosen, idlers_persuade_time)), key=itemgetter(1), reverse=True)\n    remain_tuples = []\n\n    for t in job_tuples:\n        if t[0] not in job_item_chosen:\n            job_item_chosen[t[0]] = 0\n            job_chosen_nos += 1\n        else:\n            remain_tuples.append(t)\n            pass\n\n    # Selection step, remove those with highest jobs\n\n    idler_needed_nos = job_nos - job_chosen_nos\n    for i in reversed(list(range(len(remain_tuples)-idler_needed_nos, len(remain_tuples)))):\n        persuade_time += remain_tuples[i][1]\n\n    return persuade_time\n    # Persuade step\n\n\nidler_nos, job_nos = list(map(int, input().split()))\njob_chosen = list(map(int, input().split()))\nidlers_persuade_time = list(map(int, input().split()))\n\nprint(\"{}\".format(persuade(idler_nos, job_nos, job_chosen, idlers_persuade_time)))\n", "n, k = map(int, input().split())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nc = [0] * k\nd = []\nfor (ai, bi) in zip(a,b):\n    if(c[ai - 1] != 0):\n        d.append(min(c[ai - 1], bi))\n    else:\n        k -= 1\n    c[ai - 1] = max(c[ai - 1], bi)\nd.sort()\nprint(sum(d[:k]))", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nno_id=[1]*k\npers_kn=[]\nfor i in range(k):\n\tpers_kn.append([])\nfor i in range(n):\n\tpers_kn[a[i]-1].append(i)\n\tno_id[a[i]-1]=0\nno_job=sum(no_id)\ncans=[]\nfor p in pers_kn:\n\tif len(p)>1:\n\t\tmx_index=0\n\t\tmx=0\n\t\tfor t in p:\n\t\t\tif b[t]>mx:\n\t\t\t\tmx=b[t]\n\t\t\t\tmx_index=t\n\t\tfor t in p:\n\t\t\tif t!=mx_index:\n\t\t\t\tcans.append(b[t])\ncans.sort()\nprint(sum(cans[:no_job]))\n", "from collections import defaultdict\ndef delmax(lst):\n    l = len(lst)\n    if l == 0:\n        return 0\n    m = 0\n    for i in range(l):\n        v = lst[i]\n        if v>m:\n            m, n = v, i\n    del lst[n]\n\nn, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nd = defaultdict(list)\nfor i in range(n):\n    d[a[i]].append(b[i])\n\nsave = []\nfor key in d:\n    u = d[key]\n    delmax(u)\n    save.extend(u)\nsave.sort(reverse=True)\ndel save[:n-k]\nprint(sum(save))\n", "n, k = map(int, input().split())\nalist = list(map(int, input().split()))\nblist = list(map(int, input().split()))\n\nans = dict()\nrem = []\n\nfor i in range(n):\n  if alist[i] in ans:\n    if blist[i] > ans[alist[i]]:\n      rem += [ans[alist[i]]]\n      ans[alist[i]] = blist[i]\n    else:\n      rem += [blist[i]]\n  else:\n    ans[alist[i]] = blist[i]\n\nsrem = sorted(rem)\n\nindex = 0\nanswer = 0\n\nfor i in range(1, k+1):\n  if not(i in ans):\n    answer += srem[index]\n    index += 1\n\nprint(answer)", "#In the name of GOD!\nn, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor i in range(n): a[i] -= 1\n\ntk = [0] * n\ntm = []\nfor i in range(n):\n\tif tk[a[i]] == 0: tk[a[i]] = b[i];\n\telif tk[a[i]] < b[i]: tm.append(tk[a[i]]); tk[a[i]] = b[i]\n\telse: tm.append(b[i])\n\nans = cnt = 0\ntm.sort()\nfor i in range(k):\n\tif tk[i] == 0: \n\t\tans += tm[cnt]\n\t\tcnt += 1\n\nprint(ans)\n", "n,k=map(int,input().split())\na=map(int,input().split())\nb=map(int,input().split())\nc=[0]*k\nd=[]\nfor (ai,bi) in zip(a,b):\n    if (c[ai-1]!=0):\n        d.append(min(c[ai-1],bi))\n    else: k-=1\n    c[ai-1]=max(c[ai-1],bi)\nd.sort()\nprint(sum(d[:k]))", "n,k=map(int,input().split())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nchose=[]\nfor i in range(k):\n    chose.append([])\nfor i in range(n):\n    chose[a[i]-1].append(b[i])\nfor i in range(k):\n    chose[i].sort()\nnotdone=0\nuseful=[]\nfor i in range(k):\n    l=len(chose[i])\n    if l==0:\n        notdone+=1\n    else:\n        useful+=chose[i][:-1]\nuseful.sort()\nprint(sum(useful[:notdone]))", "class Worker():\n    def __init__(self, j, c):\n        self.job = j\n        self.cost = c\n\ndef read(type = 1):\n    if type:\n        file = open(\"input.dat\", \"r\")\n        line = list(map(int, file.readline().split()))\n        a = list(map(int, file.readline().split()))\n        b = list(map(int, file.readline().split()))\n        file.close()\n    else:\n        line = list(map(int, input().strip().split()))\n        a = list(map(int, input().strip().split()))\n        b = list(map(int, input().strip().split()))\n    c = []\n    for i in range(line[0]):\n        c.append(Worker(a[i], b[i]))\n    return line[0], line[1], c\n\n\ndef solve():\n    sols = [0 for i in range(k)]\n    c = sorted(a, key = lambda x : x.cost, reverse=True)\n    jobs = 0\n    mins = []\n    for i in range(n):\n        if sols[c[i].job-1]:\n            mins.append(c[i].cost)\n        else:\n            jobs += 1\n            sols[c[i].job-1] = 1\n    sol = 0\n    for i in range(k-jobs):\n        sol += mins[len(mins)-i-1]\n    return sol\n\nn, k, a = read(0)\nsol = solve()\nprint(sol)", "N, K = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nrec = [[] for i in range(K)]\nfor i in range(N):\n    rec[a[i] - 1].append(i)\n\nS = 0\nrec2 = []\nnum = 0\nfor i in range(K):\n    if len(rec[i]) > 0:\n        S += 1\n    if len(rec[i]) >= 1:\n        rec[i] = sorted(rec[i], key=lambda x: -b[x])\n        rec2 += rec[i][1:]\n\nrec2 = sorted(rec2, key=lambda x: b[x])\nfor i in range(K - S):\n    num += b[rec2[i]]\n\nprint(num)", "a = list(map(int, input().split()))\nidlers = a[0]\njobs = a[1]\nchoices = list(map(int, input().split()))\npersuade = list(map(int, input().split()))\ncount_rep = []\ncount = {}\nfor i in range(len(choices)):\n    if choices[i] not in count:\n        count[choices[i]] = 1\n    else:\n        count_rep.append(choices[i])\ncount_rep_set = set(count_rep)\npers = {}\nfor j in count_rep_set:\n    pers[j] = []\nfor k in range(len(choices)):\n    if choices[k] in count_rep_set:\n        pers[choices[k]].append(persuade[k])\nmergedList = []\nfor key in pers.keys():\n    pers[key].sort()\n    pers[key].pop()\n    mergedList += pers[key]\nmergedList.sort()\nnum = jobs - len(set(choices))\nsum = 0\nfor l in range(num):\n    sum += mergedList[l]\nprint(sum)", "n,k=(int(i)for i in input().split())\na=[int(i) for i in input().split()]\nb=[int(i)for  i in input().split()]\nt=[[a[i],b[i]]for i in range(n)]\nt.sort(key=lambda x:[x[0],-x[1]])\nnow=t[0][0]\ntime=[]\nchosen=1\nfor i in range(1,n):\n    if t[i][0]!=now:\n        chosen+=1\n        now=t[i][0]\n    else:\n        time.append(t[i][1])\ntime.sort()\nprint(sum(time[:(k-chosen)]))\n", "n,k=[int(x) for x in input().split()]\na=[int(x) for x in input().split()]\nb=[int(x) for x in input().split()]\ni=0\ndone={}\ndifferent=0\ndif=set()\nfor item in a:\n    if item not in dif:\n        dif.add(item)\n        different+=1\n    if item not in done:\n        done[item]=[b[i]]\n    else:\n        done[item].append(b[i])\n    i+=1\ntot=[]\nfor item in done:\n    done[item].sort()\n    for i in done[item]:\n        tot.append(i)\n    tot.pop()\ntot.sort()\ncounter=0\nfor item in range(k-different):\n    counter+=tot[item]\nprint(counter)\n    \n"]