["import copy\n\ndef solve():\n    n = int(input())\n    a = [int(c)-1 for c in input().split(' ')]\n\n    nextcard = [[-1 for i in range(8)] for j in range(n)]\n    for i in range(n-2, -1, -1):\n        nextcard[i] = copy.copy(nextcard[i+1])\n        nextcard[i][a[i+1]] = i+1\n\n    jump = [[-1 for i in range(n+1)] for j in range(n)]\n    for i in range(n):\n        card = a[i]\n        cpos = i\n        j = 1\n        \n        while cpos != -1:\n            jump[i][j] = cpos\n            j+=1\n            cpos = nextcard[cpos][card]\n\n    #Find dp solution for range (val, val+1)\n    def getLen(val):\n        dp = [[-1 for i in range(1<<8)] for j in range(n+1)]\n        dp[0][0] = 0\n\n        for i in range(n):\n            card = a[i]\n            for comb in range(1<<8):\n                if (comb & (1<<card)) == 0 and dp[i][comb] != -1:\n                    ncomb = comb + (1<<card)\n                    \n                    if jump[i][val] != -1:\n                        j = jump[i][val]+1\n                        dp[j][ncomb] = max(dp[j][ncomb], dp[i][comb] + val)\n                        \n                    if jump[i][val+1] != -1:\n                        j = jump[i][val+1]+1\n                        dp[j][ncomb] = max(dp[j][ncomb], dp[i][comb] + val + 1)\n\n                dp[i+1][comb] = max(dp[i+1][comb], dp[i][comb])\n\n        return dp[n][(1<<8)-1]\n\n    appear = [False for i in range(8)]\n    for c in a:\n        appear[c] = True\n\n    result = 0\n    for c in appear:\n        result += int(c)\n\n    #Finally binary search to find the result\n\n    cur = 0\n    for lev in range(9, -1, -1):\n        tpow = (1<<lev)\n        if cur + tpow < n:\n            ret = getLen(cur + tpow)\n\n            if(ret != -1):\n                result = max(result, ret)\n                cur += tpow\n\n    return result\n\nprint(solve())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]