["n = int(input())\n\ndef func(v):\n    res = 0\n    if \"A\" in v: res |= 1\n    if \"B\" in v: res |= 2\n    if \"C\" in v: res |= 4\n    return res\n\ncost = [10 ** 10] * 8\ncost[0] = 0\nfor _ in range(n):\n    c, v = input().split()\n    c = int(c)\n    v = func(v)\n    for i in range(8):\n        cost[i | v] = min(cost[i | v], cost[i] + c)\n\nprint(cost[7] if cost[7] < 10 ** 10 else -1)\n", "n = int(input())\n\n\ncosts = [10 ** 18 for i in range(1 << 3)]\n\nfor i in range(n):\n    cs, s = input().split()\n    cs = int(cs)\n\n    msk = 0\n    if 'A' in s:\n        msk |= 1\n    if 'B' in s:\n        msk |= 2\n    if 'C' in s:\n        msk |= 4\n\n    costs[msk] = min(costs[msk], cs)\n\n\nfor msk in [3, 5, 6, 7]:\n    for m1 in range(8):\n        for m2 in range(8):\n            if (m1 | m2) == msk:\n                costs[msk] = min(costs[msk], costs[m1] + costs[m2])\n\n\nif costs[7] == 10 ** 18:\n    print(-1)\nelse:\n    print(costs[7])\n", "#      \nimport collections, atexit, math, sys, bisect \n\nsys.setrecursionlimit(1000000)\ndef getIntList():\n    return list(map(int, input().split()))    \n\ntry :\n    #raise ModuleNotFoundError\n    import numpy\n    def dprint(*args, **kwargs):\n        print(*args, **kwargs, file=sys.stderr)\n    dprint('debug mode')\nexcept Exception:\n    def dprint(*args, **kwargs):\n        pass\n\n\n\ninId = 0\noutId = 0\nif inId>0:\n    dprint('use input', inId)\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\nif outId>0:\n    dprint('use output', outId)\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u81f3\u6587\u4ef6\n    atexit.register(lambda :sys.stdout.close())     #idle \u4e2d\u4e0d\u4f1a\u6267\u884c atexit\n    \nN, = getIntList()\n\ndp = [ 10** 10 for i in range(10)]\ndp[0] = 0\nfor _ in range(N):\n    g = input().split()\n    p = int(g[0])\n    v = g[1]\n    t = 0\n    c = 0\n    for x in 'ABC':\n        if x in v:\n            t = t | (1<<c)\n        c+=1\n    for i in range(8):\n        if dp[i] + p < dp[ i | t]:\n            dp[i | t] = dp[i] + p\n\nif dp[7] == 10 **10:\n    print(-1)\nelse:\n    print(dp[7])\n", "\ndef mi():\n\treturn map(int, input().split())\n\nn = int(input())\na = [0]*n\nfor i in range(n):\n\ta[i] = list(input().split())\n\ta[i][0] = int(a[i][0])\n\t#print (''.join(sorted(list(a[i][1]))))\n\nA,B,C,AB,AC,BC,ABC = 1e10,1e10,1e10,1e10,1e10,1e10,1e10\nfor i in range(n):\n\ta[i][1] = ''.join(sorted(list(a[i][1])))\n\tif a[i][1]=='A':\n\t\tA = min(A,a[i][0])\n\tif a[i][1]=='AB':\n\t\tAB = min(AB,a[i][0])\n\tif a[i][1]=='AC':\n\t\tAC = min(AC,a[i][0])\n\tif a[i][1]=='BC':\n\t\tBC = min(BC,a[i][0])\n\tif a[i][1]=='ABC':\n\t\tABC = min(ABC,a[i][0])\n\tif a[i][1]=='B':\n\t\tB = min(B,a[i][0])\n\tif a[i][1]=='C':\n\t\tC = min(C,a[i][0])\nt = [AB+C, AB+AC, AB+BC, AB+ABC, BC+A, BC+AB, BC+AC, BC+ABC, AC+B, AC+AB, AC+BC, AC+ABC, ABC, A+B+C]\nlol = min(t)\nif lol==1e10:\n\tprint (-1)\nelse:\n\tprint(lol)", "from sys import stdin, stdout\n\n\nn = int(stdin.readline())\nmp = {}\n\nfor i in range(n):\n    c, s = stdin.readline().strip().split()\n    s = ''.join(sorted(list(s)))\n    \n    \n    c = int(c)\n    if not s in mp:\n        mp[s] = c\n    else:\n        mp[s] = min(mp[s], c)\n\nans = float('inf')\nfor v in mp:\n    for c in mp:\n        for g in mp:\n            if len({v, c, g}) != 3:\n                continue\n            \n            if len(set(list(v)) | set(list(c)) | set(list(g))) != 3:\n                continue\n            \n            ans = min(ans, mp[v] + mp[c] + mp[g])\n\n\n\nfor c in mp:\n    for g in mp:\n        if len({c, g}) != 2:\n            continue\n        \n        if len(set(list(c)) | set(list(g))) != 3:\n            continue\n        \n        ans = min(ans, mp[c] + mp[g])\n\n\nfor v in mp:\n    \n    if len(set(list(v))) != 3:\n        continue\n    \n    ans = min(ans, mp[v])            \n            \n\nif ans == float('inf'):\n    stdout.write('-1\\n')\nelse:\n    stdout.write(str(ans))", "from collections import defaultdict\n\nn = int(input())\ninf = float('inf')\nmins = defaultdict(lambda: inf)\nfor _ in range(n):\n    ci, vit = input().split()\n    ci = int(ci)\n    vit = \"\".join(sorted(vit))\n    mins[vit] = min(mins[vit], ci)\n\nresult = min(\n    mins[\"A\"] + min(min(mins[\"B\"], mins[\"AB\"]) + min(mins[\"C\"], mins[\"AC\"]), mins[\"BC\"]),\n    mins[\"B\"] + min(min(mins[\"A\"], mins[\"AB\"]) + min(mins[\"C\"], mins[\"BC\"]), mins[\"AC\"]),\n    mins[\"C\"] + min(min(mins[\"A\"], mins[\"AC\"]) + min(mins[\"B\"], mins[\"BC\"]), mins[\"AB\"]),\n    mins[\"AB\"] + min(mins[\"C\"], mins[\"AC\"], mins[\"BC\"]),\n    mins[\"AC\"] + min(mins[\"B\"], mins[\"AB\"], mins[\"BC\"]),\n    mins[\"BC\"] + min(mins[\"A\"], mins[\"AB\"], mins[\"AC\"]),\n    mins[\"ABC\"],\n)\nprint(-1 if result == inf else result)\n", "import sys\n\n\ndef __starting_point():\n    n = int(next(sys.stdin))\n\n    optimal = {ele: float('inf') for ele in \\\n            [(1,0,0), (0,1,0), (0,0,1),\n             (1,1,0), (1,0,1), (0,1,1),\n             (1,1,1)]}\n    optimal[(0,0,0)] = 0\n\n    for _ in range(n):\n        price, vitamin = next(sys.stdin).strip().split()\n        price = int(price)\n\n        state = (\n                    int('A' in vitamin), \n                    int('B' in vitamin), \n                    int('C' in vitamin)\n                )\n\n        for a in range(2):\n            for b in range(2):\n                for c in range(2):\n                    if optimal[(a,b,c)] < float('inf'):\n                        new_state = (a|state[0], b|state[1], c|state[2])\n                        optimal[new_state] = \\\n                                min(optimal[new_state], optimal[(a,b,c)]+price)\n    print(-1 if optimal[(1,1,1)] == float('inf') else optimal[(1,1,1)])\n\n        \n\n__starting_point()", "n = int(input())\nc = []\ns = []\nfor _ in range(n):\n    ln = input().split()\n    c.append(int(ln[0]))\n    s.append(str(ln[1]))\ndp = [1e9 for _ in range(8)]\ndp[0] = 0\nfor i in range(n):\n    k = 0\n    if 'A' in s[i]:\n        k += 1\n    if 'B' in s[i]:\n        k += 2\n    if 'C' in s[i]:\n        k += 4\n    for j in range(8):\n        dp[j | k] = min(dp[j | k], dp[j] + c[i])\nif dp[7] == 1e9:\n    print(-1)\nelse:\n    print(dp[7])\n", "n = int(input())\n\ncs = []\nvs = []\n\nfor i in range(n):\n    c, v = input().split(' ')\n    c = int(c)\n\n    cs += [c]\n    vs += [set(v)]\n\nBigInt = 10 ** 10\nans = BigInt\n\nfor opt in ['A|B|C', 'AB|C', 'AC|B', 'BC|A', 'ABC']:\n    opt = [set(s) for s in opt.split('|')]\n    cur = 0\n\n    for group in opt:\n        minCost = BigInt\n\n        for c, v in zip(cs, vs):\n            if v.issuperset(group) and c < minCost:\n                minCost = c\n\n        if minCost == BigInt:\n            cur = BigInt\n            break\n\n        cur += minCost\n\n    if cur < ans:\n        ans = cur\n\n    #print(opt, cur)\n    \nprint(-1 if ans == BigInt else ans)", "import math\nn = int(input())\ninf = float(\"inf\")\na = [inf]\nb = [inf]\nc = [inf]\nab = [inf]\nac = [inf]\nbc = [inf]\nabc = [inf]\nfor i in range(n):\n  x,s = input().split()\n  x = int(x)\n  s_  = []\n  for j in s:\n    s_.append(j)\n  s = sorted(s_)\n  s = \"\".join(s)\n  if s == \"A\":\n    a.append(x)\n  elif s == \"B\":\n    b.append(x)\n  elif s == \"C\":\n    c.append(x)\n  elif s == \"AB\":\n    ab.append(x)\n  elif s == \"AC\":\n    ac.append(x)\n  elif s == \"BC\":\n    bc.append(x)\n  elif s == \"ABC\":\n    abc.append(x)\nans = float(\"inf\")\na = min(a)\nb = min(b)\nc = min(c)\nab = min(ab)\nac = min(ac)\nbc = min(bc)\nabc = min(abc)\nans = min(a+b+c,a+bc,b+ac,c+ab,ab+ac,ab+bc,ac+bc,abc)\nif ans == inf:\n  print(-1)\nelse:\n  print(ans)", "USE_STDIO = False\n\nif not USE_STDIO:\n    try: import mypc\n    except: pass\n\ndef parse(s):\n    r = 0\n    for c in s:\n        r |= 1 << (ord(c) - ord('A'))\n    return r\n\ndef main():\n    n,  = list(map(int, input().split(' ')))\n    INF = 1000000000\n    mp = [0] + [INF] * 7\n    for _ in range(n):\n        c, s =  input().split(' ')\n        c, s = int(c), parse(s)\n        for i in range(8):\n            mp[i|s] = min(mp[i|s], mp[i] + c)\n    print(mp[-1] if mp[-1] < INF else -1)\n\n\ndef __starting_point():\n    main()\n\n\n\n\n__starting_point()", "# ns=[int(x)for x in input().split()]\nn=int(input())\nd={}\nfor _ in range(n):\n    s=input().split()\n    p=int(s[0])\n    s[1]=list(s[1])\n    s[1].sort()\n    s[1]=''.join(s[1])\n    # s[1]=s[1].sort()\n    if s[1] in d:\n        d[s[1]]=min(d[s[1]],p)\n    else:\n        d[s[1]]=p\ndef get(s):\n    if s in d:\n        return d[s]\n    return 10**6\na=get('A')\nb=get('B')\nc=get('C')\nab=get('AB')\nbc=get('BC')\nac=get('AC')\nabc=get('ABC')\nans=min(a+b+c,a+bc,b+ac,c+ab,abc,ab+bc,ab+ac,ac+bc)\nif ans<10**6:\n    print(ans)\nelse:\n    print(-1)", "n=int(input())\nd = {'A':float('Inf'), 'B':float('Inf'), 'C':float('Inf'), 'AB':float('Inf'), 'AC':float('Inf'), 'BC':float('Inf'), 'ABC':float('Inf')}\nfor i in range(n):\n    r = input().split()\n    c = int(r[0])\n    s = r[1]\n    s = ''.join(sorted([x for x in s]))\n    d[s] = min(d[s], c)\nans = min(d['ABC'], d['A']+d['BC'], d['AB']+d['BC'],d['AB']+d['AC'], d['AC']+d['BC'], d['B']+d['AC'], d['C']+d['AB'], d['A']+d['B']+d['C'])\nif ans < float('Inf'):\n    print(ans)\nelse:\n    print(-1)", "from math import log2\npricey = 9**99\nx = set()\nmatch = [\"A\", \"B\", \"C\", \"AB\", \"BC\", \"AC\", \"ABC\"]\nn = int(input())\ncheapest = [100001]*7\nfor i in range(n):\n    p, s = input().split()\n    p = int(p)\n    for c in s: x.add(c)\n    s = \"\".join(sorted(list(s)))\n    j = match.index(s)\n    cheapest[j] = min(cheapest[j], p)\nif len(x) < 3: print(-1)\nelse:\n    for i in range(1, 128):\n        truth = [int(i) for i in \"0\"*(6-int(log2(i))) + bin(i)[2:]]\n        price = 0\n        has = set()\n        for j, b in enumerate(truth):\n            if b:\n                if cheapest[j] > 100000: break\n                else:\n                    price += cheapest[j]\n                    for c in match[j]: has.add(c)\n        else:\n            if len(has) == 3:\n                pricey = min(price, pricey)\n    print(pricey)\n            \n                    \n                    \n        \n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\nmax = 300000+5\n\nABC = max\nAC  = max\nAB  = max\nBC  = max\nA   = max\nB   = max\nC   = max\n\nn   = int(input())\n\nfor i in range(n):\n    (c, s) = (i for i in input().split())\n    c = int(c)\n    if len(s) == 3:\n        if c < ABC:\n            ABC = c\n    elif len(s) == 2:\n        if 'A' in s:\n            if 'B' in s:\n                if c < AB:\n                    AB = c\n            else:\n                if c < AC:\n                    AC = c\n        else:\n            if c < BC:\n                BC = c\n    else:\n        if s == \"A\":\n            if c < A:\n                A = c\n        elif s == \"B\":\n            if c < B:\n                B = c\n        else:\n            if c < C:\n                C = c\n\nstart = time.time()\n\nans = min (ABC, AB+C, AC+B, BC+A, AB+BC, AB+AC, BC+AC, A+B+C)\n\nif ans == max:\n    print(-1)\nelse:\n    print(ans)\nfinish = time.time()\n#print(finish - start)\n", "n = int(input())\nimport collections\nl = collections.defaultdict(list)\nx = []\nf1,f2,f3 = 0,0,0\nfor i in range(n):\n\tc,s = input().split()\n\tc = int(c)\n\ts = ''.join(sorted(s))\n\tz = [i for i in s]\n\tif('A' in z):\n\t\tf1 = 1\n\tif('B' in z):\n\t\tf2 = 1\n\tif('C' in z):\n\t\tf3 = 1\n\tl[s].append(c)\n\tx.append(s)\nif(not(f1 and f2 and f3)):\n\tprint(-1)\n\treturn\nfor i in x:\n\tl[i].sort()\n\nt1,t2,t3,t4,t5,t6,t7,t8 = 10**9,10**9,10**9,10**9,10**9,10**9,10**9,10**9\nif(l['A'] and l['B'] and l['C']):\n\tt1 = l['A'][0] + l['B'][0] + l['C'][0]\nif(l['AB'] and l['BC']):\n\tt2 = l['AB'][0] + l['BC'][0]\nif(l['AB'] and l['AC']):\n\tt3 = l['AB'][0] + l['AC'][0]\nif(l['AC'] and l['BC']):\n\tt4 = l['AC'][0] + l['BC'][0]\nif(l['ABC']):\n\tt5 = l['ABC'][0]\nif(l['A'] and l['BC']):\n\tt6 = l['A'][0] + l['BC'][0]\nif(l['AC'] and l['B']):\n\tt7 = l['AC'][0] + l['B'][0]\nif(l['AB'] and l['C']):\n\tt8 = l['AB'][0] + l['C'][0]\nprint(min(t1,t2,t3,t4,t5,t6,t7,t8))\n", "import sys\n\nn=int(input())\nCS=[list(input().split()) for i in range(n)]\n\nLIST=[10**6]*7#A,B,C,AB,BC,AC,ABC\n\n\nfor cs in CS:\n    if \"A\" in cs[1]:\n        LIST[0]=min(LIST[0],int(cs[0]))\n    if \"B\" in cs[1]:\n        LIST[1]=min(LIST[1],int(cs[0]))\n    if \"C\" in cs[1]:\n        LIST[2]=min(LIST[2],int(cs[0]))\n    if \"A\" in cs[1] and \"B\" in cs[1]:\n        LIST[3]=min(LIST[3],int(cs[0]))\n    if \"B\" in cs[1] and \"C\" in cs[1]:\n        LIST[4]=min(LIST[4],int(cs[0]))\n    if \"C\" in cs[1] and \"A\" in cs[1]:\n        LIST[5]=min(LIST[5],int(cs[0]))\n    if \"A\" in cs[1] and \"B\" in cs[1] and \"C\" in cs[1]:\n        LIST[6]=min(LIST[6],int(cs[0]))\n\nif LIST[0]==10**6 or LIST[1]==10**6 or LIST[2]==10**6:\n    print(-1)\n\nelse:\n    print(min(LIST[0]+LIST[1]+LIST[2],LIST[0]+LIST[4],LIST[1]+LIST[5],LIST[2]+LIST[3],LIST[6]))\n", "N = int(input())\nsrc = [input().split() for i in range(N)]\n\nINF = float('inf')\ndp = [INF] * 8\ndp[0] = 0\nfor n,vs in src:\n    n = int(n)\n    b = int('A' in vs) * 4\n    b += int('B' in vs) * 2\n    b += int('C' in vs) * 1\n    dp2 = dp[:]\n    for i,c in enumerate(dp):\n        dp2[i|b] = min(dp2[i|b], c + n)\n    dp = dp2\n\nprint(-1 if dp[-1] == INF else dp[-1])\n", "n = int(input())\ninf = 10 ** 6\nabc = [inf] * 7\nu = []\ndef rf(x, y):\n    if x > y:\n        return(y)\n    return (x)\nfor i in range(n):\n    k, s = input().split()\n    k = int(k)\n    s = list(s)\n    s.sort()\n    a = 'A' in s\n    b = 'B' in s\n    c = 'C' in s\n    #print(a, b, c)\n    if a: abc[0] = rf(abc[0], k)\n    if b: abc[1] = rf(abc[1], k)\n    if c: abc[2] = rf(abc[2], k)\n    if a and b: abc[3] = rf(abc[3], k)\n    if c and b: abc[4] = rf(abc[4], k)\n    if a and c: abc[5] = rf(abc[5], k)\n    if a and b and c: abc[6] = rf(abc[6], k)\na1 = [0] * 5\na1[0] = abc[0] + abc[1] + abc[2]\na1[1] = abc[0] + abc[4]\na1[2] = abc[1] + abc[5]\na1[3] = abc[2] + abc[3]\na1[4] = abc[6]\nans = min(a1)\nif ans == inf:\n    print(-1)\nelse:\n    print(ans)\n", "n=int(input())\nd={'A':10e9,'B':10e9,'C':10e9,'AB':10e9,'BC':10e9,'AC':10e9,'ABC':10e9}\nfor i in range(n):\n    a,b=input().split()\n    a=int(a)\n    b=''.join(sorted(list(b)))\n    d[b]=min(d.get(b),a)\nk=min(d['A']+d['B']+d['C'],d['AB']+d['BC'],d['BC']+d['AC'],d['AB']+d['AC'],d['ABC'],d['BC']+d['A'],d['AB']+d['C'],d['AC']+d['B'])\nif k>=10e9:\n    print(-1)\nelse:\n    print(k)\n", "d = {}\n\nn = int(input())\nfor i in range(n):\n    c, v = [j for j in input().split()]\n    v = \"\".join(sorted(v))\n    c = int(c)\n    #print(v)\n    if v not in d:\n        d[v] = c\n    else:\n        if d[v] > c:\n            d[v] = c\n\nu = [(\"\", 0)] + [(k, v) for k, v in list(d.items())]\n\nres = 1000000000\nfor i1 in range(len(u)):\n    for i2 in range(len(u)):\n        for i3 in range(len(u)):\n            s = u[i1][0] + u[i2][0] + u[i3][0]\n            if \"A\" in s and \"B\" in s and \"C\" in s:\n                co = u[i1][1] + u[i2][1] + u[i3][1]\n                res = min(res, co)\n\nif res == 1000000000:\n    print(-1)\nelse:\n    print(res)\n                \n            \n    \n", "n = int(input())\ndic = {}\ndic[\"A\"] = float(\"inf\")\ndic[\"B\"] = float(\"inf\")\ndic[\"C\"] = float(\"inf\")\ndic[\"AB\"] = float(\"inf\")\ndic[\"BC\"] = float(\"inf\")\ndic[\"AC\"] = float(\"inf\")\ndic[\"ABC\"] = float(\"inf\")\nfor i in range(n):\n    c, s = input().split()\n    c = int(c)\n    s = \"\".join(sorted(s))\n    dic[s] = min(dic[s], c)\n\n\nq = float(\"inf\")\nq = min(q, dic[\"A\"] + dic[\"B\"] + dic[\"C\"])\nq = min(q, dic[\"A\"] + dic[\"BC\"])\nq = min(q, dic[\"B\"] + dic[\"AC\"])\nq = min(q, dic[\"C\"] + dic[\"AB\"])\nq = min(q, dic[\"AB\"] + dic[\"BC\"])\nq = min(q, dic[\"AC\"] + dic[\"BC\"])\nq = min(q, dic[\"AC\"] + dic[\"AB\"])\nq = min(q, dic[\"ABC\"])\n\nif q == float(\"inf\"):\n    print(-1)\nelse:\n    print(q)", "n = int(input())\n\nisC = False\nisB = False\nisA = False\n\nd = {}\n\nfor i in range(n):\n\tline = input()\n\n\tc = int(line.split(' ')[0])\n\ts = line.split(' ')[1]\n\n\tif 'A' in s:\n\t\tisA = True\n\n\tif 'B' in s:\n\t\tisB = True\n\n\tif 'C' in s:\n\t\tisC = True\n\n\t# print(s)\n\n\tname = ''.join(sorted(s))\n\n\ttry:\n\t\td[name] = min(c, d[name])\n\n\texcept:\n\t\td[name] = c\n\nif not isA or not isB or not isC:\n\tprint(-1)\n\nelse:\n\tarr = []\n\n\ttry:\n\t\tarr.append(d['A'] + d['B'] + d['C'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['A'] + d['BC'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['AB'] + d['C'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['AC'] + d['B'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['AB'] + d['BC'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['AC'] + d['BC'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['AB'] + d['AC'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['ABC'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['ABC'])\n\texcept:\n\t\tpass\n\n\tprint(min(arr))\n\n", "list_keys = ['A', 'B', 'C', 'AB', 'BC', 'AC', 'ABC', '1', '2']\n\ndef sortStr(s):\n    res = ''\n    s = sorted(s)\n    for c in s:\n        res += c\n    return res\n\ndef check(s1, s2 ,s3):\n    s = s1 + s2 + s3\n    return 'A' in s and 'B' in s and 'C' in s\n\nval = {}\nINF = 1e9\nfor key in list_keys:\n    val[key] = INF\nval['1'] = 0\nval['2'] = 0\n\nn = int(input())\nfor i in range(n):\n    v, s = input().split()\n    v = int(v)\n    s = sortStr(s)\n    if val[s] > v:\n        val[s] = v\n\nres = INF\nfor key1 in list_keys:\n    for key2 in list_keys:\n        for key3 in list_keys:\n            if check(key1, key2, key3):\n                res = min(res, val[key1] + val[key2] + val[key3])\n\nif res == INF:\n    res = -1\nprint(res)", "n = int(input())\nprice = []\nvita = []\ndmin = {}\ndmin['A'] = 9999999\ndmin['B'] = 9999999\ndmin['C'] = 9999999\ndmin['AB'] = 9999999\ndmin['AC'] = 9999999\ndmin['BC'] = 9999999\ndmin['ABC'] = 9999999\nfor i in range(n):\n    p,v = input().split()\n    # price.append(int(p))\n    p = int(p)\n    v = ''.join(sorted(v))\n    if dmin[v] > p:\n        dmin[v] = p\n    vita.append((p,v))\nth1 = dmin['A']+dmin['B']+dmin['C']\nth2 = dmin['A']+dmin['BC']\nth3 = dmin['B']+dmin['AC']\nth4 = dmin['C']+dmin['AB']\nth5 = dmin['ABC']\nth6 = dmin['AB']+dmin['BC']\nth7 = dmin['AC']+dmin['BC']\nth8 = dmin['AB']+dmin['AC']\nres = min(th1,th2,th3,th4,th5,th6,th7,th8)\nif res == 9999999:\n    print(-1)\nelse:\n    print(res)\n"]