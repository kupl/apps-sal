["n,m=list(map(int,input().split()))\nif(m!=0):\n    L=list(map(int,input().split()))\nelse:\n    L=[]\n\nL.sort()\nvalid=True\nfor i in range(2,m):\n    if(L[i]-L[i-2]==2):\n        valid=False\nif(m==0 or(valid and L[0]!=1 and L[-1]!=n)):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "N, M = list(map(int, input().split()))\nif M > 0:\n    Dirty = list(sorted((list(map(int, input().split())))))\n    Flag = Dirty[0] != 1 and Dirty[-1] != N\n    if Flag:\n        Last = Dirty[0]\n        Amount = 1\n        for Num in Dirty:\n            if Last + 1 == Num:\n                Amount += 1\n            else:\n                Amount = 1\n            Last = Num\n            if Amount == 3:\n                Flag = False\n                break\n    if Flag:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    print(\"YES\")\n", "n,m=map(int,input().split())\nif m==0:\n    print(\"YES\")\n    return\na=set(map(int,input().split()))\nl=0\nfor i in a:\n    if (i+1 in a)and(i+2 in a):\n        l+=1\nif (1 in a) or (n in a)or(l>0):\n    print('NO')\nelse:\n    print('YES')", "def  readln():\n    return  list(map(int, input().split()))\n\nn, k = readln()\ndirties = []\nif  k > 0:\n    dirties = readln()\n\ndirties = sorted(dirties)\n\nprevprev =  -1\nprev =  -1\nilegal = False\n\nfor  val  in  dirties:\n    if prevprev == -1:\n        prevprev =  val\n        continue\n    if prev == -1:\n        prev =  val\n        continue\n    if prevprev == prev - 1 and  prev == val - 1:\n        ilegal = True\n\n    prevprev = prev\n    prev =  val\n\n#print (dp)\n\nif ilegal or (k > 0 and (dirties[0] == 1 or dirties[-1] == n)):\n    print (\"NO\")\nelse:\n    print (\"YES\")\n\n\n", "#/usr/bin/env python\n\nimport sys\n\nn,m = tuple(int(x) for x in input().split(\" \") if len(x)>0)\nif m==0:\n\tprint(\"YES\")\n\treturn\n\nd = [int(x) for x in input().split(\" \") if len(x)>0]\n\n\n\nd.sort()\n\n\ndef solve():\n\tif d[0] == 1:\n\t\treturn \"NO\"\n\n\tif d[-1] == n:\n\t\treturn \"NO\"\n\n\tlc=0\n\tfor x in range(m-1):\n\t\ti = d[x]\n\t\tj = d[x+1]\n\t\tif i == j-1:\n\t\t\tlc += 1\n\t\t\tif lc > 1:\n\t\t\t\treturn \"NO\"\n\t\telse:\n\t\t\tlc = 0\n\n\treturn \"YES\"\n\nprint(solve())", "a=list(map(int,input().split()))\n\nif a[1]==0:\n    print('YES')\nelse:\n    m=list(map(int,input().split()))\n    m.sort()\n    Max,c=0,1\n    if m[0]!=1 and m[-1]!=a[0]:\n        for i in range(len(m)-1):\n            if m[i]==m[i+1]-1:\n                c+=1\n                if c>Max:\n                    Max=c\n            else:\n                c=1\n        if Max<3:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n", "import sys\n\n\ndef check_stairs(n, stairs):\n    if len(stairs) == 0:\n        print('YES')\n        return\n    if stairs[0] == 1 or stairs[-1] == n:\n        print('NO')\n        return\n    for i in range(len(stairs) - 2):\n        if stairs[i] + 1 == stairs[i+1] and stairs[i] + 2 == stairs[i+2]:\n            print('NO')\n            return\n    print('YES')\n\n\ndef __starting_point():\n\n    nm_list = [int(c) for c in sys.stdin.readline().rstrip().split(' ')]\n    (n, m) = tuple(nm_list)\n    stairs = []\n    if m > 0:\n        stairs = [int(c) for c in sys.stdin.readline().rstrip().split(' ')]\n        stairs.sort()\n    check_stairs(n, stairs)\n\n__starting_point()", "n, m = list(map(int, input().split()))\n\nif m == 0:\n    ok = True\nelse:\n    hole = sorted(map(int, input().split()))\n    ok = hole[0] != 1 and hole[-1] != n\n    for i in range(2, m):\n        if hole[i] == hole[i-1]+1 == hole[i-2]+2:\n            ok = False\n            break\n\nprint(\"YES\" if ok else \"NO\")\n\n\n", "n, m = map(int,input().split())\nif m >= 1:\n    gr = list(map(int, input().split()))\n    gr.sort()\nk = 1\nif (m >= 1 and gr[0] == 1) or (m >= 1 and gr[m-1]) == n:\n    print('NO')\nelse:\n    for i in range(m-2):\n        if gr[i] == gr[i+1] - 1 == gr[i+2] - 2:\n            print('NO')\n            k = 0\n            break\n    if k == 1:\n        print('YES')", "n, m = [int(x) for x in input().split()]\nd=[]\nfound = False\nif m!=0:\n\td = [int(x) for x in input().split()]\n\td.sort()\n\t\n\tif d[0]==1 or d[m-1]==n:\n\t\tprint(\"NO\")\n\t\tfound = True\n\n\nif not found:\n\tfound=False\n\tfor i in range(2, m):\n\t\tif d[i-2]==d[i]-2 and d[i-1]==d[i]-1:\n\t\t\tfound=True\n\t\t\tprint(\"NO\")\n\t\t\tbreak\n\t\n\tif not found:\n\t\tprint(\"YES\")\n\n", "n,m = list(map(int,input().split()))\n\nif m>0:\n    num = [int(x) for x in input().split()]\n    num.sort()\n\nret = True\n\nif m>0:\n    if num[0] == 1 or num[m-1]==n: ret=False\n\nif m>2:\n    for i in range(m-2):\n        if num[i]+2 == num[i+1]+1 == num[i+2]: ret = False\n\nprint(\"YES\" if ret else \"NO\")\n", "3\n\ndef readln(): return tuple(map(int, input().split()))\n\nn, m = readln()\nd = sorted(readln()) if m else []\nif m and (d[0] == 1 or d[-1] == n) or m > 2 and [1 for i, j, k in zip(d[:-2], d[1:-1], d[2:]) if i + 2 == k]:\n    print('NO')\nelse:\n    print('YES')\n", "n, m = map(int, input().split())\nif m == 0: print('YES')\nelse: \n    t = list(map(int, input().split()))\n    t.sort()\n    if t[0] == 1 or t[-1] == n: print('NO')\n    else:\n        k = s = 0\n        for i in t:\n            if i == k:\n                s += 1\n                k += 1\n                if s > 1:\n                    s = -1\n                    break\n            else: k, s = i + 1, 0\n        print('YNEOS'[s == -1 :: 2])", "def canJump(numStairs, dirty):\n    maxJump = 2\n    counter = 0\n    dirty.sort()\n    if dirty[0] == 1 or dirty[-1] == numStairs:\n        return False\n    for i in range(1, len(dirty)):\n        if dirty[i - 1] + 1 == dirty[i]:\n            counter += 1\n            if counter >= maxJump:\n                break;\n        else:\n            counter = 0\n    else:\n        return True\n    return False\ns1 = input()\nif int(s1.split(' ')[1]) == 0:\n    print('YES')\nelse:\n    s2 = input()\n    if canJump(int(s1.split(' ')[0]), [int(s) for s in s2.split(' ')]):\n        print('YES')\n    else:\n        print('NO')\n\n\n", "R = lambda: map(int, input().split())\nn, m = R()\nd = sorted(R()) if m > 0 else []\nprint(\"YES\" if len(d) == 0 or d[0] != 1 and d[m - 1] != n and all(d[i + 2] - d[i] > 2 for i in range(m - 2)) else \"NO\")", "R = lambda: map(int, input().split())\nn, m = R()\nd = sorted(R()) if m > 0 else [0]\nprint(\"NO\" if d[0] == 1 or d[-1] == n or any(d[i + 2] - d[i] < 3 for i in range(m - 2)) else \"YES\")", "n, m = map(int, input().split())\nif m > 0:\n    a = list(map(int, input().split()))\n    a.sort()\n    k = 0\n    k1 = 1\n    for i in range(1, m):\n        if a[i] == a[i - 1] + 1:\n            k1 += 1\n        else:\n            k = max(k, k1)\n            k1 = 1\n    k = max(k, k1)\n    if k > 2 or (m >= 1 and (a[0] == 1 or a[-1] == n)):\n        print('NO')\n    else:\n        print('YES')\nelse:\n    print('YES')", "\n\n\"\"\"k = []\nfor i in range(5):\n    k.append([int(x) for x in (sys.stdin.readline()).split()])\n    \nvmax = 0 \ntt = []\nfor i in range(5):\n    for j in range(i, 5):\n        if(i != j):\n            k[i][j] = k[j][i] = k[i][j] + k[j][i]\n                \n\nfor i in range(5):\n    print(k[i])\"\"\"\n  \n  \nimport sys\nimport math\n  \nn, m = [int(x) for x in (sys.stdin.readline()).split()]\ndm = [int(x) for x in (sys.stdin.readline()).split()]\n\ndm.sort()\n\nif(m == 0):\n    print(\"YES\")\n    return\n\nif(dm[0] == 1 or dm[m - 1] == n):\n    print(\"NO\")\n    return\n    \nval = 0\nfor i in range(m - 1):\n    if(math.fabs(dm[i] - dm[i + 1]) == 1):\n        val += 1\n    else:\n        val = 0   \n    if(val > 1):\n        print(\"NO\")\n        return\n        \nprint(\"YES\")\n\n", "n, m = (int(x) for x in input().split())\nif m == 0:\n    print('YES')\n    return\ns = set()\nfor d in (int(x) for x in input().split()):\n    s.add(d)\n    if d == 1 or d == n:\n        print('NO')\n        return\n    elif (d - 1) in s and ((d - 2) in s or (d + 1) in s):\n        print('NO')\n        return\n    elif (d + 1) in s and (d + 2) in s:\n        print('NO')\n        return\nprint('YES')", "n, m = [int(x) for x in input().split()]\nif m:\n\tl = sorted([int(x) for x in input().split()])\nelse:\n\tl = []\nif len(l) and (l[0] == 1 or l[-1] == n):\n\tprint('NO')\n\treturn\nfor i in range(m - 2):\n\tif l[i + 2] == l[i + 1] + 1 and l[i + 1] == l[i] + 1:\n\t\tprint('NO')\n\t\tbreak\nelse:\n\tprint('YES')\n", "def main():\n    n, m = map(int, input().split())\n    res = True\n    if m:\n        l = sorted(map(int, input().split()))\n        res = l[0] != 1 and l[-1] != n\n        if res and m > 2:\n            for a, b, c in zip(l, l[1:], l[2:]):\n                if b - a == 1 == c - b:\n                    res = False\n                    break\n    print(('NO', 'YES')[res])\n\n\ndef __starting_point():\n    main()\n__starting_point()", "inStr=input()\nn=int(inStr.split()[0])\nm=int(inStr.split()[1])\nans='YES'\nif not m==0:\n    inStr=input()\n    dirty=[int(x) for x in inStr.split()]\n\n    sDirty=sorted(dirty)\n    if sDirty[0]==1 or sDirty[-1]==n:\n        ans='NO'\n    else:\n        for i in range(len(sDirty)-2):\n            cur=sDirty[i]\n            if sDirty[i+1]==cur+1 and sDirty[i+2]==cur+2:\n                ans='NO'\n                break\n\nprint(ans)", "# coding: utf-8\nn, m = [int(i) for i in input().split()]\nif not m:\n    print('YES')\n    return\nd = [int(i) for i in input().split()]\nif n in d or 1 in d:\n    print('NO')\n    return\nd.sort()\ni = 0\nwhile i < m-2:\n    if d[i+2]-d[i+1]==1:\n        if d[i+1]-d[i]==1:\n            print('NO')\n            break\n        else:\n            i += 1\n    else:\n        i += 2\nelse:\n    print('YES')\n"]