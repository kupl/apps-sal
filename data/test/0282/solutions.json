["'''input\n4 2\n1001\n'''\n\ndef list_input():\n    return list(map(int,input().split()))\ndef map_input():\n    return map(int,input().split())\ndef map_string():\n    return input().split()\n    \nn,d = map_input()\ns = input()\ncur = 0\ncnt = 0\nwhile cur < n-1:\n\tj = -1\n\tfor i in range(cur+1,min(cur+d+1,n)):\n\t\tif s[i] == '1': j = i\n\tif j == -1:\n\t\tprint(-1)\n\t\tbreak\n\tcur = j\n\tcnt += 1\nelse: print(cnt)\t\t\t", "n, d = [int(i) for i in input().split()]\na = input()\ndp = [1e9] * n\ndp[0] = 0\nfor i in range(1, n):\n    if a[i] == '0':\n        continue\n    for j in range(1, d + 1):\n        if i - j < 0:\n            break\n        dp[i] = min(dp[i], dp[i - j] + 1)\nprint(dp[-1] if dp[-1] != 1e9 else -1)", "n,d = [int(i) for i in input().split()]\ns = input()\ni = 0\nt = 0\nf = 1\nwhile i < n-1 and f == 1:\n\tf = 0\n\tk = i+d\n\tif k >= n :\n\t\tk = n-1\n\tfor j in range(k,i,-1):\n\t\tif s[j] == '1':\n\t\t\t#print(j)\n\t\t\tf = 1\n\t\t\ti = j\n\t\t\tt = t+1\n\t\t\tbreak\nif f == 0 :\n\tprint(-1)\nelse:\n\tprint(t)\n\t\t\t\n", "n,d=list(map(int,input().strip().split(' ')))\narr=input()\ndp=[10000 for i in range(1000)]\ndp[0]=0\ni=1\nwhile(i<n):\n\n\tif(arr[i]=='1'):\n\t\t\n\t\tfor j in range(i-1,max(-1,i-d-1),-1):\n\t\t\t\n\t\t\tdp[i]=min(dp[i],dp[j]+1)\n\ti+=1\n\nif(dp[n-1]==10000):\n\tprint(-1)\nelse:\n\tprint(dp[n-1])\n", "s1 = input()\ns1 = s1.split()\nn = int(s1[0])\nd = int(s1[1])\ns = input()\ncount = 0\npos = 1\ndk = d\nres = True\nwhile(pos!=n):\n    if dk==0:\n        res = False\n        break\n    if pos+dk<=n and s[pos+dk-1]=='1':\n        if dk==0:\n            res = False\n            break\n        pos+=dk\n        count+=1\n        dk = d\n    else:\n        dk-=1\n\nif res:\n    print(count)\nelse:\n    print(-1)", "n,k = list(map(int,input().split()))\nc = 0 \ns = input()\nst = 1\nwhile st<n:\n\tflag = 0 \n\tsk = 0 \n\tfor i in range(st,min(st+k,n)):\n\t\tif s[i]=='1':\n\t\t\tsk = i\n\t\t\tflag = 1\n\tif not flag :\n\t\tbreak\n\tc +=1\n\tst = sk+1\nif flag :\n\tprint(c)\nelse:\n\tprint(-1)\n", "n, d = list(map(int, input().split()))\ns = input()\ni = 0\ni2 = 0\nres = 0\nwhile i != n - 1:\n    i2 = i + d\n    while i2 != i:\n        if i2 < len(s) and s[i2] == \"1\":\n            break\n        i2 -= 1\n    else:\n        print(-1)\n        break\n    i = i2\n    res += 1\nelse:\n    print(res)\n", "n,d=map(int,input().split())\nch=input()\ni=0\nl=len(ch)\ncom=0\nwhile True:\n      if len(ch)-i <= d:\n            if len(ch)-i>1:\n                  com+=1\n            print(com)\n            break\n      else:\n            if '1' in ch[i+1:i+d+1]:\n                  ch3=ch[i+1:i+d+1]\n                  ch2=ch3[::-1]\n                  i=i+d+1-ch2.index('1')-1\n                  com+=1\n            else:\n                  print(-1)\n                  break", "n, d = map(int, input().split())\ns = input()\n\na = [(n + 1)] * n\n\na[0] = 0\nfor i in range(1, n):\n    if s[i] == '1':\n        for j in range(max(0, i - d), i):\n            a[i] = min(a[i], a[j] + 1)\n\nprint(a[n - 1] if a[n - 1] < n else -1)", "class axis:\n    def __init__(self, lilies):\n        self.line = lilies\n\n\nclass frog:\n    def __init__(self, d, my_axis):\n        self.axis = my_axis\n        self.d = d\n        self.point = 0\n\n    def jump(self):\n        for i in range(self.point + self.d, self.point, -1):\n            if i >= len(self.axis.line):\n                continue\n\n            if self.axis.line[i] == '1':\n                self.point = i\n                return True\n\n        return False\n\n\nn, d = [int(i) for i in input().split()]\nlilies = input().strip()\n\nmy_axis = axis(lilies)\nmy_frog = frog(d, my_axis)\n\njump_count = 0\n\nwhile my_frog.point < n - 1:\n    if my_frog.jump():\n        jump_count += 1\n    else:\n        jump_count = -1\n        break\n\nprint(jump_count)\n", "def jump(n,d,s):\n\tstring=\"\"\n\tfor x in range(d):\n\t\tstring+=\"0\"\n\tfor i in range(len(s)-d):\n\t\tif s[i:i+d]==string:\n\t\t\treturn -1\n\tcount=0\n\tdist=1\n\ta=0\n\tr=1\n\twhile dist<len(s):\n\t\tif d+a<len(s):\n\t\t\tif int(s[d+a])==1:\n\t\t\t\tdist+=d\n\t\t\t\tcount+=1\n\t\t\t\ta+=d\n\t\t\t\t#if d+a-r<len(s):\n\t\t\telse:\n\t\t\t\twhile d-r>0:\n\t\t\t\t\tif int(s[d+a-r])==1:\n\t\t\t\t\t\tdist+=d-r\n\t\t\t\t\t\tcount+=1\n\t\t\t\t\t\ta+=d-r\n\t\t\t\t\t\tr=1\n\t\t\t\t\t\tbreak\n\t\t\t\t\telse:\n\t\t\t\t\t\tr+=1\n\t\t\t\t#else:\n\t\t\t\t#\twhile d+a-r>=len(s):\n\t\t\t\t#\t\tr+=1\n\t\telse:\n\t\t\ta-=1\t\n\treturn count\n\ndef __starting_point():\n\t[n,d]=[int(i) for i in input().split(\" \")]\n\ts=input()\n\tprint(jump(n,d,s))\n\n__starting_point()", "n,d=map(int,input().split())\ns=str(input())\np=0\nans=0\nwhile p<n:\n    f=0\n    if p==n-1:\n        break\n    for i in range(p+1,min(p+d+1,n)):\n        if s[i]=='1':\n            f=1\n            pp=i\n    if f==0:\n        print(-1)\n        #print(p,pp)\n        return\n    else:\n        p=pp\n        ans+=1\nprint(ans)", "n=[int(i) for i in  input().split()]\na=str(input())\nfor i in range(n[1]):\n    a+='0'\nd=n[1]\nskak=0\npr=d\nans=0\nwhile skak<n[0]-1 and pr>0:\n    pr=d\n    \n    while a[pr+skak]!='1' and pr!=0:\n        \n        pr-=1\n    skak=pr+skak\n    ans+=1\nif pr==0:\n    print(-1)\nelse:\n    print(ans)\n", "class axis:\n    def __init__(self, lilies):\n        self.line = lilies\n\n\nclass frog:\n    def __init__(self, d, my_axis):\n        self.axis = my_axis\n        self.d = d\n        self.point = 0\n\n    def jump(self):\n        for i in range(self.point + self.d, self.point, -1):\n            if i >= len(self.axis.line):\n                continue\n\n            if self.axis.line[i] == '1':\n                self.point = i\n                return True\n\n        return False\n\n\nn, d = [int(i) for i in input().split()]\nlilies = input().strip()\n\nmy_axis = axis(lilies)\nmy_frog = frog(d, my_axis)\n\njump_count = 0\n\nwhile my_frog.point < n - 1:\n    if my_frog.jump():\n        jump_count += 1\n    else:\n        jump_count = -1\n        break\n\nprint(jump_count)\n", "n,d=list(map(int,input().split()))\ns=input()\nx1=0\nk=0\nm= False\nwhile x1!=n-1:\n    if x1 == -1 or s[n-1]!='1' or x1 == s.rfind('1',x1,x1+d+1):\n        m=True\n        break\n    o = s.rfind('1',x1,x1+d+1)\n    x1 = o\n    k+=1\nif m:\n    print('-1')\nelse:\n    print(k)\n", "n, d = list(map(int, input().split()))\na = input()\nm = list(map(len, a.split(\"1\")))\npos = 1\nout = 0\n\nif max(m) >= d:\n    print(-1)\n    return\n\nelse:\n    while pos != n:\n        for i in range(d, 0, -1):\n            if pos + i > n:\n                pass\n\n            else:\n                if a[pos + i - 1] == \"1\":\n                    pos += i\n                    out += 1\n                    break\n\nprint(out)", "import sys\nn,d=list(map(int,sys.stdin.readline().split()))\ns=list(input())\na=[]\nfor i in range(1,len(s)):\n    if(s[i]=='1'):\n        a.append(i)\n\nmina=None\nc=d\nx=0\nflag=0\nif(len(a)==1 and a[0]>d):\n    print(-1)\n    return\nif(len(a)==1 and a[0]<=d):\n    print(1)\n    return\nfor i in range(0,len(a)-1):\n    if(a[i]>c):\n        flag=1\n        break\n    if(a[i]<=c and a[i+1]>c):\n        x+=1\n        c=a[i]+d\n    \nif(abs(a[i]-a[len(a)-1])<=d and flag==0):\n    x+=1\nelse:\n    x=0\nif(x==0):\n    print(-1)\n    return\nprint(x)\n\n", "n,d = map(int,input().split())\n\nnum = 0 #distance from the last step\nv = 0 #value of steps\na = 1 #flag for excistence\nk = 0 #coord. of the last step variant destination\n\nst = input()\n\nfor i in range(1,n):\n    num+=1\n    if int(st[i]) == 1:\n        k = num\n    if num%d == 0:\n        if k!=0:\n            num = num - k\n            v+=1\n        else:\n            a = 0           \n        k = 0\n        \nif a==1:\n    if num%d == 0:\n        print(v)\n    else:\n        print(v+1)\nelse:\n    print(-1)", "n,d=map(int,input().split())\na=[1000]*(n+1)\na[0]=0\ns=[int(x) for x in input()]\nfor x in range(1,n):\n    if s[x]:\n        for c in range(1,d+1):\n            if x-c >= 0  and s[x-c]:\n                a[x]=min(a[x-c]+1,a[x])\nprint(-1 if  a[n-1] > 200 else a[n-1])", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\ndef main():\n\tn, d = list(map(int, input().split()))\n\ts = input()\n\ti = 0\n\tcnt = 0\n\twhile 1:\n\t\tmaxi = i + d\n\t\tif maxi >= n - 1:\n\t\t\tcnt += 1\n\t\t\tbreak\n\t\tfound = False\n\t\tfor j in range(maxi, i, -1):\n\t\t\tif s[j] != '0':\n\t\t\t\ti = j\n\t\t\t\tcnt += 1\n\t\t\t\tfound = True\n\t\t\t\tbreak\n\t\tif not found:\n\t\t\tprint(-1)\n\t\t\treturn\n\tprint(cnt)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Dec 23 03:02:56 2017\n\n@author: sherlock\n\"\"\"\n\nimport array\n\n\nnumbers=list(map(int,input().split()))\n\n\nn=numbers[0]\nd=numbers[1]\n\ndp=[]\n\ndp.append(0)\n\nfor i in range(1,n):\n    dp.append(999999)\n    \ns=str(input())\n\nfor i in range(1,n):\n    if(s[i]=='1'):\n        for j in range(1,d+1):\n            if(i-j>=0):\n                dp[i]=min(dp[i-j]+1,dp[i])\n\n#for i in range(0,n):\n #   print(dp[i])\n\nif(dp[n-1]==999999):\n    print(\"-1\")\nelse: \n    print(dp[n-1])\n\n\n", "n, d = list(map(int, input().split()))\ns = input()\na = 0\nx = 0\nwhile a <= n:\n    k = min(d, n-a-1)\n    place = s[a+1:a+k+1]\n    if a == n-1:\n        print(x)\n        return\n    elif '1' in place:\n        a += k-place[::-1].index('1')\n        x+=1\n    else:\n        print(-1)\n        return\n", "m,n = [int(x) for x in input().split(' ')]\nraw = list(input())\np = 0\ncnt = 1\nprt = 0\nwhile p <m-n-1:\n    for j in range(n):\n        key = 0\n        if raw[p+n-j]==\"1\":\n            p = p+n-j\n            cnt+=1\n            key = 1\n            break\n        else:\n            pass\n    if key == 0:\n        prt = 1\n        break\nif prt == 1:\n    print(-1)\nelse:\n    print(cnt)", "# ===================================\n# (c) MidAndFeed aka ASilentVoice\n# ===================================\n# import math, fractions, collections\n# ===================================\nn, d = [int(x) for x in input().split()]\ns = str(input())\ni = 0\nans = 0\ntemp = 0\nwhile(1):\n\ttemp = min(d, n-i-1)\n\t\n\twhile(temp > 0):\n\t\tif s[i+temp] == \"1\":\n\t\t\tflag = 1\n\t\t\tbreak\n\t\telse:\n\t\t\ttemp -= 1\n\n\t\tif temp == 0:\n\t\t\tflag = 0\n\n\tans += 1\n\ti += temp\n\n\t# print(i, ans)\n\n\tif i == n-1 or not(flag):\n\t\tbreak\n\nif i+1 == n:\n\tprint(ans)\nelse:\n\tprint(-1)\n", "def solve():\n\tn, d = list(map(int, input().split()))\n\tn -= 1\n\ts = input()\n\n\ti = 0\n\tres = 0\n\twhile (i < len(s)):\n\t\tr = min(len(s)-1,i+d)\n\t\tfor j in range(r,i,-1):\n\t\t\tif (s[j] == '1'):\n\t\t\t\ti = j\n\t\t\t\tres += 1\n\t\t\t\tbreak\n\t\telse:\n\t\t\tprint(-1)\n\t\t\treturn\n\t\tif (i == n):\n\t\t\tprint(res)\n\t\t\treturn\n\nsolve()\n\n"]