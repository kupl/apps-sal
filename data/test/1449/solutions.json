["\nt=int(input())\nfor nbt in range(t):\n    n,k=[int(i) for i in input().split()]\n    a=[int(i) for i in input().split()]\n    nbc=len(set(a))-1\n    if k==1:\n        if nbc:\n            print(-1)\n        else:\n            print(1)\n    else:\n        print(1+max(0,(nbc-1)//(k-1)))", "y=lambda:[*map(int,input().split())]\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    a=y()\n    b=len(set(a))\n    if k<2:print(1-2*(b>1))\n    else:print(max(1,-((1-b)//(k-1))))", "from math import ceil\n\n\ndef main(n, k, a):\n    a = set(a)\n    n = len(a)\n    if n > k == 1:\n        return -1\n    if n <= k:\n        return 1\n    return 1 + ceil((n-k)/(k-1))\n\n\nfor i in range(int(input())):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    print(main(n, k, a))\n", "import sys,math\nfrom collections import Counter,deque,defaultdict\nfrom bisect import bisect_left,bisect_right \nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\nfor _ in range(inp()):\n    n,k = inpl()\n    a = inpl()\n    ln = len(set(a))\n    if k == 1 and ln > 1:\n        print(-1)\n        continue\n    if ln == 1:\n        print(1)\n        continue\n    ln -= 1\n    k -= 1\n    print((ln+k-1)//k)", "\n\"\"\"\n\n\"\"\"\n\nfrom sys import stdin\n\ndef updiv(a,b):\n    if a % b == 0:\n        return a // b\n    else:\n        return a//b+1\n\ntt = int(stdin.readline())\n\nfor loop in range(tt):\n\n    n,k = list(map(int,stdin.readline().split()))\n    a = list(map(int,stdin.readline().split()))\n\n    num = 0\n    \n    for i in range(n):\n        if i == 0:\n            num += 1\n        elif a[i] != a[i-1]:\n            num += 1\n\n    if k == 1:\n        if num == 1:\n            print(1)\n        else:\n            print(-1)\n        continue\n\n    elif num <= k:\n        print(1)\n        continue\n\n    num -= k\n    print(updiv(num,k-1) + 1)\n            \n    \n", "t=int(input())\nfor you in range(t):\n    l=input().split()\n    n=int(l[0])\n    k=int(l[1])\n    l=input().split()\n    li=[int(i) for i in l]\n    if(k==1):\n        poss=1\n        for i in li:\n            if(i!=li[0]):\n                poss=0\n                break\n        if(poss):\n            print(1)\n        else:\n            print(-1)\n        continue\n    count=0\n    for i in range(n-1):\n        if(li[i]!=li[i+1]):\n            count+=1\n    count+=1\n    for i in range(1,400):\n        if((i-1)*(k-1)+k>=count):\n            ans=i\n            break\n    print(ans)\n", "t = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans=1\n    for i in range(n-1):\n        if a[i+1]>a[i]:\n            ans+=1\n    if ans<=k:\n        print(1)\n    elif k==1:\n        print(-1)\n    else:\n        print((ans-k-1)//(k-1)+2)", "from collections import defaultdict \nimport sys\nimport math \t\n\ndef get_array(): return list(map(int , sys.stdin.readline().strip().split()))\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef input(): return sys.stdin.readline().strip()\n\nfor _ in range(int(input())):\n\t(n,k) = get_ints()\n\ta = get_array()\n\tif len(set(a)) <= k:\n\t\tprint(1)\n\t\tcontinue\n\tif k==1:\n\t\tprint(-1)\n\t\tcontinue\n\t\n\tl = len(set(a))\n\tans = 1 \n\tl-=k \n\twhile(l>0):\n\t\tl-=(k-1)\n\t\tans+=1\n\tprint(ans)", "import sys\nreadline = sys.stdin.readline\n\nT = int(readline())\nAns = [None]*T\n\nfor qu in range(T):\n    N, K = list(map(int, readline().split()))\n    A = list(map(int, readline().split()))\n    if K == 1:\n        if len(set(A)) == 1:\n            Ans[qu] = 1\n        else:\n            Ans[qu] = -1\n    else:\n        s = len(set(A))        \n        if K >= s:\n            Ans[qu] = 1\n        else:\n            Ans[qu] = 1-((K-s)//(K-1))\n\nprint('\\n'.join(map(str, Ans)))\n", "from bisect import *\nfrom collections import *\nfrom math import *\nfrom heapq import *\nfrom typing import List\nfrom itertools import *\nfrom operator import *\nfrom functools import *\nimport sys\n'''\n@lru_cache(None)\ndef fact(x):\n    if x<2:\n        return 1\n    return fact(x-1)*x\n\n@lru_cache(None)\ndef per(i,j):\n    return fact(i)//fact(i-j)\n\n@lru_cache(None)\ndef com(i,j):\n    return per(i,j)//fact(j)\n\ndef linc(f,t,l,r):\n    while l<r:\n        mid=(l+r)//2\n        if t>f(mid):\n            l=mid+1\n        else:\n            r=mid\n    return l\n\ndef rinc(f,t,l,r):\n    while l<r:\n        mid=(l+r+1)//2\n        if t<f(mid):\n            r=mid-1\n        else:\n            l=mid\n    return l\n\ndef ldec(f,t,l,r):\n    while l<r:\n        mid=(l+r)//2\n        if t<f(mid):\n            l=mid+1\n        else:\n            r=mid\n    return l\n\ndef rdec(f,t,l,r):\n    while l<r:\n        mid=(l+r+1)//2\n        if t>f(mid):\n            r=mid-1\n        else:\n            l=mid\n    return l\n\ndef isprime(n):\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return False\n    return True\n\ndef power2(n):\n    while not n&1:\n        n>>=1\n    return n==1\n'''\n'''\nimport time\ns=time.time()\ne=time.time()\nprint(e-s)\n'''\n\nt=int(input())\nfor i in range(t):\n    n,k=list(map(int,input().split()))\n    #n=int(input())\n    a=set(map(int,input().split()))\n    n=len(a)\n    if n==1:\n        ans=1\n    else:\n        if k==1:\n            ans=-1\n        else:\n            ans=ceil((n-1)/(k-1))\n    print(ans)\n'''\nn,m=map(int,input().split())\ngraph=defaultdict(dict)\nfor i in range(m):\n    u,v,w=map(int,input().split())\n    graph[u][v]=w\n    graph[v][u]=w\ndef dij(u,v):\n    graph[u][v]*=2\n    graph[v][u]*=2\n    d={}\n    d[1]=0\n    for i in range(2,n+1):\n        d[i]=inf\n    remain=set(range(2,n+1))\n    for i in graph[1]:\n        d[i]=graph[1][i]\n    while remain:\n        k=min(remain,key=lambda x: d[x])\n        remain.remove(k)\n        for i in remain:\n            if i in graph[k]:\n                d[i]=min(d[i],d[k]+graph[k][i])\n    graph[u][v]//=2\n    graph[v][u]//=2\n    return d[n]\nD={}\nD[1]=0\nfor i in range(2,n+1):\n    D[i]=inf\nremain=set(range(2,n+1))\npre=[-1]*(n+1)\nfor i in graph[1]:\n    D[i]=graph[1][i]\n    pre[i]=1\nwhile remain:\n    k=min(remain,key=lambda x: D[x])\n    remain.remove(k)\n    for i in remain:\n        if i in graph[k]:\n            if D[i]>D[k]+graph[k][i]:\n                D[i]=D[k]+graph[k][i]\n                pre[i]=k\ncur=ans=D[n]\nnode=n\nwhile pre[node]!=-1:\n    ans=max(ans,dij(node,pre[node]))\n    node=pre[node]\nprint(ans-cur)\n            \n'''\n    \n\n", "def is_sorted(li):\n    temp=list(li)\n    for i in range(0,len(li)):\n        if(li[i]!=temp[i]):\n            return False\n    return True\n\n\ndef process():\n    n,k=list(map(int,input().split()))\n    li=list(map(int,input().split()))\n    if(is_sorted(li)==False):\n        print(\"-1\")\n        return\n    elif(k==1 and len(set(li))==1):\n        print(\"1\")\n        return\n    elif(k>1):\n        ans=0\n        s=len(set(li))\n        ans=1\n        s-=k\n        while(s>0):\n            ans+=1\n            s-=k-1\n        print(ans)\n    else:\n        print(\"-1\")\n        return\n\ntests=int(input())\nfor i in range(tests):\n    process()", "gans = []\nfor _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    u = []\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            continue\n        u.append(a[i - 1])\n    u.append(a[-1])\n    if len(u) > 1 and k == 1:\n        ans = -1\n    elif k == 1:\n        ans = 1\n    elif len(u) == 1:\n        ans = 1\n    else:\n        ans = (max(len(u) - 1 - 1, 0)) // (k - 1) + 1\n    gans.append(ans)\nprint('\\n'.join(map(str, gans)))\n", "#   ==========     //\\\\       //||     ||====//||\n#       ||        //  \\\\        ||     ||   // ||\n#       ||       //====\\\\       ||     ||  //  ||\n#       ||      //      \\\\      ||     || //   ||\n#   ========== //        \\\\  ========  ||//====|| \n#  code\n\ndef solve():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    if n == 1:\n        print(1)\n        return\n    \n    diff = 1\n    ans = 1\n    for i, v in enumerate(a):\n        if i > 0:\n            if v == a[i - 1]:\n                continue\n            else:\n                diff += 1\n                if diff > k:\n                    ans += 1\n                    diff = 2\n    \n    if diff > k:\n        print(-1)\n    else:\n        print(ans)\n    return\n\ndef main():\n    t = 1\n    t = int(input())\n    for _ in range(t):\n        solve()\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\n# sys.stdin = open(\"input.txt\")\n\n\ndef main():\n    T = int(input())\n    for ti in range(T):\n        n, k = list(map(int, input().split()))\n        A = set(int(v) for v in input().split())\n        if k == 1:\n            if len(A) == 1:\n                print(1)\n            else:\n                print(-1)\n            continue\n        if len(A) == 1:\n            print(1)\n        else:\n            print((len(A) - 3 + k) // (k - 1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]