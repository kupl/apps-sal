["n = input().rstrip()\nm = input().rstrip()\ncnt1 = [0] * 26\ncnt2 = [0] * 26\nfor i in n:\n    cnt1[ord(i) - ord(\"a\")] += 1\nfor i in m:\n    cnt2[ord(i) - ord(\"a\")] += 1\nres = 0\nfor i in range(26):\n    a1 = cnt1[i]\n    a2 = cnt2[i]\n    if a1 == 0 and a2 != 0:\n        print(-1)\n        return\n    res += min(a1, a2)\nprint(res)", "s=input().strip()\nm=input().strip()\nc1=[0]*26\nc2=[0]*26\nfor i in s:\n    c1[ord(i)-ord('a')]+=1\nfor i in m:\n    c2[ord(i)-ord('a')]+=1\nans=0\nfor i in range(26):\n    if c1[i]==0 and c2[i]!=0:\n        print(-1)\n        return\n    ans+=min(c1[i],c2[i])\nprint(ans)", "has = input()\nneed = input()\nA, B = [0] * 26, [0] * 26\nfor i in has:\n    A[ord(i)-97] += 1\nfor i in need:\n    B[ord(i)-97] += 1\nresult = 0\nfor i in range(26):\n    if not A[i] and B[i]:\n        result = -1\n        break\n    else:\n        result += min(A[i], B[i])\nprint(result)\n", "colors = list(input())\ncolors.sort()\nwants = list(input())\nwants.sort()\n\nres = 0\n\nhecan = 1\nfor c in wants:\n    if c not in colors:\n        hecan = 0\n\nca = sorted(set(colors))\nwa = sorted(set(colors))\n\nfor c in ca:\n    if colors.count(c) >= wants.count(c):\n        res += wants.count(c)\n    else:\n        res += colors.count(c)\n    #print(colors.count(c), wants.count(c))\n\nif hecan == 0:\n    print(-1)\nelse:\n    print(res)\n", "n = input()\nm = input()\nc = set(m)\nans = 0\nfor colour in c:\n    nc = n.count(colour)\n    mc = m.count(colour)\n    if nc == 0:\n        ans = -1\n        break\n    else:\n        ans += min(nc, mc)\nprint(ans)", "import sys\n#sys.stdin = open('input.txt', 'r')\nn = input()\nm = input()\nN = dict()\nM = dict()\nfor k in set(n):\n\tN.update({k : n.count(k)})\nfor k in set(m):\n\tM.update({k : m.count(k)})\nS = 0\nfor k in M:\n\tif k in N:\n\t\tif N[k] >= M[k]:\n\t\t\tS += M[k]\n\t\telse:\n\t\t\tS += N[k]\n\telse:\n\t\tprint(-1)\n\t\treturn\nprint(S)\n\n\t\n", "a=input()\nb=input()\nans=0\nfor i in range(ord('a'),ord('z')+1):\n    num1=sum(ord(j)==i for j in a)\n    num2=sum(ord(j)==i for j in b)\n    ans+=min(num1,num2)\n    if num2>0 and num1==0:\n        print(-1)\n        break;\nelse:\n    print(ans)\n", "\nn = input()\nm = input()\n# n = 'aaabbac'\n# m = 'aabbccac'\n\nN = {}\nfor c in n:\n    if c in N:\n        N[c] += 1\n    else:\n        N[c] = 1\n\nM = {}\nfor c in m:\n    if c in M:\n        M[c] += 1\n    else:\n        M[c] = 1\n\n#print('N: ', N)\n#print('M: ', M)\n\nS = 0\n\nfor color, count in list(M.items()):\n    if color not in N:\n        S = -1\n        break\n    else:\n        S += min(count, N[color])\n\nprint(S)\n", "sheet = input()\ngarland = input()\nsheetnum = dict()\ngarlandnum = dict()\n\nfor color in sheet:\n\tif not color in sheetnum:\n\t\tsheetnum[color] = 1\n\telse:\n\t\tsheetnum[color] = sheetnum[color] + 1\n\nfor color in garland:\n\tif not color in garlandnum:\n\t\tgarlandnum[color] = 1\n\telse:\n\t\tgarlandnum[color] = garlandnum[color] + 1\n\nans = 0\nfor color in list(garlandnum.keys()):\n\tif not color in sheetnum:\n\t\tans = -1\n\t\tbreak\n\tif garlandnum[color] >= sheetnum[color]:\n\t\tans = ans + sheetnum[color]\n\telse:\n\t\tans = ans + garlandnum[color]\n\nprint(ans)\n\t\n\t\n\n", "a=input()\nb=input()\ndict1={}\ndict2={}\nfor i in range (0,len(a)):\n    if a[i] in dict1:\n        dict1[a[i]]+=1\n    else:\n        dict1[a[i]]=1\n\nact=set()\nfor j in range (0,len(b)):\n    act.add(b[j])\n    if b[j] in dict2:\n        dict2[b[j]]+=1\n    else:\n        dict2[b[j]]=1\n        if (b[j] not in dict1):\n            dict1[b[j]]=0\n\n\nz=list(act)\nctr=0\nchar=0\nfor i in range (0,len(z)):\n    ctr+=min(dict1[z[i]],dict2[z[i]])\n    if (min(dict1[z[i]],dict2[z[i]])!=0):\n        char+=1\n\nif (ctr>0 and char==len(z)):\n    print (ctr)\nelse:\n    print(-1)\n    \n        \n        \n    \n    \n", "a = input()\nb = input()\ns = 0\nok = True\nfor i in range(27):\n    c = chr(ord('a') + i)\n    aa = a.count(c)\n    bb = b.count(c)\n    m = min(a.count(c), b.count(c))\n    if aa == 0 and bb != 0:\n        ok = False\n    s = s + m\nif not ok:\n    print(-1)\nelse:\n    print(s)\n", "n, m = input(), input()\nms = set(m)\nans = 0\nfor k in ms:\n    if not n.__contains__(k):\n        ans = -1\n        break\n    if n.count(k) >= m.count(k):\n        ans += m.count(k)\n    else:\n        ans += n.count(k)\nprint(ans)", "import sys\nhave = input()\nneed = input()\npl = 0\nalph = \"abcdefghijklmnopqrstuvwxyz\"\nfor l in alph:\n    if l in need:\n        if l not in have:\n            print(-1)\n            return\n        pl += min(have.count(l), need.count(l))\nprint(pl)", "def game():\n    n = input()\n    m = input()\n    nlist = []\n    mlist = []\n    for i in range(len(n)):\n        nlist.append(n[i])\n    for i in range(len(m)):\n        mlist.append(m[i])\n    counter = 0\n    for i in range(len(m)):\n        if not m[i] in n:\n            print(-1)\n            return 1\n    for i in range(len(m)):\n        if m[i] in nlist:\n            counter += 1\n            mlist[i:i + 1] = []\n            nlist[nlist.index(m[i])] = []\n    print(counter)\ngame()\n", "import sys\ncolors = input()\nfinish_colors = input()\nresult = 0\ndiffernt_finish_colors = set(finish_colors)\ntested_colors = []\nfor color in differnt_finish_colors:\n    if not (color in tested_colors):\n        if not colors.count(color):\n            print('-1')\n            return\n        else:\n            result += min([colors.count(color), finish_colors.count(color)])\nprint(result)", "colour = input()\nnew_colour = input()\nsum = 0\nk = 0\nlist = []\nfor i in new_colour:\n    if i not in list:\n        list += i\nfor i in list:\n    a = colour.count(i)  \n    b = new_colour.count(i) \n    if a > b:\n        sum += b\n    else:\n        sum += a\n    if i not in colour:\n        k += 1\nif k > 0:\n    print(-1)\nelse:\n    print(sum)\n", "our_list_1 = list(map(str, input()))\nour_list_3 = (list(map(str, input())))\nour_list_2 = list(set(our_list_3))\noutput = 0\nfor i in range(len(our_list_2)):\n    if our_list_2[i] not in our_list_1:\n        print(-1)\n        break  \n    output += min(our_list_3.count(our_list_2[i]), our_list_1.count(our_list_2[i]))\n    if i == len(our_list_2) - 1:\n        print(output)\n", "def main():\n    import sys\n    material = input()\n    scheme = input()\n    flag = True\n    for i in range(len(scheme)):\n        if flag:\n            if not scheme[i] in material:\n                print(-1)\n                flag = False\n    if flag:\n        counter = 0\n        SIZE = len(scheme) - 1\n        saver = []\n        result = 0\n        while counter <= SIZE:\n            saver += [scheme[counter]]\n            if (scheme.count(scheme[counter]) <=\n                material.count(scheme[counter])):\n                result += scheme.count(scheme[counter])\n            else:\n                result += material.count(scheme[counter])\n            while scheme[counter] in saver:\n                if counter < SIZE:\n                    counter += 1\n                else:\n                    print(result)\n                    return\n        print(result)\n\nmain()", "from collections import defaultdict\ns, a, b = 0, defaultdict(int), defaultdict(int)\nfor i in input(): a[i] += 1\nfor i in input(): b[i] += 1\nfor i in b:\n    if i in a: s += min(a[i], b[i])\n    else:\n        s = -1\n        break\nprint(s)", "def count(s):\n    c = [0]*26\n    for t in s:\n        c[ord(t)-ord('a')]+=1\n    return c\nc1 = count(input())\nc2 = count(input())\nvalid = True\nresult = 0\nfor i in range(26):\n    if c2[i]>0 and c1[i]==0:\n        valid = False\n    result += min(c1[i], c2[i])\nif not valid:\n    print(-1)\nelse:\n    print(result)\n", "a = input()\nb = input()\nx = [0] * 26\ny = [0] * 26\nfor c in a:\n  x[ord(c) - ord('a')] += 1\nfor c in b:\n  y[ord(c) - ord('a')] += 1\nresult = 0\nfor i in range(26):\n  if x[i] == 0 and y[i] > 0:\n    result = -1\n    break\n  result += min(x[i], y[i])\nprint(result)", "import sys\ns = input()\ns1 = input()\nans = 0\nx = [0] * 27\ny = [0] * 27\nfor i in range(len(s)):\n    x[ord(s[i]) - 97]+=1\nfor i in range(len(s1)):\n    y[ord(s1[i]) - 97] += 1\nfor i in range(27):\n    if x[i] == 0 and y[i] != 0:\n        print(-1)\n        return\n    ans += min(x[i], y[i])\nprint(ans)", "n = input()\nm = input()\ns = set(m)\narea = 0\nfor i in s:\n    a1 = n.count(i)\n    a2 = m.count(i)\n    if a1 == 0:\n        area = -1\n        break\n    elif a1 >= a2:\n        area += a2\n    else:\n        area += a1\nprint(area)", "\nimport sys\nimport math\n  \nn = sys.stdin.readline()\nm = sys.stdin.readline()\n\nkn = [0] * 26\nkm = [0] * 26\nfor i in n:\n    if(i != \"\\n\"):\n        kn[ord(i) - ord('a')] += 1\n \nfor i in m:\n    if(i != \"\\n\"):\n        km[ord(i) - ord('a')] += 1      \n        \nres = 0\nfor i in range(26):\n    v = min(kn[i], km[i])\n    if(kn[i] == 0 and km[i] > 0):\n        print(-1)\n        return\n    \n    res += v    \n  \nprint(res)  \n", "'''\nCreated on Feb 13, 2015\n\n@author: mohamed265\n'''\na1 = input()\na2 = input()\nslon = 0\nfor i in range(ord('a') , ord('z') + 1):\n    x = chr(i)\n    count1 = a1.count(x)\n    count2 = a2.count(x)\n    if count1 == 0 and count2 != 0:\n        print(-1)\n        return\n    else:\n        if count1 >= count2:\n            slon += count2\n        else:\n            slon += count1\nprint(slon)\n"]