["n = int(input())\narr = []\nfor i in range(n):\n    arr.append(list(input()))\nk = 1\nfor i in range(n):\n    for j in range(n):\n        if arr[i][j] == '#':\n            if i+2<=n-1 and j-1>=0 and j+1<=n-1:\n                if arr[i+1][j-1] == '#' and arr[i+1][j] == '#' and arr[i+1][j+1] == '#' and arr[i+2][j] == '#':\n                    arr[i+1][j-1] = '.'\n                    arr[i+1][j] = '.'\n                    arr[i+1][j+1] = '.'\n                    arr[i+2][j] = '.'\n                    arr[i][j] = '.'\n                else:\n                    k = 0\n                    break\n            else:\n                k = 0\n                break\nif k == 1:\n    print('YES')\nelse:\n    print('NO')", "def deleteCross(m, i, j):\n    if i<=0 or j<=0 or i>=len(m)-1 or j>=len(m)-1: return (m,False)\n    if m[i][j] == r'#' and m[i+1][j] == r'#' and m[i-1][j] == r'#' and m[i][j+1] == r'#' and m[i][j-1] == r'#':\n        m[i][j] = m[i+1][j] = m[i-1][j] = m[i][j+1] = m[i][j-1] = '.'\n        return (m, True)\n    return (m, False)\n\ndef solve(m):\n    for i in range(len(m)):\n        for j in range(len(m)):\n            if m[i][j] == r'#':\n                r1 = deleteCross(m, i+1, j)\n                if not r1[1]: return False\n                m = r1[0]\n    return True\n\nn = int(input())\nm = []\nfor i in range(n):\n    m.append(list(input()))\nprint('YES' if solve(m) else 'NO')\n", "n = int(input())\nm = [list(input()) for i in range(n)]\n\ndef test(m, n):\n  for r in range(n):\n    for c in range(n):\n      if m[r][c] == \"#\":\n        if c == 0 or c == n - 1 or r >= n - 2:\n          return False\n        elif (m[r+1][c-1] == \"#\") and (m[r+1][c] == \"#\") and (m[r+1][c+1] == \"#\") and (m[r+2][c] == \"#\") :\n             m[r+1][c-1] = \".\"\n             m[r+1][c]   = \".\"\n             m[r+1][c+1] = \".\"\n             m[r+2][c]   = \".\"\n        else:\n          return False\n  return True\n  \nprint(\"YES\" if test(m, n) else \"NO\")", "n=int(input())\na=[[] for i in range(n)]\nfor i in range(n):\n    s=input().strip()\n    for j in s:\n        a[i]+=[j]\nkr=0\nfor i in range(n):\n    for j in range(n):\n        #print(i,j)\n        if a[i][j]=='#':\n            kr+=1\n        if 0<i<n-1 and 0<j<n-1 and a[i][j]=='#':\n            if a[i][j-1]==a[i][j+1]==a[i-1][j]==a[i+1][j]=='#':\n                kr-=3\n                a[i][j-1],a[i][j+1],a[i-1][j],a[i+1][j],a[i][j]='.','.','.','.','.'\nif kr:\n    print('NO')\nelse:\n    print('YES')", "import sys\n\nn = int(sys.stdin.readline())\nlines = []\nfor i in range(n):\n    lines.append(list(sys.stdin.readline().strip()))\n    \ndef check(lines, x, y, n):\n    if x < 0 or x >= n or y < 0 or y >= n:\n        return False\n    if lines[x][y] != '#':\n        return False\n    lines[x][y] = '.'\n    return True\n    \ndef tryPaint(lines, i, j, n):\n    return check(lines, i, j, n) and \\\n        check(lines, i-1, j+1, n) and \\\n        check(lines, i, j+1, n) and \\\n        check(lines, i+1, j+1, n) and \\\n        check(lines, i, j+2, n)\n    \nfailed = False\n    \nfor j in range(n):\n    for i in range(n):\n        if lines[i][j] == '#':\n            if not tryPaint(lines, i, j, n):\n                failed = True\n                break\n        if failed:\n            break\n\nif not failed:\n    for i in range(n):\n        if \"#\" in set(lines[i]):\n            failed = True\n            break\n\nif failed:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n            \n      \n", "n=int(input())\na=[]\nfor i in range(n):\n    a.append(list(input()))\nfor i in range(1,n-1):\n    for j in range(1,n-1):\n        if a[i][j]=='#' and a[i+1][j]=='#' and a[i-1][j]=='#' and a[i][j-1]=='#' and a[i][j+1]=='#':\n            a[i][j]='.'\n            a[i][j+1]='.'\n            a[i][j-1]='.'\n            a[i+1][j]='.'\n            a[i-1][j]='.'\nfor i in a:\n    for j in i:\n        if j=='#':\n            print('NO')\n            return\nprint('YES')\n\n", "n = int(input())\na = [list(input()) for i in range(n)]\nfor i in range(1,n-1):\n\tfor j in range(1,n-1):\n\t\tif a[i][j] == a[i-1][j] == a[i+1][j] == a[i][j-1] == a[i][j+1] == '#':\n\t\t\ta[i][j] = a[i-1][j] = a[i+1][j] = a[i][j-1] = a[i][j+1] = '.'\nprint(\"NO\" if sum(a[i].count('#') for i in range(n)) else \"YES\")\n", "\ndef f():\n    n = int(input())\n    t = [list(input()) for i in range(n)]\n    for i in range(n - 2):\n        if t[i][0] == '#' or t[i][-1] == '#': return 'NO'\n        for j in range(1, n - 1):\n            if t[i][j] == '#':\n                if '#' == t[i + 1][j - 1] == t[i + 1][j] == t[i + 1][j + 1] == t[i + 2][j]:\n                    t[i + 1][j - 1] = t[i + 1][j] = t[i + 1][j + 1] = t[i + 2][j] = '.'\n                else: return 'NO'\n    if '#' in t[-2] or '#' in t[-1]: return 'NO'\n    return 'YES'\nprint(f())\n", "n = int(input())\ns = [list(input()) for _ in range(n)]\ndef TryCross(i, j):\n  if 0 <= i < n - 2 and 0 < j < n - 1:\n    c = [(i, j), (i + 1, j - 1), (i + 1, j), (i + 1, j + 1), (i + 2, j)]\n    if not all(s[x][y] == \"#\" for x, y in c):\n      return False\n    for x, y in c:\n      s[x][y] = \".\"\n    return True\n  return False\nfor i in range(n):\n  for j in range(n):\n    if s[i][j] == \"#\" and not TryCross(i, j):\n      print(\"NO\")\n      return\nprint(\"YES\")", "n = int(input())\nb = [list(input()) for _ in range(n)]\n\nfor i in range(1, n - 1):\n    for j in range(1, n - 1):\n        if b[i][j] == b[i-1][j] == b[i+1][j] == b[i][j-1] == b[i][j+1] == '#':\n            b[i][j] = b[i-1][j] = b[i+1][j] = b[i][j-1] = b[i][j+1] = '.'\nprint('NO' if any(True for r in b if '#' in r) else 'YES')", "n = int(input())\na = [[0] * n for i in range(n)]\nans = 'YES'\nfor i in range(n):\n    s = input()\n    for j in range(n):\n        if s[j] == '#':\n            a[i][j] = 1\n#print(a)\nfor i in range(n - 2):\n    for j in range(1, n - 1):\n        if a[i][j] == 1:\n            if a[i + 1][j] == 1 and a[i + 2][j] == 1 and a[i + 1][j - 1] == 1 and a[i + 1][j + 1] == 1:\n                a[i][j] = 0\n                a[i + 1][j] = 0\n                a[i + 2][j] = 0\n                a[i + 1][j - 1] = 0\n                a[i + 1][j + 1] = 0\n            else:\n                ans = 'NO'\n#print(a)\nfor i in range(n):\n    if sum(a[i]) != 0:\n        ans = 'NO'\nprint(ans)\n", "n = int(input())\na = []\nfor i in range(n):\n\ta.append(list(1 if c == '#' else 0 for c in input()))\nfor i in range(n):\n\tfor j in range(n):\n\t\tif a[i][j]:\n\t\t\tif i + 2 >= n or j + 1 >= n or j == 0:\n\t\t\t\tprint('NO')\n\t\t\t\treturn\n\t\t\tif a[i + 1][j] + a[i + 2][j] + a[i + 1][j - 1] + a[i + 1][j + 1] != 4:\n\t\t\t\tprint('NO')\n\t\t\t\treturn\n\t\t\ta[i][j] = a[i + 1][j] = a[i + 2][j] = a[i + 1][j - 1] = a[i + 1][j + 1] = 0\nprint('YES')\n", "def main():\n    h = int(input())\n    l = [c == '#' for _ in range(h) for c in input()]\n    if not (l[0] or l[-1] or sum(l) % 5):\n        l[-1] = True\n        w, idx = len(l) // h, 0\n        lim = (h - 2) * w - 2\n        pattern = (0, w - 1, w, w + 1, 2 * w)\n        while True:\n            idx = l.index(True, idx + 1)\n            if idx > lim:\n                break\n            if all(l[_ + idx] for _ in pattern):\n                for _ in pattern:\n                    l[_ + idx] = False\n            else:\n                break\n        l[-1] = False\n    print(('YES', 'NO')[any(l)])\n\n\ndef __starting_point():\n    main()\n__starting_point()", "h = int(input())\nl = [c == '#' for _ in range(h) for c in input()]\nw = len(l) // h\npattern = (0, w - 1, w, w + 1, 2 * w)\nfor idx in range(1, (h - 2) * w - 1):\n    if all(l[_ + idx] for _ in pattern):\n        for _ in pattern:\n            l[_ + idx] = False\nprint(('YES', 'NO')[any(l)])\n", "h = int(input())\nl = [c == '#' for _ in range(h) for c in input()]\nw = len(l) // h\ncross = (0, w - 1, w, w + 1, 2 * w)\nfor i in range(1, (h - 2) * w - 1):\n    if all(l[_ + i] for _ in cross):\n        for _ in cross:\n            l[_ + i] = False\nprint(('YES', 'NO')[any(l)])\n", "c=set()\nfor i in range(int(input())):\n    row=input()\n    s=[(i,j) for j in range(len(row)) if row[j]=='#']\n    c|=set(s)\n    for i,j in s:\n        p=set([(i,j),(i-1,j),(i-1,j-1),(i-1,j+1),(i-2,j)])\n        if p<=c:c-=p\nprint('YNEOS'[len(c)!=0::2])", "n = int(input())\na = [list(input()) for i in range(n)]\nfor i in range(n):\n    for j in range(n):\n        if a[i][j] == '#':\n            if (i < n - 2 and j >= 1 and j <= n - 2 and a[i + 1][j - 1] == '#' and a[i + 1][j] == '#' and a[i + 1][j + 1] == '#' and a[i + 2][j] == '#'):\n                a[i][j] = '.'\n                a[i + 1][j - 1] = '.'\n                a[i + 1][j] = '.'\n                a[i + 1][j + 1] = '.'\n                a[i + 2][j] = '.'\n            else:\n                print('NO')\n                return\nprint('YES')", "n = int(input());\n\ns = [['.'] * n] * n;\n\nfor i in range(0, n):\n    s[i] = list(input());\n\nflag = 1;\n\nfor i in range(0, n - 2):\n    for j in range(1, n - 1):\n        if (s[i][j] == '#'):\n            flag &= s[i + 1][j] == '#';\n            flag &= s[i + 1][j - 1] == '#';\n            flag &= s[i + 1][j + 1] == '#';\n            flag &= s[i + 2][j] == '#';\n            flag &= s[i][j] == '#';\n            s[i + 1][j] = '.';\n            s[i + 1][j - 1] = '.';\n            s[i + 1][j + 1] = '.';\n            s[i + 2][j] = '.';\n            s[i][j] = '.';\n\nfor i in range(0, n):\n    for j in range(0, n):\n        flag &= s[i][j] == '.';\n\n\n\nif (flag == 1):\n    print(\"YES\");\nelse:\n    print(\"NO\");\n\n\n\n\n", "n = int(input())\nal = []\nsl = set()\nfor i in range(n):\n    al.append(list(input()))\nfor i in range(n-2):\n    for j in range(1, n-1):\n        if al[i][j]==al[i+1][j]==al[i+1][j-1]==al[i+1][j+1]==al[i+2][j]==\"#\":\n            al[i][j]=al[i+1][j]=al[i+1][j-1]=al[i+1][j+1]=al[i+2][j]=\".\"\nfor i in range(n):\n    sl=sl.union(set(al[i]))\nif len(sl)==1:\n    print(\"YES\")    \nelse:\n    print(\"NO\")", "#fdf_2791\nn = int(input())\na = [list(input()) for i in range(n)]\nfor i  in range(1,n-1):\n\tfor j  in range(1,n-1):\n\t\t\tif a[i][j]==a[i-1][j]==a[i][j+1]==a[i+1][j]==a[i][j-1]=='#':\n\t\t\t\ta[i][j]=a[i-1][j]=a[i][j+1]=a[i+1][j]=a[i][j-1]='.'\n\nprint((sum(a[i].count('#')for i in range(n)))==0 and \"YES\" or \"NO\")\n", "def fits(x, y):\n    nonlocal n\n    return x >= 0 and x < n and y >= 0 and y < n\n\ndef paint(x, y):\n    nonlocal a\n    a[x][y] = '.'\n    a[x - 1][y] = '.'\n    a[x + 1][y] = '.'\n    a[x][y - 1] = '.'\n    a[x][y + 1] = '.'\n\ndef check(x, y):\n    nonlocal a\n    dx = [0, 0, -1, 1]\n    dy = [1, -1, 0, 0]\n    cnt = 0\n    for i in range(4):\n        if (fits(x + dx[i], y + dy[i]) and a[x + dx[i]][y + dy[i]] == '#'):\n            cnt += 1\n    if (a[x][y] == '#'):\n        cnt += 1\n    if (cnt == 5):\n        paint(x, y)\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(input()))\nfor i in range(n):\n    for j in range(n):\n        check(i, j)\ncnt = 0\nfor el in a:\n    for el2 in el:\n        if el2 == '#':\n            cnt += 1\n\nif (cnt == 0):\n    print('YES')\nelse:\n    print('NO')\n", "import sys\n\nnum_lines = int(input())\n\nlines = []\nhash_count = 0\n\nfor i in range(num_lines):\n    tmp = input()\n    lines.append([i for i in tmp])\n    hash_count = hash_count + tmp.count(\"#\")\n\nfor i in range(len(lines)):\n    for j in range(len(lines[i])):\n        if lines[i][j] == \"#\":\n                try:\n                    if lines[i + 1][j - 1] == \"#\" and lines[i + 1][j] == \"#\" and lines[i + 1][j + 1] == \"#\" and \\\n                                    lines[i + 2][j] == \"#\":\n                        lines[i + 1][j - 1] = \".\"\n                        lines[i + 1][j] = \".\"\n                        lines[i + 1][j + 1] = \".\"\n                        lines[i + 2][j] = \".\"\n                        hash_count = hash_count - 5\n                except:\n                    print(\"NO\")\n                    return\n\n\nif hash_count == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n\n\n\n\n", "from typing import List\n\n\ndef cross_neighbors(i: int, j: int):\n    return [(i + 1, j - 1), (i + 1, j), (i + 1, j + 1), (i + 2, j)]\n\n\ndef solve(n: int, board: List[List[str]]) -> str:\n    for i in range(0, n - 2):\n        for j in range(1, n - 1):\n            if board[i][j] == '#':\n                board[i][j] = '.'\n                for x, y in cross_neighbors(i, j):\n                    if board[x][y] == '.':\n                        return 'NO'\n                    if board[x][y] == '#':\n                        board[x][y] = '.'\n    return ['YES', 'NO'][any(board[i][j] == '#' \\\n        for i in range(n) for j in range(n))]\n\nn = int(input())\nboard = [list(input()) for _ in range(n)]\n\nprint(solve(n, board))\n", "n=int(input())\n\nboard=[\"\"]*n\nc=0\nfor i in range(n):\n    board[i]=list(input())\n    \n    \nfor i in range(1,n-1):\n    for j in range(1,n-1):\n        if(board[i][j]=='#' and board[i-1][j]=='#' and board[i+1][j]=='#' and board[i][j-1]=='#' and board[i][j+1]=='#'):\n            board[i][j]='.'\n            board[i-1][j]='.'\n            board[i+1][j]='.'\n            board[i][j-1]='.'\n            board[i][j+1]='.'\n            \n            \nc= sum(board[i].count('#') for i in range(n))\n\nprint ('YES') if c==0 else print('NO')\n            "]