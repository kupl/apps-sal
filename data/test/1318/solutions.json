["n = int(input())\nx = []\nfor i in range(n):\n  c, p = map(int, input().split())\n  x += [(p, c, i)]\nk = int(input())\nr = list(map(int, input().split()))\ns = 0\nq = []\nfor (v, c, a) in reversed(sorted(x)):\n  p = -1\n  u = 100000\n  for  (j, z) in enumerate(r):\n    if c <= z < u:\n      p = j\n      u = z\n  if p > -1:\n    r[p] = 0\n    q += [(a, p)]\n    s += v\nprint(len(q), s)\nfor (i, j) in q:\n  print(i + 1, j + 1)", "n = int(input())\nbook = [None] * n\nfor i in range(n):\n    t = [int(i) for i in input().split(' ')]\n    book[i] = (i, t[0], t[1])\nk = int(input())\ncap = [(i, int(c)) for i,c in enumerate(input().split(' '))]\ncap.sort(key=lambda x:x[1])\nbook.sort(key=lambda x:(x[1]))\nm = 0\ns = 0\nr = []\ncand = []\nj = 0\nfor i in range(k):\n    while j < len(book) and cap[i][1] >= book[j][1]:\n        cand.append((book[j][0], book[j][2]))\n        j+=1\n    if len(cand) == 0:\n        continue\n    cand.sort(key=lambda x:x[1])\n    m+=1\n    s+=cand[-1][1]\n    r.append((cand.pop()[0]+1, cap[i][0]+1))\nprint(m, s)\nfor i in range(m):\n    print(r[i][0], r[i][1])\n", "n=int(input())\nP=[]\nfor i in range(n):\n    x,y=list(map(int,input().split()))\n    P.append((y,x,i))\n\nk=int(input())\n\nL=list(map(int,input().split()))\nfor i in range(k):\n    L[i]=(L[i],i)\nL.sort()\nP.sort(reverse=True)\nans=0\nTaken=[False]*k\nr=0\nAns=[-1]*n\nfor i in range(n):\n    for j in range(k):\n        if(L[j][0]>=P[i][1] and Taken[j]==False):\n            Taken[j]=True\n            ans+=P[i][0]\n            r+=1\n            Ans[P[i][2]]=L[j][1]\n            break\nprint(r,ans)\nfor i in range(n):\n    if(Ans[i]==-1):\n        continue\n    print(i+1,Ans[i]+1)\n", "import sys\n\n\nclass Visitor():\n    def __init__(self, pi, ci, i):\n        self.ci = ci\n        self.pi = pi\n        self.i = i\n        self.place = None\n\n    def __repr__(self):\n        return \"{} {} {}\".format(self.ci, self.pi, self.i)\n\n\nclass Place():\n    def __init__(self, i, max_):\n        self.i = i\n        self.max_ = int(max_)\n\n    def __repr__(self):\n        return \"{} {}\".format(self.max_, self.i)\n\ndef __starting_point():\n    lines = sys.stdin.readlines()\n    n = int(lines[0])\n    visitors = []\n    for i in range(1, n+1):\n        ci, pi = lines[i].split()\n        visitors.append(Visitor(int(pi), int(ci), i))\n\n    places = []\n    for i, place in enumerate(lines[n+2].split()):\n        places.append(Place(i+1, place))\n\n\n    visitors = sorted(visitors, key=lambda x: x.pi)[::-1]\n    places = sorted(places, key=lambda x: x.max_)\n\n    visited = [None for _ in places]\n    total = 0\n    for visitor in visitors:\n        for i, place in enumerate(places):\n            if visitor.ci <= place.max_ and visited[i] is None:\n                visited[i] = visitor\n                visitor.place = place\n                total += visitor.pi\n                break\n\n    new_visitors = list([x for x in sorted(visitors, key=lambda x: x.i) if x.place is not None])\n    print(\"{} {}\".format(len(new_visitors), total))\n    for visitor in new_visitors:\n        print(\"{} {}\".format(visitor.i, visitor.place.i))\n\n    # print(visitors)\n    # print(places)\n    # print(visited)\n\n__starting_point()", "n=int(input(''))\ngroup=[]\ntable=[]\nfor i in range(n):\n    size,money=list(map(int,input('').split()))\n    group+=[(money,size,i)]\nk=int(input(''))\nout=[]\nall_money=0\ntable=list(map(int,input('').split()))\nfor (money,size,j) in reversed(sorted(group)):\n    max=1000\n    uu=-1\n    for (i,table1) in enumerate(table):\n        if size<=table1<max+1:\n            max=table1\n            uu=i\n    if uu>-1:\n        table[uu]=0\n        out+=[(j,uu)]\n        all_money+=money       \nprint(len(out),all_money)\nfor (i,j) in out:   print(i+1,j+1)\n", "n = int(input())\nx = []\nfor i in range(n):\n  c, p = map(int, input().split())\n  x += [(p, c, i)]\nk = int(input())\nr = list(map(int, input().split()))\ns = 0\nq = []\nfor (v, c, a) in reversed(sorted(x)):\n  p = -1\n  u = 100000\n  for  (j, z) in enumerate(r):\n    if c <= z < u:\n      p = j\n      u = z\n  if p > -1:\n    r[p] = 0\n    q += [(a, p)]\n    s += v\nprint(len(q), s)\nfor (i, j) in q:\n  print(i + 1, j + 1)", "from bisect import bisect_left\n\nn = int(input())\na = [0] * n\nfor i in range(n):\n    c, p = map(int, input().split())\n    a[i] = (p, c, i + 1)\na.sort(reverse = True)\n\nm = int(input())\nb = [0] * m\nfor j, r in enumerate(map(int, input().split())): b[j] = (r, j + 1)\nb.sort()\n\ns, q = 0, []\nfor p, c, i in a:\n    k = bisect_left(b, (c, 0))\n    if k == len(b): continue\n    r, j = b.pop(k)\n    q.append(str(i) + ' ' + str(j))\n    s += p\n    if not b: break\n\nprint(len(q), s)\nprint('\\n'.join(q))", "n = int(input())\ng = [list(map(int, input().split())) + [i] for i in range(n)]\nk = int(input())\nr = [(v, i) for i, v in enumerate(list(map(int, input().split())))]\nb = [None] * n\n\nsg = sorted(g, key=lambda x: x[1], reverse=True)\nsr = sorted(r)\ncount = 0\nmoney = 0\n\nfor v in sg:\n    for w in sr:\n        if w[0] < v[0]:\n            continue\n        b[v[2]] = w[1]\n        count += 1\n        money += v[1]\n        sr.remove(w)\n        break\n\nprint(count, money)\nfor i in range(n):\n    if b[i] == None:\n        continue\n    print(i + 1, b[i] + 1)", "import sys\n\n# request number\nn = int(sys.stdin.readline())\nrequest = []\nfor i in range(1,n+1):\n  people, cost = map(int, sys.stdin.readline().split())\n  request.append((i,people, cost))\n\n#request.sort(key=lambda item: (-item[2], item[1]))\n#print(request)\n\nk = int(sys.stdin.readline())\ntables = []\nfor tmp in zip(range(1,k+1), [int(s) for s in sys.stdin.readline().split()]):\n  tables.append(tmp)\ntables.sort(key=lambda item: item[1])\n#print(tables)\n\ntotal = 0\nans = []\nused = [False for i in range(n+1)]\ncount = 0\n\nfor i, t in tables:\n  max_price = 0\n  request_id = -1\n\n  for j, c, p in request:\n    if p > max_price and c <= t and not used[j]:\n      max_price = p\n      request_id = j\n\n  if request_id > 0:\n    count+=1\n    used[request_id] = True\n    ans.append( (request_id, i) )\n    total += max_price\n\n#sorted(ans)\nprint( str(count) + \" \" + str(total) )\nfor request_id, i in ans:\n  print( str(request_id) + \" \" + str(i) )", "n=int(input())\nx=[]\nfor i in range(n):\n    c, p=map(int, input().split())\n    x+=[(p,c,i)]\nk=int(input())\nr=list(map(int, input().split()))\ns=0\nq=[]\nfor (v,c,a) in reversed(sorted(x)):\n    p=-1\n    u=100000\n    for (j, z) in enumerate(r):\n        if c<=z<u:\n            p=j\n            u=z\n    if p>-1:\n        r[p]=0\n        q+=[(a,p)]\n        s+=v\nprint(len(q), s)\nfor (i,j) in q:\n    print(i+1,j+1)", "n=int(input())\nx=[]\nfor i in range(n):\n    c,p=map(int, input().split())\n    x+=[(p,c,i)]\nk=int(input())\nr=list(map(int, input().split()))\ns=0\nq=[]\nfor (v,c,a) in reversed(sorted(x)):\n    p=-1\n    u=100000\n    for (j,z) in enumerate(r):\n        if c<=z<u:\n            p=j\n            u=z\n    if p>-1:\n        r[p]=0\n        q+=[(a,p)]\n        s+=v\nprint(len(q),s)\nfor (i, j) in q:\n    print(i+1, j+1)", "n=int(input()) # request number\nx=[] # requests array\nfor i in range(n): # input requests array\n    c,p=map(int, input().split())\n    x+=[(p,c,i)] # please note: p is value\nk=int(input()) # table number\nr=list(map(int, input().split())) #tables array\ns=0 # sum\nq=[] # results array\nfor (v,c,a) in reversed(sorted(x)): # v=value c=cost\n    p=-1\n    u=100000\n    for (j,z) in enumerate(r): # j=index, z=value\n        if c<=z<u: # request size <= table index < cur index\n            p=j\n            u=z\n    if p>-1: \n        r[p]=0   # make table size=0 indicates it has been used.\n        q+=[(a,p)]\n        s+=v\nprint(len(q),s)\nfor (i, j) in q:\n    print(i+1, j+1)", "n=int(input())\nx=[]\nfor i in range(n):\n    c,p=list(map(int, input().split()))\n    x+=[(p,c,i)]\nk=int(input())\nr=list(map(int, input().split()))\ns=0\nq=[]\nfor (v,c,a) in reversed(sorted(x)):\n    p=-1\n    u=10000\n    for (j,z) in enumerate(r):\n        if c<=z<u:\n            p=j\n            u=z\n    if p>-1:\n        r[p]=0\n        q+=[(a,p)]\n        s+=v\nprint(len(q),s)\nfor (i,j) in q:\n    print(i+1, j+1)\n        \n        \n        \n        \n        \n", "n=int(input())\nx=[]\nfor i in range(n):\n    c,p=map(int, input().split())\n    x+=[(p,c,i)]\nk=int(input())\nr=list(map(int, input().split()))\ns=0\nq=[]\nfor (v,c,a) in reversed(sorted(x)):\n    p=-1\n    u=10000\n    for (j,z) in enumerate(r):\n        if c<=z<u:\n            p=j\n            u=z\n    if p>-1:\n        r[p]=0\n        q+=[(a,p)]\n        s+=v\nprint(len(q),s)\nfor (i,j) in q:\n    print(i+1, j+1)", "n=int(input())\nx=[]\nfor i in range(n):\n    c,p=map(int, input().split())\n    x+=[(p,c,i)]\nk=int(input())\nr=list(map(int, input().split()))\ns=0\nq=[] \nfor (v,c,a) in reversed(sorted(x)):\n    p=-1\n    u=100000\n    for (j,z) in enumerate(r):\n        if c<=z<u:\n            p=j\n            u=z\n    if p>-1:\n        r[p]=0\n        q+=[(a,p)]\n        s+=v\nprint(len(q),s)\nfor (i, j) in q:\n    print(i+1, j+1)", "n=int(input())\nx=[]\nfor i in range(n):\n    c,p=map(int, input().split())\n    x+=[(p,c,i)]\nk=int(input())\nr=list(map(int, input().split()))\ns=0\nq=[]\nfor (v,c,a) in reversed(sorted(x)):\n    p=-1\n    u=1001\n    for (j,z) in enumerate(r):\n        if c<=z<u:\n            p=j\n            u=z\n    if p>-1:\n        r[p]=0\n        q+=[(a,p)]\n        s+=v\nprint(len(q),s)\nfor (i, j) in q:\n    print(i+1, j+1)", "def low_bound(mas, x):\n    l = 0\n    r = len(mas) - 1\n    while l < r:\n        m = (l + r) // 2\n        if mas[m][0] >= x:\n            r = m\n        else:\n            l = m + 1\n    return l\n\nn = int(input().strip())\ngr = []\nfor i in range(n):\n    gr.append(list(map(int, input().split()))[::-1] + [i + 1])\nk = int(input().strip())\ntab = [[v, i + 1] for i, v in enumerate(list(map(int, input().split())))]\ngr.sort(reverse = True)\nans = []\ns = 0\ntab.sort()\nfor p, cnt, ind in gr:\n    if len(tab) > 0 and tab[-1][0] >= cnt:\n        s += p\n        i = low_bound(tab, cnt)\n        ans.append((ind, tab[i][1], ))\n        tab.remove(tab[i])\n    \nprint(len(ans), s)\nfor i in ans:\n    print(*i)\n        \ntab.sort()\n", "n = int(input())\nclients = []\nfor i in range(1, n + 1):\n    clients.append(list(map(int, input().split())))\n    clients[-1].reverse()\n    clients[-1] += [i]\nk = int(input())\nr = list(map(int, input().split()))\n\ns = 0\nanswer = []\nclients.sort(reverse = True)\nr = [1001] + r\nfor i in clients:\n    pos = 0\n    for j in range(k + 1):\n        if r[j] >= i[1] and r[j] < r[pos]:\n            pos = j\n    if r[pos] >= i[1] and pos:\n        answer.append(str(i[2]) + ' ' + str(pos))\n        r[pos] = 0\n        s += i[0]\n\nprint(len(answer), s)\nprint('\\n'.join(answer))\n", "from collections import namedtuple\n\nn = int(input())\n\nTable = namedtuple('Table', 'id, size')\nGroup = namedtuple('Group', 'id, size, income')\n\ndef first_fit(size):\n\tfor t in tables:\n\t\tif t.size >= size and t.id not in used_tables:\n\t\t\tused_tables.add(t.id)\n\t\t\treturn t\n\ntables, groups = [], []\nused_tables = set()\n\nfor i in range(n):\n\tc, p = list(map(int, input().split()))\n\tgroups.append(Group(i+1, c, p))\n\nk = int(input())\nr = list(map(int, input().split()))\nfor i in range(k):\n\ttables.append(Table(i+1, r[i]))\n\ngroups.sort(key=lambda group: group.income, reverse=True)\ntables.sort(key=lambda table: table.size)\n\nsum_ = 0\nans = []\n\nfor i in range(n):\n\tg = groups[i]\n\tneeded_table = first_fit(g.size)\n\tif not needed_table:\n\t\tcontinue\n\tsum_ += g.income\n\tans.append((g.id, needed_table.id))\n\nprint(len(ans), sum_)\nfor a in ans:\n\tprint(*a)\n", "def main():\n    F = lambda : map(int, input().split())\n\n    n = int(input())\n    groups = [list(F())[::-1] + [i] for i in range(n)]\n    k = int(input())\n    tables = list(F())\n\n    tables = [[tables[i], i] for i in range(k)]\n    tables = sorted(tables)\n    groups = sorted(groups)\n\n    count = 0\n    SUM   = 0\n    res   = []\n    for i in range(n-1, -1, -1):\n        for j in range(len(tables)):\n            if tables:\n                if groups[i][1] <= tables[j][0]:\n                    res.append([groups[i][2], tables[j][1]])\n                    count += 1\n                    SUM   += groups[i][0]\n                    tables.pop(j)\n                    break\n            else:\n                return [count, SUM, res]\n    return [count, SUM, res]\n\nanswer = main()\n\nprint(answer[0], answer[1])\n\nfor x in answer[2]:\n    print(x[0] + 1, x[1] + 1)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Oct 15 00:37:04 2016\n\n@author: Arpan\n\"\"\"\n\nn=int(input())\n\nclass req:\n    def __init__(self,no,size,cash):\n        self.no=no\n        self.size=size\n        self.cash=cash\nclass table:\n    def __init__(self,no,size):\n        self.no=no\n        self.size=size\n    \nrl=[]   \n    \nfor i in range(n):\n    s,c=[int(x) for x in input().split()]    \n    a=req(i+1,s,c)\n    rl.append(a)\nk=int(input())\nt=[int(x) for x in input().split()]\n\ntl=[]\n\nfor i in range(len(t)):\n    a=table(i+1,t[i])\n    tl.append(a)\n\n\nrl.sort(key=lambda x: x.cash,reverse=True)\ntl.sort(key=lambda x: x.size)\n\ntot=0\nseated=0\na=[]\n\nfor i in tl:\n    s=i.size\n    for j in rl:\n        if j.size<=i.size:\n            tot+=j.cash\n            seated+=1\n            a.append([j.no,i.no])\n            rl.remove(j)\n            break\na.sort(key=lambda x: x[0])\nprint(seated,tot)\nfor i in a:\n    print(i[0],i[1])\n            \n\n", "n = int(input())\nc = []\nfor i in range(n):\n  c.append(list(map(int, input().split())))\n  c[i].append(i + 1)\n\nr = int(input())\nk = list(map(int, input().split()))\n\ndef sortfn(inp):\n  return inp[1]\n\nc.sort(key = sortfn, reverse = True)\nfor i in range(len(k)):\n  val = k[i]\n  k[i] = [i + 1, val]\nk.sort(key = sortfn)\n\ndef gettable(size):\n  for i in range(len(k)):\n    if k[i][1] >= size:\n      k[i][1] = -1\n      table = k[i][0]\n      return table\n  return -1\n      \ngroups = []\nval = 0\nfor group in c:\n  table = gettable(group[0])\n  if table > 0:\n    groups.append([str(group[2]), str(table)])\n    val += group[1]\n\nprint(str(len(groups)) + \" \" + str(val))\nfor g in groups:\n  print(\" \".join(g))\n", "n = int(input())\nrequests = []\ni = 0\nwhile i != n:\n    c, p = [int(x) for x in input().split()]\n    requests.append((p ,c, i + 1))\n    i += 1\nk = int(input())\nR = input().split()\nr = []\nfor x in range(len(R)):\n    r.append((int(R[x]), x + 1 ))\nm = s = 0\naccepted = []\nreserved = [0 for _ in range(n)]\nmaxx = (0,0,0)\nreverse_sorted_requests = list(reversed(sorted(requests)))\nfor j in sorted(r):\n    for i in reverse_sorted_requests:\n        if maxx[2] == 0 and i[1] <= j[0] and not reserved[i[2]-1] :\n            maxx = i\n        elif i[0] > maxx[0] and i[1] <= j[0] and not reserved[i[2]-1] :\n            maxx = i\n    if maxx[2] != 0 :\n        accepted.append((maxx[2],j[1]))\n        reserved[maxx[2]-1] = 1\n        m += 1\n        s += maxx[0]\n        reverse_sorted_requests.remove(maxx)\n        maxx = (0, 0, 0)\n\nprint(m, s)\nfor a in accepted:\n    print(a[0], a[1])\n", "n = int(input())\nrequests = []\ni = 0\nwhile i != n:\n    c, p = [int(x) for x in input().split()]\n    requests.append((p ,c, i + 1))\n    i += 1\nk = int(input())\nR = input().split()\nr = []\nfor x in range(len(R)):\n    r.append((int(R[x]), x + 1 ))\nm = s = 0\naccepted = []\nmaxx = (0,0,0)\nreverse_sorted_requests = list(reversed(sorted(requests)))\nfor j in sorted(r):\n    for i in reverse_sorted_requests:\n        if maxx[2] == 0 and i[1] <= j[0] :\n            maxx = i\n        elif i[0] > maxx[0] and i[1] <= j[0] :\n            maxx = i\n    if maxx[2] != 0 :\n        accepted.append((maxx[2],j[1]))\n        m += 1\n        s += maxx[0]\n        reverse_sorted_requests.remove(maxx)\n        maxx = (0, 0, 0)\n\nprint(m, s)\nfor a in accepted:\n    print(a[0], a[1])\n", "import bisect\n\nn = int(input())\nvs = list(enumerate([tuple(map(int, input().split(' '))) for _ in range(n)]))\nk = int(input())\nrs = list(map(int, input().split(' ')))\nrs_i = {r: [i+1 for i, k in enumerate(rs) if k == r] for r in rs}\n\nvs.sort(key=lambda x: x[1][1])\nrs.sort()\nol_rs = len(rs)\n\ns, ss = 0, list()\n\nwhile len(vs) > 0:\n    i, (c, p) = vs.pop()\n    t = bisect.bisect_left(rs, c)\n    if t < len(rs):\n        s += p\n        ss.append((i+1, rs_i[rs[t]].pop()))\n        del rs[t]\n        \nprint(\"{} {}\".format(ol_rs - len(rs), s))\nfor tt in ss:\n    print(\"{} {}\".format(*tt))"]