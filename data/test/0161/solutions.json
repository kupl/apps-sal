["def main():\n    x = int(input())\n    n = x.bit_length()\n    t = 0\n    ans = []\n    while True:\n        if (x + 1) & (x) == 0:\n            break\n        if t & 1:\n            x += 1\n        else:\n            for i in range(n - 1, -1, -1):\n                if not (1 << i) & x:\n                    ans.append(i + 1)\n                    x ^= (1 << (i + 1)) - 1\n                    break\n        t += 1\n    print(t)\n    print(*ans)\n    return 0\n\nmain()", "n=int(input())\noperations=0\ns=bin(n)[2:]\nans=[]\n\nwhile len(s)!=s.count('1'):\n    if operations%2==0:\n        x=s.find('0')\n        x=len(s)-x\n        n=n^(2**x-1)\n        ans.append(x)\n        operations+=1\n        s=bin(n)[2:]\n    else :\n        n=n+1\n        s=bin(n)[2:]\n        operations+=1\nprint(operations)\nprint(' '.join(str(x) for x in ans))\n", "#  =========     /\\       /|    |====/|\n#      |        /  \\       |    |   / |\n#      |       /____\\      |    |  /  |\n#      |      /      \\     |    | /   |\n#  ========= /        \\  =====  |/====|  \n#  code\nfrom math import ceil, log2\ndef __starting_point():\n    x = int(input())\n    n = []\n    c = 0\n    count = 0\n    while True:\n        y = ceil(log2(x))\n        y = int(y)\n        z = 2**y - 1\n        if x == z:\n            break\n        else:\n            if c == 1:\n                x += 1\n                c = 0\n            else:\n                x ^= z\n                n.append(y)\n                c = 1\n        count += 1\n    print(count)\n    print(' '.join(list(map(str,n))))\n\n__starting_point()", "n = int(input())\n\ncnt = 0\nres = []\n\nwhile n & (n + 1) and cnt < 40:\n    if cnt % 2 == 0:\n        b = bin(n)\n        l = len(b) - 2\n        i = bin(n)[2:].index('0')\n        res.append(l - i)\n        n ^= (1 << (l - i)) - 1\n    else:\n        n += 1\n    cnt += 1\n\nprint(cnt)\nif len(res) != 0:\n    print(*res)\n", "x = int(input())\n\nans = []\n\ncnt = 0\n\nwhile x & (x + 1) != 0:\n    bn = str(bin(x)[2:])\n    cnt += 1\n\n    ret = -1\n    for i in range(len(bn)):\n        if bn[i] == '0':\n            ret = i\n            break\n\n    if ret == -1:\n        break\n\n    x ^= 2 ** (len(bn) - ret) - 1\n    ans.append(len(bn) - ret)\n\n    if x & (x + 1) == 0:\n        break\n\n    x += 1\n    cnt += 1\n\nprint(cnt)\nif len(ans) > 0:\n    print(' '.join(str(el) for el in ans))\n", "def solve(x):\n    brr = []\n    while x > 0:\n        brr.append(x % 2)\n        x //= 2\n\n    def check(brr):\n        return all(brr)\n\n    cnt = 0\n    ops = []\n\n    while not check(brr):\n        if cnt % 2 == 0:\n            n = None\n            for i in range(len(brr)-1, -1, -1):\n                if brr[i] == 0:\n                    n = i\n                    break\n            ops.append(n + 1)\n            for i in range(n, -1, -1):\n                brr[i] = 1 - brr[i]\n        else:\n            for i in range(len(brr)):\n                if brr[i] == 0:\n                    brr[i] = 1\n                    break\n                else:\n                    brr[i] = 0\n        cnt += 1\n\n    print(cnt)\n    print(' '.join(map(str, ops)))\n\n\nsolve(int(input()))\n", "def allOnes(x):\n    if x.count('1') == len(x):\n        return True\n    return False\n\ndef main():\n    x = int(input())\n    ans = []\n    ops = 0\n    xb = bin(x)[2:]\n    while True:\n        index = -1\n        for i in range(len(xb)):\n            if xb[i] == '0':\n                index = i\n                break\n\n        if index == -1:\n            break\n        index = len(xb)-index\n        ans.append(index)\n        x = ((2**index)-1)^x\n        if allOnes(bin(x)[2:]):\n            ops += 1\n            break\n        x += 1\n        xb = bin(x)[2:]\n        #print(x,xb)\n        ops += 2\n\n    print(ops)\n\n    for i in ans:\n        print(i,end = ' ')\n\nmain()\n        \n", "ii = lambda: int(input())\nmi = lambda: map(int, input().split())\nli = lambda: list(mi())\n\nn = ii()\ncnt = 0\nans = []\nwhile True:\n    i = 0\n    while n & 1 << i:\n        i += 1\n    if 2 ** i > n:\n        break\n    j = i + 1\n    while not (n & 1 << j):\n        j += 1\n    ans.append(j)\n    cnt += 1\n    while j > 0:\n        j -= 1\n        n ^= 1 << j\n    if not ((n + 1) & n):\n        break\n    n += 1\n    cnt += 1\nprint(cnt)\nprint(*ans)", "x = int(input())\nq1, ans = 0, []\nwhile set(bin(x)[2:]) != {'1'}:\n    if q1 % 2 == 0:\n        t = bin(x)[2:]\n        y = t.find('0')\n        ans.append(len(t)-y)\n        x ^= (1 << ans[-1])-1\n    else:\n        x += 1\n    q1 += 1\nprint(q1)\nif len(ans) > 0:\n    print(*ans)\n", "x = int(input())\nprop = {2**i - 1 for i in range(1, 40)}\nans = 0\nAns = []\nwhile x not in prop:\n    j = x.bit_length()\n    ans += 1\n    Ans.append(j)\n    x ^= (1<<j) - 1\n    if x in prop:\n        break\n    x += 1\n    ans += 1\nprint(ans)\nif ans:\n    print(*Ans)\n", "import math\n\nn = int(input().lstrip())\nres = 0\nposs = []\nwhile bin(n)[2:].find('0') != -1:\n    twos = len(bin(n)) - 2\n    first_zero = bin(n)[2:].find('0')\n    pos = twos - first_zero\n    n = n ^ ((2 ** pos) - 1)\n    res += 1\n    poss.append(pos)\n    if bin(n)[2:].find('0') != -1:\n        n += 1\n        res += 1\n\nprint(res)\nif poss:\n    print(' '.join(map(str, poss)))", "x = int(input())\n\nO = []\nnop = 0\n\ndef opA(x,n):\n    nonlocal nop\n    nop += 1\n    O.append(n)\n    r = x ^ ((1<<n)-1)\n    return r\ndef opB(x):\n    nonlocal nop\n    nop += 1\n    return x+1\ndef islc(x):\n    b='{:b}'.format(x)\n    return b.count('0') == 0\n\nfor i in range(20):\n    b='{:b}'.format(x)\n    n = len(b)\n    o = n - b.find('0')\n    x = opA(x,o)\n    if islc(x):\n        break\n    x = opB(x)\n    if islc(x):\n        break\n\nprint(nop)\nprint(*O)\n", "x = int(input())\nx = format(x, \"b\")\nx = list(x)\n\n\nans = 0\nanslist = []\nfor i in range(len(x)):\n    if x[i] == \"1\":\n        continue\n    else:\n        ans += 1\n        anslist.append(len(x)-i)\n        for j in range(i, len(x)):\n            if x[j] == \"1\":\n                x[j] = \"0\"\n            else:\n                x[j] = \"1\"\n\n    if x.count(\"1\") == len(x):\n        break\n    else:\n        ans += 1\n        x = \"\".join(x)\n        x = int(x, 2)\n        x += 1\n        x = format(x, \"b\")\n        x = list(x)\n\nprint(ans)\nif len(anslist) != 0:\n    print(\" \".join(map(str, anslist)))\n", "def mp():\n    return map(int, input().split())\n\ndef f(n):\n    nonlocal l\n    res = []\n    l = 0\n    while n > 0:\n        res.append(n % 2)\n        n //= 2\n        l += 1\n    return res[::-1]\n\nn = int(input())\nl = 0\ns = f(n)\n\ncnt = 0\nans = []\nh = len(s)\nwhile n != 2 ** l - 1:\n    if s[-1] == 0:\n        ans.append(0)\n        n += 1\n        s = f(n)\n        continue\n    idx = (''.join(map(str, s))).find('0')\n    #print(idx, h - idx)\n    ans.append(h - idx)\n    n ^= 2 ** (l - idx) - 1\n    #print(n, n + 1)\n    n += 1\n    s = f(n)\n    \nprint(len(ans) * 2)\nfor i in ans:\n    print(i, end = ' ')", "x = int(input())\nans = []\nt = 0\nwhile x != 2 ** x.bit_length() - 1:\n    if t % 2:\n        x += 1\n    else:\n        xb = x.bit_length()\n        ans.append(xb)\n        x ^= 2 ** xb - 1\n    t += 1\nprint(t)\nprint(*ans)\n", "x = int(input())\n\n\nop = 0\nans = []\nwhile '0' in (bin(x)[2:]):\n    if op % 2 == 0:\n        can = int('1' * (len(bin(x)[2:]) - bin(x)[2:].index('0')), 2)\n        x ^= can\n        ans += [len(bin(can)) - 2]\n    else:\n        x += 1\n    op += 1\n\nprint(op)\nfor a in ans:\n    print(a, end= ' ')", "3\n\nimport math\nimport sys\n\n\nDEBUG = False\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\ndef solve(X):\n    nops = 0\n    ns = []\n\n    while True:\n        s = '{:b}'.format(X)\n        ls = len(s)\n        zerop = s.find('0')\n        if X == 0 or zerop == -1:\n            break\n\n        n = ls - zerop\n        ns.append(n)\n        nops += 1\n        X ^= (1 << n) - 1\n\n        s = '{:b}'.format(X)\n        zerop = s.find('0')\n        if X == 0 or zerop == -1:\n            break\n\n        X += 1\n        nops += 1\n\n    return nops, ns\n\n\ndef main():\n    X = int(inp())\n    nops, ns = solve(X)\n    print(nops)\n    if ns:\n        print(*ns)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import io, sys, atexit, os\n\nimport math as ma\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\n\ndef li ():\n\treturn list (map (int, input ().split ()))\n\n\ndef num ():\n\treturn map (int, input ().split ())\n\n\ndef nu ():\n\treturn int (input ())\n\n\ndef find_gcd ( x, y ):\n\twhile (y):\n\t\tx, y = y, x % y\n\treturn x\n\n\nmm = 1000000007\nyp = 0\ndef solve ():\n\tt = 1\n\tfor tt in range (t):\n\t\tn=nu()\n\t\tcc=0\n\t\ts=str(bin(n))[2:]\n\t\txp=[]\n\t\tpp=0\n\t\twhile(cc<=40):\n\t\t\tfl=False\n\t\t\tind=-1\n\t\t\tfor i in range(len(s)):\n\t\t\t\tif(s[i]==\"0\"):\n\t\t\t\t\tfl=True\n\t\t\t\t\tind=i\n\t\t\t\t\tbreak\n\t\t\tif(fl==False):\n\t\t\t\tbreak\n\t\t\tcc+=1\n\t\t\tif(pp==1):\n\t\t\t\tpp^=1\n\t\t\t\tn+=1\n\t\t\t\ts = str (bin (n)) [ 2: ]\n\t\t\telse:\n\t\t\t\tpp ^= 1\n\t\t\t\tgg=pow(2,len(s)-ind)-1\n\t\t\t\txp.append(len (s) - ind)\n\t\t\t\tn^=gg\n\t\t\t\ts = str (bin (n)) [ 2: ]\n\t\tprint(cc)\n\t\tprint(*xp)\n\n\ndef __starting_point():\n\tsolve ()\n__starting_point()", "x=int(input().strip())\nimport math\nss=\"\"\nnum=0\nnu=0\nwhile(True):\n    n = math.floor(math.log(x, 2))\n    nt=(2**(n+1))-1\n    if(x==nt):\n        break\n    if(num==0):\n        x=x^(nt)\n        ss=ss+str(n+1)+\" \"\n    else:\n        x=x+1\n    num=1-num\n    nu=nu+1\nprint(nu)\nprint(ss)\n", "x = bin(int(input()))\nt = 0\nnrr = []\nwhile True:\n    for i in range(2, len(x)):\n        if x[i] == '0':\n            break\n    else:\n        break\n    t += 1\n    if t % 2:\n        for i in range(2, len(x)):\n            if x[i] == '0':\n                n = len(x) - i\n                x = bin(int(x, 2) ^ (2 ** n - 1))\n                nrr.append(n)\n                break\n    else:\n        x = bin(int(x, 2) + 1)\nprint(t)\nfor n in nrr:\n    print(n, end=' ')\n", "n=int(input())\na=[]\ni=30\nif not n&1:\n    a.append(0)\n    n^=1\nwhile 2**i>n:\n    i-=1\nwhile i>1:\n    if not (n&(2**(i-1))):\n        a.append(i)\n        n^=(2**i)-1\n        n+=1\n    i-=1\nprint(2*len(a))\nfor num in a:\n    print(str(num),end=\" \")\n", "import sys\ninput = sys.stdin.readline\n\nANSLIST=set([(1<<i)-1 for i in range(30)])\n\nNOW=int(input())\nif NOW in ANSLIST:\n    print(0)\n    return\n\nANS=[]\nwhile True:\n    if NOW in ANSLIST:\n        print(len(ANS)*2)\n        print(*ANS)\n        return\n\n        \n    for i in range(NOW.bit_length(),0,-1):\n        if NOW & (1<<(i-1))==0:\n            ANS.append(i)\n            NOW=NOW^((1<<(i))-1)\n            break\n\n    #print(i,((1<<(i-1))-1),NOW)\n\n    if NOW in ANSLIST:\n        print(len(ANS)*2-1)\n        print(*ANS)\n        return\n\n    NOW+=1\n        \n    \n    \n", "n = int(input())\ndef transform():\n    nonlocal n\n    s = bin(n)[2:]\n    for i in range(len(s)):\n        if s[i]=='0': break\n    index = i\n    res = ''\n    for i in range(len(s)):\n        if i>=index: res+='1'\n    n = int(res, 2)^n\n    return(len(res))\ndef check():\n    nonlocal n\n    s = bin(n)[2:]\n    n+=1\n    if '0' not in s: return True\n    else: return False\ncnt = 0\ntoprint = []\nwhile True:\n    s = bin(n)[2:]\n    if '0' not in s:\n        print(cnt)\n        for i in toprint: print(i, end=' ')\n        print()\n        break\n    toprint.append(transform())\n    cnt+=1\n    if check():\n        print(cnt)\n        for i in toprint: print(i, end=' ')\n        print()\n        break\n    cnt+=1\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Mar  3 23:50:56 2019\n\n@author: loyuli\n\"\"\"\nn = int(input())\na = str(bin(n))[2:]\nnum = a[-1]\nan = 0\nnow = \"1\"\nanp = []\nfor idx, i in enumerate(a):\n    if i != now:\n        an += 1\n        anp.append(len(a) - idx)\n        now = i\nprint(an * 2 - 1 + int(num))\nif anp:\n    print(\" \".join(map(str, anp)))", "n = int(input())\n\ndef cbt(n):\n    b = bin(n)[2:]\n    c = 0\n    t = 1\n    l = []\n    while b.count('1') != len(b):\n        t ^= 1\n        if not t:\n            x = int('1' * len(b), 2)\n            y = int('0b' + b, 2)\n            l.append(len(b))\n            b = x ^ y\n            b = bin(b)[2:]\n        else:\n            x = int('0b' + b, 2)\n            x += 1\n            b = bin(x)[2:]\n        c += 1\n    return c, l\n\nc, l = cbt(n)\nprint(c)\nprint((*l) if l else None)\n"]