["n = int(input())\n\nls = [input() for _ in range(n)]\n\nbalance = [[0, 0] for _ in range(n)]\n\nfor i in range(n):\n\tfor j in range(len(ls[i])):\n\t\tbalance[i][0] = balance[i][0] + (1 if ls[i][j] == '(' else -1)\n\t\tbalance[i][1] = min(balance[i][1], balance[i][0])\n\nbalance2 = []\n\nfor i in range(n):\n\tif balance[i][0] < 0:\n\t\tif balance[i][1] >= balance[i][0]:\n\t\t\tbalance2.append(balance[i][0])\n\tif balance[i][0] >= 0:\n\t\tif balance[i][1] >= 0:\n\t\t\tbalance2.append(balance[i][0])\n\nbalance2.sort()\n\n\nanswer = 0\n\ni, j = 0, len(balance2) - 1\n\nwhile i < j:\n\tif balance2[i] + balance2[j] == 0:\n\t\tanswer += 1\n\t\ti += 1\n\t\tj -= 1\n\telif balance2[i] + balance2[j] < 0:\n\t\ti += 1\n\telif balance2[i] + balance2[j] > 0:\n\t\tj -= 1 \n\nprint(answer)\n\n\n\n", "n = int(input())\n\n\nstarts = []\nends = []\nfulls = 0\n#Testing Validity\nfor _ in range(n):\n    s = input()\n    count = 0\n    mn = 0\n    for c in s:\n        if c == '(':\n            count += 1\n        else:\n            count -= 1\n            mn = min(mn, count)\n    #print(count, mn)\n\n    if count > 0:\n        if mn == 0:\n            starts.append(count)\n    elif count < 0:\n        if mn == count:\n            ends.append(-1 * count)\n    else:\n        if mn == 0:\n            fulls += 1\n\nstarts.sort()\nends.sort()\n\nout = 0\nwhile len(starts) > 0 and len(ends) > 0:\n    st = starts[0]\n    en = ends[0]\n\n    if st < en:\n        starts.pop(0)\n    elif st > en:\n        ends.pop(0)\n    else:\n        out += 1\n        starts.pop(0)\n        ends.pop(0)\n\nprint(out + fulls//2)\n            \n        \n        \n", "N = int(input())\nL = {}\nR = {}\nZ = 0\nans = 0\nfor i in range(N):\n    s = input()\n    ok = 1\n    cnt = 0\n    for c in s:\n        if c == '(':\n            cnt += 1\n        else:\n            if cnt == 0:\n                ok = 0\n                break\n            cnt -= 1\n    if ok:\n        if cnt == 0:\n            if Z == 1:\n                ans += 1\n            Z ^= 1\n        else:\n            if R.get(cnt, 0) > 0:\n                ans += 1\n                R[cnt] -= 1\n            else:\n                L[cnt] = L.get(cnt, 0) + 1\n        continue\n\n    ok = 1\n    for c in reversed(s):\n        if c == ')':\n            cnt += 1\n        else:\n            if cnt == 0:\n                ok = 0\n                break\n            cnt -= 1\n    if ok:\n        if cnt == 0:\n            if Z == 1:\n                ans += 1\n            Z ^= 1\n        else:\n            if L.get(cnt, 0) > 0:\n                ans += 1\n                L[cnt] -= 1\n            else:\n                R[cnt] = R.get(cnt, 0) + 1\nprint(ans)", "n = int(input())\nstrs = []\nfor i in range(n):\n    strs.append(input())\n\ndef check(s):\n    h = 0\n    min_h = max_h = 0\n    s = s.strip()\n    for c in s:\n        if c == '(':\n            h += 1\n        elif c == ')':\n            h -= 1\n        else:\n            raise NotImplementedError()\n\n        min_h = min(h, min_h)\n        max_h = max(h, max_h)\n\n    if min(0, h) == min_h:\n        return h\n    else:\n        return None\n\ndef count_pairs(strs):\n    by_height = {}\n    for s in strs:\n        h = check(s)\n        if h not in by_height:\n            by_height[h] = 0\n        by_height[h] += 1\n\n    pairs_count = 0\n    for h, c in list(by_height.items()):\n        if h is not None and h > 0:\n            pairs_count += min(by_height[h], by_height.get(-h, 0))\n\n    pairs_count += by_height.get(0, 0) // 2\n    return pairs_count\n\nprint(count_pairs(strs))\n", "def ii():\n    return int(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nMAX = 6 * 10 ** 5\n\nn = ii()\na = [input().strip() for i in range(n)]\npos = [[] for i in range(MAX)]\nneg = [[] for i in range(MAX)]\nfor s in a:\n    p = m = 0\n    for c in s:\n        if c == '(':\n            p += 1\n        else:\n            p -= 1\n        m = min(m, p)\n    if p >= 0:\n        pos[p].append(m)\n    else:\n        neg[-p].append(m)\n\nans = 0\nfor p in range(1, MAX):\n    c1 = sum(x >= 0 for x in pos[p])\n    c2 = sum(x + p >= 0 for x in neg[p])\n    ans += min(c1, c2)\nc3 = sum(x >= 0 for x in pos[0])\nans += c3 // 2\nprint(ans)\n", "from collections import Counter\ndef cal(x):\n    left = cl = 0\n    for i in x:\n        if i == \"(\":\n            cl += 1\n        if i == \")\":\n            if cl <= 0:\n                left += 1\n            else:\n                cl -= 1\n    return left, cl\nn = int(input())\na = [*[x for x in [cal(input()) for i in range(n)] if x[0] == 0 or x[1] == 0]]\nleft = Counter([i[1] for i in [x for x in a if x[0] == 0]])\nright = Counter([i[0] for i in [x for x in a if x[1] == 0]])\nans = 0\n#print(left, right)\nfor i in list(left.keys()):\n    ans += (min(left[i], right[i]) if i != 0 else left[i] // 2)\nprint(ans)\n\n\n", "\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\n\ndef find(s):\n    r = []\n    for i in s[::-1]:\n        if i == '(':\n            r.append(')')\n    return ''.join(r) if len(r) == len(s) else False\n\ndef pre(s):\n    k = [1]\n    for i in s:\n        if i == ')' and k[-1] == '(':\n            k.pop()\n        else:\n            k.append(i)\n    return ''.join(k[1:])\n\nn, = I()\nd = {'a':0}\nl = []\nfor i in range(n):\n    s = input()\n    s = pre(s)\n    l.append(s)\n    if not s:\n        d['a'] += 1\n    elif s in d:\n        d[s] += 1\n    else:\n        d[s] = 1\ncount = 0\nl.sort(key = lambda x:len(x))\nfor i in l:\n    k = find(i)\n    if i and i[0] != ')' and k in d and d[k] > 0:\n        count += 1\n        d[k] -= 1\n        d[i] -= 1\ncount += d['a']//2\nprint(count)", "cs = int(input())\n\n\nopen = []\nclos = []\nval = 0\nfor c in range(cs):\n    brac = input()\n    \n    s = []\n    for b in brac:\n        if len(s) == 0 or b == '(':\n            s.append(b)\n        else:\n            if s[-1] == '(':\n                s.pop()\n            else:\n                s.append(')')\n                \n    if len(s) != 0:\n        if s[0] == s[-1] == '(':\n            open.append(len(s))\n        if s[0] == s[-1] == ')':\n            clos.append(len(s))\n    else:\n        val += 1 \n\nclose = dict()\n\nfor cl in clos:\n    if cl not in close:\n        close[cl] = 1\n    else:\n        close[cl] += 1\nans = val // 2\nfor op in open:\n    if op in close:\n        ans += 1\n        close[op] -= 1\n        if close[op] == 0:\n            del close[op]\nprint(ans)            \n            \n", "from collections import Counter\nN = int(input())\nS = [input() for i in range(N)]\nc1 = Counter()\nc2 = Counter()\nzeros = 0\n\nfor s in S:\n    op = nop = 0\n    for c in s:\n        if c == '(':\n            op += 1\n        else:\n            if op == 0:\n                nop += 1\n            else:\n                op -= 1\n    if op and nop: continue\n    if op:\n        c1[op] += 1\n    elif nop:\n        c2[nop] += 1\n    else:\n        zeros += 1\n\nprint(sum((c1&c2).values()) + zeros//2)\n", "from collections import defaultdict\n\ndef solve():\n    n = int(input())\n    seqs = defaultdict(list)\n    for _ in range(n):\n        seq = input()\n        seq = [1 if c == '(' else -1 for c in seq]\n        cumm_sum = [0 for _ in range(len(seq)+1)]\n        for i in range(len(seq)):\n            cumm_sum[i+1] = seq[i] + cumm_sum[i]\n\n        value = sum(seq)\n        height = min(cumm_sum)\n\n        if value >= 0 and height < 0:\n            continue\n        if value < 0 and height < value:\n            continue\n\n        seqs[value].append(height)\n\n    num_pairs = 0\n    for val in seqs:\n        if val < 0: continue\n        if val == 0: num_pairs += len(seqs[val]) // 2\n        if val > 0 and (-val) in seqs:\n            num_pairs += min(len(seqs[val]), len(seqs[-val]))\n\n    print(num_pairs)\n\nsolve()\n\n\n", "n = int(input())\n# by count of opens\na = dict()\nfor pos in range(n):\n    cur = input()\n    ops = 0\n    add = 0\n    was = False\n    for i in cur:\n        if i == '(':\n            ops += 1\n            add += 1\n        else:\n            ops -= 1\n            if ops < 0:\n                was = True\n            add = max(add - 1, 0)\n    if was and add > 0:\n        continue\n    if ops in a:\n        a[ops] += 1\n    else:\n        a[ops] = 1\n\nans = 0\nfor i in list(a.keys()):\n    if (0 - i) in a:\n        if i != 0:\n            cur = min(a[i], a[0 - i])\n            ans += cur\n            a[i] -= cur\n            a[0 - i] -= cur\n        else:\n            ans += a[0] // 2\nprint(ans)\n", "import collections\n\ndef rev(l):\n\tret = \"\"\n\tfor ch in l[::-1]:\n\t\tret = ret + (\"(\" if ch == \")\" else \")\")\n\treturn ret\n\t\ndef cnt(l):\n\tret = cntimpl(l)\n\tif ret is None:\n\t\tret = cntimpl(rev(l))\n\t\tif ret is not None:\n\t\t\tret *= -1\n\treturn ret\n\ndef cntimpl(l):\n\tq = 0\n\tfor ch in l:\n\t\tif ch == \"(\":\n\t\t\tq += 1\n\t\telse:\n\t\t\tq -= 1\n\t\t\tif q < 0:\n\t\t\t\treturn None\n\treturn q\n\n###\n\nn = int(input())\ns = [input() for _ in range(n)]\n\n#print(n, s)\n\nv = [cnt(x) for x in s]\n\n#print(v)\n\nv = [x for x in v if x is not None]\nv.sort()\nv = collections.deque(v)\n\n#print(v)\n\nans = 0\nwhile len(v) > 1:\n\tif v[0] == -v[-1]:\n\t\tans += 1\n\t\tv.pop()\n\t\tv.popleft()\n\telif abs(v[0]) > abs(v[-1]):\n\t\tv.popleft()\n\telse:\n\t\tv.pop()\n\nprint(ans)", "import sys \n\nAns = 0\nN = int(input())\nleft = {}\nright = {}\ncorrect = 0\n\nfor i in range(N):\n    arr = sys.stdin.readline().strip()\n    check = []\n\n    for j in arr:\n        if len(check)==0:\n            check.append(j) \n        elif j == \")\" and check[-1] == \"(\":\n            check.pop() \n        else:\n            check.append(j)\n\n    leftnum = check.count(\"(\")\n    rightnum = check.count(\")\")\n    if  leftnum > 0 and rightnum > 0:\n        continue\n    elif leftnum > 0:\n        try:\n            left[ str(leftnum) ] += 1\n        except:\n            left[ str(leftnum) ] = 1\n\n    elif rightnum > 0:\n        try:\n            right[ str(rightnum) ] += 1\n        except:\n            right[ str(rightnum) ] = 1\n    else:\n        correct += 1\n\n\nAns += correct // 2\n\nfor key, value in list(left.items()):\n    try:\n        Ans += min( right[key], value )\n    except:\n        pass \n    \n\nprint ( Ans )\n", "n = int(input())\n\nd = {}\n\nfor i in range(n):\n    s = input()\n    k = 0\n    pr = True\n    suf = True\n    for j in s:\n        if j == '(':\n            k +=1\n        else:\n            k -=1\n        if k < 0:\n            pr = False\n    k = 0\n    for j in reversed(s):\n        if j == '(':\n            k +=1\n        else:\n            k -= 1\n        if k > 0:\n            suf = False\n    if (k > 0 and pr) or (k == 0 and pr and suf) or (k < 0 and suf):\n        if k not in d:\n            d[k] = 0\n        d[k] += 1\n\nans = 0\nif 0 in d:\n    ans += d[0] // 2\n    del d[0]\nfor k in d:\n    if d[k] <= 0:\n        continue\n    if -k in d and d[-k] > 0:\n        mn = min(d[k], d[-k])\n        d[k] -= mn\n        d[-k] -= mn\n        ans += mn\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nB=[input().strip() for i in range(n)]\n\nLIST=[]\n\nfor b in B:\n    care=0\n\n    BRSUM=0\n    for bb in b:\n        if bb==\")\":\n            BRSUM-=1\n        else:\n            BRSUM+=1\n\n        if BRSUM<0:\n            care=min(care,BRSUM)\n\n    if care<0 and BRSUM>care:\n        continue\n    else:\n        LIST.append(BRSUM)\n\nfrom collections import Counter\ncounter=Counter(LIST)\n\nANS=0\nfor l in sorted(list(counter.keys())):\n    if l==0:\n        ANS+=counter[l]//2\n        break\n    \n    if l>0:\n        break\n\n    ANS+=min(counter[l],counter[-l])\n\n\nprint(ANS)\n\n        \n", "from collections import Counter\n\nc1 = Counter()\nc2 = Counter()\nfor _ in range(int(input())):\n    s = input()\n    p = 0\n    q = 0\n    for c in s:\n        if c == \"(\":\n            p += 1\n        else:\n            p -= 1\n            q = min(q, p)\n    if p == q:\n        c1[-p] += 1\n    elif q == 0:\n        c2[p] += 1\nprint(sum((min(c1[k], c2[k]) for k in list(c1.keys()))) + c1[0] // 2)\n", "import collections\n\ndef pos_score(S):\n    s = 0\n    for c in S:\n        if c == '(':\n            s += 1\n        elif c == ')':\n            s -= 1\n        if s < 0:\n            return None\n    return s\n\ndef neg_score(S):\n    s = 0\n    for c in reversed(S):\n        if c == '(':\n            s += 1\n        elif c == ')':\n            s -= 1\n        if s > 0:\n            return None\n    return s\n\ndef score(S):\n    p = pos_score(S)\n    if p is not None:\n        return p\n    n = neg_score(S)\n    if n is not None:\n        return n\n    return None\n\nN = int(input())\nscores = [score(input()) for _ in range(N)]\nscore_neg_map = collections.Counter(-sc for sc in scores if sc is not None and sc < 0)\nscore_pos_map = collections.Counter(sc for sc in scores if sc is not None and sc > 0)\nscore_zero = sum(sc == 0 for sc in scores)\n\nans = score_zero // 2\nfor key in score_pos_map:\n    pos = score_pos_map[key]\n    neg = score_neg_map.get(key, 0)\n    ans += min(pos, neg)\nprint(ans)\n", "from collections import defaultdict as dd\nd = dd(int)\n\nn = int(input())\nfor i in range(n):\n    s = input()\n    f = 0\n    ff = 0\n    for j in range(len(s)):\n        if s[ j ] == '(':\n            f += 1\n        elif s[ j ] == ')':\n            f -= 1\n        if f < 0:\n            ff += 1\n            f = 0\n    if f == 0:\n        d[ -ff ] += 1\n    elif ff == 0:\n        d[ f ] += 1\n\ns = d[ 0 ] // 2\nfor k, v in list(d.items()):\n    if k > 0:\n        s += min( d[ k ], d[ -k ] )\n\nprint( s )\n\n\n", "from collections import Counter\n\ndef cleanup(paren: str) -> str:\n    stack = list()\n\n    for char in paren:\n        if not stack:\n            stack.append(char)\n        elif stack[-1] == '(' and char == ')':\n            stack.pop()\n        else:\n            stack.append(char)\n\n    return ''.join(stack)\n    \ndef main():\n    prob_len = int(input())\n\n    lefts = Counter()\n    rights = Counter()\n    zeros = 0\n    for _ in range(prob_len):\n        new_paren = cleanup(input())\n        if '(' in new_paren and ')' in new_paren:\n            continue\n        elif '(' in new_paren:\n            lefts.update([len(new_paren)])\n        elif ')' in new_paren:\n            rights.update([len(new_paren)])\n        else:\n            zeros += 1\n\n    answer = 0\n    answer += zeros // 2\n    for paren_num in lefts.keys():\n        answer += min(lefts[paren_num], rights[paren_num])\n\n    print(answer)\n\ndef __starting_point():\n    main()\n__starting_point()", "# -*- coding: utf-8 -*-\n# @Time    : 2019/1/4 23:10\n# @Author  : LunaFire\n# @Email   : gilgemesh2012@gmail.com\n# @File    : C. Yuhao and a Parenthesis.py\n\n\ndef calc_bracket(sequence):\n    left_num, right_num = 0, 0\n    for c in sequence:\n        if c == ')':\n            if left_num != 0:\n                left_num -= 1\n            else:\n                right_num += 1\n        else:\n            left_num += 1\n    return left_num, right_num\n\n\ndef main():\n    total_num = int(input())\n\n    result = 0\n    left_dict, right_dict = {}, {}\n    correct_num = 0\n\n    for _ in range(total_num):\n        sequence = input()\n        left_num, right_num = calc_bracket(sequence)\n        if left_num != 0 and right_num != 0:\n            continue\n        elif left_num:\n            if right_dict.get(left_num, 0):\n                right_dict[left_num] -= 1\n                result += 1\n            else:\n                left_dict[left_num] = left_dict.get(left_num, 0) + 1\n        elif right_num:\n            if left_dict.get(right_num, 0):\n                left_dict[right_num] -= 1\n                result += 1\n            else:\n                right_dict[right_num] = right_dict.get(right_num, 0) + 1\n        else:\n            correct_num += 1\n\n    result = result + correct_num // 2\n    print(result)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\n\nleft = {}\nright = {}\nneutral_count = 0\n\nfor _ in range(n):\n    bracket = input()\n    s = []\n    for p in bracket:\n        if '(' == p:\n            s.append('(')\n        if ')' == p:\n            if len(s) > 0 and s[-1] == '(':\n                s.pop()\n            else:\n                s.append(')')\n    if len(s) == 0:\n        neutral_count += 1\n    elif all(e == '(' for e in s):\n        l = len(s)\n        if l in left:\n            left[l] += 1\n        else:\n            left[l] = 1\n    elif all(e == ')' for e in s):\n        r = len(s)\n        if r in right:\n            right[r] += 1\n        else:\n            right[r] = 1\nans = 0\nans += neutral_count//2\nfor l in left:\n    r = 0\n    if l in right:\n        r = right[l]\n    ans += min(left[l], r)\nprint(ans) \n\n\n", "n=int(input())\nskobs1=dict()\nskobs2=dict()\nptav_cnt=0\nfor t in range(n):\n    skob=input()\n    fl=2\n    opcnt=0\n    clcnt=0\n    opcnt2=0\n    clcnt2=0\n    for s in range(len(skob)):\n        if skob[s]==')':\n            clcnt+=1\n        else:\n            opcnt+=1\n        if clcnt>opcnt:\n            fl=1\n    for s in range(len(skob)-1,-1,-1):\n        if skob[s]==')':\n            clcnt2+=1\n        else:\n            opcnt2+=1\n        if clcnt2<opcnt2 and fl==1:\n            fl=0\n    if fl:\n        if opcnt==clcnt:\n            ptav_cnt+=1\n        elif opcnt>clcnt:\n            if opcnt-clcnt in skobs1:\n                skobs1[opcnt-clcnt]+=1\n            else:\n                skobs1[opcnt - clcnt] = 1\n        else:\n            if clcnt-opcnt in skobs2:\n                skobs2[clcnt - opcnt]+=1\n            else:\n                skobs2[clcnt - opcnt] = 1\nans=ptav_cnt//2\nfor t in skobs1:\n    if t in skobs2:\n        ans+=min(skobs1[t],skobs2[t])\nprint(ans)\n\n\n\n\n", "def score(x):\n    s = []\n    for i in x:\n        if len(s) == 0:\n            s.append(i)\n            continue\n        h = s[-1]\n        if h == '(' and i == ')':\n            s.pop()\n        else:\n            s.append(i)\n    if '(' in s and ')' in s:\n        return None\n    if '(' in s:\n        return len(s)\n    else:\n        return -1 * len(s)\n\nn = int(input())\na = []\nfor _ in range(n):\n    x = input()\n    a.append(x)\n    \nd = {}\nfor i in a:\n    j = score(i)\n    if j != None:\n        if j in d:\n            d[j] += 1\n        else:\n            d[j] = 1\n\nc = 0\nfor i in d:\n    if i == 0:\n        c += d[i] // 2\n    else:\n        if -i in d and d[i] > 0 and d[-i] > 0:\n            x = min(d[i], d[-i])\n            d[i] -= x\n            d[-i] -= x\n            c += x\nprint(c)\n", "import sys\n\n#fin  = open(\"C.in\", \"r\")\nfin = sys.stdin\n\nn = int(fin.readline())\nA = []\nfor i in range(n): \n\tA += [fin.readline()[:-1]]\n\nsg = {'(' : +1, ')' : -1}\nINF = 2000000000\n\ndef analyze(s):\n\tsm = 0\n\tmn = 0\n\tfor ch in s:\n\t\tsm += sg[ch]\n\t\tmn = min(mn, sm)\n\n\tif (sm >= 0 and mn < 0): return INF\n\tif (sm < 0 and sm != mn): return INF\n\n\treturn sm\n\nd = {}\nfor s in A:\n\tt = analyze(s)\n\tif (t == INF): continue\n\n\tif (t in d): d[t] += 1\n\telse: d[t] = 1\n\nans = 0\nfor a in d:\n\tif (a > 0 and (-a) in d): ans += min(d[a], d[-a])\n\nif (0 in d): ans += d[0]//2\n\nprint(ans)\n\n\n\n\n", "n = int(input())\na = [input() for i in range(n)]\nkk = {}\nfor i in a:\n    if i[0] == ')' and i[-1] == '(':\n        continue\n    cnt = 0\n    flag1 = False\n    flag2 = False\n    isFirst = False\n    for j in i:\n        if j == '(':\n            cnt += 1\n        else:\n            cnt -= 1\n        if cnt > 0:\n            flag1 = True\n            if not flag2:\n                isFirst = True\n        if cnt < 0:\n            flag2 = True\n    flag = False\n    if cnt == 0:\n        if flag2:\n            continue\n        else:\n            flag = True\n    if cnt > 0:\n        if flag2:\n            continue\n        else:\n            flag = True\n    if cnt < 0:\n        cnt_zakr = 0\n        for j in i[::-1]:\n            if j == '(':\n                cnt_zakr -= 1\n                if cnt_zakr < 0:\n                    break\n            else:\n                cnt_zakr += 1\n        else:\n            flag = True\n    if not flag:\n        continue\n    kk[cnt] = kk.get(cnt, 0) + 1\n#print(kk)\nans = 0\nfor i in kk.keys():\n    if i >= 0:\n        continue\n    a = kk[i]\n    b = kk.get(-i, 0)\n    ans += min(a, b)\nans += kk.get(0, 0) // 2\nprint(ans)"]