["def cons(l):\n    m = 0\n    res = 0\n    for v in l:\n        if v:\n            res += 1\n            if res > m:\n                m = res\n        else:\n            res = 0\n    return m\n\nn, m, q = list(map(int, input().split()))\ngrid = []\ncurr = [0] * n\nfor i in range(n):\n    grid.append(list(map(int, input().split())))\n    curr[i] = cons(grid[i])\n\nfor _ in range(q):\n    i, j = list(map(int, input().split()))\n    i -= 1\n    j -= 1\n    grid[i][j] = 0 if grid[i][j] else 1\n    curr[i] = cons(grid[i])\n    print(max(curr))\n", "n, m, q = list(map(int, input().split()))\n\ns = []\nt = []\n\ndef getMax(line):\n    cur = 0\n    res = 0\n    for v in line:\n        if v == 1:\n            cur += 1\n        else:\n            res = max(res, cur)\n            cur = 0\n    res = max(res, cur)\n    return res\n\nfor i in range(n):\n    si = list(map(int, input().split()))\n    s.append(si)\n    t.append(getMax(si))\n\n# res = max(t)\n\n# print(t)\n\nfor qi in range(q):\n    i, j = list(map(int, input().split()))\n    s[i - 1][j - 1] = int(not s[i - 1][j - 1])\n    t[i - 1] = getMax(s[i - 1])\n    # print(t)\n    res = max(t)\n    print(res)\n", "import math\ndef linescore(line):\n    acc = 0\n    ret = 0\n    for eye in line:\n        if eye:\n            acc += 1\n            ret = max(ret, acc)\n        else:\n            acc = 0\n    return ret\n    \ndef main():\n    items = input().split()\n    n = int(items[0])\n    m = int(items[1])\n    q = int(items[2])\n    e = [[None for _ in range(m)] for _ in range(n)]\n    ls = [0 for _ in range(n)]\n    for i in range(n):\n        items = input().split()\n        for j in range(m):\n            e[i][j] = (items[j]=='1')\n    for i in range(n):\n        ls[i] = linescore(e[i])\n    for qi in range(q):\n        items = input().split()\n        x = int(items[0])-1\n        y = int(items[1])-1\n        e[x][y] = not e[x][y]\n        ls[x] = linescore(e[x])\n        print(max(ls))\n        \ndef __starting_point():\n    main()\n\n__starting_point()", "import math,string,itertools,fractions,heapq,collections,re,array,bisect\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict\n\ndef VI(): return list(map(int,input().split()))\n\ndef get_score(x):\n    b = 0\n    best = 0\n    running = 0\n    for i,v in enumerate(x):\n        if v==1:\n            if running:\n                b += 1\n            else:\n                b = 1\n            running = 1\n        else:\n            if running:\n                if b > best:\n                    best = b\n            running = 0\n    if b > best:\n        best = b\n    return best\n\n\ndef main_input(info=0):\n    n,m,q = VI()\n    g = list(range(n))\n    sc = list(range(n))\n    for i in range(n):\n        g[i] = VI() # m elem\n        sc[i] = get_score(g[i])\n    r = list(range(q))\n    for k in range(q):\n        i,j = VI() # i,j - 2 elem\n        i,j = i-1, j-1\n        g[i][j] = 1 - g[i][j]\n        sc[i] = get_score(g[i])\n        print(max(sc))\n\n\ndef __starting_point():\n    main_input()\n\n__starting_point()", "\nn, m, q = [int(c) for c in input().split()]\n\nmatrix = []\nfor i in range(n):\n\n    matrix.append([int(c) for c in input().split()])\n\nmaxperrow = []\n\nfor a in range(n):\n    maxrow = 0\n    maxmax = 0\n    for b in range(m):\n        if matrix[a][b] == 1:\n            maxrow += 1\n            if maxrow > maxmax:\n                maxmax = maxrow\n        else:\n            maxrow = 0\n    maxperrow.append(maxmax)\n\nwinner = []\nfor step in range(q):\n    i, j = [int(c) for c in input().split()]\n    matrix[i-1][j-1] = 1 - matrix[i-1][j-1]\n\n    maxmax = 0\n\n    maxrow = 0\n    for b in range(m):\n        if matrix[i-1][b] == 1:\n            maxrow += 1\n            if maxrow > maxmax:\n                maxmax = maxrow\n        else:\n            maxrow = 0\n    maxperrow[i-1] = maxmax\n    winner.append(max(maxperrow))\n\n\nfor w in winner:\n    print(w)", "__author__ = 'Andrey'\n\n\ndef retest(row):\n    nonlocal table\n    row_n = table[row]\n    m_ax = 0\n    curr = 0\n    for item in row_n:\n        if item == 1:\n            curr += 1\n        if item == 0:\n            m_ax = max(curr, m_ax)\n            curr = 0\n    m_ax = max(curr, m_ax)\n    return m_ax\n\n\nn, m, q = list(map(int, input().split()))\ntable = []\nfor x in range(n):\n    table.append(list(map(int, input().split())))\nmaximums = []\nfor y in range(n):\n    maximums.append(retest(y))\nfor z in range(q):\n    i, j = list(map(int, input().split()))\n    table[i - 1][j - 1] = 1 - table[i - 1][j - 1]\n    maximums[i - 1] = retest(i - 1)\n    print(max(maximums))\n", "a = list()\nb = list()\nn, m, q = [int(s) for s in input().split()]\nfor i in range(n):\n    a.append([s for s in input().split()])\n    b.append(max([len(s) for s in \"\".join(a[i]).split('0')]))\nfor i in range(q):\n    p, o = [int(s)-1 for s in input().split()]\n    a[p][o] = str(1-int(a[p][o]))\n    b[p] = max([len(s) for s in \"\".join(a[p]).split('0')])\n    print(max(b))\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\ndef res(row):\n    ans = 0\n    buf = 0\n    for i in row:\n        if i == 1:\n            buf += 1\n        else:\n            if buf !=0:\n                ans = max(ans, buf)\n                buf = 0\n    ans = max(ans, buf)\n    return ans\n\n(n, m, q) = (int(i) for i in input().split())\ndesk  = []\nscore = []\n\nstart = time.time()\n\nfor j in range(n):\n    row = [ int(i) for i in input().split()]\n    desk.append(row)\n    score.append(res(row))\n\nans = []\nfor k in range(q):\n    (i, j) = (int(l) for l in input().split())\n    i -= 1\n    j -= 1\n    desk[i][j] = 1 if desk[i][j] == 0 else 0\n    score[i]=res(desk[i])\n    ans.append(max(score))\n\nfor i in ans:\n    print(i)\nfinish = time.time()\n#print (finish - start), \"sec\"\n", "n, m, q = list(map(int, input().split()))\na = [[]]\nfor i in range(n):\n    a.append([0] + list(map(int, input().split())))\nx, y = list(map(int, input().split()))\na[x][y] = (a[x][y] + 1) % 2\nma = 0\ncurr = 0\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if a[i][j] == 0:\n            ma = max(curr, ma)\n            curr = 0\n        else:\n            curr += 1\n    ma = max(ma, curr)\n    curr = 0\nres = 0\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if a[i][j] == 0:\n            if curr == ma: res += 1\n            curr = 0\n        else:\n            curr += 1\n    if curr == ma: res += 1\n    curr = 0\nprint(ma)\nfor i in range(q - 1):\n    x, y = list(map(int, input().split()))\n    if a[x][y] == 1:\n        j = y - 1\n        here = 1\n        while j >= 0 and a[x][j] == 1:\n            j -= 1\n            here += 1\n        j = y + 1\n        while j <= m and a[x][j] == 1:\n            j += 1\n            here += 1\n        a[x][y] = 0\n        if here == ma: res -=1\n        if res >= 1: print(ma)\n        else:\n            ma = 0\n            curr = 0\n            for i in range(1, n + 1):\n                for j in range(1, m + 1):\n                    if a[i][j] == 0:\n                        ma = max(curr, ma)\n                        curr = 0\n                    else:\n                        curr += 1\n                ma = max(ma, curr)\n                curr = 0\n            res = 0\n            for i in range(1, n + 1):\n                for j in range(1, m + 1):\n                    if a[i][j] == 0:\n                        if curr == ma: res += 1\n                        curr = 0\n                    else:\n                        curr += 1\n                if curr == ma: res += 1\n                curr = 0\n            print(ma)       \n    else:\n        a[x][y] = 1\n        j = y - 1\n        here = 1\n        while j >= 0 and a[x][j] == 1:\n            j -= 1\n            here += 1\n        j = y + 1\n        while j <= m and a[x][j] == 1:\n            j += 1\n            here += 1      \n        if here > ma:\n            ma = here\n            res = 1\n        elif here == ma:\n            res += 1\n        print(ma)\n        \n        \n", "n, m, q = list(map(int, input().split()))\ndef csum(row):\n    return max(list(map(len, \"\".join(map(str, row)).split(\"0\"))))\n\ngrid = [\"\".join(input().split()) for i in range(n)]\nscore = [max(list(map(len, row.split(\"0\")))) for row in grid]\nfor i in range(q):\n    i, j = list(map(int, input().split()))\n    row = grid[i-1]\n    row = row[:j-1] + (\"1\" if row[j-1] == \"0\" else \"0\") + row[j:]\n    grid[i-1] = row\n    score[i-1] = csum(row)\n    print(max(score))\n", "n, m, q = [int(token) for token in input().split()]\n\ng = []\n\nfor _ in range(n):\n    row = [int(token) for token in input().split()]\n    g.append(row)\n\n\ndef row_score(row):\n    max_count = 0\n    count = 0\n    for item in row:\n        if item == 1:\n            count += 1\n        else:\n            count = 0\n        max_count = max(max_count, count)\n    return max_count\n\n\nrow_cache = [row_score(row) for row in g]\n\n\ndef score():\n    return max(\n        rc for rc in row_cache\n    )\n\n\nfor turn in range(q):\n    i, j = [int(token) - 1 for token in input().split()]\n    g[i][j] = 1 - g[i][j]\n    row_cache[i] = row_score(g[i])\n    print(score())", "values = []\n\n\ndef get_max(row):\n    total = 0\n    max_vv = 0\n\n    for x in row:\n        if x == 1:\n            max_vv += 1\n        else:\n            if max_vv > total:\n                total = max_vv\n            max_vv = 0\n\n    if max_vv > total:\n        total = max_vv\n\n    return total\n\n\ndef __starting_point():\n    n, m, q = map(int, input().split())\n    rows = []\n\n    for i in range(n):\n        rows.append(list(map(int, input().split())))\n        values.append(get_max(rows[-1]))\n\n    for i in range(q):\n        i, j = map(int, input().split())\n        i -= 1\n        j -= 1\n\n        rows[i][j] = 1 - rows[i][j]\n        values[i] = get_max(rows[i])\n\n        print(max(values))\n__starting_point()", "n, m, q = [int(x) for x in input().split()]\ndata = []\nsaveCount = []\nglobalMax = 0\nglobalMaxIndex = -1\nfor i in range(n):\n    temp = [int(x) for x in input().split()]\n    mx = 0\n    curEyes = 0\n    for j in range(m):\n        if temp[j] == 1:\n            curEyes += 1\n            if curEyes > mx:\n                mx = curEyes\n        else:\n            curEyes = 0\n    saveCount.append(mx)\n    if mx > globalMax:\n        globalMaxIndex = i\n        globalMax = mx\n    data.append(temp)\n\nfor i in range(q):\n    y,x = [int(c)-1 for c in input().split()]\n    data[y][x] = 0 if data[y][x] else 1\n    mx = 0\n    curEyes = 0\n    if y == globalMaxIndex:\n        saveCount[y] = 0\n        globalMax = 0\n        for j in range(n):\n            if saveCount[j] > globalMax:\n                globalMax = saveCount[j]\n                globalMaxIndex = j\n    for j in range(m):\n        if data[y][j] == 1:\n            curEyes += 1\n            if curEyes > mx:\n                mx = curEyes\n        else:\n            curEyes = 0\n    if mx > globalMax:\n        print(mx)\n        globalMax = mx\n        globalMaxIndex = y\n    else:\n        print(globalMax)\n    saveCount[y] = mx\n", "from io import StringIO\n\nimport sys\ndata = sys.stdin\n\ndef score_line(row):\n    score = 0\n    max_score = 0\n    combo = False\n    for b in row:\n        if b == 1:\n            if combo:\n                score += 1\n            else:\n                score = 1\n                combo = True\n        else:\n            score = 0\n            combo = False\n        \n        max_score = max(score, max_score)\n    return max_score\n        \nrows = []\n\nn, m, q = map(int, data.readline().split(' '))\nfor i in range(n):\n    rows.append(list(map(int, data.readline().split(' '))))\n\nrow_scores = list(map(score_line, rows))\n    \nfor i in range(q):\n    r, c  = map(int, data.readline().split(' '))\n    rows[r-1][c-1] = 1 - rows[r-1][c-1]\n    row_scores[r-1] = score_line(rows[r-1])\n    print(max(row_scores))", "n, m, q = map(int, input().split(\" \"))\nl = []\n\ndef maxx(l):\n    cmax = 0\n    count = 0\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            if l[i][j] == 1:\n                count += 1\n                if j == (len(l[i])-1) and count > cmax:\n                    cmax = count\n            else:\n                if count > cmax:\n                    cmax = count\n                count = 0\n        count = 0 \n    return cmax   \n\ndef maxi(l):\n    c = 0\n    cmax = 0\n    for i in range(len(l)):\n        if l[i] == 1:\n            c+=1\n            if c > cmax:\n                cmax = c\n        else:\n            c = 0\n    return cmax\n        \nfor i in range(n):\n    li = list(map(int, input().split(\" \")))\n    l.append(li)\n\nfoo = []\n\nfor i in range(len(l)):\n    foo.append(maxi(l[i]))\n\nfor i in range(q):\n    i, j = map(int, input().split(\" \"))\n    l[i-1][j-1] = 1 - l[i-1][j-1]\n    foo[i-1] = maxi(l[i-1])\n    \n    print(max(foo))   ", "import re\n\ndef maxString(a,i,n):\n\ts2 = ''.join(a[i])\n\tif '1' not in s2:\n\t\treturn 0\n\tr = len(max(re.findall(\"1+\",s2),key=len))\n\treturn r\n\ndef flip(x):\n\tif(x == '1'):\n\t\treturn '0'\n\telse:\n\t\treturn '1'\n\nn,m,q = map(int,input().split())\n\na = []\nx = []\n\nfor i in range(n):\n\tx = list(input().split())\n\ta.append(x)\n\ny = []\n\nfor i in range(n):\n\ty.append(maxString(a,i,n))\n\n#print(y)\nz = max(y)\nr = y.index(z)\n\nfor i in range(q):\n\tx1,y1 = map(int,input().split())\n\ta[x1-1][y1-1] = flip(a[x1-1][y1-1])\n\ty[x1-1] = maxString(a,x1-1,n)\n\tz = max(y)\n\tprint(z)", "n, m, q = [int(i) for i in input().split()]\nt = []\nu = []\nfor i in range(n):\n    t.append([int(i) for i in input().split()])\n    s = 0\n    o = 0\n    for k in t[-1]:\n        if k == 1:\n            s+=1\n            o = max(s, o)\n        else:\n            s = 0\n    u.append(o)\nanswer = []\nfor i in range(q):\n    a, b = [int(i)-1 for i in input().split()]\n    if t[a][b] == 1:\n        t[a][b] = 0\n    else:\n        t[a][b] = 1\n    s = 0\n    o = 0\n    for k in t[a]:\n        if k == 1:\n            s+=1\n            o = max(s, o)\n        else:\n            s = 0\n    u[a] = o\n    answer.append(max(u))\nfor i in answer:\n    print(i)\n", "def func(a):\n    s=0\n    per= 0\n    for i in range(len(a)):\n        if a[i] == '1':\n            \n            per+=1\n        else:\n            s=max(s, per)\n            per=0\n    s=max(per, s)\n    return s\ndef main(a):\n    A= []\n    B = [0] * int(a[0])\n    for i in range(int(a[0])):\n        A.append(input().split())\n    for i in range(int(a[0])):\n        B[i] = func(A[i])\n    for i in range(int(a[2])):\n        s = 0\n        k = input().split()\n        A[int(k[0]) - 1][int(k[1]) - 1] = str((int(A[int(k[0]) - 1][int(k[1]) - 1]) + 1) % 2)\n        B[int(k[0]) - 1] = func(A[int(k[0]) - 1])\n        for i in B:\n            s = max(s, i)\n        print(s)\na =input().split()\nmain(a)", "def fff(i):\n    nonlocal a\n    nonlocal m\n    t=0\n    max=0\n    for j in range(m+1):\n        if a[i][j]==0:\n            if t>max:\n                max=t\n            t=0\n        else:\n            t=t+1\n    return max\n\nn,m,q=list(map(int,input().split()))\na=[]\ns=[]\nfor i in range(0,n):\n    w=list(map(int,input().split()))\n    w.append(0)\n    a.append(w)\n    s.append(fff(i))\nfor i in range(q):\n    x,y=list(map(int, input().split()))\n    a[x-1][y-1]=(a[x-1][y-1]+1)%2\n    s[x-1]=fff(x-1)\n    print(max(s))\n        \n\n", "def condMax(row):\n    flag = False\n    ret, cnt = 0, 0\n    for x in row:\n        if flag == False and x == 1:\n            cnt = 1\n            flag = True\n        elif flag == True and x == 1:\n            cnt += 1\n        elif flag == True and x == 0:\n            ret = max(cnt, ret)\n            flag = False\n    if flag == True:\n        ret = max(cnt, ret)\n    return ret\n\nN, M, Q = list(map(int, input().split()))\nboard = [list(map(int, input().split())) for _ in range(N)]\nrows = [condMax(row[:]) for row in board]\n    \nans = max(rows)\nfor i in range(Q):\n    i, j = [int(x)-1 for x in input().split()]\n    board[i][j] ^= 1\n    rows[i] = condMax(board[i][:])\n    ans = max(rows)\n    print(ans)\n", "n, m, q = map(int, input().split())\ndef csum(row):\n    return max(map(len, \"\".join(map(str, row)).split(\"0\")))\n\ngrid = [\"\".join(input().split()) for i in range(n)]\nscore = [max(map(len, row.split(\"0\"))) for row in grid]\nfor i in range(q):\n    i, j = map(int, input().split())\n    row = grid[i-1]\n    row = row[:j-1] + (\"1\" if row[j-1] == \"0\" else \"0\") + row[j:]\n    grid[i-1] = row\n    score[i-1] = csum(row)\n    print(max(score))", "r=lambda:input().split()\ng=lambda s:max(map(len,\"\".join(s).split('0')))\nn,m,q=map(int,r())\na=[r() for _ in range(n)]\nb=list(map(g,a))\nfor _ in range(q):\n    x,y=map(int,r())\n    a[x-1][y-1]=str(1-int(a[x-1][y-1]))\n    b[x-1]=g(a[x-1])\n    print(max(b))", "def func(a):\n    ans = 0\n    an = 0\n    for i in a:\n        if i == 0:\n            ans = max(ans, an)\n            an = 0\n        else:\n            an += 1\n    return max(ans, an)\n\nn, m, q = (int(x) for x in input().split(' '))\na = [[int(x) for x in input().split()] for i in range(n)]\nmas = [func(a[i]) for i in range(n)]\nfor _ in range(q):\n    x, y = (int(i) - 1 for i in input().split(' '))\n    a[x][y] = 1 if a[x][y] == 0 else 0\n    mas[x] = func(a[x])\n    print(max(mas))", "def read_data():\n    n, m, q = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, input().split())))\n    qs = []\n    for i in range(q):\n        x, y = map(int, input().split())\n        qs.append((x-1, y-1))\n    return n, m, q, grid, qs\n\n\ndef max_cons(row):\n    mc = 0\n    tmp = 0\n    for v in row:\n        if v:\n            tmp += 1\n        else:\n            if tmp > mc:\n                mc = tmp\n            tmp = 0\n    return max(mc, tmp)\n\n\ndef solve(n, m, q, grid, qs):\n    mcc = [max_cons(row) for row in grid]\n    for x, y in qs:\n        row = grid[x]\n        row[y] = 1 - row[y]\n        mcc[x] = max_cons(row)\n        print(max(mcc))\n\nparam = read_data()\nsolve(*param)", "rows, cols, changes_count = list(map(int, input().split()))\n\ngrid = [\n    input().split() for _ in range(rows)\n]\n\nchanges = [\n    list(map(int, input().split())) for __ in range(changes_count)\n]\n\nmax_line = [\n    max(list(map(len, \"\".join(row).split(\"0\")))) for row in grid\n]\n\nfor r, c in changes:\n    grid[r-1][c-1] = \"0\" if grid[r-1][c-1] == \"1\" else \"1\"\n    max_line[r-1] = max(list(map(len, \"\".join(grid[r-1]).split(\"0\"))))\n    print(max(max_line))\n"]