["def division(n):\n    if n < 2:\n        return []\n    prime_fac = []\n    for i in range(2,int(n**0.5)+1):\n        cnt = 0\n        while n % i == 0:\n            n //= i\n            cnt += 1\n        if cnt!=0:prime_fac.append((i,cnt))\n    if n > 1:\n        prime_fac.append((n,1))\n    return prime_fac\n\nn = int(input())\ndiv = division(n)\nans = 0\nfor i,e in div:\n    b = 1\n    while b <= e:\n        e -= b\n        b += 1\n        ans += 1\nprint(ans)\n", "from collections import Counter\nimport math\nN = int(input())\nNso = []\nNruto = math.sqrt(N)\nNruto = math.floor(Nruto)\nfor i in range(2, Nruto+1):\n    while N % i == 0:\n        N = N//i\n        Nso.append(i)\n    if N == 1:\n        break\n    Nruto = math.sqrt(N)\n    Nruto = math.floor(Nruto)\nNso.append(N)\nif 1 in Nso:\n    Nso.remove(1)\nNso = Counter(Nso)\nans = 0\nfor v in list(Nso.values()):\n    count = 0\n    for i in range(1, v+1):\n        if count+i > v:\n            break\n        else:\n            count += i\n            ans += 1\n\nprint(ans)\n", "n=int(input())\ndef f(x):\n    z=1\n    while not(z*(z+1)<=2*x<(z+1)*(z+2)):\n        z+=1\n    return z\n\nx=[-1]*(10**6+1) #2\u4ee5\u4e0a\u306e\u81ea\u7136\u6570\u306b\u5bfe\u3057\u3066\u6700\u5c0f\u306e\u7d20\u56e0\u6570\u3092\u8868\u3059\nx[0]=0\nx[1]=1\ni=2\nprime=[]\nwhile i<=10**6:\n    if x[i]==-1:\n        x[i]=i\n        prime.append(i)\n    for j in prime:\n        if i*j>10**6 or j>x[i]:break\n        x[j*i]=j\n    i+=1\nif n==1:\n    print((0))\n    return\n\na=[]\nq=0\nfor i in range(len(prime)):\n    p=prime[i]\n    while n%p==0:\n        q+=1\n        n=n//p\n    if q>0:a.append(q)\n    q=0\n\nans=0\nfor i in range(len(a)):\n    ans+=f(a[i])\nprint((ans if n==1 else ans+1))\n", "import collections\n\n#https://note.nkmk.me/python-prime-factorization/\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\ndef f(n):\n    for i in range(1,20):\n        if n<(i*(i+1))//2:\n            return i-1\n\nn = int(input())\nc = collections.Counter(prime_factorize(n))\nans = 0\nfor i in c.keys():\n    ans += f(c[i])\nprint(ans)", "import math\nfrom collections import defaultdict\nfrom itertools import accumulate\nN=int(input())\ndata=defaultdict(int)\nresult=0\nfor i in range(2,int(math.sqrt(N))+1):\n    while N%i==0:\n        N//=i\n        data[i]+=1\nif N!=1:\n    data[N]+=1\ncumsum=list(accumulate(range(1,10**6*2)))\nfor value in data.values():\n    for i in range(10**6*2):\n        if value<cumsum[i]:\n            result+=i\n            break\nif result==0:\n    if N!=1:\n        result=1\nprint(result)", "from collections import Counter\n\ndef prime_fact(num):\n    prime = []\n    for i in range(2, int(num ** 0.5) + 1):\n        while num % i == 0:\n            prime.append(i)\n            num //= i\n    if num != 1:\n        prime.append(num)\n    return prime\n\nn = int(input())\ncnt = Counter(prime_fact(n))\n\nans = 0\nfor c in cnt.values():\n    tmp = 1\n    while c >= tmp:\n        c -= tmp\n        ans += 1\n        tmp += 1      \nprint(ans)", "n = int(input())\ntemp = []\nfor i in range(2, int(n ** 0.5)+2):\n  if n % i == 0:\n    temp.append([i, 0])\n    while(n % i == 0):\n      n /= i\n      temp[-1][1] += 1\nelse:\n  if n != 1:\n    temp.append([n, 1])\n#print(temp)\nans = 0\nfor i in range(len(temp)):\n  count = 1\n  while(temp[i][1] >= count):\n    ans += 1\n    temp[i][1] -= count\n    count += 1\nif len(temp) == 0:\n  print((0))\nelse:\n  print(ans)\n", "N = int(input())\npri_cnt = {}\nn = N\ni = 2\n\nwhile i ** 2 <= N:\n  while n % i == 0:\n    if i not in pri_cnt:\n      pri_cnt[i] = 1\n    else:\n      pri_cnt[i] += 1\n    n = n / i\n  if (i == 2):\n    i += 1\n  else:\n    i += 2\n\nif n > 1:\n  pri_cnt[int(n)] = 1\n\nans = 0\nfor pri, cnt in pri_cnt.items():\n  count = 1\n  remain = cnt\n  while remain >= count:\n    ans += 1\n    remain -= count\n    count += 1\nprint(ans)", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy,bisect\n#from operator import itemgetter\n#from heapq import heappush, heappop\n#import numpy as np\n#from scipy.sparse.csgraph import breadth_first_order, depth_first_order, shortest_path, floyd_warshall, dijkstra, bellman_ford, johnson\n#from scipy.sparse import csr_matrix\n#from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN\nimport sys\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nnf = lambda: float(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnb = lambda: list(map(float, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\nN = ni()\nres = factorization(N)\nans = 0\nsum_ = [x for x in range(1, 200)]\nfor i in range(len(sum_)-1):\n    sum_[i+1] += sum_[i]\nfor k, v in res:\n    ans += bisect.bisect_right(sum_, v)\nif N == 1:\n    print(0)\nelse:\n    print(ans)", "from collections import Counter\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nn = int(input())\n\nl = prime_factorize(n)\nc = Counter(l)\nv = c.values()\nans = 0\nfor i in v:\n    a = 0\n    for j in range(1, 1000000):\n        a += j\n        if a > i:\n            ans += j-1\n            break\nprint(ans)", "def factrize(num):\n    factor = {}\n    div = 2\n    s = int(num**0.5)+1\n    while div < s:\n        div_cnt = 0\n        while num % div == 0:\n            div_cnt += 1\n            num //= div\n        if div_cnt != 0:\n            factor[div] = div_cnt\n        div += 1\n    if num > 1:\n        factor[num] = 1\n    return factor\n  \nn = int(input())\ncnt = factrize(n)\n\nans = 0\nfor c in cnt.values():\n    tmp = 1\n    while c >= tmp:\n        c -= tmp\n        ans += 1\n        tmp += 1      \nprint(ans)", "import sys\ndef input(): return sys.stdin.readline().rstrip()\nclass Sieve2: #\u221an\u307e\u3067\u306e\u7d20\u56e0\u6570\u3067\u8a66\u3057\u5272\u308a \u524d\u51e6\u7406O(\u221anloglogn+\u221an/logn)\n    def __init__(self,n):\n        self.primes=[]\n        self.f=[0]*(int(n**0.5)+1) #\u3075\u308b\u3044\uff08\u7d20\u6570\u306a\u3089\u305d\u306e\u5024\uff09\n        self.f[0]=self.f[1]=-1\n        for i in range(2,int(n**0.5)+1): #\u7d20\u6570\u30ea\u30b9\u30c8\u4f5c\u6210\n            if self.f[i]: continue\n            self.primes.append(i)\n            self.f[i]=i\n            for j in range(i*i,int(n**0.5)+1,i):\n                if not self.f[j]:\n                    self.f[j]=i  #\u6700\u5c0f\u306e\u7d20\u56e0\u6570\u3092\u4ee3\u5165\n\n    def prime_fact(self,x): #\u7d20\u56e0\u6570\u5206\u89e3 {2:p,3:q,5:r,...}\n        fact_dict=dict()\n        for p in self.primes:\n            if p*p>x:break\n            while x%p==0:\n                x//=p\n                fact_dict[p]=fact_dict.get(p,0)+1\n        if x>1:fact_dict[x]=fact_dict.get(x,0)+1\n        return fact_dict\n\ndef main():\n    n = int(input())\n    Sieve = Sieve2(n)\n    prime_dict = Sieve.prime_fact(n)\n    ans = 0\n    for fact in prime_dict.values():\n        f = fact\n        x = 1\n        while f > 0:\n            if f >= x:\n                ans += 1\n            f -= x\n            x += 1\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\npri_cnt = {}\nn = N\ni = 2\n\nwhile i ** 2 <= N:\n  while n % i == 0:\n    if i not in pri_cnt:\n      pri_cnt[i] = 1\n    else:\n      pri_cnt[i] += 1\n    n = n / i\n  if (i == 2):\n    i += 1\n  else:\n    i += 2\n\nif n > 1:\n  pri_cnt[int(n)] = 1\n\nans = 0\nfor pri, cnt in pri_cnt.items():\n  count = 1\n  remain = cnt\n  while remain >= count:\n    ans += 1\n    remain -= count\n    count += 1\nprint(ans)", "import copy\nn=int(input())\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nL=prime_factorize(n)\nM=L.copy()\nM=list(set(M))\n\ncnt=0\nfor x in M:\n    m=L.count(x)\n    for i in range(L.count(x)):\n        if m-i-1 >= 0:\n            m -= i+1\n            cnt += 1\n\nprint(cnt)\n", "def prime_factors(n):\n    i = 2\n    factors = []\n    while i**2 <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            factors.append(i)\n            n = n // i\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef resolve():\n    N = int(input())\n    import collections\n    factors = collections.Counter(prime_factors(N))\n    numbers = [0,1,1,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9]\n    cnt = 0\n    for k, v in list(factors.items()):\n        cnt += numbers[v]\n    print(cnt)\n\n\nif '__main__' == __name__:\n    resolve()\n", "N = int(input())\n\ndef Prime_Factorize(n):\n    primes = []\n    while n%2 == 0:\n        n//=2\n        primes.append(2)\n    f = 3\n    while f*f <= n:\n        if n%f == 0:\n            n//=f\n            primes.append(f)\n        else:\n            f += 2\n    if n != 1:\n        primes.append(n)\n    return primes\n\nPrimes = Prime_Factorize(N)\ncnt = 0\nfor p in Primes:\n    e = 1\n    z = p\n    while (N%z == 0) and (N >= z):\n        N //= z\n        e += 1 \n        z = p**e\n        cnt += 1\n    while N%p == 0:\n        N //= p\nprint(cnt)", "import math\n\nn = int(input())\nd = n\nm = {}\n\nfor i in range(2, int(math.sqrt(n)) + 1):\n    m[i] = 0\n    while (d % i == 0):\n        d //= i\n        m[i]+=1\nres = 0\nfor i in list(m.values()):\n    res+=int(math.sqrt(i*2+0.25)-0.5)\n\nif d > 1:\n    res += 1\nprint(res)\n", "def prime_factorize(n):\n    arr = []\n    while n % 2 == 0:\n        arr.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            arr.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        arr.append(n)\n    return arr\n\n\nfrom collections import Counter\n\nn = int(input())\nc = Counter(prime_factorize(n))\ncnt = 0\nfor k, v in list(c.items()):\n    if v == 1:\n        cnt += 1\n    else:\n        v0 = 1\n        while v-v0 >= 0:\n            v -= v0\n            cnt += 1\n            v0 += 1\n\nprint(cnt)\n", "def factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n ** 0.5 // 1)) + 1):\n        if temp % i == 0:\n            cnt = 0\n            while temp % i == 0:\n                cnt += 1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp != 1:\n        arr.append([temp, 1])\n\n    if arr == []:\n        arr.append([n, 1])\n\n    return arr\n\n\nn = int(input())\nnf = factorization(n)\nans = 0\n\nif n == 1:\n    print(ans)\nelse:\n    for i in nf:\n        q = i[1]\n        c = 1\n        while q > 0:\n            ans += 1\n            c += 1\n            q -= c\n    print(ans)", "import collections\n\nn = int(input())\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nif n == 1: # 1\n    print((0))\n    return\n\nc = collections.Counter(prime_factorize(n))\ncounts = list(c.values())\nans = 0\n\nfor i in counts:\n    x = 0\n    for j in range(i):\n        x += j + 1\n        if i >= x:\n            ans += 1\n        else:\n            break\n\nprint(ans)\n", "n = int(input())\nm = n\nprimes = {}\n\nfor i in range(2, int(n**0.5+2)):\n  while m % i == 0:\n    m //= i\n    if i not in primes:\n      primes[i] = 1\n    else:\n      primes[i] += 1\n  if i > m:\n    break\n\nif m != 1:\n  primes[m] = 1\n\ncnt = 0\nnum = 0\nflag = True\n\nwhile flag == True:\n  num += 1\n  flag = False\n  for i in primes:\n    if 0 < primes[i] <= num*2:\n      cnt += 1\n      primes[i] = 0\n    elif primes[i] > num*2:\n      cnt += 1\n      flag = True\n      primes[i] -= num\n\nprint(cnt)", "a,n=0,int(input())\nfor i in range(2,10**6):\n  x=j=0\n  while n%i<1:n//=i;x+=1\n  while x>j:a+=1;j+=1;x-=j\nprint(a+(n>1))", "n = int(input())\nans = 0\nfor i in range(2,(int(n**0.5))+1):\n    x = i\n    while n%x==0:\n        n = n//x\n        x*=i\n        ans+=1\n    while n%i==0:\n        n = n//i\nif n!=1:\n    ans+=1\nprint(ans)", "from collections import defaultdict\n\nN = int(input())\n\nif N == 1:\n    print(0)\n    return\n\np = defaultdict(int)\n\nwhile N % 2 == 0:\n    p[2] += 1\n    N //= 2\nf = 3\nwhile f * f <= N:\n    if N % f == 0:\n        p[f] += 1\n        N //= f\n    else:\n        f += 2\nif N != 1:\n    p[N] += 1\n\nans = 0\n\nfor v in p.values():\n    n = 1\n    i = 1\n    while n <= v:\n        ans += 1\n        i += 1\n        n += i\n\nprint(ans)", "import math\nN = int(input())\n\ndef prime_decomposition(x):\n  i = 2\n  ls = []\n  while i * i <= x:\n    while x % i == 0:\n      x /= i\n      ls.append(i)\n    i += 1\n  if x > 1:\n    ls.append(int(x))\n  return ls\n\ndef counter(n):\n  i = 1\n  while n > 0.5*(i+1)*(i+2)-1:\n    i += 1\n  return i\n\ncnt = 0\nnumbers = prime_decomposition(N)\nset_number = set(numbers)\n\nfor i in set_number:\n  cnt += counter(numbers.count(i))\n  \nprint(cnt)", "import math\nimport sys\n##### graph implementation with adjacancy list#####\nclass Graph:\n    def __init__(self,Nodes,is_directed=False):\n        self.nodes=Nodes\n        self.adj_list={}\n        self.is_directed=is_directed\n \n        for node in self.nodes:\n            self.adj_list[node]=[]\n            \n    def add_edge(self,u,v):\n        self.adj_list[u].append(v)\n        if self.is_directed==False:\n            self.adj_list[v].append(u)\n \n    def print_graph(self):\n        for node in self.nodes:\n            print((node,\"->\",self.adj_list[node]))\n \n    def degree_node(self,node):\n        return len(self.adj_list[node])\n \n    def dfsUTIL(self,v,visited,parents=[]):\n        #print(v,end=\" \")\n        visited[v]=True\n        for i in self.adj_list[v]:\n            if visited[i]==False:\n                self.dfsUTIL(i,visited,parents)\n                parents.append(i)        \n    \n    def dfs(self,v):\n        visited=[False]*(max(self.adj_list)+1)\n        parents=[v]\n        self.dfsUTIL(v,visited,parents)\n        return len(parents)\n        \n        \n        \n#####sorting a dictionary by the values#####\ndef dict_sort(ans):\n    ans=sorted(list(ans.items()),reverse=True,key=lambda kv:(kv[1]))\n##### naive method for testing prime or not O(n^.5)#####\ndef is_prime(n):\n    if n==1:\n        return 0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n#####swap function#####\ndef swap(a,b):\n    temp=a\n    a=b\n    b=temp\n    return a,b\n#####Primes till Nth O(n)#####\ndef seive_primes(n):\n    flag=[0]*(n+10)\n    flag[1]=flag[0]=1\n    i=2\n    while i*i<=n+1:\n        if flag[i]==0:\n            j=i*i\n            while j<=n+1:\n                flag[j]=1\n                j+=i\n        i+=1\n    return flag\n#####greatest common divisor of two numbers#####\ndef gcd(a,b):\n    if b==0:\n        return a\n    return gcd(b,a%b)\n#####least common multiplyer of two numbers#####\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\n#####function that return all the letters#####\ndef alphabates():\n    return \"abcdefghijklmnopqrstuvwxyz\"\n#####binary search O(logN)#####\ndef binary_search(ls,n,flag):\n    low=0\n    hi=n-1\n    while(low<=hi):\n        mid=(low+hi)//2\n        if ls[mid]==flag:\n            return mid\n        elif ls[mid]>flag:\n            hi=mid-1\n        else:\n            low=mid+1\n    return -1\n#####quadratic#####\ndef qdrt(a,b,c):\n    chk=b*b-4*a*c\n    if chk>=0:\n        ans1=(-b+chk**0.5)/(2*a)\n        ans2=(-b-chk**0.5)/(2*a)\n        return [int(ans1),int(ans2)]\n    return -1\n#####taking an array/list as input#####\ndef inp():\n    ls=list(map(int,input().split()))\n    return ls\n#####taking multiple inputs#####\ndef mult_inp():\n    return list(map(int,input().split()))\n#####Main function starts from here#####\nn=int(input())\nd={}\nwhile(n%2==0):\n    if 2 in d:\n        d[2]+=1\n    else:\n        d[2]=1\n    n/=2\nfor i in range(3,int(n**0.5)+1,2):\n    while(n%i==0):\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n        n/=i\nn=int(n)\nif n>1:\n    d[n]=1\nn=1\n#print(d,n)\nans=0\nfor i in d:\n    c=-2*d[i]\n    a=b=1\n    ls=qdrt(a,b,c)\n    if ls[0]>=0:\n        ans+=ls[0]\n    elif ls[1]>=0:\n        ans+=ls[1]\nprint(ans)\n    \n\n    \n    \n    \n            \n    \n    \n", "import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\n#import numpy as np\nfrom math import sqrt, floor\ndef main():\n    def factorization(n):\n        l = []\n        t = n\n        for i in range(2, int(-(-n ** 0.5 // 1)) + 1):\n            if t % i == 0:\n                cnt = 0\n                while t % i == 0:\n                    cnt += 1\n                    t = t // i\n                l.append([i, cnt])\n        if t != 1:\n            l.append([t, 1])\n        if not l:\n            l.append([n, 1])\n        return l\n    n = int(input())\n    if n == 1:\n        print((0))\n        return\n    p = factorization(n)\n    r = 0\n    for pe in p:\n        pe1 = pe[1]\n        cnt = 1\n        while pe1 >= cnt:\n            pe1 -= cnt\n            cnt = cnt + 1\n            r += 1\n    print(r)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def div(n):\n    i = 2\n    a = n\n    D = {}\n    tmp = 1\n    while i*i <= n:\n        cnt = 0\n        while a%i == 0:\n            a = a // i\n            tmp *= i\n            cnt += 1\n        if cnt > 0:\n            D[i] = cnt\n        i += 1\n    if tmp != n:\n        D[n] = 1\n    return D\n\nN = int(input())\nD = div(N)\nans = 0\nfor v in D.values():\n    i = 1\n    total = 1\n    while v >= total+(i+1):\n        i += 1\n        total += i\n    ans += i\n\nprint(ans)", "import bisect\nn=int(input())\nif n==1:\n    print(0)\n    return\ndef factorize(n):\n    a=[]\n    while n%2==0:\n        a.append(2)\n        n//=2\n    f=3\n    while f*f<=n:\n        if n%f==0:\n            a.append(f)\n            n//=f\n        else:\n            f+=2\n    if n!=1:\n        a.append(n)\n    return a\ndef ra(a):\n    ll,l=[],1\n    for i in range(len(a)-1):\n        if a[i]==a[i+1]:\n            l+=1\n        else:\n            ll.append(l)\n            l=1\n    ll.append(l)\n    return ll\nl=ra(factorize(n))\nc=[1]\nfor i in range(2,10**4):\n    c.append(i+c[-1])\nans=0\nfor i in l:\n    ans+=bisect.bisect_left(c,i)\n    if i in set(c):\n        ans+=1\nprint(ans)", "n = int(input())\nm = n\nprimes = {}\n \nfor i in range(2, int(n**0.5+2)):\n  while m % i == 0:\n    m //= i\n    if i not in primes:\n      primes[i] = 1\n    else:\n      primes[i] += 1\n  if i > m:\n    break\n \nif m != 1:\n  primes[m] = 1\n \ncnt = 0\nnum = 0\nflag = True\n \nwhile flag == True:\n  num += 1\n  flag = False\n  for i in primes:\n    if 0 < primes[i] <= num*2:\n      cnt += 1\n      primes[i] = 0\n    elif primes[i] > num*2:\n      cnt += 1\n      flag = True\n      primes[i] -= num\n \nprint(cnt)", "import math\nN=int(input())\nans=0\nN_sqrt=int(math.sqrt(N))\nprimeset=set()\nprimeset.add(2)\nif N==1:\n    print((0))\nelse:\n    for i in range(2,N_sqrt+5):\n        if N%i==0:\n            #print(i)\n            ans+=1\n            nowdiv=2#\u3053\u306e\u56de\u6570\u5272\u308c\u308c\u3070ans\u306b1\u8db3\u305b\u308b\n            numofdiv=0\n            N//=i\n            while(N%i==0):\n                numofdiv+=1\n                N//=i\n                if numofdiv==nowdiv:\n                    ans+=1\n                    nowdiv+=1\n                    numofdiv=0\n    if N!=1:\n        ans+=1\n    print(ans)#N\u304c\u7d20\u6570\u306e\u3068\u304dans=1\n\n", "#!/usr/bin/env python3\n\n#import\nimport math\n#import numpy as np\nN = int(input())\n#= input()\n#= map(int, input().split())\n#= list(map(int, input().split()))\n#= [input(), input()]\n#= [list(map(int, input().split())) for _ in range(N)]\n#= [int(input()) for _ in range(N)]\n#= {i:[] for i in range(N)}\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\nres = factorization(N)\n\nli = [0] * 101\nfor i in range(1, 101):\n    li[i] = li[i - 1] + i\n\nans = 0\nfor r in res:\n    if r[0] == 1:\n        continue\n    i = 0\n    while li[i] <= r[1]:\n        i += 1\n    ans += i - 1\n\nprint(ans)\n\n", "memo = [[None for i in range(50)] for j in range(50)]\ndef opt(n,k): # exponents must be >= k\n\tif n < k:\n\t\treturn 0\n\telse:\n\t\tif memo[n][k]==None:\n\t\t\tmemo[n][k] = max(1+opt(n-k,k+1),opt(n,k+1))\n\t\treturn memo[n][k]\n\ndef prime_factorize(n):\n\tpf = {}\n\td = 2\n\torig_n = n\n\twhile d*d <= orig_n:\n\t\twhile n%d==0:\n\t\t\tpf[d] = pf.get(d,0)+1\n\t\t\tn //= d\n\t\td += 1\n\n\tif n > 1:\n\t\tpf[n] = 1\n\treturn pf \n\nprint(sum([opt(e,1) for e in prime_factorize(int(input())).values()]))", "n = int(input())\n#a, b, c, x, y = map(int, input().split())\n#al = list(map(int, input().split()))\n#al=[list(input()) for i in range(n)]\n\n\ndef prime_factorize(n):\n    n_origin = n+0\n    primelist = []\n    a = 2\n    while a*a <= n_origin:\n        if n % a != 0:\n            a += 1\n            continue\n        ex = 0\n        while n % a == 0:\n            ex += 1\n            n = n//a\n        primelist.append([a, ex])\n        a += 1\n    if n != 1:\n        primelist.append([n, 1])\n    return primelist\n\n\ndef sumf(n):\n    return n*(n+1)//2\n\n\nprimes = prime_factorize(n)\nans = 0\nfor pl in primes:\n    a, ex = pl\n    i = 0\n    while True:\n        if sumf(i+1) > ex:\n            break\n        i += 1\n    ans += i\nprint(ans)\n", "def factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\nN = int(input())\nfac = factorization(N)\nAnswer = 0\nfor i in range(len(fac)):\n    faci = fac[i][1]\n    An = 1\n    while faci >= An:\n        Answer += 1\n        faci -= An\n        An +=1\nif N == 1:\n    Answer = 0\nprint(Answer)", "N=int(input())\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\nl=prime_factorize(N)\nL=set(l)\nz=0\nfor j in L:\n  i=1\n  while i*(i+1)//2<=l.count(j):\n    i+=1\n  z+=i-1\nprint(z)", "N = int(input())\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\nans = 0\n\nsoinsu_list = factorization(N)\n#print(soinsu_list)\nfor i in range(len(soinsu_list)):\n    cnt = 0\n    while soinsu_list[i][0] != 1:\n        cnt += 1\n        soinsu_list[i][1] -= cnt\n        if soinsu_list[i][1] < 0:\n            cnt -= 1\n            break\n    ans += cnt\nprint(ans)\n", "def factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\nn=int(input())\nans=0\ncnt=[0]\nfor i in range(1,9):\n    for _ in range(i+1):\n        cnt.append(i)\nlis=factorization(n)\n\n\nfor a,b in lis:\n    ans+=cnt[b]\nif n==1:\n    print((0))\nelse:print(ans)\n", "n = int(input())\n\nif n == 1:\n    print(0)\n    return\n\ndef is_prime(n):\n    if n <= 1: return False\n    for i in range(2, int(n**0.5) + 1):\n        if n%i == 0: return False\n    return True\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            divisors.append(i)\n            if i!=n//i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors\n \nans = []\ncnt = 0\nX = make_divisors(n)[1:]\nfor x in X:\n    if is_prime(x):\n        ans.append(x)\n        n //= x\n        cnt += 1\n        e = 2\n        while x**e < n:\n            ans.append(x**e)\n            e += 1\n    elif x in ans:\n        if n%x == 0:\n            n //= x\n            cnt += 1\nprint(cnt)", "import sys\ninput = sys.stdin.readline\n\n#l = list(map(int, input().split()))\n#import numpy as np\n#arr = np.array([int(i) for i in input().split()])\n'''\na,b=[],[]\nfor i in range():\n    A, B = map(int, input().split())\n    a.append(A)   \n    b.append(B)'''\n\nn=int(input())\ndef soinsuu(n):\n    #\u7d20\u56e0\u6570\u5206\u89e3\u30ea\u30b9\u30c8\u751f\u6210,collections.Counter(a)\u3067\u500b\u6570\u53d6\u5f97\n    #1\u306b\u5bfe\u3057\u3066\u306f[]\u3092return\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\nfrom collections import Counter\na=Counter(soinsuu(n))\nif n==1:\n    print(0)\n    return\n#print(a)\ncnt=0\nfor i in range(1,1+max(a.values())):\n    for item in a.keys():\n        #print(i,item)\n        if n%(item**i)==0:\n            n//=item**i\n            #print(n,item)\n            cnt+=1\n            if n==1:\n                break\n\nprint(cnt)", "import collections\nimport sys\ndef input(): return sys.stdin.readline().rstrip()\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nN = int(input())\ncount = 0\nprime_list = collections.Counter(prime_factorize(N))\n\nfor key in prime_list:\n    num = prime_list[key]\n    for i in range(1, num+1):\n        if i <= num:\n            num -= i\n            count += 1\n        else:\n            break\n\nprint(count)", "n = int(input())\n \nfrom collections import Counter\n \nf = Counter()\n\nfactors = []\nfor i in range(2, min(int(n ** 0.5 + 1), n + 1)):\n  if n % i == 0:\n      factors.append(i)\n      factors.append(n // i)\n\nfactors.sort()\n\nfor factor in factors:\n    while n % factor == 0:\n        n //= factor\n        f[factor] += 1\n\n \n    \ndef bsearch(test, lo, hi):\n  while lo != hi:\n    mid = (lo + hi + 1) // 2\n    if test(mid):\n      lo = mid\n    else:\n      hi = mid - 1\n  return lo\n \nans = 0\nfor p, q in list(f.items()):\n  ans += bsearch(lambda w: w * (w + 1) // 2 <= q, 0, 10 ** 12)\n \nif ans == 0 and n > 1:\n    print((1))\nelse:\n    print(ans)\n", "# ==================================================-\n# \u9ad8\u901f\u7d20\u56e0\u6570\u5206\u89e3\n# \"\"\"2\u4ee5\u4e0a\u306e\u6574\u6570n => [[\u7d20\u56e0\u6570, \u6307\u6570], ...]\u306e2\u6b21\u5143\u30ea\u30b9\u30c8\"\"\"\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\n\nn=int(input())\nsoinnsuu=factorization(n)\n\ndef get_times(n):\n    if n<3:\n        return 1\n    elif n<6:\n        return 2\n    elif n<10:\n        return 3\n    elif n<15:\n        return 4\n    elif n<21:\n        return 5\n    elif n<28:\n        return 6\n    elif n<36:\n        return 7\n    elif n<45:\n        return 8\n    else:\n        return 9\nans=0\nfor i in soinnsuu:\n    sisuu=i[1]\n    ans+=get_times(sisuu)\nif n==1:\n    print(0)\nelse:\n    print(ans)", "n = int(input())\nn1 = n\npn = []\ncnt = 2\nans = 0\nwhile cnt <= int(n ** 0.5):\n    while n1 % cnt == 0:\n        n1 = n1 // cnt\n        pn.append(cnt)\n    cnt += 1\npns = list(set(pn))\nansa = []\nfor i in pns:\n    ansa.append(pn.count(i))\nfor i in ansa:\n    x = 1\n    while i > 0:\n        i -= x\n        if i < 0:\n            break\n        x += 1\n        ans += 1\nprint(ans + 1 if n1 != 1 else ans)", "# import itertools\n# import math\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n\nN = int(input())\n# S = input()\n# n, *a = map(int, open(0))\n# N, M = map(int, input().split())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n# S = input()\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\n    \n\nl_2d = factorization(N)\n\ncnt = 0\nfor l in l_2d:\n    p = l[0]\n    e = l[1]\n    if p == 1:\n        continue\n    for i in range(1, 10 ** 7):\n        if e < i:\n            break\n        cnt += 1\n        e -= i\nprint(cnt)", "N = int(input())\nM = N\npf = []\nK = 2\n\nwhile K*K <= M:\n  while N%K == 0:\n    pf.append(K)\n    N = N//K\n  K += 1\n  \nif N != 1:\n  pf.append(N)\n\nans = 0\n\nfor i in set(pf):\n  C = pf.count(i)\n  for j in range(20):\n    if j*(j+1)//2 <= C < (j+1)*(j+2)//2:\n      ans += j\n  \nprint(ans)", "N=int(input())\n\ndef divisor(x):\n    div=[]\n    for i in range(1,int(x**(1/2))+1):\n        if x%i==0:\n            div.append(i)\n            if i!=x//i:\n                div.append(x//i)\n    return sorted(div)\n\ndef factorization(n):\n    arr=[]\n    temp=n\n    for i in range(2,int(n**(1/2))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp//=i\n            arr.append([i,cnt])\n        \n    if temp!=1:\n        arr.append([temp,1])\n\n    if arr==[]:\n        arr.append([n,1])\n    \n    return arr\n\nzt=[1]\nans=0\nwhile N>1:\n    for i in divisor(N):\n        if i not in zt:  \n            if len(factorization(i))==1:\n                z=i\n                zt.append(z)\n                break\n    if z==0:\n        break\n    N=N//z\n    ans+=1\n    z=0\n\nprint(ans)", "#!/usr/bin/env python3\nimport sys\nfrom itertools import chain\nimport numpy as np\nimport math\n\n# from itertools import combinations as comb\n# form bisect import bisect_left, bisect_right, insort_left, insort_right\n# from collections import Counter\n# import numpy as np\n\n\ndef factorize(n: int):\n    \"\"\"n\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\"\"\"\n    # 2\n    count = 0\n    while n % 2 == 0:\n        count += 1\n        n = n // 2\n    if count > 0:\n        arr = [(2, count)]\n    else:\n        arr = []\n\n    # 3 \u4ee5\u964d\n    for facter in range(3, n + 1, 2):\n        if facter * facter > n:\n            if n > 1:\n                arr.append((n, 1))\n            break\n        count = 0\n        while n % facter == 0:\n            count += 1\n            n = n // facter\n        if count > 0:\n            arr.append((facter, count))\n\n    return arr\n\n\ndef case(n):\n    t = 0\n    i = 1\n    while True:\n        t += i\n        if t > n:\n            return i - 1\n        i += 1\n\n\ndef solve(N: int):\n    factors = factorize(N)\n    answer = 0\n    for f, count in factors:\n        answer += case(count)\n    return answer\n\n\ndef main():\n    tokens = chain(*(line.split() for line in sys.stdin))\n    # N = map(int, line.split())\n    N = int(next(tokens))  # type: int\n    answer = solve(N)\n    print(answer)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\n\nif N == 1:\n  print(0)\n  return\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\ndef p_num(m):\n  ret = 0\n  for j in range(1,10**12):\n    ret += j\n    if ret <= m < ret+(j+1):\n      ans = j\n      break\n  return ans\n\np = factorization(N)\n\ncnt = 0\nfor k in range(len(p)):\n  cnt += p_num(p[k][1])\nprint(cnt)", "import collections\n\nn = int(input())\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nif n == 1: # 1\n    print(0)\n    return\n\nc = collections.Counter(prime_factorize(n))\n_, counts = zip(*c.most_common())\n\nl = list(counts)\nans = 0\n\nfor i in l:\n    x = 0\n    for j in range(i):\n        x += j + 1\n        if i >= x:\n            ans += 1\n        else:\n            break\n\nprint(ans)", "from collections import Counter\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nn = int(input())\nc = Counter(prime_factorize(n))\nv = list(c.values())\n\nans = 0\nfor i in v:\n    k = i\n    s = 0\n    for j in range(1, i+1):\n        s += j\n        if s <= k:\n            ans += 1\n        else:\n            break\nprint(ans)", "def factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\nN = int(input())\n\nif N == 1:\n    print(\"0\")\n    return\n\nfactors = factorization(N)\n\nans = 0\nfor factor in factors:\n    num = factor[1]\n    x = 1\n    for i in range(num+1):\n        if i**2 + i > 2*num:\n            x = i-1\n            break\n#    print(num,x)                                                                                      \n    ans += x\n\nprint(ans)\n", "from collections import defaultdict\nn = int(input())\n\nd = defaultdict(int)\n\ni = 2\nwhile i * i <= n:\n    while n % i == 0:\n        d[i] += 1\n        n /= i\n    i += 1\nif n != 1:\n    d[n] += 1\n\nans = 0\nfor v in list(d.values()):\n    # x * (x + 1) // 2 <= v\u3068\u306a\u308b\u6700\u5927\u306ex\n    x = 0\n    while (x + 1) * (x + 2) // 2 <= v:\n        x += 1\n    ans += x\nprint(ans)\n", "import math\nimport numpy as np\nn = int(input())\n\ns = math.sqrt(n)\ni = 2\nf = {}\nwhile i <= s:\n    while n % i == 0:\n        f[i] = f.get(i,0)+1\n        n = n // i\n    i += 1\n\nans = 0\nfor x in f.values():\n    e = 0\n    cumsum = 0\n    while e + cumsum + 1 <= x:\n        e += 1\n        cumsum += e\n    ans += e\nprint(ans+(n>1))", "import bisect\ndef factorization(n):\n    if n == 1:\n        return []\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\nn = int(input())\n\nsigma = [1]\nfor i in range(2, 20):\n    sigma.append(i+sigma[i-2])\nans = 0\nfor i, j in factorization(n):\n    ans += bisect.bisect_right(sigma, j)\n\nprint(ans)", "import math\nn=int(input())\ndef fac(n):\n    arr=[]\n    temp=n\n    for i in range(2,math.ceil(math.sqrt(n)+1)):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp//=i\n            arr.append([i,cnt])\n    if temp!=1:\n        arr.append([temp,1])\n    if arr==[]:\n        arr.append([n,1])\n    return arr\nl=fac(n)\nif n==1:\n    print((0))\nelse:\n    ans=0\n    for i in range(len(l)):\n        count=l[i][1]\n        p=0\n        k=1\n        while count>0:\n            if count-k<0:\n                break\n            p+=1\n            count-=k\n            k+=1\n        ans+=p\n    print(ans)\n\n\n", "import collections\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f**2 <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n  \ncount = 0\nN = int(input())\n\nif N <= 1:\n  print(0)\n  return\nelse:\n  c = collections.Counter(prime_factorize(N))\n\n  K = [sum(range(1,i)) for i in range(2,11)]\n  # = [1, 3, 6, 10, 15, 21, 28, 36, 45]\n \n  for i in c:\n    for j in range(1,len(K)):\n      if c[i] < K[j]:\n        count += j\n        break\n\n  print(count)", "from collections import defaultdict\n\nN = int(input())\n\ndef factorize(N):\n    factors = defaultdict(int)\n    i = 2\n    while i * i <= N:\n        factor = 0\n        while N % i == 0:\n            N //= i\n            factor += 1\n        if factor > 0:\n            factors[i] = factor\n        i += 1\n    if N > 1:\n        factors[N] = 1\n    return factors\n\ndef to_cnt(n):\n    i = 0\n    while n >= i+1:\n        n-=(i+1)\n        i += 1\n    return i\n\nans = 0\nfor _, n in factorize(N).items():\n    ans += to_cnt(n)\nprint(ans)", "def find_primes(n):\n    ps = []\n    t = [True] * n\n    t[0] = t[1] = False\n    for i in range(2, n):\n        if not t[i]:\n            continue\n        ps.append(i)\n        for j in range(i, n, i):\n            t[j] = False\n    return ps\n\n\ndef solve(string):\n    n = int(string)\n    if n == 1:\n        return \"0\"\n    rn = int(n**0.5 + 1)\n    ps = find_primes(rn)\n    ans = 0\n    for i in ps:\n        k = 1\n        while n % (i**k) == 0:\n            ans += 1\n            n //= i**k\n            k += 1\n    return str(ans + (n >= rn))\n\n\ndef __starting_point():\n    import sys\n    print((solve(sys.stdin.read().strip())))\n\n__starting_point()", "import sys\nN = int(input())\nif N == 1:\n    print(0)\n    return\ndef prime2(N):\n    arr = []\n    temp = N\n    setprime = set()\n    for i in range(2, int(-(-N**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            setprime.add(i)\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n        setprime.add(temp)\n\n    if arr==[]:\n        arr.append([N, 1])\n\n    return arr,setprime\n\narr,_ = prime2(N)\nls = []\nans = 0\nfor i in arr:\n    ls.append(i[1])\nfor j in ls:\n    k = 1\n    ii = 0\n    while j >= k:\n        j -= k\n        k += 1\n        ii += 1\n    ans += ii\nprint(ans)", "import math\nn = int(input())\n\n#Prime factoring\npf = []\nfor i in range(2,math.ceil(n**0.5)+1):\n    temp = 0\n    while n%i==0:\n        n /= i\n        temp += 1\n    if temp:\n        pf.append(temp)\n    if n==1:\n        break\nif n!=1:\n    pf.append(1)\n\nans =  0\nfor i in range(len(pf)):\n    j = 1\n    while pf[i]-j>=0:\n        ans += 1\n        pf[i] -= j\n        j += 1\nprint(ans)", "from collections import defaultdict\nfrom math import sqrt\n\ndef main():\n    n = int(input())\n    wi = 2\n    cnt = 0\n    d = defaultdict(lambda:0)\n    fi = int(sqrt(1e12)+1)\n    for i in range(2, fi):\n        while n % i == 0:\n            d[i] += 1\n            n //= i\n    if n != 1:\n        d[n] = 1\n\n    for val in d.values():\n        x = val\n        wi = 1\n        while(x >= wi):\n            x -= wi\n            wi += 1\n            cnt += 1\n    print(cnt)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\n\n\ndef main():\n    from collections import deque\n\n    def prime_factorization_list(n: int):\n        \"\"\"\n        \u5165\u529b\u3055\u308c\u305f\u6574\u6570n\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3057\uff0c\u7d20\u56e0\u6570\u304c\u5217\u6319\u3055\u308c\u305f\u30ea\u30b9\u30c8\u3067\u8fd4\u5374\n        Parameters\n        ----------\n        n : int\n            \u7d20\u56e0\u6570\u5206\u89e3\u3057\u305f\u3044\u6574\u6570\n        Returns\n        -------\n        prime_factorization_lst : lst\n            [\u7d20\u56e0\u6570]\u306e\u5f62\u3067\u7d20\u56e0\u6570\u304c\u5217\u6319\u3055\u308c\u305f\u7d20\u56e0\u6570\u5206\u89e3\u7d50\u679c\n        \"\"\"\n        fct = []  # prime factor\n        b = 2     # base factor\n        while b * b <= n:\n            while n % b == 0:\n                n //= b\n                fct.append(b)\n            b += 1\n        if n > 1:\n            fct.append(n)\n        return fct\n\n    N = int(input())\n\n    q = deque(prime_factorization_list(N))\n    memo = []\n    while q:\n        p = q.popleft()\n        res = p\n        while res in memo and q:\n            can = q.popleft()\n            if can == p:\n                res *= can\n            else:\n                res = can\n                break\n        if res not in memo:\n            memo.append(res)\n    print((len(memo)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter\n\n\ndef factor(n):\n    res = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            res.append(i)\n            n //= i\n    if n > 1:\n        return res + [n]\n    else:\n        return res\n\n\nN = int(input())\nps = factor(N)\nsq = [i * (i + 1) // 2 for i in range(100)]\nans = 0\nfor k, v in list(Counter(ps).items()):\n    for i in range(99):\n        if sq[i] <= v < sq[i + 1]:\n            ans += i\n            break\nprint(ans)\n", "import math\n \nN = int(input())\n \nM = int(math.sqrt(N))\n\nans = 0 \ncheck = [True for _ in range(M + 1)]\ne = [0 for _ in range(M + 1)]\n\nfor p in range(2, M + 1):\n    if check[p] == True:\n        for j in range(2, M // p + 1):\n            check[p * j] = False\n\n        while N % p == 0:\n            N = N // p\n            e[p] += 1\n        \n        ans += int((math.sqrt(1 + 8 * e[p]) - 1)/2)\n\nif N > 1:\n    ans += 1\n\nprint(ans)", "N=int(input())\nimport math\n\nif N==1:\n    print(0)\n    return\n    \ndef soinsu(m):\n    arr=[]\n    temp=m\n    for i in range(2,int(math.sqrt(m)+1)):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt +=1\n                temp //=i\n            arr.append([i,cnt])\n        \n    if temp!=1:\n        arr.append([temp,1])\n                   \n    if arr==[]:\n        arr.append([m,1])\n    \n    return arr\n\narr=soinsu(N)\nans=0\nfor i in range(len(arr)):\n    s=1\n    con=arr[i][1]\n    while con>=s:\n        ans+=1\n        con-= s\n        s +=1\nprint(ans)", "from collections import Counter\n\ndef factor(n):\n    p = []\n    if n == 1:\n        return p\n    m = n\n    i = 2\n    while i * i <= n:\n        while m % i == 0:\n            m //= i\n            p.append(i)\n        i += 1\n    if m > 1:\n        p.append(m)\n    return p\n\nn = int(input())\np = Counter(factor(n))\nans = 0\nfor x in p.values():\n    i = 1\n    while x - i >= 0:\n        x -= i\n        i += 1\n        ans += 1\nprint(ans)", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\n\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n  return int(readline())\nn = I()\ndef soinsu(n):\n    dic = defaultdict(int)\n    i = 2\n    while i*i <= n:\n        if n%i == 0:\n            dic[i] += 1\n            n //= i\n        else:\n            i += 1\n    if n!= 1:\n        dic[n] += 1\n    return dic\ndic = soinsu(n)\nans = 0\nfor k,v in list(dic.items()):\n    i = 1\n    while True:\n        if v >= i:\n            ans += 1\n            v -= i\n            i += 1\n        else:\n            break\nprint(ans)\n", "n = int(input())\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\nq = factorization(n)\n\nans = 0\nfor i in range(len(q)):\n    l = q[i][1]\n    if q[i][0] == 1:\n        continue\n\n    for j in range(1,l+1):\n        l -= j\n        if l < 0:\n            break\n        else:\n            ans += 1\nprint(ans)\n", "a,n=0,int(input())\nfor i in range(2,int(n**0.5+1)):\n  x=0\n  while(n%i==0):n//=i;x+=1\n  j=1\n  while(x>=j):a+=1;x-=j;j+=1\nprint(a+(n>1))", "N = int(input())\ndiv = 2\ndic = {}\nwhile div**2 <= N:\n  if N % div == 0:\n    count = 0\n    while N % div == 0:\n      N = N // div\n      count += 1\n    dic[div] = count\n  div += 1\nif N != 1:\n  dic[N] = 1\nans = 0\nfor v in dic.values():\n  tmp = 1\n  while v >= tmp:\n    v -= tmp\n    tmp += 1\n    ans += 1\nprint(ans)", "from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush\nfrom bisect import bisect_left,bisect_right \nimport sys,math,itertools,fractions\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n#\u7d20\u56e0\u6570\u5206\u89e3\ndef prime_factorize(n):\n    if n == 1:\n        return [1]\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\nn = inp()\nc = Counter(prime_factorize(n))\nres = 0\n# print(c)\nfor k,v in c.items():\n    if k == 1: continue\n    cnt = 0\n    for now in range(1,150000):\n        cnt += now\n        if cnt > v:\n            res += now-1\n            break\nprint(res)", "N = int(input())\nD = {}\n\nfor k in range(2,10**6):\n  while N%k<1:\n    N//=k\n    D[k]=D.get(k,0)+1\n\na = 0\nfor i in D.values():\n  t = 0\n  c = 0\n  while t+c<i:\n    c+=1\n    t+=c\n  a+=c\nprint(a+(N>1))", "def factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\nN=int(input())\nL=factorization(N)\n\na=0\nfor p,e in L:\n    if p==1:continue\n    t=1\n    while t<=e:\n        # print(p,e,a)\n        a+=1\n        e-=t\n        t+=1\nprint(a)", "def factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n ** 0.5 // 1)) + 1):\n        if temp % i == 0:\n            cnt = 0\n            while temp % i == 0:\n                cnt += 1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp != 1:\n        arr.append([temp, 1])\n\n    if arr == []:\n        arr.append([n, 1])\n\n    return arr\n\n\ndef abc169d_div_game():\n    n = int(input())\n    arr = factorization(n)\n    cnt = 0\n    for p, e in arr:\n        if p == 1: continue\n        for i in range(1, e+1):\n            if e >= i:\n                cnt += 1\n                e -= i\n            else:\n                break\n    print(cnt)\n\nabc169d_div_game()", "'''\nCreated on 2020/08/23\n\n@author: harurun\n'''\ndef f(n):\n  arr=[]\n  temp=n\n  for c in range(2,int(-(-n**0.5//1))+1):\n    if temp%c==0:\n      cnt=0\n      while temp%c==0:\n        cnt+=1\n        temp//=c\n      arr.append([c,cnt])\n  if temp!=1:\n    arr.append([temp,1])\n  return arr\n\ndef main():\n  import math\n  import sys\n  pin=sys.stdin.readline\n  pout=sys.stdout.write\n  perr=sys.stderr.write\n\n  N=int(pin())\n  r=f(N)\n  ans=0\n  for i in r:\n    ans+=int((math.sqrt(1+8*i[1])-1)/2)\n  print(ans)\n  return \nmain()", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nINF = inf\nMOD = 1000000007\n\nn = int(input())\n\ntmp = 0\nres = 0\n\ncnt = Counter(prime_factorize(n))\nfor i in list(cnt.values()):\n    res += floor((-1 + sqrt(1 + 8 * i)) / 2)\n\nprint(res)\n", "N = int(input())\n\nd = 2\n\nans = 0\n\nwhile d*d <= N:\n    if N % d != 0:\n        d += 1\n        continue\n        # N\u304cd\u3067\u5272\u308a\u5207\u308c\u306a\u3044\u3068\u304d\uff0c\u4f55\u3082\u305b\u305ad\u3092\u4e00\u6b69\u9032\u3081\u308b\u3002\u4f8b\u3048\u3070 d = 4 \u306e\u3068\u304d\u306f\uff0c\u305d\u308c\u4ee5\u524d\u306b d = 2 \u306e\u6642\u3067N\u3092\u5272\u308a\u5207\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u3067\uff0cN % 4 != 0 \u3068\u51fa\u308b\u3002\n\n    z = d\n\n    while N % z == 0:\n         N //= z\n         z *= d\n\n         ans += 1\n\n    while N % d == 0:\n        N //= d\n\nif N != 1:\n    ans += 1\n\nprint(ans)", "def prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n  \n\nn = int(input())\nnp = set(prime_factorize(n))\nnpl = []\nfor i in np:\n    j = 1\n    j *= i\n    while j <= n:\n        npl.append(j)\n        j *= i\nnpl.sort()\n\ncz = 2\nans = 0\nfor cz in npl:\n    # print(n, cz)\n    if cz > n:\n        break\n    if n % cz == 0:\n        ans += 1\n        n //= cz\nprint(ans)", "n = int(input())\nans = 0\nfor i in range(2,(int(n**0.5))+1):\n    x = i\n    while n%x==0:\n        n = n//x\n        x*=i\n        ans+=1\n    while n%i==0:\n        n = n//i\nif n!=1:\n    ans+=1\nprint(ans)", "N = int(input())\nres = {}\nans = 0\ni = 2\n \nfor i in range(2,int(N**(1/2))+1) :\n    while(N%i == 0) :\n        if(i not in res) :\n            res[i] = 1\n        else :\n            res[i] += 1\n        N /= i\nif(N != 1) :\n    res[N] = 1\n \n\nfor i in res :\n    b = 1\n    s = res[i]\n    while(b <= s) :\n        ans += 1\n        s -= b\n        b += 1\nprint(ans)\n", "import bisect\n\nN=int(input())\nans=0\ni=2\na=[j*(j+1)//2 for j in range(64)]\nwhile i*i<=N:\n    cnt=0\n    while N%i==0:\n        N//=i\n        cnt+=1\n    ans+=bisect.bisect_right(a,cnt)-1\n    i+=1\nif N>1:\n    ans+=1\nprint(ans)\n", "import collections\nimport bisect\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nN = int(input())\nc = collections.Counter(prime_factorize(N))\nsums = []\ns=1\nans = 0\nfor v in c.values():\n  count = 0\n  for i in range(1,v+1):\n    if count+i > v:\n      break\n    else:\n      count += i\n      ans += 1\nprint(ans)", "import math\n\ndef solve():\n    N = int(input())\n    ans = 0\n    for i in range(2, int(math.sqrt(N)) + 2):\n        n = 1\n        cnt = 0\n        while N % i == 0:\n            N //= i\n            cnt += 1\n            if cnt == n:\n                cnt = 0\n                n += 1\n                ans += 1\n    if N != 1:\n        ans += 1\n    return ans\n\nprint((solve()))\n", "N=int(input())\n\nif N==1:\n  print('0')\n  return\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n  \ndef divcount(n):\n  cnt=0\n  while n>=0:\n    n-=cnt+1\n    cnt+=1\n  return cnt-1\n\ns=factorization(N)\nt=[i[1] for i in s]\nans=0\nfor i in t:\n  ans+=divcount(i)\nprint(ans)", "N=int(input());P=[];Q=[];a=0\nfor i in range(2,10**3):\n if all(i%p for p in P):P.append(i)\nfor i in range(3,10**6):\n if all(i%p for p in P):Q.append(i)\nfor p in P+Q:\n i=0\n while N%p<1:N//=p;i+=1\n a+=int((2*i+.25)**.5-.5)\nprint(a+(N>1))", "N = int(input())\nif N == 1:\n    print(0)\n    return\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\nans = 0\nl = factorization(N)\nfor i,j in l:\n    k = 1\n    while j >= k:\n        ans += 1\n        j -= k\n        k += 1\nprint(ans)", "N = int(input())\n\nans = 0\nfor i in range(2, N):\n    if i * i > N:\n        break\n    e = 0\n    while N % i == 0:\n        e += 1\n        N //= i\n    if e > 0:\n        for j in range(1, 10):\n            if e >= j:\n                e -= j\n                ans += 1\n            else:\n                break\nif N > 1:\n    ans += 1\n\nprint(ans)\n", "import math\nimport collections\ndef prime_diviation(n):\n    factors = []\n    i = 2\n    while i <= math.floor(math.sqrt(n)):\n        if n%i == 0:\n            factors.append(int(i))\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\nN = int(input())\nif N == 1:\n  print(0)\n  return\n#pr:\u7d20\u56e0\u6570\u5206\u89e3 prs:\u96c6\u5408\u306b\u3057\u305f\u3084\u3064 prcnt:counter\npr = prime_diviation(N)\nprs = set(pr)\nprcnt = collections.Counter(pr)\n#print(pr, prs, prcnt)\nans = 0\n\nfor a in prs:\n  i = 1\n  cnt = 2*prcnt[a]\n  #2*prcnt >= n(n+1)\u3068\u306a\u308b\u6700\u5927\u306en\u3092\u63a2\u3059\u306e\u304c\u697d\u305d\u3046\n#  print(cnt)\n  while cnt >= i*(i+1):\n    i += 1\n  ans += i - 1 \n  \nprint(ans)  ", "import collections\nN = int(input())\ndef make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\nuse_list = []\ncnt = 0\nwhile True:\n    flag = 0\n    div_list = make_divisors(N)\n    if len(div_list) == 1:\n        break\n    for i in range(1,len(div_list)):\n        if (len(collections.Counter(prime_factorize(div_list[i]))) == 1) and (div_list[i] not in use_list):\n            use_list.append(div_list[i])\n            N = N //div_list[i]\n            cnt +=1\n            flag = 1\n            break\n    if flag == 0:\n        break\nprint(cnt)", "def prime_factorize(n):\n    '''\n    \u7d20\u56e0\u6570\u5206\u89e3\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002n == 1\u306e\u3068\u304d[]\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\u3002\n    :param n:int\n    \u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\u81ea\u7136\u6570\n    :return: list\n    \u7d20\u56e0\u6570\u5206\u89e3\u3057\u305f\u7d50\u679c\u3002\n\n    \u4f8b\n    n : 10\n    primes : [[2, 1], [5, 1]]\n    '''\n    primes = []\n    for i in range(2, int(n ** (1 / 2)) + 1):\n        if n % i != 0:\n            continue\n        num = 0\n        while n % i == 0:\n            num += 1\n            n //= i\n        primes.append([i, num])\n    if n != 1:\n        primes.append([n, 1])\n    return primes\n\nN = int(input())\nprime_list = prime_factorize(N)\nans = 0\nfor _, e in prime_list:\n    now = 1\n    work = e\n    while work >= now:\n        work -= now\n        now += 1\n        ans += 1\nprint(ans)", "def prime_decomposition(n):\n    \n    i = 2\n    table = []\n    while i * i <= n:\n        if n % i == 0:\n            cnt = 0\n            while n % i == 0:\n                n //= i\n                cnt += 1\n            table.append((i, cnt))\n        i += 1\n    if n > 1:\n        table.append((n, 1))\n    return table\n\nfrom itertools import groupby\nfrom collections import Counter\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    N = int(input())\n\n    ans = 0\n    table = prime_decomposition(N)\n    for _, cnt in table:\n        i = 1\n        while cnt >= i:\n            cnt -= i\n            i += 1\n            ans += 1\n\n    print(ans)\n\nmain()", "N=int(input())\narr=[]\ntemp=N\nfor i in range(2, int(N**0.5//1+1)):\n    if temp%i==0:\n        cnt=0\n        while temp%i==0:\n            cnt+=1\n            temp=temp//i\n        # arr.append([i,cnt])\n        arr.append(cnt)\nif temp!=1:\n    # arr.append([temp,1])\n    arr.append(1)\nif arr==[] and N!=1:\n    # arr.append([N,1])\n    arr.append(1)\n# print(arr)\nans=0\nfor i in range(len(arr)):\n    for n in range(1,100):\n        if arr[i]>=n:\n            ans+=1\n            arr[i]-=n\n        else:\n            break\nprint(ans)", "import math\n\ndef main():\n\tN = int(input())\n\tf = prime_factorize(N)\n\tcnt = 0\n\tif N == 1:\n\t\tprint(cnt)\n\t\treturn 0\n\n\tfor p in f:\n\t\tprime = p[0]\n\t\tpower = p[1]\n\t\ttmp = math.floor((math.sqrt(1 + 8 * power) - 1) / 2)\n\t\tcnt += tmp\n\tprint(cnt)\n\n\ndef prime_factorize(n):\n\tret = []\n\tfor i in range(2, int(n ** 0.5) + 1):\n\t\tif n % i == 0:\n\t\t\tcnt = 0\n\t\t\twhile n % i == 0:\n\t\t\t\tcnt += 1\n\t\t\t\tn = n // i\n\t\t\tret.append([i, cnt])\n\tif n != 1:\n\t\tret.append([n, 1])\n\tif len(ret) == 0:\n\t\tret.append([n, 1])\n\n\treturn ret\n\nmain()", "from collections import Counter\nfrom itertools import accumulate\nfrom bisect import bisect_right\n\n\ndef factor(n):\n    res = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            res.append(i)\n            n //= i\n    if n > 1:\n        return res + [n]\n    else:\n        return res\n\n\nnum = [i for i in range(1, 65)]\nnum = list(accumulate(num))\n\nN = int(input())\nprimes = Counter(factor(N))\nans = 0\nfor v in list(primes.values()):\n    ans += bisect_right(num, v)\nprint(ans)\n", "import math\nn=int(input())\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\nf=factorization(n) \nl=len(f)\nx=0\nfor i in range(l):\n    x+=int((-1+math.sqrt(1+8*f[i][1]))//2)\nif n==1:\n    x=0\nprint(x)\n", "import math\n\ndef prime(num):\n\tarray=[]\n\ttmp=int(math.sqrt(n))+1\n\tfor i in range(2,tmp):\n\t\twhile num % i == 0:\n\t\t\tnum/=i\n\t\t\tarray.append(i)\n\t# \u30ea\u30b9\u30c8\u304c\u7a7a\u306a\u3089\u5165\u529b(num)\u306f\u7d20\u6570\n\t\n\tif array==[]:\n\t\treturn [num]\n\telse:\n\t\tif num>1:\n\t\t\tarray.append(int(num))\n\t\treturn array\n\nn=int(input())\nP=prime(n)\nP=sorted(P)\nnum=n\nif 1 in P:\n\tprint(0)\nelse:\n\tans=0\n\ttmp=0\n\tfor i in range(0,len(P)):\n\t\tif i==0:\n\t\t\ttmp=P[i] \n\t\telif P[i]==P[i-1]:\n\t\t\ttmp*=P[i]\n\t\telse:\n\t\t\ttmp=P[i]\n\t\t\tnum=n\n\t\tif num%tmp==0:\n\t\t\tnum/=tmp\n\t\t\tans+=1\n\t\t\t\n\tprint(ans)", "import collections\n\nn = int(input())\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nif n == 1: # 1\n    print((0))\n    return\n\nc = collections.Counter(prime_factorize(n))\n_, counts = list(zip(*c.most_common()))\n\nl = list(counts)\nans = 0\n\nif l == [1]: # prime number\n    print((1))\n    return\n\nfor i in l:\n    for j in range(1, i+1):\n        if i >= j:\n            i -= j\n            ans += 1\n\nprint(ans)\n"]