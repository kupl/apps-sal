["from collections import defaultdict\n\ndef solve(n, k):\n    as_bin = bin(n)[2:]\n    cnt = defaultdict(int)\n    cnt.update({i : 1 for i, b in enumerate(reversed(as_bin)) if b == '1'})\n    curr_len = len(cnt)\n    curr_pow = len(as_bin) - 1\n\n    if curr_len > k:\n        return None\n\n    while True:\n        new_len = curr_len + cnt[curr_pow]\n        if new_len > k:\n            break\n        cnt[curr_pow - 1] += 2 * cnt[curr_pow]\n        del cnt[curr_pow]\n        curr_pow -= 1\n        curr_len = new_len\n\n    i = min(cnt.keys())\n    while curr_len < k:\n        cnt[i] -= 1\n        cnt[i - 1] += 2\n        curr_len += 1\n        i -= 1\n\n    ans = []\n    for i in sorted(list(cnt.keys()), reverse=True):\n        ans.extend([i] * cnt[i])\n    return ans\n\nn, k = [int(v) for v in input().split()]\nans = solve(n, k)\n\nif ans is None:\n    print('No')\nelse:\n    print('Yes')\n    print(' '.join(str(c) for c in ans))\n", "from collections import defaultdict\n\ndef solve(n, k):\n    as_bin = bin(n)[2:]\n    cnt = defaultdict(int)\n    cnt.update({i : 1 for i, b in enumerate(reversed(as_bin)) if b == '1'})\n    curr_len = len(cnt)\n    curr_pow = len(as_bin) - 1\n\n    if curr_len > k:\n        return None\n\n    while True:\n        new_len = curr_len + cnt[curr_pow]\n        if new_len > k:\n            break\n        cnt[curr_pow - 1] += 2 * cnt[curr_pow]\n        del cnt[curr_pow]\n        curr_pow -= 1\n        curr_len = new_len\n\n    ans = []\n    for i in sorted(list(cnt.keys()), reverse=True):\n        ans.extend([i] * cnt[i])\n\n    if curr_len < k:\n        last = ans.pop()\n        ans.extend(reversed(list(range(last - (k - curr_len), last))))\n        ans.append(ans[-1])\n\n    return ans\n\nn, k = [int(v) for v in input().split()]\nans = solve(n, k)\n\nif ans is None:\n    print('No')\nelse:\n    print('Yes')\n    print(' '.join(str(c) for c in ans))\n", "def count1(n):\n    count = 0\n    while n > 0:\n        n &= (n-1)\n        count+= 1\n    return count\n\n\ndef find(n, k):\n    ones = count1(n)\n    l = list()\n    if ones > k:\n        print('No')\n    else:\n        tmp = n\n        pow2 = 1\n        index = 0\n        while tmp > 0:\n            if tmp % 2 == 1:\n                l.append(index)\n            tmp //= 2\n            pow2 *= 2\n            index += 1\n        length = len(l)\n        while length < k:\n            m = max(l)\n            c = l.count(m)\n            rem = [i for i in l if i < m]\n            if k - length >= c:\n                rem += [m-1]*(2*c)\n                l = rem\n                length = len(l)\n            else:\n                # to_add = k - length\n                # rem += [m] * (c - to_add) + [m-1] * (to_add * 2)\n                mini = min(l)\n                to_fill  = k - length\n                l.remove(mini)\n                for i in range(to_fill):\n                    mini -=1\n                    l.append(mini)\n                l.append(mini)\n                break\n        print('Yes')\n        l.sort(reverse=True)\n        # print(len(l))\n        print(' '.join([str(i) for i in l]))\n\n# find(23,5)\n# find(13,2)\n# find(1,2)\nnn, kk = list(map(int, input().strip().split()))\nfind(nn, kk)\n\n# find(1000000000000000000, 100000)\n", "n, k = map(int, input().split())\ncnt = [0] * 200010\nans = ''\nfor i in range(64):\n  if (n >> i)&1:\n    k -= 1\n    cnt[i] = 1;\nif k < 0:\n  print(\"No\")\nelse:\n  print(\"Yes\")\n  for i in range(64, -64, -1):\n    if k >= cnt[i]:\n      cnt[i - 1] += cnt[i] * 2\n      k -= cnt[i]\n      cnt[i] = 0\n    else: break\n  for i in range(-64, 64):\n    if cnt[i]:\n      while k:\n        cnt[i] -= 1\n        cnt[i - 1] += 2 \n        i -= 1\n        k-= 1\n      break\n  for i in range(64, -100010, -1): ans += (str(i) + ' ') * cnt[i] \n  print(ans)", "#! /usr/bin/env python3\n'''\nAuthor:    krishna\nCreated:   Fri Jan 19 20:39:10 2018 IST\nFile Name: b.py\nUSAGE:\n      b.py\nDescription:\n\n'''\nimport sys, os\n\n\ndef main():\n    '''\n    The Main\n    '''\n    n, k = list(map(int, sys.stdin.readline().split()))\n\n    x =  bin(n)[2:]\n    if x.count('1') > k:\n        print(\"No\")\n        return\n\n    ans = [0] * (10 ** 5)\n\n    val = len(x) - 1\n    idx = len(x) - 1\n    cnt = 0\n    for i in x:\n        if (int(i)):\n            ans[val] = 1\n            # print(val)\n            cnt += 1\n\n        val -= 1\n\n    for i in range(k-cnt):\n        ans[idx] -= 1\n        ans[idx-1] += 2\n        if (ans[idx] == 0):\n            idx -= 1\n\n    # print(ans[18])\n    # return\n\n    maxIdx = idx - 1\n    minIdx = idx - 1\n    nonZeroIdx = idx - 1\n    while (1):\n        if (minIdx < 0) and (ans[minIdx] == 0):\n            minIdx += 1\n            break\n        if ans[minIdx]:\n            nonZeroIdx = minIdx\n        minIdx -= 1\n\n    minIdx = nonZeroIdx\n    # print(ans[0:10])\n    # print(maxIdx, minIdx)\n\n    while (1):\n        if (\n            (ans[maxIdx] > 2)\n            or ((ans[maxIdx] == 2 )and (maxIdx != minIdx))\n        ):\n            ans[minIdx] -= 1\n            ans[minIdx - 1] += 2\n            ans[maxIdx] -= 2\n            ans[maxIdx + 1] += 1\n            minIdx -= 1\n        else:\n            maxIdx -= 1\n\n        if (maxIdx <= minIdx):\n            break\n\n\n    print(\"Yes\")\n    x = []\n    while (1):\n        for i in range(ans[idx]):\n            x.append(idx)\n        idx -= 1\n        if (idx < 0) and (ans[idx] == 0):\n            break\n\n    # print([(i, ans[i]) for i in range(len(ans)) if ans[i] < 0])\n    # print(sum(ans))\n    # print(len(x))\n    print(\" \".join(map(str, x)))\n\n\ndef __starting_point():\n   main()\n\n__starting_point()", "n, k = map(int, input().split())\nc = [0] * 200010\nk -= c.count(1)\n\nfor i in range(64):\n    if (n >> i) & 1:\n        k -= 1\n        c[i] = 1\n\nif k < 0:\n    print('No')\nelse:\n    print('Yes')\n\n    for i in range(64, -64, -1):\n        if k >= c[i]:\n            c[i - 1] += c[i] * 2\n            k -= c[i]\n            c[i] = 0\n        else:\n            break\n\n    for i in range(-64, 64):\n        if c[i]:\n            while k:\n                c[i] -= 1\n                c[i - 1] += 2\n                i -= 1\n                k -= 1\n            break\n\n    for i in range(64, -100010, -1):\n        print('{} '.format(i) * c[i], end='')\n", "n,m = list(map(int,input().split()))\nmax_pows = -1\ntemp = n\nlist_pow = {}\nwhile temp >0:\n    factor = -1\n    index = 1\n    while index <= temp:\n        index *=2\n        factor +=1\n    temp = temp - index//2\n    if max_pows == -1:\n        max_pows = factor\n    list_pow[factor] = 1\nmin_pows = factor\nif len(list_pow) > m:\n    print(\"No\")\nelse:\n    pow_count = len(list_pow)\n    cur_pow = max_pows\n  \n    while pow_count + list_pow[cur_pow] <=m:\n        list_pow[cur_pow] -=1\n        if cur_pow - 1 in list_pow:\n            list_pow[cur_pow - 1] +=2\n        else:\n            list_pow[cur_pow - 1] = 2\n        pow_count +=1\n        if list_pow[cur_pow]==0: \n            cur_pow -=1\n        min_pows = min(min_pows,cur_pow)    \n            \n    cur_pow = min_pows\n    \n    while pow_count!= m:\n        list_pow[cur_pow] -=1\n        if cur_pow - 1 in list_pow:\n            list_pow[cur_pow - 1] +=2\n        else:\n            list_pow[cur_pow - 1] = 2\n        pow_count +=1\n        cur_pow -=1        \n    print(\"Yes\")\n    cur_count = 0\n    while cur_count !=m:\n        if max_pows in list_pow:\n            for i in range(list_pow[max_pows]):\n                cur_count +=1\n                print(max_pows,end = \" \")\n        max_pows -=1\n        \n", "from collections import *\nN, K = list(map(int, input().split()))\n\na = deque()\nfor i in range(60): # 2**60 > 1e18\n\tif N & (1<<i):\n\t\ta.appendleft([i,1])\nk = len(a)\n\nif k > K:\n\tprint(\"No\")\n\treturn\n\n# high\nwhile k + a[0][1] <= K:\n\te, c = a.popleft()\n\tif len(a) == 0 or a[0][0] != e - 1:\n\t\ta.appendleft([e-1,0])\n\ta[0][1] += 2 * c\n\tk += c\n\n# low\nif K - k:\n\ta[-1][1] -= 1\n\tcount = K - k\n\tfirst = a[-1][0] - 1\n\tlast = first - count + 1\n\tfor i in range(first, last - 1, -1):\n\t\ta.append([i,1])\n\ta.append([last,1])\n\tk = K\n\nans = []\t\t\nfor i in a:\n\tans += [i[0]] * i[1]\nans = list(map(str, ans))\nans = \"Yes\\n\" + \" \".join(ans)\nprint(ans)\n", "n, k = map(int,input().split())\n\nbits = [0 for i in range(128)]\ntmp = n\nsumBits = 0\n\nfor i in range(64):\n    if tmp%2==1:\n        bits[63-i] = 1\n        sumBits += 1\n    tmp = tmp>>1\nif sumBits>k:\n    print(\"No\")\nelif sumBits==k:\n    print(\"Yes\")\n    res = []\n    for i in range(63,-1,-1):\n        if bits[63-i] == 1:\n            res.append(i)\n    print(*res)\nelse:\n    ind = 0\n    while k!=sumBits:\n        if bits[ind] != 0:\n            if bits[ind]<=k-sumBits:\n                bits[ind+1] += 2*bits[ind]\n                sumBits += bits[ind]\n                bits[ind] = 0\n            else:\n                break\n        ind += 1\n    if k!=sumBits:\n        for i in range(127,-1,-1):\n            if bits[i] != 0:\n                bits[i] -= 1\n                first = i + 1\n                break\n        if k - sumBits < 128 - first:\n            for i in range(first,k - sumBits + first):\n                bits[i] = 1\n            bits[k - sumBits + first - 1] = 2\n        else:\n            for i in range(first,128):\n                bits[i] = 1\n            bits += [1]*(k - sumBits + first - 128)\n            bits[-1] = 2\n    print(\"Yes\")\n    res = []\n    for i in range(len(bits)):\n        if bits[i] != 0:\n            res += [63-i]*bits[i]\n    print(*res)", "from collections import Counter\nbits = (10**18).bit_length()\nn, k = map(int, input().split())\nnum = Counter(i for i in range(bits) if (n >> i) & 1)\nk -= len(num)\nif k >= 0:\n\tprint('Yes')\n\tfor i in range(bits, -bits, -1):\n\t\tif num[i] > k: break\n\t\tnum[i-1] += num[i] * 2\n\t\tk -= num.pop(i, 0)\n\ti = next(filter(num.get, range(-bits, bits)))\n\tfor k in range(k):\n\t\tnum[i] -= 1\n\t\tnum[i-1] += 2\n\t\ti -= 1\n\ts = sorted(num.elements(), reverse=True)\n\tprint(' '.join(map(str, s)))\nelse:\n\tprint('No')", "inp=lambda:map(int,input().split())\nn,k=inp()\nn2=n\n\na=[0]*100\ni=0\n\nwhile(n2>0):\n    a[i]=n2%2\n    n2//=2\n    i+=1\n\ncnt=i-1\ncnt2=cnt\nsum=0\narr=[0]*(10**7+1)\nq=[0]*(10**7+1)\n\n\nfor i in range(cnt,-1,-1):\n    sum+=a[i]\n    q[i]=a[cnt-i]\n\nif sum>k:\n    print(\"No\")\n    quit()\n\nk2=k-sum\n\nbeg=0\nwhile k2>0:\n    if(q[beg]<=k2):\n        k2-=q[beg]\n        q[beg+1]+=2*q[beg]\n        q[beg]=0\n        beg+=1\n    else:\n       break\n\ncnt+=1000\n\nwhile(q[cnt]==0):\n    cnt-=1   \n\n\n\nwhile k2>0:\n    q[cnt]-=1\n    q[cnt+1]+=2\n    cnt+=1\n    k2-=1\n   \n\n\n\nprint(\"Yes\")\n \nfor i in range(beg,cnt+1):\n    for j in range(1,q[i]+1):\n        print(cnt2-i,'', end='')\n", "inp=lambda:map(int,input().split())\nn,k=inp()\nn2=n\n\na=[0]*100\ni=0\n\nwhile(n2>0):\n    a[i]=n2%2\n    n2//=2\n    i+=1\n\ncnt=i-1\ncnt2=cnt\nsum=0\narr=[0]*(10**7+1)\nq=[0]*(10**7+1)\n\n\nfor i in range(cnt,-1,-1):\n    sum+=a[i]\n    q[i]=a[cnt-i]\n\nif sum>k:\n    print(\"No\")\n    quit()\n\nk2=k-sum\n\nbeg=0\nwhile k2>0:\n    if(q[beg]<=k2):\n        k2-=q[beg]\n        q[beg+1]+=2*q[beg]\n        q[beg]=0\n        beg+=1\n    else:\n       break\n\ncnt+=1000\n\nwhile(q[cnt]==0):\n    cnt-=1   \n\n\n\nwhile k2>0:\n    q[cnt]-=1\n    q[cnt+1]+=2\n    cnt+=1\n    k2-=1\n   \n\n\n\nprint(\"Yes\");\n \nfor i in range(beg,cnt+1):\n    for j in range(1,q[i]+1):\n        print(cnt2-i,'', end='')\n", "def solve(n, k):\n    bn = binary(n)\n    if k < len(bn):\n        return 'No'\n\n    cur_dec = len(bn)\n    next_dec = cur_dec+1\n    while True:\n        if k < next_dec:\n            dif = k - cur_dec\n            bn = list(reversed(bn))\n            for _ in range(dif):\n                e = bn.pop()\n                bn += [e-1, e-1]\n            return 'Yes\\n' + ' '.join(map(str,bn))\n        cur_dec = next_dec\n        cnt = bn.count(bn[-1])\n        bn = bn[:-cnt] + [bn[-1]-1]*(cnt*2)\n        next_dec = cur_dec+bn.count(bn[-1])\n\n\n\ndef binary(x):\n    out = []\n    for i in reversed(list(range(64+1))):\n        if x >= 2**i:\n            x -= 2**i\n            out.append(i)\n    return list(reversed(out))\n\n\ndef __starting_point():\n    n, k = list(map(int, input().split()))\n    print(solve(n, k))\n\n__starting_point()", "read = lambda: map(int, input().split())\nn, k = read()\nb = bin(n)[2:]\nbl = len(b)\nk -= b.count('1')\nif k < 0:\n    print('No')\n    return\nprint('Yes')\nm = -2\na = {}\nfor _ in range(bl):\n    if b[_] == '1':\n        a[bl - _ - 1] = 1\n        if m is -2:\n            m = bl - _ - 1\nwhile k > 0:\n    if k >= a[m]:\n        k -= a[m]\n        a[m - 1] = a.get(m - 1, 0) + a[m] * 2\n        a.pop(m)\n        m -= 1\n    else:\n        break\nm = min(a.keys())\nwhile k > 0:\n    k -= 1\n    if a[m] is 1:\n        a.pop(m)\n    else:\n        a[m] -= 1\n    a[m - 1] = a.get(m - 1, 0) + 2\n    m -= 1\nfor k in sorted(list(a.keys()), reverse=True):\n    print(('%d ' % k) * a[k], end='')\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/10/20 13:52\n# @Author  : litianshuang\n# @Email   : litianshuang@jingdata.com\n# @File    : test.py\n# @Desc    :\n\n\ndef __starting_point():\n    h, k = [int(n) for n in input().split(' ')]\n    level = 0\n    ret = []\n    while h > 0:\n        if h % 2 == 0:\n            h //= 2\n            level += 1\n        else:\n            ret.append(level)\n            h -= 1\n    if len(ret) > k:\n        print('No')\n    else:\n        print('Yes')\n        cntnum = {}\n        maxn = ret[0]\n        minn = ret[0]\n        total_len = len(ret)\n        for i in ret:\n            if i not in cntnum:\n                cntnum[str(i)] = 0\n            cntnum[str(i)] += 1\n            if maxn < i:\n                maxn = i\n            if minn > i:\n                minn = i\n\n        while total_len <= k:\n            if total_len + cntnum[str(maxn)] <= k:\n                if str(maxn - 1) not in cntnum:\n                    cntnum[str(maxn - 1)] = 0\n                cntnum[str(maxn-1)] += 2 * cntnum[str(maxn)]\n                total_len += cntnum[str(maxn)]\n                cntnum[str(maxn)] = 0\n                maxn -= 1\n                minn = min(minn, maxn)\n            else:\n                break\n\n        while total_len < k:\n            cntnum[str(minn - 1)] = 2\n            cntnum[str(minn)] -= 1\n            minn -= 1\n            total_len += 1\n\n        ans = []\n        for num, v in list(cntnum.items()):\n            for i in range(0, v):\n                ans.append(int(num))\n        ans.sort(reverse=True)\n\n        print(\" \".join([str(x) for x in ans]))\n\n__starting_point()", "n, k = list(map(int, input().split()))\n\ncnt = [0] * 200010\n\nans = ''\n\nfor i in range(64):\n\n  if (n >> i)&1:\n\n    k -= 1\n\n    cnt[i] = 1;\n\nif k < 0:\n\n  print(\"No\")\n\nelse:\n\n  print(\"Yes\")\n\n  for i in range(64, -64, -1):\n\n    if k >= cnt[i]:\n\n      cnt[i - 1] += cnt[i] * 2\n\n      k -= cnt[i]\n\n      cnt[i] = 0\n\n    else: break\n\n  for i in range(-64, 64):\n\n    if cnt[i]:\n\n      while k:\n\n        cnt[i] -= 1\n\n        cnt[i - 1] += 2 \n\n        i -= 1\n\n        k-= 1\n\n      break\n\n  for i in range(64, -100010, -1): ans += (str(i) + ' ') * cnt[i] \n\n  print(ans)\n\n\n\n# Made By Mostafa_Khaled\n", "read = lambda: map(int, input().split())\nn, k = read()\nb = bin(n)[2:]\nbl = len(b)\nk -= b.count('1')\nif k < 0:\n    print('No')\n    return\nprint('Yes')\nm = -2\na = {}\nfor _ in range(bl):\n    if b[_] == '1':\n        a[bl - _ - 1] = 1\n        if m is -2:\n            m = bl - _ - 1\nwhile k > 0:\n    if k >= a[m]:\n        k -= a[m]\n        a[m - 1] = a.get(m - 1, 0) + a[m] * 2\n        a.pop(m)\n        m -= 1\n    else:\n        break\nm = min(a.keys())\nwhile k > 0:\n    k -= 1\n    if a[m] is 1:\n        a.pop(m)\n    else:\n        a[m] -= 1\n    a[m - 1] = a.get(m - 1, 0) + 2\n    m -= 1\nfor k in sorted(list(a.keys()), reverse=True):\n    print(('%d ' % k) * a[k], end='')", "n,k=map(int,input().split())\na=list(bin(n))\na=a[2:]\nb=[]\nfor i in range(100005):\n\tb.append(0)\nl=len(a)\nc=0\nfor i in range(l):\n\tif(a[i]==\"1\"):\n\t\tb[65-(l-i-1)]=1\n\t\tc+=1\n\t\tlini=65-(l-i-1)\nif(c<=k):\n\tgfati=0\n\tfor i in range(129):\n\t\tif(gfati==1):\n\t\t\tbreak\n\t\tif(c==k):\n\t\t\tbreak\n\t\tif(b[i]==0):\n\t\t\tcontinue\n\t\telse:\n\t\t\tif(i>lini):\n\t\t\t\tlini=i\n\t\t\t#print(c,2*b[i])\n\t\t\tif(c+b[i]<=k):\n\t\t\t\t#print(\"why\")\n\t\t\t\tb[i+1]+=2*b[i]\n\t\t\t\tc+=b[i]\n\t\t\t\tb[i]=0\n\t\t\telse:\n\t\t\t\tgfati=1\n\t#print(c,lini)\n\tif(1):\n\t\tfor i in range(lini,1000005,1):\n\t\t\tif(c==k):\n\t\t\t\tbreak\n\t\t\tif(b[i]!=0):\n\t\t\t\tif(c+1<=k):\n\t\t\t\t\tb[i]-=1\n\t\t\t\t\tc+=1\n\t\t\t\t\tb[i+1]+=2\n\tprint(\"Yes\")\n\tfor i in range(100005):\n\t\tif(b[i]!=0):\n\t\t\tfor j in  range(b[i]):\n\t\t\t\tprint(65-i,end=\" \")\nelse:\n\tprint(\"No\")", "ii=lambda:int(input())\nkk=lambda:map(int, input().split())\nll=lambda:list(kk())\n\nfrom math import log\n\nelems = [0]*126\nn,k=kk()\nc=0\nfor i in range(63):\n\tif n&(2**i):\n\t\telems[i]=1\n\t\tc+=1\nif c > k:\n\tprint(\"No\")\n\treturn\nfor i in range(63, -63,-1):\n\tif elems[i]:\n\t\tif elems[i] > k-c:\n\t\t\t#stop it, now reverse sweep\n\t\t\tbreak\n\t\tc+=elems[i]\n\t\telems[i-1] += elems[i]*2\n\t\telems[i] = 0\nprin = []\nfor i in range(63, -63, -1):\n\tprin.extend([i]*elems[i])\nwhile len(prin)<k:\n\tprin[-1]-=1\n\tprin.append(prin[-1])\nprint(\"Yes\")\nprint(\" \".join(map(str, prin)))", "n, k = map(int, input().split())\n\ns = list()\nb = list()\nbase = 0\nwhile n > 0:\n    s.append(n%2)\n    b.append(base)\n    n //= 2\n    base += 1\ns.reverse() # indicate existence\nb.reverse() # indicate which power of 2\n# print(s)\n# print(b)\n\nt = sum(s)\nif t > k:\n    print('No')\n    return\n    \npos = 0\nwhile t < k:\n    if pos+1 == len(s): # extend if necessary\n        s.append(0)\n        b.append(b[-1] - 1)\n\n    if t + s[pos] <= k:\n        t += s[pos]\n        s[pos+1] += 2 * s[pos]\n        s[pos] = 0\n        pos += 1        \n    else:       \n        for i in range(len(s)-1, -1, -1):\n            if s[i] > 0:\n                while t < k:\n                    if i+1 == len(s):\n                        s.append(0)\n                        b.append(b[-1] - 1)                    \n                    s[i] -= 1\n                    s[i+1] += 2\n                    t += 1\n                    i += 1\n                break\n\nres = list() # comply with answer form\nfor i in range(len(s)):\n    for j in range(s[i]):\n        res.append(b[i])\nprint('Yes')\nprint(' '.join(map(str, res)))        ", "import math\nx, k = list(map(int, input().split()))\nkori = k\na = bin(x)\n\n# s = a[2:len(a)]\nqtz = 0;\ns = []\nfor i in range(2, len(a)):\n    if a[i] == \"1\":\n        k-=1\n        s.append(1)\n    else:\n        qtz+=1\n        s.append(0)\n\n\n\nv = []\nfor i in range(len(s)):\n    if s[i] != 0:\n        v.append((len(s)-1)-i)\n    # else:\n        # v.append(\"x\")\n\n# print(qtz, k)\nif k < 0:\n    print(\"No\")\n    return\nelse:\n    tam = len(s)\n    # print(tam)\n    print(\"Yes\")\n    # print(k, s)\n    if k > 0:\n        p = 0\n        #diminui o y m\u00e1ximo\n        while(1):\n            # print(p, s[p], len(s))\n            if tam - 1 <= p:\n                s.append(0)\n            if s[p] > k:\n                break\n            else:\n                k-= s[p]\n                s[p+1] += s[p]*2\n                s[p] = 0\n                p+=1\n        #se k ainda for maior que zero\n        if k > 0:\n            j = len(s)-1\n            while k > 0:\n                while s[j] == 0:\n                    j-=1\n                s[j] -= 1\n                if j == len(s)-1:\n                    s.append(2)\n                    j+=1\n                else:\n                    s[j+1] += 2\n                    j+=1\n                k-=1\n\n\n            # print(s)\n        v = []\n        for i in range(len(s)):\n            for j in range(s[i]):\n                v.append((tam-1) -i)\n        print(*v)\n    else:\n        v = []\n        for i in range(len(s)):\n            for j in range(s[i]):\n                v.append(len(s)-1 -i)\n        print(*v)\n"]