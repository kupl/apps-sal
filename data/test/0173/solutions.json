["a, b = list(map(int, input().split(' ')))\nhor = input()\nver = input()\nif (hor[0], ver[0]) == ('>', 'v') or (hor[0], ver[-1]) == ('<', 'v'):\n    print(\"NO\")\nelif (hor[-1], ver[0]) == ('>', '^') or (hor[-1], ver[-1]) == ('<', '^'):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "h, w = map(int, input().split())\ngo = [[[] for x in range(w)] for y in range(h)]\ns = input()\nfor i in range(h):\n    if s[i] == '>':\n        for j in range(w - 1):\n            go[i][j].append((i, j + 1))\n    else:\n        for j in range(1, w):\n            go[i][j].append((i, j - 1))\ns = input()\nfor i in range(w):\n    if s[i] == '^':\n        for j in range(1, h):\n            go[j][i].append((j - 1, i))\n    else:\n        for j in range(h - 1):\n            go[j][i].append((j + 1, i))\n\ngood = True\nfor i in range(h):\n    for j in range(w):\n        u = [[False for x in range(w)] for y in range(h)]\n        u[i][j] = True\n        q = [(i, j)]\n        hd = 0\n        while hd < len(q):\n            for g in go[q[hd][0]][q[hd][1]]:\n                if not u[g[0]][g[1]]:\n                    u[g[0]][g[1]] = True\n                    q.append(g)\n            hd += 1\n        if len(q) != h * w:\n            good = False\n\n\nprint(\"YES\" if good else \"NO\")", "3\n\nimport sys\n\n\"\"\"\n4 6\n<><>\nv^v^v^\n\"\"\"\n\ndef num_of_accessible(g, node):\n    q = [node]\n    seen = set([node])\n    while len(q) > 0:\n        v = q.pop()\n        for u in g[v]:\n            if u in seen:\n                continue\n            seen.add(u)\n            q.append(u)\n    return len(seen)\n\ndef __starting_point():\n    n, m = list(map(int, sys.stdin.readline().split()))\n    horiz = sys.stdin.readline().strip()\n    vert = sys.stdin.readline().strip()\n    \n    # Graph\n    g = {(i, j): [] for i in range(n) for j in range(m)}\n    for i, h in enumerate(horiz):\n        if h == '<':\n            for j in range(m-1):\n                g[(i, j+1)].append((i, j))\n        else:\n            for j in range(m-1):\n                g[(i, j)].append((i, j+1))\n    for j, v in enumerate(vert):\n        if v == 'v':\n            for i in range(n-1):\n                g[(i, j)].append((i+1, j))\n        else:\n            for i in range(n-1):\n                g[(i+1, j)].append((i, j))\n        \n    conn = True\n    for node in g:\n        if num_of_accessible(g, node) < n*m:\n            conn = False\n            break\n    \n    print('YES' if conn else 'NO')\n\n__starting_point()", "n,m=map(int,input().split())\ns=input()\nt=input()\nif (s[0]=='>' and t[0]=='v') or (s[0]=='<' and t[0]=='^') or (s[0]=='>' and t[m-1]=='^') or (s[0]=='<' and t[m-1]=='v') or (s[n-1]=='>' and t[0]=='^') or (s[n-1]=='<' and t[0]=='v'):\n   print(\"NO\")\nelse:print(\"YES\")", "# CF BAYAN WARMUP\n# B\n\nl = input()\nh = input()\nv = input()\n\nif h[0] == \"<\" and v[0] == \"^\":\n    print(\"NO\")\nelif h[0] == \">\" and v[-1] == \"^\":\n    print(\"NO\")\nelif h[-1] == \"<\" and v[0] == \"v\":\n    print(\"NO\")\nelif h[-1] == \">\" and v[-1] == \"v\":\n    print(\"NO\")\nelse:\n    print(\"YES\")\n", "n, m = list(map(int, input().split()))\na = input()\nb = input()\nif (a[0] == '>' and b[0] == 'v') or (a[0] == '<' and b[-1] == 'v') or (a[-1] == '>' and b[0] == '^') or (a[-1] == '<' and b[-1] == '^'):\n    print('NO')\nelse:\n    print('YES')\n", "3\n\nn, m = input().split()\nn = int(n)\nm = int(m)\n\nif n == m == 1:\n    print(\"YES\")\nelse:\n    x, y = input(), input()\n    x = (1 if x[0] == '<' else 0, 1 if x[-1] == '>' else 0)\n    y = (1 if y[0] == 'v' else 0, 1 if y[-1] == '^' else 0)\n    if (sum(x) + sum(y)) % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "from collections import deque\n\ndic = {'>': (0, 1), '<': (0, -1), 'v': (1, 0), '^': (-1, 0)}\n[n, m], hor, vert = list(map(int, input().split())), input().strip(), input().strip()\nfor _x in range(n):\n    for _y in range(m):\n        q, d = deque([(_x, _y)]), [[0] * m for x in range(n)]\n        d[_x][_y] = 1\n        while q:\n            x, y = q.popleft()\n            for direction in '><v^':\n                dx, dy = dic[direction]\n                if -1 < x + dx < n and -1 < y + dy < m and (vert[y] == direction if dx else hor[x] == direction) and not d[x + dx][y + dy]:\n                    d[x + dx][y + dy] = 1\n                    q.append((x + dx, y + dy))\n        if sum(sum(d, [])) != n * m:\n            print('NO')\n            break\n    else:\n        continue\n    break\nelse:\n    print('YES')\n", "from collections import deque\n\nn, m = list(map(int, input().split()))\n\ns1 = input()\ns2 = input()\n\nok = True\n\nfor i in range(n):\n    for j in range(m):\n        c = [[False for _ in range(m)] for __ in range(n)]\n        c[i][j] = True\n\n        q = deque()\n        q.append((i, j))\n\n        while len(q) > 0:\n            x, y = q.popleft()\n\n            if s1[x] == '>' and y + 1 < m and not c[x][y + 1]:\n                c[x][y + 1] = True\n                q.append((x, y + 1))\n            elif s1[x] == '<' and y - 1 >= 0 and not c[x][y - 1]:\n                c[x][y - 1] = True\n                q.append((x, y - 1))\n\n            if s2[y] == '^' and x - 1 >= 0 and not c[x - 1][y]:\n                c[x - 1][y] = True\n                q.append((x - 1, y))\n            elif s2[y] == 'v' and x + 1 < n and not c[x + 1][y]:\n                c[x + 1][y] = True\n                q.append((x + 1, y))\n\n        for a in range(n):\n            for b in range(m):\n                if not c[a][b]:\n                    ok = False\n\nif ok:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "n,m=list(map(int,input().split()))\n\na=input()\nb=input()\n\nif a[0]=='>' and a[n-1]=='<' and b[0]=='^' and b[m-1]=='v':\n    print (\"YES\")\nelif  a[n-1]=='>' and a[0]=='<' and b[m-1]=='^' and b[0]=='v':\n    print(\"YES\")\nelse:print(\"NO\")\n", "n, m = map(int, input().split())\na = input()\nb = input()\nf = True\ndef dfs(x, y):\n    tmp = 1\n    used[x + y * 42] = 1\n    if a[x] == '>' and y + 1 < m:\n        if used[x + (y + 1) * 42] == 0:\n            tmp += dfs(x, y + 1)\n    if a[x] == '<' and y - 1 >= 0:\n        if used[x + (y - 1) * 42] == 0:\n            tmp += dfs(x, y - 1)\n    if b[y] == 'v' and x + 1 < n:\n        if used[x + 1 + (y) * 42] == 0:\n            tmp += dfs(x + 1, y)\n    if b[y] == '^' and x - 1 >= 0:\n        if used[x - 1 + (y) * 42] == 0:\n            tmp += dfs(x - 1, y)\n    return(tmp)\n    \nfor i in range(n):\n    for j in range(m):\n        used = [0] * 1000\n        if dfs(i, j) != n * m:\n            f = False\nif f:\n    print('YES')\nelse:\n    print('NO')", "'''\nCreated on Oct 5, 2014\n\n@author: Ismael\n'''\nfrom _collections import defaultdict\n\ndef DFexplo(dictAdj,start):\n    explored = {start}\n    lifo = [start]\n    while(len(lifo)>0):\n        node = lifo.pop()\n        for child in dictAdj[node]:\n            if(child not in explored):\n                explored.add(child)\n                lifo.append(child)\n    return explored\n\ndef solve(dictAdj):\n    #print(dictAdj)\n    for i in range(len(H)):\n        for j in range(len(V)):\n            nodesReachable = DFexplo(dictAdj,(i,j))\n            if(len(nodesReachable) < n*m-1):\n                return False\n    return True\n\ndef isNode(i,j):\n    return 0 <= i < n and 0 <= j < m\n\ndef buildGraph(H,V):\n    dictAdj = defaultdict(list)\n    for i in range(len(H)):\n        for j in range(len(V)):\n            if(isNode(i,j-1) and H[i]=='<'):\n                dictAdj[(i,j)].append((i,j-1))\n            if(isNode(i,j+1) and H[i]=='>'):\n                dictAdj[(i,j)].append((i,j+1))\n            if(isNode(i-1,j) and V[j]=='^'):\n                dictAdj[(i,j)].append((i-1,j))\n            if(isNode(i+1,j) and V[j]=='v'):\n                dictAdj[(i,j)].append((i+1,j))\n    return dictAdj\n\nn,m = map(int,input().split())\nH = input()\nV = input()\ndictAdj = buildGraph(H,V)\nif(solve(dictAdj)):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "data = input().split()\nn = int(data[0])\nm = int(data[1])\nh = input().rstrip()\nv = input().rstrip()\nf = (h[0] == '<' and v[0] == 'v' and v[-1] == '^' and h[-1] == '>') or (h[0] == '>' and v[0] == '^' and v[-1] == 'v' and h[-1] == '<')\nprint('YES' if f else 'NO')", "def dfs(x, y):\n    if not graph[2][x + graph[0][x][y]][y]:\n        graph[2][x + graph[0][x][y]][y] = True\n        dfs(x + graph[0][x][y], y)\n    if not graph[2][x][y + graph[1][x][y]]:\n        graph[2][x][y + graph[1][x][y]] = True\n        dfs(x, y + graph[1][x][y])\n            \nn, m = list(map(int, input().split()))\nc = chr(0)\nflag1 = True\ngraph = [[[0] * (n + 1) for i in range(m + 1)], [[0] * (n + 1) for i in range(m + 1)], [[False] * (n + 1) for i in range(m + 1)]]\n\ns = input()\nfor i in range(n):\n    c = s[i]\n    if c == '<':\n        for j in range(1, m):\n            graph[0][j][i] = -1\n    else:\n        for j in range(m - 1):\n            graph[0][j][i] = 1\n                    \ns = input()\nfor i in range(m):\n    c = s[i]\n    if c == '^':\n        for j in range(1, n):\n            graph[1][i][j] = -1\n    else:\n        for j in range(n - 1):\n            graph[1][i][j] = 1\n                    \nfor i in range(n):\n    for j in range(m):\n        flag = False\n        if flag1:\n            for k in range(n):\n                for l in range(m):\n                    graph[2][l][k] = False\n            graph[2][j][i] = True\n            dfs(j, i)\n            for k in range(n):\n                for l in range(m):\n                    if graph[2][l][k] == False:\n                        flag = True\n             #           print(i, j, k, l)\n            if flag:\n                print('NO')\n                flag1 = not flag\n\nif flag1:\n    print('YES')\n    \n#print()\n#for i in range(n):\n    #for j in range(m):\n        #print(graph[0][j][i], end = ' ')\n    #print()\n#print()\n#for i in range(n):\n    #for j in range(m):\n        #print(graph[1][j][i], end = ' ')\n    #print()\n", "#input\nn,m=map(int,input().split())\nnstr=str(input())\nmstr=str(input())\n\n#variables\n\n#main\nif nstr[0]=='>' and mstr[0]=='v':\n\tprint('NO')\n\tquit()\nif nstr[0]=='<' and mstr[-1]=='v':\n\tprint('NO')\n\tquit()\nif nstr[-1]=='>' and mstr[0]=='^':\n\tprint('NO')\n\tquit()\nif nstr[-1]=='<' and mstr[-1]=='^':\n\tprint('NO')\n\tquit()\nprint('YES')", "h, w = map(int, input().split())\ngo = [[[] for x in range(w)] for y in range(h)]\ns = input()\nfor i in range(h):\n    if s[i] == '>':\n        for j in range(w - 1):\n            go[i][j].append((i, j + 1))\n    else:\n        for j in range(1, w):\n            go[i][j].append((i, j - 1))\ns = input()\nfor i in range(w):\n    if s[i] == '^':\n        for j in range(1, h):\n            go[j][i].append((j - 1, i))\n    else:\n        for j in range(h - 1):\n            go[j][i].append((j + 1, i))\n\ngood = True\nfor i in range(h):\n    for j in range(w):\n        u = [[False for x in range(w)] for y in range(h)]\n        u[i][j] = True\n        q = [(i, j)]\n        hd = 0\n        while hd < len(q):\n            for g in go[q[hd][0]][q[hd][1]]:\n                if not u[g[0]][g[1]]:\n                    u[g[0]][g[1]] = True\n                    q.append(g)\n            hd += 1\n        if len(q) != h * w:\n            good = False\n\n\nprint(\"YES\" if good else \"NO\")", "h, w = map(int, input().split())\ngo = [[[] for x in range(w)] for y in range(h)]\ns = input()\nt = input()\nc1 = s[0] == '<' and s[h - 1] == '>' and t[0] == 'v' and t[w - 1] == '^'\nc2 = s[0] == '>' and s[h - 1] == '<' and t[0] == '^' and t[w - 1] == 'v'\nprint(\"YES\" if c1 or c2 else \"NO\")", "n , m = map(int,input().split())\nh = input()\nv = input()\nif (h[0] == '>' and v[0] == 'v') or (h[-1] == '<' and v[-1] == '^') or (h[0] == '<' and v[-1] == 'v') or (h[-1] == '>' and v[0] == '^'):\n    print('NO')\nelse:\n    print('YES')", "'''\nCreated on Oct 6, 2014\n\n@author: nod\n'''\nn, m = map(int, input().split())\nhorizontal = str(input())\nvisited = []\nh = []\nvertical = str(input())\nv = []\nfor char in horizontal:\n    if char == \">\":\n        h.append(int(1))\n    else:\n        h.append(int(-1))\nfor char in vertical:\n    if char == \"v\":\n        v.append(int(1))\n    else:\n        v.append(int(-1))\ndef travel(ni, mi):\n    leftright = h[ni]\n    updown = v[mi]\n    visited.append([ni,mi])\n    newn = ni + updown\n    newm = mi + leftright\n    if newn >= 0 and newn < n and [newn,mi] not in visited:\n#        print(newn,mi)\n        travel(newn,mi)\n    if newm >= 0 and newm < m and [ni,newm] not in visited:\n#        print(ni,newm)\n        travel(ni,newm)\n    return visited\n\ndef solve():\n    lst = [[0,0],[0,m-1],[n-1,0],[n-1,m-1]]\n    visited = []\n    for l in lst:\n        visited.clear()\n        vis = travel(l[0],l[1])\n        if len(vis) != m*n:\n            print(\"NO\")\n            return\n        visited.clear()\n        vis.clear()\n    print(\"YES\")\nsolve()", "input()\nhoriz = input()\nvert = input()\n\nm = horiz[0]+horiz[-1]+vert[0]+vert[-1]\n\nprint(\"YES\" if m in (\"><^v\", \"<>v^\") else \"NO\")", "n, m = map(int, input().split())\nh, v = input(), input()\nif h[0] == '<' and v[0] == '^':\n    print('NO')\nelif h[0] == '>' and v[0] == 'v':\n    print('NO')\nelif h[0] == h[-1] or v[0] == v[-1]:\n    print('NO')\nelse:\n    print('YES')", "# 475B\n\nfrom sys import stdin\n\n__author__ = 'artyom'\n\nstdin.readline()\np = stdin.readline().strip()\nq = stdin.readline().strip()\nprint('YES' if (p[0] == '>' and p[-1] == '<' and q[0] == '^' and q[-1] == 'v') or\n               (p[0] == '<' and p[-1] == '>' and q[0] == 'v' and q[-1] == '^') else 'NO')", "n, m = [int(x) for x in input().split()]\na = input()\nb = input()\nif a[0] == '<' and b[0] == 'v' and a[-1] == '>' and b[-1] == '^':\n\tprint('YES')\nelif a[0] == '>' and b[-1] == 'v' and a[-1] == '<' and b[0] == '^':\n\tprint('YES')\nelse:\n\tprint('NO')\n", "def main():\n    n, m = map(int, input().split())\n    nm = n * m\n    neigh = [[] for _ in range(nm)]\n    for y, c in enumerate(input()):\n        for x in range(y * m + 1, y * m + m):\n            if c == '<':\n                neigh[x].append(x - 1)\n            else:\n                neigh[x - 1].append(x)\n    for x, c in enumerate(input()):\n        for y in range(m + x, nm, m):\n            if c == '^':\n                neigh[y].append(y - m)\n            else:\n                neigh[y - m].append(y)\n\n    def getdsu(t):\n        if dsu[t] != t:\n            dsu[t] = getdsu(dsu[t])\n        return dsu[t]\n\n    def setdsu(u, v):\n        dsu[u] = getdsu(dsu[v])\n\n    def dfs(yx):\n        l[yx] = False\n        for yx1 in neigh[yx]:\n            if l[yx1]:\n                setdsu(yx1, yx)\n                dfs(yx1)\n\n    for i in range(nm):\n        l = [True] * nm\n        dsu = list(range(nm))\n        for j in range(i, i + nm):\n            j %= nm\n            if l[j]:\n                dfs(j)\n        if any(getdsu(_) != i for _ in range(nm)):\n            print('NO')\n            return\n    print('YES')\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n, m = map(int, input().split())\n    nm = n * m\n    neigh = [[] for _ in range(nm)]\n    for y, c in enumerate(input()):\n        for x in range(y * m + 1, y * m + m):\n            if c == '<':\n                neigh[x].append(x - 1)\n            else:\n                neigh[x - 1].append(x)\n    for x, c in enumerate(input()):\n        for y in range(m + x, nm, m):\n            if c == '^':\n                neigh[y].append(y - m)\n            else:\n                neigh[y - m].append(y)\n\n    def dfs(yx):\n        l[yx] = False\n        for yx1 in neigh[yx]:\n            if l[yx1]:\n                dfs(yx1)\n\n    for i in range(nm):\n        l = [True] * nm\n        dfs(i)\n        if any(l):\n            print('NO')\n            return\n    print('YES')\n\n\ndef __starting_point():\n    main()\n__starting_point()"]