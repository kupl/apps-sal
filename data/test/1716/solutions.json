["N, M, Q = list(map(int, input().split()))\n\ntable = [[0 for _ in range(N+1)] for _ in range(N+1)]\nfor _ in range(M):\n    L, R = list(map(int, input().split()))\n    table[L][R] += 1\n\nfor i in range(N+1):\n    for j in range(N):\n        table[i][j+1] += table[i][j]\nfor i in range(N):\n    for j in range(N+1):\n        table[i+1][j] += table[i][j]\n\nfor _ in range(Q):\n    p, q = list(map(int, input().split()))\n    print((table[q][q] - table[q][p-1] - table[p-1][q] + table[p-1][p-1]))\n\n", "n, m, q = map(int, input().split())\nlr = [list(map(int, input().split())) for i in range(m)]\npq = [list(map(int, input().split())) for i in range(q)]\nli = [[0] * (n + 1) for i in range(n + 1)]\nfor i in lr:\n    l, r = i[0], i[1]\n    li[l][r] += 1\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        li[i][j] += li[i - 1][j] + li[i][j - 1] - li[i - 1][j - 1]\nfor i in pq:\n    p, q = i[0], i[1]\n    print(li[q][q] - li[p - 1][q] - li[q][p - 1] + li[p - 1][p - 1])", "n,m,q=map(int,input().split())\na=[[0 for _ in range(n+1)]for _ in range(n+1)]\nfor _ in range(m):\n  l,r=map(int,input().split())\n  a[l][r]+=1\nfor i in range(n+1):\n  for j in range(n):\n    a[i][j+1]+=a[i][j]\nfor i in range(n):\n  for j in range(n+1):\n    a[i+1][j]+=a[i][j]\nfor _ in range(q):\n  l,r=map(int,input().split())\n  print(a[r][r]-a[r][l-1]-a[l-1][r]+a[l-1][l-1])", "import numpy as np\nN, M, Q = map(int, input().split())\ntable = np.zeros((N, N), np.int64)\nfor _ in range(M):\n    L, R = map(lambda n: int(n) - 1, input().split())\n    table[L][R] += 1\ntable = np.rot90(np.rot90(table, k=-1).cumsum(axis=0).cumsum(axis=1), k=1)\nfor _ in range(Q):\n    p, q = map(lambda n: int(n) - 1, input().split())\n    print(table[p][q])", "import sys\nsys.setrecursionlimit(10**8)\ndef ii(): return int(sys.stdin.readline())\ndef mi(): return map(int, sys.stdin.readline().split())\ndef li(): return list(map(int, sys.stdin.readline().split()))\ndef li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\ndef dp2(ini, i, j): return [[ini]*i for _ in range(j)]\n#import bisect #bisect.bisect_left(B, a)\n#from collections import defaultdict #d = defaultdict(int) d[key] += value\n#from collections import Counter # a = Counter(A).most_common()\nfrom itertools import accumulate #list(accumulate(A))\n\n# BIT\u6728\n\n# Binary Indexed Tree (Fenwick Tree)\nclass BIT:\n    def __init__(self, n):\n        self.n = n\n        self.data = [0]*(n+1)\n        self.el = [0]*(n+1)\n    def sum(self, i):\n        s = 0\n        while i > 0:\n            s += self.data[i]\n            i -= i & -i\n        return s\n    def add(self, i, x):\n        # assert i > 0\n        self.el[i] += x\n        while i <= self.n:\n            self.data[i] += x\n            i += i & -i\n    def get(self, i, j=None):\n        if j is None:\n            return self.el[i]\n        return self.sum(j) - self.sum(i)\n\nN, M, Q = mi()\nbit = BIT(N)\nlrpq = dp2(0, 3, M+Q)\n\nfor i in range(M):\n    l, r = mi()\n    lrpq[i][1] = l-1\n    lrpq[i][2] = r-1\n\nfor i in range(M, M+Q):\n    p, q = mi()\n    lrpq[i][0] = i\n    lrpq[i][1] = p-1\n    lrpq[i][2] = q-1\n\nlrpq = sorted(lrpq, key=lambda x:(x[2], x[0]))\n\nans = [0]*(Q)\n\nfor i in range(M+Q):\n    if lrpq[i][0] == 0:\n        #L[lrpq[i][1]] += 1\n        bit.add(lrpq[i][1]+1, 1)\n        #BIT_update(lrpq[i][1]+1, 1)\n    else:\n        bit.sum(lrpq[i][2])\n        if lrpq[i][1] > 0:\n            ans[lrpq[i][0]-M] = bit.sum(lrpq[i][2]+1) - bit.sum(lrpq[i][1])\n        else:\n            ans[lrpq[i][0]-M] = bit.sum(lrpq[i][2]+1)\n\nfor num in ans:\n    print(num)", "# D - AtCoder Express 2 \nimport sys\n\nN, M, Q = list(map(int, sys.stdin.readline().strip().split()))\n\ncusum = [[0] * (N + 1) for _ in range(N + 1)]\nfor _ in range(M):\n    L, R = list(map(int, sys.stdin.readline().strip().split()))\n    cusum[L][R] += 1\n\n# \u7d2f\u7a4d\u548c\u306e\u8a08\u7b97\nfor i in range(N):\n    for j in range(N):\n        cusum[i + 1][j + 1] += cusum[i + 1][j] + cusum[i][j + 1] - cusum[i][j]\n\n\nfor _ in range(Q):\n    p, q = list(map(int, sys.stdin.readline().strip().split()))  # p <= q\n\n    ans = cusum[q][q] - cusum[q][p - 1] - cusum[p - 1][q] + cusum[p- 1][p - 1]\n    print(ans)\n", "# D - AtCoder Express 2\n\nN, M, Q = map(int, input().split())\nG = [[0] * (N+1) for _ in range(N+1)]\n\nfor _ in range(M):\n    L, R = map(int, input().split())\n    G[L][R] += 1\n\nfor i in range(N):\n    for j in range(N):\n        G[i+1][j+1] += G[i+1][j] + G[i][j+1] - G[i][j]\n\nfor _ in range(Q):\n    p, q = map(int, input().split())\n    ans = G[q][q] - G[p-1][q] - G[q][p-1] + G[p-1][p-1]\n    print(ans)", "N, M, Q = map(int, input().split())\ntrains = [[0] * (N + 1) for _ in range(N + 1)]\nfor _ in range(M):\n    L, R = map(int, input().split())\n    trains[L][R] += 1\nfor i in range(1, N + 1):\n    for j in range(1, N + 1):\n        trains[i][j] += trains[i - 1][j]\nfor i in range(1, N + 1):\n    for j in range(1, N + 1):\n        trains[i][j] += trains[i][j - 1]\nans = [0] * Q\nfor k in range(Q):\n    p, q = map(int, input().split())\n    ans[k] = trains[q][q] - trains[p-1][q] - trains[q][p-1] + trains[p-1][p-1]\nfor A in ans:\n    print(A)", "def train_map(LR,N):\n    train = [[0 for _ in range(N+1)] for _ in range(N+1)]\n    #train[i][j]:\u3061\u3087\u3046\u3069\u533a\u9593i\u304b\u3089j\u3092\u8d70\u308b\u96fb\u8eca\u306e\u672c\u6570\uff08\u5f8c\u306b\u7d2f\u7a4d\u548c\u306b\uff09\n    for l,r in LR:\n        train[l][r] += 1\n\n    #\u7d2f\u7a4d\u548c\n    for i in range(N+1):\n        for j in range(1,N+1):\n            train[i][j] += train[i][j-1]\n    for j in range(N+1):\n        for i in reversed(list(range(1,N+1))):\n            train[i-1][j] += train[i][j]\n\n    return train\n\ndef main():\n    N,M,Q = list(map(int,input().split()))\n    LR = [list(map(int,input().split())) for _ in range(M)]\n    pq = [list(map(int,input().split())) for _ in range(Q)]\n\n    train = train_map(LR,N)\n\n    for p,q in pq:\n        print((train[p][q]))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n , m , q = list(map(int, input().split()))\ntable = [[0]*n for i in range(n)]\n\nfor i in range(m):\n    l , r = list(map(int, input().split()))\n    l-=1\n    r-=1\n    table[r][l]+=1\n\nfor i in range(n):\n    for j in range(1,n):\n        table[i][j]=table[i][j]+table[i][j-1]\n\nfor i in range(n):\n    for j in range(1,n):\n        table[j][i]=table[j][i]+table[j-1][i]\n\nfor i in range(q):\n    l , r = list(map(int, input().split()))\n    l-=1\n    r-=1\n    if l!=0:\n        ans=table[r][r]-table[r][l-1]\n    else:\n        ans=table[r][r]\n    print(ans)\n", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\n\n\ndef main():\n    N, M, Q = map(int, readline().split())\n    A = [[0] * N for _ in range(N)]\n    for _ in range(M):\n        l, r = map(int, readline().split())\n        A[l - 1][r - 1] += 1\n\n    B = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(N):\n        for j in range(N):\n            B[i + 1][j + 1] = B[i][j + 1] + B[i + 1][j] - B[i][j] + A[i][j]\n\n    ans = [0] * Q\n    for i in range(Q):\n        p, q = map(int, readline().split())\n        p -= 1\n        q -= 1\n        ans[i] = B[q + 1][q + 1] - B[q + 1][p] - B[p][q + 1] + B[p][p]\n\n    print(*ans, sep='\\n')\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from sys import stdin\nimport numpy as np\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    n,m,q=map(int,readline().split())\n    table=np.array([[0]*n for _ in range(n)],dtype=\"int64\")\n    for i in range(m):\n        l,r=map(lambda x:int(x)-1,readline().split())\n        table[l][r]+=1\n\n    #\u7d2f\u7a4d\u548c\n    for i in range(n):\n        table[i]=table[i].cumsum()\n\n    ans=[0]*q\n    for i in range(q):\n        l,r=map(lambda x:int(x)-1,readline().split())\n        ans[i]=table[l:r+1,r].sum()\n\n    for i in range(q):\n        print(ans[i])\n\ndef __starting_point():\n    main()\n__starting_point()", "import numpy as np\nimport sys\ninput = sys.stdin.readline\n\n\ndef main():\n    n, m, q = map(int, input().split())\n    counts = np.zeros((n+1, n+1), dtype=np.int32)\n    for _ in range(m):\n        from_, to = map(int, input().split())\n        counts[:from_+1, to] += 1\n\n    counts = np.cumsum(counts, axis=1)\n\n    queries = np.array([list(map(int, input().split())) for _ in range(q)])\n    ps = queries[:, 0]\n    qs = queries[:, 1]\n    res = counts[ps, qs]\n    print(*res, sep=\"\\n\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from itertools import accumulate\n \nN,M,Q=map(int, input().split())\na=[[0]*N for i in range(N)]\n\nfor i in range(M):\n  l,r=map(int, input().split())\n  a[l-1][r-1]+=1\n\nfor i in range(N):\n  a[i]=list(accumulate(a[i]))\n\nfor i in range(N):\n  for j in range(N-1):\n    a[j+1][i]+=a[j][i]\n\nfor i in range(Q):\n  p,q=map(int, input().split())\n  if p==1:\n    ans=a[q-1][q-1]\n  else:\n    ans=a[q-1][q-1]-a[p-2][q-1]\n  print(ans)", "n, m, q = map(int, input().split())\nlr = []\nfor _ in range(m):\n    lr.append(list(map(int, input().split())))\n\na = [[0] * n for i in range(n)]\nfor l, r in lr:\n    a[l - 1][r - 1] += 1\n\ncnt = [[0]*n for i in range(n)]\nfor y in range(n):\n    v = 0\n    for x in range(y, -1, -1):\n        v += a[x][y]\n        cnt[x][y] = cnt[x][y - 1] + v\n\nfor _ in range(q):\n    p, q = map(int, input().split())\n    print(cnt[p-1][q-1])", "# \u7d2f\u7a4d\u548c(2\u6b21\u5143)\nN, M, Q = map(int, input().split())\n\nt = [[0] * (N + 1) for _ in range(N + 1)]\nfor _ in range(M):\n    L, R = map(int, input().split())\n    t[L][R] += 1\n\nfor i in range(N + 1):\n    for j in range(N):\n        t[i][j + 1] += t[i][j]\n\nfor i in range(N):\n    for j in range(N + 1):\n        t[i + 1][j] += t[i][j]\n\nresult = []\nfor _ in range(Q):\n    p, q = map(int, input().split())\n    result.append(t[q][q] + t[p - 1][p - 1] - t[p - 1][q] - t[q][p - 1])\n#print('\\n'.join(str(v) for v in result))\nprint(*result, sep='\\n')\n", "n, m, Q = [int(i) for i in input().split()]\ngrid = [[0] * n for i in range(n)]\ngrid_acc = [[0] * n for i in range(n)]\nfor i in range(m):\n    l, r = [int(i) for i in input().split()]\n    grid[l-1][r-1] += 1\n\ngrid_acc[0][0] = grid[0][0]\nfor i in range(1, n):\n    grid_acc[i][0] = grid_acc[i-1][0] + grid[i][0]\n    grid_acc[0][i] = grid_acc[0][i-1] + grid[0][i]\n\nfor i in range(1, n):\n    for j in range(1, n):\n        grid_acc[i][j] = grid_acc[i-1][j] + grid_acc[i][j-1] - grid_acc[i-1][j-1] + grid[i][j]\n\nfor i in range(Q):\n    p, q = [int(i) for i in input().split()]\n    if p == 1:\n        print((grid_acc[q-1][q-1]))\n    else:\n        print((grid_acc[q-1][q-1] - grid_acc[p-2][q-1] - grid_acc[q-1][p-2] + grid_acc[p-2][p-2]))\n", "import sys\nsys.setrecursionlimit(10**8)\ndef ii(): return int(sys.stdin.readline())\ndef mi(): return map(int, sys.stdin.readline().split())\ndef li(): return list(map(int, sys.stdin.readline().split()))\ndef li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\ndef dp2(ini, i, j): return [[ini]*i for _ in range(j)]\n#import bisect #bisect.bisect_left(B, a)\n#from collections import defaultdict #d = defaultdict(int) d[key] += value\n#from collections import Counter # a = Counter(A).most_common()\nfrom itertools import accumulate #list(accumulate(A))\n\n\ndef segfunc(a,b):\n    return a+b\n\ndef init(init_val):\n    #set_val\n    for i in range(n):\n        seg[i+num-1]=init_val[i]    \n    #built\n    for i in range(num-2,-1,-1) :\n        seg[i]=segfunc(seg[2*i+1],seg[2*i+2]) \n    \ndef update(k,x):\n    k += num-1\n    seg[k] = x\n    while k:\n        k = (k-1)//2\n        seg[k] = segfunc(seg[k*2+1],seg[k*2+2])\n    \ndef query(p,q):\n    if q<=p:\n        return ide_ele\n    p += num-1\n    q += num-2\n    res=ide_ele\n    while q-p>1:\n        if p&1 == 0:\n            res = segfunc(res,seg[p])\n        if q&1 == 1:\n            res = segfunc(res,seg[q])\n            q -= 1\n        p = p//2\n        q = (q-1)//2\n    if p == q:\n        res = segfunc(res,seg[p])\n    else:\n        res = segfunc(segfunc(res,seg[p]),seg[q])\n    return res\n\n\nn, M, Q = mi()\n\n#####\u5358\u4f4d\u5143######\nide_ele = 0\n#num:n\u4ee5\u4e0a\u306e\u6700\u5c0f\u306e2\u306e\u3079\u304d\u4e57\nnum =2**(n-1).bit_length()\nseg=[ide_ele]*2*num\n\nL = [0]*n\ninit(L)\n\nlrpq = dp2(0, 3, M+Q)\n\nfor i in range(M):\n    l, r = mi()\n    lrpq[i][1] = l-1\n    lrpq[i][2] = r-1\n\nfor i in range(M, M+Q):\n    p, q = mi()\n    lrpq[i][0] = i\n    lrpq[i][1] = p-1\n    lrpq[i][2] = q-1\n\nlrpq = sorted(lrpq, key=lambda x:(x[2], x[0]))\n\nans = [0]*(Q)\n\nfor i in range(M+Q):\n    if lrpq[i][0] == 0:\n        L[lrpq[i][1]] += 1\n        update(lrpq[i][1], L[lrpq[i][1]])\n    else:\n        ans[lrpq[i][0]-M] = query(lrpq[i][1], lrpq[i][2]+1)\n\nfor num in ans:\n    print(num)", "N,M,Q = map(int,input().split())\nline = [tuple(map(int,input().split())) for i in range(M)]\nquery = [tuple(map(int,input().split())) for i in range(Q)]\ndp = [[0 for i in range(N+1)] for i in range(N+1)]\nfor l in line:\n    dp[l[0]][l[1]] += 1\nfor i in range(N):\n    for j in range(N):\n        dp[i+1][j+1] += dp[i+1][j]\nfor i in range(N):\n    for j in range(N):\n        dp[i+1][j+1] += dp[i][j+1]\nfor p,q in query:\n    print(dp[q][q]-dp[q][p-1]-dp[p-1][q]+dp[p-1][p-1])", "import numpy as np\n\n\nN, M, Q, *LRpq = list(map(int, open(0).read().split()))\nLR, pq = LRpq[: 2 * M], LRpq[2 * M :]\ndel LRpq\n\nacc = np.zeros((N + 1, N + 1), dtype=np.int64)\nfor L, R in zip(*[iter(LR)] * 2):\n    acc[L][R] += 1\nacc = np.cumsum(acc, axis=0)\nacc = np.cumsum(acc, axis=1)\n\nans = [0] * Q\nfor i, (p, q) in enumerate(zip(*[iter(pq)] * 2)):\n    ans[i] = acc[q][q] + acc[p - 1][p - 1] - acc[p - 1][q] - acc[q][p - 1]\nprint((\"\\n\".join(map(str, ans))))\n", "# \u7d2f\u7a4d\u548c(2\u6b21\u5143)\nN, M, Q = list(map(int, input().split()))\n\nt = [[0] * (N + 1) for _ in range(N + 1)]\nfor _ in range(M):\n    L, R = list(map(int, input().split()))\n    t[L][R] += 1\n\nfor i in range(N + 1):\n    for j in range(N):\n        t[i][j + 1] += t[i][j]\n\nfor i in range(N):\n    for j in range(N + 1):\n        t[i + 1][j] += t[i][j]\n\nresult = []\nfor _ in range(Q):\n    p, q = list(map(int, input().split()))\n    result.append(t[q][q] + t[p - 1][p - 1] - t[p - 1][q] - t[q][p - 1])\nprint(('\\n'.join(str(v) for v in result)))\n#print(*result, sep='\\n')\n", "import numpy as np\n\ndef main():\n    n,m,q=map(int,input().split())\n    lst=np.zeros((n,n),dtype=int)\n\n    for _ in range(m):\n        s,t=map(int,input().split())\n        lst[s-1][t-1]+=1\n    lst=lst.cumsum(axis=1)[::-1].cumsum(axis=0)[::-1]\n\n    for _ in range(q):\n        s,t=map(int,input().split())\n        print(lst[s-1][t-1])\n\nmain()", "import sys\nsys.setrecursionlimit(10010010)\n\ndef abc106_d():\n    n, m, q = map(int, input().split())\n    table = [[0]*(n+1) for _ in range(n+1)]\n    for _ in range(m):\n        l, r = map(int, input().split())\n        table[l][r] += 1\n    query = [tuple(map(int, input().split())) for _ in range(q)]\n\n    dp = [[-1]*(n+1) for _ in range(n+1)]\n\n    def calc(l, r):\n        nonlocal dp\n        if l == 0 or r == 0: return 0\n        if dp[l][r] != -1: return dp[l][r]\n        res = calc(l-1, r) + calc(l, r-1) - calc(l-1, r-1) + table[l][r]\n        dp[l][r] = res\n        return res\n\n    for p, q in query:\n        ans = calc(q, q) - calc(q, p-1) - calc(p-1, q) + calc(p-1, p-1)\n        print(ans)\n\ndef __starting_point():\n    abc106_d()\n__starting_point()", "n, m, Q = map(int, input().split())\nd = [[0 for i in range(n + 1)] for i in range(n + 1)]\nfor i in range(m):\n    l, r = map(int, input().split())\n    d[l][r] += 1\nfor i in range(n + 1):\n    for j in range(n):\n        d[i][j + 1] += d[i][j]\nfor i in range(n + 1):\n    for j in range(n):\n        d[n - 1 - j][i] += d[n - j][i]\nfor i in range(Q):\n    p, q = map(int, input().split())\n    print(d[p][q])", "import sys\nsys.setrecursionlimit(10**8)\ndef ii(): return int(sys.stdin.readline())\ndef mi(): return map(int, sys.stdin.readline().split())\ndef li(): return list(map(int, sys.stdin.readline().split()))\ndef li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\ndef dp2(ini, i, j): return [[ini]*i for _ in range(j)]\n#import bisect #bisect.bisect_left(B, a)\n#from collections import defaultdict #d = defaultdict(int) d[key] += value\n#from collections import Counter # a = Counter(A).most_common()\nfrom itertools import accumulate #list(accumulate(A))\n\nN, M , Q = mi()\nLR = li2(M)\n\ndp = dp2(0, N, N)\n\nfor l, r in LR:\n    dp[l-1][r-1] += 1\n\nfor i in range(N):\n    dp[i] = list(accumulate(dp[i]))\n\nfor i in reversed(range(N-1)):\n    for j in range(N):\n        dp[i][j] += dp[i+1][j]\n\nfor _ in range(Q):\n    f, t = mi()\n    print(dp[f-1][t-1])", "#!/usr/bin/env python3\ndef main():\n    import numpy as np\n    from sys import stdin\n\n    input = stdin.readline\n\n    N, M, Q = list(map(int, input().split()))\n\n    cumsum = np.zeros((N + 1, N + 1), dtype=np.int64)\n    L, R = np.array([input().split() for _ in range(M)], dtype=np.int64).T\n    np.add.at(cumsum, (L, R), 1)\n    np.cumsum(cumsum, axis=0, out=cumsum)\n    np.cumsum(cumsum, axis=1, out=cumsum)\n\n    for _ in range(Q):\n        p, q = list(map(int, input().split()))\n        p -= 1\n        print((cumsum[q, q] - cumsum[q, p] - cumsum[p, q] + cumsum[p, p]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\nn,m,q = [int(i) for i in input().split()]\n\ntrains = np.zeros([n+1,n+1],dtype = np.int32)\n\nl,r = np.split(np.array([input().split() for _ in range(m)],dtype = np.int32),2,1)\np,q = np.split(np.array([input().split() for _ in range(q)],dtype = np.int32),2,1)\n\n\nnp.add.at(trains,(l,r),1)\nans_arr = np.cumsum(np.cumsum(trains,axis = 0),axis = 1)\n\np -= 1\nans = ans_arr[q,q] - ans_arr[p,q] - ans_arr[q,p] + ans_arr[p,p]\nprint(('\\n'.join(ans.astype(str).flatten())))\n", "from sys import stdin\nimport numpy as np\nN,M,Q = [int(x) for x in stdin.readline().rstrip().split()]\n\ncumsum_2d = np.zeros([N+1,N+1]) \nfor i in range(M):\n    L,R = [int(x) for x in stdin.readline().rstrip().split()]\n    cumsum_2d[L,R] += 1\n    \nnp.cumsum(cumsum_2d,axis=0,out=cumsum_2d)\nnp.cumsum(cumsum_2d,axis=1,out=cumsum_2d)\n    \nfor i in range(Q):\n    p,q = [int(x) for x in stdin.readline().rstrip().split()]\n    ans = cumsum_2d[q,q] - cumsum_2d[q,p-1] - cumsum_2d[p-1,q] + cumsum_2d[p-1,p-1]\n    print(int(ans))", "import numpy as np\n\n\nN, M, Q, *LRpq = list(map(int, open(0).read().split()))\nLR, pq = LRpq[: 2 * M], LRpq[2 * M :]\ndel LRpq\n\nacc = np.zeros((N + 1, N + 1), dtype=np.int64)\nfor L, R in zip(*[iter(LR)] * 2):\n    acc[L][R] += 1\nacc = np.cumsum(acc, axis=0)\nacc = np.cumsum(acc, axis=1)\n\nfor p, q in zip(*[iter(pq)] * 2):\n    print((acc[q][q] + acc[p - 1][p - 1] - acc[p - 1][q] - acc[q][p - 1]))\n", "N,M,Q = map(int,input().split())\nl = [[0 for i in range(N)] for j in range(N)]\n\nfor _ in range(M):\n    L,R = map(int,input().split())\n    l[L-1][R-1] += 1\n\ncsum = [[0 for i in range(N+1)] for j in range(N+1)]\n\nfor i in range(1,N+1):\n    for j in range(1,N+1):\n        csum[i][j] = csum[i][j-1] + csum[i-1][j] - csum[i-1][j-1] + l[i-1][j-1]\n\nfor _ in range(Q):\n    p,q = map(int,input().split())\n    print(csum[q][q]-csum[q][p-1]-csum[p-1][q]+csum[p-1][p-1])", "import sys\nsys.setrecursionlimit(10**8)\ndef ii(): return int(sys.stdin.readline())\ndef mi(): return map(int, sys.stdin.readline().split())\ndef li(): return list(map(int, sys.stdin.readline().split()))\ndef li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\ndef dp2(ini, i, j): return [[ini]*i for _ in range(j)]\n#import bisect #bisect.bisect_left(B, a)\n#from collections import defaultdict #d = defaultdict(int) d[key] += value\n#from collections import Counter # a = Counter(A).most_common()\nfrom itertools import accumulate #list(accumulate(A))\n\n\ndef segfunc(a,b):\n    return a+b\n\ndef init(init_val):\n    #set_val\n    for i in range(n):\n        seg[i+num-1]=init_val[i]    \n    #built\n    for i in range(num-2,-1,-1) :\n        seg[i]=segfunc(seg[2*i+1],seg[2*i+2]) \n    \ndef update(k,x):\n    k += num-1\n    seg[k] = x\n    while k:\n        k = (k-1)//2\n        seg[k] = segfunc(seg[k*2+1],seg[k*2+2])\n    \ndef query(p,q):\n    if q<=p:\n        return ide_ele\n    p += num-1\n    q += num-2\n    res=ide_ele\n    while q-p>1:\n        if p&1 == 0:\n            res = segfunc(res,seg[p])\n        if q&1 == 1:\n            res = segfunc(res,seg[q])\n            q -= 1\n        p = p//2\n        q = (q-1)//2\n    if p == q:\n        res = segfunc(res,seg[p])\n    else:\n        res = segfunc(segfunc(res,seg[p]),seg[q])\n    return res\n\n\nn, M, Q = mi()\n\n#####\u5358\u4f4d\u5143######\nide_ele = 0\n#num:n\u4ee5\u4e0a\u306e\u6700\u5c0f\u306e2\u306e\u3079\u304d\u4e57\nnum =2**(n-1).bit_length()\nseg=[ide_ele]*2*num\n\nL = [0]*n\ninit(L)\n\nlrpq = dp2(0, 3, M+Q)\n\nfor i in range(M):\n    l, r = mi()\n    lrpq[i][1] = l-1\n    lrpq[i][2] = r-1\n\nfor i in range(M, M+Q):\n    p, q = mi()\n    lrpq[i][0] = i\n    lrpq[i][1] = p-1\n    lrpq[i][2] = q-1\n\nlrpq = sorted(lrpq, key=lambda x:(x[2], x[0]))\n\nans = [0]*(Q)\n\nfor i in range(M+Q):\n    if lrpq[i][0] == 0:\n        #L[lrpq[i][1]] += 1\n        update(lrpq[i][1], seg[lrpq[i][1]+num-1]+1)\n    else:\n        ans[lrpq[i][0]-M] = query(lrpq[i][1], lrpq[i][2]+1)\n\nfor num in ans:\n    print(num)", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\n\n\ndef main():\n    N, M, Q = list(map(int, readline().split()))\n    A = [[0] * (N + 1) for _ in range(N + 1)]\n    for _ in range(M):\n        l, r = list(map(int, readline().split()))\n        A[l][r] += 1\n\n    for i in range(N):\n        for j in range(N):\n            A[i + 1][j + 1] += A[i][j + 1] + A[i + 1][j] - A[i][j]\n\n    ans = [0] * Q\n    for i in range(Q):\n        p, q = list(map(int, readline().split()))\n        p -= 1\n        q -= 1\n        ans[i] = A[q + 1][q + 1] - A[q + 1][p] - A[p][q + 1] + A[p][p]\n\n    print(('\\n'.join(map(str, ans))))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m,q=list(map(int,input().split()))\n\n#G[i][j]=(i,j)\u306a\u308b\u5217\u8eca\u306e\u672c\u6570\nG=[[0]*(n+1) for i in range(n+1)]\nfor i in range(m):\n    l,r=list(map(int,input().split()))\n    G[l][r]+=1\n\n\n\n#S[i][j]=(i\u4ee5\u4e0b,j\u4ee5\u4e0b)\u306a\u308b\u5217\u8eca\u306e\u672c\u6570(i<=j)\nS=[[0]*(n+1) for i in range(n+1)]\nfor i in range(1,n+1):\n    for j in range(1,n+1):\n        S[i][j]=S[i-1][j]+S[i][j-1]-S[i-1][j-1]+G[i][j]\n\n\n\n\n\nfor i in range(q):\n    s,f=list(map(int,input().split()))\n    print((S[f][f]-S[s-1][f]-S[f][s-1]+S[s-1][s-1]))\n\n", "n,m,q=list(map(int,input().split()))\nlr=[[0 for i in range(n+1)] for j in range(n+1)]\nfor i in range(m):\n  l,r=list(map(int,input().split()))\n  lr[l][r]=lr[l][r]+1\n\n#\u4e8c\u6b21\u5143\u7d2f\u7a4d\u548c\u3092\u4f5c\u308b\uff08\u6a2a\uff09\nfor i in range(1,n+1):\n  for j in range(1,n+1):\n    lr[i][j]=lr[i][j-1]+lr[i][j]\n\n#\u4e8c\u6b21\u5143\u7d2f\u7a4d\u548c\u3092\u4f5c\u308b\uff08\u7e26\uff09\nfor i in range(1,n+1):\n  for j in range(1,n+1):\n    lr[i][j]=lr[i][j]+lr[i-1][j]\n#\u7b54\u3048\u3092\u51fa\u529b\nfor i in range(q):\n  p,q=list(map(int,input().split()))\n  print((lr[q][q]-lr[p-1][q]-lr[q][p-1]+lr[p-1][p-1]))\n  \n\n\n    \n    \n  \n", "import sys\nreadline = sys.stdin.readline\n\nN,M,Q = list(map(int,readline().split()))\n\ntrain = [[0] * (N + 1) for i in range(N + 1)]\n\nfor i in range(M):\n  L,R = list(map(int,readline().split()))\n  train[L][R] += 1\n  \nfor i in range(N + 1):\n  for j in range(1, N + 1):\n    train[i][j] += train[i][j - 1]\n    \nfor j in range(N + 1):\n  for i in range(1, N + 1):\n    train[i][j] += train[i - 1][j]\n\nfor i in range(Q):\n  p,q = list(map(int,readline().split()))\n  print((train[q][q] - train[p - 1][q] - train[q][p - 1] + train[p - 1][p - 1]))\n", "import numpy as np\nimport sys\ninput = sys.stdin.readline\nN, M, Q = map(int, input().split())\nT = np.zeros((N, N), dtype=np.int32)\nfor _ in [0]*M:\n    l, r = map(int, input().split())\n    T[l-1, r-1] += 1\nT = T[::-1].cumsum(axis=0).cumsum(axis=1)[::-1]\nfor _ in [0]*Q:\n    p, q = map(int, input().split())\n    print(T[p-1, q-1])", "N, M, Q = map(int, input().split())\nS = [[0] * (N+1) for _ in range(N+1)]\n\nfor m in range(M):\n  L, R = map(int, input().split())\n  S[L][R] += 1\nfor l in range(1, N+1):\n  for r in range(1, N+1):\n    S[l][r] += S[l-1][r] + S[l][r-1] - S[l-1][r-1]\n\nfor i in range(Q):\n  p, q = map(int, input().split())\n  print(S[q][q] - S[p-1][q] - S[q][p-1] + S[p-1][p-1])", "def cum2D(a, H, W):\n    cum = [[0]*(W+1) for _ in range(H+1)]\n    for i in range(H):\n        for j in range(W):\n            cum[i+1][j+1] = cum[i][j+1] + cum[i+1][j] - cum[i][j] + a[i+1][j+1]\n    return cum\n    \nn, m, q = list(map(int, input().split()))\ntrains = [tuple(map(int, input().split())) for _ in range(m)]  #;print(trains)\na = [[0]*(n+1) for j in range(n+1)]\nfor k in range(m):\n    start, stop = trains[k]\n    a[start][stop] += 1\ncum = cum2D(a, n, n)          #;print2D(a, n+1) ;print() ;print2D(cum, n+1)\n\nfor _ in range(q):\n    p, q = list(map(int, input().split()))\n    print((cum[n][q] - cum[p-1][q]))\n", "import sys\nsys.setrecursionlimit(10 ** 8)\n\ndef Z(): return int(input())\ndef ZZ(): return [int(_) for _ in input().split()]\n\ndef main():\n    N, M, Q = ZZ()\n    lr = sorted([ZZ() for _ in range(M)])\n    query = [ZZ() for _ in range(Q)]\n    p = [[0] * (N+1) for _ in range(N+1)]\n    for l, r in lr: p[l][r] += 1\n    for i in range(1, N+1)[::-1]:\n        for j in range(1, N+1):\n            if j+1 <= N: p[i][j+1] += p[i][j]\n            if 0 <= i-1: p[i-1][j] += p[i][j]\n            if j+1 <= N and 0 <= i-1: p[i-1][j+1] -= p[i][j]\n    for a, b in query: print((p[a][b]))\n\n    return\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m,q = map(int,input().split())\nbi = [[0 for i in range(n+1)] for j in range(n+1)]\nfor i in range(m):\n    l,r = map(int,input().split())\n    bi[l][r] += 1\nans = [[0 for i in range(n+1)] for j in range(n+1)]\nfor i in range(1,n+1):\n    cou = 0\n    for j in range(1,n+1):\n        cou += bi[i][j]\n        ans[i][j] = ans[i-1][j] + cou\n\nfor i in range(q):\n    p , q  =map(int,input().split())\n    print(ans[q][q]-ans[q][p-1]-ans[p-1][q]+ans[p-1][p-1])", "#!/usr/bin/env python3\nfrom itertools import accumulate\nimport numpy as np\n\nn, m, q = list(map(int, input().split()))\nlr = [list(map(int, input().split())) for _ in range(m)]\npq = [list(map(int, input().split())) for _ in range(q)]\n\ndata = [[0]*500 for i in range(500)]\n# data = [[0]*10 for i in range(10)]\n\nfor l, r in lr:\n    data[l-1][r-1] += 1\n\n\n# for i in range(0, 500):\n#     data[i] = list(accumulate(data[i]))\n\n# print(data)\n# for p, q in pq:\n#     ans = 0\n#     if p == 1:\n#         for i in range(p-1, q-1+1):\n#             ans += data[i][q-1]\n#     else:\n#         for i in range(p-1, q-1+1):\n#             ans += data[i][q-1]-data[i][p-1-1]\n#     print(ans)\n\ndata = np.array(data)\n\ndata = np.cumsum(data, axis=1)\ndata = np.cumsum(data, axis=0)\n\n# print(data[:10, :10])\nfor p, q in pq:\n    ans = 0\n    if p == 1:\n        ans = data[q-1][q-1]\n    else:\n        ans = data[q-1][q-1]-data[p-1-1][q-1]\n    print(ans)\n# for p, q in pq:\n#     ans = 0\n#     if p == 1:\n#         for i in range(p-1, q-1+1):\n#             ans += data[i][q-1]\n#     else:\n#         for i in range(p-1, q-1+1):\n#             ans += data[i][q-1]-data[i][p-1-1]\n#     print(ans)\n", "N,M,Q = list(map(int,input().split()))\nX = [[0]*N for _ in range(N)]\nfor i in range(M):\n  L,R = list(map(int,input().split()))\n  L-=1;R-=1\n  X[L][R] +=1\n#print(X)\nS = [[0]*(N+1) for _ in range(N+1)]\nfor i in range(N):\n  for j in range(N):\n    S[i+1][j+1] = S[i][j+1] + S[i+1][j] -S[i][j] + X[i][j]\n#print(S)\nfor i in range(Q):\n  p,q = list(map(int,input().split()))\n  p-=1\n  ans = S[q][q]-S[p][q]-S[q][p]+S[p][p]\n  print(ans)\n  \n\n", "n, m, Q = map(int, input().split())\nlr = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\nfor _ in range(m):\n    l, r = map(int, input().split())\n    lr[l][r] += 1\n\nrui = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        rui[i][j] = lr[i][j] + rui[i - 1][j] + rui[i][j - 1] - rui[i - 1][j - 1]\n    \nfor _ in range(Q):\n    p, q = map(int, input().split())\n    p -= 1\n    ans = rui[q][q] - rui[p][q] - rui[q][p] + rui[p][p]\n    print(ans)", "N, M, Q = map(int, input().split())\n\nimos = [[0]*(N+1) for _ in range(N+1)]\n\nfor _ in range(M):\n    l, r = map(int, input().split())\n    imos[l][r] += 1\n\n\nfor l in range(N-1, -1, -1):\n    for r in range(N+1):\n        imos[l][r] += imos[l+1][r]\n\nfor r in range(1, N+1):\n    for l in range(N+1):\n        imos[l][r] += imos[l][r-1]\n\n\nfor _ in range(Q):\n    p, q = map(int, input().split())\n    print(imos[p][q])", "#!/usr/bin/env python3\ndef main():\n    import numpy as np\n    from sys import stdin\n\n    input = stdin.readline\n\n    N, M, Q = list(map(int, input().split()))\n\n    cumsum = np.zeros((N + 1, N + 1), dtype=np.int64)\n    for _ in range(M):\n        left, right = list(map(int, input().split()))\n        cumsum[left, right] += 1\n\n    np.cumsum(cumsum, axis=0, out=cumsum)\n    np.cumsum(cumsum, axis=1, out=cumsum)\n    # print(cumsum)\n\n    for _ in range(Q):\n        p, q = list(map(int, input().split()))\n        p -= 1\n        print((cumsum[q, q] - cumsum[q, p] - cumsum[p, q] + cumsum[p, p]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from numpy import *\nN,M,Q = map(int,input().split())\nG = zeros((N,N),int)\n\nfor m in range(M):\n  l,r = map(int,input().split())\n  G[N-l][r-1]+=1\n  \nG = cumsum(cumsum(G,axis=0),axis=1)\n\nfor n in range(Q):\n  p,q = map(int,input().split())\n  print(G[N-p][q-1])", "import sys\nsys.setrecursionlimit(10**8)\ndef ii(): return int(sys.stdin.readline())\ndef mi(): return map(int, sys.stdin.readline().split())\ndef li(): return list(map(int, sys.stdin.readline().split()))\ndef li2(N): return [list(map(int, sys.stdin.readline().split())) for _ in range(N)]\ndef dp2(ini, i, j): return [[ini]*i for _ in range(j)]\n#import bisect #bisect.bisect_left(B, a)\n#from collections import defaultdict #d = defaultdict(int) d[key] += value\n#from collections import Counter # a = Counter(A).most_common()\nfrom itertools import accumulate #list(accumulate(A))\n\nN, M , Q = mi()\nLR = li2(M)\n\ndp = dp2(0, N+1, N+1)\n\nfor l, r in LR:\n    dp[l][r] += 1\n\nfor i in range(N+1):\n    dp[i] = list(accumulate(dp[i]))\n\nfor i in range(1, N+1):\n    for j in range(N+1):\n        dp[i][j] += dp[i-1][j]\n\nfor _ in range(Q):\n    f, t = mi()\n    f_ = max(0, f-1)\n    print(dp[t][t] - dp[f_][t] - dp[t][f_] + dp[f_][f_])", "n,m,q_=list(map(int,input().split()))\nlr=[list(map(int,input().split())) for _ in range(m)]\npq=[list(map(int,input().split())) for _ in range(q_)]\nfrom collections import defaultdict\ndmap=defaultdict(int)\nsmap=defaultdict(int)\nssmap=defaultdict(int)\nfor l,r in lr:\n  if (l,r) in dmap:\n    dmap[(l,r)]+=1\n  else:\n    dmap[(l,r)]=1\nfor i in range(1,n+1):\n  tmp=0\n  for j in range(i,n+1):\n    if (i,j) in dmap:\n      tmp+=dmap[(i,j)]\n    smap[(i,j)]=tmp\nfor i in range(1,n+1):\n  tmp=0\n  for j in range(1,i+1):\n    tmp+=smap[(j,i)]\n    ssmap[(j,i)]=tmp\n\nfor p,q in pq:\n  ans=ssmap[(q,q)]-ssmap[(p-1,q)]\n  print(ans)\n", "import numpy as np\nN,M,Q=map(int, input().split())\na=np.array([[0]*(N+1) for i in range(N+1)])\nfor i in range(M):\n  l,r=map(int, input().split())\n  a[l][r]+=1\na=a.cumsum(axis=0).cumsum(axis=1)\nfor i in range(Q):\n  p,q=map(int, input().split())\n  print(a[q][q]-a[p-1][q])", "from itertools import accumulate\nfrom operator import add, mul\nn,m,q=map(int,input().split())\n\na=[]\nb=[]\nfor i in range(n):\n    a.append([0]*(n))\n    b.append([0]*(n))\n\n#import numpy as np\n#b=np.array(b)\n#print(a)\n'''\nfor i in range(m):\n    l,r=map(int,input().split())\n    #print(a[(r-1):n,0:l])\n    #a[(r-1):n,0:l]+=1\n    for j in range(r-1,n):\n        for k in range(l):\n            a[j][k]+=1\n'''\nfor i in range(m):\n    l,r=map(int,input().split())\n    #print(a[(r-1):n,0:l])\n    a[l-1][r-1]+=1\n\n#print(a)\n\nfor i in range(n):\n    a[i]=list(accumulate(a[i]))\n\n#print(a)\n\nfor i in range(n):\n    for j in range(n-i-1):\n        a[n-i-j-2][n-i-1]+=a[n-i-j-1][n-i-1]\n        #print(a)\n\n#print(a)\n\n'''\nfor l in range(n):\n    for r in range(l,n):\n        temp=a[r][l]\n        for i in range(r,n):\n            for j in range(0,l+1):\n                b[i][j]+=temp\n        #b[r:n,0:l+1]+=temp\n'''\n#print(a)\n#print(b)\n\nfor i in range(q):\n    P,Q=map(int,input().split())\n    print(a[(P-1)][(Q-1)])\n'''\nfor i in range(que):\n    p,q=MI()\n    if p==1:\n        ans=lis[q-1][q-1]\n    else:\n        ans=lis[q-1][q-1]-lis[p-2][q-1]\n    print(ans)\n'''", "import numpy as np\nN, M, Q = map(int, input().split())\ntable = [[0] * N for _ in range(N)]\nfor _ in range(M):\n    L, R = map(lambda n: int(n) - 1, input().split())\n    table[R][- L - 1] += 1\ntable = np.array(table, dtype=np.int64).cumsum(axis=0).cumsum(axis=1).tolist()\nfor _ in range(Q):\n    p, q = map(lambda n: int(n) - 1, input().split())\n    print(table[q][- p - 1])", "n, m, q = map(int, input().split())\na = [[0 for i in range(n)] for j in range(n)]\nfor i in range(m):\n    l, r = map(int, input().split())\n    a[l-1][r-1] += 1\n\nfor i in range(n):\n    for j in range(1, n):\n        a[i][j] += a[i][j-1]\n\nfor j in range(n):\n    for i in range(1, n):\n        a[i][j] += a[i-1][j]\n\nfor i in range(q):\n    l, r = map(int, input().split())\n    ans = a[r-1][r-1]\n    if l > 1:\n        ans += a[l-2][l-2]-a[r-1][l-2]-a[l-2][r-1]\n    print(ans)", "import numpy as np\nN, M, Q = map(int, input().split())\ntable = [[0] * N for _ in range(N)]\nfor _ in range(M):\n    L, R = map(lambda n: int(n) - 1, input().split())\n    table[L][R] += 1\ntable = np.rot90(np.rot90(table, k=-1).cumsum(axis=0).cumsum(axis=1), k=1).tolist()\nfor _ in range(Q):\n    p, q = map(lambda n: int(n) - 1, input().split())\n    print(table[p][q])", "\ndef resolve():\n    n, m, q = map(int, input().split())\n    rosen = [[0] * n for _ in range(n)]\n    for i in range(m):\n        l, r = map(int, input().split())\n        l -= 1\n        r -= 1\n        rosen[l][r] += 1\n    cum = [[0] * (n+1) for _ in range((n+1))]\n\n    for i in range(n):\n        if i == 0:\n            cum[0][0] = rosen[0][0]\n            for j in range(1, n):\n                cum[0][j] = cum[0][j-1] + rosen[0][j]\n        else:\n            cum[i][0] = cum[i-1][0] + rosen[i][0]\n            for j in range(1,n):\n                cum[i][j] = cum[i-1][j] + cum[i][j-1] - cum[i-1][j-1] + rosen[i][j]\n    for i in range(q):\n        p, q = map(int, input().split())\n        p -= 1\n        q -= 1\n        if p == 0:\n            print(cum[q][q])\n        else:\n            print(cum[q][q]-cum[p-1][q]-cum[q][p-1]+cum[p-1][p-1])\nresolve()", "# ABD106D\n\nN,M,Q=map(int,input().split())\nTrs=[tuple(map(int,input().split())) for i in range(M)]\npqs=[tuple(map(int,input().split())) for i in range(Q)]\n\ncs=[[0 for i in range(N+1)] for j in range(N+1)]\nfor tr in Trs:\n    cs[tr[0]][tr[1]]+=1\nfor i in range(N):\n    for j in range(N):\n        cs[i+1][j+1]+=cs[i+1][j]\nfor i in range(N):\n    for j in range(N):\n        cs[i+1][j+1]+=cs[i][j+1]\n        \nfor pq in pqs:\n    p=pq[0]\n    q=pq[1]\n    n=cs[q][q]-cs[q][p-1]-cs[p-1][q]+cs[p-1][p-1]\n    print(n)", "n,m,q=map(int,input().split())\na=[[0 for j in range(n+1)] for i in range(n+1)]\nfor i in range(m):\n    l,r=map(int,input().split())\n    a[l][r]+=1\nfor i in range(n):\n    for j in range(n):\n        a[i+1][j+1]+=a[i][j+1]+a[i+1][j]-a[i][j]\nfor i in range(q):\n    l,r=map(int,input().split())\n    print(a[r][r]-a[r][l-1]-a[l-1][r]+a[l-1][l-1])", "\nn, m, q = list(map(int, input().split()))\ntmp = [[0] * 510 for _ in range(510)]\nfor _ in range(m):\n    l, r = list(map(int, input().split()))\n    tmp[l][r] += 1\nfor i in range(1, 501):\n    for j in range(1, 501):\n        tmp[i][j] += tmp[i-1][j]\n        tmp[i][j] += tmp[i][j-1]\n        tmp[i][j] -= tmp[i-1][j-1]\nfor _ in range(q):\n    ans = 0\n    ll, rr = list(map(int, input().split()))\n    print((tmp[rr][rr]-tmp[rr][ll-1]-tmp[ll-1][rr]+tmp[ll-1][ll-1]))\n", "N, M, Q = map(int, input().split())\nmem = [[0 for _ in range(N)] for _ in range(N)]\n\nfor _ in range(M):\n    L, R = map(int, input().split())\n    mem[L-1][R-1] += 1\n\nfor L in range(N):\n    for R in range(1, N):\n        mem[L][R] += mem[L][R-1]\n\nfor R in range(N):\n    for L in range(1, N):\n        mem[L][R] += mem[L-1][R]\n\nres = []\nfor _ in range(Q):\n    QL, QR = map(int, input().split())\n    if QL == 1:\n        r = mem[QR-1][QR-1]\n    else:\n        r = mem[QR-1][QR-1] - mem[QL-2][QR-1]\n    res.append(r)\n\nfor r in res:\n    print(r)", "from bisect import bisect_right\nN, M, Q = map(int, input().split())\nlr = [list(map(int, input().split())) for _ in range(M)]\nlr.sort(reverse=True)\n\nlst = [[]]\n\nj = N - 1\nfor i in range(M):\n    if lr[i][0] - 1 < j:\n        lst[-1].sort()\n        while lr[i][0] - 1 < j:\n            lst.append(lst[-1][:])\n            j -= 1\n    lst[-1].append(lr[i][-1]-1)\nlst[-1].sort()\nlst.reverse()\n\nfor i in range(Q):\n    p, q = map(int, input().split())\n    m = bisect_right(lst[p-1], q-1)\n    print(m)", "N, M, Q = list(map(int,input().split()))\n\ncnt = [[0]*(N+1) for _ in range(N+1)]\nfor _ in range(M):\n    L, R = list(map(int,input().split()))\n    cnt[L][R] += 1\n\nfor i in range(N):\n    for j in range(N):\n        cnt[i+1][j+1] += cnt[i+1][j] + cnt[i][j+1] - cnt[i][j]\n\nfor _ in range(Q):\n    p, q = list(map(int,input().split()))\n    print((cnt[q][q] - cnt[q][p-1] - cnt[p-1][q] + cnt[p-1][p-1]))\n", "#!/usr/bin/env python3\nfrom collections import deque, Counter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_right\nfrom itertools import accumulate\n\ndef main():\n    N, M, Q = list(map(int, input().split()))\n    ans = [[0]*N for _ in range(N)]\n    for i in range(M):\n        L, R = [int(x)-1 for x in input().split()]\n        ans[L][R] += 1\n    \n    # print(ans)\n\n    # ans\u306e2\u6b21\u5143\u7d2f\u7a4d\u548c\n    # s = [[0]*(N+1) for _ in range(N+1)]\n    # s[N-1][0] = ans[N-1][0]\n    for i in range(N):\n        if i != N-1:\n            for j in range(N):\n                ans[N-2-i][j] += ans[N-1-i][j]\n        for j in range(N-1):\n            ans[N-1-i][j+1] += ans[N-1-i][j]\n    # print(ans) \n    for i in range(Q):\n        p, q = list(map(int, input().split()))\n        print((ans[p-1][q-1]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m,q=map(int,input().split())\nd=[[0]*(n+1) for _ in range(n+1)]\n \nfor mm in range(m):\n  l,r=map(int,input().split())\n  d[l][r]+=1\n\nfor i in range(n):\n  for j in range(n+1):\n    d[i+1][j]+=d[i][j]\n \nfor j in range(n+1):\n  for i in range(n):\n    d[j][i+1]+=d[j][i]\n\nfor qq in range(q):\n  x,y=map(int,input().split())\n  print(d[y][y]-d[y][x-1]-d[x-1][y]+d[x-1][x-1])", "import numpy as np\nN, M, Q = map(int, input().split())\ntable = np.zeros((N, N), np.int64)\nfor _ in range(M):\n    L, R = map(lambda n: int(n) - 1, input().split())\n    table[L][R] += 1\ntable = np.rot90(np.rot90(table, k=-1).cumsum(axis=0).cumsum(axis=1), k=1).tolist()\nfor _ in range(Q):\n    p, q = map(lambda n: int(n) - 1, input().split())\n    print(table[p][q])", "import numpy as np \nN,M,Q=map(int, input().split())\na=np.array([[0]*N for i in range(N)])\n\nfor i in range(M):\n  l,r=map(int, input().split())\n  a[l-1][r-1]+=1\na=a.cumsum(axis=0).cumsum(axis=1)\n\nfor i in range(Q):\n  p,q=map(int, input().split())\n  if p==1:\n    ans=a[q-1][q-1]\n  else:\n    ans=a[q-1][q-1]-a[p-2][q-1]\n  print(ans)", "import sys\nimport numpy as np\n\nN, M, Q = list(map(int, input().split(' ')))\n\ndp = np.zeros(shape=(N + 1, N + 1), dtype=int)\nfor _ in range(M):\n    L, R = list(map(int, input().split(' ')))\n    dp[L][R] += 1\n\ndp = dp.cumsum(axis=1).cumsum(axis=0)\n\nqueries = np.array(list(map(int, sys.stdin.read().split())))\n\nleft = queries[0::2] - 1\nright = queries[1::2]\n\nprint(('\\n'.join((dp[right, right] + dp[left, left] - dp[left, right] - dp[right, left]).astype(str))))\n", "from collections import defaultdict\nN, M, Q = list(map(int, input().split()))\nl2r = defaultdict(int)\nl2acc = [[0]*(N+1) for _ in range(N)]\nr2acc = [[0]*(N+1) for _ in range(N)]\nfor _ in range(M):\n    l, r = list(map(int, input().split()))\n    l, r = l-1, r-1\n    l2r[(l, r)] += 1\nqueries = []\nfor _ in range(Q):\n    l, r = list(map(int, input().split()))\n    l, r = l-1, r-1\n    queries.append((l, r))\n\nfor l in range(N):\n    acc = 0\n    for r in range(l, N):\n        acc += l2r[(l, r)]\n        l2acc[l][r] = acc\n\nfor r in range(N):\n    acc = 0\n    for l in range(r, -1, -1):\n        acc += l2acc[l][r]\n        r2acc[l][r] =acc\n\nfor l, r in queries:\n    print((r2acc[l][r]))\n\n", "import numpy as np\nN,M,Q=map(int, input().split())\na=np.array([[0]*(N+1) for i in range(N+1)])\nfor i in range(M):\n  l,r=map(int, input().split())\n  a[l][r]+=1\na=a.cumsum(axis=0).cumsum(axis=1)\nfor i in range(Q):\n  p,q=map(int, input().split())\n  print(a[q][q]-a[p-1][q]-a[q][p-1]+a[p-1][p-1])", "n, m, q = map(int, input().split())\ntrain = []\nfor _ in range(m):\n    l, r = map(int, input().split())\n    train.append((l, r))\ndp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\nfor [l, r] in train:\n    dp[l][r] += 1\nfor i in range(n):\n    for j in range(n):\n        dp[i + 1][j + 1] += dp[i + 1][j]\nfor i in range(n):\n    for j in range(n):\n        dp[i + 1][j + 1] += dp[i][j + 1]\nfor i in range(q):\n    l, r = map(int, input().split())\n    print(dp[r][r] - dp[l - 1][r] - dp[r][l - 1] + dp[l - 1][l - 1])", "import numpy as np\nN, M, Q = map(int, input().split()) # N\u500b\u306e\u90fd\u5e02\u3001M\u672c\u306e\u5217\u8eca\u3001Q\u500b\u306e\u30af\u30a8\u30ea\ngrid = np.zeros((N+1, N+1), dtype=np.int64)\nquery = []\nfor _ in range(M):\n    L, R = map(int, input().split())\n    grid[L, R] += 1\ncum_grid = grid.cumsum(axis=0).cumsum(axis=1)\n\nans_list = []\nfor _ in range(Q):\n    p, q = map(int, input().split())\n    ans = cum_grid[q, q] - cum_grid[p-1, q] - cum_grid[q, p-1] + cum_grid[p-1, p-1]\n    ans_list.append(ans)\n\nfor ans in ans_list:\n    print(ans)", "import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\n\n\ndef main():\n    N, M, Q = list(map(int, readline().split()))\n    A = [[0] * N for _ in range(N)]\n    for _ in range(M):\n        l, r = list(map(int, readline().split()))\n        A[l - 1][r - 1] += 1\n\n    B = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(N):\n        for j in range(N):\n            B[i + 1][j + 1] = B[i][j + 1] + B[i + 1][j] - B[i][j] + A[i][j]\n\n    ans = [0] * Q\n    for i in range(Q):\n        p, q = list(map(int, readline().split()))\n        p -= 1\n        q -= 1\n        ans[i] = B[q + 1][q + 1] - B[q + 1][p] - B[p][q + 1] + B[p][p]\n\n    print(('\\n'.join(map(str, ans))))\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# 20-08-06\u518d\u30c8\u30e9\u30a4\nimport sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\n\nN, M, Q = [int(x) for x in input().split()]\ntrain = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\nfor i in range(M):\n    L, R = [int(x) for x in input().split()]\n    train[L][R] += 1\n\ncum = [list(accumulate(train[i])) for i in range(N + 1)]\ndel train\ncum = list(zip(*cum))\ncum = [list(accumulate(cum[j])) for j in range(N + 1)]\n\nfor _ in range(Q):\n    p, q = [int(x) for x in input().split()]\n    print(cum[q][N] - cum[q][p - 1])", "class Cumsum2d(object):\n    def __init__(self, a):\n        self.a = a\n        self.h = len(a)\n        self.w = len(a[0])\n        self._cumsum = [[0 for _ in range(self.w + 1)] for _ in range(self.h + 1)]\n        self._preprocess()\n\n    def _preprocess(self):\n        for i in range(1, self.h + 1):\n            for j in range(1, self.w + 1):\n                self._cumsum[i][j] = (\n                    self.a[i - 1][j - 1]\n                    + self._cumsum[i][j - 1]\n                    + self._cumsum[i - 1][j]\n                    - self._cumsum[i - 1][j - 1]\n                )\n\n    def query(self, h1, h2, w1, w2):\n        return (\n            self._cumsum[h2][w2]\n            - self._cumsum[h1][w2]\n            - self._cumsum[h2][w1]\n            + self._cumsum[h1][w1]\n        )\n\n\ndef __starting_point():\n    N, M, Q = [int(x) for x in input().split(\" \")]\n    # L = [0 for _ in range(N + 2)]\n    count = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n    for _ in range(M):\n        l, r = [int(x) for x in input().split(\" \")]\n        count[l][r] += 1\n\n    cumsum = Cumsum2d(count)\n    for _ in range(Q):\n        p, q = [int(x) for x in input().split(\" \")]\n        print((cumsum.query(p, q + 1, p, q + 1)))\n\n__starting_point()", "n,m,q=map(int,input().split())\nimport numpy as np\ndim2=np.zeros((n+1,n+1),dtype='int8')\n\nfor _ in range(m):\n    l,r=map(int,input().split())\n    dim2[l][r]+=1\n\ndim2=np.cumsum(dim2,axis=0)\n\ndim2=np.cumsum(dim2,axis=1)\nfor _ in range(q):\n    p,q=map(int, input().split())\n    ans=dim2[q][q]-dim2[q][p-1]-dim2[p-1][q]+dim2[p-1][p-1]\n    print(ans)", "N, M, Q = map(int, input().split())\n#N 500 \u306b\u5408\u308f\u305b\u3066\u5c11\u3057\u4f59\u5206\u306b\u6e96\u5099\np = [[0] * 510 for i in range(510)]\n\nfor i in range(M):\n  l, r = map(int, input().split())\n  p[l][r] += 1\n#print(p)\n#print(\"\")\n\n#1 ~ N \u306b\u3059\u308b\u3053\u3068\u3067\u5468\u56f2\u306b\u7a7a\u767d\u3092\u7528\u610f\nfor i in range(1, N + 1):\n  for j in range(1, N + 1):\n    p[i][j] += p[i][j - 1]\n#print(p)\n#print(\"\")\n\nfor i in range(1, N + 1):\n  for j in range(1, N + 1):\n    p[i][j] += p[i - 1][j ]    \n#print(p)\n#print(\"\")\n\nfor i in range(Q):\n  l, r = map(int, input().split())\n  ans = p[r][r] + p[l - 1][l - 1] - p[r][l - 1] - p[l - 1][r]\n  print(ans)", "N,M,Q = map(int, input().split())\n\nmatrix = [[0]*(N+1) for _ in range(N+1)]\nfor _ in range(M):\n    l,r = map(int, input().split())\n    matrix[l][r] += 1\naccmatrix = [[0]*(N+1) for _ in range(N+1)]\nfor l in range(1,N+1):\n    accmatrix[l] = [x+y for x,y in zip(accmatrix[l-1],matrix[l])]\nfor l in range(1,N+1):\n    lis = accmatrix[l]\n    for r in range(1,N+1):\n        lis[r] += lis[r-1]\n\nfor _ in range(Q):\n    p,q = map(int, input().split())\n    ans = accmatrix[q][q] - accmatrix[p-1][q]- accmatrix[q][p-1] + accmatrix[p-1][p-1]\n    print(ans)", "n,m,q=map(int,input().split())\ntable=[[0]*(n+1)for i in range(n+1)]\nfor i in range(m):\n    a,s=map(int,input().split())\n    table[a][s]+=1\nfrom itertools import accumulate\nfor i,v  in enumerate(table):\n    table[i]=list(accumulate(v))\n\nfor i in range(n):\n    for j in range(n):\n        table[j+1][i+1]+=table[j][i+1]\nfor i in range(q):\n    a,s=map(int,input().split())\n    a-=1\n    print((table[s][s]+table[a][a]-table[s][a]-table[a][s]))", "n,m,q=map(int,input().split())\na=[[0 for _ in range(n+1)]for _ in range(n+1)]\nfor i in range(m):\n  l,r=map(int,input().split())\n  a[r][l]+=1\nfor i in range(n+1):\n  for j in range(n):\n    a[i][j+1]+=a[i][j]\nfor i in range(n):\n  for j in range(n+1):\n    a[i+1][j]+=a[i][j]\nfor i in range(q):\n  l,r=map(int,input().split())\n  print(a[r][r]-a[r][l-1]-a[l-1][r]+a[l-1][l-1])", "#float\u578b\u3092\u8a31\u3059\u306a\n#numpy\u306fpython\u3067\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import Counter, deque\nfrom collections import defaultdict\nfrom itertools import combinations, permutations, accumulate, groupby, product\nfrom bisect import bisect_left,bisect_right\nfrom heapq import heapify, heappop, heappush\nfrom math import floor, ceil,pi,factorial\nfrom operator import itemgetter\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\ndef LI2(): return [int(input()) for i in range(n)]\ndef MXI(): return [[LI()]for i in range(n)]\ndef SI(): return input().rstrip()\ndef printns(x): print('\\n'.join(x))\ndef printni(x): print('\\n'.join(list(map(str,x))))\ninf = 10**17\nmod = 10**9 + 7\n\nn,m,que=MI()\nlis=[[0]*n for i in range(n)]\nfor i in range(m):\n    l,r=MI()\n    lis[l-1][r-1]+=1\nfor i in range(n):\n    lis[i]=list(accumulate(lis[i]))\nfor i in range(n):\n    for j in range(n-1):\n        lis[j+1][i]+=lis[j][i]\n#print(lis)\n#print(lis)\nfor i in range(que):\n    p,q=MI()\n    if p==1:\n        ans=lis[q-1][q-1]\n    else:\n        ans=lis[q-1][q-1]-lis[p-2][q-1]\n    print(ans)", "import sys\ndef input():\n    return sys.stdin.readline()[:-1]\ndef make_sumtable():\n    sumtable = [[0]*(N+1) for i in range(N+1)]\n    for i in range(M):\n        sumtable[L[i]][R[i]] += 1\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            sumtable[i][j] += sumtable[i-1][j]\n            sumtable[i][j] += sumtable[i][j-1]\n            sumtable[i][j] -= sumtable[i-1][j-1]\n    return sumtable\nN,M,Q = list(map(int,input().split()))\n\nL = []\nR = []\nfor i in range(M):\n    l,r = list(map(int,input().split()))\n    L.append(l)\n    R.append(r)\n\nsumtable = make_sumtable()\n\nfor i in range(Q):\n    p,q = list(map(int,input().split()))\n    print((sumtable[q][q]-sumtable[q][p-1]-sumtable[p-1][q]+sumtable[p-1][p-1]))\n", "#!/usr/bin python3\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nn, m, q = list(map(int, input().split()))\nx = np.zeros((n,n), dtype = int)\nfor _ in range(m):\n    l, r = list(map(int, input().split()))\n    x[r-1][l-1] += 1\nx.cumsum(out = x, axis = 0)\nfor i in range(n):\n    x[i] = np.cumsum(x[i][::-1])[::-1]\n\nfor _ in range(q):\n    l, r = list(map(int, input().split()))\n    print((x[r-1][l-1]))\n", "from copy import deepcopy\n\nn, m, q = list(map(int, input().split()))\nlr = [list(map(int, input().split())) for _ in range(m)]\npq = [list(map(int, input().split())) for _ in range(q)]\n\ncnt = [[0] * (n + 1) for _ in range(n + 1)]\nfor l, r in lr:\n    cnt[l][r] += 1\n\nacc = deepcopy(cnt)\nfor i in range(n):\n    for j in range(n):\n        tmp = acc[i][j + 1] + acc[i + 1][j] - acc[i][j]\n        acc[i + 1][j + 1] += tmp\n\nfor p, q in pq:\n    p -= 1\n    ans = acc[q][q] - acc[p][q] - acc[q][p] + acc[p][p]\n    print(ans)\n", "N, M, Q = list(map(int, input().split()))\nT = [tuple(map(int, input().split())) for i in range(M)]\nqueries = [tuple(map(int, input().split())) for i in range(Q)]\n\nplot = [[0] * (N + 1) for i in range(N + 1)]\naccum = [[0] * (N + 1) for i in range(N + 1)]\nfor Li, Ri in T:\n    plot[Li][Ri] += 1\nfor i in range(1, N + 1):\n    for j in range(1, N + 1):\n        accum[i][j] = accum[i][j - 1] + accum[i - 1][j] \\\n            - accum[i - 1][j - 1] + plot[i][j]\n\nfor pi, qi in queries:\n    print((accum[qi][qi] - accum[pi - 1][qi]))\n", "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, gcd\nfrom itertools import accumulate, permutations, combinations, product, groupby, combinations_with_replacement\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom heapq import heappush, heappop\nfrom functools import reduce\nimport numpy as np\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\nN, M, Q = MAP()\nLR = [LIST() for _ in range(M)]\npq = [LIST() for _ in range(Q)]\n\nx = np.zeros((N+1, N+1), dtype=np.int64)\nfor L, R in LR:\n    x[L, R] += 1\nx = x.cumsum(axis=0).cumsum(axis=1)\n\nfor p, q in pq:\n    print((x[q][q]-x[q][p-1]-x[p-1][q]+x[p-1][p-1]))\n", "import sys\n\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n, m, q = list(map(int, input().split()))\n    cnt = [[0] * n for _ in range(n)]\n    for _ in range(m):\n        l, r = list(map(int, input().split()))\n        cnt[l - 1][r - 1] += 1\n\n    R = [[0] * (n + 1) for _ in range(n + 1)]\n    for h in range(n):\n        for w in range(n):\n            R[h + 1][w + 1] = R[h][w + 1] + R[h + 1][w] - R[h][w] + cnt[h][w]\n\n    for _ in range(q):\n        p, q = list(map(int, input().split()))\n        res = R[q][q] - R[p - 1][q] - R[q][p - 1] + R[p - 1][p - 1]\n        print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "N,M,Q = map(int,input().split())\nl = [[0 for i in range(N)] for j in range(N)]\n \nfor _ in range(M):\n    L,R = map(int,input().split())\n    l[L-1][R-1] += 1\n \ncsum = [[0 for i in range(N+1)] for j in range(N+1)]\n \nfor i in range(1,N+1):\n    for j in range(1,N+1):\n        csum[i][j] = csum[i][j-1] + csum[i-1][j] - csum[i-1][j-1] + l[i-1][j-1]\n \nfor _ in range(Q):\n    p,q = map(int,input().split())\n    print(csum[q][q]-csum[q][p-1]-csum[p-1][q]+csum[p-1][p-1])", "#\u533a\u9593\u306e\u554f\u984c\u306f\u7d2f\u7a4d\u548c\u304b\u5c3a\u53d6\u308a\u6cd5\n#\u533a\u9593\u3067\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u500b\u6570\u2192\u7d2f\u7a4d\u548c\n#\u533a\u9593\u306e\u6570\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u533a\u9593\u306e\u6700\u5927\u5024\u6700\u5c0f\u5024\u2192\u5c3a\u53d6\u308a\u6cd5\n#\u4eca\u56de\u306f\u533a\u9593\u3067\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u7dcf\u548c\u2192\u7d2f\u7a4d\u548c\n#\u4e8c\u3064\u306e\u7aef\u70b9\u3092\u540c\u6642\u306b\u6271\u308f\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\n#\u5217\u8eca\u306e\u59cb\u307e\u308a\u304c\u533a\u9593\u306b\u542b\u307e\u308c\u308b\u304b\u3064\u5217\u8eca\u306e\u7d42\u308f\u308a\u304c\u533a\u9593\u306b\u542b\u307e\u308c\u3066\uff0b\uff11\u3067\u3042\u308b\n#\u3064\u307e\u308a\u4e8c\u6b21\u5143\u7d2f\u7a4d\u548c\u3092\u66f8\u3051\u3070\u3044\u3044\nn,m,q=list(map(int,input().split()))\nruiseki=[[0 for i in range(n+1)] for i in range(n+1)]\nfor i in range(m):\n  l,r=list(map(int,input().split()))\n  ruiseki[l][r]=ruiseki[l][r]+1\n#\u4e8c\u6b21\u5143\u7d2f\u7a4d\u548c\u3092\u8a08\u7b97\u3059\u308b\nfor i in range(0,n+1):\n  for j in range(1,n+1):\n    ruiseki[i][j]=ruiseki[i][j]+ruiseki[i][j-1]\nfor i in range(1,n+1):\n  for j in range(n+1):\n    ruiseki[i][j]=ruiseki[i-1][j]+ruiseki[i][j]\n\n#\u5404\u30af\u30a8\u30ea\u306b\u5bfe\u3057\u3066\u7d2f\u7a4d\u548c\u3092\u8a08\u7b97\nfor i in range(q):\n  p,q=list(map(int,input().split()))\n  print((ruiseki[q][q]-ruiseki[p-1][q]-ruiseki[q][p-1]+ruiseki[p-1][p-1]))\n  \n"]