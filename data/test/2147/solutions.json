["from collections import deque\nimport random\n\n\nclass CodeforcesTask566BSolution:\n    def __init__(self):\n        self.result = ''\n        self.n = 0\n        self.rules = []\n\n    def read_input(self):\n        self.n = int(input())\n        self.rules = [[int(x) for x in input().split(\" \")] + [y + 1] for y in range(self.n * 4)]\n\n    def process_task(self):\n\n        loads = [4] * self.n\n        random.shuffle(self.rules)\n        to_use = deque(self.rules)\n        order = []\n        res = True\n        ba = 0\n        while to_use and res:\n            moving = to_use.popleft()\n            loads[moving[0] - 1] -= 1\n            if loads[moving[1] - 1] < 9 and loads[moving[2] - 1] < 9 + (-1 if moving[2] == moving[1] else 0):\n                ba = 0\n                loads[moving[1] - 1] += 1\n                loads[moving[2] - 1] += 1\n                order.append(moving[3])\n            else:\n                ba += 1\n                loads[moving[0] - 1] += 1\n                to_use.append(moving)\n            if ba > self.n * 12:\n                res = False\n        self.result = \"NO\" if not res else f\"YES\\n{' '.join([str(x) for x in order])}\"\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask566BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()", "from collections import deque\nimport random\n\n\nclass CodeforcesTask566BSolution:\n    def __init__(self):\n        self.result = ''\n        self.n = 0\n        self.rules = []\n\n    def read_input(self):\n        self.n = int(input())\n        self.rules = [[int(x) for x in input().split(\" \")] + [y + 1] for y in range(self.n * 4)]\n\n    def process_task(self):\n\n        loads = [4] * self.n\n        random.shuffle(self.rules)\n        to_use = deque(self.rules)\n        order = []\n        res = True\n        ba = 0\n        while to_use and res:\n            moving = to_use.popleft()\n            loads[moving[0] - 1] -= 1\n            if loads[moving[1] - 1] < 9 and loads[moving[2] - 1] < 9 + (-1 if moving[2] == moving[1] else 0):\n                ba = 0\n                loads[moving[1] - 1] += 1\n                loads[moving[2] - 1] += 1\n                order.append(moving[3])\n            else:\n                ba += 1\n                loads[moving[0] - 1] += 1\n                to_use.append(moving)\n            if ba > self.n * 12:\n                res = False\n        self.result = \"NO\" if not res else f\"YES\\n{' '.join([str(x) for x in order])}\"\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask566BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()"]