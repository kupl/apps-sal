["n = int(input())\na = list(input())\nb = list(input())\na = [int(i) for i in a]\nb = [int(i) for i in b]\na.sort()\nb.sort()\nc = a[::]\nd = b[::]\nans1 = 0\nans2 = 0\nfor i in a:\n    for j in range(len(b)):\n        if b[j] > i:\n            del b[j]\n            ans2 += 1\n            break\nfor i in c:\n    for j in range(len(d)):\n        if d[j] >= i:\n            del d[j]\n            break\n    else:\n        ans1 += 1\n\nprint(ans1)\nprint(ans2)", "n = int(input())\nsh = list(map(int, input()))\nmor = list(map(int, input()))\ncnt = [0] * 10\nfor elem in mor:\n    cnt[elem] += 1\ncnt2 = cnt[:]\ntakes = 0\nnew_mor = [0] * n\nfor i in range(n):\n    ptr = sh[i]\n    while ptr < 10 and cnt[ptr] == 0:\n        ptr += 1\n    if ptr != 10:\n        new_mor[i] = ptr\n        cnt[ptr] -= 1\n    else:\n        ptr = 0\n        while ptr < 10 and cnt[ptr] == 0:\n            ptr += 1\n        new_mor[i] = ptr\n        cnt[ptr] -= 1    \nfor i in range(n):\n    if new_mor[i] < sh[i]:\n        takes += 1\ngives = 0\nnew_mor = [0] * n\nfor i in range(n):\n    ptr = sh[i] + 1\n    while ptr < 10 and cnt2[ptr] == 0:\n        ptr += 1\n    if ptr != 10:\n        new_mor[i] = ptr\n        cnt2[ptr] -= 1\n    else:\n        ptr = 0\n        while ptr < 10 and cnt2[ptr] == 0:\n            ptr += 1\n        new_mor[i] = ptr\n        cnt2[ptr] -= 1\nfor i in range(n):\n    if new_mor[i] > sh[i]:\n        gives += 1\nprint(takes, gives, sep = '\\n')", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    n = II()\n    a = [int(c) for c in S()]\n    b = [int(c) for c in S()]\n    r1 = n\n    a.sort()\n    b.sort()\n    bi = 0\n    for c in a:\n        while bi < n:\n            if c <= b[bi]:\n                bi+=1\n                r1 -= 1\n                break\n            bi+=1\n\n    bi = 0\n    r2 = 0\n    for c in a:\n        while bi < n:\n            if c < b[bi]:\n                bi+=1\n                r2 += 1\n                break\n            bi+=1\n    return \"{}\\n{}\".format(r1,r2)\n\n\nprint(main())\n", "n=int(input())\ns=str(input())\nm=str(input())\nmarr=[0 for i in range(10)]\nmarr2=[0 for i in range(10)]\nfor i in m:\n    marr[int(i)]+=1\n    marr2[int(i)]+=1\nlow=0\nhigh=0\n#print(marr,marr2)\nfor i in s:\n    i=int(i)\n    b=0\n    for j in range(i,10):\n        if marr[j]>0:\n            marr[j]-=1\n            b=1\n            break\n    if b==0:\n        low+=1\n#print(marr,marr2)\nfor i in s:\n    i=int(i)\n    for j in range(i+1,10):\n        #print(j,marr2[j])\n        if marr2[j]>0:\n            marr2[j]-=1\n            high+=1\n            break\nprint(low)\nprint(high)\n", "n = int(input())\nsher = input()\nmor = input()\nmorD = [0] * 10\nfor i in mor:\n    morD[int(i)] += 1\nans1 = 0\nfor i in sher:\n    k = int(i)\n    while k < 10 and morD[k] == 0:\n        k += 1\n    if k == 10:\n        ans1 += 1\n        k = 0\n        while morD[k] == 0:\n            k += 1\n    morD[k] -= 1\nprint(ans1)\nmorD = [0] * 10\nfor i in mor:\n    morD[int(i)] += 1\nans2 = 0\nfor i in sher:\n    k = int(i)\n    if k == 9:\n        k = 0\n        while morD[k] == 0:\n            k += 1\n    else:\n        k += 1\n        while k < 10 and morD[k] == 0:\n            k += 1\n        if k == 10:\n            k = 0\n            while morD[k] == 0:\n                k += 1\n        else:\n            ans2 += 1\n    morD[k] -= 1\nprint(ans2)\n", "n = int(input())\na = sorted(map(int, input()))\nb = sorted(map(int, input()))\n\nr1 = n\nj = 0\ntry:\n    for i in range(n):\n        while a[i] > b[j]:\n            j += 1\n            if j >= n:\n                raise UserWarning\n        r1 -= 1\n        j += 1\n        if j >= n:\n            raise UserWarning\nexcept UserWarning:\n    pass\n\nr2 = 0\nj = 0\ntry:\n    for i in range(n):\n        while a[i] >= b[j]:\n            j += 1\n            if j >= n:\n                raise UserWarning\n        r2 += 1\n        j += 1\n        if j >= n:\n            raise UserWarning\nexcept UserWarning:\n    pass\n\nprint(r1)\nprint(r2)\n", "import collections\n\nn = int(input())\nsh = input()\nmor = input()\n\nsh_dig = collections.Counter(sh)\nmor_dig = collections.Counter(mor)\n\nsh_sort = sorted(sh)\nmor_sort = sorted(mor)\n\nmin_strikes = 0\ni, j = 0, 0\nwhile j != n:\n    if sh_sort[i] <= mor_sort[j]:\n        i += 1\n        j += 1\n    else:\n        min_strikes += 1\n        j += 1\n\nmax_strikes = 0\ni, j = 0, 0\nwhile j != n:\n    if sh_sort[i] < mor_sort[j]:\n        max_strikes += 1\n        i += 1\n        j += 1\n    else:\n        j += 1\n\nprint(min_strikes)\nprint(max_strikes)\n", "import math, sys\ndef main():\n\tn = int(input())\n\ts1 = list(input().strip())\n\ts2 = list(input().strip())\n\tsort2 = sorted(s2)\n\tsort1 = sorted(s1)\n\t#print(sort1)\n\t#print(sort2)\n\tmaxs = 0;\n\tj = 0\n\tfor i in range(n):\n\t\twhile(j!=n and sort1[i]>=sort2[j]):\n\t\t\tj+=1\n\t\tif (j==n): \n\t\t\tbreak\n\t\tj+=1\n\t\tmaxs+=1\n\t\n\tj = 0\n\tmins=0\n\tfor i in range(n):\n\t\twhile(j!=n and sort1[i]>sort2[j]):\n\t\t\tj+=1\n\t\t\tmins+=1\n\t\tif (j==n): \n\t\t\tbreak\n\t\tj+=1\n\tprint(mins)\n\tprint(maxs)\n\t\n\t\t\t\ndef __starting_point():\n\tmain()\n\n__starting_point()", "# Author: Maharshi Gor\n\ndef read(type=int):\n    return type(input())\n\n\ndef read_arr(type=int):\n    return [type(token) for token in input().split()]\n\n\nn = read()\n\nS = [ord(c) - ord('1') for c in read(str)]\n\nM = [ord(c) - ord('1') for c in read(str)]\n\nself_knocks = 0\n\nS.sort()\nM.sort()\n\ni = n - 1\nj = n - 1\n\nwhile i >= 0:\n    if M[j] >= S[i]:\n        j -= 1\n        i -= 1\n    else:\n        self_knocks += 1\n        i -= 1\n\nop_knocks = 0\n\ni = n - 1\nj = n - 1\nwhile i >= 0:\n    if M[j] > S[i]:\n        j -= 1\n        i -= 1\n        op_knocks += 1\n    else:\n        i -= 1\nprint(self_knocks)\nprint(op_knocks)\n", "n = int(input())\na = sorted(map(int, input()))\nb = sorted(map(int, input()))\nwas = [0] * n\ncnt1 = cnt2 = 0\nfor i in range(n):\n    mn = 10\n    ind = -1\n    for j in range(n):\n        if not was[j] and a[j] <= b[i] < mn:\n            mn = a[j]\n            ind = j\n    if ind != -1:\n        was[ind] = 1\n    else:\n        cnt1 += 1\nwas = [0] * n\nfor i in range(n):\n    mn = 10\n    ind = -1\n    for j in range(n):\n        if not was[j] and a[j] < b[i] < mn:\n            mn = a[j]\n            ind = j\n    if ind != -1:\n        was[ind] = 1\n        cnt2 += 1\nprint(cnt1)\nprint(cnt2)", "from bisect import bisect_left, bisect_right\n\nn = int(input())\nsh = sorted(list(input()))\nmor = sorted(list(input()))\ntemp = []\nget = 0\nfor elem in sh:\n    a = bisect_left(mor, elem)\n    if a >= len(mor):\n        get += 1\n        a = 0\n    temp.append(mor[a])\n    mor.pop(a)\nmor = sorted(temp)\ntemp = []\ngive = 0\nfor elem in sh:\n    a = bisect_right(mor, elem)\n    if a < len(mor):\n        give += 1\n    else:\n        a = 0\n    mor.pop(a)\nprint(get, give, sep='\\n')", "from collections import Counter\n\nn = int(input())\n\na = [int(x) for x in input()]\nb = [int(x) for x in input()]\n\na.sort(reverse=True)\nb.sort(reverse=True)\n\ncur_b = 0\nfor a_i in a:\n    if b[cur_b] > a_i:\n        cur_b += 1\n\npunches = 0\ncur_b2 = 0\nfor a_i in a:\n    if b[cur_b2] >= a_i:\n        cur_b2 += 1\n    else:\n        punches += 1\n\nprint(punches)\nprint(cur_b)\n", "#! /usr/bin/python\n# kmwho\n# Codeforces 401 D2\n\ndef main():\n    n     = int(input())\n    sher  = [ int(c) for c in input().strip() ]\n    mori  = [ int(c) for c in input().strip() ]\n    counts = [0]*10\n    countm = [0]*10\n\n    for dm in mori:\n        countm[dm] += 1\n    \n    # Defence\n    countdef = 0\n    for ds in sher:\n        defended = False\n        for dm in range(ds,10):\n            if countm[dm] > 0:\n                countm[dm] -= 1\n                defended  = True\n                break\n        if not defended:\n            countdef += 1\n            for dm in range(n):\n                if countm[dm] > 0:\n                    countm[dm]  -= 1\n                    break\n    \n    print(countdef)\n\n    # Offence\n    countdm = [0]*10\n    for dm in mori:\n        countm[dm] += 1\n    \n    countoff = 0\n    for ds in sher:\n        attacked = False\n        for dm in range(ds+1,10):\n            if countm[dm] > 0:\n                countm[dm] -= 1\n                attacked  = True\n                countoff += 1\n                break\n        if not attacked:\n            for dm in range(n):\n                if countm[dm] > 0:\n                    countm[dm]  -= 1\n                    break\n    \n    print(countoff)\n    \n\nmain()\n\n", "import sys\nn = int(input())\nsh = list(input())\nm = list(input())\nsh.sort()\nm.sort()\ni = 0\nj = 0\nans1 = n\nwhile True:\n    if j>= n:\n        break\n    if(sh[i] > m[j]):\n        j += 1\n    else:\n        ans1 -= 1\n        i += 1\n        j += 1\nans2 = 0\ni = 0\nj = 0\nwhile True:\n    if j>= n:\n        break\n    if(sh[i] < m[j]):\n        i += 1\n        ans2 += 1\n        j += 1\n    else:\n       j += 1\nprint(ans1)\nprint(ans2)", "n = int(input())\nsher = str(input())\nmor = str(input())\n\nsherd = [0,0,0,0,0,0,0,0,0,0]\nmord = [0,0,0,0,0,0,0,0,0,0]\n\nsherd2 = [0,0,0,0,0,0,0,0,0,0]\nmord2 = [0,0,0,0,0,0,0,0,0,0]\n\nfor i in range(n):\n    if sher[i] == '':\n        continue\n    s = int(sher[i])\n    sherd[s] += 1\n    m = int(mor[i])\n    mord[m] += 1\n\nfor i in range(10):\n    sherd2[i] = sherd[i]\n    mord2[i] = mord[i]\n\nmins = 0\nmaxs = 0\n\nfor j in range(10):\n    i = 9 - j\n    diff = sherd[i] - mord[i]\n    if diff > 0:\n        mins += diff\n    elif i > 0:\n        mord[i-1] += -diff\n\n# print(mord2)\n# print(sherd2)\n\nfor j in range(9):\n    i = 9 - j\n    diff = mord2[i] - sherd2[i-1]\n    if diff > 0:\n        maxs += sherd2[i-1]\n        if i > 0:\n            mord2[i-1] += diff\n    else:\n        maxs += mord2[i]\n\nprint(mins)\nprint(maxs)", "length = int(input())\njustice = [int(n) for n in input()]\ncheater = [int(n) for n in input()]\njustice.sort()\ncheater.sort()\nj_index,cheat_index = 0,0\nmaximum_ans = 0\nwhile j_index < length and cheat_index < length:\n    if justice[j_index] >= cheater[cheat_index]:\n        cheat_index += 1\n    else:\n        j_index += 1\n        cheat_index += 1\n        maximum_ans += 1\n\nj_index,cheat_index = 0,0\nminimum_ans = 0\nwhile j_index < length and cheat_index < length:\n    if justice[j_index] <= cheater[cheat_index]:\n        cheat_index += 1\n        j_index += 1\n        minimum_ans += 1\n    elif justice[j_index] > cheater[cheat_index]:\n        cheat_index += 1\n\nprint(length - minimum_ans)\nprint(maximum_ans)\n", "n = int(input())\ns = list(map(int, list(input())))\nm = map(int, list(input()))\n\nma = [0] * 10\nfor dig in m:\n    ma[dig] += 1\n\nma2 = list(ma)\n\nmin_f = 0\nfor nu in s:\n    for x in range(nu, 10):\n        if ma[x] > 0:\n            ma[x] -= 1\n            break\n    else:\n        min_f += 1\n        for z in range(len(ma)):\n            if ma[z] > 0:\n                ma[z] -= 1\n                break\n\nprint(min_f)\n\nma = ma2\n\nmax_f = 0\nfor nu in s:\n    for x in range(nu+1, 10):\n        if ma[x] > 0:\n            ma[x] -= 1\n            max_f += 1\n            break\n    else:\n        for z in range(len(ma)):\n            if ma[z] > 0:\n                ma[z] -= 1\n                break\n\nprint(max_f)", "import sys\n\nfin = sys.stdin\nfout = sys.stdout\nn = int(fin.readline())\na = list(fin.readline().strip())\nb = list(fin.readline().strip())\ncan1 = [False] * n\nb.sort()\nfor cur in b:\n    for i in range(n):\n        if cur >= a[i] and not can1[i]:\n            can1[i] = True\n            break\nfout.write(str(can1.count(False)) + '\\n')\na.sort()\ncan2 = [False] * n\nfor cur in b:\n    for i in range(n):\n        if cur > a[i] and not can2[i]:\n            can2[i] = True\n            break\nfout.write(str(can2.count(True)))\n", "n = int(input())\nsherlock = [int(i) for i in list(input())]\nmoriarty = [int(i) for i in list(input())]\n\npairs = []\nfor i in range(n):\n    for j in range(n):\n        pairs.append((moriarty[j]-sherlock[i], i, j))\n\npairs = sorted(pairs)\n\nsherlock_marked = [False] * n\nmoriarty_marked = [False] * n\n\navoided = 0\n\nfor pair in pairs:\n    if pair[0] < 0:\n        continue\n\n    if not sherlock_marked[pair[1]] and not moriarty_marked[pair[2]]:\n        sherlock_marked[pair[1]] = True\n        moriarty_marked[pair[2]] = True\n        avoided += 1\n\nsherlock_marked = [False] * n\nmoriarty_marked = [False] * n\n\nflicked = 0\n\nfor pair in pairs:\n    if pair[0] < 1:\n        continue\n\n    if not sherlock_marked[pair[1]] and not moriarty_marked[pair[2]]:\n        sherlock_marked[pair[1]] = True\n        moriarty_marked[pair[2]] = True\n        flicked += 1\n\nprint(n - avoided)\nprint(flicked)\n", "import sys\nimport copy\nfrom collections import Counter\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    n = int(input())\n    Sn = list(map(int, input()))\n    Mn = list(map(int, input()))\n    # debug(Sn, locals())\n\n    cntM1 = Counter(Mn)\n    cntM2 = copy.deepcopy(cntM1)\n    # debug(cntM, locals())\n\n    # max-win\n    maxwin = 0\n    for d in Sn:\n        for a in range(d+1, 10):\n            if cntM1[a] > 0:\n                cntM1[a] -= 1\n                maxwin += 1\n                break\n        else:\n            for a in range(0, d + 1):\n                if cntM1[a] > 0:\n                    cntM1[a] -= 1\n                    break\n\n    # min-lose\n    minlose = 0\n    for d in Sn:\n        for a in range(d, 10):\n            if cntM2[a] > 0:\n                cntM2[a] -= 1\n                break\n        else:\n            for a in range(0, d):\n                if cntM2[a] > 0:\n                    minlose += 1\n                    cntM2[a] -= 1\n                    break\n\n    print(minlose)\n    print(maxwin)\n\n\ndef __starting_point():\n    solve()\n__starting_point()", "from collections import defaultdict\n\nn = int(input())\ns1 = input()\ns2 = input()\n\nocc = defaultdict(int)\n\nfor i in s2:\n    occ[int(i)]+=1\n\ndef find_min(x):\n    nonlocal occ\n    for i in range(x, 10):\n        if occ[i] > 0:\n            occ[i]-=1\n            return i\n    for i in range(0, x):\n        if occ[i] > 0:\n            occ[i]-=1\n            return i\n\nmn = 0\nfor i in s1:\n    y = find_min(int(i))\n    if y < int(i):\n        mn+=1\n\nprint(mn)\n\nfor i in s2:\n    occ[int(i)]+=1\n\ndef find_closest(x):\n    nonlocal occ\n    for i in range(x+1, 10):\n        if occ[i] > 0:\n            occ[i] -=1\n            return i\n    for i in range(0,x+1):\n        if occ[i] > 0:\n            occ[i]-=1\n            return i\nmx =0\nfor i in s1:\n    y = find_closest(int(i))\n    if y > int(i):\n        mx +=1\n\nprint(mx)\n", "n = int(input())\n\nns = [0] * 10\nnm = [0] * 10\n\ns = list(map(int, input()))\n\nfor i in map(int, input()):\n    nm[i] += 1\n\nmi = ma = 0\n\ncnm = nm[:]\n\nfor i in s:\n    ok = False\n    for j in range(i, 10):\n        if cnm[j] != 0:\n            cnm[j] -= 1\n            ok = True\n            break\n    if not ok:\n        mi += 1\n\ncnm = nm[:]\n\nfor i in s:\n    ok = False\n    for j in range(i + 1, 10):\n        if cnm[j] != 0:\n            cnm[j] -= 1\n            ok = True\n            break\n    if ok:\n        ma += 1\n\nprint(mi)\nprint(ma)\n\n", "n = int(input());\ns = [int(x) for x in input()];\nm = [int(x) for x in input()];\nmarked1 = [False for i in range(n)];\nmarked2 = marked1.copy();\nflicks_g = 0;\nsaves = 0;\nfor i in range(n):\n    idx1 = idx2 = -1\n    val1 = val2 = (1 << 30);\n    for j in range(n):\n        if (m[j] > s[i] and m[j] < val1 and not marked1[j]):\n            idx1 = j;\n            val1 = m[j];\n        if (m[j] >= s[i] and m[j] < val2 and not marked2[j]):\n            idx2 = j;\n            val2 = m[j];\n    if (idx1 != -1):\n        marked1[idx1] = True;\n        flicks_g += 1;\n    if (idx2 != -1):\n        marked2[idx2] = True;\n        saves += 1;\nflicks_t = n - saves;\nprint(\"%d\\n%d\" %(flicks_t, flicks_g));", "from collections import Counter\nn = int(input())\ns, m = [int(x) for x in input()], Counter([int(x) for x in input()])\nm1 = Counter(m)\nans1, ans2 = 0, 0\nfor num1 in sorted([int(x) for x in s]):\n    for num2 in range(num1+1, 10):\n        if m[num2]:\n            ans2 += 1\n            m[num2] -= 1\n            break\n    else:\n        break\n\nfor num1 in sorted(s):\n    for num2 in range(num1, 10):\n        if m1[num2]:\n            ans1 += 1\n            m1[num2] -= 1\n            break\n    else:\n        break\nprint(n - ans1)\nprint(ans2)\n\n"]