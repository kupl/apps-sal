["n, m = map( int, input().split() )\na = list( map( int, input().split() ) )\n\ndef f( a_k ): # 2\u3067\u5272\u308a\u5207\u308c\u308b\u56de\u6570\n    count = 0\n    while a_k % 2 == 0:\n        count += 1\n        a_k = a_k // 2\n    return count\n\nb = []\nf_0 = f( a[ 0 ] )\nfor a_k in a:\n    f_k = f( a_k )\n    if f_k != f_0:\n        print( 0 )\n        return\n    b.append( a_k // pow( 2, f_k ) )\n\nimport math\ndef lcm( x, y ):\n    return x * y // math.gcd( x, y )\n\nb_lcm = 1\nfor b_k in b:\n    b_lcm = lcm( b_lcm, b_k )\n\na_lcm = b_lcm * pow( 2, f_0 )\n# print( b_lcm, f_0, b )\nprint( ( m + a_lcm // 2 ) // a_lcm )", "from functools import reduce\n\nN, M = list(map(int, input().split()))\nAs = list(map(int, input().split()))\n\nBs = [A//2 for A in As]\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\ndef lcm(a, b):\n    return a // gcd(a, b) * b\n\nnums = []\nfor B in Bs:\n    num = 0\n    while B%2 == 0:\n        B //= 2\n        num += 1\n    nums.append(num)\n\nif len(set(nums)) != 1:\n    ans = 0\nelse:\n    L = reduce(lcm, Bs)\n    ans = M//L - M//(2*L)\n\nprint(ans)\n", "import math\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = {}\nfor i in range(n):\n    count = 0\n    temp = a[i]\n    while temp % 2 == 0:\n        count += 1\n        temp //= 2\n    b.setdefault(count, 0)\n    b[count] += 1\nif len(b.keys()) >= 2:\n    ans = 0\nelse:\n    temp = 1\n    for i in range(n):\n        temp = temp * a[i] // math.gcd(temp, a[i])\n    temp2 = temp // 2\n    ans = m // temp2 - m // temp\nprint(ans)", "import numpy as np\nimport sys\n\ndef main():\n    N,M=list(map(int,input().split()))\n    A=list(map(int,input().split()))\n    A_double=list([x//2 for x in A])\n\n    mini_multi=int(np.lcm.reduce(A_double))\n\n    res=M//mini_multi\n    \n    for i in A_double:\n        if (mini_multi//i)%2==0:\n            print((0))\n            return\n\n    if res%2!=0:\n        res+=1\n\n\n    print((res//2))\n\n\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# ABC150D\n\nimport sys\ninput=sys.stdin.readline\nfrom math import gcd,ceil\n\ndef main():\n    N,M=list(map(int,input().split()))\n    A=list([int(x)//2 for x in input().split()])\n    lcm=A[0]\n    for i in range(1,N):\n        lcm=lcm*A[i]//gcd(lcm,A[i])\n    allo=1\n    for i in range(N):\n        allo&=(lcm//A[i])%2\n    if allo:\n        print((ceil(int(M//lcm)/2)))\n    else:\n        print((0))\n    \n    \ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nfrom math import gcd\nfrom copy import deepcopy\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef resolve():\n    n, m = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n\n    A_ = deepcopy(A)\n    cnt = [0] * n\n    for i in range(n):\n        while A_[i] % 2 == 0:\n            A_[i] //= 2\n            cnt[i] += 1\n        if i != 0 and cnt[i] != cnt[i - 1]:\n            print((0))\n            return\n\n    L = 1\n    for a in A:\n        L = lcm(L, a // 2)\n\n    res = m // L - (m // (L * 2))\n    print(res)\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "from math import gcd\ndef lcm(a,b):return (a*b)//(gcd(a,b))\n\ndef f(x):\n    cnt=0\n    while(x%2==0):\n        cnt+=1\n        x=x//2\n    return cnt\n\nn,m=map(int,input().split())\na=list(map(int,input().split()))\na=list(map(lambda x: x//2,a))\n\nt=f(a[0])\nfor i in range(n):\n    if(f(a[i])!=t):\n        print(0)\n        return\n    a[i]=a[i]//(2**t)\nm=m//(2**t)\nl=1\nfor i in range(n):\n    l=lcm(l,a[i])\n    if(l>m):\n        print(0)\n        return\nm=m//l\nprint((m+1)//2)", "import math\n\nn,m=list(map(int,input().split()))\na=list(map(int,input().split()))\n\nif n==1:\n  a1=a[0]//2\n  ans_m=m//a1\n  if ans_m==0:\n    print((0))\n  else:\n    print(((ans_m-1)//2+1))\n  \nelse:\n  x=a[0]\n  ch=0\n  ch1=0\n  while x%2==0:\n    x=x//2\n    ch+=1\n  dob=2**ch\n  for i in a:\n    if i%dob==0 and i%(dob*2)!=0:\n      ch1+=1\n  if ch1!=n:\n    print((0))\n  else:\n    ans=a[0]//2\n    for j in range(1,n):\n      ans=(ans*(a[j]//2))//math.gcd(ans,a[j]//2)\n    ans_m=m//ans\n    if ans_m==0:\n      print((0))\n    else:\n      print(((ans_m-1)//2+1))\n    \n      \n", "from math import gcd, ceil\nN,M = map(int,input().split())\nA = list(map(int,input().split()))\nA = [a//2 for a in A]\nB = 1\n\nfor a in A:\n  B*=a//gcd(B,a)\n  \nfor a in A:\n  if B//a%2==0:\n    print(0)\n    return\n\nprint(ceil((M//B)/2))", "def solve():\n    import math\n    N,M = [int(i) for i in input().split()]\n    A = list(map(int, input().split()))\n\n    lcm = A[0]\n    for i in range(1, N):\n        lcm = lcm * A[i] // math.gcd(lcm, A[i])\n    first = lcm // 2\n\n    ans_exists = True\n    for i in range(N):\n        if first % A[i] == 0:\n            ans_exists = False\n\n    if ans_exists:\n        ans = int((M-first) // lcm + 1)\n        print(ans)\n    else:\n        print('0')\n\ndef __starting_point():\n    solve()\n__starting_point()", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Sep  9 14:33:00 2020\n\n@author: liang\n\"\"\"\nfrom math import gcd\n\nN, M = map(int, input().split())\nA = [int(i) for i in input().split()]\n\nflag = False\nres = 1\nfor a in A:\n    a //= 2\n    res *= a//gcd(res,a)\n    if res > M:\n        flag = True\n        break\n    #print(res)\n\"\"\"\n\u5b58\u5728\u30c1\u30a7\u30c3\u30af\n\uff12\u3067\u5272\u308a\u5207\u308c\u308b\u500b\u6570\u540c\u3058\uff1f\n\"\"\"\n\nfor a in A:\n    if int(res/a) == res/a:\n        flag = True\n        \nif flag:\n    ans = 0\n    print(ans)\nelse:\n    #ans = (M - res(A)//2)//res + 1\n    #ans = (M-1)//res//2 + 1\n    ans= (M//res + 1)//2\n    print(ans)", "import math\n\nN, M = map(int,input().split())\nA = list(map(int,input().split()))\n\npow2 = 0\nwhile A[0] % 2 == 0:\n    A[0] //= 2\n    pow2 += 1\n\nfor i in range(1,N):\n    cnt = 0\n    while A[i] % 2 == 0:\n        A[i] //= 2\n        cnt += 1\n    if cnt != pow2:\n        print(0)\n        return\n\nLCM = 2**max(0,pow2-1)\nfor i in range(N):\n    LCM = LCM * A[i] // math.gcd(LCM,A[i])\n\nans = M // LCM\nprint((ans+1)//2)", "from math import gcd\nfrom functools import reduce\nimport sys\ninput = sys.stdin.readline\n\n\ndef lcm(a, b):\n    return a*b // gcd(a, b)\n\n\ndef count_factor_2(num):\n    count = 0\n    while num % 2 == 0:\n        num //= 2\n        count += 1\n    return count\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    A = list([x//2 for x in set(map(int, input().split()))])\n\n    check = len(set(map(count_factor_2, A)))\n    if check != 1:\n        print((0))\n        return\n\n    lcm_a = reduce(lcm, A)\n    step = lcm_a * 2\n    ans = (m + lcm_a) // step\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N, M = map(int, input().split())\nA = list(map(lambda x: int(x)//2, input().split()))\n\nimport math\n\ndef lcm(x, y):\n  return (x // math.gcd(x, y)) * y\n\ndef pow2(x):\n  ret = 0\n  while x%2 == 0:\n    ret += 1\n    x //= 2\n  return ret\n\nP = []\nfor a in A:\n  P.append(pow2(a))\n\nif len(set(P)) != 1:\n  print(0)\nelse:\n  m = 1\n  for a in A:\n    m = lcm(m, a)\n  print(-(-(M//m)//2))", "def GCM(x, y):\n  if x%y==0:\n    return y\n  else:\n    return GCM(y, x%y)\n\nN, M = map(int, input().split())\n\nA = list(map(int, input().split()))\n\ncount2 = [0 for i in range(N)]\nfor i in range(N):\n  a = A[i]\n  while a%2==0:\n    count2[i] += 1\n    a = a//2\n  A[i] = a\nif sum(count2) == count2[0]*N:\n  count2 = count2[0]\n  buf = 1\n  for i in range(N):\n    buf = A[i]*buf//GCM(buf, A[i])\n  buf *= 2**(count2-1)\n  #print(buf)\n  n = M//buf\n  print((n+1)//2)\n  \nelse:\n  print(0)", "import fractions\nimport math\nfrom functools import reduce\n\ndef lcm_base(x, y):\n    return (x * y) // fractions.gcd(x, y)\n\ndef lcm(*numbers):\n    return reduce(lcm_base, numbers, 1)\n\ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\n\nn,m=map(int,input().split())\na=list(map(int,input().split()))\nb=lcm_list(map(lambda x: x//2, a))\nswt=0\n\nfor i in range(n):\n  if 0==(b//(a[i]//2))%2:\n    swt=1\n    break\n\nif 0==swt:\n  print(math.ceil((m//b)/2))\nelse:\n  print(0)", "import math\nimport numpy as np\nN,M=map(int,input().split())\nA=list(map(int,input().split()))\nc=1\ntest=A[0]\nl=0\n\nwhile test%2 == 0:\n  test=test//2\n  c*=2\n\ndef lcm_base(x, y):\n    return (x * y) // math.gcd(x, y)\n  \nfor i in np.arange(N-1):\n  if A[i+1]%c!=0:\n    print(0)\n    l=1\n    break\n  elif A[i+1]%(c*2)==0:\n    print(0)\n    l=1\n    break\n  else:\n    k=A[i+1]//c\n    test=lcm_base(test, k)\nif l==0:\n  k=test*c//2\n  print(M//k//2 + M//k%2)", "from math import gcd\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nmemo = {}\n\ndef lcm(a,b):\n    return a//gcd(a,b)*b\n\nb = 1\n\nfor a in A:\n    b = lcm(a//2, b)\n    if b > M:\n        break\n\nif any([2 * b // a % 2 == 0 for a in A]):\n    print(0)\nelse:\n    ans = M // b\n    print(ans - ans // 2)", "import copy\n# from math import gcd\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a%b)\n\ndef lcm(a, b):\n    return (a // gcd(a, b)) * b\ndef main():\n    n, m = map(int, input().split())\n    A = set([int(x) for x in input().split()])\n    a_lcm = 1\n    for a in A:\n        a_lcm = lcm(a_lcm, a)\n        # m\u304clcm\u306e\u534a\u5206\u3088\u308a\u3082\u5c0f\u3055\u304b\u3063\u305f\u30890\n        if (a_lcm / 2) > m:\n            print(0)\n            return\n    for a in A:\n        if (a_lcm / 2) % a == 0:\n            print(0)\n            return\n    # # \u3042\u3068\u306f\u5b9a\u6570\u500d\u306e\u6570\u8abf\u3079\u3066\u7d42\u308f\u308a\n    ans = int((m - (a_lcm / 2)) // a_lcm) + 1\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "from math import gcd\ndef lcm(a,b):\n    return a//gcd(a,b)*b\ndef lcm(ab):\n    l=len(ab)\n    ret=ab[0]\n    for i in range(1,l):\n        ret=ret//gcd(ab[i],ret)*ab[i]\n    return ret\ndef count2(a):\n    ret=0\n    while a%2==0:\n        a//=2\n        ret+=1\n    return 2**ret\nn,m=map(int,input().split())\nA=list(map(int,input().split()))\n#\u3053\u308c\u306f\u3044\u3089\u306a\u3044\u3067\u3059\nif any(i%2 for i in A):\n    print(0);return\nA=[i//2 for i in A]\n#\u5168\u4f53\u306e\u6700\u5c0f\u516c\u500d\u6570\np=lcm(A)\nc=count2(p)\n#2\u3067\u5272\u308a\u5207\u308c\u308b\u56de\u6570\u304c\u540c\u3058\u3067\u306a\u3044\u3082\u306e\u304c\u3042\u308b\u5834\u5408\nif any(i%c for i in A):\n    print(0);return\nx=m//p\n#print(p//c)\nprint(-(-x//2))", "from math import gcd\n\nn, m = list(map(int, input().split()))\nA = list(map(int, input().split()))\nA = [a//2 for a in  A]\nlcm = 1\n\nfor i in range(n):\n    lcm = lcm * A[i] // gcd(lcm, A[i])\n    if lcm > m:\n        print((0))\n        return\n        \nfor a in A:\n    if lcm // a % 2 == 0:\n        print((0))\n        return\n\nprint(((m//lcm + 1) // 2))\n", "from fractions import gcd\n\ndef lcm_base(x, y):\n    return (x * y) // gcd(x, y)\ndef lcm(numbers):\n    x = numbers[0]\n    for y in numbers:\n        x = lcm_base(x, y)\n    return x\n\nN, M = list(map(int, input().split()))\naaa = list(map(int, input().split()))\na = aaa[0]\ncnt = 0\nwhile a % 2 == 0:\n    cnt += 1\n    a //= 2\nfor a in aaa:\n    if a % 2 ** cnt != 0 or a % 2 ** (cnt + 1) == 0:\n        print((0))\n        return        \nbbb = [a // 2 for a in aaa]\nlc = lcm(bbb)\nq, r = divmod(M // lc , 2)\nprint((q + r))\n", "N, M = map(int, input().split())\na = list(map(int, input().split()))\nfor k in range(N):\n  a[k] //= 2\n\nfoo = 1\nwhile a[0]%2 == 0:\n  foo *= 2\n  a[0] //= 2\nfor k in range(1, N):\n  if a[k] % foo == 0 and a[k]%(2*foo) !=0:\n    a[k] //= foo\n    continue\n  else:\n    print(0)\n    return\nans = 0\n\nfor odd in [3, 5, 7, 11]:\n  flag = False\n  for k in range(N):\n    if a[k]%odd == 0:\n      a[k] //= odd\n      flag = True\n  if flag:\n    foo *= odd\n \n \nimport math\n\nlcm = a.pop()\nfor k in range(1, N):\n  b = a.pop()\n  lcm = lcm * b // math.gcd(lcm, b)\n  if lcm* foo > M:\n    print(0)\n    return\nlcm *= foo\nans = int((M / lcm -1)//2 + 1)\nprint(ans)", "import math\nfrom functools import reduce\nn, m = map(int, input().split())\nA = list(map(int, input().split()))\n\na0 = A[0]\ncnt = 0\nwhile a0%2 == 0:\n    a0 //= 2\n    cnt += 1\n\na = []\nfor aa in A:\n    if cnt == 1:\n        if aa%4 == 0:\n            print(0)\n            return\n    else:\n        if aa%(2**(cnt-1)) != 0 or aa%(2**cnt) != 0 or aa%(2**(cnt+1)) == 0:\n            print(0)\n            return\n    a.append(aa//2)\n\n\ndef lcm_base(p, q):\n    return (p * q) // math.gcd(p, q)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\n\n\nlcm = lcm_list(a)\nprint(m//lcm - m//(lcm*2))", "def main():\n    import math\n    n,m = list(map(int,input().split()))\n    a = sorted(list(map(int,input().split())))\n    for i in range(n):\n        a[i] //= 2\n    g=1\n    for i in range(n):\n        g = a[i] * g // math.gcd(g,a[i])\n    for i in range(n):\n        if g//a[i] % 2 == 0:\n            print((0))\n            return\n    if g>m:\n        print((0))\n        return\n    print((1 + (m-g)//(2*g)))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nfrom functools import reduce\nn, m = input().split()\na = list(map(int, input().split()))\nb =[0]*int(n)\nfor i in range(len(a)):\n  b[i] = a[i]//2\n\ndef lcm_base(x, y):\n    return (x * y) // math.gcd(x, y)\n\ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\nc = 0\n\nx = lcm_list(b)\nfor i in range(int(n)):\n  if (x // b[i]) % 2 == 0:\n    c = -1\n    break\n  else:\n    continue\n    \nif c == -1:\n  print((0))\nelse:\n  print((math.floor(((int(m)/x)+1)/2)))\n\n", "N, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nfrom fractions import gcd\ndef two(n):\n    ans = 0\n    while n%2==0:\n        n //= 2\n        ans += 1\n    return ans\n\ndef multi_lcm(A):\n    ans = A[0]\n    for a in A:\n        ans *= a//gcd(ans,a)\n    return ans\n\ndef solve(N,M,A):\n    ans = 0\n    num_two = len(set(map(two,A)))\n    if num_two != 1:\n        return 0\n    l = multi_lcm(A)\n    ans = (M+l//2)//l\n    return ans\nprint((solve(N,M,A)))\n", "from math import gcd\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nf = lambda n: 0 if n%2 else f(n>>1)+1\nx = f(A[0])\n\nif sum(x!=f(a) for a in A):\n    print(0)\n    return\n\nA = [a>>x for a in A]\n\ny = 1\nfor a in A:\n    y = y*a//gcd(y, a)\n    if y<<(x-1) > M:\n        print(0)\n        return\n\nprint((M//(y<<(x-1))+1)//2)", "from math import gcd\nN, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nA = [i // 2 for i in A]\nlcd = 1\nfor a in A:\n    lcd *= a // gcd(lcd, a)\nfor a in A:\n    if lcd // a % 2 == 0:\n        print((0))\n        return\nprint(((M//lcd+1)//2))\n", "N, M = list(map(int, input().split()))\na = list(map(int, input().split()))\nfor k in range(N):\n  a[k] //= 2\n\nfoo = 1\nwhile a[0]%2 == 0:\n  foo *= 2\n  a[0] //= 2\nfor k in range(1, N):\n  if a[k] % foo == 0 and a[k]%(2*foo) !=0:\n    a[k] //= foo\n    continue\n  else:\n    print((0))\n    return\nans = 0\n\nfor odd in [3, 5, 7, 11]:\n  flag = False\n  for k in range(N):\n    if a[k]%odd == 0:\n      a[k] //= odd\n      flag = True\n  if flag:\n    foo *= odd\n \n \ndef euclid(a, b):\n  while b:\n    a, b = b, a%b\n  return a\n\nlcm = a.pop()\nfor k in range(1, N):\n  b = a.pop()\n  lcm = lcm * b // euclid(lcm, b)\n  if lcm* foo > M:\n    print((0))\n    return\nlcm *= foo\nans = int((M / lcm -1)//2 + 1)\nprint(ans)\n\n", "N, M = map(int, input().split())\na = list(map(int, input().split()))\nfor k in range(N):\n  a[k] //= 2\n\nfoo = 1\nwhile a[0]%2 == 0:\n  foo *= 2\n  a[0] //= 2\nfor k in range(1, N):\n  if a[k] % foo == 0 and a[k]%(2*foo) !=0:\n    a[k] //= foo\n    continue\n  else:\n    print(0)\n    return\nans = 0\n\nimport math\nlcm = a.pop()\nfor k in range(1, N):\n  b = a.pop()\n  lcm = lcm * b // math.gcd(lcm, b)\n  if lcm* foo > M:\n    print(0)\n    return\nlcm *= foo\nans = int((M / lcm -1)//2 + 1)\nprint(ans)", "from math import gcd\ndef readinput():\n    n,m=list(map(int,input().split()))\n    a=list(map(int,input().split()))\n    return n,m,a\n\ndef lcm(a,b):\n    return a*b//gcd(a,b)\n\ndef main(n,m,a):\n    #s=set(a)\n    #print(s)\n    x=a[0]//2\n    for i in range(1,n):\n        x=lcm(x,a[i]//2)\n    #print(x)\n    gusubai=False\n    kisubai=False\n    for i in range(n):\n        if x%a[i]!=0:\n            gusubai=True\n        else:\n            kisubai=True\n    \n    y=m//x\n    #print(y,x,m)\n    if gusubai and not kisubai:\n        ans=y//2+y%2\n    elif gusubai and kisubai:\n        ans=0\n    else:\n        ans=y\n    return ans\n\ndef __starting_point():\n    n,m,a=readinput()\n    ans=main(n,m,a)\n    print(ans)\n\n__starting_point()", "import sys\nimport math\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom bisect import bisect, bisect_right, bisect_left\nfrom heapq import heapify, heappop, heappush\n    \ninput = sys.stdin.readline\ndef RD(): return input().rstrip()\ndef F(): return float(input().rstrip())\ndef I(): return int(input().rstrip())\ndef MI(): return map(int, input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int, input().split()))\ndef TI(): return tuple(map(int, input().split()))\ndef LF(): return list(map(float,input().split()))\ndef Init(H, W, num): return [[num for i in range(W)] for j in range(H)]\n    \n    \ndef main():\n    N, M = MI()\n    L = LI()\n    L = [i//2 for i in L]\n    \n    past = L[0]\n\n    for i in L:\n        past = (past // math.gcd(i, past)) * i\n        if past > M or (past // i) % 2 == 0:\n            print(0)\n            return\n    \n    temp = M // past\n    ans = (temp+1)//2\n    print(ans)        \n    \n\n    \n\ndef __starting_point():\n    main()\n__starting_point()", "from fractions import gcd\nN, M = list(map(int, input().split()))\nA = list(map(lambda x: int(x),input().split()))\n\ncnt = [0 for _ in range(N)]\nfor i in range(N):\n  a = A[i]\n  while a%2 == 0:\n    a = a // 2\n    cnt[i] += 1\n\nif max(cnt) > min(cnt):\n  print(0)\n  return\nC = max(cnt)\n\nA = list(map(lambda x: x // pow(2,C), A))\ndef gcd(a,b):\n  if a<b:\n    a,b = b,a\n  while a%b > 0:\n    a,b = b,a%b\n  return b\n\ndef lcm(a,b):\n  return a*b//gcd(a,b)\n\nx = A[0]\nfor a in A[1:]:\n  x = lcm(x,a)\nx = x * pow(2,C-1)\n\nprint((M // x + 1) // 2)", "from math import gcd\nfrom functools import reduce\n\nn,m=map(int,input().split())\nlst=list(map(lambda x : int(x)//2,input().split()))\ndivi=0\nx=lst[0]\nwhile x%2==0:\n    x//=2\n    divi+=1\n\nfor i in range(1,n):\n    divi2=0\n    x=lst[i]\n    while x%2==0:\n        x//=2\n        divi2+=1\n    if divi!=divi2 :\n        print(0)\n        return\n\nwork=reduce(lambda x,y: x*y//gcd(x,y),lst)\nprint((m//work+1)//2)", "n, m = map(int, input().split())\naas = set(list(map(int, input().split())))\na = [i//2 for i in aas]\nimport math\nN = len(a)\ndef n_of_twos(x):\n    res = 0\n    while x%(2**(res+1))==0:\n        res += 1\n    return res\nif N>=2:\n    n_of_twos_0 = n_of_twos(a[0])\n    for i in range(1,N):\n        if n_of_twos(a[i]) != n_of_twos_0:\n            print(0)\n            return\nans = a[0]\nfor i in range(1, N):\n    ans = ans * a[i] // math.gcd(ans, a[i])\nif ans > m:\n    print(0)\n    return\nprint(1 + (m//ans-1)//2)", "from math import gcd, ceil\nn, m = map(int, input().split())\na = list(map(int, input().split()))\na = [i // 2 for i in a]\nl = 1\nfor i in a:\n    l *= i // gcd(l, i)\nfor i in a:\n    if l // i % 2 == 0:\n        print(0)\n        return\nprint(ceil((m // l) / 2))", "import queue\nimport numpy as np\nimport math\n\nN, M = map(int, input().split())\na2 = list(map(int, input().split()))\na = []\nfor i in a2:\n    a.append(i//2)\n\nlcm = a[0]\n\nfor i in a:\n    lcm *= i // math.gcd(lcm, i)\n\nhasAns = True\nfor i in a:\n    if (lcm // i) % 2 == 0:\n        hasAns = False\n        break\n\nans = 0\n\nif hasAns:\n    ans = ((M // lcm) + 1 )// 2\n\nprint(ans)", "from math import gcd\nn,m=map(int,input().split())\na=list(map(int,input().split()))\na=list(set(a))\na=list(map(lambda x: x//2, a))\n\ndef lcm(q):\n  x = q[0]\n  for i in range(1, len(q)):\n    x = (x * q[i]) // gcd(x, q[i])\n  return x\n\nlcma=lcm(a)\nfor i in range(len(a)):\n  if (lcma//a[i])%2==0:\n    print(0)\n    return\ntemp=m//lcma\nprint(-(-temp//2))", "import sys\nimport math\n# import bisect\n# import numpy as np\n# from decimal import Decimal\n# from numba import njit, i8, u1, b1 #JIT compiler\n# from itertools import combinations, product\n# from collections import Counter, deque, defaultdict\n\n# sys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\nINF = 10 ** 9\nPI = 3.14159265358979323846\n\ndef read_str():      return sys.stdin.readline().strip()\ndef read_int():      return int(sys.stdin.readline().strip())\ndef read_ints():     return map(int, sys.stdin.readline().strip().split())\ndef read_ints2(x):   return map(lambda num: int(num) - x, sys.stdin.readline().strip().split())\ndef read_str_list(): return list(sys.stdin.readline().strip().split())\ndef read_int_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef GCD(a: int, b: int) -> int: return b if a%b==0 else GCD(b, a%b)\ndef LCM(a: int, b: int) -> int: return (a * b) // GCD(a, b)\n\ndef Main():\n    n, m = read_ints()\n    a = read_int_list()\n    a = [x // 2 for x in a]\n    lcm = 1\n    for x in a:\n        lcm *= x // math.gcd(lcm, x)\n    for x in a:\n        if lcm // x % 2 == 0:\n            print(0)\n            return\n    print(math.ceil((m // lcm) / 2))\n\ndef __starting_point():\n    Main()\n__starting_point()", "import sys\ninput=sys.stdin.readline\nimport math\n\nN,M=(int(x) for x in input().rstrip('\\n').split())\nAs=[int(x) for x in input().rstrip('\\n').split()]\nn = 1\nuse2 = 0\ncheck = 0\nfor i in range(N):\n  x = As[i]\n  if i==0:\n    while x % 2==0:\n      use2+=1 \n      x = x//2\n    lcm=x\n  else:\n    use=0\n    while x%2==0:\n      x = x//2\n      use += 1\n    if use2 != use:\n      check += 1\n      break\n    lcm=lcm*x//(math.gcd(lcm,x))\nif check > 0:\n  print(0)\nelse:\n  LCM=2**(use2-1)\n  LCM=LCM*lcm\n  print(((M//LCM)+1)//2)", "def lcm(a, b):\n  return a // gcd(a, b) * b\n\ndef gcd(a, b):\n  if(b == 0): return a\n  else: return gcd(b, a % b)\n\ndef cnt(a):\n  res = 0\n  while(a and a % 2 == 0):\n    a //= 2\n    res += 1\n  return res\n\nn, m = map(int, input().split())\nA = list(map(int, input().split()))\n\nl = 1\nc = cnt(A[0])\nfor a in A:\n  if cnt(a) != c or c == 0:\n    print(0)\n    return\n  else:\n    l = lcm(l, a // 2)\nd = m // l\nprint((d + 1) // 2)", "from math import gcd\nfrom functools import reduce\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\ndef lcm(a, b):\n    return a*b // gcd(a,b)\n\na = [i//2 for i in a]\n\nl = reduce(lcm, a)\n\nif any((l//i) % 2 == 0 for i in a):\n    print(0)\n    return\n\nprint(-(-(m//l)//2))", "import math\nn,m= list(map(int,input().split()))\nal= list(map(int,input().split()))\ntwos = set()\nfor c in al:\n    temp,tempc=0,c\n    while tempc%2==0:\n        tempc//=2\n        temp+=1\n    twos.add(temp)\nif len(twos)>1:print((0))\nelse:\n    lcmv=al[0]\n    for i in range(1,n):lcmv = lcmv*al[i] // math.gcd(lcmv,al[i])\n    print((max(0,1 + (m-lcmv//2)//lcmv)))\n", "from functools import reduce\n\ndef main():\n  N,M=map(int,input().split())\n  *A,=map(int,input().split())\n\n  A = list(set(A))\n  N = len(A)\n\n  B = [A[i]//2 for i in range(N)]\n\n  def factorize(n):\n      out=[]\n      i = 2\n      while i==2:\n          if n%i==0:\n              out.append(i)\n              n //= i\n          else:\n              i += 1\n          if n == 1:break\n          if i > int(n**.5+3):\n              out.append(n)\n              break\n      return out\n\n  ord_list=[len(factorize(B[i])) for i in range(N)]\n\n  if len(set(ord_list)) != 1:\n    print(0)\n    return\n\n  def gcd(a,b):\n    if b == 0: return a\n    return gcd(b,a%b)\n\n  def lcm(a,b):\n    return a*b//gcd(a,b)\n\n  LCM = reduce(lcm,B)\n  print((M//LCM+1)//2)\n  \ndef __starting_point():\n  main()\n__starting_point()", "from math import gcd\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef lcm_g(A):\n    ret = 1\n    for a in A:\n        ret = lcm(ret, a)\n    return ret\n\ndef is_hcm(x, A):\n    for i in range(N):\n        if x % A[i] != A[i] // 2:\n            return False\n    return True\n\nN, M = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\n\nl = lcm_g(A)\nif is_hcm(l // 2, A):\n    ans = (2 * M + l) // (2 * l)\nelse:\n    ans = 0\n\nprint(ans)", "import math\nimport fractions\nfrom functools import reduce\n \nn, m = map(int, input().split())\na = list(map(int, input().split()))\na=[t//2 for t in a] # \u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u5168\u30662\u3067\u5272\u308b\n \ndef lcm_base(x, y):\n    return (x * y) // fractions.gcd(x, y)\n \ndef lcm_list(numbers): # \u6700\u5c0f\u516c\u500d\u6570\u3092\u6c42\u3081\u308b\n    return reduce(lcm_base, numbers, 1)\n \ndef num_dev2(x): # 2\u3067\u5272\u308a\u5207\u308c\u308b\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n    return format(x, 'b')[::-1].find('1')\n \nlcm = lcm_list(a)\nq = m // lcm # m\u306f\u6700\u5c0f\u516c\u500d\u6570\u3067\u4f55\u56de\u5272\u308c\u308b\u304b\n \ncount = 0\ndev2 = num_dev2(a[0])\nfor i in range(1, n):\n    if dev2 != num_dev2(a[i]): # \u30ea\u30b9\u30c8\u306e\u5168\u3066\u306e\u8981\u7d20\u306e\u30012\u3067\u5272\u308c\u308b\u56de\u6570\u306f\u7b49\u3057\u3044\u304b\uff1f\n        count += 1\n        break\nif count != 0:\n    print(0)\nelse:\n    print(math.ceil(q/2))", "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2, gcd\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom heapq import heappush, heappop\nfrom functools import reduce, lru_cache\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef TUPLE(): return tuple(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = 10**6#float('inf')\n#mod = 10 ** 9 + 7 \nmod = 998244353\n#from decimal import *\n#import numpy as np\n#decimal.getcontext().prec = 10\n\nN, M = MAP()\na = LIST()\n\nA = sorted([x//2 for x in a], reverse=True)\n\nb = A[0]\ncnt = 0\nwhile b%2 == 0:\n\tb //= 2\n\tcnt += 1\n\nfor x in A:\n\tif x%pow(2, cnt) or (x//pow(2, cnt))%2 == 0:\n\t\tprint(0)\n\t\treturn\n\nlcm = A[-1]\nfor x in A:\n\tlcm = lcm*x//gcd(lcm, x)\n\nr = lcm//A[0]\nn = M//A[0]\n\n#2p+1\u304c1<=2p+1<=n \u306e\u7bc4\u56f2\u3067 r\u306e\u500d\u6570\u3068\u306a\u308bp\u306e\u500b\u6570\nif r%2 == 0:\n\tprint(0)\nelse:\n\tprint(n//r - n//(2*r))", "from math import gcd, ceil\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\na = [i // 2 for i in a]\nl = 1\nfor i in a:\n    l *= i // gcd(l, i)\nfor i in a:\n    if l // i % 2 == 0:\n        print((0))\n        return\nprint((ceil((m // l) / 2)))\n", "from functools import reduce\nimport math\ndef lcm_base(x, y):\n  return (x * y) // math.gcd(x, y)\n\ndef lcm(*numbers):\n  return reduce(lcm_base, numbers, 1)\n\ndef lcm_list(numbers):\n  return reduce(lcm_base, numbers, 1)\n\nn,m = map(int, input().split())\na = list(map(int, input().split()))\na = [i//2 for i in list(set(a))]\nnothing = False\ncnt_common = -1\nfor i in a:\n  cnt = 0\n  while i % 2 == 0:\n    i = i//2\n    cnt += 1\n  if cnt_common == -1:\n    cnt_common = cnt\n    continue\n  if cnt_common != cnt:\n    nothing = True\n    break\n\nb=lcm_list(a)\nif nothing:\n  print(0)\nelse:\n  ans = (m-b)//(2*b) + 1\n  print(max(ans,0))", "from fractions import gcd\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\nn,m = map(int,input().split())\na = list(map(int,input().split()))\nans = 1\nfor i in a:\n    ans = lcm(ans,i)\nfor i in a:\n    if (ans//i) % 2 == 0:\n        print(0)\n        return\nprint(((m//(ans//2))+1)//2)", "import math\nN, M = map(int, input().split())\nB = tuple(int(a) // 2 for a in input().split())\n\nx = B[0]\nfor i in range(1, N):\n    x = (x * B[i]) // math.gcd(x, B[i])\n\nfor b in B:\n    if (x // b) % 2 == 0:\n        print(0)\n        break\nelse:\n    ans = (M // x) - (M // (2 * x))\n    print(ans)", "import math\nfrom functools import reduce\n\ndef lcm_base(x, y):\n    return (x * y) // math.gcd(x, y)\n\ndef lcm(*numbers):\n    return reduce(lcm_base, numbers, 1)\n\ndef div2_n(x):\n    n = 0\n    while x % 2 == 0:\n      if x % 2 == 0:\n          n += 1\n          x >>= 1\n    return n\n  \nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\n\na2 = [i//2 for i in a]\nn0 = div2_n(a2[0])\nfor i in range(1,n):\n    if div2_n(a2[i]) != n0:\n        print((0))\n        return\n\na2_l = lcm(*a2)\nprint((m//a2_l - m//(a2_l*2)))\n", "N, M = map(int, input().split())\nA = list(map(int, input().split()))\n\ndef gcd(a,b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\nG = A[0]/2\nfor a in A[1:]:\n    G *= (a/2)/gcd(G,a//2)\nfor a in A:\n    if G % a == 0:\n        print(0)\n        return\nprint(int(M//G - M//G//2))", "n , m = list(map(int, input().split()))\na = list(map(int,input().split()))\n\ndef gcd(num1,num2):\n    r=1\n    while r>0:\n        r=num1%num2\n        num1=num2\n        num2=r\n    return num1\n\ndef lcm(num1,num2):\n    gcd1=gcd(num1,num2)\n    return num1*num2//gcd1\n\nlcm1=a[0]//2\nlcm2=a[0]\n\nfor i in range(1,n):\n    t=a[i]\n    lcm1=lcm(lcm1,t//2)\n    lcm2=lcm(lcm2,t)\n    ta=max(t//2,lcm1)\n    tb=min(t//2,lcm1)\n    if ta!=tb and ta//tb%2==0:\n        lcm1=0\n        lcm2=0\n        break\n\nif lcm1!=0:\n    ans1=m//lcm1\n    ans2=m//lcm2\n    ans=ans1-ans2\nelse:\n    ans=0\n\nprint(ans)\n", "import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2, gcd\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom heapq import heappush, heappop\nfrom functools import reduce, lru_cache\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef TUPLE(): return tuple(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = 10**6#float('inf')\n#mod = 10 ** 9 + 7 \nmod = 998244353\n#from decimal import *\n#import numpy as np\n#decimal.getcontext().prec = 10\n\nN, M = MAP()\na = LIST()\n\nA = sorted([x//2 for x in a], reverse=True)\n\nlcm = A[-1]\nfor x in A:\n\tlcm = lcm*x//gcd(lcm, x)\n\nr = lcm//A[0]\nn = M//A[0]\n\n\nfor x in A:\n\tif lcm//x%2 == 0:\n\t\tprint(0)\n\t\treturn\n#2p+1\u304c1<=2p+1<=n \u306e\u7bc4\u56f2\u3067 r\u306e\u500d\u6570\u3068\u306a\u308bp\u306e\u500b\u6570\nif r%2 == 0:\n\tprint(0)\nelse:\n\tprint(n//r - n//(2*r))", "import math\nfrom functools import reduce\ndef lcm_base(x, y):\n    return (x * y) // math.gcd(x, y)\n\ndef lcm(*numbers):\n    return reduce(lcm_base, numbers, 1)\n\nN,M = map(int,input().split())\na = list(map(lambda a: int(a)//2, input().split()))\ng = lcm(*a)\nif any([g // item % 2 == 0 for item in a]):\n    print(0)\nelse:\n    ans = M//g\n    ans = max(math.ceil(ans/2),0)   \n    print(ans)", "from math import gcd\nN, M = list(map(int, input().split()))\nA = [a//2 for a in map(int, input().split())]\n\nlcm = 1\nfor a in A:\n    lcm = lcm*a//gcd(lcm, a)\n    if lcm > M:\n        print((0))\n        return\n\nfor a in A:\n    div = lcm//a\n    if div % 2 == 0:\n        print((0))\n        return\n\nans = (M//lcm+1)//2\nprint(ans)\n", "import math\ndef LCM(a, b):\n    g = math.gcd(a, b)\n    return a * b // g\n\nN, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nA = list(set(A))\nN = len(A)\na0 = A[0]\ndiv = 1\nwhile a0 % 2 == 0:\n    div *= 2\n    a0 //= 2\n\nfor i in range(1, N):\n    a = A[i] % div\n    b = A[i] // div\n    if (b % 2 == 0) or (a != 0):\n        print((0))\n        return\n\nfor i in range(N):\n    A[i] //= 2\n\nif N > 1:\n    lcm = LCM(A[0], A[1])\n    for i in range(2, N):\n        lcm = LCM(lcm, A[i])\n\nif N == 1:\n    lcm = A[0]\n\nans = M // lcm\nif ans % 2 == 1:\n    print((ans // 2 + 1))\nelse:\n    print((ans // 2))\n", "import math\ndef lcm(x,y):\n    return(x*y)//math.gcd(x,y)\nn,m=map(int,input().split())\nl=list(map(int,input().split()))\na=l[0]//2\nfor i in range(n-1):\n    a=lcm(a,l[i+1]//2)\n \nok = True\nfor i in range(n):\n  if (a//(l[i]//2))%2!=1:\n    ok=False\n    break\nans = 0\nif ok:\n    ans = ((m//a)+1)//2\nprint(ans)", "import sys\nN,M = list(map(int,input().split()))\nA = list(map(int,input().split()))\na = []\nfor i in A:\n  i = i//2\n  a.append(i)\ndef gcd(p,q):\n  p,q = max(p,q),min(p,q)\n  while q!=0:\n    p,q = q,p%q\n  return p\ndef lcm(p,q):\n  return(p*q//gcd(p,q))\ndef aaa(i):\n  count = 0\n  while i%2==0:\n    i = i//2\n    count+=1\n  return count\nmax_num = a[0]\naa = aaa(a[0])\nfor i in a:\n  max_num = lcm(i,max_num)\n  if aa != aaa(i):\n    print((0))\n    return\nprint((((M//max_num)+1)//2))\n", "import math\ndef lcm(a,b):\n  return (a*b)//math.gcd(a,b)\ndef co(num):\n  return format(num, 'b')[::-1].find('1')\nN,M=map(int,input().split())\nL=list(map(int,input().split()))\nL2=[co(i) for i in L]\nif len(set(L2))!=1:\n  print(0)\n  return\nL=[i//2 for i in L]\ns=L[0]\nfor i in range(N):\n  s=lcm(s,L[i])\nc=M//s\nprint((c+1)//2)", "import math\nfrom functools import reduce\n\nN,M=list(map(int,input().split()))\nA=[int(x)//2 for x in input().split()]\n\ndef lcm_base(x, y):\n    return (x * y) // math.gcd(x, y)\n\ndef lcm(*numbers):\n    return reduce(lcm_base, numbers, 1)\n\nLCM=lcm(*A)\nfor a in A:\n  if LCM//a%2==0:\n    print((0))\n    break\nelse:\n  print(((M//LCM+1)//2))\n", "import numpy as np\nfrom math import ceil\n\nn,m = map(int,input().split())\na = list(map(int,input().split()))\na = [x//2 for x in a]\nlcm = np.lcm.reduce(a)\nans = 0\n\nfor i in a:\n    if lcm // i % 2 == 0:\n        break\nelse:\n    ans = ceil((m//lcm)/2)\n\nprint(ans)", "import math\n\ndef n_2(n):\n  c=0\n  while n%2==0:\n    c+=1\n    n>>=1\n  return (n,c)\n\nN,M=map(int,input().split())\nA=list(map(int,input().split()))\nA[0],a=n_2(A[0])\np=False\nfor i in range(1,N):\n  A[i],b=n_2(A[i])\n  if a!=b:\n    p=True\n    break\nif p:\n  print(0)\n  return\nn=1\nfor _ in range(a-1):\n  n*=2\nl=n\nfor a in A:\n  l=l*a//math.gcd(l,a)\nans=M//l-M//(2*l)\nprint(ans)", "def abc150_d():\n    n, m = (int(x) for x in input().split())\n    A = [int(x) // 2 for x in input().split()]\n\n    from math import gcd\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    x = 1\n    for a in A:\n        x = lcm(x, a)\n\n    valid = True\n    for a in A:\n        if (x // a) % 2 == 0:\n            valid = False\n            break\n\n    if valid: ans = (m // x + 1) // 2\n    else: ans = 0\n    print(ans)\n\ndef __starting_point():\n    abc150_d()\n__starting_point()", "from math import gcd\nn,m=map(int,input().split())\na=list(map(int,input().split()))\na=list(set(a))\na=list(map(lambda x: x//2, a))\n\ndef lcm(q):\n  x = q[0]\n  for i in range(1, len(q)):\n    x = (x * q[i]) // gcd(x, q[i])\n  return x\n\nlcma=lcm(a)\nfor i in range(len(a)):\n  if (lcma//a[i])%2==0:\n    print(0)\n    return\ntemp=m//lcma\nprint(temp//2 if temp%2==0 else temp//2+1)", "from math import gcd, ceil\nn, m = map(int, input().split())\na = list(map(int, input().split()))\na = [i // 2 for i in a]\nl = 1\nfor i in a:\n    l *= i // gcd(l, i)\nfor i in a:\n    if l // i % 2 == 0:\n        print(0)\n        return\nprint(ceil((m // l) / 2))", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\ndef lcm(a, b):\n    \"\"\"\u6700\u5c0f\u516c\u500d\u6570\"\"\"\n    from math import gcd\n    return (a * b) // gcd(a, b)\n\n\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(N, M, As):\n    if sum([a % 2 for a in As]) > 0:\n        print((0))\n        return\n\n    As = [a // 2 for a in As]\n    all_lcm = 1\n    for a in As:\n        all_lcm = lcm(all_lcm, a)\n        if all_lcm > M:\n            print((0))\n            return\n\n    for a in As:\n        if (all_lcm // a) % 2 == 0:\n            print((0))\n            return\n    from math import ceil\n    print((ceil(M // all_lcm / 2)))\n\n\ndef __starting_point():\n    N, M = list(map(int, input().split()))\n    As = [int(i) for i in input().split()]\n\n    # import random\n    # N, M = 10 ** 5, 10 ** 9\n    # As = [random.randint(5, 5) * 2 for _ in range(N)]\n    solve(N, M, As)\n\n__starting_point()", "import sys,math\nr=sys.stdin.readline\ndef gcd(a,b):\n    a,b=max(a,b),min(a,b)\n    while b>0:\n        a,b=b,a%b\n    return a\ndef lcm(arr):\n    while len(arr)!=1:\n        a=arr.pop()\n        b=arr.pop()\n        c=gcd(a,b)\n        arr.insert(0,int(a*b/c))\n    return arr[0]\ndef cnt2(num):\n    cnt=0\n    while num%2==0:\n        num/=2\n        cnt+=1\n    return cnt\nN,M=list(map(int,r().split()))\nseq=list(map(int,r().split()))\nseq=list(set(seq))\ntmp=cnt2(seq[0])\nfor num in seq:\n    if tmp!=cnt2(num):\n        print((0))\n        return\nT=lcm(list([x//2 for x in seq]))\nif T>M:\n    print((0))\n    return\nprint((math.floor(M//T/2+0.5)))\n\n\n\n", "N, M = list(map(int, input().split()))\na = list(map(int, input().split()))\nfor k in range(N):\n  a[k] //= 2\n\nfoo = 1\nwhile a[0]%2 == 0:\n  foo *= 2\n  a[0] //= 2\nfor k in range(1, N):\n  if a[k] % foo == 0 and a[k]%(2*foo) !=0:\n    a[k] //= foo\n    continue\n  else:\n    print((0))\n    return\nans = 0\n\nfor odd in [3]:\n  flag = False\n  for k in range(N):\n    if a[k]%odd == 0:\n      a[k] //= odd\n      flag = True\n  if flag:\n    foo *= odd\n \n \nimport math\n\nlcm = a.pop()\nfor k in range(1, N):\n  b = a.pop()\n  lcm = lcm * b // math.gcd(lcm, b)\n  if lcm* foo > M:\n    print((0))\n    return\nlcm *= foo\nans = int((M / lcm -1)//2 + 1)\nprint(ans)\n\n", "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nl = [0] * n\nfor i in range(n):\n    tmp = a[i]\n    while tmp % 2 == 0:\n        tmp //= 2\n        l[i] += 1\n    if i > 0 and l[i] != l[i - 1]:\n        print((0))\n        return\nres = 1\nfor i in range(n):\n    res = lcm(res, a[i] // 2)\nprint((m // res - m // (res * 2)))\n", "def main():\n    N, M = map(int, input().split())\n    A = tuple(map(int,input().split()))\n    ans = count(A, N, M)\n    print(ans)\ndef count(A, N, M):\n    t = hMt(A[0])\n    B = [A[0]//(2**t)]\n    for val in A[1:]:\n        if hMt(val) != t:\n            ans = 0\n            return ans\n        B.append(val//(2**t))\n    T = nlcm(B)\n    MdivT = (M//(2**(t-1)))//T\n    ans = countodd(MdivT)\n    return ans\ndef countodd(num):\n    if num%2 == 0:\n        ans = num//2\n    else:\n        ans = num//2 + num%2\n    return ans\ndef nlcm(A):\n    LCM = A[0]\n    for val in A[1:]:\n        #print(\"%d %d gcm:%d LCM:%d\"%(LCM,val,gcm(LCM,val),lcm(LCM,val)))\n        LCM = lcm(LCM,val)\n    return LCM\n    \ndef gcm(a, b):\n    abtuple = (a,b)\n    abmin = min([0,1], key=lambda x:abtuple[x])\n    remainder = abtuple[1-abmin]%abtuple[abmin]\n    if remainder == 0:\n        return abtuple[abmin]\n    return gcm(abtuple[abmin], remainder)\ndef lcm(a,b):\n    prod = a*b\n    ans = prod//gcm(a,b)\n    return ans\ndef hMt(num):\n    ans = 0\n    tmp = num\n    while tmp%2 == 0:\n        tmp = tmp//2\n        ans += 1\n    return ans\nmain()", "N, M = list(map(int, input().split()))\na = list(map(int, input().split()))\nfor k in range(N):\n  a[k] //= 2\n\nfoo = 1\nwhile a[0]%2 == 0:\n  foo *= 2\n  a[0] //= 2\nfor k in range(1, N):\n  if a[k] % foo == 0 and a[k]%(2*foo) !=0:\n    a[k] //= foo\n    continue\n  else:\n    print((0))\n    return\nans = 0\n\nfor odd in [3, 5, 7]:\n  flag = False\n  for k in range(N):\n    if a[k]%odd == 0:\n      a[k] //= odd\n      flag = True\n  if flag:\n    foo *= odd\n \n \nimport math\n\nlcm = a.pop()\nfor k in range(1, N):\n  b = a.pop()\n  lcm = lcm * b // math.gcd(lcm, b)\n  if lcm* foo > M:\n    print((0))\n    return\nlcm *= foo\nans = int((M / lcm -1)//2 + 1)\nprint(ans)\n\n", "from math import gcd\ndef lcm(a,b):\n    return a//gcd(a,b)*b\ndef lcm(ab):\n    l=len(ab)\n    ret=ab[0]\n    for i in range(1,l):\n        ret=ret//gcd(ab[i],ret)*ab[i]\n    return ret\ndef count2(a):\n    ret=0\n    while a%2==0:\n        a//=2\n        ret+=1\n    return 2**ret\nn,m=map(int,input().split())\nA=list(map(int,input().split()))\nif any(i%2 for i in A):\n    print(0);return\nA=[i//2 for i in A]\n#\u5168\u4f53\u306e\u6700\u5c0f\u516c\u500d\u6570\np=lcm(A)\nc=count2(p)\n#2\u3067\u5272\u308a\u5207\u308c\u308b\u56de\u6570\u304c\u540c\u3058\u3067\u306a\u3044\u3082\u306e\u304c\u3042\u308b\u5834\u5408\n#\u9055\u3046\u3058\u3083\u3093\nif any(i%c for i in A):\n    print(0);return\nx=m//p\n#print(p//c)\nif x%2==0:\n    print(x//2)\nelse:\n    print(x//2+1)", "def gcd(a, b):\n    if b == 0:\n        return a\n    r = a % b   \n    return gcd(b, r)\n\ndef lcm(a, b):\n    x = gcd(a, b)\n    return a * b // x\n\ndef gcdN(a):\n    x = a[0]\n    for i in range(1, len(a)):\n        x = gcd(x, a[i])\n    return x\n\ndef lcmN(a):\n    x = a[0]\n    for i in range(1, len(a)):\n        x = lcm(x, a[i])\n    return x\n\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))  #;print(a)\n\ng = gcdN(a)\nfor i in a:\n    if (i//g) % 2 == 0:\n        print((0))\n        break\nelse:\n    l = lcmN(a) \n    k = 2*m // l\n    print(((k+1)//2))\n", "from math import gcd, ceil\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\na = [i // 2 for i in a]\nl = 1\nfor i in a:\n    l *= i // gcd(l, i)\nfor i in a:\n    if l // i % 2 == 0:\n        print((0))\n        return\n#print(ceil((m // l) / 2))\nprint(((m//l+1)//2))\n", "n,m=list(map(int,input().split()))\na=list(map(int,input().split()))\n\nfor i in range(n):\n  a[i]=a[i]//2\n  \ndef gcd(a,b):\n  if b==0:\n    return a\n  else:\n    return gcd(b,a%b)\n  \ndef lcm(a,b):\n  return a*b//gcd(a,b)\n\ndef check(x):\n  cnt=0\n  while(1):\n    if x%2==0:\n      x=x//2\n      cnt+=1\n    else:\n      break\n  return cnt\n\ncnt=a[0]\nfor i in range(n):\n  cnt=lcm(cnt,a[i])\n\n\nl=check(a[0])\nfor i in range(1,n):\n  x=check(a[i])\n  if x!=l:\n    print((0))\n    return\n\n\ns=m//cnt\nif s%2==0:\n  print((s//2))\nelse:\n  print((s//2+1))\n\n  \n", "from math import gcd\nN, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nlcm = 1\nfor a in A:\n    lcm = lcm * a // gcd(lcm, a)\n    if lcm > M*2:\n        print((0))\n        return\nfor a in A:\n    if lcm // a % 2 == 0:\n        print((0))\n        return\nans = M // (lcm//2) - M // lcm\nprint(ans)\n", "from math import gcd\ndef lcm(x,y):\n    return x*y//gcd(x,y)\ndef cnt(x):\n    i = 0\n    while x%2 == 0:\n        x = x//2\n        i += 1\n    return i \nn,m = map(int,input().split())\na = list(map(int,input().split()))\nmemo = cnt(a[0])\nfor i in range(n):\n    if cnt(a[i]) != memo:\n        print(0)\n        return\n    a[i] = a[i]//2\n\nt = 1\nfor i in range(n):\n    t = lcm(t,a[i])\nprint(m//t-m//(2*t))", "import math\nimport numpy as np\nN,M=map(int,input().split())\nA=list(map(int,input().split()))\nc=1\ntest=A[0]\nl=0\n\nwhile test%2 == 0:\n  test=test//2\n  c*=2\n  \nfor i in np.arange(N-1):\n  if A[i+1]%c!=0:\n    print(0)\n    l=1\n    break\n  elif A[i+1]%(c*2)==0:\n    print(0)\n    l=1\n    break\n  else:\n    k=A[i+1]//c\n    test=test*k//math.gcd(test,k)\nif l==0:\n  k=test*c//2\n  print(M//k//2+M//k%2)", "# \u53c2\u8003 : https://at274.hatenablog.com/entry/2020/01/15/060000\nfrom functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):  # \u30ea\u30b9\u30c8\u3092\u6295\u3052\u308b\u3068\u5168\u8981\u7d20\u306elcm\u304c\u8fd4\u3063\u3066\u304f\u308b\n    return reduce(lcm, numbers, 1)\n\n\nN, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\n# \u6700\u521d\u3001A\u306e\u8981\u7d20\u306f\u5168\u3066\u5076\u6570\u30022\u3067\u5272\u3063\u305f\u3082\u306e\u306b\u7f6e\u304d\u63db\u3048\nA = [a // 2 for a in A]\n\n# \u5168\u3066\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\uff12\u3067\u5272\u308c\u308b\u56de\u6570\u304c\u540c\u3058\u3067\u306a\u3044\u3068\u984c\u610f\u306f\u6e80\u305f\u305b\u306a\u3044\ncount_div_2 = None\nfor a in A:\n    cnt = 0\n    while a % 2 == 0:\n        a //= 2\n        cnt += 1\n    # 1\u500b\u76ee\u306f\u7121\u6761\u4ef6\u3067\u4fdd\u5b58\n    if count_div_2 is None:\n        count_div_2 = cnt\n    # 2\u500b\u76ee\u304b\u3089\u30c1\u30a7\u30c3\u30af\n    elif cnt != count_div_2:\n        print((0))\n        return\n\n# my_lcm = A\u306e\u5168\u8981\u7d20\u306e\u6700\u5c0f\u516c\u500d\u6570\u3002\u3000\u3053\u306e\u5947\u6570\u500d\u304c\u984c\u610f\u3092\u6e80\u305f\u3059\u3002\n# my_lcm\u304cM\u3092\u8d85\u3048\u3066\u3044\u305f\u30891\u3064\u3082\u4f5c\u308c\u306a\u3044\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print((0))\n    return\n\ntmp = M // my_lcm\n# my_lcm\u306e1,2,...M\u500d\u307e\u3067\u4f7f\u3048\u308b\u304c\u3001\u5076\u6570\u306f\u4f7f\u3048\u306a\u3044\n# tmp=1or2\u306a\u30891\u500b, 3or4\u306a\u30892\u500b, 5or6\u306a\u30893\u500b,...\nans = (tmp + 1) // 2\nprint(ans)\n", "import math\nimport collections\nimport sys\n\ninput = sys.stdin.readline\ndef I(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef LI(): return list(map(int, input().split()))\ndef LI2(): return [int(input()) for i in range(n)]\ndef MXI(): return [[LI()]for i in range(n)]\n\nn,m=MI()\nA=LI()\ndef num2(x):\n    ans=0\n    while x%2==0:\n        x=x//2\n        ans+=1\n    return ans\nmod=2**(num2(A[0]))\nfor i in range(1,n):\n    if A[i]%mod!=0:\n        print((0))\n        return\n    if A[i]%mod==0 and (A[i]//mod)%2==0:\n        print((0))\n        return\n#print(A)\nfor i in range(n):\n    A[i]//=2\n#print(A)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\n\nL=A[0]   \nfor i in range(1,n):\n    L=lcm(L,A[i])\n#print(L)\nif L>m:\n    an=0\nelse:\n    an=int(((m/L)-1)/2)+1\nprint(an)\n", "import math\n\ndef lcm(a, b):\n  return a*b//math.gcd(a, b)\n\ndef f(num):\n  cnt = 0\n  while num % 2 == 0:\n    num = num // 2\n    cnt += 1\n  return cnt\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\nfor i in range(n):\n  a[i] = a[i] // 2\n\nt = f(a[0])\nfor i in range(n):\n  if f(a[i]) != t:\n    print(0)\n    return\n  a[i] = a[i] >> t\nm = m >> t\nl = 1\nfor i in range(n):\n  l = lcm(l, a[i])\n  if l > m:\n    print(0)\n    return\n\nm = m // l\nprint((m+1)//2)", "import math\nfrom functools import reduce\n\n\ndef lcm_base(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm(*numbers):\n    return reduce(lcm_base, numbers, 1)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\n\n\ndef my_round(val, digit=0):\n    p = 10 ** digit\n    return (val * p * 2 + 1) // 2 / p\n\n\nn, m = list(map(int, input().split()))\na_pr = [i // 2 for i in list(map(int, input().split()))]\nlcm_ = lcm_list(a_pr)\nres, div2 = 0, None\nfor ai in a_pr:\n    cnt = 0\n    while ai % 2 == 0:\n        ai //= 2\n        cnt += 1\n    if div2 is None:\n        div2 = cnt\n    elif cnt != div2:\n        print((0))\n        return\n\nprint((int(my_round(m // lcm_ / 2))))\n", "from math import gcd, ceil\nfrom functools import reduce\nimport sys\n\ndef lcm_base(x, y):\n    return (x * y) // gcd(x, y)\n\ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\n\nN, M = map(int, input().split())\na = [int(i)//2 for i in input().split()]\n\ns = set()\nfor x in a:\n    cur = 0\n    y = x\n    while y%2 == 0:\n        cur += 1\n        y //= 2\n    s.add(cur)\n    if len(s) >= 2:\n        print(0)\n        return\nlcm = lcm_list(a)\nprint((M//lcm+1)//2)", "from math import gcd, ceil\n\n\ndef lcm(a, b):\n    return (a*b)//gcd(a, b)\n\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nfor i in range(n):\n    a[i] = a[i]//2\n\nlcm_v = a[0]\nfor i in range(1, n):\n    lcm_v = lcm(lcm_v, a[i])\n\nok = True\nfor aa in a:\n    if (lcm_v//aa) % 2 != 1:\n        ok = False\n        break\nans = 0\nif ok:\n    ans = ((m//lcm_v)+1)//2\nprint(ans)\n", "from collections import deque,defaultdict\ndef gcd(a,b):\n    return b if not a%b else gcd(b,a%b)\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\nn,m=list(map(int, input().split()))\nA=[int(i) for i in input().split()]\ntmp = A[0]\nfor i in range(1,n):\n    tmp = lcm(tmp,A[i])\nans = m//tmp\nlis = set()\nfor i in A:\n    r = i\n    k=0\n    while(r%2==0):\n        k+=1\n        r//=2\n    lis.add(k)\nif(m//(tmp)*tmp+tmp//2<=m):\n    ans += 1\nif(len(lis)!=1):\n    ans=0\n\nprint(ans)\n\n", "import math\nfrom decimal import Decimal, ROUND_HALF_UP\ndef lcm(a):\n    x = a[0]\n    for i in range(1, len(a)):\n        x = (x * a[i]) // math.gcd(x, a[i])\n    return x\ndef gcd(a):\n  temp = math.gcd(a[0], a[1])\n  for i in a:\n    temp = math.gcd(temp,  i)\n  return temp\nn,m = map(int, input().split(\" \"))\na = list(map(int, input().split(\" \")))\nzero = False\ncount = 0\n#a = list(map(lambda x: x // 2, na))\nmini = lcm(a)\nif len(a) != 1:\n  maxi = gcd(a)\nelse:\n  maxi = a[0]\nmaxi2 = maxi\nnibai = 1\nwhile(True):\n  if maxi2 % 2 == 0:\n    nibai *= 2\n    maxi2 //= 2\n  else:\n    break\nfor i in a:\n  if i % (2 * nibai) == 0:\n    zero = True\n    break\n#print(nibai, maxi, mini)\nif not zero:\n  t = Decimal(str((m * 2 // mini) / 2))\n  #print(t)\n  print(t.quantize(Decimal('0'), rounding=ROUND_HALF_UP))\nelse:\n  print(0)", "from math import gcd\nimport sys\n\ndef lcm(x,y):\n    return x*y//gcd(x,y)\n\ndef count(x):\n    res=0\n    while True:\n        if x%2==0:\n            res+=1\n            x//=2\n        else:\n            break\n    return res\n\nn,m=list(map(int,input().split()))\nA=list(map(int,input().split()))\nA=list(set(A))\nn=len(A)\n\nA.sort(reverse=True)\n\ntemp=A[0]\nfor i in range(1,n):\n    if count(A[i])!=count(temp):\n        print((0))\n        return\n    else:\n        temp=lcm(temp,A[i])\n\nans=m//(temp//2)-m//temp\nprint(ans)\n", "import math\nimport fractions\nfrom functools import reduce\n\nn, m = map(int,input().split())\na = list(map(int,input().split()))\na = [t // 2 for t in a]#\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3059\u3079\u3066\u30922\u3067\u5272\u308b\n\ndef lcm_base(x, y):\n    return (x * y)//fractions.gcd(x,y)\n\ndef lcm_list(numbers): #\u6700\u5c0f\u516c\u500d\u6570\u3092\u6c42\u3081\u308b\n    return reduce(lcm_base, numbers, 1)\n\ndef num_dev2(x):\n    return bin(x)[::-1].find(\"1\") #\uff12\u3067\u5272\u308a\u5207\u308c\u308b\u56de\u6570\u3092\u78ba\u8a8d\n\nlcm = lcm_list(a)\nq = m//lcm #m\u306f\u6700\u5c0f\u516c\u500d\u6570\u3067\u4f55\u56de\u5272\u308c\u308b\u304b\n\ncount = 0\ndev2 = num_dev2(a[0])\nfor i in range(1,n):\n    if dev2 != num_dev2(a[i]):#\u30ea\u30b9\u30c8\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u306e\uff12\u3067\u5272\u308c\u308b\u56de\u6570\u306f\u7b49\u3057\u3044\u304b\n        count += 1\n        break\nif count != 0:\n    print(0)\nelse:\n    print(math.ceil(q/2))", "from math import gcd\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b \n\nN, M = map(int, input().split())\nAs = list(map(int, input().split()))\n\nrightmostbit = As[0] & -As[0]\nfor A in As[1:]:\n    if rightmostbit != A & -A:\n        print(0)\n        return \n\n\nlcm_of_half_As = 1\nfor A in As:\n    lcm_of_half_As = lcm(lcm_of_half_As, A //  2)\n    if lcm_of_half_As > M:\n        break\n\nprint((M // lcm_of_half_As + 1) // 2)", "import sys\nimport numpy as np\ndef input(): return sys.stdin.readline().rstrip()\n\ndef kosuu(x):\n    re = [0,0]\n    while x % 2 == 0:\n        x = x//2\n        re[1]+=1\n    re[0]=x\n    return re\n\n        \n \ndef main():\n    n,m=map(int, input().split())\n    a=list(map(int, input().split()))\n    li = [kosuu(a[0])[0]]\n    hantei = kosuu(a[0])[1]\n    for i in a[1:]:\n        hantei2 = kosuu(i)\n        if hantei2[1] != hantei:\n            print(0)\n            break\n        else:\n            li.append(hantei2[0])\n    else:\n        lc = np.lcm.reduce(li)\n        print(((m//(lc*2**(hantei-1)))+1)//2)\n            \n\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\nimport sys\nfrom functools import reduce\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nfor i in range(N):\n  A[i] = A[i] // 2\n  \ndef lcm_base(x, y):\n    return (x * y) // math.gcd(x, y)\n  \ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\n\nC = lcm_list(A)\nB = [0 for _ in range(N)]\n\nfor i in range(N):\n  B[i] = C // A[i]\n  if B[i] % 2 == 0:\n    print(0)\n    return\n\nprint( (M // C + 1) // 2)", "import math\nfrom functools import reduce\n\nn,m = map(int, input().split())\nA = list(map(int, input().split()))\n\ndef lcm_base(x,y):\n  return x*y//math.gcd(x,y)\n\ndef lcm(target_list):\n  return reduce(lcm_base, target_list)\n\nA_gcd = reduce(math.gcd, A)\nflg = True\n\nfor a in A:\n  if a//A_gcd%2==0:\n    flg = False\n    break\n    \nif flg:\n  min_x = int(lcm(A))//2\n  ans = m//min_x - m//(2*min_x)\n  print(ans)\nelse:\n  print(0)", "from math import gcd\nfrom functools import reduce\nimport sys\ninput = sys.stdin.readline\n\n\ndef lcm(a, b):\n    return a*b // gcd(a, b)\n\n\ndef count_factor_2(num):\n    count = 0\n    while num % 2 == 0:\n        num //= 2\n        count += 1\n    return count\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    A = list([int(x)//2 for x in input().split()])\n\n    check = len(set(map(count_factor_2, A)))\n    if check != 1:\n        print((0))\n        return\n\n    lcm_a = reduce(lcm, A)\n    step = lcm_a * 2\n    ans = (m + lcm_a) // step\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()"]