["import sys\n\ninput = sys.stdin.readline\n\n############ ---- Input Functions ---- ############\ndef inp():\n    return (int(input()))\ndef instr():\n    return (str(input()))\ndef inlt():\n    return (list(map(int, input().split())))\ndef insr():\n    s = input()\n    return(list(map(int, list(s[:len(s) - 1]))))\n# def insr():\n#     s = input()\n#     return list(s[:len(s) - 1])\ndef invr():\n    return (list(map(int, input().split())))\n\n\nfrom collections import Counter\n\ndef check(cities, stations, k, allow):\n    # cities = cities.copy()\n    n = len(cities)\n    k = min(cities[0], k)\n    last_st = stations[-1] - k\n    c_i = cities[0] - k\n    for i in range(n - 1):\n        d = stations[i] - (c_i + cities[i + 1])\n        if d > 0:\n            # cities[i + 1] = 0\n            c_i = 0\n            allow -= d\n            if allow < 0:\n                return 1\n        elif stations[i] < c_i:\n            return -1\n        else:\n            c_i = cities[i + 1] - (stations[i] - c_i)\n    if c_i > last_st:\n        return -1\n    return 0\n\n\ndef bin_search(cities, stations, allow, l, r):\n    while l <= r:\n        mid = l + (r - l) // 2\n        res = check(cities, stations, mid, allow)\n        if res == 0:\n            return mid\n        elif res == -1:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\n\ndef main():\n    t = inp()\n    for _ in range(t):\n        n = inp()\n        cities = inlt()\n        stations = inlt()\n        allow = sum(stations) - sum(cities)\n        if allow < 0:\n            print('NO')\n        else:\n            res = bin_search(cities, stations, allow, 0, stations[-1] + 1)\n            if res == -1:\n                print('NO')\n            else:\n                print('YES')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    for case in range(int(input())):\n        n = int(input().strip())\n        as_ = [int(t) for t in input().strip().split()]\n        bs = [int(t) for t in input().strip().split()]\n        \n        print(solve(as_=as_, bs=bs))\n\n\ndef solve(as_, bs):\n    if get_update_dir(as_, bs, 0) == 0:\n        return 'YES'\n\n    lt = 0\n    gt = as_[0] + 1\n\n    while gt > lt + 1:\n        mid = (lt + gt) // 2\n        \n        update_dir = get_update_dir(as_, bs, mid)\n\n        if update_dir == 0:\n            return 'YES'\n\n        if update_dir > 0:\n            lt = mid\n        else:\n            gt = mid\n\n    return 'NO'\n\n\ndef get_update_dir(as_, bs, x):\n    if x > as_[0] or x > bs[-1]:\n        return -1\n\n    if x < 0:\n        return +1\n\n    left = x\n    for a, b in zip(as_, bs):\n        right = a - min(left, a)\n\n        if right > b:\n            return +1\n        \n        left = b - right\n\n    if right + x > bs[-1]:\n        return -1\n\n    return 0\n\n\nmain()\n", "T = int(input())\nwhile T > 0:\n    n = int(input())\n    households = list(map(int, input().split()))\n    stations = list(map(int, input().split()))\n    l, r = 0, min(households[0],stations[0])\n    ans = False\n    while l <= r:\n        mid = (l+r)//2\n        left = households[0]-mid\n        now = stations[0]-mid\n        short = False\n        for i in range(1,n):\n            now = min(now, households[i])\n            if now+stations[i] < households[i]:\n                r = mid-1\n                short = True\n                break\n            now = now+stations[i]-households[i]\n        if short is True:\n            continue\n        if now >= left:\n            ans = True\n            break\n        l = mid+1\n    if ans:\n        print('YES')\n    else:\n        print('NO')\n\n    T -= 1"]