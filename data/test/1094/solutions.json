["n = int(input())\nd = dict()\nfor i in range(n):\n    d[input()] = i\n\nlst = list(d.items())\n\nlst.sort(key=lambda x:-x[1])\n\nfor i in lst:\n    print(i[0])", "n = int(input())\na = set()\nres = []\nnames_arr = []\nfor i in range(n):\n    name = input()\n    names_arr.append(name)\nfor i in range(1, len(names_arr) + 1):\n    cur_name = names_arr[-i]\n    if cur_name not in a:\n        a.add(cur_name)\n        res.append(cur_name)\nfor i in range(len(res)):\n    print(res[i])", "n = int(input())\nstrings = []\ns = set()\nfor i in range(n):\n    strings.append(input())\n    \nfor f in strings[::-1]:\n    if f not in s:\n        s.add(f)\n        print(f)", "nexts = {}\nprevs = {}\nn = int(input())\ncur = input()\nprevs[cur] = -1\nnexts[cur] = -1\nfor i in range(1,n):\n    x = input()\n    if x in list(nexts.keys()):\n        if cur!=x:\n            nexts[prevs[x]]=nexts[x]\n            prevs[nexts[x]]=prevs[x]\n            prevs[x]=cur\n            nexts[cur]=x\n            nexts[x]=-1\n            cur=x\n    else:\n        nexts[cur]=x\n        prevs[x]=cur\n        cur=x\n        nexts[x]=-1\nwhile prevs[cur]!=-1:\n    print(cur)\n    cur = prevs[cur]\nprint(cur)\n\n\n\n", "n = int(input())\nhas = {}\n\ndef comp(e1):\n    return e1[1]\n\nfor i in range(n):\n    s = input()\n    has[s]=i\nar = []\nfor k,v in has.items():\n    ar.append([k,v])\nar.sort(key=comp, reverse=True)\nfor x in ar:\n    print(x[0])", "A = []\nfor i in range(int(input())):\n    A.append(input().strip())\n\nnames = set()\nfor i in range(len(A) - 1, -1, -1):\n    if not A[i] in names:\n        names.add(A[i])\n        print(A[i])", "message_count = int(input())\nnames = {}\nlast = 1 \nfor i in range(message_count):\n    name = input()\n    names[name] = -i\nsorted_names = sorted(names.keys(), key = lambda name: names[name])\n[print(name) for name in sorted_names]", "n = int(input())\nchat_list = []\nnames = set()\nfor i in range(n):\n    name = input()\n    if name not in names:\n        names.add(name)\n    chat_list.append(name)\nx = len(names)\nfor i in chat_list[::-1]:\n    if i in names:\n        print(i)\n        names.remove(i)\n        x -= 1\n        if x == 0:\n            break\n", "n = int(input())\na = []\nd = {}\nl = 0\nk = n\nwhile l<n:\n    a.append(input())\n    d[a[l]] = False\n    l+=1\n\nk = k-1\nwhile k>=0:\n    if not d[a[k]]:\n        print(a[k])\n        d[a[k]] = True\n    k-=1\n", "def unique(lst):\n    seen = set()\n    result = []\n    for x in lst:\n        if x in seen:\n            continue\n        seen.add(x)\n        result.append(x)\n    return result\n\na=int(input())\nc=[]\nfor i in range(a):\n    c+=[input()]\n\nprint(*unique(reversed(c)),sep='\\n')\n", "n = int(input())\na = [input() for i in range(n)]\nwas = set()\nfor name in a[::-1]:\n    if name not in was:\n        was.add(name)\n        print(name)\n", "order = []\nusers_set = set()\n\ncount = int(input())\nmessages = []\nfor _ in range(count):\n    messages.append(input())\n\nfor user in reversed(messages):\n    if user not in users_set:\n        order.append(user)\n        users_set.add(user)\n\nprint('\\n'.join(order))\n", "n = int(input())\nname = input()\ndname = dict()\ndname[name] = 1\nlname = name\nfor i in range(1,n):\n    name = input()\n    dname[name] = i + dname[lname]\n    lname = name\n\nl = lambda x: x[1]\nsd = sorted(list(dname.items()), key=l, reverse=True)\nfor i in range(len(sd)):\n    print(sd[i][0])\n", "n = int(input())\nk = list()\nm = set()\nfor i in range(n):\n    a = input()\n    k.append(a)\n    m.add(a)\nfor i in range(n-1, -1, -1):\n    if k[i] in m:\n        print(k[i], end = '\\n')\n        m.discard(k[i])", "n=int(input())\nSt=[]\nSet=set()\nfor i in range(n):\n\ts=input()\n\tSt.append(s)\n\tSet.add(s)\ni=n\nwhile i>0:\n\tP=St.pop()\n\tif P in Set:\n\t\tSet.remove(P)\n\t\tprint(P)\n\ti-=1 ", "n=int(input())\narr=[]\nfor i in range(n):\n    arr.append(input())\nq={1}\nfor i in range(n-1, -1, -1):\n    if arr[i] not in q:\n        q|={arr[i]}\n        print(arr[i])\n", "n = int(input())\na = [input() for i in range(n)]\nsa = set(a)\n\nts = set()\nres = []\n\nfor name in reversed(a):\n  if len(sa) == len(ts): break\n  if not name in ts:\n    res.append(name)\n    ts.add(name)\n\nprint(\"\\n\".join(res))\n", "import sys\nimport collections\n\n_ = sys.stdin.readline()  # read count, not needed for us\n\nnames = collections.OrderedDict()\n\nwhile True:\n    name = sys.stdin.readline()\n    name = name.strip()\n\n    if not name:\n        break\n\n    if name not in names:\n        names[name] = None\n\n    names.move_to_end(name)\n\nsys.stdout.write('\\n'.join(reversed(names)))\n", "n = int(input())\nname = {}\nfor i in range(n):\n    s = input()\n    name[s] = i\n\na = list(name)\na.sort(key=lambda x: -name[x])\n\nfor i in range(len(a)):\n    print(a[i])", "def main():\n    n = int(input())\n    our = [input() for i in range(n)]\n    made = set()\n    while our:\n        c = our[-1]\n        if c not in made:\n            made.add(c)\n            print(c)\n        our.pop()\n    \nmain()", "n = int(input())\nd = {}\nfor i in range(n):\n    d[input()] = i\nanswer = []\nk = list(d.keys())\nfor i in range(len(k)):\n    answer += [(d[k[i]], k[i])]\nanswer.sort(reverse = True)\nfor i in range(len(answer)):\n    print(answer[i][1])\n\n\n    \n    \n    \n", "n = int(input())\nA = [0] * n\nfor i in range(n):\n    A[i] = input()\nmass = set()\nper = 0\nfor i in range(n-1, -1,-1):\n    mass.add(A[i])\n    t = len(mass)\n    if t > per:\n        per = t\n        print(A[i])\n", "n = int(input())\narr = []\nfor i in range(n):\n    line = input()\n    arr.append(line)\nres = []\nd = {}\nfor i in arr[::-1]:\n    if i not in d:\n        res.append(i)\n        d[i] = True\nprint('\\n'.join(res))\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Mar 13 19:40:03 2016\n\n@author: Kostya S.\n\"\"\"\n\nn = int(input())\nd = {}\np = 1\nfor _ in range(n):\n    s = input()\n    d[s] = p\n    p += 1\nt = []\nfor k,v in d.items():\n#    print(k,v)\n    t.append((v,k))\nt = sorted(t,reverse = True)\n\nfor e in t:\n    print(e[1])"]