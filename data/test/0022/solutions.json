["import sys, math\ns=input()\npal='AHIMOoTUVvWwXxY'\nn=len(s)\nl=0\nr=n-1\nflag=True\nfir='pq'\nsec='bd'\nwhile l<=r:\n    if s[l]==s[r] and s[l] in pal:\n        l+=1\n        r-=1\n        continue\n    elif s[l]==s[r]:\n        flag=False\n        break\n    elif (s[l] in fir) and (s[r] in fir):\n        l+=1\n        r-=1\n        continue\n    elif (s[l] in sec) and (s[r] in sec):\n        l+=1\n        r-=1\n        continue\n    else:\n        flag=False\n        break\nif flag:\n    print('TAK')\nelse:\n    print('NIE')\n    \n", "s = input()\nitself = {'A', 'H', 'I', 'M', 'O', 'o', 'T', 'U', 'V', 'v', 'W', 'w', 'X', 'x', 'Y'}\nd = {'p' : 'q', 'q' : 'p', 'b' : 'd', 'd' : 'b'}\nfor i in itself:\n\td[i] = i\nok = True\nfor i in range(len(s)):\n\tok &= s[i] in d.keys() and s[len(s) - i - 1] == d[s[i]]\nprint(\"TAK\" if ok else \"NIE\")", "d = {\n  'A' : 'A',\n  'b' : 'd',\n  'd' : 'b',\n  'H' : 'H',\n  'I' : 'I',\n  'M' : 'M',\n  'O' : 'O',\n  'o' : 'o',\n  'X' : 'X',\n  'x' : 'x',\n  'Y' : 'Y',\n  'W' : 'W',\n  'V' : 'V',\n  'w' : 'w',\n  'v' : 'v',\n  'T' : 'T',\n  'p' : 'q',\n  'q' : 'p',\n  'U' : 'U'\n  }\ng = lambda c : '*' if c not in list(d.keys()) else d[c]\ns = input()\nfor i in range(len(s)) :\n  if s[i] != g(s[len(s)-i-1]) :\n    print('NIE')\n    return\nprint('TAK')\n", "sl = 'AHIMOoTUVvWwXxY'\ns = input()\nn = len(s)\nfor i in range((n + 1) // 2):\n    a, b = s[i], s[n - i - 1]\n    if a == b and a in sl:\n        continue\n    elif sorted(a + b) in [['b', 'd'], ['p', 'q']]:\n        continue\n    else:\n        print('NIE')\n        return\nprint('TAK')", "d = \"AHIMOoTUVvWwXxY\"\ns = input()\nfor i in range(len(s) // 2 + 1):\n\tif not ((s[i] in d) and (s[i] == s[-i-1])) and not ((s[i] + s[-i-1]) in [\"bd\", \"db\", \"pq\", \"qp\"]):\n\t\tprint(\"NIE\")\n\t\tbreak\nelse:\n\tprint(\"TAK\")", "s = input()\n\np = 'aBCcDEeFfGghiJjKkLlmNnPQRrSstuyZz'\n\nfor c in s:\n    if c in p:\n        print('NIE')\n        return\n\ndef trans(c):\n    d = {\n        'b': 'd',\n        'd': 'b',\n        'p': 'q',\n        'q': 'p',\n    }\n    if c in d:\n        return d[c]\n    return c\n\nt = ''.join(map(trans, s[::-1]))\nif t == s:\n    print('TAK')\nelse:\n    print('NIE')\n", "midsym = 'AHIMOoTUVvWwXxY'\nsym = 'pqbd'\n\ns = input()\n\nif len(s) % 2 == 1:\n\tt = len(s) // 2\n\tif s[t] not in midsym:\n\t\tprint('NIE')\n\t\treturn\n\ts = s[:t] + s[t+1:]\n\n#print(s)\n\t\nf = s[:int(len(s)/2)]\nl = s[int(len(s)/2):]\nl = l[::-1]\nfor k in range(len(f)):\n\tif f[k] not in midsym and f[k] not in sym:\n\t\tprint('NIE')\n\t\treturn\n\tif f[k] in midsym:\n\t\tif l[k] != f[k]:\n\t\t\tprint('NIE')\n\t\t\treturn\n\tif f[k] in sym:\n\t\tif f[k] == 'p' and l[k] == 'q': continue\n\t\tif f[k] == 'q' and l[k] == 'p': continue\n\t\tif f[k] == 'b' and l[k] == 'd': continue\n\t\tif f[k] == 'd' and l[k] == 'b': continue\n\t\tprint('NIE')\n\t\treturn\nprint('TAK')", "# You lost the game.\ns = str(input())\nn = len(s)\n\nsym = \"AHIMOoTUVvWwXxY\"\n\nif n % 2 and sym.count(s[n//2]) == 0:\n    print(\"NIE\")\nelse:\n    r = \"\"\n    ok = 1\n    for i in range(n//2):\n        if sym.count(s[i]):\n            r = s[i] + r\n        elif s[i] == \"b\":\n            r = \"d\" + r\n        elif s[i] == \"d\":\n            r = \"b\" + r\n        elif s[i] == \"p\":\n            r = \"q\" + r\n        elif s[i] == \"q\":\n            r = \"p\" + r\n        else:\n            ok = 0\n            break\n    if ok == 0:\n        print(\"NIE\")\n    else:\n        if s[n//2 + n%2:] == r:\n            print(\"TAK\")\n        else:\n            print(\"NIE\")\n", "s = input()\n\nselfs = ['A', 'H', 'I', 'M', 'O', 'o', 'T', 'U', 'V', 'v', 'W', 'w', 'X', 'x', 'Y'] # u and m???\n\nopps = {'b':'d', 'p':'q', 'd':'b', 'q':'p'}\n\nfor i in range(int(len(s)/2)+1):\n    if s[i] not in selfs:\n        if s[i] in opps.keys():\n            if opps[s[i]] == s[len(s)-i-1]:\n                pass\n            else:\n                print(\"NIE\")\n                return\n        else:\n            print(\"NIE\")\n            return\n    else:\n        if s[i] != s[len(s)-i-1]:\n            print(\"NIE\")\n            return\n\nif len(s) % 2 == 1:\n    if s[int(len(s)/2)] not in selfs:\n        print(\"NIE\")\n        return\n\nprint(\"TAK\")", "a = \"AHIMOTUVWXYovwx\"\nb = \"bdpq\"\nc = \"dbqp\"\n\nl = list(zip(a, a)) + list(zip(b, c))\n\ns = input()\n\ndef f(c):\n    for x in l:\n        if c == x[0]:\n            return x[1]\n    return ' '\n\nt = ''.join(map(f, s[::-1]))\n\nprint(\"TAK\" if s == t else \"NIE\")\n", "s = input()\ngood = ['A', 'H', 'I', 'M', 'O', 'o', 'T', 'U', 'V', 'v', 'W', 'w', 'X', 'x', 'Y']\nfor i in range(len(s) // 2):\n    if (s[i] == s[len(s) - i - 1] and s[i] in good) or (s[i] == 'b' and s[len(s) - i - 1] == 'd') or (s[i] == 'p' and s[len(s) - i - 1] == 'q') or (s[i] == 'd' and s[len(s) - i - 1] == 'b') or (s[i] == 'q' and s[len(s) - i - 1] == 'p'):\n        pass\n    else:\n        print(\"NIE\")\n        return\nif len(s) % 2 == 1:\n    if s[len(s) // 2] in good:\n        print(\"TAK\")\n    else:\n        print(\"NIE\")\nelse:\n    print(\"TAK\")", "s = list(input())\nif len(s) % 2 == 0:\n    s1 = s[0 : len(s) // 2 : ]\n    s2 = s[len(s) // 2 : len(s) : ]\nelse:\n    s1 = s[0 : len(s) // 2 + 1 : ]\n    s2 = s[len(s) // 2 : len(s) : ]\ns2.reverse()\nd = dict()\nd['A'] = 'A'\nd['b'] = 'd'\nd['d'] = 'b'\nd['H'] = 'H'\nd['I'] = 'I'\nd['M'] = 'M'\nd['O'] = 'O'\nd['o'] = 'o'\nd['T'] = 'T'\nd['U'] = 'U'\nd['V'] = 'V'\nd['v'] = 'v'\nd['W'] = 'W'\nd['w'] = 'w'\nd['X'] = 'X'\nd['x'] = 'x'\nd['Y'] = 'Y'\nd['p'] = 'q'\nd['q'] = 'p'\nf = True\nfor i in range(len(s1)):\n   if not(s1[i] in d and d[s1[i]] == s2[i]):\n       f = False\n       break\nif f:\n    print('TAK')\nelse:\n    print('NIE')\n", "s = str(input())\n\nn = len(s)\n\nss = ['A', 'H', 'I', 'M', 'O','o','T','U','V','v','W','w','X','x','Y']\nss2 = [('d','b'),('q','p'),('p','q'),('b','d')]\n\nfor i in range(0, n//2):\n    if s[i]==s[n-1-i]:\n        if not (s[i] in ss):\n            print(\"NIE\")\n            return\n    else:\n        if not ((s[i],s[n-1-i]) in ss2):\n            print(\"NIE\")\n            return\n\nif n%2 != 0:\n    if s[n//2] in ss:\n        print(\"TAK\")\n    else:\n        print(\"NIE\")\nelse:\n    print(\"TAK\")\n\n\n\n", "s = input()\nn = len(s)\n\nN = 0\n\nif n % 2 == 0:\n\tN =  n // 2\nelse:\n\tN = n // 2 + 1\nflag = True\n\ndef check(l, r):\n\tsame = [\"A\", \"H\", \"I\", \"M\", \"O\", \"o\", \"T\", \"U\", \"V\", \"v\", \"W\", \"w\", \"X\", \"x\", \"Y\"]\n\tif (l == r) and (l in same):\n\t\treturn True\n\tif l == \"b\" and r ==\"d\":\n\t\treturn True\n\tif l == \"d\" and r == \"b\":\n\t\treturn True\n\tif l == \"p\" and r == \"q\":\n\t\treturn True\n\tif l == \"q\" and r == \"p\":\n\t\treturn True\n\treturn False\nfor i in range(N):\n\tleft = i\n\tright = n-1-i\n\tlc = s[left]\n\trc = s[right]\n\n\tif ( not check(lc, rc) ):\n\t\tflag = False\n\nif flag:\n\tprint(\"TAK\")\nelse:\n\tprint(\"NIE\")\n\n", "d = {'A': 'A',\n     'b': 'd',\n     'd': 'b',\n     'H': 'H',\n     'I': 'I',\n     'M': 'M',\n     'O': 'O',\n     'o': 'o',\n     'p': 'q',\n     'q': 'p',\n     'T': 'T',\n     'U': 'U',\n     'V': 'V',\n     'v': 'v',\n     'W': 'W',\n     'w': 'w',\n     'X': 'X',\n     'x': 'x',\n     'Y': 'Y'}\ns = input()\n\nf = True\n\nif len(s) % 2 == 0:\n    l = s[:len(s) // 2]\n    r = s[len(s) // 2:]\nelse:\n    l = s[:len(s) // 2]\n    if s[len(s) // 2] not in d or d[s[len(s) // 2]] != s[len(s) // 2]:\n        f = False\n    r = s[len(s) // 2 + 1:]\n\nr = list(r)\nfor i in range(len(r)):\n    if r[i] not in d:\n        f = False\n    else:\n        r[i] = d[r[i]]\n\nif r[::-1] == list(l) and f:\n    print(\"TAK\")\nelse:\n    print(\"NIE\")\n", "from string import ascii_letters\n\nmirror_symmetry = 'AHIMOoTUVvWwXxY'\n\nsymmetric_to = {\n    'b': 'd',\n    'd': 'b',\n    'p': 'q',\n    'q': 'p',\n}\n\nothers = set(ascii_letters) - set(mirror_symmetry + 'bdpq')\n\nstring = input()\n\n\ndef f(s):\n    if set(s) & others:\n        return 'NIE'\n    if len(s) % 2 == 1:\n        if s[len(s) // 2] not in mirror_symmetry:\n            return 'NIE'\n        s = s[:len(s) // 2] + s[len(s) // 2 + 1:]\n    for i in range(len(s) // 2):\n        if s[i] in mirror_symmetry and s[-1 - i] == s[i]:\n            continue\n        if s[i] in symmetric_to and symmetric_to[s[i]] == s[-1 - i]:\n            continue\n        return 'NIE'\n    return 'TAK'\n\nprint(f(string))\n", "tak = {\n    'b': 'd',\n    'd': 'b',\n    'p': 'q',\n    'q': 'p'\n}\n\ntok = 'AHIMOoTUVvWwXxY'\n\ns = input()\nle = len(s)\nle2 = le // 2\n\nif (1 == le & 1) and not s[le2] in tok:\n    print(\"NIE\")\n    return\n    \ns1 = s[0:le2]\ns2 = s[le2 + (le & 1):][::-1]\n\n\n\nfor i in range(0, le2):\n    \n    if s1[i] == s2[i] and s1[i] in tok: continue\n    if s1[i] in tak and tak[s1[i]] == s2[i]: continue\n    print(\"NIE\")\n    return\n    \nprint(\"TAK\")", "s = input()\n\nmirror={'b':'d','d':'b','p':'q','q':'p'}\nwhile len(s)>1:\n        if s[0] in 'AoOIMHTUVvWwXxY':\n                if s[0]==s[-1]: s=s[1:-1:]\n                else: break\n        elif s[0] in mirror:\n                if s[0]==mirror[s[-1]]: s=s[1:-1:]\n                else: break\n        else: break\n\nif len(s)==0 or (s[0] in 'AoOIMHTUVvWwXxY' and len(s)==1):\n        print('TAK')\nelse: print('NIE')\n", "__author__ = 'Alexander'\nimport sys\nstring = sys.stdin.readline().strip()\nideal = {'A','b','d','H','I','M','O','o','p','q','T','U','V','v','W','w','X','x','Y'}\n\nfor i in range(int((len(string)+1)/2)):\n    if string[i] not in ideal:\n        sys.stdout.write(\"NIE\")\n        return\n    elif string[i] == 'b' or string[i] == 'd' or string[i] == 'p' or string[i] == 'q':\n        if (string[i] == 'b' and string[-i-1] != 'd') or \\\n        (string[i] == 'd' and string[-i-1] != 'b') or \\\n        (string[i] == 'q' and string[-i-1] != 'p') or \\\n        (string[i] == 'p' and string[-i-1] != 'q'):\n            sys.stdout.write(\"NIE\")\n            return\n    elif string[i] != string[-i-1]:\n        sys.stdout.write(\"NIE\")\n        return\nsys.stdout.write(\"TAK\")", "insym = set(('A', 'H', 'I', 'M', 'O', 'o', 'T', 'U', 'V', 'v', 'W', 'w', 'X', 'x', 'Y'))\ndisym = {'b':'d', 'd':'b', 'p':'q', 'q':'p'}\nfor c in insym:\n    disym[c] = c\ns = input()\nn = len(s)\nif n%2==0 or s[n//2] in insym:\n    s1 = s[0:n//2]\n    s2 = s[::-1][0:n//2]\n    flg = True\n    for i in range(n//2):\n        if s1[i] not in disym or disym[s1[i]] != s2[i]:\n            flg = False\n    if flg:\n        print(\"TAK\")\n    else:\n        print(\"NIE\")\nelse:\n    print(\"NIE\")\n", "import re\n\ns = input().strip()\nt = re.sub('[^AbdHIMOopqTUVvWwXxY]{1}', '', s)\n\nm = {}\nfor i in range(ord('A'), ord('z') + 1):\n    m[chr(i)] = chr(i)\n\nm['b'] = 'd'\nm['d'] = 'b'\nm['p'] = 'q'\nm['q'] = 'p'\n\ndef is_sp():\n    sl = len(t)\n    for i in range(sl // 2 + 1):\n        if m[t[i]] != t[sl - 1 - i]:\n            return False\n    return True\n\nif len(t) == len(s):\n    if is_sp():\n        print('TAK')\n    else:\n        print('NIE')\nelse:\n    print('NIE')\n", "s = input()\nD = {'A': 'A', 'b': 'd', 'd': 'b', 'H': 'H', 'I': 'I', 'M': 'M', 'O': 'O', 'o': 'o', 'p': 'q', 'q': 'p', 'T': 'T', 'U': 'U', 'V': 'V', 'v': 'v', 'W': 'W', 'w': 'w', 'X': 'X', 'x': 'x', 'Y': 'Y'}\nfor (c1, c2) in zip(s, s[::-1]):\n    if D.get(c1, '') != c2:\n        print(\"NIE\")\n        return\nprint(\"TAK\")\n\n    \n", "s = input()\n\nsym = \"AHIMOoTUVvWwXxY\"\nmir = {'b': 'd', 'd': 'b', 'p': 'q', 'q': 'p'}\n\nans = True\nl = len(s)\nif l % 2 != 0 and s[l // 2] not in sym:\n    ans = False\nelse:\n    #ans = False\n    for i in range(l // 2):\n        if not (s[i] in mir and mir[s[i]] == s[l - i - 1] or s[i] in sym and s[i] == s[l - i - 1]):\n            ans = False\n            break\nprint(\"TAK\" if ans else \"NIE\")\n"]