["n=int(input())\nc=[[] for i in range(n)]\n[c[int(x)].append(i+1) for i,x in enumerate(input().split())]\ns=0;r=[]\nfor i in range(n):\n    while len(c[s])==0 and s>=0:\n        s-=3\n    if s<0:\n        print('Impossible')\n        break\n    else:\n        r+=[c[s].pop()]\n        s+=1\nelse:\n     print('Possible')\n     print(*r)", "import sys\nfrom pprint import pprint\n\nn  = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split(' ')))\n\ns = [[] for i in range(0, n+1)]\n\nfor i, ai in enumerate(a, start=1):\n\ts[ai].append(i)\n\n#pprint(s)\ni = 0\nq = []\n\nwhile True:\n\tif len(s[i]) > 0:\n\t\t# Greedy: Add as many students to the room as possible.\n\t\tq.append( str( s[i][-1] ) )\n\t\ti += 1\n\telse:\n\t\t# Remove a team\n\t\tif i < 3:\n\t\t\tbreak\n\t\ts[i-1].pop()\n\t\ts[i-2].pop()\n\t\ts[i-3].pop()\n\t\ti -= 3\nif len(q) == n:\n\tprint('Possible')\n\tprint(' '.join(q) )\nelse:\n\tprint('Impossible')", "n = int(input())\nc = [[] for i in range(n)]\n[c[int(x)].append(i + 1) for i, x in enumerate(input().split())]\ns = 0; r = []\nfor i in range(n):\n    while len(c[s]) == 0 and s >= 0: s -= 3\n    if s < 0: print('Impossible'); break\n    r += [c[s].pop()]; s += 1\nelse: print('Possible\\n', *r)", "n = int(input())\nc = [[] for i in range(n)]\n[c[int(x)].append(i + 1) for i, x in enumerate(input().split())]\ns = 0; r = []\nfor i in range(n):\n    while len(c[s]) == 0 and s >= 0: s -= 3\n    if s < 0: print('Impossible'); break\n    r += [c[s].pop()]; s += 1\nelse: print('Possible\\n', *r)\n", "n = int(input())\nc = [[] for i in range(n)]\n[c[int(x)].append(i + 1) for i, x in enumerate(input().split())]\ns = 0; r = []\nfor i in range(n):\n    while len(c[s]) == 0 and s >= 0: s -= 3\n    if s < 0: print('Impossible'); break\n    r += [c[s].pop()]; s += 1\nelse: print('Possible\\n', *r)\n", "n = int(input())\nc = [[] for i in range(n)]\n[c[int(x)].append(i + 1) for i, x in enumerate(input().split())]\ns = 0; r = []\nfor i in range(n):\n    while len(c[s]) == 0 and s >= 0: s -= 3\n    if s < 0: print('Impossible'); break\n    r += [c[s].pop()]; s += 1\nelse: print('Possible\\n', *r)\n", "n = int(input())\nc = [[] for i in range(n)]\n[c[int(x)].append(i + 1) for i, x in enumerate(input().split())]\ns = 0; r = []\nfor i in range(n):\n    while len(c[s]) == 0 and s >= 0: s -= 3\n    if s < 0: print('Impossible'); break\n    r += [c[s].pop()]; s += 1\nelse: print('Possible\\n', *r)\n", "n = int(input())\nc = [[] for i in range(n)]\n[c[int(x)].append(i + 1) for i, x in enumerate(input().split())]\ns = 0; r = []\nfor i in range(n):\n    while len(c[s]) == 0 and s >= 0: s -= 3\n    if s < 0: print('Impossible'); break\n    r += [c[s].pop()]; s += 1\nelse: print('Possible\\n', *r)\n", "n = int(input())\nc = [[] for i in range(n)]\n[c[int(x)].append(i + 1) for i, x in enumerate(input().split())]\ns = 0; r = []\nfor i in range(n):\n    while len(c[s]) == 0 and s >= 0: s -= 3\n    if s < 0: print('Impossible'); break\n    r += [c[s].pop()]; s += 1\nelse: print('Possible\\n', *r)\n", "n = int(input())\nc = [[] for i in range(n)]\n[c[int(x)].append(i + 1) for i, x in enumerate(input().split())]\ns = 0; r = []\nfor i in range(n):\n    while len(c[s]) == 0 and s >= 0: s -= 3\n    if s < 0: print('Impossible'); break\n    r += [c[s].pop()]; s += 1\nelse: print('Possible\\n', *r)\n", "n = int(input())\nc = [[] for i in range(n)]\n[c[int(x)].append(i + 1) for i, x in enumerate(input().split())]\ns = 0; r = []\nfor i in range(n):\n    while len(c[s]) == 0 and s >= 0: s -= 3\n    if s < 0: print('Impossible'); break\n    r += [c[s].pop()]; s += 1\nelse: print('Possible\\n', *r)\n", "n = int(input())\n\np = [int(x) for x in input().split()]\n\nc = [[] for _ in range(n)]\n\nt = 0\n\nfor i,x in enumerate(p):\n    c[x].append(i)\n\nres = []\n\nwhile True:\n    while t < n and len(c[t]) == 0 and t > 0:\n        t -= 3\n    if t >= n or len(c[t]) == 0:\n        break\n    res.append(c[t].pop()+1)\n    t += 1\n\nif all(len(x) == 0 for x in c):\n    print(\"Possible\")\n    print(\" \".join(map(str, res)))\nelse: print(\"Impossible\")", "\n\ndef read_int():\n    return int(input().strip())\n\n\ndef read_ints():\n    return list(map(int, input().strip().split(' ')))\n\n\ndef solve():\n    \"\"\"\n    4 2 1 3 5\n\n    0 2 3 4 1 1 0 2 2\n    x x x x x x x x x\n\n    1 5 8 3 4 2 7 6 9\n\n10\n0 3 4 2\n\n0 1 2 3 4 5\n    \"\"\"\n    N = read_int()\n    shakes = [[] for _ in range(N)]\n\n    for i, a in enumerate(read_ints(), start=1):\n        shakes[a].append(i)\n    i = 0\n    answer = []\n    while N > 0:\n        if len(shakes[i]) > 0:\n            answer.append(shakes[i].pop())\n            N -= 1\n            i += 1\n        else:\n            j = i\n            while j >= 0 and len(shakes[j]) == 0:\n                j -= 3\n            if j < 0:\n                break\n            i = j\n    if N != 0:\n        return 'Impossible'\n    print('Possible')\n    return ' '.join(map(str, answer))\n\n\ndef __starting_point():\n    print(solve())\n\n__starting_point()", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dic = [[] for i in range(n)]\n    \n    for i, item in enumerate(a, start=1):\n        dic[item].append(i)\n    \n    if not dic[0]:\n        print(\"Impossible\")\n        return\n    route = [dic[0].pop()]\n    s = 0\n\n    for i in range(1, n):\n        s += 1\n        while s >= 0:\n            if dic[s]:\n                route.append(dic[s].pop())\n                break\n            else:\n                s -= 3\n        else:\n            print(\"Impossible\")\n            return\n    \n    if len(route) == n:\n        print(\"Possible\")\n        print(' '.join(str(i) for i in route))\n    else:\n        print(\"Impossible\")\n\nmain()\n", "n = int(input())\na = list(map(int, input().split()))\ndic = [[] for i in range(n)]\n    \nfor i, item in enumerate(a, start=1):\n    dic[item].append(i)\n\nif not dic[0]:\n    print(\"Impossible\")\n    return\nroute = [dic[0].pop()]\ns = 0\n\nfor i in range(1, n):\n    s += 1\n    while s >= 0:\n        if dic[s]:\n            route.append(dic[s].pop())\n            break\n        else:\n            s -= 3\n    else:\n        print(\"Impossible\")\n        return\n\nif len(route) == n:\n    print(\"Possible\")\n    print(' '.join(str(i) for i in route))\nelse:\n    print(\"Impossible\")\n"]