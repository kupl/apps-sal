["n = int(input())\nl = list(map(int,input().split()))\n\ncurr = 0\nbest = 0\nprevs = [0] * 31\nfor v in l:\n    curr += v\n    if v >= 0:\n        for i in range(0, v):\n            prevs[i] = curr\n        for i in range(v, 31):\n            best = max(curr - prevs[i] - i, best)\n    else:\n        for i in range(31):\n            prevs[i] = min(prevs[i], curr)\nprint(best)\n", "from bisect import bisect_left as lower_bound, bisect_right as upper_bound\nfrom sys import stdin, stdout\nfrom collections import defaultdict\n\nN = 10**5 + 7\n\nminn = [0 for _ in range(2*N)]\nmaxx = [0 for _ in range(2*N)]\n\ndef build(p, n):\n    for i in range(n): \n        maxx[n+i] = p[i]\n        minn[n+i] = p[i]\n\n    for i in range(n-1, 0, -1):\n        maxx[i] = max(maxx[i<<1], maxx[i<<1|1])\n        minn[i] = min(minn[i<<1], minn[i<<1|1])\n\ndef query(l, r, n):\n    l += n\n    r += n\n\n    retminn, retmaxx = float('inf'), -float('inf')\n\n    while l < r:\n        if l&1:\n            retminn = min(retminn, minn[l])\n            retmaxx = max(retmaxx, maxx[l])\n            l += 1\n\n        if r&1:\n            r -= 1\n            retminn = min(retminn, minn[r])\n            retmaxx = max(retmaxx, maxx[r])\n\n        l >>= 1\n        r >>= 1\n\n    return retminn, retmaxx\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n\n    left = [-1]*n\n    right = [n]*n\n\n    p = [a[i] for i in range(n)]\n    for i in range(1, n): p[i] += p[i-1]\n\n    build(p, n)\n\n    st = [0]\n    for i in range(1, n):\n        while st and a[st[-1]] <= a[i]: st.pop()\n\n        if st: left[i] = st[-1]\n        st.append(i)\n\n    st = [n-1]\n    for i in range(n-2, -1, -1):\n        while st and a[st[-1]] < a[i]: st.pop()\n\n        if st: right[i] = st[-1]\n        st.append(i)\n\n    #print(left, right, p)\n    #\n    \n    if max(a) <= 0:\n        print(0)\n        return None\n\n    ret = -float('inf')\n\n    for i in range(n):\n        l, r = left[i], right[i]\n\n        _, rmaxx = query(i, r, n)\n        lminn, _ = query(max(0, l), i, n)\n\n        if l < 0: lminn = min(lminn, 0)\n\n        s = rmaxx - lminn\n        #print(i, s, a[i], l, r)\n\n        ret = max(ret, s-a[i])\n\n    print(ret)\n\n\n\ndef __starting_point(): main()\n\n__starting_point()"]