["# AC\nimport sys\nsys.setrecursionlimit(1000000)\n\n\nclass Main:\n    def __init__(self):\n        self.buff = None\n        self.index = 0\n\n    def __next__(self):\n        if self.buff is None or self.index == len(self.buff):\n            self.buff = self.next_line()\n            self.index = 0\n        val = self.buff[self.index]\n        self.index += 1\n        return val\n\n    def next_line(self):\n        return sys.stdin.readline().split()\n\n    def next_ints(self):\n        return [int(x) for x in sys.stdin.readline().split()]\n\n    def next_int(self):\n        return int(next(self))\n\n    def solve(self):\n        a = next(self)\n        b = next(self)\n        d = 0\n        g = 0\n        for i in range(len(b)):\n            if a[i] != b[i]:\n                d += 1\n            if i > 0 and b[i] != b[i - 1]:\n                g += 1\n        ans = 1 if d % 2 == 0 else 0\n        for i in range(len(b), len(a)):\n            if a[i] != b[-1]:\n                d += 1\n            if a[i - len(b)] != b[0]:\n                d += 1\n            d += g\n            if d % 2 == 0:\n                ans += 1\n        print(ans)\n\n\ndef __starting_point():\n    Main().solve()\n\n__starting_point()", "a = input()\nb = input()\nc = 0\nfor i in range(1, len(b)):\n    if b[i] != b[i-1]:\n        c += 1\ns = 0\nfor i in range(len(b)):\n    if a[i]!=b[i]:\n        s += 1\nans = int(s&1==0)\nfor i in range(len(a)-len(b)):\n    s += c\n    if a[i] != b[0]:\n        s += 1\n    if a[i+len(b)] != b[-1]:\n        s += 1\n    ans += int(s&1==0)\nprint(ans)\n\n\n", "from functools import reduce\nfrom operator import xor\na = [*map(int, input())]\nb = [*map(int, input())]\nn = len(b)\ncurr = reduce(xor, b)\ncurr ^= reduce(xor, a[:n])\nres = int((curr & 1) == 0)\nfor i in range(n, len(a)):\n    curr ^= a[i] ^ a[i - n]\n    res += (curr & 1) == 0\nprint(res)", "a = input()\nb = input()\ni = b.count(\"1\")\ns = [0 for k in range(len(a))]\nif a[0] == \"1\":\n    s[0] = 1\nfor k in range(1,len(a)):\n    if a[k] == \"1\":\n        s[k] = s[k-1] + 1\n    else:\n        s[k] = s[k-1]\ns = s + [0]\nans = 0\n\nfor k in range(len(a)-len(b)+1):\n    t = s[k+len(b)-1] - s[k-1]\n    if i%2 == t%2:\n        ans += 1\nprint(ans)\n", "import sys\nfrom math import floor, ceil\n\nIS_LOCAL = False\n\n\ndef read_one(dtype=int):\n    return dtype(input())\n\n\ndef read_multiple(f, dtype=int):\n    return f(list(map(dtype, input().split())))\n\n\ndef main():\n    a = '01100010'\n    b = '00110'\n\n    if not IS_LOCAL:\n        a = input()\n        b = input()\n\n    def cst(x):\n        return 0 if x == '0' else 1\n\n    def rsum(arr):\n        return sum(map(cst, arr))\n\n    sb, lb = rsum(b), len(b)\n    s = None\n    res = 0\n    for i in range(lb - 1, len(a)):\n        if s is None:\n            s = rsum(a[:lb])\n        else:\n            s = s - cst(a[i - lb]) + cst(a[i])\n\n        if (s - sb) % 2 == 0:\n            res += 1\n\n    print(res)\n\n\ndef __starting_point():\n    if len(sys.argv) > 1 and sys.argv[1] == 'True':\n        IS_LOCAL = True\n    main()\n\n__starting_point()", "a = str(input())\nb = str(input())\nn = len(a)\nunos = [0] * (n+1)\nm = len(b)\n\ntot = 0\nfor el in b:\n    tot += int(el)\n\ntot = tot % 2\n\ns = 0\nc = 0\nfor r in range(1,n+1):\n    s += int(a[r-1])\n    unos[r] = s\n    if r >= m and (unos[r] - unos[r-m]) % 2 == tot:\n        c += 1\nprint(c)", "import sys\ninput = sys.stdin.readline\n\na=input().strip()\nb=input().strip()\n\nC1=b.count(\"1\")\n\nL=len(b)\nC0=(L-a[:L].count(\"0\")+C1)%2\n\nANS=0\nif C0%2==0:\n    ANS+=1\n\nfor i in range(L,len(a)):\n    if a[i]==\"0\":\n        C0+=1\n    if a[i-L]==\"0\":\n        C0-=1\n\n    if C0%2==0:\n        ANS+=1\n\nprint(ANS)\n    \n", "a=input()\nb=input()\nA=[0]\nHash=0\nfor i in a:\n    if i=='1':\n        A.append(A[-1]+1)\n    else:\n        A.append(A[-1])\nfor i in b:\n    if i=='1':\n        Hash+=1\nres=0\nfor i in range(1,len(a)-len(b)+2):\n    if ((A[i+len(b)-1]-A[i-1])%2)==(Hash%2):\n        res+=1\nprint(res)", "a=[int(x) for x in list(input())]\nb=[int(x) for x in list(input())]\nn=len(b)\ncounter=odd=answer=0\nfor i in range(n):\n    if a[i]!=b[i]:\n        counter+=1\n    if i!=n-1 and a[i]!=a[i+1]:\n        odd+=1\nif counter%2==0:\n    flag=True\n    answer+=1\nelse:\n    flag=False\nodd%=2\nfor i in range(n,len(a)):\n    if a[i]!=a[i-1]:\n        odd+=1\n        odd=odd%2\n    if odd==0:\n        if flag:\n            answer+=1\n    else:\n        if flag:\n            flag=False\n        else:\n            answer+=1\n            flag=True\n    if a[i-n]!=a[i-n+1]:\n        odd+=1\n        odd%=2\nprint(answer)\n\n", "a = input()\nb = input()\npref = [0] * (len(a) - 1)\npyk = 0\nfor i in range(len(a) - 1):\n\tif a[i] != a[i + 1]:\n\t\tpyk += 1\n\t\tpref[i] = pyk\n\telse:\n\t\tpref[i] = pyk\nchuj = 0\nres = 0\nfor i in range(len(b)):\n\tif a[i] != b[i]:\n\t\tchuj += 1\ntesame = 1\ndupa = 1\nfor i in range(len(a) - len(b)):\n\tif i > 0:\n\t\tif (pref[i + len(b) - 1] - pref[i - 1]) % 2 != 0:\n\t\t\tdupa = 1 - dupa\n\t\ttesame += dupa\n\telse:\n\t\tif (pref[i + len(b) - 1]) % 2 != 0:\n\t\t\tdupa = 1 - dupa\n\t\ttesame += dupa\nif chuj % 2 == 0:\n\tprint(tesame)\nelse:\n\tprint( len(a) - len(b) + 1 - tesame)", "a = input()\nb = input()\nx = b.count('1') % 2\n\npref = [0] * (len(a) + 1)\nfor i in range(len(a)):\n    if a[i] == '0':\n        pref[i] = pref[i - 1]\n    else:\n        pref[i] = pref[i - 1] + 1\n\nans = 0\nfor i in range(len(a) - len(b) + 1):\n    if (pref[i + len(b) - 1] - pref[i - 1]) % 2 == x:\n        ans += 1\nprint(ans)\n    \n        \n", "# @author \n\nimport sys\n\nclass CVusTheCossackAndStrings:\n    def solve(self):\n        a = input().strip()\n        b = input().strip()\n        n = len(a)\n        m = len(b)\n        oa = 0\n        ob = b.count('1')\n        ans = 0\n        for i in range(n):\n            if a[i] == '1':\n                oa += 1\n            if i == m - 1:\n                if abs(oa - ob) % 2 == 0:\n                    ans += 1\n            elif i >= m:\n                if a[i - m] == '1':\n                    oa -= 1\n                if abs(oa - ob) % 2 == 0:\n                    ans += 1\n                    \n\n        print(ans)\n\nsolver = CVusTheCossackAndStrings()\ninput = sys.stdin.readline\n\nsolver.solve()\n", "a = input()\nb = input()\nn = len(a)\nm = len(b)\n\ndef change(a):\n    pref = [0] * (len(a))\n    for i in range(1, len(a)):\n        pref[i] = pref[i - 1] + (a[i] != a[i - 1])\n    return pref\n\nequals = 0\npref = change(a)\nfor i in range(m):\n    equals += (a[i] != b[i])\nparity = equals % 2\nf = int(not parity)\nfor i in range(m, n):\n    parity += (pref[i] - pref[i - m]) % 2\n    f += (parity % 2 == 0)\nprint(f)", "r=input()\nn=input()\nlength=len(n)\ng=n.count(\"1\")\nsame=False\nnums=0\nif len(r)<length:\n    print(0)\nelse:\n    if (r[:len(n)].count(\"1\")-g) % 2 == 0:\n        same=True\n        nums+=1\n    for i in range(len(r)-len(n)):\n        if r[i]!=r[i+len(n)]:\n            same= not same\n        if same:\n            nums+=1\nprint(nums)", "a = input()\nb = input()\n\nsum_a = sum(map(int, a[:len(b)]))\nsum_b = sum(map(int, b))\n\ncount = 0\ni = 0\nwhile True:\n    xor = (sum_a + sum_b + 1) % 2\n    count += xor\n\n    if i >= len(a) - len(b):\n        break\n    sum_a = sum_a + int(a[i + len(b)]) - int(a[i])\n    i += 1\n\nprint(count)\n\n\n", "a=input()\nb=input()\nA=[]\nal=len(a)\nbl=len(b)\nA.append(0)\ncount=0\nfor x in a:\n    if x=='1':\n        count+=1\n    A.append(count)\nevencount=0\nbcount=0\nfor x in b:\n    if x=='1':\n        bcount+=1\nfor i in range((al+1)-bl):\n    acount=A[i+bl]-A[i]\n    if (acount%2)==(bcount%2):\n        evencount+=1\nprint(evencount)\n", "\nA = input()\n\nB = input()\n\nB_zeros = 0\n\nfor i in range(len(B)):\n    if B[i]=='0':\n        B_zeros += 1\n\n\nL_B = len(B)\nzeros = 0\nres = 0\nfor i in range(len(A)):\n    if A[i]=='0':\n        zeros += 1\n        \n    if i==L_B-1:\n        do = 1\n    elif i>L_B-1:\n        if A[i-L_B]=='0':\n            zeros -= 1\n    \n    if i>=L_B-1:\n        if (zeros-B_zeros)%2==0:\n            res += 1\n        #print(zeros,L_B-zeros)\n        \nprint(res)", "s1 = input()\ns2 = input()\nn, m = len(s1), len(s2)\nt, res = 0, [0, 0]\nfor i in range(m):\n    t ^= (s1[i] == '0')\n    t ^= (s2[i] == '0')\nres[t] += 1\nfor i in range(m, n):\n    t ^= (s1[i] == '0') ^ (s1[i-m] == '0')\n    res[t] += 1\nprint(res[0])\n", "from sys import stdin\n\ndef solve():\n    #stdin = open(\"C.txt\")\n\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n    \n    n = len(a)\n    m = len(b)\n    \n    a_cnt = a[:m].count(\"1\")\n    b_cnt = b.count(\"1\")\n    \n    ans = 0\n    \n    if (a_cnt + b_cnt) % 2 == 0:\n        ans = 1\n    \n    for i in range(1,n-m+1):\n        if a[i-1] == \"1\":\n            a_cnt -= 1\n        \n        if a[i+m-1] == \"1\":\n            a_cnt += 1\n            \n        if (a_cnt + b_cnt) % 2 == 0:\n            ans += 1\n\n    print (ans)\n\ndef __starting_point():\n    solve()\n__starting_point()", "a = input()\nb = input()\nq = 0 # a > b\nfor i in b:\n    if i == '1':\n        q += 1\nvalue = [0] * (len(a) + 1)\nlenb = len(b)\nans = 0\nfor i in range(len(a)):\n    value[i + 1] = value[i] + bool(a[i] == '1')\n    if i + 1 >= lenb and (abs(value[i + 1] - value[i + 1 - lenb]) - q) % 2 == 0:\n        ans += 1\nprint(ans)\n", "a,b,res=input(),input(),0\nsm1=sum(map(int,b[0:len(b)]))\nsm2=sum(map(int,a[0:len(b)]))\nres+=(sm1-sm2)%2==0\nfor i in range(len(b),len(a)):\n\tsm2+=a[i]=='1'\n\tsm2-=a[i-len(b)]=='1'\n\tres+=(sm1-sm2)%2==0\nprint(res)", "a=input()\nb=input()\nbo=b.count(\"1\")\nlb=len(b)\nao=a[:lb].count(\"1\")\nfinal_ans=0\nif (ao+bo)%2==0:\n    final_ans+=1\nfor i in range(len(a)-lb):\n    if a[i]==\"1\":\n        ao-=1\n    if a[i+lb]==\"1\":\n        ao+=1\n    if (ao+bo)%2==0:\n        final_ans+=1\nprint(final_ans)", "a, b = input(), input()\nt = 0\nl = [0,0]\nfor i in range(len(b)):t^=(int(a[i])^int(b[i]))\nl[t]=1\nfor i in range(len(b),len(a)):\n    t^=(int(a[i])^int(a[i-len(b)]))\n    l[t]+=1\n\nprint(l[0])\n"]