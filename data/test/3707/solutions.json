["import collections as col\nimport itertools as its\nimport sys\nimport operator\nfrom bisect import bisect_left, bisect_right\nfrom copy import copy, deepcopy\nfrom math import factorial as fact\n\n\nclass Solver:\n    def __init__(self):\n        pass\n\n    def solve(self):\n        n, t, k, d = list(map(int, input().split()))\n        n = (n + k - 1) // k\n        if d < (n-1) * t:\n            print('YES')\n        else:\n            print('NO')\n\n\ndef __starting_point():\n    s = Solver()\n    s.solve()\n\n__starting_point()", "n, t, k, d = [int(i) for i in input().split()]\n\nn = (n+k-1)//k\n\nt0 = t * n\n\ndt = t0 - d\nans = \"YES\" if dt > t else \"NO\"\n\nprint(ans)", "n, t, k, d = map(int, input().split())\nans1 = n // k\nif n % k:\n    ans1 += 1\nans1 *= t\nif d < ans1 - t:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "n, t, k, d = list(map( int, input().split() ))\nclk = 0\ns = 0\nwhile s < n:\n  s += k\n  clk += t\nclk2 = 0\nlb, ub = 0, int( 1e10 )\nwhile lb <= ub:\n  mid = lb + ub >> 1\n  s = mid // t * k + max( 0, mid - d ) // t * k\n  if s >= n:\n    clk2 = mid\n    ub = mid - 1\n  else:\n    lb = mid + 1\n\nprint( [ \"NO\", \"YES\" ][ clk > clk2 ] )\n", "n, t, k, d = list(map(int, input().split()))\n\n# t1 = (n // k + n % k == 0 ? 0 : 1) * t\np = (d // t) * k\nif n - p > k:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "3\n\ndef time1(n, t, k):\n    return ((n + k - 1) // k) * t\n\n\ndef num2(T, t, k, d):\n    return (T // t) * k + max(0, (T - d) // t) * k\n\ndef time2(n, t, k, d):\n    l, r = 0, 10 ** 18\n    while l < r - 1:\n        mid = (l + r) // 2\n        if num2(mid, t, k, d) < n:\n            l = mid\n        else:\n            r = mid\n    return r\n\nn, t, k, d = list(map(int, input().split()))\nif time1(n, t, k) <= time2(n, t, k, d):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    \n", "#!/usr/bin/env python3\n\ndef main():\n    n, t, k, d = list(map(int, input().split()))\n    method_a = (n + k - 1) // k * t\n    done = 0\n    i = 0\n    a_progress = b_progress = 0\n    while done < n:\n        a_progress += 1\n        if a_progress == t:\n            a_progress = 0\n            done += k\n        if d > 0:\n            d -= 1\n        else:\n            b_progress += 1\n            if b_progress == t:\n                b_progress = 0\n                done += k\n        i += 1\n\n    print(\"YES\" if i < method_a else \"NO\")\n\ntry:\n    while True:\n        main()\nexcept EOFError:\n    pass\n", "def bp1(time):\n    return (time // t) * k\n\n\ndef bp2(time):\n    return (time // t) * k  + (max(time - d, 0) // t) * k\n\n\nn, t, k, d = map(int, input().split())\n\nl = 0\nr = 10 ** 9\nwhile l < r - 1:\n    m = (l + r) // 2\n    if bp1(m) >= n:\n        r = m\n    else:\n        l = m\nans1 = r\n\n\nl = 0\nr = 10 ** 9\nwhile l < r - 1:\n    m = (l + r) // 2\n    if bp2(m) >= n:\n        r = m\n    else:\n        l = m\nans2 = r\n\nif ans2 < ans1:\n    print('YES')\nelse:\n    print('NO')", "n,t,k,d=map(int,input().split())\nans=0\ni=0\nwhile ans<n:\n    i+=1\n    if i%t==0: ans+=k\n    if i-d>0 and (i-d)%t==0 and ans<n: print('YES'); break\nelse: print('NO')", "n, t, k, d = map(int, input().split())\nt1 = ((n + k - 1) // k) * t\nif t1 <= d:\n    print(\"NO\")\nelif ((n - 1) // k) * t > d:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "n, t, k, d = map(int, input().split())\n\nfirst = (n // k)\nif n % k != 0: first += 1\n\nfirst = first * t\n\nleft = -1\nright = int(1e9)\nwhile right - left > 1:\n\tmid = (left + right) // 2\n\n\tone = (mid // t) * k\n\ttwo = (max(mid - d, 0) // t) * k\n\tif one + two >= n:\n\t\tright = mid\n\telse:\n\t\tleft = mid\n\n\nif right != first:\n\tprint('YES')\nelse:\n\tprint('NO')", "#!/usr/bin/env python3\nfrom sys import stdin,stdout\n\ndef readint():\n    return list(map(int, stdin.readline().split()))\n#lines = stdin.readlines()\n\nn, t, k, d = readint()\n\ntt = (n//k)*t\nif n%k:\n    tt += t\n\nif tt > d+t:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n", "from fractions import Fraction as F\nfrom math import ceil, floor\nn, t, k, d = map(int,input().split())\n\nsingle = t*ceil(F(n,k))\ndouble1 = k*floor(F(single-1,t))\ndouble2 = max(0, k*floor(F(single-d-1,t)))\nprint(\"YES\" if double1+double2 >= n else \"NO\")", "import math \ndef main():\n    n,t,k,d = list(map(int, input().split()))\n\n    if d+t < math.ceil(n/k)*t:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\ndef __starting_point():\n    # nonlocal stime\n    # stime = time.clock()\n    main()\n\n__starting_point()", "n, t, k, d = map(int, input().split())\nans1 = (n + k - 1) // k * t\n\nans2 = 1 << 30\nfor x in range(1, 1000010):\n    if ((d + x) // t + x // t) * k >= n:\n        ans2 = d + x\n        break\n\nif ans1 <= ans2:\n    print(\"NO\")\nelse:\n    print(\"YES\")", "n, t, k, d = map(int, input().split())\n\nwhenD = (d // t) * k\nif n - whenD <= k:\n    print('NO')\nelse:\n    print(\"YES\")", "n,t,k,d=[int(x) for x in input().split()]\nc=n//k+(n%k>0)\nprint('YES' if (c-1)*t>d else 'NO')", "import math\nn,t,k,d = map(int, input().split())\n\nt1 = math.ceil(n / k)*t\nif t1 - d > t:\n    print('YES')\nelse:\n    print('NO')", "def sing(n, t, k):\n    have = 0\n    q = [t]\n    last = 0\n\n    while have < n:\n        last = q[0]\n        q.append(q[0] + t)\n        q = q[1:]\n        have += k\n\n        q.sort()\n\n    return last\n\ndef getdouble(n, t, k, d):\n    have = 0\n    q = [t, d + t]\n    last = 0\n\n    while have < n:\n        last = q[0]\n        q.append(q[0] + t)\n        q = q[1:]\n        have += k\n\n        q.sort()\n\n    return last\n\ndef main():\n    n, t, k, d = list(map(int, input().split()))\n    single = (n + k - 1) // k\n    single *= t\n    single = sing(n, t, k)\n    double = getdouble(n, t, k, d)\n\n    print('YES' if double < single else 'NO')\n\nmain()\n", "n,t,k,d=map(int,input().split())\nprint(\"YES\" if ((d+t)//t)*k<n else \"NO\")", "while True:\n    try:\n        n, t, k, d = list(map(int, input().split()))\n        from math import ceil\n        print(\"YES\" if ceil(n/k)*t > t+d else \"NO\")\n    except EOFError:\n        break\n", "import sys\n\ndef solve():\n    n, t, k, d = map(int, input().split())\n\n    use = (n + k - 1) // k\n\n    if d < (use - 1) * t:\n        ans = 'YES'\n    else:\n        ans = 'NO'\n\n    print(ans)\n\ndef __starting_point():\n    solve()\n__starting_point()", "n, t, k, d = list(map(int, input().split()))\nn = (n // k) + (1 if n % k else 0)\n# if d % t != 0:\n#     d += t - d % t\n\n# print(n, d, t)\nprint(\"YES\" if d < (n - 1) * t else \"NO\")\n", "import math\n\nn, t, k, d = list(map(int, input().split()))\n\ntime = t * math.ceil(n / k)\ncnt = ((time - 1) // t + max(0, time - 1 - d) // t) * k\n\nprint('YES' if cnt >= n else 'NO')\n", "n, t, k, d = list(map(int, input().split()))\ncakes = ((d + t) // t) * k\nif cakes < n:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"]