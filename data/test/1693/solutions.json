["from sys import stdin\n\n\ndef solve():\n    n = int(stdin.readline())\n    m = list(map(int, stdin.readline().split()))\n    msl = [-1] * n\n    msp = [n] * n\n    q = []\n    for i in range(n):\n        while q and m[q[-1]] > m[i]:\n            q.pop()\n        if q:\n            msl[i] = q[-1]\n        q.append(i)\n    q = []\n    for i in range(n - 1, -1, -1):\n        while q and m[q[-1]] > m[i]:\n            q.pop()\n        if q:\n            msp[i] = q[-1]\n        q.append(i)\n\n    dp1 = [0] * n\n    for i in range(n):\n        dp1[i] = m[i] * (i - msl[i])\n        if msl[i] != -1:\n            dp1[i] += dp1[msl[i]]\n    dp2 = [0] * n\n    for i in range(n - 1, -1, -1):\n        dp2[i] += m[i] * (msp[i] - i)\n        if msp[i] != n:\n            dp2[i] += dp2[msp[i]]\n    ansm = 0\n    answc = 0\n    for i in range(n):\n        cur = dp1[i] + dp2[i] - m[i]\n        if cur > answc:\n            answc = cur\n            ansm = i\n    i = ansm\n    cur = [0] * n\n    cur[i] = m[i]\n    for j in range(i + 1, n):\n        cur[j] = min(cur[j - 1], m[j])\n    for j in range(i - 1, -1, -1):\n        cur[j] = min(cur[j + 1], m[j])\n    print(*cur)\n\n\nfor i in range(1):\n    solve()\n", "n = int(input())\nsp = list(map(int, input().split()))\nforw = [0 for i in range(n)]\nbackw = [0 for i in range(n)]\nstack = [(0, -1, 0)]\nfor i in range(n):\n\twhile (sp[i] <= stack[-1][0]):\n\t\tstack.pop()\n\tstack.append((sp[i], i, (i - stack[-1][1]) * sp[i] + stack[-1][2]))\n\tforw[i] = stack[-1][2]\nrevsp = sp[::-1]\nstack = [(0, -1, 0)]\n\nfor i in range(n):\n\twhile (revsp[i] <= stack[-1][0]):\n\t\tstack.pop()\n\tstack.append((revsp[i], i, (i - stack[-1][1]) * revsp[i] + stack[-1][2]))\n\tbackw[i] = stack[-1][2]\n\nbackw = backw[::-1]\n#print(forw)\n#print(backw)\n\ncenter = 0\nans_center = 0\nfor i in range(n):\n\tif ans_center < backw[i] + forw[i] - sp[i]:\n\t\tcenter = i\n\t\tans_center = backw[i] + forw[i] - sp[i]\n#print(center)\nans = [0 for i in range(n)]\nans[center] = sp[center]\ncur = sp[center]\nfor i in range(center - 1, -1, -1):\n\tcur = min(cur, sp[i])\n\tans[i] = cur\ncur = sp[center]\nfor i in range(center + 1, n, 1):\n\tcur = min(cur, sp[i])\n\tans[i] = cur\n\nprint(*ans)\n", "n = int(input())\nm = list(map(int, input().split()))\nleft, right = [m[0]], [m[n-1]]\n\nstack = [(m[0], 1)]\nfor i in range(1, n):\n\tres = left[-1]\n\tnum_tmp = 0\n\twhile stack and stack[-1][0] > m[i]:\n\t\tres -= stack[-1][0] * stack[-1][1]\n\t\tnum_tmp += stack[-1][1]\n\t\tstack.pop()\n\tres += m[i] * (num_tmp + 1)\n\tstack.append((m[i], num_tmp + 1))\n\tleft.append(res)\n\nstack = [(m[n-1], 1)]\nfor i in range(n-2, -1, -1):\n\tres = right[-1]\n\tnum_tmp = 0\n\twhile stack and stack[-1][0] > m[i]:\n\t\tres -= stack[-1][0] * stack[-1][1]\n\t\tnum_tmp += stack[-1][1]\n\t\tstack.pop()\n\tres += m[i] * (num_tmp + 1)\n\tstack.append((m[i], num_tmp + 1))\n\tright.append(res)\n\nmaxi, maxi_ind = 0, -1\nfor i in range(n):\n\tif left[i] + right[n-i-1] - m[i] > maxi:\n\t\tmaxi = left[i] + right[n-i-1] - m[i]\n\t\tmaxi_ind = i\n\ni = maxi_ind\nans = [0 for _ in range(n)]\nnum = m[i]\nans[i] = m[i]\n\ncur = m[i]\nfor j in range(i-1, -1, -1):\n\tcur = min(m[j], cur)\n\tans[j] = cur\n\tnum += cur\n\ncur = m[i]\nfor k in range(i+1, n):\n\tcur = min(m[k], cur)\n\tans[k] = cur\n\tnum += cur\n\nprint(*ans)", "from collections import deque\nimport sys\ninput = sys.stdin.readline\n\n\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = deque([])\nans = [0] * n\ntmp_ans = 0\nfor i in range(n):\n    ind = i\n    l_ind = i\n    while True:\n        if not q:\n            q.append((a[i], l_ind))\n            tmp_ans += a[i] * (l_ind + 1)\n            break\n        if q[-1][0] <= a[i]:\n            tmp_ans += a[i] * (l_ind - q[-1][1])\n            q.append((a[i], l_ind))\n            break\n        else:\n            height, l = q.pop()\n            if not q:\n                tmp_ans -= height * (l + 1)\n            else:\n                tmp_ans -= height * (l - q[-1][1])\n            ind = l\n    ans[i] = tmp_ans\n\n\nb = a[::-1]\nq = deque([])\nans2 = [0] * n\ntmp_ans = 0\nfor i in range(n):\n    ind = i\n    l_ind = i\n    while True:\n        if not q:\n            q.append((b[i], l_ind))\n            tmp_ans += b[i] * (l_ind + 1)\n            break\n        if q[-1][0] <= b[i]:\n            tmp_ans += b[i] * (l_ind - q[-1][1])\n            q.append((b[i], l_ind))\n            break\n        else:\n            height, l = q.pop()\n            if not q:\n                tmp_ans -= height * (l + 1)\n            else:\n                tmp_ans -= height * (l - q[-1][1])\n            ind = l\n    ans2[i] = tmp_ans\n\n\nmax_ans = 0\nind = -1\nfor i in range(n):\n    tmp = ans[i] + ans2[n - 1 - i] - a[i]\n    if max_ans < tmp:\n        max_ans = tmp\n        ind = i\n\ni = ind\nans = [0] * n\n\ntmp = a[i]\nl = i\nr = i\n \nmax_height = a[i]\nans[i] = a[i]\nfor j in range(0, l)[::-1]:\n    if a[j] >= max_height: \n        tmp += max_height\n    else:\n        tmp += a[j]\n        max_height = a[j]\n    ans[j] = max_height\n    \nmax_height = a[i]\nfor j in range(r + 1, n):\n    if a[j] >= max_height: \n        tmp += max_height\n    else:\n        tmp += a[j]\n        max_height = a[j]\n    ans[j] = max_height\nprint(*ans)"]