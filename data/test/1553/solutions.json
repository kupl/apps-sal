["def func(arr):\n    arr.sort()\n    ans = 0\n    for i in range(len(arr) - 1, -1, -2):\n        ans += arr[i]\n    return ans\n\ndef main():\n    n, h = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        if func(arr[:i]) > h:\n            i -= 1\n            break\n    print(i)\n    return 0\nmain()", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return tuple(map(int, sys.stdin.readline().split()))\ndef LLI(): return [tuple(map(int, l.split())) for l in sys.stdin]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\ndef bs(f, mi, ma):\n    mm = -1\n    while ma > mi:\n        mm = (ma+mi) // 2\n        if f(mm):\n            mi = mm + 1\n        else:\n            ma = mm\n    if f(mm):\n        return mm + 1\n    return mm\n\ndef main():\n    n,h = LI()\n    a = LI()\n\n    def f(i):\n        if i > n:\n            return False\n        b = sorted(a[:i])\n        t = None\n        if i % 2 == 1:\n            t = sum(b[::2])\n        else:\n            t = sum(b[1::2])\n        return t <= h\n\n    r = bs(f, 0, n+1)\n\n    return r - 1\n\nprint(main())\n\n\n", "n, h = map(int, input().split())\nA = list(map(int, input().split()))\nbot = []\nfor i in range(n):\n    cnt = 0\n    bot.append(A[i])\n    bot.sort(reverse=True)\n    for iq in range(0, len(bot), 2):\n        cnt += bot[iq]\n    if cnt > h:\n        print(i)\n        return\nprint(n)", "def f(a):\n    a.sort()\n    ans = 0\n    for i in range(len(a) - 1, -1, -2):\n        ans += a[i]\n    return ans\n\nn, h = list(map(int, input().split()))\na = list(map(int, input().split()))\nans = 0\nfor i in range(1,n + 1):\n    b = a[:i].copy()\n    x = f(b)\n    if (x <= h):\n       ans = i\nprint(ans)\n", "n, h = list(map(int, input().split()))\na = list(map(int, input().split()))\n\n\ndef can(mid):\n    val = sum(sorted(a[:mid])[::-2])\n    return val <= h\n\n\nle = 1\nrg = n + 1\n\nwhile rg - le > 1:\n    mid = (le + rg) // 2\n\n    if can(mid):\n        le = mid\n    else:\n        rg = mid\n\nprint(le)\n", "n,h=map(int,input().split())\nl=list(map(int,input().split()))\nans=0\nfor i in range(n):\n         curr=0\n         ls=sorted(l[:i+1])\n         for j in range(i,-1,-2):\n                  curr+=ls[j]\n         if(curr>h):\n                  break\n         else:\n                  ans=i\nprint(ans+1)", "import bisect\na = []\nn, h = list(map(int, input().split()))\nk = 0\nfor ai in input().split():\n    bisect.insort(a, int(ai))\n    if sum(a[::-2]) > h:\n        break\n    k += 1\nprint(k)\n", "n,h=[int(x) for x in input().split()]\nc=[int(x) for x in input().split()]\nanswer=0\nfor i in range(1,n+1):\n    a=c[:i]\n    a.sort(reverse=True)\n    summa=0\n    for item in range(0,i,2):\n        summa+=a[item]\n    if summa>h:\n        print(answer)\n        break\n    else:\n        answer=i\nelse:\n    print(answer)\n", "3\n\ndef can(a, h):\n    a.sort(reverse=True)\n    cur = 0\n    for i in range(0, len(a), 2):\n        cur += a[i]\n    return cur <= h\n\n\nn, h = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nlt, rt = 0, n + 1\nwhile lt < rt - 1:\n    mid = (lt + rt) // 2\n    if can(a[:mid], h):\n        lt = mid\n    else:\n        rt = mid\n\nprint(lt)\n", "from sys import stdin, stderr\n\nn, h = list(map(int, stdin.readline().split()))\na = list(map(int, stdin.readline().split()))\n\ndef ok(k):\n    b = list(sorted(a[:k],reverse=True))\n    t = sum(b[::2])\n    # print(k, t, b, file=stderr)\n    return t <= h\n\nl = 0\nr = n + 1\nwhile r - l > 1:\n    mid = (l + r) // 2\n    if ok(mid):\n        l = mid\n    else:\n        r = mid\nprint(l)\n", "n, k = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\n\nheights = []\nok= 0\nfor jj in range(n+1):\n    heights = sorted(A[:jj], reverse=True)\n    totalheight = 0\n    for i in range(len(heights)):\n        if i&1:\n            continue\n        else:\n            totalheight+=heights[i]\n    \n    #print('at jj',jj, totalheight)\n    if totalheight <= k:\n        ok = jj\n    else:\n        break\nprint(ok)\n", "N,H = list(map(int,input().split()))\nA = list(map(int,input().split()))\n\ndef isok(k):\n    if k==0: return True\n    sa = list(sorted(A[:k],reverse=True))\n    h = 0\n    for a in sa[::2]:\n        h += a\n        if h > H: return False\n    return True\n\nok = 0\nng = N+1\nwhile ng-ok > 1:\n    m = (ok+ng)//2\n    if isok(m):\n        ok = m\n    else:\n        ng = m\nprint(ok)\n", "n,h = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ndef check(k):\n    if k == 0:\n        return True\n    ar = a[:k]\n    ar = sorted(ar, key=lambda x: -x)\n    s = 0\n    for i in range((k+1)//2):\n        m = ar[2*i]\n        s += m\n    return s <= h\n\nl = 0\nr = len(a)\nans = 0\nwhile r >= l:\n    m = (r+l)//2\n    if check(m):\n        ans = max(ans, m)\n        l = m+1\n    else:\n        r = m-1\nprint(ans)\n", "def can_arrange(heights, h):\n\theights = sorted(heights, reverse=True)\n\tth = 0\n\tfor i in range(0, len(heights), 2):\n\t\tth += heights[i]\n\treturn th <= h\n\nn, h = (int(x) for x in input().split())\nidx___height = [int(x) for x in input().split()]\n\nl_cl = 0\nr_op = n + 1\n\nwhile r_op - l_cl > 1:\n\tm = (l_cl + r_op) // 2\n\tif can_arrange(idx___height[:m], h):\n\t\tl_cl = m\n\telse:\n\t\tr_op = m\nprint(l_cl)", "n, h = map(int, input().split())\na = [int(_) for _ in input().split()]\nres = 1\nfor k in range(n):\n    part = a[:k + 1]\n    part.sort()\n    ans, ans2 = 0, 0\n    if len(part) & 1:\n        for i in range(0, k + 1, 2):\n            ans += part[i]\n        for i in range(1, k + 1, 2):\n            ans2 += part[i]\n        ans2 += part[-1]\n        ans = min(ans, ans2)\n    else:\n        for i in range(1, k + 1, 2):\n            ans += part[i]\n    # print(part, ans)\n    if ans <= h:\n        res = max(res, len(part))\n    else:\n        break\nprint(res)", "n, h = list(map(int, input().split()))\na = list(map(int, input().split()))\nl, r = 1, n + 1\nwhile l + 1 < r:\n\tmid = (l + r) >> 1\n\tc = sorted(a[:mid], reverse=True)\n\tif sum(c[i] for i in range(len(c)) if (i & 1) == 0) <= h:\n\t\tl = mid\n\telse:\n\t\tr = mid\nprint(l)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nn, h = map(int, input().split())\narr = list(map(int, input().split()))\n\nuse = []\nfor i in range(n):\n    use.append(arr[i])\n    use.sort()\n    real_use = use[-1:-(i + 2):-2]\n    #print(real_use)\n    if sum(real_use) > h:\n        print(i)\n        return\nprint(n)", "n, h = map(int, input().split())\nc = list(map(int, input().split()))\ni = n\nc2 = sorted(c)\nif i % 2 == 1:\n    s = sum(c2[0:i:2])\nelse:\n    s = sum(c2[1:i:2])\nwhile s > h:\n    i -= 1\n    c = c[:i]\n    c2 = sorted(c)\n    if i % 2 == 1:\n        s = sum(c2[0:i:2])\n    else:\n        s = sum(c2[1:i:2])\nprint(i)", "from collections import defaultdict as DD\nfrom bisect import bisect_left as BL\nfrom bisect import bisect_right as BR\nfrom itertools import combinations as IC\nfrom itertools import permutations as IP\nfrom random import randint as RI\nimport sys\nMOD=pow(10,9)+7\n\ndef IN(f=0):\n    if f==0:\n        return ( [int(i) for i in sys.stdin.readline().split()] )\n    else:\n        return ( int(sys.stdin.readline()) )\n\nn,k=IN()\na=IN()\n\nT=[]\nM=n\nfor i in range(n):\n    j=BL(T,a[i])\n    T[j:j]=[a[i]]\n    f=0\n    m=0\n    for g in range(len(T)-1,-1,-2):\n        m+=T[g]\n    if m>k:\n        M=i\n        break\nprint(M)\n        \n        \n    \n", "#print('HARE KRISHNA')\ndef I():\n    return int(input())\ndef IL():\n    return list(map(int,input().split()))\ndef IM():\n    return map(int,input().split())\ndef IS():\n    return input()\ndef ISL():\n    return list(input())\nn,h=IM()\nl=IL()\ndef can_put(mi):\n    if mi==0:\n        return l[0]<=h \n    z=sorted(l[0:mi+1])\n    req=0 \n    if mi%2==0:\n        req+=z[0]\n        for i in range(1,mi+1,2):\n            req+=max(z[i],z[i+1])\n        #req+=z[mi-1]\n    else:\n        for i in range(0,mi+1,2):\n            req+=max(z[i],z[i+1])\n    #print(z,req)\n    return req<=h \nlo=0 \nhi=n-1 \nans=0 \nwhile lo<=hi:\n    mi=(lo+hi)>>1 \n    if can_put(mi):\n        ans=mi\n        lo=mi+1 \n    else:\n        hi=mi-1 \nprint(ans+1)", "n, h = list(map(int,input().split()))\nl = list(map(int,input().split()))\ndef poss(k):\n\ttab = sorted(l[:k])\n\tsuma = 0\n\ti = k - 1\n\twhile i >= 0:\n\t\tsuma += tab[i]\n\t\ti -= 2\n\tif suma > h:\n\t\treturn False\n\treturn True\nlo = 0\nhi = n\nkand = 0\nwhile True:\n\tif (poss((lo + hi) // 2)):\n\t\tlo = ((lo + hi) // 2)\n\telse:\n\t\thi = ((lo + hi) // 2)\n\tif abs(lo-hi) < 2:\n\t\tkand = lo\n\t\tbreak\nif poss(kand + 1):\n\tprint(kand +1)\nelse:\n\tprint(kand)", "n,h = list(map(int,input().split()))\nbottles = list(map(int,input().split()))\n\n# low = 2\n# end = n\n# middle = low + (end-low) // 2\n\nout = 0\nfor middle in range(n,-1,-1):\n#while low<=end:\n    choice = bottles[:middle]\n    choice = sorted(choice,reverse=True)\n    total_bottles = 0\n    current_h = 0\n    i = 0\n    while i<middle and (current_h+choice[i])<=h:\n        current_h += choice[i]\n        i+=2\n        total_bottles+=2\n    total_bottles = min(total_bottles,middle)\n    if total_bottles == middle:\n        print (total_bottles)\n        break\n#     if total_bottles<middle:\n#         end = middle-1\n#         middle = low + (end-low) // 2\n#     else:\n#         low = middle+1\n#         middle = low + (end-low) // 2\n#         out = total_bottles\n# print (out)\n", "import sys\n\nn, h = map(int,input().split())\nl = list(map(int,sys.stdin.readline().split()))\nc = l.copy()\ni=0\nc.sort(reverse=True)\nT = float('infinity')\nwhile T > h:\n\tT = sum([ c[k] for k in range(0,n-i,2) ])\n\tc.pop(c.index(l[-i-1]))\n\ti+=1\nprint(n+1-i)"]