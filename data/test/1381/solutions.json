["k, n, s, p = list(map(int, input().split()))\n\nx = (n + s - 1) // s\ny = k * x\nz = (y + p - 1) // p\n\nprint(z)\n", "k, n, s, p = map(int, input().split())\nprint(((n + s - 1) // s * k + p - 1) // p)", "k, n, s, p = map(int, input().split())\nperson = (n - 1) // s + 1\nal = person * k\npack = (al - 1) // p + 1\nprint(pack)", "k, n, s, p = map(int, input().split())\nx = (n + s - 1) // s\nprint((x * k + p -1) // p)", "k, n, s, p  = list(map(int, input().split()))\nsheets_per_person = (n+s-1)//s\nsheets = sheets_per_person*k\nprint((sheets+p-1)//p)\n", "from math import ceil\n\nk, n, s, p = [int(i) for i in input().split()]\nprint(ceil(ceil(n / s) * k / p))", "from math import ceil\nk, n, s, p = list(map(int, input().split()))\np_per_person = ceil(n / s)\nn_s = k * p_per_person\nans = ceil(n_s/p)\nprint(ans)", "def inp():\n    return list(map(int, input().split()))\ndef li():\n    return list(inp())\nk, n, s, p = inp()\nprint((k * ((n + s - 1) // s) + p - 1) // p)\n", "k, n, s, p = list(map(int, input().split()))\n\none = (n + s - 1) // s\nprint((one * k + p - 1) // p)\n", "k,n,s,p = map(int,input().split())\nq = n//s\nif (n%s):\n    q+=1\nq *= k\nw = q // p\nif (q%p):\n    w+=1\nprint(w)", "#!/usr/bin/env python3\n\n[k, n, s, p] = list(map(int, input().strip().split()))\n\ndef ceil(a, b):\n\treturn -((-a) // b)\n\nprint(ceil(k * ceil(n, s), p))\n", "k,n,s,p = map(int,input().split())\nt = n // s + bool(n % s)\nprint(k * t // p + bool(k * t % p))", "import math\n\nk, n, s, p = list(map(int, input().split()))\n\nprint(math.ceil((k * math.ceil(n / s)) / p))\n", "import math\nk,n,s,p=list(map(int,input().split()))\nprint(int(math.ceil(k*math.ceil(n/s) /p)    ))\n", "import math\nk,n,s,p=map(int,input().split(' '))\nans=math.ceil(k*(math.ceil(n/s))/p)\nprint(ans)", "from math import ceil\n\nk, n, s, p = list(map(int, input().split()))\n\nprint(ceil(k * ceil(n / s) / p))\n", "from math import ceil\nk,n,s,p=[int(i)for i in input().split()]\nx = ceil(n/s)\nprint(ceil((x * k)/p))", "k, n, s, p = [int(x) for x in input().split()]\n\nlists = n // s + (0 if n % s == 0 else 1)\n\nneeded = k * lists\n\nprint(needed // p + (0 if needed % p == 0 else 1))", "import sys\nimport math\n\nk, n, s, p = list(map(int,sys.stdin.readline().strip().split(' ')))\n#int(sys.stdin.readline().strip())\n#arr = list(map(int,sys.stdin.readline().strip().split(' ')))\n\nprint(math.ceil((k * math.ceil(n/s))/p))", "import math\n\n\nk, n, s, p = [int(x) for x in input().strip().split(\" \")]\n\nnospp = math.ceil(n/s)\nts = k*nospp\nprint(math.ceil(ts/p))", "from math import ceil\n\nk, n, s, p = map(int, input().split())\n\nl = ceil(n / s)\n\nt = int(ceil(k * l/p))\n\nprint(t)", "k, n, s, p = (int(i) for i in input().split())\n\nL = k * (n // s + int(bool(n % s)))\n\nprint(L // p + int(bool(L % p)))\n", "from math import ceil\n\nk, n, s, p = map(int, input().split())\n\nprint(ceil((ceil(n/s) * k) / p))", "from sys import stdin, stdout\nfrom math import factorial\nfrom math import log10\n\n\nk, n, s, p = map(int, stdin.readline().split())\n\nl, r = 0, 10 ** 9\nwhile r - l > 1:\n    m = (l + r) >> 1\n    v = (m * p) // k\n    \n    \n    if v * s >= n:\n        r = m\n    else:\n        l = m\n    \n\nstdout.write(str(r))", "import math\n\nk, n, s, p = [int(x) for x in input().split()]\n\nprint( int(math.ceil(math.ceil(n/s) * k/p) ))\n"]