["withFile = 0\n\nif(withFile == 1):\n    fin     = open('input.txt', 'r')\n    fout    = open('output.txt', 'w')\n\ndef getl():\n    if(withFile == 0):\n        return input()\n    else:\n        return fin.readline()\ndef printl(s):\n    if(withFile == 0):\n        print(s)\n    else:\n        fout.write(str(s))\ndef get_arr():\n    x = getl().split(' ')\n    if(x[-1] == ''):\n        x = x[:-1]\n    return list(map(int, x))\n\nl = get_arr()[0]\nb = get_arr()[0]\nc = get_arr()[0]\nt = l / (1.00 * b + c)\nprint(t*b)\n\n\nif(withFile == 1):\n    fin.close()\n    fout.close()", "length = int(input())\np = int(input())\nq = int(input())\nprint((length)/(p+q)*p)\n", "n = int(input())\na = int(input())\nb = int(input())\nt = n/(a+b)\nprint(a*t)\n", "n = int(input())\np = int(input())\nq = int(input())\nprint(p*n/(p+q))\n\n", "import sys\n\n\n#sys.stdin = open(\"input.txt\")\n#sys.stdout = open(\"output.txt\", \"w\")\n\nl = int(input())\np = int(input())\nq = int(input())\n\nfirst_t = l / (p + q)\nprint(p * first_t) ", "l=int(input())\np=int(input())\nq=int(input())\nprint(p*l/(p+q))", "l = int(input())\np = int(input())\nq = int(input())\nprint(l * p / (q + p))", "L = int(input())\na, b = int(input()), int(input())\nprint(L * a / (a + b))\n", "3\n\nl = int(input())\np = int(input())\nq = int(input())\nprint (p*l/(p+q))", "l = int(input())\np = int(input())\nq = int(input())\n\nprint(p / (p + q) * l)", "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:fenc=utf-8\n#\n# Copyright \u00a9 2015 missingdays <missingdays@missingdays>\n#\n# Distributed under terms of the MIT license.\n\na = int(input())\nb = int(input())\nc = int(input())\n\nd = b + c\n\nprint(a * b / d)\n", "l = int(input())\np = int(input())\nq = int(input())\nprint(l * p / float(p + q))", "n = int(input())\np = int(input())\nq = int(input())\nt = n / (p + q)\nprint(p * t)\n", "l=int(input())\np=int(input())\nq=int(input())\nt=l/(p+q)\nprint(t*p)", "l = int( input() )\np = int( input() )\nq = int( input() )\n\nans = l * p / ( p+q )\nprint( ans )\n", "s = int(input())\nv1 = int(input())\nv2 = int(input())\n\ns1 = s*v1\ns1 = s1 / (v1+v2)\nprint(s1)\n", "n = int(input())\na = int(input())\nb = int(input())\nprint((n/(a+b))*a)", "l = int(input())\np = int(input())\nq = int(input())\n\nprint(l * p / (p + q))\n", "l = int(input())\np=int(input())\nq = int(input())\nt = l/(p+q)\nprint(p*t)", "l=int(input())\np=int(input())\nq=int(input())\nprint(l/(p+q)*p)", "l = int(input())\np = int(input())\nq = int(input())\n\n\n\nres = l * (p/(p+q))\n\nprint(res)\n", "#In the name of Allah\n\nfrom sys import stdin, stdout\ninput = stdin.readline\n\nl = int(input())\np = int(input())\nq = int(input())\n\nstdout.write(str(p * q * l / (q) / (q + p)))\n", "import sys\nfrom collections import deque\nread = lambda: list(map(int, sys.stdin.readline().split()))\n\nl,= read()\np, = read()\nq, = read()\nprint(l*p/(p+q))\n\n", "from math import sqrt, pow, log, log2, log10, exp\nfrom copy import deepcopy\nfrom fractions import gcd\n\n\ndef read_ints():\n    return list(map(int, input().split()))\n\n\ndef read_int():\n    return read_ints()[0]\n\n\ndef read_floats():\n    return list(map(float, input().split()))\n\n\ndef read_float():\n    return read_floats()[0]\n\n\ndef format_list(l):\n    return ' '.join(list(map(str, l)))\n\n\ndef one_dim_array(n, value=0):\n    return [deepcopy(value) for x in range(n)]\n\n\ndef two_dim_array(n, m, value=0):\n    return [[deepcopy(value) for x in range(m)] for x in range(n)]\n\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, sqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef max_len_sublist(l, f):\n    start, max_length, length = 0, 0, 0\n    for i in range(1, len(l)):\n        if f(l[i], l[i - 1]):\n            length += 1\n        else:\n            if max_length < length:\n                start = i - length\n                max_length = length\n            length = 0\n    return start, max_length\n\n\ndef tf_to_yn(b):\n    return 'YES' if b else 'NO'\n\n\ndef longest_non_descent_subsequence(s, restore_sequence=False):\n    d = one_dim_array(len(s), 0)\n    for i in range(len(s)):\n        possible = [d[j] + 1 if s[j] <= s[i] else 1 for j in range(i)]\n        d[i] = 1 if len(possible) == 0 else max(possible)\n\n    if not restore_sequence:\n        return d[-1] if len(d) != 0 else 0\n\n\nl = read_int()\np = read_int()\nq = read_int()\nt = l / (p + q)\nprint(t*p)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nl = int(input())\np = int(input())\nq = int(input())\nprint(\"{0:.9f}\".format(l * p / (p + q)))\n"]