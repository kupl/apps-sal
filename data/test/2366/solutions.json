["n=int(input())\na=list(map(int,input().split()))\nl=[0]*(n+1)\nl2=[0]*(n+1)\nfor i in a:\n    l[i]+=1\n\nfor i in range(1,n+1):\n    l2[i]=l[i]*(l[i]-1)//2\nsum_l=sum(l2)\nfor i in range(1,n+1):\n    print((sum_l-(l[a[i-1]]-1)))\n", "from collections import Counter\n\nn = int(input())\ndef kC2(k):\n  return k * (k - 1) // 2\nA = list(map(int, input().split()))\nAC = Counter(A)\ntotal = sum(kC2(v) for v in AC.values())\nprint(*[total - kC2(AC[a]) + kC2(AC[a] - 1) for a in A], sep='\\n')", "n = int(input())\na = list(map(int,input().split()))\nseisu = [0]*n\nsum = 0\n\nfor i in range(n) :\n    seisu[a[i]-1] += 1\n\nfor i in range(n) :\n    sum += seisu[i]*(seisu[i]-1)//2\n\nfor i in range(n) :\n    if seisu[a[i]-1] >= 2 :\n        ans = sum - seisu[a[i]-1]*(seisu[a[i]-1]-1)//2 + (seisu[a[i]-1]-1)*(seisu[a[i]-1]-2)//2\n    else :\n        ans = sum\n    print(ans)\n", "from collections import Counter\nfrom math import factorial\n\n\ndef nCr(n, r):\n    return factorial(n) // (factorial(n - r) * factorial(r))\n\n\nn = int(input())\nA = list(map(int, input().split()))\nC = Counter(A)\nD = dict()\ns = 0\nfor a in set(A):\n    c = C[a]\n    if c > 1:\n        x = nCr(c, 2)\n        s += x\n        if c > 2:\n            D[a] = (x, nCr(c - 1, 2))\n        else:\n            D[a] = (x, 0)\n    else:\n        D[a] = (0, 0)\n\nfor a in A:\n    t = D[a]\n    print((s - t[0] + t[1]))\n", "\"\"\" \u30b9\u30cb\u30da\u30c3\u30c8 \"\"\"\ndef get_int():\n\treturn int(input())\n\ndef get_ints():\n\treturn list(map(int, input().split()))\n\"\"\" \u30b9\u30cb\u30da\u30c3\u30c8 \"\"\"\nimport math\n# 2\u3064\u9078\u3076\u901a\u308a\u6570\u3092\u7b97\u51fa nC2\ndef choose2(n):\n    return n*(n-1)//2\n# \u30a4\u30f3\u30d7\u30c3\u30c8\nN = get_int()\nAn = get_ints()\n\"\"\" \u5168\u3066\u306e\u8981\u7d20\u304b\u30892\u3064\u306e\u30dc\u30fc\u30eb\u3092\u9078\u3076\u901a\u308a\u6570\u3092\u6c42\u3081\u308b \"\"\"\nuni = [0] * (N+1)\n# \u30e6\u30cb\u30fc\u30af\u6570\u306e\u914d\u5217\u3092\u6c42\u3081\u308b\nfor i in range(N):\n    uni[An[i]] += 1\nsumWay = 0\n# \u5404\u6570\u5024\u306e2\u901a\u308a\u306e\u9078\u629e\u901a\u308a\u6570\u3092\u8db3\u3057\u3066\u3044\u304f\nfor i in range(N + 1):\n    sumWay += choose2(uni[i])\n\"\"\" \u5168\u3066\u306e\u8981\u7d20\u6570 - \u524a\u9664\u3059\u308b\u8981\u7d20\u306e\u901a\u308a\u6570 + \u524a\u9664\u3059\u308b\u8981\u7d20\u3092\u5f15\u3044\u305f\u969b\u306e\u901a\u308a\u6570 \u3092\u6c42\u3081\u308b \"\"\"\nfor i in range(N):\n    print((sumWay - choose2(uni[An[i]]) + choose2(uni[An[i]]-1))) \n\n", "N=int(input())\nA=list(map(int,input().split()))\nd=dict()\nfor i in range(N):\n    if A[i] not in d:\n        d[A[i]]=0\n    d[A[i]]+=1\nx=sum(x*(x-1)//2 for x in list(d.values()))\nfor i in range(N):\n    y=d[A[i]]\n    print((x-y*(y-1)//2+(y-1)*(y-2)//2))\n", "n = int(input())\nA = list(map(int, input().split()))\nd = {}\nfor a in A:\n    d[a] = d.get(a, 0)+1\n\ncomb = []\nfor i in d:\n    if d[i]>1:\n        comb.append(d[i]*(d[i]-1)//2)\ns = sum(comb)\nkeys = list(d.keys())\nfor a in A:\n    ans = s - d[a]*(d[a]-1)//2 + (d[a]-1)*(d[a]-2)//2\n    print(ans)", "N=int(input())\nA=[int(x) for x in input().split()]\nnumdict=dict()\nfor h in range(N):\n    if A[h] in numdict.keys():\n        numdict[A[h]]+=1\n    else:\n        numdict[A[h]]=1\nall_select_two=0\nfor i in numdict.keys():\n    value=numdict[i]\n    all_select_two+=value*(value-1)//2\nans=0\nfor k in range(N):\n    j=A[k]\n    value=numdict[j]\n    ans=all_select_two-value+1\n    print(ans)", "import collections\ndef resolve():\n    n = int(input())\n    a = tuple(map(int,input().split()))\n    A = collections.Counter(a)\n    cnt_0 = 0\n    for i in A.values():\n        cnt_0 += int(i*(i-1)/2)\n    for i in a:\n        cnt_1 = A[i]-1\n        print(cnt_0-cnt_1)\nresolve()", "n=int(input())\na=list(map(int,input().split()))\nx=[0]*(n+1)\nfor i in a :\n    x[i]+=1\n\n\nans=0\nfor i in x :\n    n=i\n    ans+=n*(n-1)//2\n\nfor i in a :\n    n=x[i]\n    ans1=ans-(n-1)\n    print(ans1)\n", "import math\nimport sys\n##### graph implementation with adjacancy list#####\nclass Graph:\n    def __init__(self,Nodes,is_directed=False):\n        self.nodes=Nodes\n        self.adj_list={}\n        self.is_directed=is_directed\n \n        for node in self.nodes:\n            self.adj_list[node]=[]\n            \n    def add_edge(self,u,v):\n        self.adj_list[u].append(v)\n        if self.is_directed==False:\n            self.adj_list[v].append(u)\n \n    def print_graph(self):\n        for node in self.nodes:\n            print((node,\"->\",self.adj_list[node]))\n \n    def degree_node(self,node):\n        return len(self.adj_list[node])\n \n    def dfsUTIL(self,v,visited,parents=[]):\n        #print(v,end=\" \")\n        visited[v]=True\n        for i in self.adj_list[v]:\n            if visited[i]==False:\n                self.dfsUTIL(i,visited,parents)\n                parents.append(i)        \n    \n    def dfs(self,v):\n        visited=[False]*(max(self.adj_list)+1)\n        parents=[v]\n        self.dfsUTIL(v,visited,parents)\n        return len(parents)\n        \n#####sorting a dictionary by the values#####\ndef dict_sort(ans):\n    ans=sorted(list(ans.items()),reverse=True,key=lambda kv:(kv[1]))\n    \n##### naive method for testing prime or not O(n^.5)#####\ndef is_prime(n):\n    if n==1:\n        return 0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n\n#####swap function#####\ndef swap(a,b):\n    temp=a\n    a=b\n    b=temp\n    return a,b\n\n#####Primes till Nth O(n)#####\ndef seive_primes(n):\n    flag=[0]*(n+10)\n    flag[1]=flag[0]=1\n    i=2\n    while i*i<=n+1:\n        if flag[i]==0:\n            j=i*i\n            while j<=n+1:\n                flag[j]=1\n                j+=i\n        i+=1\n    return flag\n\n#####all the prime factors of a number#####\ndef factors(n):\n    d={}\n    while(n%2==0):\n        if 2 in d:\n            d[2]+=1\n        else:\n            d[2]=1\n        n/=2\n    for i in range(3,int(n**0.5)+1,2):\n        while(n%i==0):\n            if i in d:\n                d[i]+=1\n            else:\n                d[i]=1\n            n/=i\n    n=int(n)\n    if n>1:\n        d[n]=1\n    return d\n\n#####greatest common divisor of two numbers#####\ndef gcd(a,b):\n    if b==0:\n        return a\n    return gcd(b,a%b)\n\n#####least common multiplyer of two numbers#####\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\n\n#####function that return all the letters#####\ndef alphabates():\n    return \"abcdefghijklmnopqrstuvwxyz\"\n\n#####binary search O(logN)#####\ndef binary_search(ls,n,flag):\n    low=0\n    hi=n-1\n    while(low<=hi):\n        mid=(low+hi)//2\n        if ls[mid]==flag:\n            return mid\n        elif ls[mid]>flag:\n            hi=mid-1\n        else:\n            low=mid+1\n    return -1\n\n#####quadratic roots#####\ndef qdrt(a,b,c):\n    chk=b*b-4*a*c\n    if chk>=0:\n        ans1=(-b+chk**0.5)/(2*a)\n        ans2=(-b-chk**0.5)/(2*a)\n        return [int(ans1),int(ans2)]\n    return -1\n#####permutations#####\ndef permutation(n,r):\n    if n<r:\n        return 0\n    ans=1\n    for i in range(n-r+1,n+1):\n        ans*=i\n    return ans\n\n#####combinations#####\ndef combination(n,r):\n    if n<r:\n        return 0\n    ans=1\n    for i in range(r):\n        ans*=(n-i)\n    div=1\n    for i in range(2,r+1):\n        div*=i\n    return ans//div\n\n#####sum till nth#####\ndef sumn(n):\n    return (n*(n+1))//2\n        \n#####taking an array/list as input#####\ndef arrinp():\n    ls=list(map(int,input().split()))\n    return ls\n\n#####taking multiple inputs#####\ndef mult_inp():\n    return list(map(int,input().split()))\n\n#####Main function starts from here#####\ndef main():\n    n=int(input())\n    ls=arrinp()\n    occur={}\n    for i in ls:\n        if i in occur:\n            occur[i]+=1\n        else:\n            occur[i]=1\n    d={}\n    for i in occur:\n        d[i]=sumn(occur[i]-1)\n\n    total=sum(d.values())\n    for i in ls:\n        print((total-d[i]+sumn(occur[i]-2)))\n            \ndef __starting_point():\n    main()\n    \n\n    \n    \n    \n            \n    \n    \n\n__starting_point()", "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\ncnt = Counter(a)\ndic = dict()\nfor k, v in cnt.items():\n    dic[k] = v*(v-1)//2\nres = sum(dic.values())\nfor ai in a:\n    print(res - dic[ai] + int(dic[ai] * (cnt[ai] - 2) / cnt[ai]))", "n = int(input())\na = [int(i) for i in input().split()]\ndic = {}\nfor i in range(n):\n  dic[i+1] = 0\nfor ai in a:\n  dic[ai] += 1\ncnt = 0\nfor di in dic:\n  cnt += dic[di] * (dic[di] - 1) // 2\nfor i in range(n):\n  print(cnt - dic[a[i]] * (dic[a[i]] - 1) // 2 + (dic[a[i]] - 2) * (dic[a[i]] - 1) // 2)", "from collections import Counter\n\nn = int(input())\na_array = list(map(int, input().split()))\na_counter = Counter(a_array)\ncount_max = max(a_counter.values())\n\ndef nC2(n):\n    return n * (n - 1) // 2\n\nnc2_array = [0] * (count_max + 1)\nsum_comb = 0\nfor a, count in a_counter.items():\n    comb = nC2(count)\n    sum_comb += comb\n    nc2_array[count] = comb\n    nc2_array[count - 1] = nC2(count - 1)\n\nfor a in a_array:\n    a_count = a_counter[a]\n    ans = sum_comb - nc2_array[a_count] + nc2_array[a_count - 1]\n    print(ans)", "from collections import Counter\n\nn = int(input())\nal = list(map(int, input().split()))\nc = Counter(al)\n\nans = 0\nfor k, v in c.items():\n    ans += v*(v-1)//2\n\nfor a in al:\n    b = c[a]\n    print(ans - b*(b-1)//2 + (b-1)*(b-2)//2)", "\"\"\" \u30b9\u30cb\u30da\u30c3\u30c8 \"\"\"\ndef get_int():\n\treturn int(input())\n\ndef get_ints():\n\treturn list(map(int, input().split()))\n\"\"\" \u30b9\u30cb\u30da\u30c3\u30c8 \"\"\"\nimport math\n# 2\u3064\u9078\u3076\u901a\u308a\u6570\u3092\u7b97\u51fa nC2\ndef choose2(n):\n    return math.floor(n*(n-1)/2)\n\n# \u30a4\u30f3\u30d7\u30c3\u30c8\nN = get_int()\nAn = get_ints()\n\"\"\" \u5168\u3066\u306e\u8981\u7d20\u304b\u30892\u3064\u306e\u30dc\u30fc\u30eb\u3092\u9078\u3076\u901a\u308a\u6570\u3092\u6c42\u3081\u308b \"\"\"\nuni = [0] * (N+1)\n# \u30e6\u30cb\u30fc\u30af\u6570\u306e\u914d\u5217\u3092\u6c42\u3081\u308b\nfor i in range(N):\n    uni[An[i]] += 1\nsumWay = 0\n# \u5404\u6570\u5024\u306e2\u901a\u308a\u306e\u9078\u629e\u901a\u308a\u6570\u3092\u8db3\u3057\u3066\u3044\u304f \u3053\u3053\u306eindex=0\u304c\u3044\u3089\u306a\u3044\nfor i in range(N+1):\n    sumWay += choose2(uni[i])\n\"\"\" \u5168\u3066\u306e\u8981\u7d20\u6570 - \u524a\u9664\u3059\u308b\u8981\u7d20\u306e\u901a\u308a\u6570 + \u524a\u9664\u3059\u308b\u8981\u7d20\u3092\u5f15\u3044\u305f\u969b\u306e\u901a\u308a\u6570 \u3092\u6c42\u3081\u308b \"\"\"\nfor i in range(N):\n    print(sumWay - choose2(uni[An[i]]) + choose2(uni[An[i]]-1)) ", "n = int(input())\nlst = [ int(i) for i in input().split() ]\n\nvisited = {}\n\nfor d in lst:\n  if d in visited.keys():\n    visited[d] += 1\n  else:\n    visited[d] = 1\ncount = 0\nfor d in visited.keys():\n  count += int(visited[d]*(visited[d]-1)/2)\nfor d in lst:\n  v = visited[d] - 1\n  ans = count - v\n  print(ans)", "import math\n\n\ndef combination(n, r):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\ndef count_list(lst):\n    count_lst = [0] * (max(lst) + 1)\n\n    for i in lst:\n        count_lst[i] += 1\n\n    return count_lst\n\n\ndef main():\n    n = int(input())\n    a_lst = list(map(int, input().split()))\n    lst1 = count_list(a_lst)\n    lst2 = [0] * len(lst1)\n    for i in range(len(lst1)):\n        lst2[i] = combination(lst1[i], 2)\n    tmp = sum(lst2)\n\n    for i in range(n):\n        a = a_lst[i]\n        print(tmp - (lst1[a] - 1))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\na = list(map(int,input().split()))\n\ns = [0]*(n+1)\nfor x in a:\n    s[x] += 1\n    \n\np = 0\nfor i in range(1,n+1):\n    if s[i] >= 2:\n        p += s[i]*(s[i]-1)//2\n\nfor i in range(n):\n    ans = p - s[a[i]]*(s[a[i]]-1)//2 + (s[a[i]]-2)*(s[a[i]]-1)//2\n    print(ans)", "from collections import Counter\nimport math\n\ndef combinations_count(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\nn=int(input())\na=list(map(int,input().split()))\nc=Counter(a)\ncom=0\nfor i in range(1,n+1):\n    if(c[i]<=1):\n        continue\n    com+=combinations_count(c[i],2)\nfor k in range(1,n+1):\n    ans=com\n    ans-=c[a[k-1]]-1\n    print(ans)", "from scipy.special import comb\n\nn = int(input())\nl = list(map(int, input().split()))\n\nflg = [0 for i in range(2*10**5+1)]\nflg2 = [0 for j in range(2*10**5+1)]\n\nfor i in l:\n    flg[i] += 1\ns = 0\n# for i in range(1, n+1):\n#     flg2[i] += comb(flg[i]-1, 2) - comb(flg[i], 2)\n#     s += comb(flg[i], 2)\nfor i in range(1, n+1):\n    flg2[i] += (flg[i]-1) * (flg[i]-2) / 2 - flg[i] * (flg[i]-1) / 2\n    s += flg[i] * (flg[i]-1) / 2\nfor i in l:\n    print(int(s + flg2[i]))", "import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\nimport numpy as np\nfrom collections import Counter,defaultdict\ndef main():\n    n, *a = map(int, read().split())\n    aa = Counter(a)\n    d1 = defaultdict(int)\n    d2 = defaultdict(int)\n    for k, v in aa.items():\n        d1[k] = v * (v - 1) // 2\n        v -= 1\n        d2[k] = v * (v - 1) // 2\n    sumd1 = sum(d1.values())\n    for ae in a:\n        r = sumd1 - d1[ae] + d2[ae]\n        print(r)\n\ndef __starting_point():\n    main()\n__starting_point()", "n = int(input())\na = list(map(int,input().split()))\nlst = [0]*(max(a)+1)\n\nfor i in a:\n    lst[i] += 1\n\nnum_lst = [0]*(max(a)+1)\nfor i in range(1,max(a)+1):\n    if not lst[i] in [0,1]:\n        num_lst[i] = lst[i]*(lst[i]-1)//2\nans = sum(num_lst)\n\nfor i in a:\n    if lst[i] in [0,1]:\n        print(ans)\n    else:\n        print(ans-num_lst[i]+((lst[i]-1)*(lst[i]-2)//2))", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Sep  7 22:04:16 2020\n\n@author: liang\n\"\"\"\n\nN = int(input())\nA = [int(x) for x in input().split()]\nd = [0]*N\n\nfor a in A:\n    d[a-1] += 1\n#print(d)\nscore = 0\nfor  a in d:\n    score += a*(a-1)//2\n#print(score)\nfor a in A:\n    print(score - d[a-1] + 1)", "n=int(input())\nl=list(map(int,input().split()))\nx=[0]*n\nfor i in range(n):\n  x[l[i]-1]+=1\nd=0\nfor i in range(n):\n  d=d+x[i]*(x[i]-1)//2\n\nfor i in range(n):\n  b=d-(x[l[i]-1]-1)\n  print(b)\n    \n", "N=int(input())\ns=0\nA=list(map(int,input().split()))\nli=[0]*(2*(10**5)+1)\nfor i in range(N):\n    li[A[i]]+=1\nfor j in range(N+1):\n    s+=li[j]*(li[j]-1)//2\nfor k in range(N):\n    print((s-li[A[k]]+1))\n", "def f():\n  n = int(input())\n  *li,=list(map(int, input().split()))\n  from collections import Counter\n  c = Counter()\n  for i in li:\n    c[i] += 1\n  ans=0\n  from math import comb\n  for i in list(c.values()):\n    ans += comb(i, 2)\n  for i in li:\n    print((ans - comb(c[i], 2) + comb(c[i]-1, 2)))\nf()\n", "from copy import copy\nfrom collections import Counter\nfrom scipy.special import comb\n\nn = int(input())\nA = list(map(int,input().split()))\n\nC = Counter(A)\nS = 0\nfor i in range(1,n+1):\n  S += comb(C[i],2,exact=True)\n\nfor k in range(n):\n  p = A[k]\n  ans = S - comb(C[p],2,exact=True) + comb(C[p]-1,2,exact=True)\n  print(ans)", "N = int(input())\nA = list(map(int,input().split()))\nd = {}\nfor a in A:\n    if a in d:\n        d[a] += 1\n    else:\n        d[a] = 1\n#print(d)\ns = 0\nfor k in d:\n    s += d[k] * (d[k] - 1) // 2\n#print(\"s=\",s)\nfor i in range(N):\n    t = d[A[i]]\n    #print(\"t=\",t)\n    print(s - t * (t - 1) // 2 + (t - 1) * (t - 2) // 2)", "n = int(input())\nal = list(map(int, input().split()))\n\nll = [0 for _ in range(n)]\nfl = []\ntl = []\n\nfor a in al:\n    ll[a-1] += 1\n\nfor l in ll:\n    if l >= 2:\n        fl.append(l*(l-1)//2)\n        tl.append((l-1)*(l-2)//2)\n    else:\n        fl.append(0)\n        tl.append(0)\ncnt = sum(fl)\nfor a in al:\n    print((cnt-fl[a-1]+tl[a-1]))\n", "import collections\n\nn = int(input())\na = list(map(int, input().split()))\nc = collections.Counter(a)\n\ncmb = 0\nfor x in c.values():\n    cmb += x * (x - 1) // 2\n    \nfor z in a:\n    y = c.get(z)\n    before = y * (y - 1) // 2\n    after = (y - 1) * (y - 2) //2\n    ans = cmb - before + after\n    print(ans)", "n = int(input())\ncnt = [0] * (n + 1)\ncmb = 0\na = list(map(int, input().split()))\n\nfor ai in a:\n  cnt[ai] += 1\n  cmb += cnt[ai] - 1\n\nfor ai in a:\n  print((cmb - cnt[ai] + 1))\n", "import collections\nN=int(input())\nA=list(map(int,input().split()))\n\ncc=collections.Counter(A)\nL=list(cc.values())\n\ntotal=0\nfor i in range(len(L)):\n    total+=L[i]*(L[i]-1)//2\n\nans=0\nfor a in A:\n    temp=cc[a]*(cc[a]-1)//2\n    ttemp=(cc[a]-1)*(cc[a]-2)//2\n    ans=total-temp+ttemp\n    print(ans)", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\ndef main():\n    n = i_input()\n    a = i_list()\n\n    k = [0]\n    for i in range(2*10**5):\n        k.append(k[i]+(i+1))\n    t = a.copy()\n    t.sort()\n\n    s = 0\n\n    m = [0]*n\n\n    for i,n in itertools.groupby(t):\n        l = len(list(n))\n        s += k[l-1]\n        if l > 1:\n            m[i-1] = k[l-2] - k[l-1]\n\n    for i in a:\n        print((s + m[i-1]))\n\n\n\n\n\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\n\ncount = Counter(a)\n\nans = 0\nfor i in count.values(): ans += i*(i-1)//2\nfor i in a: print(ans - (count[i]-1))", "n = int(input())\n*li,=list(map(int, input().split()))\nfrom collections import Counter\nc = Counter()\nfor i in li:\n    c[i] += 1\nans=0\nfrom math import comb\nfor i in list(c.values()):\n    ans += comb(i, 2)\nfor i in li:\n    print((ans - comb(c[i], 2) + comb(c[i]-1, 2)))\n", "from collections import Counter\nfrom operator import mul\nfrom functools import reduce\n\n\ndef cmb(n,r):\n    r = min(n-r,r)\n    if r == 0: return 1\n    over = reduce(mul, list(range(n, n - r, -1)))\n    under = reduce(mul, list(range(1,r + 1)))\n    return over // under\n\n\nn = int(input())\nal = list(map(int, input().split()))\nc = Counter(al)\n\nk = 0\nfor v in list(c.values()):\n    if v == 1:\n        continue\n    else:\n        k += cmb(v, 2)\n\nfor a in al:\n    if c[a] == 1:\n        print(k)\n    elif c[a] == 2:\n        print((k-cmb(c[a], 2)))\n    else:\n        print((k-cmb(c[a], 2)+cmb(c[a]-1,2)))\n", "def main():\n\tN = int(input())\n\tA = [int(a) - 1 for a in input().split(\" \")]\n\tint_cnt = [0] * N\n\tfor a in A:\n\t\tint_cnt[a] += 1\n\tS = sum([combination_2(c) for c in int_cnt])\n\tfor i in range(N):\n\t\tx = int_cnt[A[i]]\n\t\tprint(S - combination_2(x) + combination_2(x - 1))\n\ndef combination_2(n):\n\treturn int(n * (n - 1) / 2)\n\nmain()", "n = int(input())\nA = list(map(int, input().split()))\nd = {}\nfor a in A:\n    d[a] = d.get(a, 0)+1\n\ncomb = []\nfor i in d:\n    if d[i]>1:\n        comb.append(d[i]*(d[i]-1)//2)\ns = sum(comb)\nfor a in A:\n    ans = s - d[a]*(d[a]-1)//2 + (d[a]-1)*(d[a]-2)//2\n    print(ans)", "s=int(input())\na=list(map(int,input().split()))\nfrom collections import Counter\nb=Counter(a)\ntotal=0\nfor i in b.values():\n   total+=i*(i-1)//2\nfor i in a:\n   print(total-b[i]*(b[i]-1)//2+(b[i]-1)*(b[i]-2)//2)", "N = int(input())\nA = list(map(int, input().split()))\ndi = {}\n\nfor a in A:\n  if a not in di.keys(): # di\u306b\u4f55\u3082\u306a\u304b\u3063\u305f\u5834\u5408\n    #print(\"add\")\n    di[a] = 1\n  else:\n    #print(\"sum\")\n    di[a] += 1\n\n# \u5168\u4f53\u91cf\u8a08\u7b97\nsum = 0\nfor a, b in di.items():\n  #print(a,b)\n  sum += int((b*(b-1))/2*1)\n  \n# \u7d44\u307f\u5408\u308f\u305b\u8a08\u7b97\nfor k in A:\n  n = di[k]\n  bef = n*(n-1)/2\n  aft = (n-1)*(n-2)/2\n  print(int(sum-bef+aft))", "import collections\n\nn = int(input())\na = list(map(int, input().split()))\ncnt = 0\n\nc = collections.Counter(a)\nfor i in c:\n  cnt += c[i]*(c[i]-1)//2\n\n\n\nfor i in range(n):\n\tprint(cnt-c[a[i]]+1)", "n = int(input())\naaa = list(map(int, input().split(' ')))\n# 1,1,1,2,2, -> 3c2 + 2c2 = 4 + 1 = 4\n# 1\u3064\u629c\u304f\u3068\u304d\u306e\u6570\u306f\u4e00\u767a\u3067\u6c42\u307e\u308b\u306e\u3067\u3002\u3002\u3002\n# 1c2=0\n# 2c2=1\n# 3c2=3\n# 4c2=6\n# 5c2=10\n# 6c2=15\n# 7c2=21\n# hoge[i] = hoge[i-1] + (i-1)\nhoge = [0,0]\nfor i in range(2, int(1e6)+1):\n    hoge.append(hoge[i-1] + (i-1))\n\n\n# 1,1,1,2,2, -> 3c2 + 2c2 = 4 + 1 = 4\nd = {}\nfor a in aaa:\n    d[a] = d.get(a, 0) + 1\ntotal = sum([hoge[v] for v in list(d.values())])\n\n# 1\u3064\u629c\u304f\nfor i in range(1, n+1):\n    ct = d[aaa[i-1]]\n    print((total - (hoge[ct] - hoge[ct-1])))\n", "import collections\nimport math\n\ndef cmb_factorial(s):\n    return math.factorial(s) // (math.factorial(2) * math.factorial(s - 2))\n\nn = int(input())\na = list(map(int, input().split()))\nc = collections.Counter(a)\nf = {}\n\ncmb = 0\nfor x in c.values():\n    f[1] = 0\n    f[2] = 1\n    if x >= 3:\n        f[x] = cmb_factorial(x)\n        if x - 1 not in f:\n            f[x - 1] = cmb_factorial(x - 1)\n    cmb += f.get(x)\n\nfor z in a:\n    y = c.get(z)\n    ans = cmb\n    if y >= 2:\n        ans = cmb - f.get(y) + f.get(y - 1)\n    print(ans)", "N = int(input())\nA = list(map(int, input().split()))\nnum = [0]*(2*(10**5))\nans = 0\nfor i in A:\n    num[i-1] += 1\nfor j in range(2*(10**5)):\n    ans += (num[j]*(num[j]-1))//2\nfor p in A:\n    print(ans-num[p-1]+1)", "N = int(input())\nA = list(map(int, input().split()))\ns = [0] * (N + 1)\nfor i in range(N):\n    s[A[i]] += 1\n\ndef nC2(n):\n    return n*(n-1)//2\n\nss = list(map(nC2, s))\nsss = sum(ss)\n\nfor i in range(N):\n    print(sss - s[A[i]] + 1)", "from collections import Counter\nN = int(input())\nA = list(map(int, input().split()))\nC = Counter(A)\ntotal = 0\nfor v in C.values():\n    total += v*(v-1)//2\n\nfor a in A:\n    x = C[a]*(C[a]-1)//2\n    ans = total - x\n    ans += (C[a]-1)*(C[a]-2)//2\n    print(ans)", "n = int(input())\na =list(map(int,input().split()))\nd = [0]*(n+1)\nanswer = 0\nfor i in range(n):\n  d[a[i]]+=1\nfor j in range(n+1):\n  answer+= (d[j]*(d[j]-1))//2\nfor k in range(n):\n  print(answer+1-(d[a[k]]))", "N = int(input())\n*A, = list(map(int, input().split()))\ncnt = [0] * (N+1)\nfor a in A:  cnt[a] += 1\nans = 0\nfor c in cnt:\n    ans += c*(c-1)//2\nfor a in A:\n    r = 1 - cnt[a]\n    print((ans + r))\n", "from collections import Counter\nN=int(input())\nA=list(map(int,input().split()))\n\ncnt=Counter(A)\nsum=0\nfor k,v in list(cnt.items()):\n    sum+=v*(v-1)//2\n\nfor i in range(N):\n    num=cnt.get(A[i])\n    if num==1:\n        ans=sum\n    elif num==2:\n        ans=sum-1\n    else:\n        ans=sum-num*(num-1)//2+(num-1)*(num-2)//2\n\n    print(ans)\n", "N = int(input())\nA = list(map(int,input().split()))\n\ncount = [0]*(N+1)\n\nfor i in range(N):\n  count[A[i]] += 1\n\n#print(count)\n\ntotal = 0\nfor j in range(1,N+1):\n  cj = count[j]*(count[j]-1)//2\n  #print(cj)\n  total = total + cj\n\nans = total\nfor k in range(N):\n  ans = total - (count[A[k]] - 1)\n  print(ans)", "N = int(input())\nAlst = list(map(int, input().split()))\nBlst = [0]*(N+1)\nnum = 0\nfor i in Alst:\n    num = num + Blst[i]\n    Blst[i] += 1\n\nfor i in Alst:\n    k = Blst[i] -1\n    print(num - k)", "N = int(input())\nA = list(map(int,input().split()))\n\nfrom collections import Counter\ncounter = Counter(A)\n\nfrom collections import defaultdict\nres_dic = defaultdict(int)\n\nbase = 0\nfor key,n in list(counter.items()):\n  res_dic[key] = (n * (n - 1) // 2, (n - 1) * (n - 2) // 2)\n  base += n * (n - 1) // 2\n  \nfor i in range(N):\n  ans = base - res_dic[A[i]][0] + res_dic[A[i]][1]\n  print(ans)\n", "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int,input().split()))\n\nimport collections\nd = collections.Counter(a)\np = 0\n\nfor i,v in list(d.items()):\n    if v >=2:\n        p += sum(range(1,v))\n\nfor i in a:\n    if d[i] >=2:\n        print((p-(d[i]-1)))\n    else:\n        print(p)\n", "import numpy as np\nn = int(input())\nA = list(map(int,input().split()))\nc = np.zeros(n+1,dtype=np.int32)\n\nfor a in A:\n    c[a] += 1\naa = list(set(A))\nallsum = 0\nfor a in aa:\n    allsum += c[a]*(c[a]-1)//2\nfor a in A:\n    print(allsum - c[a] + 1)", "N=int(input())\n*A,=map(int,input().split())\n\nimport collections\nc = collections.Counter(A)\n\ns=0\nfor i in c.values():\n   s+=i*(i-1)/2\n\nfor a in A:\n    t=c[a]\n    print(int(s-t*(t-1)/2+(t-1)*(t-2)/2))", "from collections import Counter\n\nN = int(input())\nAs = list(map(int, input().split()))\n\ncnt = Counter(As)\n\nnum = sum([v*(v-1)//2 for v in list(cnt.values())])\n#print('# num:', num)\n\nanss = []\nfor A in As:\n    v = cnt[A]\n    ans = num - v*(v-1)//2 + (v-1)*(v-2)//2\n    anss.append(ans)\n\nprint(('\\n'.join(map(str, anss))))\n", "N = int(input())\nA = input().split()\nnum_list = [0] * N\n\ndef combination(n):\n    C = [0]\n    for i in range(2,n+1):\n        C.append(int(i*(i-1)/2))\n    \n    return C\n\ncom = combination(N)\nsum_com = 0\n\nfor i in range(N):\n    num_list[int(A[i])-1] += 1\n\n\nfor i in range(N):\n    if num_list[i] == 0:\n        continue\n    else:\n        sum_com += com[num_list[i]-1]\n\nfor i in range(N):\n    print((sum_com - num_list[int(A[i])-1] + 1))\n", "import collections\nN = int(input())\nA = list(map(int, input().split()))\n\nc = collections.Counter(A)\nans = 0\nfor i in c:\n  ans+=c[i]*(c[i]-1)//2\n\nfor i in range(N):\n  print(ans-(c[A[i]]-1))", "N = int(input())\nA = list(map(int, input().split()))\nnum = [0]*(2*(10**5))\nans = 0\nfor i in A:\n    num[i-1] += 1\nfor j in range(2*(10**5)):\n    ans += (num[j]*(num[j]-1))//2\nfor p in A:\n    print(ans-num[p-1]+1)", "from collections import Counter\nN = int(input())\nA = [int(x) for x in input().split()]\n\n\nc = Counter(A)\n\nans = 0\nfor i in c:\n    ans += c[i] * (c[i] - 1) // 2\n\nfor i in range(len(A)):\n    if c[A[i]] == 1:\n        print(ans)\n    else:\n        tmp = c[A[i]]\n        print((ans - tmp * (tmp - 1) // 2 + (tmp - 1) * (tmp - 2) // 2))\n", "import collections\nn = int(input())\nnum_list = list(map(int, input().split()))\nall = 0\n\nc = collections.Counter(num_list)\n\nfor i in c:\n    all += c[i]*(c[i]-1)//2\n\nfor k in range(n):\n    print(all - c[num_list[k]] + 1)", "n=(int)(input())\na=input().split()\nfor i in range(n):\n  a[i]=(int)(a[i])\n  \ndic={}\nsum=0\nfor i in range(n):\n  if not a[i] in dic:\n    dic[a[i]]=1\n  else:\n    dic[a[i]]+=1\n    sum+=dic[a[i]]-1\n\nfor i in a:\n  print((sum-dic[i]+1))\n\n", "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\n\nc = Counter(a)\nd = c.copy()\nk = c.keys()\nfor i in k:\n    d[i] = c[i]*(c[i]-1) // 2\ns = sum(list(d.values()))\nfor i in a:\n    print(s - d[i] + max(0, (c[i]-1)*(c[i]-2)//2))", "from collections import Counter\nn=int(input())\nA=list(map(int,input().split()))\ncnt=Counter(A)\ntot=0\ndif={}\nfor k,v in cnt.items():\n  tot += v*(v-1)//2\n  dif[k]=v-1\nans=[tot-dif[a] for a in A]\nprint('\\n'.join(map(str,ans)))", "N = int(input())\nA = list(map(int,input().split()))\nS = [0] * (N+1)\ntotal = 0\n \nfor i in A:\n  S[i] =S[i]+ 1\nfor i in S:\n    total = i * (i - 1) // 2 + total\nfor i in A:\n    #print(i,S[i])\n    a=total-S[i]+1\n    print(a)", "N = int(input())\nA = list(map(int,input().split()))\n\nls = [0] * (N + 1)\nfor a in A:\n  ls[a] += 1\n\nC = 0\nfor i in set(A):\n  n = ls[i]\n  C += n * (n - 1) //2\n  \nfor a in A:\n  n = ls[a]\n  print(C - (n - 1))", "from collections import Counter\nn = int(input())\nA = list(map(int, input().split()))\na = {}\nANS = 0\nfor x,y in Counter(A).items():\n    if y >= 2: \n        a[x] = [y, (y*(y-1))//2]\n        ANS += (y*(y-1))//2\nfor i in range(n):\n    ans = ANS\n    if A[i] in a:\n        x = a[A[i]][0]-1\n        ans -= a[A[i]][1]\n        ans += (x*(x-1))//2\n    print(ans)", "N = int(input())\nA = list(map(int, input().strip().split()))\nfrom collections import Counter\nC=Counter(A)\nK=set(A)\nans = 0\nfor i in K:\n    ans += C[i]*(C[i]-1)//2\n\nfor i in A:\n    print(ans-(C[i]-1)) # n\u30b7\u30b0\u30dek = n(n-1)/2 ......   ", "n = int(input())\nA = list(map(int, input().split()))\ncnt = [0]*n\n\n\ndef choose2(m):\n    return m*(m-1)/2\n\n\nfor i in range(n):\n    A[i] -= 1\n\nfor i in range(n):\n    cnt[A[i]] += 1\n\ntot = 0\nfor i in range(n):\n    tot += choose2(cnt[i])\n\nfor i in range(n):\n    ans = tot\n    ans -= choose2(cnt[A[i]])\n    ans += choose2(cnt[A[i]]-1)\n    print((int(ans)))\n", "N = int(input())\nA = list(map(int,input().split()))\n\nli = [0] * (N + 1)\ntotal = 0\n\nfor i in A:\n  li[i] += 1\nfor i in li[1:]:\n  total += i * (i - 1) // 2\n\nfor i in A:\n  j = li[i]\n  print(total - (j * (j - 1) // 2) + ((j - 1) * (j - 2) // 2))", "import math\ndef combinations_count(n, r):\n\tif n < 2:\n\t\treturn 0\n\treturn math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n  \nn = int(input())\naa = [int(i) for i in input().split()]\nd = {}\nfor a in aa:\n\td[a] = d.get(a, 0) + 1\nkei = 0\nfor k in d.keys():\n\tcombi = combinations_count(d[k], 2)\n\tkei += combi\n\td[k] = (d[k], combi)\nret = 0\nfor k in d.keys():\n\td[k] = (d[k][0], d[k][1], kei - d[k][0] + 1)\nfor a in aa:\n\tprint(d[a][2])", "n=int(input())\narr=list(map(int,input().split()))\ntt=[0]*(n+7)\n\ntotal=0\n\nfor a in arr:\n  tt[a]+=1\n\nfor t in tt:\n  total += (t*(t-1)//2)\n\nfor i in range(n):\n  n = tt[arr[i]]\n  d = (n*(n-1)//2) - ((n-1)*(n-2)//2)\n  print((total-d))\n# x * x-1 // 2\n", "from collections import Counter as C\nN=int(input());*A,=map(int,input().split());c=C(A);s=sum(v*~-v//2for v in c.values())\nfor a in A:print(s-~-c[a])", "N = int(input())\nA = list(map(int, input().split()))\ndi = {}\n\nfor a in A:\n  if a not in di.keys(): # di\u306b\u4f55\u3082\u306a\u304b\u3063\u305f\u5834\u5408\n    #print(\"add\")\n    di[a] = 1\n  else:\n    #print(\"sum\")\n    di[a] += 1\n\n# \u5168\u4f53\u91cf\u8a08\u7b97\nsum = 0\nfor a, b in di.items():\n  #print(a,b)\n  sum += int((b*(b-1))/2*1)\n  \n# \u7d44\u307f\u5408\u308f\u305b\u8a08\u7b97\nfor k in A:\n  n = di[k]\n  bef = n*(n-1)/2\n  aft = (n-1)*(n-2)/2\n  print(int(sum-bef+aft))", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy,bisect\n#from operator import itemgetter\n#from heapq import heappush, heappop\n#import numpy as np\n#from scipy.sparse.csgraph import shortest_path, floyd_warshall, dijkstra, bellman_ford, johnson\n#from scipy.sparse import csr_matrix\n#from decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN\nimport sys\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nnf = lambda: float(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnb = lambda: list(map(float, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nN = ni()\nA = na()\nd = collections.Counter(A)\nct = {}\nfor k, v in list(d.items()):\n    ct[k] = max(0, v * (v - 1) // 2)\nsum_ = sum(ct.values())\nfor ai in A:\n    print((sum_ - ct[ai] + max((d[ai] - 1) * (d[ai] - 2) // 2, 0)))\n", "from collections import defaultdict\nimport collections\nimport math\nN = int(input())\nList = list(map(int,input().split()))\ndicList = collections.Counter(List)\ntotal = 0\nfor key in dicList:\n  if dicList[key] >= 2:\n    total += dicList[key]*(dicList[key]-1)//2\nfor item in List:\n  print(total - dicList[item] +1)", "def main():\n    import math\n    n = int(input())\n    inlis = list(map(int, input().split()))\n    indic = dict()\n    total = 0\n\n    for num in inlis:\n        if num in indic:\n            indic[num] += 1\n        else:\n            indic[num] = 1\n    \n    for k, v in indic.items():\n        total += int(v * (v-1) / 2)\n    \n    for num in inlis:\n        print(total - indic[num] + 1)\n\n\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Sep  7 22:04:16 2020\n\n@author: liang\n\"\"\"\n\nN = int(input())\nA = [int(x) for x in input().split()]\nd = [0]*N\n\nfor a in A:\n    d[a-1] += 1\n#print(d)\nscore = 0\nfor  a in d:\n    score += a*(a-1)//2\n#print(score)\nfor a in A:\n    print((score - d[a-1] + 1))\n", "N=int(input())\n*A,=map(int,input().split())\n\nimport collections\nc = collections.Counter(A)\n\ns=0\nfor i in c.values():s+=i*(i-1)/2\n\nfor a in A:\n t=c[a]\n print(int(s-t*(t-1)//2+(t-1)*(t-2)//2))", "\"\"\" \u30b9\u30cb\u30da\u30c3\u30c8 \"\"\"\ndef get_int():\n\treturn int(input())\n\ndef get_ints():\n\treturn list(map(int, input().split()))\n\"\"\" \u30b9\u30cb\u30da\u30c3\u30c8 \"\"\"\nimport math\n# 2\u3064\u9078\u3076\u901a\u308a\u6570\u3092\u7b97\u51fa nC2\ndef choose2(n):\n    return n*(n-1)//2\n# \u30a4\u30f3\u30d7\u30c3\u30c8\nN = get_int()\nAn = get_ints()\n\"\"\" \u5168\u3066\u306e\u8981\u7d20\u304b\u30892\u3064\u306e\u30dc\u30fc\u30eb\u3092\u9078\u3076\u901a\u308a\u6570\u3092\u6c42\u3081\u308b \"\"\"\nuni = [0] * (N+1)\n# \u30e6\u30cb\u30fc\u30af\u6570\u306e\u914d\u5217\u3092\u6c42\u3081\u308b\nfor i in range(N):\n    uni[An[i]] += 1\nsumWay = 0\ncon = [0] * (N+1)\t#con[i] := iC2\nfor i in range(N+1):\n  con[i] = choose2(i)\n# \u5404\u6570\u5024\u306e2\u901a\u308a\u306e\u9078\u629e\u901a\u308a\u6570\u3092\u8db3\u3057\u3066\u3044\u304f\n\"\"\"\nfor i in range(N + 1):\n    sumWay += con(uni[i])\n\"\"\"\n#\u2191\u3092\u66f8\u304d\u304b\u3048\u3066\u307f\u305f\nfor i in uni:\n  sumWay += con[i]\n\"\"\" \u5168\u3066\u306e\u8981\u7d20\u6570 - \u524a\u9664\u3059\u308b\u8981\u7d20\u306e\u901a\u308a\u6570 + \u524a\u9664\u3059\u308b\u8981\u7d20\u3092\u5f15\u3044\u305f\u969b\u306e\u901a\u308a\u6570 \u3092\u6c42\u3081\u308b \"\"\"\nfor i in range(N):\n    print((sumWay - con[uni[An[i]]] + con[uni[An[i]]-1]))\n", "import collections\nN = int(input())\nA = list(map(int, input().split()))\n\ncoll = collections.Counter(A)\n\nans = 0\nfor n in list(coll.values()):\n\tans += n * (n - 1) // 2\n\nfor i in A:\n\tprint(ans - coll[i] + 1)", "from collections import *\nfrom math import *\nN = int(input())\nA = list(map(int,input().split()))\nC = Counter(A)\nS = 0\n\nfor k,v in C.items():\n  S+=comb(v,2)\n\nfor a in A:\n  print(S-(comb(C[a],2)-comb(C[a]-1,2)))", "n=int(input())\nx=list(map(int,input().split()))\nxm=max(x)\ndef ra(a): #\u5727\u7e2e\u3055\u308c\u305f\u8981\u7d20\u3092\u975e\u4fdd\u6301\n    ll,l=[0]*xm,1\n    for i in range(len(a)-1):\n        if a[i]==a[i+1]:\n            l+=1\n        else:\n            ll[a[i]]+=l\n            l=1\n    ll.append(l)\n    return ll\nb=ra(sorted(x))\nd=0\nfor i in b:\n    d+=(i*(i-1))//2\nfor i in range(n):\n    print(d-b[x[i]]+1)", "from collections import Counter\nfrom scipy.special import comb\n\ns = input()\nA = list(map(int, input().split()))\n\nd = Counter(A)\n\nsum_c = 0\nfor v in d.values():\n    if v >= 2:\n        sum_c += comb(v, 2, exact=True)\n\nfor a in A:\n    x = sum_c - comb(d[a], 2, exact=True) + comb(d[a]-1, 2, exact=True)\n    print(x)", "import math\nini = lambda : int(input())\ninm = lambda : map(int,input().split())\ninl = lambda : list(map(int,input().split()))\ngcd = lambda x,y : gcd(y,x%y) if x%y else y\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n \n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n \n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n \n        if x == y:\n            return\n \n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n \n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n \n    def size(self, x):\n        return -self.parents[self.find(x)]\n \n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n \n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n \n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n \n    def group_count(self):\n        return len(self.roots())\n \n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n \n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\nmod = 10**9 + 7\n\n#--maincode----------------\n\nn = ini()\na = inl()\nb = [0]*(n+1)\nfor i in a:\n    b[i] += 1\nc = []\nfor i in range(n+1):\n    c.append(b[i] * (b[i]-1) // 2)\nans = sum(c)\nfor i in a:\n    d = b[i] - 1\n    print(max(ans-d,0))", "# coding: utf-8\nfrom collections import Counter\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    c = Counter(A)\n    ans = 0\n    for value in list(c.values()):\n        if value > 1:\n            ans += value * (value - 1) // 2\n\n    for i in range(N):\n        print((ans - c[A[i]] + 1))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nn = int(input())\nA = list(map(int,input().split()))\ndef combinations_count(n, r):\n  if n < r:\n    return 0\n  return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nans = dict()\nfor a in A:\n  if a in ans:\n    ans[a] += 1\n  else:\n    ans[a] = 1\nprin = 0\nfor a in ans:\n  prin += combinations_count(ans[a],2)\nfor i in range(n):\n  print(prin-ans[A[i]]+1)", "from collections import defaultdict\ndef main():\n    n = int(input())\n    a = list(map(int, input().split(\" \")))\n    d = defaultdict(lambda:0)\n    d2 = {}\n    for i in a:\n        d[i] += 1\n    for i,j in d.items():\n        x = j*(j-1)//2\n        d2[i] = x\n    ans = 0\n    ans = sum(d2.values())\n    for i in range(n):\n        print(ans-d[a[i]]+1)\n\ndef __starting_point():\n    main()\n__starting_point()", "n=(int)(input())\na=input().split()\ndict={}\nans=0\nfor i in range(n):\n  a[i]=(int)(a[i])\n  if not a[i] in dict:\n    dict[a[i]]=1\n  else:\n    dict[a[i]]+=1\nfor i in dict:\n  ans+=dict[i]*(dict[i]-1)//2\nfor i in range(n):\n  print(ans-dict[a[i]]+1)", "N = int(input())\nA = [int(s) for s in input().split(' ')]\n\nd = dict()\nd2 = dict()\nd3 = dict()\nd4 = dict()\nfor a in A:\n    d[a] = d.get(a, 0) + 1\nfor a in list(d.keys()):\n    d2[a] = d[a] * (d[a] - 1) // 2\n    d3[a] = (d[a] - 1) * (d[a] - 2) // 2\ntotal = sum(d2[a] for a in list(d.keys()))\n\nfor a in A:\n    print((total - d2[a] + d3[a]))\n\n\n\n", "import collections\nN = int(input())\nlsA = list(map(int,input().split()))\ncounterA = collections.Counter(lsA)\nval = list(counterA.values())\nlsans = []\nalln = 0\nfor i in val:\n    alln += i*(i-1)//2\nfor i in range(N):\n    M = counterA[lsA[i]]\n    div = M*(M-1)//2-(M-1)*(M-2)//2\n    print(alln-div)", "import collections\nn = int(input())\na = list(map(int,input().split()))\ndic = collections.Counter(a)\ntotal = 0\n\nfor x in list(dic.values()):\n    total += x * (x-1) // 2\n\nfor y in range(n):\n    b = a[y]\n    lost = (dic[b] * (dic[b]-1) //2) - ((dic[b]-1) * (dic[b]-2) //2 )\n    print((total-lost))\n", "from collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\n\n\ncount = Counter(A)\nselect_num = [0] * (10 ** 6 + 1)\n\nfor num, cnt in Counter(A).items():\n    select_num[num] = cnt * (cnt - 1) // 2\n\nsum_select = sum(select_num)\n\nfor a in A:\n    print(sum_select - select_num[a] + (count[a]-1)*(count[a]-2)//2)", "from collections import Counter\n\nn = int(input())\na = list(map(int, input().split()))\nb = Counter(a)\nans = 0\nfor key, value in b.items():\n    ans += (value*(value-1))//2\n\nfor i in range(n):\n    print(ans - b[a[i]] +1)", "import collections\nN=int(input())\nA=list(map(int,input().split()))\n\nD = collections.Counter(A)\ns=0\nfor i in D:\n  s+=D[i]*(D[i]-1)//2\n  \nfor i in range(N):\n  print(s-(D[A[i]]-1))", "n = int(input())\na = list(map(int, input().split()))\n\nnumdict = {}\n\nfor n in a:\n    if n in numdict.keys():\n        numdict[n] += 1\n    else:\n        numdict[n] = 1\n\nall_sum = 0\nfor k in numdict.keys():\n    v = numdict[k]\n    all_sum += (v*(v-1))//2\n\nfor n in a:\n    print(all_sum - numdict[n] + 1)", "N = int(input())\nA = list(map(int,input().split()))\nimport collections\na = collections.Counter(A)\n\nfrom operator import mul\nfrom functools import reduce\ndef combinations_count(n, r):\n    r = min(r, n - r)\n    numer = reduce(mul, range(n, n - r, -1), 1)\n    denom = reduce(mul, range(1, r + 1), 1)\n    return numer // denom\nans = 0\nfor i in a:\n    if  a[i] > 1:\n        ans += combinations_count(a[i],2) \nfor i in A:\n    n = a[i]\n    if n > 2:\n        print(ans+combinations_count(n-1,2)-combinations_count(n,2))\n    elif n == 2:\n        print(ans-1)\n    else:\n        print(ans)"]