["n = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\ncnt = 0\nfor i in range(n):\n    if a[i] != b[i]:\n        cnt += 1 \n        \nif cnt == 1:\n    done = list(range(1,n+1))\n    x = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            try:\n                done.remove(a[i])\n            except:\n                pass\n        else:\n            x = i\n            try:\n                done.remove(a[i])\n            except:\n                pass\n            try:\n                done.remove(b[i])\n            except:\n                pass\n    arr = a[::]\n    arr[x] = done[0]\n    for i in arr:\n        print(i,end = ' ')\n        \nelse:\n    arr = a[::]\n    x = -1\n    y = -1\n    for i in range(n):\n        if a[i] == b[i]:\n            pass\n        else:\n            if x == -1:\n                x = i\n            else:\n                y = i\n    br = arr[::]\n    arr[x] = b[x]\n    br[y] = b[y]\n    if len(set(br)) == n:\n        arr = br[::]\n    for i in arr:\n        print(i,end = ' ')           \n        ", "import sys\n\nn = int(input())\n\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\np1, p2, p3, p4 = [], [], [], []\n\ncur = 0\nfor i in range(n):\n    if a[i] == b[i]:\n        for p in (p1, p2, p3, p4):\n            p.append(a[i])\n    elif cur == 0:\n        p1.append(a[i])\n        p2.append(a[i])\n        p3.append(b[i])\n        p4.append(b[i])\n        cur += 1\n    else:\n        p1.append(a[i])\n        p2.append(b[i])\n        p3.append(a[i])\n        p4.append(b[i])\n\nfor p in (p1, p2, p3, p4):\n    if len(set(p)) == n:\n        print(' '.join(str(x) for x in p))\n        return\n\nfor p in (p1, p2, p3, p4):\n    if len(set(p)) == n - 1:\n        distinct = 0\n        dpos = 0\n        for i, (x, y) in enumerate(zip(p, a)):\n            if x != y:\n                distinct += 1\n                dpos = i\n        if distinct == 1:\n            unused = 1\n            while unused in p:\n                unused += 1\n            pp = list(p)\n            pp[dpos] = unused\n            print(' '.join(str(x) for x in pp))\n            return\n\nassert False\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nans = [0 for _ in range(n)]\nused = [False for _ in range(n + 1)]\nidx = []\nfor i in range(n):\n    if a[i] == b[i]:\n        ans[i] = a[i]\n        used[a[i]] = True\n    else:\n        idx.append(i)\nunused = []\nfor i in range(1, n + 1):\n    if not used[i]:\n        unused.append(i)\n\nif len(unused) == 1:\n    ans[idx[0]] = unused[0]\nelif (a[idx[0]] != unused[0] and a[idx[1]] != unused[1]) or (b[idx[0]] != unused[0] and b[idx[1]] != unused[1]):\n    ans[idx[0]] = unused[1]\n    ans[idx[1]] = unused[0]\nelse:\n    ans[idx[0]] = unused[0]\n    ans[idx[1]] = unused[1]\n\nprint(' '.join(map(str, ans)))\n", "n = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\ndiff = []\nfor i in range(n):\n    if a[i] != b[i]:\n        diff.append(i)\nsa = True\nsb = True\ndi = []\nfor i in range(1,n+1):\n    di.append(i)\ns = []\nfor i in range(n):\n    if i not in diff:\n        s.append(a[i])\n        di.remove(a[i])\n    else:\n        s.append(0)\nif len(diff) == 1:\n    s[diff[0]] = di[0]\nelse:\n    if (a[diff[0]] in di and b[diff[1]] in di):\n        s[diff[0]] = a[diff[0]]\n        s[diff[1]] = b[diff[1]]\n    else:\n        s[diff[0]] = b[diff[0]]\n        s[diff[1]] = a[diff[1]]\n        \n        \n\nfor i in range(n):\n    print(s[i], end= ' ')\n\n", "import math\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    res = []\n    for i in a:\n        res.append(i)\n    all_numbers = set([i for i in range(1, n+1)])\n    seta = set(a)\n    setb = set(b)\n    non_a = list(all_numbers - seta)[0]\n    non_b = list(all_numbers - setb)[0]\n    dpa = double_positions(a)\n    dpb = double_positions(b)\n    for i in dpa:\n        temp = res[i]\n        res[i] = non_a\n        if diff(res, a) == 1 and diff(res, b) == 1:\n            print(*res)\n            return\n        res[i]= temp\n    for i in dpb:\n        temp = res[i]\n        res[i] = non_b\n        if diff(res, b) == 1 and diff(res, a) == 1:\n            print(*res)\n            return\n        res[i] = temp\n\n\n\ndef diff(a, b):\n    c = 0\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            c += 1\n    return c\n\ndef double_positions(a):\n    count = [-1 for i in range(len(a))]\n    res = []\n    for i in range(len(a)):\n        if count[a[i]-1] != -1:\n            return count[a[i]-1], i\n        count[a[i]-1] = i\n    \n    \ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nai = list(map(int,input().split()))\nbi = list(map(int,input().split()))\nci = [0]*n\nfor i in range(n):\n    ci[i] = ai[i]\nnums = [0]*n\nind = [0]*2\nj = 0\nnum = 0\nfor i in range(n):\n    nums[ai[i]-1] += 1\nfor i in range(n):\n    if nums[ai[i]-1] == 2:\n        ind[j] = i\n        j += 1\n    if nums[i] == 0:\n        num = i+1 \n        \nci[ind[0]] = num\ndif = 0\ndif2 = 0\nfor i in range(n):\n    if ci[i] != bi[i]:\n        dif += 1\n    if ci[i] != ai[i]:\n        dif2 += 1\nif dif != 1 or dif2 != 1:\n    ci[ind[0]] = ai[ind[0]]\n    ci[ind[1]] = num\nfor i in range(n):\n    print(ci[i],end=\" \")\n", "import sys\n\ndef main():\n    n=int(sys.stdin.readline().rstrip())\n    a=list(map(int,sys.stdin.readline().split()))\n    b=list(map(int,sys.stdin.readline().split()))\n    \n    items=set(range(1,n+1))\n    coords=[]\n    p=[-1]*n\n    \n    for i in range(n):\n        if a[i]==b[i]:\n            items.remove(a[i])\n            p[i]=a[i]\n        else:\n            coords.append(i)\n            \n    items=list(items)\n    \n    if len(coords)==1:\n        p[coords[0]]=items[0]\n    else:\n        adelta=0\n        bdelta=0\n        for k,coord in enumerate(coords):\n            if items[k]!=a[coord]: adelta+=1\n            if items[k]!=b[coord]: bdelta+=1\n            p[coord]=items[k]\n        if not (adelta==1 and bdelta==1):\n            adelta=0\n            bdelta=0\n            for k,coord in enumerate(reversed(coords)):\n                if items[k]!=a[coord]: adelta+=1\n                if items[k]!=b[coord]: bdelta+=1\n                p[coord]=items[k]\n        \n    sys.stdout.write(' '.join(map(str,p))+'\\n')\n    \nmain()\n\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nbad = []\ndef isok(tmp):\n    s = set()\n    for i in range(len(tmp)):\n        s.add(tmp[i])\n    return len(s) == n\n    \nfor i in range(len(a)):\n    if a[i] != b[i]:\n        bad.append(i)\nif len(bad) == 1:\n    k = [0] * (n + 1)\n    for i in range(len(a)):\n        if i != bad[0]:\n            k[a[i]] = 1\n    rs = 0\n    for i in range(1, n + 1):\n        if not k[i]:\n            rs = i\n            break\n    tmp = []\n    for i in range(len(a)):\n        if i != bad[0]:\n            tmp.append(a[i])\n        else:\n            tmp.append(rs)\n    print(*tmp)\n            \nelse:\n    tmp = []\n    tmp1 = []\n    for i in range(len(a)):\n        if i == bad[0]:\n            tmp.append(b[i])\n            tmp1.append(a[i])\n        else:\n            tmp.append(a[i])\n            tmp1.append(b[i])   \n    if isok(tmp):\n        print(*tmp)\n    else:\n        print(*tmp1)\n    \n", "from operator import eq\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nal = [False for _ in range(n)]\nbl = [False for _ in range(n)]\n\nfor i in range(n):\n    al[a[i]-1] = True\n    bl[b[i]-1] = True\n\nfor i,e in enumerate(al):\n    if not e:\n        ak = i+1\n\nfor i,e in enumerate(bl):\n    if not e:\n        bk = i+1\n\naa = [(e,i) for (i,e) in enumerate(a)]\nbb = [(e,i) for (i,e) in enumerate(b)]\n\naa.sort();\nbb.sort();\n\n\nfor i in range(1,n):\n    \n    if (aa[i][0] == aa[i-1][0]):\n        amis = aa[i][0]\n        a1 = aa[i-1][1]\n        a2 = aa[i][1]\n\n    if (bb[i][0] == bb[i-1][0]):\n        bmis = bb[i][0]\n        b1 = bb[i-1][1]\n        b2 = bb[i][1]\n\n\nfor ay in [a1,a2]:\n    for by in [b1,b2]:\n        reta = list(a)\n        reta[ay] = ak\n\n        retb = list(b)\n        retb[by] = bk\n\n        if all(map(eq, reta, retb)):\n            print(\" \".join(map(str, reta)))\n            return\n\n\n", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    used = [False] * (n + 1)\n    answer = [None] * n\n\n    for i, (ai, bi) in enumerate(zip(a, b)):\n        if ai == bi and not used[ai]:\n            answer[i] = ai\n            used[ai] = True\n\n    perm = set(range(1, n + 1))\n    ind = []\n    for i, x in enumerate(answer):\n        if x is not None:\n            perm.remove(x)\n        else:\n            ind.append(i)\n\n    perm = list(perm)\n    if len(perm) == 1:\n        answer[ind[0]] = perm[0]\n        for x in answer:\n            print(x, end=' ')\n        return\n\n    i, j = ind\n    x, y = perm\n    count = (a[i] != x) + (b[i] != x) + (a[j] != y) + (b[j] != y)\n    if count == 2:\n        answer[i] = x\n        answer[j] = y\n    else:\n        answer[i] = y\n        answer[j] = x\n\n    for x in answer:\n        print(x, end=' ')\n\n\ndef __starting_point():\n    # import sys\n    # sys.stdin = open('input.txt')\n    main()\n\n__starting_point()", "#!/usr/bin/env python3\nfrom sys import stdin, stdout\n\ndef rint():\n    return list(map(int, stdin.readline().split()))\n#lines = stdin.readlines()\n\n\nn = int(input())\n\na = list(rint())\nb = list(rint())\n\nii = []\nfor i in range(n):\n    if a[i] != b[i]:\n        ii.append(i)\n\nif len(ii) == 2:\n    if a[ii[0]] != a[ii[1]]:\n        c = a[:]\n    else:\n        c = b[:]\n    if c.count(c[ii[0]]) == 2:\n        iii = ii[0]\n    else:\n        iii = ii[1]\nelse:\n    c = a[:]\n    iii = ii[0]\n\n\nfor i in range(n):\n    if not i+1 in c:\n        c[iii] = i+1\n        print(*c)\n        return\n\n", "n=int(input())\na=[int(i)for i in input().split()]\nb=[int(i)for i in input().split()]\nans=[0]*n\ns=set([int(i)for i in range(1,n+1)])\nfor i in range(n):\n\tif a[i]==b[i]:\n\t\tans[i]=a[i]\n\t\ts.remove(a[i])\nfor i in range(n):\n\tif a[i]!=b[i]:\n\t\tif a[i] not in s:\n\t\t\tif b[i] in s:\n\t\t\t\tans[i]=b[i]\n\t\t\t\ts.remove(b[i])\n\tif b[i] not in s:\n\t\tif a[i] in s:\n\t\t\tans[i]=a[i]\n\t\t\ts.remove(a[i])\t\t\nj=0\nfor i in s:\n\twhile  ans[j]!=0:\n\t\tj+=1\n\tans[j]=i\n\tj+=1\nprint(*ans)\t\t\n\n\n\n", "def check(A, B):\n    diff = 0\n    for i in range(len(A)):\n        if A[i] != B[i]:\n            diff += 1\n    return diff == 1\nip = lambda: list(map(int, input().split()))\nn = int(input())\nA = ip()\nB = ip()\ndiff = 0\nleft = set(range(1, n+1))\nC = [0 for _ in range(n)]\nfor i in range(n):\n    if A[i] == B[i]:\n        C[i] = A[i]\n        if A[i] in left:\n            left.remove(A[i])\n    else:\n        diff += 1\nif diff == 1:\n    for i in range(n):\n        if C[i] == 0:\n            C[i] = left.pop()\nelse:\n    i, j = [k for k in range(n) if C[k] == 0]\n    left = list(left)\n    assert(diff == 2)\n    assert(len(left) == 2)\n    C[i] = left[0]\n    C[j] = left[1]\n    if not check(A, C) or not check(B, C):\n        C[i] = left[1]\n        C[j] = left[0]\n\nprint(*C)\n\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n\nda = [0] * (n+1)\npa = [-1] * (n+1)\nsa = 0\nfor i in range(n):\n    sa += a[i]\n    if da[a[i]] == 0:\n        da[a[i]] += 1\n        pa[a[i]] = i\n    else:\n        povt_a = a[i]\n        place2_a = i\n        place1_a = pa[a[i]]\nda[0] = -1\nabs_a = da.index(0)\n\ndb = [0] * (n+1)\npb = [-1] * (n+1)\nsb = 0\nfor i in range(n):\n    sb += b[i]\n    if db[b[i]] == 0:\n        db[b[i]] += 1\n        pb[b[i]] = i\n    else:\n        povt_b = b[i]\n        place2_b = i\n        place1_b = pb[b[i]]\ndb[0] = -1\nabs_b = db.index(0)\n       \n#print(povt_a, place1_a, place2_a, abs_a)\n#print(povt_b, place1_b, place2_b, abs_b)\n\na1 = a.copy()\nb1 = b.copy()\n\na1[place1_a] = abs_a\nb1[place1_b] = abs_b\nif a1 == b1:\n    print(\" \".join(map(str, a1)))\n    return\n    \nb1[place1_b] = b[place1_b]\nb1[place2_b] = abs_b\nif a1 == b1:\n    print(\" \".join(map(str, a1)))\n    return\n \na1[place1_a] = a[place1_a]\na1[place2_a] = abs_a\nif a1 == b1:\n    print(\" \".join(map(str, a1)))\n    return\n\nb1[place2_b] = b[place2_b]\nb1[place1_b] = abs_b\nprint(\" \".join(map(str, a1)))\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [0]*n\nd = [False]*n\nbad = []\nneed = []\nfor i in range(n):\n    if a[i] == b[i]:\n        d[a[i]-1] = True\n        c[i] = a[i]\n    else:\n        bad.append(i)\nfor i in range(n):\n    if not d[i]:\n        need.append(i+1)\n\nd = False\n\ndef good(c):\n    nonlocal a, b\n    al = 0\n    bl = 0\n    for i in range(len(c)):\n        if c[i] != a[i]:\n            al += 1\n        if c[i] != b[i]:\n            bl += 1\n    if al == 1 and bl == 1:\n        for i in range(len(c)):\n            for j in range(len(c)):\n                if i != j and c[i] == c[j]:\n                    return False\n    else:\n        return False\n    return True\nfc = []\ndo = False\ndef f(b, n, c):\n    nonlocal do, fc\n    #print(b, n, c, do)\n    if not do:\n        if len(b) == 0 and good(c):\n            do = True\n            fc = c\n            #print(fc)\n        else:\n            for i in range(len(b)):\n                for j in range(len(n)):\n                    nc = c+[]\n                    nc[b[i]] = n[j]\n                    f(b[:i]+b[i+1:]+[], n[:j]+n[j+1:]+[], nc)\n\nf(bad, need, c)\nfor i in fc:\n    print(i ,end=' ')", "def meteors(n, ar, br):\n    differ = []\n    used = {}\n    pr = []\n    for i in range(n):\n        if ar[i] != br[i]:\n            pr.append(-1)\n            differ.append((i, ar[i], br[i]))\n        else:\n            pr.append(ar[i])\n            used[ar[i]] = i\n\n    unused = find_unused(n, used)\n\n    if len(differ) == 1:\n        pr[differ[0][0]] = unused[0]\n    elif len(differ) == 2:\n        if differ[0][1] in unused and differ[0][2] in unused and differ[1][1] in unused and differ[1][2] in unused: #whatever is fine\n            pr[differ[0][0]] = unused[0]\n            pr[differ[1][0]] = unused[1]\n        if differ[1][1] in unused and differ[1][2] in unused:\n            if not differ[0][1] in unused:\n                pr[differ[0][0]] = differ[0][2]\n                unused.remove(differ[0][2])\n                pr[differ[1][0]] = unused[0]\n            else:\n                pr[differ[0][0]] = differ[0][1]\n                unused.remove(differ[0][1])\n                pr[differ[1][0]] = unused[0]\n        else:\n            if not differ[1][1] in unused:\n                pr[differ[1][0]] = differ[1][2]\n                unused.remove(differ[1][2])\n                pr[differ[0][0]] = unused[0]\n            else:\n                pr[differ[1][0]] = differ[1][1]\n                unused.remove(differ[1][1])\n                pr[differ[0][0]] = unused[0]\n    else:\n        pr = list(range(1, n + 1)) # bad input\n\n    return pr\n\ndef find_unused(n, used):\n    unused = []\n    for i in range(1, n + 1):\n        if not i in used:\n            unused.append(i)\n    return unused\n\n\ndef __starting_point():\n    n = int(input().strip())\n    ar = list(map(int, input().strip().split()))\n    br = list(map(int, input().strip().split()))\n    print((\" \".join(map(str, meteors(n, ar, br)))));\n\n__starting_point()", "n = int(input())\nl1 = list(map(int,input().split()))\nl2 = list(map(int,input().split()))\n\ntot = 0\n\ndone = [False for i in range(n+1)]\n\nfor i in range(n):\n\tif(l1[i]!=l2[i]):\n\t\ttot+=1\n\telse:\n\t\tdone[l1[i]] = True\n\nans = []\nif(tot==1):\n\tfor i in range(n):\n\t\tif(l1[i]==l2[i]):\n\t\t\tans.append(l2[i])\n\t\telse:\n\t\t\tfor j in range(1,n+1):\n\t\t\t\tif(done[j]==False and l1[i]!=j and l2[i]!=j):\n\t\t\t\t\tans.append(j)\n\t\t\t\t\tbreak\nelif(tot==2):\n\tl = []\n\tfor i in range(n):\n\t\tif(l1[i]==l2[i]):\n\t\t\tans.append(l2[i])\n\t\telse:\n\t\t\tans.append(0)\n\t\t\tl.append(i)\n\n\tok = True\n\t_ans = ans\n\tfor i in range(1,n+1):\n\t\tif(done[i]==False):\n\t\t\tif(ok==True):\n\t\t\t\t_ans[l[0]] = i\n\t\t\t\tok = False\n\t\t\telse:\n\t\t\t\t_ans[l[1]] = i\n\tdiff1 = 0\n\tdiff2 = 0\n\tfor i in range(n):\n\t\tif(_ans[i]!=l1[i]):\n\t\t\tdiff1+=1\n\t\tif(_ans[i]!=l2[i]):\n\t\t\tdiff2+=1\n\tif(diff1==1 and diff2==1):\n\t\tans = _ans\n\telse:\n\t\tok = True\n\t\t_ans = ans\n\t\tfor i in range(1,n+1):\n\t\t\tif(done[i]==False):\n\t\t\t\tif(ok==True):\n\t\t\t\t\t_ans[l[1]] = i\n\t\t\t\t\tok = False\n\t\t\t\telse:\n\t\t\t\t\t_ans[l[0]] = i\n\t\tans = _ans\nfor i in ans:\n\t\tprint(i,end=\" \")\n", "n = int(input())\na = input().split()\nb = input().split()\na = [int(i) for i in a]\nb = [int(i) for i in b]\n\ncounter = [-1 for i in range(n)]\n\nk_a = 0\nk_a_i1, k_a_i2 = -1, -1\n\nfor i in range(n):\n    if counter[a[i] - 1] != -1:\n        k_a = a[i]\n        k_a_i1, k_a_i2 = counter[a[i] - 1], i\n    counter[a[i] - 1] = i\ng_a = counter.index(-1) + 1\n\ncounter = [-1 for i in range(n)]\n\nk_b = 0\nk_b_i1, k_b_i2 = -1, -1\n\nfor i in range(n):\n    if counter[b[i] - 1] != -1:\n        k_b = b[i]\n        k_b_i1, k_b_i2 = counter[b[i] - 1], i\n    counter[b[i] - 1] = i\n\ng_b = counter.index(-1) + 1\n\nres = a.copy()\nres[k_a_i1] = g_a\n\nc_a = 0\nc_b = 0\n\nfor i in range(n):\n    if res[i] != a[i]:\n        c_a += 1\n    if res[i] != b[i]:\n        c_b += 1\n\nif c_a == 1 and c_b == 1:\n    out = ''\n    for i in res:\n        out += str(i) + ' '\n    print(out)\n    return\n\nres = a.copy()\nres[k_a_i2] = g_a\n\nc_a = 0\nc_b = 0\n\nfor i in range(n):\n    if res[i] != a[i]:\n        c_a += 1\n    if res[i] != b[i]:\n        c_b += 1\n\nif c_a == 1 and c_b == 1:\n    out = ''\n    for i in res:\n        out += str(i) + ' '\n    print(out)\n    return\n\nres = a.copy()\nres[k_b_i1] = g_b\n\nc_a = 0\nc_b = 0\n\nfor i in range(n):\n    if res[i] != a[i]:\n        c_a += 1\n    if res[i] != b[i]:\n        c_b += 1\n\nif c_a == 1 and c_b == 1:\n    out = ''\n    for i in res:\n        out += str(i) + ' '\n    print(out)\n    return\n\nres = a.copy()\nres[k_b_i2] = g_b\n\nc_a = 0\nc_b = 0\n\nfor i in range(n):\n    if res[i] != a[i]:\n        c_a += 1\n    if res[i] != b[i]:\n        c_b += 1\n\nif c_a == 1 and c_b == 1:\n    out = ''\n    for i in res:\n        out += str(i) + ' '\n    print(out)\n    return\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def __starting_point():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    ans_list = [-3 for i in range(n)]\n\n    mismatch_count = 0\n    ans_set = set([])\n    for i in range(0, n):\n        if a[i] == b[i]:\n            ans_list[i] = a[i]\n            ans_set.add(a[i])\n        else:\n            mismatch_count += 1\n            ans_list[i] += mismatch_count\n\n    one_to_n_set = set([i for i in range(1, n + 1)])\n    add_set = one_to_n_set.difference(ans_set)\n    if mismatch_count == 1:\n        ans_list[ans_list.index(-2)] = add_set.pop()\n    else:\n        tmp1 = ans_list.index(-2)\n        tmp2 = ans_list.index(-1)\n        ele1 = add_set.pop()\n        ele2 = add_set.pop()\n        if ele1 == a[tmp1] and ele2 == b[tmp2]:\n            ans_list[tmp1] = ele1\n            ans_list[tmp2] = ele2\n        elif ele1 == a[tmp2] and ele2 == b[tmp1]:\n            ans_list[tmp2] = ele1\n            ans_list[tmp1] = ele2\n        elif ele2 == a[tmp1] and ele1 == b[tmp2]:\n            ans_list[tmp1] = ele2\n            ans_list[tmp2] = ele1\n        elif ele2 == a[tmp2] and ele1 == b[tmp1]:\n            ans_list[tmp2] = ele2\n            ans_list[tmp1] = ele1\n\n    for i in range(0, n):\n        print(ans_list[i], end=' ')\n\n__starting_point()", "size = int(input())\na = [int(elem) for elem in input().split()]\nb = [int(elem) for elem in input().split()]\n\nright = []\na_remain = []\nb_remain = []\ncand = []\nfor idx in range(size):\n    if a[idx] == b[idx]:\n        right.append(a[idx])\n    else:\n        right.append(0)\n        a_remain.append(a[idx])\n        b_remain.append(b[idx])\n\nfor elem in range(1, size+1):\n    if elem not in right:\n        cand.append(elem)\n\ndef diff(seq_a, seq_b):\n    if (seq_a[0] == seq_b[0] and seq_a[1] != seq_b[1]) or \\\n       (seq_a[0] != seq_b[0] and seq_a[1] == seq_b[1]):\n        return True\n    else:\n        return False\n\ndef replace(original, pattern):\n    pos = 0\n    for idx, elem in enumerate(original):\n        if elem == 0:\n            original[idx] = pattern[pos]\n            pos += 1\n    return [str(elem) for elem in original]\n\nif len(cand) == 1:\n    print(' '.join(replace(right, cand)))\nelif diff(cand, a_remain) and diff(cand, b_remain):\n    print(' '.join(replace(right, cand)))\nelse:\n    cand.reverse()\n    print(' '.join(replace(right, cand)))\n", "from collections import Counter\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ncounta = Counter(a)\ncountb = Counter(b)\nab = [0]*n\nfor i in range(n):\n    if a[i] == b[i]:  ab[i] =a[i]\n\n#print(ab)\ntest = set(list(range(1,n+1)))\n#abtup = set([])\nfor i in range(n):\n    setab = set(ab)\n    realtest = test - setab\n\n    if ab[i] == 0:\n        if a[i] in setab and b[i] in setab:\n            if len(realtest) != 0:\n                ab[i] = realtest.pop()\n        \n        elif a[i] in setab:\n            ab[i] = b[i]\n        elif b[i] in setab:\n            ab[i] = a[i]\n        else:\n            if counta[a[i]] > 1 and countb[b[i]] > 1:\n                if len(realtest) != 0:\n                    ab[i] = realtest.pop()\n                else:\n                    ab[i] = a[i]\n            elif counta[a[i]] > 1 and not countb[b[i]] > 1:\n                ab[i] = b[i]\n            elif not counta[a[i]] > 1 and countb[b[i]] > 1:\n                ab[i] = a[i]\n            \nprint(\" \".join(list(map(str,ab))))\n\n\n\n\n", "import sys\nread=lambda:sys.stdin.readline().rstrip()\nreadi=lambda:int(sys.stdin.readline())\nwriteln=lambda x:sys.stdout.write(str(x)+\"\\n\")\nwrite=lambda x:sys.stdout.write(x)\nN = readi()\nA = list(map(int, read().split()))\nB = list(map(int, read().split()))\nncntA = [0]*(N+1)\nncntB = [0]*(N+1)\ndiff = []\nfor i in range(N):\n    if A[i] != B[i]:\n        diff.append(i)\n    ncntA[A[i]] += 1\n    ncntB[B[i]] += 1\n\nif len(diff) == 2:\n    P = list(A)\n    P[diff[0]] = B[diff[0]]\n    \n    ncntP = [0]*(N+1)\n    for i in range(N):\n        ncntP[P[i]] += 1\n\n    flag = False\n    for i in range(1, N+1):\n        if ncntP[i] == 0:\n            flag = True\n            break\n    if flag:\n        P = list(A)\n        P[diff[1]] = B[diff[1]]\n\n    writeln(' '.join(str(c) for c in P))\nelse:\n    k = -1\n    for i in range(1, N+1):\n        if ncntA[i] == 0 and ncntB[i] == 0:\n            k = i\n            break\n    P = list(A)\n    P[diff[0]] = k\n    writeln(' '.join(str(c) for c in P))", "import sys\n\ninput = sys.stdin.readline\n\nn = int(input())\n\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nperm = [-1 for i in range(n)]\navail = set()\n\nfor i in range(1,n+1):\n    avail.add(i)\n\nfor i in range(n):\n    if a[i] == b[i]:\n        avail.remove(a[i])\n        perm[i] = a[i]\n\ndef difference(seq1, seq2):\n    count = 0\n    for i in range(len(seq1)):\n        if seq1[i] != seq2[i]:\n            count += 1\n        if count > 1:\n            return 0\n    return 1\n\ndef solve(seq, curravail):\n    if not curravail:\n        if difference(seq, a) == 1 and difference(seq, b) == 1:\n            return seq\n    for i in range(len(seq)):\n        if (seq[i] == -1):\n            for item in list(curravail):\n                newseq = list(seq)\n                newseq[i] = item\n                newset = set(curravail)\n                newset.remove(item)\n                if solve(newseq, newset):\n                    return solve(newseq, newset)\n\nprint(\" \".join(map(str,solve(perm,avail))))", "n=int(input())\na=[int(x) for x in input().split()]\nb=[int(x) for x in input().split()]\nc=[0]*n\nd=set([x for x in range(1,n+1)])\nfor x in range(n):\n    if a[x]==b[x]:\n        c[x]=a[x]\n        d.remove(a[x])\n    elif a.count(a[x])+b.count(a[x])==1:\n        c[x]=a[x]\n        d.remove(a[x])\n    elif a.count(b[x])+b.count(b[x])==1:\n        c[x]=b[x]\n        d.remove(b[x])\nif(len(d))==0:\n    ty = str(c)[1:-1].replace(\",\", \"\")\n    print(ty)\nif len(d)==1:\n    c[c.index(0)]=d.pop()\n    ty=str(c)[1:-1].replace(\",\",\"\")\n    print(ty)\nelif len(d)==2:\n    c[c.index(0)] = d.pop()\n    c[c.index(0)] = d.pop()\n    ty = str(c)[1:-1].replace(\",\", \"\")\n    print(ty)", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ncnt = 0\nnot_equals = []\nfor i in range(n):\n    if a[i] != b[i]:\n        not_equals.append(i)\nif len(not_equals) == 1:\n    x = 1\n    while x <= n and x in a and x in b:\n        x += 1\n    a[not_equals[0]] = x\n    print(*a)\nelse:\n    a2 = [elem for elem in a]\n    a2[not_equals[0]] = b[not_equals[0]]\n    if sorted(a2) == [i for i in range(1, n + 1)]:\n        print(*a2)\n    else:\n        a2 = [elem for elem in a]\n        a2[not_equals[1]] = b[not_equals[1]]\n        print(*a2)\n"]