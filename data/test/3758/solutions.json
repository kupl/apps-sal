["from sys import stdin, stdout\n\nn = int(stdin.readline())\ns = stdin.readline().strip()\n\nmins = []\npacks = []\n\nfor i in range(len(s)):\n    if s[i] == '*':\n        mins.append(i)\n    elif s[i] == 'P':\n        packs.append(i)\n\nl, r = -1, 2 * len(s) + 1\nwhile r - l > 1:\n    m = (l + r) >> 1\n    \n    test1 = mins[:]\n    test2 = packs[:]\n    \n    \n    while test2 and test1:\n        cnt = m\n        pos = test2.pop()\n        \n        if pos > test1[-1]:\n            while test1 and abs(pos - test1[-1]) <= cnt:\n                cnt -= abs(pos - test1[-1])\n                pos = test1[-1]\n                test1.pop()\n        else:\n            cntl, cntr = 0, 0\n            \n            if abs(test1[-1] - pos) > m:\n                break\n            \n            lpos = (m + pos - test1[-1]) // 2\n            rpos = m - 2 * abs(test1[-1] - pos)\n            \n            lb, rb = -1, len(test1)\n            while rb - lb > 1:\n                mb = (lb + rb) >> 1\n                \n                if pos - test1[mb] <= lpos:\n                    rb = mb\n                else:\n                    lb = mb\n            \n            cntl = len(test1) - rb\n            \n            lb, rb = -1, len(test1)\n            while rb - lb > 1:\n                mb = (lb + rb) >> 1\n                \n                if pos - test1[mb] <= rpos:\n                    rb = mb\n                else:\n                    lb = mb\n            \n            cntr = len(test1) - rb\n            \n            cnt = max(cntl, cntr)\n            while test1 and cnt:\n                test1.pop()\n                cnt -= 1\n    \n    \n    if not test1:\n        r = m\n    else:\n        l = m\n    \nstdout.write(str(r))", "import bisect\n\nn = int(input())\ns = input()\npackmans = []\nstars = []\nfor i in range(n):\n    if s[i] == '*':\n        stars.append(i)\n    elif s[i] == 'P':\n        packmans.append(i)\n\nif len(stars) == 0:\n    print(0)\n    return\n\n\ndef check(t):\n    first_to_eat = 0\n    for i in range(len(packmans)):\n        x = stars[first_to_eat]\n        if packmans[i] > x:\n            if packmans[i] - x > t:\n                return False\n            d1 = t - 2 * (packmans[i] - x)\n            d2 = (t - (packmans[i] - x)) // 2\n            first_to_eat = bisect.bisect_right(stars, packmans[i] + max(d1, d2))\n            if first_to_eat < len(stars) and stars[first_to_eat] == packmans[i] + max(d1, d2):\n                first_to_eat += 1\n\n        else:\n            j = bisect.bisect_right(stars, packmans[i] + t)\n            if first_to_eat < len(stars) and stars[first_to_eat] == packmans[i] + t:\n                first_to_eat += 1\n            first_to_eat = max(j, first_to_eat)\n        if first_to_eat >= len(stars):\n            return True\n    return first_to_eat >= len(stars)\n\n\nl = 0\nr = 2 * n + 1\n\nwhile r - l > 1:\n    m = (l + r) // 2\n    if check(m):\n        r = m\n    else:\n        l = m\nprint(r)\n"]