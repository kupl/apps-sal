["read_line = lambda: [int(i) for i in input().split()]\n\nn, m, k = read_line()\na = [read_line() for i in range(n)]\nif n < m:\n    n, m, a = m, n, list(zip(*a))\n\nxs = []\nfor y in a:\n    x = 0\n    for b in y:\n        x = 2 * x + b\n    xs.append(x)\n\ndef work(y):\n    tot = 0\n    for x in xs:\n        c = bin(x ^ y).count('1')\n        tot += min(c, m - c)\n    return tot\n\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\n\nprint(ans if ans <= k else -1)\n", "from functools import *\n\nread_line = lambda: [int(i) for i in input().split()]\n\nn, m, k = read_line()\na = [read_line() for i in range(n)]\nif n < m:\n    n, m, a = m, n, list(zip(*a))\n\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\nminm = lambda a: min(a, m - a)\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\n\nprint(ans if ans <= k else -1)\n", "from functools import *\n\nread_line = lambda: [int(i) for i in input().split()]\n\nn, m, k = read_line()\na = [read_line() for i in range(n)]\nif n < m:\n    n, m, a = m, n, list(zip(*a))\n\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\nminm = lambda a: min(a, m - a)\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\n\nprint(ans if ans <= k else -1)\n", "from functools import *\n\nread_line = lambda: [int(i) for i in input().split()]\n\nn, m, k = read_line()\na = [read_line() for i in range(n)]\nif n < m:\n    n, m, a = m, n, list(zip(*a))\n\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\nminm = lambda a: min(a, m - a)\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\n\nprint(ans if ans <= k else -1)\n\n", "from functools import *\n\nread_line = lambda: [int(i) for i in input().split()]\n\nn, m, k = read_line()\na = [read_line() for i in range(n)]\nif n < m:\n    n, m, a = m, n, list(zip(*a))\n\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\nminm = lambda a: min(a, m - a)\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\n\nprint(ans if ans <= k else -1)\n\n", "from functools import *\n\nread_line = lambda: [int(i) for i in input().split()]\n\nn, m, k = read_line()\na = [read_line() for i in range(n)]\nif n < m:\n    n, m, a = m, n, list(zip(*a))\n\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\nminm = lambda a: min(a, m - a)\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\n\nprint(ans if ans <= k else -1)\n\n", "from functools import *\n\nread_line = lambda: [int(i) for i in input().split()]\n\nn, m, k = read_line()\na = [read_line() for i in range(n)]\nif n < m:\n    n, m, a = m, n, list(zip(*a))\n\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\nminm = lambda a: min(a, m - a)\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\n\nprint(ans if ans <= k else -1)\n\n", "from functools import *\n\nread_line = lambda: [int(i) for i in input().split()]\n\nn, m, k = read_line()\na = [read_line() for i in range(n)]\nif n < m:\n    n, m, a = m, n, list(zip(*a))\n\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\nminm = lambda a: min(a, m - a)\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\n\nprint(ans if ans <= k else -1)\n\n", "from functools import *\n\nread_line = lambda: [int(i) for i in input().split()]\n\nn, m, k = read_line()\na = [read_line() for i in range(n)]\nif n < m:\n    n, m, a = m, n, list(zip(*a))\n\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\nminm = lambda a: min(a, m - a)\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\n\nprint(ans if ans <= k else -1)\n\n", "from functools import *\n\nread_line = lambda: [int(i) for i in input().split()]\n\nn, m, k = read_line()\na = [read_line() for i in range(n)]\nif n < m:\n    n, m, a = m, n, list(zip(*a))\n\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\nminm = lambda a: min(a, m - a)\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\n\nprint(ans if ans <= k else -1)\n\n", "from functools import *\n\nread_line = lambda: [int(i) for i in input().split()]\n\nn, m, k = read_line()\na = [read_line() for i in range(n)]\nif n < m:\n    n, m, a = m, n, list(zip(*a))\n\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\nminm = lambda a: min(a, m - a)\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\n\nprint(ans if ans <= k else -1)\n\n", "from functools import *\n\nread_line = lambda: [int(i) for i in input().split()]\n\nn, m, k = read_line()\na = [read_line() for i in range(n)]\nif n < m:\n    n, m, a = m, n, list(zip(*a))\n\nxs = [reduce(lambda x, b: 2 * x + b, y) for y in a]\nminm = lambda a: min(a, m - a)\nwork = lambda y: sum(minm(bin(x ^ y).count('1')) for x in xs)\nans = min(list(map(work, xs if m > k else list(range(1<<m)))))\n\nprint(ans if ans <= k else -1)\n\n\n\n\n# Made By Mostafa_Khaled\n"]