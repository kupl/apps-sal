["t = int(input())\n\nfor _ in range(t):\n    n, k = [int(x) for x in input().split()]\n    l1, r1 = [int(x) for x in input().split()]\n    l2, r2 = [int(x) for x in input().split()]\n    if l1 > l2:\n        l1, r1, l2, r2 = l2, r2, l1, r1\n\n    if l2 < r1:\n        # they already intersect.\n        start = (min(r1, r2) - max(l1, l2))*n\n        if start >= k:\n            print(0)\n            continue\n        cheap = n*(max(r1, r2) - min(l1, l2)) - start\n        if start + cheap >= k:\n            print(k - start)\n            continue\n        else:\n            print(cheap + (k - start - cheap)*2)\n            continue\n\n    # they do not intersect yet.\n    best = 10**100\n    cost_sf = 0\n    intersection_sf = 0\n    for j in range(n):\n        # compute price using j-th interval as the last.\n        cost_sf += l2 - r1\n        cheap = r2 - l1\n        if intersection_sf + cheap >= k:\n            best = min(best, cost_sf + max((k - intersection_sf), 0))\n\n        intersection_sf += cheap\n        cost_sf += cheap\n        \n        best = min(best, cost_sf + max((k - intersection_sf)*2, 0))\n    print(best)\n\n", "def inter(l1, r1, l2, r2):\n    l = max(l1,l2)\n    r = min(r1,r2)\n    return max(r - l, 0)\ndef solve():\n    n, k = map(int,input().split())\n    al, ar = map(int,input().split())\n    bl, br = map(int,input().split())\n    res = inter(al,ar,bl,br) * n\n    goodt = max(ar, br) - min(al,bl) - inter(al,ar,bl,br)\n    minhodi = 1000000000000\n    hodi = 0\n    to_soed = max(0, max(al,bl) - min(ar, br))\n    if res >= k:\n        print(0)\n        return 0\n    for i in range(n):\n        hodi += to_soed\n        ineed = k - res\n        if goodt >= ineed:\n            hodi += ineed\n            minhodi = min(minhodi, hodi)\n            break\n        hodi += goodt\n        res += goodt\n        minhodi = min(hodi + (k - res) * 2, minhodi)\n    print(minhodi)\nfor i in range(int(input())):\n    solve()", "import sys\n\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\n\ndef solve():\n    n, k = nm()\n    a, b = nm()\n    c, d = nm()\n    if d < b:\n        a, b, c, d = c, d, a, b\n    if a <= c <= b:\n        cur = (b - c) * n\n        if (d - a) * n > k:\n            print(max(k - cur, 0))\n        else:\n            ans = (d - a) * n - cur\n            print(ans + (k - (d - a) * n) * 2)\n    elif c < a:\n        cur = (b - a) * n\n        if (d - c) * n > k:\n            print(max(k - cur, 0))\n        else:\n            ans = (d - c) * n - cur\n            print(ans + (k - (d - c) * n) * 2)\n    else:\n        ans = 10**18\n        cur = 0\n        for i in range(n):\n            cur += c - b\n            if k > d - a:\n                k -= d - a\n                cur += d - a\n            else:\n                cur += k\n                k -= k\n            ans = min(ans, cur + k * 2)\n        print(ans)\n    return\n\n\n# solve()\n\nT = ni()\nfor _ in range(T):\n    solve()\n", "for _ in range(int(input())):\n    n,k=list(map(int,input().split()))\n    l1,r1=list(map(int,input().split()))\n    l2,r2=list(map(int,input().split()))\n    if l1>l2:\n        l1,r1,l2,r2=l2,r2,l1,r1\n\n    if l2>r1:\n        ans=float(\"inf\")\n        for i in range(1,n+1):\n            temp=i*(l2-r1)\n            limit=(r2-l1)*i\n            if k<=limit:\n                temp+=k\n                ans=min(ans,temp)\n            else:\n                temp+=limit\n                K=k-limit\n                temp+=2*K\n                ans=min(ans,temp)\n        print(ans)\n    else:\n        count=n*(min(r1,r2)-l2)\n        res=0\n        if count>k:\n            print(res)\n            continue\n        b=max(r2,r1)-min(l2,l1)-(min(r1,r2)-l2)\n        for i in range(n):\n            if k-count<=b:\n                res+=k-count\n                break\n            else:\n                res+=b\n                count+=b\n        else:\n            res+=(k-count)*2\n        print(res)\n", "from sys import stdin\n\ntt = int(stdin.readline())\n\nfor loop in range(tt):\n\n    #don't\n\n    n,k = map(int,stdin.readline().split() )\n    l1,r1 = map(int,stdin.readline().split())\n    l2,r2 = map(int,stdin.readline().split())\n\n    #don't\n    if l1 >= r2 or l2 >= r1:\n        ans = float(\"inf\")\n        for usenum in range(1,n+1):\n\n            if max(abs(l1-r2),abs(l2-r1))*usenum >= k:\n                ans = min(ans , min(abs(l1-r2),abs(l2-r1))*usenum + k)\n            else:\n                rem = k - max(abs(l1-r2),abs(l2-r1))*usenum\n                ans = min(ans , min(abs(l1-r2),abs(l2-r1))*usenum + max(abs(l1-r2),abs(l2-r1))*usenum + rem*2)\n        print (ans)\n\n    else:\n        ans = float(\"inf\")\n        over = min(r1-l1 , r2-l2 , r1-l2 , r2-l1)\n        usenum = n\n\n        if over * usenum >= k:\n            print (0)\n            continue\n        k -= over * usenum\n        useable = max(r1-l1 , r2-l2 , r1-l2 , r2-l1) - over\n\n        if useable * usenum >= k:\n            print (k)\n            continue\n        else:\n            rem = k - useable * usenum\n            print (useable * usenum + rem*2)", "for _ in range(int(input())):\n    n, k = list(map(int, input().split()))\n    l_1, r1 = list(map(int, input().split()))\n    l_2, r2 = list(map(int, input().split()))\n    if r1 < l_2:\n        pre_steps = l_2 - r1\n    elif l_1 > r2:\n        pre_steps = l_1 - r2\n    else:\n        pre_steps = 0\n    if pre_steps:\n        easy_steps = r1 + r2 - l_1 - l_2 + pre_steps\n    else:\n        easy_steps = abs(l_1 - l_2) + abs(r1 - r2)\n        k -= (min(r1, r2) - max(l_1, l_2)) * n\n    ans = pre_steps * n + k * 2\n    # for n1 in max(1, k // easy_steps), min(1, (k - 1) // easy_steps + 1):\n    for n1 in range(1, n + 1):\n        cur_ans = pre_steps * n1\n        if easy_steps * n1 < k:\n            cur_ans += k * 2 - easy_steps * n1\n        else:\n            cur_ans += k\n        ans = min(ans, cur_ans)\n    if k <= 0:\n        ans = 0\n    print(ans)\n", "t = int(input())\n\nfor _ in range(t):\n    n, k = list(map(int, input().split()))\n    \n    l1, r1 = list(map(int, input().split()))\n    l2, r2 = list(map(int, input().split()))\n    \n    if l1 > l2:\n        l1, r1, l2, r2 = l2, r2, l1, r1\n        \n    if l2 <= r1: # already overlapping\n        per_interval = abs(l1-l2) + abs(r1-r2)\n        already_overlap = min(r1, r2) - max(l1, l2)\n        k -= already_overlap * n\n        k = max(k, 0)\n        if per_interval * n >= k:\n            print(k)\n            continue\n        cost = per_interval * n\n        cost += 2 * (k - cost)\n        print(cost)\n        continue\n    \n    # not overlapping\n    \n    diff = l2 - r1\n    per_interval = r2 - l1\n    \n    if per_interval >= k:\n        print(diff + k)\n        continue\n    \n    cost = diff + per_interval\n    #print(diff, per_interval)\n    rem_n = n-1\n    rem_k = k - per_interval\n    while rem_n and diff < per_interval and rem_k >= per_interval:\n        rem_n -= 1\n        rem_k -= per_interval\n        cost += diff + per_interval\n    \n    if rem_n and diff < per_interval:\n        cost_from_new = diff + rem_k\n        cost_from_cur = 2 * rem_k\n        cost += min(cost_from_new, cost_from_cur)\n    else:\n        cost += 2 * rem_k\n    print(cost)\n", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\nfor testcase in range(1,T+1):\n    n,k = list(map(int,input().split()))\n    a,b = list(map(int,input().split()))\n    s,t = list(map(int,input().split()))\n\n    if a > s:\n        a,s = s,a\n        b,t = t,b\n    \"\"\" a <= s \"\"\"\n\n\n    if s <= b and n*(min(b,t)-s) >= k:\n        print(0)\n    else:\n        if s <= b:\n            now = n*(min(b,t)-s)\n            w = n*((s-a) + abs(t-b))\n            if now + w >= k:\n                print(k-now)\n            else:\n                now += w\n                print(w + (k-now)*2)\n        else:\n            if (t-a) >= k:\n                print(s-b+k)\n                \n            else:\n                res = 10**20\n                for i in range(1,n+1):\n                    tmp = i*(s-b)\n                    if i*(t-a) >= k:\n                        tmp += k\n                        #print(\"b\",i,a,b,s,t)\n                    else:\n                        tmp += i*(t-a) + (k-i*(t-a))*2\n                    res = min(res,tmp)\n                    #print(\"a\",i,tmp)\n                print(res)\n\n", "t = int(input())\nfor _ in range(t):\n    n, k = list(map(int, input().split()))\n    l1, r1 = list(map(int, input().split()))\n    l2, r2 = list(map(int, input().split()))\n    mr = max(r1, r2) - min(l1, l2)\n    step = 2 * mr - (r1 - l1) - (r2 - l2)\n    over = max(0, min(r1, r2) - max(l1, l2))\n    dis = (max(l1, l2) - min(r1, r2)) if over == 0 else 0\n    k = k - over * n\n    if k <= 0:\n        print(0)\n        continue\n    mr -= over\n    res = 0\n    if k <= mr:\n        res = dis + k\n    elif mr * n >= k:\n        cnt = k // mr\n        r = k % mr\n        res += cnt * step\n        if r > dis:\n            res += dis + r\n        else:\n            res += 2 * r\n    else:\n        res += n * step + (k - mr * n) * 2\n    print(res)\n", "import sys\ninput = sys.stdin.readline\nfor f in range(int(input())):\n    n,k=map(int,input().split())\n    l1,r1=map(int,input().split())\n    l2,r2=map(int,input().split())\n    intersect=False\n    if l1>=l2 and l1<=r2:\n        intersect=True\n    if r1>=l2 and r1<=r2:\n        intersect=True\n    if l2>=l1 and l2<=r1:\n        intersect=True\n    if r2>=l1 and r2<=r1:\n        intersect=True\n    if intersect:\n        l=min(l1,l2)\n        r=max(r1,r2)\n        totlen=r-l\n        intlen=(r2-l2)+(r1-l1)-totlen\n        if n*intlen>=k:\n            print(0)\n        else:\n            if n*totlen>=k:\n                print(k-n*intlen)\n            else:\n                s=n*(totlen-intlen)\n                k-=n*totlen\n                print(s+2*k)\n    else:\n        l=min(l1,l2)\n        r=max(r1,r2)\n        totlen=r-l\n        dist=totlen-(r2-l2)-(r1-l1)\n        s=0\n        i=0\n        while k>0 and i<n:\n            i+=1\n            s+=dist\n            if k<=totlen:\n                s+=k\n                k=0\n            else:\n                k-=totlen\n                s+=totlen\n                if k<dist:\n                    s+=2*k\n                    k=0\n        if k>0:\n            s+=2*k\n        print(s)"]