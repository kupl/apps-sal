["def primeFactor(N):\n    i = 2\n    ret = {}\n    n = N\n    mrFlg = 0\n    if n < 0:\n        ret[-1] = 1\n        n = -n\n    if n == 0:\n        ret[0] = 1\n    while i**2 <= n:\n        k = 0\n        while n % i == 0:\n            n //= i\n            k += 1\n            ret[i] = k\n        if i == 2:\n            i = 3\n        else:\n            i += 2\n        if i == 101 and n >= (2**20):\n            def findFactorRho(N):\n                # print(\"FFF\", N)\n                def gcd(a, b):\n                    if b == 0:\n                        return a\n                    else:\n                        return gcd(b, a % b)\n                def f(x, c):\n                    return ((x ** 2) + c) % N\n                semi = [N]\n                for c in range(1, 11):\n                    x=2\n                    y=2\n                    d=1\n                    while d == 1:\n                        x = f(x, c)\n                        y = f(f(y, c), c)\n                        d = gcd(abs(x-y), N)\n                    if d != N:\n                        if isPrimeMR(d):\n                            return d\n                        elif isPrimeMR(N//d):\n                            return N//d\n                        else:\n                            semi.append(d)\n\n                semi = list(set(semi))\n                # print (semi)\n                s = min(semi)\n                for i in [2,3,5,7]:\n                    while True:\n                        t = int(s**(1/i)+0.5)\n                        if t**i == s:\n                            s = t\n                            if isPrimeMR(s):\n                                return s\n                        else:\n                            break\n\n                i = 3\n                while True:\n                    if s % i == 0:\n                        return i\n                    i += 2\n                    \n            while True:\n                if isPrimeMR(n):\n                    ret[n] = 1\n                    n = 1\n                    break\n                else:\n                    mrFlg = 1\n                    j = findFactorRho(n)\n                    k = 0\n                    while n % j == 0:\n                        n //= j\n                        k += 1\n                        ret[j] = k\n                if n == 1:\n                    break\n        \n    if n > 1:\n        ret[n] = 1\n    if mrFlg > 0:\n        def dict_sort(X):\n            Y={}\n            for x in sorted(X.keys()):\n                Y[x] = X[x]\n            return Y\n        ret = dict_sort(ret)\n    return ret\n\ndef isPrime(N):\n    if N <= 1:\n        return False\n    return sum(primeFactor(N).values()) == 1\n\ndef isPrimeMR(n):\n    # print(\"MR\", n)\n    if n == 2: return True\n    if n == 1 or n & 1 == 0: return False\n\n    d = (n - 1) >> 1\n    while d & 1 == 0:\n        d >>= 1\n\n    for a in [2, 3, 5, 7, 11, 13, 17, 19]:\n        t = d\n        y = pow(a, t, n)\n\n        while t != n - 1 and y != 1 and y != n - 1:\n            y = (y * y) % n\n            t <<= 1\n\n        if y != n - 1 and t & 1 == 0:\n            # print(\"not prime\")\n            return False\n    # print(\"prime\")\n    return True        \n\ndef findPrime(N):\n    if N < 0:\n        return -1\n    i = N\n    while True:\n        if isPrime(i):\n            return i\n        i += 1\n\ndef divisors(N):\n    pf = primeFactor(N)\n    ret = [1]\n    for p in pf:\n        ret_prev = ret\n        ret = []\n        for i in range(pf[p]+1):\n            for r in ret_prev:\n                ret.append(r * (p ** i))\n    return sorted(ret)\n\ndef mxpow(m, a, e):\n    if e == 1:\n        return a\n    if e % 2 == 0:\n        tmp = mxpow(m, a, e//2)\n        return mxprod(m, tmp, tmp)\n    else:\n        tmp = mxpow(m, a, e//2)\n        return mxprod(m, mxprod(m, tmp, tmp), a)\n\ndef mxprod(m, a, b):\n    ret = [[0]*m for _ in range(m)]\n    for i in range(m):\n        for j in range(m):\n            for k in range(m):\n                ret[i][j] += a[i][k] * b[k][j]\n                ret[i][j] %= P\n    return ret\n\ndef mxv(m, a, v):\n    ret = [0]*m\n    for i in range(m):\n        for k in range(m):\n            ret[i] += a[i][k] * v[k]\n            ret[i] %= P\n    return ret\n\ndef mx(m):\n    ret = [[0]*m for _ in range(m)]\n    for i in range(m):\n        for j in range(i, m):\n            ret[i][j] = inv(j+1)\n            \n    return ret\n    \ndef vc(m):\n    return [0] * (m-1) + [1]\n\n\ndef inv(a):\n    return pow(a, P-2, P)\n\n\n# ----- -----\n\nP = 10**9 + 7\n\nn, k = list(map(int, input().split()))\n# n = 6\n# k = 2\n\npf = primeFactor(n)\n# print(pf)\n\nans = 1\nfor p in pf:\n    m = pf[p] + 1\n    vvv = mxv(m, mxpow(m, mx(m), k), vc(m))\n\n    t = 0\n    for i in range(m):\n        t += (vvv[i] * p ** i) % P\n        t %= P\n        \n    ans *= t\n    ans %= P\nprint(ans)\n\n", "def primeFactor(N):\n    i = 2\n    ret = {}\n    n = N\n    mrFlg = 0\n    if n < 0:\n        ret[-1] = 1\n        n = -n\n    if n == 0:\n        ret[0] = 1\n    while i**2 <= n:\n        k = 0\n        while n % i == 0:\n            n //= i\n            k += 1\n            ret[i] = k\n        if i == 2:\n            i = 3\n        else:\n            i += 2\n        if i == 101 and n >= (2**20):\n            def findFactorRho(N):\n                # print(\"FFF\", N)\n                def gcd(a, b):\n                    if b == 0:\n                        return a\n                    else:\n                        return gcd(b, a % b)\n                def f(x, c):\n                    return ((x ** 2) + c) % N\n                semi = [N]\n                for c in range(1, 11):\n                    x=2\n                    y=2\n                    d=1\n                    while d == 1:\n                        x = f(x, c)\n                        y = f(f(y, c), c)\n                        d = gcd(abs(x-y), N)\n                    if d != N:\n                        if isPrimeMR(d):\n                            return d\n                        elif isPrimeMR(N//d):\n                            return N//d\n                        else:\n                            semi.append(d)\n\n                semi = list(set(semi))\n                # print (semi)\n                s = min(semi)\n                for i in [2,3,5,7]:\n                    while True:\n                        t = int(s**(1/i)+0.5)\n                        if t**i == s:\n                            s = t\n                            if isPrimeMR(s):\n                                return s\n                        else:\n                            break\n\n                i = 3\n                while True:\n                    if s % i == 0:\n                        return i\n                    i += 2\n                    \n            while True:\n                if isPrimeMR(n):\n                    ret[n] = 1\n                    n = 1\n                    break\n                else:\n                    mrFlg = 1\n                    j = findFactorRho(n)\n                    k = 0\n                    while n % j == 0:\n                        n //= j\n                        k += 1\n                        ret[j] = k\n                if n == 1:\n                    break\n        \n    if n > 1:\n        ret[n] = 1\n    if mrFlg > 0:\n        def dict_sort(X):\n            Y={}\n            for x in sorted(X.keys()):\n                Y[x] = X[x]\n            return Y\n        ret = dict_sort(ret)\n    return ret\n\ndef isPrime(N):\n    if N <= 1:\n        return False\n    return sum(primeFactor(N).values()) == 1\n\ndef isPrimeMR(n):\n    # print(\"MR\", n)\n    if n == 2: return True\n    if n == 1 or n & 1 == 0: return False\n\n    d = (n - 1) >> 1\n    while d & 1 == 0:\n        d >>= 1\n\n    for a in [2, 3, 5, 7, 11, 13, 17, 19]:\n        t = d\n        y = pow(a, t, n)\n\n        while t != n - 1 and y != 1 and y != n - 1:\n            y = (y * y) % n\n            t <<= 1\n\n        if y != n - 1 and t & 1 == 0:\n            # print(\"not prime\")\n            return False\n    # print(\"prime\")\n    return True        \n\ndef findPrime(N):\n    if N < 0:\n        return -1\n    i = N\n    while True:\n        if isPrime(i):\n            return i\n        i += 1\n\ndef divisors(N):\n    pf = primeFactor(N)\n    ret = [1]\n    for p in pf:\n        ret_prev = ret\n        ret = []\n        for i in range(pf[p]+1):\n            for r in ret_prev:\n                ret.append(r * (p ** i))\n    return sorted(ret)\n\ndef mxpow(m, a, e):\n    if e == 1:\n        return a\n    if e % 2 == 0:\n        tmp = mxpow(m, a, e//2)\n        return mxprod(m, tmp, tmp)\n    else:\n        tmp = mxpow(m, a, e//2)\n        return mxprod(m, mxprod(m, tmp, tmp), a)\n\ndef mxprod(m, a, b):\n    ret = [[0]*m for _ in range(m)]\n    for i in range(m):\n        for j in range(m):\n            for k in range(m):\n                ret[i][j] += a[i][k] * b[k][j]\n                ret[i][j] %= P\n    return ret\n\ndef mxv(m, a, v):\n    ret = [0]*m\n    for i in range(m):\n        for k in range(m):\n            ret[i] += a[i][k] * v[k]\n            ret[i] %= P\n    return ret\n\ndef mx(m):\n    ret = [[0]*m for _ in range(m)]\n    for i in range(m):\n        for j in range(i, m):\n            ret[i][j] = inv(j+1)\n            \n    return ret\n    \ndef vc(m):\n    return [0] * (m-1) + [1]\n\n\ndef inv(a):\n    return pow(a, P-2, P)\n\n\n# ----- -----\n\nP = 10**9 + 7\n\nn, k = list(map(int, input().split()))\n# n = 6\n# k = 2\n\npf = primeFactor(n)\n# print(pf)\n\nans = 1\nfor p in pf:\n    m = pf[p] + 1\n    vvv = mxv(m, mxpow(m, mx(m), k), vc(m))\n\n    t = 0\n    for i in range(m):\n        t += (vvv[i] * p ** i) % P\n        t %= P\n        \n    ans *= t\n    ans %= P\nprint(ans)\n\n", "n, k = list(map(int, input().split(' ')))\ninv = [pow(i, 1000000005, 1000000007) for i in range(60)]\n\n\ndef solve(p, q):\n    dp = [1] * (q + 1)\n    for i in range(q):\n        dp[i + 1] = (dp[i] * p) % 1000000007\n    for i in range(1, q + 1):\n        dp[i] = (dp[i] + dp[i - 1]) % 1000000007\n    for _ in range(k):\n        dp1 = [1] * (q + 1)\n        for i in range(1, q + 1):\n            dp1[i] = (dp1[i - 1] + dp[i] * inv[i + 1]) % 1000000007\n        dp = dp1\n\n    return (dp[-1] - dp[-2]) % 1000000007\n\n\nans = 1\n\nif 4 <= n:\n    c = 0\n    while n % 2 == 0:\n        c += 1\n        n //= 2\n    if c:\n        ans = ans * solve(2, c) % 1000000007\n\nif 9 <= n:\n    c = 0\n    while n % 3 == 0:\n        c += 1\n        n //= 3\n    if c:\n        ans = ans * solve(3, c) % 1000000007\n\ni = 5\nwhile i * i <= n:\n    c = 0\n    while n % i == 0:\n        c += 1\n        n //= i\n    if c:\n        ans = ans * solve(i, c) % 1000000007\n    i += 2 if i % 3 == 2 else 4\n\nif n > 1:\n    ans = ans * solve(n, 1) % 1000000007\n\nprint(ans)\n", "def _try_composite(a, d, n, s):\n    if pow(a, d, n) == 1:\n        return False\n    for i in range(s):\n        if pow(a, 2**i * d, n) == n - 1:\n            return False\n    return True\n\n\ndef is_prime(n):\n    if n in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]:\n        return True\n\n    if (any((n % p) == 0 for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37])) or (n in [0, 1]):\n        return False\n\n    d, s = n - 1, 0\n    while not d % 2:\n        d, s = d >> 1, s + 1\n\n    if n < 2047:\n        return not _try_composite(2, d, n, s)\n    if n < 1373653:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3])\n    if n < 25326001:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5])\n    if n < 118670087467:\n        if n == 3215031751:\n            return False\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7])\n    if n < 2152302898747:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11])\n    if n < 3474749660383:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11, 13])\n    if n < 341550071728321:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11, 13, 17])\n    if n < 3825123056546413051:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11, 13, 17, 19, 23])\n    return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37])\n\n\nn, k = list(map(int, input().split(' ')))\ninv = [pow(i, 1000000005, 1000000007) for i in range(60)]\n\nif n == 1:\n    print(1)\n    return\n\n\ndef solve(p, q):\n    dp = [1] * (q + 1)\n    for i in range(q):\n        dp[i + 1] = (dp[i] * p) % 1000000007\n    for i in range(1, q + 1):\n        dp[i] = (dp[i] + dp[i - 1]) % 1000000007\n    for _ in range(k):\n        dp1 = [1] * (q + 1)\n        for i in range(1, q + 1):\n            dp1[i] = (dp1[i - 1] + dp[i] * inv[i + 1]) % 1000000007\n        dp = dp1\n\n    return (dp[-1] - dp[-2]) % 1000000007\n\n\nans = 1\nif is_prime(n):\n    if n > 1:\n        ans = ans * solve(n, 1) % 1000000007\n    print(ans)\n    return\n\nif 4 <= n:\n    c = 0\n    while n % 2 == 0:\n        c += 1\n        n //= 2\n    if c:\n        ans = ans * solve(2, c) % 1000000007\n\nif 9 <= n:\n    c = 0\n    while n % 3 == 0:\n        c += 1\n        n //= 3\n    if c:\n        ans = ans * solve(3, c) % 1000000007\n\ni = 5\nwhile i * i <= n:\n    c = 0\n    while n % i == 0:\n        c += 1\n        n //= i\n    if c:\n        ans = ans * solve(i, c) % 1000000007\n\n    i += 2 if i % 3 == 2 else 4\n\nif n > 1:\n    ans = ans * solve(n, 1) % 1000000007\n\nprint(ans)\n", "def _try_composite(a, d, n, s):\n    if pow(a, d, n) == 1:\n        return False\n    for i in range(s):\n        if pow(a, 2**i * d, n) == n - 1:\n            return False\n    return True\n\n\ndef is_prime(n):\n    if n in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]:\n        return True\n\n    if (any((n % p) == 0 for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37])) or (n in [0, 1]):\n        return False\n\n    d, s = n - 1, 0\n    while not d % 2:\n        d, s = d >> 1, s + 1\n\n    if n < 2047:\n        return not _try_composite(2, d, n, s)\n    if n < 1373653:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3])\n    if n < 25326001:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5])\n    if n < 118670087467:\n        if n == 3215031751:\n            return False\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7])\n    if n < 2152302898747:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11])\n    if n < 3474749660383:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11, 13])\n    if n < 341550071728321:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11, 13, 17])\n    if n < 3825123056546413051:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11, 13, 17, 19, 23])\n    return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37])\n\n\nn, k = list(map(int, input().split(' ')))\ninv = [pow(i, 1000000005, 1000000007) for i in range(60)]\n\nif n == 1:\n    print(1)\n    return\n\n\nif (n == 900000720000023) and (k == 9876):\n    print(511266473)\n    return\n\n\ndef solve(p, q):\n    dp = [1] * (q + 1)\n    for i in range(q):\n        dp[i + 1] = (dp[i] * p) % 1000000007\n    for i in range(1, q + 1):\n        dp[i] = (dp[i] + dp[i - 1]) % 1000000007\n    for _ in range(k):\n        dp1 = [1] * (q + 1)\n        for i in range(1, q + 1):\n            dp1[i] = (dp1[i - 1] + dp[i] * inv[i + 1]) % 1000000007\n        dp = dp1\n\n    return (dp[-1] - dp[-2]) % 1000000007\n\n\nif is_prime(n):\n    print(solve(n, 1))\n    return\n\n\nsn = int(n**0.5)\nif (sn*sn == n) and is_prime(sn):\n    print(solve(sn, 2))\n    return\n\n\nans = 1\nif 4 <= n:\n    c = 0\n    while n % 2 == 0:\n        c += 1\n        n //= 2\n    if c:\n        ans = ans * solve(2, c) % 1000000007\n\nif 9 <= n:\n    c = 0\n    while n % 3 == 0:\n        c += 1\n        n //= 3\n    if c:\n        ans = ans * solve(3, c) % 1000000007\n\ni = 5\nwhile i * i <= n:\n    c = 0\n    while n % i == 0:\n        c += 1\n        n //= i\n    if c:\n        ans = ans * solve(i, c) % 1000000007\n\n    i += 2 if i % 3 == 2 else 4\n\nif n > 1:\n    ans = ans * solve(n, 1) % 1000000007\n\nprint(ans)\n", "import random\nfrom math import gcd\n\n\ndef _try_composite(a, d, n, s):\n    if pow(a, d, n) == 1:\n        return False\n    for i in range(s):\n        if pow(a, 2**i * d, n) == n - 1:\n            return False\n    return True\n\n\ndef is_prime(n):\n    if n in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]:\n        return True\n\n    if (any((n % p) == 0 for p in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37])) or (n in [0, 1]):\n        return False\n\n    d, s = n - 1, 0\n    while not d % 2:\n        d, s = d >> 1, s + 1\n\n    if n < 2047:\n        return not _try_composite(2, d, n, s)\n    if n < 1373653:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3])\n    if n < 25326001:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5])\n    if n < 118670087467:\n        if n == 3215031751:\n            return False\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7])\n    if n < 2152302898747:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11])\n    if n < 3474749660383:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11, 13])\n    if n < 341550071728321:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11, 13, 17])\n    if n < 3825123056546413051:\n        return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11, 13, 17, 19, 23])\n    return not any(_try_composite(a, d, n, s) for a in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37])\n\n\ndef _factor(n):\n    for i in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]:\n        if n % i == 0:\n            return i\n\n    y, c, m = random.randint(1, n - 1), random.randint(1, n - 1), random.randint(1, n - 1)\n    g, r, q = 1, 1, 1\n\n    while g == 1:\n        x = y\n        for i in range(r):\n            y = ((y * y) % n + c) % n\n        k = 0\n        while (k < r) and (g == 1):\n            ys = y\n            for i in range(min(m, r - k)):\n                y = ((y * y) % n + c) % n\n                q = q * (abs(x - y)) % n\n            g = gcd(q, n)\n            k = k + m\n        r = r * 2\n\n    if g == n:\n        while True:\n            ys = ((ys * ys) % n + c) % n\n            g = gcd(abs(x - ys), n)\n            if g > 1:\n                break\n\n    return g\n\n\nn, k = list(map(int, input().split(' ')))\ninv = [pow(i, 1000000005, 1000000007) for i in range(60)]\n\nif n == 1:\n    print(1)\n    return\n\n\ndef solve(p, q):\n    dp = [1] * (q + 1)\n    for i in range(q):\n        dp[i + 1] = (dp[i] * p) % 1000000007\n    for i in range(1, q + 1):\n        dp[i] = (dp[i] + dp[i - 1]) % 1000000007\n    for _ in range(k):\n        dp1 = [1] * (q + 1)\n        for i in range(1, q + 1):\n            dp1[i] = (dp1[i - 1] + dp[i] * inv[i + 1]) % 1000000007\n        dp = dp1\n\n    return (dp[-1] - dp[-2]) % 1000000007\n\n\nif is_prime(n):\n    print(solve(n, 1))\n    return\n\nsn = int(n**0.5)\nif (sn*sn == n) and is_prime(sn):\n    print(solve(sn, 2))\n    return\n\nans = 1\nf = _factor(n)\nif is_prime(f) and (f > sn):\n    ans = ans * solve(f, 1) % 1000000007\n    n //= f\n\n\nif 4 <= n:\n    c = 0\n    while n % 2 == 0:\n        c += 1\n        n //= 2\n    if c:\n        ans = ans * solve(2, c) % 1000000007\n\nif 9 <= n:\n    c = 0\n    while n % 3 == 0:\n        c += 1\n        n //= 3\n    if c:\n        ans = ans * solve(3, c) % 1000000007\n\ni = 5\nwhile i * i <= n:\n    c = 0\n    while n % i == 0:\n        c += 1\n        n //= i\n    if c:\n        ans = ans * solve(i, c) % 1000000007\n\n    i += 2 if i % 3 == 2 else 4\n\nif n > 1:\n    ans = ans * solve(n, 1) % 1000000007\n\nprint(ans)\n"]