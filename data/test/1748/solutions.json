["n = int(input())\nvs = [int(x) for x in input().split()]\nts = [int(x) for x in input().split()]\n\nsumt = 0\nfor i, t in enumerate(ts):\n    vs[i]+=sumt\n    sumt+=t\n\nvs.sort()\n\ntl, tr = 0, 0\nil, ir = 0, 0\nfor ind, t in enumerate(ts): #check\n    tl = tr\n    tr += t\n    while ir < n and vs[ir] <= tr: ir += 1\n    cur_sum = 0\n    while il < ir:\n        cur_sum += vs[il]-tl\n        il+=1\n##    print(ir, tl, tr,  cur_sum)\n    cur_sum += t * ((n-ir) - (n-ind-1))\n    print(cur_sum, end=\" \")\n    \n", "from itertools import accumulate\nimport bisect\n\nn = int(input())\nv = list(map(int, input().split()))\nt = list(map(int, input().split()))\n\nns = [0] * n\nlo = [0] * n\n\ntt = list(accumulate(t))\n#print(tt)\nfor i in range(n):\n    dd = v[i]\n    a = 0\n    if i != 0:\n        dd += tt[i - 1]\n        a = tt[i - 1]\n    ns[i] += 1\n    k = bisect.bisect_right(tt, dd)\n    #print(dd,k)\n    if k < n:\n        ns[k] -= 1\n\n        lo[k] +=  + v[i] + a\n        if k != 0:\n            lo[k] -= tt[k - 1]\n#print(lo)\nns = list(accumulate(ns))\n#print(ns)\nfor i in range(n):\n    lo[i] += t[i] * ns[i]\n\nprint(' '.join(list(map(str, lo))))\n", "# -*- coding: utf - 8 -*-\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n|    author: mr.math - Hakimov Rahimjon     |\n|    e-mail: mr.math0777@gmail.com          |\n|    created: 10.03.2018 22:24              |\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n# inp = open(\"input.txt\", \"r\"); input = inp.readline; out = open(\"output.txt\", \"w\"); print = out.write\nTN = 1\nfrom itertools import accumulate\nimport bisect\n\n\n# ===========================================\n\n\ndef solution():\n    n = int(input())\n    v = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    ns = [0] * n\n    lo = [0] * n\n    tt = list(accumulate(t))\n    for i in range(n):\n        dd = v[i]\n        a = 0\n        if i != 0:\n            dd += tt[i - 1]\n            a = tt[i - 1]\n        ns[i] += 1\n        k = bisect.bisect_right(tt, dd)\n        if k < n:\n            ns[k] -= 1\n    \n            lo[k] += v[i] + a\n            if k != 0:\n                lo[k] -= tt[k - 1]\n    ns = list(accumulate(ns))\n    for i in range(n):\n        lo[i] += t[i] * ns[i]\n    print(' '.join(list(map(str, lo))))\n\n\n# ===========================================\nwhile TN != 0:\n    solution()\n    TN -= 1\n# ===========================================\n# inp.close()\n# out.close()\n", "import heapq\nfrom bisect import bisect_left, bisect_right\nfrom collections import Counter\nfrom collections import OrderedDict\nfrom collections import deque\nfrom itertools import accumulate, product\n\nimport math\n\nR = lambda: map(int, input().split())\n\nn = int(input())\nsnows = list(R())\nmelts = list(R())\nacc = list(accumulate(melts))\ncnt, rem = [0] * n, [0] * n\nfor i, s in enumerate(snows):\n    ri = bisect_right(acc, s + (acc[i - 1] if i > 0 else 0))\n    cnt[i] += 1\n    if ri < n:\n        cnt[ri] -= 1\n        rem[ri] += s + (acc[i - 1] if i > 0 else 0) - (acc[ri - 1] if ri > 0 else 0)\ncnt = list(accumulate(cnt))\nfor i in range(n):\n    print(melts[i] * cnt[i] + rem[i], end=' ')", "import heapq\n\nheap = []\n\nn = int(input())\n\nV = list(map(int, input().split()))\n\nT = list(map(int, input().split()))\n\ntmp = 0\n\nfor i in range(n):\n\n    ans = 0\n\n    heapq.heappush(heap, tmp+V[i])\n\n    while len(heap) and heap[0]<=tmp+T[i]:\n\n        ans += heapq.heappop(heap)-tmp\n\n    tmp += T[i]\n\n    ans += T[i]*len(heap)\n\n    print(ans, end=' ')\n\n\n\n# Made By Mostafa_Khaled", "import heapq\n\nn = int(input())\nv = list(map(int, input().split()))\nt = list(map(int, input().split()))\n\nq = []\nmelted = 0\nfor snow, temp in zip(v, t):\n    heapq.heappush(q, snow + melted)\n    answer = 0\n    while q and q[0] <= melted + temp:\n        answer += q[0] - melted\n        heapq.heappop(q)\n    answer += temp * len(q)\n    print(answer, end = ' ')\n    melted += temp\n    \n    \n    ", "import heapq\nheap = []\nn = int(input())\nV = list(map(int, input().split()))\nT = list(map(int, input().split()))\ntmp = 0\nfor i in range(n):\n    ans = 0\n    heapq.heappush(heap, tmp+V[i])\n    while len(heap) and heap[0]<=tmp+T[i]:\n        ans += heapq.heappop(heap)-tmp\n    tmp += T[i]\n    ans += T[i]*len(heap)\n    print(ans, end=' ')\n    \n    \n", "from heapq import *\nn=int(input())\nl=list(map(int,input().split()))\nl1=list(map(int,input().split()))\nL=[]\nheapify(L)\nl2=l1[:]\nqw=[]\nfor i in range(1,n) :\n    l2[i]+=l2[i-1]\nfor i in range(n) :\n    v=l[i]+l2[i]-l1[i]\n    heappush(L,v)\n    mi=heappop(L)\n    count=0\n    while mi<=l2[i] :\n        count+=mi-l2[i]+l1[i]\n        if not L :\n            break\n        mi=heappop(L)\n        \n    else :\n        heappush(L,mi)\n    ost=count+len(L)*l1[i]\n    qw.append(ost)\nprint(*qw)\n    \n        \n        \n    \n", "import sys\n# from collections import deque\ninput=sys.stdin.readline\ndef binary_search(org,arr,l,r,n,L,value):\n\tmid=(l+r)//2\n\t# print(mid,\"ppppp\")\n\tif(mid>0 and arr[mid]-value>=org and arr[mid-1]-value<org):\n\t\treturn mid\n\telif(mid==0 and arr[mid]-value>=org ):\n\t\treturn mid\n\telif(mid==L and arr[mid]-value>=org ):\n\t\treturn mid\n\t\n\telif(mid==n):\n\t\treturn mid\n\n\telif(mid>0 and arr[mid]-value>org and arr[mid-1]-value>=org):\n\t\treturn binary_search(org,arr,l,mid,n,L,value)\n\t\n\telif(arr[mid]-value<org):\n\t\t# print(\"dddddd\")\n\t\treturn binary_search(org,arr,mid+1,r,n,L,value)\n\treturn mid\n\t\n\n\n\n\n\nn=int(input())\nl= list(map(int,input().split())) \nu= list(map(int,input().split())) \nextra=[0]*n\npre=[0]*n\nt=[0]*n\nt[0]=u[0]\nfor i in range(1,n):\n\tt[i]+=t[i-1]+u[i]\n# print(t)\nfor i in range(n):\n\tif(i>0):\n\t\tv=t[i-1]\n\telse:\n\t\tv=0\n\tindex=binary_search(l[i],t,i,n-1,n-1,i,v)\n\t# print(i,index)\n\tif(index>0 and index!=i):\n\t\tvalue=t[index]-t[index-1]\n\t\tremain=l[i]-(t[index-1]-v)\n\telif(index>0 and index==i):\n\t\tvalue=t[index]-t[index-1]\n\t\tremain=l[i]\n\n\n\telse:\n\t\tvalue=t[index]\n\t\tremain=l[i]\n\tif(value>=remain):\n\t\textra[index]+=remain\n\t\t# print(extra[index],\"ooooo\")\n\telif(remain>value):\n\n\t\textra[index]+=value\n\t\t# print(extra[index],\"oooooopp\")\n\tif(i>0 and index>0):\n\t\tpre[i-1]-=1\n\t\tpre[index-1]+=1\n\telif(i==0 and index>0):\n\t\tpre[index-1]+=1\n\telif(i==0 and index==0):\n\t\tcontinue\n\t# print(extra,pre)\n# print(extra,pre)\nfor i in range(n-2,-1,-1):\n\tpre[i]+=pre[i+1]\n# print(extra,pre)\nr=[0]*n\nfor i in range(n):\n\tr[i]=(u[i]*pre[i])+extra[i]\n\t\t\nfor i in r:\n\tprint (i,end=\" \")", "def findMaxTemp(psT, v, start, minus):\n    l = start - 1\n    r = len(psT)\n\n    while r - l > 1:\n        m = l + (r - l) // 2\n        val = psT[m] - minus\n        if val < v:\n            l = m\n        else:\n            r = m\n\n    return l, r\n\ndef solve():\n    N = int(input())\n    V = list(map(int, input().split()))\n    T = list(map(int, input().split()))\n\n    ans = [0 for _ in range(N)]\n    partialAns = [0 for _ in range(N)]\n    cnt = [0 for _ in range(N)]\n    minus = 0\n    psT = T[:]\n\n    for i in range(1, N):\n        psT[i] += psT[i - 1]\n\n    for i in range(len(V)):\n        l, r = findMaxTemp(psT, V[i], i, minus)\n\n        if r == i:\n            partialAns[r] += V[i]\n        elif r == len(psT):\n            cnt[i] += 1\n        else:\n            cnt[i] += 1; cnt[l + 1] -= 1\n            value = V[i] - (psT[l] - minus)\n            partialAns[r] += value\n\n        minus = psT[i]\n\n    for i in range(1, N):\n        cnt[i] += cnt[i - 1]\n\n    for i in range(N):\n        ans[i] += partialAns[i]\n        ans[i] += cnt[i] * T[i]\n\n    return ans\n\nfor x in solve():\n    print(x, end=' ')", "import heapq\nheap = []\nn = int(input())\nV = list(map(int, input().split()))\nT = list(map(int, input().split()))\ntmp = 0\nfor i in range(n):\n    ans = 0\n    heapq.heappush(heap, tmp+V[i])\n    while len(heap) and heap[0]<=tmp+T[i]:\n        ans += heapq.heappop(heap)-tmp\n    tmp += T[i]\n    ans += T[i]*len(heap)\n    print(ans, end=' ')", "from sys import stdin, stdout\nimport heapq\n\nn = int(input())\nv = list(map(int, input().split()))\nt = list(map(int, input().split()))\n\nheap = []\nsum = 0\nfor i in range(n):\n    ans = 0\n    heapq.heappush(heap, sum + v[i])\n    while len(heap) and heap[0] <= sum + t[i]:\n        ans += heap[0] - sum\n        heapq.heappop(heap)\n    ans += len(heap) * t[i]\n    sum += t[i]\n    print(ans, end=' ')", "from sys import stdin, stdout\nimport heapq\n\nn = int(input())\nv = list(map(int, input().split()))\nt = list(map(int, input().split()))\n\nheap = []\nsum = 0\nfor i in range(n):\n    ans = 0\n    heapq.heappush(heap, sum + v[i])\n    while len(heap) and heap[0] <= sum + t[i]:\n        ans += heap[0] - sum\n        heapq.heappop(heap)\n    ans += len(heap) * t[i]\n    sum += t[i]\n    print(ans, end=' ')", "def bin_search(pref,diff,s,val):\n    e = len(pref) - 1\n    index = -1\n    while s <= e:\n        mid = (s + e) >> 1\n        if pref[mid] - diff <= val:\n            index = mid\n            s = mid + 1\n        else:\n            e = mid - 1\n    return index\n\nn = int(input())\na = list(map(int,input().split()))\nt = list(map(int,input().split()))\npref = [0 for i in range(len(t))] \npref[0] = t[0]\nfor i in range(1,len(t)):\n    pref[i] = t[i] + pref[i - 1]\n\nfreq = [0 for i in range(len(t))]\nans = [0 for i in range(len(t))]\ndiff = 0\n\nfor i in range(0,n):\n    index = bin_search(pref,diff,i,a[i])\n    if index == -1:\n        ans[i] += a[i]\n    else:\n        freq[i] += 1\n        if index + 1 < n:\n            freq[index + 1] -= 1\n            ans[index + 1] += (a[i] - pref[index] + diff)\n    diff += t[i]\n\nfor i in range(1,n):\n    freq[i] = freq[i] + freq[i - 1]\n\nfor i in range(0,n):\n    print(freq[i] * t[i] + ans[i],end = \" \")\nprint()", "import sys\ninput = sys.stdin.readline\n\ndef judge(i, x):\n    return V[i]-(T_acc[x+1]-T_acc[i])>0\n\ndef binary_search(i):\n    l, r = 0, N\n    \n    while l<=r:\n        mid = (l+r)//2\n        \n        if judge(i, mid):\n            l = mid+1\n        else:\n            r = mid-1\n\n    return r\n\nN = int(input())\nV = list(map(int, input().split()))\nT = list(map(int, input().split()))\nT.append(10**18)\nT_acc = [0]\n\nfor Ti in T:\n    T_acc.append(T_acc[-1]+Ti)\n\nlast = [0]*(N+1)\nimos = [0]*(N+1)\n\nfor i in range(N):\n    mark = binary_search(i)\n    last[mark+1] += V[i]-(T_acc[mark+1]-T_acc[i])\n    imos[i] += 1\n    imos[mark+1] -= 1\n\nfor i in range(N):\n    imos[i+1] += imos[i]\n\nfor i in range(N):\n    ans = imos[i]*T[i]+last[i]\n    \n    if i<N-1:\n        print(ans, end=' ')\n    else:\n        print(ans)", "import heapq\nn = int(input())\nv = list(map(int, input().split()))\nt = list(map(int, input().split()))\nd = []\ns = 0\nfor i in range(n):\n    ans = 0\n    heapq.heappush(d, v[i] + s)\n    while d and d[0] <= s + t[i]:\n        ans += d[0] - s\n        heapq.heappop(d)\n    s += t[i]\n    ans += len(d) * t[i]\n    print(ans, end=' ')\n", "from bisect import *\n\n\nn = int(input())\nh = list(map(int,input().split()))\nt = list(map(int,input().split()))\n\ndp \t\t= [1 for i in range(n+1)]\nreminder= [0 for i in range(n+1)]\npre_sum = [0 for i in range(n)]\n\npre_sum[0] = t[0]\n\nfor i in range(1,n):\n\tpre_sum[i] = pre_sum[i-1] + t[i]\n\n\npre = 0\n\nfor i in range(n):\n\tcur   = pre + h[i]\n\tpre   = pre_sum[i]\n\tindex = bisect(pre_sum,cur)\n\n\t\n\t# try:\n\t# \tdp[index]-=1\n\t# except:\n\t# \tprint(i,index,cur)\n\tdp[index]-=1\n\tif(index==0):\n\t\treminder[index]+=cur\n\telse:\n\t\treminder[index] += cur - pre_sum[index-1]\n# \tprint('index',index)\n# \tprint('dp',dp)\n# \tprint('reminder',reminder)\n\n# print(*dp)\n# print(*reminder)\t\n\n\nfor i in range(1,n):\n\tdp[i] =dp[i-1]+dp[i]\n\nfor i in range(n):\n\ttemp= dp[i]*t[i]+reminder[i]\n\tprint(temp,end=' ')\nprint()\n\n\n\n\n\n\n "]