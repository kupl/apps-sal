["def read_data():\n    n, m = map(int, input().strip().split())\n    a = list(map(int, list(input().strip().split())))\n    return n, m, a\n\ndef find(start,end,v):\n    mid = int((start + end) / 2)\n    if start == end:\n        return start\n    if end - start == 1:\n        if a[end] <= v:\n            return end\n        else:\n            return start\n    if a[mid] == v:\n        return mid\n    if a[mid] > v:\n        return find(start,mid,v)\n    else:\n        return find(mid,end,v)\n\ndef solve():\n    val = -1\n    for i in range(0,len(a)-2):\n        pos = find(i+2,len(a)-1,a[i]+m)\n        if a[pos] <= a[i] + m:\n            if (a[pos] - a[i+1]) / (a[pos] - a[i]) > val:\n                val = (a[pos] - a[i+1]) / (a[pos] - a[i])\n    return val\n\nn, m, a = read_data()\nprint(solve())", "import heapq\nfrom bisect import bisect_left, bisect_right\nfrom collections import Counter\nfrom collections import OrderedDict\nfrom collections import deque\nfrom itertools import accumulate, product\n\nimport math\n\nR = lambda: map(int, input().split())\n\nn, u= R()\narr = list(R())\nres = -1\nfor l in range(n):\n    r = bisect_right(arr, arr[l] + u) - 1\n    if r - l > 1:\n        res = max(res, (arr[r] - arr[l + 1]) / (arr[r] - arr[l]))\nprint(res)", "n,m=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\nc=0\n\nans=-1\n\nfor i in range(n-1):\n\n    while c<n-1 and a[c+1] - a[i]<=m:\n\n        c+=1\n\n    if i<c-1:\n\n        ans=max(ans,(a[c]-a[i+1]) / (a[c]-a[i]))\n\nprint(ans)\n\n\n\n# Made By Mostafa_Khaled\n", "n, u = list(map(int, input().split()))\ne = list(map(int, input().split()))\nmax_eff = -1\nj = 0\nfor i in range(n):\n    while j < n and e[j] <= e[i] + u:\n        j += 1\n    if i + 3 <= j:\n        max_eff = max(max_eff, (e[j - 1] - e[i + 1]) / (e[j - 1] - e[i]))\nprint(max_eff)", "import sys\n\nstring = sys.stdin.readline()\nn = int(string.split()[0])\nu = int(string.split()[1])\nlevels = tuple(map(int, sys.stdin.readline().split()))\nif len(levels) < 3:\n    sys.stdout.write('-1')\n    return\n\ni, j, k = 0, 1, 2\nindices = (0, 1, 2)\nlevel_i = levels[0]\nlevel_j = levels[1]\nnu = levels[2] - level_i\n\"\"\"\nif nu <= u:\n    nu = (levels[2] - level_j) * 1 / nu\nelse:\n    nu = -1\n\"\"\"\nnu = -1\nwhile i < n - 2:\n    while k < n - 1 and levels[k + 1] - level_i <= u:\n        k += 1\n    nu_cur = levels[k] - level_i\n    if nu_cur <= u:\n        nu_cur = (levels[k] - level_j) * 1 / nu_cur\n    else:\n        nu_cur = -1\n    if nu_cur > nu:\n        nu = nu_cur\n        indices = (i, j, k)\n    i += 1\n    j += 1\n    k = max(k, j + 1)\n    level_j = levels[j]\n    level_i = levels[i]\n\nsys.stdout.write(str(nu))\n\n\n", "import sys\n\nstring = sys.stdin.readline()\nn = int(string.split()[0])\nu = int(string.split()[1])\nlevels = tuple(map(int, sys.stdin.readline().split()))\nif len(levels) < 3:\n    sys.stdout.write('-1')\n    return\n\ni, j, k = 0, 1, 2\nindices = (0, 1, 2)\nlevel_i = levels[0]\nlevel_j = levels[1]\nnu = levels[2] - level_i\nnu = -1\nwhile i < n - 2:\n    while k < n - 1 and levels[k + 1] - level_i <= u:\n        k += 1\n    nu_cur = levels[k] - level_i\n    if nu_cur <= u:\n        nu_cur = (levels[k] - level_j) * 1 / nu_cur\n    else:\n        nu_cur = -1\n    if nu_cur > nu:\n        nu = nu_cur\n        indices = (i, j, k)\n    i += 1\n    j += 1\n    k = max (k, j + 1)\n    level_j = levels[j]\n    level_i = levels[i]\n\nsys.stdout.write(str(nu))\n\n\n", "n, v = list(map(int, input().split()))\nl = list(map(int, input().split()))\nans = [-1]\nfor i in range(n - 2):\n    uk1 = i + 2\n    uk2 = n - 1\n    while (uk2 - uk1 > 1):\n        if l[(uk2 + uk1) // 2] - l[i] <= v:\n            uk1 = (uk2 + uk1) // 2\n        else:\n            uk2 = (uk2 + uk1) // 2\n    if l[uk2] - l[i] <= v:\n        ans.append((l[uk2] - l[i + 1]) / (l[uk2] - l[i]))\n    elif l[uk1] - l[i] <= v:\n        ans.append((l[uk1] - l[i + 1]) / (l[uk1] - l[i]))\nprint(max(ans))", "n,m=map(int,input().split())\na=list(map(int,input().split()))\nc=0\nans=-1\nfor i in range(n-1):\n    while c<n-1 and a[c+1] - a[i]<=m:\n        c+=1\n    if i<c-1:\n        ans=max(ans,(a[c]-a[i+1]) / (a[c]-a[i]))\nprint(ans)", "from bisect import bisect_left\nn, u = map(int, input().split())\narr = [int(x) for x  in input().split()]\nans = -1\nfor i in range(n-2):\n    bi = bisect_left(arr, arr[i] + u)\n    if bi == n: bi -= 1\n    if bi == i+1: continue\n    if arr[bi] - u > arr[i]: bi -= 1\n    if i == bi or i+1 == bi: continue\n    #print(arr[i], arr[i+1], arr[bi])\n    ans = max(ans, (arr[bi] - arr[i+1])/(arr[bi] - arr[i]))\nprint(ans)", "import bisect\n\n\nn,u=list(map(int,input().split()))\nans=float(-1)\na=list(map(int,input().split()))\nfor i in range(0,n-2,1):\n    x=int(bisect.bisect_left(a,a[i]+u+1))\n    x=x-1\n    if a[x]!=a[i] and a[x]!=a[i+1]:\n        ans=max(ans,(a[x]-a[i+1])*1.0/(a[x]-a[i]))\nprint(ans)\n", "from sys import stdin, stdout\n\nn, U = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\nk = 0\nans = -1\nfor i in range(n):\n    while k+1 < n and a[k+1] - a[i] <= U:\n        k += 1\n    if k - i < 2:\n        continue\n    j = i+1\n    cur = (a[k] - a[j]) / (a[k] - a[i])\n    ans = max(ans, cur)\nprint(ans)", "from bisect import bisect_left as bi\nn,u=list(map(int,input().split()))\na=list(map(int,input().split()))\na.sort()\nc=[]\nfor i in range(n-1):\n    b=bi(a,a[i]+u)\n    if b!=n:\n        if a[b]==a[i]+u:\n            b=b+1\n    b=a[b-1]\n    if b-a[i]!=0:\n        c.append((b-a[i+1])/(b-a[i]))\nif len(c)==0 or max(c)==0:\n    print(-1)\nelse:\n    print(max(c))", "n, m = map(int, input().split())\na = list(map(int, input().split()))\nc = 0\nans = -1\nfor i in range(n - 1):\n    while c < n - 1 and a[c + 1] - a[i] <= m:\n        c += 1\n    if i < c - 1:\n        ans = max(ans, (a[c] - a[i + 1]) / (a[c] - a[i]))\nprint(ans)"]