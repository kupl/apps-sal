["def main():\n    from math import hypot\n    n, m = list(map(int, input().split()))\n    vertices = list(tuple(map(float, input().split())) for _ in range(n))\n    ax, ay = vertices[-1]\n    for i, (bx, by) in enumerate(vertices):\n        vertices[i], ax, ay = (bx, by, bx - ax, by - ay), bx, by\n    for _ in range(m):\n        x0, y0, x1, y1 = list(map(float, input().split()))\n        x1 -= x0\n        y1 -= y0\n        bx, by = vertices[-1][:2]\n        tmp = (bx - x0) * y1 - (by - y0) * x1\n        t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n        res = []\n        for bx, by, abx, aby in vertices:\n            s, tmp = t, (bx - x0) * y1 - (by - y0) * x1\n            t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n            if s != t:\n                res.append((((bx - x0) * aby - (by - y0) * abx) / (x1 * aby - y1 * abx), s - t))\n        res.sort()\n        t, w = 0, 0.\n        for i, (tmp, s) in enumerate(res, -1):\n            if t:\n                w += tmp - res[i][0]\n            t += s\n        print(w * hypot(x1, y1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    from math import hypot\n    n, m = list(map(int, input().split()))\n    vertices = list(tuple(map(float, input().split())) for _ in range(n))\n    ax, ay = vertices[-1]\n    for i, (bx, by) in enumerate(vertices):\n        vertices[i], ax, ay = (bx, by, bx - ax, by - ay), bx, by\n    for _ in range(m):\n        x0, y0, x1, y1 = list(map(float, input().split()))\n        x1 -= x0\n        y1 -= y0\n        bx, by = vertices[-1][:2]\n        tmp = (bx - x0) * y1 - (by - y0) * x1\n        t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n        res = []\n        for bx, by, abx, aby in vertices:\n            s, tmp = t, (bx - x0) * y1 - (by - y0) * x1\n            t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n            if s != t:\n                res.append((((bx - x0) * aby - (by - y0) * abx) / (x1 * aby - y1 * abx), s - t))\n        res.sort()\n        t, w = 0, 0.\n        for i, (tmp, s) in enumerate(res, -1):\n            if t:\n                w += tmp - res[i][0]\n            t += s\n        print(w * hypot(x1, y1))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "def main():\n    from math import hypot\n    n, m = list(map(int, input().split()))\n    vertices = list(tuple(map(float, input().split())) for _ in range(n))\n    ax, ay = vertices[-1]\n    for i, (bx, by) in enumerate(vertices):\n        vertices[i], ax, ay = (bx, by, bx - ax, by - ay), bx, by\n    for _ in range(m):\n        x0, y0, x1, y1 = list(map(float, input().split()))\n        x1 -= x0\n        y1 -= y0\n        bx, by = vertices[-1][:2]\n        tmp = (bx - x0) * y1 - (by - y0) * x1\n        t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n        res = []\n        for bx, by, abx, aby in vertices:\n            s, tmp = t, (bx - x0) * y1 - (by - y0) * x1\n            t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n            if s != t:\n                res.append((((bx - x0) * aby - (by - y0) * abx) / (x1 * aby - y1 * abx), s - t))\n        res.sort()\n        t, w = 0, 0.\n        for i, (tmp, s) in enumerate(res, -1):\n            if t:\n                w += tmp - res[i][0]\n            t += s\n        print(w * hypot(x1, y1))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "def main():\n    from math import hypot\n    n, m = list(map(int, input().split()))\n    vertices = list(tuple(map(float, input().split())) for _ in range(n))\n    ax, ay = vertices[-1]\n    for i, (bx, by) in enumerate(vertices):\n        vertices[i], ax, ay = (bx, by, bx - ax, by - ay), bx, by\n    for _ in range(m):\n        x0, y0, x1, y1 = list(map(float, input().split()))\n        x1 -= x0\n        y1 -= y0\n        bx, by = vertices[-1][:2]\n        tmp = (bx - x0) * y1 - (by - y0) * x1\n        t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n        res = []\n        for bx, by, abx, aby in vertices:\n            s, tmp = t, (bx - x0) * y1 - (by - y0) * x1\n            t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n            if s != t:\n                res.append((((bx - x0) * aby - (by - y0) * abx) / (x1 * aby - y1 * abx), s - t))\n        res.sort()\n        t, w = 0, 0.\n        for i, (tmp, s) in enumerate(res, -1):\n            if t:\n                w += tmp - res[i][0]\n            t += s\n        print(w * hypot(x1, y1))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "def main():\n    from math import hypot\n    n, m = list(map(int, input().split()))\n    vertices = list(tuple(map(float, input().split())) for _ in range(n))\n    ax, ay = vertices[-1]\n    for i, (bx, by) in enumerate(vertices):\n        vertices[i], ax, ay = (bx, by, bx - ax, by - ay), bx, by\n    for _ in range(m):\n        x0, y0, x1, y1 = list(map(float, input().split()))\n        x1 -= x0\n        y1 -= y0\n        bx, by = vertices[-1][:2]\n        tmp = (bx - x0) * y1 - (by - y0) * x1\n        t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n        res = []\n        for bx, by, abx, aby in vertices:\n            s, tmp = t, (bx - x0) * y1 - (by - y0) * x1\n            t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n            if s != t:\n                res.append((((bx - x0) * aby - (by - y0) * abx) / (x1 * aby - y1 * abx), s - t))\n        res.sort()\n        t, w = 0, 0.\n        for i, (tmp, s) in enumerate(res, -1):\n            if t:\n                w += tmp - res[i][0]\n            t += s\n        print(w * hypot(x1, y1))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "def main():\n    from math import hypot\n    n, m = list(map(int, input().split()))\n    vertices = list(tuple(map(float, input().split())) for _ in range(n))\n    ax, ay = vertices[-1]\n    for i, (bx, by) in enumerate(vertices):\n        vertices[i], ax, ay = (bx, by, bx - ax, by - ay), bx, by\n    for _ in range(m):\n        x0, y0, x1, y1 = list(map(float, input().split()))\n        x1 -= x0\n        y1 -= y0\n        bx, by = vertices[-1][:2]\n        tmp = (bx - x0) * y1 - (by - y0) * x1\n        t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n        res = []\n        for bx, by, abx, aby in vertices:\n            s, tmp = t, (bx - x0) * y1 - (by - y0) * x1\n            t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n            if s != t:\n                res.append((((bx - x0) * aby - (by - y0) * abx) / (x1 * aby - y1 * abx), s - t))\n        res.sort()\n        t, w = 0, 0.\n        for i, (tmp, s) in enumerate(res, -1):\n            if t:\n                w += tmp - res[i][0]\n            t += s\n        print(w * hypot(x1, y1))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "def main():\n    from math import hypot\n    n, m = list(map(int, input().split()))\n    vertices = list(tuple(map(float, input().split())) for _ in range(n))\n    ax, ay = vertices[-1]\n    for i, (bx, by) in enumerate(vertices):\n        vertices[i], ax, ay = (bx, by, bx - ax, by - ay), bx, by\n    for _ in range(m):\n        x0, y0, x1, y1 = list(map(float, input().split()))\n        x1 -= x0\n        y1 -= y0\n        bx, by = vertices[-1][:2]\n        tmp = (bx - x0) * y1 - (by - y0) * x1\n        t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n        res = []\n        for bx, by, abx, aby in vertices:\n            s, tmp = t, (bx - x0) * y1 - (by - y0) * x1\n            t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n            if s != t:\n                res.append((((bx - x0) * aby - (by - y0) * abx) / (x1 * aby - y1 * abx), s - t))\n        res.sort()\n        t, w = 0, 0.\n        for i, (tmp, s) in enumerate(res, -1):\n            if t:\n                w += tmp - res[i][0]\n            t += s\n        print(w * hypot(x1, y1))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "def main():\n    from math import hypot\n    n, m = list(map(int, input().split()))\n    vertices = list(tuple(map(float, input().split())) for _ in range(n))\n    ax, ay = vertices[-1]\n    for i, (bx, by) in enumerate(vertices):\n        vertices[i], ax, ay = (bx, by, bx - ax, by - ay), bx, by\n    for _ in range(m):\n        x0, y0, x1, y1 = list(map(float, input().split()))\n        x1 -= x0\n        y1 -= y0\n        bx, by = vertices[-1][:2]\n        tmp = (bx - x0) * y1 - (by - y0) * x1\n        t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n        res = []\n        for bx, by, abx, aby in vertices:\n            s, tmp = t, (bx - x0) * y1 - (by - y0) * x1\n            t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n            if s != t:\n                res.append((((bx - x0) * aby - (by - y0) * abx) / (x1 * aby - y1 * abx), s - t))\n        res.sort()\n        t, w = 0, 0.\n        for i, (tmp, s) in enumerate(res, -1):\n            if t:\n                w += tmp - res[i][0]\n            t += s\n        print(w * hypot(x1, y1))\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "import math\n\neps = 1e-9\n\ndef sign(n):\n    if n > eps: return 1\n    if n < -eps: return -1\n    return 0\n\ndef cross(a, b):\n    return a.x * b.y - a.y * b.x\n\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, v):\n        return Vector(self.x + v.x, self.y + v.y)\n    \n    def __sub__(self, v):\n        return Vector(self.x - v.x, self.y - v.y)\n    \n    def length(self):\n        return math.hypot(self.x, self.y)\n\ndef solve(polygon, p, q):\n    intersections = []\n    for (a, b) in zip(polygon, polygon[1:] + polygon[:1]):\n        ss = sign(cross(a - p, q - p))\n        es = sign(cross(b - p, q - p))\n\n        if ss == es: continue\n\n        t = cross(a - p, a - b) / cross(q - p, a - b)\n        intersections.append((t, es - ss))\n    intersections = sorted(intersections)\n    total_t, previous_t, count = [0] * 3\n    \n    for t, order in intersections:\n        if (count > 0): total_t += t - previous_t\n        previous_t = t\n        count += order\n    # print(total_t) \n\n    print(total_t * (q - p).length())\n    \nn, m = list(map(int, input().split()))\n\npolygon = []\nfor i in range(n):\n    x, y = list(map(float, input().split()))\n    polygon.append(Vector(x, y))\narea = sum([cross(x[0], x[1]) for x in zip(polygon, polygon[1:] + polygon[:1])])\nif (area < 0): polygon.reverse()\n\nfor i in range(m):\n    x1, y1, x2, y2 = list(map(float, input().split()))\n    solve(polygon, Vector(x1, y1), Vector(x2, y2))\n", "def main():\n    from math import hypot\n    n, m = map(int, input().split())\n    vertices = list(tuple(map(float, input().split())) for _ in range(n))\n    ax, ay = vertices[-1]\n    for i, (bx, by) in enumerate(vertices):\n        vertices[i], ax, ay = (bx, by, bx - ax, by - ay), bx, by\n    for _ in range(m):\n        x0, y0, x1, y1 = map(float, input().split())\n        x1 -= x0\n        y1 -= y0\n        bx, by = vertices[-1][:2]\n        tmp = (bx - x0) * y1 - (by - y0) * x1\n        t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n        res = []\n        for bx, by, abx, aby in vertices:\n            s, tmp = t, (bx - x0) * y1 - (by - y0) * x1\n            t = -1 if tmp < 0 else 1 if tmp > 0 else 0\n            if s != t:\n                res.append((((bx - x0) * aby - (by - y0) * abx) / (x1 * aby - y1 * abx), s - t))\n        res.sort()\n        t, w = 0, 0.\n        for i, (tmp, s) in enumerate(res, -1):\n            if t:\n                w += tmp - res[i][0]\n            t += s\n        print(w * hypot(x1, y1))\n \n \ndef __starting_point():\n    main()\n__starting_point()", "import math\n \neps = 1e-9\n \ndef sign(n):\n    if n > eps: return 1\n    if n < -eps: return -1\n    return 0\n \ndef cross(a, b):\n    return a.x * b.y - a.y * b.x\n \nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n \n    def __add__(self, v):\n        return Vector(self.x + v.x, self.y + v.y)\n    \n    def __sub__(self, v):\n        return Vector(self.x - v.x, self.y - v.y)\n    \n    def length(self):\n        return math.hypot(self.x, self.y)\n \ndef solve(polygon, p, q):\n    intersections = []\n    for (a, b) in zip(polygon, polygon[1:] + polygon[:1]):\n        ss = sign(cross(a - p, q - p))\n        es = sign(cross(b - p, q - p))\n \n        if ss == es: continue\n \n        t = cross(a - p, a - b) / cross(q - p, a - b)\n        intersections.append((t, es - ss))\n    intersections = sorted(intersections)\n    total_t, previous_t, count = [0] * 3\n    \n    for t, order in intersections:\n        if (count > 0): total_t += t - previous_t\n        previous_t = t\n        count += order\n    # print(total_t) \n \n    print(total_t * (q - p).length())\n    \nn, m = map(int, input().split())\n \npolygon = []\nfor i in range(n):\n    x, y = map(float, input().split())\n    polygon.append(Vector(x, y))\narea = sum(map(lambda x: cross(x[0], x[1]), zip(polygon, polygon[1:] + polygon[:1])))\nif (area < 0): polygon.reverse()\n \nfor i in range(m):\n    x1, y1, x2, y2 = map(float, input().split())\n    solve(polygon, Vector(x1, y1), Vector(x2, y2))"]