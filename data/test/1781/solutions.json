["n, k = list(map(int, input().split()))\nplain = list()\n\nfor i in range(n):\n    plain.append(list(input()))\n\nfr = {\n    \"0\": list(),\n    \"1\": list(),\n    \"2\": list(),\n}\nfor i in range(n):\n    for j in range(12):\n        if plain[i][j] != \".\":\n            continue\n\n        st = 0\n        if j > 0 and plain[i][j - 1] == \"S\":\n            st += 1\n        if j < 11 and plain[i][j + 1] == \"S\":\n            st += 1\n\n        fr[str(st)].append((i, j))\n\nfor i in range(k):\n    if len(fr[\"0\"]):\n        x, y = fr[\"0\"].pop()\n    elif len(fr[\"1\"]):\n        x, y = fr[\"1\"].pop()\n    else:\n        x, y = fr[\"2\"].pop()\n    plain[x][y] = \"x\"\n\n\nresult = 0\nfor i in range(n):\n    for j in range(12):\n        if plain[i][j] != \"S\":\n            continue\n        if j > 0 and plain[i][j - 1] in (\"S\", \"x\", \"P\"):\n            result += 1\n        if j < 11 and plain[i][j + 1] in (\"S\", \"x\", \"P\"):\n            result += 1\n\nprint(result)\nfor i in range(n):\n    print(\"\".join(plain[i]))\n", "n, k = map(int, input().split())\n\nss = []\n\nr = [0, 0, 0]\n\nt = 0\n\nPASSENGERS = ('x', 'P', 'S')\n\n# - is 0\n# . is 1\n# P is 10\n# S is 11\n\nfor i in range(n):\n    s = input()\n    for c in s:\n        ss.append(c)\n    ss.append('\\n')\n\nfor i in range(len(ss)):\n    if ss[i] == '.':\n        rank = 0\n        if i > 0 and ss[i-1] == 'S': rank += 1\n        if i+1 < len(ss) and ss[i+1] == 'S': rank += 1\n        ss[i] = str(rank)\n        r[rank] += 1\n\nif k > r[0]:\n    k -= r[0]\n    if k > r[1]:\n        k -= r[1]\n        r[2] = k\n    else:\n        r[1] = k\n        r[2] = 0\nelse:\n    r[0] = k\n    r[1] = 0\n    r[2] = 0\n\ni = 0\nwhile r[0] > 0:\n    while ss[i] != '0':\n        i += 1\n    ss[i] = 'x'\n    r[0] -= 1\n\ni = 0\nwhile r[1] > 0:\n    while ss[i] != '1':\n        i += 1\n    ss[i] = 'x'\n    r[1] -= 1\n\ni = 0\nwhile r[2] > 0:\n    while ss[i] != '2':\n        i += 1\n    ss[i] = 'x'\n    r[2] -= 1\n\nfor i in range(len(ss)):\n    if ss[i] in ('0', '1', '2'):\n        ss[i] = '.'\n\nfor i in range(len(ss)):\n    if ss[i] == 'S':\n        if i > 0 and (ss[i-1] in PASSENGERS):\n            t += 1\n        if i+1 < len(ss) and (ss[i+1] in PASSENGERS):\n            t += 1\n\nprint(t)\nprint(''.join(ss))", "from collections import Counter\nn,k=list(map(int,input().split()))\n#n,k=1,2\na=set()\nc=[set() for i in range(3)]\nb=set()\nz=0\nfor i in range(n):\n    s=input()\n    for i0 in range(len(s)):\n        if s[i0]=='.':\n            a.add(tuple([i,i0]))\n        elif s[i0]=='S':\n            b.add(tuple([i,i0]))\n    for i0 in range(len(s)):\n        if s[i0]=='.':\n            zz=0\n            if tuple([i,i0+1]) in b:\n                zz=zz+1\n            if tuple([i,i0-1]) in b:\n                zz=zz+1\n            c[zz].add(tuple([i,i0]))\nc=list(c[0])+list(c[1])+list(c[2])\nfor i in range(k):\n    a.remove(c[i])\nfor i in b:\n    if (i[1]!=2)and(i[1]!=7)and(i[1]!=11):\n        if not(tuple([i[0],i[1]+1])in a):\n            z=z+1\n    if (i[1]!=4)and(i[1]!=9)and(i[1]!=0):\n        if not(tuple([i[0],i[1]-1])in a):\n            z=z+1\nc=set(c)\n\nprint(z)\nfor i in range(n):\n    s=''\n    for i0 in range(12):\n        if i0==3 or i0==8:\n            s=s+'-'\n        elif tuple([i,i0])in a:\n            s=s+'.'\n        elif tuple([i,i0])in b:\n            s=s+'S'\n        elif tuple([i,i0])in c:\n            s=s+'x'\n        else:\n            s=s+'P'\n    print(s)", "n, k = [int(i) for i in input().split()]\nrows = ['P' + input() + 'P' for i in range(n)]\n\ndef try_good(rows):\n\tfor j in range(len(rows)):\n\t\tfor i in range(1, len(rows[j]) - 1):\n\t\t\tif rows[j][i] == '.':\n\t\t\t\tif rows[j][i - 1] != 'S' and rows[j][i + 1] != 'S':\n\t\t\t\t\trows[j] = rows[j][:i] + 'x' + rows[j][i + 1:]\n\t\t\t\t\treturn True\n\treturn False\n\ndef try_medium(rows):\n\tfor j in range(len(rows)):\n\t\tfor i in range(1, len(rows[j]) - 1):\n\t\t\tif rows[j][i] == '.':\n\t\t\t\tif rows[j][i - 1] != 'S' or rows[j][i + 1] != 'S':\n\t\t\t\t\trows[j] = rows[j][:i] + 'x' + rows[j][i + 1:]\n\t\t\t\t\treturn True\n\treturn False\n\ndef try_bad(rows):\n\tfor j in range(len(rows)):\n\t\tfor i in range(1, len(rows[j]) - 1):\n\t\t\tif rows[j][i] == '.':\n\t\t\t\trows[j] = rows[j][:i] + 'x' + rows[j][i + 1:]\n\t\t\t\treturn True\n\treturn False\n\nfor i in range(k):\n\tif try_good(rows) == True:\n\t\tcontinue\n\tif try_medium(rows) == True:\n\t\tcontinue\n\ttry_bad(rows)\n\nans = 0\nfor r in rows:\n\tfor i in range(len(r)):\n\t\tif r[i] == 'S':\n\t\t\tif i > 1 and r[i - 1] != '.' and r[i - 1] != '-':\n\t\t\t\tans += 1\n\t\t\tif i < len(r) - 2 and r[i + 1] != '.' and r[i + 1] != '-':\n\t\t\t\tans += 1\n\nprint(ans)\nfor r in rows:\n\tprint(r[1:-1])\t\n", "n, k = (int(s) for s in input().split())\nrows = []\nfor i in range(n):\n    rows.append([c for c in input()])\n\ndef nbcnt(row, col):\n    res = 0\n    if col != 0 and rows[row][col - 1] == 'S':\n        res += 1\n    if col != 11 and rows[row][col + 1] == 'S':\n        res += 1\n    return res\n\nfor c in range(3):\n    for i in range(n):\n        for j in range(12):\n            if k != 0 and rows[i][j] == '.' and nbcnt(i, j) == c:\n                rows[i][j] = 'x'\n                k -= 1\n\nres = 0\nfor i in range(n):\n    for j in range(12):\n        if rows[i][j] != '.' and rows[i][j] != '-':\n            res += nbcnt(i, j)\n\nprint(res)\n\nfor i in range(n):\n    print(\"\".join(rows[i]))\n", "def insertp():\n    x,y = 0,0\n    min = 3\n    for i in range(n):\n        for j in range(12):\n            if a[i][j] == '.':\n                if j != 0 and j != 11:\n                    if a[i][j-1] != 'S':\n                        if a[i][j+1] != 'S':\n                            a[i][j] = 'x'\n                            return 0\n                        else:\n                            if min > 1:\n                                min = 1\n                                x, y = i, j\n                    else:\n                        if a[i][j+1] != 'S':\n                            if min > 1:\n                                min = 1\n                                x, y = i, j\n                        else:\n                            if min > 2:\n                                min = 2\n                                x,y = i, j\n                elif j == 0:\n                    if a[i][j+1] != 'S':\n                        a[i][j] = 'x'\n                        return 0\n                    else:\n                        if min > 1:\n                            min = 1\n                            x, y = i, j\n                else:\n                    if a[i][j-1] != 'S':\n                        a[i][j] = 'x'\n                        return 0\n                    else:\n                        if min > 1:\n                            min = 1\n                            x, y = i, j\n    a[x][y] = 'x'\n    return min\n\nn, k = map(int, input().split())\na = [list(input()) for i in range(n)]\nans = 0\n\nfor i in range(n):\n    for j in range(12):\n        if a[i][j] == 'S':\n            if j != 0 and j != 11:\n                if a[i][j-1] == 'P' or a[i][j-1] == 'S':\n                    ans += 1\n                if a[i][j+1] == 'P' or a[i][j+1] == 'S':\n                    ans += 1\n            elif j == 0:\n                if a[i][j+1] == 'P' or a[i][j+1] == 'S':\n                    ans += 1\n            else:\n                if a[i][j-1] == 'P' or a[i][j-1] == 'S':\n                    ans += 1\n    \nfor i in range(k):\n    ans += insertp()\n\nprint(ans)\nfor i in range(n):\n    for j in range(12):\n        print(a[i][j], end = '')\n    print()\n", "n, k = map(int, input().split())\na = []\ns0 = []\ns1 = []\ns2 = []\nans = 0\nfor i in range(n):\n    s = list(input())\n    a.append(s)\n    for j in range(12):\n        if s[j] == '.':\n            if j == 0:\n                if s[j+1] == 'S':\n                    s1.append((i,j))\n                else:\n                    s0.append((i,j))\n            elif j == 11:\n                if s[j-1] == 'S':\n                    s1.append((i,j))\n                else:\n                    s0.append((i,j))\n            else:\n                if s[j-1] == 'S' and s[j+1] == 'S':\n                    s2.append((i,j))\n                elif s[j-1] != 'S' and s[j+1] != 'S':\n                    s0.append((i,j))\n                else:\n                    s1.append((i, j))\n        if s[j] == 'S':\n            if j > 0 and (s[j-1] == 'P' or s[j-1] == 'S'):\n                ans += 1\n            if j < 11 and (s[j+1] == 'P' or s[j+1] == 'S'):\n                ans += 1\np0=0\np1=0\np2=0\nfor g in range(k):\n    if p0 < len(s0):\n        i,j = s0[p0]\n        p0+=1\n        a[i][j] = 'x'\n    elif p1 < len(s1):\n        i,j = s1[p1]\n        p1+=1\n        a[i][j] = 'x'\n        ans+=1\n    else:\n        i,j = s2[p2]\n        p2+=1\n        a[i][j] = 'x'\n        ans+=2\nprint(ans)\nfor s in a:\n    print(''.join(s))", "n, k = (int(i) for i in input().split())\nz = [[i for i in input()] for i in range(n)]\na1 = []\na2 = []\na3 = []\nr = 0\nfor i in range(n):\n    for j in range(12):\n        t = 0\n        t = (j != 0 and z[i][j-1] == 'S') + (j != 11 and z[i][j+1] == 'S')\n        if z[i][j] == 'P' or z[i][j] == 'S':\n            r += t\n        elif z[i][j] == '.':\n            if t == 0:\n                a1.append((i, j))\n            elif t == 1:\n                a2.append((i, j))\n            else:\n                a3.append((i, j))\nfor i in a1:\n    if k != 0:\n        z[i[0]][i[1]] = 'x'\n        k -= 1\n    else:\n        break\nfor i in a2:\n    if k != 0:\n        z[i[0]][i[1]] = 'x'\n        k -= 1\n        r += 1\n    else:\n        break\nfor i in a3:\n    if k != 0:\n        z[i[0]][i[1]] = 'x'\n        k -= 1\n        r += 2\n    else:\n        break\nprint(r)\nfor i in z:\n    print(*i, sep='')", "a = input().split()\nn, k = int(a[0]), int(a[1])\nzero = []\none = []\ntwo = []\nplain = []\nneighbours = 0\nnotS = ['P', '-', '.']\nfor i in range(n):\n    row = input()\n    plain.append(list(row))\n    for e in range(len(row)):\n        if row[e] == '.':\n            if e == 0:\n                if row[e + 1] in notS:\n                    zero.append((i, e))\n                elif row[e + 1] == 'S':\n                    one.append((i, e))\n            else:\n                if e != len(row) - 1:\n                    if row[e + 1] in notS and row[e - 1] in notS:\n                        zero.append((i, e))\n                    elif (row[e + 1] in notS and row[e - 1] not in notS) or (row[e - 1] in notS and row[e + 1] not in notS):\n                        one.append((i, e))\n                    else:\n                        two.append((i, e))\n                else:\n                    if row[e - 1] in notS:\n                        zero.append((i, e))\n                    else:\n                        one.append((i, e))\n        elif row[e] == 'P':\n            if e == 0:\n                if row[e + 1] == 'S':\n                    neighbours += 1\n            else:\n                if e == len(row) - 1:\n                    if row[e - 1] == 'S':\n                        neighbours += 1\n                else:\n                    if row[e - 1] == 'S':\n                        neighbours += 1\n                    if row[e + 1] == 'S':\n                        neighbours += 1\n        elif row[e] == 'S':\n            if e == 0:\n                if row[e + 1] == 'S':\n                    neighbours += 1\n            else:\n                if e == len(row) - 1:\n                    if row[e - 1] == 'S':\n                        neighbours += 1\n                else:\n                    if row[e - 1] == 'S':\n                        neighbours += 1\n                    if row[e + 1] == 'S':\n                        neighbours += 1\nfor i in range(len(zero)):\n    if k != 0:\n        k -= 1\n        plain[zero[i][0]][zero[i][1]] = 'x'\n    else:\n        break\nif k != 0:\n    for i in range(len(one)):\n        if k != 0:\n            k -= 1\n            plain[one[i][0]][one[i][1]] = 'x'\n            neighbours += 1\n        else:\n            break\n    if k != 0:\n        for i in range(len(two)):\n            if k != 0:\n                k -= 1\n                plain[two[i][0]][two[i][1]] = 'x'\n                neighbours += 2\n            else:\n                break\nprint(neighbours)\nfor i in range(n):\n    print(''.join(plain[i]))\n\n\n\n\n\n\n", "n, k = list(map(int, input().split()))\nlines = [[ch for ch in input()]+['\\n'] for i in range(n)]\nqueue = [[], [], []]\ncount = 0\n\nfor i in range(n):\n    for seat in range(12):\n        if lines[i][seat]=='.':\n            queue[(lines[i][seat-1]=='S')+(lines[i][seat+1]=='S')].append([i, seat])\n        elif lines[i][seat]=='S':\n            count+=(lines[i][seat-1]>'A')+(lines[i][seat+1]>'A')\n\nwhile k:\n    if   queue[0]: seat = queue[0].pop()\n    elif queue[1]:\n        seat = queue[1].pop()\n        count+=1\n    else:\n        seat = queue[2].pop()\n        count+=2\n\n    lines[seat[0]][seat[1]] = 'x'\n    k-=1\n\nprint(count)\nprint(''.join([''.join(line) for line in lines]))\n", "n,k = list(map(int, input().split()))\ng = []\nq = []\nfor i in range(n):\n    v = input()\n    p = []\n    for i in v:\n        p.append(i)\n    v = p\n    g.append(v)\n    for x in range(len(v)):\n        if v[x] != '.': continue\n        num = 0\n        if x != 0 and v[x-1] == 'S':\n            num += 1\n        if x+1 < len(v) and v[x+1] == 'S':\n            num += 1\n        q.append((num, len(g)-1, x))\nq = sorted(q)\nfor i in range(k):\n    g[q[i][1]][q[i][2]] = 'x'\nan = 0\nfor s in g:\n    for j in range(len(s)):\n        if s[j] != 'S': continue\n        if j != 0 and ( s[j-1] != '.' and s[j-1] != '-' ):\n            an += 1\n        if j+1 < len(s) and ( s[j+1] != '.' and s[j+1] != '-' ):\n            an += 1\nprint(an)\n    \nfor s in g:\n    print(\"\".join(s))\n        \n", "n, k = map(int, input().split())\n \nraw_list = list()\nfor i in range(0,n):\n    raw_list.append(input())\n \nplace_list = list()  \ncount_list = list()\n \nfor raw_index, raw in enumerate(raw_list):\n    for place_index, place in enumerate(raw):\n        if place == '.':\t\n            count = 0\t\t\n            if place_index > 0 and raw[place_index - 1] == 'S':\n                count += 1\t\n            if place_index < (len(raw) - 1) and raw[place_index + 1] == 'S':\n                count += 1\t\n            place_list.append((raw_index, place_index))\n            count_list.append(count)\n \nmin_list = list()\t\nput_list = list()\t\n \nfor i in range(0, k):\n    min_list.append(count_list.index(min(count_list)))  \n    put_list.append(place_list[min_list[i]])\t\n \n    del count_list[min_list[i]]\t\n    del place_list[min_list[i]]\n \nnew_raw_list = list()\t\nhere = False\t\n \nfor raw_index, raw in enumerate(raw_list):\n    new_raw = str()\n    for place_index, place in enumerate(raw):\n        for i in range(0, len(min_list)):\n            if raw_index == put_list[i][0] and place_index == put_list[i][1]:\n                new_raw += 'x'\n                here = True\t\n                break\n            else:\n                continue\n \n        if here == False:\t\n            new_raw += place\n        else:\n            here = False\n \n    new_raw_list.append(new_raw)\n \nresult = 0\nalive = ['S', 'P', 'x']\nfor raw in new_raw_list:\n    for place_index, place in enumerate(raw):\n        if place == 'S':\t\n            if place_index != 0:\t\n                if raw[place_index - 1] in alive:\n                    result += 1\t\n            if place_index != (len(raw) - 1):\n                if raw[place_index + 1] in alive:\n                    result += 1\t\n         \nprint(result)\nfor i in range(0, n):\n\tprint(new_raw_list[i])", "#   TaskB\n\nimport sys\n\nn, k = list(map(int, sys.stdin.readline().split()))\n\nmy_list = list()\n\nfor i in range(n):\n    my_list.append(input())\n\n\ndef left(i, my_list):\n    return my_list[i] == '.' and \\\n           ((i - 1) < 0 or\n            my_list[i - 1] == '.' or\n            my_list[i - 1] == 'P' or\n            my_list[i - 1] == '-' or\n            my_list[i - 1] == 'x')\n\n\ndef right(i, my_list):\n    return my_list[i] == '.' and \\\n           ((i + 1) >= len(my_list) or\n            my_list[i + 1] == '.' or\n            my_list[i + 1] == 'P' or\n            my_list[i + 1] == '-' or\n            my_list[i + 1] == 'x')\n\n\nwhile k > 0:\n    for index in range(n):\n        cur_list = my_list[index]\n        for i, _ in enumerate(cur_list):\n            if left(i, cur_list) and right(i, cur_list):\n                k = k - 1\n                try:\n                    part3 = cur_list[(i + 1):]\n                except:\n                    part3 = ''\n                cur_list = cur_list[:i] + 'x' + part3\n                my_list[index] = cur_list\n                if k == 0:\n                    break\n            if k == 0:\n                break\n        if k == 0:\n            break\n    if k == 0:\n        break\n\n    for index in range(n):\n        cur_list = my_list[index]\n        for i, _ in enumerate(cur_list):\n            if ((not left(i, cur_list) and cur_list[i] == '.') and right(i, cur_list)) or (left(i, cur_list) and (not right(i, cur_list)) and cur_list[i] == '.'):\n                k = k - 1\n                try:\n                    part3 = cur_list[(i + 1):]\n                except:\n                    part3 = ''\n                cur_list = cur_list[:i] + 'x' + part3\n                my_list[index] = cur_list\n                if k == 0:\n                    break\n            if k == 0:\n                break\n        if k == 0:\n            break\n    if k == 0:\n        break\n\n    for index in range(n):\n        cur_list = my_list[index]\n        for i, _ in enumerate(cur_list):\n            if cur_list[i] == '.':\n                k = k - 1\n                try:\n                    part3 = cur_list[(i + 1):]\n                except:\n                    part3 = ''\n                cur_list = cur_list[:i] + 'x' + part3\n                my_list[index] = cur_list\n                if k == 0:\n                    break\n            if k == 0:\n                break\n        if k == 0:\n            break\n    if k == 0:\n        break\n    break\n\nneighbours = 0\nfor i in range(n):\n    cur_list = my_list[i]\n    for j, _ in enumerate(cur_list):\n        if cur_list[j] == 'S':\n            if j - 1 >= 0 and (cur_list[j - 1] == 'x' or cur_list[j - 1] == 'P' or cur_list[j - 1] == 'S'):\n                neighbours += 1\n            if j + 1 <= len(cur_list) - 1 and (cur_list[j + 1] == 'x' or cur_list[j + 1] == 'P' or cur_list[j + 1] == 'S'):\n                neighbours += 1\nprint(neighbours)\nfor i in range(n):\n    print(my_list[i])\n", "#!/usr/bin/env python3\n\na, num = list(map(int, input().split()))\n\nrows = {}\ns = 0\n\nfor i in range(a):\n    row = input()\n    places = []\n    best = []\n    average = []\n\n    for j, x in enumerate(row):\n        if x == '.':\n            row_ = ' ' + row + ' '\n            if row_[j] != 'S' and row_[j + 2] != 'S':\n                if num > 0:\n                    row = row[:j] + 'x' + row[j+1:]\n                    num -= 1\n            elif row_[j] != 'S' or row_[j + 2] != 'S':\n                average.append(j)\n            else:\n                places.append(j)\n\n    rows[i] = {\n        'average': average,\n        'places': places,\n        'row': row,\n    }\n\nfor i in range(a):\n    if rows[i]['average']:\n        for j in rows[i]['average']:\n            if num > 0:\n                row = rows[i]['row']\n                row = row[:j] + 'x' + row[j+1:]\n                rows[i]['row'] = row\n                num -= 1\n\nfor i in range(a):\n    if rows[i]['places']:\n        for j in rows[i]['places']:\n            if num > 0:\n                row = rows[i]['row']\n                row = row[:j] + 'x' + row[j+1:]\n                rows[i]['row'] = row\n                num -= 1\n\nfor i in range(a):\n    row = rows[i]['row']\n    for j, x in enumerate(row):\n        if x == 'S':\n            row_ = ' ' + row + ' '\n            if row_[j] in 'PSx':\n                s += 1\n            if row_[j + 2] in 'PSx':\n                s += 1\n\nprint(s)\n\nfor i in range(a):\n    print(rows[i]['row'])\n", "def is_letter(char):\n    return (\n        ord('a') <= ord(char) <= ord('z') or\n        ord('A') <= ord(char) <= ord('Z')\n    )\n\nn, kk = map(int, input().split())\nplacement = [\n    [i for i in input()] for j in range(n)\n]\n\n\nkc = 0 \n\nfor row in placement:\n    for i in range(len(row)):\n        if (row[i] == '.'):\n            count = 0\n            if (i > 0 and row[i - 1] == 'S'):\n                count += 1\n            if (i < len(row) - 1 and row[i + 1] == 'S'):\n                count += 1\n            row[i] = count\n        if (row[i] == 'S'):\n            if (i > 0 and is_letter(str(row[i - 1]))):\n                kc += 1\n            if (i < len(row) - 1 and is_letter(str(row[i + 1]))):\n                kc += 1\n \nfor i in range(3):\n    for j in range(len(placement)):\n        if (kk == 0):\n            # print(f'broken here {i}, {j}') \n            break\n        for k in range(len(placement[j])):\n            if placement[j][k] == i:\n                placement[j][k] = 'x'\n                kc += i\n                kk -= 1\n                if (kk == 0):\n                    # print(\"broken\")                    \n                    break\n\nkkk = 0\n\nfor i in range(len(placement)):\n    for j in range(len(placement[i])):\n        if type(placement[i][j]) == type(1):\n            placement[i][j] = '.'\n\nprint(kc)\nfor row in placement:\n    print(''.join(row))", "def count(flight):\n\tcnt = 0\n\tfor i in range(len(flight)):\n\t\tfor j in range(14):\n\t\t\tif flight[i][j] == 'S':\n\t\t\t\tf = [flight[i][j-1], flight[i][j+1]]\n\t\t\t\tcnt += 2 - f.count('-') - f.count('.')\n\treturn cnt\n\ndef main():\n\t# f = open('B_input.txt', 'rt')\n\tn, k = map(int, input().split(' '))\n\t# n, k = map(int, f.readline().split(' '))\n\tflight = []\n\tfor i in range(n):\n\t\t# flight.append(['-'] + list(f.readline().replace('\\n', '')) + ['-'])\n\t\tflight.append(['-'] + list(input()) + ['-'])\n\t# f.close()\n\n\tfor c in range(3):\n\t\tfor i in range(n):\n\t\t\tfor j in range(14):\n\t\t\t\tif flight[i][j] == '.' and [flight[i][j-1], flight[i][j+1]].count('S') == c:\n\t\t\t\t\tk -= 1\n\t\t\t\t\tflight[i][j] = 'x'\n\t\t\t\t\tif k == 0:\n\t\t\t\t\t\treturn count(flight), '\\n'.join([''.join(i[1:-1]) for i in flight]) \n\nprint(*main(), sep = '\\n')\n", "n, k = (int(x) for x in input().split())\nplane = []\nneig = [[0] * 12 for x in range(n)]\ncount = [0, 0, 0]\ncount_all = 0\nfor i in range(n):\n    s = input()\n    plane.append(s)\n    for j in range(12):\n        if s[j] == 'S':\n            if j > 0 and (s[j - 1] == 'S' or s[j - 1] == 'P'):\n                count_all += 1\n            if j < 11 and (s[j + 1] == 'S' or s[j + 1] == 'P'):\n                count_all += 1\n        if s[j] == '.':\n            c = 2\n            if (j > 0 and s[j - 1] != 'S') or j == 0:\n                c -= 1\n            if (j < 11 and s[j + 1] != 'S') or j == 11:\n                c -= 1\n            count[c] += 1\n            neig[i][j] = c\n# print(count)\nk1 = k\nfor i in range(3):\n    if k1 >= count[i]:\n        k1, count[i] = k1 - count[i], count[i]\n    else:\n        k1, count[i] = 0, k1\n# print(count_all, count)\nprint(count_all + count[1] + 2 * count[2])\n# print(plane[12])\nfor i in range(n):\n    for j in range(12):\n        if plane[i][j] == '.':\n            if k > 0:\n                if count[0] > 0 and neig[i][j] == 0:\n                    plane[i] = plane[i][:j] + 'x' + plane[i][j + 1:]\n                    count[0] -= 1\n                    k -= 1\n                elif count[1] > 0 and neig[i][j] == 1:\n                    plane[i] = plane[i][:j] + 'x' + plane[i][j + 1:]\n                    count[1] -= 1\n                    k -= 1\n                elif count[2] > 0 and neig[i][j] == 2:\n                    plane[i] = plane[i][:j] + 'x' + plane[i][j + 1:]\n                    count[2] -= 1\n                    k -= 1\n            else:\n                break\n    print(plane[i])\n\n\n\n\n", "n, k = (int(x) for x in input().split())\nplane = []\nneig = [[0] * 12 for x in range(n)]\ncount = [0, 0, 0]\ncount_all = 0\nfor i in range(n):\n    s = input()\n    plane.append(s)\n    for j in range(12):\n        if s[j] == 'S':\n            if j > 0 and (s[j - 1] == 'S' or s[j - 1] == 'P'):\n                count_all += 1\n            if j < 11 and (s[j + 1] == 'S' or s[j + 1] == 'P'):\n                count_all += 1\n        if s[j] == '.':\n            c = 2\n            if (j > 0 and s[j - 1] != 'S') or j == 0:\n                c -= 1\n            if (j < 11 and s[j + 1] != 'S') or j == 11:\n                c -= 1\n            count[c] += 1\n            neig[i][j] = c\nk1 = k\nfor i in range(3):\n    if k1 >= count[i]:\n        k1, count[i] = k1 - count[i], count[i]\n    else:\n        k1, count[i] = 0, k1\nprint(count_all + count[1] + 2 * count[2])\nfor i in range(n):\n    for j in range(12):\n        if plane[i][j] == '.':\n            if k > 0:\n                if count[0] > 0 and neig[i][j] == 0:\n                    plane[i] = plane[i][:j] + 'x' + plane[i][j + 1:]\n                    count[0] -= 1\n                    k -= 1\n                elif count[1] > 0 and neig[i][j] == 1:\n                    plane[i] = plane[i][:j] + 'x' + plane[i][j + 1:]\n                    count[1] -= 1\n                    k -= 1\n                elif count[2] > 0 and neig[i][j] == 2:\n                    plane[i] = plane[i][:j] + 'x' + plane[i][j + 1:]\n                    count[2] -= 1\n                    k -= 1\n            else:\n                break\n    print(plane[i])", "n, z = map(int, input().split())\ns = 0\na = []\nx = []\nfor j in range(n):\n    c = list(input())\n    x.append(c)\n    for i in range(12):\n        if c[i] == '.':\n            if i == 0:\n                if c[1] == 'S':\n                    a.append([1, (j,0)])\n                else:\n                    a.append([0, (j,0)])\n            elif i == 11:\n                if c[10] == 'S':\n                    a.append([1, (j,11)])\n                else:\n                    a.append([0, (j,11)])\n            else:\n                k = 0\n                if c[i - 1] == 'S':\n                    k += 1\n                if c[i + 1] == 'S':\n                    k += 1\n                a.append([k, (j,i)])\n        if c[i] == 'S':\n            if i == 0:\n                if c[1] not in '.-':\n                    s += 1\n            elif i == 11:\n                if c[10] not in '.-':\n                    s += 1\n            else:\n                if c[i - 1] not in '.-':\n                    s += 1\n                if c[i + 1] not in '.-':\n                    s += 1\na.sort()\nb = []\nc = []\nfor i in range(z):\n    b.append(a[i][0])\n    c.append(a[i][1])\nfor i in range(z):\n    x[c[i][0]][c[i][1]] = 'x'\nprint(s + sum(b))\nfor i in range(n):\n    print(''.join(x[i]))", "def main():\n    n, k = map(int, input().split())\n    lines = list()\n    m = [0, 0, 0]\n    v = 0\n    for i in range(n):\n        lines.append(input() + ' ')\n        for j in range(12):\n            if lines[i][j] == '.':\n                c = 0\n                if lines[i][j - 1] == 'S':\n                    c += 1\n                if lines[i][j + 1] == 'S':\n                    c += 1\n                m[c] += 1\n            elif lines[i][j] == 'S':\n                if lines[i][j - 1] == 'S' or lines[i][j - 1] == 'P':\n                    v += 1\n                if lines[i][j + 1] == 'S' or lines[i][j + 1] == 'P':\n                    v += 1\n    m[0] = min(m[0], k)\n    k -= m[0]\n    m[1] = min(m[1], k)\n    k -= m[1]\n    m[2] = min(m[2], k)\n    v += m[1] + 2 * m[2]\n    print(v)\n    for elem in lines:\n        for j in range(12):\n            if elem[j] == '.':\n                c = 0\n                if elem[j - 1] == 'S':\n                    c += 1\n                if elem[j + 1] == 'S':\n                    c += 1\n                if m[c] > 0:\n                    print('x', end='')\n                    m[c] -= 1\n                else:\n                    print('.', end='')\n            else:\n                print(elem[j], end='')\n        print()\n\nmain()", "DEBUG = False\n\ndef print_debug(*args):\n    if DEBUG:\n        print(*args)\n\n\ndef print_res():\n    nonlocal places\n    nonlocal ss\n    print(ss)\n    for row_i in range(n):\n        print(\"\".join(places[row_i]))\n\n\nn, k = [int(x) for x in input().split()]\nplaces = []\n\nss = 0\n\nfor row_i in range(n):\n    row = list(input())\n    places.append(row)\n    for i in range(12):\n        if k > 0 and row[i] == \".\" and (i == 0 or row[i - 1] != \"S\") and (i == 11 or row[i + 1] != \"S\"):\n            row[i] = \"x\"\n            k -= 1\n        if row[i] == \"S\":\n            if i > 0 and (row[i - 1] not in [\".\", \"-\"]):\n                ss += 1\n            if i < 11 and (row[i + 1] not in [\".\", \"-\"]):\n                ss += 1\n\nprint_debug(\"--------\")\nprint_debug(k)\n#print_res()\n\nif k > 0:\n    for row_i in range(n):\n        if k == 0:\n            break\n        row = places[row_i]\n        for i in range(12):\n            if k == 0:\n                break\n            if row[i] == \".\":\n                if i in [1, 5, 6, 10] and row[i - 1] == \"S\" and row[i + 1] == \"S\":\n                    continue\n                k -= 1\n                ss += 1\n                row[i] = \"x\"\n\nprint_debug(\"--------\")\nprint_debug(k)\n#print_res()\n\nif k > 0:\n    for row_i in range(n):\n        if k == 0:\n            break\n        row = places[row_i]\n        for i in range(12):\n            if k == 0:\n                break\n            if row[i] == \".\":\n                row[i] = \"x\"\n                ss += 2\n                k -= 1\n\nprint_debug(k)\nprint_res()\n\n", "__author__ = 'RaldenProg'\nfrom pprint import pprint\nn, k = [_ for _ in map(int, input().split())]\ntop = ['.', 'P', '-', 'x']\ntop1 = ['S', '-', 'p', '.']\npas = ['P', 'x', 'S']\ny = []\nfor i in range(n):\n    x = ['-']\n    x.extend(list(input()))\n    x.append('-')\n    y.append(x)\n\nchet = 0\n\nfor i in range(n):\n    for j in range(len(y[i])):\n        if y[i][j] == '.':\n            if y[i][j-1] in top and y[i][j+1] in top and chet != k:\n                #print(y[i][j-1], y[i][j], y[i][j+1])\n                y[i][j] = 'x'\n                chet += 1\nwhile chet != k:\n    flag = 0\n    for i in range(n):\n        for j in range(len(y[i])):\n            if y[i][j] == '.':\n                if y[i][j - 1] in top1 and y[i][j + 1] in top and chet != k:\n                    #print(y[i][j - 1], y[i][j], y[i][j + 1])\n                    y[i][j] = 'x'\n                    chet += 1\n                    flag = 1\n\n                if y[i][j - 1] in top and y[i][j + 1] in top1 and chet != k:\n                    #print(y[i][j - 1], y[i][j], y[i][j + 1])\n                    y[i][j] = 'x'\n                    chet += 1\n                    flag = 1\n\n    if flag == 0 and chet != k:\n        for i in range(n):\n            for j in range(len(y[i])):\n                if y[i][j] == '.' and chet != k:\n                    y[i][j] = 'x'\n                    chet += 1\n                    flag = 1\n\nkol = 0\nfor i in range(n):\n    for j in range(len(y[i])):\n        if y[i][j] == 'S':\n            if y[i][j - 1] in pas:\n                kol += 1\n            if y[i][j + 1] in pas:\n                kol += 1\nprint(kol)\nfor i in range(n):\n    for j in range(1, len(y[i])-1):\n        print(y[i][j], end='')\n    print()\n", "n, k = map(int, input().split())\nA = [['-'] + list(input()) + ['-'] for _ in range(n)]\nneighs = 0\nfor i in A:\n    for j in range(len(i)):\n        if i[j] == 'S':\n            if i[j - 1] != '.' and i[j - 1] != '-':\n                neighs += 1\n            if i[j + 1] != '.' and i[j + 1] != '-':\n                neighs += 1\nfor i in range(len(A)):\n    if k < 0:\n        break\n    for j in range(len(A[i])):\n        if A[i][j] == '.' and A[i][j - 1] != 'S' and A[i][j + 1] != 'S' and k > 0:\n            A[i][j] = 'x'\n            k -= 1\n        elif k <= 0:\n            break\nfor i in range(len(A)):\n    if k < 0:\n        break\n    for j in range(len(A[i])):\n        if A[i][j] == '.' and A[i][j - 1] == 'S' and A[i][j + 1] != 'S' and k > 0:\n            A[i][j] = 'x'\n            neighs += 1\n            k -= 1\n        elif k <= 0:\n            break\nfor i in range(len(A)):\n    if k < 0:\n        break\n    for j in range(len(A[i])):\n        if A[i][j] == '.' and A[i][j - 1] != 'S' and A[i][j + 1] == 'S' and k > 0:\n            A[i][j] = 'x'\n            neighs += 1\n            k -= 1\n        elif k <= 0:\n            break\nfor i in range(len(A)):\n    if k < 0:\n        break\n    for j in range(len(A[i])):\n        if A[i][j] == '.' and k > 0:\n            A[i][j] = 'x'\n            neighs += 2\n            k -= 1\n        elif k <= 0:\n            break\nprint(neighs)\nfor i in A:\n    print(*i[1:-1], sep='')", "n, k = list(map(int, input().split()))\nrows = list()\n# \u0437\u0434\u0435\u0441\u044c \u0438 \u0434\u0430\u043b\u0435\u0435 nb - neighbors\nnb = 0\n# \u043c\u0435\u0441\u0442\u0430 \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0441\u043e\u0435\u0434\u0435\u0439 (0,1,2)\nplaces_by_nb = [list(), list(), list()]\nfor i in range(n):\n    # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u0430\u043a \u043c\u0430\u0441\u0441\u0438\u0432\n    line = input()\n    rows.append(list(line))\n    # \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u044b-\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u0435\u043b\u0438 \u0432 \u043d\u0430\u0447\u0430\u043b\u043e \u0438 \u043a\u043e\u043d\u0435\u0446 \u0438 \u0438\u0434\u0435\u043c \u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0435\n    row = '-%s-' % line\n    for j in range(1, 13):\n        # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439\n        if row[j] == 'S':\n            if row[j-1] == 'S' or row[j-1] == 'P':\n                nb += 1\n            if row[j+1] == 'S' or row[j+1] == 'P':\n                nb += 1\n        # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430\n        # \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0443 \u043c\u0435\u0441\u0442\u0430 (\u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u0435\u043b\u0435\u0439) \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 (\u043f\u043e \u0447\u0438\u0441\u043b\u0443 \u0441\u043e\u0441\u0435\u0434\u0435\u0439)\n        elif row[j] == '.':\n            t = 0\n            if row[j-1] == 'S':\n                t += 1\n            if row[j+1] == 'S':\n                t += 1\n            places_by_nb[t].append((i, j-1))\n# \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440 \u043f\u043e\u043a\u0430 \u0435\u0441\u0442\u044c \u043d\u0435\u043f\u043e\u0441\u0430\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u044b:\n# \u0431\u0435\u0440\u0435\u043c \u043c\u0435\u0441\u0442\u043e, \u0441\u0430\u0434\u0438\u043c \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430, \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439, \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432\nfor m in range(0,3):\n    while k > 0 and len(places_by_nb[m]) > 0:\n        place = places_by_nb[m].pop(-1)\n        rows[place[0]][place[1]] = 'x'\n        nb += m\n        k -= 1\n    if k == 0:\n        break\n# \u0438 \u043d\u0430\u043a\u043e\u043d\u0435\u0446 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\nprint(nb)\nfor row in rows:\n    print(''.join(row))\n"]