["aa=0\na, b, c, d = (list(map(int, input().split(' '))))\n\nl = list(map(int, input().split(' ')))\n\nfor i in range(2**a):\n    k = bin(i)[2:]\n    t = 0\n    k = '0' * (a-len(k)) + k\n    x = []\n    for j in range(a):\n        if k[j] == '1':\n            x.append(l[j])\n            t += 1\n            \n    if t >= 2:\n        if b <= sum(x) <= c and max(x) - min(x) >= d:\n            aa+=1\nprint(aa)\n", "import itertools\nn, l, r, x = list(map(int, input().split()))\nC = sorted(map(int, input().split()))\nans = 0\nif len(C) > 1 : \n    for i in range(2, len(C)+1) :\n        for j in itertools.combinations(C, i) :\n            if l <= sum(j) <= r and max(j) - min(j) >= x : ans += 1\n\nprint(ans)\n", "n,l,r,x = list(map(int,input().split()))\ncs = list(map(int,input().split()))\n\ndef subsets(x):\n    if len(x)==0:\n        return [[]]\n    a=subsets(x[1:])\n    b=[[x[0]]+c for c in a]\n    return a+b\n\nsets = subsets(cs)\n\nans = 0\nfor s in sets:\n    if len(s) < 2:\n        continue\n    if not (l <= sum(s) <= r):\n        continue\n    if max(s)-min(s) < x:\n        continue\n    ans += 1\nprint(ans)\n", "n, l, r, x = [int(x) for x  in input().split()]\na = [int(x) for x in input().split()]\na.sort()\nk = 1 << n\n#print(a)\nres = 0\nlst = 0\nfor i in range(k):\n    num = 0\n    cnt = 0\n    fst = -1\n    for j in range(n):\n        if ((1 << j) & i) != 0:\n            num += a[j]\n            cnt += 1\n            if fst == -1:\n                fst = j\n            lst = j\n            #print(1 << j, i)\n    #print(num)\n    if (cnt > 1) and (a[lst] - a[fst] >= x) and (num >= l) and (num <= r):\n        #print(num, cnt, i)\n        res += 1\nprint(res)\n", "def gray(n):\n    if n == 1:\n        return ['0', '1']\n    l1 = gray(n-1)\n    l2 = reversed(l1)\n    l1 = [a + '0' for a in l1]\n    l2 = [a + '1' for a in l2]\n    return l1+l2\nn, l, r, x = list(map(int, input().split()))\na = list(map(int, input().split()))\nps = gray(n)\nans = 0\nfor i in ps:\n    ma = -1\n    mi = 10000000\n    s=0; k = 0\n    for j in range(n):\n        if i[j] == '1':\n            k += 1\n            s += a[j]\n            mi = min(mi, a[j])\n            ma = max(ma, a[j])\n    if s >= l and s <= r and ma - mi >= x and k > 1:\n        ans += 1\nprint(ans)\n", "#!/usr/bin/env python3\n\nfrom itertools import chain, combinations\n\ndef powerset(iterable):\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n\nN, L, R, X = map(int, input().split(' '))\nC = map(int, input().split(' '))\n\ndef is_ok(c):\n    if len(c) < 2:\n        return False\n    if not (L <= sum(c) <= R):\n        return False\n    if max(c) - min(c) < X:\n        return False\n    return True\n\nprint(sum([1 for c in powerset(C) if is_ok(c)]))", "def gen(k, n, p):\n    if k == n:\n        ans.append(p)\n        return\n    gen(k + 1, n, p + [1])\n    gen(k + 1, n, p + [0])\n\nn, l, r, x = list(map(int, input().split()))\nm = list(map(int, input().split()))\nans = []\ncount = 0\ngen(0, n, [])\nfor i in range(len(ans)):\n    now = []\n    for j in range(len(ans[i])):\n        if ans[i][j] == 1:\n            now.append(m[j])\n    now.sort()\n    sum = 0\n    for i in now:\n        sum += i\n    if len(now) > 0:\n        if now[-1] - now[0] >= x and sum >= l and sum <= r:\n            count += 1\nprint(count)\n", "from itertools import combinations\nn, l, r, x = list(map(int, input().split()))\nC = list(map(int, input().split()))\nans = 0\nfor i in range(2, n+1):\n    for c in combinations(C, i):\n        s = sum(c)\n        if s < l or r < s:\n            continue\n        if max(c) - min(c) < x:\n            continue\n        ans += 1\nprint(ans)\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict, deque\n\ndef VI(): return list(map(int,input().split()))\n\ndef main(n,l,r,x,c):\n    all = []\n    for i in range(1,n+1):\n        com = combinations(c,i)\n        for j in com:\n            s = sum(j)\n            if s>=l and s<=r and max(j)-min(j)>=x:\n                all.append(j)\n    print(len(all))\n\ndef main_input(info=0):\n    n,l,r,x = VI()\n    c = VI()\n    main(n,l,r,x,c)\n\ndef __starting_point():\n    main_input()\n\n\ndef test():\n    n,l,r,x = 15, 1, 100000, 1\n    c = list(range(15))\n    main(n,l,r,x,c)\n\n__starting_point()", "def check_bits(x, n):\n    total = 0\n    for i in range(n):\n        if x & (1 << i):\n            total += 1\n\n    return total >= 2\n\n\ndef check_compex(x, data, l, r, diff):\n    total_c = 0\n    min_c = None\n    max_c = None\n\n    for i in range(len(data)):\n        if x & (1 << i):\n            total_c += data[i]\n            if min_c is None or min_c > data[i]:\n                min_c = data[i]\n            if max_c is None or max_c < data[i]:\n                max_c = data[i]\n\n    return l <= total_c <= r and max_c - min_c >= diff\n\n\ndef __starting_point():\n    n, l, r, diff = list(map(int, input().split()))\n    data = list(map(int, input().split()))\n\n    total = 0\n    for i in range(2 ** n):\n        if check_bits(i, n) and check_compex(i, data, l, r, diff):\n            total += 1\n\n    print(total)\n\n__starting_point()", "def generate(made, lis):\n    if made == n:\n        nonlocal res\n        s = sum(lis)\n        if l <= s and s <= r and len(lis) >= 2 and lis[-1] - lis[0] >= x:\n            res += 1\n    else:\n        generate(made + 1, lis + [a[made]])\n        generate(made + 1, lis)\n\nn, l, r, x = list(map(int, input().split()))\na = sorted(map(int, input().split()))\nres = 0\ngenerate(0, [])\nprint(res)\n", "import itertools\nn, l, r, var = (int(x) for x in input().split())\narr = list(int(x) for x in input().split())\nans = 0\nfor i in range(2, len(arr) + 1):\n\tfor comb in itertools.combinations(arr, i):\n\t\tcurComb = list(comb)\n\t\tif sum(curComb) <= r and sum(curComb) >= l and max(curComb) - min(curComb) >= var:\n\t\t\tans += 1\nprint(ans)", "#n = int(input())\nimport itertools\nn, l, r, x = [int(c) for c in input().split()]\nc = [int(c) for c in input().split()]\n\nc.sort()\ncount = 0\nfor i in range(2, n + 1):\n    combs = itertools.combinations(c, i)\n    for comb in combs:\n        min = comb[0]\n        max = comb[0]\n        sum = 0\n        for a in comb:\n            sum += a\n            if a > max:\n                max = a\n            if a < min:\n                min = a\n        if sum >= l and sum <= r and max - min >= x:\n            count +=1\n\nprint(count)", "n, l, r, x = map(int, input().split())\na = input().split()\nran = 2**n\nanswer = 0\nfor i in range(n):\n    a[i] = int(a[i])\nfor i in range(ran):\n    m = i\n    mask = \"\"\n    while m != 0:\n        if m % 2 == 0:\n            mask += '0'\n        else:\n            mask += '1'\n        m = m//2\n    while len(mask)<n:\n        mask += '0'\n    s = 0\n    easy = 10**9+100\n    hard = 0\n    for j in range(len(mask)):\n        if mask[j] == '1':\n            if a[j] >= hard:\n                hard = a[j]\n            if a[j] <= easy:\n                easy = a[j]\n            s += a[j]\n    if s <= r and s >= l and hard-easy >= x:\n        answer += 1\n\nprint(answer)", "from itertools import *\nn, l, r, x = map(lambda x: int(x), input().split())\nc = sorted(list(map(lambda x: int(x), input().split())))\nvariants = []\nfor i in range(2, n + 1):\n    variants.extend(list(combinations(c, i)))\ncounter = 0\nfor i in range(len(variants)):\n    sum_var = sum(variants[i])\n    if sum_var >= l and sum_var <= r and (variants[i][-1] - variants[i][0]) >= x:\n        counter += 1\nprint (counter)", "def generate(i, real, a):\n    if i == n:\n        if real >= 2:\n            min_a = a[0]\n            max_a = a[real-1]\n            sum_a = sum(a)\n            if (sum_a >= l) and (sum_a <= r) and (max_a-min_a >= x):\n                count[0] += 1\n    else:\n        generate(i+1, real+1, a+[c[i]])  # \u0432\u0437\u044f\u043b\u0438 \u044d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443\n        generate(i+1, real, a)  # \u043d\u0435 \u0432\u0437\u044f\u043b\u0438 \u044d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443\n        \nn, l, r, x = map(int, input().split())\nc = sorted(list(map(int, input().split())))\ncount = [0]\ngenerate(0, 0, [])\nprint(count[0])", "from itertools import combinations\n\nn,l,r,x = map(int, input().split())\nproblems = [int(x) for x in input().split()]\n\nans = 0\nfor i in range(2,n+1):\n    for comb in combinations(problems, i):\n        isum = sum(comb)\n        imin = min(comb)\n        imax = max(comb)\n        if l <= isum <= r and imax-imin >= x:\n            ans += 1\n\nprint(ans)", "import itertools\n\nn, l, r, x = input().split()\nn = int(n)\nl = int(l)\nr = int(r)\nx = int(x)\nnumbers = [int(z) for z in input().split()]\nnumbers = sorted(numbers)\ncount = 0;\nfor z in range(2, len(numbers)+1):\n    for subset in itertools.combinations(numbers, z):\n        total = sum(subset)\n        if total >= l and total <= r and subset[-1]-subset[0] >= x:\n            count+=1\nprint(count)\n", "def main():\n    import sys\n    n, l, r, x, *c = [int(i) for i in sys.stdin.read().split()]\n    result = 0\n    for mask in range(1 << n):\n        number = 0\n        minimal = float(\"inf\")\n        maximal = -float(\"inf\")\n        s = 0\n        for i in range(n):\n            if mask & (1 << i):\n                s += c[i]\n                number += 1\n                minimal = min(minimal, c[i])\n                maximal = max(maximal, c[i])\n        if number >= 2 and l <= s <= r and maximal - minimal >= x:\n            result += 1\n    print(result)\n    \n    \nmain()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef test(a, b, C, s, n, l, r, x, p):\n    if C == []:\n        if s >= l and s <= r and b-a >=x:\n#            print(\"!!!!!!!!\", a, b, C, s, p)\n            return 1\n        return 0\n\n    if s>=l and s <= r and b-a>=x:\n        acc = 1\n    else:\n        acc = 0\n\n#    print(a, b, C, s, p)\n    for i in range(len(C)):\n\n        if s+C[i] <= r:\n            acc += test(min(a, C[i]), max(b, C[i]), C[i+1:], s+C[i], n, l, r, x, p+[C[i]])\n\n    return acc\n\nimport time\n(n, l, r, x) = (int(i) for i in input().split())\nC            = sorted([int(i) for i in input().split()])\n#print(C)\n\nstart = time.time()\nacc   = 0\n\nfor i in range(len(C)):\n    acc += test(C[i], C[i], C[i+1:], C[i], n, l, r, x, [C[i]])\n\nprint(acc)\nfinish = time.time()\n#print(finish - start)\n", "from itertools import combinations\n\n\ndef main():\n    n, l, r, x = [int(t) for t in input().split()]\n    c = [int(t) for t in input().split()]\n\n    def is_valid(candidate):\n        mx = max(candidate)\n        mn = min(candidate)\n        sm = sum(candidate)\n        return l <= sm <= r and (mx - mn) >= x\n\n    way = 0\n\n    for L in range(2, len(c) + 1):\n        for subset in combinations(c, L):\n            if is_valid(subset):\n                way += 1\n\n    print(way)\n\ndef __starting_point():\n    main()\n__starting_point()", "import itertools\n\ndef classify(subset, l, r, x):\n    li = []\n    for i in subset:\n        li.append(i)\n    f1 = False\n    f2 = False\n    f3 = False\n    s = 0\n    for i in li:\n        s += i\n    if s >= l:\n        f1 = True\n    if s <= r:\n        f2 = True\n    li.sort()\n    t =  li[len(li)-1] - li[0]\n    if t >= x:\n        f3 = True\n    if f1 and f2 and f3:\n        return True\n    else:\n        return False\n\ns = input()\ns = s.split()\nn = int(s[0])\nl = int(s[1])\nr = int(s[2])\nx = int(s[3])\n\na = input()\na = a.split()\narr = []\nfor i in a:\n    arr.append(int(i))\n\ncount  = 0\nfor i in range(2, len(arr)+1):\n    for subset in itertools.combinations(arr, i):\n        #print(subset)\n        if classify(subset, l, r, x):\n            #print(subset)\n            count += 1\n\nprint(count)\n", "n, l, r, x = [int(y) for y in input().split()]\nc = [int(y) for y in input().split()]\nc.sort()\nans = [0]\n\ndef solve(ans, tasklist = [], e = 0):\n    if sum(tasklist) <= r and sum(tasklist) >= l and len(tasklist) >= 2 and max(tasklist) - min(tasklist) >= x:\n        ans[0] += 1\n    for i in range(e, n):\n        tasklist.append(c[i])\n        solve(ans, tasklist, i + 1)\n        del tasklist[len(tasklist) - 1]\n\nsolve(ans)\nprint(ans[0])\n", "def f(k, n, ma, mi, sum):\n    if k:\n        if sum + k[0] <= r and sum + k[0] >= l and   max(k[0], ma) - min(k[0], mi) >= x:\n            n+=1\n        if sum <= r:\n            n = f(k[1:], n, ma, mi, sum)\n            n = f(k[1:], n, max(k[0], ma), min(k[0], mi), sum + k[0])\n    return n\nn, l, r, x = [int(i) for i  in input().split()]\ns = [int(i) for i  in input().split()]\nn = f(s, 0, 0, 10**9, 0)\nprint(n)\n"]