["n = int(input())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndef try_solve(t):\n    for i in range(n-1):\n        ok = False\n\n        for x in range(4):\n            if a[i] == t[i] | x and b[i] == t[i] & x:\n                t.append(x)\n                ok = True\n                break\n\n        if not ok:\n            return False\n\n    return True\n\nok = False\n\nfor x in range(4):\n    t = [x]\n\n    if try_solve(t):\n        print(\"YES\")\n        print(\" \".join(map(str, t)))\n        ok = True\n        break\n\nif not ok:\n    print(\"NO\")\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nres = []\nflag = True\n\nfor i in range(4):\n    if len(res) == n:\n        flag = True\n        break\n    flag = True\n    res = [i]\n    for k in range(0, n-1):\n        if not flag:\n            break\n        for j in range(4):\n            if (res[k] & j) == b[k] and (res[k] | j) == a[k]:\n                res.append(j)\n                break\n        else:\n            flag = False\n\nif flag:\n    print(\"YES\")\n    print(*res)\nelse:\n    print(\"NO\")\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nt = [0]*(len(a)+1)\n\nvalids = dict()\nfor a1 in range(4):\n\tfor b1 in range(4):\n\t\tvalids[str(a1)+str(b1)] = list()\n\t\tfor t1 in range(4):\n\t\t\tfor t2 in range(4):\n\t\t\t\tif (t1 | t2 == a1 and t1 & t2 == b1):\n\t\t\t\t\tvalids[str(a1)+str(b1)].append(str(t1) + str(t2))\n\nprevs = ['0', '1', '2', '3']\n# print(valids)\nfor i in range(0, len(a)):\n\t# valids = list()\n\t# for p in range(4):\n\t# \tfor t in range(4):\n\t# \t\tif (p | t == a[i] and p & t == b[i]):\n\t# \t\t\tvalids.append(p+t)\n\tnewprevs = list()\n\tfor i in valids[str(a[i])+str(b[i])]:\n\t\tfor j in prevs:\n\t\t\tif j[-1] == i[0]:\n\t\t\t\tnewprevs.append(str(j) + str(i[1]))\n\t\t\t\t# print(i, j)\n\t\t\t\tbreak\n\tprevs = newprevs\n\nif (len(prevs) > 0):\n\tprint('YES')\n\tprint(' '.join(prevs[0]))\nelse:\n\tprint('NO') ", "n = int(input())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\npos_and = [\n    {(0, 1), (0, 2), (0, 3), (0, 0), (1, 2)},\n    {(1, 3), (1, 1)},\n    {(2, 3), (2, 2)},\n    {(3, 3)}\n]\npos_or = [\n    {(0, 0)},\n    {(0, 1), (1, 1)},\n    {(0, 2), (2, 2)},\n    {(0, 3), (1, 3), (2, 3), (3, 3), (1, 2)}\n]\n\n# for i in range(4):\n#     for j in range(4):\n#         print(i, j, [x for x in pos_and[i].intersection(pos_or[j])])\n\nres1 = []\nflag1 = False\nfor i in range(n - 1):\n    pairs = [x for x in pos_and[b[i]].intersection(pos_or[a[i]])]\n    pairs.sort()\n    if len(pairs) == 0:\n        flag1 = True\n        break\n    for pair in pairs:\n        rev_pair = (pair[1], pair[0])\n        if len(res1) == 0:\n            res1.append(pair[0])\n            res1.append(pair[1])\n            break\n        if res1[-1] == pair[0]:\n            res1.append(pair[1])\n            break\n        elif res1[-1] == rev_pair[0]:\n            res1.append(rev_pair[1])\n            break\n    if len(res1) != i + 2:\n        flag1 = True\n        break\nres2 = []\nflag2 = False\nfor i in range(n - 1):\n    pairs = [x for x in pos_and[b[i]].intersection(pos_or[a[i]])]\n    pairs.sort()\n    if len(pairs) == 0:\n        flag2 = True\n        break\n    for pair in pairs:\n        rev_pair = (pair[1], pair[0])\n        if len(res2) == 0:\n            res2.append(rev_pair[0])\n            res2.append(rev_pair[1])\n            break\n        if res2[-1] == pair[0]:\n            res2.append(pair[1])\n            break\n        elif res2[-1] == rev_pair[0]:\n            res2.append(rev_pair[1])\n            break\n    if len(res2) != i + 2:\n        flag2 = True\n        break\nif flag1 and flag2 and a[0] == 3 and b[0] == 0:\n    res1 = []\n    flag1 = False\n    for i in range(n - 1):\n        pairs = [x for x in pos_and[b[i]].intersection(pos_or[a[i]])]\n        pairs.sort()\n        if len(pairs) == 0:\n            flag1 = True\n            break\n        for pair in pairs:\n            rev_pair = (pair[1], pair[0])\n            if len(res1) == 0:\n                res1.append(pairs[1][0])\n                res1.append(pairs[1][1])\n                break\n            if res1[-1] == pair[0]:\n                res1.append(pair[1])\n                break\n            elif res1[-1] == rev_pair[0]:\n                res1.append(rev_pair[1])\n                break\n        if len(res1) != i + 2:\n            flag1 = True\n            break\n    res2 = []\n    flag2 = False\n    for i in range(n - 1):\n        pairs = [x for x in pos_and[b[i]].intersection(pos_or[a[i]])]\n        pairs.sort()\n        if len(pairs) == 0:\n            flag2 = True\n            break\n        for pair in pairs:\n            rev_pair = (pair[1], pair[0])\n            if len(res2) == 0:\n                res2.append(pairs[1][1])\n                res2.append(pairs[1][0])\n                break\n            if res2[-1] == pair[0]:\n                res2.append(pair[1])\n                break\n            elif res2[-1] == rev_pair[0]:\n                res2.append(rev_pair[1])\n                break\n        if len(res2) != i + 2:\n            flag2 = True\n            break\nif not flag2:\n    print(\"YES\")\n    print(*res2)\nelif not flag1:\n    print(\"YES\")\n    print(*res1)\nelse:\n    print(\"NO\")\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nfor k in range(4):\n    t = [-1] * n\n    t[0] = k\n    x = False\n    for i in range(1, n):\n        x = False\n        for j in range(4):\n            if a[i-1] == (j | t[i - 1]) and b[i-1] == (j & t[i - 1]):\n                t[i] = j\n                x = True\n        if not x:\n            break\n    if x:\n        print(\"YES\")\n        print(*t)\n        return\nprint(\"NO\")", "n = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\nmp = [[] for i in range(64)]\n\ndef getmp(a, b, t):\n    return mp[a + b*4 + t*16]\n\nfor i in range(4):\n    for j in range(4):\n        mp[(i | j) + (i & j) * 4 + i*16].append(j)\n\nvar = [0]\n\nwhile len(var) > 0 and len(var) < n:\n    vv = var[-1]\n    i = len(var) - 1\n    p = getmp(a[i], b[i], vv)\n    if len(p) == 0:\n        appd = True\n        while len(var) > 1 and appd:\n            vv = var[-1]\n            del var[-1]\n            i = len(var) - 1\n            p = getmp(a[i], b[i], var[-1])\n            for t in p:\n                if vv < t:\n                    p.append(t)\n                    appd = False\n                    break\n\n        if len(var) == 1:\n            if var[0] == 3:\n                var = []\n            else:\n                var[0] += 1\n    else:\n        var.append(p[0])\n\nif len(var) > 0:\n    print('YES')\n    print(' '.join(map(str, var)))\nelse:\n    print('NO')\n", "n = int(input())\nflag = 0\nargsa = list(map(int, input().split()))\nargsb = list(map(int, input().split()))\nargst = [0]\nfor i in range (n-1):\n    for j in range (4):\n        if (argst[i] & j == argsb[i]) and (argst[i] | j == argsa[i]):\n            argst.append(j)\n            flag = 1\n            break\n    if not(flag):\n        flag = 2\n        break\n    flag = 0\nif flag == 2:\n    flag = 0\n    argst = []\n    argst.append(1)\n    for i in range(n - 1):\n        for j in range(4):\n            if (argst[i] & j == argsb[i]) and (argst[i] | j == argsa[i]):\n                argst.append(j)\n                flag = 1\n                break\n        if not(flag):\n            flag = 2\n            break\n        flag = 0\nif flag == 2:\n    flag = 0\n    argst = [2]\n    for i in range(n - 1):\n        for j in range(4):\n            if (argst[i] & j == argsb[i]) and (argst[i] | j == argsa[i]):\n                argst.append(j)\n                flag = 1\n                break\n        if not(flag):\n            flag = 2\n            break\n        flag = 0\nif flag == 2:\n    flag = 0\n    argst = [3]\n    for i in range(n - 1):\n        for j in range(4):\n            if (argst[i] & j == argsb[i]) and (argst[i] | j == argsa[i]):\n                argst.append(j)\n                flag = 1\n                break\n        if not(flag):\n            flag = 2\n            break\n        flag = 0\n\nif not(flag == 2):\n    print('YES',end='\\n')\n    print(*argst)\nelse:\n    print('NO')\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n\nif a[0] >= b[0]:\n    for x in range(4):\n        for y in range(4):\n            if (x | y) == a[0] and (x & y) == b[0]:\n                t = [x, y]\n                ans = 1\n                for i in range(1, n - 1):\n                    if a[i] >= b[i]:\n                        flag = 0\n                        for ti in range(4):\n                            if (t[i] | ti == a[i]) and (t[i] & ti) == b[i]:\n                                t.append(ti)\n                                flag = 1\n                        if flag == 0:\n                            ans = 0\n                            break\n                    else:\n                        ans = 0\n                        break\n                        \n                if ans == 1:\n                    print('YES')\n                    print(*t)\n                    return\n    print('NO')\n\n\nelse:\n    print('NO')\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndef yes(t):\n    nonlocal n, a, b\n    if len(t) < n:\n        return False\n    for i in range(n - 1):\n        if t[i]|t[i + 1] == a[i] and t[i]&t[i + 1] == b[i]:\n            continue\n        else:\n            return False\n    return True\n\nans = []\nfor i in range(4):\n    x = [i]\n    for j in range(n - 1):\n        for k in range(4):\n            if x[-1]|k == a[j] and x[-1]&k == b[j]:\n                x.append(k)\n                break\n    if yes(x):\n        ans = x\nif ans:\n    print('YES')\n    print(*ans)\nelse:\n    print('NO')", "\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nlst = [[[(0, 0)], [], [], []], [[(0, 1), (1, 0)], [(1, 1)], [], []], [[(0, 2), (2, 0)], [], [(2, 2)], []], [[(0, 3), (1, 2), (2, 1), (3, 0)], [(1, 3), (3, 1)], [(2, 3), (3, 2)], [(3, 3)]]]\nans = []\n\nprev = [0, 1, 2, 3]\nres = []\nfor i in range(n - 1):\n    if len(lst[a[i]][b[i]]) != 0:\n        ans.append(lst[a[i]][b[i]])\n    else:\n        print(\"NO\")\n        return\n    prev2 = []\n    res.append([])\n    for j in prev:\n        for x in ans[-1]:\n            if x[0] == j:\n                prev2.append(x[1])\n                res[-1].append((x[1], x[0]))\n    prev = prev2\n\n    if len(prev) == 0:\n        print(\"NO\")\n        return\n\nans = [res[-1][0][0]]\nprev = res[-1][0][1]\nfor i in range(len(res) - 2, -1, -1):\n\n    for j in range(len(res[i])):\n        if res[i][j][0] == prev:\n            ans.append(res[i][j][0])\n            prev = res[i][j][1]\n            break\nans.append(prev)\nans.reverse()\nprint(\"YES\")\nprint(*ans)", "# coding=utf-8\n\nn = int(input())\n\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\nc = [[[[0, 0]], [], [], []], [[[0, 1], [1, 0]], [[1, 1]], [], []], [[[0, 2], [2, 0]], [], [[2, 2]], []], [[[0, 3], [1, 2], [2, 1], [3, 0]], [[1, 3], [3, 1]], [[2, 3], [3, 2]], [[3, 3]]]]\n\nstack = c[a[0]][b[0]][:]\n\ni = 1\n\nwhile i < n - 1 and stack:\n    helper = c[a[i]][b[i]][:]\n    for e in helper:\n        j = 0\n        while j < len(stack):\n            if stack[j][-1] == e[0] and len(stack[j]) == i + 1:\n                stack[j].append(e[1])\n            j += 1\n\n    j = 0\n    while j < len(stack):\n        if len(stack[j]) == i + 1:\n            del stack[j]\n        else:\n            j += 1\n    i += 1\n\nif stack:\n    print('YES')\n    print(*stack[0])\nelse:\n    print('NO')\n", "from itertools import product\n#def loop(n, t=[]):\n    #if n == 1:\n        #return True, t\n    #for i in range(3):\n        #l = loop(n - 1, t + [i])\n        #if l[0]:\n            #for j in range(n - 1):\n                #if not (t[j] | t[j + 1] == a[j] and t[j] & t[j + 1] == b[j]):\n                    #break\n            \n            #else:            \n                #return True, l[1]\n    #return False, []\n\ndef next(p, o, a):\n    for i in range(4):\n        if (p | i == o and p & i == a):\n            return i\n\ndef check(t):\n    for j in range(n - 1):\n        if not (t[j] | t[j + 1] == a[j] and t[j] & t[j + 1] == b[j]):\n            return False\n    return True\n\nn = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n#print(loop(n))\n#for i in product(*['0123' for i in range(n)]):\n    #if check([int(j) for j in i]):\n        #print('YES')\n        #print(' '.join(i))\n        #break\n#else:\n    #print('NO')\nfor j in range(4):\n    t = [j]\n    for i in range(1, n):\n        nxt = next(t[-1], a[i-1], b[i-1])\n        if nxt is None:\n            break\n        t.append(nxt)\n    else:\n        print('YES')\n        print(' '.join(str(i) for i in t))\n        break\nelse:\n    print('NO')\n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nt = [[-1] * n for i in range(4)]\nt[0][0] = 0\nt[1][0] = 1\nt[2][0] = 2\nt[3][0] = 3\nfor i in range(1, n):\n    for j in range(4):\n        if t[j][i - 1] != -1:\n            for k in range(4):\n                if (t[j][i - 1] & k == b[i - 1]) and (t[j][i - 1] | k == a[i - 1]):\n                    t[j][i] = k\n                    break\n\nfor j in range(4):\n    if t[j][n - 1] != -1:\n        print(\"YES\")\n        print(*t[j])\n        break\nelse:\n    print(\"NO\")", "n = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nmatr = [[(), (), (), ()], [(), (), (), ()], [(), (), (), ()], [(), (), (), ()]]\nmatr[0][0] = (0, 0)\nmatr[0][1] = (-1, -1)\nmatr[0][2] = (-1, -1)\nmatr[0][3] = (-1, -1)\nmatr[1][0] = (1, 0)\nmatr[1][1] = (1, 1)\nmatr[1][2] = (-1, -1)\nmatr[1][3] = (-1, -1)\nmatr[2][0] = (2, 0)\nmatr[2][1] = (-1, -1)\nmatr[2][2] = (2, 2)\nmatr[2][3] = (-1, -1)\nmatr[3][1] = (1, 3)\nmatr[3][2] = (3, 2)\nmatr[3][3] = (3, 3)\nt = []\nif (a[0] != 3 or b[0] != 0) and matr[a[0]][b[0]][0] == -1:\n    print('NO')\n    return\nelse:\n    if a[0] == 3 and b[0] == 0:\n        t.append(3)\n        t.append(0)\n        f = False\n        for i in range(1, n - 1):\n            if a[i] == 3 and b[i] == 0:\n                if t[i] == 0:\n                    t.append(3)\n                elif t[i] == 1:\n                    t.append(2)\n                elif t[i] == 2:\n                    t.append(1)\n                else:\n                    t.append(0)\n            elif matr[a[i]][b[i]][0] != t[i] and matr[a[i]][b[i]][1] != t[i]:\n                f = True\n                break\n            else:\n                if matr[a[i]][b[i]][0] == t[i]:\n                    t.append(matr[a[i]][b[i]][1])\n                else:\n                    t.append(matr[a[i]][b[i]][0])\n        if not f:\n            print('YES')\n            print(*t)\n        else:\n            t = []\n            t.append(0)\n            t.append(3)\n            f = False\n            for i in range(1, n - 1):\n                if a[i] == 3 and b[i] == 0:\n                    if t[i] == 0:\n                        t.append(3)\n                    elif t[i] == 1:\n                        t.append(2)\n                    elif t[i] == 2:\n                        t.append(1)\n                    else:\n                        t.append(0)\n                elif matr[a[i]][b[i]][0] != t[i] and matr[a[i]][b[i]][1] != t[i]:\n                    f = True\n                    break\n                else:\n                    if matr[a[i]][b[i]][0] == t[i]:\n                        t.append(matr[a[i]][b[i]][1])\n                    else:\n                        t.append(matr[a[i]][b[i]][0])\n            if not f:\n                print('YES')\n                print(*t)\n            else:\n                t = []\n                t.append(1)\n                t.append(2)\n                f = False\n                for i in range(1, n - 1):\n                    if a[i] == 3 and b[i] == 0:\n                        if t[i] == 0:\n                            t.append(3)\n                        elif t[i] == 1:\n                            t.append(2)\n                        elif t[i] == 2:\n                            t.append(1)\n                        else:\n                            t.append(0)\n                    elif matr[a[i]][b[i]][0] != t[i] and matr[a[i]][b[i]][1] != t[i]:\n                        f = True\n                        break\n                    else:\n                        if matr[a[i]][b[i]][0] == t[i]:\n                            t.append(matr[a[i]][b[i]][1])\n                        else:\n                            t.append(matr[a[i]][b[i]][0])\n                if not f:\n                    print('YES')\n                    print(*t)\n                else:\n                    t = []\n                    t.append(2)\n                    t.append(1)\n                    f = False\n                    for i in range(1, n - 1):\n                        if a[i] == 3 and b[i] == 0:\n                            if t[i] == 0:\n                                t.append(3)\n                            elif t[i] == 1:\n                                t.append(2)\n                            elif t[i] == 2:\n                                t.append(1)\n                            else:\n                                t.append(0)\n                        elif matr[a[i]][b[i]][0] != t[i] and matr[a[i]][b[i]][1] != t[i]:\n                            f = True\n                            break\n                        else:\n                            if matr[a[i]][b[i]][0] == t[i]:\n                                t.append(matr[a[i]][b[i]][1])\n                            else:\n                                t.append(matr[a[i]][b[i]][0])\n                    if not f:\n                        print('YES')\n                        print(*t)\n                    else:\n                        print('NO')\n    else:\n        t.append(matr[a[0]][b[0]][0])\n        t.append(matr[a[0]][b[0]][1])\n        f = False\n        for i in range(1, n - 1):\n            if a[i] == 3 and b[i] == 0:\n                if t[i] == 0:\n                    t.append(3)\n                elif t[i] == 1:\n                    t.append(2)\n                elif t[i] == 2:\n                    t.append(1)\n                else:\n                    t.append(0)\n            elif matr[a[i]][b[i]][0] != t[i] and matr[a[i]][b[i]][1] != t[i]:\n                f = True\n                break\n            else:\n                if matr[a[i]][b[i]][0] == t[i]:\n                    t.append(matr[a[i]][b[i]][1])\n                else:\n                    t.append(matr[a[i]][b[i]][0])\n        if not f:\n            print('YES')\n            print(*t)\n        else:\n            t = []\n            t.append(matr[a[0]][b[0]][1])\n            t.append(matr[a[0]][b[0]][0])\n            f = False\n            for i in range(1, n - 1):\n                if a[i] == 3 and b[i] == 0:\n                    if t[i] == 0:\n                        t.append(3)\n                    elif t[i] == 1:\n                        t.append(2)\n                    elif t[i] == 2:\n                        t.append(1)\n                    else:\n                        t.append(0)\n                elif matr[a[i]][b[i]][0] != t[i] and matr[a[i]][b[i]][1] != t[i]:\n                    f = True\n                    break\n                else:\n                    if matr[a[i]][b[i]][0] == t[i]:\n                        t.append(matr[a[i]][b[i]][1])\n                    else:\n                        t.append(matr[a[i]][b[i]][0])\n            if not f:\n                print('YES')\n                print(*t)\n            else:\n                print('NO')\n", "n = int(input())\na=list(map(int, input().split()))\nb=list(map(int, input().split()))\nways = {(0,0): [(0,0)], (1,0):[(0,1),(1,0)], (1,1):[(1,1)], (2,0):[(2,0),(0,2)], (2,2):[(2,2)], (3,0):[(3,0),(0,3),(2,1),(1,2)],(3,1):[(3,1),(1,3)],(3,2):[(3,2),(2,3)], (3,3):[(3,3)]}\nans = []\nddl = []\ns= {0,1,2,3}\nfor i in range(n-2,-1,-1):\n    if (a[i],b[i]) not in ways:\n        print(\"NO\")\n        return\n    d = ways[(a[i],b[i])]\n    ns = set()\n    dd = {None: None}\n    for st, en in d:\n        if (en in s):\n            ns.add(st)\n            dd[st] = en\n    if i == 0:\n        if len(ns) == 0:\n            print(\"NO\")\n            return\n        k = ns.pop()\n        ans = [k, dd[k]]\n    else:\n        ddl.append(dd)\n    s = ns\n        \nfor i in range(1,n-1):\n    dd = ddl.pop()\n    ans.append(dd[ans[-1]])\n\n\n\nif ans[0] == None:\n    print('NO')\nelse:\n    print('YES')\n    print(' '.join(map(str,ans)))\n", "n = int(input())\narr = list(map(int, input().split()))\nbrr = list(map(int, input().split()))\ntrr = [0 for i in range(n)]\nfor j in range(4):\n    trr[0] = j\n    fl = True\n    for i in range(n - 1):\n        if arr[i] == brr[i]:\n            if trr[i] != arr[i]:\n                fl = False\n                break\n            trr[i + 1] = arr[i]\n        else:\n            if brr[i] == 3:\n                fl = False\n                break\n            if brr[i] == 2:\n                if arr[i] == 3:\n                    if trr[i] == 2:\n                        trr[i + 1] = 3\n                    elif trr[i] == 3:\n                        trr[i + 1] = 2\n                    else:\n                        fl = False\n                        break\n                else:\n                    fl = False\n                    break\n            if brr[i] == 1:\n                if arr[i] == 3:\n                    if trr[i] == 1:\n                        trr[i + 1] = 3\n                    elif trr[i] == 3:\n                        trr[i + 1] = 1\n                    else:\n                        fl = False\n                        break\n                else:\n                    fl = False\n                    break        \n            if brr[i] == 0:\n                if arr[i] == 1:\n                    if trr[i] == 0:\n                        trr[i + 1] = 1\n                    elif trr[i] == 1:\n                        trr[i + 1] = 0\n                    else:\n                        fl = False\n                        break\n                elif arr[i] == 2:\n                    if trr[i] == 2:\n                        trr[i + 1] = 0\n                    elif trr[i] == 0:\n                        trr[i + 1] = 2\n                    else:\n                        fl = False\n                        break         \n                else:\n                    if trr[i] == 1:\n                        trr[i + 1] = 2\n                    elif trr[i] == 2:\n                        trr[i + 1] = 1\n                    elif trr[i] == 3:\n                        trr[i + 1] = 0\n                    else:\n                        trr[i + 1] = 3\n\n    #print(trr)\n    if fl:\n        print('YES')\n        print(*trr)\n        break\nelse:\n    print('NO')", "\n\nsize : int = int(input())\n\nseq1 = []\nseq2 = []\n\nfor i in input().split(\" \"):\n    seq1.append(int(i))\n\nfor i in input().split(\" \"):\n    seq2.append(int(i))\n\nout = []\nfor i in range(0, size):\n    out.append(-1)\n\nfor tFirst in range( 0, 4 ):\n    out[0] = tFirst\n    for i in range(0, size - 1):\n        for t2 in range( 0, 4 ):\n            if out[i] | t2 == seq1[i] and out[i] & t2 == seq2[i]:\n                out[i+1] = t2\n\n\n    if -1 not in out:\n        print(\"YES\")\n        for i in out:\n            print(i, end = \" \")\n\n        return\n\nif -1 in out:\n    print(\"NO\")", "from functools import reduce\n\nn = int(input())\na,b = (list(map(int, input().split())) for _ in (None, None))\noq=set(range(4))\nq=oq.copy()\nw=[]\npossible=True\nfor i in range(n-1):\n    p=set()\n    w.append({})\n    for t1 in q:\n        e=set([t2 for t2 in oq if t2|t1==a[i] and t2&t1==b[i]])\n        p|=e\n        w[i][t1]=e\n    q=p\n    if len(q)==0:\n        possible=False\n        break\n\nprint('YES' if possible else 'NO')\nif possible:\n    y=None\n    for l in q:\n        y=l\n        break\n    path=[y]\n    for g in reversed(w):\n        for k, u in list(g.items()):\n            if y in u:\n                y=k\n                break\n        path.append(y)\n    print(reduce(lambda x,y:x+' '+str(y), reversed(path), '')[1:])\n", "\nn=int(input())\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\nfor i in range(4):\n    ans=[-1]*n\n    ans[0]=i\n    flag=False\n    for j in range(1,n):\n        flag=False\n        for k in range(4):\n            if a[j-1]==(k|ans[j-1]) and b[j-1]==(k&ans[j-1]):\n                ans[j]=k\n                flag=True\n        if not flag:\n            break\n    if flag:\n        print(\"YES\")\n        print(*ans)\n        return\nprint(\"NO\")", "n = int(input())\n\nlst1 = [int(x) for x in input().split()]\nlst2 = [int(x) for x in input().split()]\n\nF = False\nfor x in range(4):\n    ans = [-1] * n\n    ans[0] = x\n    for y in range(1, n):\n        f = False\n        for z in range(4):\n            if z | ans[y - 1] == lst1[y - 1] and z & ans[y - 1] == lst2[y - 1]:\n                ans[y] = z\n                f = True\n                break\n        if not f:\n            break\n        \n    if f:\n        F = True\n        break\n\nif F:\n    print(\"YES\")\n    print(*ans)\nelse:\n    print(\"NO\")\n", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\ndef mint():\n\treturn int(minp())\ndef mints():\n\treturn map(int,minp().split())\n\nkk = [[[None]*4 for i in range(4)] for j in range(4)]\nfor i in range(4):\n\tfor j in range(4):\n\t\tfor k in range(4):\n\t\t\tz = None\n\t\t\tfor x in range(4):\n\t\t\t\tif (i|x == j) and (i&x == k):\n\t\t\t\t\tz = x\n\t\t\tkk[i][j][k] = z\n\nn = mint()\na = list(mints())\nb = list(mints())\nt = [0]*n\nfor i in range(4):\n\tt[0] = i\n\tok = True\n\tfor j in range(n-1):\n\t\tt[j+1] = kk[t[j]][a[j]][b[j]]\n\t\tif t[j+1] == None:\n\t\t\tok = False\n\t\t\tbreak\n\tif ok:\n\t\tprint(\"YES\")\n\t\tprint(*t)\n\t\treturn\nprint(\"NO\")", "def my(a, b, c):\n    for x, y in zip(a, b):\n        for z in range(4):\n            if c[-1] | z == x and c[-1] & z == y:\n                c += [z]\n                break\n        else:\n            return []\n    return c\n\nn = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nfor i in range(4):\n    t = my(a, b, [i])\n    if t:\n        print('YES')\n        print(*t)\n        break\nelse:\n    print('NO')        \n", "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nfor i in range(n-1):\n    if a[i] == 3:\n        a[i] = '11'\n    elif a[i] == 2:\n        a[i] = '10'\n    elif a[i] == 1:\n        a[i] = '01'\n    elif a[i] == 0:\n        a[i] = '00'\n\nfor i in range(n-1):\n    if b[i] == 3:\n        b[i] = '11'\n    elif b[i] == 2:\n        b[i] = '10'\n    elif b[i] == 1:\n        b[i] = '01'\n    elif b[i] == 0:\n        b[i] = '00'\n\n\ndef Checker(z, x, y):\n    if z == '0':\n        if x == '0' and y == '0':\n            return '0'\n        elif x == '0' and y == '1':\n            return None\n        elif x == '1' and y == '0':\n            return '1'\n        elif x == '1' and y == '1':\n            return None\n    elif z == '1':\n        if x == '0' and y == '0':\n            return None\n        elif x == '0' and y == '1':\n            return None\n        elif x == '1' and y == '0':\n            return '0'\n        elif x == '1' and y == '1':\n            return '1'\n\n\ns = []\nflag = True\n\nfor ti in ['00', '01', '10', '11']:\n    t = ti\n    if len(s) == n:\n        break\n    elif (Checker(t[0], a[0][0], b[0][0]) is not None) and (Checker(t[1], a[0][1], b[0][1]) is not None):\n        s.append(t)\n        for i in range(n-1):\n            c = Checker(t[0], a[i][0], b[i][0])\n            e = Checker(t[1], a[i][1], b[i][1])\n            if (c is not None) and (e is not None):\n                k = ''.join([c, e])\n                s.append(k)\n                t = k\n            else:\n                s.clear()\n                break\n    elif t == '11':\n        flag = False\nif flag and s:\n    print('YES')\n    for i in range(n):\n        if s[i] == '11':\n            print(3, end=' ')\n        elif s[i] == '10':\n            print(2, end=' ')\n        elif s[i] == '01':\n            print(1, end=' ')\n        elif s[i] == '00':\n            print(0, end=' ')\nelse:\n    print('NO')\n"]