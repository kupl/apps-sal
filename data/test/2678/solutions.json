["# cook your dish here\n\nimport operator\n\nno_seq = int(input().strip())\nseqs = []\nfor idx in range(no_seq):\n    input_now = input().strip().split(\" \")\n    seqs.append([int(input_now[0]), int(input_now[1])])\n\nseqs.sort(key=operator.itemgetter(0))\ncurr = seqs[0]\nanswer = 1\nfor i in range(1, no_seq):\n    if curr[1] < seqs[i][0]:\n        answer += 1\n        curr = seqs[i]\n    else:\n        curr[0] = seqs[i][0]\n        curr[1] = min(curr[1], seqs[i][1])\n\nprint(answer)\n", "# cook your dish here\nfrom operator import itemgetter\nn=int(input())\narray=[]\nfor _ in range(n):\n    array.append(list(map(int, input().split())))\narray.sort(key=itemgetter(1))\narray.sort(key=itemgetter(0))\nappo=array[0]\ncounter=1\nfor i in range(1,n):\n    if appo[1]<array[i][0]:\n        counter+=1\n        appo=array[i]\n    else:\n        appo[0] = array[i][0]\n        appo[1] = min(appo[1], array[i][1])\nprint(counter)", "# cook your dish here\nn=int(input())\ndef compare(tpl):\n\treturn tpl[1]\npoints=[]\nfor i in range(n):\n\ta,b=map(int,input().split())\n\tpoints.append((a,b))\nans=1\npoints.sort(key=compare)\nend=points[0][1]\nfor a,b in points:\n\tif a>end:\n\t\tans+=1\n\t\tend=b\nprint(ans)", "n=int(input())\r\ndef compare(tpl):\r\n\treturn tpl[1]\r\npoints=[]\r\nfor i in range(n):\r\n\ta,b=list(map(int,input().split()))\r\n\tpoints.append((a,b))\r\nans=1\r\npoints.sort(key=compare)\r\nend=points[0][1]\r\nfor a,b in points:\r\n\tif a>end:\r\n\t\tans+=1\r\n\t\tend=b\r\nprint(ans)\r\n\t\t\r\n", "t=int(input())\nl=[]\nfor i in range(t):\n    l.append([int(i) for i in input().split()])\nl.sort(key = lambda x: x[1])\nlast=l[0][1]\ncount=1\nfor i in range(1,t):\n    if l[i][0]>last:\n        count+=1\n        last=l[i][1]\nprint(count)", "t=int(input())\nl=[]\nfor i in range(t):\n    l.append([int(i) for i in input().split()])\nl.sort(key = lambda x: x[1])\nlast=l[0][1]\ncount=1\nfor i in range(1,t):\n    if l[i][0]>last:\n        count+=1\n        last=l[i][1]\nprint(count)", "import sys\r\n\r\nN=int(sys.stdin.readline())\r\n\r\narr=[]\r\nfor i in range(N):\r\n\t[L,R]=[int(i) for i in sys.stdin.readline().split()]\r\n\tarr.append([R,L])\r\n\r\narr.sort()\r\nlast = arr[0][0]\r\ncount=1\r\n\r\nfor c in range(1,N):\r\n\tif(arr[c][1]>last):\r\n\t\tcount+=1\r\n\t\tlast=arr[c][0]\r\n\r\nprint(count)\r\n\r\n", "N = int(input())\r\nintervals = []\r\nfor i in range(N):\r\n    intervals.append(list(map(int, input().split()))[-1::-1])\r\n\r\nintervals.sort()\r\nmx = intervals[0][0]\r\ncount = 1\r\nfor i in range(1,N):\r\n    if intervals[i][1] > mx:\r\n        count += 1\r\n        mx = intervals[i][0]\r\nprint(count)\r\n", "# cook your dish here\nn=int(input())\nc=[]\nm=n\nwhile(n>0):\n    a,b=input().split()\n    a=int(a)\n    b=int(b)\n    c.append([a,b])\n    n=n-1\nc.sort()\nf=0\ns=1\ntotal=1\nwhile(f<m-1):\n    while(s<m):\n        if(c[f][1]<c[s][0]):\n            total=total+1\n            f=s\n            s=s+1\n        elif((c[f][1]>=c[s][0]) and (c[f][1]>=c[s][1])):\n            f=s\n            s=s+1\n        else:\n            s=s+1\n    f=f+1\n        \nprint(total)\n        \n            \n        \n    \n", "n = int(input())\nlst = [list(map(int,input().split())) for i in range(n)]\nlst.sort(key = lambda i: i[1])\nres = 1\nt = lst[0]\nfor i in range(1,n):\n    if lst[i][0] > t[1]:\n        res += 1\n        t = lst[i]\nprint(res)", "n = int(input())\nx = [list(map(int,input().split())) for i in range(n)]\nx.sort(key = lambda i: i[1])\nans = 1\nt = x[0]\nfor i in range(1,n):\n    if x[i][0] > t[1]:\n        ans += 1\n        t = x[i]\nprint(ans)", "import sys \ninput = sys.stdin.readline \n\nN=int(input())\narr=[]\nfor i in range(N):\n    k=list(map(int,input().split()))\n    arr.append(k)\narr.sort()\nend=arr[0][1]\ncount=1 \nfor j in range(1,len(arr)):\n    if(arr[j][0]<=end):\n        if(arr[j][1]<=end):\n            end=arr[j][1]\n        else:\n            pass \n    else:\n        count+=1 \n        end = arr[j][1]\nprint(count)", "\r\nimport collections\r\n\r\n\r\ndef solve(sets):\r\n    n = len(sets)\r\n    sets.sort(key=lambda x: x[0])\r\n\r\n    s, f = sets[0][0], sets[0][1]\r\n    ans = 1\r\n\r\n    for i in range(1, n):\r\n        if sets[i][0] <= f:\r\n            s = max(s, sets[i][0])\r\n            f = min(f, sets[i][1])\r\n        else:\r\n            ans += 1\r\n            s = sets[i][0]\r\n            f = sets[i][1]\r\n\r\n    return ans\r\n\r\n\r\nn = int(input().strip())\r\nsets = []\r\n# [n,m] = list(map(int, input().strip().split()))\r\n\r\nfor i in range(n):\r\n    sets.append(list(map(int, input().strip().split())))\r\n\r\nprint(solve(sets))\r\n", "#for _ in range(int(input())):\r\n#dt = {} for i in x: dt[i] = dt.get(i,0)+1\r\n#dt = {k:v for k,v in sorted(x.items(), key=lambda i: i[1])}\r\nipnl = lambda n: [int(input()) for _ in range(n)]\r\ninp = lambda :int(input())\r\nip = lambda :[int(w) for w in input().split()]\r\nmp = lambda :list(map(int,input().split()))\r\n\r\nn = inp()\r\nx = []\r\nfor i in range(n):\r\n    x.append([int(w) for w in input().split()])\r\nx.sort(key = lambda i:i[1])\r\nvisited = {}\r\nctr = 1\r\nt = x[0]\r\nvisited[0] = 1\r\nfor i in range(1,n):\r\n    if not visited.get(i,0):\r\n        visited[i] = 1\r\n        if x[i][0] > t[1]:\r\n            ctr += 1\r\n            t = x[i]\r\nprint(ctr)\r\n", "n = int(input())\r\n\r\nchu = []\r\nbs = []\r\n\r\nmi = -1\r\ncount = 0\r\n\r\nfor _ in range(n):\r\n\tx,k = map(int, input().split())\r\n\tchu.append([x,k])\r\n\r\nchu.sort()\r\n\r\nfor i in range(n):\r\n\tx = chu[i][0]\r\n\tk = chu[i][1]\r\n\r\n\tif x <= mi:\r\n\t\tmi = min(mi, k)\r\n\telse:\r\n\t\tcount += 1\r\n\t\tmi = k\r\n\r\n\t#print(bs,chu)\r\nprint(count)", "intput = lambda: [int(i) for i in input().split()]\n# Write your code here\nn = int(input())\nl = sorted([intput() for i in range(n)])\ni = res = 0\nwhile i < n:\n    k = l[i][1]\n    while i < n and k >= l[i][0]:\n        i += 1\n        if i < n and k > l[i][1]:\n            k = l[i][1]\n    res += 1\nprint(res)", "def main():\r\n\tfrom sys import stdin, stdout\r\n\trl = stdin.readline\r\n\r\n\tn = int(rl())\r\n\ta = [[int(x) for x in rl().split()] for _ in range(n)]\r\n\r\n\ta.sort()\r\n\ti = s = 0\r\n\twhile i < n:\r\n\t\tend = a[i][1]\r\n\t\twhile i < n and end >= a[i][0]:\r\n\t\t\ti += 1\r\n\t\t\tend = min(end, a[i][1]) if i < n else end\r\n\t\ts += 1\r\n\r\n\tstdout.write(str(s))\r\n\r\n\r\nmain()", "def main():\r\n\tfrom sys import stdin, stdout\r\n\trl = stdin.readline\r\n\r\n\tn = int(rl())\r\n\ta = [[int(x) for x in rl().split()] for _ in range(n)]\r\n\r\n\ta.sort()\r\n\ti = s = 0\r\n\twhile i < n:\r\n\t\tend = a[i][1]\r\n\t\twhile i < n and end >= a[i][0]:\r\n\t\t\ti += 1\r\n\t\t\tend = min(end, a[i][1]) if i < n else end\r\n\t\ts += 1\r\n\r\n\tstdout.write(str(s))\r\n\r\n\r\nmain()\r\n    \r\n", "from operator import itemgetter\n\nN = int(input())\nL = []\nfor n in range(N):\n    L.append([int(x) for x in input().split()])\nL.sort(key=itemgetter(1))\n# print(L)\n\ncnt = 0\nwhile L:\n    m = L[0][1]\n    L = [l for l in L if l[0] > m]\n    cnt += 1\n    # print(L)\nprint(cnt)\n        \n", "# cook your dish here\nn=int(input())\narr=[]\nfor i in range(n):\n    arr.append([int(i) for i in input().split()])\narr.sort()\nans=1\ni=0\np=arr[0][0]\nq=arr[0][1]\nwhile(i<n-1):\n    i+=1\n    if(arr[i][0]<=q):\n        q=min(q,arr[i][1])\n    else:\n        ans+=1 \n        q=arr[i][1]\nprint(ans)\n", "n= int(input())\r\nl=[]\r\n\r\nfor i in range(n):\r\n    l.append(list(map(int,input().split())))\r\n\r\nl.sort(key = lambda x: x[1])\r\ncount=1\r\nR = l[0][1]\r\nfor i in l:\r\n    if not(i[0]<= R<= i[1]):\r\n        R = i[1]\r\n        count+=1\r\n\r\nprint(count)\r\n", "n= int(input())\r\nl=[]\r\n\r\nfor i in range(n):\r\n    l.append(list(map(int,input().split())))\r\n\r\nl.sort(key = lambda x: x[1])\r\ncount=1\r\nlast = l[0][1]\r\nfor i in l:\r\n    if not(i[0]<= last<= i[1]):\r\n        last = i[1]\r\n        count+=1\r\nprint(count)\r\n\r\n\r\n", "n = int(input())\r\nlr = sorted(tuple(map(int, input().split())) for _ in range(n))\r\n\r\ni = 0\r\nc = 0\r\n\r\nwhile i < n:\r\n    x = lr[i][1]\r\n\r\n    while i < n and lr[i][0] <= x:\r\n        if lr[i][1] < x:\r\n            x = lr[i][1]\r\n\r\n        i += 1\r\n        \r\n    c += 1\r\n\r\nprint(c)\r\n", "from sys import stdin\r\nn = int(stdin.readline())\r\nsets = []\r\nfor i in range(n):\r\n    sets.append(tuple(map(int, stdin.readline().split())))\r\nsets.sort()\r\nans = 1\r\nlast_end = sets[0][1]\r\nfor i in range(1, len(sets)):\r\n    if last_end < sets[i][0]:\r\n        ans += 1\r\n        last_end = sets[i][1]\r\n    else:\r\n        last_end = min(last_end, sets[i][1])\r\nprint(ans)"]