["MOD = 998244353\n\nlist_size = 1000001\n\nf_list = [1] * list_size\nf_r_list = [1] * list_size\n\nfor i in range(list_size - 1):\n\tf_list[i + 1] = int((f_list[i] * (i + 2)) % MOD)\n\ndef power(n, x):\n\tif x == 1:\n\t\treturn n\n\telif x % 2 == 0:\n\t\treturn power(int((n * n) % MOD), int(x / 2))\n\telse:\n\t\treturn int((n * power(n, x - 1)) % MOD)\n\nf_r_list[-1] = power(f_list[-1], MOD - 2)\n\nfor i in range(2, list_size + 1):\n\tf_r_list[-i] = int((f_r_list[-i + 1] * (list_size + 2 - i)) % MOD)\n\ndef comb(n, r):\n\tif n < r:\n\t\treturn 0\n\telif n == 0 or r == 0 or n == r:\n\t\treturn 1\n\telse:\n\t\treturn (((f_list[n - 1] * f_r_list[n - r - 1]) % MOD) * f_r_list[r - 1]) % MOD \n\nn = int(input())\nans = f_list[n-1]\nfor i in range(2, n):\n\tans = (ans + comb(n, i) * (f_list[i-1] - 1) * f_list[n-i-1]) % MOD\nprint(ans)", "import math\nn = int(input())\n\nmod = 998244353\n\nF = [1, 1]\nf = 1\nfor i in range(2,n+1):\n    f*=i\n    f%=mod\n    F.append(f)\n\nret = 1\nfor i in range(1, n+1):\n    ret=ret*i-i+F[i]\n    ret%=mod\n\nprint(ret)\n", "n = int(input())\nmass = [n]\nmass1 = [1]\nfor i in range(2, n + 1):\n    mass1.append((mass1[-1] * i) % 998244353)\nfor i in range(n - 1, 0, -1):\n    mass.append((mass[-1] * i) % 998244353)\nsumm = mass1[-1]\nmass.reverse()\nfor i in range(n - 1):\n    summ += mass[i + 1] * (mass1[i] - 1)\n    summ % 998244353\nprint(summ % 998244353)", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[35]:\n\n#import time\n\nn=int(input())\n\n\n# In[36]:\n\n\n# In[37]:\n\n\nfac=1\n#t1 = time.time()\n\nfor i in range(2,n+1):\n    fac=fac*i%998244353\n\n#t2 = time.time()\n\n\ntotal=(n-1)*fac%998244353\ndsum=0\ndiff=1\nfor i in range(0,n-2):\n    \n    diff=diff*(n-i)%998244353\n    #print(diff)    \n    dsum+=diff%998244353    \n\nanswer=(total-dsum)%998244353\n# In[38]:\n\n#t3 = time.time()\n\n#print(t3-t2,t2-t1)\n\nif n==1:\n    print(1)\nelse:    \n    print(answer)\n\n\n# In[31]:\n", "n = int(input())\nans = 1\nfrac = 1\nm = 998244353\nfor i in range(2, n + 1):\n    ans = (((ans + frac - 1) % m) * i) % m\n    frac = (frac * i) % m\nprint(ans)", "import sys\nimport math\n\n\nMAX = 1000010\nMOD = 998244353 \n\n\ndef main():\n    ar = [1 for _ in range(MAX)]\n    fact = [1 for _ in range(MAX)]\n    \n    for n in range(2, MAX):\n        fact[n] = fact[n - 1] * n % MOD\n    \n    for n in range(2, MAX):\n        ar[n] = ((ar[n - 1] - 1) * n + fact[n]) % MOD\n    \n    n = int(input())\n    print(ar[n])\n    \n    \ndef __starting_point():\n\tmain() \n\n__starting_point()", "n = int(input())\nlast = n - 1\nfor i in range(3, n + 2):\n    last = (last * (i - 1) - 1) % 998244353\nprint(last + 1)", "res = 0\nn = int(input())\nf = 1\ns = 0\nfor i in range(n, 1, -1):\n    f = (f * i) % 998244353\n    s = (s + f) % 998244353\nprint((f * n - s) % 998244353) \n", "P = 998244353\n\nn = int(input().strip())\n\nsub_sum = 0\ncurr_num = 1\nfor idx in range(n-1):\n    curr_num = ((curr_num * (n - idx)) % P)\n    sub_sum = ((sub_sum + curr_num) % P)\n\nadd_num = ((curr_num * n) % P)\n\nfinal = ((add_num - sub_sum) % P)\nprint(final)", "t = int(input())\nres = t\ni = 2\nwhile(i<=t):\n    res = (res-1)*i%998244353  \n    i+=1\nprint(res)", "n = int(input())\nM = 998244353\n\nans = 1\n\nfac = 1\nphi = 1\n\nfor q in range(n, 2, -1):\n\tfac *= q\n\tfac %= M\n\tphi += fac\n\tphi %= M\n\nfac *= 2\nfac %= M\n\nans += fac*(n-1)\nans %= M\n\nans += M - phi\nans %= M\n\nif n == 1:\n\tans = 1\n\nprint(ans)", "n = int(input())\nmod = 998244353\nrev = []\ncur = 1\ns = 0\nfor i in range(n, 0, -1):\n\tcur *= i\n\ttmp = cur - s\n\ts += tmp\n\ts %= mod\n\tcur %= mod\n\trev.append(tmp % mod)\n# print(rev)\nans = 1\nfor i in range(1, n + 1):\n\tans *= i\n\tans %= mod\nfor i in range(1, n - 1):\n\tans += i * rev[i]\n\tans %= mod\nprint(ans)", "n = int(input())\ndd = 998244353\ndp = [(1,0), (1, 0), (2, 0), (6, 3)]\nif n == 1:\n    print(1)\n    return\nelif n == 2:\n    print(2)\n    return\n\nfor i in range(4, n+1):\n    np = (dp[-1][0]*i, i*(dp[-1][0]-1) + i*(dp[-1][1]))\n    np = (np[0] % dd, np[1] % dd)\n    dp.append(np)\n\nprint((dp[-1][0] + dp[-1][1]) % dd)\n\n", "# -*- coding: utf-8 -*-\n\"\"\"\nSpyder Editor\n\nThis is a temporary script file.\n\"\"\"\nmod=998244353\nn=int(input())\na=[]\ni=1\na.append(0)\na.append(n)\nans=n\nfor i in range(1,n):\n    ans=((ans%mod)*(n-i))%mod\n    a.append(ans)\n#print(*a)\nans=0\nfor i in a:\n    ans=(ans%mod+a[-1]%mod-i%mod)%mod\nprint(ans)", "def factorial_mod(n, mod):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = (ans * i) % mod\n    return ans\n\ndef solve(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    mod = 998244353\n    len_metaseq = factorial_mod(n, mod)\n    ans = (\n        ((n - 1) + (n - 2)) *\n        len_metaseq *\n        499122177 # modinv(2, mod)\n    ) % mod\n    error = 0\n    for curr in range(4, n + 1):\n        error = ((error + 1) * curr) % mod\n    return (ans - error) % mod\n\nn = int(input())\nprint(solve(n))", "MOD = 998244353\nn = int(input())\nif n < 3:\n    print(n)\nelse:\n    mxm = 9\n    m = 3\n    mf = 6\n    for _ in range(n - 3):\n        m += 1\n        mxm = (mxm + 1) * m\n        mxm %= MOD\n        mf *= m\n        mf %= MOD\n    print((n * mf - mxm) % MOD)\n", "MOD = 998244353\nI = lambda:list(map(int,input().split()))\n\nn, = I()\n\ns = [1, 2]\nfor i in range(3, 10**6+1):\n    s.append(((s[-1] + 1)*i)%MOD)\n\nf = 1\nl = []\nfor i in range(1, 10**6+1):\n    l.append((f*i)%MOD)\n    f = (f*(i+1))%MOD\n    # print(f)\n# print(l)\n# print(s)\nn -= 1\nif n == 0:\n    print(1)\n    return\nprint((l[n] - s[n])%MOD)\n# print()\n", "m = 998244353\nn = int(input())\nf = [0 for i in range(n+1)]\nff = [0 for i in range(n+1)]\nf[1] = 1\nff[n] = n\nfor i in range(2,n+1):\n    f[i] = (f[i-1]%m * i%m) %m\n\nfor i in range(n-1,1,-1):\n    ff[i] =(ff[i+1]%m * i%m) %m\n\nans = (f[n]%m * n%m)%m\n\nfor i in range(2,n+1,1):\n    ans = (ans%m + (-1 * ff[i]%m)%m)%m\nprint(ans)\n\n", "def read_nums():\n    return [int(x) for x in input().split()]\n\n\ndef main():\n    n, = read_nums()\n    cur_res = 1\n    factorial = 1\n    for i in range(2, n+1):\n        factorial = (factorial * i) % 998244353\n        cur_res = ((cur_res - 1) * i + factorial) % 998244353\n    print(cur_res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "MOD = 998244353\nfac=[1]*1000007\nfor i in range(2,1000001):\n\tfac[i]=fac[i-1]*i\n\tfac[i]%=MOD\ndp=[0]*1000007\nfor i in range(3, 1000001):\n\tdp[i]=(dp[i-1]+fac[i-1]-1)*i\n\tdp[i]%=MOD\n#print(dp[1:11])\n\nn=int(input())\n\nans=(fac[n]+dp[n])%MOD\nprint(ans)\n", "n = int(input())\n\nfact = [0,1]\nfor i in range(2,n+1):\n    fact.append((fact[-1]*i)% 998244353)\n\nans = [0,1]\n\nfor i in range(2,n+1):\n    ans.append((fact[i]+i*ans[-1]-i)%998244353)\n    \nprint(ans[-1])", "def iterative_egcd(a, b):\n    x, y, u, v = 0, 1, 1, 0\n    while a != 0:\n        q, r = b // a, b % a;\n        m, n = x - u * q, y - v * q  # use x//y for floor \"floor division\"\n        b, a, x, y, u, v = a, r, u, v, m, n\n    return b, x, y\n\n\ndef modinv(a, m):\n    g, x, y = iterative_egcd(a, m)\n    if g != 1:\n        return None\n    else:\n        return x % m\n\ndef factorialMod(n, modulus):\n    ans=1\n    if n <= modulus//2:\n        #calculate the factorial normally (right argument of range() is exclusive)\n        for i in range(1,n+1):\n            ans = (ans * i) % modulus\n    else:\n        #Fancypants method for large n\n        for i in range(1,modulus-n):\n            ans = (ans * i) % modulus\n        ans = modinv(ans, modulus)\n\n        #Since m is an odd-prime, (-1)^(m-n) = -1 if n is even, +1 if n is odd\n        if n % 2 == 0:\n            ans = -1*ans + modulus\n    return ans % modulus\n\n\nn = int(input())\nif n == 1:\n    print(1)\nelse:\n    m = 998244353\n    ans = ((n - 1) * factorialMod(n, m)) % m\n    k = 0\n    for i in range(3, n + 1):\n        k = ((k + 1) * i) % m\n    print((ans - k) % m)", "M = 998244353\n\n\ndef fact(n):\n    ans = 1\n    for i in range(2, n + 1):\n        ans *= i\n        ans %= M\n    return ans\n\n\nn = int(input())\n\n\nx = fact(n)\nans = x - n\nk = n\nfor i in range(1, n + 1):\n    ans += x - k * (n - i)\n    ans %= M\n    k *= (n - i)\n    k %= M\nprint(ans)\n", "n = int(input())\n\nM = 998244353\nf = n\ns = n\nfor i in range(1, n):\n    f = f * (n - i)\n    x = n - i - 1\n    y = (f * x) // (x + 1)\n    s += (i + 1) * y\n    s %= M\n    f %= M\nprint(s % M)\n"]