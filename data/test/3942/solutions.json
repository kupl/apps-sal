["s = input()\nlast = s.rfind('#')\ndif = s.count('(')-s.count(')')-s.count('#')\ntry:\n    assert dif >= 0\n    lev = 0\n    out = []\n    for i in range(len(s)):\n        c = s[i]\n        if c == '(': lev += 1\n        elif c == ')':\n            lev -= 1\n            assert lev >= 0\n        elif c == '#':\n            lev -= 1\n            if i == last:\n                out.append(dif+1)\n                lev -= dif\n            else:\n                out.append(1)\n            assert lev >= 0\n    assert lev == 0\n    for x in out: print(x)\nexcept AssertionError:\n    print(-1)\n    \n", "s = input()\nans = []\ncount = 0\nlast_pos = s.rfind('#')\nfor i, c in enumerate(s):\n    if c == '(':\n        count += 1\n    elif c == ')':\n        count -= 1\n    elif c == '#' and i == last_pos:\n        num = max(1, s.count('(') * 2 - len(s) + 1)\n        count -= num\n        ans.append(num)\n    else:\n        count -= 1\n        ans.append(1)\n    if count < 0:\n        print(-1)\n        break\nelse:\n    for t in ans:\n        print(t)\n    \n\n", "s = input()\nans = []\ncount = 0\nlast_pos = s.rfind('#')\nfor i, c in enumerate(s):\n    if c == '(':\n        count += 1\n    elif c == ')':\n        count -= 1\n    elif c == '#' and i == last_pos:\n        num = max(1, s.count('(') * 2 - len(s) + 1)\n        count -= num\n        ans.append(num)\n    else:\n        count -= 1\n        ans.append(1)\n    if count < 0:\n        print(-1)\n        break\nelse:\n    for t in ans:\n        print(t)\n", "s=input()\nlis=[0 for i in range(len(s))]\nlis1=[]\nfor i in range(len(s)):\n    if s[i]=='(':\n        lis[i]=1\n    if s[i]==')':\n        lis[i]=-1\n    if s[i]==\"#\":\n        lis[i]=0\n        lis1.append(i)\n\nif sum(lis)<=0:\n    print(-1)\nelse:\n    n=sum(lis)\n    if n<len(lis1):\n        print(-1)\n    else:\n        for i in range(len(lis1)-1):\n            lis[lis1[i]]=-1\n        lis[lis1[len(lis1)-1]]=-(n+1-len(lis1))\n        lis2=[lis[0]]\n        c=1\n        if lis[0]<0:\n            c=0\n        else:\n            for i in range(1,len(lis)):\n                lis2.append(lis[i]+lis2[i-1])\n                if lis2[i]<0:\n                    c=0\n                    break\n        if c==0:\n            print(-1)\n        else:\n            for i in range(len(lis1)-1):\n                print(1)\n            print(n+1-len(lis1))\n                \n                \n                \n    \n            \n", "s = input()\nans = []\ncount = 0\nlast_pos = s.rfind('#')\nfor i, c in enumerate(s):\n    if c == '(':\n        count += 1\n    elif c == ')':\n        count -= 1\n    elif c == '#' and i == last_pos:\n        num = max(1, s.count('(') * 2 - len(s) + 1)\n        count -= num\n        ans.append(num)\n    else:\n        count -= 1\n        ans.append(1)\n    if count < 0:\n        print(-1)\n        break\nelse:\n    for t in ans:\n        print(t)\n    \n", "a = input()\nneed = a.count('(') - a.count(')')\nhashs = a.count('#')\n\nlast = need - (hashs - 1)\nif last <= 0:\n    print(-1)\n    quit()\nhashes = [i for i in range(len(a)) if a[i] == '#']\n\ncount = 0\nfor i in range(len(a)):\n    if a[i] == '(':\n        count += 1\n    if a[i] == ')':\n        count -= 1\n    if a[i] == '#':\n        if i == hashes[-1]:\n            count -= last\n        else:\n            count -= 1\n    if count < 0:\n        print(-1)\n        quit()\n\nfor i in range(hashs-1):\n    print(1)\nprint(last)", "import sys\n\ns = str( input() )\n\ncnt = 0\nans = [0] * len( s )\n\nfor i in range( len( s ) ):\n    if( s[i] == '(' ):\n        cnt += 1\n    else:\n        cnt -= 1\n    if( s[i] == '#' ):\n        ans[i] = 1\n    if( cnt < 0 ):\n        print( -1 )\n        return\n\ni = len( s ) - 1\n\nwhile( s[i] != '#' ):\n    i -= 1\n    \nans[i] = cnt + 1\ncnt = 0\n\nfor i in range( len( s ) ):\n    if( s[i] == '(' ):\n        cnt += 1\n    elif( s[i] == ')' ):\n        cnt -= 1\n    else:\n        cnt -= ans[i]\n        \n    if( cnt < 0 ):\n        print( -1 )\n        return\n    \nfor i in range( len( s ) ):\n    if( s[i] == '#' ):\n        print( ans[i] )\n", "#!/usr/bin/env python3\n\ns = input()\ncount = 0\nres = []\nlast = s.rfind(\"#\")\n\nfor i, c in enumerate(s):\n    if c == '(':\n        count += 1\n    elif c == ')':\n        count -= 1\n    else:\n        if i < last:\n            res.append(1)\n            count -= 1\n        else:\n            num = max(1, 1 + s.count(\"(\") - s.count(\"#\") - s.count(\")\"))\n            res.append(num)\n            count -= num\n    if count < 0:\n        res = []\n        print(-1)\n        break\nfor i in res:\n    print(i)\n", "def f(t):\n    n = t.count('#') - 1\n    k = t.rfind('#') + 1\n    t = t.replace('#', ')')\n    t = [2 * ord(i) - 81 for i in t]\n\n    a = b = c = 0\n    for i in t[k: ]:\n        b -= i\n        c -= i\n        if c < 0: c = 0\n    if c > 0: return -1\n    for i in t[: k]:\n        a -= i\n        if a < 0: return -1\n\n    if b + a < 0: return -1\n    return '1\\n' * n + str(b + a + 1)\n\nprint(f(input()))", "c = input()  # \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ncount_l = 0  # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (\ncount_r = 0  # \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd )\nh = c.count('#')\nans = [1]*h\nn = len(c)\n\nflag = 1\na = [0]*(n+1)\n\nfor i in range(n):\n    if c[i] == '(':\n        a[i+1] = a[i]+1\n    else:\n        a[i+1] = a[i]-1\n    if a[i+1] < 0:\n        flag = 0\n        break\n\nif flag == 0:\n    print(-1)\nelse:\n    ans[h-1] += a[n]\n    pos = 0\n    flag = 1\n    \n    for i in range(n):\n        if c[i] == '(':\n            count_l += 1\n        elif c[i] == ')':\n            count_r += 1\n        else:\n            count_r += ans[pos]\n            pos += 1\n        if count_r > count_l:\n            flag = 0\n            break\n    \n    if flag:\n        for i in range(h):\n            print(ans[i])\n    else:\n        print(-1)", "s = input()\nn = len(s)\nptr = n - 1\nbalance = 0\nwhile s[ptr] != '#':\n\tif s[ptr] == ')':\n\t\tbalance += 1\n\telse:\n\t\tbalance -= 1\n\tptr -= 1\n\tif balance < 0:\n\t\tprint(-1)\n\t\treturn\nsharps = s.count('#')\nbalance = 0\nfor i in range(ptr):\n\tif s[i] == '(':\n\t\tbalance += 1\n\telse:\n\t\tbalance -= 1\n\tif balance < 0:\n\t\tprint(-1)\n\t\treturn\nans = s.count('(') - s.count(')') - (sharps - 1)\nif ans <= 0:\n\tprint(-1)\n\treturn\nfor i in range(sharps - 1):\n\tprint(1)\nprint(s.count('(') - s.count(')') - (sharps - 1))\n", "import sys\nst = input()\na = 0\nb = 0\nlast = 0\nv = []\nfor s in st:\n\tif s == \"(\":\n\t\ta += 1\n\telif s == \")\":\n\t\ta -= 1\n\telif s == \"#\":\n\t\ta -= 1\n\t\tv.append(1)\n\tif a < 0:\n\t\tprint(-1)\n\t\treturn\n\nv[-1] += a\ni=0\na = 0\nfor s in st:\n\tif s == \"(\":\n\t\ta += 1\n\telif s == \")\":\n\t\ta -= 1\n\telif s == \"#\":\n\t\ta -= v[i]\n\t\ti += 1\n\tif a < 0:\n\t\tprint(-1)\n\t\treturn\nif a != 0:\n\tprint(-1)\nelse:\n\tfor vs in v:\n\t\tprint(vs)\n\n\n", "'''\n\n@author: linhz\n'''\n\nimport sys\n\ndef __starting_point():\n    s = input()\n    leftCount = 0\n    ansList = []\n    ansFlag = True\n    sharpCount = 0\n    for c in s:\n        if c == '(':\n            leftCount += 1\n        elif c == ')':\n            leftCount -= 1\n            if leftCount < 0:\n                ansFlag = False\n        elif c == '#':\n            leftCount -= 1\n            if leftCount < 0:\n                ansFlag = False\n            else:\n                ansList.append(1)\n                sharpCount += 1\n        else:\n            sys.stderr.write(\"Unexpected character:%c\" % (c))\n    if ansFlag:\n        ansList[-1] += leftCount\n        leftCount = 0\n        sharpCount = 0\n        for c in s:\n            if c == '(':\n                leftCount += 1\n            elif c == ')':\n                leftCount -= 1\n                if leftCount < 0:\n                    ansFlag = False\n            elif c == '#':\n                leftCount -= ansList[sharpCount]\n                sharpCount+=1\n                if leftCount < 0:\n                    ansFlag = False\n            else:\n                sys.stderr.write(\"Unexpected character:%c\" % (c))\n        if ansFlag:\n            for i in ansList:\n                print(i)\n        else:\n            print(-1)\n    else:\n        print(-1)\n\n__starting_point()", "s=input()\na,b,c='(',')','#'\ns1=len(s)\na1,b1,c1,r=0,0,0,1\nif(s[-1]==a):\n    print(-1)\nelse:\n    for i in range(s1):\n        if(s[i]==a):\n            a1+=1\n        if(s[i]==b):\n            b1+=1\n        if(s[i]==c):\n            c1+=1\n        if(b1+c1>a1):\n            r=0\n            break\n    if(r==0):\n        print(-1)\n    else:\n        m=0\n        for i in range(s1):\n            if(s[i]==c):\n                break\n            if(s[i]==a):\n                m+=1\n            if(s[i]==b):\n                m-=1\n        k=a1-b1\n        for i in range(c1-1):\n            print(1)\n        if(k>=c1):\n            if(c1==1):\n                if(k-c1+1>m):\n                    print(-1)\n                else:\n                    print(k-c1+1)\n            else:\n                print(k-c1+1)\n\n\n\n\n", "s=input(); a=0; b=[]\nfor x in s:\n    if x == \"(\":\n        a+=1\n    else:\n        if x==\")\":\n            a-=1\n        else:\n            a -= 1\n            b.append(1)\n        if a < 0:\n            print(-1)\n            return\nb[-1]+=a;\n\na=0; i=0\nfor x in s:\n    if x==\"(\":\n        a += 1\n    else:\n        if x==\")\":\n            a-=1\n        else:\n            a-=b[i]; i+=1\n        if a<0:\n            print(-1)\n            return\nif a != 0:\n    print(-1)\nelse:\n    for x in b:\n        print(x)\n    \n\n\n    \n", "#!/usr/bin/env python3\nimport collections, itertools, functools, math\n\ndef valid(s, r):\n    r = iter(r)\n    op = 0\n    cl = 0\n    for c in s:\n        if c == '(':\n            op += 1\n        elif c == ')':\n            cl += 1\n        elif c == '#':\n            cl += next(r)\n        if cl > op:\n            return False\n    return True\n\ndef solve(s):\n    FAIL = [-1]\n    op = s.count('(')\n    cl = s.count(')')\n    h = s.count('#')\n\n    if cl + h > op:\n        return FAIL\n\n    r = [1]*h\n    r[-1] += (op-cl-h)\n\n    if not valid(s, r):\n        return FAIL\n    return r\n\ndef __starting_point():\n    for n in solve(input()):\n        print(n)\n\n\n__starting_point()", "# 494A\n# \u03b8(|s|) time\n# \u03b8(|s|) space\n\n__author__ = 'artyom'\n\n\n# SOLUTION\n\ndef main():\n    s = read(0)\n    n = len(s)\n    ex = 2 * s.count('(') - n\n    if ex < 0:\n        return -1\n    res = []\n    l = i = 0\n    last = s.rfind('#')\n    for i in range(n):\n        c = s[i]\n        if c == '(':\n            l += 1\n        elif c == ')':\n            l -= 1\n        else:\n            if l == 0:\n                return -1\n            k = 1 if i < last else 1 + ex\n            res.append(k)\n            l -= k\n        if l < 0:\n            return -1\n    return res\n\n\n# HELPERS\n\ndef read(mode=1, size=None):\n    # 0: String\n    # 1: Integer\n    # 2: List of strings\n    # 3: List of integers\n    # 4: Matrix of integers\n    if mode == 0: return input().strip()\n    if mode == 1: return int(input().strip())\n    if mode == 2: return input().strip().split()\n    if mode == 3: return list(map(int, input().strip().split()))\n    a = []\n    for _ in range(size):\n        a.append(read(3))\n    return a\n\n\ndef write(s=\"\\n\"):\n    if s is None: s = ''\n    if isinstance(s, tuple) or isinstance(s, list): s = '\\n'.join(map(str, s))\n    s = str(s)\n    print(s, end=\"\\n\")\n\n\nwrite(main())", "s = input().replace(\"()\", \"\")\nt = s.count(\"(\") - s.count(\")\") - s.count(\"#\")\nif t < 0 or s.index(\"#\") < s.index(\"(\"): \n  print(-1)\n  quit()\nl = [1]*s.count(\"#\")\nl[-1] += t\ni = [k for k, l in enumerate(s) if l == \"#\"]\na, b = 0, 0\nfor x in range(len(s)):\n  if s[x] == \"(\":\n    a += 1\n  elif s[x] == \")\":\n    b += 1\n  elif s[x] == \"#\" and x != i[-1]:\n    b += 1\n  elif s[x] == \"#\":\n    b += t + 1\n  if a < b:\n    print(-1)\n    quit()\n  # print(a, b, s)\nif a != b:\n  print(-1)\nelse:\n  print(\"\\n\".join(map(str, l)))\n      \n        \n", "import sys\nst = input()\na = 0\nb = 0\nlast = 0\nv = []\nfor s in st:\n\tif s == \"(\":\n\t\ta += 1\n\telif s == \")\":\n\t\ta -= 1\n\telif s == \"#\":\n\t\ta -= 1\n\t\tv.append(1)\n\tif a < 0:\n\t\tprint(-1)\n\t\treturn\n\nv[-1] += a\ni=0\na = 0\nfor s in st:\n\tif s == \"(\":\n\t\ta += 1\n\telif s == \")\":\n\t\ta -= 1\n\telif s == \"#\":\n\t\ta -= v[i]\n\t\ti += 1\n\tif a < 0:\n\t\tprint(-1)\n\t\treturn\nif a != 0:\n\tprint(-1)\nelse:\n\tfor vs in v:\n\t\tprint(vs)\n\n\n\n\n\n\n# Made By Mostafa_Khaled\n", "s=input()\nw=s.rindex(\"#\")\nq=0\n\nfor i in range(len(s)-1,w,-1) :\n    if s[i]==\"(\" :\n        q+=1\n    else :\n        q-=1\n    if q>0 :\n        print(-1)\n        return\nd=0\nzz=[]\nfor i in range(w) :\n    if s[i]==\"(\" :\n        d+=1\n    elif s[i]==\")\" :\n        d-=1\n    else :\n        d-=1\n        zz.append(1)\n    if d<0 :\n        print(-1)\n        return\ny=q+d\nif y<=0 :\n    print(-1)\nelse :\n    zz.append(y)\n    print(\"\\n\".join(map(str,zz)))\n        \n    \n", "def __starting_point():\n    s = input()\n    ans = []\n    cnt, key, tmp, new = 0, True, 0, 0\n    for e in s:\n        if e == '(':\n            cnt += 1\n            new += 1\n        elif e == ')':\n            cnt -= 1\n            if new > 0:\n                new -= 1\n            if cnt < 0:\n                key = False\n                break\n        else:\n            if cnt == 0:\n                key = False\n                break\n            new = 0\n            ans.append(1)\n            cnt -= 1\n            tmp = cnt\n    if not key or tmp < cnt or new > 0:\n        print(-1)\n    else:\n        ans[-1] += cnt\n        for e in ans:\n            print(e)\n\n\n__starting_point()", "def needs_trailing(segment):\n    open_parens = 0\n    for i in segment:\n        if i == '(':\n            open_parens += 1\n        elif i == ')' or i == '#':\n            open_parens -= 1\n\n        if open_parens < 0:\n            return -1\n    return open_parens\n\n\nline = input()\nextra_parens = needs_trailing(line)\nlast_segment_needs = needs_trailing(line.split('#')[-1])\n\nif extra_parens < 0:  # too many ) already in string\n    print(-1)\nelif last_segment_needs > 0:  # end block isn't beautiful, can't fix\n    print(-1)\nelse:\n    outputs = [1 for i in range(line.count('#'))]\n    outputs[-1] += needs_trailing(line)  # if valid, add all extras to the last space\n    new_str = line.rpartition('#')[0].replace('#', ')') + outputs[-1] * ')' + line.rpartition('#')[-1]\n    if needs_trailing(new_str) != 0:\n        print(-1)\n    else:\n        for output in outputs:\n            print(output)\n\n", "s = input()\nret = [None] * len(s)\nbal = [None] * len(s)\nb = 0\nlast = None\nfor i, c in enumerate(s):\n    if c == '(':\n        b += 1\n    elif c == ')':\n        b -= 1\n    else:\n        ret[i] = 1\n        b -= 1\n        last = i\n    if b < 0:\n        print(-1)\n        return\n    bal[i] = b\nrem = bal[-1]\nret[last] += rem\nfor i in range(last, len(bal)):\n    bal[i] -= rem\nprint('\\n'.join(map(str, filter(lambda x: x, ret))) if min(bal) >= 0 else -1)"]