["n=int(input())\nvec=list(map(int,input().split()))\nal=[]\notrez=[]\nfor x in vec:\n    if len(al)==0:\n        al.append(x)\n    elif(x<=al[-1]):\n        otrez.append(al)\n        al=[x]\n    else:\n        al.append(x)\notrez.append(al)\nmaxx=0\nif(len(otrez)!=1):\n    for i in range(0,len(otrez)-1):\n        if(len(otrez[i])==1)or(len(otrez[i+1])==1):\n            maxot=len(otrez[i])+len(otrez[i+1])\n        elif (otrez[i+1][0]-otrez[i][-2])>1 or (otrez[i+1][1]-otrez[i][-1])>1:\n            maxot=len(otrez[i])+len(otrez[i+1])\n        else:\n            maxot=max([len(otrez[i]),len(otrez[i+1])])+1\n        if(maxot>maxx):\n            maxx=maxot\n    print(maxx)\nelse:\n    print(len(otrez[0]))", "\nn=int(input())\na=input().split(' ')\na=[int (a) for a in a]\nb=[-1 for b in range(0,n)]\n\nnow=0\n\nwhile now<n:\n    start=now\n    while (now<n-1)and(a[now]<a[now+1]):\n        now+=1\n    while start<=now:\n        b[start]=now\n        start+=1\n\n    now+=1\n    start=now\n\nans=0\n\nfor i in range(0,n):\n    if b[i]==n-1:\n        ans=max(ans,b[i]-i+1)\n    elif b[i]==n-2:\n        ans=max(ans,b[i]-i+2)\n    elif a[b[i]+2]-a[b[i]]>1:\n        ans=max(ans,b[b[i]+2]-i+1)\n    else:\n        ans=max(ans,b[i]-i+2)\n        if b[i]==0 or a[b[i]+1]-a[b[i]-1]>1:\n            ans=max(ans,b[b[i]+1]-i+1)\n    if i!=0 and n!=1 :\n        ans=max(ans,b[i]-i+2)\nprint (ans)\n\n\n\n", "import sys\n#Length of the sequence\nsequenceLength = int(sys.stdin.readline())\n#populate sequence\nsequence = list(map(int, sys.stdin.readline().split()))\n#var for answer\nans = 0\n#instantiate lists with 1's\nleftList = [1] * sequenceLength\nrightlist = [1] * sequenceLength\n#create the left to right list of increasing\nfor i in range(1, sequenceLength):\n    #if the last number is lesser\n    if sequence[i - 1] < sequence[i]:\n        #increment this number's count\n        leftList[i] += leftList[i-1]\n    #we are finding subseq's as we go, keep track of the biggest\n    ans = max(ans, leftList[i])\n\n#if the subseq isn't the size of the full array\n#we can change a number before or after to fit\nif ans < sequenceLength:\n     ans += 1\n\n#iterate from right to left, checking for decreasing\nfor i in range(sequenceLength - 2, 0, -1):\n    #if it is decreasing increment\n    if sequence[i + 1] > sequence[i]:\n        rightlist[i] += rightlist[i + 1]\n\n#print(leftList)\n#print(rightlist)\n#Go through the list from 1 to end\nfor i in range(1, sequenceLength - 1):\n    #If there is a value between seq[i+1] and seq[i-1]\n    if sequence[i+1] - sequence[i-1] >= 2:\n        #if greater than last answer, set\n        ans = max(ans, leftList[i - 1] + 1 + rightlist[i + 1])\n\nprint(ans)", "n = int(input())\nt = list(map(int, input().split()))\nt.append(0)\np = [0] * (n + 1)\nfor i in range(n - 1):\n    p[i + 1] = p[i] + 1 if t[i + 1] > t[i] else 0\ns = max(p) + 2\nif s >= n: print(n)\nelse:\n    i = 1\n    if p[i] == 0:\n        if t[i + 1] > t[i - 1] + 1:\n            d = p[i - 1] - 1\n            i += 1\n            while p[i]: i += 1\n            s = max(s, d + p[i - 1] + 3)\n        else: i += 1\n    else: i += 1\n    while i < n - 1:\n        if p[i] == 0:\n            if t[i] > t[i - 2] + 1: d = p[i - 2]\n            elif t[i + 1] > t[i - 1] + 1: d = p[i - 1] - 1\n            else:\n                i += 1\n                continue\n            i += 1\n            while p[i]: i += 1\n            s = max(s, d + p[i - 1] + 3)\n        else: i += 1\n    print(s)", "#input\nn=int(input())\nalist=[int(x) for x in input().split()]\n\n#variables\nmaximum=2\nl=[1]*n\nr=l[:]\n\n#main\nif n<3:\n\tprint(n)\n\tquit()\n\nfor i in range(0,n-1):\n\tif alist[i]<alist[i+1]:\n\t\tl[i+1]+=l[i]\n\tif alist[n-1-i]>alist[n-2-i]:\n\t\tr[n-2-i]+=r[n-1-i]\n\nfor i in range(1,n-1):\n\tif alist[i-1]+1<alist[i+1]:\n\t\tmaximum=max(maximum,l[i-1]+r[i+1]+1)\n\telse:\n\t\tmaximum=max(maximum,l[i-1]+1,r[i+1]+1)\n\nmaximum=max(maximum,r[1]+1,l[n-2]+1)\n\nprint(maximum)", "ints = int(input())\nnums = list(map(int, input().split(' ')))\n\nif ints == 1:\n    print(1)\nelif ints == 2:\n    print(2)\nelse:        \n    left = [1]*ints\n    right = [1]*ints\n\n    #how many you can extend to the left\n    #[1, 1, 2, 1, 2, 3]\n    #the 3 can go to [1, 2, 3]\n    #both 2s can go to [1, 2]\n    for i in range(ints-1):\n        if nums[i+1] > nums[i]:\n            left[i+1] += left[i]\n\n    #how many you can extend to the right\n    #the 2nd 1 can go to [1, 2]\n    #the 3rd 1 can go to [1, 2, 3]\n    nums.reverse()\n    for i in range(ints-1):\n        if nums[i+1] < nums[i]:\n            right[i+1] += right[i]\n\n    nums.reverse()\n    right.reverse()\n\n    maximum = 2\n    for i in range(1, ints-1):\n        if nums[i-1]+1 < nums[i+1]:\n            maximum = max(maximum, left[i-1] + right[i+1] + 1)\n        else:\n            maximum = max(maximum, max(left[i-1]+1, right[i+1]+1))\n\n    maximum=max(maximum, left[ints-2]+1, right[1]+1)\n    print(maximum)\n", "n = int(input())\na = list(map(int, input().split())) + [0]\ns, sb, val = [], 0, 0\nfor i in range(1, n + 1):\n    if a[i] <= a[i - 1]:\n        s.append((sb, i - 1))\n        val = max(val, i - sb)\n        sb = i\nval += len(s) > 1\nfor i in range(1, len(s)):\n    c = s[i][0]\n    if c in range(2, n - 1) and max(a[c] - a[c - 2], a[c + 1] - a[c - 1]) >= 2:\n        val = max(val, s[i][1] - s[i - 1][0] + 1)\nprint(val)\n", "def main():\n\tn = int(input())\n\t\n\ta = [10 ** 10] + list(map(int, input().split())) + [-(10 ** 10)]\n\tif n == 1:\n\t\tprint(1)\n\t\treturn\n\tb = [0] * (n + 10)\n\tc = [0] * (n + 10)\n\t#print(a, b, c)\n\ti = 1\n\twhile i <= n:\n\t\tfor j in range(i, n+1):\n\t\t\tif a[j] >= a[j+1]:\n\t\t\t\tbreak\n\t\tfor k in range(i, j+1):\n\t\t\tb[k] = i\n\t\t\tc[k] = j\n\t\ti = j + 1\n\t#print(c,b)\n\tans = max(c[2], n - b[n-1] + 1, c[1], n - b[n] + 1)\n\tfor i in range(2, n):\n\t\tans = max(ans, c[i] - i + 2, i - b[i] + 2)\n\t\tif a[i - 1]+ 1 < a[i+1]:\n\t\t\tans = max(ans, c[i+1] - b[i-1] + 1)\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "n = int(input())\n\nsequence = [float('-inf')] + [int(i) for i in input().split()] + [float('inf')]\n\nf1 = [0] * n\nf2 = [0] * n\nf3 = [True if sequence[i + 1] - sequence[i - 1] >\n      1 else False for i in range(1, len(sequence) - 1)]\nlen_1 = 0\nlen_2 = 0\n\nl = len(sequence) - 1\nfor i in range(1, len(sequence) - 1):\n    f1[i-1] = len_1\n    f2[i-1] = len_2\n    if sequence[i] > sequence[i - 1]:\n        len_1 += 1\n    else:\n        len_1 = 1\n    if sequence[l - i] < sequence[l - i + 1]:\n        len_2 += 1\n    else:\n        len_2 = 1\n\nf2 = f2[::-1]\n\nf = [f1[i] + f2[i] + 1 if f3[i]\n     else max(f1[i], f2[i]) + 1 for i in range(0, n)]\n\nmax_len = max(f)\n\nprint(max_len)\n\n'''\nn = int(input())\n\nsequence = [float('-inf')] + [int(i) for i in input().split()] + [float('inf')]\n\nlen_1 = 1\nlen_2 = 0\nmax_len = 1\n\ni = 1\nwhile(i < n):\n    if sequence[i] < sequence[i + 1]:\n        len_1 += 1\n        i += 1\n    else:\n        l = len_1 + len_2 + 1\n        if l > max_len:\n            max_len = l\n        len_1, len_2 = 1, len_1\n\n        if sequence[i + 2] - sequence[i] <= 1:\n            if sequence[i + 1] - sequence[i - 1] > 1:\n                len_2 -= 1\n            else:\n                len_2 = 0\n            i += 1\n        else:\n            i += 2\n\nif max_len < len_1 + len_2 + 1:\n    max_len = len_1 + len_2 + 1\n\nif max_len > n:\n    max_len = n\n\nprint(max_len)\n'''\n", "\nn = int(input())\narr = [int(i) for i in input().split(' ')]\na = []\n\nlast = 0\nrunning_length = 0\n\nfor i in arr:\n    if i > last:\n        running_length += 1\n    else:\n        a.append(running_length)\n        running_length = 1\n    last = i\n\nif running_length > 0:\n    a.append(running_length)\n\ndef canjoin(en, begin):\n    if begin == len(a) - 1:\n        return True\n    return arr[en - 1] < arr[begin] - 1 or arr[en] < arr[begin+1] - 1\n\nbest = max(a) + 1 if max(a) != len(arr) else len(arr)\nstart = 0\nfor i in range(len(a)-1):\n    end = start + a[i] - 1\n\n    if end == len(arr) - 1:\n        best = max(best, a[i]);\n    else:\n        if a[i+1] == 1 and end+1 != len(arr) - 1:\n            # 3 seq joins\n            if arr[end] < arr[end+2] - 1:\n                best = max(best, a[i] + a[i+2])\n\n        if a[i] == 1 or a[i+1] == 1 or canjoin(end, end+1):\n            best = max(best, a[i] + a[i+1])\n\n    start = end + 1\n\nprint(best)\n", "n=int(input())\na=list(map(int,input().split()))\npre=[1]*n\nsuf=[1]*n\nfor i in range(1,n):\n    if a[i]>a[i-1]:\n        pre[i]=pre[i-1]+1\nfor i in range(n-2,0,-1):\n    if a[i]<a[i+1]:\n        suf[i]=suf[i+1]+1\nans=max(pre)\nfor i in range(0,n):\n    if i>0:\n        ans=max(ans,pre[i-1]+1)\n    if i<n-1:\n        ans=max(ans,suf[i+1]+1)\n    if i>0 and i<n-1 and a[i-1]<=a[i+1]-2:\n        ans=max(ans,pre[i-1]+suf[i+1]+1)\nprint(ans)", "def main():\n    n, l, res, a = int(input()), [], [], 0\n    aa = list(map(int, input().split()))\n    for i, b in enumerate(aa):\n        if a >= b:\n            l.append(i)\n        a = b\n    if not l:\n        print(n)\n        return \n    l.append(n)\n    rapp, a = res.append, 0\n    for b in l:\n        rapp(b - a)\n        a = b\n    a = b = 0\n    for c in l:\n        if a + 1 < b < c - 1 and (aa[b] - aa[b - 2] > 1 or aa[b + 1] - aa[b - 1] > 1):\n            rapp(c - a - 1)\n        a, b = b, c\n    print(max(res) + 1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from sys import stdin, stdout\nn = int(stdin.readline())\na = [int(s) for s in stdin.readline().split()]\nleft = [0 for i in range(n)]\nright = [0 for i in range(n)]\n\nleft[0] = 1\nfor i in range(1, n):\n    if a[i] > a[i-1]:\n        left[i] = left[i-1] + 1\n    else:\n        left[i] = 1\n\nright[n-1] = 1\nfor i in range(n-2,-1,-1):\n    if a[i] < a[i+1]:\n        right[i] = right[i+1] + 1\n    else:\n        right[i] = 1\n\nans = 0\n\nfor i in range(1,n-1):\n    if a[i+1]-a[i-1]>1:\n        ans = max(ans, left[i-1]+1+right[i+1])\n    else:\n        ans = max(ans, left[i-1]+1, right[i+1]+1)\nif n > 1:\n    ans = max(ans, 1 + right[1], 1 + left[n-2])\nelse:\n    ans = 1\nstdout.write(str(ans))\n", "n = int(input())\na = list(map(int, input().split()))\n\nINF = 10 ** 9\n\ndp = [[-INF] * 3 for i in range(n)]\nfor i in range(n):\n    dp[i][0] = dp[i][2] = 1\n    if i > 0:\n        dp[i][1] = 2\n\n\ndef upd(i, cr, nx):\n    dp[i + 1][nx] = max(dp[i + 1][nx], dp[i][cr] + 1)\n\n\nfor i in range(n - 1):\n    for j in range(3):\n        cur = dp[i][j]\n\n        if j == 0:\n            if a[i + 1] > a[i]:\n                upd(i, j, 0)\n                upd(i, j, 2)\n            else:\n                upd(i, j, 2)\n        elif j == 1:\n            if a[i + 1] > a[i]:\n                upd(i, j, 1)\n        else:\n            if i > 0 and a[i + 1] > a[i - 1] + 1:\n                upd(i, j, 1)\n\n\nans = 0\nfor i in range(n):\n    ans = max(ans, max(dp[i]))\n\nprint(ans)\n", "# http://codeforces.com/contest/446/problem/A\n\nfrom sys import stdin\ninFile = stdin\ntokens = []\ntokens_next = 0\n\ndef next_str():\n    nonlocal tokens, tokens_next\n    while tokens_next >= len(tokens):\n        tokens = inFile.readline().split()\n        tokens_next = 0\n    tokens_next += 1\n    return tokens[tokens_next - 1]\n\ndef nextInt():\n    return int(next_str())\n\ndef nextIncreasingSeg(a, ind):\n\tif ind >= len(a):\n\t\treturn None\n\tr = ind\n\twhile r + 1 < len(a) and a[r + 1] > a[r]:\n\t\tr += 1\n\treturn (ind, r)\n\ndef myLen(s):\n\treturn s[1] - s[0] + 1\n\ndef getBest(a, s0, s1):\n\tif not s1:\n\t\treturn myLen(s0)\n\n\tif s0[1] - 1 >= s0[0]:\n\t\tif a[s0[1] - 1] < a[s1[0]] - 1:\n\t\t\treturn myLen(s0) + myLen(s1)\n\t\n\tif s1[0] + 1 <= s1[1]:\n\t\tif a[s1[0] + 1] > a[s0[1]] + 1:\n\t\t\treturn myLen(s0) + myLen(s1)\n\treturn 1 + max(myLen(s0), myLen(s1))\n\nn = nextInt()\na = [nextInt() for i in range(n)]\n\ns0 = nextIncreasingSeg(a, 0)\ns1 = nextIncreasingSeg(a, s0[1] + 1)\nres = getBest(a, s0, s1)\n\nwhile s1 and s1[1] + 1 < len(a):\n\ts0, s1 = s1, nextIncreasingSeg(a, s1[1] + 1)\n\tres = max(res, getBest(a, s0, s1))\n\nprint(res)\n", "n = int(input())\na = [int(i) for i in input().split()]\nl,r = [1]*n,[1]*n\n\nfor i in range(1,n):\n    if a[i-1]<a[i]: l[i]+=l[i-1]\n\nfor i in range(n-2,0,-1):\n    if a[i+1]>a[i]: r[i]+=r[i+1]\n\nans = max(l)\nif ans<n: ans+=1\nfor i in range(1,n-1):\n    if a[i-1]+1<a[i+1]: ans=max(ans,l[i-1]+r[i+1]+1)\nprint(ans)", "n=int(input())\nl=[1]*n\nr=[1]*n\na= list(map(int,input().split()))\nfor i in range(1,n):\n if a[i-1]<a[i]:\n  l[i]+=l[i-1]\nfor i in range(n-2,-1,-1):\n if a[i]< a[i+1]:\n  r[i]+=r[i+1]\n\nans=max(l)\nif ans<n:\n ans+=1\n#print(l)\n#print(r)\nfor i in range(1,n-1):\n if a[i-1]+1 < a[i+1]:\n \tans=max(ans,l[i-1]+1+r[i+1])\n else:\n    ans= max(ans,l[i-1]+1)\n #print(ans)\nprint(ans)\n  \n  \n", "def solve():\n    size = int(input())\n    ls = list(map(int, input().rstrip().split()))\n    dp0 = [1 for i in range(size)]\n    dp1 = [1 for i in range(size)]\n    for i in range(1, size):\n        dp0[i] = dp0[i - 1] + 1 if (ls[i - 1] < ls[i]) else 1 \n    for i in range(0, size - 1)[::-1]:\n        dp1[i] = dp1[i + 1] + 1 if (ls[i + 1] > ls[i]) else 1\n    best = max(max(dp0), max(dp1))\n    for i in range(0, size):\n        if i >= 1:\n            best = max(best, dp0[i - 1] + 1)\n        if i <= size - 2:\n            best = max(best, dp1[i + 1] + 1)\n        if i <= size - 2 and i >= 1:\n            if ls[i - 1] + 1 < ls[i + 1]:\n                best = max(best, dp0[i - 1] + dp1[i + 1] + 1)\n    return best\n\ndef __starting_point():\n    print(solve())\n\n__starting_point()", "elems = int(input())\ndata = list(map(int, input().split()))\ndata.append(float(\"-inf\"))\n\ndef find_seq_breaks():\n    nonlocal elems\n    nonlocal data\n    seq_spans = []\n    sequence_idx = 0\n    longest_span = 0\n    for i in range(1, elems + 1):\n        if data[i] <= data[i - 1]:\n            seq_range = [sequence_idx, i - 1]\n            seq_spans.append(seq_range)\n\n            diff = i - sequence_idx\n            if (longest_span < diff):\n                longest_span = diff\n\n            sequence_idx = i\n    return (seq_spans, longest_span)\n\ndef parse_seqs(seq_spans, longest_span):\n    nonlocal data\n    nonlocal elems\n\n    if len(seq_spans) > 1:\n        longest_span += 1\n\n    for i in range(1, len(seq_spans)):\n        one_past = seq_spans[i][0]\n        if one_past >= 2 or one_past <= elems - 1:\n            #look at values before and after num that broke seq\n            r = data[one_past] - data[one_past-2]\n            r2 = data[one_past + 1] - data[one_past - 1]\n            candidate = seq_spans[i][1] - seq_spans[i - 1][0] + 1\n            if r >= r2:\n                if r >= 2:\n                   if longest_span < candidate:\n                       longest_span = candidate\n            elif r2 >= 2:\n                if r2 >= 2:\n                    if longest_span < candidate:\n                        longest_span = candidate\n    return longest_span\n\nd = find_seq_breaks()\nprint(parse_seqs(d[0], d[1]))\n", "n = int(input())\ninp = list(map(int, input().split()))\n\ninput_parse = []\ndp = []\nfor i in inp:\n    if len(input_parse) == 0:\n        input_parse.append(i)\n    elif i <= input_parse[-1]:\n        dp.append(input_parse)\n        input_parse = [i]\n    else:\n        input_parse.append(i)\n\ndp.append(input_parse)\noptimum = 0\nif len(dp) != 1:\n    for i in range(len(dp) - 1):\n        if len(dp[i]) == 1 or len(dp[i+1]) == 1:\n            curr_opt = len(dp[i]) + len(dp[i+1])\n        elif dp[i + 1][0] - dp[i][-2] > 1 or  dp[i + 1][1] - dp[i][-1] > 1:\n            curr_opt= len(dp[i]) + len(dp[i+1])\n        else:\n            curr_opt=max(len(dp[i]), len(dp[i+1])) + 1\n        if curr_opt > optimum:\n            optimum = curr_opt\n    print(optimum)\nelse:\n    print(len(dp[0]))\n", "from copy import copy\n\nlength = int(input())\nnums= input().split(\" \")\nnumsList = []\n\nfor n in nums:\n    numsList.append(int(n))\n\nleft = []\nright = []\n\nfor i in range(length):\n    left.append(1)\n    right.append(1)\n    \nfor i in range(1, length):\n    if numsList[i] > numsList[i-1]:\n        left[i] = left[i-1] + 1\n    if numsList[length-i] > numsList[length-i-1]:\n        right[length-i-1] = right[length-i] + 1\n\nanswer = 0\nfor i in range(length):\n    if length == 1:\n        answer = 1\n    elif i == 0:\n        if left[i] == 1:\n            maxVal = right[i+1] + left[i] \n            if maxVal > answer:\n                answer = maxVal\n#         if right[i] == 1:\n#             maxVal = right[i+1] + left[i] \n#             if maxVal > answer:\n#                 answer = maxVal\n    elif i == length-1:\n        if left[i] == 1:\n            maxVal = left[i-1] + right[i]\n            if maxVal > answer:\n                answer = maxVal\n    else:\n        if left[i] == 1:\n            if (numsList[i+1] - numsList[i-1] >= 2 or (i-2 > 0 and numsList[i] - numsList[i-2] >= 2)):\n                maxVal = left[i-1] + right[i]\n                if maxVal > answer:\n                    answer = maxVal\n            else:\n                maxVal = left[i-1] + 1\n                if maxVal > answer:\n                    answer = maxVal\n        if right[i] == 1:\n            if (numsList[i+1] - numsList[i-1] >= 2 or (i+2 < length and numsList[i+2] - numsList[i] >= 2)):\n                maxVal = right[i+1] + left[i]\n                if maxVal > answer:\n                    answer = maxVal\n            else:\n                maxVal = right[i+1] + 1\n                if maxVal > answer:\n                    answer = maxVal\n\nprint (answer)\n\n", "from collections import deque\nfrom sys import stdin\nlines = deque(line.strip() for line in stdin.readlines())\n\ndef nextline():\n    return lines.popleft()\n\ndef types(cast):\n    return tuple(int(x) for x in nextline().split())\n\ndef ints():\n    return types(int)\n\ndef strs():\n    return nextline().split()\n\ndef main():\n    # lines will now contain all of the input's lines in a list\n    (n,) = ints()\n    nums = ints()\n    if n == 1:\n        return n\n    inc = [1]*n\n    for i in range(1, n):\n        if nums[i] > nums[i-1]:\n            inc[i] = inc[i-1]+1\n    dec = [1]*n\n    for i in range(n-2, -1, -1):\n        if nums[i] < nums[i+1]:\n            dec[i] = dec[i+1]+1\n    m = max(inc[n-2], dec[1])+1\n    for i in range(1, n-1):\n        if nums[i-1]+1 < nums[i+1]:\n            length = inc[i-1]+dec[i+1]+1\n        else:\n            length = max(inc[i-1], dec[i+1])+1\n        if length > m:\n            m = length\n    return m\n\ndef __starting_point():\n    print(main())\n\n__starting_point()", "n = int(input())\nseq = [int(n) for n in input().split()]\ndp = [0 for n in range(n+1)]\nfor j in range(0, n):\n    if(seq[j] > seq[j-1]):\n        dp[j] = (dp[j-1] + 1)\n    else:\n        dp[j] = 1\nseq.append(0)\n\nm = 0\nx = 0\nfor i in range(n-1, -1, -1):\n    m = max(m, dp[i-1] + 1, x + 1)\n    if(i == 0 or i == n-1 or seq[i-1] + 1 < seq[i+1]):\n        m = max(m, dp[i-1] + x + 1)\n        \n    if(seq[i] < seq[i+1]):\n        x += 1\n    else:\n        x = 1\n        \nprint(m)", "n = int(input())\na = [int(x) for x in input().split()]\n\nl, r = 0, 0\nc = None\nmx = 1\n\nwhile r < n - 1:\n    r += 1\n    \n    if a[r] <= (a[r - 1] if r - 1 != c else a[r - 2] + 1):\n        if c is not None and r - 1 == c and a[r - 1] < a[r]:\n            if a[c] < a[c + 1]:\n                l = c = c - 1\n            else:\n                l = c\n        else:\n            if c is not None:\n                if a[c] < a[c + 1]:\n                    l = c\n                else:\n                    l = c + 1\n            \n            if r - 1 == l or a[r] - a[r - 2] > 1:\n                c = r - 1\n            else:\n                c = r\n    \n    mx = max(mx, r - l + 1)\n\nprint(mx)\n"]