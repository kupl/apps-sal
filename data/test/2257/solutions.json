["import math\nn, x1, y1, x2, y2 = [int(x) for x in input().split()]\npoints = []\nfor i in range(n):\n    points.append(tuple(int(x) for x in input().split()))\nd = lambda p1, p2: (p1[0] - p2[0])**2 + (p1[1] - p2[1])**2\nfirst = (x1, y1)\nsecond = (x2, y2)\ndistances = [(d(first, point), d(second, point)) for point in points]\ndistances.sort()\nmaxtaild = [0 for i in range(n+1)]\nfor i in range(n-1, -1, -1):\n    maxtaild[i] = max(maxtaild[i+1], distances[i][1])\nprint(min(maxtaild[0], min(distances[i][0] + maxtaild[i+1] for i in range(n))))\n", "def d2(p,x,y):\n\treturn (p[0]-x)*(p[0]-x)+(p[1]-y)*(p[1]-y)\n\nn ,x1, y1, x2, y2 = list(map(int, input().split()))\na = [0]*n\nfor i in range(n):\n\ta[i] = list(map(int, input().split()))\nans = 10000000000000000\ndist1 = [d2(p,x1,y1) for p in a]\ndist2 = [d2(p,x2,y2) for p in a]\nfor i in range(n):\n\tdd1 = dist1[i]\n\tdd2 = 0\n\tfor j in range(n):\n\t\tif dist1[j]>dd1:\n\t\t\tdd2 = max(dd2, dist2[j])\n\tans = min(ans, dd1+dd2)\nans = min(ans, max(dist1), max(dist2))\nprint(ans)\t\n", "#!/usr/bin/env python3\nfrom itertools import islice\nimport math\n\n\ndef squared_distance(p1, p2):\n    return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2\n\n\ndef main():\n    n, x1, y1, x2, y2 = list(map(int, input().split()))\n    f1, f2 = (x1, y1), (x2, y2)\n    flowers = sorted([(int(x), int(y)) for x, y in (input().split() for _ in range(n))],\n                     key=lambda x: squared_distance(x, f1), reverse=True)\n\n    ans = squared_distance(f1, flowers[0])\n\n    max_distance_2 = 0\n\n    for i in range(1, n):\n        d1 = squared_distance(f1, flowers[i])\n        max_distance_2 = max(max_distance_2, squared_distance(f2, flowers[i - 1]))\n        ans = min(ans, d1 + max_distance_2)\n\n    max_distance_2 = max(max_distance_2, squared_distance(f2, flowers[-1]))\n\n    ans = min(ans, max_distance_2)\n\n    print(int(ans))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "3\n\n(n, x1, y1, x2, y2) = tuple(map(int, input().split()))\n\nflowers = []\nfor i in range(n):\n\t(x, y) = tuple(map(int, input().split()))\n\tdis1 = (x-x1)**2 + (y-y1)**2\n\tdis2 = (x-x2)**2 + (y-y2)**2\n\tflowers.append((dis1, dis2))\n\n#for i in flowers:\n#\tprint(str(i[2]) + \" \" + str(i[3]))\n\nflowers = sorted(flowers)\n\ndis = []\nfor i in range(n+1):\n\tleft = flowers[:i]\n\tright = flowers[i:]\n\tif len(left) == 0:\n\t\tleftmax = 0\n\telse:\n\t\tleftmax = sorted(left)[-1][0]\n\tif len(right) == 0:\n\t\trightmax = 0\n\telse:\n\t\trightmax = sorted(right, key=lambda tup: tup[1])[-1][1]\n\tdis.append(leftmax + rightmax)\n\nprint(str(min(dis)))\n", "#author=\"_rabbit\"\nn,x1,y1,x2,y2=list(map(int,input().split()))\nx=[]\ny=[]\nfor i in range(n):\n    xx,yy=list(map(int,input().split()))\n    x.append(xx)\n    y.append(yy)\nans=int(1000000000000000000)\nfor i in range(n):\n    flag=[]\n    for j in range(n):\n        flag.append(0)\n    tt=(x[i]-x1)*(x[i]-x1)+(y[i]-y1)*(y[i]-y1)\n    #print(\"#### \")\n   # print(tt)\n    for j in range(n):\n        ss=(x[j]-x1)*(x[j]-x1)+(y[j]-y1)*(y[j]-y1)\n        if ss<=tt:\n            flag[j]=1\n   # print(flag)\n    hh=int(0)\n    for j in range(n):\n        if flag[j]==1:\n            continue\n        ss=(x[j]-x2)*(x[j]-x2)+(y[j]-y2)*(y[j]-y2)\n        hh=max(hh,ss)\n    ans=min(ans,hh+tt)\njj=0\nfor i in range(n):\n    tt=(x[i]-x1)*(x[i]-x1)+(y[i]-y1)*(y[i]-y1)\n    jj=max(jj,tt)\nans=min(ans,jj)\njj=0\nfor j in range(n):\n    ss=(x[j]-x2)*(x[j]-x2)+(y[j]-y2)*(y[j]-y2)\n    jj=max(jj,ss)\nans=min(ans,jj)\nprint(ans)\n", "def srch(d1af, d2af):\n\n    rtm = int(0)\n    for i1 in range(n):\n        r1m = d1af[i1]\n        r2m = int(0)\n\n        for i2 in range(n):\n            if d1af[i2] <= r1m:\n                None\n            else:\n                r2m = max(r2m, d2af[i2])\n\n        if i1 == 0:\n            rtm = r1m + r2m\n        else:\n            rtm = min(rtm, r1m + r2m)\n\n    return rtm\n\nn, x1, y1, x2, y2 = list(map(int, input().split()))\n\nr1 = int(0)\nr2 = int(0)\n\nd1a = []\nd2a = []\n\nfor _ in range(n):\n    x, y = list(map(int, input().split()))\n\n    d1 = abs(x - x1) ** 2 + abs(y - y1) ** 2\n    d2 = abs(x - x2) ** 2 + abs(y - y2) ** 2\n\n    d1a.append(d1)\n    d2a.append(d2)\n\nrmin = min(srch(d1a, d2a), srch(d2a, d1a))\nprint(rmin)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n#   = input()\n#   = int(input())\n\n#() = (i for i in input().split())\n#   = [i for i in input().split()]\n\n(n, x1, y1, x2, y2) = (int(i) for i in input().split())\nr1 = []\nr2 = []\n\nfor i in range(n):\n    (x, y)   = (int(i) for i in input().split())\n    r1.append((x-x1)*(x-x1) + (y-y1)*(y-y1))\n    r2.append((x-x2)*(x-x2) + (y-y2)*(y-y2))\n\n\nstart = time.time()\n\nif max(r1) > max(r2):\n    (r1, r2) = (r2, r1)\n\nr1s = sorted(list(set(r1)), key = lambda x: -x)\n\nra2 = 0\nans = r1s[0]\nnow = 0\n\nwhile(now < len(r1s)-1):\n    rn2 = ra2\n    for i in range(n):\n        if r1[i] ==  r1s[now]:\n            if r2[i] > rn2:\n                rn2 = r2[i]\n\n    if rn2 + r1s[now+1] < ans:\n        ans = rn2 + r1s[now+1]\n\n    ra2 = rn2\n    now += 1\n\nprint(ans)\nfinish = time.time()\n#print(finish - start)\n", "n, x1, y1, x2, y2 = list(map(int, input().split()))\nl = [(0,0)]\nfor i in range(n):\n    X, Y = list(map(int, input().split()))\n    l += [((X-x1)**2+(Y-y1)**2, (X-x2)**2+(Y-y2)**2)]\nl = sorted(l)\na = 10000000000000000\nY = a\nfor i in range(n+1):\n    x, y = l[i][0], 0\n    for j in range(i+1,n+1):\n        if l[j][0] > x:\n            y = max(y, l[j][1])\n    a = min(a,x+y)\nprint(a)\n", "def dist1(x_, y_):\n    return (x1 - x_) ** 2 + (y1 - y_) ** 2\n\n\ndef dist2(x_, y_):\n    return (x2 - x_) ** 2 + (y2 - y_) ** 2\n\n\nn, x1, y1, x2, y2 = [int(i) for i in input().split()]\ndist = [[0] * 2 for i in range(n)]\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    dist[i][0] = dist1(x, y)\n    dist[i][1] = dist2(x, y)\ndist.sort()\nnow1 = 0\nnow2 = 0\nlel = 0\nfor i in range(n):\n    lel = max(lel, dist[i][1])\nans = lel\nmx = [0] * n\nmx[n - 1] = 0\nfor i in range(n - 2, -1, -1):\n    mx[i] = max(mx[i + 1], dist[i + 1][1])\nfor i in range(n - 1, -1, -1):\n    now1 = dist[i][0]\n    now2 = mx[i]\n    if now1 + now2 < ans:\n        ans = now1 + now2\nprint(ans)", "import math\n\ndef dist(p1, p2):\n    return (p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2\n\nn, x1, y1, x2, y2 = [int(x) for x in input().split()]\np1, p2 = (x1, y1), (x2, y2)\nflowers = []\n\nfor _ in range(n):\n    x, y = [int(x) for x in input().split()]\n    flowers.append((x, y))\n\nd1 = list(sorted(list(range(n)), key=lambda i: dist(flowers[i], p1)))\nd2 = list(sorted(list(range(n)), key=lambda i: dist(flowers[i], p2)))\nd2_1 = [0] * n\nfor i, d in enumerate(d2):\n    d2_1[d] = i\n\ndst = dist(flowers[d2[-1]], p2)\nptr = len(d2) - 1\nfor d in d1:\n    d2[d2_1[d]] = None\n    dist1 = dist(flowers[d], p1)\n    while d2[ptr] is None and ptr >= 0:\n        ptr -= 1\n    if ptr >= 0:\n        dist2 = dist(flowers[d2[ptr]], p2)\n    else:\n        dist2 = 0\n    if dst is None or dist1 + dist2 < dst:\n        dst = dist1 + dist2\n\nprint(dst)\n", "def dist(a, b):\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2\n\nn, x1, y1, x2, y2 = list(map(int, input().split()))\ncoor = [list(map(int, input().split())) for _ in range(n)]\ndist1 = [0] + list([dist((x1, y1), x) for x in coor])\ndist2 = [0] + list([dist((x2, y2), x) for x in coor])\ncovered = [False for _ in dist1]\nret = 1e20\nfor i in range(n+1):\n    max_dist2 = 0\n    for j in range(n+1):\n        if dist1[j] > dist1[i]:\n            max_dist2 = max(max_dist2, dist2[j])\n    ret = min(ret, dist1[i] + max_dist2)\nprint(ret)\n", "#!/usr/bin/env python3\n\nfrom collections import namedtuple\nfrom functools   import reduce\nfrom operator    import itemgetter\n\nPoint = namedtuple(\"Point\", \"x y d1 d2\")\n\ntry:\n    while True:\n        n, x1, y1, x2, y2 = list(map(int, input().split()))\n        points = [Point(x1, y1, 0, 1e18)]\n        for i in range(n):\n            x, y = list(map(int, input().split()))\n            points.append(Point(x, y, (x - x1)**2 + (y - y1)**2, (x - x2)**2 + (y - y2)**2))\n        result = 1e18\n        l2 = itemgetter(3)\n        result = reduce(\n            min,\n            list(map(\n                lambda a: min(\n                    result, a.d1 + reduce(max, list(map(l2, [p for p in points if p.d1 > a.d1])), 0)\n                ),\n                points,\n            )),\n        )\n        print(result)\n\nexcept EOFError:\n    pass\n", "n,x1,y1,x2,y2 = map(int,input().split())\nx = [0] * n\ny = [0] * n\nfor i in range(n):\n    x[i], y[i] = map(int, input().split())\n#\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\nz1, z2 = [0] * n, [0] * n\nfor i in range(n):\n    z1[i] = (x[i] - x1)**2+(y[i] - y1)**2\n    z2[i] = (x[i] - x2)**2+(y[i] - y2)**2\nmaxi = int(1e20)\nfor i in range(n):\n    m = 0\n    a1 = z1[i]\n    for j in range(n):\n        if j == i: continue\n        a2 = z1[j]\n        if a2 < a1: continue\n        a2 = z2[j]\n        if m < a2: m = a2\n        \n    if maxi > a1 + m: maxi = a1 + m\n    #print(maxi)\nif maxi > max(z2): maxi = max(z2)\nprint(maxi)", "def srch(d1af, d2af):\n\n    rtm = int(1e16)\n    for i1 in range(n+1):\n        r1m = d1af[i1]\n        r2m = int(0)\n\n        for i2 in range(n+1):\n            if d1af[i2] <= r1m:\n                None\n            else:\n                r2m = max(r2m, d2af[i2])\n\n        rtm = min(rtm, r1m + r2m)\n\n    return rtm\n\nn, x1, y1, x2, y2 = list(map(int, input().split()))\n\nd1a = [0]\nd2a = [0]\n\nfor _ in range(n):\n    x, y = list(map(int, input().split()))\n\n    d1 = abs(x - x1) ** 2 + abs(y - y1) ** 2\n    d2 = abs(x - x2) ** 2 + abs(y - y2) ** 2\n\n    d1a.append(d1)\n    d2a.append(d2)\n\nprint(srch(d1a, d2a))\n", "def srch(d1af, d2af):\n\n    rtm = int(1e16)\n    for i1 in range(n+1):\n        r1m = d1af[i1]\n        r2m = int(0)\n\n        for i2 in range(n+1):\n            if d1af[i2] <= r1m:\n                None\n            else:\n                r2m = max(r2m, d2af[i2])\n\n        rtm = min(rtm, r1m + r2m)\n\n    return rtm\n\nn, x1, y1, x2, y2 = list(map(int, input().split()))\n\nd1a = [0]\nd2a = [0]\n\nfor _ in range(n):\n    x, y = list(map(int, input().split()))\n\n    d1 = abs(x - x1) ** 2 + abs(y - y1) ** 2\n    d2 = abs(x - x2) ** 2 + abs(y - y2) ** 2\n\n    d1a.append(d1)\n    d2a.append(d2)\n\nprint(srch(d1a, d2a))\n", "def srch(d1af, d2af):\n\n    rtm = int(1e16)\n    for i1 in range(n+1):\n        r1m = d1af[i1]\n        r2m = int(0)\n\n        for i2 in range(n+1):\n            if d1af[i2] <= r1m:\n                None\n            else:\n                r2m = max(r2m, d2af[i2])\n\n        rtm = min(rtm, r1m + r2m)\n\n    return rtm\n\nn, x1, y1, x2, y2 = list(map(int, input().split()))\n\nd1a = [0]\nd2a = [0]\n\nfor _ in range(n):\n    x, y = list(map(int, input().split()))\n\n    d1 = (x - x1) ** 2 + (y - y1) ** 2\n    d2 = (x - x2) ** 2 + (y - y2) ** 2\n\n    d1a.append(d1)\n    d2a.append(d2)\n\nprint(srch(d1a, d2a))\n", "def srch(d1af, d2af):\n\n    rtm = int(1e16)\n    for i1 in range(n+1):\n        r1m = d1af[i1]\n        r2m = int(0)\n\n        for i2 in range(n+1):\n            if d1af[i2] <= r1m:\n                None\n            else:\n                r2m = max(r2m, d2af[i2])\n\n        rtm = min(rtm, r1m + r2m)\n\n    return rtm\n\nn, x1, y1, x2, y2 = list(map(int, input().split()))\n\nd1a = [0]\nd2a = [0]\n\nfor _ in range(n):\n    x, y = list(map(int, input().split()))\n\n    d1 = (x - x1) ** 2 + (y - y1) ** 2\n    d2 = (x - x2) ** 2 + (y - y2) ** 2\n\n    d1a.append(d1)\n    d2a.append(d2)\n\nprint(srch(d1a, d2a))\n# PYPY!!!\n", "n, x1, y1, x2, y2 = list(map(int, input().split()))\n\n\nl = list()\nfor i in range(n):\n\tx, y = list(map(int, input().split()))\n\tz1 = (x-x1)**2 + (y-y1)**2 \n\tz2 = (x-x2)**2 + (y-y2)**2\n\tl.append((z1, z2))\n\nl = sorted(l, key = lambda x: x[0])\n\nmin_value = 0\nfor i in range(n):\n\tmin_value = max(min_value, l[i][1])\n\nfor i in range(n):\n\tr1 = l[i][0]\n\tr2 = 0\n\tfor j in range(i+1, n):\n\t\tr2 = max(r2, l[j][1])\n\tmin_value = min(min_value, r1 + r2)\n\nprint(min_value)\n", "n,a,b,x,y = map(int,input().split())\nli=[[0,0]]\nfor _ in range(n):\n\tp,q = map(int,input().split())\n\tli.append([(a-p)**2+(b-q)**2,(x-p)**2+(y-q)**2])\nli=sorted(li)\nmn = 1000000000000000000000000\nfor i in range(n+1):\n\tmx=0\n\tfor j in range(i+1,n+1):\n\t\tif li[j][0]>li[i][0]:\n\t\t\tmx = max(mx,li[j][1])\n\tmn =min(mn,mx+li[i][0])\nprint(mn)\t", "from functools import reduce\nn, x1, y1, x2, y2 = list(map(int, input().split()))\n\n\nl = list()\nfor i in range(n):\n\tx, y = list(map(int, input().split()))\n\tz1 = (x-x1)**2 + (y-y1)**2 \n\tz2 = (x-x2)**2 + (y-y2)**2\n\tl.append((z1, z2))\n\nl = sorted(l, key = lambda x: x[0])\n\nans = reduce( (lambda x, y: (x[0], max(x[1], y[1]))), l)[1]\nans = min(ans, l[-1][0])\n\nr2 = 0\nfor i in range(n - 2,- 1, -1):\n\tr1 = l[i][0]\n\tr2 = max(r2, l[i+1][1])\n\tans = min(ans, r1 + r2)\n\nprint(ans)\n", "def dist_sq(x1, y1, x2, y2):\n    return (x1 - x2)**2 + (y1 - y2)**2\n\nn, x1, y1, x2, y2 = map(int, input().split())\nR1, R2 = [], []\nfor i in range(n):\n    x, y = map(int, input().split())\n    R1.append(dist_sq(x, y, x1, y1))\n    R2.append(dist_sq(x, y, x2, y2))\n\n#candidate for r1(squared)\ncand_r1 = set(R1)\ncand_r1.add(0)\nans = 10**20    #inf\nfor r1 in cand_r1:\n    r2 = 0\n    for i in range(n):\n        if R1[i] > r1:\n            r2 = max(r2, R2[i])\n    ans = min(ans, r1+r2)\nprint(ans)", "def square(xx):\n    return xx*xx\ns = input().split()\nn = int(s[0])\nx0 = int(s[1])\ny0 = int(s[2])\nx1 = int(s[3])\ny1 = int(s[4])\nans = 0\nleft=[]\nright=[]\nfor i in range(0,n):\n    s = input().split()\n    x = int(s[0])\n    y = int(s[1])\n    left.append(square(x-x0)+square(y-y0))\n    right.append(square(x-x1)+square(y-y1))\n    ans = max(ans, right[i])\n\nfor i in range(0,n):\n    temp = 0\n    for j in range(0,n):\n        if left[j] > left[i]:\n            temp = max(temp, right[j])\n    ans = min(ans, temp+left[i])\nprint(ans)", "from functools import reduce\nn, x1, y1, x2, y2 = list(map(int, input().split()))\n\n\nl = list()\nfor i in range(n):\n\tx, y = list(map(int, input().split()))\n\tz1 = (x-x1)**2 + (y-y1)**2 \n\tz2 = (x-x2)**2 + (y-y2)**2\n\tl.append((z1, z2))\n\nl = sorted(l, key = lambda x: x[0])\n\n#ans = reduce( (lambda x, y: (x[0], max(x[1], y[1]))), l)[1]\nans = max([x[1] for x in l])\nans = min(ans, l[-1][0])\n\nr2 = 0\nfor i in range(n - 2,- 1, -1):\n\tr1 = l[i][0]\n\tr2 = max(r2, l[i+1][1])\n\tans = min(ans, r1 + r2)\n\nprint(ans)\n", "n, x1, y1, x2, y2 = list(map(int, input().split()))\n\n\nl = list()\nfor i in range(n):\n\tx, y = list(map(int, input().split()))\n\tz1 = (x-x1)**2 + (y-y1)**2 \n\tz2 = (x-x2)**2 + (y-y2)**2\n\tl.append((z1, z2))\n\nl = sorted(l, key = lambda x: x[0])\n\nans = max([x[1] for x in l])\nans = min(ans, l[-1][0])\n\nr2 = 0\nfor i in range(n - 2,- 1, -1):\n\tr1 = l[i][0]\n\tr2 = max(r2, l[i+1][1])\n\tans = min(ans, r1 + r2)\n\nprint(ans)\n", "n,x,y,x1,y1=map(int,input().split())\na=[]\nfor i in range(n):\n    xt,yt=map(int,input().split())\n    a.append((((xt-x)**2+(yt-y)**2),((xt-x1)**2+(yt-y1)**2)))\na.sort(key=lambda x:x[0])\nans=max([x[1] for x in a])\nans=min(ans,a[-1][0])\nr2=0\nfor i in range(n-2,-1,-1):\n    r1=a[i][0]\n    r2=max(r2,a[i+1][1])\n    ans=min(ans,r1+r2)\nprint(ans)"]