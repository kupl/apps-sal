["from math import *\n\nax, ay, bx, by, cx, cy = [int(t) for t in input().split()]\nn = int(input())\ndist = 0\nmaxv = [[-inf, -inf], [-inf, -inf]]\nindex = [[0,0], [0,0]]\n\ndef update(d, idx, p):\n    nonlocal maxv, index\n    if d > maxv[p][0]:\n        maxv[p][1] = maxv[p][0]\n        index[p][1] = index[p][0]\n        maxv[p][0] = d\n        index[p][0] = idx\n    elif d > maxv[p][1]:\n        maxv[p][1] = d\n        index[p][1] = idx\n\nfor i in range(n):\n    x, y = [int(t) for t in input().split()]\n    bottle_recycle = sqrt((cx - x) ** 2 + (cy - y) ** 2)\n    dist += bottle_recycle * 2\n    dista = bottle_recycle - sqrt((ax - x) ** 2 + (ay - y) ** 2)\n    distb = bottle_recycle - sqrt((bx - x) ** 2 + (by - y) ** 2)\n    update(dista, i, 0)\n    update(distb, i, 1)\n\nans = dist - maxv[0][0]\nans = min(ans, dist - maxv[1][0])\nif(index[0][0] != index[1][0]):\n    ans = min(ans, dist - maxv[0][0] - maxv[1][0])\nelif(n > 1):\n    ans = min(ans, dist - maxv[0][1] - maxv[1][0], dist - maxv[0][0] - maxv[1][1])\nprint(ans)", "from math import *\n\nax, ay, bx, by, cx, cy = map(lambda t: int(t), input().split())\nn = int(input())\ndist = 0\nmaxv = [[-inf, -inf], [-inf, -inf]]\nindex = [[0,0], [0,0]]\n\ndef update(d, idx, p):\n    nonlocal maxv, index\n    if d > maxv[p][0]:\n        maxv[p][1] = maxv[p][0]\n        index[p][1] = index[p][0]\n        maxv[p][0] = d\n        index[p][0] = idx\n    elif d > maxv[p][1]:\n        maxv[p][1] = d\n        index[p][1] = idx\n\nfor i in range(n):\n    x, y = map(lambda t: int(t), input().split())\n    bottle_recycle = sqrt((cx - x) ** 2 + (cy - y) ** 2)\n    dist += bottle_recycle * 2\n    dista = bottle_recycle - sqrt((ax - x) ** 2 + (ay - y) ** 2)\n    distb = bottle_recycle - sqrt((bx - x) ** 2 + (by - y) ** 2)\n    update(dista, i, 0)\n    update(distb, i, 1)\n\nans = dist - maxv[0][0]\nans = min(ans, dist - maxv[1][0])\nif(index[0][0] != index[1][0]):\n    ans = min(ans, dist - maxv[0][0] - maxv[1][0])\nelif(n > 1):\n    ans = min(ans, dist - maxv[0][1] - maxv[1][0], dist - maxv[0][0] - maxv[1][1])\nprint(ans)", "def main():\n    from math import hypot\n    from sys import stdin\n    ax, ay, bx, by, tx, ty = list(map(float, input().split()))\n    n, tot = int(input()), 0.\n    m0 = m1 = m2 = m3 = -9e9\n    j = k = 0\n    for i, s in enumerate(stdin.read().splitlines()):\n        x, y = list(map(float, s.split()))\n        r = hypot(tx - x, ty - y)\n        tot += r\n        d = r - hypot(ax - x, ay - y)\n        if m1 < d:\n            if m0 < d:\n                m0, m1, j = d, m0, i\n            else:\n                m1 = d\n        d = r - hypot(bx - x, by - y)\n        if m3 < d:\n            if m2 < d:\n                m2, m3, k = d, m2, i\n            else:\n                m3 = d\n    print(tot * 2. - max((m0, m2) if min(m0, m2) < 0. else((m0 + m2) * (j != k), m0 + m3, m1 + m2, m0, m2)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    from math import hypot\n    from sys import stdin\n    ax, ay, bx, by, tx, ty = list(map(float, input().split()))\n    s, tot = input(), 0.\n    m0 = m1 = m2 = m3 = -9e9\n    j = k = 0\n    for i, s in enumerate(stdin.read().splitlines()):\n        x, y = list(map(float, s.split()))\n        r = hypot(tx - x, ty - y)\n        tot += r\n        d = r - hypot(ax - x, ay - y)\n        if m1 < d:\n            if m0 < d:\n                m0, m1, j = d, m0, i\n            else:\n                m1 = d\n        d = r - hypot(bx - x, by - y)\n        if m3 < d:\n            if m2 < d:\n                m2, m3, k = d, m2, i\n            else:\n                m3 = d\n    print(tot * 2. - max((m0, m2, m0 + m2) if j != k else (m0, m2, m0 + m3, m1 + m2)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from math import hypot\n\nax, ay, bx, by, tx, ty = map(int, input().split())\n\nn = int(input())\n\nans = 0\n\np1, p2, beg, end = [0]*n, [0]*n, [0]*n, [0]*n\n\ndef pref(x):\n    return beg[x] if x >= 0 else 0\n\ndef suff(x):\n    return end[x] if x < n else 0\n\ndef ex(x):\n    return max(pref(x-1), suff(x+1))\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    d = hypot(x-tx, y-ty)\n    d1 = hypot(x-ax, y-ay)\n    d2 = hypot(x-bx, y-by)\n    ans += d+d\n    p1[i], p2[i] = d-d1, d-d2\n\nbeg[0] = p1[0]\nfor i in range(1, n):\n    beg[i] = max(beg[i-1], p1[i])\n\nend[n-1] = p1[n-1]\nfor i in range(n-2, -1, -1):\n    end[i] = max(end[i+1], p1[i])\n\nres = 1e220\n\nfor i in range(0, n):\n    res = min(res, min(ans-p2[i]-ex(i), ans-max(p1[i], p2[i])))\n\nprint(res)", "from math import hypot\n\nax, ay, bx, by, tx, ty = map(int, input().split())\n\nn = int(input())\n\nans = 0\n\np1, p2, beg, end = [0]*n, [0]*n, [0]*n, [0]*n\n\ndef pref(x):\n    return beg[x] if x >= 0 else 0\n\ndef suff(x):\n    return end[x] if x < n else 0\n\ndef ex(x):\n    return max(pref(x-1), suff(x+1))\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    d = hypot(x-tx, y-ty)\n    d1 = hypot(x-ax, y-ay)\n    d2 = hypot(x-bx, y-by)\n    ans += d+d\n    p1[i], p2[i] = d-d1, d-d2\n\nbeg[0] = p1[0]\nfor i in range(1, n):\n    beg[i] = max(beg[i-1], p1[i])\n\nend[n-1] = p1[n-1]\nfor i in range(n-2, -1, -1):\n    end[i] = max(end[i+1], p1[i])\n\nres = 1e220\n\nfor i in range(0, n):\n    res = min(res, min(ans-p2[i]-ex(i), ans-max(p1[i], p2[i])))\n\nprint(res)", "from math import sqrt\n\nax, ay, bx, by, tx, ty = map(int, input().split())\n\nn = int(input())\n\nans = 0\n\np1, p2, beg, end = [0]*n, [0]*n, [0]*n, [0]*n\n\ndef sqr(x):\n    return x*x\n\ndef pref(x):\n    return beg[x] if x >= 0 else 0\n\ndef suff(x):\n    return end[x] if x < n else 0\n\ndef ex(x):\n    return max(pref(x-1), suff(x+1))\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    d = sqrt(sqr(x-tx) + sqr(y-ty))\n    d1 = sqrt(sqr(x-ax) + sqr(y-ay))\n    d2 = sqrt(sqr(x-bx) + sqr(y-by))\n    ans += d+d\n    p1[i], p2[i] = d-d1, d-d2\n\nbeg[0] = p1[0]\nfor i in range(1, n):\n    beg[i] = max(beg[i-1], p1[i])\n\nend[n-1] = p1[n-1]\nfor i in range(n-2, -1, -1):\n    end[i] = max(end[i+1], p1[i])\n\nres = 1e220\n\nfor i in range(0, n):\n    res = min(res, min(ans-p2[i]-ex(i), ans-max(p1[i], p2[i])))\n\nprint(res)", "from math import sqrt\n\nax, ay, bx, by, tx, ty = map(int, input().split())\n\nn = int(input())\n\nans = 0\n\np1, p2, beg, end = [0]*n, [0]*n, [0]*n, [0]*n\n\ndef sqr(x):\n    return x*x\n\ndef pref(x):\n    return beg[x] if x >= 0 else 0\n\ndef suff(x):\n    return end[x] if x < n else 0\n\ndef ex(x):\n    return max(pref(x-1), suff(x+1))\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    d = sqrt(sqr(x-tx) + sqr(y-ty))\n    d1 = sqrt(sqr(x-ax) + sqr(y-ay))\n    d2 = sqrt(sqr(x-bx) + sqr(y-by))\n    ans += d+d\n    p1[i], p2[i] = d-d1, d-d2\n\nbeg[0] = p1[0]\nfor i in range(1, n):\n    beg[i] = max(beg[i-1], p1[i])\n\nend[n-1] = p1[n-1]\nfor i in range(n-2, -1, -1):\n    end[i] = max(end[i+1], p1[i])\n\nres = 1e220\n\nfor i in range(0, n):\n    res = min(res, min(ans-p2[i]-ex(i), ans-max(p1[i], p2[i])))\n\nprint(res)", "import math, sys\n\nax,ay,bx,by,tx,ty = list(map(float, input().split()))\nn = int(input())\n\ndef dist(x1,y1,x2,y2):\n    return math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2))\n\ncost = 0\nbottleCoord = []\nfor i in range(0,n):\n    x,y = list(map(float, input().split()))\n    cost += 2*dist(tx,ty,x,y)\n    bottleCoord.append((x,y))\n\nasCost = [(0,-1)]\nbsCost = [(0,-1)]\n\nfor i in range(0,n):\n    asCost.append((dist(ax,ay,bottleCoord[i][0],bottleCoord[i][1]) - dist(bottleCoord[i][0],bottleCoord[i][1],tx,ty),i))\n    bsCost.append((dist(bx,by,bottleCoord[i][0],bottleCoord[i][1]) - dist(bottleCoord[i][0],bottleCoord[i][1],tx,ty),i))\n\nasCost.sort()\nbsCost.sort()\ncostTmpIndiv = sys.maxsize\n\nfor i in range(0,min(len(asCost),5)):\n    for j in range(0, min(len(bsCost),5)):\n        if (asCost[i][1] != bsCost[j][1]):\n            costTmpIndiv = min(costTmpIndiv, asCost[i][0]+bsCost[j][0])\n\nprint(cost + costTmpIndiv)\n", "from math import sqrt\n\nax, ay, bx, by, tx, ty = list(map(int, input().split()))\nn = int(input())\nd = 0\nmina = (2*10**9,0,0)\nmina2 = (2*10**9,0,0)\nminb = (2*10**9,0,0)\nminb2 = (2*10**9,0,0)\nfor _ in range(n):\n  x, y = list(map(int, input().split()))\n  dt = sqrt((x-tx)**2+(y-ty)**2)\n  d += 2*dt\n  da = sqrt((ax-x)**2+(ay-y)**2)\n  dat = (da-dt,x,y)\n  if dat[0] < mina[0]:\n    mina, mina2 = dat, mina\n  elif dat[0] < mina2[0]:\n    mina2 = dat\n  db = sqrt((bx-x)**2+(by-y)**2)\n  dbt = (db-dt,x,y)\n  if dbt[0] < minb[0]:\n    minb, minb2 = dbt, minb\n  elif dbt[0] < minb2[0]:\n    minb2 = dbt\nif n >= 2 and mina[0] < 0 and minb[0] < 0:\n  if mina[1] != minb[1] or mina[2] != minb[2]:\n    d += mina[0] + minb[0]\n  elif mina2[0] < 0 and minb2[0] < 0:\n    d += min(mina[0]+minb2[0],mina2[0]+minb[0])\n  elif mina2[0] < 0:\n    d += min(mina[0],mina2[0]+minb[0])\n  elif minb2[0] < 0:\n    d += min(mina[0]+minb2[0],minb[0])\n  else:\n    d += min(mina[0],minb[0])\nelse:\n  d += min(mina[0],minb[0])\nprint(d)\n", "read = lambda : map(int, input().split())\ndef dis(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\nax, ay, bx, by, tx, ty = read()\nn = int(input())\na, b = [], []\nsum = 0\nfor i in range(n):\n    x, y = read()\n    dist = dis(tx, ty, x, y)\n    a.append((dis(ax, ay, x, y) - dist, i))\n    b.append((dis(bx, by, x, y) - dist, i))\n    sum += dist * 2\na.sort()\nb.sort()\nif n > 1 and a[0][1] == b[0][1]:\n    ans = min(a[0][0], b[0][0], a[0][0] + b[1][0], a[1][0] + b[0][0])\nelse:\n    ans = min(a[0][0], b[0][0])\n    if (n > 1) :\n        ans = min(a[0][0] + b[0][0], ans)\nprint(ans + sum)", "ax,ay,bx,by,tx,ty=list(map(int,input().split()))  #\n\nod=[]  #\nco=[] #\nobjects=int(input())#\nfor i in range(objects):#\n    x,y=list(map(int,input().split()))#\n    od.append(((tx-x)**2+(ty-y)**2)**0.5)#\n    co.append([x,y])#\n\n\nasaved=[0,0]#\nasaved2=[0,0]#\nma=-(10**25)\n\nfor i in range(objects):\n    x=co[i][0]\n    y=co[i][1]\n    saved=od[i]-((ax-x)**2+(ay-y)**2)**0.5\n    ma=max(ma,saved)\n    if saved>asaved[0]:\n        asaved2[0]=asaved[0]\n        asaved2[1]=asaved[1]\n        asaved[0]=saved\n        asaved[1]=i\n    elif saved>asaved2[0]:\n        asaved2[0]=saved\n        asaved2[1]=i\n\n\nbsaved=[0,0]#\nbsaved2=[0,0]#\nmb=-(10**25)\n\nfor i in range(objects):\n    x=co[i][0]\n    y=co[i][1]\n    saved=od[i]-((bx-x)**2+(by-y)**2)**0.5\n    mb=max(mb,saved)\n    if saved>bsaved[0]:\n        bsaved2[1]=bsaved[1]\n        bsaved2[0]=bsaved[0]\n        bsaved[0]=saved\n        bsaved[1]=i\n    elif saved>bsaved2[0]:\n        bsaved2[0]=saved\n        bsaved2[1]=i\n\n\ntot=2*sum(od)#\nif mb<0 and ma<0:\n    tot-=max(mb,ma)\nelif bsaved[1]==asaved[1]:\n    tot-=max(asaved[0]+bsaved2[0],asaved2[0]+bsaved[0])\nelse:\n    tot-=asaved[0]+bsaved[0]\n\nprint(tot)#\n", "read = lambda : list(map(int, input().split()))\n\ndef dis(x1, y1, x2, y2):\n\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n\n\nax, ay, bx, by, tx, ty = read()\n\nn = int(input())\n\na, b = [], []\n\nsum = 0\n\nfor i in range(n):\n\n    x, y = read()\n\n    dist = dis(tx, ty, x, y)\n\n    a.append((dis(ax, ay, x, y) - dist, i))\n\n    b.append((dis(bx, by, x, y) - dist, i))\n\n    sum += dist * 2\n\na.sort()\n\nb.sort()\n\nif n > 1 and a[0][1] == b[0][1]:\n\n    ans = min(a[0][0], b[0][0], a[0][0] + b[1][0], a[1][0] + b[0][0])\n\nelse:\n\n    ans = min(a[0][0], b[0][0])\n\n    if (n > 1) :\n\n        ans = min(a[0][0] + b[0][0], ans)\n\nprint(ans + sum)\n\n\n\n# Made By Mostafa_Khaled\n", "import math\n\nax, ay, bx, by, tx, ty = [int(coord) for coord in input().split()]\nn = int(input())\nx ,y = [], []\n\nminDis = 0\ndiff1 = []\ndiff2 = []\n\nfor i in range(n):\n        xi, yi = [int(coord) for coord in input().split()]\n        x.append(xi)\n        y.append(yi)\n        disBin = math.sqrt((xi-tx)**2 + (yi-ty)**2)\n        diff1.append(( math.sqrt((ax-xi)**2 + (ay-yi)**2) - disBin, i))\n        diff2.append(( math.sqrt((bx-xi)**2 + (by-yi)**2) - disBin, i))\n        minDis += 2 * disBin\n\ndiff1.sort()\ndiff2.sort()\n\nans = min(minDis + diff1[0][0], minDis + diff2[0][0])\n\nif diff1[0][1] != diff2[0][1]:\n        ans = min(ans, minDis + diff1[0][0] + diff2[0][0])\n\nelif n>1:\n        ans = min(ans, minDis + diff1[0][0] + diff2[1][0])\n        ans = min(ans, minDis + diff1[1][0] + diff2[0][0])\n\nprint(ans)", "import math\nR = lambda: map(int, input().split())\nax, ay, bx, by, tx, ty = R()\nn = int(input())\ndp = [[0] * (n + 1) for i in range(4)]\nfor i in range(n):\n    x, y = R()\n    da, db, dt = ((x - ax) ** 2 + (y - ay) ** 2) ** 0.5, ((x - bx) ** 2 + (y - by) ** 2) ** 0.5, ((x - tx) ** 2 + (y - ty) ** 2) ** 0.5\n    dp[0][i] = dp[0][i - 1] + dt * 2\n    dp[1][i] = min(dp[0][i - 1] + db + dt, dp[1][i - 1] + dt * 2 if i else math.inf)\n    dp[2][i] = min(dp[0][i - 1] + da + dt, dp[2][i - 1] + dt * 2 if i else math.inf)\n    dp[3][i] = min(dp[1][i - 1] + da + dt, dp[2][i - 1] + db + dt, dp[3][i - 1] + dt * 2) if i else math.inf\nprint(min(dp[3][n - 1], dp[2][n - 1], dp[1][n - 1]))", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/16/20\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\nimport math\n\n\ndef dist(posa, posb):\n    return math.sqrt((posa[0] - posb[0]) ** 2 + (posa[1] - posb[1]) ** 2)\n\n\ndef solve(posa, posb, posc, bottles, N):\n    if N == 1:\n        print(min(dist(posa, bottles[0]), dist(posb, bottles[0])) + dist(posc, bottles[0]))\n        return\n    \n    bottledist = [dist(posc, b) for b in bottles]\n    da = [(dist(posa, bottles[i]) - bottledist[i], i) for i in range(N)]\n    db = [(dist(posb, bottles[i]) - bottledist[i], i) for i in range(N)]\n    da.sort()\n    db.sort()\n    d = 2 * sum(bottledist)\n    ans = min(d + da[0][0], d + db[0][0])\n    if da[0][1] != db[0][1]:\n        ans = min(ans, d + da[0][0] + db[0][0])\n    else:\n        e = min(da[0][0] + db[1][0], da[1][0] + db[0][0])\n        ans = min(ans, d + e)\n    \n    print(ans)\n    \n    \nax, ay, bx, by, cx, cy = list(map(int, input().split()))\nN = int(input())\nbottles = []\nfor i in range(N):\n    x, y = list(map(int, input().split()))\n    bottles.append((x, y))\n\nsolve((ax, ay), (bx, by), (cx, cy), bottles, N)\n", "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/16/20\n\n\"\"\"\n\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\nimport math\n\n\ndef dist(posa, posb):\n    return math.sqrt((posa[0] - posb[0]) ** 2 + (posa[1] - posb[1]) ** 2)\n\n\ndef solve(posa, posb, posc, bottles, N):\n    if N == 1:\n        print(min(dist(posa, bottles[0]), dist(posb, bottles[0])) + dist(posc, bottles[0]))\n        return\n    \n    bottledist = [dist(posc, b) for b in bottles]\n    da = [(dist(posa, bottles[i]) - bottledist[i], i) for i in range(N)]\n    db = [(dist(posb, bottles[i]) - bottledist[i], i) for i in range(N)]\n    d = 2 * sum(bottledist)\n    \n    heapq.heapify(da)\n    heapq.heapify(db)\n    a0 = heapq.heappop(da)\n    b0 = heapq.heappop(db)\n    ans = min(d + a0[0], d + b0[0])\n    if a0[1] != b0[1]:\n        ans = min(ans, d + a0[0] + b0[0])\n    else:\n        a1 = heapq.heappop(da)\n        b1 = heapq.heappop(db)\n        e = min(a0[0] + b1[0], a1[0] + b0[0])\n        ans = min(ans, d + e)\n    \n    print(ans)\n    \n    \nax, ay, bx, by, cx, cy = list(map(int, input().split()))\nN = int(input())\nbottles = []\nfor i in range(N):\n    x, y = list(map(int, input().split()))\n    bottles.append((x, y))\n\nsolve((ax, ay), (bx, by), (cx, cy), bottles, N)\n", "ax,ay,bx,by,tx,ty=list(map(int,input().split()))\nn=int(input())\na,b=[],[]\nres=0\nfor i in range(n):\n    x, y=list(map(int, input().split()))\n    lt=((tx-x)*(tx-x)+(ty-y)*(ty-y))**0.5\n    la=((ax-x)*(ax-x)+(ay-y)*(ay-y))**0.5\n    lb=((bx-x)*(bx-x)+(by-y)*(by-y))**0.5\n    a+=[(la-lt,i)]\n    b+=[(lb-lt,i)]\n    res+=lt\na.sort();b.sort()\nres*=2\nif a[0][1]==b[0][1] and n>1:\n    res+=min(a[0][0],b[0][0],a[0][0]+b[1][0],a[1][0]+b[0][0])\nelse: \n    if a[0][1]==b[0][1]:\n        res+=min(a[0][0],b[0][0])\n    else:\n        res+=min(a[0][0],b[0][0],a[0][0]+b[0][0])\nprint(res)\n"]