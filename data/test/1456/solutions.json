["import sys\nn = int(input())\ns = [input() for i in range(n)]\na = [[1] * (2 * n) for i in range(2 * n)]\n\nfor i in range(n):\n    for j in range(n):\n        if s[i][j] != 'o':\n            continue\n        for x in range(n):\n            for y in range(n):\n                if s[x][y] == '.':\n                    a[n + x - i][n + y - j] = 0\nfor i in range(n):\n    for j in range(n):\n        if s[i][j] != 'x':\n            continue\n        c = 0\n        for x in range(n):\n            for y in range(n):\n                if s[x][y] == 'o' and a[n + i - x][n + j - y] == 1:\n                    c = 1\n                    break\n            if c == 1:\n                break\n        if c == 0:\n            print('NO')\n            return\nprint('YES')\nfor i in range(1, 2 * n):\n    for j in range(1, 2 * n):\n        if i == n and j == n:\n            print('o', end='')\n        elif a[i][j] == 1:\n            print('x', end='')\n        else:\n            print('.', end='')\n    print('')\n\n", "import sys\nf = sys.stdin\n\nn = int(f.readline().strip())\nfig = []\nplace = []\nfor i in range(n):            \n    place.append([-1]*(n)) \n\nfor i in range(n):\n    s = f.readline().strip()\n    for k in range(len(s)):\n        if s[k]=='o':\n            fig.append((k, i))\n            place[k][i] = -1\n        elif s[k]=='x':\n            place[k][i] = 1\n        elif s[k]=='.': \n            place[k][i] = 0\nhh = []\nfor i in range(2*n-1):            \n    hh.append([1]*(2*n-1)) \n\nres = True\nfor fi in range(len(fig)):\n    x = fig[fi][0] \n    y = fig[fi][1]\n    for i in range(n):\n        for k in range(n):\n            r = place[k][i]\n            if r==0:\n                dx = k - x + n-1\n                dy = i - y + n-1\n                #print(x, y, k, i, dx, dy)\n                hh[dx][dy] = 0\n\n        \nfor i in range(n):\n    for k in range(n):\n        r = place[k][i]\n        if r==1:\n            beat = False\n            for fi in range(len(fig)):\n                dx = k - fig[fi][0] + n-1\n                dy = i - fig[fi][1] + n-1\n                \n                if hh[dx][dy]!=0:\n                    beat = True\n            if not beat:\n                res = False\nhh[n-1][n-1] = -1\nif res:                \n    print('YES')\n    for i in range(2*n-1):\n        s = ''\n        for k in range(2*n-1):\n            if hh[k][i]==0:\n                s += '.' \n            elif hh[k][i]==-1:\n                s += 'o'\n            else:\n                s += 'x'\n        print(s)\nelse:\n    print('NO')", "def main():\n    n = int(input())\n    d = [input() for i in range(n)]\n    \n    figures = []\n    for i in range(n):\n        for j in range(n):\n            if d[i][j] == 'o':\n                figures.append((i, j))\n    \n    result = [['x' for i in range(2 * n - 1)] for j in range(2 * n - 1)]\n    result[n - 1][n - 1] = 'o'\n    for i in range(n):\n        for j in range(n):\n            if d[i][j] == '.':\n                for x, y in figures:\n                    dx, dy = x - i, y - j\n                    result[n - 1 - dx][n - 1 - dy] = '.'\n    for i in range(n):\n        for j in range(n):\n            if d[i][j] == 'x':\n                for x, y in figures:\n                    dx, dy = x - i, y - j\n                    if result[n - 1 - dx][n - 1 - dy] == 'x':\n                        break\n                else:\n                    print(\"NO\")\n                    return\n    print(\"YES\")\n    for i in result:\n        print(''.join(i))\n                        \n\n\nmain()\n", "def main():\n    n = int(input())\n    d = [input() for i in range(n)]\n    \n    figures = []\n    for i in range(n):\n        for j in range(n):\n            if d[i][j] == 'o':\n                figures.append([i, j])\n    \n    result = [['x' for i in range(2 * n - 1)] for j in range(2 * n - 1)]\n    result[n - 1][n - 1] = 'o'\n    for i in range(n):\n        for j in range(n):\n            if d[i][j] == '.':\n                for x, y in figures:\n                    dx, dy = x - i, y - j\n                    result[n - 1 - dx][n - 1 - dy] = '.'\n    for i in range(n):\n        for j in range(n):\n            if d[i][j] == 'x':\n                for x, y in figures:\n                    dx, dy = x - i, y - j\n                    if result[n - 1 - dx][n - 1 - dy] == 'x':\n                        break\n                else:\n                    print(\"NO\")\n                    return\n    print(\"YES\")\n    for i in result:\n        print(''.join(i))\n                        \n\n\nmain()\n", "\nimport datetime\nimport sys\nimport copy\nimport functools\nimport collections\nimport itertools\n\nclass Solution:\n    def __init__(self):\n        self.N = 0\n        self.boards = None\n\n    def test(self):\n        pass\n\n    def readInput(self):\n        self.N = int(input())\n        self.boards = []\n        for i in range(self.N):\n            self.boards.append(list(input()))\n\n    def readMockInput(self):\n        pass\n\n    def solve(self):\n        N = self.N\n        impossibleMoves = set()\n        chesses = list()\n        notAttacked = list()\n        # record all impossible moves\n        for r in range(N):\n            for c in range(N):\n                if self.boards[r][c] == 'o':\n                    chesses.append((r, c))\n                elif self.boards[r][c] == '.':\n                    notAttacked.append((r, c))\n        # print(chesses)\n        # print(notAttacked)\n        for r, c in chesses:\n            for i, j in notAttacked:\n                impossibleMoves.add((i-r, j-c))\n        # print(impossibleMoves)\n\n        # check whether there are any conflicts\n        # reboard = [['.' for c in range(N)] for r in range(N)]\n        # for r, c in chesses:\n        #     reboard[r][c] = 'o'\n\n        startTime = datetime.datetime.now()\n\n        for i in range(N):\n            for j in range(N):\n                if self.boards[i][j] == 'o':\n                    continue\n                for r, c in chesses:\n                    if (i-r, j-c) not in impossibleMoves:\n                        if self.boards[i][j] == '.':\n                            print('NO')\n                            return\n                        self.boards[i][j] = 'v'\n\n\n        # for r, c in chesses:\n        #     for i in range(-N+1, N):\n        #         for j in range(-N+1, N):\n        #             # much faster than 2 for\n        #             if (i, j) not in impossibleMoves:\n        #                 nr = r + i\n        #                 nc = c + j\n        #                 if 0 <= nr < N and 0 <= nc < N and self.boards[nr][nc] != 'o':\n        #                     # reboard[nr][nc] = 'x'\n        #\n        #                     if self.boards[nr][nc] == '.':\n        #                         print('NO')\n        #                         return\n        #                     self.boards[nr][nc] = 'v'\n        if sum([row.count('x') for row in self.boards]) > 0:\n            print('NO')\n            return\n        # for r in range(N):\n        #     for c in range(N):\n        #         if self.boards[r][c] != reboard[r][c]:\n        #             print('NO')\n        #             return\n        sys.stderr.write('Check Cost: {}\\n'.format(datetime.datetime.now()-startTime))\n\n\n\n        rn = 2*N-1\n        res = [['.' for c in range(rn)] for r in range(rn)]\n        res[N-1][N-1] = 'o'\n        for i in range(-N+1, N):\n            for j in range(-N+1, N):\n                if not (i == 0 and j == 0) and (i, j) not in impossibleMoves:\n                    res[i+N-1][j+N-1] = 'x'\n        print('YES')\n        for row in res:\n            print(''.join(row))\n\n\n\nsolution = Solution()\nsolution.readInput()\nstartTime = datetime.datetime.now()\nsolution.solve()\nsys.stderr.write('Time Cost:{}\\n'.format(datetime.datetime.now() - startTime))", "import sys\nn = int(input())\ns = [input() for i in range(n)]\na = [[1] * (2 * n) for i in range(2 * n)]\n\nfor i in range(n):\n    for j in range(n):\n        if s[i][j] != 'o':\n            continue\n        for x in range(n):\n            for y in range(n):\n                if s[x][y] == '.':\n                    a[n + x - i][n + y - j] = 0\nfor i in range(n):\n    for j in range(n):\n        if s[i][j] != 'x':\n            continue\n        c = 0\n        for x in range(n):\n            for y in range(n):\n                if s[x][y] == 'o' and a[n + i - x][n + j - y] == 1:\n                    c = 1\n                    break\n            if c == 1:\n                break\n        if c == 0:\n            print('NO')\n            return\nprint('YES')\nfor i in range(1, 2 * n):\n    for j in range(1, 2 * n):\n        if i == n and j == n:\n            print('o', end='')\n        elif a[i][j] == 1:\n            print('x', end='')\n        else:\n            print('.', end='')\n    print('')", "n = int(input())\nb = [input() for i in range(n)]\nh = [[False] * n for i in range(n)]\np = [[i, j] for i in range(n) for j in range(n) if b[i][j] == 'o']\nv = [['.'] * (2 * n - 1) for i in range(2 * n - 1)]\ndef on(x, y):\n    return x in range(n) and y in range(n)\ndef proc(dx, dy):\n    for pi in p:\n        if on(pi[0] + dx, pi[1] + dy) and b[pi[0] + dx][pi[1] + dy] == '.':\n            return\n    v[dx + n - 1][dy + n - 1] = 'x'\n    for pi in p:\n        if on(pi[0] + dx, pi[1] + dy):\n            h[pi[0] + dx][pi[1] + dy] = True\nfor i in range(-(n - 1), n):\n    for j in range(-(n - 1), n):\n        proc(i, j)\nif any(b[i][j] == 'x' and not h[i][j] for i in range(n) for j in range(n)):\n    print('NO')\nelse:\n    print('YES')\n    v[n - 1][n - 1] = 'o'\n    for vi in v:\n        print(''.join(vi))\n", "import math\nfrom sys import stdin\nfrom math import ceil\nimport sys\n\ndef __starting_point():\n    n = int(input())\n    table = list()\n    # newT = list()\n    for i in range(n):\n        table.append(input())\n    # for i in range(2 * n):\n        # newT.append(1)\n   # table = [input() for i in range(n)]\n    newT = [[1] * (2 * n) for i in range(2 * n)]\n\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] != 'o':\n                continue\n            for a in range(n):\n                for b in range(n):\n                    if table[a][b] == '.':\n                        newT[n + a - i][n + b - j] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] != 'x':\n                continue\n            piece = 0\n            for a in range(n):\n                for b in range(n):\n                    if table[a][b] == 'o' and newT[n + i -a][n + j - b] == 1:\n                        piece = 1\n                        break\n                if piece == 1:\n                    break\n            if piece == 0:\n                print(\"NO\")\n                return\n    print(\"YES\")\n    for i in range( 1, 2 * n):\n        for j in range( 1, 2 * n):\n            if i == n and j == n:\n                print('o', end = '')\n            elif newT[i][j] == 1:\n                print('x', end = '')\n            else:\n                print('.', end = '')\n        print('')\n\n\n\n__starting_point()", "import math\nfrom sys import stdin\nfrom math import ceil\nimport sys\n\ndef __starting_point():\n    n = int(input())\n    table = list()\n    newT = list()\n    for i in range(n):\n        table.append(input())\n    for i in range(2 * n):\n         newT.append([1] * (2 * n))\n    #table = [input() for i in range(n)]\n    #newT = [[1] * (2 * n) for i in range(2 * n)]\n\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] != 'o':\n                continue\n            for a in range(n):\n                for b in range(n):\n                    if table[a][b] == '.':\n                        newT[n  - i + a ][n  - j + b] = 0\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] != 'x':\n                continue\n            piece = 0\n            for a in range(n):\n                for b in range(n):\n                    if table[a][b] == 'o' and newT[n + i -a][n + j - b] == 1:\n                        piece = 1\n                        break\n                if piece == 1:\n                    break\n            if piece == 0:\n                print(\"NO\")\n                return\n    print(\"YES\")\n    for i in range( 1, 2 * n):\n        for j in range( 1, 2 * n):\n            if i == n and j == n:\n                print('o', end = '')\n            elif newT[i][j] == 1:\n                print('x', end = '')\n            else:\n                print('.', end = '')\n        print('')\n\n\n\n__starting_point()", "from sys import stdin\n\nn = int(stdin.readline())\n\nboard = []\n\nfor x in range(n):\n    board.append(list(stdin.readline().strip()))\n\nmoves = {y:{x:True for x in range(-n+1,n)} for y in range(-n+1,n)}\n\nfor x in range(n):\n    for y in range(n):\n        if board[x][y] == 'o':\n            for a in range(n):\n                for b in range(n):\n                    if board[a][b] == '.':\n                        moves[a-x][b-y] = False\n\nrecreate = [['.' for x in range(n)] for y in range(n)]\n\nfor x in range(n):\n    for y in range(n):\n        if board[x][y] == 'o':\n            recreate[x][y] = 'o'\n            for a in moves:\n                for b in moves:\n                    if moves[a][b]:\n                        if 0 <= x+a < n and 0 <= y+b < n:\n                            if recreate[x+a][y+b] != 'o':\n                                recreate[x+a][y+b] = 'x'\n\nif board == recreate:\n    print('YES')\n\n    for x in range(-n+1,n):\n        l = []\n        for y in range(-n+1,n):\n            if moves[x][y]:\n                l.append('x')\n            else:\n                l.append('.')\n        if x == 0:\n            l[n-1] = 'o'\n        print(''.join(l))\nelse:\n    print('NO')\n", "import sys\nfin = sys.stdin\nn = int(fin.readline())\nma = [[None]] * n\nfor i in range(0, n):\n    aux = fin.readline()\n    aux = aux[:-1]\n    ma[i] = list(aux)\nr = []\nfor i in range(0, 2 * n - 1):\n    r.append(None)\n    r[i] = []\n    for j in range(0, 2 * n - 1):\n        r[i].append('x')\nfor i in range(0, n):\n    for j in range(0, n):\n        if ma[i][j] == 'o':\n            for ii in range(0, n):\n                for jj in range(0, n):\n                    if ma[ii][jj] == '.':\n                        r[n - 1 + ii - i][n - 1 + jj - j] = '.'\ng = 1\nr[n - 1][n - 1] = 'o'\nfor i in range(0, n):\n    for j in range(0, n):\n        if ma[i][j] == 'x':\n            cg = 0\n            for ii in range(0, n):\n                for jj in range(0, n):\n                    if ma[ii][jj] == 'o' and r[n - 1 - ii + i][n - 1 - jj + j] == 'x':\n                        cg = 1\n            if cg != 1:\n                g = 0\nif g != 1:\n    print('NO')\nelse:\n    print('YES')\n    for line in r:\n        print(''.join(line))\n"]