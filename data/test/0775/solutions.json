["from sys import stdin, stdout\n\nn, m, k = map(int, stdin.readline().split())\nposition = set(list(map(int, stdin.readline().split())))\n\nstart = 1\nfor i in range(k):\n    if start in position:\n        break\n    else:\n        a, b = map(int, stdin.readline().split())\n        if a == start:\n            start = b\n        elif b == start:\n            start = a\n\nstdout.write(str(start))", "(n, m, k) = list(map(int, input().split(' ')))\nhs = list(map(int, input().split(' ')))\n\nholes = set(hs)\n\npos = 1\n\nfor i in range(k):\n    if pos in holes:\n        break\n    (u, v) = list(map(int, input().split(' ')))\n    if pos == u:\n        pos = v\n    elif pos == v:\n        pos = u\n\nprint(pos)\n\n", "#!/usr/bin/env python3\n\n\ndef solve():\n    n, m, k = list(map(int, input().split()))\n    h = set(map(int, input().split()))\n\n    pos = 1\n\n    for i in range(k):\n        u, v = list(map(int, input().split()))\n        if pos != u:\n            u, v = v, u\n        if pos == u:\n            if u not in h:\n                pos = v\n\n    print(pos)\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "import sys\nn, m, k = map(int, input().split())\na = [int(i) - 1 for i in input().split()]\nb = [0] * n\nfor i in a:\n    b[i] = 1\nnow = 0\nfor i in range(k):\n    if b[now]:\n        print(now + 1)\n        return    \n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    if now == x:\n        now = y\n    elif now == y:\n        now = x\n    \nprint(now + 1)", "n,m,k=map(int,input().split())\nl=set(map(int,input().split()))\ni=1\nfor _ in range(k):\n    u,v=map(int,input().split())\n    if i in l: break\n    if i==u: i=v\n    elif i==v: i=u\nprint(i)", "n, m, k = list(map(int, input().split()))\nH = set(map(int, input().split()))\n\nbone_pos = 1\n\nif bone_pos not in H:\n    for i in range(k):\n        u, v = list(map(int, input().split()))\n        if bone_pos == u:\n            bone_pos = v\n        elif bone_pos == v:\n            bone_pos = u\n\n        if bone_pos in H:\n            break\n\nprint(bone_pos)\n", "import sys\n\ndef solve():\n    n, m, k = map(int, sys.stdin.readline().split())\n    h = [int(i) - 1 for i in sys.stdin.readline().split()]\n\n    is_hole = [False] * n\n    for hi in h:\n        is_hole[hi] = True\n\n    pos = 0\n\n    if is_hole[pos]:\n        print(pos + 1)\n        return\n\n    for i in range(k):\n        u, v = map(int, sys.stdin.readline().split())\n        u, v = u-1, v-1\n\n        if u != pos and v != pos:\n            continue\n\n        if u != pos:\n            pos = u\n        elif v != pos:\n            pos = v\n\n        if is_hole[pos]:\n            print(pos + 1)\n            return\n\n    print(pos + 1)\n\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef __starting_point():\n    solve()\n__starting_point()", "n, m, k = list(map(int, input().split()))\nholes = list(map(int, input().split()))\n\nis_hole = [False for i in range(n)]\n\nfor i in holes:\n    is_hole[i - 1] = True\n\nbone = 0\n\nif is_hole[0]:\n    print(1)\nelse:\n    was = False\n    for i in range(k):\n        a, b = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        if a == bone:\n            bone = b\n        elif b == bone:\n            bone = a\n        if is_hole[bone]:\n            was = True\n            print(bone + 1)\n            break\n    if not was:\n        print(bone + 1)\n", "n, m, k = list(map(int, input().split()))\notv = set(input().split())\nx = '1'\nfor _ in range(k):\n    if x in otv:\n        break\n    o, p = input().split()\n    if x == o:\n        x = p\n    elif x == p:\n        x = o\nprint(x)\n", "n,m,k=list(map(int,input().split()))\nh={int(x) for x in input().split()}\np=1\nfor t in range(k):\n  u,v=list(map(int,input().split()))\n  if p in h: break\n  elif p==u: p=v\n  elif p==v: p=u\n\nprint(p)\n", "n, m, k = list(map(int, input().split()))\nd = {}\nif m > 0:\n    for x in map(int, input().split()):\n        d[x] = True\nball = 1\nfor i in range(k):\n    if ball in d:\n        break\n    x, y = list(map(int, input().split()))\n    ball = x if ball == y else y if ball == x else ball\nprint(ball)\n", "from sys import stdin\n\nn, m, k = list(map(int, stdin.readline().split()))\nholes = set(map(int, stdin.readline().split()))\n\npos = 1\nif pos not in holes:\n    for i in range(k):\n        u, v = list(map(int, stdin.readline().split()))\n        if u == pos:\n            pos = v\n            if pos in holes:\n                break\n        elif v == pos:\n            pos = u\n            if pos in holes:\n                break\n\nprint(pos)\n", "#!/usr/bin/env python3\nfrom sys import stdin,stdout\n\n\ndef ri():\n    return list(map(int, stdin.readline().split()))\n\nn, m, k = ri()\nh = [0 for i in range(n+1)]\nhh = list(ri())\nfor i in range(m):\n    h[hh[i]] = 1\np = 1\nfor i in range(k):\n    if h[p] == 1:\n        print(p)\n        return\n    a, b = ri()\n    if p in [a, b]:\n        if a == p:\n            p = b\n        else:\n            p = a\n\nprint(p)\n\n\n", "n,m,k = list(map(int,input().split()))\nhole = set(map(int,input().split()))\nfall = 0\ncurrent = 1\nfor i in range(k):\n\tif fall == 0 and current in hole:\n\t\tfall = current\n\tu,v = list(map(int,input().split()))\n\tif u == current:\n\t\tcurrent = v\n\telif v == current:\n\t\tcurrent = u\nif fall != 0:\n\tprint(fall)\nelse:\n\tprint(current)\n\n", "n,m,k = list(map(int,input().split()))\nhole = [False for _ in range(n)]\nfor h in input().split():\n    hh = int(h)-1\n    hole[hh] = True\n\nbone = 0\nfallen = hole[0]\n\nfor _ in range(k):\n    a,b = list(map(int,input().split()))\n    a -= 1\n    b -= 1\n    if not fallen:\n        if bone == a:\n            bone = b\n        elif bone == b:\n            bone = a\n        fallen = hole[bone]\n\nprint(bone+1)\n", "iters = int(input().split()[2])\n\nholes = {int(x) for x in input().split()}\n\ncurrent = 1\n\nfor _ in range(iters):\n    src, dest = (int(x) for x in input().split())\n    if current in holes:\n        break\n    if current == src:\n        current = dest\n    elif current == dest:\n        current = src\nprint(current)", "a,b,c = list(map(int,input().split()))\ns = set(map(int,input().split()))\nans = 1\nif ans not in s:\n    for i in range(0,c):\n        x,y = list(map(int,input().split()))\n        if ans==x:\n            ans=y\n        elif ans==y:\n            ans=x\n        if ans in s:\n            break\nprint(ans)\n", "import sys\n    \nn, m, k = list(map(int, sys.stdin.readline().strip().split(\" \")))\n\nholes = set(map(int, sys.stdin.readline().strip().split(\" \")))\n    \npos = 1\nfor i in range(k):\n    u, v = list(map(int, sys.stdin.readline().strip().split(\" \")))\n        \n    if pos not in holes:        \n        if pos == u:\n            pos = v\n        elif pos == v:\n            pos = u\n                \nprint(pos)\n", "from bisect import bisect_left\n\nn,m,k = map(int, input().split(' '))\nholes = list(map(int, input().split(' ')))\ncurr = 1\nfound = False\n\nholes = sorted(holes)\nH = len(holes)\n\n\ndef bins(x, bot, top=None):\n    top = top if top is not None else H\n    pos = bisect_left(holes, x, bot, top)\n    return pos != top and holes[pos] == x\n\n\nif curr in holes:\n    print(curr)\n    found = True\nelse:\n    for a0 in range(k):\n        u, v = map(int, input().split(' '))\n        if u == curr:\n            curr = v\n            if bins(curr, 0):\n                print(curr)\n                found = True\n                break\n        elif v == curr:\n            curr = u\n            if bins(curr, 0):\n                print(curr)\n                found = True\n                break\n\nif not found:\n    print(curr)", "n, m, k = [int(s) for s in input().split(\" \")]\nhole_locations = [int(s) for s in input().split(\" \")]\n# print(hole_locations)\nhole_array = [0] * n\nfor hole in hole_locations:\n    hole_array[hole-1] += 1\n# print(hole_array)\n# location of bone\nbone = 1\nif hole_array[0] == 1:\n    print(bone)\nelse:\n    for i in range(1, k + 1):\n      # swaps.append([int(s) for s in input().split(\" \")])\n      u, v = [int(s) for s in input().split(\" \")]\n      if u == bone:\n          bone = v\n          if hole_array[v-1] == 1:\n              break\n      elif v == bone:\n          bone = u\n          if hole_array[u-1] == 1:\n              break\n    print(bone)", "n, m, k = map(int, input().split())\n\nh = set(map(int, input().split()))\nanswer = 1\nif answer in h:\n    print(answer)\nelse:\n    for i in range(k):\n        u, v = map(int, input().split())\n        if u == answer:\n            answer = v\n        elif v == answer:\n            answer = u\n        else:\n            continue\n        if answer in h:\n            break\n    print(answer)", "n, m, k = map(int, input().split())\ndata = set(map(int, input().split()))\ncur = 1\nfor i in range(k):\n  if cur in data: break\n  u, v = map(int, input().split())\n  if u == cur: cur = v\n  elif v == cur: cur = u\nprint(cur)", "n,m,k=list(map(int,input().split()))\nip=list(map(int,input().split()))\nholes=[0 for i in range(n+1)]\nfor i in ip:\n    holes[i]=1\npos=1\nb=0\nif holes[1]==1:\n    b=1\nfor i in range(k):\n    u,v=list(map(int,input().split()))\n    if u==pos and b==0:\n        pos=v\n        if holes[v]==1:\n            b=1\n    elif v==pos and b==0:\n        pos=u\n        if holes[u]==1:\n            b=1\nprint(pos)\n", "n,m,k=map(int,input().split())\nh=set([i for i in input().split()])\nans=chk='1'\n\nwhile k:\n    k=k-1\n    if ans in h:\n        break\n    x,y=map(str,input().split())\n    if x==ans:\n        ans=y\n    elif y==ans:\n        ans=x\nprint(ans)", "n, m, k = [int(x) for x in input().strip().split(' ')]\nholes = set([int(x) for x in input().strip().split(' ')])\nbone = 1\nfall = bone in holes\ni = 0\nwhile i < k and not fall:\n    a, b = [int(x) for x in input().strip().split(' ')]\n    if a == bone:\n        bone = b\n    elif b == bone:\n        bone = a\n    fall = bone in holes\n    i += 1\n\nprint(bone)"]