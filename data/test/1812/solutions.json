["def dlog(x, n):\n  bigMod = 5 ** n\n  ans = [None, 0, 1, 3, 2][x % 5]\n  val = 2 ** ans % bigMod\n  mod, phi = 5, 4\n  phiVal = 2 ** phi % bigMod\n  for i in range(2, n + 1):\n    nextMod = mod * 5\n    while val % nextMod != x % nextMod:\n      val = val * phiVal % bigMod\n      ans += phi\n    phi *= 5\n    phiVal = (phiVal *\n              phiVal % bigMod *\n              phiVal % bigMod *\n              phiVal % bigMod *\n              phiVal % bigMod)\n    mod = nextMod\n  return ans\n\ndef main():\n  inp = input()\n  n = len(inp)\n  a = int(inp)\n  for m in range(n + 1):\n    l = a * 10 ** m\n    x, mod = l, 2 ** (n + m)\n    if x % mod != 0:\n      x += mod - x % mod\n    if x % 5 == 0:\n      x += mod\n    if x < l + 10 ** m:\n      assert x % mod == 0 and x % 5 != 0\n      x = x // mod\n      mod = 5 ** (n + m)\n      print(n + m + dlog(x % mod, n + m))\n      return\n  assert False\n\ndef __starting_point():\n  cnt = int(input())\n  for i in range(cnt):\n    main()\n__starting_point()", "\n\ndef dlog(x, n):\n    bigMod = 5 ** n\n    ans = [None, 0, 1, 3, 2][x % 5]\n    val = 2 ** ans % bigMod\n    mod, phi = 5, 4\n    phiVal = 2 ** phi % bigMod\n    for i in range(2, n + 1):\n        nextMod = mod * 5\n        while val % nextMod != x % nextMod:\n            val = val * phiVal % bigMod\n            ans += phi\n        phi *= 5\n        phiVal = (phiVal *\n                  phiVal % bigMod *\n                  phiVal % bigMod *\n                  phiVal % bigMod *\n                  phiVal % bigMod)\n        mod = nextMod\n    return ans\n\n\ndef main():\n    inp = input()\n    n = len(inp)\n    a = int(inp)\n\n    for m in range(n + 1):\n        l = a * 10 ** m\n        x, mod = l, 2 ** (n + m)\n        if x % mod != 0:\n            x += mod - x % mod\n        if x % 5 == 0:\n            x += mod\n        if x < l + 10 ** m:\n            x = x // mod\n            mod = 5 ** (n + m)\n            print(n + m + dlog(x % mod, n + m))\n            return\n\ndef __starting_point():\n    cnt = int(input())\n    for i in range(cnt):\n        main()\n\n__starting_point()", " #Power substring 913G\ndef dlog(x, n):\n  bigMod = 5 ** n\n  ans = [None, 0, 1, 3, 2][x % 5]\n  val = 2 ** ans % bigMod\n  mod, phi = 5, 4\n  pval = 2 ** phi % bigMod\n  for i in range(2, n + 1):\n    nextMod = mod * 5\n    while val % nextMod != x % nextMod:\n      val = val * pval % bigMod\n      ans += phi\n    phi *= 5\n    pval = (pval * pval % bigMod * pval % bigMod *\n              pval % bigMod *\n              pval % bigMod)\n    mod = nextMod\n  return ans\n\ndef main():\n  inp = input()\n  n = len(inp)\n  a = int(inp)\n  for m in range(n + 1):\n    l = a * 10 ** m\n    x, mod = l, 2 ** (n + m)\n    if x % mod != 0:\n      x += mod - x % mod\n    if x % 5 == 0:\n      x += mod\n    if x < l + 10 ** m:\n      assert x % mod == 0 and x % 5 != 0\n      x = x // mod\n      mod = 5 ** (n + m)\n      print(n + m + dlog(x % mod, n + m))\n      return\n  assert False\n\ndef __starting_point():\n  cnt = int(input())\n  for i in range(cnt):\n    main()\n__starting_point()", "def dlog(x, n):\n  bigMod = 5 ** n\n  ans = [None, 0, 1, 3, 2][x % 5]\n  val = 2 ** ans % bigMod\n  mod, phi = 5, 4\n  phiVal = 2 ** phi % bigMod\n  for i in range(2, n + 1):\n    nextMod = mod * 5\n    while val % nextMod != x % nextMod:\n      val = val * phiVal % bigMod\n      ans += phi\n    phi *= 5\n    phiVal = (phiVal *\n              phiVal % bigMod *\n              phiVal % bigMod *\n              phiVal % bigMod *\n              phiVal % bigMod)\n    mod = nextMod\n  return ans\n\ndef main():\n  inp = input()\n  n = len(inp)\n  a = int(inp)\n  for m in range(n + 1):\n    l = a * 10 ** m\n    x, mod = l, 2 ** (n + m)\n    if x % mod != 0:\n      x += mod - x % mod\n    if x % 5 == 0:\n      x += mod\n    if x < l + 10 ** m:\n      assert x % mod == 0 and x % 5 != 0\n      x = x // mod\n      mod = 5 ** (n + m)\n      print(n + m + dlog(x % mod, n + m))\n      return\n  assert False\n\ndef __starting_point():\n  cnt = int(input())\n  for i in range(cnt):\n    main()\n__starting_point()"]