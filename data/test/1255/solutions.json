["from collections import *\nimport sys\nprint(Counter(sys.stdin.readlines()).most_common(1)[0][1])\n", "n=int(input())\nmaxx=1\nx=input().split()\nA=[x]\nans=1\nfor i in range(n-1):\n    y=input().split()\n    if(y==A[-1]):\n        ans+=1\n    else:\n        ans=1\n    A.append(y)\n    if(ans>maxx):\n        maxx=ans\n\nprint(maxx)\n", "\nt = {}\nfor i in range(int(input())):\n    a, b = map(int, input().split())\n    c = a * 60 + b\n    t[c] = t.get(c, 0) + 1\n                   \nprint(max(t.values()))", "3\n\ndef readln(): return tuple(map(int, input().split()))\n\nn, = readln()\ncnt = {}\nfor _ in range(n):\n    hm = readln()\n    cnt[hm] = cnt.get(hm, 0) + 1\nprint(max(cnt.values()))\n", "n = int(input())\nmaxx = 1\nx = input().split()\nA = [x]\nres = 1\nfor i in range(n - 1):\n    y = input().split()\n    if y == A [-1]:\n        res += 1\n    else:\n        res = 1\n    A.append(y)\n    if res > maxx:\n        maxx = res\n\nprint(maxx)", "n=int(input())\nl=[]\nwhile n:\n  m=[int(i) for i in input().split(\" \")]\n  l.append((m[0],m[1]))\n  n-=1\nd={}\nfor i in l:\n  d[i]=0\nfor i in l:\n  d[i]+=1\nprint(max(d.values()))", "n = int(input())\n\ntime_count_pairs = {}\n\nfor i in range(n) :\n\ttime = input()\n\tif not time_count_pairs.get(time) :\n\t\ttime_count_pairs[time] = 1\n\telse :\n\t\ttime_count_pairs[time] += 1\n\ncount_max = 0\n\nfor i in list(time_count_pairs.values()) :\n\tif i > count_max :\n\t\tcount_max = i\n\nprint(count_max)\n", "checkouts = 0\nmax_checkouts = 0\ntime = \"\"\n\ncustomers = int(input())\n\nfor i in range(customers):\n    next_time = input()\n    if next_time == time:\n        checkouts += 1\n    else:\n        max_checkouts = max(max_checkouts, checkouts)\n        checkouts = 0\n        time = next_time\n    \nmax_checkouts = max(max_checkouts, checkouts)\nprint(max_checkouts + 1)", "n = int(input())\nd = {}\nfor i in range(n):\n    a = tuple(map(int, input().split()))\n    d[a] = d.get(a, 0) + 1\nprint(max(d.values()))", "n = int(input())\nans = j = 1\nprev = []\nfor i in range(n):\n    new = list(map(int, input().split()))\n    if new == prev:\n        j += 1\n    else:\n        ans = max(ans, j)\n        j = 1\n    prev = new\nprint(max(ans, j))\n", "from collections import defaultdict\ndic = defaultdict(int)\n\nfor i in range(int(input())):\n    a, b = list(map(int, input().split()))\n    dic[60 * a + b] += 1\n\nprint(max(dic.values()))\n\n", "dic = {}\n\nfor i in range(int(input())):\n    a = input()\n    dic[a] = dic.get(a, 0) + 1\n\nprint(max(dic.values()))", "def input_persons() -> dict:\n    n = int(input())\n    result = {\n        'length': n,\n        'hour': [],\n        'minute': []\n    }\n\n    for _ in range(n):\n        (h, m) = map(int, input().split())\n        result['hour'].append(h)\n        result['minute'].append(m)\n\n    return result\n\n\ndef count_cash(arrivals: dict) -> int:\n    min_cash = 0\n    i = 0\n\n    while (i < arrivals['length']):\n        j = i\n\n        while j < arrivals['length'] - 1 and \\\n                        arrivals['hour'][j + 1] == arrivals['hour'][j] and \\\n                        arrivals['minute'][j + 1] == arrivals['minute'][j]:\n            j += 1\n\n        cash = j - i + 1\n\n        if cash > min_cash:\n            min_cash = cash\n\n        i = j + 1\n\n    return min_cash\n\nprint(count_cash(input_persons()))", "n = int(input())\narrivals_count = {}\n\nfor _ in range(n):\n    arrival = input()\n    arrivals_count[arrival] = arrivals_count.get(arrival, 0) + 1\n\nprint(max(arrivals_count.values()))", "n = int(input())\n\nr = 1\n\nlast = ''\nfor i in range(n):\n    inp = input()\n    if inp == last:\n        x += 1\n    else:\n        x = 1\n    r = max(r, x)\n    last = inp\n\nprint(r)\n", "from collections import Counter\na=int(input())\nsa=[]\nstring=''\nbad=[]\nfor x in range(a):\n    string=''\n    sa=input().split(' ')\n    string+=sa[0]\n    string+='+'\n    string+=sa[1]\n    bad.append(string)\na=Counter(bad).most_common(1)\nprint(a[0][1])\n", "n = int(input())\n\ncash = {}\n\nfor i in range(n):\n\tkey = input()\n\tif(key in cash):\n\t\tcash[key] += 1\n\telse:\n\t\tcash[key] = 1\n\nmaxm = 0\n\nfor key in cash:\n\tif (cash[key] > maxm):\n\t\tmaxm = cash[key]\n\nprint(maxm)\n\n\n", "import sys\n\nn = int (eval(input ()))\n\nc = 1\na = [0]*60*24\n\nfor i in range (n):\n    nums = list (map (int, input ().split ()))\n    a[nums[0]*60 + nums[1]] += 1\n\nfor i in range (60*24):\n    c = max (c, a[i])\n\nprint (c)\n", "val = 0\nc = 0\nprev = ''\nfor i in range(int(input())):\n    cur = input()\n    if cur == prev:\n        c += 1\n    else:\n        c = 1\n    if c > val:\n        val = c\n    prev = cur\nprint(val)", "dict = {}\nfor x in range(int(input())):\n    s = input()\n    if not s in dict.keys():\n        dict[s] = 1\n    else:\n        dict[s] += 1\n        \nprint(max(dict.values()))", "import sys\n\nn = int(sys.stdin.readline())\n\nfirst_p = (sys.stdin.readline()).split()\ncount = 1\nvmax = 0\n\nfor i in range(n - 1):\n    second_p = (sys.stdin.readline()).split()\n    if(first_p[0] == second_p[0] and first_p[1] == second_p[1]):\n        count += 1\n    else:\n        if(count > vmax):\n            vmax = count\n        count = 1\n        \n    first_p = second_p;   \n\nif(count > vmax):\n    vmax = count    \n\nprint(vmax)\n    \n", "n=int(input())\nmax=1\n\na,b=input().split(\" \")\ncounter=1\nfor i in range(n-1):\n    c,d=input().split(\" \")\n    if (a==c and b==d):\n        counter+=1\n        if counter>max:max=counter\n    else:\n        a=c\n        b=d\n        counter=1\n\nprint (max)\n", "n=int(input())\nmax=1\n\na=input()\ncounter=1\nfor i in range(n-1):\n    c=input()\n    if (a==c):\n        counter+=1\n        if counter>max:max=counter\n    else:\n        a=c\n        counter=1\n\nprint (max)\n", "c = int(input())\ns = {}\nfor i in range(c):\n    newI = input()\n    if newI not in s:\n        s[newI] = 1\n    else:\n        s[newI] += 1\nprint(max(s.values()))", "n = int(input())\nans = 0\nlast = ''\ncur = 0\nfor i in range(n):\n\ts = input()\n\tif s != last:\n\t\tlast = s\n\t\tcur = 0\n\tcur += 1\n\tans = max(ans, cur)\nprint(max(ans, cur))\n"]