["from collections import defaultdict\n\n\nclass SumDefaultdict(defaultdict):\n\n    def __init__(self, *args, **kwargs) -> None:\n        super().__init__(int, *args, **kwargs)\n        self.mx = max(self.values())\n        self.mx_sum = sum(c for c, v in list(self.items()) if v == self.mx)\n\n    def sumadd(self, map):\n        for bb, val in list(map.items()):\n            if val > 0:\n                self[bb] += val\n                if self[bb] > self.mx:\n                    self.mx = self[bb]\n                    self.mx_sum = bb\n                elif self[bb] == self.mx:\n                    self.mx_sum += bb\n\ndef go():\n    n = int(input())\n    c = list(map(int, input().split()))\n\n    edges = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        a, b = [int(x) - 1 for x in input().split()]\n        edges[a].append(b)\n        edges[b].append(a)\n\n    depth = [0] + [None] * (n - 1)\n    parent = [None] * n\n    que = [0]\n    index = 0\n    while index < len(que):\n        curr = que[index]\n        for b in edges[curr]:\n            if depth[b] is None:\n                depth[b] = depth[curr] + 1\n                parent[b] = curr\n                que.append(b)\n        index += 1\n\n    order = sorted(((depth[i], i) for i in range(n)), reverse=True)\n\n    cols = [SumDefaultdict({c[i]: 1}) for i in range(n)]\n    answer = [0] * n\n    for d, i in order:\n        children = sorted([cols[b] for b in edges[i] if depth[b] > d], key=len, reverse=True)\n        if children:\n            for j in range(1, len(children)):\n                children[0].sumadd(children[j])\n            children[0].sumadd({c[i]: 1})\n            cols[i] = children[0]\n        # max_val = max(cols[i].values())\n        answer[i] = cols[i].mx_sum\n\n    print(' '.join(map(str, answer)))\n\n\ngo()\n", "def main():\n    import sys\n    from collections import deque\n    input = sys.stdin.readline\n\n    N = int(input())\n    color = list(map(int, input().split()))\n    color.insert(0, 0)\n    adj = [[] for _ in range(N+1)]\n    for _ in range(N-1):\n        a, b = list(map(int, input().split()))\n        adj[a].append(b)\n        adj[b].append(a)\n\n    que = deque()\n    que.append(1)\n    seen = [-1] * (N+1)\n    seen[1] = 0\n    par = [0] * (N+1)\n    child = [[] for _ in range(N+1)]\n    seq = []\n    while que:\n        v = que.popleft()\n        seq.append(v)\n        for u in adj[v]:\n            if seen[u] == -1:\n                seen[u] = seen[v] + 1\n                par[u] = v\n                child[v].append(u)\n                que.append(u)\n    seq.reverse()\n\n    cnt = [{color[i]: 1} for i in range(N+1)]\n    cnt_size = [1] * (N+1)\n    dom_num = [1] * (N+1)\n    ans = [color[i] for i in range(N+1)]\n    for v in seq:\n        big = cnt[v]\n        size_big = cnt_size[v]\n        for u in child[v]:\n            small = cnt[u]\n            size_small = cnt_size[u]\n            if size_big < size_small:\n                small, big = big, small\n                dom_num[v] = dom_num[u]\n                ans[v] = ans[u]\n            size_big += size_small\n            for c in small:\n                if c not in big:\n                    big[c] = small[c]\n                else:\n                    big[c] += small[c]\n                cnt_size[v] += small[c]\n                if big[c] > dom_num[v]:\n                    dom_num[v] = big[c]\n                    ans[v] = c\n                elif big[c] == dom_num[v]:\n                    ans[v] += c\n        cnt_size[v] = size_big\n        cnt[v] = big\n    print(*ans[1:])\n    #print(child)\n    #print(cnt)\n    #print(cnt_size)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nfrom collections import Counter\n\nn = int(input())\ncolor = list(map(int, input().split()))\nadj = [[] for _ in range(n)]\n\nfor _ in range(n-1):\n    u, v = list(map(int, sys.stdin.readline().split()))\n    u -= 1\n    v -= 1\n    adj[u].append(v)\n    adj[v].append(u)\n\ncount = [Counter() for _ in range(n)]\nmax_cnt = [0]*n\ndp = [0]*n\n\nstack = [0]\npar = [-1]*n\norder = []\nwhile stack:\n    v = stack.pop()\n    order.append(v)\n    for d in adj[v]:\n        if d != par[v]:\n            stack.append(d)\n            par[d] = v\n\nfor v in reversed(order):\n    child = [i for i in adj[v] if i != par[v]]\n    child.sort(key=lambda v: -len(count[v]))\n\n    if child:\n        dp[v] = dp[child[0]]\n        max_cnt[v] = max_cnt[child[0]]\n        count[v] = count[child[0]]\n        for d in child[1:]:\n            for k, val in list(count[d].items()):\n                count[v][k] += val\n                if count[v][k] > max_cnt[v]:\n                    dp[v] = k\n                    max_cnt[v] = count[v][k]\n                elif count[v][k] == max_cnt[v]:\n                    dp[v] += k\n\n    count[v][color[v]] += 1\n    if count[v][color[v]] > max_cnt[v]:\n        dp[v] = color[v]\n        max_cnt[v] = count[v][color[v]]\n    elif count[v][color[v]] == max_cnt[v]:\n        dp[v] += color[v]\n\n    if par[v] != -1:\n        stack.append(par[v])\n\nprint(*dp)\n"]