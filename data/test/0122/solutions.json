["def solve(n,a):\n    tot=0\n    for i in range(n):\n        tot+=a[i]\n    diffs = [] #alla suffix - prefix diffs[i]=prefix-suffix om delas innan element i\n    diffs.append(-tot)\n    for i in range(n):\n        tot-=2*a[i]\n        diffs.append(-tot)\n        if tot==0:\n            return (\"YES\")\n    for i in range(n):\n        diffmake=2*a[i]\n        j=binary(diffs,diffmake)\n        if j>i and j!=-1:\n            return (\"YES\")\n        j=binary(diffs,-diffmake)\n        if i>=j and j!=-1:\n            return (\"YES\")\n    return (\"NO\")\n\n\ndef binary(a,value):\n    hi=len(a)\n    lo=-1\n    while (lo+1<hi):\n        mi=(lo+hi)//2\n        if a[mi]==value:\n            return mi\n        if a[mi]<value:\n            lo=mi\n        else:\n            hi=mi\n    return -1\n\n\nn=int(input())\na = input().split()\nfor i in range (n):\n    a[i]=int(a[i])\nprint(solve(n,a))\n", "def solve():\n    n = int(input())\n    #n, w = map(int, input().split())\n    a = list(map(int, input().split()))\n    #a = [list(map(int, input().split())) for _ in range(n)]\n    ok = 0\n    Su = sum(a)\n    di = dict()\n    di[0] = 1\n    su = 0\n    for i in range(n):\n        su += a[i]\n        if di.get(a[i] * 2, 0) == 0:\n            di[a[i] * 2] = 1\n        if di.get(su - Su + su, 0) == 0:\n            pass\n        else:\n            ok = 1\n    di.clear()\n    di[0] = 1\n    su = 0\n    for i in range(-1, -n - 1, -1):\n        su += a[i]\n        if di.get(a[i] * 2, 0) == 0:\n            di[a[i] * 2] = 1\n        if di.get(su - Su + su, 0) == 0:\n            pass\n        else:\n            ok = 1\n    if ok:\n        print('YES')\n    else:\n        print('NO')\n\ndef __starting_point():\n    solve()\n__starting_point()", "def mp():  return list(map(int,input().split()))\ndef lt():  return list(map(int,input().split()))\ndef pt(x):  print(x)\ndef ip():  return input()\ndef it():  return int(input())\ndef sl(x):  return [t for t in x]\ndef spl(x): return x.split()\ndef aj(liste, item): liste.append(item)\ndef bin(x):  return \"{0:b}\".format(x)\ndef listring(l): return ' '.join([str(x) for x in l])\ndef ptlist(l): print(' '.join([str(x) for x in l]))\n\nn = it()\na = lt()\nk = 0\nleft = 0\nright = sum(a)\nbl = False\ndict = {}\nfor i in range(n):\n    if a[i] in dict:\n        (ma,mi) = dict[a[i]]\n        dict[a[i]] = (max(ma,i),min(mi,i))\n    else:\n        dict[a[i]] = (i,i)\nwhile k < n and not bl:\n    if right == left:\n        bl = True\n    elif right > left:\n        x = (right-left)/2\n        if x == int(x) and int(x) in dict and dict[int(x)][0] >= k:\n            bl = True\n        else:\n            right -= a[k]\n            left += a[k]\n            k += 1\n    else:\n        x = (left-right)/2\n        if x == int(x) and int(x) in dict and dict[int(x)][1] <= k-1:\n            bl = True\n        else:\n            right -= a[k]\n            left += a[k]\n            k += 1\nif bl:\n    pt(\"YES\")\nelse:\n    pt(\"NO\")\n            \n            \n", "def solve(a):\n    s = sum(a)\n    if s % 2 == 1:\n        return False\n    s //= 2\n\n    elements = set()\n    cs = 0\n    n = len(a)\n\n    for i in range(n):\n        cs += a[i]\n        if cs == s:\n            return True\n\n        elements.add(a[i])\n\n        if i > 0 and cs > s and cs - s in elements:\n            return True\n\n    return False\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    if solve(a):\n        print(\"YES\")\n    elif solve(a[::-1]):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\ndef __starting_point():\n    # import sys\n    # sys.stdin = open(\"in.txt\")\n    main()\n\n__starting_point()", "\n# Python Interpreter Version: Python 3.5.2\n#\n# Note: Educational Codeforces Round 21\n\ndef divPos(arr):\n    sumArr = sum(arr)\n    targetSum = sumArr / 2\n    if sumArr % 2 != 0:\n        return False\n    lArr = set()\n    sumlArr = 0\n    for i in range(len(arr)):\n        lArr.add(arr[i])\n        sumlArr += arr[i]\n        if sumlArr == targetSum or (sumlArr > targetSum and sumlArr - targetSum in lArr):\n            return True\n    return False\n\ndef __starting_point():\n    n = input()\n    arr = [int(x) for x in input().split()]\n    # arr = [2,2,3,4,5]\n    if divPos(arr) or divPos(arr[::-1]):\n        print('YES')\n    else:\n        print('NO')\n\n__starting_point()", "import math\nimport re\n\ndef f(arr, n):\n    a = set()\n    x = 0\n    y = sum(arr)\n    res = 'NO'\n    for i in range(n):\n        x += arr[i]\n        y -= arr[i]\n        a.add(arr[i])\n        q = x - y\n\n        if q % 2 != 0:\n            continue\n        elif q == 0 or (q > 0 and q / 2 in a):\n            res = 'YES'\n            break\n    return res\n\nn = int(input())\narr = list(map(int, input().split()))\n\nres = f(arr, n)\nif res == 'NO':\n    arr = arr[::-1]\n    res = f(arr, n)\n\nprint(res)\n\n    # arr = list(map(int, input().split()))\n# res = 0\n# a = {math.pow(2, i) for i in range(35)}\n# for i in range(n-1):\n#     for j in range(i+1,n):\n#         if arr[i] + arr[j] % 2 % 2 % 2 % 2 % 2 in a:\n#             res += 1\n#\n# print(res)\n\n\n# arr = list(map(int, input().split()))\n# m = int(input())\n# spis = list(map(int, input().split()))\n#\n# arr1 = sorted(arr, reverse=True)\n# a = [n - arr1.index(arr[el - 1]) for el in spis]\n# print(' '.join(map(str, a)))\n", "import sys\nfrom itertools import accumulate\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n\n    S = sum(a)\n\n    if S & 1:\n        print('NO')\n        return\n\n    f_a = dict()\n    l_a = dict()\n\n    for i in range(n):\n        if a[i] not in f_a:\n            f_a[a[i]] = i\n\n    for i in range(n - 1, -1, -1):\n        if a[i] not in l_a:\n            l_a[a[i]] = i\n\n    ps = [0] + list(accumulate(a))\n    S //= 2\n\n    for k in range(1, n + 1):\n        x = S - ps[k]\n\n        if x == 0:\n            print('YES')\n            return\n        elif x > 0:\n            if x in l_a and k <= l_a[x]:\n                print('YES')\n                return\n        else:\n            x *= -1\n            \n            if x in f_a and f_a[x] < k:\n                print('YES')\n                return\n\n    print('NO')\n\n\ndef __starting_point():\n    solve()\n__starting_point()", "import sys\nfrom itertools import accumulate\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n\n    S = sum(a)\n\n    if S & 1:\n        print('NO')\n        return\n\n    S //= 2\n\n    ap = set()\n    ps = [0] + list(accumulate(a))\n\n    for i in range(1, n + 1):\n        x = ps[i] - S\n        ap.add(a[i - 1])\n\n        if x == 0 or x in ap:\n            print('YES')\n            return\n\n    ap = set()\n    a = a[::-1]\n    ps = [0] + list(accumulate(a))\n\n    for i in range(1, n + 1):\n        x = ps[i] - S\n        ap.add(a[i - 1])\n\n        if x == 0 or x in ap:\n            print('YES')\n            return\n\n    print('NO')\n\ndef __starting_point():\n    solve()\n__starting_point()", "n = int(input())\narr = [int(x) for x in input().split()]\nif n==1:\n\tprint(\"NO\")\n\treturn\ns = sum(arr)\nsp = 0\nss = s\nsetq = {}\nsetp = {}\nfor i in arr:\n\tsetq[i] = setq.get(i,0)+1\n\tsetp[i] = 0\nfor i in range(n):\n\tsp += arr[i]\n\tss -= arr[i]\n\tsetp[arr[i]] += 1\n\tsetq[arr[i]] -= 1\n\tval = ss-sp\n\tif val>0 and not val&1:\n\t\tval //= 2\n\t\tans = setq.get(val,0)\n\t\tif ans>0:\n\t\t\tprint(\"YES\")\n\t\t\treturn\n\telif val<0 and not (-val)&1:\n\t\tval = -val\n\t\tval //= 2\n\t\tans = setp.get(val,0)\n\t\tif ans>0:\n\t\t\tprint(\"YES\")\n\t\t\treturn\n\telif val==0:\n\t\tprint(\"YES\")\n\t\treturn\nprint(\"NO\")\n", "class Dick:\n    def __init__(self):\n        self.s = 0\n        self.m = dict()\n    def add(self, x):\n        self.s += x\n        if x in self.m:\n            self.m[x] += 1\n        else:\n            self.m[x] = 1\n    def rm(self, x):\n        self.s -= x\n        if self.m[x] > 1:\n            self.m[x] -= 1\n        else:\n            self.m.pop(x)\n    def shasei(self):\n        return self.s\n    def ininder(self, x):\n        return x in self.m\ndef ok(a,n):\n    w = sum(a)\n    if w & 1:\n        return 0\n    f = Dick()\n    s = Dick()\n    for x in a:\n        s.add(x)\n    w //= 2\n    for i in range(n):\n        if s.ininder(w - f.shasei()) or f.ininder(w - s.shasei()):\n            return 1\n        f.add(a[i])\n        s.rm(a[i])\n    return 0\n\nn = int(input())\na = list(map(int, input().split()))\nprint(\"YES\" if ok(a,n) else \"NO\")", "n = int(input())\na = list(map(int, input().split()))\ns = sum(a)\n\n\ndef solve(a):\n    rtn = False\n    tmp = 0\n    dic = {}\n    for i in range(n):\n        tmp += a[i]\n        dic[a[i]] = True\n        if tmp == s // 2:\n            rtn = True\n            break\n        elif s // 2 < tmp and (tmp - s // 2) in dic:\n            rtn = True\n            break\n    return rtn\n\n\nif n == 1 or s % 2 == 1:\n    print('NO')\nelif solve(a) or solve(list(reversed(a))):\n    print('YES')\nelse:\n    print('NO')\n", "def solve(n,a):\n    tot=0\n    for i in range(n):\n        tot+=a[i]\n    diffs = [] #alla suffix - prefix diffs[i]=prefix-suffix om delas innan element i\n    diffs.append(-tot)\n    for i in range(n):\n        tot-=2*a[i]\n        diffs.append(-tot)\n        if tot==0:\n            return (\"YES\")\n    for i in range(n):\n        diffmake=2*a[i]\n        j=binary(diffs,diffmake)\n        if j>i and j!=-1:\n            return (\"YES\")\n        j=binary(diffs,-diffmake)\n        if i>=j and j!=-1:\n            return (\"YES\")\n    return (\"NO\")\n\n\ndef binary(a,value):\n    hi=len(a)\n    lo=-1\n    while (lo+1<hi):\n        mi=(lo+hi)//2\n        if a[mi]==value:\n            return mi\n        if a[mi]<value:\n            lo=mi\n        else:\n            hi=mi\n    return -1\n\n\nn=int(input())\na = input().split()\nfor i in range (n):\n    a[i]=int(a[i])\nprint(solve(n,a))", "import sys\nfrom bisect import bisect_left, bisect_right\n\n# sys.stdin = open(\"in\", \"r\")\n\n\ndef find(arr, x):\n    i1 = bisect_left(arr, x)\n    i2 = bisect_right(arr, x)\n    if(i1 < len(arr) and arr[i1] == x):\n        return i1, i2 - 1\n    else:\n        return -1\n\n\nn = int(input())\n\narr = [(i, int(x)) for i, x in enumerate(input().split())]\ncum = []\nfor i in range(n):\n    if(i == 0):\n        cum.append(arr[i][1])\n    else:\n        cum.append(cum[i - 1] + arr[i][1])\n\narr.sort(key=lambda a: a[1])\nvalues = [a[1] for a in arr]\n\nfor i in range(n):\n    a = cum[i]\n    b = cum[n - 1] - cum[i]\n    diff = a - b\n\n    if diff == 0:\n        print(\"YES\")\n        return\n    elif(diff % 2 != 0):\n        break\n    else:\n        diff //= 2\n    idx = find(values, abs(diff))\n\n    if(idx != -1 and ((diff > 0 and arr[idx[0]][0] <= i) or (diff < 0 and arr[idx[1]][0] > i))):\n        print(\"YES\")\n        return\nprint(\"NO\")\n", "from functools import reduce\n\ndef solve():\n    sum_ = a[:]\n    for i in range(1, n):\n        sum_[i] += sum_[i - 1]\n    if (sum_[n - 1] % 2):  return False\n    half = int(sum_[n - 1] / 2)\n    st = set([0])\n    for i in range(n):\n        if sum_[i] >= half and sum_[i] - half in st:\n            return True\n        st.add(a[i])\n\n    sum_ = a[:]\n    for i in range(n - 2, -1, -1):\n        sum_[i] += sum_[i + 1]\n    st = set([0])\n    for i in range(n - 1, -1, -1):\n        if sum_[i] >= half and sum_[i] - half in st:\n            return True\n        st.add(a[i])\n    return False\n\nwhile True:\n    try:\n        n = int(input())\n    except:\n        break\n    a = [int(x) for x in input().split(' ')]\n    print('YES' if solve() else \"NO\")\n    \n", "class Dick:\n    def __init__(self):\n        self.s = 0\n        self.m = dict()\n    def add(self, x):\n        self.s += x\n        if x in self.m:\n            self.m[x] += 1\n        else:\n            self.m[x] = 1\n    def rm(self, x):\n        self.s -= x\n        if self.m[x] > 1:\n            self.m[x] -= 1\n        else:\n            self.m.pop(x)\n    def shasei(self):\n        return self.s\n    def ininder(self, x):\n        return x in self.m\ndef ok(a,n):\n    w = sum(a)\n    if w & 1:\n        return 0\n    f = Dick()\n    s = Dick()\n    for x in a:\n        s.add(x)\n    w //= 2\n    for i in range(n):\n        if s.ininder(w - f.shasei()) or f.ininder(w - s.shasei()):\n            return 1\n        f.add(a[i])\n        s.rm(a[i])\n    return 0\n\nn = int(input())\na = list(map(int, input().split()))\nprint(\"YES\" if ok(a,n) else \"NO\")\n", "n = int(input())\na = list(map(int, input().split()))\ne = set([0])\np = 0\ns = sum(a)\nif s % 2:\n    st = False\nelse:\n    st = True\nif st:\n    st = False\n    for j in range(2):\n        for i in a:\n            p += i\n            e.add(i)\n            if p - s // 2 in e:\n                st = True\n                break\n        e = set([0])\n        p = 0\n        a.reverse()\nprint('YES' if st else 'NO')\n", "def divider(a):\n    t = sum(a)\n    d = []\n    d.append(-t)\n    for i in range(len(a)):\n        t -= 2 * a[i]\n        d.append(-t)\n        if t == 0:\n            return (\"YES\")\n    for i in range(len(a)):\n        s = 2 * a[i]\n        j = binary(d, s)\n        if j > i and j != -1:\n            return (\"YES\")\n        j = binary(d, -s)\n        if i >= j and j != -1:\n            return (\"YES\")\n    return (\"NO\")\n\n\ndef binary(a, value):\n    hi = len(a)\n    lo = -1\n    while (lo + 1 < hi):\n        mi = (lo + hi) // 2\n        if a[mi] == value:\n            return mi\n        if a[mi] < value:\n            lo = mi\n        else:\n            hi = mi\n    return -1\n\n\ndef __starting_point():\n    n = input()\n    a = [int(i) for i in input().split()]\n    print(divider(a))\n\n__starting_point()", "def f(aa, s):\n    d = {a: i for i, a in enumerate(aa)}\n    for i, a in enumerate(aa):\n        if s in d and i <= d[s]:\n            return True\n        s -= a\n        if s <= 0:\n            break\n    return not s\n\n\nn = int(input())\naa = list(map(int, input().split()))\ns, res = sum(aa), False\nif not s & 1 and n > 1:\n    res = f(aa, s // 2)\n    if not res:\n        aa.reverse()\n        res = f(aa, s // 2)\nprint((\"NO\", \"YES\")[res])", "from itertools import *\nn = int(input())\nl = list(map(int, input().split()))\nfor j in range(0, 2):\n\tm = {}\n\tl = [0] + list(reversed(l))\n\tfor i in range(len(l)):\n\t\tm[l[i]] = i\n\tac = list(accumulate(l))\n\ts = ac[-1]\n\tfor i in range(0, len(ac)-1):\n\t\tif ac[i] == s/2 or (s/2-ac[i] in m.keys() and m[s/2-ac[i]] > i):\n\t\t\tprint('YES')\n\t\t\tquit()\nprint('NO')", "\n\n\ndef func():\n    n = int(input())\n\n\n    array = []\n    sum = 0\n    for index,number in enumerate(input().split()):\n        num = int(number)\n        array.append(num)\n        sum += num\n\n    if sum%1 ==1:\n        print(\"NO\")\n        return\n    setn = set()\n    sumSub = 0\n    indexdict = {}\n    for indexm,number in enumerate(array):\n        sumSub += number\n\n\n        sum2 = sumSub * 2 - sum\n        if sum2%2 == 1:\n            continue\n        sum2 /= 2\n        setn.add(sum2)\n        indexdict[sum2] = indexm\n\n    i = 0\n    if 0 in setn:\n        print(\"YES\")\n        return\n    while i < n:\n        num = array[i]\n\n        if num in setn and num in indexdict and i < indexdict[num]:\n\n            print(\"YES\")\n            return\n        if -num in setn and -num in indexdict and i > indexdict[-num]:\n            print(\"YES\")\n            return\n        i+=1\n\n    print(\"NO\")\n\nfunc()\n", "#!/usr/bin/env python3\n\nimport sys\nfrom collections import Counter\n\nn = int(input())\na = [int(x) for x in input().split()]\n\ns = sum(a)\nc1 = Counter(a)\nc2 = Counter()\n\ncur = 0\nfor x in a:\n    c1[x] -= 1\n    c2[x] += 1\n    cur += x\n\n    s1 = cur\n    s2 = s - s1\n    if s1 == s2:\n        print('YES')\n        return\n    if (s2 - s1) % 2 == 1:\n        continue\n    if s2 > s1:\n        if c1[(s2 - s1) // 2] > 0:\n            print('YES')\n            return\n    else:\n        if c2[(s1 - s2) // 2] > 0:\n            print('YES')\n            return\n\nprint('NO')\n"]