["def list_input():\n    return list(map(int,input().split()))\ndef map_input():\n    return map(int,input().split())\ndef map_string():\n    return input().split()\n    \na,b,f,k = map_input()\ntot = a*k\ns = 2*a-f\ncur = 0\ncnt = b\ngo = 0\nans = 0\nwhile cur < tot:\n\tgo = 1-go\n\tif(go == 1):\n\t\tif cnt < s and cnt < tot-cur:\n\t\t\tif(cnt < f):\n\t\t\t\tprint(-1)\n\t\t\t\tbreak\n\t\t\tcnt = b\n\t\t\tans += 1\n\t\t\tcnt -= (a-f)\n\t\telse: cnt -= a\t\n\telse:\n\t\tif cnt < a+f and cnt < tot-cur:\n\t\t\tif(cnt < a-f):\n\t\t\t\tprint(-1)\n\t\t\t\tbreak\n\t\t\tcnt = b\n\t\t\tans += 1\n\t\t\tcnt -= (f)\n\t\telse:cnt -= a\t\n\tcur += a\n\t# print(cur,cnt,ans)\t\n\tif(cnt < 0):\n\t\tprint(-1)\n\t\tbreak\nelse:\n\tprint(ans)", "a, b, f, k = [int(i) for i in input().split()]\n\nff = [0]\n\nfor i in range(k):\n    d = f\n    if i % 2 == 1:\n        d = a - f\n    ff.append(i * a + d)\n\nff.append(k * a)\n\nstops = 0\n\nwhile len(ff) > 0:\n    next = 0\n    if ff[0] == k * a:\n        break\n    while ff[next + 1] - ff[0] <= b:\n        next += 1\n        if ff[next] == k * a:\n            break\n    if next == 0:\n        print(\"-1\")\n        return\n    if ff[next] != k * a:\n        stops += 1\n        while next > 0:\n            ff.pop(0)\n            next -= 1\n    else:\n        break\n\nprint(stops)\n", "a, b, f, k = map(int, input().split())\n\nx = 0\ng = b\nfor kk in range(k-1):\n    #print(g)\n    if kk%2==0:\n        d = a + (a-f)\n        if g < d:\n            if g < f:\n                x = -1\n                break\n            x += 1\n            g = b - (a-f)\n            if g < 0:\n                x = -1\n                break\n        else:\n            g -= a\n    else:\n        d = a + f\n        if g < d:\n            if g < a-f:\n                x = -1\n                break\n            x += 1\n            g = b - f\n            if g < 0:\n                x = -1\n                break\n        else:\n            g -= a\n\nif (k-1)%2==0:\n    if g < a:\n        if g < f:\n            x = -1\n        else:\n            x += 1\n            g = b - (a-f)\n            if g < 0:\n                x = -1\nelse:\n    if g < a:\n        if g < a-f:\n            x = -1\n        else:\n            x += 1\n            g = b - f\n            if g < 0:\n                x = -1\n\nprint(x)", "a, b, f, k = list(map(int, input().split()))\nans = 0\nc = b\nif b < f:\n    ans = -1\nelse:\n    c -= f\nfor i in range(k):\n    if ans == -1:\n        break\n    if i % 2 == 0:\n        d = a - f\n    else:\n        d = f\n    if i < k - 1:\n        d *= 2\n    if b < d:\n        ans = -1\n    elif c < d:\n        ans += 1\n        c = b\n    c -= d\n\nprint(ans)\n", "a, b, f, k = list(map(int, input().split()))\nrefill = b\nbusPos = 0\ncounter =0 \n\nshouldPrint = True\nwhile True:\n    # Move to f\n    busPos += f\n    b -= f\n\n    if b < 0:\n        print(-1)\n        shouldPrint = False\n        break\n    \n    if (2 if k > 1 else 1) * (a - f) > b:\n        b = refill\n        counter += 1\n\n    # Move to a\n    busPos += (a - f)\n    b -= (a - f)\n\n    if b < 0:\n        print(-1)\n        shouldPrint = False\n        break\n    \n    k -= 1\n    if k == 0:\n        break\n\n    # Move back to f\n    busPos -= (a - f)\n    b -= (a - f)\n\n    if b < 0:\n        print(-1)\n        shouldPrint = False\n        break\n    \n    if (2 if k > 1 else 1) * f > b:\n        b = refill\n        counter += 1\n\n    # Move back to start\n    busPos -= f\n    b -= f\n\n    if b < 0:\n        print(-1)\n        shouldPrint = False\n        break\n    \n    k -= 1\n    if k == 0:\n        break\n\nif shouldPrint:\n    print(counter)\n\n", "a, b, f, k = map(int, input().split())\n\nif (f > b or a - f > b) or (k > 1 and 2 * (a - f) > b) or (k > 2 and 2 * f > b):\n\tprint(-1)\n\treturn\ncur = b\nans = 0\nfor i in range(k):\n\tif i & 1 == 0:\n\t\tif cur < f:\n\t\t\tcur = b - f\n\t\t\tans += 1\n\t\tif cur >= a:\n\t\t\tcur -= a\n\t\telse:\n\t\t\tans += 1\n\t\t\tcur = b - a + f\n\telse:\n\t\tif cur < a - f:\n\t\t\tcur = b - a + f\n\t\t\tans += 1\n\t\tif cur >= a:\n\t\t\tcur -= a\n\t\telse:\n\t\t\tans += 1\n\t\t\tcur = b - f\nprint(ans)", "a, b, f, k = list(map(int, input().split()))\nnow = b\npath = 0\nans = 0\nfor i in range(k):\n    if path == 0:\n        if i == k - 1 and now >= a:\n            break\n        now -= f\n        if now < 0:\n            print(-1)\n            return\n        if 2 * (a - f) <= now:\n            now -= a - f\n        else:\n            ans += 1\n            now = b - (a - f)\n        path = 1\n    elif path == 1:\n        if i == k - 1 and now >= a:\n            break\n        now -= a - f\n        if now < 0:\n            print(-1)\n            return\n        if 2 * f <= now:\n            now -= f\n        else:\n            ans += 1\n            now = b - f\n        path = 0\nif now < 0:\n    print(-1)\n    return\nprint(ans)\n", "from sys import stdin, stdout\n\na,b,f,k = list(map(int,stdin.readline().rstrip().split()))\n\n\ndirection = 1\ntank = b\nrefuels=0\nposition=0\nif b<f or b<(a-f):\n    possible=False\nelse:\n    possible = True\nwhile k>0 and possible==True:\n    if k==1 and tank>=a:\n        k=0\n    elif k==1:\n        k=0\n        refuels+=1\n    elif position==0:\n        position = f\n        tank-=f\n        direction=1\n    elif position==a:\n        position = f\n        tank-=(a-f)\n        direction=-1\n    elif direction==1:\n        if tank<2*(a-f):\n            tank=b\n            refuels+=1\n            if b<2*(a-f):\n                possible=False\n        else:\n            position = a\n            direction = -1\n            tank -= (a-f)\n            k-=1\n    elif direction==-1:\n        if tank<2*f:\n            refuels+=1\n            tank=b\n            if b<2*f:\n                possible=False\n        else:\n            position = 0\n            direction = 1\n            tank -= f\n            k-=1\nif not possible:\n    print(-1)\nelse:\n    print(refuels)\n        \n", "from sys import stdin, stdout\n\na, b, f, k = map(int, stdin.readline().split())\nans, position = 0, 0\ncurrent = b\nlabel = 1\n\nfor i in range(k):\n    if not position:\n        distance = a + a - f\n        curd = a - f\n        last = a\n        oil = f\n    else:\n        distance = a + f\n        curd = f\n        last = 0\n        oil = a - f\n    \n    if distance <= current or (a <= current and i == k - 1):\n        current -= a\n    elif oil <= current:\n        ans += 1\n        current = b - curd \n    else:\n        current = -1\n        \n    position = last\n    \n    if current < 0:\n        label = 0\n\nif not label:\n    stdout.write('-1')\nelse:\n    stdout.write(str(ans))", "b, max_fuel, f, k = map(int, input().split())\n\nnow_fuel = max_fuel\nans = 0\n\npart_1 = f\npart_2 = b - f\n\nnow_fuel -= part_1\nif now_fuel < 0:\n    print('-1')\n    return\n\nwhile k != 0:\n    if k > 1:\n        if now_fuel < part_2 * 2:\n            ans += 1\n            now_fuel = max_fuel\n        now_fuel -= part_2 * 2\n        k -= 1\n        if now_fuel < 0:\n            print('-1')\n            return\n    else:\n        if now_fuel < part_2:\n            ans += 1\n            now_fuel = max_fuel\n        now_fuel -= part_2\n        k -= 1\n        if now_fuel < 0:\n            print('-1')\n            return\n        break\n\n    if k > 1:\n        if now_fuel < part_1 * 2:\n            ans += 1\n            now_fuel = max_fuel\n        now_fuel -= part_1 * 2\n        k -= 1\n        if now_fuel < 0:\n            print('-1')\n            return\n    else:\n        if now_fuel < part_1:\n            ans += 1\n            now_fuel = max_fuel\n        now_fuel -= part_1\n        k -= 1\n        if now_fuel < 0:\n            print('-1')\n            return\n        break\n\nprint(ans)", "a,b,f,k=[int(i) for i in input().split()]\nif (k>=3):\n    if (f>b or 2*f > b or 2*(a-f) > b):\n        print (-1)\n    else:\n        fuel=0\n        fwd=1\n        rem= b-f\n        while (k!=1):\n            if (fwd==1):\n                if (rem >= 2*(a-f)):\n                    rem= rem- 2*(a-f)\n                else:\n                    rem= b - 2*(a-f)\n                    fuel+=1\n                k-=1\n                fwd=0\n            else:\n                if (rem>= 2*f):\n                    rem= rem -2*f\n                else:\n                    rem= b-2*f\n                    fuel+=1\n                k-=1\n                fwd=1\n        if (fwd==1):\n            if (rem>= (a-f)):\n                print (fuel)\n            else:\n                print (fuel+1)\n        else:\n            if (rem>= f):\n                print (fuel)\n            else:\n                print (fuel+1)\nelif (k==1):\n    if (f>b or (a-f)>b):\n        print (-1)\n    else:\n        if (b>=a):\n            print (0)\n        else:\n            print (1)\nelse:\n    if (f>b or 2*(a-f) >b):\n        print (-1)\n    else:\n        fuel=0\n        rem=b-f\n        if (rem < 2*(a-f)):\n            rem = b- 2*(a-f)\n            fuel+=1\n        else:\n            rem=rem- 2*(a-f)\n        if (rem>=f):\n            print (fuel)\n        else:\n            print (fuel+1)", "a,b,f,k = map(int,input().split())\nim = False\nfuel = b\ncnt = 0\nfor i in range(k):\n\tif(i%2 == 0):\n\t\tif(fuel - f < 0):\n\t\t\tim = True\n\t\t\tbreak\n\t\tif(i < k-1):\n\t\t\tif(fuel - (2*a-f) < 0):\n\t\t\t\tcnt += 1\n\t\t\t\tfuel = b - (a-f)\n\t\t\telse:\n\t\t\t\tfuel -= a\n\t\telse:\n\t\t\tif(fuel - a < 0):\n\t\t\t\tcnt += 1\n\t\t\t\tfuel = b - (a-f)\n\t\t\telse:\n\t\t\t\tfuel -= a\n\telse:\n\t\tif(fuel - (a-f) < 0):\n\t\t\tim = True\n\t\t\tbreak\n\t\tif(i < k-1):\n\t\t\tif(fuel - (a+f) < 0):\n\t\t\t\tcnt += 1\n\t\t\t\tfuel = b - f\n\t\t\telse:\n\t\t\t\tfuel -= a\n\t\telse:\n\t\t\tif(fuel - a < 0):\n\t\t\t\tcnt += 1\n\t\t\t\tfuel = b - f\n\t\t\telse:\n\t\t\t\tfuel -= a\n\tif(fuel < 0):\n\t\tim = True\n\t\tbreak\n\nprint(-1 if im else cnt)", "def solve(a, b, f, k):\n  cur_b = b\n  cur_k = 0\n  refueling_count = 0\n  \n  can_0f = cur_b - f >= 0\n  if not can_0f:\n    return refueling_count, cur_k\n  else:\n    cur_b -= f\n  \n  while cur_k < k:\n    # from f to a now\n    faf_path = 2*(a-f)\n    can_faf = cur_b - faf_path >= 0\n    can_faf_with_refueling = b - faf_path >= 0\n    can_fa = cur_b - (a-f) >= 0\n    can_fa_with_refueling = b- (a-f) >= 0\n    if can_faf and k - cur_k > 1:\n      cur_b = cur_b - faf_path\n      cur_k += 1\n    elif can_faf_with_refueling and k - cur_k > 1:\n      refueling_count += 1\n      cur_b = b - faf_path\n      cur_k += 1\n    elif can_fa:\n      cur_k += 1\n      return refueling_count, cur_k\n    elif can_fa_with_refueling:\n      cur_k += 1\n      refueling_count += 1\n      return refueling_count, cur_k\n    else:\n      return refueling_count, cur_k\n    \n    if cur_k == k:\n      return refueling_count, cur_k\n    \n    # from f to 0 now\n    f0f_path = 2*f\n    can_f0f = cur_b - f0f_path >= 0\n    can_f0f_with_refueling = b - f0f_path >= 0\n    can_f0 = cur_b - f >= 0\n    can_f0_with_refueling = b - f >= 0\n    if can_f0f and k - cur_k > 1:\n      cur_b = cur_b - f0f_path\n      cur_k += 1\n    elif can_f0f_with_refueling and k - cur_k > 1:\n      refueling_count += 1\n      cur_b = b - f0f_path\n      cur_k += 1\n    elif can_f0:\n      cur_k += 1\n      return refueling_count, cur_k\n    elif can_f0_with_refueling:\n      cur_k += 1 \n      refueling_count += 1\n      return refueling_count, cur_k\n    else:\n      return refueling_count, cur_k\n  return refueling_count, cur_k\n    \n  \n# This is so sad code\ndef main():\n  a, b, f, k = map(int, input().split())\n  \n  refueling_count, cur_k = solve(a, b, f, k)\n  if cur_k == k:\n    print(refueling_count)\n  else:\n    print(-1)\nmain()", "#python3\n# utf-8\n\na, b, f, k = (int(x) for x in input().split())\nz = 0\n\ncurr_petrol = b\ncurr_races_made = 0\nans = 0\nz___f = f - z\nf___a = a - f\nif k == 1:\n    if z___f > b or f___a > b:\n        print(-1)\n        return\nelif k == 2:\n    if 2 * f___a > b:\n        print(-1)\n        return\nelse:\n    if 2 * z___f > b or 2 * f___a > b:\n        print(-1)\n        return\n\n#direction, races_made, petrol\ncurr_save = None\nroute = [z___f, f___a, f___a, z___f]\n\nwhile curr_races_made < 2 * k:\n    curr_pos = curr_races_made % 4\n    curr_petrol -= route[curr_pos]\n    curr_races_made += 1\n    if curr_petrol < 0:\n        curr_petrol = b\n        ans += 1\n        curr_races_made = curr_save\n        continue\n    if curr_pos == 0 or curr_pos == 2:\n        curr_save = curr_races_made\n\nprint(ans)\n", "a,b,f,k = map(int, input().split())\n\nans = 0\ncb = b\nfor i in range(k):\n    if i % 2 == 0:\n        if f > cb:\n            print(-1)\n            return\n        else:\n            cb -= f\n            if i != k-1:\n                if cb < 2*(a-f):\n                    ans += 1\n                    cb = b\n                cb -= a-f\n            else:\n                if cb < a-f:\n                    ans += 1\n                    cb = b\n                cb -= a-f\n                if cb < 0:\n                    print(-1)\n                    return\n    else:\n        if a-f > cb:\n            print(-1)\n            return\n        else:\n            cb -= a-f\n            if i != k-1:\n                if cb < 2*f:\n                    ans += 1\n                    cb = b\n                cb -= f\n            else:\n                if cb < f:\n                    ans += 1\n                    cb = b\n                cb -= f\n                if cb < 0:\n                    print(-1)\n                    return\nprint(ans)    ", "a,b,f,k=list(map(int,input().split()))\nfuel=b-f\nc,d=0,[(a-f)<<1,(f)<<1]\nflag=1\nfor i in range(k):\n    if fuel<0:\n        flag=0\n        break\n    dis=d[i&1]*(1 if i!=k-1 else 0.5)\n    if fuel<dis:\n        fuel=b\n        c+=1\n    fuel-=dis\nif fuel<0:\n    flag=0\nprint(c if flag else \"-1\")\n\n", "def main():\n    A, B, F, K = list(map(int, input().split()))\n\n    gas = B\n    refuel = 0\n    i = 1\n    while i <= K:\n        if i % 2:\n            gas -= F\n            if gas >= 0:\n                if K - i > 0 and gas < (A - F) * 2 or \\\n                        K - i == 0 and gas < A - F:\n                    gas = B\n                    refuel += 1\n                gas -= A - F\n        else:\n            gas -= A - F\n            if gas >= 0:\n                if K - i > 0 and gas < F * 2 or \\\n                        K - i == 0 and gas < F:\n                    gas = B\n                    refuel += 1\n                gas -= F\n        if gas < 0:\n            print(-1)\n            return\n        i += 1\n\n    print(refuel)\n\nmain()\n", "def main():\n    a, b, f, k = list(map(int, input().split()))\n    fuels = 0\n    trips = 0\n    pos = 0\n    move = 1\n    gas = b\n\n    while trips < k:\n        if gas < 0:\n            print(-1)\n            return\n        if move == 1:\n            if pos == 0:\n                pos = f\n                gas -= f\n            elif pos == f:\n                needed_gas = (a - f) if trips == k - 1 else 2 * (a - f)\n                if gas < needed_gas:\n                    gas = b\n                    fuels += 1\n                gas -= (a - f)\n                pos = a\n            elif pos == a:\n                trips += 1\n                if trips == k:\n                    break\n                move = -1\n        elif move == -1:\n            if pos == 0:\n                trips += 1\n                if trips == k:\n                    break\n                move = 1\n            elif pos == f:\n                needed_gas = f if trips == k - 1 else 2 * f\n                if gas < needed_gas:\n                    gas = b\n                    fuels += 1\n                pos = 0\n                gas -= f\n            elif pos == a:\n                pos = f\n                gas -= (a - f)\n\n    print(fuels)\n\nmain()\n", "a, b, f, k = list(map(int, input().split()))\n# if 2*f > b or 2*(a - f) > b:\n#     print(-1)\n#     return\nfuel_count = 0\nfuel = b\ni = 0\nfuel -= f\nif fuel < 0:\n    print(-1)\n    return\nwhile True:\n    if fuel >= a - f and i + 1 == k:\n        break\n    if b >= a - f and i + 1 == k:\n        fuel_count += 1\n        break\n    elif fuel < 2*(a - f):\n        fuel = b\n        fuel_count += 1\n        if fuel < 2*(a - f):\n            print(-1)\n            return\n    fuel -= 2*(a - f)\n    i += 1\n    if i == k:\n        break\n    if fuel >= f and i + 1 == k:\n        break\n    if b >= f and i + 1 == k:\n        fuel_count += 1\n        break\n    elif fuel < 2*f:\n        fuel = b\n        fuel_count += 1\n        if fuel < 2*f:\n            print(-1)\n            return\n    fuel -= 2*f\n    i += 1\n    if i == k:\n        break\nprint(fuel_count)\n\n", "a,b,f,k = [int(i) for i in input().split(\" \")]\n#p = 0\nx = f\ny = a - f\noil = b\nresult = 0\nalert = 0\n\n\n\nif k == 1:\n    oil -= x\n    if oil < 0:\n        alert = 1\n    if oil < y:\n        result += 1\n        oil = b\n    oil -= y\n    if oil < 0:\n        alert = 1\nelse:\n    oil -= x\n    if oil < 0:\n        alert = 1\n    if oil < 2*y:\n        result += 1\n        oil = b\n\n    if k == 2:\n        oil -= 2*y\n        if oil < 0:\n            alert = 1\n        if oil < x:\n            result += 1\n            oil = b\n    else:\n        oil -= 2 * y\n        if oil < 0:\n            alert = 1\n        if oil < 2*x:\n            result += 1\n            oil = b\n\nif k > 2:\n    k -= 2\n    for ii in range(int((k-1)/2)):\n        oil -= 2*x\n        if oil < 0:\n            alert = 1\n\n        if oil < 2*y:\n            oil = b\n            result += 1\n        k -= 1\n        oil -= 2*y\n        if oil < 0:\n            alert = 1\n        if oil < 2*x:\n            oil = b\n            result += 1\n        k -= 1\n    if k == 1:\n        oil -= 2 * x\n        if oil < 0:\n            alert = 1\n        if oil < y:\n            oil = b\n            result += 1\n    if k == 2:\n        oil -= 2 * x\n        if oil < 0:\n            alert = 1\n        if oil < 2 * y:\n            oil = b\n            result += 1\n        oil -= 2 * y\n        if oil < x:\n            oil = b\n            result += 1\nif alert == 1:\n    print(-1)\nelse:\n    print(result)", "a, b, f, k = [int(i) for i in input().split()]\n\nff = [0]\n\nfor i in range(k):\n    d = f\n    if i % 2 == 1:\n        d = a - f\n    ff.append(i * a + d)\n\nff.append(k * a)\n\nstops = 0\n\nwhile len(ff) > 0:\n    next = 0\n    if ff[0] == k * a:\n        break\n    while ff[next + 1] - ff[0] <= b:\n        next += 1\n        if ff[next] == k * a:\n            break\n    if next == 0:\n        print(\"-1\")\n        return\n    if ff[next] != k * a:\n        stops += 1\n        while next > 0:\n            ff.pop(0)\n            next -= 1\n    else:\n        break\nprint(stops)", "a, b, f, k = [int(i) for i in input().split()]\n\n##tank = b\n##journeys = 0\n##refuels = 0\n##current = 0\n##while(journeys != k):\n##    print(\"current = %d, tank = %d, refuels = %d, journeys = %d\" % (current, tank, refuels, journeys))\n##    if (tank // a >= k):\n##        print(refuels)\n##        return\n        \n##    if current == 0:\n##        if tank >= a + (a-f):\n##            tank -= a\n##        elif tank >= f and b >= a-f:\n##            refuels += 1\n##            tank = b-(a-f)\n##        else:\n##            break\n##        \n##        current = a\n##        \n##    elif current == a:\n##        if tank >= a + f:\n##            tank -= a\n##        elif tank >= a-f and b >= f:\n##            refuels += 1\n##            tank = b-f\n##        else:\n##            break\n##        \n##        current = 0\n##\n##    journeys += 1\n\nif b < f:\n    print(-1)\n    return\n\njourneys = 0\nprevious = 0\nrefuels1 = 0\ntank = b-f\nwhile(journeys != k): ## necessary? while(True) ?\n    if previous == 0:\n        if tank >= a-f + a*(k-journeys-1):\n            print(refuels1)\n            return\n        if b >= a-f + a*(k-journeys-1):\n            print(refuels1+1)\n            return\n        if tank >= 2*(a-f):\n            tank -= 2*(a-f)\n        elif b >= 2*(a-f):\n            refuels1 += 1\n            tank = b - 2*(a-f)\n        else:\n            print(-1)\n            return\n        \n        journeys += 1\n        previous = a\n        \n    if previous == a:\n        if tank >= f + a*(k-journeys-1):\n            print(refuels1)\n            return\n        if b >= f + a*(k-journeys-1):\n            print(refuels1+1)\n            return\n        if tank >= 2*f:\n            tank -= 2*f\n        elif b >= 2*f:\n            refuels1 += 1\n            tank = b-2*f\n        else:\n            print(-1)\n            return\n        \n        journeys += 1\n        previous = 0\n\nif journeys == k:\n    print(refuels1)\nelse:\n    print(-1)\n\n##journeys = 0\n##previous = 0\n##refuels2 = 1\n##tank = b\n##cant2 = False\n##while(journeys != k):\n##    if previous == 0:\n##        if tank >= a-f + a*(k-journeys-1):\n##            break\n##        if tank >= 2*(a-f):\n##            tank -= 2*(a-f)\n##        elif b >= 2*(a-f):\n##            refuels2 += 1\n##            tank = b - 2*(a-f)\n##        else:\n##            cant2 = True\n##            break\n##        \n##        journeys += 1\n##        previous = a\n##        \n##    if previous == a:\n##        if tank >= f + a*(k-journeys-1):\n##            break\n##        if tank >= 2*f:\n##            tank -= 2*f\n##        elif b >= 2*f:\n##            refuels2 += 1\n##            tank = b-2*f\n##        else:\n##            cant2 = True\n##            break\n##        \n##        journeys += 1\n##        previous = 0\n##\n##if cant1 and not cant2:\n##    print(refuels2)\n##elif not cant1 and cant2:\n##    print(refuels1)\n##elif cant1 and cant2:\n##    print(-1)\n##else:\n##    print(min(refuels1, refuels2))\n\n", "def solve():\n\n    a, b, f, k = [int(st) for st in input().split(\" \")]\n\n    fuel = b\n    location = 0\n    direction = \"right\"\n    fueled = 0\n\n    journeypassed = 0\n    while journeypassed < k:\n\n        #print(\"location:\", location, \", fuel:\", fuel, \", \"+direction)\n\n        if location == 0:\n            if fuel < f:\n                return -1\n            fuel -= f\n            location = f\n            direction = \"right\"\n\n        elif location == a:\n            if fuel < a-f:\n                return -1\n            fuel -= a-f\n            location = f\n            direction = \"left\"\n\n        elif location == f:\n            \n            if k - journeypassed <= 1:\n                if direction == \"left\":\n                    if fuel < f:\n                        fuel = b\n                        fueled += 1\n                    if fuel < f:\n                        return -1\n                    fuel -= f\n                    location = 0\n                    direction = \"right\"\n                else:\n                    if fuel < a-f:\n                        fuel = b\n                        fueled += 1\n                    if fuel < a-f:\n                        return -1\n                    fuel -= a-f\n                    location = a\n                    direction = \"left\"\n                    \n            else:\n                if direction == \"left\":\n                    if fuel < 2*f:\n                        fuel = b\n                        fueled += 1\n                    if fuel < 2*f:\n                        return -1\n                    fuel -= 2*f\n                    direction = \"right\"\n                else:\n                    if fuel < 2*(a-f):\n                        fuel = b\n                        fueled += 1\n                    if fuel < 2*(a-f):\n                        return -1\n                    fuel -= 2*(a-f)\n                    direction = \"left\"\n                    \n            journeypassed += 1\n                    \n\n    return fueled\n\nprint(solve())\n", "a,b,f,k=list(map(int,input().split()))\ni=0\nbi=b\nans=0\nwhile i<k:\n    if f>bi:\n        print(-1)\n        return\n    bi-=f\n    if k-i==1:\n        if a-f>bi:\n            bi=b\n            ans+=1\n        if a-f>b:\n            print(-1)\n            return\n        break\n    i+=1\n    if 2*(a-f)>bi:\n        bi=b\n        ans+=1\n    if 2*(a-f)>b:\n        print(-1)\n        return\n    bi-=2*(a-f)\n    if k-i==1:\n        if f>bi:\n            bi=b\n            ans+=1\n        break\n    if 2*f>bi:\n        bi=b\n        ans+=1\n    if 2*f>b:\n        print(-1)\n        return\n    bi-=f\n    i+=1\nprint(ans)\n    \n", "import sys\ndef solve():\n\tend,full,real_mid,times = map(int,sys.stdin.readline().split())\n\n\toil = full\n\tcnt = 0\n\tfor i in range(times):\n\t\tif i % 2 == 0:\n\t\t\tmid = real_mid\n\t\telse:\n\t\t\tmid = end - real_mid\n\n\t\tif mid > oil:\n\t\t\treturn -1\n\n\t\toil -= mid\n\n\t\tif i != times - 1:\n\t\t\tif (end - mid) * 2 > full:\n\t\t\t\treturn -1\n\t\t\tif (end - mid) * 2 > oil:\n\t\t\t\toil = full\n\t\t\t\tcnt += 1\n\t\telse:\n\t\t\tif end - mid > full:\n\t\t\t\treturn -1\n\t\t\tif end - mid > oil:\n\t\t\t\toil = full\n\t\t\t\tcnt += 1\n\t\toil -= end - mid\n\treturn cnt\n\nprint(solve())"]