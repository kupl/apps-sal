["import numpy as np\nINF = 10**15\ndef solve(n, k, h):\n    dp = np.full((n+1, n+1), INF, dtype=int)\n    dp[0, 0] = 0\n    h = np.array([0] + h, dtype=int)\n    for i, h_i in enumerate(h[1:], 1):\n        t = np.maximum(h_i - h[:i], 0)\n        dp[i,1:] = np.min(dp[:i,:-1]+t[:,None], axis=0)\n    return np.min(dp[:, n-k])\n\nn, k = map(int, input().split())\nh = list(map(int, input().split()))\nprint(solve(n, k, h))", "INF = float(\"inf\")\n\nN, K, *H = map(int, open(0).read().split())\nH = [0] + H\n\nif N == K:\n    print(0)\n    return\n\ndp = [0] + [INF] * N\nfor i in range(1, N - K + 1):\n    dp = [INF] * i + [min(dp[k] + max(0, h - H[k]) for k in range(i - 1, j)) for j, h in enumerate(H[i:], i)]\n\nprint(min(dp))", "import numpy as np\n\nn, k = map(int, input().split())\nh = np.array(input().split(), dtype=np.int)\n\nif k < n:\n  dp = np.zeros((n - k, n), dtype=np.int)\n  dp[0] = h\n  for i in range(n - k - 1):\n    for j in range(i + 1, n):\n      dp[i+1, j] = np.min(dp[i][i:j] + np.maximum(h[j] - h[i:j], 0))\n  print(dp[n-k-1, n-k-1:].min())\nelse:\n  print(0)", "def solve():\n    from sys import stdin\n    f_i = stdin\n    \n    N, K = map(int, f_i.readline().split())\n    H = tuple(map(int, f_i.readline().split()))\n    \n    if N == K:\n        return 0\n    \n    dp1 = list(H)\n    for i in range(1, N - K):\n        dp2 = dp1[:i]\n        for x, H_x in enumerate(H[i:], start=i):\n            v = min(dp_j + max(0, H_x - H_j) for dp_j, H_j in zip(dp1[i-1:x], H[i-1:x]))\n            dp2.append(v)\n        dp1 = dp2\n    return min(dp1[N-K-1:])\n\nprint(solve())", "def main():\n    import numpy as np\n    n, k = list(map(int, input().split()))\n    H = list(map(int, input().split()))\n    s = np.array(sorted(set(H+[0])), dtype=np.int64)\n    d = {i: j for j, i in enumerate(s)}\n    l = len(s)\n    dp = np.full((k+1, l), 10**13, dtype=np.int64)\n    dp2 = np.zeros((k+1, l), dtype=np.int64)\n    dp[0, 0] = 0\n\n    for h in H:\n        dh = d[h]\n        dp2 = np.zeros((k+1, l), dtype=np.int64)\n        dp2[0] = np.full(l, 10**13, dtype=np.int64)\n        dp2[1:, :] = dp[:-1, :]\n        temp = np.min(\n            dp + np.concatenate([(h-s)[:dh], np.zeros(l-dh, dtype=np.int64)]), axis=1)\n        dp2[:, dh] = np.minimum(dp2[:, dh], temp[:])\n        dp = dp2\n    print((np.min(dp)))\n\n\nmain()\n", "def solve():\n    INF = float('inf')\n\n    def max2(x, y): return x if x >= y else y\n\n    N, K = list(map(int, input().split()))\n    Hs = [0] + list(map(int, input().split()))\n\n    if N == K:\n        return 0\n\n    dp = [INF] * (N+1)\n    dp[0] = 0\n    for j in range(1, N-K+1):\n        dp2 = [INF] * (N+1)\n        for i, H in enumerate(Hs[j:], j):\n            for k in range(j-1, i):\n                dp2[i] = min(dp2[i], dp[k] + max2(0, H-Hs[k]))\n        dp = dp2\n\n    return min(dp)\n\nans = solve()\nprint(ans)\n", "import numpy as np\n\nn, k = list(map(int, input().split()))\nhhh = list(map(int, input().split()))\nhhh = np.array([0] + hhh, dtype=np.int64)\nINF = 10 ** 18\ndp = np.full((n + 1, k + 1), fill_value=INF, dtype=np.int64)\ndp[0, 0] = 0\nfor i, h in enumerate(hhh[1:], start=1):\n    ndp = np.full((n + 1, k + 1), fill_value=INF, dtype=np.int64)\n    ndp[:n, 1:] = dp[:n, :-1]\n    ndp[i] = (dp + np.maximum(0, h - hhh)[:, np.newaxis]).min(axis=0)\n    dp = ndp\n\nprint((dp.min()))\n", "import numpy as np\n\nN,K=map(int,input().split())\nH=list(map(int,input().split()))\nsortedH=np.hstack((np.zeros(1,dtype=np.int64), np.sort(H)))\n\ndic={}\nfor i,h in enumerate(sortedH):\n    dic[h]=i\n\ninf=10**15\ndp=np.full((302,len(sortedH)+1),inf,dtype=np.int64)\ndp[0,0]=0\n\nfor i,h in enumerate(H):\n    for k in range(i+1,-1,-1):\n        dp[k+1]=np.minimum(dp[k+1],dp[k])\n        idx=dic[h]\n        ma=np.min(dp[k][:idx]+h-sortedH[:idx])\n        mb=np.min(dp[k][idx:])\n        dp[k]=np.full(len(sortedH)+1,inf,dtype=np.int64)\n        dp[k][idx]=min(ma,mb)\nprint(np.min(dp[:K+1]))"]