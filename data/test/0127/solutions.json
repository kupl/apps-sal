["n, f = list(map(int, input().split(' ')))\nres = 0\nwow = []\nfor a0 in range(n):\n    k, l = list(map(int, input().split(' ')))\n    res += min(k, l)\n    wow.append(min(2*k, l) - min(k, l))\nwow = sorted(wow)\ni = len(wow)-1\nfor a0 in range(f):\n    res += wow[i]\n    i -= 1\nprint(res)\n", "from sys import stdin, stdout\nimport math\n\nn, k = map(int, stdin.readline().split())\nvalues = []\nans = 0\n\nfor i in range(n):\n    a, b = map(int, stdin.readline().split())\n    ans += min(a, b)\n    \n    if a < b:\n        b -= a\n        values.append(min(a, b))\n\n\n\nvalues.sort()\nfor v in values[::-1]:\n    if not k:\n        break\n    \n    ans += v\n    k -= 1\n\n\nstdout.write(str(ans))", "n, f = list(map(int, input().split()))\nd = []\nfor i in range(n):\n    d.append(list(map(int, input().split())))\nd.sort(reverse=True, key=lambda x: min(2 * x[0], x[1]) - min(x[0], x[1]))\nres = 0\nfor i in range(n):\n    if i < f:\n        res += min(2 * d[i][0], d[i][1])\n    else:\n        res += min(d[i][0], d[i][1])\nprint(res)\n", "l = input().strip().split()\nn , f = int(l[0]) , int(l[1])\n\nlst = []\nbase = []\nfor i in range(n):\n    l = input().split()\n    k , l = int(l[0]) , int(l[1])\n    base.append(min(l,k))\n    lst.append(max(0, min(k, l - k)))\n    # print('>>',base[-1], lst[-1])\nlst = sorted(lst, reverse=True)\nprint(sum(lst[:f]) + sum(base))", "import sys\n\ndef solve():\n    n, f = map(int, input().split())\n    k = [0] * n\n    l = [0] * n\n    d = [0] * n\n\n    for i in range(n):\n        ki, li = map(int, sys.stdin.readline().split())\n        k[i] = ki\n        l[i] = li\n\n        if 2*ki > li:\n            d[i] = max(li - ki, 0)\n        else:\n            d[i] = ki\n\n    d.sort(reverse=True)\n\n    ans = sum(d[:f]) + sum(min(k[i], l[i]) for i in range(n))\n\n    print(ans)\n\n\n\ndef __starting_point():\n    solve()\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\nn, f = list(map(int, input().split()))\n\nsurplus = []\nsold = []\n\nfor i in range(n):\n  p, c = list(map(int, input().split()))\n  sold.append(min(p, c))\n  unsold = max(0, c - p)\n  more = min(unsold, p)\n  surplus.append(more)\n  \nsurplus.sort(reverse=True)\nprint(sum(surplus[:f]) + sum(sold))\n", "n, f = list(map(int, input().split()))\nans = 0\nL = []\nfor _ in range(n):\n    p, c = list(map(int, input().split()))\n    s = min(p, c)\n    sf = min(2*p, c)\n    ans += s\n    L.append(sf-s)\nL.sort(reverse=True)\nans += sum([x for x in L[:f] if x>0])\nprint(ans)\n", "n,f=list(map(int,input().split()))\na=[0]*n\nb=[0]*n\nz=[0]*n\nfor i in range (n):\n    a1,b1=list(map(int,input().split()))\n    a[i]=a1\n    b[i]=b1\nfor i in range(n):\n    z1=min(2*a[i],b[i])-min(a[i],b[i])\n    z[i]=z1\nz.sort()\nc=0\nfor i in range(n):\n    c+=min(a[i],b[i])\nfor i in range(n-1,n-f-1,-1):\n    c+=z[i]\nprint(c)\n    \n", "n,f = list(map(int,input().split()))\nr = []\nfor _ in range(n):\n  a,b = list(map(int,input().split()))\n  if 2*a <= b:\n    r.append((a,a))\n  elif a <= b:\n    r.append((b-a,a))\n  else:\n    r.append((0,b))\nret = 0\nr1 = sorted(r)[::-1]\nfor a,b in r1[:f]:\n  ret += a + b\nfor a,b in r1[f:]:\n  ret += b\nprint(ret)\n", "#! /usr/bin/env python3\n\nfrom collections import namedtuple\n\nn, f = (int(i) for i in input().split())\n\nDay = namedtuple('Day', ('cur', 'diff'))\n\na = []\n\nfor i in range(n):\n    k, l = (int(j) for j in input().split())\n    a.append(Day((min(k, l)), min(2 * k, l) - min(k, l)))\n\na.sort(key=lambda day: day.diff, reverse=True)\n\nprint(sum(day.diff for day in a[:f]) + sum(day.cur for day in a))\n", "n,f = list(map(int, input().split()))\na = []\nfor _ in range(n):\n    k,l = list(map(int, input().split()))\n    a.append( ( -(min(l, k*2)-min(l,k)) , min(l, k)) )\n\na.sort()\n\n#print(a)\n\ntot = 0;\nfor i in range(0,f):\n    tot += -a[i][0] + a[i][1]\n\nfor i in range(f,n):\n    tot += a[i][1]\n\nprint(tot)\n\n", "#!/usr/bin/env python\n\nimport sys\n\nn, f = list(map(int, sys.stdin.readline().split()))\nincrements = []\nwithout_increments = 0\nfor __ in range(n):\n    prod, cust = list(map(int, sys.stdin.readline().split()))\n    increments.append(max(0, min(prod * 2, cust) - prod))\n    #print(increments)\n    without_increments += min(prod, cust)\n    #print( without_increments )\nprint(without_increments + sum(sorted(increments, reverse=True)[:f]))\n", "def calc_income(cnt, customers):\n    return min(cnt, max(0, customers - cnt))\n\n\nn, f = map(int, input().split())\n\ndays = [tuple(map(int, input().split())) for i in range(n)]\ndays.sort(key=lambda elem: -calc_income(*elem))\n\nans = sum(map(lambda elem: min(elem[0], elem[1]), days))\nfor cnt, customers in days[:f]:\n    ans += calc_income(cnt, customers)\n\nprint(ans)", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\ndef main():\n    n, f = [int(x) for x in input().split()]\n    a = []\n    for i in range(n):\n        k, m = [int(x) for x in input().split()]\n        x = 0\n        if k >= m:\n            x = 0\n        elif m < 2 * k:\n            x = m - k\n        else:\n            x = k\n        a.append([k, m, x])\n    a.sort(key=lambda tup: tup[2], reverse=True)\n    for i in range(f):\n        a[i][0] += a[i][2]\n    for i in range(n):\n        a[i][2] = a[i][0] if a[i][0] < a[i][1] else a[i][1]\n    print(sum(a[i][2] for i in range(n)))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\nimport re\n\n\n\nn, f = list(map(int, input().split()))\nk = []\nl = []\n\nd = []\nd1 = []\nfor i in range(n):\n    k, l = list(map(int, input().split()))\n    if k >= l:\n        d.append(0)\n        d1.append(l)\n    elif 2*k >= l:\n        d.append(l - k)\n        d1.append(k)\n    else:\n        d.append(k)\n        d1.append(k)\n\n\n\n\n\nd = sorted(d, reverse= True)\n\nprint(sum(d[:f]) + sum(d1))\n\n\n\n# n, m = map(int, input().split())\n# w = []\n# c = []\n# for i in range(n):\n#     x, y = map(int, input().split())\n#     w.append(x)\n#     c.append(y)\n#\n# A = [[0] * (m + 1) for i in range(n)]\n#\n#\n# for k in range(n):\n#       for s in range(1, m + 1):\n#             if s >= w[k]:\n#                 A[k][s] = max(A[k - 1][s], A[k - 1][s - w[k]] + c[k])\n#             else:\n#                 A[k][s] = A[k-1][s]\n#\n# print(A[n - 1][m])\n\n    # arr = list(map(int, input().split()))\n# res = 0\n# a = {math.pow(2, i) for i in range(35)}\n# for i in range(n-1):\n#     for j in range(i+1,n):\n#         if arr[i] + arr[j] % 2 % 2 % 2 % 2 % 2 in a:\n#             res += 1\n#\n# print(res)\n\n\n# arr = list(map(int, input().split()))\n# m = int(input())\n# spis = list(map(int, input().split()))\n#\n# arr1 = sorted(arr, reverse=True)\n# a = [n - arr1.index(arr[el - 1]) for el in spis]\n# print(' '.join(map(str, a)))\n", "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\n# input_text_path = __file__.replace('.py', '.txt')\n# fd = os.open(input_text_path, os.O_RDONLY)\n# os.dup2(fd, sys.stdin.fileno())\n\nn, f = map(int, input().split())\n\nA = []\n\nnormal_sell_total = 0\nfor i in range(n):\n    product_num, client_num = map(int, input().split())\n\n    if product_num >= client_num:\n        normal_sell_num = client_num\n    else:\n        normal_sell_num = product_num\n    normal_sell_total += normal_sell_num\n\n    if product_num * 2 >= client_num:\n        double_sell_num = client_num\n    else:\n        double_sell_num = product_num * 2\n\n    diff = double_sell_num - normal_sell_num\n    A.append(diff)\n\nA.sort(reverse=True)\nincreased_sell_num = sum(A[:f])\nprint(normal_sell_total + increased_sell_num)", "import sys\n\nn, f =  list(map(int, sys.stdin.readline().rstrip().split()))\n\nli = []\nli2 = []\nfor i in range(n):\n    k, l = list(map(int, sys.stdin.readline().rstrip().split()))\n    li.append((k, l))\n\nli = sorted(li, key=lambda x: min(x[0]*2,x[1])-min(x[0],x[1]))\n\nresult = 0\nfor i in range(n):\n    if i >= n-f:\n        result += min(li[i][0]*2,li[i][1])\n    else:\n        result += min(li[i][0],li[i][1])\n\n\n\nsys.stdout.write(str(result))\n\n", "n, f = list(map(int, input().split()))\n\nproducts_and_clients_per_day = []\n\nfor i in range(n):\n  k, l = list(map(int, input().split()))\n  normal_sales = min(k, l)\n  double_sales = min(2*k, l)\n  sell_out_profit = double_sales - normal_sales\n  products_and_clients_per_day.append((k,l, sell_out_profit))\n\n\nproducts_and_clients_per_day.sort(key=lambda x: x[2], reverse=True)\n\nres = 0\n\nfor i in range(f):\n  k, l, sell_out_profit = products_and_clients_per_day[i]\n  double_sales = min(2*k, l)\n  res += double_sales\n\nfor i in range(f, n):\n  k, l, sell_out_profit = products_and_clients_per_day[i]\n  normal_sales = min(k, l)\n  res += normal_sales\n\nprint(res)\n", "n , f = list(map(int,input().split()))\ntotal_products = 0\nsale_list = []\nfor i in range(n):\n    p , c = list(map(int,input().split()))\n    total_products += min(p,c)\n    sale_list.append((min(2*p,c),min(p,c)))\n\nsale_list.sort(key = lambda x:x[0]-x[1])\nfor i in range(f):\n    add = sale_list.pop()\n    total_products = total_products + add[0] - add[1]\n\nprint(total_products)", "n, f = input().split()\nn , f = int(n), int(f)\narr = [input().split() for i in range(n)]\n\narr = [(int(dayStrings[0]), int(dayStrings[1])) for dayStrings in arr]\n\narr = sorted(arr, key=lambda x: min(2*x[0], x[1]) - min(x[0], x[1]), reverse=True)\n\nres = sum(min(2*arr[ind][0], arr[ind][1]) if ind < f else min(arr[ind][0], arr[ind][1]) for ind in range(n))\nprint(res)\n\n\n\n", "n, f=map (int, input (). split ()) \ndays=[] \nans=0\nfor i in range (n) :\n    k, l=map (int, input (). split ()) \n    if(k<l):\n        new_k=2*k\n        if new_k>=l:\n            days. append (k-l) \n        else:\n            days. append (-k) \n        ans+=k\n    else:\n        ans+=l\n\ndays =sorted(days) \n\nfor i in range (min(f, len(days))) :\n    ans-=days[i] \nprint (ans)     ", "import sys\nread=lambda:sys.stdin.readline().rstrip()\nreadi=lambda:int(sys.stdin.readline())\nwriteln=lambda x:sys.stdout.write(str(x)+\"\\n\")\nwrite=lambda x:sys.stdout.write(x)\n\ndef getM(k,l):\n    if k == 0:\n        return 0\n    if l >= 2*k:\n        return 2*k\n    else:\n        return l\n\ndef getO(k,l):\n    if k == 0:\n        return 0\n    if l >= k:\n        return k\n    else:\n        return l\n\nN,F=list(map(int, read().split()))\ndays=[]\nfor i in range(N):\n    K,L = list(map(int, read().split()))\n    M = getM(K,L)\n    O = getO(K,L)\n    days.append((M-O,M,O))\ndays.sort(key=lambda x:x[0])\nsm = 0\nfor i in range(F):\n    _, m, _ = days[-1-i]\n    sm += m\nfor i in range(N-F):\n    _, _, o = days[-1-F-i]\n    sm += o\nwriteln(sm)\n\n\n\n\n\n\n\n", "read = lambda: map(int, input().split())\nn, f=  read()\np = [tuple(read()) for i in range(n)]\nd = [min(2 * k,l) - min(k, l) for k, l in p]\nd.sort(reverse = 1)\nans = sum(min(k, l) for k, l in p) + sum(d[:f])\nprint(ans)", "x,y=list(map(int,input().split()))\nn=0\nd=[0]*x\nf=[]\nfor i in range(x):\n\ta,b=list(map(int,input().split()))\n\tif b<a:\n\t\tn=n+b\n\telse:\n\t\tn=n+a\n\tif b>a:\n\t\tif a*2<b:\n\t\t\td[i]=a\n\t\telse:\n\t\t\td[i]=b-a\nif d!=f:\n\td.sort()\n\tfor i in range(1,y+1):\n\t\tn=n+d[-i]\nprint(n)\n", "import sys\n\n# sys.stdin = open('in', 'r')\n\nn, f = list(map(int, input().split()))\n\narr = []\n\nans = 0\n\nfor line in sys.stdin:\n    k, l = list(map(int, line.split()))\n    inc = min(k * 2, l) - k\n    ans += min(k, l)\n    arr.append(inc)\n\narr.sort(reverse=True)\n\nfor i in range(f):\n    if(arr[i] > 0):\n        ans += arr[i]\n\nprint(ans)\n"]