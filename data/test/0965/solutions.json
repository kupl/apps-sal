["n=int(input())\na=input()\ncnt=0\nA=0\nfor i in range(0,n):\n  if(a[i]=='I'): cnt+=1\n  if(a[i]=='A'): A+=1\nif(cnt==0):\n    print(A)\nelif(cnt==1):\n    print(1)\nelse :print(0)\n", "from collections import Counter\ndef go():\n  n = int(input())\n  d = Counter()\n  for c in input():\n    d[c] += 1\n  if d['I'] == 0: return d['A']\n  elif d['I'] == 1: return 1\n  else: return 0\n\nprint(go())\n", "import sys\nf = sys.stdin\n#f = open(\"input.txt\", \"r\")\ndef solve():\n    n = int(f.readline())\n    b = f.readline()\n    count = 0\n    if b.count(\"I\") == 1:\n        print(1)\n        return\n    elif b.count(\"I\") > 1:\n        print(0)\n        return\n    else:\n        b = b.replace(\"I\", \"\")\n        print(b.count(\"A\"))\nsolve()", "N=int(input())\n\ns=input()\n\nx=s.count('I')\n\nif(x==0):\n    print(s.count('A'))\nelif(x==1):\n    print(1)\nelse:\n    print(0)\n", "n = int(input())\ns = input()\na,i = s.count('A'), s.count('I')\nprint((a,1,0)[min(i,2)])", "n = int(input())\nt = input()\nk = t.count('I')\nif k > 1: print(0)\nelif k == 1: print(1)\nelse: print(t.count('A'))", "# your code goes here\nn = int(input())\nplayers = input()\nshow_players = 0\n\n\nindex = players.find('I')\nindex2 = players[index + 1:].find('I')\n\nif index2 == -1:\n\tif index == -1:\n\t\tprint(players.count('A'))\n\telse:\n\t\tprint(1)\nelse:\n\tprint(0)\n", "n = int(input())\ns = input()\nif s.count('I') > 1:\n    print(0)\nelif s.count('I') == 1:\n    print(1)\nelse:\n    print(s.count('A'))\n\n", "n = int(input())\ns = input()\nprint([s.count('A'),1,0][min(s.count('I'),2)])", "import sys\nimport math\n  \nn = int(sys.stdin.readline())\nan = sys.stdin.readline()\n\nd = [0] * 3\n\nfor i in range(n):\n    if(an[i] == 'A'):\n        d[0] += 1\n    elif(an[i] == 'F'):\n        d[1] += 1\n    elif(an[i] == 'I'):\n        d[2] += 1\n   \nif(d[2] == 1):\n    if(d[1] != 0 or d[0] != 0):\n        print(d[2])\n    else:\n        print(0)\nelif(d[0] != 0 and d[2] == 0):\n    print(d[0])\nelse:\n    print(0)", "\nimport sys\nimport math\n  \nn = int(sys.stdin.readline())\nan = sys.stdin.readline()\n\nd = [0] * 3\n\nfor i in range(n):\n    if(an[i] == 'A'):\n        d[0] += 1\n    elif(an[i] == 'I'):\n        d[2] += 1\n   \nif(d[2] == 1):\n    print(d[2])\nelif(d[0] != 0 and d[2] == 0):\n    print(d[0])\nelse:\n    print(0)\n", "n = int(input())\nc = {'A': 0, 'F': 0, 'I': 0}\nfor ch in input():\n    c[ch] += 1\nif c['I'] == 0:\n    print(c['A'])\nelif c['I'] == 1:\n    print(1)\nelse:\n    print(0)", "from collections import Counter\nn = int(input())\ncnt = Counter(input())\nif cnt['I']:\n\tif cnt['I'] == 1:\n\t\tprint(1)\n\telse:\n\t\tprint(0)\nelse:\n\tprint(cnt['A'])\n", "from collections import Counter\n\n\ndef main():\n    input()\n    cnt = Counter(input())\n    if not cnt['I']:\n        print(cnt['A'])\n    elif cnt['I'] == 1:\n        print('1')\n    else:\n        print('0')\n\n\ndef __starting_point():\n    main()\n__starting_point()", "i=input;i();p=i();print([[1,0],[p.count(\"A\")]][p.count(\"I\")==0][p.count(\"I\")>1])", "n=int(input());s=input()\na=s.count('A');b=s.count('I')\nprint([a,[1,0][b!=1]][b!=0])", "# coding: utf-8\nfrom collections import Counter\nn = int(input())\nc = Counter(input())\nif c['I'] > 1:\n    print(0)\nelif c['I'] == 1:\n    print(1)\nelse:\n    print(c['A'])\n", "x = int(input())\ns = input()\nif s.count(\"I\") >1:\n    print(0)\nelif s.count('I') == 0:\n    print(s.count('A'))\nelse:\n    print(1)\n", "input()\ns = input()\nif s.count('I') > 1:\n   print(0)\nelif s.count('I') == 1:\n   print(1)\nelse:\n   print(s.count('A'));", "n = int(input())\nstatus = list(input())\n\nallin = status.count(\"A\")\nfolded = status.count(\"F\")\nIn = status.count(\"I\")\n\nif In > 1:\n\tprint(0)\n\nif In == 1:\n\tprint(1)\n\nif In == 0:\n\tprint(allin)", "n = int(input())\n\nstatus = list(input())\n\nallin = status.count(\"A\")\nfolded = status.count(\"F\")\nIn = status.count(\"I\")\n\nif In > 1:\n\tprint(0)\n\nif In == 1:\n\tprint(1)\n\nif In == 0:\n\tprint(allin)", "from collections import defaultdict, deque, Counter, OrderedDict\nfrom bisect import insort, bisect_right, bisect_left\nimport threading, sys\n\ndef main():\n    n = int(input())\n    s = input()\n    a = s.count('A')\n    i = s.count('I')\n    ans = 0\n    if i == 0:\n        ans = a\n    else:\n        if i == 1:\n            ans = 1\n    print(ans)\n\ndef __starting_point():\n    \"\"\"sys.setrecursionlimit(400000)\n    threading.stack_size(40960000)\"\"\"\n    thread = threading.Thread(target=main)\n    thread.start()\n__starting_point()", "a,f,ii,n,s=0,0,0,int(input()),str(input())\nfor i in range(n):\n    if s[i]=='I':\n        ii+=1\n    if s[i]=='A':\n        a+=1\n    if s[i]=='F':\n        f+=1\nif ii>1:\n    ii=0\nprint(a if s.find('I')==-1 else ii)", "n=int(input())\ns=input()\nic=s.count('I')\nprint(1 if ic==1 else 0 if ic>1 else s.count('A'))\n", "a=int(input())\nb=input()\nif b.count('I')==0:\n    print(b.count('A'))\nelif b.count('I')==1:\n    print(1)\nelse:\n    print(0)\n"]