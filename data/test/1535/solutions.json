["\"\"\"\nCodeforces Contest 291 Div 2 Problem B\n\nAuthor  : chaotic_iak\nLanguage: Python 3.4.2\n\"\"\"\n\n################################################### SOLUTION\n\ndef gcd(a,b):\n    if a < 0: a = -a\n    if b < 0: b = -b\n    if a == 0: return b\n    if b == 0: return a\n    return gcd(b, a%b)\n\ndef main():\n    n, x0, y0 = read()\n    lines = set()\n    for i in range(n):\n        x, y = read()\n        x -= x0\n        y -= y0\n        if x < 0 or (x == 0 and y < 0): x,y = -x,-y\n        g = gcd(x,y)\n        x //= g\n        y //= g\n        lines.add((x,y))\n    return len(lines)\n\n\n\n#################################################### HELPERS\n\n\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0: return inputs\n    if mode == 1: return inputs.split()\n    if mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\nwrite(main())", "from fractions import gcd\nn,x,y = list(map(int,input().split()))\nL={}\nfor i in range(n):\n    a,b = list(map(int,input().split()))\n    dy = y-b\n    dx = x-a\n    if(dx<0):\n        dy = -dy\n        dx = -dx\n    g = gcd(dy,dx)\n    dy//=g\n    dx//=g\n    L[(dy,dx)]=1\nprint(len(L))\n", "def isequal(a, b):\n    return abs(a-b) <= 0.00000001\na, b, c = list(map(int, input().split(' ')))\nslopes = []\nfor i in range(a):\n    x, y = list(map(int, input().split(' ')))\n    if x == b:\n        slopes.append(90001)\n    else:\n        slopes.append((y-c)/(x-b))\nprint(len(set(slopes)))\n", "n,x,y = list(map(int, input().split()))\nS = set()\nfor i in range(n) :\n    a, b = list(map(int, input().split()))\n    S.add((a-x)/(b-y) if b-y!=0 else float(\"INF\"))\nprint(len(S))\n", "n,x0,y0 = list(map(int,input().split()))\ntr = []\nfor i in range(n):\n\ttr.append(list(map(int,input().split())))\n\na = []\nans = 0\nfor i in range(n):\n\tif tr[i][1]-y0 == 0:\n\t\tang = \"inf\"\n\telse:\n\t\tang = (tr[i][0]-x0)/(tr[i][1]-y0)\n\tif not ang in a:\n\t\ta.append(ang)\n\t\tans += 1\n\nprint(ans)\n\n", "def prin_pram(x,y):\n    nonlocal A\n    nonlocal B\n    nonlocal C\n    if A*x + B*y+C==0:\n        return 1\n    else:\n        return 0\nn, x0, y0 = list(map(int, input().split()))\nxyi = [list(map(int, input().split())) for i in range(n)]\nnumber = 0\ni = 0\nA = 0\nB = 0\nC = 0\nz = 0 \nwhile number < n:\n    i = 0\n    A = xyi[0][1] - y0\n    B = x0 - xyi[0][0]\n    C = x0 * (y0 - xyi[0][1]) + y0 * (xyi[0][0] - x0)\n    for j in range(n - number):\n        temp = prin_pram(xyi[j][0],xyi[j][1])\n        if temp == 1:\n            number += 1\n        else:\n            xyi[i][0] = xyi[j][0]\n            xyi[i][1] = xyi[j][1]\n            i += 1\n    z += 1\nprint(z)\n", "n, x, y = map(int, input().split())\nA = [list(map(int, input().split())) for i in range(n)]\nS = set()\nB = []\nfor elem in A:\n    i = 0\n    while i < len(B) and B[i][0] * elem[0] + B[i][1] * elem[1] + B[i][2] != 0:\n        i += 1\n    if i == len(B):\n        a = elem[1] - y\n        b = x - elem[0]\n        c = -(a * x + b * y)\n        B.append((a, b, c))\nprint(len(B))", "import sys\nf = sys.stdin\n\nn, x0, y0 = map(int, f.readline().strip().split())\n\nxy = []\nfor i in range(n):\n    xy.append( list(map(int, f.readline().strip().split())) )\n\nused = [0]*n\nv = 0\nfor i in range(n):\n    if used[i]==0:\n        v += 1\n        used[i] = 1\n        kx = x0 - xy[i][0]\n        ky = y0 - xy[i][1]\n        if kx<0:\n            kx *= -1\n            ky *= -1\n        if kx==0 and ky<0:\n            ky *= -1\n        for j in range(i,n):\n            if used[j]==0:    \n                kxj = x0 - xy[j][0]\n                kyj = y0 - xy[j][1]                \n                if kxj<0:\n                    kxj *= -1\n                    kyj *= -1\n                if kxj==0 and kyj<0:\n                    kyj *= -1\n                if kx*kyj==ky*kxj:\n                    used[j] = 1\nprint(v)", "def coeff(x1, y1, x2, y2):\n    a = y2 - y1;\n    b = x1 - x2;\n    c = -a * x1 - b * y1; \n    return (a, b, c)\n    \ndef PointOnLine(x, y, a, b, c):\n    if a * x + b * y + c == 0:\n        return True\n    else:\n        return False\n\nn, x0, y0 = map(int, input().split())\ns = set()\nx = []\ny = []\nans = 0\nfor i in range(n):\n    a, b = map(int, input().split())\n    x.append(a)\n    y.append(b)\nfor i in range(n):\n    if (x[i], y[i]) not in s:\n        a, b, c = coeff(x0, y0, x[i], y[i])\n        for i in range(n):\n            if PointOnLine(x[i], y[i], a, b, c):\n                s.add((x[i], y[i]))\n        ans += 1\nprint(ans)", "def ans():\n    n, x0, y0= [int(i) for i in input().split()]\n    ans= []\n    for i in range(n):\n        x, y= [int(i) for i in input().split()]\n        if x== x0:\n            ans.append(\"s\")\n        else:\n            ans.append(float(y-y0)/float(x-x0))\n        \n    print(len(set(ans)))\n    \n    return\nans()", "import math\nn, x0, y0 = list(map(int, input().split()))\nslope = []\nfor i in range(n):\n    x1, y1 = list(map(int, input().split()))\n    if x1==x0:\n        slp = 999\n    else:\n        slp = (y1-y0)/(x1-x0)\n    slope.append(slp)\nslope.sort()\ncount = 1\npoint = slope[0]\nfor i in range(1,len(slope)):\n    if slope[i] == point:\n        continue\n    else:\n        count += 1\n        point = slope[i]\nprint (count)\n    \n\n    \n", "import sys\n\ndef solve():\n    n, x0, y0 = read()\n    stormtroopers = list()\n    for i in range(n):\n        xi, yi = read()\n        temp = (xi, yi)\n        stormtroopers.append(temp)\n    shots = 0\n    while len(stormtroopers) > 0:\n        cur = stormtroopers.pop()\n        shots+=1\n        if cur[0] - x0 == 0:\n            remstormtroopers = [point for point in stormtroopers if point[0] != x0]\n        else:\n            slope = (cur[1]-y0)/(cur[0]-x0)\n            remstormtroopers = [point for point in stormtroopers if abs(point[1] - y0 - slope*(point[0]- x0)) > 0.0000001]\n        stormtroopers = remstormtroopers\n    return shots\n    \ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "from math import *\nn, x0, y0 = list(map(int, input().split()))\na = []\nfor i in range(n):\n    x, y = list(map(int, input().split()))\n    a.append([x, y])\ncnt = 0\nfor i in range(n):\n    if a[i] == -1:\n        continue\n    A = a[i][1] - y0\n    B = x0 - a[i][0]\n    C = -x0 * A + y0 * (a[i][0] - x0)\n    for j in range(n):\n        if a[j] == -1:\n            continue\n        if A * a[j][0] + B * a[j][1] + C == 0:\n            a[j] = -1\n    cnt += 1\nprint(cnt)\n", "\ndef main():\n\tn, x0, y0 = map(int, input().split())\n\tc = set()\n\tfor i in range(n):\n\t\tx, y = map(int, input().split())\n\t\tif x - x0 == 0:\n\t\t\tc.add('inf')\n\t\telse:\n\t\t\tc.add((y-y0)/(x-x0))\n\tprint(len(c))\n\ndef __starting_point():\n\tmain()\n__starting_point()", "n, x0, y0 = map(int, input().split())\n\nps = [list(map(int, input().split())) for i in range(n)]\n\nshut = [False for i in range(n)]\n\nans=i=0\n\nfor x,y in ps:\n    if not shut[i]:\n        ans+=1\n        j=0\n        for x2, y2 in ps:\n            if (x-x0)*(y2-y0) == (x2-x0)*(y-y0):\n                shut[j]=True\n            j+=1\n    i+=1\n\nprint(ans)", "#normalize\n#slope\n#set and count\n\nn,x,y=list(map(int,input().split()))\n'''s_x=[]\ns_y=[]'''\nshots = set()\nfor _ in range(n):\n    '''s_x[i],s_y[i] = map(int,input().split())\n    s_x[i] -= x\n    s_y[i] -= y'''\n\n    a,b = list(map(int,input().split()))\n    a -= x\n    b -= y\n    shots.add('INF' if a == 0 else b/a)\nprint(len(shots))\n\n\n\n\n", "inStr=input()\nn=int(inStr.split()[0])\nx0=int(inStr.split()[1])\ny0=int(inStr.split()[2])\n\ns=set()\ninf=10e18\nfor i in range(n):\n    inStr=input()\n    x=int(inStr.split()[0])\n    y=int(inStr.split()[1])\n    #k and b will be in a denominator form, (k,b) is the line equation\n    if (x==x0):\n        #k=(y-y0, 0)\n        k=inf\n        b=x0\n    else:\n        k = ((y-y0), (x-x0))\n        k= k[0]/k[1]\n        b = y0 - k*x0\n        #b = (y, k[0], k[1])\n    s.add((k, b))\n\n#print(s)\nprint(len(s))", "n,x,y=input().split(' ')\ntroops=[]\nfor i in range(int(n)):\n    a,b=input().split(' ')\n    troops.append([int(a)-int(x),int(b)-int(y)])\ns=set()\nfor troop in troops:\n    if troop[0]!=0:\n        s.add(troop[1]/troop[0])\n    else:\n        s.add(1000000)\nprint(len(s))", "n, x0, y0 = map(int, input().split())\nk = [[None]*2 for i in range(n)]\nfor i in range(n):\n    k[i][0], k[i][1] = map(int, input().split())\n    \ns = 0\nused = [0]*n\n\nfor i in range(n):\n    f = 0\n    x = k[i][0]\n    y = k[i][1]\n    koef1 = y0-y\n    koef2 = x-x0\n    koef3 = x0*y-x*y0\n    \n    if not used[i]:\n        f = 1\n        used[i] = 1\n        \n    for j in range(n):\n        if not used[j]:\n            if koef1*k[j][0] + koef2*k[j][1] + koef3 == 0:\n                used[j] = 1\n                \n    s += f\n                \nprint(s)", "def solo_mid(n, x0, y0, sturms=[]):\n    if n == 0:\n        return 0\n    \n    res = {}\n    for i in range(n):\n        for_shot = sturms[:]\n        first_sturm = for_shot[0]\n        sturms.remove(first_sturm)\n        line_x = y0 - first_sturm[1]\n        line_y = -(x0 - first_sturm[0])\n        line_c = -first_sturm[0] * line_x + first_sturm[1] * (-line_y)\n        res[first_sturm] = 1\n        for xi, yi in for_shot[1:]:\n            is_in_line = line_x * xi + line_y * yi + line_c\n            if is_in_line == 0:\n                res[first_sturm] += 1\n                sturms.remove((xi, yi))\n\n        if not sturms:\n            break\n\n    return len(res)\ntry:\n    first = input()\n    if len(first.split()) != 3:\n        print(0)\n    else:\n        in_f = [int(i) for i in first.split()]\n        n = in_f[0]\n        sturms = []\n        for i in range(n):\n            s = input()\n            if len(s.split()) != 2:\n                print(0)\n                break\n            else:\n                try: s_l = tuple([int(i) for i in s.split()])\n                except: break\n                sturms.append(s_l)\n        else:\n            print(solo_mid(n, in_f[1], in_f[2], sturms))\nexcept:\n    print(0)\n\n", "import sys\n\ndef solve():\n    n, x0, y0 = read()\n    stormtroopers = list()\n    for i in range(n):\n        xi, yi = read()\n        temp = (xi, yi)\n        stormtroopers.append(temp)\n    shots = 0\n    while len(stormtroopers) > 0:\n        cur = stormtroopers.pop()\n        shots+=1\n        if cur[0] - x0 == 0:\n            remstormtroopers = [point for point in stormtroopers if point[0] != x0]\n        else:\n            slope = (cur[1]-y0)/(cur[0]-x0)\n            remstormtroopers = [point for point in stormtroopers if abs(point[1] - y0 - slope*(point[0]- x0)) > 0.000001]\n        stormtroopers = remstormtroopers\n    return shots\n    \ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\n\ndef solve():\n    n, x0, y0 = read()\n    stormtroopers = list()\n    for i in range(n):\n        xi, yi = read()\n        temp = (xi, yi)\n        stormtroopers.append(temp)\n    shots = 0\n    while len(stormtroopers) > 0:\n        cur = stormtroopers.pop()\n        shots+=1\n        if cur[0] - x0 == 0:\n            remstormtroopers = [point for point in stormtroopers if point[0] != x0]\n        else:\n            slope = (cur[1]-y0)/(cur[0]-x0)\n            remstormtroopers = [point for point in stormtroopers if abs(point[1] - y0 - slope*(point[0]- x0)) > 0.00001]\n        stormtroopers = remstormtroopers\n    return shots\n    \ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "n, x0, y0 = (int(x) for x in input().split())\nguys = []\nfor i in range(n):\n    x, y = (int(cur) for  cur in input().split())\n    guys.append((x - x0, y - y0))\n\nanswer = 0\n\nwhile guys:\n    cur_x, cur_y = guys[0]\n    k = 0\n    to_remove = []\n    for i in range(len(guys)):\n        x, y = guys[i]\n        if x * cur_y == y * cur_x:\n            to_remove.append(i - k)\n            k += 1\n    for index in to_remove:\n        del guys[index]\n    answer += 1\n\nprint(answer)\n", "n,x,y=list(map(int,input().split()))\ns=set()\nfor i in range(n):\n    a,b=list(map(int,input().split()))\n    s.add((a-x)/(b-y) if b-y!=0 else float(\"INF\"))\nprint(len(s))\n\n", "n,x,y=list(map(int,input().split()))\ns=set()\nk=0\nfor i in range(n):\n    a,b=list(map(int,input().split()))\n    if b-y!=0:\n        s.add((x-a)/(y-b))\n    else:\n        k=1\nprint(len(s)+k)\n\n"]