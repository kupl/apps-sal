["class Node(object):\n    def __init__(self):\n        super(Node, self).__init__()\n        self.next = [-1] * 26\n        self.trans = []\n        self.matches = 0\n        self.leaf = 0\n        self.link = 0\n\nclass AhoCorasick(object):\n    def __init__(self):\n        super(AhoCorasick, self).__init__()\n        self.T = [Node()]\n        self.T[0].link = 0\n\n    def insert_trie(self, s):\n        v = 0\n        for i in range(len(s)):\n            c = ord(s[i]) - ord('a')\n            if(self.T[v].next[c] == -1):\n                self.T[v].trans.append(c)\n                self.T[v].next[c] = len(self.T)\n                self.T.append(Node())\n            v = self.T[v].next[c]\n        self.T[v].leaf += 1\n        self.T[v].matches += 1\n\n    def set_suffix_link(self, S):\n        Q = []\n        for j in range(len(S)):\n            Q.append((j, 0, 0, 0))\n            #string index, index in string, state, suff state, \n        i = 0\n        while(i < len(Q)):\n            j,ind,v,suff = Q[i]\n            i += 1\n            c = ord(S[j][ind]) - ord('a')\n            if(ind>0):\n                while(suff>0 and self.T[suff].next[c]==-1):\n                    suff = self.T[suff].link\n                if(self.T[suff].next[c] != -1):\n                    suff = self.T[suff].next[c]\n            v = self.T[v].next[c]\n            self.T[v].link = suff\n            if(ind+1 < len(S[j])):\n                Q.append((j,ind+1,v,suff))\n\n    def set_matches(self):\n        i = 0\n        Q = [0]\n        while(i < len(Q)):\n            v = Q[i]\n            self.T[v].matches = self.T[v].leaf + self.T[self.T[v].link].matches\n            for c in self.T[v].trans:\n                Q.append(self.T[v].next[c])\n            i += 1\n\n    def build(self, S):\n        for i in range(len(S)):\n            self.insert_trie(S[i])\n        self.set_suffix_link(S)\n        #self.printTree()\n        self.set_matches()\n\n    def get(self, s):\n        v = 0\n        matches = []\n        for i in range(len(s)):\n            c = ord(s[i]) - ord('a')\n            while(v>0 and self.T[v].next[c] == -1):\n                v = self.T[v].link\n            if(self.T[v].next[c] != -1):\n                v = self.T[v].next[c]\n            matches.append(self.T[v].matches)\n        return matches\n\n    def printTree(self):\n        for i in range(len(self.T)):\n            print(str(i)+\" leaf:\"+str(self.T[i].leaf)+\" link:\"+str(self.T[i].link)+\" matches:\"+str(self.T[i].matches)+\" : \" , end='')\n            for j in range(26):\n                print(\" \"+str(chr(j+ord('a')))+\"-\"+(str(self.T[i].next[j]) if (self.T[i].next[j]!=-1) else \"_\")+\" \", end='')\n            print()\n\nt = input()\nn = int(input())\npatterns = []\npatterns_rev = []\nfor i in range(n):\n    s = input()\n    patterns.append(s)\n    patterns_rev.append(s[::-1])\nt1 = AhoCorasick()\nt2 = AhoCorasick()\nt1.build(patterns)\nt2.build(patterns_rev)\n\nx1 = t1.get(t)\nx2 = t2.get(t[::-1])[::-1]\n\n#print(x1)\n#print(x2)\n\nans = 0\nfor i in range(len(x1)-1):\n    ans += x1[i] * x2[i+1]\n\nprint(ans)\n"]