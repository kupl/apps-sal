["n = int(input())\nprint(4 * ((n - 3) * 3 * 3 * 4 ** max(0, n - 4) + 2 * 3 * 4 ** (n - 3)))\n", "from functools import reduce\nfrom math import factorial\nn = int(input())\nprint(int((n-3)*4*9*4**(n-4) + 2*4*3*4**(n-3)))\n", "import sys\ndef fact(n):\n\tret = 1\n\tfor x in range(1, n + 1):\n\t\tret = ret * x\n\treturn ret\n\ndef C(n, k):\n\treturn fact(n) // (fact(k) * (fact(n - k)))\n\ndef get(n):\n\tif n == 0:\n\t\treturn 1\n\tif n == 1:\n\t\treturn 3\n\treturn 3 * 4 ** (n - 1)\n\nn = int(input())\nret = 0\nans = 0\nfor x in range(n - 2 + 1):\n\tright = n - 2 - x\n\tleft = x\n\tans += 4 * get(left) * get(right)\nprint(ans)", "n = int(input())\nans = 0\ncnt = 2 * n - 2\nans += (n - 3) * 4 * 3 * 3 * (4**(cnt - n - 2))\nans += (4 * 3 * (4**(cnt - n - 1))) * 2\nprint(int(ans))", "n = int(input())\ntot = 2 * n - 2\nans = 0\nfor i in range(tot - n + 1):\n  p = 4\n  l = 1 + i\n  if l > 1: p = p * 3\n  for j in range(100):\n    if 1 + j < l - 1: p = p * 4\n  if l + n - 1 < tot: p = p * 3\n  for j in range(100):\n    if tot - j > l + n: p = p * 4\n  ans = ans + p\nprint(ans)", "n = int(input())\n\na = 3*4**(2*n-2-n-1)\nb = 9*4**(2*n-2-n-2)\n\nprint(int(2*a + b*(n-3))*4)", "ans = 0\n\nn = int(input())\n\nfor i in range(1,n):\n    p = 2*n-2-i-n+1\n    q = i-1\n\n    if p >= 1:\n        p = 3 * (4**(p-1))\n    else:\n        p = 1\n\n    if q >= 1:\n        q = 3 * (4**(q-1))\n    else:\n        q = 1\n\n    ans += 4*p*q\n\nprint(ans)\n", "n = int(input())\nr1 = int((n - 3) * 4 * 9 * 4 ** (2 * n - 2 - n - 2))\nr2 = int(2 * 4 * 3 * 4 ** (2 * n - 2 - n - 1))\nprint(r1 + r2)", "from math import factorial\n\ndef C(n, k):\n\treturn n - k + 1\n\n\nn = int(input())\nif n != 3:\n    print(4 * (C(2 * n - 2, n) - 2) * 3 * 3 * 4 ** (n - 4) + 4 * 2 * 3 * 4 ** (n - 3))\nelse:\n\tprint(24)\n", "n = int(input())\nres = 0\nres += 8 * (3 * pow(4, n - 3))\nres += ((n - 3) * 4 * 9 * int(pow(4, n - 4)))\nprint(res)", "n = int(input())\nprint(6 * 4**(n-2) + 9 * (n-3) * 4**(n-3))", "n = int(input())\nprint(4 * (2 * 3 * (4 ** (n - 3)) + (n - 3) * 9 * (4 ** (n - 3)) // 4))", "import re, sys, string, operator, functools, fractions, collections\nsys.setrecursionlimit(10**7)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nRI=lambda x=' ': list(map(int,input().split(x)))\nRS=lambda x=' ': input().rstrip().split(x)\nmod=int(1e9+7)\neps=1e-6\n#################################################\nn=RI()[0]\na=(9*(n-3)+24)*(4**(n-3))\nprint(a)\n", "import sys\n\nn = int(sys.stdin.readline())\nm = (n - 3) * 9 * (4 ** ((2 * n - 2) - (n + 2))) + 2 * 3 * (4 ** ((2 * n - 2) - (n + 1)))\n\nprint(int(4 * m))", "n = int(input())\n\nl = 2 * n - 2\nt = l - n\n\ncur1 = 4**(t) * 3\ncur2 = 0\nif t >= 2:\n\tcur2 += 4**(t - 1) * 9\n\nprint(cur1 * 2 + (t - 1) * cur2)\n", "import sys\n\n\ndef fact(k):\n    return k ** 2 * (k - 1) ** 2 * (k - 2) ** 2 * (k - 3) ** 2 * (k - 4) ** 2\n\n\nn = int(input())\n\nprint(4 ** (n - 3) * 3 * (8 + 3 * (n - 3)))\n", "n = int(input())\nans = int(((n - 3) * 9 * 4 ** (n - 4) + 2 * 3 * 4 ** (n - 3))) * 4\nprint(ans)\n", "# S = input()\n# A = S[0] + S[2] + S[4] + S[3] + S[1]\n# N = int(A)\n# print((N ** 5) % (10 ** 5), end=\"\")\n\nN = int(input())\n\nsol = 0\ni = 0\n\nwhile i + N - 1 < (2 * N - 2):\n\n    restL = i\n    tmp = 1\n\n    if restL >= 1:\n        tmp *= 3\n        restL -= 1\n\n    if restL >= 0:\n        tmp *= 4 ** restL\n\n    restR = (2 * N - 2) - (i + N - 1) - 1\n\n    if restR >= 1:\n        tmp *= 3\n        restR -= 1\n\n    if restR >= 0:\n        tmp *= 4 ** restR\n\n    sol += tmp\n\n    i += 1\n\nprint(4 * sol)", "n = int(input())\nans = 0\nl = 2 * n - 2\nfor x in range(0, l - n + 1):\n    t = 4\n    for y in range(0, l):\n        if x <= y and y < x + n: continue\n        elif y == x - 1 or y == x + n: t *= 3\n        else: t *= 4\n    ans += t\nprint(ans)\n\n#*****... 4 * 3 * 4 * 4\n#.*****.. 3 * 3 * 4 * 4\n#..*****. 3 * 3 * 4 * 4\n#...***** 4 * 3 * 4 * 4\n", "n = int(input())\n\nans = 0\nfor i in range(n - 1):\n    t = 4\n    if i > 0:\n        t = t * 3 * (4 ** (i - 1))\n    if i + 1 < n - 1:\n        t = t * 3 * (4 ** (n - i - 2 - 1))\n\n    ans += t\n\nprint(ans)", "n = int(input())\nl = 2 * n - 2\ns = 0\nk = n\nif k < l - 1:\n    d1 = (l - (k + 2) + 1) * 9 * 4**(l - 2 - k)\nelse:\n    d1 = 0\nd2 = 2 * 3 * 4**(l - 1 - k)\ns += d1 + d2\nprint(s * 4)\n", "n=int(input())\ntotal=2*n-2\nif n==3:\n    print(24)\nelse:\n    free=total-n-2+1\n    ans=0\n    ans+=4*2*3*pow(4,total-n-1)\n    left=2\n   # print(total-n+1)\n    while left<total-n+1:\n        #print(left)\n        ans+=4*3*3*pow(4,left-2)*pow(4,total-left-n)\n       # print(str(left-2)+' '+str(total-left-n))\n        left+=1\n    print(ans)\n", "import math\n\ndef choose(n,r):\n\treturn math.factorial(n) // math.factorial(n-r)  // math.factorial(r) \n\ndef choose2(n,r):\n\treturn math.factorial(n) // math.factorial(n-r) # // math.factorial(r) \n\nn = int(input())\n\n\nresult = int( 4*( (n-3) * 3**2 * 4**(n-4) + 2 * 3 * 4**(n-3) ) )\n\n#result = n*** // (f(3)*f(5))\n\nprint(result)"]