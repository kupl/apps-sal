["import sys\nimport math\n\nn, k = list(map(int,sys.stdin.readline().strip().split(' ')))\ngrid = []\nfor n0 in range(n):\n\tgrid.append([char for char in sys.stdin.readline().strip()])\n\nres = [[0 for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n\tfor j in range(n):\n\t\tif grid[i][j] == '#':\n\t\t\tcontinue\n\t\tii, jj = i,j\n\n\t\tcpt = 0\n\t\twhile ii < n and cpt < k:\n\t\t\tif grid[ii][j] == '#':\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tcpt += 1\n\t\t\tii += 1\n\t\tif cpt == k:\n\t\t\tfor ii in range(i,i+k):\n\t\t\t\tres[ii][j] += 1\n\n\t\tcpt = 0\n\t\twhile jj < n and cpt < k:\n\t\t\tif grid[i][jj] == '#':\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tcpt += 1\n\t\t\tjj += 1\n\t\tif cpt == k:\n\t\t\tfor jj in range(j,j+k):\n\t\t\t\tres[i][jj] += 1\nans = [0,0]\nmaxsf = -1\nfor i in range(n):\n\tfor j in range(n):\n\t\tif res[i][j] > maxsf:\n\t\t\tans = [i,j]\n\t\t\tmaxsf = res[i][j]\nprint(ans[0]+1, ans[1]+1)\n\n\n\n\n\n\n\n", "n,k = map(int,input().split())\nmapp = [list(input()) for i in range(n)]\nres = 0\nres = [[0 for i in range(n)] for j in range(n)] \nfor i in range(n):\n    count = 0\n    for j in range(n):\n        if (mapp[i][j] == '.'):\n            count += 1\n        else:\n            count = 0\n        if (count >= k):\n            for t in range(j - k + 1,j + 1):\n                res[i][t] += 1\n\nfor i in range(n):\n    count = 0\n    for j in range(n):\n        if (mapp[j][i] == '.'):\n            count += 1\n        else:\n            count = 0\n        if (count >= k):\n            for t in range(j - k + 1,j + 1):\n                res[t][i] += 1\nress = [0,0]\nmaxx = -1\nfor i in range(n):\n    for j in range(n):\n        if (maxx < res[i][j]):\n            maxx = res[i][j]\n            ress[0],ress[1] = i + 1,j + 1\nprint(*ress)", "n, k = list(map(int, input().split()))\nm = [list(input()) for _ in range(n)]\np = [[0 for _ in range(n)] for _ in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        s = True\n        if i + k - 1 < n:\n            for l in range(k):\n                if m[i + l][j] != '.':\n                    s = False\n                    break\n            if s:\n                for l in range(k):\n                    p[i + l][j] += 1\n\n        s = True\n        if j + k - 1 < n:\n            for l in range(k):\n                if m[i][j + l] != '.':\n                    s = False\n                    break\n            if s:\n                for l in range(k):\n                    p[i][j + l] += 1\n\nmx = -1\nfor i in range(n):\n    for j in range(n):\n        if p[i][j] > mx:\n            ans = (i + 1, j + 1)\n            mx = p[i][j]\n\nprint(*ans)\n", "n, k = list(map(int, input().split()))\nfield = [input() for i in range(n)]\nfield_ = [''.join([field[i][j] for i in range(n)]) for j in range(n)]\n\nfor_ans = [[0] * n for i in range(n)]\nfor_s = '.' * k\n\nfor i, el in enumerate(field):\n    for j in range(n - k + 1):\n        if el[j: j + k] == for_s:\n            for j_ in range(j, j + k):\n                for_ans[i][j_] += 1\n\nfor i, el in enumerate(field_):\n    for j in range(n - k + 1):\n        if el[j: j + k] == for_s:\n            for j_ in range(j, j + k):\n                for_ans[j_][i] += 1\n\nans = 0\nx, y = 1, 1\n\nfor i in range(n):\n    for j in range(n):\n        if for_ans[i][j] > ans:\n            ans = for_ans[i][j]\n            x = i + 1\n            y = j + 1\n\nprint(x, y)\n", "n, k = list(map(int, input().split()))\nmatrix = []\nfor i in range(n):\n    matrix.append(list(input()))\nspree = 0\ncounts = [[0]*n for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        if matrix[i][j] == '#':\n            spree = 0\n        else:\n            spree += 1\n            if spree == k:\n                for z in range(j-k+1, j+1):\n                    counts[i][z] += 1\n                spree = k-1\n    spree = 0\nfor i in range(n):\n    for j in range(n):\n        if matrix[j][i] == '#':\n            spree = 0\n        else:\n            spree += 1\n            if spree == k:\n                for z in range(j-k+1, j+1):\n                    counts[z][i] += 1\n                spree = k-1\n    spree = 0\nans1, ans2 = 0, 0\nfor i in range(n):\n    for j in range(n):\n        if counts[i][j] > counts[ans1][ans2]:\n            ans1 = i\n            ans2 = j\nprint(\"{} {}\".format(ans1 + 1, ans2 + 1))\n", "def make():\n    s = ''\n    for x in range(j, j + k):\n        s += field[x][i]\n    return s\n\nn, k = map(int, input().split())\nfield = []\nfor i in range(n):\n    field.append(input())\nbest = []\nfor i in range(n):\n    best.append([0] * n)\nfor i in range(n):\n    for j in range(n - k + 1):\n        if field[i][j: j + k] == '.' * k:\n            for x in range(j, j + k):\n                best[i][x] += 1\nfor i in range(n):\n    for j in range(n - k + 1):\n        s = make()\n        if s == '.' * k:\n            for x in range(j, j + k):\n                best[x][i] += 1\nind1 = 0\nind2 = 0\nans = -19942347392\nfor i in range(n):\n    for j in range(n):\n        if best[i][j] > ans:\n            ans = best[i][j]\n            ind1 = i\n            ind2 = j\nif ans > 0:\n    print(ind1 + 1, ind2 + 1)\nelse:\n    print(1, 1)", "n, k = [int(i) for i in input().split(' ')]\ngrid = [input() for i in range(n)]\n\ngrid_score = [[0 for i in range(n)] for j in range(n)]\n\nfor row in range(n):\n    for col in range(n - k + 1):\n        if all(['.' == grid[row][col + x] for x in range(k)]):\n            for x in range(k):\n                grid_score[row][col + x] += 1\n\nfor row in range(n - k + 1):\n    for col in range(n):\n        if all(['.' == grid[row + x][col] for x in range(k)]):\n            for x in range(k):\n                grid_score[row + x][col] += 1\n\nmax_score = 0\nmax_row = 0\nmax_col = 0\nfor row in range(n):\n    for col in range(n):\n        if grid_score[row][col] > max_score:\n            max_score = grid_score[row][col]\n            max_row = row\n            max_col = col\n\nprint(max_row + 1, max_col + 1)\n", "from pprint import pprint\n\n# if __main__ == ''\n\nN, K = (int(i) for i in input().split())\n\n\nfield = []\n\ncount = [[0] * N for i in range(N)]\n\nfor i in range(N):\n    field.append([c == '.' for c in input()])\n\n\nfor i in range(N):\n    for j in range(N):\n        # for k in range(K):\n        #     print(field[i + k][j])\n        if i + K <= N:\n            if all(field[i + k][j] for k in range(K)):\n                for k in range(K):\n                    count[i + k][j] += 1\n        if K > 1 and j + K <= N:\n            # for k in range(K):\n            #     print(field[i][j + k])\n            if all(field[i][j + k] for k in range(K)):\n                for k in range(K):\n                    count[i][j + k] += 1\n\n# print('\\n'.join(''.join(str(x) for x in y) for y in count))\n# print('\\n'.join(''.join('.' if x else '#' for x in y) for y in field))\n\nM = max(max(i) for i in count)\n\nfor i in range(N):\n    for j in range(N):\n        if count[i][j] == M:\n            print(i + 1, j + 1)\n            return\n\nprint(0, 0)\n", "n, k = list(map(int, input().split(\" \")))\n\nrows = []\nfor i in range(n):\n    rows +=  [ input() ] \n\ncnt = [[0 for i in range(n) ] for j in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        flag = True\n        for kk in range(k):\n            if j + kk > n - 1 or  rows[i][j + kk] == '#':\n                flag = False\n                break\n        if flag:\n            for kk in range(k):\n                cnt[i][j + kk] += 1\n        flag = True\n        for kk in range(k):\n            if i + kk > n - 1 or rows[i + kk][j] == '#':\n                flag = False\n                break\n        if flag:\n            for kk in range(k):\n                cnt[i + kk][j] += 1\n         \nmx = 0\nia = 0\nij = 0\nfor i in range(n):\n    for j in range(n):\n        if cnt[i][j] > mx:\n            mx = cnt[i][j]\n            ia = i\n            ij = j\n\nprint(ia + 1, ij + 1)\n", "n,k=list(map(int,input().split()))\nL=[]\nfor i in range(n):\n    L.append(input())\n\nps1=[[0]*(n+1) for i in range(n)]  #number of \"#\"\nps2=[[0]*n for i in range(n+1)]\nfor i in range(n):\n    for j in range(n):\n        ps1[i][j+1]=ps1[i][j]+int(L[i][j]==\"#\")\n        ps2[i+1][j]=ps2[i][j]+int(L[i][j]==\"#\")\n\nT=[[0]*n for i in range(n)]\nfor i in range(n):\n    for j in range(n-k+1):\n        if ps1[i][j+k]-ps1[i][j]==0:\n            for x in range(k):\n                T[i][j+x]+=1\nfor i in range(n-k+1):\n    for j in range(n):\n        if ps2[i+k][j]-ps2[i][j]==0:\n            for x in range(k):\n                T[i+x][j]+=1\n\nans1,ans2=0,0\nfor i in range(n):\n    for j in range(n):\n        if T[i][j]>T[ans1][ans2]:\n            ans1,ans2=i,j\nprint(ans1+1,ans2+1)\n        \n        \n\n\n\n", "from collections import Counter\n\n\ndef read_nums():\n    return [int(x) for x in input().split()]\n\n\ndef read_board(n):\n    board = []\n    for _ in range(n):\n        board.append(input())\n    return board\n\n\ndef check_horizontal(board, boat_size, col_index, row_index):\n    for i in range(col_index, col_index + boat_size):\n        if i >= len(board):\n            return False\n        if board[row_index][i] == '#':\n            return False\n    return True\n\n\ndef check_vertical(board, boat_size, col_index, row_index):\n    for i in range(row_index, row_index + boat_size):\n        if i >= len(board):\n            return False\n        if board[i][col_index] == '#':\n            return False\n    return True\n\n\ndef main():\n    n, k = read_nums()\n    board = read_board(n)\n    counter = Counter()\n    for row_index in range(n):\n        for col_index in range(n):\n            if check_horizontal(board, k, col_index, row_index):\n                for i in range(col_index, col_index + k):\n                    counter[(row_index, i)] += 1\n            if check_vertical(board, k, col_index, row_index):\n                for i in range(row_index, row_index + k):\n                    counter[(i, col_index)] += 1\n    res = (0, 0)\n    for k, v in list(counter.items()):\n        if v > counter[res]:\n            res = k\n\n    print(res[0] + 1, res[1] + 1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,k=map(int,input().split(' '))\nl=[]\nl1=[]\nfor i in range(0,n):\n    s=input()\n    l.append(s)\n    l1.append(n*[0])\na1=1\na2=1\nmaxx=0\nfor i in range(0,n):\n    for j in range(0,n-k+1):\n        if (l[i])[j:j+k]==k*\".\":\n            for m in range(0,k):\n                l1[i][j+m]+=1\n                if l1[i][j+m]>maxx:\n                    maxx=l1[i][j+m]\n                    a1=i+1\n                    a2=j+m+1\nl2=[]\nfor i in range(0,n):\n    s=\"\"\n    for j in range(0,n):\n        s+=l[j][i]\n    l2.append(s)\nfor i in range(0,n):\n    for j in range(0,n-k+1):\n        if (l2[i])[j:j+k]==k*\".\":\n            for m in range(0,k):\n                l1[j+m][i]+=1\n                if l1[j+m][i]>maxx:\n                    maxx=l1[j+m][i]\n                    a1=j+m+1\n                    a2=i+1\nprint(a1,a2)", "n, k = map(int, input().split())\nboard = []\n\nfor _ in range(n):\n    board.append(input())\n\nresult = [None] * n\n\nfor i in range(n):\n    result[i] = [0] * n\n\n# horizontally\nfor r, row in enumerate(board):\n    for i in range(len(board) - k + 1):\n        if row[i:i+k] == '.' * k:\n            for x in range(i, i + k):\n                result[r][x] += 1\n\n# print(\"\\n\".join(map(str, result)))\n\n# vertically\nfor col in range(len(board)):\n    for i in range(len(board) - k + 1):\n        if ''.join([board[j][col] for j in range(i, i + k)]) == '.' * k:\n            for x in range(i, i + k):\n                result[x][col] += 1\n\n# print(\"\\n\".join(map(str, result)))\n\n# find max\n_max = 0\nmax_pos = (0, 0)\n\nfor r, row in enumerate(result):\n    for c, col in enumerate(row):\n        if col > _max:\n            max_pos = (r, c)\n            _max = col\n\nprint(\"{} {}\".format(max_pos[0] + 1, max_pos[1] + 1))", "n,k = [ int(a) for a in input().split() ]\n\nfield = []\nfor i in range(n):\n    field.append(input())\n\nposs = [[0]*n for _ in range(n)]\nfor i in range(n):\n    for j in range(n-k+1):\n        good = True\n        for ell in range(k):\n            if field[j+ell][i] == '#':\n                good = False\n        if good:\n            for ell in range(k):\n                poss[j+ell][i] += 1\n\n        good = True\n        for ell in range(k):\n            if field[i][j+ell] == '#':\n                good = False\n        if good:\n            for ell in range(k):\n                poss[i][j+ell] += 1\n\nbest = 0\nbesti = 0\nbestj = 0\nfor i in range(n):\n    for j in range(n):\n        if best < poss[i][j]:\n            best = poss[i][j]\n            besti = i\n            bestj = j\n\nprint(besti+1,bestj+1)\n\n", "n=input().split()\nr=int(n[0])\nk=int(n[1])\nl=[]\nfor i in range(r):\n    li=input()\n    l.append(li)\nrl=[]\nfor i in range(r):\n    x=[]\n    for j in range(r):\n        x.append(0)\n    rl.append(x)\nfor i in range(r):\n    for j in range(len(l[i])):\n        flag=0\n        f=0\n        if j+k<=r:\n            for q in range(k):\n                if l[i][j+q:j+q+1]=='.':\n                    continue\n                else:\n                    flag=1\n                    break\n            if flag==0:\n                for q in range(k):\n                    rl[i][j+q]=rl[i][j+q]+1\n            if flag==1:\n                j=q+1\nfor i in range(r):\n    for j in range(r):\n        flag=0\n        f=0\n        if j+k<=r:\n            for q in range(k):\n                if l[j+q][i:i+1]=='.':\n                    continue\n                else:\n                    flag=1\n                    break\n            if flag==0:\n                for q in range(k):\n                    rl[j+q][i]=rl[j+q][i]+1\n            if flag==1:\n                j=q+1\nmaxi=0\nmaxj=0\nm=0\nfor i in range(r):\n    for j in range(r):\n        if rl[i][j]>m:\n            m=rl[i][j]\n            maxi=i\n            maxj=j\nprint(maxi+1,maxj+1)\n", "def read():\n    return list(map(int,input().split()))\nn,k=read()\na=[]\nw=0\nq=[]\nfor i in range(n):\n    q.append(w)\nb=[]\nfor i in range(n):\n    b.append(q.copy())\nfor i in range(n):\n    a.append(input())\n'''if k==1:\n    ans=0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j]=='.':\n                ans+=1\n    print(ans)\n    return'''\nfor i in range(n):\n    for j in range(n-k+1):\n        for l in range(j,j+k):\n            if a[i][l]=='#':\n                break\n        else:\n            for l in range(j,j+k):\n                b[i][l]+=1\nfor i in range(n):\n    for j in range(n-k+1):\n        for l in range(j,j+k):\n            if a[l][i]=='#':\n                break\n        else:\n            for l in range(j,j+k):\n                b[l][i]+=1\nm=0\nai=1\naj=1\nfor i in range(n):\n    for j in range(n):\n        if b[i][j]>m:\n            m=b[i][j]\n            ai=i+1\n            aj=j+1\nprint(ai,aj)\n", "#This code sucks, you know it and I know it.  \n#Move on and call me an idiot later.\n\nn, k = list(map(int, input().split()))\nl = [input() for i in range(n)]\nd = [[0 for i in range(n)] for i in range(n)]\ns = '.' * k\nmd = 0\nfor i in range(n):\n    for j in range(n):\n        if l[i][j:j+k] == s:\n            for ii in range(k):\n                d[i][j + ii] += 1\n\nfor i in range(n):\n    for j in range(n):\n        if l[j][i] == '.' and j + k <= n:\n            jj = j\n            while(jj < j + k):\n                if l[jj][i] == '.':\n                    d[jj][i] += 1\n                else:\n                    jj -= 1\n                    while(jj >= j):\n                        d[jj][i] -= 1\n                        jj -= 1\n                    break\n                \n                jj += 1\n\nmd = max(list(map(max, d)))\nfor i in range(n):\n    for j in range(n):\n        if d[i][j] == md:\n            print(i+1, j+1)\n            return\n", "n, k = list(map(int, input().split()))\nf = [list(input()) for _ in range(n)]\n\nans = (1, 1)\nr = [[0 for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        if f[i][j] == '#':\n            r[i][j] = 0\n        elif i == 0:\n            r[i][j] = 1\n        else:\n            r[i][j] = r[i - 1][j] + 1\nc = [[0 for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        if f[i][j] == '#':\n            c[i][j] = 0\n        elif j == 0:\n            c[i][j] = 1\n        else:\n            c[i][j] = c[i][j - 1] + 1\n\ns = [[0 for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        for l in range(k):\n            if i + l < n and k <= r[i + l][j]:\n                s[i][j] += 1\n            if j + l < n and k <= c[i][j + l]:\n                s[i][j] += 1\n        if s[ans[0] - 1][ans[1] - 1] < s[i][j]:\n            ans = (i + 1, j + 1)\nprint(' '.join(map(str, ans)))\n", "def main():\n    n, k = [int(x) for x in input().split()]\n    board = []\n    count = [[0 for i in range(n)] for j in range(n)]\n    m, x, y = 0,0,0\n\n    for i in range(n):\n        board.append(input())\n\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '.':\n                if j+k-1 < n and board[i][j+k-1] == '.':\n                    for l in range(j, j+k):\n                        if board[i][l] == '#':\n                            break\n                    else:\n                        for l in range(j, j+k):\n                            count[i][l] += 1\n\n                if i+k-1 < n and board[i+k-1][j] == '.':\n                    for l in range(i, i+k):\n                        if board[l][j] == '#':\n                            break\n                    else:\n                        for l in range(i, i+k):\n                            count[l][j] += 1\n            if count[i][j] > m:\n                m = count[i][j]\n                x, y = i, j\n\n    print(x+1, y+1)\n\ndef __starting_point():\n    main()\n\n__starting_point()"]