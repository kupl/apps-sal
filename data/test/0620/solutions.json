["x1, y1 = list(map(int, input().split()))\nx2, y2 = list(map(int, input().split()))\nx3, y3 = list(map(int, input().split()))\na = set()\na.add(((x1 + x2) - x3, y1 + y2 - y3))\na.add(((x1 + x3) - x2, y1 + y3 - y2))\na.add(((x2 + x3) - x1, y2 + y3 - y1))\nprint(len(a))\nfor i in a:\n    print(*i)", "points = []\n\nfor i in range(3):\n    points.append(list(map(int, input().split())))\n\ndef get4(a, b, c):\n    return [\n        b[0] + c[0] - a[0],\n        b[1] + c[1] - a[1],\n    ]\n\nprint(3)\n\nfor i in range(3):\n    points = points[1:] + [points[0]]\n    print(' '.join(map(str, get4(*points))))\n", "x1, y1 = list(map(int, input().split()))\nx2, y2 = list(map(int, input().split()))\nx3, y3 = list(map(int, input().split()))\nprint(3)\nprint(x1 + x2 - x3, y1 + y2 - y3)\nprint(x2 + x3 - x1, y2 + y3 - y1)\nprint(x1 + x3 - x2, y1 + y3 - y2)\n\n", "x1, y1 = list(map(int, input().split()))\nx2, y2 = list(map(int, input().split()))\nx3, y3 = list(map(int, input().split()))\n\nprint(3)\nprint(x1+x2-x3, y1+y2-y3)\nprint(x1+x3-x2, y1+y3-y2)\nprint(x2+x3-x1, y2+y3-y1)\n\n", "a, b = map(int, input().split())\nc, d = map(int, input().split())\ne, f = map(int, input().split())\nres = set()\nres.add((e + c - a, f + d - b))\nres.add((e - c + a, f - d + b))\nres.add((c + e - a, d + f - b))\nres.add((c - e + a, d - f + b))\nres.add((a - c + e, b - d + f))\nres.add((a + c - e, b + d - f))\nprint(len(res))\nfor elem in res:\n    print(elem[0], elem[1])", "x1,y1 = (int(i) for i in input().split())\nx2,y2 = (int(i) for i in input().split())\nx3,y3 = (int(i) for i in input().split())\nprint(3)\nprint(x1+(x2-x3),y1+(y2-y3))\nprint(x1+(x3-x2),y1+(y3-y2))\nprint(x2+(x3-x1),y2+(y3-y1))", "a1,b1 = list(map(int,input().split()))\na2,b2 = list(map(int,input().split()))\na3,b3 = list(map(int,input().split()))\nprint(3)\na4 = a1+a2-a3\nb4 = b1+b2-b3\nprint(a4,b4)\na4 = a1+a3-a2\nb4 = b1+b3-b2\nprint(a4,b4)\na4 = a3+a2-a1\nb4 = b3+b2-b1\nprint(a4,b4)\n", "ax, ay = list(map(int, input().split()))\nbx, by = list(map(int, input().split()))\ncx, cy = list(map(int, input().split()))\n\nif abs(ax*(by-cy)+bx*(cy-ay)+cx*(ay-by)) < .0000001:\n\tprint(0)\n\treturn\n\npos = set()\n\ndef t(p1, p2, px):\n\treturn (p2[0]-p1[0]+px[0], p2[1]-p1[1]+px[1])\n\npos.add(t((ax,ay), (bx,by), (cx, cy)))\npos.add(t((bx,by), (ax,ay), (cx, cy)))\npos.add(t((ax,ay), (cx,cy), (bx, by)))\npos.add(t((cx,cy), (ax,ay), (bx, by)))\npos.add(t((bx,by), (cx,cy), (ax, ay)))\npos.add(t((cx,cy), (bx,by), (ax, ay)))\nprint(len(pos))\nfor i in pos:\n\tprint(i[0], i[1])\n", "# 211693RAVMK\n\ndef f(p1, p2, p3):\n    o = ((p2[0] + p3[0]) // 2, (p2[1] + p3[1]) // 2)\n    dx = o[0] - p1[0]\n    dy = o[1] - p1[1]\n    res = (p1[0] // 2 + dx, p1[1] // 2 + dy)\n    return res\n\n\ndef main():\n     p1 = tuple([int(x)*2 for x in input().split()])\n     p2 = tuple([int(x)*2 for x in input().split()])\n     p3 = tuple([int(x)*2 for x in input().split()])\n     d2 = (p2[0] - p1[0], p2[1] - p1[1])\n     d3 = (p3[0] - p1[0], p3[1] - p1[1])\n     if d2[0] * d3[1] - d2[1] * d3[0] == 0:\n         print(0)\n         return\n     res = set()\n     res.add(f(p1, p2, p3))\n     res.add(f(p2, p1, p3))\n     res.add(f(p3, p2, p1))\n     print(len(res))\n     for p in res:\n         print(' '.join(map(str, p)))\n\n \ndef __starting_point():\n    main()\n\n__starting_point()", "x1, y1 = list(map(int, input().split()))\nx2, y2 = list(map(int, input().split()))\nx3, y3 = list(map(int, input().split()))\nline = []\nx41 = x3 - (x2 - x1)\ny41 = y3 - (y2 - y1)\nline += [[x41, y41]]\nx41 = x3 - (x1 - x2)\ny41 = y3 - (y1 - y2)\nline += [[x41, y41]]\nx41 = x1 - (x2 - x3)\ny41 = y1 - (y2 - y3)\nline += [[x41, y41]]\nx41 = x1 - (x3 - x2)\ny41 = y1 - (y3 - y2)\nline += [[x41, y41]]\nx41 = x2 - (x1 - x3)\ny41 = y2 - (y1 - y3)\nline += [[x41, y41]]\nx41 = x2 - (x3 - x1)\ny41 = y2 - (y3 - y1)\nline += [[x41, y41]]\nline1 = [line[0]]\nfor i in range(1, 5):\n    good = False\n    for j in range(len(line1)):\n        if line[i] == line1[j]:\n            good = True\n    if not good:\n        line1 += [line[i]]\nprint(len(line1))\nfor i in range(len(line1)):\n    print(\" \".join(map(str, line1[i])))", "c=[[int(i) for i in input().split()] for i in range(3)]\ns=set()\ns.add((c[0][0]+c[1][0]-c[2][0],c[0][1]+c[1][1]-c[2][1]))\ns.add((c[0][0]-c[1][0]+c[2][0],c[0][1]-c[1][1]+c[2][1]))\ns.add((c[1][0]+c[0][0]-c[2][0],c[1][1]+c[0][1]-c[2][1]))\ns.add((c[1][0]-c[0][0]+c[2][0],c[1][1]-c[0][1]+c[2][1]))\ns.add((c[2][0]+c[1][0]-c[0][0],c[2][1]+c[1][1]-c[0][1]))\ns.add((c[2][0]-c[1][0]+c[0][0],c[2][1]-c[1][1]+c[0][1]))\nprint(len(s))\nfor a,b in s:\n    print(a,b)\n", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\nprint(3)\nprint(x1 + x2 - x3, y1 + y2 - y3)\nprint(x2 + x3 - x1, y2 + y3 - y1)\nprint(x1 + x3 - x2, y1 + y3 - y2)", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\nans = set(())\n\nans.add((x3 + x1 - x2, y3 + y1 - y2))\nans.add((x3 + x2 - x1, y3 + y2 - y1))\n\nans.add((x2 + x3 - x1, y2 + y3 - y1))\nans.add((x2 + x1 - x3, y2 + y1 - y3))\n\nans.add((x1 + x3 - x2, y1 + y3 - y2))\nans.add((x1 + x2 - x3, y1 + y2 - y3))\n#print(ans)\nprint(len(ans))\nfor i in ans:\n    print(' '.join(str(j) for j in i), end='\\n')\n", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\nprint(3)\nprint(x1 + x2 - x3, y1 + y2 - y3)\nprint(x2 + x3 - x1, y2 + y3 - y1)\nprint(x3 + x1 - x2, y3 + y1 - y2)", "x1,y1=map(int,input().split())\nx2,y2=map(int,input().split())\nx3,y3=map(int,input().split())\nprint(3)\nprint(x1+x2-x3,y1+y2-y3)\nprint(-x1+x2+x3,-y1+y2+y3)\nprint(x1-x2+x3,y1-y2+y3)", "points = []\nfor i in range(3):\n    points.append(tuple(map(int, input().split())))\n\nans = set()\nfor i in range(3):\n    for j in range(3):\n        if i == j: continue\n        vector = (points[j][0] - points[i][0], points[j][1] - points[i][1])\n        third = 0 + 1 + 2 - i - j\n        ans.add((points[third][0] + vector[0], points[third][1] + vector[1]))\n\nprint(len(ans))\nfor a, b in ans:\n    print(a, b)\n", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\nans = set()\nx4 = x3 + (x1 - x2)\ny4 = y3 - (y2 - y1)\nx5 = x3 - (x1 - x2)\ny5 = y3 + (y2 - y1)\nx6 = x1 - (x3 - x2)\ny6 = y1 - (y3 - y2)\nans.add((x4, y4))\nans.add((x5, y5))\nans.add((x6, y6))\nprint(len(ans))\nfor i in ans:\n    print(*i)", "x1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\n\n\ndef mirror(x1, y1, x2, y2, x3, y3):\n    x_mid = (x1 + x2) / 2\n    if x3 < x_mid:\n        x3 += 2 * (x_mid - x3)\n    else:\n        x3 -= 2 * (x3 - x_mid)\n    y_mid = (y1 + y2) / 2\n    if y3 < y_mid:\n        y3 += 2 * (y_mid - y3)\n    else:\n        y3 -= 2 * (y3 - y_mid)\n    return x3, y3\n\nanswer = []\nx, y = mirror(x1, y1, x2, y2, x3, y3)\nif int(x) == x and int(y) == y:\n    answer.append([x, y])\nx, y = mirror(x1, y1, x3, y3, x2, y2)\nif int(x) == x and int(y) == y:\n    answer.append([x, y])\nx, y = mirror(x3, y3, x2, y2, x1, y1)\nif int(x) == x and int(y) == y:\n    answer.append([x, y])\nprint(len(answer))\nfor i in answer:\n    print(int(i[0]), int(i[1]))", "import math\n\nEPSILON = 10 ** -3\n\n\nclass Vector:\n    def __init__(self, d=2, coords=[0, 0]):\n        self.d = d\n        self.coords = coords[:]\n\n    @staticmethod\n    def fromEnds(p1, p2):\n        n = len(p1)\n        assert n == len(p2)\n        v = []\n        for i in range(n):\n            v.append(p2[i] - p1[i])\n        return Vector(n, v)\n\n    def apply(self, point):\n        return tuple([self.coords[i] + point[i] for i in range(self.d)])\n\n    def inverse(self):\n        return Vector(self.d, list(map((lambda x: -x), self.coords)))\n\n    def __repr__(self):\n        return \"Vector[{}] ({})\".format(self.d, self.coords)\n\n    def len(self):\n        return math.sqrt(sum(x * x for x in self.coords))\n\n    def __add__(self, other):\n        assert self.d == other.d\n        return Vector(self.d, [self.coords[i] + other.coords[i] for i in range(self.d)])\n\n    def __eq__(self, other):\n        return self.d == other.d and self.coords == other.coords\n\n    def extend(self, k):\n        return Vector(self.d, [x * k for x in self.coords])\n\n    def scalmul(self, other):\n        assert self.d == other.d\n        return sum(self.coords[i] * other.coords[i] for i in range(self.d))\n\n    def cos(self, other):\n        return self.scalmul(other) / (self.len() * other.len())\n\n    def is_ort(self, other):\n        return self.scalmul(other) <= EPSILON\n\n    def proj_to(self, other):\n        return self.scalmul(other) / other.len()\n\n    def proj_from(self, other):\n        return other.proj_to(self)\n\n\nt = lambda: tuple(map(int, input().split()))\np1, p2, p3 = t(), t(), t()\np = [p1, p2, p3]\nans = set()\nfor i in range(3):\n    others = []\n    for _p in p:\n        if _p != p[i]:\n            others.append(_p)\n\n    assert len(others) == 2\n    v1 = Vector.fromEnds(others[0], others[1])\n    v2 = Vector.fromEnds(others[1], others[0])\n    ans.add(v1.apply(p[i]))\n    ans.add(v2.apply(p[i]))\n\nprint(len(ans))\nfor item in ans:\n    print(\" \".join(map(str,item)))", "data = [list(map(int, input().split())) for i in range(3)]\nprint(3)\nfor i in range(3):\n  print(data[i][0]+data[(i+1)%3][0]-data[(i+2)%3][0], data[i][1]+data[(i+1)%3][1]-data[(i+2)%3][1])\n", "import sys\n\narr = [list( map( int, next(sys.stdin).split() )) for i in range(3)]\n\ndef add(a, b):\n    return [a[i]+b[i] for i in range(2)]\ndef sub(a, b):\n    return [a[i]-b[i] for i in range(2)]\n\ndef div(a, b):\n    return [a[i]/b for i in range(2)]\n\na = add(arr[0], sub(arr[1], arr[2]))\nb = add(arr[2], sub(arr[1], arr[0]))\nc = add(arr[0], sub(arr[2], arr[1]))\n\nprint(3)\nprint(\"%d %d\"%tuple(a))\nprint(\"%d %d\"%tuple(b))\nprint(\"%d %d\"%tuple(c))\n", "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef f(a, b, p):\n    dx = a.x - p.x\n    dy = a.y - p.y\n    return Point(b.x + dx, b.y + dy)\n\nl = []\nfor _ in range(3):\n    l.append(Point(*list(map(int, input().split()))))\n\nansw = []\nansw.append(f(l[0], l[1], l[2]))\nansw.append(f(l[0], l[2], l[1]))\nansw.append(f(l[1], l[2], l[0]))\n\nprint(len(answ))\nfor i in answ:\n    print(i.x, i.y)\n", "l=[]\nfor i in range(3):\n    x,y = list(map(int,input().split()))\n    l.append([x,y])\n\nS = set()\n\ndef calc(a):\n    ans = 0\n    n = len(a)\n    for i in range(n):\n        ans += a[i][0]*a[(i+1)%n][1] - a[i][1]*a[(i+1)%n][0]\n    return ans\n    \nfor i in range(3):\n    for j in range(3):\n        if i== j:\n            continue\n        for k in range(3):\n            if i==k or i == j:\n                continue\n            x = l[i][0] + l[j][0] - l[k][0]\n            y = l[i][1] + l[j][1] - l[k][1]\n            new = []\n            new.append(l[i])\n            new.append(l[k])\n            new.append(l[j])\n            new.append([x,y])\n            if calc(new) > 0: \n                S.add(tuple([x,y]))\n            \n\nprint(len(S))\nfor i in S:\n    print(i[0],i[1])\n", "import math,sys,re,itertools,pprint,collections,copy\nrs,ri,rai,raf=input,lambda:int(input()),lambda:list(map(int, input().split())),lambda:list(map(float, input().split()))\n\na = rai()\nb = rai()\nc = rai()\n\nbc = [c[0] - b[0], c[1] - b[1]]\nba = [a[0] - b[0], a[1] - b[1]]\nac = [c[0] - a[0], c[1] - a[1]]\n\nsum2 = lambda a, b: tuple([a[0] + b[0], a[1] + b[1]])\ninv = lambda a: [-a[0], -a[1]]\n\nres = set()\nres.add(sum2(a, bc))\nres.add(sum2(a, inv(bc)))\nres.add(sum2(b, ac))\nres.add(sum2(b, inv(ac)))\nres.add(sum2(c, ba))\nres.add(sum2(c, inv(ba)))\n\nprint(len(res))\nfor x, y in res:\n    print(x, y)\n", "# Author: Maharshi Gor\n\ndef read(t=int):\n    return t(input())\n\n\ndef read_arr(t=int):\n    return [t(i) for i in str(input()).split()]\n\n\nt = 1\nfor i in range(t):\n    x1, y1 = read_arr()\n    x2, y2 = read_arr()\n    x3, y3 = read_arr()\n\n    print(3)\n    print(x1 + x2 - x3, y1 + y2 - y3)\n    print(x2 + x3 - x1, y2 + y3 - y1)\n    print(x3 + x1 - x2, y3 + y1 - y2)\n"]