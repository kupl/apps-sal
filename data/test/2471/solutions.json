["h, w, n = map(int,input().split())\n\nxy_pos = dict()\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    for k in range(-2,1):\n        for l in range(-2,1):\n            x = (a-1) + k\n            y = (b-1) + l\n            if (0 <= x <=(h-1)-2) and (0 <= y <=(w-1)-2):\n                xy = str(x) + \"x\" + str(y)\n                if xy in xy_pos:\n                    xy_pos[xy] += 1\n                else:\n                    xy_pos[xy] = 1\n\nans = [0]*10                    \nfor v in xy_pos.values():\n    ans[v] += 1\nans[0] = (h-2)*(w-2) - sum(ans)\nfor i in range(10):\n    print(ans[i])", "from itertools import product\nfrom collections import defaultdict,Counter\n\nh,w,n = map(int,input().split())\n\ndic = defaultdict(int)\n\nfor _ in range(n):\n    y,x= map(int,input().split())\n    for i,j in product([-1,0,1],repeat=2):\n        nx = x+i\n        ny = y+j\n        if 2 <= nx <= w-1 and 2 <= ny <= h-1:\n            dic[nx,ny] += 1\n\nc = Counter(dic.values())\nc[0] = (w-2)*(h-2)-sum(c.values())\n\nfor i in range(10):\n    print(c[i])", "import sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(10 ** 9)\nMOD = 10 ** 9 + 7\n\nfrom collections import defaultdict\n\nH, W, N = map(int, input().split())\n\ndic = defaultdict(int)\nlst = [0] * (10)\nlst[0] = (H - 2) * (W - 2)\n\nfor _ in range(N):\n    a, b = map(int, input().split())\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if 2 <= (a + i) <= (H - 1):\n                if 2 <= (b + j) <= (W - 1):\n                    tmp = dic[(a + i, b + j)]\n                    lst[tmp] -= 1\n                    lst[tmp + 1] += 1\n                    dic[((a + i, b + j))] += 1\n\nprint (*lst, sep = '\\n')\n    \n\n", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    h,w,n = map(int,input().split())\n    dg = 10**10\n    d = dict()\n\n    def f(z):\n        x,y = divmod(z,dg)\n        if 2 <= x <= h-1 and 2 <= y <= w-1:\n            return True\n        else:\n            False\n\n    for i in range(n):\n        a,b = map(int,input().split())\n        \n        if f((a-1)*dg + b-1):\n            if (a-1)*dg + b-1 in d:\n                d[(a-1)*dg + b-1] += 1\n            else:\n                d[(a-1)*dg + b-1] = 1\n        \n        if f((a-1)*dg + b):\n            if (a-1)*dg + b in d:\n                d[(a-1)*dg + b] += 1\n            else:\n                d[(a-1)*dg + b] = 1\n        \n        if f((a-1)*dg + b+1):\n            if (a-1)*dg + b+1 in d:\n                d[(a-1)*dg + b+1] += 1\n            else:\n                d[(a-1)*dg + b+1] = 1\n\n        if f((a)*dg + b-1):\n            if (a)*dg + b-1 in d:\n                d[(a)*dg + b-1] += 1\n            else:\n                d[(a)*dg + b-1] = 1\n        \n        if f(a*dg + b):\n            if a*dg + b in d:\n                d[a*dg + b] += 1\n            else:\n                d[a*dg + b] = 1\n        \n        if f((a)*dg + b+1):\n            if (a)*dg + b+1 in d:\n                d[(a)*dg + b+1] += 1\n            else:\n                d[(a)*dg + b+1] = 1\n        \n        if f((a+1)*dg + b+1):\n            if (a+1)*dg + b+1 in d:\n                d[(a+1)*dg + b+1] += 1\n            else:\n                d[(a+1)*dg + b+1] = 1\n        \n        if f((a+1)*dg + b):\n            if (a+1)*dg + b in d:\n                d[(a+1)*dg + b] += 1\n            else:\n                d[(a+1)*dg + b] = 1\n        \n        if f((a+1)*dg + b-1):\n            if (a+1)*dg + b-1 in d:\n                d[(a+1)*dg + b-1] += 1\n            else:\n                d[(a+1)*dg + b-1] = 1\n        \n        \n        \n        \n    res = [0]*10\n\n    for e in d:\n        res[d[e]] += 1\n\n    res[0] = (h-2)*(w-2)-sum(res)\n\n    for e in res:\n        print(e)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nH, W, N = lr()\nshift = ((0, 0), (0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (-1, -1), (-1, 1), (1, -1))\n\nl = []\n\nfor n in range(N):\n    a, b = lr()\n    for s in shift:\n        aa = a + s[0] - 1\n        bb = b + s[1] - 1\n        if aa < 1 or aa > H-2:\n            continue\n        if bb < 1 or bb > W-2:\n            continue\n        l.append((aa-1, bb-1))\nif len(l) == 0:\n    print((H-2) * (W-2))\n    [print(0) for _ in range(9)]\n    return\nl.sort()\nm = {i: 0 for i in range(10)}\npre = l[0]\nc = 1\nfor ll in l[1:]:\n    if pre == ll:\n        c += 1\n    else:\n        m[c] += 1\n        pre = ll\n        c = 1\nm[c] += 1\nm[0] = (H-2) * (W-2) - sum(m.values())\nfor v in m.values():\n    print(v)\n", "H, W , N = list(map(int,input().split()))\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nmatrix = []\nfor _ in range(N):\n    x,y = list(map(int,input().split()))\n    x -= 1\n    y -= 1\n    matrix.append([x,y])\nmatrix.sort()\nans = [0 for _ in range(10)]\ncand = {}\nfor l in matrix:\n    for x_r in [-2, -1 , 0]:\n        for y_r in [-2, -1 , 0]:\n            nowx = l[0] + x_r\n            nowy = l[1] + y_r\n            if nowx < 0 or nowy < 0 or nowx + 2>= H or nowy+ 2 >= W:\n                continue\n            #\u3053\u3053\u3067\u8d77\u70b9(\u5de6\u4e0a)nowx, nowy \u3068\u3057\u3066\u3000 9\u30de\u30b9\u306b\u7740\u76ee\u3059\u308b\n            name = str(nowx) + ' '  +str(nowy)\n            try: cand[name] += 1\n            except: cand[name] = 1\ntmp = ((H - 2) * (W - 2))\nfor x in list(cand.values()):\n    ans[x] += 1\n    tmp -= 1\nans[0] = tmp\nfor x in ans:\n    print(x)\n", "from collections import defaultdict\n\nh, w, n = map(int, input().split())\nab = [list(map(int, input().split())) for _ in range(n)]\n\nd = defaultdict(int)\n\nfor a, b in ab:\n    for hi in range(a - 2, a + 1):\n        for wi in range(b - 2, b + 1):\n            if 1 <= hi <= h - 2 and 1 <= wi <= w - 2:\n                d[(hi, wi)] += 1\n\ncnt = [0] * 10\nfor v in d.values():\n    cnt[v] += 1\n\ncnt[0] = (h - 2) * (w - 2) - sum(cnt[1:])\nprint(*cnt, sep=\"\\n\")\n", "#coding: utf-8\nimport math\nimport heapq\nimport bisect\nimport numpy as np\nfrom collections import Counter, deque\nimport itertools\n#from scipy.misc import comb\n\nH,W,N = map(int, input().split())\n\nL = []\nfor _ in range(N):\n    a,b = map(int, input().split())\n    for i in range(3):\n        if a+i-1 <= 1 or a+i-1 >= H: continue\n        for j in range(3):\n            if b+j-1 <= 1 or b+j-1 >= W: continue\n            L.append((a+i-1, b+j-1))\nL.sort()\nC = Counter(L)\n\nans = [0]*10\nfor value in C.values():\n    ans[value] += 1\nans[0] = (H-2)*(W-2) - sum(ans[1:])\n\nprint('\\n'.join(map(str, ans)))", "from collections import defaultdict, Counter\n\nH, W, N = map(int, input().split())\nab = [list(map(int, input().split())) for i in range(N)]\n\nd = defaultdict(int)\nfor a, b in ab:\n  for da in range(3):\n    aa = a - da\n    if aa < 1 or H < aa + 2:\n      continue\n    for db in range(3):\n      bb = b - db\n      if bb < 1 or W < bb + 2:\n        continue\n      \n      d[(aa, bb)] += 1\n\nnum = [0] * 10\nnum[0] = (H - 2) * (W - 2)\ncount_n = Counter(list(d.values()))\nfor i in range(1, 10):\n  n = count_n[i]\n  num[i] += n\n  num[0] -= n\n\nprint(*num, sep='\\n')", "from collections import Counter\n\nh,w,n = map(int,input().split())\n\nblack_count = {}\n\nfor _ in range(n):\n    a,b = map(int,input().split())\n    for dx in (-1,0,1):\n        for dy in (-1,0,1):\n            y = a+dy\n            x = b+dx\n            if 2<=y<=h-1 and 2<=x<=w-1:\n                black_count[(y,x)] = black_count.get((y,x),0) + 1\n\nans = Counter(black_count.values())\nans[0] = (h-2) * (w-2) - sum(ans.values())\nfor i in range(10):\n    print(ans.get(i,0))", "from itertools import product\nfrom collections import Counter\n\nH, W, N = map(int, input().split())\nAB = [tuple(map(int, input().split())) for _ in range(N)]\nD = tuple(product((-1, 0, 1), repeat=2))\n\ncnt = Counter()\nfor a, b in AB:\n    for h, w in D:\n        if 2 <= a + h <= H - 1 and 2 <= b + w <= W - 1:\n            cnt[(a + h, b + w)] += 1\n\nans = [0] * 10\nfor c in cnt.values():\n    ans[c] += 1\n\nans[0] = (H - 2) * (W - 2) - sum(ans)\nprint(*ans, sep='\\n')\n", "h,w,n = map(int, input().split())\nmemo = {}\ndxy = [(0,1), (0,0), (1,0), (-1,0), (0,-1), (1,1), (-1,-1), (-1,1), (1,-1)]\nfor i in range(n):\n    a,b = map(int, input().split())\n    for dx,dy in dxy:\n        x,y = a+dx,b+dy\n        if 1 < x < h and 1 < y < w:\n            if (x,y) not in memo:\n                memo[(x,y)] = 0\n            memo[(x,y)] += 1\n\nans = [0 for i in range(10)]\nfor k,v in memo.items():\n    ans[v] += 1\nans[0] = (h-2)*(w-2) - sum(ans)\n[print(i) for i in ans]", "from collections import defaultdict\nfrom collections import Counter\n\nH, W, N = list(map(int, input().split()))\n\n# 3*3\u30de\u30b9\u306e\u51e6\u7406\u7528\u30ea\u30b9\u30c8\ndir = [[0, 0], [1, 0], [1, 1], [0, 1], [-1, 1],\n       [-1, 0], [-1, -1], [0, -1], [1, -1]]\n\n# \u305d\u306e\u30de\u30b9\u3092\u4e2d\u5fc3\u3068\u3059\u308b3*3\u30b0\u30ea\u30c3\u30c9\u306b\u542b\u307e\u308c\u308b\u9ed2\u30de\u30b9\u306e\u6570\ndict = defaultdict(int)\n\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    for dy, dx in dir:\n        # 3*3\u30b0\u30ea\u30c3\u30c9\u306f\u3001H*W\u306e\u4e2d\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\n        if 2 <= a + dy <= H - 1 and 2 <= b + dx <= W - 1:\n            dict[(a + dy, b + dx)] += 1\n\nc = Counter(list(dict.values()))\nans = [0 for _ in range(10)]\n\n# ans[1], ans[2], ..., ans[9]\u3092\u78ba\u5b9a\u3055\u305b\u308b\uff08ans[0]\u306f\u5f8c\u8ff0\uff09\nfor k, v in list(c.items()):\n    if v > 0:\n        ans[k] = v\n\n# \u5168\u4f53\u3067\u4f5c\u308c\u308b3*3\u30b0\u30ea\u30c3\u30c9\u306f(H-2)*(W-2)\u500b\n# ans[1],...,ans[9]\u306e\u7dcf\u548c\u3092\u5f15\u304f\u3068ans[0]\u306b\u306a\u308b\nans[0] = (H - 2) * (W - 2) - sum(ans[1:])\n\nfor i in range(10):\n    print((ans[i]))\n", "h,w,n=map(int,input().split());I=[list(map(int,input().split()))for i in[0]*n]\nfrom itertools import product as p;from collections import Counter as c;ans=[0]*9;o=(h-2)*(w-2)\nfor k,v in c(c([(a-x)*w+b-y for x,y in p(range(3),repeat=2) for a,b in I if h-1>a-x>0<b-y<w-1]).values()).items():ans[k-1]=v;o-=v\nprint(o,*ans,sep='\\n')", "import sys\n\nh,w,n=list(map(int,input().split()))\nA = [list(map(int,input().split())) for _ in range(n)]\n\ndict = {}\nans = [0]*10\nans[0] = (w-2)*(h-2)\n\nfor item in A:#for every paint\n    cord = list(item)\n#    print(\"----{},{}----\".format(cord[0],cord[1]))\n    #update candidate\n    upcand = []#max9\n    for i in range(cord[0]-1,cord[0]+2):\n        for j in range(cord[1]-1,cord[1]+2):\n#            print(\"----({},{})----\".format(i,j))\n            upcand.append([i,j])\n#    print(upcand)\n    for cand in upcand:\n#        print(cand)\n        if 1 < cand[0] < h and 1 < cand[1] < w:\n#            print(cand)\n            dict[(cand[0],cand[1])] = dict.get((cand[0],cand[1]), 0) + 1\n#        print(dict)\nfor v in list(dict.values()):\n    ans[v] += 1\n    ans[0] -= 1\n\nfor i in ans:\n    print(i)\n", "from collections import defaultdict\n\nh,w,n = map(int,input().split())\n\nd = defaultdict(int)\n\nfor _ in range(n):\n    a,b = map(int,input().split())\n\n    for i in range(-1,2):\n        for j in range(-1,2):\n            if 1 < a+i < h and 1 < b+j < w:\n                d[(a+i,b+j)] += 1\n\nans = [0]*10\n\nfor i in d.values():\n    ans[i] += 1\n\nans[0] = (h-2)*(w-2)-sum(ans)\nfor i in ans:\n    print(i)", "#!/usr/bin/env python3\nfrom collections import Counter, defaultdict\nfrom itertools import product\nimport sys\ntry:\n    from typing import List\nexcept ImportError:\n    pass\n\n\ndef solve(H: int, W: int, N: int, a: \"List[int]\", b: \"List[int]\"):\n    d = defaultdict(int)\n    for ai, bi in zip(a, b):\n        for da, db in product((-1, 0, 1), repeat=2):\n            aj = ai - 1 + da\n            bj = bi - 1 + db\n            if 1 <= aj <= H - 2 and 1 <= bj <= W - 2:\n                d[aj, bj] += 1\n    c = Counter(list(d.values()))\n    e = [c[i] for i in range(1, 10)]\n    print(((H - 2) * (W - 2) - sum(e)))\n    for ei in e:\n        print(ei)\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    H = int(next(tokens))  # type: int\n    W = int(next(tokens))  # type: int\n    N = int(next(tokens))  # type: int\n    a = [int()] * (N)  # type: \"List[int]\"\n    b = [int()] * (N)  # type: \"List[int]\"\n    for i in range(N):\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n    solve(H, W, N, a, b)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# solution\nimport io\nfrom collections import Counter\n\nnim, mike, kite, *AB = list(map(int, open(0).read().split()))\n\nmove = [\n    (-1, -1), (-1, 0), (-1, 1),\n    (0, -1),  (0, 0),  (0, 1),\n    (1, -1),  (1, 0),  (1, 1),\n]\n\nC = Counter()\nfor a, b in zip(*[iter(AB)] * 2):\n    C.update(\n        (a - i, b - j)\n        for i, j in move\n        if 2 <= a - i <= nim - 1 and 2 <= b - j <= mike - 1\n    )\n\nD = Counter(v for _, v in list(C.items()))\n\nprint(((nim - 2) * (mike - 2) - sum(D.values())))\nfor i in range(1, 10):\n    print((D[i]))\n", "from collections import defaultdict\nfrom itertools import product\n\nH,W,N = list(map(int,input().split()))\n\ncovered = defaultdict(int)\nvector = [[-1,-1],[-1,0],[-1,1],[1,0],[1,1],[0,0],[0,-1],[0,1],[1,-1]]\n\nfor _ in range(N):\n    a,b = list(map(int,input().split()))\n    for dx,dy in vector:\n        x = a+dx-1\n        y = b+dy-1\n        if 1 <= x < H-1 and 1 <= y < W-1:\n            covered[(x,y)] += 1\n\nvalues = [0]*10\nfor i in list(covered.values()):\n    values[i] += 1\n\nvalues[0] = (H-2)*(W-2) - sum(values)\n\nfor v in values:\n    print(v)\n", "def main():\n    h, w, n = map(int, input().split())\n    dic = {}\n    for _ in range(n):\n        a, b = map(int, input().split())\n        for i in range(max(2, a-1), min(h, a+2)):\n            for j in range(max(2, b-1), min(w, b+2)):\n                if (i, j) in dic:\n                    dic[(i, j)] += 1\n                else:\n                    dic[(i, j)] = 1\n    ans = [0]*10\n    cnt = 0\n    for v in dic.values():\n        ans[v] += 1\n        cnt += 1\n    ans[0] = (h-2)*(w-2) - cnt\n    for i in range(10):\n        print(ans[i])\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    H, W, n = map(int, input().split())\n    AB = set(tuple(tuple(map(lambda x: int(x) - 1, input().split())) for _ in range(n)))\n\n    d = ((1, 1), (1, 0), (1, -1), (0, 1), (0, 0), (0, -1), (-1, 1), (-1, 0), (-1, -1))\n    target = set()\n    res = [0] * 10\n    for h, w in AB:\n        cnt = 0\n        flg = True\n        for dh, dw in d:\n            next_h, next_w = h + dh, w + dw\n            if next_h < 0 or next_h >= H or next_w < 0 or next_w >= W:\n                flg = False\n            if (next_h, next_w) in AB:\n                cnt += 1\n            else:\n                if (next_h, next_w) != (h, w):\n                    target.add((next_h, next_w))\n        if flg:\n            res[cnt] += 1\n\n    for h, w in target:\n        cnt = 0\n        for dh, dw in d:\n            next_h, next_w = h + dh, w + dw\n            if next_h < 0 or next_h >= H or next_w < 0 or next_w >= W:\n                break\n            if (next_h, next_w) in AB:\n                cnt += 1\n        else:\n            res[cnt] += 1\n\n    total = (H - 2) * (W - 2)\n    res[0] = total - sum(res)\n    print(*res, sep=\"\\n\")\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "from collections import defaultdict, Counter\nh, w, n = map(int, input().split())\nans = [0] * 10\nd = defaultdict(int)\nfor i in range(n):\n    a, b = map(int, input().split())\n    for j in range(max(2, a - 1), min(a + 2, h)):\n        for k in range(max(2, b - 1), min(b + 2, w)):\n            d[(j, k)] += 1\nc = Counter(d.values())\nprint((h - 2) * (w - 2) - sum(c.values()))\nfor i in range(1, 10):\n    print(c[i])", "h, w, n = list(map(int, input().split()))\nsquare = dict()\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    a -= 1\n    b -= 1\n    for x in range(b-2,b+1,1):\n        for y in range(a-2,a+1,1):\n            if 0 <= y <= (h - 3) and 0 <= x <= (w - 3) :\n                if (x,y) in square:\n                    square[(x,y)] += 1\n                else:\n                    square[(x,y)] = 1\nans = [0 for i in range(10)]\nfor i in list(square.values()):\n    ans[i] += 1\nans[0] = (h - 2) * (w - 2) - sum(ans)\nfor i in range(10):\n    print((ans[i]))\n", "from collections import defaultdict\n\nh, w, n = map(int, input().split())\nAB = [list(map(int, input().split())) for _ in range(n)]\nd = defaultdict(int)\nL = [0]*10\nL[0] = (h-2) * (w-2)\nfor a, b in AB:\n  for i in range(-1, 2):\n    for j in range(-1, 2):\n      y, x = a+i, b+j\n      if 1 < y < h and 1 < x < w:\n        d[(y, x)] += 1\n        L[d[(y, x)]] += 1\n        L[d[(y, x)]-1] -= 1\nprint(*L, sep=\"\\n\")", "import sys\nfrom collections import Counter\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nH, W, N = lr()\npairs = []\nfor _ in range(N):\n    a, b = lr()\n    a -= 1; b -= 1\n    for dh in [-2, -1, 0]:\n        if a + dh < 0 or a + dh > H-3:\n            continue\n        for dw in [-2, -1, 0]:\n            if b + dw < 0 or b + dw > W-3:\n                continue\n            pairs.append((a+dh, b+dw))\n\ncounter = Counter(pairs)\nanswer = [0] * 10\ncounter2 = Counter(list(counter.values()))\nfor k, v in list(counter2.items()):\n    answer[k] = v\n\nanswer[0] = (H-2) * (W-2) - sum(answer)\nprint(('\\n'.join(map(str, answer))))\n# 30\n", "\"\"\"\n\u53c2\u8003(\u795e\u69d8)\nhttps://atcoder.jp/contests/abc045/submissions/6046010\n\"\"\"\n\n###\u304b\u3076\u308b\u3084\u3064\u3092\u8003\u3048\u308b.\u4f8b\u3048\u3070\u3042\u308b\u30de\u30b9\u306e\u304b\u3076\u308a\u5024\u304c9\u3060\u3068\u3057\u305f\u3089,\n###\u5468\u56f2\u306f\u3059\u3079\u3066\u9ed2->j=9\u306e\u304c1\u3064\u3068\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u3088\u3044,\u4ed6\u306e\u5024\u306b\u3064\u3044\u3066\u3082\u540c\u69d8.\n\nimport sys\nfrom collections import defaultdict,Counter\n\ndef input():\n    return sys.stdin.readline().strip()\n\nH,W,N = map(int,input().split())\n\ncovered = defaultdict(int)\nvector = [(0,0),(0,1),(0,-1),(1,0),(-1,0),(1,1),(-1,-1),(1,-1),(-1,1)]\n\nfor _ in range(N):\n    a,b = map(int,input().split())\n\n    for i,j in vector:\n        x = a+i-1\n        y = b+j-1\n\n        if 0 < x < H-1 and 0 < y < W-1:\n            covered[(x,y)] += 1\n\nnum = Counter(covered.values())\n##print(num)\nnum[0] = (H-2)*(W-2)-sum(num.values())\n\nfor i in range(10):\n    print(num[i])", "#!/usr/bin/env python3\nimport sys\nfrom collections import Counter\nINF = float(\"inf\")\n\nXX = (-2, -2, -2, -1, -1, -1, 0, 0, 0)\nYY = (-2, -1, 0, -2, -1, 0, -2, -1, 0)\n\n\ndef solve(H: int, W: int, N: int, a: \"List[int]\", b: \"List[int]\"):\n    counter = Counter()\n    for aa, bb in zip(a, b):\n        for x, y in zip(XX, YY):\n            if aa+x < 1:\n                continue\n            elif aa+x+2 > H:\n                continue\n            elif bb+y < 1:\n                continue\n            elif bb+y+2 > W:\n                continue\n            counter[(aa+x, bb+y)] += 1\n    ans = [0]*10\n    for key, val in counter.items():\n        ans[val] += 1\n\n    ans[0] = (H-2)*(W-2) - sum(ans)\n    print(*ans, sep=\"\\n\")\n    return\n\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    H = int(next(tokens))  # type: int\n    W = int(next(tokens))  # type: int\n    N = int(next(tokens))  # type: int\n    a = [int()] * (N)  # type: \"List[int]\"\n    b = [int()] * (N)  # type: \"List[int]\"\n    for i in range(N):\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n    solve(H, W, N, a, b)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import defaultdict\n\n\ndef main():\n    H, W, N = list(map(int, input().split(' ')))\n    coord_list = [list(map(int, input().split(' '))) for _ in range(N)]\n    # count squares (key: coord of top left cell, value: number of appearance)\n    square_count = defaultdict(int)\n    for coord in coord_list:\n        coord = tuple(coord)\n        # black cell is located on the top row\n        if coord[0] + 2 <= H and coord[1] + 2 <= W:\n            square_count[coord] += 1\n        if coord[0] + 2 <= H and 1 <= coord[1] - 1 and coord[1] + 1 <= W:\n            square_count[(coord[0], coord[1] - 1)] += 1\n        if coord[0] + 2 <= H and 1 <= coord[1] - 2:\n            square_count[(coord[0], coord[1] - 2)] += 1\n        # black cell is located in the middle row\n        if 1 <= coord[0] - 1 and coord[0] + 1 <= H and coord[1] + 2 <= W:\n            square_count[(coord[0] - 1, coord[1])] += 1\n        if 1 <= coord[0] - 1 and coord[0] + 1 <= H and 1 <= coord[1] - 1 and coord[1] + 1 <= W:\n            square_count[(coord[0] - 1, coord[1] - 1)] += 1\n        if 1 <= coord[0] - 1 and coord[0] + 1 <= H and 1 <= coord[1] - 2:\n            square_count[(coord[0] - 1, coord[1] - 2)] += 1\n        # black cell is located on the bottom row\n        if 1 <= coord[0] - 2 and coord[1] + 2 <= W:\n            square_count[(coord[0] - 2, coord[1])] += 1\n        if 1 <= coord[0] - 2 and 1 <= coord[1] - 1 and coord[1] + 1 <= W:\n            square_count[(coord[0] - 2, coord[1] - 1)] += 1\n        if 1 <= coord[0] - 2 and 1 <= coord[1] - 2:\n            square_count[(coord[0] - 2, coord[1] - 2)] += 1\n    # remove duplicated counts\n    count = defaultdict(int)  # key: number of black cells, value: number of squares\n    for v in list(square_count.values()):\n        count[v] += 1\n    count_white_only = (H - 2) * (W - 2) - sum(count.values())\n    count[0] = count_white_only\n    # print answer\n    for c in range(0, 10):\n        print((count[c]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#\u3059\u306c\u3051\u304f\u3093\u306e\u5857\u308a\u7d75\nh,w,n=list(map(int,input().split()))\ndic={}\nfor  _ in range(n):\n    a,b=list(map(int,input().split()))\n    for i in range(a-1,a+2):\n        for j in range(b-1,b+2):\n            if (i,j) in list(dic.keys()):\n                dic[(i,j)]+=1\n            else:\n                dic[(i,j)]=1\n              \nhowmany=[0 for i in range(10)]\nfor some in list(dic.keys()):\n    a,b=some[0],some[1]\n    if 2<=a<=h-1 and 2<=b<=w-1:\n        howmany[dic[some]]+=1\nJ=(h-2)*(w-2)-sum(howmany)\nprint(J)\nfor i in range(1,10):\n    print((howmany[i]))\n", "from collections import defaultdict\nfrom collections import Counter\n\nH, W, N = list(map(int, input().split()))\n\n# 3*3\u30de\u30b9\u306e\u51e6\u7406\u7528\u30ea\u30b9\u30c8\ndir = [[0, 0], [1, 0], [1, 1], [0, 1], [-1, 1],\n       [-1, 0], [-1, -1], [0, -1], [1, -1]]\n\n# \u305d\u306e\u30de\u30b9\u3092\u4e2d\u5fc3\u3068\u3059\u308b3*3\u30b0\u30ea\u30c3\u30c9\u306b\u542b\u307e\u308c\u308b\u9ed2\u30de\u30b9\u306e\u6570\ndict = defaultdict(int)\n\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    for dy, dx in dir:\n        # 3*3\u30b0\u30ea\u30c3\u30c9\u306f\u3001H*W\u306e\u4e2d\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\n        if 2 <= a + dy <= H - 1 and 2 <= b + dx <= W - 1:\n            dict[(a + dy, b + dx)] += 1\n\nc = Counter(list(dict.values()))\nans = [0 for _ in range(10)]\n\n# ans[1], ans[2], ..., ans[9]\u3092\u78ba\u5b9a\u3055\u305b\u308b\uff08ans[0]\u306f\u5f8c\u8ff0\uff09\nfor k, v in list(c.items()):\n    if v > 0:\n        ans[k] = v\n\n# \u5168\u4f53\u3067\u4f5c\u308c\u308b3*3\u30b0\u30ea\u30c3\u30c9\u306f(H-2)*(W-2)\u500b\n# ans[1],...,ans[9]\u306e\u7dcf\u548c\u3092\u5f15\u304f\u3068ans[0]\u306b\u306a\u308b\nans[0] = (H - 2) * (W - 2) - sum(ans[1:])\n\nfor i in range(10):\n    print((ans[i]))\n", "H,W,N=map(int,input().split())\ndirec=[[0,0],[-1,0],[-2,0],[0,-1],[-1,-1],[-2,-1],[0,-2],[-1,-2],[-2,-2]]\ndic={}\nfor i in range(N):\n  h,w=map(int,input().split())\n  for d in direc:\n    if 1<=h+d[0]<=(H-2) and 1<=w+d[1]<=(W-2):\n      l=(h+d[0],w+d[1])\n      if l in dic:\n        dic[l]=dic[l]+1\n      else:\n        dic[l]=1\nA=list(dic.values())\nprint((H-2)*(W-2)-len(A))\nfor i in range(1,10):\n  print(A.count(i))", "from collections import Counter\n\nh,w,N=map(int,input().split())\nrec=[]\nfor i in range(N):\n    a,b=map(int,input().split())\n    a-=1\n    b-=1\n    for i in range(-2,1):\n        for j in range(-2,1):\n           if 0<=a+i<h-2 and 0<=b+j<w-2:\n               rec.append((a+i,b+j))\n\nans=[0]*10\nans[0]=(h-2)*(w-2)\nc=Counter(rec)\nfor i in c.values():\n    ans[i]+=1\n    ans[0]-=1\nfor i in range(10):\n    print(ans[i])", "h,w,n = map(int,input().split())\ngrids = {}\nD = [1,-1,0]\nfor _ in range(n):\n  a,b = map(int,input().split())\n  a -= 1\n  b -= 1\n  \n  for dx in D:\n    for dy  in D:\n      na,nb = a+dx,b+dy\n      if not(0<na<h-1 and 0<nb<w-1):\n        continue\n      if(na,nb) not in grids:\n        grids[(na,nb)] = 0\n      grids[(na,nb)] += 1\n      \n        \n        \nans = [0 for _ in range(10)]\n\nfor v in grids.values():\n  ans[v]+=1\n\nans[0] = (h-2)*(w-2)-sum(ans)\n\nfor a in ans:\n  print(a)", "h,w,n=map(int,input().split());from itertools import product as p;from collections import Counter as c;I=[list(map(int,input().split()))for i in[0]*n];ans=[0]*9\nfor k,v in c(c([(a-x)*w+b-y for x,y in p(range(3),repeat=2) for a,b in I if h-1>a-x>0<b-y<w-1]).values()).items():ans[k-1]=v\nprint((h-2)*(w-2)-sum(ans),*ans,sep='\\n')", "from collections import defaultdict\n\nH, W, N = map(int,input().split())\nd = defaultdict(int)\nta = [1,1,0,-1,-1,-1,0,1,0]\ntb = [0,1,1,1,0,-1,-1,-1,0]\n\nfor _ in range(N):\n    a, b = map(int,input().split())\n    for i in range(9):\n        na = a + ta[i]\n        nb = b + tb[i]\n        if 1 <= na <= H and 1 <= nb <= W:\n            d[(na, nb)] += 1\n\nans = [0] * 10\n\nfor i, v in d.items():\n    if 2 <= i[0] <= H-1 and 2 <= i[1] <= W-1:\n        ans[v] += 1\n\nans[0] = (H-2) * (W-2) - sum(ans)\n\nfor i in range(10):\n    print(ans[i])", "from collections import defaultdict, Counter\n\nh, w, n = list(map(int, input().split()))\nab = [list(map(int, input().split())) for _ in range(n)]\n\nd = defaultdict(int)\n\nfor a, b in ab:\n    for hi in range(a - 2, a + 1):\n        for wi in range(b - 2, b + 1):\n            if 1 <= hi <= h - 2 and 1 <= wi <= w - 2:\n                d[(hi, wi)] += 1\n\nc = Counter(list(d.values()))\n\nprint(((h - 2) * (w - 2) - sum(c.values())))\n\nfor i in range(1, 10):\n    print((c[i]))\n", "def solve(h,w,n,black_list):\n  if len(black_list) == 0:\n    return [(h-2)*(w-2)]+[0]*9\n  idx_list = []\n  for idx, (a,b) in enumerate(black_list):\n    left = max(0, b-3)\n    top = max(0, a-3)\n    for row in range(top, a):\n      if row+2 >= h:\n        continue\n      for col in range(left, b):\n        if col+2 >= w:\n          continue\n        idx_list.append(row*w+col)\n\n  set_count = set(idx_list)\n  idx_list = sorted(idx_list)\n\n  ans = [0]*9\n  now = idx_list[0]\n  count = 0\n  for item in idx_list:\n    if item == now:\n      count += 1\n    else:\n      now = item\n      if count == 10:\n        print(item)\n      ans[count-1] += 1\n      count = 1\n  ans[count-1] += 1\n  return [(h-2)*(w-2)-len(set_count)]+ans\n\n\ndef __starting_point():\n  h,w,n = list(map(int,input().split()))\n  black_list = [tuple(map(int,input().split())) for _ in range(n)]\n  ret = solve(h,w,n,black_list)\n  for i in ret:\n    print(i)\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\nH,W,N = map(int,input().split())\nAB = [tuple(map(int,input().split())) for i in range(N)]\nfrom collections import defaultdict\ndic = defaultdict(lambda: 0)\nfor y,x in AB:\n    for dx in range(-1,2):\n        for dy in range(-1,2):\n            nx,ny = x+dx,y+dy\n            if not 1 <= nx <= W: continue\n            if not 1 <= ny <= H: continue\n            dic[(nx,ny)] += 1\n\nans = [0] * 10\nfor (x,y),c in dic.items():\n    if x==1 or x==W or y==1 or y==H: continue\n    ans[c] += 1\ns = sum(ans)\nans[0] = (W-2)*(H-2)-s\n\nprint(*ans, sep='\\n')", "H,W,N = map(int,input().split())\nD = {}\n\nwhile N:\n  N-=1\n  x,y = map(int,input().split())\n  \n  for i in range(9):\n    a = (x+i%3,y+i//3)\n    D[a] = D.get(a,0)+(H>=a[0]>2<a[1]<=W)\n\nc = [list(D.values()).count(i+1) for i in range(9)]\nprint((H-2)*(W-2)-sum(c))\n\nfor i in range(9):\n    print(c[i])", "from collections import defaultdict\nH,W,N = map(int,input().split())\nd = defaultdict(int)\ndef process(y,x):\n    nonlocal d\n    for nowy in range(y-1,y+2):\n        for nowx in range(x-1,x+2):\n            if 1<=nowy<H-1 and 1<=nowx<W-1:\n                d[(nowy,nowx)] += 1\n\n\nfor i in range(N):\n    a,b = map(int,input().split())\n    process(a-1,b-1)\n\nnum_black = [0] * 10\nfor value in d.values():\n    num_black[value] += 1\nnum_black[0] = max(0,(H-2)*(W-2)-sum(num_black))\nfor i,a in enumerate(num_black):\n    print(a)", "import sys\nfrom itertools import combinations\ninput = sys.stdin.readline\n\ndef main():\n    h, w, n = list(map(int, input().split()))\n    grid = [0]*n\n    mod = 10**9\n    judge = dict()\n    for _ in range(n):\n        a, b = list(map(int, input().split()))\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if a+i <= 1 or a+i >= h or b+j <= 1 or b+j >= w:\n                    continue\n                if (a+i, b+j) in judge:\n                    judge[(a+i, b+j)] += 1\n                else:\n                    judge[(a+i, b+j)] = 1\n   \n    ans = [0]*10\n    \n    for v in list(judge.values()):\n        ans[v] += 1\n    ans[0] = (h-2)*(w-2)-sum(ans[1:])\n    \n    for a in ans:\n        print(a)\n\n    \ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\nh,w,n = list(map(int, input().split()))\nfrom collections import defaultdict, Counter\nd = defaultdict(int)\nfor i in range(n):\n    a,b = list(map(int, input().split()))\n    for i in range(a-2, a+1):\n        for j in range(b-2, b+1):\n            if 1<=i<=h-2 and 1<=j<=w-2:\n                d[i,j] += 1\nans = [None]*10\nans[0] = (h-2)*(w-2) - len(d)\nc = Counter(list(d.values()))\nfor i in range(1,10):\n    if i in c:\n        ans[i] = c[i]\n    else:\n        ans[i] = 0\nwrite(\"\\n\".join(map(str, ans)))\n", "H,W,N=map(int,input().split())\ndirec=[[0,0],[-1,0],[-2,0],[0,-1],[-1,-1],[-2,-1],[0,-2],[-1,-2],[-2,-2]]\ndic={}\nfor i in range(N):\n  h,w=map(int,input().split())\n  for d in direc:\n    if 1<=h+d[0]<=(H-2) and 1<=w+d[1]<=(W-2):\n      l=(h+d[0],w+d[1])\n      if l in dic:\n        dic[l]=dic[l]+1\n      else:\n        dic[l]=1\nA=list(dic.values())\nprint((H-2)*(W-2)-len(A))\nfor i in range(1,10):\n  print(A.count(i))", "from collections import defaultdict\nfrom collections import Counter\n\nH, W, N = list(map(int, input().split()))\n\n# 3*3\u30de\u30b9\u306e\u51e6\u7406\u7528\u30ea\u30b9\u30c8\ndir = [[0, 0], [1, 0], [1, 1], [0, 1], [-1, 1],\n       [-1, 0], [-1, -1], [0, -1], [1, -1]]\n\n# \u305d\u306e\u30de\u30b9\u3092\u4e2d\u5fc3\u3068\u3059\u308b3*3\u30b0\u30ea\u30c3\u30c9\u306b\u542b\u307e\u308c\u308b\u9ed2\u30de\u30b9\u306e\u6570\ndict = defaultdict(int)\n\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    for dy, dx in dir:\n        # 3*3\u30b0\u30ea\u30c3\u30c9\u306f\u3001H*W\u306e\u4e2d\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\n        if 2 <= a + dy <= H - 1 and 2 <= b + dx <= W - 1:\n            dict[(a + dy, b + dx)] += 1\n\nc = Counter(list(dict.values()))\nans = [0 for _ in range(10)]\n\n# ans[1], ans[2], ..., ans[9]\u3092\u78ba\u5b9a\u3055\u305b\u308b\uff08ans[0]\u306f\u5f8c\u8ff0\uff09\nfor k, v in list(c.items()):\n    if v > 0:\n        ans[k] = v\n\n# \u5168\u4f53\u3067\u4f5c\u308c\u308b3*3\u30b0\u30ea\u30c3\u30c9\u306f(H-2)*(W-2)\u500b\n# ans[1],...,ans[9]\u306e\u7dcf\u548c\u3092\u5f15\u304f\u3068ans[0]\u306b\u306a\u308b\nans[0] = (H - 2) * (W - 2) - sum(ans[1:])\n\nfor i in range(10):\n    print((ans[i]))\n", "H, W , N = list(map(int,input().split()))\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nmatrix = []\nfor _ in range(N):\n    x,y = list(map(int,input().split()))\n    x -= 1\n    y -= 1\n    matrix.append([x,y])\nmatrix.sort()\nans = [0 for _ in range(10)]\ncand = {}\nfor l in matrix:\n    for x_r in [-2, -1 , 0]:\n        for y_r in [-2, -1 , 0]:\n            nowx = l[0] + x_r\n            nowy = l[1] + y_r\n            if nowx < 0 or nowy < 0 or nowx + 2>= H or nowy+ 2 >= W:\n                continue\n            #\u3053\u3053\u3067\u8d77\u70b9(\u5de6\u4e0a)nowx, nowy \u3068\u3057\u3066\u3000 9\u30de\u30b9\u306b\u7740\u76ee\u3059\u308b\n            name = str(nowx) + ' '  +str(nowy)\n            if name in cand : cand[name] += 1\n            else: cand[name] = 1\ntmp = ((H - 2) * (W - 2))\nfor x in list(cand.values()):\n    ans[x] += 1\n    tmp -= 1\nans[0] = tmp\nfor x in ans:\n    print(x)\n", "from collections import defaultdict\nH,W,N=map(int,input().split())\n\nallcase=(H-2)*(W-2)\n\nabset=set()\nfor _ in range(N):\n  a,b=map(int,input().split())\n  abset.add((a-1,b-1))\n#print(abset)\n\nmemo=defaultdict(int)\nfor a,b in abset:\n  for j in range(-2,1):\n    if a+j<0 or H-2<=a+j:\n      continue    \n    for k in range(-2,1):\n      if b+k<0 or W-2<=b+k:\n        continue\n      memo[(a+j,b+k)]+=1\n#print(memo)  \n\ncase_list=[0]*10\nfor v in memo.values():\n  case_list[v]+=1\ncase_list[0]=allcase-sum(case_list[1:])\n#print(case_list)\n\nfor i in range(10):\n  print(case_list[i])", "def main():\n    H, W, N = list(map(int, input().split()))\n    C = {}\n    for _ in range(N):\n        a, b = list(map(int, input().split()))\n        for x in range(max(2, a - 1), min(H, a + 2)):\n            for y in range(max(2, b - 1), min(W, b + 2)):\n                C[(x, y)] = C.get((x, y), 0) + 1\n    D = list(C.values())\n    print(((H - 2) * (W - 2) - len(C)))\n    for j in range(1, 10):\n        print((D.count(j)))\n\nmain()\n", "h,w,n=map(int,input().split())\nD=dict()\nfor i in range(n):\n    a,b=map(int,input().split())\n    for p in range(-1,2):\n        for q in range(-1,2):\n            aa=a+p\n            bb=b+q\n            if 2<=aa<=h-1 and 2<=bb<=w-1:\n                aabb=str(aa)+\"_\"+str(bb)\n                if aabb in D:\n                    D[aabb]+=1\n                else:\n                    D[aabb]=1\nans=[0]*10\nV=list(D.values())\nfor v in V:\n    ans[v]+=1\nans[0]=(h-2)*(w-2)-sum(ans)\nfor i in range(10):\n    print(ans[i])", "import sys\nsys.setrecursionlimit(10000000)\nMOD = 10 ** 9 + 7\nINF = 10 ** 15\n\nfrom collections import deque,defaultdict,Counter\ndef main():\n    H,W,N = map(int,input().split())\n    point = [tuple(map(int,input().split())) for _ in range(N)]\n    ans = [0] * 10\n\n    dic = defaultdict(int)\n    for p,q in point:\n        for dy in (-1,0,1):\n            for dx in (-1,0,1):\n                if p + dy <= 1 or p + dy >= H:\n                    continue\n                if q + dx <= 1 or q + dx >= W:\n                    continue\n                center = (p + dy,q + dx)\n                ans[dic[center]] -= 1\n                dic[center] += 1\n                ans[dic[center]] += 1\n    ans[0] += (H - 2)*(W - 2)\n    print('\\n'.join(map(str,ans)))\ndef __starting_point():\n    main()\n__starting_point()", "H, W, N, *L = map(int, open(0).read().split())\ndic = {}\nfor a, b in zip(*[iter(L)]*2):\n  for i in range(a-2,a+1):\n    for j in range(b-2,b+1):\n      if 0<i and i+2<=H and 0<j and j+2<=W:\n        dic[i*W+j] = dic.get(i*W+j,0)+1\nans = [0]*10\nans[0] = (W-2)*(H-2)\nfor k in dic.keys():\n  ans[dic[k]] += 1\n  ans[0] -= 1\nprint('\\n'.join(map(str,ans)))", "H, W, N = map(int, input().split())\nli = []\nfor i in range(N):\n  li.append(tuple(map(int, input().split())))\nt = tuple(li)\nst = set(t)\n#print(t)\n\nJs = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nfor a, b in t:\n  if a > H-2 or b > W-2:\n    pass\n  else:\n    t_p1 = ((a, b), (a, b+1), (a, b+2),\\\n            (a+1, b), (a+1, b+1), (a+1, b+2),\\\n            (a+2, b), (a+2, b+1), (a+2, b+2))\n    s1 = st & set(t_p1)\n    ls1 = len(s1)\n    Js[ls1] += 1\n  \n  if a > H-2 or b > W-1 or b < 2:\n    pass\n  else:\n    t_p2 = ((a, b-1), (a, b), (a, b+1),\\\n            (a+1, b-1), (a+1, b), (a+1, b+1),\\\n            (a+2, b-1), (a+2, b), (a+2, b+1))\n    s2 = st & set(t_p2)\n    ls2 = len(s2)\n    Js[ls2] += 1\n  \n  if a > H-2 or b < 3:\n    pass\n  else:\n    t_p3 = ((a, b-2), (a, b-1), (a, b),\\\n            (a+1, b-2), (a+1, b-1), (a+1, b),\\\n            (a+2, b-2), (a+2, b-1), (a+2, b))\n    s3 = st & set(t_p3)\n    ls3 = len(s3)\n    Js[ls3] += 1\n\n  if a > H-1 or a < 2 or b > W-2:\n    pass\n  else:\n    t_p4 = ((a-1, b), (a-1, b+1), (a-1, b+2),\\\n            (a, b), (a, b+1), (a, b+2),\\\n            (a+1, b), (a+1, b+1), (a+1, b+2))\n    s4 = st & set(t_p4)\n    ls4 = len(s4)\n    Js[ls4] += 1\n  \n  if a > H-1 or a < 2 or b > W-1 or b < 2:\n    pass\n  else:\n    t_p5 = ((a-1, b-1), (a-1, b), (a-1, b+1),\\\n            (a, b-1), (a, b), (a, b+1),\\\n            (a+1, b-1), (a+1, b), (a+1, b+1))\n    s5 = st & set(t_p5)\n    ls5 = len(s5)\n    Js[ls5] += 1\n  \n  if a > H-1 or a < 2 or b < 3:\n    pass\n  else:\n    t_p6 = ((a-1, b-2), (a-1, b-1), (a-1, b),\\\n            (a, b-2), (a, b-1), (a, b),\\\n            (a+1, b-2), (a+1, b-1), (a+1, b))\n    s6 = st & set(t_p6)\n    ls6 = len(s6)\n    Js[ls6] += 1\n  \n  if a < 3 or b > W-2:\n    pass\n  else:\n    t_p7 = ((a-2, b), (a-2, b+1), (a-2, b+2),\\\n            (a-1, b), (a-1, b+1), (a-1, b+2),\\\n            (a, b), (a, b+1), (a, b+2))\n    s7 = st & set(t_p7)\n    ls7 = len(s7)\n    Js[ls7] += 1\n  \n  if a < 3 or b > W-1 or b < 2:\n    pass\n  else:\n    t_p8 = ((a-2, b-1), (a-2, b), (a-2, b+1),\\\n            (a-1, b-1), (a-1, b), (a-1, b+1),\\\n            (a, b-1), (a, b), (a, b+1))\n    s8 = st & set(t_p8)\n    ls8 = len(s8)\n    Js[ls8] += 1\n  \n  if a < 3 or b < 3:\n    pass\n  else:\n    t_p9 = ((a-2, b-2), (a-2, b-1), (a-2, b),\\\n            (a-1, b-2), (a-1, b-1), (a-1, b),\\\n            (a, b-2), (a, b-1), (a, b))\n    s9 = st & set(t_p9)\n    ls9 = len(s9)\n    Js[ls9] += 1\n\nfor i in range(1, 10):\n  Js[i] = Js[i] // i\n\nall = (H - 2) * (W - 2)\nJs[0] = all - sum(Js)\n  \nfor i in range(10):\n  print(Js[i])", "from collections import defaultdict, Counter\nH, W, N = list(map(int, input().split()))\nL = []\nfor _ in range(N):\n    a, b = list(map(int, input().split()))\n    L.append([a, b])\n\n# \u9ed2\u3044\u30de\u30b9\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u3066\u53f3\u4e0b\u306e3 * \uff13\u30b0\u30ea\u30c3\u30c9\u30de\u30b9\u306b\u305f\u3069\u308a\u7740\u304d\u305f\u3044\u5834\u5408\u306f\u3053\u3046\uff01\nd = defaultdict()\nfor i in range(N):\n    for sx in range(3):\n        for sy in range(3):\n            if 3 <= L[i][0] + sx <= H and 3 <= L[i][1] + sy <= W:\n                if (L[i][0] + sx, L[i][1] + sy) not in d:\n                    d[(L[i][0] + sx, L[i][1] + sy)] = 1\n                else:\n                    d[(L[i][0] + sx, L[i][1] + sy)] += 1\n\n# print(d)\nc = Counter(list(d.values()))\nans = [0 for _ in range(10)]\n\nfor k, v in list(c.items()):\n    if v > 0:\n        ans[k] = v\n\nans[0] = (H - 2) * (W - 2) - sum(ans[1:])\n\nfor i in ans:\n    print(i)\n", "H, W , N = list(map(int,input().split()))\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nmatrix = []\nfor _ in range(N):\n    x,y = list(map(int,input().split()))\n    x -= 1\n    y -= 1\n    matrix.append([x,y])\nmatrix.sort()\nans = [0 for _ in range(10)]\ncand = {}\nfor l in matrix:\n    for x_r in [-2, -1 , 0]:\n        for y_r in [-2, -1 , 0]:\n            nowx = l[0] + x_r\n            nowy = l[1] + y_r\n            if nowx < 0 or nowy < 0 or nowx + 2>= H or nowy+ 2 >= W:\n                continue\n            #\u3053\u3053\u3067\u8d77\u70b9(\u5de6\u4e0a)nowx, nowy \u3068\u3057\u3066\u3000 9\u30de\u30b9\u306b\u7740\u76ee\u3059\u308b\n            name = str(nowx) + 'sakoda'  +str(nowy)\n            try: cand[name] += 1\n            except: cand[name] = 1\ntmp = ((H - 2) * (W - 2))\nfor x in list(cand.values()):\n    ans[x] += 1\n    tmp -= 1\nans[0] = tmp\nfor x in ans:\n    print(x)\n", "H, W, N = map(int, input().split())\nDraw = [tuple(map(int, input().split())) for _ in range(N)]\nfrom collections import defaultdict as dd\nSq =  dd(lambda:0) #3*3\u6b63\u65b9\u5f62\u3092\u5de6\u4e0a\u306e\u30de\u30b9\u306e\u5ea7\u6a19\u3067\u533a\u5225\u3002\u5024\u306f\u6b63\u65b9\u5f62\u5185\u306e\u9ed2\u5857\u308a\u306e\u500b\u6570\nIn = lambda x,y:[(x-i,y-j) for i in range(3) for j in range(3) if 0<=x-i<H-2 and 0<=y-j<W-2] #\u5857\u308a\u3064\u3076\u3057\u305f\u30de\u30b9\u3092\u542b\u3080\u6b63\u65b9\u5f62\u306e\u5ea7\u6a19\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u95a2\u6570\nfor a,b in Draw:\n    for x,y in In(a-1,b-1): \n        Sq[x,y] += 1 #Sq\u306e\u66f4\u65b0\nAns = [(H-2)*(W-2)-len(Sq)] + [sum(v==i for v in Sq.values()) for i in range(1,10)]         \nfor ans in Ans:\n    print(ans)", "h,w,n=map(int,input().split())\nfrom itertools import product as pr\nfrom collections import Counter as co\nans=[(h-2)*(w-2)]+[0]*9\nio=[tuple(map(int,input().split())) for i in range(n)]\nfor k,v in co(co([(a-x)*w+b-y for x,y in pr(range(3),repeat=2) for a,b in io if h-1>a-x>0<b-y<w-1]).values()).items():\n    ans[k]=v\n    ans[0]-=v\nprint(*ans,sep='\\n')", "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    H, W, n = map(int, input().split())\n    AB = set(tuple(tuple(map(lambda x: int(x) - 1, input().split())) for _ in range(n)))\n\n    d = ((1, 1), (1, 0), (1, -1), (0, 1), (0, 0), (0, -1), (-1, 1), (-1, 0), (-1, -1))\n    target = set()\n    res = [0] * 10\n    for h, w in AB:\n        cnt = 0\n        flg = True\n        for dh, dw in d:\n            next_h, next_w = h + dh, w + dw\n            if next_h < 0 or next_h >= H or next_w < 0 or next_w >= W:\n                flg = False\n            if (next_h, next_w) in AB:\n                cnt += 1\n            else:\n                if (next_h, next_w) not in AB:\n                    target.add((next_h, next_w))\n        if flg:\n            res[cnt] += 1\n\n    for h, w in target:\n        cnt = 0\n        for dh, dw in d:\n            next_h, next_w = h + dh, w + dw\n            if next_h < 0 or next_h >= H or next_w < 0 or next_w >= W:\n                break\n            if (next_h, next_w) in AB:\n                cnt += 1\n        else:\n            res[cnt] += 1\n\n    total = (H - 2) * (W - 2)\n    res[0] = total - sum(res)\n    print(*res, sep=\"\\n\")\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "H, W , N = list(map(int,input().split()))\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nmatrix = []\nfor _ in range(N):\n    x,y = list(map(int,input().split()))\n    x -= 1\n    y -= 1\n    matrix.append([x,y])\nmatrix.sort()\nans = [0 for _ in range(10)]\ncand = {}\nfor l in matrix:\n    for x_r in [-2, -1 , 0]:\n        for y_r in [-2, -1 , 0]:\n            nowx = l[0] + x_r\n            nowy = l[1] + y_r\n            if nowx < 0 or nowy < 0 or nowx + 2>= H or nowy+ 2 >= W:\n                continue\n            #\u3053\u3053\u3067\u8d77\u70b9(\u5de6\u4e0a)nowx, nowy \u3068\u3057\u3066\u3000 9\u30de\u30b9\u306b\u7740\u76ee\u3059\u308b\n            name = str(nowx) +\"hoge\" +str(nowy)\n            try: cand[name] += 1\n            except: cand[name] = 1\ntmp = ((H - 2) * (W - 2))\nfor x in list(cand.values()):\n    ans[x] += 1\n    tmp -= 1\nans[0] = tmp\nfor x in ans:\n    print(x)\n", "H,W,N = map(int,input().split())\n\nA = {}\nfor i in range(N):\n  a,b = map(int,input().split())\n  a-=1;b-=1\n  for t in range(3):\n    for s in range(3):\n      if 0<=a-t<H-2 and 0<=b-s<W-2:\n        if (a-t,b-s) not in A:\n          A[(a-t,b-s)]  = 1\n        else:\n          A[(a-t,b-s)]  += 1\n#print(A)\nans = [-1]\ntemp = list(A.values())\ntotal = 0\nfor i in range(1,10):\n  c = temp.count(i)\n  total += c\n  ans.append(c)\nans[0] = (H-2)*(W-2)-total\nprint(*ans, sep=\"\\n\")\n\n  ", "from itertools import product\nfrom collections import Counter\n\nH, W, N = map(int, input().split())\nV = set([tuple(map(int, input().split())) for _ in range(N)])\nD = tuple(product((-1, 0, 1), repeat=2))\n\nA = set()\ncnt = Counter()\nfor a, b in V:\n    for h, w in D:\n        if 2 <= a + h <= H - 1 and 2 <= b + w <= W - 1:\n            cnt[(a + h, b + w)] += 1\n\nans = [0] * 10\nfor c in cnt.values():\n    ans[c] += 1\n\nans[0] = (H - 2) * (W - 2) - sum(ans)\nprint(*ans, sep='\\n')\n", "import sys\nimport math\nfrom collections import deque\nfrom collections import Counter\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\n\ndef main():\n    H, W, N = NMI()\n    grid = {}\n    for i in range(N):\n        a, b = NMI()\n        for t in range(-2, 1):\n            for k in range(-2, 1):\n                if a + t < 1 or b + k < 1:\n                    continue\n                if a + t >= H - 1 or b + k >= W - 1:\n                    continue\n                point = (a+t) * 10**10 + b+k\n                grid[point] = grid.get(point, 0) + 1\n    c = Counter(grid.values())\n    for i in range(10):\n        if i == 0:\n            print((H-2)*(W-2) - sum(c.values()))\n        else:\n            print(c.get(i, 0))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "h, w, n = map(int,input().split())\n \nxy_pos = dict()\n \nfor i in range(n):\n    a, b = map(int, input().split())\n    for k in range(-2,1):\n        for l in range(-2,1):\n            x = (a-1) + k\n            y = (b-1) + l\n            if (0 <= x <= h-3 and 0 <= y <= w-3):\n                xy = str(x) + \"x\" + str(y)\n                if xy in xy_pos:\n                    xy_pos[xy] += 1\n                else:\n                    xy_pos[xy] = 1\n \nans = [0]*10                    \nfor v in xy_pos.values():\n    ans[v] += 1\nans[0] = (h-2)*(w-2) - sum(ans)\nfor i in range(10):\n    print(ans[i])", "H,W,N=map(int,input().split())\nD=dict()\nfor i in range(N):\n  a,b=map(int,input().split())\n  for p in range(-1,2):\n    for q in range(-1,2):\n      x=a+p\n      y=b+q\n      if 2<=x<=H-1 and 2<=y<=W-1:\n        pos=(x,y)\n        if pos in D:\n          D[pos]+=1\n        else:\n          D[pos]=1\nans=[0]*10\nV=list(D.values())\nfor v in V:\n  ans[v]+=1\nans[0]=(H-2)*(W-2)-sum(ans)\nprint(*ans,sep='\\n')", "from collections import defaultdict\nH, W, N, *L = map(int, open(0).read().split())\ndic = defaultdict(int)\nfor a, b in zip(*[iter(L)]*2):\n  for i in range(a-2,a+1):\n    for j in range(b-2,b+1):\n      if 0<i and i+2<=H and 0<j and j+2<=W:\n        dic[(i,j)] += 1\nans = [0]*10\nans[0] = (W-2)*(H-2)\nfor k in dic.keys():\n  ans[dic[k]] += 1\n  ans[0] -= 1\nprint(*ans,sep='\\n')", "import sys\ndef input():\n    return sys.stdin.readline()[:-1]\nH,W,N=map(int,input().split())\nd=[]\nfor i in range(N):\n    a,b=map(int,input().split())\n    for j in range(-1,2):\n        if not 1<a+j<H:\n            continue\n        for k in range(-1,2):\n            if not 1<b+k<W:\n                continue\n            t=(a+j,b+k)\n            d.append(t)\nd.sort()\nl=[0]*10\nt=0\nc=0\nfor i in d:\n    if i==t:\n        c+=1\n    else:\n        l[c]+=1\n        t=i\n        c=1\nl[c]+=1\nl[0]=(H-2)*(W-2)-sum(l)+1\nprint(*l,sep=\"\\n\")", "import sys\n\nh,w,n=list(map(int,input().split()))\nA = [list(map(int,input().split())) for _ in range(n)]\n\ndict = {}\nans = [0]*10\nans[0] = (w-2)*(h-2)\n\nfor item in A:#for every paint\n    cord = list(item)\n#    print(\"----{},{}----\".format(cord[0],cord[1]))\n    #update candidate\n    upcand = []#max9\n    for i in range(cord[0]-1,cord[0]+2):\n        for j in range(cord[1]-1,cord[1]+2):\n#            print(\"----({},{})----\".format(i,j))\n            upcand.append([i,j])\n#    print(upcand)\n    for cand in upcand:\n#        print(cand)\n        if 1 < cand[0] < h and 1 < cand[1] < w:\n#            print(cand)\n            dict[(cand[0],cand[1])] = dict.get((cand[0],cand[1]), 0) + 1\n#        print(dict)\nfor k,v in list(dict.items()):\n    ans[v] += 1\n    ans[0] -= 1\n\nfor i in ans:\n    print(i)\n", "#in1 = '4 5 8'\n#in2 = ['1 1', '1 4', '1 5', '2 3', '3 1', '3 2', '3 4', '4 4']\n#in1 = '10 10 20'\n#in2 = ['1 1', '1 4', '1 9', '2 5', '3 10', '4 2', '4 7', '5 9', '6 4', '6 6', '6 7', '7 1', '7 3', '7 7', '8 1', '8 5', '8 10', '9 2', '10 4', '10 9']\n#in1 = '1000000000 1000000000 0'\n#h, w, n = map(int, in1.split())\nh, w, n = list(map(int, input().split()))\n\nidx1 = 0\nab = [[0 for i in range(2)] for j in range(n)]\n\nblack_cnt = [0] * 10\nblack_cnt[0] = (h - 2) * (w - 2)\n\nif n != 0:\n    while idx1 < n:\n        x = input().split()\n        #x = in2[idx1].split()\n        ab[idx1] = [int(x[0]), int(x[1])]\n        idx1 += 1\n\n    myDict = {}\n    for abitem in ab:\n        if abitem[0] < 3:\n            sr = 0\n        else:\n            sr = abitem[0] - 3\n        if abitem[0] > h - 3:\n            lr = h - 2\n        else:\n            lr = abitem[0]\n        if abitem[1] < 3:\n            sc = 0\n        else:\n            sc = abitem[1] - 3\n        if abitem[1] > w - 3:\n            lc = w - 2\n        else:\n            lc = abitem[1]\n\n        for nowRow in range(sr, lr):\n            for nowCol in range(sc, lc):\n                key = str(nowRow) + ',' + str(nowCol)\n                if key in myDict:\n                    myDict[key] += 1\n                else:\n                    myDict[key] = 1\n\n    for bcnt in list(myDict.values()):\n        black_cnt[bcnt] += 1\n        black_cnt[0]    -= 1\n\nfor item in black_cnt:\n    print(item)\n", "h,w,n=list(map(int,input().split()))\nab=[list(map(int,input().split())) for _ in range(n)]\nfrom collections import defaultdict\ndct=defaultdict(int)\nans={i:0 for i in range(10)}\nans[0]=(h-2)*(w-2)\nfor a,b in ab:\n  a-=1\n  b-=1\n  u=max(0,a-2)\n  d=min(h-3,a)\n  l=max(0,b-2)\n  r=min(w-3,b)\n  for i in range(u,d+1):\n    for j in range(l,r+1):\n      ans[dct[(i,j)]]-=1\n      dct[(i,j)]+=1\n      ans[dct[(i,j)]]+=1\nfor i in range(10):\n  print((ans[i]))\n", "from collections import defaultdict\nfrom itertools import product\n\nH, W, N = map(int, input().split())\ncnt = defaultdict(int)\nD = tuple(product((-1, 0, 1), repeat=2))\n\nfor _ in range(N):\n    a, b = map(int, input().split())\n    for dh, dw in D:\n        h = a + dh\n        w = b + dw\n        if 2 <= h <= H - 1 and 2 <= w <= W - 1:\n            cnt[(h, w)] += 1\n\nans = [0] * 10\nfor c in cnt.values():\n    ans[c] += 1\nans[0] = (H - 2) * (W - 2) - sum(ans)\nprint(*ans, sep='\\n')\n", "def add_memo(tate,yoko):\n    nonlocal memo\n    if 2 <= tate <= h-1:\n        if 2 <= yoko <= w-1:\n            memo.append([tate,yoko])\n\nh,w,n = list(map(int,input().split()))\n#print(s)\nmemo = []\nfor i in range(0,n):\n    x,y = list(map(int,input().split()))\n    add_memo(x-1,y-1)\n    add_memo(x-1,y)\n    add_memo(x-1,y+1)\n    add_memo(x,y-1)\n    add_memo(x,y)\n    add_memo(x,y+1)\n    add_memo(x+1,y-1)\n    add_memo(x+1,y)\n    add_memo(x+1,y+1)\n\nmemo.sort()\nans = [0] * 10\nans[0] = (h-2)*(w-2)\ntmp_x = 0\ntmp_y = 0\ncount = 0\nfor i in range(0,len(memo)):\n    if tmp_x == memo[i][0] and tmp_y == memo[i][1]:\n        ans[count] -= 1\n        count += 1\n        ans[count] += 1\n    else:\n        ans[0] -= 1\n        count = 1\n        ans[count] += 1\n    tmp_x = memo[i][0]\n    tmp_y = memo[i][1]\n#    print(memo[i],count)\n\nfor i in range(0,10):\n    print((ans[i]))\n", "import numpy as np\nfrom collections import Counter\n\nh,w,n = map(int,input().split())\nd = {}\nfor i in range(n):\n    a,b = map(int,input().split())\n    a,b = a-1,b-1\n\n    am1_f = a-1 > 0\n    ap1_f = a+1 < h-1\n    bm1_f = b-1 > 0\n    bp1_f = b+1 < w-1\n    a_f = a > 0 and a < h-1\n    b_f = b > 0 and b < w-1\n\n    am1 = a-1\n    ap1 = a+1\n    bm1 = b-1\n    bp1 = b+1\n\n    if am1_f:\n        baseid = am1 * w\n        if b_f:\n            pid = baseid + b\n\n            if pid not in d:\n                d[pid] = 1\n            else:\n                d[pid] += 1\n\n        if bm1_f:\n            pid = baseid + bm1\n            if pid not in d:\n                d[pid] = 1\n            else:\n                d[pid] += 1\n\n        if bp1_f:\n            pid = baseid + bp1\n            if pid not in d:\n                d[pid] = 1\n            else:\n                d[pid] += 1\n\n    if ap1_f:\n        baseid = ap1*w\n        if b_f:\n            pid = baseid + b\n\n            if pid not in d:\n                d[pid] = 1\n            else:\n                d[pid] += 1\n\n        if bm1_f:\n            pid = baseid + bm1\n            if pid not in d:\n                d[pid] = 1\n            else:\n                d[pid] += 1\n\n        if bp1_f:\n            pid = baseid + bp1\n            if pid not in d:\n                d[pid] = 1\n            else:\n                d[pid] += 1\n    if a_f:\n\n        baseid = a * w\n        if b_f:\n            pid = baseid + b\n            if pid not in d:\n                d[pid] = 1\n            else:\n                d[pid] += 1\n\n        if bm1_f:\n            pid = baseid + bm1\n            if pid not in d:\n                d[pid] = 1\n            else:\n                d[pid] += 1\n\n        if bp1_f:\n            pid = baseid + bp1\n            if pid not in d:\n                d[pid] = 1\n            else:\n                d[pid] += 1\n    # print(d)\n\nans = [0 for i in range(10)]\n\nfor val in d.values():\n    ans[val] += 1\n\nans[0] = (h-2)*(w-2)-sum(ans)\n\nfor a in ans:\n    print(a)", "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict\n\nH, W, N = list(map(int, input().split()))\ndic = defaultdict(int)\ndx = [-1, 0, 1, -1, 0, 1, -1, 0, 1]\ndy = [1, 1, 1, 0, 0, 0, -1, -1, -1]\nfor i in range(N):\n    y, x = list(map(int, input().split()))\n    for j in range(9):\n        ny, nx = y+dy[j], x+dx[j]\n        if not 1 < ny < H: continue\n        if not 1 < nx < W: continue\n        dic[str(ny)+\":\"+str(nx)] += 1\ncount = [0]*10\ntot = (H-3+1)*(W-3+1)\ncount[0] = tot-len(list(dic.keys()))\nfor k,v in list(dic.items()):\n    count[v] += 1\nfor c in count:\n    print(c)\n", "from collections import defaultdict\nfrom collections import Counter\n\nH, W, N = list(map(int, input().split()))\n\n# 3*3\u30de\u30b9\u306e\u51e6\u7406\u7528\u30ea\u30b9\u30c8\ndir = [[0, 0], [1, 0], [1, 1], [0, 1], [-1, 1],\n       [-1, 0], [-1, -1], [0, -1], [1, -1]]\n\n# \u305d\u306e\u30de\u30b9\u3092\u4e2d\u5fc3\u3068\u3059\u308b3*3\u30b0\u30ea\u30c3\u30c9\u306b\u542b\u307e\u308c\u308b\u9ed2\u30de\u30b9\u306e\u6570\ndict = defaultdict(int)\n\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    for dy, dx in dir:\n        # 3*3\u30b0\u30ea\u30c3\u30c9\u306f\u3001H*W\u306e\u4e2d\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\n        if 2 <= a + dy <= H - 1 and 2 <= b + dx <= W - 1:\n            dict[(a + dy, b + dx)] += 1\n\nc = Counter(list(dict.values()))\nans = [0 for _ in range(10)]\n\n# ans[1], ans[2], ..., ans[9]\u3092\u78ba\u5b9a\u3055\u305b\u308b\uff08ans[0]\u306f\u5f8c\u8ff0\uff09\nfor k, v in list(c.items()):\n    if v > 0:\n        ans[k] = v\n\n# \u5168\u4f53\u3067\u4f5c\u308c\u308b3*3\u30b0\u30ea\u30c3\u30c9\u306f(H-2)*(W-2)\u500b\n# ans[1],...,ans[9]\u306e\u7dcf\u548c\u3092\u5f15\u304f\u3068ans[0]\u306b\u306a\u308b\nans[0] = (H - 2) * (W - 2) - sum(ans[1:])\n\nfor i in range(10):\n    print((ans[i]))\n", "H, W , N = list(map(int,input().split()))\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nmatrix = []\nfor _ in range(N):\n    x,y = list(map(int,input().split()))\n    matrix.append([x-1,y-1])\nans = [0 for _ in range(10)]\ncand = {}\nfor l in matrix:\n    for x_r in [-2, -1 , 0]:\n        for y_r in [-2, -1 , 0]:\n            nowx = l[0] + x_r\n            nowy = l[1] + y_r\n            if nowx < 0 or nowy < 0 or nowx + 2>= H or nowy+ 2 >= W:\n                continue\n            #\u3053\u3053\u3067\u8d77\u70b9(\u5de6\u4e0a)nowx, nowy \u3068\u3057\u3066\u3000 9\u30de\u30b9\u306b\u7740\u76ee\u3059\u308b\n            name = str(nowx) + ' '  +str(nowy)\n            if name in cand : cand[name] += 1\n            else: cand[name] = 1\ntmp = ((H - 2) * (W - 2))\nfor x in list(cand.values()):\n  ans[x] +=1\nans[0] =tmp - len(cand)\nfor x in ans:\n    print(x)\n", "import sys\nreadline = sys.stdin.readline\n\nH,W,N = list(map(int,readline().split()))\nfrom collections import defaultdict\n\n# 9x9\u306e\u30de\u30b9\u306e\u5de6\u4e0a\u306e\u30de\u30b9\u306e\u5ea7\u6a19\u3092\u30ad\u30fc\u306b\u3057\u3066\u3001\u5404\u6b63\u65b9\u5f62\u306e\u9ed2\u30de\u30b9\u6570\u3092dictionary\u3067\u7ba1\u7406\n# 10 ** 5 * 9\u7a0b\u5ea6\n\ndic = defaultdict(int)\n\nfor i in range(N):\n  a,b = list(map(int,readline().split()))\n  a,b = a - 1,b - 1\n  for A in range(max(0,a - 2), min(a + 1,H - 2)):\n    for B in range(max(0,b - 2), min(b + 1,W - 2)):\n      dic[(A,B)] += 1\n\nans = [0] * 10\nfor v in list(dic.values()):\n  ans[v] += 1\n\nans[0] = (H - 2) * (W - 2) - sum(ans[1:])\n\nfor a in ans:\n  print(a)\n", "from collections import Counter\n\nH, W, N = list(map(int, input().split()))\n\n# 3*3\u30de\u30b9\u306e\u51e6\u7406\u7528\u30ea\u30b9\u30c8\ndir = [[0, 0], [1, 0], [1, 1], [0, 1], [-1, 1],\n       [-1, 0], [-1, -1], [0, -1], [1, -1]]\n\n# \u305d\u306e\u30de\u30b9\u3092\u4e2d\u5fc3\u3068\u3059\u308b3*3\u30b0\u30ea\u30c3\u30c9\u306b\u542b\u307e\u308c\u308b\u9ed2\u30de\u30b9\u306e\u6570\ndict = {}\n\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    for dy, dx in dir:\n        # 3*3\u30b0\u30ea\u30c3\u30c9\u306f\u3001H*W\u306e\u4e2d\u306b\u5b8c\u5168\u306b\u542b\u307e\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\n        if 2 <= a + dy <= H - 1 and 2 <= b + dx <= W - 1:\n            if (a + dy, b + dx) not in dict:\n                dict[(a + dy, b + dx)] = 1\n            else:\n                dict[(a + dy, b + dx)] += 1\n\nc = Counter(list(dict.values()))\nans = [0 for _ in range(10)]\n\n# ans[1], ans[2], ..., ans[9]\u3092\u78ba\u5b9a\u3055\u305b\u308b\uff08ans[0]\u306f\u5f8c\u8ff0\uff09\nfor k, v in list(c.items()):\n    if v > 0:\n        ans[k] = v\n\n# \u5168\u4f53\u3067\u4f5c\u308c\u308b3*3\u30b0\u30ea\u30c3\u30c9\u306f(H-2)*(W-2)\u500b\n# ans[1],...,ans[9]\u306e\u7dcf\u548c\u3092\u5f15\u304f\u3068ans[0]\u306b\u306a\u308b\nans[0] = (H - 2) * (W - 2) - sum(ans[1:])\n\nfor i in range(10):\n    print((ans[i]))\n", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    input = sys.stdin.readline\n    H, W, N = map(int, input().split())\n    C = defaultdict(int)\n    for _ in range(N):\n        a, b = map(int, input().split())\n        a -= 1\n        b -= 1\n        for h in range(3):\n            for w in range(3):\n                if 0 <= a-h < H - 2 and 0 <= b-w < W - 2:\n                    C[(a-h, b-w)] += 1\n    \n    ans = [0] * 10\n    s = 0\n    for key in C:\n        ans[C[key]] += 1\n        s += 1\n    ans[0] = ((H - 2) * (W - 2) - s)\n    print(*ans, sep=\"\\n\") \n    #print(C)\n\n    return 0\n\ndef __starting_point():\n    solve()\n__starting_point()", "def main():\n    from collections import defaultdict\n    import sys\n    input = sys.stdin.readline\n\n    H, W, N = map(int, input().split())\n\n    g = defaultdict(int)\n    for _ in range(N):\n        a, b = (int(x) - 1 for x in input().split())\n        for i in range(3):\n            if a - i < 0: continue\n            if a - i + 3 > H: continue\n            for j in range(3):\n                if b - j < 0: continue\n                if b - j + 3 > W: continue\n                g[(a - i) * W + (b - j)] += 1\n                # (a,b)\u3092\u5857\u3063\u305f\u3068\u304d\u5f71\u97ff\u3055\u308c\u308b3x3\u30de\u30b9\u76ee\u306e\u5de6\u4e0a\u306e\u5ea7\u6a19\u306b\u52a0\u7b97\u3059\u308b\n\n    ctr = [0] * 10\n    tot = (H - 2) * (W - 2)\n    for cnt in g.values():\n        ctr[cnt] += 1\n        tot -= 1\n    ctr[0] = tot\n\n    print(*ctr, sep='\\n')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import defaultdict\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef MI1(): return map(int1, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\nh,w,n=MI()\nsq=defaultdict(int)\nfor _ in range(n):\n    a,b=MI1()\n    for i in range(max(0,a-2),min(h-2,a+1)):\n        for j in range(max(0,b-2),min(w-2,b+1)):\n            sq[i,j]+=1\ncnt=[0]*10\nfor k,v in sq.items():cnt[v]+=1\ncnt[0]=(h-2)*(w-2)-sum(cnt)\nprint(*cnt,sep=\"\\n\")\n", "import sys\nimport heapq, math\nfrom itertools import zip_longest, permutations, combinations, combinations_with_replacement\nfrom itertools import accumulate, dropwhile, takewhile, groupby\nfrom functools import lru_cache\nfrom copy import deepcopy\n\nH, W, N = map(int, input().split())\n\nm = {}\n\nfor i in range(N):\n    a, b = map(int, input().split())\n    for j in range(-2, 1):\n        for k in range(-2, 1):\n            if not 1 <= a + j <= H - 2 or not 1 <= b + k <= W - 2:\n                continue\n            m[(a + j, b + k)] = m.get((a + j, b + k), 0) + 1\n\nans = [0] * 10\n\nfor k, v in m.items():\n    ans[v] += 1\n\n\nans[0] = (H - 2) * (W - 2) - sum(ans[1 : 10])\nfor i in range(10):\n    print(ans[i])", "from collections import Counter\nH, W, N, *L = map(int, open(0).read().split())\ndic = {}\nfor a, b in zip(*[iter(L)]*2):\n  for i in range(a-2,a+1):\n    for j in range(b-2,b+1):\n      if 0<i and i+2<=H and 0<j and j+2<=W:\n        dic[i*W+j] = dic.get(i*W+j,0)+1\nc = Counter(dic.values())\nans = [(H-2)*(W-2)]+[0]*9\nfor k in c.keys():\n  ans[k] = c[k]\n  ans[0] -= c[k]\nprint('\\n'.join(map(str,ans)))", "import collections\nfrom itertools import product\n\nH, W, N = map(int,input().split())\nPaintList = []\npat = list(product((-2,-1,0),repeat=2))\nfor i in range(N):\n  x,y = map(int, input().split())\n  for p in pat:\n    xw = x + p[0]\n    yw = y + p[1]\n    #print(xw,yw)\n    if 1 <= xw <= H-2 and 1 <= yw <= W-2:\n      PaintList.append((xw,yw))\n\nc = collections.Counter(PaintList)\n#print(c)\nans = [0] * 10\nfor k,v in c.items():\n  if k[0] <= H-2 and k[1] <= W-2:\n    ans[v] += 1\n  \nans[0] = (H-2)*(W-2) - sum(ans[1:10])\n \nfor i in range(10):\n  print(ans[i])", "import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    H, W, n = map(int, input().split())\n    AB = set(tuple(tuple(map(lambda x: int(x) - 1, input().split())) for _ in range(n)))\n\n    d = ((1, 1), (1, 0), (1, -1), (0, 1), (0, 0), (0, -1), (-1, 1), (-1, 0), (-1, -1))\n    target = set()\n    res = [0] * 10\n    for h, w in AB:\n        cnt = 0\n        flg = True\n        for dh, dw in d:\n            next_h, next_w = h + dh, w + dw\n            if next_h < 0 or next_h >= H or next_w < 0 or next_w >= W:\n                flg = False\n            if (next_h, next_w) in AB:\n                cnt += 1\n            else:\n                target.add((next_h, next_w))\n        if flg:\n            res[cnt] += 1\n\n    for h, w in target:\n        cnt = 0\n        for dh, dw in d:\n            next_h, next_w = h + dh, w + dw\n            if next_h < 0 or next_h >= H or next_w < 0 or next_w >= W:\n                break\n            if (next_h, next_w) in AB:\n                cnt += 1\n        else:\n            res[cnt] += 1\n\n    total = (H - 2) * (W - 2)\n    res[0] = total - sum(res)\n    print(*res, sep=\"\\n\")\n\n\ndef __starting_point():\n    resolve()\n\n__starting_point()", "H, W, N = map(int, input().split())\nfrom collections import defaultdict as dd\nGrid =  dd(lambda:0) #3*3\u6b63\u65b9\u5f62\u3092\u5de6\u4e0a\u306e\u30de\u30b9\u3067\u533a\u5225\u3002\u5024\u306f\u6b63\u65b9\u5f62\u5185\u306e\u9ed2\u5857\u308a\u306e\u500b\u6570\nDraw = lambda x,y:[(x-i,y-j) for i in range(3) for j in range(3) if 0<=x-i<H-2 and 0<=y-j<W-2] #\u5857\u308a\u3064\u3076\u3057\u305f\u30de\u30b9\u3092\u542b\u3080\u6b63\u65b9\u5f62\u306e\u5ea7\u6a19\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u95a2\u6570\nfor _ in range(N):\n    a, b = map(int, input().split())\n    for x,y in Draw(a-1,b-1): #Grid\u306e\u66f4\u65b0\n        Grid[x,y] += 1\nAns = [(H-2)*(W-2)-len(Grid) if i == 0 else sum(v==i for v in Grid.values()) for i in range(10)]         \nfor ans in Ans:\n    print(ans)", "import sys\ndef input():\n    return sys.stdin.readline()[:-1]\nH,W,N=map(int,input().split())\nd={}\nfor i in range(N):\n    a,b=map(int,input().split())\n    for j in range(-1,2):\n        if not 1<a+j<H:\n            continue\n        for k in range(-1,2):\n            if not 1<b+k<W:\n                continue\n            t=(a+j,b+k)\n            if t in d:\n                d[t]+=1\n            else:\n                d[t]=1\nl=[0]*10\nfor i in d.values():\n    l[i]+=1\nl[0]=(H-2)*(W-2)-sum(l)\nprint(*l,sep=\"\\n\")", "H, W , N = list(map(int,input().split()))\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nmatrix = []\nfor _ in range(N):\n    x,y = list(map(int,input().split()))\n    x -= 1\n    y -= 1\n    matrix.append([x,y])\nans = [0 for _ in range(10)]\ncand = {}\nfor l in matrix:\n    for x_r in [-2, -1 , 0]:\n        for y_r in [-2, -1 , 0]:\n            nowx = l[0] + x_r\n            nowy = l[1] + y_r\n            if nowx < 0 or nowy < 0 or nowx + 2>= H or nowy+ 2 >= W:\n                continue\n            #\u3053\u3053\u3067\u8d77\u70b9(\u5de6\u4e0a)nowx, nowy \u3068\u3057\u3066\u3000 9\u30de\u30b9\u306b\u7740\u76ee\u3059\u308b\n            name = str(nowx) + ' '  +str(nowy)\n            if name in cand : cand[name] += 1\n            else: cand[name] = 1\ntmp = ((H - 2) * (W - 2))\nfor x in list(cand.values()):\n    ans[x] += 1\n    tmp -= 1\nans[0] = tmp\nfor x in ans:\n    print(x)\n", "h, w, n = [int(i) for i in input().split()]\nA = [0 for _ in range(n)]\nB = [0 for _ in range(n)]\ncnt = {}\n\n\nfor i in range(n):\n\ta, b = [int(j) for j in input().split()]\n\tif a > 1 and b > 1 and a < h and b < w:\n\t\tif \"{} {}\".format(a, b) not in list(cnt.keys()):\n\t\t\tcnt[\"{} {}\".format(a, b)] = 0\n\t\tcnt[\"{} {}\".format(a, b)] += 1\n\tif a > 2 and b > 2 and a <= h and b <= w:\t\n\t\tif \"{} {}\".format(a-1, b-1) not in list(cnt.keys()):\n\t\t\tcnt[\"{} {}\".format(a-1, b-1)] = 0\n\t\tcnt[\"{} {}\".format(a-1, b-1)] += 1\n\tif a > 2 and b > 1 and a <= h and b < w:\t\n\t\tif \"{} {}\".format(a-1, b) not in list(cnt.keys()):\n\t\t\tcnt[\"{} {}\".format(a-1, b)] = 0\n\t\tcnt[\"{} {}\".format(a-1, b)] += 1\n\tif a > 2 and b > 0 and a <= h and b < w-1:\n\t\tif \"{} {}\".format(a-1, b+1) not in list(cnt.keys()):\n\t\t\tcnt[\"{} {}\".format(a-1, b+1)] = 0\n\t\tcnt[\"{} {}\".format(a-1, b+1)] += 1\n\tif a > 1 and b > 2 and a < h and b <= w:\n\t\tif \"{} {}\".format(a, b-1) not in list(cnt.keys()):\n\t\t\tcnt[\"{} {}\".format(a, b-1)] = 0\n\t\tcnt[\"{} {}\".format(a, b-1)] += 1\n\tif a > 0 and b > 0 and a < h-1 and b < w-1:\n\t\tif \"{} {}\".format(a+1, b+1) not in list(cnt.keys()):\n\t\t\tcnt[\"{} {}\".format(a+1, b+1)] = 0\n\t\tcnt[\"{} {}\".format(a+1, b+1)] += 1\n\tif a > 0 and b > 1 and a < h-1 and b < w:\n\t\tif \"{} {}\".format(a+1, b) not in list(cnt.keys()):\n\t\t\tcnt[\"{} {}\".format(a+1, b)] = 0\n\t\tcnt[\"{} {}\".format(a+1, b)] += 1\n\tif a > 1 and b > 0 and a < h and b < w-1:\n\t\tif \"{} {}\".format(a, b+1) not in list(cnt.keys()):\n\t\t\tcnt[\"{} {}\".format(a, b+1)] = 0\n\t\tcnt[\"{} {}\".format(a, b+1)] += 1\n\tif a > 0 and b > 2 and a < h-1 and b <= w:\n\t\tif \"{} {}\".format(a+1, b-1) not in list(cnt.keys()):\n\t\t\tcnt[\"{} {}\".format(a+1, b-1)] = 0\n\t\tcnt[\"{} {}\".format(a+1, b-1)] += 1\n\ncount = [0 for i in range(10)]\nfor i in list(cnt.values()):\n\tcount[i] += 1\ncount[0] =  (h-2)*(w-2) - len(cnt)\n\nfor i in count:\n\tprint(i)\n\n\n\n", "H,W,N = map(int,input().split())\nNli=[]\nfor k in range(N):\n    a,b=map(int,input().split())\n    for n in range(-1,2):\n        for m in range(-1,2):\n            if 0<=a-2-m<H-2 and 0<=b-2-n<W-2:\n                Nli.append((b-n)*(H)+(a-m))\nimport collections\ns = collections.Counter(Nli)\nv = list(s.values())\nprint((H-2)*(W-2)-len(set(Nli)))\nfor k in range(1,10):\n    print(v.count(k))", "h, w, n = map(int, input().split())\ncnt = {}\n\nfor _ in range(n):\n    a, b = map(int, input().split())\n    a, b = a - 1, b - 1\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if 0 < a + i < h - 1 and 0 < b + j < w - 1:\n                if (a+i, b+j) not in cnt:\n                    cnt[(a+i, b+j)] = 0\n                cnt[(a+i, b+j)] += 1\n\nans = {i: 0 for i in range(10)}\nans[0] = (h - 2) * (w - 2)\nfor _, x in cnt.items():\n    ans[x] += 1\n    ans[0] -= 1\n\nfor i in range(10):\n    print(ans[i])", "H, W, N = map(int, input().split())\nd = {}\n\nfor i in range(N):\n    a, b = map(int, input().split())\n    a, b = a-1, b-1\n    for j in range(-1, 2):\n        for k in range(-1, 2):\n            if 1 <= a+j < H-1 and 1 <= b+k < W-1:\n                if d.get((a+j, b+k)) is None:\n                    d[(a+j, b+k)] = 0\n                d[(a+j, b+k)] += 1\n\n\nans = [0] * 10\nfor v in d.values():\n    ans[v] += 1\nans[0] = (H-2)*(W-2)-sum(ans[1:])\n\nfor i in range(10):\n    print(ans[i])", "import sys\nreadline = sys.stdin.readline\n\nH,W,N = map(int,readline().split())\nfrom collections import defaultdict\n\n# 9x9\u306e\u30de\u30b9\u306e\u5de6\u4e0a\u306e\u30de\u30b9\u306e\u5ea7\u6a19\u3092\u30ad\u30fc\u306b\u3057\u3066\u3001\u5404\u6b63\u65b9\u5f62\u306e\u9ed2\u30de\u30b9\u6570\u3092dictionary\u3067\u7ba1\u7406\n# 10 ** 5 * 9\u7a0b\u5ea6\n\ndic = defaultdict(int)\n\nfor i in range(N):\n  a,b = map(int,readline().split())\n  a,b = a - 1,b - 1\n  for A in range(max(0,a - 2), min(a + 1,H - 2)):\n    if A < 0:\n      continue\n    for B in range(max(0,b - 2), min(b + 1,W - 2)):\n      if B < 0:\n        continue\n      dic[(A,B)] += 1\n\nans = [0] * 10\nfor v in dic.values():\n  ans[v] += 1\n\nans[0] = (H - 2) * (W - 2) - sum(ans[1:])\n\nfor a in ans:\n  print(a)", "import sys\n\ndef getsqs(coor,h,w):\n    l=[coor[0]+x+h*(coor[1]+y-1) for x in range(-1,2) for  y in range(-1,2) \\\n        if coor[0]+x>1 and coor[0]+x<h and coor[1]+y>1 and coor[1]+y<w]\n    return l\n\ndef main(h,w,coords):\n    sq=[]\n    ans=[0 for _ in range(10)]\n    for coor in coords:\n        sq.extend(getsqs(coor,h,w))\n#        print(coor,getsqs(coor,h,w))\n    sq.sort()\n    sq.append(h*w)\n    ind=0\n    for x in range(len(sq)-1):\n        if sq[x+1]-sq[x]!=0:\n            ans[x-ind+1]+=1\n            ind=x+1\n    ans[0]=max(0,(h-2)*(w-2)-sum(ans))\n    return ans\n\nh,w,n=list(map(int,sys.stdin.readline().strip().split()))\ncoords=[list(map(int,sys.stdin.readline().strip().split())) for _ in range(n)]\n\nfor x in main(h,w,coords):\n    print(x)\n\n", "from collections import Counter\nh, w, n = list(map(int, input().split()))\nc = Counter([])\n\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    a-=1; b-=1\n\n    for i in range(-2, 1):\n        for j in range(-2, 1):\n            if 0<=a+i<h-2 and 0<=b+j<w-2:\n                c[(a+i, b+j)]+=1\n\nans = [0] * 10\ntotal = 0\nfor k, v in list(c.items()):\n    ans[v]+=1\n    total+=1\nans[0]=(h-2)*(w-2) - total\n\n\nfor a in ans:\n    print(a) \n    \n\n", "H, W, N = [int(v) for v in input().split()]\npoints = (list(map(int, input().split())) for _ in range(N))\nmemory = {}\nfor ai, bi in points:\n    for i in range(max(2, ai - 1), min(H - 1, ai + 1) + 1):\n        for j in range(max(2, bi - 1), min(W - 1, bi + 1) + 1):\n            key = (i, j)\n            if not key in memory:\n                memory[key] = 0\n            memory[key] += 1\n\ncounter = {i: 0 for i in range(1, 10)}\nfor v in list(memory.values()):\n    counter[v] += 1\n\nprint(((H - 2) * (W - 2) - sum(counter.values())))\nfor i in range(1, 10):\n    print((counter[i]))\n", "h, w, n = list(map(int, input().split()))\nfrom collections import defaultdict\nd = defaultdict(int)\nsurround = [(0, 0), (1,1), (1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (0, 1)]\nfor _ in range(n):\n    x, y  = list(map(int, input().split()))\n    x -= 1\n    y -= 1\n    for i in surround:\n        if x + i[0] >= h or x + i[0] < 0 or y + i[1] < 0 or y + i[1] >= w:\n            continue\n        else:\n            d[(x+i[0], y + i[1])] += 1\nnum = [0]*10\nfor key in d:\n    if key[0] >= 1 and key[0] < h -1 and key[1] >= 1 and key[1] < w-1:\n        num[d[key]] += 1\n\nnum[0] = (h-2)*(w-2) - sum(num)\n\nfor ans in num:\n    print(ans)\n"]