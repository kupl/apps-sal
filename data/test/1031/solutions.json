["n = int(input())\na = [int(i) for i in input().split()]\nminy = 0\nmaxy = 0\ns = 0\nfor i in range(n):\n    if i % 2 == 0:\n        s += a[i]\n    else:\n        s -= a[i]\n    maxy = max(s, maxy)\n    miny = min(s, miny)\ndif = maxy - miny\nsize = sum(a)\nres = [[\" \"] * size for i in range(dif)]\ncur = [maxy, 0]\nfor i in range(n):\n    if i % 2 == 0:\n        cur[0] -= 1\n    else:\n        cur[0] += 1\n    for j in range(a[i]):\n        if i % 2 == 0:\n            res[cur[0]][cur[1]] = \"/\"\n            cur[0] -= 1\n        else:\n            res[cur[0]][cur[1]] = \"\\\\\"\n            cur[0] += 1\n        cur[1] += 1\n\nfor i in res:\n    print(\"\".join(i))", "import operator\n\n\nn = int(input())\na = tuple(map(int, str.split(input())))\n\np = [(0, 0)]\nfor i, x in enumerate(a):\n\n    p.append((p[-1][0] + x, p[-1][1] + (-1) ** i * x))\n\nymax = max(p, key=operator.itemgetter(1))[1]\nymin = min(p, key=operator.itemgetter(1))[1]\n\ncolumns = []\nfor i in range(n):\n\n    x1, y1 = p[i]\n    x2, y2 = p[i + 1]\n    while x1 != x2:\n\n        if y1 < y2:\n\n            columns.append(\" \" * (ymax - y1 - 1) + \"/\" + \" \" * (y1 - ymin))\n            y1 += 1\n\n        else:\n\n            columns.append(\" \" * (ymax - y1) + \"\\\\\" + \" \" * (y1 - ymin - 1))\n            y1 -= 1\n\n        x1 += 1\n\nprint(str.join(\"\\n\", [str.join(\"\", t) for t in zip(*columns)]))\n", "n = int(input())\na = list(map(int, input().split()))\nx = sum(a)\narr = [[-1,0,0]]\nfor i in range(n):\n    \n    if i % 2 == 0:\n        arr.append([arr[-1][0] + 1, arr[-1][1], '/'])\n        for k in range(a[i] - 1):\n            arr.append([arr[-1][0] + 1, arr[-1][1] + 1, '/'])\n    else:\n        arr.append([arr[-1][0] + 1, arr[-1][1], '\\\\'])\n        for k in range(a[i] - 1):\n            arr.append([arr[-1][0] + 1, arr[-1][1] - 1, '\\\\'])\nfor i in range(len(arr)):\n    arr[i][0], arr[i][1] = arr[i][1], -arr[i][0]\narr.pop(0)\narr.sort()\narr = arr[::-1]\nfor i in range(len(arr)):\n    arr[i][1] = - arr[i][1]\nprint(' ' * arr[0][1], end = '')\nprint(arr[0][2], end = '')\nfor i in range(1, len(arr)):\n    if arr[i][0] == arr[i - 1][0]:\n        print(' ' * (arr[i][1] - arr[i - 1][1] - 1), end = '')\n        print(arr[i][2], end = '')\n    else:\n        print(' ' * (x - arr[i - 1][1] - 1))\n        print(' ' * arr[i][1], end = '')\n        print(arr[i][2], end = '')        \nprint(' ' * (x - arr[-1][1] - 1), end = '')", "import operator\n\nn = int(input())\npoints = list(map(int, input().split()))\n\ndef praf(g):\n    for i in g[1:]:\n        print(''.join(i))\n\ndef calc(n):\n    nonlocal points\n    a = b = 0\n    step = 1\n    for i in range(n):\n        a += points[i]\n        b += points[i] * step\n        step = -step\n    return (a, b)\n\nseq = [(0, 0)]\nfor i in range(len(points)):\n    seq.append(calc(i+1))\n\nseq = sorted(seq, key=lambda x: x[0])\nseq = {i: seq[i] for i in range(len(seq))}\n#print(seq)\n\nfor i in range(len(seq)):\n    r = 0\n    if i != len(seq)-1:\n        if seq[i][1] > seq[i+1][1]:\n            r = -1\n        else:\n            r = 1\n\n    seq[i] = seq[i] + tuple([r])\n\n\nseqy = sorted(list(seq.items()), key=lambda x: x[1][1], reverse=True)\n\npts = {x[0]: x[2] for x in list(seq.values())}\n\npts[seq[len(seq)-1][0]] = 1\n\n#print('---seq---')\n#print(seq)\n#print('----seqy---')\n#print(seqy)\n#print('---pts---')\n#print(pts)\n\ngraph = [[' '] * seq[len(seq)-1][0] for x in range(seqy[0][1][1]-seqy[-1][1][1]+1)]\n\ny = seqy[0][1][1]\n\n\nway = pts[0]\nfor i in range(len(graph[0])):\n    if i in list(pts.keys()):\n        if pts[i] != way:\n            if way == 1:\n                y+=1\n            else:\n                y-=1\n\n        way = pts[i]\n\n\n    graph[y][i] = '/' if way == 1 else '\\\\'\n    y -= way\n#    praf(graph)\n\n\n#print('----------------graph-----------------------------------------------------------')\npraf(graph)\n\n\n\n\n\n\n\n#praf(graph)\n\n", "n = int(input())\na = [int(c) for c in input().split()]\n\nkardio = [[]]\n\n\n# for i in range(len(a)):\n#     x += a[i]\n#     if i % 2 == 1:\n#         y -= a[i]\n#     else:\n#         y += a[i]\n#\n#     kardio.append((x,y))\n#\n# print(kardio)\n\n\ndef add_to_kardio(index, symbol):\n    # print('before_add',kardio,index,symbol)\n    for i in range(len(kardio)):\n        tmp = symbol if i == index else ' '\n        kardio[i].append(tmp)\n    # print('after_add',kardio)\n\ndef add_empty_top(length):\n    # print('add_top',length,[' '] * length)\n    kardio.insert(0, [' '] * length)\n\n\ndef add_empty_bottom(length):\n    kardio.append([' '] * length)\n\ncurrent_x = 0\ncurrent_y = -1\n\nfor i in range(len(a)):\n    if i % 2 == 0:\n        current_y += 1\n        for t in range(a[i]):\n            # print('trying to up: ',current_y)\n            current_y -= 1\n\n            if current_y >= 0:\n                add_to_kardio(current_y,'/')\n            else:\n                add_empty_top(current_x)\n                current_y = 0\n                add_to_kardio(current_y, '/')\n\n\n            current_x +=1\n            # print(kardio)\n    else:\n        current_y -= 1\n        for t in range(a[i]):\n            # print('trying to down: ',current_y)\n            current_y += 1\n\n            if current_y < len(kardio):\n                add_to_kardio(current_y, '\\\\')\n            else:\n                add_empty_bottom(current_x)\n                add_to_kardio(current_y, '\\\\')\n\n            current_x +=1\n            # print(kardio)\n\nfor i in range(len(kardio)):\n    print(''.join(kardio[i]))", "3\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\nmovement_array = [int(nbr) for nbr in sys.stdin.readline().split()]\n\nrelative_pos = [(0,1)]\ncurrentPos = 0\ndirection = 1\nfor move in movement_array:\n\tcurrentPos += move * direction\n\tdirection *= -1\n\trelative_pos.append((currentPos,direction))\n\nobjective_pos = []\n#print(relative_pos)\nminimum = min(relative_pos, key=lambda x: x[0])[0]\nfor n in range(0,len(relative_pos)):\n\tobjective_pos.append((relative_pos[n][0] + (-minimum), relative_pos[n][1]))\n\nwidth = 0\nfor n in range(0,len(objective_pos)-1):\n\twidth += math.fabs(objective_pos[n+1][0]-objective_pos[n][0])\nwidth = int(width)\n\nheight = max(objective_pos, key=lambda x: x[0])[0] + 1\n\nmatrix = [[\" \" for x in range(width)] for x in range(height-1)]\n\n#print(objective_pos)\n \nxpos = 0\nfor n in range(0,len(objective_pos)-1):\n\tdirection = objective_pos[n][1]\n\typos = objective_pos[n][0]\n\t#print(ypos)\n\ttargetpos = objective_pos[n+1][0]\n\twhile math.fabs(ypos - targetpos) > 0:\n\t\tif direction == 1:\n\t\t\tmatrix[ypos][xpos] = \"/\"\n\t\t\typos += 1\n\t\telse:\n\t\t\tmatrix[ypos-1][xpos] = \"\\\\\"\n\t\t\typos -= 1\n\t\txpos += 1\n\nfor row in reversed(matrix):\n\tprint(\"\".join(row))\n\n\n\n\n\n", "n = int(input())\na = list(map(int, input().split()))\nx = [0] * (n + 1)\ny = [0] * (n + 1)\nfor i in range(1, n + 1):\n  x[i] = x[i - 1] + a[i - 1]\n  y[i] = y[i - 1]\n  if i % 2 == 0:\n    y[i] -= a[i - 1]\n  else:\n    y[i] += a[i - 1]\n# print(x)\n# print(y)\nm = min(y)\nif m < 0:\n  for i in range(n + 1):\n    y[i] -= m\n# print(y)\nw = max(x)\nh = max(y)\n# print(h, w)\nd = [[\" \"] * w for i in range(h)]\nfor i in range(n):\n  if y[i] < y[i + 1]:\n    for j in range(a[i]):\n#       print(y[i] + j, x[i] + j, \"/\")\n      d[y[i] + j][x[i] + j] = \"/\"\n  else:\n    for j in range(a[i]):\n#       print(y[i] - j - 1, x[i] + j, \"\\\\\")\n      d[y[i] - j - 1][x[i] + j] = \"\\\\\"\nprint(\"\\n\".join(\"\".join(d[i]) for i in reversed(range(h))))", "n = int(input())\na = list(map(int, input().split()))\nx = [0] * (n + 1)\ny = [0] * (n + 1)\nfor i in range(1, n + 1):\n  x[i] = x[i - 1] + a[i - 1]\n  y[i] = y[i - 1]\n  if i % 2 == 0:\n    y[i] -= a[i - 1]\n  else:\n    y[i] += a[i - 1]\nm = min(y)\nif m < 0:\n  for i in range(n + 1):\n    y[i] -= m\nw = max(x)\nh = max(y)\nd = [[\" \"] * w for i in range(h)]\nfor i in range(n):\n  if y[i] < y[i + 1]:\n    for j in range(a[i]):\n      d[y[i] + j][x[i] + j] = \"/\"\n  else:\n    for j in range(a[i]):\n      d[y[i] - j - 1][x[i] + j] = \"\\\\\"\nprint(\"\\n\".join(\"\".join(d[i]) for i in reversed(range(h))))", "n, a = int(input()), list(map(int, input().split()))\nif n & 1: a.append(0)\nx, t = 0, [[' '] * sum(a) for i in range(2001)]\ny = u = v = 1000\nfor i in range(0, n, 2):\n    for j in range(a[i]):\n        t[y][x] = '/'\n        x += 1\n        y += 1\n    v = max(v, y)\n    for j in range(a[i + 1]):\n        y -= 1\n        t[y][x] = '\\\\'\n        x += 1\n    u = min(u, y)\nfor i in range(v - 1, u - 1, -1): print(''.join(t[i]))", "n = int(input())\na_list = list(map(int, list(str(input()).split(\" \"))))\n\nout = [' '*(sum(a_list))]*2000\ncur,pref_size = 1000, 0\ncur_max, cur_min = 1000,1000\nfor k in range(n):\n    for i in range(a_list[k]):\n        ind = pref_size + i\n        if k % 2 == 0:\n            out[cur] = out[cur][:ind] + '/' + out[cur][ind+1:]\n            cur += 1\n        else:\n            out[cur] = out[cur][:ind] + '\\\\' + out[cur][ind+1:]\n            cur -= 1\n\n    if k % 2 == 1:\n        cur += 1\n        cur_min = min(cur_min, cur)\n    else:\n        cur -= 1\n        cur_max = max(cur_max, cur)\n        \n    pref_size += a_list[k]\n\nfor i in range(cur_max,cur_min-1,-1):\n    print(out[i])\n", "n = int(input())\na = list(map(int, input().split()))\ngraph = [[' '] * 1000 for _ in range(2001)]\nx, y = 0, 1000\n\nfor i in range(n):\n    for j in range(a[i]):\n        if i % 2:\n            graph[y][x] = '\\\\'\n            if j != a[i] - 1:\n                y += 1\n        else:\n            graph[y][x] = '/'\n            if j != a[i] - 1:\n                y -= 1\n        x += 1\n\nfor i in range(2000, -1, -1):\n    graph[i] = ''.join(graph[i][:x])\n    if not len(set(graph[i]) & set(['/', '\\\\'])):\n        graph.pop(i)\n\nprint('\\n'.join(graph))\n", "n, a = int(input()), list(map(int, input().split()))\nif n & 1: a.append(0)\nx, t = 0, [[' '] * sum(a) for i in range(2001)]\ny = u = v = 1000\nfor i in range(0, n, 2):\n    for j in range(a[i]):\n        t[y][x] = '/'\n        x += 1\n        y += 1\n    v = max(v, y)\n    for j in range(a[i + 1]):\n        y -= 1\n        t[y][x] = '\\\\'\n        x += 1\n    u = min(u, y)\nfor i in range(v - 1, u - 1, -1): print(''.join(t[i]))", "n = input()\na = list(map(int,input().split()))\nl = sum(a)\nh = maxh = minh = 1000\ntable = [[\" \"]*l for i in range(2001)]\nk = 0\nsign = 1\nfor i in a:\n    if sign == 1:\n        for j in range(i):\n            table[h+j][k+j] = \"/\"\n        maxh = max(maxh,h+(i-1))\n        h += i-1\n    else:\n        for j in range(i):\n            table[h-j][k+j] = \"\\\\\"\n        minh = min(minh,h-(i-1))\n        h -= i-1\n    k += i\n    sign *= -1\nfor i in range(maxh,minh-1,-1):\n    print (''.join(table[i]))", "n = int(input())\na = list(map(int, input().split()))\n\nMax = 1000\nMin = 1000\n\nsum = 0\nfor i in range(len(a)):\n    sum += a[i]\n\nmyMap = [[\" \"] * 2020 for i in range(2020)]\n\nx, y = 1000, 0\nfor i in range(n):\n    if (i & 1) == 0:\n        for j in range(a[i]):\n            myMap[x][y] = \"/\"\n            x -= 1\n            y += 1\n        x += 1\n    else:\n        for j in range(a[i]):\n            myMap[x][y] = \"\\\\\"\n            x += 1\n            y += 1\n        x -= 1\n    Max = max(Max, x)\n    Min = min(Min, x)\n\n\n    \nfor i in range(Min, Max + 1):\n    print(\"\".join(myMap[i][:y]))\n", "n = int(input())\na = list(map(int, input().split()))\n\nMax = 1000\nMin = 1000\n\nsum = 0\nfor i in range(len(a)):\n    sum += a[i]\n\nmyMap = [[\" \"] * 2020 for i in range(2020)]\n\nx, y = 1000, 0\nfor i in range(n):\n    if (i & 1) == 0:\n        for j in range(a[i]):\n            myMap[x][y] = \"/\"\n            x -= 1\n            y += 1\n        x += 1\n    else:\n        for j in range(a[i]):\n            myMap[x][y] = \"\\\\\"\n            x += 1\n            y += 1\n        x -= 1\n    Max = max(Max, x)\n    Min = min(Min, x)\n\n\n    \nfor i in range(Min, Max + 1):\n    print(\"\".join(myMap[i][:y]))\n", "n, a = int(input()), list(map(int, input().split()))\n\nif n & 1: a.append(0)\n\nx, t = 0, [[' '] * sum(a) for i in range(2001)]\n\ny = u = v = 1000\n\nfor i in range(0, n, 2):\n\n    for j in range(a[i]):\n\n        t[y][x] = '/'\n\n        x += 1\n\n        y += 1\n\n    v = max(v, y)\n\n    for j in range(a[i + 1]):\n\n        y -= 1\n\n        t[y][x] = '\\\\'\n\n        x += 1\n\n    u = min(u, y)\n\nfor i in range(v - 1, u - 1, -1): print(''.join(t[i]))\n\n\n\n# Made By Mostafa_Khaled\n", "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn map(int, minp().split())\n\nn = mint()\ny = 0\nx = 0\na = []\nt = 0\nmx = dict()\nmy = 10**9\nfor i in mints():\n\tfor j in range(i):\n\t\tif t == 0:\n\t\t\ta.append((x,y,'/'))\n\t\t\tmx[y] = max(mx.get(y, -1), x)\n\t\t\tmy = min(my, y)\n\t\t\ty -= 1\n\t\telse:\n\t\t\ty += 1\n\t\t\ta.append((x,y,'\\\\'))\n\t\t\tmx[y] = max(mx.get(y, -1), x)\n\t\t\tmy = min(my, y)\n\t\tx += 1\n\tt ^= 1\ni = 0\nb = []\nwhile (my+i) in mx:\n\tb.append([' ']*(mx[my+i]+1))\n\ti += 1\nfor i in a:\n\tb[i[1]-my][i[0]] = i[2]\nfor i in b:\n\tprint(*(i+[' ']*(x-len(i))),sep='')\n", "N = int(2e3+3)\nn = int(input())\na = list(map(int, input().split()))\nmaxi, mini = N//2, N//2\nres = [[' '] * N for i in range(N)]\nx, y = N//2, 0\nfor i in range(n):\n    if i % 2 == 0:\n        for j in range(a[i]):\n            res[x][y] = '/'\n            x -= 1\n            y += 1\n        x += 1\n    else:\n        for j in range(a[i]):\n            res[x][y] = '\\\\'\n            x += 1\n            y += 1\n        x -= 1\n    maxi = max(maxi, x)\n    mini = min(mini, x)\nfor i in range(mini, maxi+1):\n    print(''.join(res[i][:y]))\n", "n = int(input())\nlis = list(map(int,input().split()))\nma=r=0\nmi=a=0\nfor i in range(n):\n    if i%2==0:\n        a+=lis[i]\n    else:\n        a-=lis[i]\n    ma=max(ma,a)\n    mi=min(mi,a)\n    r+=lis[i]\nmat=[[' ']*(r) for i in range(ma+abs(mi)+2)]    \nro=ma\ncol=0\nfor i in range(n):\n    if i%2==0:\n        ro-=1\n        for k in range(lis[i]):\n            mat[ro][col]='/'\n            ro-=1\n            col+=1\n    else:\n        ro+=1\n        for k in range(lis[i]):\n            mat[ro][col]='\\\\'\n            ro+=1\n            col+=1\nfor i in mat[:]:\n    print(*i,sep='')            \n            \n\n\n", "import os\nimport sys\nimport math\nimport heapq\nfrom decimal import *\nfrom io import BytesIO, IOBase\nfrom collections import defaultdict, deque\n\ndef r():\n    return int(input())\ndef rm():\n    return map(int,input().split())\ndef rl():\n    return list(map(int,input().split()))\n\nn = r()\na = rl()\nw = sum(a)\nh = -math.inf\nd = math.inf\nptr = 0\nfor i,j in enumerate(a):\n    ptr += (j-1 if i%2==0 else 1-j)\n    h = max(h,ptr)\n    d = min(d,ptr)\n\nb = [[' ']*w for i in range(h+abs(d)+1)]\nj=0\nincr=True\nfor i in range(n):\n    H=a[i]\n    while H!=0:\n        if incr:\n            b[h][j]='/'\n            j+=1\n            h-=1\n        else:\n            b[h][j]='\\\\'\n            j+=1\n            h+=1\n        H-=1\n    if incr:\n        h+=1\n    else:\n        h-=1\n    incr = not incr\nfor i in b:\n    print(*i,sep='')"]