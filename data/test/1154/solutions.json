["n, h, k = [int(x) for x in input().split()]\nL=[int(x) for x in input().split()]\nL = L[::-1]\np = 0\nt = 0\nwhile L:\n    if L and h-p >= L[-1]:\n        p+=L.pop()\n    if L:\n        req = L[-1]-h+p\n        inc = (req-1)//k + 1\n        t += inc\n        p -= inc*k\n        p=max(p,0)\n\nif p:\n    t += (p-1)//k + 1\n\nprint(t)\n", "n,h,k=list(map(int,input().split()))\nxs=list(map(int,input().split()))+[h+1]\nt=0\nx=0\ni=0\nwhile i+1<len(xs) or x>0:\n    while x+xs[i]<=h:\n        x+=xs[i]\n        i+=1\n    d=max(1,min(x,x-h+xs[i]+k-1)//k)\n    x=max(0,x-d*k)\n    t+=d\nprint(t)\n", "n, h, k = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\nans = 0\nrem = 0\ni = 0\nwhile i < n:\n    while rem <= h and i < n:\n        rem += A[i]\n        i += 1\n    if rem > h:\n        i -= 1\n        rem -= A[i]\n    ans += rem // k\n    rem %= k\n    if i < n and rem + A[i] > h:\n        ans += 1\n        rem = 0\nif rem > 0:\n    ans += 1\nprint(ans)\n", "read = lambda: list(map(int, input().split()))\nn, h, k = read()\na = list(read())\nans = rem = 0\nfor i in range(n):\n    if rem != 0 and rem + a[i] > h:\n        ans += 1\n    else:\n        a[i] += rem\n    ans += a[i] // k\n    rem = a[i] % k\nif rem != 0:\n    ans += 1\nprint(ans)\n    \n", "#!/usr/bin/env python3\n\nN, H, K = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\n\nresult = 0\nfill = 0\np = 0\n\nwhile p < len(A) or fill != 0:\n    while p < len(A) and fill + A[p] <= H:\n        fill += A[p]\n        p += 1\n\n    if p < len(A):\n        need = A[p] - (H - fill)\n    else:\n        need = fill\n\n    time = (need + K - 1) // K\n    fill = max(0, fill - time * K)\n    result += time\n\nprint(result)\n", "n, h, k = map(int, input().split())\na, ai, c, t = list(map(int, input().split())), 0, 0, 0\nwhile c > 0 or ai < n:\n    while ai < n and c + a[ai] <= h:\n        c += a[ai]\n        ai += 1\n    if c < k:\n        t += 1\n        c = 0\n    else:\n        t += c // k\n        c %= k\nprint(t)", "# coding: utf-8\n\n\n\n\n\nimport math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\n\ndef array2d(d1, d2, init = None):\n    return [[init for _ in range(d1)] for _ in range(d2)]\n\n\nn, h, k = list(map(int, input().split(\" \")))\nal = list(map(int, input().split(\" \")))\nin_proc = 0\npointer = 0\ntime = 0\n\nfor a in al:\n    if a > h - in_proc:\n        time += in_proc // k\n        in_proc %= k\n        if a > h - in_proc:\n            time += 1\n            in_proc = 0\n    in_proc += a\n\ntime += in_proc // k\nin_proc %= k\ntime += (in_proc > 0)\nprint(time)\n", "n, h, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nt = 0\nl = 0\ni = 0\nwhile True:\n    while i < n and h - l >= a[i]:\n        l += a[i]\n        i += 1\n    if l <= k:\n        t += 1\n        l = 0\n    t += l // k\n    l %= k\n    if i == n and l == 0:\n        break\nprint(t)\n        \n        \n", "n, h, k = list(map(int, input().split()))\na = [int(x) for x in input().split()]\nmoulin = 0\nans = 0\nfor x in a:\n    if moulin + x <= h:\n        moulin += x\n    else:\n        ready = (x - h + moulin + k - 1) // k\n        passed = min(ready, (moulin + k - 1) // k)\n        ans += passed \n        moulin = max(0, moulin - k * passed)\n        moulin += x\nans += (moulin + k - 1) // k\nprint(ans)\n\n", "#import sys\n#sys.stdin = open(\"python/in\", \"r\")\n\n#n = int(input())\nn, h, k = [int(i) for i in input().split(\" \")]\narr = [int(i) for i in input().split(\" \")]\narr.append(h)\nans = 0\nch = 0\ni = 0\nwhile True:\n    while h - ch >= arr[i]:\n        ch += arr[i]\n        i += 1\n    d, m = divmod(ch, k)\n    ans += d\n    if h - m >= arr[i]:\n        ch = m\n    else:\n        ans += 1\n        ch = 0\n    if i == n:\n        break\nprint(ans)\n", "import math\n\nn,h,k = (int(i) for i in input().split())\nl = list(map(int,input().split()))\nans = 0\ni = 0\ndh = 0\nwhile i < n:\n    if dh+l[i]<=h:\n        dh+=l[i]\n        i+=1\n    else:\n        ans+=math.ceil((l[i]-(h-dh))/k)\n        dh = max(dh-k*math.ceil((l[i]-(h-dh))/k),0)\n\n        \n        \n\n    \n    \nans+= math.ceil(dh/k)\n\nprint(ans)\n", "n, h, k = (int(x) for x in input().split())\na = [int(x) for x in input().split()]\n\nt, p, i = 0, 0, 0\nwhile i < len(a) or p > 0:\n    #print(i, \"<\", len(a), \"and\", h, \"-\", p, \"<=\", a[i])\n    while i < len(a) and p+a[i] <= h:\n        p += a[i]\n        i += 1\n    if p >= k:\n        q = p // k\n        p = p - q*k\n        t += q\n    else:\n        p = 0\n        t += 1\nprint(t)\n", "3\n# Copyright (C) 2016 Sayutin Dmitry.\n#\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; version 3\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; If not, see <http://www.gnu.org/licenses/>.\n\ndef main():\n    n, h, k = list(map(int, input().split()))\n    dat = list(map(int, input().split()))\n\n    ptr = 0\n    t = 0\n    cur = 0\n    while ptr != len(dat):\n        if cur + dat[ptr] > h:\n            mindecr = cur + dat[ptr] - h\n            dt = (mindecr + k - 1) // k\n            t += dt\n            \n            cur = max(0, cur - dt * k)\n            continue\n        \n        while ptr != len(dat) and cur + dat[ptr] <= h:\n            cur += dat[ptr]\n            ptr += 1\n        cur = max(0, cur - k)\n        t += 1\n    t += (cur + k - 1) // k\n    print(t)\nmain()\n", "n, h, k = map(int, input().split())\nhei = list(map(int, input().split()))\nsec = 0\ncur = 0\ni = 0\nwhile i < len(hei):\n    sec += cur // k\n    cur = cur % k\n    if i < len(hei) and cur + hei[i] > h:\n        sec += cur // k + 1\n        cur = 0\n        cur += hei[i]\n        i += 1\n    while i < len(hei) and cur + hei[i] <= h:\n        cur += hei[i]\n        i += 1\nsec += cur // k\ncur = cur % k\nif cur != 0: sec += 1\nprint(sec)", "def solve(n,h,v,A):\n    cnt = 0\n    curh = A[0]\n    for i in range(1,n):\n        if A[i]+curh<=h:\n            curh += A[i]\n        else:\n            quan = int((A[i]+curh-h)/v) + ((A[i]+curh-h) % v > 0)\n            cnt += quan\n            curh = max(curh - quan*v, 0)\n            curh += A[i]\n    cnt += int(curh/v) + (curh % v > 0)\n    return cnt\n    \n(n,h,k) = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\nprint(solve(n,h,k,A))", "import math\nn, h, k = map(int, input().split())\n\nseconds = 0\nfilledSpace = 0\npotatoes = list(map(int, input().split()))\n\nfor p in potatoes:\n    if p + filledSpace <= h:\n        filledSpace += p\n    else:\n        s = math.ceil((p - (h - filledSpace))/k)\n        if s * k > filledSpace:\n            filledSpace = 0\n        else:\n            filledSpace -= s * k\n        seconds += s\n        filledSpace += p\n\ns = math.ceil(filledSpace / k)\nseconds += s\n\nprint(str(seconds))", "import sys\n\ndef main():\n    t = sys.stdin.readline().split()\n    n = int(t[0])\n    h = int(t[1])\n    k = int(t[2])\n    line = sys.stdin.readline()\n    x = list(map(int,line.split()))\n    \n    res = 0\n    cur = 0\n    for i in range(n):\n        cur += x[i]\n        if i!=n-1:\n            if x[i+1]+cur <= h:\n                continue        \n        v = int(cur/k)\n        if v*k != cur :\n            cur = cur - v*k\n            res+= v\n            if i!=n-1:\n                if x[i+1]+cur > h:\n                    res+=1\n                    cur=0\n            else:\n                res+=1\n        else :\n            cur =0\n            res +=v\n        \n    print(res)\n\nmain()", "n,h,k=map(int,input().split())\nhh=0\nans=0\nfor x in list(map(int,input().split())):\n    if hh+x<=h:\n        hh+=x\n        ans+=hh//k\n        hh%=k\n    else:\n        ans+=1\n        hh=x%k\n        ans+=x//k\nprint(ans+(hh>0))", "n,h,k=map(int,input().split())\na=list(map(int,input().split()))[::-1]\nans=b=0\nwhile a!=[]:\n    while len(a) and b+a[-1]<=h: \n        b=b+a.pop()\n    if b//k==0: ans,b=ans+1,0    \n    else: ans,b=ans+b//k,b%k\nprint(ans+(b>0))", "import math\n\n\nn, h, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\ncurrent_height = 0\nseconds_past = 0\n\ni = 0\nwhile i < len(a):\n    # print(current_height, seconds_past, a[i])\n    if current_height + a[i] <= h:\n        current_height += a[i]\n        i += 1\n    else:\n        if current_height <= k:\n            current_height = 0\n            seconds_past += 1\n        else:\n            seconds_past += current_height // k\n            current_height = current_height % k\n\n# print('-----')\n\nseconds_past += math.ceil(current_height / k)\n\nprint(seconds_past)\n\n", "d=input().split()\nd=[int(x) for x in d]\nn,h,k=d[0],d[1],d[2]\nd=input().split()\nd=[int(x) for x in d]\nS=0\nR=0\nfor i in d:\n\n    if R+i<=h:\n        S+=i//k\n        R+=i%k \n    else:\n        while R+i>h:\n            if R%k==0:\n                S+=R//k\n                R=0\n            elif R<k:\n                S+=1\n                R=0\n            else:\n                S+=R//k\n                R=R%k\n        S+=i//k\n        R+=i%k\n      \nif R%k==0:\n    S+=R//k\nelse:\n    S+=R//k\n    S+=1\nprint(S)\n", "n,h,k=list(map(int,input().split()))\nip=list(map(int,input().split()))\ntime=0\ncount=0\nheight=0\nwhile count<n:\n    if height + ip[count]<= h:\n        height+=ip[count]\n        count+=1\n    else:\n        if height%k==0:\n            time+=height//k\n            height=0\n        elif height>=k:\n            time+=height//k\n            height=height%k\n        else:\n            height-=min(k,height)\n            time+=1\n    #print(height,time,count)\nif height==0:\n    s=0\nelif height%k==0:\n    s=height//k\nelse:\n    s=(height//k)+1\nprint(time+s)\n", "[n,h,k]=[int(i) for i in input().split()]\na=[int(i) for i in input().split()]\na.insert(0,0)\npref=[0]\nfor i in a:\n    pref.append(pref[-1]+i)\nfree=[h]*(n+1)\nanswer=[0]*(n+1)\nfor i in range(1,n+1):\n    if a[i]<=free[i-1]:\n        answer[i]=answer[i-1]\n        free[i]=free[i-1]-a[i]\n    else:\n        answer[i] =(a[i]-free[i-1])//k+1\n        if (a[i]-free[i-1])%k==0: answer[i]-=1\n        free[i]=free[i-1]+answer[i]*k\n        if free[i]>h: free[i]=h\n        free[i]-=a[i]\n        answer[i]+=answer[i-1]\nanswer[n]+=(h-free[n])//k\nif (h-free[n])%k!=0: answer[n]+=1\nprint(answer[n])", "n, h, k = map(int, input().split())\na = list(map(int, input().split()))\nh1 = 0\nans = 0\ni = 0\nwhile i < n:\n    while i < n and h1 + a[i] <= h:\n        h1 += a[i]\n        i += 1\n    if h1 < k:\n        ans += 1\n        h1 = 0\n    ans += h1 // k\n    h1 %= k\nif (h1 != 0):\n    ans += 1\nprint(ans)   ", "n, h, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nnum = 0\ntime = 0\ns = 0\nwhile num < n:\n    time += 1\n    while num < n and a[num] + s <= h:\n        s += a[num]\n        num += 1\n    s = max(s - k, 0)\n    if num < n and s > h - a[num]:\n        d = (s - h + a[num] + k - 1) // k\n        time += d\n        s = max(s - d * k, 0)\nprint(time + (s + k - 1) // k)\n        \n    \n\n        \n"]