["def chk(l):\n\tfor i in range(4):\n\t\tfor j in range(2):\n\t\t\tif l[i][j]==l[i][j+1]==l[i][j+2]=='x':\n\t\t\t\treturn True\n\tfor i in range(2):\n\t\tfor j in range(4):\n\t\t\tif l[i][j]==l[i+1][j]==l[i+2][j]=='x':\n\t\t\t\treturn True\n\tfor i in range(2):\n\t\tfor j in range(2):\n\t\t\tif l[i][j]==l[i+1][j+1]==l[i+2][j+2]=='x':\n\t\t\t\treturn True\n\tfor i in range(2):\n\t\tfor j in range(2, 4):\n\t\t\tif l[i][j]==l[i+1][j-1]==l[i+2][j-2]=='x':\n\t\t\t\treturn True\n\treturn False\na = [list(input()), list(input()), list(input()), list(input())]\nfor i in range(4):\n\tfor j in range(4):\n\t\tif a[i][j] != '.':\n\t\t\tcontinue\n\t\ta[i][j]='x'\n\t\tif chk(a):\n\t\t\tprint(\"YES\"); return\n\t\ta[i][j]='.'\nprint(\"NO\")\n", "import sys\n\nm = [list(input()) for _ in range(4)]\n\ndef trans(m):\n    return [[m[0][0], m[1][0], m[2][0], m[3][0]],\n            [m[0][1], m[1][1], m[2][1], m[3][1]],\n            [m[0][2], m[1][2], m[2][2], m[3][2]],\n            [m[0][3], m[1][3], m[2][3], m[3][3]]]\n\ndef check(m):\n    res = any('xxx' in ''.join(x) for x in m)\n    res |= any('xxx' in ''.join(x) for x in trans(m))\n\n    for i in range(1, 3):\n        for j in range(1, 3):\n            res |= m[i-1][j-1] + m[i][j] + m[i+1][j+1] == 'xxx'\n            res |= m[i-1][j+1] + m[i][j] + m[i+1][j-1] == 'xxx'\n\n    return res\n\nfor i in range(4):\n    for j in range(4):\n        if m[i][j] == '.':\n            m[i][j] = 'x'\n            if check(m):\n                print(\"YES\")\n                return\n            m[i][j] = '.'\n\nprint(\"NO\")\n", "a = []\nfor i in range(4):\n\ta += [input()]\nf = False\nfor i in range(4):\n\tfor j in range(2):\n\t\tf |= a[i][j: j + 3].count('.') == 1 and a[i][j: j + 3].count('o') == 0\nfor j in range(4):\n\tfor i in range(2):\n\t\tf |= ([a[i][j]] + [a[i + 1][j]] + [a[i + 2][j]]).count('.') == 1 and ([a[i][j]] + [a[i + 1][j]] + [a[i + 2][j]]).count('o') == 0\nfor i in range(2):\n\tfor j in range(2):\n\t\tf |= [a[i][j], a[i + 1][j + 1], a[i + 2][j + 2]].count('.') == 1 and [a[i][j], a[i + 1][j + 1], a[i + 2][j + 2]].count('o') == 0\n\t\tf |= [a[3 - i][j], a[2 - i][j + 1], a[1 - i][j + 2]].count('.') == 1 and [a[3 - i][j], a[2 - i][j + 1], a[1 - i][j + 2]].count('o') == 0\nif f:\n\tprint('YES')\nelse:\n\tprint('NO')", "def tri(ar):\n    d={'.':0,'x':0,'o':0}\n    for i,j in ar:\n        d[a[i][j]]+=1\n    if d['.']==1 and d['x']==2:\n        ans[0]='YES'\n    #print(d)\n        \nans=['NO']\na=[input() for i in range(4)]\nfor i in range(2):\n    for j in range(2):\n        tri([(i,j),(i+1,j+1),(i+2,j+2)])\n    for j in range(2,4):\n        tri([(i,j),(i+1,j-1),(i+2,j-2)])\nfor i in range(4):\n    for j in range(2):\n        tri([(i,j),(i,j+1),(i,j+2)])\n        tri([(j,i),(j+1,i),(j+2,i)])\nprint(ans[0])\n", "\nA = []\nfor _ in range(4):\n    A += [list(input())]\n\nfound = False\n\ndef check(list_of_sigs):\n    return list_of_sigs.count('.') == 1 and \\\n           list_of_sigs.count('x') == 2\n\nfor col_offset in range(2):\n    for row_offset in range(2):\n        found = found or check([A[row_offset][col_offset],\n                                A[row_offset + 1][col_offset + 1],\n                                A[row_offset + 2][col_offset + 2]])\n        found = found or check([A[row_offset][3 - col_offset],\n                                A[row_offset + 1][2 - col_offset],\n                                A[row_offset + 2][1 - col_offset]])\n\nfor col in range(2):\n    for row in range(4):\n        found = found or check([A[row][col],\n                                A[row][col + 1],\n                                A[row][col + 2]])\n\nfor col in range(4):\n    for row in range(2):\n        found = found or check([A[row][col],\n                                A[row + 1][col],\n                                A[row + 2][col]])\n\nif found:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n\n", "n = 4\ndef check(f):\n\tnonlocal n\n\tfor i in range(n):\n\t\tok = True\n\t\tfor j in range(n - 1):\n\t\t\tok &= f[i][j] == 'x'\n\t\tif ok : return ok\n\t\tok = True\n\t\tfor j in range(1, n):\n\t\t\tok &= f[i][j] == 'x'\n\t\tif ok : return ok\n\tfor i in range(n):\n\t\tok = True\n\t\tfor j in range(n - 1):\n\t\t\tok &= f[j][i] == 'x'\n\t\tif ok : return ok\n\t\tok = True\n\t\tfor j in range(1, n):\n\t\t\tok &= f[j][i] == 'x'\n\t\tif ok : return ok\n\tok = True\n\tfor i in range(n -1 ):\n\t\tok &= f[i][i] == 'x'\n\tif ok: return ok\n\tok = True\n\tfor i in range(1, n):\n\t\tok &= f[i][i] == 'x'\n\tif ok: return ok\n\tif f[1][0] == f[2][1] == f[3][2] == 'x' or f[0][1] == f[1][2] == f[2][3] == 'x': return True\n\treturn f[3][0] == f[2][1] == f[1][2] == 'x' or f[0][3] == f[2][1] == f[1][2] == 'x' or f[2][0] == f[1][1] == f[0][2] == 'x' or f[1][3] == f[2][2] == f[3][1] == 'x'\nf = [list(input()) for i in range(n)]\nfor i in range(n):\n\tfor j in range(n):\n\t\tif f[i][j] == '.':\n\t\t\tf[i][j] = 'x'\n\t\t\tif check(f):\n\t\t\t\tprint(\"YES\")\n\t\t\t\treturn\n\t\t\tf[i][j] = '.'\nprint(\"NO\")", "\ndef c(i, j):\n    if i < 4 and j < 4 and i >= 0 and j >= 0:\n        if a[i][j] == 'x':\n            return True\n    return False\n\na = [[x for x in input().strip()] for j in range(4)]\nans = True\nfor i in range(4):\n    for j in range(4):\n        if a[i][j] == '.':\n            if c(i+1,j) and c(i+2,j):\n                ans = False\n            if c(i-1,j) and c(i-2,j):\n                ans = False\n            if c(i+1,j+1) and c(i+2,j+2):\n                ans = False\n            if c(i-1,j-1) and c(i-2,j-2):\n                ans = False\n            if c(i,j+1) and c(i,j+2):\n                ans = False\n            if c(i,j-1) and c(i,j-2):\n                ans = False\n            if c(i+1,j-1) and c(i+2,j-2):\n                ans = False\n            if c(i-1,j+1) and c(i-2,j+2):\n                ans = False\n\n            if c(i-1,j-1) and c(i+1,j+1):\n                ans = False\n            if c(i-1,j) and c(i+1,j):\n                ans = False\n            if c(i-1,j+1) and c(i+1,j-1):\n                ans = False\n            if c(i,j-1) and c(i,j+1):\n                ans = False\n\nif ans:\n    print('NO')\nelse:\n    print('YES')", "def get_field(i, j, val):\n    if i < 0 or j < 0 or i > 3 or j > 3:\n        return False\n    return d[i][j] == val\n\n\ndef check_field(i, j, c):\n    if get_field(i - 2, j, c) and get_field(i - 1, j, c):\n        return True\n    if get_field(i + 2, j, c) and get_field(i + 1, j, c):\n        return True\n    if get_field(i, j - 2, c) and get_field(i, j - 1, c):\n        return True    \n    if get_field(i, j + 2, c) and get_field(i, j + 1, c):\n        return True\n    if get_field(i - 1, j, c) and get_field(i + 1, j, c):\n        return True\n    if get_field(i, j - 1, c) and get_field(i, j + 1, c):\n        return True\n    \n    if get_field(i + 2, j + 2, c) and get_field(i + 1, j + 1, c):\n        return True    \n    if get_field(i - 2, j - 2, c) and get_field(i - 1, j - 1, c):\n        return True\n    if get_field(i + 2, j - 2, c) and get_field(i + 1, j - 1, c):\n        return True    \n    if get_field(i - 2, j + 2, c) and get_field(i - 1, j + 1, c):\n        return True    \n    if get_field(i + 1, j + 1, c) and get_field(i - 1, j - 1, c):\n        return True    \n    if get_field(i - 1, j + 1, c) and get_field(i + 1, j - 1, c):\n        return True\n\nd = [[''] * 4 for i in range(4)]\nfor i in range(4):\n    s = input()\n    for j in range(4):\n        d[i][j] = s[j]\nfor i in range(4):\n    for j in range(4):\n        if d[i][j] == '.':\n            if check_field(i, j, 'x'):\n                print(\"YES\")\n                return\nprint(\"NO\")", "def vaild(i,j):\n    per = 1\n    per1 = 1\n    per2 = 1\n    per3 = 1\n    for t in range(i-1,-1,-1):\n        if A[t][j] == 'x':\n            per +=1\n        else:\n            break\n    for t in range(i+1,4):\n        if A[t][j] == 'x':\n            per+=1\n        else:\n            break\n    if per >= 3:\n        return True\n    for t in range(j-1,-1,-1):\n        if A[i][t] == 'x':\n            per1+=1\n        else:\n            break\n    for t in range(j+1,4):\n        if A[i][t] == 'x':\n            per1+=1\n        else:\n            break\n    if per1 >=3:\n        return True\n    i1 = i-1\n    j1 = j-1\n    i2 = i+1\n    j2 = j+1\n    while (i1>= 0 and j1>=0):\n        if A[i1][j1] == 'x':\n            i1 -= 1\n            j1-=1\n            per2+=1\n        else:\n            break\n    while (i2<= 3 and j2<=3):\n        if A[i2][j2] == 'x':\n            per2+=1\n            i2+=1\n            j2+=1\n        else:\n            break   \n    if per2>=3:\n        return True\n    i3 = i-1\n    j3 = j+1\n    while (i3>= 0 and j3<=3):\n        if A[i3][j3] == 'x':\n            i3 -= 1\n            j3+=1\n            per3+=1\n        else:\n            break\n    i4 = i+1\n    j4 = j -1\n    while (i4<=3 and j4>=0):\n        if A[i4][j4] == 'x':\n            i4 +=1\n            j4 -= 1\n            per3+=1\n        else:\n            break\n    if per3 >= 3:\n        return True\n    return False\nA = [0] * 4\nfor j in range(4):\n    A[j] = input()\ns = 0\nfor i in range(4):\n    for j in range(4):\n        if A[i][j] == '.':\n            \n            if vaild(i,j):\n                s = 1\n                break\nif s == 1:\n    print('YES')\nelse:\n    print('NO')", "fields = []\nfields.append([ input() for i in range(4)])\nfields.append([ '' for i in range(4)])\nfor i in range(4):\n    c = 0\n    for j in fields[0][i]:\n        fields[1][c] += j\n        c += 1\nline1 = ''\nline2 = ''\nfor i in range(4):\n    line1 += fields[0][i][i]\n    line2 += fields[0][i][3 - i]\nfields.append([line1, line2])\nfields[2].append(fields[0][1][0]+fields[0][2][1]+fields[0][3][2])\nfields[2].append(fields[0][0][1]+fields[0][1][2]+fields[0][2][3])\nfields[2].append(fields[0][0][2]+fields[0][1][1]+fields[0][2][0])\nfields[2].append(fields[0][1][3]+fields[0][2][2]+fields[0][3][1])\nfor i in fields:\n    for j in i:\n        if 'x.x' in j or '.xx' in j or 'xx.' in j:\n            print('YES')\n            return\nprint('NO')", "def check(A):\n    for x1 in range(4):\n        for y1 in range(4):\n            for x2 in range(4):\n                for y2 in range(4):\n                    for x3 in range(4):\n                        for y3 in range(4):\n                            if A[x1][y1] == A[x2][y2] == A[x3][y3] == 'x':\n                                # print('!')\n                                if x1 == x2 == x3 and y1 == y2 + 1 == y3 + 2:\n                                    return True\n                                if y1 == y2 == y3 and x1 == x2 + 1 == x3 + 2:\n                                    return True\n                                if x1 == x2 + 1 == x3 + 2 and y1 == y2 + 1 == y3 + 2:\n                                    return True\n                                if x1 == x2 + 1 == x3 + 2 and y3 == y2 + 1 == y1 + 2:\n                                    return True\n    return False\n\nA = [0] * 4\nfor i in range(4):\n    A[i] = list(input())\nfor i in range(4):\n    for j in range(4):\n        if A[i][j] == '.':\n            A[i][j] = 'x'\n            # print(A)\n            if check(A):\n                print('YES')\n                return\n            A[i][j] = '.'\nprint('NO')\n", "N = 4\nboard = [input() for _ in range(4)]\nfor i in range(N):\n    for j in range(N):\n        cand = []\n        if j + 2 < N:\n            cand.append([board[i][j+k] for k in range(3)])\n        if i + 2 < N:\n            cand.append([board[i+k][j] for k in range(3)])\n        if i + 2 < N and j + 2 < N:\n            cand.append([board[i+k][j+k] for k in range(3)])\n        if i + 2 < N and j - 2 >= 0:\n            cand.append([board[i+k][j-k] for k in range(3)])\n        for row in cand:\n            for k in range(3):\n                if all(c == 'x' if i != k else c == '.' for i, c in enumerate(row)):\n                    print(\"YES\")\n                    quit()\nprint(\"NO\")\n", "a = [0] * 4\nfor i in range(4):\n    a[i] = input()\nt = False\nfor i in range(4):\n    q1 = [a[0][i], a[1][i], a[2][i]]\n    q2 = [a[1][i], a[2][i], a[3][i]]\n    if (q1.count(\"x\") == 2 and q1.count(\".\") == 1) or (q2.count(\"x\") == 2 and q2.count(\".\") == 1):\n        t = True  \nfor i in range(4):\n    q3 = [a[i][0], a[i][1], a[i][2]]\n    q4 = [a[i][1], a[i][2], a[i][3]]    \n    if (q3.count(\"x\") == 2 and q3.count(\".\") == 1) or (q4.count(\"x\") == 2 and q4.count(\".\") == 1):\n        t = True    \nq1 = [a[0][1], a[1][2], a[2][3]]\nq2 = [a[1][0], a[2][1], a[3][2]]\nq3 = [a[2][0], a[1][1], a[0][2]]\nq4 = [a[3][1], a[2][2], a[1][3]]\nif (q3.count(\"x\") == 2 and q3.count(\".\") == 1) or (q4.count(\"x\") == 2 and q4.count(\".\") == 1):\n    t = True  \nif (q1.count(\"x\") == 2 and q1.count(\".\") == 1) or (q2.count(\"x\") == 2 and q2.count(\".\") == 1):\n    t = True\nq1 = [a[0][0], a[1][1], a[2][2]]\nq2 = [a[1][1], a[2][2], a[3][3]]\nq3 = [a[3][0], a[2][1], a[1][2]]\nq4 = [a[2][1], a[1][2], a[0][3]]\nif (q3.count(\"x\") == 2 and q3.count(\".\") == 1) or (q4.count(\"x\") == 2 and q4.count(\".\") == 1):\n    t = True  \nif (q1.count(\"x\") == 2 and q1.count(\".\") == 1) or (q2.count(\"x\") == 2 and q2.count(\".\") == 1):\n    t = True\nif t:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "from math import *\nfrom sys import *\nfrom decimal import *\n\ndef gcd(a,b):\n    if b:\n        return gcd(b,a%b)\n    return a\n\nmat=[]\nfor i in range(4):\n    mat.append(input())\nfor st in mat:\n    if (\"xx.\" in st) or (\".xx\" in st) or (\"x.x\" in st):\n        print(\"YES\")\n        return\nfor i in range(4):\n    st=\"\"\n    for j in range(4):\n        st+=mat[j][i]\n    if (\"xx.\" in st) or (\".xx\" in st) or (\"x.x\" in st):\n        print(\"YES\")\n        return\nfor su in range(2,5):\n    st=\"\"\n    for j in range(max(0,su-3),min(su+1,4)):\n        st+=mat[j][su-j]\n    if (\"xx.\" in st) or (\".xx\" in st) or (\"x.x\" in st):\n        print(\"YES\")\n        return\nfor ee in range(-1,2):\n    st=\"\"\n    for j in range(max(0,-ee),min(4,4-ee)):\n        st+=mat[j][j+ee]\n    if (\"xx.\" in st) or (\".xx\" in st) or (\"x.x\" in st):\n        print(\"YES\")\n        return\nprint(\"NO\")    ", "#!/usr/bin/env python3\n\nb = [list(input().strip()) for _ in range(4)]\n\nr = \"NO\"\n\ndef check(b):\n    for i in range(4):\n        for j in range(2):\n            if b[i][j] == 'x' and b[i][j+1] == 'x' and b[i][j+2] == 'x':\n                return True\n\n    for i in range(2):\n        for j in range(4):\n            if b[i][j] == 'x' and b[i+1][j] == 'x' and b[i+2][j] == 'x':\n                return True\n\n    for i in range(2):\n        for j in range(2):\n            if b[i][j] == 'x' and b[i+1][j+1] == 'x' and b[i+2][j+2] == 'x':\n                return True\n\n    for i in range(2):\n        for j in range(2, 4):\n            if b[i][j] == 'x' and b[i+1][j-1] == 'x' and b[i+2][j-2] == 'x':\n                return True\n\n    return False\n\nfor i in range(4):\n    for j in range(4):\n        c = b[i][j]\n        if c == '.':\n            b[i][j] = 'x'\n            if check(b):\n                r = \"YES\"\n            b[i][j] = '.'\nprint(r)\n", "#!/usr/bin/env pypy3\n# -*- coding: UTF-8 -*-\nimport sys\nimport re\nimport math\nimport itertools\nimport collections\nimport bisect\n#sys.stdin=file('input.txt')\n#sys.stdout=file('output.txt','w')\n#10**9+7\nmod=1000000007\n#mod=1777777777\npi=3.1415926535897932\nIS=float('inf')\nxy=[(1,0),(-1,0),(0,1),(0,-1)]\nbs=[(-1,-1),(-1,1),(1,1),(1,-1)]\ndef niten(a,b): return abs(a-b) if a>=0 and b>=0 else  a+abs(b) if a>=0 else abs(a)+b if b>=0 else abs(abs(a)-abs(b))\ndef fib(n): return [(seq.append(seq[i-2] + seq[i-1]), seq[i-2])[1] for seq in [[0, 1]] for i in range(2, n)]\ndef gcd(a,b): return a if b==0 else gcd(b,a%b)\ndef lcm(a,b): return a*b/gcd(a,b)\ndef eucl(x1,y1,x2,y2): return ((x1-x2)**2+(y1-y2)**2)**0.5\ndef choco(xa,ya,xb,yb,xc,yc,xd,yd): return 1 if abs((yb-ya)*(yd-yc)+(xb-xa)*(xd-xc))<1.e-10 else 0\ndef pscl(num,l=[1]):\n    for i in range(num):\n        l = map(lambda x,y:x+y,[0]+l,l+[0])\n    return l\n\nl=[]\nfor i in range(4):\n    x=input()\n    if 'xx.' in x or '.xx' in x or 'x.x' in x:\n        print('YES')\n        return\n    elif 'ooo' in x:\n        print('NO')\n        return\n\n    l.append(x)\nfor i in range(2):\n    for j in range(4):\n        tate=l[i][j]+l[i+1][j]+l[i+2][j]\n        if 'xx.' in tate or '.xx' in tate or 'x.x' in tate:\n            print('YES')\n            return\n        elif 'ooo' in tate:\n            print('NO')\n            return\n        if j>=2:\n            y=l[i][j]+l[i+1][j-1]+l[i+2][j-2]\n            if 'xx.' in y or '.xx' in y or 'x.x' in y:\n                print('YES')\n                return\n            elif 'ooo' in y:\n                print('NO')\n                return\n        if j<2:\n            y=l[i][j]+l[i+1][j+1]+l[i+2][j+2]\n            if 'xx.' in y or '.xx' in y or 'x.x' in y:\n                print('YES')\n                return\n            elif 'ooo' in y:\n                print('NO')\n                return\nprint('NO')", "s =[[] for  i in range(4)]\ns[0] = [i for i in input()]\ns[1] = [i for i in input()]\ns[2] = [i for i in input()]\ns[3] = [i for i in input()]\na = 0\nfor i in range(4):\n    for j in range(4):\n        if i>1:\n            if s[i][j] == '.' and s[i-1][j] == 'x' and s[i-2][j] == 'x':\n                print(\"YES\")\n                a = 1\n                break\n            if j>1:\n                if s[i][j] == '.' and s[i - 1][j-1] == 'x' and s[i - 2][j-2] == 'x':\n                    print(\"YES\")\n                    a = 1\n                    break\n            if j < 2:\n                if s[i][j] == '.' and s[i - 1][j+1] == 'x' and s[i - 2][j+2] == 'x':\n                    print(\"YES\")\n                    a = 1\n                    break\n        if i < 2:\n            if s[i][j] == '.' and s[i+1][j] == 'x' and s[i+2][j] == 'x':\n                print(\"YES\")\n                a = 1\n                break\n            if j>1:\n                if s[i][j] == '.' and s[i + 1][j-1] == 'x' and s[i + 2][j-2] == 'x':\n                    print(\"YES\")\n                    a = 1\n                    break\n            if j < 2:\n                if s[i][j] == '.' and s[i + 1][j+1] == 'x' and s[i + 2][j+2] == 'x':\n                    print(\"YES\")\n                    a = 1\n                    break\n        if j>1:\n            if s[i][j] == '.' and s[i][j - 1] == 'x' and s[i][j - 2] == 'x':\n                print(\"YES\")\n                a = 1\n                break\n        if j <2:\n            if s[i][j] == '.' and s[i][j + 1] == 'x' and s[i][j + 2] == 'x':\n                print(\"YES\")\n                a = 1\n                break\n        if i!= 3 and i !=0:\n            if s[i][j] == '.' and s[i+1][j] == 'x' and s[i-1][j] == 'x':\n                print(\"YES\")\n                a = 1\n                break\n            if j != 3 and j != 0:\n                if s[i][j] == '.' and s[i+1][j + 1] == 'x' and s[i-1][j - 1] == 'x':\n                    print(\"YES\")\n                    a = 1\n                    break\n                if s[i][j] == '.' and s[i-1][j + 1] == 'x' and s[i+1][j - 1] == 'x':\n                    print(\"YES\")\n                    a = 1\n                    break\n        if j != 3 and j!= 0:\n            if s[i][j] == '.' and s[i][j + 1] == 'x' and s[i][j -1] == 'x':\n                print(\"YES\")\n                a = 1\n                break\n    if a:\n        break\nelse:\n    print(\"NO\")", "def check(a):\n    for i in range(4):\n        if \"xxx\" in a[i]:\n            return True\n    if a[1][0] == \"x\" and a[2][0] == \"x\" and (a[0][0] == \"x\" or a[3][0] == \"x\"):\n        return True\n    if a[1][1] == \"x\" and a[2][1] == \"x\" and (a[0][1] == \"x\" or a[3][1] == \"x\"):\n        return True\n    if a[1][2] == \"x\" and a[2][2] == \"x\" and (a[0][2] == \"x\" or a[3][2] == \"x\"):\n        return True\n    if a[1][3] == \"x\" and a[2][3] == \"x\" and (a[0][3] == \"x\" or a[3][3] == \"x\"):\n        return True\n    if a[0][2] == a[1][1] == a[2][0] == \"x\":\n        return True\n    if a[1][2] == a[2][1] == \"x\" and (a[3][0] == \"x\" or a[0][3] == \"x\"):\n        return True\n    if a[3][1] == a[2][2] == a[1][3] == \"x\":\n        return True\n    if a[0][1] == a[1][2] == a[2][3] == \"x\":\n        return True\n    if a[1][1] == a[2][2] == \"x\" and (a[0][0] == \"x\" or a[3][3] == \"x\"):\n        return True\n    if a[1][0] == a[2][1] == a[3][2] == \"x\":\n        return True\n    return False\n\n\n\na = [input() for i in range(4)]\nflag = False\nfor i in range(4):\n    for j in range(4):\n        if a[i][j] == \".\":\n            b = a[:]\n            str = b[i]\n            b[i] = str[:j] + \"x\" + str[j + 1:]\n            if check(b):\n                flag = True\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "s1 = input()\ns2 = input()\ns3 = input()\ns4 = input()\ns5 = s1[0] + s2[0] + s3[0] + s4[0]\ns6 = s1[1] + s2[1] + s3[1] + s4[1]\ns7 = s1[2] + s2[2] + s3[2] + s4[2]\ns8 = s1[3] + s2[3] + s3[3] + s4[3]\ns9 = s2[0] + s3[1] + s4[2]\ns10 = s1[0] + s2[1] + s3[2] + s4[3]\ns11 = s1[1] + s2[2] + s3[3]\ns12 = s1[2] + s2[1] + s3[0]\ns13 = s1[3] + s2[2] + s3[1] + s4[0]\ns14 = s2[3] + s3[2] + s4[1]\n\n\nf = False\nif 'xx.' in s1 or 'xx.' in s2 or 'xx.' in s3 or 'xx.' in s4 or 'xx.' in s5 or 'xx.' in s6 or 'xx.' in s7 or 'xx.' in s8 or 'xx.' in s9 or 'xx.' in s10 or 'xx.' in s11 or 'xx.' in s12 or 'xx.' in s13 or 'xx.' in s14:\n    f = True\nif 'x.x' in s1 or 'x.x' in s2 or 'x.x' in s3 or 'x.x' in s4 or 'x.x' in s5 or 'x.x' in s6 or 'x.x' in s7 or 'x.x' in s8 or 'x.x' in s9 or 'x.x' in s10 or 'x.x' in s11 or 'x.x' in s12 or 'x.x' in s13 or 'x.x' in s14:\n    f = True\nif '.xx' in s1 or '.xx' in s2 or '.xx' in s3 or '.xx' in s4 or '.xx' in s5 or '.xx' in s6 or '.xx' in s7 or '.xx' in s8 or '.xx' in s9 or '.xx' in s10 or '.xx' in s11 or '.xx' in s12 or '.xx' in s13 or '.xx' in s14:\n    f = True\nif f:\n    print('YES')\nelse:\n    print('NO')", "\ndef has_win(mat, r, c):\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i == j and i == 0) or (not 0 <= i + r < 4) or (not 0 <= j + c < 4):\n                continue\n            if mat[r + i][c + j] in ['x', '.']:\n                tm = '.' if mat[r + i][c + j] == 'x' else 'x'\n                if 0<= r + 2*i < 4 and 0 <= c + 2*j < 4 and mat[r + 2*i][c + 2*j] == tm:\n                    return True\n    return False\n\ndef is_win(mat):\n    for i in range(4):\n        for j in range(4):\n            if mat[i][j] == 'x' and has_win(mat, i, j):\n                return True\n    return False\n\ndef nput(n):\n    for i in range(n):\n        yield input()\n\ndef main():\n    mat = [list(l) for l in nput(4)]\n    if is_win(mat):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def myc(a,b,c,d,e,f):\n    return str(iph[a][b]+iph[c][d]+iph[e][f])\niph=[]\nfor i in range(4):\n    iph.append(str(input()))\nipv=[]\nb=0\nfor i in range(4):\n    ipv.append(str(iph[0][i]+iph[1][i]+iph[2][i]+iph[3][i]))\nfor i in iph:\n    if 'x.x' in i or 'xx.' in i or '.xx' in i:\n        b=1\n    if 'ooo' in i:\n        b=2\n        break\nif b!=2:\n    for i in ipv:\n        if 'x.x' in i or 'xx.' in i or '.xx' in i:\n            b=1\n        if 'ooo' in i:\n            b=2\n            break\nif b!=2:\n    ipd=[myc(0,0,1,1,2,2),myc(1,1,2,2,3,3),myc(1,0,2,1,3,2),myc(0,1,1,2,2,3),\n         myc(0,2,1,1,2,0),myc(0,3,1,2,2,1),myc(1,2,2,1,3,0),myc(1,3,2,2,3,1)]\n    for i in ipd:\n        if 'x.x' in i or 'xx.' in i or '.xx' in i and b==0:\n            b=1\n        if 'ooo' in i:\n            b=2\n            break\n\nif b==0 or b==2:\n    print('NO')\nelse:\n    print('YES')\n", "import sys\n\nrows = [input() for i in range(4)]\ncols = []\n\nfor j in range(4):\n    col = [rows[i][j] for i in range(4)]\n    cols.append(\"\".join(col))\n\ndiags = []\ndiags.append(\"\".join([rows[i][i] for i in range(4)]))\ndiags.append(\"\".join([rows[0][1], rows[1][2], rows[2][3]]))\ndiags.append(\"\".join([rows[1][0], rows[2][1], rows[3][2]]))\ndiags.append(\"\".join([rows[i][3-i] for i in range(4)]))\ndiags.append(\"\".join([rows[0][2], rows[1][1], rows[2][0]]))\ndiags.append(\"\".join([rows[1][3], rows[2][2], rows[3][1]]))\n\nstrs = rows + cols + diags\n\nwinstrs = [\"xx.\", \"x.x\", \".xx\"]\n\nfor winstr in winstrs:\n    for s in strs:\n        if winstr in s:\n            print(\"YES\")\n            return\nprint(\"NO\")\n", "def check(a):\n    for i in range(4):\n        if \"xxx\" in a[i]:\n            return True\n    if a[1][0] == \"x\" and a[2][0] == \"x\" and (a[0][0] == \"x\" or a[3][0] == \"x\"):\n        return True\n    if a[1][1] == \"x\" and a[2][1] == \"x\" and (a[0][1] == \"x\" or a[3][1] == \"x\"):\n        return True\n    if a[1][2] == \"x\" and a[2][2] == \"x\" and (a[0][2] == \"x\" or a[3][2] == \"x\"):\n        return True\n    if a[1][3] == \"x\" and a[2][3] == \"x\" and (a[0][3] == \"x\" or a[3][3] == \"x\"):\n        return True\n    if a[0][2] == a[1][1] == a[2][0] == \"x\":\n        return True\n    if a[1][2] == a[2][1] == \"x\" and (a[3][0] == \"x\" or a[0][3] == \"x\"):\n        return True\n    if a[3][1] == a[2][2] == a[1][3] == \"x\":\n        return True\n    if a[0][1] == a[1][2] == a[2][3] == \"x\":\n        return True\n    if a[1][0] == a[2][1] == a[3][2] == \"x\":\n        return True\n    if a[1][1] == a[2][2] == \"x\" and (a[0][0] == \"x\" or a[3][3] == \"x\"):\n        return True\n    return False\n\n\n\na, flag = [input() for i in range(4)], False\nfor i in range(4):\n    for j in range(4):\n        if a[i][j] == \".\":\n            b = a[:]\n            str = b[i]\n            b[i] = str[:j] + \"x\" + str[j + 1:]\n            if check(b):\n                flag = True\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "\nl1 = input()\nl2 = input()\nl3 = input()\nl4 = input()\n\ngrid = [[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]\n\ncross = 0\ndots = []\nfor i in range(0, 4):\n  if l1[i] == \".\":\n    dots += [[0+2, i+2]]\n  elif l1[i] == \"x\":\n    cross += 1\n    grid[0+2][i+2] = 1\n\n  if l2[i] == \".\":\n    dots += [[1+2, i+2]]\n  elif l2[i] == \"x\":\n    cross += 1\n    grid[1+2][i+2] = 1\n\n  if l3[i] == \".\":\n    dots += [[2+2, i+2]]\n  elif l3[i] == \"x\":\n    cross += 1\n    grid[2+2][i+2] = 1\n\n  if l4[i] == \".\":\n    dots += [[3+2, i+2]]\n  elif l4[i] == \"x\":\n    cross += 1\n    grid[3+2][i+2] = 1\n\ndef check(dot, dir, delta):\n  nonlocal grid\n  grid[dot[0]][dot[1]] = 1\n  \n  acc = 1\n  if dir == 0: #horizontal\n    for i in range(delta, delta+3):\n      acc *= grid[dot[0]+i][dot[1]]\n  elif dir == 1: #vertical\n    for i in range(delta, delta+3):\n      acc *= grid[dot[0]][dot[1]+i]\n  elif dir == 2: #diag1\n    for i in range(delta, delta+3):\n      acc *= grid[dot[0]+i][dot[1]+i]\n  elif dir == 3: #diag2\n    for i in range(delta, delta+3):\n      acc *= grid[dot[0]+i][dot[1]-i]\n\n  grid[dot[0]][dot[1]] = 0\n  return acc\n\nif cross < 2 or len(dots) == 0:\n  print(\"NO\")\nelse:\n  for dot in dots:\n    for dir in range(0, 4):\n      for delta in range(-2, 1):\n        if check(dot, dir, delta) == 1:\n          print(\"YES\")\n          return\nprint(\"NO\")"]