["def main():\n    a = list(input())\n    b = list(input())\n\n    n = len(a)\n    k = n\n    while k % 2 == 0:\n        k = k // 2\n\n    while k != n:\n        pairs = n // (k * 2)\n        for i in range(0, pairs * 2, 2):\n            if a[k * i:k * (i + 1)] > a[k * (i + 1):k * (i + 2)]:\n                a[k * i:k * (i + 1)], a[k * (i + 1):k * (i + 2)] = a[k * (i + 1):k * (i + 2)], a[k * i:k * (i + 1)]\n            if b[k * i:k * (i + 1)] > b[k * (i + 1):k * (i + 2)]:\n                b[k * i:k * (i + 1)], b[k * (i + 1):k * (i + 2)] = b[k * (i + 1):k * (i + 2)], b[k * i:k * (i + 1)]\n        k *= 2\n\n    if a == b:\n        print('YES')\n    else:\n        print('NO')\n\n\nmain()\n", "import collections\n\na = input()\nb = input()\nca = collections.Counter(a)\ncb = collections.Counter(b)\n\n\ndef eq(a, b, ah, at, bh, bt):\n    if a[ah:at] == b[bh:bt]:\n        return True\n    len_a = at - ah\n    if (len_a % 2) == 1:\n        return False\n    half = len_a // 2\n    am = ah + half\n    bm = bh + half\n    return (eq(a, b, ah, am, bm, bt) and eq(a, b, am, at, bh, bm)) or (eq(a, b, ah, am, bh, bm) and eq(a, b, am, at, bm, bt))\n\nif ca != cb:\n    print('NO')\nelif eq(a, b, 0, len(a), 0, len(b)):\n    print('YES')\nelse:\n    print('NO')\n", "import collections\n\na = input()\nb = input()\nca = collections.Counter(a)\ncb = collections.Counter(b)\n\n\ndef eq(a, b):\n    if a == b:\n        return True\n    len_a = len(a)\n    if (len_a % 2) == 1:\n        return False\n    half = len_a // 2\n    a1 = a[:half]\n    a2 = a[half:]\n    b1 = b[:half]\n    b2 = b[half:]\n    return (eq(a1, b2) and eq(a2, b1)) or (eq(a1, b1) and eq(a2, b2))\n\nif ca != cb:\n    print('NO')\nelif eq(a, b):\n    print('YES')\nelse:\n    print('NO')", "def F(s):\n    if len(s)%2==1:return s\n    s1 = F(s[:len(s)//2])\n    s2 = F(s[len(s)//2:])\n    if s1 < s2:return s1 + s2\n    return s2 + s1\nif F(input()) == F(input()):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "def read_list(t): return [t(x) for x in input().split()]\ndef read_line(t): return t(input())\ndef read_lines(t, N): return [t(input()) for _ in range(N)]\n\ndef smallest(s):\n    len_s = len(s)\n    if len_s & 1:\n        return s\n    s1 = smallest(s[:len_s//2])\n    s2 = smallest(s[len_s//2:])\n    return s1 + s2 if s1 < s2 else s2 + s1\n\nS1 = read_line(str)\nS2 = read_line(str)\nprint('YES' if smallest(S1) == smallest(S2) else 'NO')\n", "def read_list(t): return [t(x) for x in input().split()]\ndef read_line(t): return t(input())\ndef read_lines(t, N): return [t(input()) for _ in range(N)]\n\ndef smallest(s):\n    len_s = len(s)\n    if len_s & 1:\n        return s\n    s1 = smallest(s[:len_s//2])\n    s2 = smallest(s[len_s//2:])\n    return s1 + s2 if s1 < s2 else s2 + s1\n\n\nS1 = read_line(str)\nS2 = read_line(str)\nprint('YES' if smallest(S1) == smallest(S2) else 'NO')\n", "def g(s):\n l=len(s)\n return s if l%2==1 else sorted([g(s[:l//2]),g(s[l//2:])])\nprint('YES'if g(input())==g(input())else'NO')", "def g(s):\n l=len(s)\n return sorted([g(s[:l//2]),g(s[l//2:])])if l%2==0 else s\ni=input\nprint('YES'if g(i())==g(i())else'NO')", "def g(s):\n l=len(s)\n return sorted([g(s[:l//2]),g(s[l//2:])])if l%2==0 else s\nprint('YES'if g(input())==g(input())else'NO')", "def g(s):\n l=len(s);return sorted([g(s[:l//2]),g(s[l//2:])])if l%2==0 else s\nprint('YES'if g(input())==g(input())else'NO')", "def g(s):l=len(s);return sorted([g(s[:l//2]),g(s[l//2:])])if l%2==0 else s\nprint('YES'if g(input())==g(input())else'NO')", "def mini(s):\n    x = len(s)\n    if x%2==1:\n        return s\n    x//=2\n    a = mini(s[0:x])\n    b = mini(s[x::])\n    return a+b if a<b else b+a\na,b = input(),input()\nprint(\"YES\" if mini(a)==mini(b) else \"NO\")\n", "def reorder(a):\n    length = len(a)\n    if length % 2 == 1:\n        return a\n    else:\n        p_a = reorder(a[:length//2])\n        s_a = reorder(a[length//2:])\n        if p_a < s_a:\n            return p_a + s_a\n        else:\n            return s_a + p_a\n\nif reorder(input()) == reorder(input()):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "def reorder(a):\n    length = len(a)\n    if length % 2 == 1:\n        return a\n    else:\n        return sorted([reorder(a[:length//2]), reorder(a[length//2:])])\n\nif reorder(input()) == reorder(input()):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "def reorder(a):\n    length = len(a)\n    if length % 2 == 1:\n        return a\n    else:\n        return sorted([reorder(a[:length//2]), reorder(a[length//2:])])\n\nif reorder(input()) == reorder(input()):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "a=input()\nb=input()\nmas={}\ndef rasch(a, b):\n    nonlocal mas\n    s= a+b\n    if a==b:\n        mas[s]=2\n        return True\n    else:\n\n        if mas.get(s): return True if mas[s]==2 else False\n        if len(a)%2==0:\n            a1=a[0:len(a)//2]\n            a2=a[len(a)//2:]\n            b1=b[0:len(a)//2]\n            b2=b[len(a)//2:]\n            res =(rasch(a1,b1) and rasch(a2,b2)) or(rasch(a1,b2) and rasch(a2,b1))\n            mas[s]=(2 if res else 1)\n            return res\n        else: return False\nprint(\"YES\") if rasch(a, b) else print(\"NO\")", "input1 = input()\ninput2 = input()\n\ndef sort(s, length):\n    half, one = divmod(length, 2)\n    if one == 1:\n        return s\n    else:\n        s1, s2 = sort(s[:half], half), sort(s[half:], half)\n        if s1 < s2:\n            return s1 + s2\n        else:\n            return s2 + s1\n\n\nif sort(input1, len(input1)) == sort(input2, len(input2)):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "def getmin(s):\n    ls = len(s)\n    if ls % 2 == 1:\n        return s\n\n    s1 = getmin(s[:ls//2])\n    s2 = getmin(s[ls//2:])\n    return s1 + s2 if s1 < s2 else s2 + s1\n\n\ns1 = input()\ns2 = input()\nprint(\"YES\") if getmin(s1) == getmin(s2) else print(\"NO\")", "def f(s):\n    if len(s) % 2:\n        return s\n    a = f(s[:len(s) // 2])\n    b = f(s[len(s) // 2:])\n    if a < b:\n        return a+b\n    else:\n        return b+a\n\nif f(input()) == f(input()):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "s1 = input()\ns2 = input()\n\ndef Sort(string):\n\tl = len(string)\n\tif l % 2 == 1:\n\t\treturn string \n\ts1 = Sort(string[:l // 2:])\n\ts2 = Sort(string[l // 2::])\n\tif s1 < s2:\n\t\treturn s1 + s2\n\telse:\n\t\treturn s2 + s1\n\nif Sort(s1) == Sort(s2):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\t\n", "str1 = input()\nstr2 = input()\n\nsaved = {}\n\ndef str_equal(str1, str2):\n    \n    if (str1, str2) in saved:\n        return saved[(str1, str2)]\n    elif str1 == str2:\n        val = True\n    elif len(str1) % 2 == 1:\n        val = False\n    else:\n        new_len = len(str1) // 2\n\n        val = ( (str_equal(str1[:new_len], str2[:new_len]) and str_equal(str1[new_len:], str2[new_len:])) or (str_equal(str1[:new_len], str2[new_len:]) and str_equal(str1[new_len:], str2[:new_len])))\n    \n    saved[(str1, str2)] = val\n    return val\n    \nprint('YES' if str_equal(str1, str2) else 'NO')", "def main():\n    a = list(input())\n    b = list(input())\n    \n    n = len(a)\n    k = n\n    while k % 2 == 0:\n        k = k // 2\n    \n    while k != n:\n        pairs = n // (k * 2)\n        for i in range(0, pairs * 2, 2):\n            if a[k * i:k * (i + 1)] > a[k * (i + 1):k * (i + 2)]:\n                a[k * i:k * (i + 1)], a[k * (i + 1):k * (i + 2)] = a[k * (i + 1):k * (i + 2)], a[k * i:k * (i + 1)]\n            if b[k * i:k * (i + 1)] > b[k * (i + 1):k * (i + 2)]:\n                b[k * i:k * (i + 1)], b[k * (i + 1):k * (i + 2)] = b[k * (i + 1):k * (i + 2)], b[k * i:k * (i + 1)]\n        k *= 2\n    \n    if a == b:\n        print('YES')\n    else:\n        print('NO')\n\n\nmain()", "memo_dict = {}\n\ndef equivalent(a, b):\n    if a == b:\n        return True\n\n    if (a, b) in memo_dict:\n        return memo_dict[(a, b)]\n\n    strlen = len(a)\n\n    if strlen % 2 != 0:\n        return False\n\n    a1, a2 = a[:strlen//2], a[strlen//2:]\n    b1, b2 = b[:strlen//2], b[strlen//2:]\n\n    res = (equivalent(a1, b1) and equivalent(a2, b2)) or (equivalent(a1, b2) and equivalent(a2, b1))\n\n    memo_dict[(a, b)] = res\n    memo_dict[(b, a)] = res\n\n    return res\n\n\na = input()\nb = input()\n\nif equivalent(a, b):\n    print('YES')\nelse:\n    print('NO')\n", "from heapq import merge\ndef f(s):\n    l = len(s)\n    return [list(merge(f(s[:l>>1]),f(s[l>>1:])))] if l & 1 == 0 else [s] \nprint('YES' if f(input()) == f(input()) else 'NO')\n"]