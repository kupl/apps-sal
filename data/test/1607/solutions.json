["n,k=list(map(int,input().split()))\nmod=998244353\n\nNEXT={(0,1):2,(1,2):2}#ww or wh,point k,\u5834\u5408\u306e\u6570\n\nfor i in range(1,n):\n    NOW=NEXT\n    NEXT=dict()\n    for key in NOW:\n        \n        \n\n        if key[0]==0:\n            if k-(n-i)*2<=key[1]<=k:\n                NEXT[key]=NEXT.get(key,0)+NOW[key]\n            if k-(n-i)*2<key[1]+1<=k:\n                NEXT[(0,key[1]+1)]=NEXT.get((0,key[1]+1),0)+NOW[key]\n                NEXT[(1,key[1]+1)]=NEXT.get((1,key[1]+1),0)+NOW[key]*2%mod\n\n\n        else:\n            if k-(n-i)*2<=key[1]<=k:\n                NEXT[key]=NEXT.get(key,0)+NOW[key]\n                NEXT[(0,key[1])]=NEXT.get((0,key[1]),0)+NOW[key]*2%mod\n\n            if k-(n-i)*2<key[1]+2<=k:\n                NEXT[(1,key[1]+2)]=NEXT.get((1,key[1]+2),0)+NOW[key]\n        #print(NOW,NEXT)\n\n\n\n\nANS=0\nfor key in NEXT:\n    if key[1]==k:\n        ANS=(ANS+NEXT[key])%mod\n\nprint(ANS)\n", "import itertools\n\nn, k = [int(i) for i in input().split()]\n\nkas = [[0,0,0,0],[1,0,0,1],[0,1,1,0]]\n\nmmm = 998244353\n\ndef count_k(ka, k, t):\n    if t == 0:#00\n        return ka[k][0] + ka[k][1] + ka[k][2] + ka[k-1][3]\n    if t == 1:#10\n        return ka[k-1][0] + ka[k][1] + ka[k-2][2] + ka[k-1][3]\n    if t == 2:#01\n        return ka[k-1][0] + ka[k-2][1] + ka[k][2] + ka[k-1][3]\n    if t == 3:#11\n        return ka[k-1][0] + ka[k][1] + ka[k][2] + ka[k][3]\n\nfor i in range(1, n):\n    if len(kas) < k + 1:\n        kas.append([0,0,0,0])\n        kas.append([0,0,0,0])\n    for kk in range(min(len(kas)-1, k), 1, -1):\n        kas[kk] = [count_k(kas, kk, t) % mmm for t in range(4)]\n\nprint(sum(kas[k]) % mmm if k < len(kas) else 0)\n", "n,k=map(int,input().split())\nsame=[0]*(k+1)\ndiff=[0]*(k+1)\nsame[1]=2\nif k>1:\n    diff[2]=2\nfor i in range(n-1):\n    newsame=[0]*(k+1)\n    newdiff=[0]*(k+1)\n    for i in range(1,k+1):\n        newsame[i]=(same[i]+same[i-1]+2*diff[i])%998244353\n    for i in range(2,k+1):\n        newdiff[i]=(2*same[i-1]+diff[i]+diff[i-2])%998244353\n    same=newsame\n    diff=newdiff\nprint((same[-1]+diff[-1])%998244353)", "n, k = list(map(int, input().split()))\nsame = [0] * (k + 1)\ndiff = [0] * (k + 1)\nmod = 998244353\nsame[1] = 2\nif k > 1 : diff[2] = 2\nfor i in range (n - 1) :\n    newsame = [0] * (k + 1)\n    newdiff = [0] * (k + 1)\n    for i in range (1, k + 1) : newsame[i] = (same[i] + same[i - 1] + 2 * diff[i]) % mod\n    for i in range (2, k + 1) : newdiff[i] = (2 * same[i - 1] + diff[i] + diff[i - 2]) % mod\n    same = newsame ; diff = newdiff\nprint((same[-1] + diff[-1]) % mod)\n", "n,k = list(map(int,input().split()))\nlimit = 998244353\n\n\nif k > 2*n:\n    print(0)\nelif k == 1 or k == 2*n:\n    print(2)\nelse:\n    same = [0] * (k+1)\n    same[1] = 2\n\n    diff = [0] * (k+1)\n    diff[2] = 2\n\n    for i in range(2, n+1):\n        for j in range(min(k, 2*i), 1, -1):\n\n            same[j] = same[j] + 2*diff[j] + same[j-1]\n            same[j] %= limit\n\n            diff[j] = diff[j] + 2*same[j-1] + diff[j-2]\n            diff[j] %= limit\n\n    print((same[k] + diff[k]) % limit)", "n,k = list(map(int,input().split()))\nlimit = 998244353\n\n\nif k > 2*n:\n    print(0)\nelif k == 1 or k == 2*n:\n    print(2)\nelse:\n    same = [0] * (k+1)\n    same[1] = 2\n\n    diff = [0] * (k+1)\n    diff[2] = 2\n\n    for i in range(2, n+1):\n        for j in range(min(k, 2*i), 1, -1):\n\n            same[j] = same[j] + 2*diff[j] + same[j-1]\n            same[j] %= limit\n\n            diff[j] = diff[j] + 2*same[j-1] + diff[j-2]\n            diff[j] %= limit\n\n    print((same[k] + diff[k]) % limit)", "n,k = list(map(int,input().split()))\n\n# modulo divisor\nlimit = 998244353\n\n\nif k > 2*n:\n    print(0)\nelif k == 1 or k == 2*n:\n    print(2)\nelse:\n    same = [0] * (k+1)\n    same[1] = 2\n\n    diff = [0] * (k+1)\n    diff[2] = 2\n\n    for i in range(2, n+1):\n        for j in range(min(k, 2*i), 1, -1):\n\n            same[j] = same[j] + 2*diff[j] + same[j-1]\n            same[j] %= limit\n\n            diff[j] = diff[j] + 2*same[j-1] + diff[j-2]\n            diff[j] %= limit\n\n    print((same[k] + diff[k]) % limit)", "mod = 998244353\nn,k = list(map(int,input().split()))\ndp = [[[0,0] for i in range(2*n+1)] for j in range(n)]\ndp[0][1][0] = 2\ndp[0][2][1] = 2\nfor i in range(1,n):\n\tdp[i][1][0] = 2\nfor i in range(1,n):\n\tfor j in range(2,k+1):\n\t\tdp[i][j][0] = (dp[i-1][j][0] + dp[i-1][j-1][0] + dp[i-1][j][1]*2) % mod\n\t\tdp[i][j][1] = (dp[i-1][j][1]+ dp[i-1][j-2][1] + dp[i-1][j-1][0]*2) % mod\n# for i in dp:\n# \tprint (*i)\nprint ((sum(dp[-1][k])%mod))\n\n# mod = 10**9+7\n# n,k = map(int,input().split())\n# dp = [[[0,0,0,0] for i in range(2*n+1)] for j in range(n)]\n# dp[0][1][0] = 1\n# dp[0][1][3] = 1\n# dp[0][2][1] = 1\n# dp[0][2][2] = 1\n# for i in range(1,n):\n# \tdp[i][1][0] = 1\n# \tdp[i][1][3] = 1\n# for i in range(1,n):\n# \tfor j in range(2,2*(i+1)+1):\n# \t\tdp[i][j][0] = (dp[i-1][j][0] + dp[i-1][j-1][3] + dp[i-1][j][1] + dp[i-1][j][2]) % mod\n# \t\tdp[i][j][1] = (dp[i-1][j][1] + dp[i-1][j-2][2] + dp[i-1][j-1][0] + dp[i-1][j-1][3]) % mod\n# \t\tdp[i][j][2] = (dp[i-1][j-1][0] + dp[i-1][j-1][3] + dp[i-1][j][2] + dp[i-1][j-2][1]) % mod\n# \t\tdp[i][j][3] = (dp[i-1][j][3] + dp[i-1][j-1][0] + dp[i-1][j][1] + dp[i-1][j][2]) % mod\n# # for i in dp:\n# # \tprint (*i)\n# print (sum(dp[-1][k])%mod)\n", "#0 denotes white white\n#1 denotes white black\n#2 denotes black white\n#3 denotes black black\n\npri=998244353\ndp=[[[0 for i in range(2001)] for i in range(1001)] for i in range(2)]\nn,k=list(map(int,input().split()))\n#dp[i][j][k] i denotes type  j denotes index k denotes bycoloring\nfor i in range(1,n+1):\n    if(i==1):\n        dp[0][i][1]=2\n        dp[1][i][2]=2\n    \n        \n        \n        continue;\n    for j in range(1,(2*i)+1):\n        dp[0][i][j]=(dp[0][i-1][j])+(dp[0][i-1][j-1])+(2*(dp[1][i-1][j]))\n    \n        \n       \n        dp[0][i][j]%=pri\n        dp[1][i][j]=(2*dp[0][i-1][j-1])+(dp[1][i-1][j])+(dp[1][i-1][j-2])\n        dp[0][i][j]%=pri\n        dp[1][i][j]%=pri\ny=dp[0][n][k]+dp[1][n][k]\ny%=pri\nprint(y)\n        \n        \n"]