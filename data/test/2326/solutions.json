["3\n\nMOD = 998244353\n\ndef solve(N, A):\n    dp = [[0] * N for _ in range(N + 1)]\n    dp[0][0] = 1\n\n    for i in range(N):\n        for j in range(N):\n            c = dp[i][j]\n\n            dp[i + 1][j] += c\n            dp[i + 1][j] %= MOD\n\n            if j == 0:\n                if A[i] > 0 and A[i] < N:\n                    dp[i + 1][A[i]] += c\n                    dp[i + 1][A[i]] %= MOD\n            else:\n                dp[i + 1][j - 1] += c\n                dp[i + 1][j - 1] %= MOD\n\n    return (dp[N][0] + MOD - 1) % MOD\n\n\ndef main():\n    N = int(input())\n    A = [int(e) for e in input().split(' ')]\n    assert len(A) == N\n    print(solve(N, A))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from copy import deepcopy\nimport itertools\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nimport math\nfrom collections import deque\n\n\ndef read():\n    return int(input())\n\n\ndef readmap():\n    return map(int, input().split())\n\n\ndef readlist():\n    return list(map(int, input().split()))\n\n\nMAX = 10000\nMOD = 998244353\nfac = [0] * MAX\nfinv = [0] * MAX\ninv = [0] * MAX\n\n\ndef COMinit():\n    fac[0] = 1\n    fac[1] = 1\n    finv[0] = 1\n    finv[1] = 1\n    inv[1] = 1;\n    for i in range(2, MAX):\n        fac[i] = fac[i - 1] * i % MOD\n        inv[i] = MOD - inv[MOD%i] * (MOD // i) % MOD\n        finv[i] = finv[i - 1] * inv[i] % MOD\n    return None\n\n\ndef COM(n, k):\n    if n < k:\n        return 0\n    if n < 0 or k < 0:\n        return 0\n    return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD\n\n\nN = read()\nA = readlist()\n\nfor i in range(N):\n    A[i] = max(0, A[i])\n    if A[i] > N - i - 1:\n        A[i] = 0\n\nCOMinit()\n\ndp = [0] * N\n\nfor n in range(1, N):\n    dp[n] = dp[n-1]\n    for i in range(n):\n        if i == 0:\n            dp[n] = (dp[n] + COM(n - i - 1, A[i] - 1)) % MOD\n        else:\n            dp[n] = (dp[n] + COM(n - i - 1, A[i] - 1) * (dp[i - 1] + 1)) % MOD\n\nprint(dp[N - 1])", "mod = 998244353\n\nn = int(input())\na = list(map(int, input().split()))\n\nc = [[1]*n for _ in range(n)]\nfor i in range(n):\n    for j in range(1, i//2 + 1):\n        c[i][i-j] = c[i][j] = (c[i-1][j] + c[i-1][j-1]) % mod\n\n\nd = [0] * n + [1]\nfor i in range(n-1,-1,-1):\n    if a[i] <= 0:\n        continue\n    for j in range(i+a[i]+1,n+1):\n        d[i] += (d[j] * c[j-i-1][a[i]])\n    d[i] %= mod\n\nprint((sum(d)-1)%mod)\n", "MOD = 998244353\n\nn = int(input())\nd = [0] * n\na = list(map(int, input().split()))\nfor i in range(n - 2, -1, -1):\n    if (a[i] <= 0):\n        continue\n    cur_cnk = 1\n    cur_k = a[i]\n    cur_n = a[i]\n    for j in range(i + a[i] + 1, n):\n        d[i] = (d[i] + d[j] * cur_cnk % MOD) % MOD\n        cur_cnk *= (cur_n + 1)\n        cur_cnk //= (cur_n + 1 - cur_k)\n        cur_n += 1\n    if (i + a[i] + 1 <= n):\n        d[i] = (d[i] + cur_cnk) % MOD\nans = 0\nfor i in range(n):\n    ans = (ans + d[i]) % MOD\nprint(ans)\n", "MOD = 998244353\n\nn = int(input())\nd = [0] * n\na = list(map(int, input().split()))\nfor i in range(n - 2, -1, -1):\n    if (a[i] <= 0):\n        continue\n    cur_cnk = 1\n    cur_k = a[i]\n    cur_n = a[i]\n    for j in range(i + a[i] + 1, n):\n        d[i] = (d[i] + d[j] * cur_cnk % MOD) % MOD\n        cur_cnk *= (cur_n + 1)\n        cur_cnk //= (cur_n + 1 - cur_k)\n        cur_n += 1\n    if (i + a[i] + 1 <= n):\n        d[i] = (d[i] + cur_cnk) % MOD\nans = 0\nfor i in range(n):\n    ans = (ans + d[i]) % MOD\nprint(ans)", "def __starting_point():\n    N = int(input())\n    a = [0] + list(map(int, input().split()))\n    mod = 998244353\n    dp = [[0 for i in range(N + 2)] for i in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(N + 1):\n            dp[i][j] = (dp[i - 1][j] + dp[i - 1][j + 1]) % mod\n        if a[i] <= N and a[i] > 0:\n            dp[i][a[i]] = (dp[i][a[i]] + dp[i - 1][0] + 1) % mod\n    print(dp[N][0])\n\n__starting_point()", "m = 998244353\nn = int(input())\nu = [1] + [0] * n\nfor a in map(int, input().split()):\n    v = u[:]\n    if 0 < a < n: v[a] += u[0]\n    for j in range(n): v[j] = (v[j] + u[j + 1]) % m\n    u = v\nprint((u[0] - 1) % m)", "n = int(input())\nm = 998244353\ndp = [1] + [0] * n;\nfor i in map(int, input().split()) :\n    v = dp[:]\n    if(0 < i < n) :\n        v[i] = (v[i] + v[0]) % m\n    for j in range(n) :\n        v[j] = (v[j] + dp[j + 1]) % m\n    dp = v\nprint((dp[0] - 1) % m)", "N = 1009\nMOD = 998244353\n\na = [0]*N\ndp = [0]*N\nC = []\nfor i in range(0,N):\n\tC.append([0]*N)\n\nfor i in range(0,N):\n\tC[i][0] = 1\n\tC[i][i] = 1\n\tfor j in range(1,i):\n\t\tC[i][j] = (C[i-1][j] + C[i-1][j-1]) % MOD\n\nn = int(input())\nb = input().split()\nfor i in range(0,n):\n\ta[i] = int(b[i])\n\ndp[n] = 1\nfor i in range(n-1,-1,-1):\n\tif(a[i] <= 0):\n\t\tcontinue\n\tfor j in range(i+a[i]+1, n+1):\n\t\tdp[i] += (dp[j]*C[j-i-1][a[i]]) % MOD\n\t\tdp[i] %= MOD\n\nsoma = 0\nfor i in range(0,n):\n\tsoma += dp[i]\n\tsoma %= MOD\n\nprint(soma)\n", "from random import randint\n\ndef factMod(n, mod):\n    res = 1\n    for i in range(2, n+1):\n        res = (res * i) % mod\n    return res\n\ndef powMod(n, p, mod):\n    res = 1\n\n    while p > 0:\n        if p % 2 == 1:\n            res = (res * n) % mod\n        \n        p //= 2\n        n = (n * n) % mod\n\n    return res\n\ndef invMod(n, mod):\n    return powMod(n, mod - 2, mod)\n\n#t = 6\n#print(invMod(t, 97))\n#print( (invMod(t, 97) * t) % 97 )\n#return\n\ndef CnkMod(n, k, mod):\n    return (\n        factMod(n, mod) *\n        invMod(factMod(k, mod) * factMod(n-k, mod), mod)\n    ) % mod\n\ndef computeCnksMod(N, mod):\n    res = [[0] * (N+1) for i in range(N+1)]\n    res[0][0] = 1\n    for n in range(1, N+1):\n        res[n][0] = res[n-1][0]\n        for k in range(1, n+1):\n            res[n][k] = (res[n-1][k] + res[n-1][k-1]) % mod\n\n    return res\n\nmagic = 998244353\n\nn = int(input()) + 1\naa = [1] + [int(s)+1 for s in input().split(' ')]\n\n#aa = [1] + [randint(0, 999) for i in range(1000)]\n#n = len(aa)\n\ncnks = computeCnksMod(n, magic)\n\n#print('aa:', aa)\n\nd = [0] * (n + 1)\nd[n] = 1\n\nfor i in reversed(list(range(n))):\n    if i != 0 and aa[i] < 2:\n        continue\n    \n    cur = 0\n\n    tosel = aa[i] - 1\n    for j in range(i + tosel + 1, n + 1):\n        avail = j - i - 1\n        #cur = (cur + CnkMod(avail, tosel, magic) * d[j]) % magic\n        cur = (cur + cnks[avail][tosel] * d[j]) % magic\n    \n    d[i] = cur\n\n#print(d)\nprint(d[0] - 1)\n", "def computeCnksMod(N, mod):\n    res = [[0] * (N+1) for i in range(N+1)]\n    res[0][0] = 1\n    for n in range(1, N+1):\n        res[n][0] = res[n-1][0]\n        for k in range(1, n+1):\n            res[n][k] = (res[n-1][k] + res[n-1][k-1]) % mod\n\n    return res\n\nmagic = 998244353\n\nn = int(input()) + 1\naa = [1] + [int(s)+1 for s in input().split(' ')]\n\ncnks = computeCnksMod(n, magic)\n\nd = [0] * (n + 1)\nd[n] = 1\n\nfor i in reversed(list(range(n))):\n    if i != 0 and aa[i] < 2:\n        continue\n    \n    cur = 0\n    \n    tosel = aa[i] - 1\n    for j in range(i + tosel + 1, n + 1):\n        avail = j - i - 1\n        cur = (cur + cnks[avail][tosel] * d[j]) % magic\n    \n    d[i] = cur\n\nprint(d[0] - 1)\n", "def computeCnksMod(N, mod):\n    res = [[0] * (N+1) for i in range(N+1)]\n    res[0][0] = 1\n    for n in range(1, N+1):\n        res[n][0] = res[n-1][0]\n        for k in range(1, n+1):\n            res[n][k] = (res[n-1][k] + res[n-1][k-1]) % mod\n\n    return res\n\nmagic = 998244353\n\nn = int(input()) + 1\naa = [1] + [int(s)+1 for s in input().split(' ')]\n\ncnks = computeCnksMod(n, magic)\n\nd = [0] * (n + 1)\nd[n] = 1\n\nfor i in reversed(list(range(n))):\n    if i != 0 and aa[i] < 2:\n        continue\n    \n    cur = 0\n    \n    tosel = aa[i] - 1\n    for j in range(i + tosel + 1, n + 1):\n        avail = j - i - 1\n        cur = (cur + cnks[avail][tosel] * d[j]) % magic\n    \n    d[i] = cur\n\nprint(d[0] - 1)\n", "n=int(input())\ns=list(map(int,input().split()))\nmod=998244353\ncm=[[0 for i in range(n+2)]for j in range(n+2)]\nfor i in range(n+2):\n    cm[i][0]=1\nfor i in range(1,n+2):\n    for j in range(1,n+2):\n        cm[i][j]=cm[i-1][j]+cm[i-1][j-1]\n        cm[i][j]=cm[i][j]%mod\ndp=[0 for i in range(n+2)]\nacum=[0 for i in range(n+2)]\nfor i in range(n-1,-1,-1):\n    acum[i]=acum[i+1]\n    if s[i]<=0:\n        continue\n    for j in range(i+s[i],n):\n        dp[i]=(cm[j-(s[i]+i)+s[i]-1][s[i]-1]+cm[j-(s[i]+i)+s[i]-1][s[i]-1]*acum[j+1]+dp[i])%mod\n    acum[i]=(dp[i]+acum[i])%mod\nprint(acum[0])\n", "n = int(input())\narr = list(map(int, input().split()))\nmod = 998244353\n\ndp = [0] * (n + 2)\nC = [[0] * (n + 2) for i in range(n + 2)]\n\nfor i in range(0, n + 1):\n    C[i][0] = 1\n    for j in range(1, i + 1):\n        C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % mod\n\nans = 0\ndp[n] = 1\nfor iter in range(0, n):\n    i = n - iter - 1\n    if arr[i] <= 0:\n        continue\n    for j in range(i + arr[i] + 1, n + 1):\n        dp[i] += dp[j] * C[j - i - 1][arr[i]]\n        dp[i] %= mod\n    ans += dp[i]\n\nprint(ans % mod)", "n=int(input())\ns=list(map(int,input().split()))\nmod=998244353\ncm=[[0 for i in range(n+2)]for j in range(n+2)]\nfor i in range(n+2):\n    cm[i][0]=1\nfor i in range(1,n+2):\n    for j in range(1,n+2):\n        cm[i][j]=cm[i-1][j]+cm[i-1][j-1]\n        cm[i][j]=cm[i][j]%mod\ndp=[0 for i in range(n+2)]\nacum=[0 for i in range(n+2)]\nfor i in range(n-1,-1,-1):\n    acum[i]=acum[i+1]\n    if s[i]<=0:\n        continue\n    for j in range(i+s[i],n):\n        dp[i]=(cm[j-(s[i]+i)+s[i]-1][s[i]-1]+cm[j-(s[i]+i)+s[i]-1][s[i]-1]*acum[j+1]+dp[i])%mod\n    acum[i]=(dp[i]+acum[i])%mod\nprint(acum[0])", "#Bhargey Mehta (Junior)\n#DA-IICT, Gandhinagar\nimport sys, math, queue\n#sys.stdin = open('input.txt', 'r')\nMOD = 998244353\nsys.setrecursionlimit(1000000)\n\ndef ncr(n, r):\n    nonlocal f\n    return f[n]*pow(f[r], MOD-2, MOD)*pow(f[n-r], MOD-2, MOD) % MOD\n\nn = int(input())\na = list(map(int, input().split()))\ndp = [0 for i in range(n)]\nf = [1]\nfor i in range(1, n+1):\n    f.append((f[-1]*i) % MOD)\nfor i in range(n):\n    if i+a[i] < n and a[i] > 0: dp[i] = ncr(n-1-i, a[i])\nfor i in reversed(range(n)):\n    if a[i] <= 0: continue\n    for j in range(i+a[i]+1, n):\n        dp[i] = (dp[i]+ncr(j-1-i, a[i])*dp[j]) % MOD\nprint(sum(dp) % MOD)", "# https://codeforces.com/problemset/problem/1000/D\n# TLE\nn   = int(input())\na   = list(map(int, input().split()))\nmod = 998244353\n\ndef pow_(x, p, mod):\n    if p == 1: return x % mod \n    \n    tmp  = pow_(x, p // 2, mod)\n    if p % 2 == 0:\n        return (tmp * tmp) % mod\n    else:\n        return (tmp * tmp * x) % mod\n    \ndef reverse(x, mod):\n    return pow_(x, mod-2, mod)\n\ndef create_gt(gt):\n    for i in range(2, len(gt)):\n        gt[i] = gt[i-1] * i % mod\n    \ndef kCn(k, n, mod):\n    return gt[n] * reverse(gt[k], mod) * reverse(gt[n-k], mod) % mod\n\n# C(k, n ) = C(k-1, n-1) + C(k, n-1)\ndef create_kcn(N, mod):\n    kcn       = [[0] * N for _ in range(N)]\n    kcn[0][0] = 1\n    \n    for n in range(1, N):\n        for k in range(n, -1, -1):\n            kcn[k][n] = ( kcn[k-1][n-1] + kcn[k][n-1] ) % mod  \n    return kcn\n\nkcn = create_kcn(1001, mod)\ndp = [-1] * n\n\nfor i in range(n-2, -1, -1):\n    if a[i] > 0 and i + a[i] < n:\n        temp = 0\n        for j in range(i+a[i]+1, n):\n            if dp[j] > 0:\n                temp = ( temp + dp[j] * kcn[a[i]][j-i-1] ) % mod\n        temp  = (temp + kcn[a[i]][n-i-1]) % mod\n        dp[i] = temp\n\nprint(sum([x for x in dp if x>0]) % mod)        \n\n#4\n#1 1 1 1\n", "n = int(input())\nm = 998244353\ndp = [1] + [0] * n;\nfor i in map(int, input().split()) :\n    v = dp[:]\n    if(0 < i < n) :\n        v[i] = (v[i] + v[0]) % m\n    for j in range(n) :\n        v[j] = (v[j] + dp[j + 1]) % m\n    dp = v\nprint((dp[0] - 1) % m)\n", "m = 998244353\nn = int(input())\nu = [1] + [0] * n\n#purvikaurraina\nfor a in map(int, input().split()):\n    v = u[:]\n    if 0 < a < n: v[a] += u[0]\n    for j in range(n): v[j] = (v[j] + u[j + 1]) % m\n    u = v\nprint((u[0] - 1) % m)\n\n", "m = 998244353\nn = int(input())\nu = [1] + [0] * n\nfor a in map(int, input().split()):\n    v = u[:]\n    if 0 < a < n: v[a] += u[0]\n    for j in range(n): v[j] = (v[j] + u[j + 1]) % m\n    u = v\nprint((u[0] - 1) % m)\n\n", "n = int(input())\nm = 998244353\ndl = [1] + [0] * n;\nfor i in map(int, input().split()) :\n    v = dl[:]\n    if(0 < i < n) :\n        v[i] = (v[i] + v[0]) % m\n    for j in range(n) :\n        v[j] = (v[j] + dl[j + 1]) % m\n    dl = v\nprint((dl[0] - 1) % m)\n", "m = 998244353\nn = int(input())\nu = [1] + [0] * n\nfor a in map(int, input().split()):\n    v = u[:]\n    if 0 < a < n: v[a] += u[0]\n    for j in range(n): v[j] = (v[j] + u[j + 1]) % m\n    u = v\nprint((u[0] - 1) % m)\nr= 6\n", "n = int(input())\nm = 998244353\ndp = [1] + [0] * n;\nfor i in map(int, input().split()) :\n    v = dp[:]\n    if(0 < i < n) :\n        v[i] = (v[i] + v[0]) % m\n    for j in range(n) :\n        v[j] = (v[j] + dp[j + 1]) % m\n    dp = v\nprint((dp[0] - 1) % m)\n#print the result\n"]