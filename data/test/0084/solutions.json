["from sys import stdin as cin\nfrom sys import stdout as cout\n\ndef main():\n    n = int(cin.readline())\n    o = 0\n    for x in range(9, 0, -1):\n        if 10 ** x // 2 <= n:\n            ##print(x)\n            for i in range(9):\n                q = 10 ** x * (i + 1) // 2 - 1\n                if q <= n:\n                    o += min(q, n - q)\n            print(o)\n            return\n    print(n * (n - 1) // 2)\n\nmain()\n", "# python3\n# utf-8\n\ndef solve(x, a):\n    if x < a:\n        ans = 2 * x - a + 1\n        ans //= 2\n        # return ans\n    else:\n        ans = (a - 1) // 2\n    return max(0, ans)\n\nn = input()\noptimal_nines = len(n)\nif int(n[0]) < 5:\n    optimal_nines -= 1\nn = int(n)\nif n <= 4:\n    print((n * (n - 1)) // 2)\n    quit()\nans = 0\nfor i in range(0, 9):\n    curr_num = str(i) + '9' * optimal_nines\n    curr_num = int(curr_num)\n    ans += solve(n, curr_num)\n\nprint(ans)\n", "def f(w, n):\n  if w >= 3 and w <= n + 1:\n    return (w - 1) // 2\n  elif w > n + 1 and w <= 2 * n - 1:\n    return ((2 * n + 2) - w - 1) // 2\n  else:\n    return 0\n\nn = int(input())\ne = len(str(2 * n)) - 1\ndes = 10 ** e - 1\nans = 0\nfor i in range(1, 10):\n  ans += f(i * 10 ** e - 1, n)\nprint(ans)", "n=int(input())\nif n<5:\n    print(n*(n-1)//2)\n    return\ns0=str(n+n-1)\nk=len(s0)\nif s0!=k*'9':\n    k-=1\ns=k*'9'\ndef cnt(s):\n    v=int(s)\n    #print(v)\n    if v>n*2-1:\n        return 0\n    if v==2*n-1:\n        return 1\n    if v>n:\n        return n-v//2\n    if v<=n:\n        return v//2\nans=cnt(s)\nfor i in range(1,9):\n    ans+=cnt(str(i)+s)\nprint(ans)", "n = int(input())\nif n < 5:\n\tprint(n * (n-1) // 2)\n\treturn\nval = 5\nwhile n >= val * 10:\n\tval *= 10\n# print(val, nines)\nans = 0\n_val = val\nwhile _val <= n:\n\tans += min(n - _val+1, _val - 1)\n\t_val += val\nprint(ans)", "n = int(input())\nmax9 = 1\nwhile (int('9' * max9) + 1) // 2 <= n:\n    max9 += 1\nmax9 -= 1\nk = 0\nans = 0\nf = True\nwhile f:\n    number = int(str(k) + '9' * max9)\n    b = min(number - 1, n)\n    a = number // 2 + 1\n    if a <= b:\n        m = b - a + 1\n        ans += m\n        k += 1\n    else:\n        f = False\n\nif n == 2:\n    print(1)\nelif n == 3:\n    print(3)\nelif n == 4:\n    print(6)\nelse:\n    print(ans)\n", "# IAWT\nn = int(input())\nx = str(n + n - 1)\nif x.count('9') == len(x):\n    m = len(x)\nelse: m = len(x) - 1\nm = '9' * m\n\ndef f(x): # Number of pairs with sum x\n    if n+n-1 < x: return 0\n    if x <= n:\n        if x % 2 == 0: return max(x//2-1, 0)\n        return x//2\n    if x % 2 == 0:\n        x //= 2\n        return max(min(n - x, x - 1), 0)\n    return max(min(n - x//2, x // 2), 0)\n\nans = 0\nfor i in range(9):\n    s = int(str(i) + m)\n    ans += f(s)\n\nprint(ans)\n", "\nn = int(input())\n\nbiggest_num = 2 * n - 1\n\nif all([x == '9' for x in str(biggest_num)]):\n    lead_digit = 0\n    length = len(str(biggest_num))\nelif all([x == '9' for x in str(biggest_num)[1:]]):\n    lead_digit = int(str(biggest_num)[0])\n    length = len(str(biggest_num)) - 1\nelse:\n    lead_digit = int(str(biggest_num)[0]) - 1\n    length = len(str(biggest_num)) - 1\n\n\nresult = 0\nfor i in range(lead_digit + 1):\n    desired_num = int(str(i) + '9' * length)\n    if desired_num == 0: continue\n    result += (min([n, desired_num - 1]) - max([desired_num // 2, desired_num - n]))\n    #print(n - max([desired_num // 2, desired_num - n]))\n    #print(n, desired_num // 2, desired_num - n)\n\n    #print(desired_num, (min([n, desired_num - 1]) - max([desired_num // 2, desired_num - n])))\n\nprint(result)\n", "n = int(input())\nlargest = n + n - 1\npossible = [0, 9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 999999999]\nmaximum9 = 0\nindx1 = 0\ni = 0\nfor p in possible:\n  if p <= largest and p > maximum9:\n    maximum9 = p\n    indx1 = i\n  i += 1\nindx2 = 0\nfor i in range(9):\n  if largest >= i*10**indx1+maximum9:\n    indx2 = i\n  else:\n    break\ncount = 0\nfor i in range(indx2+1):\n  count += max((2*min(n, i*10**indx1+maximum9-1)- max(1,i*10**indx1+maximum9)+1)//2, 0)\nprint(count)\n", "from collections import Counter\nn=int(input())\nif n<5:\n    d={2:1,3:3,4:6}\n    print(d[n])\n    return\nz=len(str(n//5))\nnn=5*10**(z-1)\nn0=n-nn+1\nif n0<nn:\n    print(n0)\nelif n0==nn:\n    print(n0-1)\nelif n0<=2*nn:\n    print(n0-1)\n\nelif n0<3*nn:\n    print(n0*2-2*nn-1)\nelif n0==3*nn:\n    print(n0*2-2*nn-2)\nelif n0<=4*nn:\n    print(n0*2-2*nn-2)\n\nelif n0<5*nn:\n    print(n0*3-6*nn-2)\nelif n0==5*nn:\n    print(n0*3-6*nn-3)\nelif n0<=6*nn:\n    print(n0*3-6*nn-3)\n\nelif n0<7*nn:\n    print(n0*4-12*nn-3)\nelif n0==8*nn:\n    print(n0*4-12*nn-4)\nelif n0<=8*nn:\n    print(n0*4-12*nn-4)\n\nelif n0<9*nn:\n    print(n0*5-20*nn-4)\nelif n0==9*nn:\n    print(n0*5-20*nn-5)", "from math import factorial as fac\ndef solve(n):\n    if n <= 4:\n        return fac(n) // (2 * fac(n - 2))\n    m = n + (n - 1)\n    x = '9'\n    while(int(x + '9') <= m):\n        x += '9'\n    l = []\n    for i in range(10):\n        if int(str(i) + x) <= m:\n            l.append(int(str(i) + x))\n    res = 0\n    for p in l:\n        y = min(p - 1, n)\n        res += (y - (p - y) + 1) // 2\n    return res \nn = int(input())\nprint(solve(n))", "n = int(input())\nv = min(n, 5)\nif v < 5:\n    print(n*(n - 1) // 2)\n    return\nwhile v * 10 <= n:\n    v *= 10\nprint(sum(min(n - i * v + 1, v * i - 1) for i in range(1, n // v + 1)))", "n = int(input())\nif n <= 4:\n    print(n*(n-1)//2)\n    return\na = 9\nwhile int(str(a) + '9') <= 2*n - 1:\n    a = int(str(a) + '9')\nans = 0\nfor i in range(0, 9):\n    r = int(str(i) + str(a))\n    if r > 2*n - 1:\n        break\n    ku = r - n\n    if ku < 1:\n        ans += r//2\n    elif ku < n:\n        ans += (n - ku + 1) // 2\nprint(ans)\n", "from math import *\nimport sys\n#sys.stdin = open('in.txt')\n\nn =   int(input())\n\ndef closest9(n):\n  s = '9'*(len(str(n+1))-1)\n  return 0 if len(s) == 0 else int(s)\n\ndef solve(n):\n  if n == 2: return 1\n  if n == 3: return 3\n  if n == 4: return 6\n  s = n+n-1\n  c = closest9(s)\n  if c*10 + 9 == s: return 1\n  p = c\n  res = 0\n  for i in range(10):\n    if p <= n+1:\n      res += p//2\n    elif p > s:\n      break\n    else:\n      res += 1+(s - p)//2\n    #print(p, v)\n    p += c+1\n  return res\n\nprint(solve(n))\n\n", "import sys\n\nlines = []\nfor line in sys.stdin:\n    lines.append(line)\n\nn = int(lines[0].rstrip(\"\\r\\n\\t \"))\n\nmax_price = n * 2 - 1\nnines = len(str(max_price + 1)) - 1\n\nif nines < 1:\n    cnt = 0\n    for x in range(1, n):\n        cnt += x\n    print(cnt)\n    return\n\nprice_suffix = \"9\"*nines\ncnt = 0\n\n\ndef add_pairs(max_x: int, p: int):\n    nonlocal cnt\n    from_max = int(p / 2)\n    to_max = p - 1\n    if to_max > max_x:\n        to_max = max_x\n    from_min = p - to_max\n    cnt += from_max - from_min + 1\n\n\nfor d in range(0, 10):\n    if d > 0:\n        price = int(str(d) + price_suffix)\n    else:\n        price = int(price_suffix)\n    if price <= max_price:\n        add_pairs(n, price)\n\nprint(cnt)\n", "\ndef check9(x):\n\ti = len(x) - 1\n\twhile (i >= 0):\n\t\tif (x[i] != '9'):\n\t\t\treturn len(x) - i - 1\n\t\ti -= 1\n\treturn len(x) - i - 1\n\ndef solve(n):\n\tif (n < 5):\n\t\treturn (n*(n-1)//2)\n\tres = 0\n\tx = str(n+n-1)\n\tlength = len(x)\n\n\tif (check9(x) == length):\n\t\treturn 1\n\t\n\tcur = '9'*(length-1)\n\tfor i in range(9):\n\t\tc = str(i)\n\t\tp = int(c+cur)\n\t\tif (p <= n+1):\n\t\t\tres += p//2\n\t\telif (p > n+n-1):\n\t\t\tres += 0\n\t\telse:\n\t\t\tres += 1 + (n + n - 1 - p)//2\n\n\treturn res\n\nn = int(input())\n\nprint(solve(n))\n\n", "n = int(input())\nle = len(str(n))\nif n < 5:\n    print((n * (n - 1)) // 2)\nelif str(n).count('9') == le:\n    print(n // 2)\nelse:\n    if n + n - 1 < int('9'*le):\n        le -= 1\n    ans = 0\n    s = '9'*le\n    for i in range(9):\n        t = str(i) + s\n        t = int(t)\n        if t <= n + 1:\n            ans += t // 2\n        elif t <= n + n - 1:\n            ans += (1 + (n + n - 1 - t)//2)\n    print(ans)\n", "from sys import stdin, stdout\n\nINF = float('inf')\nn = int(stdin.readline())\ncount = [0, 5, 50, 500, 5000, 50000, 500000, 5000000, 50000000, 500000000, INF]\n\nfor label in range(len(count)):\n    if count[label + 1] > n:\n        break\n\npref = 0\nvalue = int(str(pref) + '9' * label)\nans = 0\n\nwhile value <= n - 1 + n:\n    \n    if n < 5:\n        ans = n * (n - 1) // 2\n        break\n    \n    k = max(value - n, 1)\n    ans += (min(n, value - 1) - k + 1) // 2\n    \n    pref += 1\n    value = int(str(pref) + '9' * label)\n\nstdout.write(str(ans))", "n = int(input())\na= 5\nwhile a * 10 <= n:\n    a *= 10\nprint(sum(min(n - i * a + 1, a * i - 1) for i in range(1, n // a + 1)) if n>=5 else n*(n-1)//2)", "n = int(input())\na=5\nwhile a*10<=n:a*=10\nprint(sum(min(n-i,i) for i in range(a-1,n,a)) if n>4 else n*(n-1)//2)", "n = int(input())\nm = 2*n-1\nw = len(str(m+1))-1\nans = 0\nfor i in range(10):\n\tv = (i+1)*10**w - 1\n\tif 0 < v <= m:\n\t\tans += (v-1)//2\n\t\tif v > n: ans -= v-n-1\nprint(ans)", "nine = [0, 9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999]\n\n\ndef get_answer(n):\n    if (n < 5):\n        return (n*(n-1))//2\n    elif (2*n-1 in nine):\n        return 1\n    elif (n in nine):\n        return (n-1)//2\n    \n    str_n = str(n)\n    len_n = len(str_n)\n    len_2n = len(str(2*n-1))\n    \n    if len_n == len_2n: # n < 50..0\n        # pattern: A9..9, |9..9| = |n| - 1\n        suf = \"9\" * (len_n - 1)\n        k = int(suf)\n        res = 0\n        for c in range(10):\n            if (int(str(c) + suf) <= 2*n-1):\n                # print(str_n[0], c, '+', suf)\n                if (int(str(c) + suf) <= n):\n                    for i in range(c//2+1):\n                        if i == c-i:\n                            if i == 0:  # (0, 0): 01 -> 49\n                                res += (k-1)//2\n                            else:  # (1, 1): 00 -> 49\n                                res += (k+1)//2\n                        else:\n                            if i == 0:  # (0, 1): 01 -> 99 \n                                res += k\n                            else:  # (1, 2): 00 -> 99\n                                res += k+1\n                else:\n                    for i in range(c//2+1):\n                        if i > int(str_n[0]) or c-i > int(str_n[0]):\n                            continue\n                        elif i < int(str_n[0]) and c-i < int(str_n[0]):\n                            if i == c-i:\n                                if i == 0:  # (0, 0): 01 -> 49\n                                    res += (k-1)//2\n                                else:  # (1, 1): 00 -> 49\n                                    res += (k+1)//2\n                            else:\n                                if i == 0:  # (0, 1): 01 -> 99 \n                                    res += k\n                                else:  # (1, 2): 00 -> 99\n                                    res += k+1\n                        else:\n                            # print(i, c-i, int(str(c) + suf), n)\n                            if i != c - i:\n                                # print(n-int(str_n[0])*(k+1)+1)\n                                res += n-int(str_n[0])*(k+1)+1\n                            else:\n                                _n = int(str_n[1:])\n                                # print(_n)\n                                res += get_answer(_n) + (_n in nine)\n                                # 99: (0, 0): 01 -> 49, (i, i): 00 -> 49 => +1\n            else:\n                break\n        return res\n    else: # n > 50..0\n        # pattern: 9..9, |9..9| = |n|\n        suf = int('9' * len_n)\n        return n - (suf+1)//2 + 1\n\nprint(get_answer(int(input())))\n", "n = int(input())\nm = n\n\ndigits = 0\nwhile m > 0:\n    m //= 10\n    digits += 1\nif n < 5:\n    print(n * (n - 1) // 2)\n    return\nif n == 10 ** digits - 1:\n    print(n // 2)\n    return\nif n >= 5 * 10 ** (digits - 1):\n    print(n - 5 * 10 ** (digits - 1) + 1) \nelse:\n    fst = int(str(n)[0])\n    res = (fst) * (fst - 1) // 2 * 10 ** (digits - 1)\n    res += (fst) * (10 ** (digits - 1) // 2 - 1)\n\n    n = int(str(n)[1:])\n    digits -= 1\n    if n == 10 ** digits - 1:\n        res += (n // 2)\n    elif n >= 5 * 10 ** (digits - 1):\n        res += (n - 5 * 10 ** (digits - 1) + 1)\n    res += (n + 1) * fst \n    print(res)\n\n", "import sys\nn = int(sys.stdin.readline().rstrip(\"\\n\"))\n\nif n < 5:\n    res = n * (n-1) // 2\n    print(res)\n    return\n\nsum = n + (n - 1)\nl = len(str(sum))\nif str(sum) == l * '9':\n    print(1)\n    return\n\n\nres = 0\ns = (l - 1) * '9'\nfor i in range(9):\n    p = str(i) + s\n    if int(p) <= n + 1:\n        res += int(p) // 2\n    elif int(p) > sum:\n        break\n    else:\n        res += (1 + (sum - int(p)) // 2)\nprint(res)\n\n\n", "s = input()\nn = int(s)\nnum = '9'*len(s)\nnum = int(num)\nif(2*n < num):\n    num = num // 10\nif (num == 0):\n    print((n*(n-1)//2));\n    return\nret = 0;\nfor i in range (9):\n    tmp = str(i) + str(num)\n    tmp = int(tmp);\n    if (2 * n <= tmp):\n        break;\n    biggest = min(tmp - 1, n);\n    smallest = tmp - biggest\n    ret += (biggest - smallest + 1) // 2\nprint(ret)\n# else :\n#     biggest = min(num - 1, n);\n#     smallest = num - biggest\n#     print((biggest - smallest + 1) // 2)\n"]