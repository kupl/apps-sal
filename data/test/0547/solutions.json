["n, k = list(map(int, input().split()))\na = []\nfor i in range(n):\n    a.append(input())\ns = input()\nkmn = 1\nkmx = 0\nfor i in range(n):\n    if (len(a[i]) < len(s)):\n        kmn += 1\n        kmx += 1\n    elif (len(a[i]) == len(s)):\n        kmx += 1\nprint((kmn - 1) // k * 5 + kmn, (kmx - 1) // k * 5 + kmx)\n", "#!/usr/bin/env python3\n\n\ndef main():\n    try:\n        while True:\n            n, k = list(map(int, input().split()))\n            ls = sorted((input() for i in range(n)), key=len)\n            true = len(input())\n            first = 1e9\n            last = 0\n            cur = 0\n            flag = True\n            for i, s in enumerate(ls):\n                cur += 1\n                if len(s) == true:\n                    last = cur\n                    if flag:\n                        flag = False\n                        first = cur\n                elif not flag:\n                    break\n                if (i + 1) % k == 0:\n                    cur += 5\n\n            print(first, last)\n\n    except EOFError:\n        pass\n\n\nmain()\n", "from collections import Counter\n\ndef f(x, k):\n    return 5*((x-1)//k) + x\n\nn, k = [int(s) for s in input().split()]\nctr = Counter()\nfor i in range(n):\n    ctr[len(input())] += 1\n\nlc = len(input())\n\nx = sum(ctr[l] for l in ctr if l < lc) + 1\ny = sum(ctr[l] for l in ctr if l <= lc)\n\nprint(f(x,k), f(y,k))\n", "#def hh(a):\n#    return -a\n\nimport sys, math\nn, k = list(map(int, input().split()))\nz = [0] * n\nfor i in range(n):\n    z[i] = len(input())\n#z.sort(key = hh)\npassw = len(input())\nbef = 0\nsame = 0\nfor i in range(n):\n    if z[i] == passw:\n        same += 1\n    elif z[i] < passw:\n        bef += 1\nprint((bef + 1) + 5 * (bef // k), (bef + same) + 5 * ((bef + same - 1) // k))\n", "def count_time(_key):\n    i = sorted(variants, key=_key).index(password)\n    return i + 1 + i // k * 5\n\n\nn, k = list(map(int, input().split()))\nvariants = [input() for x in range(n)]\npassword = input()\nprint((*list(map(count_time, [lambda x: (len(x), x != password),\n                        lambda x: (len(x), x == password)]))))\n", "n, k = list(map(int, input().split()))\ns = [input() for i in range(n)]\npas = input()\na = sorted([len(i) for i in s])\nf = lambda x: x + ((x - 1) // k) * 5\nfor i in range(n):\n    if a[i] == len(pas):\n        L = i + 1\n        break\nans1 = f(L)\nR = n\nfor i in range(n):\n    if a[i] > len(pas):\n        R = i\n        break\nans2 = f(R)\nprint(ans1, ans2)\n", "n,k = (int(i) for i in input().split())\nl = []\nfor i in range(n):\n    l += [input()]\nans_pas = input()\nlow_bow = 0\nup_bow = 0\nfor el in l:\n    if len(el) < len(ans_pas):\n        low_bow+=1\n    elif len(el) == len(ans_pas):\n        up_bow+=1\nup_bow+=low_bow-1\nmin_ans = low_bow+(low_bow//k)*5+1\nmax_ans = up_bow+(up_bow//k)*5+1\nprint(min_ans,max_ans)", "n, k = (int(_) for _ in input().split())\na = []\nfor i in range(n):\n    a.append(input())\npw = input()\nx, y = 0, 0\nfor s in a:\n    if s == pw:\n        continue\n    if len(s) < len(pw):\n        x += 1\n        y += 1\n    if len(s) == len(pw):\n        y += 1\nx += (x // k) * 5\ny += (y // k) * 5\nprint(x + 1,  y + 1)\n", "n, k = map(int, input().split())\na = []\nfor i in range(n):\n    s = input().rstrip()\n    a.append((len(s), s))\ns1 = input().rstrip()\na.sort()\ntime = 0\nans1 = ans2 = 10 ** 13\nfor i in range(n):\n    time += 1        \n    if a[i][0] == len(s1):\n        ans1 = min(ans1, time)       \n    if i == n - 1 or a[i + 1][0] > len(s1):\n        ans2 = min(ans2, time)  \n    if (i + 1) % k == 0:\n        time += 5     \nans2 = min(ans2, time)\nprint(ans1, ans2)", "n, k = map(int, input().split())\na = []\nfor i in range(n):\n    tmp = input()\n    a.append((len(tmp), tmp))\na.sort()\nans = input()\nansmin = 10**18\nansmax = 0\nnowt = 0\nfor i in range(n):\n    if i % k == 0 and i != 0:\n        nowt += 5\n    nowt += 1\n    if (len(ans) == len(a[i][1])):\n        ansmax = nowt\n        ansmin = min(ansmin, nowt)\nprint(ansmin, ansmax)", "n, k = map(int, input().split())\ndat = [len(input()) for i in range(n)]\np = len(input())\nmi = sum(map(lambda x: x < p, dat))\nma = mi + sum(map(lambda x: x == p, dat)) - 1\n\nprint(mi + (mi//k)*5 + 1, end = \" \")\nprint(ma + (ma//k)*5 + 1)", "# You lost the game.\n\nn,k = map(int, input().split())\nS = [str(input()) for _ in range(n)]\np = str(input())\n\nL = [len(S[i]) for i in range(n)]\nlp = len(p)\n\nL.sort()\nok = 0\nfor i in range(n):\n    if L[i] == lp and ok == 0:\n        ok = 1\n        print(i+1+i//k*5,end=\" \")\n    if L[i] > lp:\n        print(i+(i-1)//k*5)\n        ok = 2\n        break\nif ok == 1:\n    print(n+(n-1)//k*5)\n", "n,k=tuple(map(int,input().split()))\nls=[set() for i in range(1,110)]\nfor i in range(n):\n\ts=input().strip()\n\tls[len(s)].add(s)\nkey=input().strip()\nkl=len(key)\nkk=0\nfor i in range(1,kl):\n\tkk+=len(ls[i])\nbt=kk+(kk//k)*5+1\nft=kk+len(ls[kl])+((kk+len(ls[kl])-1)//k)*5\nprint(bt,ft)\n", "n,k = map(int,input().split())\narr = []\nfor i in range(n):\n    arr.append(input())\ncorr = input()\n\nleast = 0\nfor x in arr:\n    if(len(x)<len(corr)):\n        least += 1\n\n\nlw = 0\nfor x in arr:\n    if(len(x)==len(corr)):\n        if(x!=corr):\n            lw += 1\n\n\nprint((least//k)*5+least+1,((least+lw)//k)*5+least+lw+1)", "n,k=[int(a) for a in input().split()]\np=[]\nfor i in range(n):\n    p.append(input())\nreal=input()\nl=len(real)\ncmin,cmax=0,0\nfor s in p:\n    if len(s)<=l:\n        cmax=cmax+1\n        if len(s)<l:\n            cmin=cmin+1\n\ndef calc(c):\n    if c==0:\n        return 0\n    return c+5*(c//k)\n\nprint(calc(cmin)+1,calc(cmax-1)+1)\n", "parse_int = lambda: list(map(int, input().split()))\n\nn,k = parse_int()\n\npassw = set()\nfor _ in range(n): passw.add(input().strip())\npassw = [len(el) for el in passw]\npassw.sort()\n\ntru = len(input().strip())\n\ntime = 0\nbefore_shtraf = k\nlucky, unlucky = 999999999, 0\nfor el in passw:\n    time += 1\n\n    if el == tru:\n        lucky = min(lucky, time)\n        unlucky = time\n\n    before_shtraf -= 1\n    if before_shtraf <= 0:\n        before_shtraf = k\n        time += 5\n\nprint(lucky, unlucky)", "def getin():\n    xin = input()\n    while xin.strip() == \"\":\n        xin = input()\n    return xin\n\ndef gi():\n    return [int(x) for x in getin().split()]\n\ndef count(n, k):\n    return int(n/k) * k + int((n - 1)/k) * 5 + n%k\n\nn, k = gi()\nm = -1\n\nc = [0] * 109\np = []\n\nfor i in range(n):\n    s = input()\n    c[len(s)] += 1\n    if len(s) > m:\n        m = len(s)\n    p.append(s)\n\nac = input()\n\nif ac not in p:\n    print(count(n, k), count(n, k))\nelse:\n    i = 1\n    mi = 0\n    while i < len(ac):\n        mi += c[i]\n        i += 1\n\n    print(count(mi + 1, k), count(mi + c[len(ac)], k))\n", "#!/usr/bin/env python3\n\nn, k = [int(x) for x in input().split()]\npasses = [input() for _ in range(n)]\npassword = input()\n\nl = len([p for p in passes if len(p) < len(password)]) + 1\nh = len([p for p in passes if len(p) <= len(password)])\n\nl += ((l-1)//k)*5\nh += ((h-1)//k)*5\n\nprint(l, h)\n", "n,k=[int(i) for i in input().split()]\nar=[0]*101\nfor i in range(n):\n    ar[len(input())]+=1\ntru=len(input())\nmn=sum(ar[:tru])\nmx=sum(ar[:tru+1])-1\nprint(mn//k*5+mn+1,mx//k*5+mx+1)\n", "from sys import stdin\n\n\nn, k = (int(x) for x in stdin.readline().split())\n\npasswords = []\n\nfor _ in range(n):\n    passwords.append(stdin.readline().strip())\n\nright_password = stdin.readline().strip()\n\nlength_less_than_password = len([password for password in passwords if len(password) < len(right_password)])\nlength_less_than_or_equal_to_password = len([password for password in passwords if len(password) <= len(right_password)])\n\na = length_less_than_password // k\n\nspent = length_less_than_password + a * 5\n\nprint(spent + 1, end=' ')\n\na = (length_less_than_or_equal_to_password - 1) // k\n\nspent = length_less_than_or_equal_to_password + a * 5\n\nprint(spent)\n", "N, K = list(map(int, input().split()))\npwds = [input() for _ in range(N)]\ncorrect = input()\npwds = sorted([pwd for pwd in pwds if len(pwd) <= len(correct)], key=len)\ntime = 0\ncount = 0\ni = 0\nwhile len(pwds[i]) < len(correct):\n    time += 1\n    count += 1\n    if count == K:\n        time += 5\n        count = 0\n    i += 1\nbest = time + 1\nwhile i < len(pwds) - 1:\n    time += 1\n    count += 1\n    if count == K:\n        time += 5\n        count = 0\n    i += 1\nworst = time + 1\nprint(str(best) + \" \" + str(worst))\n", "n, k = [ int(x) for x in input().split() ]\n\npasswords = []\n\nfor i in range(0, n):\n    passwords.append(len(input()))\n\ncorrect = len(input())\n\npasswords = sorted(passwords)\n\nt = 0\ni = 0\n\nopt, pes = -1, -1\n\nfor i in range(0, len(passwords)):\n    t += 1\n    if passwords[i] == correct:\n        pes = t\n        if opt == -1:\n            opt = t\n    if (i + 1) % k == 0:\n        t += 5\n\nprint(opt, pes)\n", "import sys, re\nfrom itertools import product\nfrom collections import Counter\nls = [l.rstrip() for l in sys.stdin.readlines()]\n\nn, k = list(map(int, ls[0].split(\" \")))\npss = ls[1:1+n]\ncorr = ls[1+n]\na = list([len(x) for x in pss])\nm = len(corr)\nr1 = 0\nfor i in range(1, m):\n    r1 += a.count(i)\nr2 = r1 + a.count(m) - 1\n# print(r1, r2)\nprint(r1//k*5 + r1 + 1, r2//k*5 + r2 + 1)\n", "__author__ = 'Think'\ndef format(ans):\n\treturn ans+5*(ans//k)\nn, k=[int(i) for i in input().split()]\nfreq={i:0 for i in range(1, 105)}\nfor i in range(n):\n\ts=input()\n\tfreq[len(s)]+=1\ncorrect=len(input())\nt=0\nfor i in range(1, correct):\n\tt+=freq[i]\nprint(format(t)+1, format(t+freq[correct]-1)+1)\n"]