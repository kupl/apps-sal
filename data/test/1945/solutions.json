["#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nn = int(input())\n\nb_a = {}\nfor n_ in range(n):\n    b, a = input().split()\n\n    replaced = False\n    for k in b_a:\n        if b_a[k] == b:\n            b_a[k] = a\n            replaced = True\n    if not replaced:\n        b_a[b] = a\n\nprint(len(b_a))\nfor k in b_a:\n    print(k + \" \" + b_a[k])\n", "q = int(input())\ncurrent = []\nbegin = []\nfor i in range(q):\n    old, new = input().split()\n    for ind in range(len(current)):\n        if current[ind] == old:\n            current[ind] = new\n            break\n    else:\n        begin.append(old)\n        current.append(new)\nprint(len(begin))\nfor el in zip(begin, current):\n    print(el[0],el[1])\n", "#/usr/bin/env python3\n\nN = int(input())\nnames = [input().split() for i in range(N)]\n\nc_to_old = dict()\n\nfor n in names:\n    if n[0] not in c_to_old:\n        c_to_old[n[1]] = n[0]\n    else:\n        old = c_to_old[n[0]]\n        del c_to_old[n[0]]\n        c_to_old[n[1]] = old\n\nprint(len(c_to_old))\nthing = sorted(list(c_to_old.items()), key = lambda x: x[1])\nfor c, o in thing:\n    print(o, c)\n", "import sys\n\nn = int(sys.stdin.readline())\ntracker = {}\ncount = 0\n\nfor i in range(n):\n\tpair = sys.stdin.readline().split(\"\\n\")[0].split(\" \")\n\tif (pair[0] in tracker):\n\t\ttracker[pair[1]] = tracker.pop(pair[0])\n\telse:\n\t\tcount += 1\n\t\ttracker[pair[1]] = pair[0]\n\t\t\nprint(count)\nfor key in list(tracker.keys()):\n\tprint(tracker[key] + \" \"+key)\n\n", "def main():\n    q = int(input())\n    d = {}\n    for _ in range(q):\n        old, new = input().split()\n        oldold = d.get(old)\n        if oldold:\n            del d[old]\n            d[new] = oldold\n        else:\n            d[new] = old\n    l = [str(len(d))]\n    for k, v in d.items():\n        l.append(' '.join((v, k)))\n    print('\\n'.join(l))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n\tq = int(input())\n\told = []\n\tnew = []\n\tfor _ in range(q):\n\t\ta, b = list(input().split())\n\t\t#print(a, b)\n\t\tflag = 1\n\t\tfor i in range(len(new)):\n\t\t\tif new[i] == a:\n\t\t\t\tnew[i] = b\n\t\t\t\tflag = 0\n\t\t\t\tbreak\n\t\tif flag == 1:\n\t\t\told.append(a)\n\t\t\tnew.append(b)\n\tn = len(old)\n\tprint(n)\n\tfor i in range(n):\n\t\tprint(old[i], new[i])\n\ndef __starting_point():\n\tmain()\n__starting_point()", "import math,string,itertools,fractions,heapq,collections,re,array,bisect\nfrom itertools import chain, dropwhile, permutations, combinations\nfrom collections import defaultdict\n\n\ndef main2(n,old,new):\n    orig = []\n    visited = []\n\n    o = []\n    l = []\n\n    for i,j in zip(old,new):\n        if i not in visited:\n            orig.append([i,j])\n            visited.append(j)\n        else:\n            for k,v in enumerate(orig):\n                if i == v[-1]:\n                    orig[k].append(j)\n                    visited.append(j)\n                    continue\n    print(len(orig))\n    for v in orig:\n        print(v[0],\" \",v[-1])\n\ndef main(n,old,new):\n    o = []\n    l = []\n    for i,j in zip(old,new):\n        if i not in l:\n            o.append(i)\n            l.append(j)\n        else:\n            k = l.index(i)\n            l[k] = j\n    print(len(o))\n    for x,y in zip(o,l):\n        print(x,y)\n\ndef main_input(info=0):\n    n = int(input())\n    l,r = list(range(n)), list(range(n))\n    for i in range(n):\n        l[i],r[i] = input().split()\n    main(n,l,r)\n\ndef __starting_point():\n    main_input()\n\n__starting_point()", "q = int(input())\nlogs = [input().split() for _ in range(q)]\norigin = []\nnow = []\ncnt = 0\nfor old, new in logs:\n    if old not in now:\n        origin.append(old)\n        now.append(new)\n        cnt += 1\n    else:\n        now[now.index(old)] = new\nprint(cnt)\nfor i in range(len(now)):\n    print(origin[i], now[i])\n", "n=int(input())\nqueries=[]\nnames=[]\nf=[]\nl=[]\nfor i in range(n):\n    queries.append(input().split(' '))\nfor i in range(n):\n    for j in range(2):\n        if queries[i][j] in names:\n            if j==0:\n                names.remove(queries[i][j])\n                l[l.index(queries[i][j])]=queries[i][j-1]\n        else:\n            names.append(queries[i][j])\n            if j==0:\n                f.append(queries[i][j])\n            else:\n                if queries[i][j] not in l:\n                    l.append(queries[i][j])\nprint(len(f))\nfor k in range(len(f)):\n    print(f[k],l[k])\n", "__author__ = 'Rakshak.R.Hegde'\n\"\"\"\nCreated on Jan 12 2015 PM 02:41\n\n@author: Rakshak.R.Hegde\n\"\"\"\n\nchanges = []\nvalids = []\nfor t in range(int(input())):\n    a, b = input().split()\n    do = True\n    for i in changes:\n        if b == (i[0] or i[1]):\n            do = False\n            break\n        if i[1] == a:\n            i[1] = b\n            break\n    else:\n        if do: changes.append([a, b])\nprint(len(changes))\nfor change in changes:\n    print(change[0], change[1])", "n = int(input())\np = []\nq = []\nc = 1\nfor i in range(n):\n    a,b=list(map(str,input().split()))\n    if a not in q:\n        p.append([a,b])\n        q.append(a)\n        q.append(b)\n    else:\n        x = q.index(p[int(q.index(a)/2-.5)][1])\n        p[int(q.index(a)/2-.5)][1]=b\n        q[x]=b\n\nprint(len(p))\nfor i in range(len(p)):\n    print(p[i][0], p[i][1])\n", "def tabe(a,b):\n    i=0\n    while i<len(a):\n        if b==a[i]:\n            return i\n        i=i+1\n    return -1\na=int(input())\nl=[]\nll=[]\ni=0\nwhile i<a:\n    b=list(input().split())\n    c=b[0]\n    d=b[1]\n    x=tabe(ll,c)\n    if x==-1:\n        l.append(c)\n        ll.append(d)\n    else:\n        ll[x]=d\n    i=i+1\ni=0\nprint(len(l))\nwhile i<len(l):\n    print(l[i],ll[i])\n    i=i+1\n", "a=int(input())\n\nold=[]\nnew=[]\nd={}\nfor i in range(a):\n    p=input().split()\n    old.append(p[0])\n    new.append(p[1])\n    \n\ndis=[]\n\nfor i in range(a):\n    if old[i] not in new:\n        dis.append(old[i])\n\nprint(len(dis))\n\nfor i in range(len(dis)):\n    p=dis[i]\n    q=dis[i]\n    for j in range(a):\n        if p==old[j]:\n            p=new[j]\n    s=q+\" \"+p\n    print(s)", "n = int(input())\nd = []\nfor i in range(n):\n    a, b = input().split()\n    f = False\n    for x in d:\n        if a == x[1]:\n            x[1] = b\n            f = True\n            break\n    if not f:\n        d.append([a, b])\n\nprint(len(d))\nfor x in d:\n    print(x[0], x[1])\n", "queries = []\nfor q in range(int(input())):\n    old, new = input().split()\n    done = False\n    for elem in queries:\n        if old == elem[-1]:\n            elem.append(new)\n            done = True\n            break\n    if not done:\n        queries.append([old, new])\nprint(len(queries))\nfor elem in queries:\n    print(elem[0], elem[-1])\n", "inCount = int(input())\na = {}\nfor i in range(inCount):\n    curStr1, curStr2 = input().split()\n    if curStr1 not in a.keys():\n        a[curStr2] = curStr1\n    else:\n        prevValue = a[curStr1]\n        a.pop(curStr1)\n        a[curStr2] = prevValue\nprint (len(a))\nfor key, value in a.items():\n    print(value, key)", "q = int(input())\ndic = {}\nfor i in range(q):\n\ta,b = input().split()\n\tused = False\n\tfor i in list(dic.keys()):\n\t\tif a == dic[i]:\n\t\t\tused = True\n\t\t\tdic[i] = b\n\tif not used:\n\t\tdic[a] = b\n\nprint(len(dic))\nfor i in list(dic.keys()):\n\tprint(i,dic[i])\n", "a = int(input())\nsa = []\nfor i in range(a):\n    x, y = map(str, input().split(' '))\n    sa.append([x, y, 0])\nfor i in sa:\n    if i[2] == 0:\n        for j in sa:\n\n            if j[2] == 0 and i[1] == j[0]:\n                i[1] = j[1]\n                j[2] = 2\n        i[2] = 1\na = [i for i in sa if i[2] == 1]\nprint(len(a))\nfor i in a:\n    print(i[0], i[1])", "def main():\n    q = int(input())\n    users = []\n    newusers = []\n    for i in range(q):\n        line = input().rstrip().split()\n        old = line[0]\n        new = line[1]\n        if old not in newusers:\n            users.append(old)\n            newusers.append(new)\n        else:\n            index0 = newusers.index(old)\n            newusers[index0] = new\n    print(str(len(users)))\n    for j in range(len(users)):\n        print(users[j] + \" \" + newusers[j])\n    \nmain()\n", "def input_split(f): return list(map(f, input().split()))\n\n\ndef main():\n    n = int(input())\n    vals = []\n    for i in range(n):\n        vals.append(tuple(input_split(str)))\n\n    res = {}\n    for o, n in vals:\n        if o in res:\n            # aaa bbb, bbb, ccc -> aaa ccc\n            # {bbb: aaa}\n            res[n] = res[o]\n            del res[o]\n        else:\n            res[n] = o\n    print(len(res))\n    for k in res:\n        print(\"{} {}\".format(res[k], k))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "dic = {}\ns = int(input())\ni=0\nwhile (i < s):\n    x = input()\n    h = x.split()\n    if h[0] in dic:\n        dic[h[1]] = dic.pop(h[0])\n    else:\n        dic[h[1]] = h[0]\n    i+=1\nprint(len(dic))\nfor x in dic:\n    print(dic[x] + \" \" + x)\n", "def main():\n    n = int(input())\n    Handels = []\n    for i in range(n):\n        rdl = input().split()\n        if not rdl[0] in Handels:\n            Handels.append(rdl[0])\n            Handels.append(rdl[1])\n        else: \n            ind = Handels.index(rdl[0])\n            Handels[ind] = rdl[1]\n    i = 0\n    print(int(len(Handels)/2))\n    while i < len(Handels):\n        print(Handels[i], Handels[i+1])\n        i +=2\nmain()", "n = int(input())\nd = {}\nfor i in range(n):\n    a, b = input().split()\n    bo = True\n    for j in d:\n        if a == d[j]:\n            d[j] = b\n            bo = False\n    if bo:\n        d[a] = b\nprint(len(d))\nfor i in d:\n    print(i, d[i])\n", "n =int(input())\nd={}\nfor i in range(n):\n   old,new= input().split()\n   already=True\n   for i in d:\n      if old == d[i]:\n         d[i]=new\n         already=False\n   if already:\n      d[old]=new\nprint(len(d))\nfor i in d.keys():\n   print(str(i)+\" \"+str(d[i]))", "a = int(input(\"\"))\n#Alex Gu Is fat\ninputs = []\nfor value in range(a):\n    a = input(\"\").split(\" \")\n    inputs.append(a)\n#Alex Gu is still fat\nhandles = []\nguFat = []\nfor value in inputs:\n    string = value[0] + \" \" + value[1]\n    if value[0] not in handles:\n        handles.append(value[1])\n        guFat.append(string)\n    if value[0] in handles:\n        handles.remove(value[0])\n        handles.append(value[1])\n        for k in guFat:\n            impor = k.split(\" \")\n            if value[0] == impor[1]:\n                guFat.remove(k)\n                guFat.append(impor[0] + \" \" + value[1])\n    \n    #Guess what? Alex Gu is still fat!\nprint(len(handles))\nfor value in guFat:\n    print(value)\n"]