["for _ in range(int(input())):\n    lasts = {}\n    ans = n = int(input())\n    for i, a in enumerate(input().split()):\n        if a in lasts:\n            ans = min(ans, i - lasts[a])\n        lasts[a] = i\n    ans += 1\n    if ans > n:\n        ans = -1\n    print(ans)\n", "import sys\ndef I():\n        return sys.stdin.readline().rstrip()\n\nfor _ in range(int(I())):\n    n = int(I())\n    a = list( map( int, I().split() ) )\n    d = dict()\n    for i, x in enumerate(a):\n        if x in d:\n            n = min( n, i - d[ x ] )\n        d[ x ] = i\n    print( n + 1 if n < len(a) else -1 )\n", "import math\n\nimport collections\n\na = collections.OrderedDict()\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        t = tuple([int(x) for x in input().split()])\n\n        result = None\n        occ = dict()\n        for k in range(len(t)):\n            ele = t[k]\n            if ele in occ:\n                new_result = k - occ[ele] + 1\n                if result is None or new_result < result:\n                    result = new_result\n            occ[ele] = k\n        if result is None:\n            print(-1)\n        else:\n            print(result)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# [t0, ... tn-1] dominerad av V: minst 2 element\n# occ(num) f\u00f6rekomster av num i t\n# occ(v) > occ(v') -- n\u00e4r v f\u00f6rekommer flest g\u00e5nger och inget annat f\u00f6rekommer lika m\u00e5nga g\u00e5nger.\n# kortaste dominerade dellista (slice, sammanh\u00e4ngande).\n\n# 4 <- T\n\n# 1\n# 1 (jaha, minst l\u00e4ngd 2)\n\n# 6\n# 1 2 3 4 5 1 - hela grejen har 2 ettor\n\n# 9\n# 4 1 2 4 5 4 3 2 1 - 4 5 4 har 2 fyror\n\n# 4\n# 3 3 3 3 - 3 3 har 2 treor\n\n# OK N^3-algoritm - enkelt - aha, det r\u00e4cker med att hitta 2 likadana element och olika mellan.\n# F\u00f6r varje x - lista var alla f\u00f6rekomster \u00e4r. g\u00e5 igenom alla och hitta n\u00e4rmaste.\n\nimport collections\n\ndef sol(lst):\n  d = collections.defaultdict(list)\n  for i, x in enumerate(lst):\n    d[x].append(i)\n\n  MIN_SOL = 10**10\n  for x in d:\n    for a, b in zip(d[x], d[x][1:]):\n      MIN_SOL = min(MIN_SOL, b-a+1)\n  if MIN_SOL == 10**10:\n    print(-1)\n  else: print(MIN_SOL)\n\nt = int(input())\nfor _ in range(t):\n  _ = int(input())\n  sol([int(x) for x in input().split()])\n", "t = int(input())\nfor i in range(t):\n\tn = int(input())\n\tmas = list(map(int, input().split()))\n\tans = []\n\tmini = n\n\tfor i in range(n):\n\t\tans.append([mas[i], i])\n\tans.sort()\n\tflag = False\n\tfor i in range(n - 1):\n\t\tif ans[i][0] == ans[i + 1][0]:\n\t\t\tmini = min(ans[i + 1][1] - ans[i][1] + 1, mini)\n\t\t\tflag = True\n\tif not(flag):\n\t\tprint(-1)\n\telse:\n\t\tprint (mini)\n", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\n\nfor testcases in range(t):\n    n=int(input())\n    A=list(map(int,input().split()))\n\n    LIST=[[] for i in range(n+1)]\n\n    for ind,a in enumerate(A):\n        LIST[a].append(ind)\n\n    ANS=n+10\n\n    for i in range(n+1):\n        if len(LIST[i])<2:\n            continue\n        for j in range(1,len(LIST[i])):\n            ANS=min(ANS,LIST[i][j]-LIST[i][j-1])\n\n    if ANS==n+10:\n        print(-1)\n    else:\n        print(ANS+1)\n", "import sys\nT = int(sys.stdin.readline())\nfor i in range(T):\n\tn = int(sys.stdin.readline())\n\tarray = sys.stdin.readline().split(\" \")\n\tlastSeen = [-10**6 for i in range(n + 1)]\n\tbest = 10**6\n\tfor j in range(len(array)):\n\t\tif j - lastSeen[int(array[j])] < best:\n\t\t\tbest = j - lastSeen[int(array[j])]\n\t\tlastSeen[int(array[j])] = j\n\tif best == 10**6:\n\t\tprint(-1)\n\telse:\n\t\tprint(best + 1)", "#!/usr/bin/env python3\nimport math\nimport sys\nsys.setrecursionlimit(10**8)\ninput = sys.stdin.readline\nINF = 10**9\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(item) for item in input().split()]\n    if len(a) == 1:\n        print(-1)\n        continue\n    seen = dict()\n    ret = INF\n    for i, item in enumerate(a):\n        if item not in seen:\n            seen[item] = i\n        else:\n            ret = min(ret, abs(seen[item] - i) + 1)\n            seen[item] = i\n    if ret == INF:\n        print(-1)\n    else:\n        print(ret)", "inf = 10**18\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = {}\n    ans = inf\n    for i in range(n):\n        if a[i] in cnt:\n            ans = min(ans, i - cnt[a[i]] + 1)\n        cnt[a[i]] = i\n    print(ans if ans != inf else -1)\n", "T = int(input())\n\nfor t in range(T):\n\tn = int(input())\n\n\tA = list(map(int, input().split()))\n\n\tif n < 2:\n\t\tprint(-1)\n\n\telif len(set(A)) == n:\n\t\tprint(-1)\n\n\telse:\n\t\tM = {a: [] for a in A}\n\n\t\tfor i in range(n):\n\t\t\tM[A[i]].append(i)\n\n\t\tans = n\n\n\t\tfor x in M:\n\t\t\tif len(M[x]) > 1:\n\t\t\t\tfor i in range(1, len(M[x])):\n\t\t\t\t\tans = min(ans, M[x][i] - M[x][i-1] + 1)\n\n\t\tprint(ans)", "q = int(input())\nfor rew in range(q):\n\tn = int(input())\n\tl = list(map(int,input().split()))\n\tif len(l) == 1:\n\t\tprint(-1)\n\telse:\n\t\tpoz = {}\n\t\tfor i in range(n + 1):\n\t\t\tpoz[i] = []\n\t\tfor i in range(n):\n\t\t\tpoz[l[i]].append(i)\n\t\tspr = [10000000] * (n+1)\n\t\tfor i in range(n+1):\n\t\t\tk = len(poz[i])\n\t\t\tfor j in range(1, k):\n\t\t\t\tspr[i] = min(spr[i], poz[i][j]-poz[i][j-1])\n\t\tif min(spr) == 10000000:\n\t\t\tprint(-1)\n\t\telse:\n\t\t\tprint(min(spr) + 1)\n", "from math import *\nfrom collections import *\nimport sys\nsys.setrecursionlimit(10**9)\nt = int(input())\nfor y in range(t):\n\tn = int(input())\n\tl = list(map(int,input().split()))\n\td = dict()\n\tm = 1e9\n\tfor i in range(n):\n\t\tif l[i] not in d:\n\t\t\td[l[i]] = [i]\n\t\telse:\n\t\t\td[l[i]].append(i)\n\t\t\tm = min(m,i - d[l[i]][-2]+1)\n\tif(m == 1e9):\n\t\tprint(-1)\n\telse:\n\t\tprint(m)\n", "3\n\nimport os\nimport sys\n\n\ndef main():\n    T = read_int()\n    for _ in range(T):\n        N = read_int()\n        A = read_ints()\n        print(solve(N, A))\n\n\ndef solve(N, A):\n    if N <= 1:\n        return -1\n    INF = N + 1\n    best = INF\n    pos = {}\n    for i, a in enumerate(A):\n        if a in pos:\n            best = min(best, i - pos[a] + 1)\n        pos[a] = i\n    if best == INF:\n        return -1\n    return best\n\n\n###############################################################################\n# AUXILIARY FUNCTIONS\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "#    !/usr/bin/env python3\n#    encoding: UTF-8\n#    Last Modified: 13/Nov/19 08:24:06 PM\n\n\nimport sys\n\n\ndef main():\n    from collections import Counter\n    from operator import itemgetter\n\n    for tc in range(int(input())):\n        n = int(input())\n        arr = get_array()\n        if n < 2:\n            print(-1)\n            continue\n        d = {}\n        ans = 10 ** 9\n        for i in range(n):\n            if arr[i] not in d:\n                d[arr[i]] = i\n            else:\n                ans = min(ans, i - d[arr[i]] + 1)\n                d[arr[i]] = i\n        if ans == 10 ** 9:\n            ans = -1\n        print(ans)\n\n\nget_array = lambda: list(map(int, sys.stdin.readline().split()))\n\n\nget_ints = lambda: list(map(int, sys.stdin.readline().split()))\n\n\ninput = lambda: sys.stdin.readline().strip()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter\n\n# inf = open('input.txt', 'r')\n# reader = (map(int, line.split()) for line in inf)\n\n# t, = next(reader)\nt = int(input())\n\nfor _ in range(t):\n#     n, = next(reader)\n#     a = list(next(reader))\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    prev = Counter()\n    mn = n + 1\n    for i, el in enumerate(a):\n        if el in prev:\n            mn = min(mn, i - prev[el] + 1)\n        prev[el] = i\n    print(mn if mn < n + 1 else -1)\n    \n# inf.close()\n", "def main():\n    inf = 10**9\n    T = int(input())\n    Ans = []\n    for _ in range(T):\n        N = int(input())\n        A = list(map(int, input().split()))\n        L = [-inf] * (N+1)\n        ans = inf\n        for i, a in enumerate(A):\n            ans = min(ans, i-L[a])\n            L[a] = i\n        Ans.append(ans+1 if ans < inf else -1)\n    print(\"\\n\".join(map(str, Ans)))\n\nmain()\n", "#import time\nfrom heapq import heappush, heappop\nfrom collections import deque,defaultdict,Counter\nimport itertools\nfrom itertools import permutations,combinations\nimport sys\nimport bisect\nimport string\n#import math\n#import random\ndef I():\n    return int(input())\ndef MI():\n    return map(int,input().split())\ndef LI():\n    return [int(i) for i in input().split()]\ndef LI_():\n    return [int(i)-1 for i in input().split()]\ndef show(*inp,end='\\n'):\n    if show_flg:\n        print(*inp,end=end)\nYN=['Yes','No']\nmo=10**9+7\ninf=float('inf')\n\n#sys.setrecursionlimit(10**6)\ninput=sys.stdin.readline\nshow_flg=False\nshow_flg=True\n\nt=I()\nfor _ in range(t):\n    n=I()\n    a=LI()\n    p=[-1]*(1+n)\n    ans=inf\n    for i in range(n):\n        if p[a[i]]!=-1:\n            ans=min(ans,i-p[a[i]]+1)\n        p[a[i]]=i\n    if ans==inf:\n        ans=-1\n    print(ans)\n", "from collections import defaultdict\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n\n    a = list(map(int, input().split()))\n    pos = defaultdict(list)\n    for i, v in enumerate(a):\n        pos[v].append(i)\n\n    ans = 10000000\n    for p in pos.values():\n        if len(p) <= 1:\n            continue\n\n        for i in range(len(p)-1):\n            ans = min(p[i+1]-p[i]+1, ans)\n\n\n    if ans==10000000:\n        print(-1)\n    else:\n        print(ans)", "\"\"\"\nNTC here\n\"\"\"\nfrom sys import stdin\n\ndef iin(): return int(stdin.readline())\n \n \ndef lin(): return list(map(int, stdin.readline().split()))\n\n\n# range = xrange\n# input = raw_input\n\n\ndef main():\n    t=iin()\n    while t:\n        t-=1\n        n=iin()\n        a=lin()\n        d={}\n        for i in range(n):\n            try:\n                d[a[i]].append(i)\n            except:\n                d[a[i]]=[i]\n        ans=-1\n        for i in d:\n            l=len(d[i])\n            for j in range(l-1):\n                if ans==-1:\n                    ans=d[i][j+1]-d[i][j]+1\n                else:\n                    ans=min(d[i][j+1]-d[i][j]+1,ans)\n        print(ans)\n\n\n\n\n\n\n\n\n\n\n\nmain()\n# try:\n#     main()\n# except Exception as e: print(e)\n", "from sys import stdin\ndef rl():\n    return [int(w) for w in stdin.readline().split()]\n\nt, = rl()\nfor _ in range(t):\n    n, = rl()\n    a = rl()\n    d = {}\n    r = -1\n    for i, x in enumerate(a):\n        if x in d and (r < 0 or r > i - d[x] + 1):\n            r = i - d[x] + 1\n        d[x] = i\n    print(r)\n", "for _ in range(int(input())):\n\tlast = {}\n\n\tn = int(input())\n\n\ta = list(map(int, input().split()))\n\n\tnexts = [-1] * n\n\n\tfor i in range(n - 1, -1, -1):\n\t\tif a[i] in last:\n\t\t\tnexts[i] = last[a[i]]\n\n\t\tlast[a[i]] = i\n\n\tb = 10 ** 6\n\n\tfor i in range(n):\n\t\tif nexts[i] != -1:\n\t\t\tb = min(b, nexts[i] - i + 1)\n\n\tprint(-1 if b == 10 ** 6 else b)", "t = int(input())\ndef check(arr, n):\n    hehe = [0]*n\n    for i in range (n):\n        j = arr[i] - 1\n        if hehe[j] == 1:\n            return False\n        hehe[j] += 1\n    return True\nfor i in range (t):\n    n = int(input())\n    arr = list(map(int,input().split()))\n    initial = [-1]*n\n    diff = [n]*n\n    if check(arr, n):\n        print(-1)\n    else:\n        for j in range (n):\n            l = arr[j] - 1\n            k = initial[l]\n            initial[l] = j\n            if k == -1:\n                continue\n            differ = j - k + 1\n            if differ < diff[l]:\n                diff[l] = differ\n        print(min(diff))", "from sys import stdin, stdout  \n\nimport collections\ndef main():\n    T = int(input())\n    for _ in range(T):\n        n = int(input())\n        a = [int(x) for x in input().split(' ')]\n        prev_idx = {}\n        min_dist = float('inf')\n        for i, v in enumerate(a):\n            if v in prev_idx:\n                min_dist = min(min_dist, i - prev_idx[v] + 1)\n            prev_idx[v] = i\n        print(-1 if min_dist == float('inf') else min_dist)\n\ndef __starting_point():\n    main()\n__starting_point()", "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    seen = [-1] * (n+1)\n    ans = n*n\n    for i, v in enumerate(map(int, input().split())):\n        if seen[v] != -1:\n            ans = min(ans, i - seen[v] + 1)\n        seen[v] = i\n    print(ans if ans != n*n else -1)\n"]