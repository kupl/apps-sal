["s = input()\n\nif '.' not in s:\n    s = s + '.'\n\np, q = s.strip('0').split('.')\nif not p:\n    t = q.strip('0')\n    e = len(t) - len(q) - 1\n    l = t[0]\n    r = t[1:]\nelse:\n    e = len(p) - 1\n    l = p[0]\n    r = (p[1:] + q).rstrip('0')\n\nif l:\n    print(l, end='')\nelse:\n    print(0, end='')\n\nif r:\n    print('.' + r, end='')\n\nif e:\n    print('E%d' % e)\nelse:\n    print()\n", "s = input()\nif '.' not in s:\n    s = s+'.'\ns = '0' + s + '0'\ndp = s.find('.')\npre = s[0:dp]\npost = s[dp + 1:]\ni = 0\nwhile i<len(pre)-1 and pre[i] == '0':\n    i += 1\npre = pre[i:]\ni = len(post) - 1\nwhile i>0 and post[i] == '0':\n    i -= 1\npost = post[:i+1]\nb = 0\nif pre == '0':\n    b -= len(post)\n    pre = post\n    post = '0'\n    i = 0\n    while i<len(pre)-1 and pre[i] == '0':\n        i += 1\n    pre = pre[i:]\nb += len(pre)-1\npost = pre[1:] + post\npre = pre[0]\ni = len(post) - 1\nwhile i>0 and post[i] == '0':\n    i -= 1\npost = post[:i+1]\nif post == '0' or post == '':\n    print(pre, end = '')\nelse:\n    print(pre+'.'+post, end = '')\nif b != 0:\n    print('E'+str(b), end = '')\nprint('')\n", "from sys import stdin,stdout\n\n\nmot=stdin.readline()\nvirgule=None\nfor i in range(len(mot)):\n        if mot[i]==\".\":\n                virgule=i\nif virgule!=None:\n        mot=mot.replace(\".\",\"\")\ninf=0\nsup=len(mot)-2\n\nwhile mot[inf]==\"0\" and sup>inf:\n        inf+=1\n        \nif virgule==None:\n        puissance=sup-inf\nelse:\n        puissance=virgule-inf-1\n\nwhile mot[sup]==\"0\" and sup>inf:\n        sup-=1\n\n                \nnotation=mot[inf]\n\nif inf==sup:\n        notation=mot[inf]\nelse:\n        notation=mot[inf]+\".\"+mot[inf+1:sup+1]\n\nif puissance!=0:\n        notation+=\"E\"+str(puissance)\n           \nstdout.write(notation)\n\n\n\n", "# You lost the game.\nx = str(input())\nn = len(x)\nd = 0\nwhile d < n and x[d] == \"0\":\n    d += 1\nf = n-1\nwhile f >= 0 and x[f] == \"0\":\n    f -= 1\nf += 1\ne = x.count(\".\")\nif x.count(\"0\") >= n-1 and e:\n    print(0)\nelif x[d] == \".\":\n    i = d+1\n    while x[i] == \"0\":\n        i += 1\n    if f == i+1:\n        print(x[i]+\"E\"+str(d-i))\n    else:\n        print(x[i]+\".\"+x[i+1:f]+\"E\"+str(d-i))\nelif x[f-1] == \".\":\n    i = f-2\n    while x[i] == \"0\":\n        i -= 1\n    if d+1 == i+1:\n        if f-d-2:\n            print(x[d]+\"E\"+str(f-d-2))\n        else:\n            print(x[d])\n    else:\n        print(x[d]+\".\"+x[d+1:i+1]+\"E\"+str(f-d-2))\nelif e == 0:\n    if d == f-1:\n        if n-d-1:\n            print(x[d]+\"E\"+str(n-d-1))\n        else:\n            print(x[d])\n    else:\n        print(x[d]+\".\"+x[d+1:f]+\"E\"+str(n-d-1))\nelif x.index(\".\")-d == 1:\n    print(x[d:f])\nelse:\n    e = x.index(\".\")\n    print(x[d]+\".\"+x[d+1:e]+x[e+1:f]+\"E\"+str(e-d-1))\n    \n", "string_list = input().split(sep='.')\ninteger = string_list[0].lstrip('0')\nif len(string_list) == 1:\n    fractional = ''\nelse:\n    fractional = string_list[1].rstrip('0')\nif integer:\n    if fractional:\n        a = \"{}.{}{}\".format(integer[0], integer[1:], fractional)\n    else:\n        a = \"{}.{}\".format(integer[0], integer[1:].rstrip('0'))\n    b = len(integer) - 1\n    if a[-1] == '.':\n        a = a[:-1]\n    if b > 0:\n        print(\"E\".join((a, str(b))))\n    else:\n        print(a)\nelse:\n    old_len = len(fractional)\n    fractional = fractional.lstrip('0')\n    zero_count = old_len - len(fractional)\n    a = \"{}.{}\".format(fractional[0], fractional[1:])\n    b = -zero_count - 1\n    if a[-1] == '.':\n        a = a[:-1]\n    print(\"E\".join((a, str(b))))\n", "import sys, math\ns=input()\nh=0\nwhile h<len(s) and s[h]=='0':\n    h+=1\ns=s[h:]\nif '.' in s and s[-1]=='0':\n    g=1\n    while g<=len(s) and s[-g]=='0':\n        g+=1\n    s=s[:(-g+1)]\nif len(s)==0:\n    print(0)\n    return\nidx=-1\nfor i in range(len(s)):\n    if s[i]=='.':\n        idx=i\n        break\nif idx==-1:\n    idx=len(s)\nelse:\n    if s[0]=='.':\n        h=1\n        while h<len(s) and s[h]=='0':\n            idx-=1\n            h+=1\nif 1:\n    mul = idx - 1\n    \n    new=''\n    for i in range(len(s)):\n        if s[i]!='.':\n            new+=s[i]\n    s=new\n    if len(s) > 0 and s[-1]=='0':\n        h=2\n        while h<=len(s) and s[-h]=='0':\n            h+=1\n        s=s[:(-h+1)]\n    if len(s) > 0 and s[0]=='0':\n        h=1\n        while h<len(s) and s[h]=='0':\n            h+=1\n        s=s[h:]\n    mul=str(mul)\n    if len(s)==0:\n        print(0)\n        return\n    elif len(s)==1:\n        print(s[0],end='')\n        if mul != '0':\n            print('E'+mul)\n        return\n    else:\n        print(s[0]+'.'+s[1:],end='')\n        if mul != '0':\n            print('E'+mul)\n        \n        \n            \n    \n            \n    \n        \n", "s = str(input())\n\n\nleng = len(s)\nind = s.find('.')\n\nif ind == -1:\n    i = 0\n    while s[i]=='0':\n        i+=1\n    s = s[i:]\n    if len(s)!=1:\n        print(s[0:1]+(('.'+s.strip('0')[1:]) if len(s.strip('0')) > 1 else '')+'E'+str(len(s)-1))\n    else:\n        print(s[0:1]+(('.'+s.strip('0')[1:]) if len(s.strip('0')) > 1 else ''))\nelse:\n    s = s.strip('0')\n    ind = s.find('.')\n    i = 0\n    while s[i] == '0' or s[i]=='.':\n        i += 1\n    ind = s.find('.')\n    if i >= ind:\n        b = ind - i\n    else:\n        b = ind - 1\n    ns = s[0:ind]+s[ind+1:]\n    ns = ns.strip('0')\n    if ind != 1:\n        print(ns[0:1]+(('.'+ns[1:]) if len(ns) > 1 else '')+'E'+str(b))\n    else:\n        print(ns[0:1]+(('.'+ns[1:]) if len(ns) > 1 else ''))\n\n\n", "s = input()\nif \".\" not in s:\n    s += \".\"\n\nleft,right = s.strip(\"0\").split(\".\")\n\nif not left:\n    t = right.strip(\"0\")\n    e = len(t) - len(right) - 1\n    l = t[0]\n    r = t[1:]\nelse:\n    e = len(left)-1\n    l = left[0]\n    r = (left[1:]+right).rstrip(\"0\")\n\nif l:\n    print(l,end='')\nelse:\n    print(0,end='')\n\nif r:\n    print(\".\"+r,end='')\n\nif e:\n    print(\"E%d\"%e)", "import re\n\na = input()\nif not '.' in a: a += '.'\n\na, b = a.strip('0').split('.')\n\nst = 0\nif len(a) > 1:\n    st = len(a) - 1\n    b = (a[1:] + b).rstrip('0')\n    a = a[0]\nelif len(a) == 0:\n    r = b.strip('0')\n    st = - (len(b) - len(r) + 1)\n    a = r[0]\n    b = r[1:]\n\nif a: print (a, end = '')\nif b: print ('.' + b, end = '')\nif st: print('E' + str(st))\n", "string_list = input().split(sep='.')\ninteger = string_list[0].lstrip('0')\nif len(string_list) == 1:\n    fractional = ''\nelse:\n    fractional = string_list[1].rstrip('0')\nif integer:\n    if fractional:\n        a = \"{}.{}{}\".format(integer[0], integer[1:], fractional)\n    else:\n        a = \"{}.{}\".format(integer[0], integer[1:].rstrip('0'))\n    d = len(integer) - 1\n    if a[-1] == '.':\n        a = a[:-1]\n    if d > 0:\n        print(\"E\".join((a, str(d))))\n    else:\n        print(a)\nelse:\n    old_len = len(fractional)\n    fractional = fractional.lstrip('0')\n    zero_count = old_len - len(fractional)\n    a = \"{}.{}\".format(fractional[0], fractional[1:])\n    d = -zero_count - 1\n    if a[-1] == '.':\n        a = a[:-1]\n    print(\"E\".join((a, str(d))))\n", "def task(n):\n    l,r = n.partition('.')[::2]\n    l = l.lstrip('0')\n\n    exp = None\n    if l:\n        exp = len(l) - 1\n        r = l[1:]+r\n        l = l[0]\n    else:\n        strippedr = r.lstrip('0')\n        exp = len(strippedr) - len(r) - 1\n        l = strippedr[0]\n        r = strippedr[1:]\n    r = r.rstrip('0')\n    return l + (('.%s' % r) if r else '') + (('E%d' % exp) if exp else '')\n\nn = [input()]\n#n = ['16', '01.23400', '.100', '100.']\nfor t in n:\n    print(task(t))", "s = input()\nif not '.' in s: s += '.'\na,b = s.strip('0').split('.')\nif len(a) > 0:\n  b = (a[1:] + b).rstrip('0')\n  le = len(a)-1\n  a = a[0]\nelse:\n  le = len(b.strip('0')) - len(b) - 1\n  b = b.strip('0').rstrip('0')\n  a = b[0]\n  b = b[1:]\n\nprint(a,end='')\nif len(b): print('.' + b,end='')\nif le : print('E'+str(le))\n", "s = input()\nif not '.' in s: s += '.'\na,b = s.strip('0').split('.')\nif len(a) > 0:\n  b = (a[1:] + b).rstrip('0')\n  le = len(a)-1\n  a = a[0]\nelse:\n  le = len(b.strip('0')) - len(b) - 1\n  b = b.strip('0').rstrip('0')\n  a = b[0]\n  b = b[1:]\n\nprint(a,end='')\nif len(b): print('.' + b,end='')\nif le : print('E'+str(le))\n\n\t  \t  \t\t\t  \t\t\t\t\t   \t  \t \t\t", "3\n\ndef main():\n\ts = input()\n\n\thas_dot = False\n\tzero = True\n\tfirst_non_zero = 0\n\tlast_non_zero = 0\n\tsep = len( s )\n\n\tfor i , c in enumerate( s ):\n\t\tif c != \"0\":\n\t\t\tif c == \".\":\n\t\t\t\tsep = i\n\t\t\t\thas_dot = True\n\t\t\telif zero:\n\t\t\t\tzero = False\n\t\t\t\tfirst_non_zero = i\n\t\t\t\tlast_non_zero = i\n\t\t\telse:\n\t\t\t\tlast_non_zero = i\n\n\n\tb = sep - first_non_zero\n\tif b > 0:\n\t\tb -= 1\n\ta = s[ first_non_zero : last_non_zero + 1 ]\n\ta = \"\".join( a.split(\".\") ) \n\tif len( a ) > 1:\n\t\ta = ( a[ 0 ] + \".\" + a[ 1: ] )\n\n\tprint( ( a if not zero else \"0\" ) + ( ( \"E\" + str( b ) ) if b != 0 else \"\" ) ) \n\ndef __starting_point():\n\tmain()\n__starting_point()", "x = input()\n\na = 0;\nb = 0;\n\nsc = x.lstrip('0')\nif '.' not in sc:\n\tsc += '.'\n\nif sc[0] == '.':\n\tsc = '0' + sc\nif sc[-1] == '.':\n\tsc = sc + '0'\n\nif sc[0] == '0':\n\tsc = sc.replace('.', '')\n\ti = 0;\n\twhile sc[i] == '0':\n\t\ti += 1\n\t\tb -= 1\n\n\tsc = sc[i] + '.' + sc[i + 1:]\n\nif ('.' not in sc) and (len(sc) > 1):\n\tsc = sc[0] + '.' + sc[1:]\n\tb += 1\n\nb += ( sc.find('.') - 1)\n\nsc = sc.replace('.', '')\na = sc[0] + '.' + sc[1:]\n\na = a.strip('0')\n\nif a[-1] == '.':\n\ta = a[:-1]\n\n\nsc = a + ( '' if (b == 0) else ('E'+str(b)) )\nprint(sc)\n", "s = input()\nif '.' not in s:\n    s = s + '.'\np, q = s.strip('0').split('.')\nif not p:\n    t = q.strip('0')\n    e = len(t) - len(q) - 1\n    l = t[0]\n    r = t[1:]\nelse:\n    e = len(p) - 1\n    l = p[0]\n    r = (p[1:] + q).rstrip('0')\nif l:\n    print(l, end = '')\nelse:\n    print(0, end = '')\nif r:\n    print('.' + r, end = '')\nif e:\n    print('E%d' % e, end = '')\n\n  \t \t   \t\t\t      \t \t\t\t\t   \t \t\t\t", "s = input()\nif '.' not in s:\n    s += '.'\ns = s.strip('0')\na,b = s.split('.')\nif len(a):\n    b = a[1:] + b\n    b = b.rstrip('0')\n    l = len(a) - 1\n    a = a[0]\nelse:\n    l = len(b.strip('0')) - len(b) - 1\n    b = b.strip('0').rstrip('0')\n    a = b[0]\n    b = b[1:]\nprint(a,end='')\nif len(b):\n    print('.'+b,end='')\nif l:\n    print('E'+str(l))\n\n\t\t     \t \t\t\t \t\t\t\t \t \t\t\t  \t\t\t\t \t", "s = input()\nif '.' not in s:\n    s = s + '.'\np, q = s.strip('0').split('.')\nif not p:\n    t = q.strip('0')\n    e = len(t) - len(q) - 1\n    l = t[0]\n    r = t[1:]\nelse:\n    e = len(p) - 1\n    l = p[0]\n    r = (p[1:] + q).rstrip('0')\nif l:\n    print(l, end = '')\nelse:\n    print(0, end = '')\nif r:\n    print('.' + r, end = '')\nif e:\n    print('E%d' % e, end = '')", "S=input()\nbeg = 0\nend = len(S)\n\nwhile beg < end and S[beg] == '0':\n    beg += 1\n\nif '.' in S:\n    while beg < end and S[end-1] == '0':\n        end -= 1\n\n    if beg < end and S[end-1] == '.':\n        end -= 1\n\nif '.' in S:\n    i=S.index('.')\n\nif beg == end:\n    print('0')\nelif '.' in S and i < end:\n    if i == beg and end-beg == 2:\n        print(\"%sE-1\" % S[beg+1])\n    elif i == beg+1:\n        print(S[beg:end])\n    elif i > beg+1:\n        print(\"%s.%s%sE%d\" % (S[beg], S[beg+1:i], S[i+1:end], i-beg-1))\n    else:\n        c = -1\n        beg += 1\n        while beg < end and S[beg] == '0':\n            beg += 1\n            c -= 1\n\n        print(\"%s%s%sE%d\" % (S[beg], '.' if end-beg > 1 else '', S[beg+1:end], c))\nelif end-beg == 1:\n    print(S[beg])\nelse:\n    l=end-beg\n    while beg < end and S[end-1] == '0':\n        end -= 1\n    print(\"%s%s%sE%d\" % (S[beg], '.' if end-beg > 1 else '', S[beg+1:end], l-1))\n\n\n", "x = input()\npointindex = x.find('.')\nif pointindex == -1:\n    y = x.lstrip('0')\n    print(y[0], end = '')\n    e = len(y)-1\n    z = y[1:].rstrip('0')\n    if z != '':\n        print('.' + z, end = '')\n    if e:\n        print('E' + str(e))\nelif (x[:pointindex].lstrip('0') == ''):\n    z = x[pointindex+1:].rstrip('0')\n    for i in range(len(z)):\n        if z[i] == '0':\n            continue\n        else:\n            print(z[i], end = '')\n            e = -(i+1)\n            y = z[i+1:].rstrip('0')\n            if y!='':\n                print('.' + y + 'E' + str(e))\n            else:\n                print('E' + str(e))\n            break\n            \nelse:\n    y = x[:pointindex].lstrip('0')\n    print(y[0], end = '')\n    e = len(y)-1\n    z = (y[1:]+x[pointindex+1:]).rstrip('0')\n    if z!='':\n        print('.' + z, end = '')\n    if e:\n        print('E' + str(e))\n", "s = input()\nif not ('.' in s): s = s + '.'\na, b = s.strip('0').split('.')\nif not a:\n    newb = b.strip('0')\n    poc, l, r = len(newb) - len(b) - 1, newb[0], newb[1:]\nelse:\n    poc, l, r = len(a) - 1, a[0], (a[1:] + b).rstrip('0')\nif l:\n    print(l, end = '')\nelse:\n    print(0, end = '')\nif r: print('.' + r, end = '')\nif poc: print('E%d' % poc, end = '')\n", "s = input()\n\nif not '.' in s:\n\ts = s + '.'\n\ni = 0; zer = 0; step = 0\nwhile s[i] == '0':\n\tzer += 1\n\ti += 1\ns = s[zer:]\nzer = 0\n\n#print(s)\n\ni = len(s) - 1\nwhile s[i] == '0':\n\tzer += 1\n\ti -= 1\nif zer > 0: s = s[:-zer]\n'''if not '.' in s:\n\tstep = zer\n\ts = s + '.'''\n\n\n#print(s, step)\n\ni = s.index('.')\n\nif len(s[i:]) > 1 and i == 0:\n\ti += 1\n\tstep -= 1\n\twhile s[i] == '0':\n\t\ti += 1\n\t\tstep -= 1\nelif i == len(s) - 1:\n\ti -= 1\n\twhile s[i] == '0':\n\t\ti -= 1\n\t\tstep += 1\t\t\n\ni = s.index('.')\n#print(s, step, i)\n\nif len(s) == 2 and step == 0:\n\tprint(s[0])\n\t#print('case 1')\nelif len(s[:-step - 1]) == 1 and step > 0:\n\tprint(s[0] + 'E' + str(step))\n\t#print('case 2')\nelif len(s[:i]) == 1 and step == 0:\n\tprint(s[0] + '.' + s[i + 1:])\n\t#print('case 3')\nelif step == 0:\n\tprint(s[0] + '.' + s[1:i] + s[i+1:] + 'E' + str(len(s[1:i])))  \n\t#print('case 4')\nelif step > 0:\n\tprint(s[0] + '.' + s[1:i - step] + s[i+1:] + 'E' + str(len(s[1:i - step]) + step))\n\t#print('case 5')\nelif step < 0 and len(s[-step:]) == 1:\n\tprint(s[-step] + s[-step + 1:] + 'E' + str(step))\n\t#print('case 6')\nelif step < 0:\n\tprint(s[-step] + '.' + s[-step + 1:] + 'E' + str(step))\n\t#print('case 7')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def main():\n\ts = input()\n\tprint(solver(s))\n\ndef solver(s):\n\ts = s[firstNonLeadingZero(s):]\n\tdotIndex = s.find('.')\n\tresult = None\n\tif dotIndex == -1:\n\t\ts += '.'\n\t\tdotIndex = len(s) - 1\n\t\t# if len(s) == 1:\n\t\t# \treturn s\n\t\t# elif \n\t\t# result = '{}.{}E{}'.format(s[0], s[1:], str(len(s) - 1))\n\t\t# return result\n\n\ts = s[:firstTrailingZero(s)]\n\tif dotIndex == 0:\n\t\tfirstIndex = firstNonZeroDigit(s)\n\t\tif firstIndex == -1:\n\t\t\treturn '0'\n\t\telse:\n\t\t\tif firstIndex == len(s) - 1:\n\t\t\t\tresult ='{}E{}'.format(s[firstIndex], -firstIndex)\n\t\t\telse:\n\t\t\t\tresult ='{}.{}E{}'.format(s[firstIndex], s[firstIndex + 1:], -firstIndex)\n\telif dotIndex == 1:\n\t\tif len(s) == 2:\n\t\t\treturn s[0]\n\t\telse:\n\t\t\treturn s\n\telse:\n\t\tdigits = s[:dotIndex] + s[dotIndex + 1:]\n\t\tdigits = digits[:firstTrailingZero(digits)]\n\t\tif digits[1:] == '0' * (len(digits) - 1):\n\t\t\tresult ='{}E{}'.format(digits[0], dotIndex - 1)\n\t\telse:\n\t\t\tresult ='{}.{}E{}'.format(digits[0], digits[1:], dotIndex - 1)\n\treturn result\n\ndef firstNonZeroDigit(s):\n\tfor i in range(len(s)):\n\t\tif s[i] not in ['.', '0']:\n\t\t\treturn i\n\treturn -1\n\ndef firstTrailingZero(s):\n\tindex = len(s) - 1\n\twhile s[index] == '0':\n\t\tindex -= 1\n\treturn index + 1\n\ndef firstNonLeadingZero(s):\n\tindex = 0\n\twhile s[index] == '0':\n\t\tindex += 1\n\treturn index\n\n# print(solver(\"0016\"))\n# print(solver(\"001600\"))\n# print(solver(\"001600.\"))\n# print(solver(\"0123.230\"))\n# print(solver(\"0123.230\"))\n\n# print(solver(\"01.23400\"))\n# print(solver(\".100\"))\n#print(solver(\"0.0012\"))\n#print(solver(\"0001100\"))\nmain()", "def out(M, p):   \n    if p==0:\n        return M\n    else:\n        out='{0}E{1}'.format(M, p)\n        return out\nres=0\na=0\ninp=list(str(input()))\nfor it in '123456789':\n     if (it in inp)==True:\n          res+=1\nif res==0:\n     res=-1\n     print('0')\nelse: res=0     \nwhile res==0:\n          res-=1\n          i=0\n          k=0\n          while inp[k]=='0':     \n                  k+=1\n          inp=inp[k:]          \n\n          if inp[0]=='.':\n                  inp.insert(0, '0')\n          if inp[len(inp)-1]=='.':\n                  inp.remove(inp[len(inp)-1])   \n\n          if ('.' in inp)==True:\n              while True:\n                  if inp[i]!='.':\n                      i+=1\n                  else: break\n\n              inp.reverse()\n              k=0\n              while inp[k]=='0':\n                  k+=1\n              inp=inp[k:]\n              if inp[0]=='.':\n                  inp.remove('.')\n              inp.reverse()\n              res-=1\n\n              if ('.' in inp)==False:\n                  i=len(inp)\n                  inp.insert(1, '.')\n                  inp.reverse()\n                  k=0\n                  while inp[k]=='0':\n                        k+=1\n                  inp=inp[k:]\n                  while inp[0]=='.':\n                        inp.remove('.')\n                  inp.reverse()                                \n                  inp=''.join(inp)\n                  a-=1\n                  print(out(inp, i-1))\n              if ('.' in inp)==True and len(inp[:i])==1:\n                  i=0     \n                  if inp[0]=='0':\n                      inp.remove('.')\n                      k=0\n                      while inp[i]=='0':\n                          i+=1\n                      inp=inp[i:]    \n                      inp.insert(1, '.')\n                  if inp[len(inp)-1]=='.':\n                      inp.remove('.')\n                  a=-1      \n                  print(out(''.join(inp), -i))\n              if ('.' in inp)==True and len(inp[:i])>1 and a==0:\n                  inp.remove('.')\n                  inp.insert(1, '.')\n                  inp=''.join(inp)\n                  print(out(inp, i-1))\n           \n\n          else:\n              i=len(inp)\n              inp.insert(1, '.')\n              inp.reverse()\n              k=0\n              while inp[k]=='0':\n                  k+=1\n              inp=inp[k:]\n              while inp[0]=='.':\n                        inp.remove('.')\n              inp.reverse()                                \n              inp=''.join(inp)\n              print(out(inp, i-1))"]