["def get_substr_ends(haystack, needle):\n\tans = [-1]\n\tindex = 0\n\tfor char in needle:\n\t\twhile index < len(haystack) and char != haystack[index]:\n\t\t\tindex += 1\n\t\tans.append(index)\n\t\tif index < len(haystack):\n\t\t\tindex += 1\n\treturn ans\n\nhaystack = input()\nneedle = input()\n\npref = get_substr_ends(haystack, needle)\nsuff = get_substr_ends(haystack[::-1], needle[::-1])\n\npref_index = 0\nsuff_len = 0\nwhile suff_len < len(suff) and suff[suff_len] < len(haystack):\n\tsuff_len += 1\n\nsuff_len -= 1\nbest_str = needle[len(needle) - suff_len:]\n\nif len(best_str) == len(needle):\n\tprint(needle)\n\treturn\n\nfor pref_len in range(1, len(pref)):\n\twhile suff_len >= 0 and suff[suff_len] + pref[pref_len] + 2 > len(haystack):\n\t\tsuff_len -= 1\n\tans = pref_len + suff_len\n\tif ans > len(best_str) and suff_len >= 0:\n\t\tbest_str = needle[:pref_len] + needle[len(needle) - suff_len:]\n\nprint(best_str if best_str else '-')\n", "a = input()\nb = input()\n\nx = []\n\nj = 0\nfor i in range(len(a)):\n\tif (j >= len(b)):\n\t\tbreak\n\tif (a[i] == b[j]):\n\t\tx.append(i)\n\t\tj += 1\n\ny = []\nj = len(b) - 1\nfor i in range(len(a) - 1, -1, -1):\n\tif (j < 0):\n\t\tbreak\n\tif (a[i] == b[j]):\n\t\ty.append(len(a) - i - 1)\n\t\tj -= 1\n\nlb, rb = 0, 0\n\nans = len(b)\nif (ans > len(b) - len(x)):\n\tans = len(b) - len(x)\n\tlb = len(x)\nif (ans > len(b) - len(y)):\n\tans = len(b) - len(y)\n\tlb = 0\n\trb = len(y)\n\n#ans = min(len(b) - len(x), len(b) - len(y))\n\nj = len(y) - 1\n\n\nfor i in range(len(x)):\n\tif (i + j + 2 > len(b)):\n\t\tj -= 1\n\twhile (j >= 0 and x[i] + y[j] + 2 > len(a)):\n\t\tj -= 1\n\tif (j < 0):\n\t\tbreak\n\tif (ans > len(b) - i - j - 2):\n\t\tans = len(b) - i - j - 2\n\t\tlb = i + 1\n\t\trb = j + 1\n\t#ans = min(ans, len(b) - i - j - 2)\n\n\nif (ans == len(b)):\n\tprint('-')\nelse:\n\tfor i in range(lb):\n\t\tprint(b[i], end = '')\n\tfor i in range(len(b) - rb, len(b)):\n\t\tprint(b[i], end = '')\n\n", "a = input()\nb = input()\np = [None] * (len(b) + 1)\ns = [None] * (len(b) + 1)\nj = 0\np[0] = -1\nfor i in range(len(b)):\n    while j < len(a) and a[j] != b[i]:\n        j += 1\n    if j >= len(a):\n        break\n    else:\n        p[i + 1] = j\n        j += 1\nj = len(a) - 1\ns[-1] = len(b)\nfor i in range(len(b) - 1, -1, -1):\n    while j >= 0 and a[j] != b[i]:\n        j -= 1\n    if j < 0:\n        break\n    else:\n        s[i] = j\n        j -= 1\nans = \"\"\nfor i in range(len(b) + 1):\n    if p[i] == None:\n        break\n    else:\n        l = i - 1\n        r = len(b)\n        while l + 1 < r:\n            mid = (l + r) // 2\n            if s[mid] != None and p[i] < s[mid]:\n                r = mid\n            else:\n                l = mid\n        if len(ans) < i + len(b) - r:\n            ans = b[:i] + b[r:]\nif ans == \"\":\n    print(\"-\")\nelse:\n    print(ans)", "import math \n\ndef prefixIds(a, b):\n\tprefSubsId = [math.inf] * len(b)\n\n\t# print(a)\n\t# print(b)\n\n\tbId = 0\n\taId = 0\n\n\twhile aId < len(a):\n\t\tif bId == len(b):\n\t\t\tbreak\n\n\t\tif a[aId] == b[bId]:\n\t\t\tprefSubsId[bId] = aId + 1\n\t\t\tbId += 1\n\t\t\taId += 1\n\t\telse:\n\t\t\taId += 1\n\n\treturn prefSubsId\n\na = input()\nb = input()\n\n# print(a)\n# print(b)\n\nn = len(b)\n\nprefLens = prefixIds(a, b)\nsuffLens = prefixIds(a[::-1], b[::-1])[::-1]\n\n# for i in range(n):\n# \tif suffLens[i] != math.inf:\n# \t\tsuffLens[i] = len(a) - suffLens[i]\n\n# print(*prefLens, sep='\\t')\n# print(*suffLens, sep='\\t')\n\nprefLen = 0\nsuffLen = 0\n\nminCutLen = n\nlBorder = -1\nrBorder = n\n\nwhile suffLen < n and suffLens[suffLen] == math.inf:\n\tsuffLen += 1\n\ncurCutLen = suffLen\n# print(curCutLen)\nif curCutLen < minCutLen:\n\tminCutLen = curCutLen\n\trBorder = suffLen\n\nwhile prefLen < suffLen and prefLens[prefLen] != math.inf:\n\twhile suffLen < n and prefLens[prefLen] + suffLens[suffLen] > len(a):\n\t\t# print(suffLen)\n\t\tsuffLen += 1\n\t# print(prefLen)\n\t# print(suffLen)\n\tcurCutLen = suffLen - prefLen - 1\n\t# print(curCutLen)\n\tif curCutLen < minCutLen:\n\t\tminCutLen = curCutLen\n\t\tlBorder = prefLen\n\t\trBorder = suffLen\n\tprefLen += 1\n\t# print(prefLens[prefLen])\n\t# print(suffLens[suffLen])\n# \t# print()\n\n# print(\"pref, suff\")\n# print(prefLen)\n# print(suffLen)\n\n# print(minCutLen)\n# print(n)\n# print(lBorder)\n# print(rBorder)\n\nif minCutLen == n:\n\tprint('-')\nelif minCutLen == 0:\n\tprint(b)\nelse:\n\tprint(b[:lBorder + 1] + b[rBorder:])\n\n# print(maxPrefLen)\n# print(maxSuffLen)\n", "a = input()\nb = input()\n\nprefix = [-1] * len(b)\npostfix = [-1] * len(b)\n\nprefix[0] = a.find(b[0])\npostfix[len(b) - 1] = a.rfind(b[len(b) - 1])\n\nfor i in range(1, len(b)):\n    prefix[i] = a.find(b[i], prefix[i - 1] + 1)\n    if prefix[i] == -1:\n        break\n\nfor i in range(len(b) - 2, -1, -1):\n    postfix[i] = a.rfind(b[i], 0, postfix[i+1])\n    if postfix[i] == -1:\n        break\n\nbest_left = -1\nbest_right = len(b)\n\nleft = -1\nwhile left + 1 < len(b) and prefix[left + 1] != -1:\n    left += 1\n\nif left > -1:\n    best_left = left\n    best_right = len(b)\n\nright = len(b)\nwhile right - 1 >= 0 and postfix[right - 1] != -1:\n    right -= 1\n\nif right < len(b) and right + 1 < best_right - best_left:\n    best_left = -1\n    best_right = right\n\nleft = 0\nright = len(b)\n\nwhile left < right and postfix[right - 1] != -1 and postfix[right - 1] > prefix[left]:\n    right -= 1\n\nwhile prefix[left] != -1 and left < right < len(b):\n    while right < len(b) and postfix[right] <= prefix[left]:\n        right += 1\n\n    if right >= len(b):\n        break\n\n    if right - left < best_right - best_left:\n        best_left = left\n        best_right = right\n\n    left += 1\n\n    if left == right:\n        right += 1\n\nres = b[:best_left + 1] + b[best_right:]\nif res == \"\":\n    print(\"-\")\nelse:\n    print(res)\n", "a, b = input(), input()\nn = len(b)\ndef f(a, b):\n    i, t = 0, [0]\n    for q in a:\n        if i < n and q == b[i]: i += 1\n        t.append(i)\n    return t\nu, v = f(a, b), f(a[::-1], b[::-1])[::-1]\nt = [x + y for x, y in zip(u, v)]\ni = t.index(max(t))\nx, y = u[i], v[i]\ns = b[:x] + b[max(x, n - y):]\nprint(s if s else '-')", "#import sys\n#sys.stdin = open('in', 'r')\n#n = int(input())\n#a = [int(x) for x in input().split()]\n#n,m = map(int, input().split())\n\ns1 = input()\ns2 = input()\nl1 = len(s1)\nl2 = len(s2)\n\ndl = {}\ndr = {}\n\ni1 = 0\ni2 = 0\n\nwhile i1 < l1 and i2 < l2:\n    while i1 < l1 and s1[i1] != s2[i2]:\n        i1 += 1\n    if i1 < l1:\n        dl[i2] = i1\n        i2 += 1\n        i1 += 1\n\nlmax = i2\nif lmax == l2:\n    print(s2)\nelse:\n    i1 = l1 - 1\n    i2 = l2 - 1\n    while i1 >= 0 and i2 >= 0:\n        while i1 >= 0 and s1[i1] != s2[i2]:\n            i1 -= 1\n        if i1 >= 0:\n            dr[i2] = i1\n            i2 -= 1\n            i1 -= 1\n    rmax = i2\n\n    le = -1\n    re = -1\n    if l2 - lmax < rmax + 1:\n        rcnt = l2 - lmax\n        ls = 0\n        rs = lmax\n    else:\n        rcnt = rmax + 1\n        ls = rmax + 1\n        rs = l2\n    rr = rmax + 1\n    for ll in range(lmax):\n        while rr < l2 and (rr <= ll or dl[ll] >= dr[rr]):\n            rr += 1\n        if rr < l2:\n            dif = rr - ll - 1\n            if dif < rcnt:\n                rcnt = dif\n                ls = 0\n                rs = ll + 1\n                le = rr\n                re = l2\n\n    result = s2[ls:rs]\n    if le != -1:\n        result += s2[le:re]\n    print(result if len(result) > 0 else '-')\n\n\n", "import sys\n\ns, t = input(), '*'+input()\nn, m = len(s), len(t)-1\ninf = 10**9\n\npre, suf = [-1] + [inf]*(m+1), [-1]*(m+1) + [n]\n\ni = 0\nfor j in range(1, m+1):\n    while i < n and s[i] != t[j]:\n        i += 1\n    if i == n:\n        break\n    pre[j] = i\n    i += 1\n\ni = n-1\nfor j in range(m, 0, -1):\n    while 0 <= i and s[i] != t[j]:\n        i -= 1\n    if i == -1:\n        break\n    suf[j] = i\n    i -= 1\n\nmax_len, best_l, best_r = 0, 0, 0\nj = 1\nfor i in range(m+1):\n    j = max(j, i+1)\n    while j <= m and pre[i] >= suf[j]:\n        j += 1\n    if pre[i] == inf:\n        break\n    if max_len < i + m + 1 - j:\n        max_len = i + m + 1 - j\n        best_l, best_r = i, j\n\npre_s = t[1:best_l+1]\nsuf_s = t[best_r:]\n\nprint(pre_s + suf_s if max_len else '-')\n"]