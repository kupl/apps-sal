["MOD = 1000000007\n\ndef main():\n    opts = [0] * 64\n    for i in range(64):\n        for j in range(64):\n            opts[i & j] += 1\n\n    s = input()\n    n = len(s)\n    ans = 1\n    for c in s:\n        if '0' <= c <= '9':\n            ans *= opts[ord(c) - ord('0')]\n            ans %= MOD\n        elif 'A' <= c <= 'Z':\n            ans *= opts[ord(c) - ord('A') + 10]\n            ans %= MOD\n        elif 'a' <= c <= 'z':\n            ans *= opts[ord(c) - ord('a') + 36]\n            ans %= MOD\n        elif c == '-':\n            ans *= opts[62]\n            ans %= MOD\n        else:\n            ans *= opts[63]\n            ans %= MOD\n\n    print(ans)\n\nmain()\n", "s = input()\nans = 1\nfor x in s:\n    if 48<=ord(x)<=57:\n        now = int(x)\n    elif 65<=ord(x)<=90:\n        now = ord(x) - 55\n    elif 97<=ord(x)<=122:\n        now = ord(x) - 61\n    elif x == '-':\n        now = 62\n    else:\n        now = 63\n    for i in range(6):\n        if now & 2**i == 0:\n            ans = (ans*3)%(10**9+7)\n    #print(ans)\nprint(ans)", "from string import *\na=[0]*64\nfor i in range(64):\n    for j in range(64):\n        a[i&j]+=1\nx=1\ns=digits+ascii_uppercase+ascii_lowercase+'-_'\nfor y in input():\n    x=x*a[s.index(y)]%1000000007\nprint(x)\n", "import string\nMOD = 1000000007\ns = input()\nconvertion = string.digits + string.ascii_uppercase + string.ascii_lowercase + \"-_\"\ncnt = [0]*64\nfor val in range(64):\n    for x in range(64):\n        for y in range(64):\n            if (x & y) == val:\n                cnt[val] += 1\nans = 1\nfor c in s:\n    ans *= cnt[convertion.find(c)]\n    ans %= MOD\nprint(ans)\n", "#!/usr/bin/env python3\n\nfrom itertools import chain\n\ndata = input()\nMOD = 10**9 + 7\n\ntranslate = [chr(x) for x in chain(list(range(ord('0'), ord('9')+1)),\n                                   list(range(ord('A'), ord('Z')+1)),\n                                   list(range(ord('a'), ord('z')+1)),\n                                   [ord('-'), ord('_')])]\nassert len(translate) == 64\n\ntranslate2 = { k: \"{:0>6}\".format(bin(i)[2:]).count('0') for i, k in enumerate(translate) }\n\nx = sum([translate2[ch] for ch in data])\nprint(3**x % MOD)\n", "import string\n\ndef zero_count(n):\n    return bin(63 - n).count('1')\n\nE = string.digits + string.ascii_uppercase + string.ascii_lowercase + '-_'\nD = {c : zero_count(i) for (i,c) in enumerate(E)}\n\np = 10 ** 9 + 7\ns = input().rstrip()\nans = sum(D[c] for c in s)\nprint(pow(3, ans, p))\n", "def main():\n    def f1(c):\n        x = ord(c)\n        if ord('0') <= x <= ord('9'):\n            res = int(c)\n        elif ord('A') <= x <= ord('Z'):\n            res = x - ord('A') + 10\n        elif ord('a') <= x <= ord('z'):\n            res = x - ord('a') + 36\n        elif c == '-':\n            res = 62\n        elif c == '_':\n            res = 63\n        return res\n\n    def f2(x):\n        res = bin(x)[2:]\n        res = '0' * (6 - len(res)) + res\n        return res\n\n    read = lambda: list(map(int, input().split()))\n    s = input()\n    mod = 10 ** 9 + 7\n    n = len(s)\n    a = [f2(f1(i)) for i in s]\n    t = ''.join(a)\n    p = t.count('0')\n    ans = 3 ** p % mod\n    print(ans)\nmain()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nstr_in = input()\n\ndef decode_char(c):\n    if '0' <= c <= '9':\n        return ord(c) - ord('0')\n    elif 'A' <= c <= 'Z':\n        return (ord(c) - ord('A')) + 10\n    elif 'a' <= c <= 'z':\n        return (ord(c) - ord('a')) + 36\n    elif '-' == c:\n        return 62\n    elif '_' == c:\n        return 63\n    assert False\n\nresult_num = 0\nfor c in str_in:\n    res_str = \"{0:06b}\".format(decode_char(c))\n    result_num += sum(1 for i in res_str if i == '0')\n\nprint(pow(3, result_num, 10**9 + 7))\n", "#import sys\n#sys.stdin = open(\"python/in\", \"r\")\n\ns = input()\nenc = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'\nd = dict()\nfor i in range(len(enc)):\n    d[enc[i]] = i\nans = 0\nfor c in s:\n    x = bin(d[c])\n    x = x.rjust(8, '0')\n    ans += x.count('0') - 1\n\nM0D = 10**9 +7\nprint(pow(3, ans, M0D))\n", "alth = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\"\ns = input()\nai = [729,243,243,81,243,81,81,27,243,81,81,27,81,27,27,9,243,81,81,27,81,27,27,9,81,27,27,9,27,9,9,3,243,81,81,27,81,27,27,9,81,27,27,9,27,9,9,3,81,27,27,9,27,9,9,3,27,9,9,3,9,3,3,1]\nans = 1\nfor i in s:\n    ans *= ai[alth.find(i)]\n    ans %= 1000000007\nprint(ans)\n", "def rev(c):\n    if c.isdigit():\n        return ord(c) - ord('0')\n    elif c.isupper():\n        return 10 + ord(c) - ord('A')\n    elif c.islower():\n        return 36 + ord(c) - ord('a')\n    elif c == '-':\n        return 62\n    else:\n        return 63\n\ncounter = [0] * 64\nfor i in range(64):\n    for j in range(64):\n        counter[i & j] += 1\nans = 1\nmod = int(1e9+7)\nfor s in input():\n    ans *= counter[rev(s)]\n    ans %= mod\nprint(ans)\n", "cyph = [str(x) for x in range(10)]+[chr(65+i) for i in range(26)]+[chr(97+i) for i in range(26)]+['-']+['_']\ndct = {}\ndef decod(char):\n    i = 0\n    if char in dct:\n        return dct[char]\n    else:\n        while cyph[i] != char:\n            i += 1\n        dct[char]=i\n        return i\n        \ndct2 = {}\ndef zeros(i):\n    if i in dct2:\n        return dct2[i]\n    else:\n        cct = 0\n        for j in range(6):\n            cct += (i >> j) % 2\n        dct2[i] = 6 - cct\n        return dct2[i]\n        \ns = input()\ncnt = 1\nfor char in s:\n    tmp = decod(char)\n    cnt *= (3 ** zeros(tmp))\n    cnt %= 1000000007\n    \nprint(cnt)", "A = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\"\nZ = [0] * 64\nfor i in range(64):\n    r = 0\n    for j in range(64):\n        for k in range(64):\n            if i == (j & k):\n                r += 1\n    Z[i] = r\n    #print(str(i) + \".\", A[i], \"=>\", r)\n\nr = 1\nfor c in input():\n    #print(\"c:\", c, \"idx:\", A.index(c), \"z:\", Z[A.index(c)])\n    r = (r * Z[A.index(c)]) % 1000000007\nprint(r)\n\n\"\"\"\nV_V & V_V = V_V\n\n__V & V_V = V_V\nV_V & __V = V_V\n\nV__ & V_V = V_V\nV_V & V__ = V_V\n\n___ & V_V = V_V\nV_V & ___ = V_V\n\n__V & V__ = V_V\nV__ & __V = V_V\n\"\"\"\n", "#from functools import cmp_to_key\n#from collections import deque\nimport math\n\nmod = int(10**9+7)\nN = int(1e5)+10\n\ndef main():\n    d = {}\n    for i in range(10):\n        d[str(i)] = i\n    i = 10\n    for j in range(26):\n        c = str(chr(ord('A')+j))\n        d[c] = i\n        i += 1\n    for j in range(26):\n        c = str(chr(ord('a') + j))\n        d[c] = i\n        i += 1\n    d['-'] = i\n    d['_'] = i+1\n    s = input()\n\n    ans = 1\n    temp = [0 for i in range(64)]\n    for i in range(64):\n        for j in range(64):\n            temp[i&j] += 1\n    l = [d[c] for c in s]\n    for j in l:\n        ans = (temp[j]*ans+mod)%mod\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "s,ans=input(),1\nfor x in s:\n    if '0'<=x<='9': t=ord(x)-48\n    if 'A'<=x<='Z': t=ord(x)-55\n    if 'a'<=x<='z': t=ord(x)-61\n    if x=='-': t=62\n    if x=='_': t=63\n    ans=ans*(3**(6-bin(t).count('1')))%1000000007\nprint(ans)", "def get_num(sym):\n    if sym in '0123456789':\n        return int(sym)\n    if sym == '-':\n        return 62\n    if sym == '_':\n        return 63\n    if ord('a')<=ord(sym)<=ord('z'):\n        return ord(sym)-ord('a')+36\n    else:\n        return ord(sym)-ord('A')+10\n\ndef bins(x):\n    return bin(x)[2:]\np = 10**9+7\ns = input()\nans = 1\nfor sym in s:\n    now = bins(get_num(sym))\n    now = '0'*(6-len(now))+now\n    for i in now:\n        if i is '0':\n            ans *= 3\n    ans %= p\n\nprint(ans)\n#print(get_num(s))\n", "def count(num):\n    string = bin(num)[2:]\n    return string.count('0') + 6 - len(string)\n\nkey = [3 ** count(x) for x in range(64)]\n\ndic = {}\nfor i in range(10):\n    dic[chr(ord('0') + i)] = key[i]\nfor i in range(26):\n    dic[chr(ord('A') + i)] = key[i + 10]\nfor i in range(26):\n    dic[chr(ord('a') + i)] = key[i + 36]\ndic['-'] = key[62]\ndic['_'] = key[63]\n\nmod = int(1e9) + 7\nstring = input()\n\nans = 1\nfor x in string:\n    ans = (ans * dic[x]) % mod\nprint(ans)", "import sys\n\ndef convert(x):\n    if x>='A' and x<='Z':\n        return (ord(x)-ord('A'))+10\n    if x>='a' and x<='z':\n        return (ord(x)-ord('a'))+36\n    if x>='0' and x<='9':\n        return (ord(x)-ord('0'))\n    if x=='-':\n        return 62\n    return 63\n\ndef ones(n):\n    r = 0\n    while n!=0 :\n        n&=n-1\n        r+=1\n    return r\n\ndef zeros(x):\n    return 6 - ones(x)\n\n# def zeros(x):\n#     i=1 \n#     res=0\n#     while i<=x:\n#         if (i&x) ==0:\n#             res+=1\n#         i= i<<1\n#     return res\n\ndef pow (a , b , mod = 10**9+7):\n    res = 1\n    while b > 0 :\n        if (b&1) == 0 :\n            a = (a*a) % mod\n            b = b>>1\n        else:\n            res= (res*a) %mod\n            b-=1\n    return res\n\ndef main():\n    x = sys.stdin.readline().rstrip()\n    t = 0\n    for s in x:\n        v = convert(s)\n        z = zeros(v)\n        t+=z\n\n    print(pow(3,t))\n\nmain()\n", "table=[]\nfor i in range(0,64):\n    ans=-1\n    for z in bin(i):\n        if z=='0':\n            ans+=1\n    table.append(ans+8-len(bin(i)))\ns=input()\nans=1\nfor i in s:\n    if i==\"_\":\n        z=63\n    elif i==\"-\":\n        z=62\n    elif i.isdigit():\n        z=int(i)\n    elif ord(i)>=97:\n        z=ord(i)-97+36\n    else:\n        z=ord(i)-65+10\n    ans*=3**table[z]\n    ans%=(10**9+7)\nprint(ans)\n", "zcount = [6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2, 5, 4, 4, 3, 4, 3, 3, 2, 4, 3, 3, 2, 3, 2, 2, 1, 5, 4, 4, 3, 4, 3, 3, 2, 4, 3, 3, 2, 3, 2, 2, 1, 4, 3, 3, 2, 3, 2, 2, 1, 3, 2, 2, 1, 2, 1, 1, 0]\ndigits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'\n\ns = input()\n\nc = 0\n\nfor i in s:\n\tc += zcount[digits.index(i)]\n\nk = 1\n\nfor j in range(c):\n\tk *= 3\n\tif k >= 1000000007: k = k % 1000000007\n\nprint(k % 1000000007)", "z = input()\nl = []\nfor x in z:\n\tif(ord(x)>=ord('0') and ord(x)<=ord('9')):\n\t\tl.append(ord(x)-ord('0'))\n\telif(ord(x)>=ord('A') and ord(x)<=ord('Z')):\n\t\tl.append(ord(x)-ord('A')+10)\n\telif(ord(x)>=ord('a') and ord(x)<=ord('z')):\n\t\tl.append(ord(x)-ord('a')+36)\n\telif(ord(x)==ord('-')):\n\t\tl.append(62)\n\telse:\n\t\tl.append(63)\n\n\nans=1\nfor i in l:\n\tunset = 6-bin(i).count('1')\n\tfor x in range(unset):\n\t\tans *= 3\n\t\twhile(ans>=1000000007):\n\t\t\tans-=1000000007\n\t\t# ans%=1000000007\nprint(ans)", "def getLetterNumber(letter):\n    if '0' <= letter <= '9':\n        return ord(letter) - ord('0')\n    if 'A' <= letter <= 'Z':\n        return ord(letter) - ord('A') + 10\n    if 'a' <= letter <= 'z':\n        return ord(letter) - ord('a') + 36\n    if letter == '-':\n        return 62\n    if letter == '_':\n        return 63\n\ndef getNumberOfVairants(number):\n    return 3**\"{0:b}\".format(number).zfill(6).count('0')\n\ndef getNumber(str):\n    result = 1;\n    for c in str:\n        num = getLetterNumber(c)\n        result = result * getNumberOfVairants(num)\n        result %= (int(1e9) + 7)\n    return result\n\ns = input()\nprint(getNumber(s))", "from collections import defaultdict\n\ndef __starting_point():\n    #n, m = list(map(int, input().split()))\n    s = input()\n    s1 = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\"\n    d = defaultdict(int)\n    for i in range(64):\n        for j in range(64):\n            d[s1[i & j]] += 1\n    ans = 1\n    for ch in s:\n        ans = ans * d[ch] % (10 ** 9 + 7)\n\n    print(ans)\n__starting_point()"]