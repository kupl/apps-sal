["N, M, K = list(map(int, input().split()))\nA = [int(a) for a in input().split()]\nS = [0]\nfor a in A:\n    S.append(S[-1]+M*a-K)\nMI = [(10**50)] * M\nans = 0\nfor i in range(N+1):\n    MI[i%M] = min(MI[i%M], S[i])\n    for j in range(M):\n        ans = max(ans, (S[i]-MI[(i-j)%M] - K*((-j)%M))//M)\nprint(ans)\n\n", "n, m, k = map(int, input().split())\nA = list(map(int, input().split()))\nglans = 0\nfor s in range(m):\n    B = []\n    f = s\n    su = 0\n    sus = 0\n    for i in range(s, n):\n        su += A[i]\n        sus = max(sus, su)\n        if (i + 1) % m == s:\n            B.append(sus - k)\n            B.append(su - sus)\n            su = 0\n            sus = 0\n            f = i + 1\n    dob = 0\n    klol = 0\n    for j in range(f, n):\n        dob += A[j]\n        klol = max(klol, dob - k)\n    B = [0] + B + [klol]\n    for i in range(1, len(B)):\n        B[i] += B[i - 1]\n    cnt = -10 ** 10\n    ans = [0, 0]\n    minsum = 10 ** 10\n    candidat = 0\n    for i in range(len(B)):\n        if B[i] - minsum > cnt:\n            cnt = B[i] - minsum\n            ans[1] = i\n            ans[0] = candidat\n        if B[i] <= minsum:\n            minsum = B[i]\n            candidat = i\n    glans = max(glans, B[ans[1]] - B[ans[0]])\nprint(glans)", "n,m,k = [int(w) for w in input().split()]\na = [int(w) for w in input().split()]\n\ndef f(o):\n    r = e = 0\n    for i, x in enumerate(a):\n        if i < o:\n            continue\n        if i % m == o:\n            e -= k\n            if e < -k:\n                e = -k\n        e += x\n        if e > r:\n            r = e\n    return r\n\nprint(max(f(o) for o in range(m)))\n", "import math\n\nn, m, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\n\npart_sum = [0]\nfor i in range(n):\n\tpart_sum.append(part_sum[-1] + arr[i])\n\n# print(part_sum)\n\npart_sum_add = [[] for _ in range(m)]\nmin_in_part_sum_add = [[] for _ in range(m)]\nfor shift in range(m):\n\tcount_blocks = math.ceil((n - shift) / m + 1)\n\tfor i in range(n + 1):\n\t\tcur_part_sum = part_sum[i] + k * (count_blocks - ((i - shift) // m))\n\t\tif i == 0 or cur_part_sum < prev_min_in_part_sum_add:\n\t\t\tcur_min_in_part_sum_add = cur_part_sum\n\t\telse:\n\t\t\tcur_min_in_part_sum_add = prev_min_in_part_sum_add\n\n\t\t# cur_min_in_part_sum_add = part_sum_add[shift][-1] if i == 0 else min(part_sum_add[shift][-1], min_in_part_sum_add[shift][-1])\n\t\tpart_sum_add[shift].append(cur_part_sum)\n\t\tmin_in_part_sum_add[shift].append(cur_min_in_part_sum_add)\n\t\tprev_min_in_part_sum_add = cur_min_in_part_sum_add\n\t# print(shift, part_sum_add[shift], min_in_part_sum_add[shift])\n\nmax_result = 0\nfor i in range(1, n + 1):\n\tcurrent_shift = i % m\n\tcurrent_min = min_in_part_sum_add[current_shift][i]\n\tcurrent_ans = part_sum_add[current_shift][i] - current_min\n\t# print('[{}] shift={} min={} ans={}'.format(i, current_shift, current_min, current_ans))\n\tif current_ans > max_result:\n\t\tmax_result = current_ans\n\nprint(max_result)", "import sys\n\nn, m, k = list(map(int, sys.stdin.readline().strip().split()))\na = list(map(int, sys.stdin.readline().strip().split()))\nb = [0] * (n+1)\nfor i in range (1, n+1):\n    b[i] = b[i-1] + m * a[i-1] - k\nM = [10 ** 20] * m\nans = 0\nfor i in range (0, n+1):\n    M[i % m] = min([M[i % m], b[i]])\n    for j in range (0, m):\n        if i > j:\n            ans = max([ans, b[i]-M[j]-k*((m*i+m-(i-j))%m)])\n    # print(j, M, ans)\nprint(ans // m)\n", "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nimport copy\n\nn,m,k = list(map(int,input().split()))\nA = list(map(int,input().split()))\nANS = 0\n\nfor i in range(m):\n    B = copy.deepcopy(A)\n\n    for j in range(i,n,m):\n        B[j] -= k\n\n    SUM = list(accumulate(B))\n    SUMMIN = [float(\"inf\")]*n +[0]\n\n    if i==0:\n        SUMMIN[0] = 0\n\n    for j in range(max(1,i),n):\n        if j % m == i % m:\n            SUMMIN[j] = min(SUMMIN[j-1],SUM[j-1])\n        else:\n            SUMMIN[j] = SUMMIN[j-1]\n\n    for j in range(i,n):\n        ANS = max(ANS,SUM[j] - SUMMIN[j])\n\nprint(ANS)\n\n    \n    \n", "import sys\ninput = sys.stdin.readline\nn,m,k=list(map(int,input().split()))\nA=[int(i) for i in input().split()]\nif n<=m:\n  AA=[0]*(n+1)\n  for i in range(n):\n    AA[i+1]=AA[i]+A[i]\n  mm=0\n  for i in range(n+1):\n    for j in range(i+1,n+1):\n      mm=max(mm,AA[j]-AA[i]-k)\nelse:\n  DP=[[0]*(m+1) for _ in range(n+1)]\n  for i in range(n):\n    a=A[i]\n    DP[i+1][0]=max([DP[i][0],DP[i][m],DP[i][m]+a-k,DP[i][1]])\n    DP[i+1][1]=max(a-k,DP[i][m]+a-k)\n    for j in range(2,m+1):\n      DP[i+1][0]=max(DP[i+1][0],DP[i][j])\n      if j>i+1:\n        continue\n      else:\n        DP[i+1][j]=max(DP[i][j-1]+a,DP[i][m]+a-k)\nprint(max(A[0]-k,0) if n==1 else mm if n<=m else max(0,max(DP[n])))\n", "import copy\n\nn,m,k=list(map(int,input().split()))\nA=list(map(int,input().split()))\n\nANS=0\n\nfor i in range(m):\n    B=copy.deepcopy(A)\n    for j in range(i,n,m):\n        B[j]-=k\n\n    NOW=0\n\n    for j in range(i,n):\n        if j%m==i:\n            NOW=max(NOW+B[j],B[j])\n        else:\n            NOW+=B[j]\n\n        ANS=max(ANS,NOW)\n\nprint(ANS)\n        \n    \n", "from sys import stdin, stdout, exit\n\nn, m, k = list(map(int, stdin.readline().split()))\na = list(map(int, stdin.readline().split()))\n\ndef bf(a):\n    best = 0\n    best_arg = (-1, -1)\n    for i in range(n):\n        for j in range(i, n):\n            cur = sum(a[i:j+1]) - k*((j - i) // m + 1)\n            if cur > best:\n                best = max(best, cur)\n                best_arg = (i,j)\n    return best, best_arg\n\ndef max_sum(a):\n    if len(a) == 0:\n        return 0\n    elif len(a) == 1:\n        return max(0, a[0] - k)\n    mid = len(a) // 2\n    l_rec = max_sum(a[:mid])\n    r_rec = max_sum(a[mid:])\n    l_bests = [0]*m\n    r_bests = [0]*m\n    l_sum = 0\n    for idx in range(1,mid+1):\n        l_sum += a[mid-idx]\n        if idx % m == 0:\n            l_sum -= k\n        l_bests[idx%m] = max(l_bests[idx%m], l_sum)\n    r_sum = 0\n    for idx in range(0, len(a)-mid):\n        r_sum += a[idx+mid]\n        if (idx+1) % m == 0:\n            r_sum -= k\n        r_bests[(idx+1)%m] = max(r_bests[(idx+1)%m], r_sum)\n\n #   print(\"Array:\", a, \"mid:\", mid)\n#    print(l_bests)\n  #  print(r_bests)\n    best_acr = 0\n    for i in range(m):\n        for j in range(m):\n            best_acr = max(best_acr, l_bests[i] + r_bests[j] - (k if i+j>0 else 0) - (k if i+j>m else 0))\n    ans = max(l_rec,r_rec, best_acr)\n   # print(\"Answer:\", ans)\n    return ans\n\n\nans = max_sum(a)\nstdout.write(str(ans) + \"\\n\")\n#stdout.write(str(bf(a))+\"\\n\")\n", "n, m, k = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\n\nbestbest = 0\n\ndef brute(n, m, k, A):\n    ans = 0\n    val = (0, 0)\n    for i in range(n):\n        for j in range(i, n):\n            if ans < sum(A[i:j+1]) - k*(ceil((j-i+1)/m)):\n                ans = sum(A[i:j+1]) - k*(ceil((j-i+1)/m))\n                val = (i, j)\n    return val, ans\n\nfor off in range(m):\n    B = A[off:]\n    C = []\n    canstart = []\n    for i in range(len(B)):\n        if i%m == 0:\n            C.append(-k)\n            canstart.append(1)\n        canstart.append(0)\n        C.append(B[i])\n\n    best = 0\n    run = 0\n\n    for i in range(len(C)):\n        run += C[i]\n        if run < -k:\n            run = -k\n        best = max(best, run)\n    #print(best, C)\n    bestbest = max(bestbest, best)\n\nprint(bestbest)\n", "def max_subarray(A):\n    max_ending_here = max_so_far = A[0]\n    for x in A[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n \nans = 0\nn, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nfor i in range(m):\n    li = a[0:i] + [-k]\n    s = 0\n    while True:\n        li += a[i+s:min(i+m+s, len(a))]\n        li += [-k]\n        if i+m+s >= len(a):\n            break\n        s += m\n    ans = max(max_subarray(li) - k,ans)\nprint(ans)\n\n", "\ndef __starting_point():\n    n, m, k = list(map(int, input().split()))\n    aa = list(map(int,input().split()))\n    ans = 0\n    for start in range(m):\n        ac = aa[:]\n        for i in range(start, n, m):\n            ac[i] -= k\n        cur = 0\n        for i in range(start, n):\n            if i%m == start:\n                cur = max(ac[i] + cur, ac[i])\n            else:\n                cur += ac[i]\n            ans = max(cur, ans)\n    print(ans)\n\n__starting_point()", "# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\nfrom sys import stdin, stdout\nimport collections\n \n#T = int(input())\n \n#W,H = [int(x) for x in stdin.readline().split()]\n#arr = [int(x) for x in stdin.readline().split()]\n \n#s = input()\n#N = len(s)\n \nN,M,K = [int(x) for x in stdin.readline().split()]\narr = [int(x) for x in stdin.readline().split()]\n \n\n\nres = 0\nfor j in range(M):\n    s = 0\n    mini = 0\n    for i in range(j,N):\n        if i%M==j:\n            mini = min(mini,s)\n            s -= K\n        \n        s += arr[i]\n        \n        res = max(res,s-mini)\n        \nprint(res)\n\n", "base = 1000000007\nn , m , k = map(int,input().split())\na = list(map(int,input().split()))\nmx = 0\ns = 0\ndp = []\ndd= []\nfor j in range(m):\n    for i in range(n+1):\n        dp.append(base)\n        dd.append(0)\n    for i in range(n):\n        dd[i+1]=dd[i]+a[i]-k*(i % m== j)\n        dp[i+1] = min(dd[i],dp[i])\n        #print(dd)\n        #print(dp)\n        if (i % m == j):\n            mx = max ( mx , dd[i+1]-dp[i+1])\nprint(mx)", "'''input\n5 3 10\n1 2 10 2 3\n'''\nimport math\ndef max_sub(arr,n):\n\tdp = [0]*n\n\tdp[0] = arr[0]\n\tfor i in range(1,n):\n\t\tdp[i] = max(dp[i-1]+arr[i],arr[i])\n\treturn max(0,max(dp))\nn,m,k = map(int,input().split())\narr = list(map(int,input().split()))\nq = -math.inf\ndp = [0]*(300100)\nfor i in range(300100):\n\tdp[i] = [q]*(11)\nif (m==1):\n\tfor i in range(n):\n\t\tarr[i]= arr[i]-k\n\tprint(max_sub(arr,n))\nelse:\n\tfor i in range(n):\n\t\tdp[i][1] = arr[i]-k\n\t\tfor j in range(m):\n\t\t\tif (i-1<0 or dp[i-1][j]==q):\n\t\t\t\tcontinue\n\t\t\tif ((j+1)%m!=1):\n\t\t\t\tdp[i][(j+1)%m] = dp[i-1][j]+arr[i]\n\t\t\telse:\n\t\t\t\tdp[i][(j+1)%m] = max(arr[i]-k,dp[i-1][j]+arr[i]-k)\n\tma=0\n\tfor i in range(n):\n\t\t# s = \"\"\n\t\tfor j in range(m):\n\t\t\t# s+=str(dp[i][j])+\" \"\n\t\t\tma = max(ma,dp[i][j])\n\t\t# print(s)\n\tprint(ma)", "N, M, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nbv = 0\nfor ms in range(M):\n    cv = 0\n    for i in range(ms, N):\n        v = A[i]\n        if i % M == ms:\n            v -= K\n            cv = max(0, cv)\n        cv += v\n        bv = max(bv, cv)\nprint(bv)\n", "#Bhargey Mehta (Junior)\n#DA-IICT, Gandhinagar\nimport sys, math, queue\n#sys.stdin = open('input.txt', 'r')\nMOD = 998244353\nsys.setrecursionlimit(1000000)\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[-10**20 for i in range(m)] for i in range(n)]\ndp[0][0] = a[0]-k\n\nfor i in range(1, n):\n\tfor j in range(m):\n\t\tif j == 0:\n\t\t\tdp[i][j] = max(dp[i-1][m-1]+a[i], a[i])-k\n\t\telse:\n\t\t\tdp[i][j] = dp[i-1][j-1]+a[i]\n\nans = 0\nfor i in range(n):\n\tans = max(ans, max(dp[i]))\nprint(ans)", "#Bhargey Mehta (Junior)\n#DA-IICT, Gandhinagar\nimport sys, math, queue\n#sys.stdin = open('input.txt', 'r')\nMOD = 998244353\nsys.setrecursionlimit(1000000)\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[-10**20 for i in range(m)] for i in range(n)]\n\nfor i in range(n):\n    for j in range(min(m, i+1)):\n        if j == 0:\n            dp[i][j] = max(dp[i-1][m-1]+a[i], a[i])-k\n        else:\n            dp[i][j] = dp[i-1][j-1]+a[i]\n\nans = 0\nfor i in range(n):\n\tans = max(ans, max(dp[i]))\nprint(ans)", "n, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nsa = [0]*n\n\nans = 0\n\nfor i in range(n):\n    sa[i] = a[i] - k\n    s = a[i]\n    for j in range(i-1, max(-1, i-m-1), -1):\n        sa[i] = max(sa[i], sa[j] + s - k)\n        s += a[j]\n    if i < m:\n        sa[i] = max(sa[i], s - k)\n    sa[i] = max(sa[i], 0)\n    ans = max(ans, sa[i])\n\nprint(ans)\n", "n, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nret = 0\nfor i in range(m):\n\tcur = 0\n\tfor j in range(i, n):\n\t\tif j % m == i:\n\t\t\tcur = max(0, cur)\n\t\t\tcur -= k\n\t\tcur += a[j]\n\t\tret = max(ret, cur)\nprint(ret)", "n,m,k = list(map(int,input().split()))\na = list(map(int,input().split()))\ndp = [[float('-inf')]*m for i in range(n)]\ndp[0][0] = a[0]\nfor i in range(1,n):\n    for j in range(1,m):\n        dp[i][j] = dp[i-1][j-1] + a[i]\n    dp[i][0] = max(dp[i-1][m-1]-k, 0)+a[i]\n        #if dp[i-1][j] != float()\nprint(max(max([max(x) for x in dp])-k,0))    ", "n, m, k = list(map(int, input().split()));\na = list(map(int, input().split()));\n\nvalues = list()\n\nfor j in range(n):\n    result = a[j];\n    sum1 = 0;\n    for i in range(m):\n        if j-i>=0:\n            sum1 = sum1 + a[j-i];\n            if sum1 > result:\n                result = sum1;\n        else:\n            continue;\n    if j-m>=0:\n        result = max(result, sum1 + values[j-m]);\n    values.append(max(0, result-k));\nprint((max(values)));\n", "n, m, k = list(map(int, input().strip().split()))\n\na = list(map(int, input().strip().split()))\na = [0] + a\ndp = [0] * 300005\nans = 0\nfor i in range(1, n + 1):\n    a[i] += a[i - 1]\n    for j in range(1, m + 1):\n        if i - j >= 0:\n            dp[i] = max(dp[i], a[i] - a[i - j] - k)\n    if i - m >= 0:\n        dp[i] = max(dp[i], a[i] - a[i - m] + dp[i - m] - k)\n    ans = max(ans, dp[i])\n\nprint(ans)\n", "n, m, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nbest = 0\ndp = [0] * (n + 1)\nfor i in range(n):\n    b2 = 0\n    for j in range(max(-1, i - m), i + 1):\n        b2 = max(b2, dp[j] - k + sum(a[j + 1:i + 1]))\n    dp[i] = max(b2, a[i] - k)\n    best = max(best, dp[i])\n\nprint(best)\n# print(dp)\n"]