["l = int(input())\na = input()\nla = len(a)\nif la % l != 0:\n    per = la//l+1\n    ans = '1'+'0'*(l-1)\n    ans *= per\n    print(ans)\nelse:\n    ans = a[:l]\n    per = la//l\n    if ans*per > a:print(ans*per)\n    else:\n        temp = str(int(ans)+1)\n        if len(temp) == l:print(temp*per)\n        else:\n            temp = '1'+'0'*(l-1)\n            temp *= (per+1)\n            print(temp)\n", "import math\n\nL = int(input())\n\nA = input()\nlen_A = len(A)\n\nif len_A % L != 0:\n    print(('1'+'0'*(L-1))*math.ceil(len_A/L))\nelse:\n    p = A[:L]\n    intp = p*int(len_A/L)\n\n    if intp > A:\n        print(intp)\n    elif p.count('9') == L:\n        print(('1'+'0'*(L-1))*(int(len_A/L)+1))\n    else:\n        print(str(int(p)+1)*int(len_A/L))\n", "#BubbleCup 12 - C\n\nimport math\n\nL = int(input())\nA = input()\n\nf = int(\"\".join(A[:L]))\ntn = False\nif (1 - abs((math.log(f + 1) / math.log(10))  %1)) % 1 < (10 ** -9):\n    tn = True\nif len(A) % L != 0:\n    ln = len(A) + (L - len(A) % L)\n    num = (\"1\" + \"0\" * (L - 1)) * (ln // L)\n    print(num)\nelse:\n    f = int(\"\".join(A[:L]))\n    fn = False\n    ft = True\n    for i in range(L, len(A), L):\n        if int(\"\".join(A[i:i+L])) > f and not fn:\n            ft = False\n        if int(\"\".join(A[i:i+L])) < f:\n            fn = True\n    if fn and ft:\n        print(str(f) * (len(A) // L))\n    elif tn:\n        print((\"1\" + \"0\" * (L - 1)) * ((len(A) // L) + 1))\n    else:\n        print(str(f + 1) * (len(A) // L))\n", "import io, sys, atexit, os\nimport math as ma\nfrom decimal import Decimal as dec\nfrom itertools import permutations\nfrom itertools import combinations\n\n\ndef li ():\n\treturn list (map (int, sys.stdin.readline ().split ()))\n\n\ndef num ():\n\treturn map (int, sys.stdin.readline ().split ())\n\n\ndef nu ():\n\treturn int (input ())\n\n\ndef find_gcd ( x, y ):\n\twhile (y):\n\t\tx, y = y, x % y\n\treturn x\n\n\ndef lcm ( x, y ):\n\tgg = find_gcd (x, y)\n\treturn (x * y // gg)\n\n\ndef findSum ( str1, str2 ):\n\tif (len (str1) > len (str2)):\n\t\tt = str1\n\t\tstr1 = str2\n\t\tstr2 = t\n\tstr = \"\"\n\tn1 = len (str1)\n\tn2 = len (str2)\n\tstr1 = str1 [ ::-1 ]\n\tstr2 = str2 [ ::-1 ]\n\n\tcarry = 0\n\tfor i in range (n1):\n\t\tsum = ((ord (str1 [ i ]) - 48) +\n\t\t\t   ((ord (str2 [ i ]) - 48) + carry))\n\t\tstr += chr (sum % 10 + 48)\n\t\tcarry = int (sum / 10)\n\tfor i in range (n1, n2):\n\t\tsum = ((ord (str2 [ i ]) - 48) + carry)\n\t\tstr += chr (sum % 10 + 48)\n\t\tcarry = (int) (sum / 10)\n\tif (carry):\n\t\tstr += chr (carry + 48)\n\tstr = str [ ::-1 ]\n\n\treturn str\n\n\n\n\nmm = 1000000007\n\ndef solve ():\n\tt = 1\n\tfor tt in range (t):\n\t\tn=nu()\n\t\ts=input()\n\t\tif(len(s)%n!=0):\n\t\t\tnm=(len(s)//n+1)\n\t\t\thp=\"1\"\n\t\t\tfor i in range(n-1):\n\t\t\t\thp+=\"0\"\n\t\t\top=\"\"\n\t\t\tfor i in range(nm):\n\t\t\t\top+=hp\n\t\t\tprint(op)\n\t\t\tcontinue\n\t\tff=s[0:n]\n\t\tox=s[n:]\n\t\tvv=\"\"\n\t\tfor i in range(len(s)):\n\t\t\tvv+=\"9\"\n\t\tif(vv==s):\n\t\t\tnm = (len (s) // n + 1)\n\t\t\thp = \"1\"\n\t\t\tfor i in range (n - 1):\n\t\t\t\thp += \"0\"\n\t\t\top = \"\"\n\t\t\tfor i in range (nm):\n\t\t\t\top += hp\n\t\t\tprint (op)\n\t\t\tcontinue\n\t\tgp=\"\"\n\t\tlast=-1\n\t\tok=-1\n\t\tfor i in range(0,len(ox),n):\n\t\t\tfor j in range(i,i+n):\n\t\t\t\tif(ff[j-i]<ox[j]):\n\t\t\t\t\tlast=1\n\t\t\t\t\tbreak\n\t\t\t\tif(ff[j-i]>ox[j]):\n\t\t\t\t\tok=j+1\n\t\t\t\t\tbreak\n\t\t\tif(last!=-1):\n\t\t\t\tbreak\n\t\t\tif(ok!=-1):\n\t\t\t\tbreak\n\t\tans=\"\"\n\t\tif(last!=-1):\n\t\t\tgp = findSum (ff, \"1\")\n\t\t\tfor i in range (len (s) // n):\n\t\t\t\tprint (gp, end = \"\")\n\t\t\tcontinue\n\t\tif(ok!=-1):\n\t\t\tfor i in range (len (s) // n):\n\t\t\t\tprint (ff, end = \"\")\n\t\t\tcontinue\n\t\tgp = findSum (ff, \"1\")\n\t\tfor i in range (len (s) // n):\n\t\t\tprint (gp, end = \"\")\n\n\n\n\n\n\n\n\n\n\ndef __starting_point():\n\tsolve ()\n__starting_point()", "n = int(input())\nA=input()\nL=len(A)\ndef check_increase(p_numb,n):\n    if (p_numb.count(\"9\")==n):\n        return True\n    return False\ndef large_print(L,n):\n    cycle_count=(L//n)+1\n    p_numb=\"1\"+\"0\"*(n-1)\n    print(p_numb*cycle_count)\n\nif (L==n):\n    if(check_increase(A[:n],n)):\n        large_print(L,n)\n    else:\n        print(int(A)+1)\nelif (L%n==0):\n    p_numb=A[:n]\n\n    #eval\n    for i in range(n,L):\n        if (int(p_numb[i%n])>int(A[i])):\n            break\n        elif (int(p_numb[i%n])<int(A[i])):\n            p_numb=str(int(p_numb)+1)\n            break\n    else:\n        p_numb=str(int(p_numb)+1)\n    if (len(p_numb)==n):\n        print(p_numb*(L//n))\n    else:\n        large_print(L,n)\nelse:\n    large_print(L,n)\n", "\n\n\n\"\"\"\nNTC here\n\"\"\"\nfrom sys import setcheckinterval, stdin, setrecursionlimit\nsetcheckinterval(1000)\nsetrecursionlimit(10**7)\n \n# print(\"Case #{}: {} {}\".format(i, n + m, n * m))\n \n \ndef iin(): return int(stdin.readline())\ndef lin(): return list(map(int, stdin.readline().split()))\n\n\nl=iin()\na=list(input())\nn=len(a)\nif n<l:\n    print('1'+'0'*(l-1))\nelif l==n:\n    for i in range(l-1,-1,-1):\n        chg=int(a[i])\n        if chg<9:\n            a[i]=str(chg+1)\n            break\n        else:\n            a[i]='0'\n    else:\n        s1='1'+'0'*(l-1)\n        s2=s1*(2)\n        print(s2)\n        return\n    print(*a,sep='')\nelse:\n    if n%l==0:\n        x=n//l\n        s1=a[:l]\n        s2=s1*x\n        if s2<=a:\n            for i in range(l):\n                chg=int(s1[-i-1])\n                if chg<9:\n                    s1[-i-1]=str(chg+1)\n                    break\n                else:\n                    s1[-i-1]='0'\n            else:\n                s1='1'+'0'*(l-1)\n                s2=s1*(x+1)\n                print(s2)\n                return\n            s2=s1*x\n        print(*s2,sep='')\n\n    else:\n        x=(n+l-1)//l\n        s1='1'+'0'*(l-1)\n        s2=s1*x\n        print(s2)\n", "L = int(input())\nstr_A = (input())\n\n#str_A  = str(A)\n\nlens = len(str_A)\n\nif lens % L == 0 and str_A != (\"9\"*lens):\n    #print(1)\n    build = -1\n    for i in range(L,lens):\n        if str_A[i] < str_A[i%L]:\n            build =0\n            break\n        elif str_A[i] > str_A[i%L]:\n            build = 1\n            break\n    if build in (1,-1):\n        print(str(int(str_A[:L])+1)*(lens//L))\n    if build == 0:\n        print(str_A[:L] * (lens // L))\n\nelse:\n    perf = (\"1\" + \"0\"*(L-1))*(lens// L +1)\n    print(perf)", "L = int(input())\nstr_A = (input())\n \n#str_A  = str(A)\n \nlens = len(str_A)\n \nif lens % L == 0 and str_A != (\"9\"*lens):\n    #print(1)\n    build = -1\n    for i in range(L,lens):\n        if str_A[i] < str_A[i%L]:\n            build =0\n            break\n        elif str_A[i] > str_A[i%L]:\n            build = 1\n            break\n    if build in (1,-1):\n        print(str(int(str_A[:L])+1)*(lens//L))\n    if build == 0:\n        print(str_A[:L] * (lens // L))\n \nelse:\n    perf = (\"1\" + \"0\"*(L-1))*(lens// L +1)\n    print(perf)\n", "import math as m\n\ndef main():\n\tn = int(input())\n\ts = input()\n\tl = len(s)\n\tp = int(m.ceil(l/n))\n\tif l%n!=0 :\n\t\tt = '1'\n\t\tfor i in range(1,n):\n\t\t\tt+='0'\n\t\tfor i in range(0,p):\n\t\t\tprint(t ,end = '')\n\telse :\n\t\tz = s[0:n]\n\t\tt=''\n\t\tfor i in range(0,p):\n\t\t\tt+=z\n\t\tif t > s:\n\t\t\tprint(t)\n\t\t\treturn\n\n\t\tz = str(int(s[0:n])+1)\n\t\tif len(z)>n :\n\t\t\tt = '1'\n\t\t\tfor i in range(1,n):\n\t\t\t\tt+='0'\n\t\t\tfor i in range(0,p+1):\n\t\t\t\tprint(t ,end = '')\n\t\t\treturn\n\n\t\tt=''\n\t\tfor i in range(0,p):\n\t\t\tt+=z\n\t\t\n\t\tprint(t)\n\t\t\t\n\n\n\nmain()\n\n\n\t\n\n", "L=int(input())\nA=int(input())\nl1=[]\nD=A\ns1=str(D)\n\"\"\"\nwhile True:\n\tif (D<10):\n\t\tl1.append(D)\n\t\ts1+=str(D)\n\t\tbreak\n\telse:\n\t\tl1.append(D%10)\n\t\ts1+=str(D%10)\n\t\tD=D//10\n\n\"\"\"\nq=len(s1)//L\nq1=q+1\nif (len(s1)%L!=0):\n\tprint((\"1\"+\"0\"*(L-1))*q1)\nelse:\n\ts=\"\"\n\tif (L==len(s1)):\n\t\tprint(A+1)\n\telif (int(s1[0])<int(s1[L])):\n\t\tv=s1[0:L]\n\t\t#v[-1]=v[-1]+1\n\t\ts+=v[0:len(v)-1]\n\t\ts+=str(int(v[-1])+1)\n\t\tprint(s*q)\n\n\telse:\n\t\tl2=[]\n\t\tind=0\n\t\tfor m in range(q):\n\t\t\tl2.append(int(s1[ind:ind+L]))\n\t\t\tind=ind+L\n\t\tc=l2[0]\n\t\tval=0\n\t\tfor j in l2:\n\t\t\tif j>c:\n\t\t\t\tc+=1\n\t\t\t\tbreak\n\t\t\telif j==c:\n\t\t\t\tval+=1\n\t\tif val==len(l2):\n\t\t\td=c+1\n\t\t\td=str(d)\n\t\t\tif (len(str(d))>len(str(c))):\n\t\t\t\tc=d[0:len(d)-1]\n\t\t\t\tq+=1\n\t\t\telse:\n\t\t\t\tc=str(d)\n\t\tprint(str(c)*q)\n\n\n\n\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Sep 24 18:38:16 2019\n\n@author: Mridul Garg\n\"\"\"\n\nL = int(input())\nstring = input()\n\n#lstring = [0]*(L)\n#for i in range(L):\n#    lstring[i] = string[i]\n#term = string[L+1]\n\nq = len(string)//L\nr = len(string)%L\n\nif q == 0:\n    temp = '1' + '0'*(L-1)\n    ans = temp\n\nelif r != 0:\n    temp = '1' + '0'*(L-1)\n    ans = temp*(q+1)\n    \n    \nelse:\n    temp = string[0:L]\n    temp2 = temp*q\n#    if temp2 == string:\n#        ans = temp2\n#    print(temp2)\n    if int(temp2) > int(string):\n        ans = temp2\n        \n        \n    else:\n        if temp == '9'*L:\n            temp = '1' + '0'*(L-1)\n            temp = temp*(q+1)\n            ans = temp\n        else:\n            temp2 = int(temp) + 1\n            ans = str(temp2)*q\n        \n        \n#        char = int(string[L-1]) + 1\n#        \n#        temp2 = temp + char\n    \n\nprint(ans)", "L = int(input())\nstring = input()\n\nlength = len(string)\nif length % L != 0:\n    print(('1'+'0'*(L-1))*((length + L -1)//L))\nelse:\n    uptoL = string[:L]\n    periodic = uptoL * (length//L)\n\n    if periodic > string:\n        print(periodic)\n    elif uptoL.count('9') == L:\n        print(('1'+'0'*(L-1))*((length + L )//L))\n    else:\n        print(str(int(uptoL)+1)*(length//L))\n", "import os\nimport sys\n\nimport textwrap\n\n\ndef solve():\n    L = int(input())\n    A = input()\n\n    size = len(A)\n    div = int(size / L)\n    mod = size % L\n\n    if size == L:\n        if A == '9'*L:\n            print(str(10 ** (L - 1)) * (div + 1))\n        else:\n            print(int(A)+1)\n    elif mod:\n        print(str(10 ** (L - 1)) * (div + 1))\n    else:\n        parts = [int(x) for x in textwrap.wrap(A, L)]\n        rep = parts[0]\n        if rep == 10 ** L - 1:\n            print(str(10 ** (L-1)) * (div+1))\n        elif rep > parts[1]:\n            print(str(rep) * div)\n        elif rep < parts[1]:\n            print(str(rep+1) * div)\n        else:\n            index = 2\n            pl = len(parts)\n            while index < pl and rep == parts[index]:\n                index += 1\n            if index == pl or parts[index] >= rep:\n                print(str(rep + 1) * div)\n            else:\n                print(str(rep) * div)\n\n\ndef __starting_point():\n    if \"PYCHARM_HOSTED\" in os.environ:\n        sys.stdin = open('input.in')\n    solve()\n\n__starting_point()", "L = int(input())\nA = input()\nN = len(A)\n\nif N%L != 0 or A == '9'*N:\n    K = N//L + 1\n    for _ in range(K):\n        print(1, end='')\n        for _ in range(L-1):\n            print(0, end='')\n    print()\nelse:\n    for k in range(N//L):\n        lg = 0\n        for l in range(L):\n            a0 = int(A[l])\n            a = int(A[k*L+l])\n            if a > a0:\n                lg = 1\n                break\n            if a < a0:\n                lg = -1\n                break\n        if lg == -1 or lg == 1:\n            break\n    if lg == -1:\n        for _ in range(N//L):\n            print(A[:L], end='')\n        print()\n    elif lg == 1 or lg == 0:\n        B = list(A[:L])\n        for l in range(L):\n            b = int(B[L-1-l])+1\n            if b == 10:\n                B[L-1-l] = '0'\n            else:\n                B[L-1-l] = str(b)\n                break\n        for _ in range(N//L):\n            print(''.join(B), end='')\n        print()\n", "# from time import time\n# start = time()\nn = int(input())\ns = input()\ns = str(int(s)+1)\n# print(s)\nl = len(s)\n# print(l)\nif(n==l):\n    print(s)\nelif(n>l):\n    print(str(\"1\"+\"0\"*(n-1)))\n\nelif(l%n!=0):\n    print(str(\"1\"+\"0\"*(n-1))*(l//n +1))\nelse:\n    d = s[:n]\n    # print(d)\n    i = n\n    flag = 0\n    while(i<l):\n        z = s[i:i+n]\n        # print(i,d,z)\n        if(int(z) > int(d)):\n            d = str(int(d)+1)\n            flag = 1\n            break;\n        i = i+n\n    # print(l//n)\n    print(str(d)*int(l//n))\n# end = time()\n# print(\"%0.2f\" %(end-start),\"seconds\")\n", "#  =========     /\\       /|    |====/|\n#      |        /  \\       |    |   / |\n#      |       /____\\      |    |  /  |\n#      |      /      \\     |    | /   |\n#  ========= /        \\  =====  |/====|  \n#  code\n\ndef main():\n    l = int(input())\n    s = input()\n    n = len(s)\n\n    if l > n or n % l != 0:\n        k = '1' + '0'*(l - 1)\n        c = (n + l - 1)//l\n        print(k * c)\n    else:\n        k = s[:l]\n        p = k * (n//l)\n        if p > s:\n            print(p)\n        else:\n            p = str(int(k) + 1)\n            if len(p) == len(k):\n                print(p * (n//l))\n            else:\n                n += 1\n                k = '1' + '0'*(l - 1)\n                c = (n + l - 1)//l\n                print(k * c)\n    return\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\n\n\ndef add_one(p):\n    count = 0\n    for i in range(len(p) - 1, -1, -1):\n        if p[i] == '9':\n            count += 1\n        else:\n            return p[: -1 - count]+ str(int(p[i]) + 1) + '0' * count, 0\n    return '0' * count, 1\n\n\ndef __starting_point():\n    L = int(input())\n    A = input()\n    if len(A) % L == 0:\n        p_size = int(len(A) / L)\n        p = A[:L]\n        for i in range(2, p_size + 1):\n            num = A[(i - 1) * L: i * L]\n            if p > num:\n                print(A[:L] * p_size)\n                return\n            elif p < num:\n                p, _ = add_one(p)                \n                print(p * p_size)\n                return\n        p, c = add_one(p)\n        if c == 1:\n            print(('1' + '0' * (L - 1)) * (p_size + 1))\n        else:\n            print(p * p_size)\n    else:\n        print(('1' + '0' * (L - 1)) * (int(len(A) / L) + 1))\n\n__starting_point()", "'''\n    Author : thekushalghosh\n    Team   : CodeDiggers\n'''\nimport sys,math,statistics as ss,collections as cc\ninput = sys.stdin.readline\nn = int(input())\na = input()\na = a[:len(a) - 1]\nif len(a) % n == 0:\n    q = a[:n] * (len(a) // n)\n    if q > a:\n        print(q)\n    elif a[:n].count(\"9\") == n:\n        print(\"\".join(([\"1\"] + ([\"0\" * (n - 1)])) * ((len(a) + n) // n)))\n    else:\n        print(str(int(a[:n]) + 1) * (len(a) // n))\nelse:\n    print(\"\".join(([\"1\"] + ([\"0\" * (n - 1)])) * math.ceil(len(a) / n)))", "import math#, time\n\nl = int(input())\na = input()\n\n#t_s = time.time()\n#log = int(math.log10(a))+1\n\nl_a = len(a)\n#print(l_a)\n\n\nif( (l_a%l) != 0 ):\n    l_in_P = int(l_a/l) + 1\n    i = 0\n    P = (10 ** (l - 1))\n    P = str(P)\n    amount = 0\n    while(i < l_in_P) :\n        print(P, end='')\n        i = i + 1\n\nelse :\n\n    l_in_P = int(l_a/l)\n    #print('l_in_P=', l_in_P)\n    #print(l_in_P)\n\n    #a_str = str(a)\n    a_str = a\n    int_for_P = a_str[0:l]\n\n    compare = '='\n    i = 0\n    while(i<l_in_P):\n        index = l*i\n        #j = 0\n        #while(j<l):\n            #if( int(a_str[index+j]) != int(int_for_P[j]) ) :\n                #if(int(a_str[index+j]) < int(int_for_P[j])) :\n                    #compare = '<'\n                #else:\n                    #compare = '>'\n                #break\n            #j = j + 1\n        #print(a_str[index:(index+l)],'int_for_P',int_for_P, i)\n        difference = int(a_str[index:(index+l)]) - int(int_for_P)\n        if(difference != 0) :\n            if(difference < 0):\n                compare = '<'\n            else:\n                compare = '>'\n            break\n\n        #if (compare != '='):\n            #break\n        i = i + 1\n\n    if(compare == '<') :\n        #int_for_P = str(int_for_P)\n        i = 0\n        while(i<l_in_P):\n            print(int_for_P, end='')\n            i = i + 1\n    else:\n        #P = int(int_for_P) + 1\n        #exam_length_P = int(math.log10(P))+1\n        #exam_length_P = len(str(P))\n        if(int_for_P != ('9'*l)):\n            #P = str(P)\n            P = int_for_P\n            k = l-1\n            while(P[k] == '9'):\n                k = k - 1\n\n            P = P[0:(k)]+str(int(P[k])+1)+('0'*(l-k-1))\n\n            i = 0\n            while(i < l_in_P):\n                print(P,end='')\n                i = i + 1\n        else:\n            #P = 10 ** (l - 1)\n            P = '1'+'0'*(l-1)\n            l_in_P = l_in_P + 1\n            #print('l_inP=',l_in_P)\n            i = 0\n            while (i < l_in_P):\n                print(P, end='')\n                i = i + 1\n#t_f = time.time()\n#print('')\n#print(t_f-t_s)", "n=int(input())\ns=input()\nk=len(s)\nif k%n!=0 or s==\"9\"*(k):\n    print((\"1\" + (n-1)*\"0\")*(k//n + 1))\nelse:\n    s1=s[:n]*(k//n)\n    # print(s1,s)\n    for i in range(k):\n        # print(i,s,s1)\n        if int(s1[i])<int(s[i]):\n            s2=''\n            c=1\n            for i in range(n -1,-1,-1):\n                s2+=str((int(s[i]) + c)%10)\n                c=(int(s[i]) + c)//10\n                \n            print(s2[::-1]*(k//n))\n            break\n        elif int(s1[i])>int(s[i]):\n            print(s1)\n            break\n        elif i==k-1:\n            s2=''\n            c=1\n            for i in range(n-1,-1,-1):\n                s2+=str((int(s[i]) + c)%10)\n                c=(int(s[i]) + c)//10\n                \n            print(s2[::-1]*(k//n))\n            break\n", "def revive(l):\n    res = pow(10 , l-1)\n    return str(res)\n\n\n\nl = int(input())\ns = input()\nval = 0\nif len(s) % l == 0:\n    ans = s[:l]\n    if ans*(len(s)//l) > s:\n        print(ans*(len(s)//l))\n        return\n    elif ans == \"9\"*l:\n        ans = revive(l)\n        val = l\n    else:\n        ans = str(int(ans) + 1)\nelse:\n    ans = revive(l)\nprint(ans*((len(s) + l-1 + val)//l))", "import sys\nl=int(sys.stdin.readline())\ns=sys.stdin.readline()[:-1]\ndef check(s):\n    n=len(s)\n    for i in range(n):\n        if s[i]!='9':\n            return False\n    return True\nn=len(s)\nif n%l!=0:\n    ans=['0' for _ in range(l)]\n    ans[0]='1'\n    x=['0' for _ in range(l*(n//l+1))]\n    i=0\n    while i<(n//l+1)*l:\n        for j in range(l):\n            x[i]=ans[j]\n            i+=1\n    print(''.join(y for y in x))\nelse:\n    j=l-1\n    #print('divisible')\n    carry=1\n    s_ind=''\n    for i in range(l-1,-1,-1):\n        y=(int(s[i])+carry)%10\n        carry=(int(s[i])+carry)//10\n        if carry==0:\n            s_ind=str(y)\n            break\n    #print(i,'ii',carry)\n    if carry:\n        #print('a')\n        if check(s):\n            ans=['0' for _ in range(l)]\n            ans[0]='1'\n            i=0\n            #print(ans,'ans')\n            x=['0' for _ in range(l*(n//l+1))]\n            #print(x,'x')\n            while i<(n//l+1)*l:\n                for j in range(l):\n                    x[i]=ans[j]\n                    i+=1\n        else:\n            x=['9' for _ in range(l*(n//l+1))]\n        print(''.join(y for y in x))\n    else:\n        ans=['0' for _ in range(l)]\n        ans[i]=str(y)\n        for j in range(i):\n            ans[j]=s[j]\n        for j in range(i+1,l):\n            ans[j]='0'\n        x=['0' for _ in range(n)]\n        i=0\n        while i<(n//l)*l:\n            for j in range(l):\n                x[i]=ans[j]\n                i+=1\n        b=s[:l]*(n//l)\n        #print(s[:l])\n        #print(b,'s')\n        \n        a=''.join(y for y in x)\n        #print(a,'a')\n        if a<b:\n            print(a)\n        else:\n            if b>s:\n                print(b)\n            else:\n                print(a)\n    \n                    \n", "l=int(input())\na=input()\nlena=len(a)\nif lena%l != 0:\n    ans=\"1\"+(\"0\"*(l-1))\n    ans=ans*(lena//l+1)\n    print(ans)\nelse:\n    seg=lena//l\n    now=a[0:l]\n    flag=0\n    for i in range(seg):\n        if now>a[i*l:(i+1)*l]:\n            flag=1\n            break\n        elif now<a[i*l:(i+1)*l]:\n            break;\n    if flag==0:\n        if now.count(\"9\")==l:\n            now=\"1\"+\"0\"*(l-1);\n            seg+=1\n        else:\n            now=str(int(now)+1)\n    print(now*seg)"]