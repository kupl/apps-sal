["n = int(input())\nd = 367\nF = [0 for i in range(d)]\nM = [0 for i in range(d)]\nfor i in range(n):\n    sex, l, r = input().split()\n    l, r = int(l), int(r)\n    if sex == 'F':\n        for j in range(l, r+1): F[j] += 1\n    else:\n        for j in range(l, r+1): M[j] += 1\nprint(2*max(min(F[i], M[i]) for i in range(d)))\n            \n", "n = int(input())\nm = [0 for i in range(400)]\nf = [0 for i in range(400)]\nppl = []\nfor i in range(n):\n    tmp = input().split()\n    tmp[1] = int(tmp[1])\n    tmp[2] = int(tmp[2])\n    ppl.append(tmp)\n\nans = 0\nfor day in range(1, 367):\n    for p in ppl:\n        gender, a, b = p\n        if a <= day <= b:\n            if gender == 'M':\n                m[day] += 1\n            else:\n                f[day] += 1\n    ans = max(ans, min(m[day], f[day]))\nprint(2*ans)\n", "v = [[0] * 367 for i in range(2)]\nfor i in range(int(input())):\n    c = input().split()\n    s = int(c[0] == 'M')\n    for j in range(int(c[1]), int(c[2]) + 1):\n        v[s][j] += 1\nprint(2 * max(min(x, y) for x, y in zip(v[0], v[1])))", "m = [0 for _ in range(400)]\nf = [0 for _ in range(400)]\n\nn = int(input())\n\nfor i in range(n):\n    g, a, b = input().split()\n    a = int(a)\n    b = int(b)\n\n    if g == \"M\":\n        for j in range(a, b+1):\n            m[j] += 1\n    else:\n        for j in range(a, b+1):\n            f[j] += 1\n\nret = 0\n\nfor i in range(1, 400):\n    ret = max(ret, min(m[i], f[i]) * 2)\n\nprint(ret)\n", "n = int(input())\np = []\nfor i in range(n):\n    s, t, j = input().split()\n    t = int(t)\n    j = int(j)\n    p.append([t, 'a', s])\n    p.append([j, 'z', s])\np.sort()\ne1 = 0\ne2 = 0\nmaxi = 0\nfor i in range(2 * n):\n    if p[i][1] == 'a' and p[i][2] == 'M':\n        e1 += 1\n    elif p[i][1] == 'a' and p[i][2] == 'F':\n        e2 += 1\n    elif p[i][1] == 'z' and p[i][2] == 'M':\n        e1 -= 1\n    else:\n        e2 -= 1\n    maxi = max(maxi, min(e1, e2))\nprint(maxi * 2)\n        \n", "n = int(input())\nar = [(0, 0)] * 367\nfor i in range(n):\n    p, a, b = [i for i in input().split()]\n    a = int(a)\n    b = int(b)\n    if p == 'M':\n        for j in range(a, b + 1):\n            ar[j] = (ar[j][0] + 1, ar[j][1])\n    else:\n        for j in range(a, b + 1):\n            ar[j] = (ar[j][0], ar[j][1] + 1)\nm = 0\nfor i in range(1, 367):\n    m = max(m, min(ar[i][0], ar[i][1]) * 2)\nprint(m)", "n = int(input())\nevents = []\nfor i in range(n):\n    gender, a, b = input().split()\n    a, b = int(a), int(b)\n    events.append((a, -1, gender)) # -1: arrives\n    events.append((b, 1, gender))  #  1: left\nevents.sort()\ncurrM = 0\ncurrF = 0\nans = 0\nfor ev in events:\n    if ev[2] == \"M\":\n        currM -= ev[1]\n    else:\n        currF -= ev[1]\n    ans = max(ans, min(currM, currF) * 2)\n    #print(currM, currF, ev)\nprint(ans)", "DayM=[0 for i in range(367)]\nDayF=[0 for i in range(367)]\nn=int(input())\nfor i in range(n):\n    a,b,c=input().split()\n    Begin=int(b)\n    End=int(c)\n    for j in range(Begin,End+1):\n        if a=='M':\n            DayM[j]+=1\n        else:\n            DayF[j]+=1\nM=0\nfor i in range(367):\n    m=min(DayM[i],DayF[i])\n    if m>M:\n        M=m\nprint(M*2)\n", "n = int(input())\n\nludia = []\nfor i in range(n):\n    s = input().split()\n    ludia.append([s[0], int(s[1]), int(s[2])])\n\nmaxi = 0\nfor den in range(1, 367):\n    muzov, zien = 0, 0\n    for clovek in ludia:\n        if clovek[1] <= den <= clovek[2]:\n            if clovek[0] == 'M':\n                muzov += 1\n            elif clovek[0] == 'F':\n                zien += 1\n            else:\n                print('WTF?!')\n\n    parov = min(muzov, zien)\n    maxi = max(maxi, parov)\n\nprint(maxi * 2)\n", "n = int(input())\nboy = [0] * 1000\ngirl = [0] * 1000\nfor i in range(n):\n    lst = list(input().split())\n    lst[1] = int(lst[1])\n    lst[2] = int(lst[2])\n    for j in range(lst[1], lst[2] + 1):\n        if lst[0] == 'M':\n            boy[j] += 1\n        else:\n            girl[j] += 1\nans = -1            \nfor i in range(1000):\n    k = 2 * min(boy[i], girl[i])\n    ans = max(ans, k)\n    \nprint(ans)\n", "n = int(input())\n\nmales = [0]*368\nfemales = [0]*368\nfor i in range(n):\n    pol, a, b = input().split()\n    a = int(a)\n    b = int(b)\n    if pol == 'M':\n        for i in range(a,b+1):\n            males[i]+=1\n    else:\n        for i in range(a,b+1):\n            females[i]+=1\nans = 0\nfor i in range(368):\n    if min(males[i],females[i])>ans:\n        ans = min(males[i],females[i])\nprint(ans*2)", "read = lambda: list(map(int, input().split()))\nn = int(input())\np = [list() for i in range(367)]\nfor i in range(n):\n    s, a, b = input().split()\n    a, b = list(map(int, (a, b)))\n    p[a].append((1, s))\n    p[b].append((-1, s))\ncntm = cntf = cur = ans = 0\nfor i in range(1, 367):\n    for t, s in p[i]:\n        if t == 1:\n            if s == 'M': cntm += 1\n            else: cntf += 1\n    cur = min(cntf, cntm)\n    #print(i, cur, cntf, cntm)\n    ans = max(ans, cur)\n    for t, s in p[i]:\n        if t == -1:\n            if s == 'M': cntm -= 1\n            else: cntf -= 1\nprint(ans * 2)\n\n", "n = int(input())\nm = [0] * 366\nf = [0] * 366\nres = 0\nfor i in range(n):\n    x, l, r = [i for i in input().split()]\n    l = int(l)\n    r = int(r)\n    if x == 'M':\n        for j in range(l-1, r):\n            m[j] += 1\n    else:\n        for j in range(l-1, r):\n            f[j] += 1\nfor i in range(366):\n    res = max(res, min(m[i], f[i]))\nprint(res * 2)\n\n", "n = int(input())\nfriends = [list(map(str,input().split())) for i in range(n)]\ndays = [[0]*366 for i in range(2)]\nfor i in range(n):\n    if friends[i][0] == \"M\":\n        for j in range(int(friends[i][1])-1,int(friends[i][2])):\n            days[0][j] += 1\n    else:\n        for j in range(int(friends[i][1])-1,int(friends[i][2])):\n            days[1][j] += 1\nnum = 0\nfor i in range(366):\n    if min(days[0][i],days[1][i]) > num:\n        num = min(days[0][i],days[1][i])\nprint(num*2)\n", "day = 367\nn = int(input())\nmale = [0] * day\nfemale = [0] * day\nfor i in range(n):\n    sex, l, r = input().split()\n    if sex == 'M':\n        for j in range(int(l), int(r) + 1):\n            male[j] += 1\n    else:\n        for j in range(int(l), int(r) + 1):\n            female[j] += 1\n\nans = 0\nfor i in range(1, day):\n    ans = max(ans, min(male[i], female[i]))\nprint(ans * 2)", "n = int(input())\ngrid = []\nfor i in range(n):\n    tokens = input().split()\n    grid.append([tokens[0], int(tokens[1]), int(tokens[2])])\nans = 0\nfor i in range(366):\n    males, females = 0, 0\n    for j in range(n):\n        if grid[j][1] - 1 <= i <= grid[j][2] - 1:\n            if grid[j][0] == 'M':\n                males += 1\n            else:\n                females += 1\n    x = 2 * min(males, females)\n    if x > ans:\n        ans = x\nprint(ans)", "M = [0 for i in range(367)]\nF = [0 for i in range(367)]\nn = int(input())\nfor i in range(n):\n    a,b,c = input().split()\n    b = int(b)\n    c = int(c)\n    if a == 'M':\n        for j in range(b,c+1):\n            M[j] += 1\n    else:\n        for j in range(b,c+1):\n            F[j] += 1\n#print(F)\n#print(M)\n\nm = 0\nfor i in range(1,367):\n    x = min(M[i],F[i])\n    if x > m:\n        m = x\nprint(m*2)", "n = int(input())\nday = [[0, 0] for i in range(368)]\nfor i in range(n):\n\ta, b, c = (input().split())\n\tif(a == \"M\"):\n\t\tday[int(b)][0] += 1\n\t\tday[int(c)+1][0] -= 1\n\telse:\n\t\tday[int(b)][1] += 1\n\t\tday[int(c)+1][1] -= 1\n\nw = 0\nm = 0\nans = 0\nfor i in day:\n\tw += i[0]\n\tm += i[1]\n\tans = max(2 * min(m, w), ans)\nprint(ans)", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\nn     = int(input())\nbm    = {}\nem    = {}\nbf    = {}\nef    = {}\na     = []\n\nfor i in range(n):\n    (s, b, e) = (i for i in input().split())\n    b = int(b)\n    e = int(e)+1\n\n    a.append(b)\n    a.append(e)\n\n    if s =='M':\n        if b in list(bm.keys()):\n            bm[b] += 1\n        else:\n            bm[b] = 1\n\n        if e in list(em.keys()):\n            em[e] += 1\n        else:\n            em[e] = 1\n    else:\n        if b in list(bf.keys()):\n            bf[b] += 1\n        else:\n            bf[b] = 1\n\n        if e in list(ef.keys()):\n            ef[e] += 1\n        else:\n            ef[e] = 1\n\nstart = time.time()\n\na = sorted(list(set(a)))\n\nans = 0\nnf  = 0\nnm  = 0\n\nfor i in a:\n    if i in list(bm.keys()):\n        nm += bm[i]\n    if i in list(em.keys()):\n        nm -= em[i]\n    if i in list(bf.keys()):\n        nf += bf[i]\n    if i in list(ef.keys()):\n        nf -= ef[i]\n\n    t = min(nf, nm)\n\n    if ans < 2*t:\n        ans = 2*t\n\nprint(ans)\nfinish = time.time()\n#print(finish - start)\n", "n = int(input())\n\nfemales = [0] * 366\nmales = [0] * 366\n\nfor _ in range(n):\n    p, start, end = input().split()\n\n    start = int(start) - 1\n    end = int(end) # end == 366\n\n    if p == \"F\":\n        females[start] += 1\n        if end < 366:\n            females[end] -= 1\n    elif p == \"M\":\n        males[start] += 1\n        if end < 366:\n            males[end] -= 1\n\ncur_m_count = 0\ncur_f_count = 0\nmax_count = 0\nfor day in range(366):\n    cur_m_count += males[day]\n    cur_f_count += females[day]\n    max_count = max(max_count, 2*min(cur_f_count, cur_m_count))\n\nprint(max_count)\n\n\n", "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n# vim:fenc=utf-8\n#\n# Copyright \u00a9 2016 missingdays <missingdays@missingdays>\n#\n# Distributed under terms of the MIT license.\n\n\"\"\"\n\n\"\"\"\n\nn = int(input())\n\nf = []\nm = []\n\nfor i in range(n):\n    g, a, b = input().split()\n\n    if g == \"F\":\n        f.append([int(a), int(b)])\n    else:\n        m.append([int(a), int(b)])\n\nmaxi = 0\n\nfor i in range(1, 367):\n    mw = 0\n    mm = 0\n\n    for j in range(len(f)):\n        if f[j][0] <= i <= f[j][1]:\n            mw += 1\n    for j in range(len(m)):\n        if m[j][0] <= i <= m[j][1]:\n            mm += 1\n\n    maxi = max(maxi, min(mw, mm))\n    \nprint(maxi*2)\n", "\narrMa=[0]*367\narrFe=[0]*367\np=int(input())\n\nfor i in range(p):\n    inf=list(map(str,input().split()))\n    if inf[0]=='M':\n        arrMa[int(inf[1])-1]+=1\n        arrMa[int(inf[2])]-=1\n    else:\n        arrFe[int(inf[1])-1]+=1\n        arrFe[int(inf[2])]-=1\n        \nmaxi=-1\ncurM=0\ncurF=0\nfor i in range(366):\n    curM+=arrMa[i]\n    curF+=arrFe[i]\n    if min(curM,curF)>maxi:\n        maxi=min(curM,curF)\n    \nprint(maxi*2)\n", "__author__ = 'Utena'\nn=int(input())\nm=[0]*366\nf=[0]*366\nfor i in range(n):\n    g,a,b=input().split()\n    a,b=int(a),int(b)\n    if g=='F':\n        for i in range(a-1,b):\n            f[i]+=1\n    elif g=='M':\n        for i in range(a-1,b):\n            m[i]+=1\nt=0\nfor i in range(366):\n    temp=min(f[i],m[i])\n    if temp>t:t=temp\nprint(t*2)", "n = int(input())\ndays = [[0, 0] for i in range(366)]\nfor i in range(n):\n    str_input = list(input().split())\n    #print(str_input[0])\n    row = 0\n    if str_input[0][0] == 'M':\n        row = 1\n        #print(\"true\")\n    #print(int(str_input[1]) - 1, int(str_input[2]))\n    for j in range(int(str_input[1]) - 1, int(str_input[2])):\n        days[j][row] += 1\ncnt_guests = 0\nfor i in range(366):\n    cnt_guests = max(cnt_guests, min(days[i][0], days[i][1]) * 2)\n# for i in range(366):\n#     print(i + 1, days[i])\nprint(cnt_guests)\n", "#!/usr/bin/env python3\n# 629B_relative.py - Codeforces.com/problemset/problem/629/B by Sergey 2016\n\nimport unittest\nimport sys\n\n###############################################################################\n# Relative Class (Main Program)\n###############################################################################\n\n\nclass Relative:\n    \"\"\" Relative representation \"\"\"\n\n    def __init__(self, test_inputs=None):\n        \"\"\" Default constructor \"\"\"\n\n        it = iter(test_inputs.split(\"\\n\")) if test_inputs else None\n\n        def uinput():\n            return next(it) if it else sys.stdin.readline().rstrip()\n\n        # Reading single elements\n        [self.n] = list(map(int, uinput().split()))\n\n        # Reading multiple number of lines of the same number of elements each\n        l, s = self.n, 3\n        inp = (\" \".join(uinput() for i in range(l))).split()\n        self.numm = [[(int(inp[i]) if j != 0 else inp[i] == 'M')\n                     for i in range(j, l*s, s)] for j in range(s)]\n        self.nums, self.numa, self.numb = self.numm\n\n        self.dts = []\n        for i in range(self.n):\n            self.dts.append((self.numa[i], 1, self.nums[i]))\n            self.dts.append((self.numb[i]+1, 0, self.nums[i]))\n        self.sdts = sorted(self.dts)\n\n        mcnt, fcnt = 0, 0\n        self.ms, self.fs = {}, {}\n        for i in range(len(self.sdts)):\n            day = self.sdts[i][0]\n            if self.sdts[i][2]:\n                if self.sdts[i][1]:\n                    mcnt += 1\n                else:\n                    mcnt -= 1\n            else:\n                if self.sdts[i][1]:\n                    fcnt += 1\n                else:\n                    fcnt -= 1\n            self.ms[day] = mcnt\n            self.fs[day] = fcnt\n        self.cr = []\n        for d in self.ms:\n            self.cr.append(min(self.ms[d], self.fs[d])*2)\n\n    def calculate(self):\n        \"\"\" Main calcualtion function of the class \"\"\"\n\n        result = max(self.cr)\n\n        return str(result)\n\n###############################################################################\n# Unit Tests\n###############################################################################\n\n\nclass unitTests(unittest.TestCase):\n\n    def test_single_test(self):\n        \"\"\" Relative class testing \"\"\"\n\n        # Constructor test\n        test = \"4\\nM 151 307\\nF 343 352\\nF 117 145\\nM 24 128\"\n        d = Relative(test)\n        self.assertEqual(d.n, 4)\n        self.assertEqual(d.numa, [151, 343, 117, 24])\n        self.assertEqual(d.nums, [1, 0, 0, 1])\n\n        # Sample test\n        self.assertEqual(Relative(test).calculate(), \"2\")\n\n        # Sample test\n        test = \"6\\nM 128 130\\nF 128 131\\nF 131 140\\nF 131 141\\nM 131 200\\nM 140 200\"\n        self.assertEqual(Relative(test).calculate(), \"4\")\n\n        # Sample test\n        test = \"\"\n        # self.assertEqual(Relative(test).calculate(), \"0\")\n\n        # My tests\n        test = \"\"\n        # self.assertEqual(Relative(test).calculate(), \"0\")\n\n        # Time limit test\n        # self.time_limit_test(5000)\n\n    def time_limit_test(self, nmax):\n        \"\"\" Timelimit testing \"\"\"\n        import random\n        import timeit\n\n        # Random inputs\n        test = str(nmax) + \" \" + str(nmax) + \"\\n\"\n        numnums = [str(i) + \" \" + str(i+1) for i in range(nmax)]\n        test += \"\\n\".join(numnums) + \"\\n\"\n        nums = [random.randint(1, 10000) for i in range(nmax)]\n        test += \" \".join(map(str, nums)) + \"\\n\"\n\n        # Run the test\n        start = timeit.default_timer()\n        d = Relative(test)\n        calc = timeit.default_timer()\n        d.calculate()\n        stop = timeit.default_timer()\n        print((\"\\nTimelimit Test: \" +\n              \"{0:.3f}s (init {1:.3f}s calc {2:.3f}s)\".\n              format(stop-start, calc-start, stop-calc)))\n\ndef __starting_point():\n\n    # Avoiding recursion limitaions\n    sys.setrecursionlimit(100000)\n\n    if sys.argv[-1] == \"-ut\":\n        unittest.main(argv=[\" \"])\n\n    # Print the result string\n    sys.stdout.write(Relative().calculate())\n\n__starting_point()"]