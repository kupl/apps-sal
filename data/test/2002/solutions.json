["n = int(input())\nbeauty = list(map(int, input().strip().split()))\ntree = [[] for i in range(n)]\nmod = 1000000007\nused = [False for i in range(n)]\ndef gcd(a,b):\n    mn = min(a,b)\n    mx = max(a,b)\n    if mn == 0:\n        return mx\n    md = mx%mn\n    if md == 0:\n        return mn\n    else:\n        return gcd(mn, md)\nfor i in range(n-1):\n    a,b = map(int, input().strip().split())\n    tree[a-1].append(b-1)\n    tree[b-1].append(a-1)\nsegment_vals = [{} for i in range(n)]\nans = beauty[0]\nsegment_vals[0][beauty[0]] = 1\ncur_nodes = [0]\nused[0] = True\nwhile 1:\n    new_nodes = []\n    for node in cur_nodes:\n        for potential_new in tree[node]:\n            if used[potential_new] == False:\n                used[potential_new] = True\n                new_nodes.append(potential_new)\n                new_beauty = beauty[potential_new]\n                segment_vals[potential_new][new_beauty] = 1\n                for g in segment_vals[node].keys():\n                    segment_gcd = gcd(new_beauty,g)\n                    segment_vals[potential_new][segment_gcd] = segment_vals[potential_new].get(segment_gcd,0) + segment_vals[node][g]\n                for k in segment_vals[potential_new].keys():\n                    ans += k*segment_vals[potential_new][k]\n                    ans = ans % mod\n    if len(new_nodes) == 0:\n        break\n    else:\n        cur_nodes = new_nodes\nprint(ans)"]