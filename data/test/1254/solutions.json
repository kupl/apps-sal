["\nnum_students, num_cats = [int(x) for x in input().split()]\n\ncats = [[] for _ in range(num_cats)]\n\nfor _ in range(num_students):\n    cat_idx, skill = [int(x) for x in input().split()]\n    cat_idx -= 1\n    cats[cat_idx].append(skill)\n\nfor cat in cats:\n    cat.sort(key=lambda x : -x)\n\nentries = []\n\nfor cat in cats:\n    team_size = 0\n    team_skill = 0\n    for skill in cat:\n        team_size += 1\n        team_skill += skill\n        entries.append((team_size, -team_skill))\n\nentries.sort()\n\nbest_skill = 0\ntotal_skill = 0\ncurr_size = 1\nfor entry in entries:\n    size, neg_skill = entry\n    skill = -neg_skill\n\n    if size != curr_size:\n        best_skill = max(total_skill, best_skill)\n        curr_size = size\n        total_skill = 0\n\n    if skill > 0:\n        total_skill += skill\n\nbest_skill = max(total_skill, best_skill)\n\nprint(best_skill)\n", "n, m = list(map(int, input().split()))\ninp = tuple(([] for _ in range(m)))\nfor __ in range(n):\n\ts, r = list(map(int, input().split()))\n\tinp[s - 1].append(r)\nfor rs in inp:\n\trs.sort(reverse=True)\nres = 0\ninp1 = list(map(iter, inp))\ncurs = [0] * m\nfor ___ in range(n):\n\tcur = 0\n\ti = 0\n\twhile i < m:\n\t\ttry:\n\t\t\tcurs[i] += next(inp1[i])\n\t\t\tif curs[i] < 0:\n\t\t\t\traise StopIteration\n\t\t\tcur += curs[i]\n\t\t\ti += 1\n\t\texcept StopIteration:\n\t\t\tm -= 1\n\t\t\ttry:\n\t\t\t\tinp1[i] = inp1.pop()\n\t\t\texcept IndexError:\n\t\t\t\tpass\n\t\t\ttry:\n\t\t\t\tcurs[i] = curs.pop()\n\t\t\texcept IndexError:\n\t\t\t\tpass\n\tres = max(res, cur)\nprint(res)\n", "def ii():\n    return int(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\n\nn, m = mi()\na = [[] for i in range(m + 1)]\nfor i in range(n):\n    s, r = mi()\n    a[s].append(r)\n\nch = [0] * (n + 1)\nfor i in range(1, m + 1):\n    a[i].sort(reverse=True)\n    pr = 0\n    for j in range(len(a[i])):\n        pr += a[i][j]\n        if pr > 0:\n            ch[j + 1] += pr\n\nans = max(ch)\nprint(ans)\n", "n, m = list(map(int, input().split()))\nspec = {}\nfor i in range(n):\n    s, r = list(map(int, input().split()))\n    if s in spec:\n        spec[s].append(r)\n    else:\n        spec[s] = [r]\nf = n\ncnt = [-1 for i in range(n + 1)]\nfor k, cur in list(spec.items()):\n    cur.sort(reverse=True)\n    for j in range(1, len(cur)):\n        cur[j] += cur[j - 1]\n    for j in range(1, len(cur) + 1):\n        if cnt[j] == -1:\n            cnt[j] = 0\n        cnt[j] += max(0, cur[j - 1])\nprint(max(cnt))\n", "import math\n\ndef main():\n    buf = input()\n    buflist = buf.split()\n    n = int(buflist[0])\n    m = int(buflist[1])\n    sr = []\n    for i in range(n):\n        buf = input()\n        buflist = buf.split()\n        sr.append((int(buflist[0])-1, int(buflist[1]))) # zero indexing\n    sr = list(reversed(list(sorted(sr, key = lambda x:x[1]))))\n    sp_list = []\n    for i in range(m):\n        sp_list.append([])\n    for i in sr:\n        sp_list[i[0]].append(i[1])\n    sp_list = list(reversed(list(sorted(sp_list, key = lambda x:len(x)))))\n    while len(sp_list[-1]) == 0:\n        sp_list.pop() # remove empty subject\n    score_list = []\n    for i, _ in enumerate(sp_list):\n        score_list.append(0)\n    max_level = 0\n    st_idx = 0\n    while len(sp_list) > 0:\n        level = 0\n        for i, _ in enumerate(sp_list):\n            score_list[i] += sp_list[i][st_idx]\n            if score_list[i] > 0:\n                level += score_list[i]\n        if level > max_level:\n            max_level = level\n        st_idx += 1\n        while len(sp_list) > 0:\n            if len(sp_list[-1]) <= st_idx:\n                sp_list.pop()\n                score_list.pop()\n            else:\n                break\n    print(max_level)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\nn,m=list(map(int,input().split()))\nSR=[list(map(int,input().split())) for i in range(n)]\n\nLIST=[[] for i in range(m+1)]\n\nfor s,r in SR:\n    LIST[s].append(r)\n\nLENLIST=[0]*(m+1)\nfor i in range(1,m+1):\n    LIST[i].sort(reverse=True)\n    LENLIST[i]=len(LIST[i])\n\nLISTSUM=[[] for i in range(m+1)]\n\nfor i in range(1,m+1):\n    if LIST[i]==[]:\n        continue\n    LISTSUM[i].append(LIST[i][0])\n\n    for j in range(1,LENLIST[i]):\n        LISTSUM[i].append(LISTSUM[i][-1]+LIST[i][j])\n\nLEN=len(max(LIST,key=lambda x:len(x)))\n\nANS=[0]*LEN\n\nfor j in range(1,m+1):\n    for i in range(LENLIST[j]):\n        if LISTSUM[j][i]>0:\n            ANS[i]+=LISTSUM[j][i]\n        else:\n            break\n\nprint(max(ANS))\n", "3.5\n\nN, M = [*list(map(int, input().split()))]\n_L = [list() for i in range(0, M)]\n\nfor i in range(0, N):\n    s, r = [*list(map(int, input().split()))]\n    _L[s-1].append(r)\n\nL = []\nL_sum = []\n\nfor x in _L:\n    if len(x) != 0:\n        x.sort(reverse=True)\n        L.append(x)\n\nL.sort(reverse=True, key=lambda x: len(x))\nfor x in L:\n    _s = [0]*len(x)\n    _s[0] = x[0]\n\n    for i in range(1, len(x)):\n        _s[i] = _s[i-1] + x[i]\n\n    L_sum.append(_s)\n        \nret = 0\nfor i in range(1, N+1):\n    cpt = 0\n    for j in range(0, len(L)):\n        if len(L[j]) < i:\n            break\n        \n        if L_sum[j][i-1] > 0:\n            cpt += L_sum[j][i-1]\n\n    ret = max(ret, cpt)\n\nprint(max(0, ret))\n", "__author__ = 'tanunia'\n\nfrom sys import stdin\n\nn, m = [int(k) for k in stdin.readline().split()]\nlst = []\nfor _ in range(n):\n    s, r = [int(k) for k in stdin.readline().split()]\n    lst.append([s - 1, r])\n\nlst = sorted(lst, key=lambda x: -x[1])\n\nstudents_num = [[0, 0] for _ in range(m)]\nbest_score = [0 for _ in range(n + 1)]\nfor it in lst:\n    sub, rating = it[0], it[1]\n    students_num[sub][0] += rating\n    students_num[sub][1] += 1\n    if students_num[sub][0] > 0:\n        best_score[students_num[sub][1]] += students_num[sub][0]\n\nprint(max(best_score))\n", "from sys import stdin, stdout\nfrom math import *\nfrom heapq import *\nfrom collections import *\ndef inputlistint():\n    return [int(x) for x in stdin.readline().split()]\ndef main():\n    n,m=inputlistint()\n    s=[]\n    r=[]\n    f=[]\n    for _ in range(m+2):\n        f.append([])\n    for _ in range(n):\n        a,b=inputlistint()\n        s.append(a)\n        r.append(b)\n        f[a].append(b)\n    f.sort(key=lambda x: len(x), reverse=True)\n    for a in f:\n        a.sort(reverse=True)\n    res=0\n    for k in range(len(f[0])):\n        test=0\n        for i in range(m+1):\n            if (k>=len(f[i])):\n                break\n            if (k>0):\n                f[i][k]=f[i][k]+f[i][k-1]\n            if (f[i][k]>0):\n                test=test+f[i][k]\n        res=max(res,test)\n    stdout.write(str(res))\n    return 0\n\ndef __starting_point():\n    main()\n__starting_point()", "'''input\n5 3\n2 6\n3 6\n2 5\n3 5\n1 11\n'''\nn, m = map(int, input().split())\na = [None] * n\ns = [0] * (max(n, m) + 1)\ncnt = [0] * (max(n, m) + 1)\nans = [0] * (max(n, m) + 1)\nfor i in range(n):\n\tx, y = map(int, input().split())\n\ta[i] = (x - 1, y)\na = sorted(a, key=lambda x:x[1], reverse=True)\nfor i in range(n):\n\tcnt[a[i][0]] += 1\n\ts[a[i][0]] += a[i][1]\n\tans[cnt[a[i][0]]] += max(0, s[a[i][0]])\nprint(max(ans))", "n, m = list(map(int, input().split()))\na, s = [], []\nfor q in range(n):\n    d = list(map(int, input().split()))\n    a.append(d[0])\n    s.append(d[1])\nd = {}\nfor q in range(n):\n    if a[q] in d:\n        d[a[q]].append(s[q])\n    else:\n        d[a[q]] = [s[q]]\nfor q in d:\n    d[q].sort(reverse=True)\nfor q in list(d.values()):\n    sum1 = 0\n    for q1 in range(len(q)):\n        sum1 += q[q1]\n        q[q1] = sum1\nf = [0]*(len(max(list(d.values()), key=lambda x: len(x)))+1)\nfor q in list(d.values()):\n    for q1 in range(len(q)):\n        if q[q1] > 0:\n            f[q1] += q[q1]\nprint(max(f))\n", "n,m = list(map(int,input().split()))\nl = [ list() for i in range( m ) ]\nfor i in range( n ):\n    a,b = list(map(int,input().split()))\n    l[a-1].append( b )\nss = []\nfor i in l:\n    ii = sorted( i )\n    ii.reverse()\n    s = 0\n    i.clear()\n    for c in ii:\n        s += c\n        if s >= 0:\n            i.append( c )\n    i.sort()\n    ss.append( sum(i) )\nind = list( range( m ) )\ns = 0\nm = 0\nwhile len( ind ) > 0:\n    nind = []\n    sub = 0\n    for i in ind:\n        ll = l[ i ]\n        if len( ll ) > 0:\n            s += ll.pop()\n        if len( ll ) > 0:\n            nind.append( i )\n        else:\n            sub += ss[ i ]\n    m = max( m, s )\n    s -= sub\n    ind = nind\nprint( m )\n\n# d = round(2**16)\n# i = 0\n# m = 0\n# while d > 0:\n#     s = 0\n#     ss = 0\n#     j = i + d\n#     jj = i - d\n#     j = min( j, n )\n#     jj = max( 1, jj )\n#     d = round( d / 2 )\n#     for ll in l:\n#         if j <= len( ll ) and ll[ j - 1 ] > 0:\n#             s += ll[ j - 1 ]\n#         if jj <= len( ll ) and ll[ jj - 1 ] > 0:\n#             ss += ll[ jj - 1 ]\n#     if s > m:\n#         m = s\n#         i = j\n#     if ss > m:\n#         m = ss\n#         i = jj\n    # print( i, j, jj)\n\n# print( m )\n", "n, m = [int(_) for _ in input().split()]\nd = [[] for k in range(m + 1)]\nfor _ in range(n):\n    s, r = [int(_) for _ in input().split()]\n    d[s].append(r)\nmax_num = 0\nfor v in d:\n    max_num = max(max_num, len(v))\nsums = [0] * max_num\nfor i, v in enumerate(d):\n    v.sort(reverse=True)\n    s = 0\n    for k, j in enumerate(v):\n        s += j\n        if s > 0:\n            sums[k] += s\n        else:\n            break\nprint(max(sums))", "import sys\nsys.setrecursionlimit(2000)\nfrom collections import Counter\n\ndef __starting_point():\n\n    # single variables\n    n, m = [int(val) for val in input().split()]\n\n    delagates = {}\n\n    for i in range(n):\n        \n        s, r = [int(val) for val in input().split()]\n    \n        if(s in delagates):\n            delagates[s].append(r)\n        else:\n            delagates[s] = [r]\n\n\n    summs = {}\n    for key in delagates:\n        delagates[key].sort(reverse=True)\n        summ = 0\n        for i in range(1, len(delagates[key])+1):\n            summ += delagates[key][i-1]\n            if(summ < 0):\n                continue\n            if(i in summs):\n                summs[i] += summ\n            else:\n                summs[i] = summ\n \n    \n    summs[-1] = 0\n    best = max([val for key, val in list(summs.items())])\n    print(max(best, 0))\n\n\n\n__starting_point()", "from sys import stdin\nn,m=list(map(int,stdin.readline().strip().split()))\nadj=[[0,0] for i in range(max(m,n)+1)]\ndp=[0 for i in range(max(m,n)+1)]\ns=[]\nfor i in range(n):\n    a,b=list(map(int,stdin.readline().strip().split()))\n    s.append([b,a])\ns.sort(reverse=True)\nans=0\nfor i in range(n):\n    a,b=s[i][1],s[i][0]\n    adj[a][0]+=1\n    adj[a][1]+=b\n    dp[adj[a][0]]=max(dp[adj[a][0]]+adj[a][1],dp[adj[a][0]])\nprint(max(dp))\n", "def ii():\n    return int(input())\ndef mi():\n    return map(int, input().split())\ndef li():\n    return list(mi())\n\nn, m = mi()\na = [[] for i in range(m + 1)]\nfor i in range(n):\n    s, r = mi()\n    a[s].append(r)\n\nch = [0] * (n + 1)\nfor i in range(1, m + 1):\n    a[i].sort(reverse=True)\n    pr = 0\n    for j in range(len(a[i])):\n        pr += a[i][j]\n        if pr > 0:\n            ch[j + 1] += pr\n\nans = max(ch)\nprint(ans)", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[22]:\n\n\nn, m=list(map(int, input().rstrip().split()))\ndata=[]\nfor i in range(0,n):\n    data.append( list(map(int, input().rstrip().split())))\n\n\n# In[4]:\n\n\n\n\n\n# In[ ]:\n\n\n\n\n\n# In[64]:\n\n\ndef mergesortbysecond(l):\n    if len(l)==1:\n        return l\n    llower=[]\n    lupper=[]\n    for i in range(0,int(len(l)/2)):\n        llower.append(l[i])\n    for i in range(int(len(l)/2),len(l)):\n        lupper.append(l[i])\n    #print(lupper)\n    #print(llower)\n\n    slower=mergesortbysecond(llower)\n    supper=mergesortbysecond(lupper)\n\n    b=0\n    u=0\n    sort=[]\n    while b<len(slower) and u<len(supper):\n        if slower[b][1]<=supper[u][1]:\n            sort.append(slower[b])\n            b=b+1\n        elif supper[u][1]<slower[b][1]:\n            sort.append(supper[u])\n            u=u+1    \n    #print(sort)\n    if b==len(slower):\n        for i in range(u,len(supper)):\n            sort.append(supper[i])\n    elif u==len(supper):\n        for i in range(b,len(slower)):\n            sort.append(slower[i])\n    #print(sort)\n    return sort\n\n\n# In[2]:\n\n\n\n\n\n# In[65]:\n\n\nsort=mergesortbysecond(data)\n\n\n# In[66]:\n\n\nbsort=[]\nfor i in range(0,n):\n    bsort.append(sort[n-i-1])\n\n\n# In[67]:\n\n\ndic={}\nfor i in range(0,n):\n    if bsort[i][0] in dic:\n        dic[bsort[i][0]].append(bsort[i][1])\n    else:\n        dic[bsort[i][0]]=[bsort[i][1]]\n    \n\n\n# In[68]:\n\n\narray=[]\nfor i in range(0,n):\n    array.append([])\n\n\n# In[69]:\n\n\nfor ele in dic:\n    j=0\n    for i in range(0,len(dic[ele])):\n        j=j+dic[ele][i]\n        array[i].append(j)\n\n\n# In[70]:\n\n\narray\n\n\n# In[71]:\n\n\nma=0\n\nfor i in range(0,len(array)):\n    s=0\n    for j in range(0,len(array[i])):\n        s=s+max([array[i][j],0])\n        \n    if s>ma:\n        ma=s\n\n\n# In[72]:\n\n\nprint(ma)\n\n\n# In[ ]:\n\n\n\n\n", "n, m = map(int, input().split())\nvec = [[] for j in range(100007)]\nvt = [[] for j in range(100007)]\ncv = []\nck = [0 for i in range(100007)]\n\nfor i in range(n):\n    s, r = map(int, input().split())\n    vec[s].append(r)\n    if (ck[s] == 0):\n        cv.append(s)\n        ck[s] = 1\n\nfor i in cv:\n    vec[i].sort(reverse=True)\n    psum = 0\n    for j in range(len(vec[i])):\n        psum = psum + vec[i][j]\n        vt[j].append(psum)\n\nfor i in range(100007):\n    if len(vt[i]) == 0:\n        break\n    vt[i].sort(reverse=True)\n\nans = 0\nfor i in range(100007):\n    if len(vt[i]) == 0:\n        break\n    tmp = 0\n    for j in range(len(vt[i])):\n        if (i + 1)*(j + 1) > n:\n            break\n        if vt[i][j] <= 0:\n            break\n        tmp = tmp + vt[i][j]\n    ans = max(ans, tmp)\n\nprint (ans)", "n, m = map(int, input().split())\nvec = [[] for j in range(100007)]\nvt = [[] for j in range(100007)]\ncv = set()\n\nfor i in range(n):\n    s, r = map(int, input().split())\n    vec[s].append(r)\n    cv.add(s)\n\nfor i in cv:\n    vec[i].sort(reverse=True)\n    psum = 0\n    for j in range(len(vec[i])):\n        psum += vec[i][j]\n        vt[j].append(psum)\n\nans = 0\nfor i in range(100007):\n    if len(vt[i]) == 0:\n        break\n    vt[i].sort(reverse=True)\n    tmp = 0\n    for j in range(len(vt[i])):\n        if (i + 1)*(j + 1) > n or vt[i][j] <= 0:\n            break\n        tmp += vt[i][j]\n    ans = max(ans, tmp)\n\nprint (ans)", "n, m = map(int, input().split())\nvec = [[] for j in range(100007)]\nvt = [[] for j in range(100007)]\n\nfor i in range(n):\n    s, r = map(int, input().split())\n    vec[s].append(r)\n\nfor i in range(100007):\n    vec[i].sort(reverse=True)\n    psum = 0\n    for j in range(len(vec[i])):\n        psum += vec[i][j]\n        vt[j].append(psum)\n\nans = 0\nfor i in range(100007):\n    vt[i].sort(reverse=True)\n    tmp = 0\n    for j in range(len(vt[i])):\n        if (i + 1)*(j + 1) > n or vt[i][j] <= 0:\n            break\n        tmp += vt[i][j]\n    ans = max(ans, tmp)\n\nprint (ans)", "n, m = map(int, input().split())\nvec = [[] for j in range(m)]\nvt = [[] for j in range(n)]\n\nfor i in range(n):\n    s, r = map(int, input().split())\n    vec[s - 1].append(r)\n\nfor i in range(m):\n    vec[i].sort(reverse=True)\n    psum = 0\n    for j in range(len(vec[i])):\n        psum += vec[i][j]\n        vt[j].append(psum)\n\nans = 0\nfor i in range(n):\n    vt[i].sort(reverse=True)\n    tmp = 0\n    for j in range(len(vt[i])):\n        if (i + 1)*(j + 1) > n or vt[i][j] <= 0:\n            break\n        tmp += vt[i][j]\n    ans = max(ans, tmp)\n\nprint (ans)", "n, m = map(int, input().split())\nvec = [[] for j in range(m)]\nvt = [[] for j in range(n)]\n\nfor i in range(n):\n    s, r = map(int, input().split())\n    vec[s - 1].append(r)\n\nfor i in range(m):\n    vec[i].sort(reverse=True)\n    psum = 0\n    for j in range(len(vec[i])):\n        psum += vec[i][j]\n        vt[j].append(psum)\n\nans = 0\nfor i in range(n):\n    tmp = 0\n    for j in range(len(vt[i])):\n        if vt[i][j] > 0:\n            tmp += vt[i][j]\n    ans = max(ans, tmp)\n\nprint (ans)", "(numcand, numsub) = (int(i) for i in input().split())\nsubs = [[] for _ in range(numsub)]\nfor _ in range(numcand):\n    (sub, prof) = (int(i) for i in input().split())\n    subs[sub-1].append(prof)\nfor sub in subs:\n    sub.sort(reverse=True)\nsubs = [sub for sub in subs if sub and sub[0] > 0]\nbest = 0\nwhile subs:\n    best = max(best, sum(sub[0] for sub in subs))\n    for i in reversed(list(range(len(subs)))):\n        if (len(subs[i]) == 1) or (subs[i][0] + subs[i][1] <= 0):\n            subs.pop(i)\n        else:\n            subs[i][0:2] = [subs[i][0] + subs[i][1]]\nprint(best)\n    \n", "n, m = map(int, input().split())\na = [[] for i in range(m)]\nfor _ in range(n):\n    t, s = map(int, input().split())\n    a[t - 1].append(s)\npre = [0] * n;\nfor i in range(m):\n    a[i].sort(reverse = True)\n    sum = 0; k = len(a[i])\n    for j in range(k):\n        sum = sum + a[i][j]\n        if sum < 0: break\n        pre[j] = pre[j] + sum\nprint(max(max(pre), 0))", "import heapq, itertools, sys\nNEGINF = -sys.maxsize\n\nn, m = map(int, sys.stdin.readline().split())\nskills_of_subject = {}\nfor i in range(1, m + 1):\n    skills_of_subject[i] = []\nfor i in range(n):\n    s, r = map(int, sys.stdin.readline().split())\n    skills_of_subject[s].append(r)\n\ncumul_subject_score_for_n_participants = {s : list(itertools.accumulate(sorted(skills_of_subject[s], key=lambda x: -x))) for s in skills_of_subject.keys()}\n\n\nsubject_with_atleast_nparts = {0 : skills_of_subject.keys()}\nfor i in range(1, n + 1):\n    subject_with_atleast_nparts[i] = list(filter(lambda sid : len(skills_of_subject[sid]) >= i, subject_with_atleast_nparts[i - 1]))\n#subject_with_atleast_nparts = {i : list(filter(lambda sid : len(skills_of_subject[sid]) >= i, skills_of_subject.keys())) for i in range(1, n + 1)}\n\ncurr_max = 0\nfor nParticipants in range(1, n+1):\n    subject_army_by_competence = sorted([cumul_subject_score_for_n_participants[s][nParticipants - 1] for s in subject_with_atleast_nparts[nParticipants]], key=lambda x: -x)\n    total_competence = 0\n    for i in range(len(subject_army_by_competence)):\n        total_competence += subject_army_by_competence[i]\n        curr_max = max(curr_max, total_competence)\n\nprint (curr_max)"]