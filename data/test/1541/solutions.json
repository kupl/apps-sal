["s = input()\nsuc = 0\np = 0\nkde = 0\nfor i in range(len(s)):\n\tc = s[i]\n\tif c == '^':\n\t\tkde = i\nfor i in range(len(s)):\n\tc = s[i]\n\tif '1' <= c <= '9':\n\t\tsuc+=((kde-i)*int(c))\n\t\tp+=1\nif suc < 0:\n\tprint(\"right\")\nelif suc > 0:\n\tprint(\"left\")\nelse:\n\tprint(\"balance\")\n", "string = list(input());\n\nleft = []\nright = []\nleftTotal = 0\nrightTotal = 0\nrightSide = False\npivot = -1\nfor i in range(len(string)):\n\tif string[i] == \"^\":\n\t\tpivot = i\n\nfor i in range(len(string)):\n\tif \"1\" <= string[i] <= \"9\":\n\t\tif rightSide == False:\n\t\t\tleftTotal += (int(string[i]) * (pivot-i))\n\t\telse:\n\t\t\trightTotal += (int(string[i]) * (i-pivot))\n\nif leftTotal > rightTotal:\n\tprint(\"left\")\nelif leftTotal < rightTotal:\n\tprint(\"right\")\nelse:\n\tprint(\"balance\")\n", "def main():\n    string=input()\n    fulcrum=string.index('^')\n    mass_left=0\n    mass_right=0\n    for i in range(0,fulcrum):\n        if string[i] != '=':\n            mass_left+=int(string[i]) * (fulcrum-i)\n    for i in range(fulcrum+1,len(string)):\n        if string[i] != '=':\n            mass_right+=int(string[i])*(i-fulcrum)\n\n    if mass_left==mass_right:\n        print (\"balance\")\n        return\n    if mass_left<mass_right:\n        print(\"right\")\n        return\n    if mass_right<mass_left:\n        print(\"left\")\n        return\ndef __starting_point():\n    main()\n__starting_point()", "x=input()\nind=x.index(\"^\")\n\nw1=x[0:ind]\nw2=x[ind+1:]\n\nleft=0\nright=0\nfor i in range (0,ind):\n    if (x[i]== \"=\"):\n        left+=0\n    else:\n        left+=(int(x[i]))*(ind-i)\n\nfor j in range (ind+1,len(x)):\n    if (x[j]==\"=\"):\n        right+=0\n    else:\n        right+=(int(x[j]))*(j-ind)\n\nif (left>right):\n    print (\"left\")\nif (left<right):\n    print (\"right\")\nif (left==right):\n    print (\"balance\")\n    \n", "s = input()\n\npivot_pos = 0\nleft_count = 0\nright_count = 0\n\n''''def is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n    try:\n        import unicodedata\n        unicodedata.numeric(s)\n        return True\n    except (TypeError, ValueError):\n\t\treturn False'''\n\n# Find the pivot\nfor i in range(len(s)):\n\tif s[i] == '^':\n\t\tpivot_pos = i \n\n# Solve left side\nfor i in range(pivot_pos):\n\tif s[i].isdigit() == True:\n\t\tleft_count = left_count + (int(s[i]) * (pivot_pos - i))\n\n# Solve left side\nfor i in range(pivot_pos, len(s)):\n\tif s[i].isdigit() == True:\n\t\tright_count = right_count + (int(s[i]) * (i - pivot_pos))\n\nif left_count == right_count:\n\tprint(\"balance\")\nelif left_count > right_count:\n\tprint(\"left\")\nelse:\n\tprint(\"right\")", "def get_sum(side):\n    result = 0\n    \n    for i in range(len(side)):\n        result += side[i][0] * side[i][1]\n\n    return result\n\ndef main():\n    left = []\n    right = []\n\n    s = input()\n    # s = \"=^==\"\n    middle_pos = s.index(\"^\")\n    for i in range(len(s)):\n        if s[i] == \"=\" or s[i] == \"^\":\n            continue\n\n        if i < middle_pos:\n            left.append((int(s[i]), abs(middle_pos - i)))\n        else:\n            right.append((int(s[i]), abs(middle_pos - i)))\n\n    left_sum = get_sum(left)\n    right_sum = get_sum(right)\n\n    if left_sum > right_sum:\n        print(\"left\")\n    elif right_sum > left_sum:\n        print(\"right\")\n    else:\n        print(\"balance\")\n\ndef __starting_point():\n    main()\n\n__starting_point()", "# -*- coding: utf-8 -*-\n\ndef solve(s):\n    sl, sr = s.split('^')\n    left = sum([(i + 1) * int(c) for i, c in enumerate(reversed(sl)) if c.isdigit()])\n    right = sum([(i + 1) * int(c) for i, c in enumerate(sr) if c.isdigit()])\n    # print(left, right)\n    if left > right:\n        return \"left\"\n    elif left == right:\n        return \"balance\"\n    else:\n        return \"right\"\n    \n\ns = input()\nprint(solve(s))\n\n", "\ndef weight(s):\n    w, i = 0, 1\n    for c in s:\n        if c != '=':\n            w += i*int(c)\n        i += 1\n    return w\n\ndef main():\n    line = input()\n    l, r = line.split('^')\n    l = weight(l[::-1])\n    r = weight(r)\n    if l > r:\n        print('left')\n    elif l < r:\n        print('right')\n    else:\n        print('balance')\n\ndef __starting_point():\n    main()\n__starting_point()", "s = input();\n\nsumleft = 0;\nsumrigth = 0;\nsumtemp = 0;\npressed = 0;\nstep = 1;\n\nfor a in s :\n    if (a == '^') :\n        pressed = 1;\n        step = 1;\n    else :\n        if (a == '=') : a = 0;\n        else : a = int(a);\n\n        if (pressed == 0) :\n            sumleft += sumtemp + a;\n            sumtemp += a;\n        if (pressed == 1) :\n            sumrigth += step * a;\n            step = step + 1;\n\n\nif (sumleft == sumrigth) :\n    print (\"balance\");\nif (sumleft > sumrigth) :\n    print (\"left\");\nif (sumleft < sumrigth) :\n    print (\"right\");", "a = input().strip()\nn= len(a)\nc = a.index('^')\nl,r = 0,0\nfor i in range(c):\n    if a[i].isdigit():\n        l+=(c-i)*int(a[i])\nfor i in range(c+1,n):\n    if a[i].isdigit():\n        r+=(i-c)*int(a[i])\nif l==r:\n    print('balance')\nelif l>r:\n    print('left')\nelse:\n    print('right')\n", "m=input()\nn = len(m)\nk,o=0,0\nfor i in range(n):\n    if m[i]=='^':\n        l=i\nfor i in range(l):\n    if m[i].isdigit():\n        k+=int(m[i])*(l-i)\nfor i in range(l,n):\n    if m[i].isdigit():\n        o+=int(m[i])*(i-l)        \nif k==o:\n    print('balance')\nelif k>o:\n    print('left')\nelse:\n    print('right')\n", "t = input()\ns, k = 0, t.find('^')\nfor i, j in enumerate(t[: k]):\n    if j != '=': s += int(j) * (k - i)\nfor i, j in enumerate(t[k + 1: ], 1):\n    if j != '=': s -= int(j) * i\nif s > 0: print('left')\nelif s < 0: print('right')\nelse: print('balance')", "s=input()\nx=s.index('^')\nans=0\nfor i in range(len(s)):\n    if(s[i]=='=' or s[i]=='^'):\n        continue\n    if(i<x):\n        ans+=int(s[i])*(x-i)\n    else:\n        ans-=int(s[i])*(i-x)\nif(ans==0):\n    print(\"balance\")\nelif(ans>0):\n    print(\"left\")\nelse:\n    print(\"right\")", "s = input()\no = s.find('^')\na = list(int(s[i]) if s[i].isdigit() else 0 for i in range(len(s))) \nsumma = 0\nfor i in range(len(s)):\n    summa += (i-o) * a[i]\nif summa < 0:\n    print ('left')\nelif summa == 0:\n    print('balance')\nelse:\n    print('right')", "n = input()\n\nzn = 0\nwyn = 0\nfor i in range(len(n)):\n    if n[i]=='^':\n        zn = i\nfor i in range(len(n)):\n    if n[i]!='^' and n[i]!='=':\n        wyn += (zn-i)*int(n[i])\n\n#print(wyn)\nif wyn==0:\n    print(\"balance\")\nelif wyn>0:\n    print(\"left\")\nelse:\n    print(\"right\")", "sum=0\nseq=input()\nind=seq.index(\"^\")\nfor i in range(len(seq)):\n    if seq[i].isdigit():\n        sum+=(ind-i)*int(seq[i])\nif sum==0:\n    print(\"balance\")\nelif sum>0:\n    print(\"left\")\nelse:\n    print(\"right\")", "__author__ = 'asmn'\ns=input()\npivot=s.find('^')\nres=sum(map(lambda i_x:int(i_x[1])*(i_x[0]-pivot) if i_x[1].isdigit() else 0,enumerate(s)))\nprint('left' if res<0 else 'right' if res>0 else 'balance')", "s = str(input())\nfor cont in range(0,len(s)):\n    if s[cont] == '^':\n        pos = cont\n        break\n\nleft = 0\nright = 0\nfor d in range(0, pos):\n    if s[d].isdigit():\n        left += int(s[d])*(pos-d)\n\nfor d in range(pos+1,len(s)):\n    if s[d].isdigit():\n        right += int(s[d])*(d-pos)\n\nif left == right:\n    print('balance')\nelif right> left:\n    print('right')\nelse:\n    print('left')", "s=input()\nn=len(s)\nfor i in range(n):\n    if s[i]=='^': \n        x=i\n        break\na=b=0\nfor i in range(x):\n    if s[i]>='1' and s[i]<='9': a+=(int(s[i])-int('0'))*(x-i)\nfor i in range(x,n):\n    if s[i]>='1' and s[i]<='9': b+=(int(s[i])-int('0'))*(i-x)\nif a==b: print('balance')\nelse: print('left' if a>b else 'right')\n", "s = input()\nfor i in range(len(s)):\n    if s[i] == '^':\n        o = i\nl = s[0:o]\nr = s[o+1:len(s)]\nl_sum = r_sum = 0\nfor i in range(len(l)):\n    if not (l[i] == '='):\n        l_sum += int(l[i]) * (len(l) - i)\n        \nfor i in range(len(r)):\n    if not (r[i] == '='):\n        r_sum += int(r[i]) * (i+1)# + 1)\nif l_sum < r_sum:\n    print('right')\nelif l_sum > r_sum:\n    print('left')\nelse:\n    print('balance')", "# -*- coding: utf-8 -*-\n\ns1, s2 = input().split('^')\ns1 = s1[::-1]\n\nl1 = sum([(i+1) * int(s1[i]) for i in range(len(s1)) if s1[i] != '='])\nl2 = sum([(i+1) * int(s2[i]) for i in range(len(s2)) if s2[i] != '='])\n\nprint('balance' if l1==l2 else 'left' if l1>l2 else 'right')\n", "s=input().strip()\nl=0\nr=0\nfor i in range(len(s)):\n    if s[i]=='^': p=i\nfor i in range(len(s)):\n    if '1'<=s[i]<='9':\n        if i>p:\n            r+=int(s[i])*(i-p)\n        else:\n            l+=int(s[i])*(p-i)\nif l>r:\n    print('left')\nelif l==r:\n    print('balance')\nelse:\n    print('right')", "s = input().split(\"^\")\ns[0] = s[0][::-1]\nm = lambda k: sum((ord(s[k][i]) - ord(\"0\")) * (i + 1) for i in range(len(s[k])) if s[k][i] != \"=\")\na, b = m(0), m(1)\nprint(\"left\" if a > b else \"right\" if a < b else \"balance\")"]