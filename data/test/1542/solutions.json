["import bisect\nn = int(input())\np = list(map(int, input().split()))\np.sort()\nq = int(input())\nfor i in range(q):\n    c = int(input())\n    print(bisect.bisect_right(p, c))\n    \n", "from bisect import bisect_right\n\nn = int(input())\nx = list(map(int, input().split()))\nq = int(input())\nx.sort()\nfor i in range(q):\n    m = int(input())\n    print(bisect_right(x, m))", "from bisect import bisect\nn = int(input())\nshops = [int(i) for i in input().split()]\nshops.sort()\nq = int(input())\nfor _ in range(q):\n    m = int(input())\n    print(bisect(shops, m))\n", "from bisect import bisect_right\ndef main():\n\tn = int(input())\n\tx = list(map(int, input().split()))\n\tx.sort()\n\tq = int(input())\n\tfor i in range(q):\n\t\tm = int(input())\n\t\tres = bisect_right(x, m)\n\t\tprint(res)\n\n\n\n\n\ndef __starting_point():\n\tmain()\n__starting_point()", "import bisect\nn = int(input())\nx = [int(x) for x in input().split()]\nq = int(input())\nx.sort()\ns = ''\nfor i in range(q):\n    m = int(input())\n    t = bisect.bisect(x, m)\n    s += str(t) + '\\n'\nprint(s)", "def UpperBound(A, key):\n    left = -1\n    right = len(A)\n    while right > left + 1:\n        middle = (left + right) // 2\n        if A[middle] > key:\n            right = middle\n        else:\n            left = middle\n    return right\n\nn = int(input())\nN = sorted(list(map(int,input().split())))\nq = int(input())\n\nM = [0] * q\n\nfor i in range(q):\n    m = int(input())\n    print(UpperBound(N, m))\n\n", "def b_s(a, key):\n    left = -1\n    right = len(a)\n\n    while right - left > 1:\n        m = (left + right) // 2\n        if a[m] > key:\n            right = m\n        else:\n            left = m\n    return right\n\nn = int(input())\ncost = sorted(list(map(int, input().split())))\nq = int(input())\n\nfor i in range(q):\n    m = int(input())\n    x = b_s(cost, m)\n    print(x)", "#!/usr/bin/env python3\n\nfrom bisect import bisect\n\nn = int(input())\nx = sorted([int(x) for x in input().split()])\nq = int(input())\nfor _ in range(q):\n    m = int(input())\n    print(bisect(x, m))\n\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\nn   = int(input())\nx   = [int(i) for i in input().split()]\n\nq   = int(input())\n\n\nx   = sorted(x)\nbuy = [0]\nj   = 0\n\nfor i in range(1, x[n-1]+1):\n    s = 0\n    while(j < n and x[j] == i ):\n        s += 1\n        j += 1\n    buy.append(buy[i-1] + s)\n\nans = []\nfor i in range(q):\n    m = int(input())\n    if m < len(buy):\n        ans.append(buy[m])\n    else:\n        ans.append(n)\n\nstart = time.time()\n\nfor i in range(q):\n    print(ans[i])\n\nfinish = time.time()\n#print(finish - start)\n", "from bisect import bisect\nt = input\np = print\nr = range\nn = int(t())\nx = list(map(int, t().split()))\nq = int(t())\na = [0] * q\nfor i in r(q):\n    a[i] = int(t())\n\nx.sort()\nfor i in a:\n    index = bisect(x, i)\n    p(index)", "import bisect\n\nn = int(input())\nx = [int(x) for x in input().split()]\nq = int(input())\nx.sort()\nfor i in range(q):\n    m = int(input())\n    print(bisect.bisect_right(x,m))", "def bp(n, t):\n\tl = 0\n\tr = n\n\twhile r - l > 1:\n\t\tm = l + (r - l) // 2\n\t\tif x[m] <= t:\n\t\t\tl = m\n\t\telse:\n\t\t\tr = m\n\tif x[l] > t:\n\t\tl = -1\n\treturn l + 1\n\nn = int(input())\nx = [int(i) for i in input().split()]\nx.sort()\nq = int(input())\nfor k in range(q):\n\ttmp = int(input())\n\tprint(bp(n, tmp))\n\t\n", "def bin_search(a):\n    nonlocal prices\n    nonlocal n\n    l, r = 0, n - 1\n    while l < r:\n        m = (l + r + 1) // 2\n        if prices[m] <= a:\n            l = m\n        else:\n            r = m - 1\n    return l\n\n\nn = int(input())\nprices = sorted(list(map(int, input().split())))\nq = int(input())\nfor i in range(q):\n    money = int(input())\n    ans = bin_search(money)\n    print(ans + 1 if money >= prices[0] else 0)\n", "import bisect\n\nn = int(input())\nx = list(map(int, input().split()))\nq = int(input())\n\nx.sort()\n\nx0 = min(x)\nx1 = max(x)\n\nfor i in range(q):\n    m = int(input())\n    if m < x0:\n        print(0)\n    elif m > x1:\n        print(n)\n    else:\n        print(bisect.bisect_left(x, m+1))\n", "def binarysearch(A, key):\n    l = -1\n    r = len(A)\n    while r > l+1:\n        m = (l + r) // 2\n        if A[m] > key:\n            r = m\n        else:\n            l = m\n    return l\n\nn = int(input())\nlst = [int(i) for i in input().split()]\nlst.sort()\nm = int(input())\nt = []\nfor i in range(m):\n\tx = int(input())\n\tt.append(binarysearch(lst, x))\nfor i in t:\n\tprint(i+1)\n\n", "import sys\nline = sys.stdin.readlines()\nn = int(line[0])\nx = list(map(int, line[1].split()))\nx.sort()\n\nq = int(line[2])\ny = []\nfor i in range(q):\n    y.append((int(line[i+3]), i))\ny.sort()\n\nans = []\nj = 0\ncnt = 0\nfor m, i in y:\n    while j < n and m >= x[j]:\n        cnt += 1\n        j += 1\n    ans.append((i, cnt))\nans.sort()\n\nfor i, a in ans:\n    print(a)\n", "n = int(input())\nx = list(map(int, input().split(\" \")))\nx.sort()\nq = int(input())\nm = list()\n\nfor i in range(q):\n\tm_i = int(input())\n\tm.append([i, m_i, 0])\n\nm.sort(key = lambda x: x[1])\n# print(m)\n\ni = 0\nj = 0\ncount = 0\nwhile j < q:\n\tif i == n:\n\t\tm[j][2] = count\n\t\tj += 1\n\t\tcontinue\n\n\tif x[i] <= m[j][1]:\n\t\tcount += 1\n\t\ti += 1\n\telse:\n\t\tm[j][2] = count\n\t\tj += 1\n\n\nm.sort(key = lambda x: x[0])\n# print(m)\nfor x in m:\n\tprint(x[2])", "def bs(arr,m):\n    n=len(arr)    \n    low = 0\n    high = n \n    while (low != high):\n        mid = (low + high) // 2\n        if (arr[mid] <= m):\n            low = mid + 1\n        else:\n            high = mid\n    return low\n\nn=int(input())\nip=list(map(int,input().split()))\nip=sorted(ip)\nfor i in range(int(input())):\n    m=int(input())\n    print(bs(ip,m))\n", "n = int(input())\nx = [int(i) for i in input().split()]\nx = sorted(x)\nq = int(input())\nimport bisect\ndef upperbound(m):\n\tind = bisect.bisect(x,m)\n\treturn ind\n\t\t\n\nfor i in range(q):\n\tm = int(input())\n\tprint(upperbound(m))", "import bisect\n\nn_shops = int(input())\nprices = [int(x) for x in input().split(' ')]\nprices.sort()\nn_days = int(input())\nfor day in range(n_days):\n    coins = int(input())\n    N = bisect.bisect(prices, coins)\n    print(N)\n\n\n", "from sys import stdin,stdout\n\nnbMagasins=int(stdin.readline())\nprix=list(map(int,stdin.readline().split()))\nprix.sort()\nq=int(stdin.readline())\n\nfor i in range(q):\n    prixMax=int(stdin.readline())\n\n    inf=0\n    sup=nbMagasins-1\n\n    while sup>inf:\n        milieu=(inf+sup)//2\n        if prix[milieu]>prixMax:\n            sup=milieu\n        else:\n            inf=milieu+1\n\n    if prixMax<prix[0]:\n        print(0)\n    elif prixMax>=prix[-1]:\n        print(nbMagasins)\n    else:\n        print(inf)\n\n", "n=int(input())\nls=sorted(map(int,input().split()))\nq=int(input())\nl=[0]*(ls[-1]+1)\nfor x in ls:\n    l[x]+=1\nfor i in range(1,ls[-1]+1):\n    l[i]+=l[i-1]\nans=[]\nfor _ in range(q):\n    x=int(input())\n    if x<=ls[-1]:\n        ans+=[str(l[x])]\n    else:\n        ans+=[str(l[-1])]\nprint('\\n'.join(ans))", "import bisect\n\nn = int(input())\nx = list(map(int, input().split()))\nx.sort()\nq = int(input())\na = []\nfor i in range(q):\n    v = int(input())\n    i = bisect.bisect_right(x, v)\n    print(i)\n"]