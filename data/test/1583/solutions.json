["import math\na, b, x = map(int,input().split())\ns = a\nt = 2*(b-x/(a*a))\nu = x*2/(b*a)\nif t<=b:\n    print(math.degrees(math.atan(t/s)))\nelse:\n    print(math.degrees(math.atan(b/u)))", "import math\na, b, x = list(map(int, input().split()))\nfull = a * a * b\nif x > full / 2:\n    x = full - x\n    tan_x = 2.0 * x / (a*a) / a\n    print((math.atan(tan_x) / math.pi * 180.0))\nelse:\n    tan_x = 2.0 * x / (a*b) / b\n    print((90-math.atan(tan_x) / math.pi * 180.0))\n", "#!/usr/bin/env python3\nimport math\n\n\ndef main():\n    a, b, x = list(map(int, input().split()))\n\n    if a * a * b / 2 <= x:\n        ans = math.atan(2 * (a * a * b - x) / (a * a * a))\n    else:\n        ans = math.pi / 2 - math.atan(2 * x / (a * b * b))\n\n    print((math.degrees(ans)))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from math import pi, tan, atan, degrees\n \na, b, x = [int(i) for i in input().split()]\n \ntheta = (pi * 0.5) - atan(2 * x / (a * b**2))\n \nif b * tan(pi * 0.5 - theta) <= a:\n    print(degrees(theta))\n\nelse:\n    theta = atan(((2 * b) / a) - (2 * x / a**3))\n    print(degrees(theta))", "from math import atan2, degrees\n\na, b, x = list(map(int, input().split()))\n\nif a * a * b / 2 >= x:\n    c = 2 * x / a / b\n    print((degrees(atan2(b, c))))\nelse:\n    c = 2 * x / a / a - b\n    print((degrees(atan2(b - c, a))))\n", "a,b,x = map(int,input().split())\nv = a*a*b\nimport math\nif v/2 >= x:\n    print(math.degrees(math.atan(a*b*b/(2*x))))\nelse:\n    print(math.degrees(math.atan(2*(v-x)/(a**3))))", "import math\n\ndef f(d):\n  theta = d * math.pi /180\n  if a * math.tan(theta) <= b:\n    return a*a*b - a*a*a*math.tan(theta)/2\n  else:\n    return a*b*b/(2*math.tan(theta))\n\na, b, x = map(int, input().split())\nl, r = 0.0, 90.0\nfor i in range(1000):\n  m = (l+r)/2\n  if f(m) <= x: r = m\n  else: l = m\nprint('{0:.10f}'.format(l))", "import math\na, b, x = [int(i) for i in input().split()]\nif a**2 * b / 2 <= x:\n  y = 2 * x / a**2 - b\n  tntheta = (b - y) / a\nelse:\n  y = a - 2 * x / (a * b)\n  tntheta = b / (a - y)\nprint(math.degrees(math.atan(tntheta)))", "a,b,x=map(int, input().split())\n\nimport math\nif 0.5*a**2*b<=x:\n    print(math.degrees(math.atan((2*a**2*b-2*x)/a**3)))\nelse:\n    print(math.degrees(math.atan((a*b**2)/(x*2))))", "#!/usr/bin/env python3\nfrom collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(500000)\nINF = float(\"inf\")\nYES, Yes, yes, NO, No, no = \"YES\", \"Yes\", \"yes\", \"NO\", \"No\", \"no\"\ndy4, dx4 = [0, 1, 0, -1], [1, 0, -1, 0]\ndy8, dx8 = [0, -1, 0, 1, 1, -1, -1, 1], [1, 0, -1, 0, 1, 1, -1, -1]\n\n\ndef inside(y, x, H, W):\n    return 0 <= y < H and 0 <= x < W\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\ndef sum_of_arithmetic_progression(s, d, n):\n    return n * (2 * s + (n - 1) * d) // 2\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a / g * b\n\n\nimport math\n\n\ndef solve():\n    A, B, X = list(map(int, input().split()))\n    X /= A\n\n    # \u53f0\u5f62\n    if X > A * B / 2:\n        rest = A * B - X\n        h = 2 * rest / A\n        r = math.atan(h / A)\n        print((math.degrees(r)))\n    else:\n        h = 2 * X / B\n        r = math.atan(B / h)\n        print((math.degrees(r)))\n\n\ndef main():\n    solve()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import numpy as np\na, b, x = map(int,input().split())\nif x >= a**2*b/2:\n    ans = np.arctan(2*(b-x/a**2)/a)\nelse:\n    ans = np.arctan(a*b/2/x*b)\nprint(ans*180/np.pi)", "from math import pi\nfrom math import atan2\n\na, b, x = map(float, input().split())\nans = 0\nx /= a\nif (x > a*b / 2): \n    ans = atan2((a*b-x)*2, a*a) * 180 / pi\nelse:\n    ans = atan2(b*b, x*2) * 180 / pi\nprint (ans)", "import math\na,b,x = map(int,input().split())\ny = (a**2)*b\nh = x/(a**2)\n\ndef get_angle_from_sides(a, b, c):\n    return math.acos((a ** 2 + b ** 2 - c ** 2) / (2 * a * b))\n\ndef checkio(a, b, c):\n    try:\n        angles = [get_angle_from_sides(*abc) for abc in ((a, b, c), (b, c, a), (c, a, b))]\n        result = sorted((math.degrees(a)) for a in angles)\n        return [0, 0, 0] if 0 in result else result\n    except ValueError:\n        return [0, 0, 0]\ncount = 0\nif y == x:\n  pass\nelif y/2 <=x:\n  if a>=2*(b-h):\n    m = checkio(a,2*(b-h),math.sqrt(a**2+(2*(b-h))**2))\n    count = m[0]\n  elif a<2*(b-h):\n    m = checkio(a,2*(b-h),math.sqrt(a**2+(2*(b-h))**2))\n    count = m[1]\nelif y/2>x:\n  z = 2*x/(a*b)\n  if b>=z:\n    m = checkio(b,z,math.sqrt(b**2+(z)**2))\n    count = m[1]\n  elif b<z:\n    m = checkio(b,z,math.sqrt(b**2+(z)**2))\n    count = m[0]\n#print(a,2*(b-h),math.sqrt(a**2+2*(b-h)**2),m)\nprint(count)", "a,b,x=list(map(int,input().split()))\nimport math\nx=x/a\nif a*b/2<x:\n   print(math.degrees(math.atan(2*(a*b-x)/a**2)))\nelse:\n   print(math.degrees(math.atan(b**2/(2*x))))", "import math\na,b,x=map(float,input().split())\nvolume=a**2*b\nif volume<x*2:\n    sub=volume-x\n    sub=sub/a*2/a\n    ans=math.degrees(math.atan(sub/a))\nelse:\n    x=x/a*2/b\n    ans=90.0-math.degrees((math.atan(x/b)))\nprint(ans)", "import math\n\na,b,x=list(map(int,input().split()))\nans=0\n\nif a**2*b<2*x:\n    ans = math.degrees(math.atan2(2*(a**2*b-x), a**3))\nelse:\n    ans = math.degrees(math.atan2(a*b**2, 2*x))\n\nprint(ans)\n", "a,b,x=list(map(int,input().split()))\nimport math\n\nif x>=a*a*b/2:\n    print((math.degrees(math.atan((b-x/(a*a))/(a/2)))))\nelse:\n    print((90-math.degrees(math.atan(((2*x)/(b*a))/b))))\n", "import numpy as np\n \na, b, x = map(int, input().split())\n \nif x == a**2*b:\n    print(0)\n    return\n \nif x < 1/2*b*a**2:\n    a1 = 2*x/(a*b)\n    rad = np.arctan(a1/b)\nelse:\n    y = 2*(b-x/a**2)\n    rad = np.arctan(a/y)\n \nprint(90-rad*180/np.pi)", "import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b//math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\n\na,b,x = I()\n\nif (a**2*b)<=2*x:\n    c = 2*(a**2*b-x)/a**3\nelse:\n    c = (a*b**2)/(2*x)\n\nprint(math.degrees(math.atan(c)))", "import numpy\na,b,x=list(map(int,input().split()))\nV=a*a*b\nif x<=V/2:\n    y=2*x/b/a\n    theta=numpy.arctan(b/y)\n    print((theta*360/2/numpy.pi))\nelse:\n    x=V-x\n    y=2*x/a/a\n    theta=numpy.arctan(y/a)\n    print((theta*360/2/numpy.pi))\n", "import math\nimport decimal\na,b,x = map(int, input().split(\" \"))\nif a * a * b * 0.5 < x:#\u591a\u3044\n  print(math.atan((2 * b - (2 * x / a / a))/a) * 180 / math.pi)\nelse:#\u5c11\u306a\u3044\n  print(90 - math.atan(2 * x / (a * b * b)) * 180 / math.pi)", "import math\ndef main():\n    a, b, x = map(int, input().split())\n\n    ans = 0\n    if 2*x >= (a**2)*b:\n        ans = math.atan((x/a - a*b)*(-2/a**2))*180/math.pi\n    else:\n        ans = math.atan(a*b**2/(2*x))*180/math.pi\n\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import math\n\ndef resolve():\n    a, b, x = map(int, input().split())\n    met = a ** 2 * b / 2\n    if x > met:\n        y = 2 * b - 2 * x / a**2\n        ans = math.atan2(y, a)\n    elif x == met:\n        ans = math.pi / 4\n    else:\n        y = 2 * x / a / b\n        ans = math.pi / 2 - math.atan2(y, b)\n\n    print(math.degrees(ans))\n    \nresolve()", "import math\na, b, x = map(int, input().split())\nc = x/a**2  # c : height of water\n\nif c >= b/2:\n    tanth = 2*(b-c)/a\n    deg = math.atan(tanth)*180/math.pi\nelse:\n    tanth = b**2/(2*a*c)\n    deg = math.atan(tanth)*180/math.pi\n\nprint(deg)", "import math\n\na, b, x = list(map(int, input().split()))\nv = a*a*b\nif v == x:\n    print((0))\nelif v/2 <= x < v:\n    h = 2*(v-x)/a**2\n    ans = math.atan(h/a)\n    print((math.degrees(ans)))\nelse:\n    h = 2*x/(b*a)\n    ans = math.atan(h/b)\n    print((90-math.degrees(ans)))\n", "from math import atan, degrees\n\ndef main():\n    a, b, x = map(int, input().split())\n    # x\u304c\u591a\u3044\u5834\u5408\uff1a\u6c34\u304c\u4e09\u89d2\u5f62\u306b\u306a\u308b\u524d\u306b\u6ea2\u308c\u308b\u30d1\u30bf\u30fc\u30f3\n    if (a**2*b) / 2 < x:\n        # \u6c34\u3058\u3083\u306a\u3044\u3068\u3053\u308d\u304c\u4e09\u89d2\u5f62 \u3092 area\n        area = a * b - x/a\n        c = 2 * area / a \n        # theta\u304c\u9006\u3060\u304b\u3089\n        t = c / a\n        ans = degrees(atan(t))\n    else:\n        # \u9762\u7a4d\u3067\u8003\u3048\u308b\u306e\u3067\u6c34\u306e\u91cf/\u5965\u884c\u304d\n        area = x / a\n        c = 2 * area / b\n        t = b / c\n        ans = degrees(atan(t))\n    print(ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "from math import tan, atan2, pi, degrees\n\n\ndef f(theta):\n    if theta < thres:\n        return V - a ** 3 * tan(theta) / 2\n    else:\n        return a * b * b / tan(theta) / 2\n\n\neps = 1e-9\na, b, x = list(map(int, input().split()))\nV = a * a * b\nthres = atan2(b, a)\n\nbad, good = pi / 2, 0\nwhile bad - good > eps:\n    mid = (bad + good) / 2\n    if f(mid) >= x:\n        good = mid\n    else:\n        bad = mid\nprint((degrees(good)))\n", "import math\npi=math.pi\ndef rtod(rad):\n    return 180/pi*rad\na,b,x=list(map(int,input().split()))\n\n\nif b/2<x/a**2:\n    ans=2*(a**2*b-x)/a**3\n    ans=math.atan(ans)\n    print((rtod(ans)))\nelse:\n    ans=b**2/(2*x)*a\n    ans=math.atan(ans)\n    print((rtod(ans)))\n", "import math as m\na,b,x=map(int,input().split())\nx/=a\nP=m.acos(-1.0)\nif x>a*b/2:print(m.atan2((a*b-x)*2,a*a)*180/P)\nelse:print(m.atan2(b*b,x*2)*180/P)", "'''\nCreated on 2020/08/27\n\n@author: harurun\n'''\ndef main():\n  import math\n  import sys\n  pin=sys.stdin.readline\n  pout=sys.stdout.write\n  perr=sys.stderr.write\n  \n  a,b,x=map(int,pin().split())\n  if 2*x>a*a*b:\n    print(math.degrees(math.atan((2*b*a*a-2*x)/(a*a*a))))\n  else:\n    print(math.degrees(math.atan(a*b*b/(2*x))))\n  return \n\nmain()", "import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b//math.gcd(a,b)\nsys.setrecursionlimit(10 ** 6)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\nal = \"abcdefghijklmnopqrstuvwxyz\"\nAL = al.upper()\n\na,b,x = I()\n \nif (a**2*b)<=2*x:\n    c = 2*(a**2*b-x)/a**3\nelse:\n    c = (a*b**2)/(2*x)\n \nprint(math.degrees(math.atan(c)))", "#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)//2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nINF = float('inf')\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n    return int(readline())\na,b,x = readInts()\nx /= a\nimport math\nPI = math.pi\nif x > a*b//2:\n    print((\"{:.10}\".format(math.atan2((a*b-x)*2, a*a)*180/PI)))\nelse:\n    print((\"{:.10}\".format(math.atan2(b*b, x*2)*180/PI)))\n", "import math\na,b,x = map(int,input().split())\nif x>=a*a*b*0.5:\n    theta = math.degrees(math.atan(2*(a*a*b-x)/a**3))\nelse:\n    theta = math.degrees(math.atan(0.5*a*b*b/x))\nprint(theta)", "# \u554f\u984c: https://atcoder.jp/contests/abc144/tasks/abc144_d\n\nimport math\na, b, x = list(map(int, input().strip().split()))\nif a * a * b / 2 < x:\n    res = b\n    res -= x/(a*a)\n    res *= 2\n    res /= a\nelse:\n    res = a * b * b\n    res /= 2 * x\nres = math.atan(res)\nres = math.degrees(res)\nprint(res)\n\n", "import math\na, b, x = list(map(int, input().split()))\n\nif x/a < a*b/2:\n    print(math.atan(a*b*b/(2*x))*180/math.pi)\nelse:\n    print(math.atan(2/a * (b-x/a**2))*180/math.pi)", "a,b,x=map(int,input().split())\n\nx/=a\n\nimport math\n\nif x/a/b>1/2:\n  # ab-0.5a**2*tan(th)=x\n  # tan(th)=(a*b-x)*2/a**2\n  tan_th=(a*b-x)*2/a**2\nelse:\n  # 0.5*b**2/tan(th)=x\n  # tan(th)=b**2/2/x\n  tan_th=(b**2/2/x)\nprint(math.degrees(math.atan(tan_th)))", "import math\na, b, x = map(int,input().split())\n\nif x > a*a*b / 2:\n    print(math.atan(2*(a*a*b - x) / (a*a*a)) * (180 / math.pi))\nelse:\n    print(math.atan(a*b*b/(2*x)) * (180 / math.pi))", "import math\na,b,x=map(int,input().split())\ns=a*a*b\nif x>=s/2:\n  tmp=(s-x)/a/a*2\n  print(math.degrees(math.atan(tmp/a)))\nelse:\n  tmp=x/a/b*2\n  print(90.0-math.degrees(math.atan(tmp/b)))", "import math\na,b,x=map(int,input().split())\nL=b*a**2\nif L==x:\n  alfa=0\nelif x >= L/2:\n  h=x/(a**2)\n  beta=math.atan((a/2)/(b-h))\n  alfa=(math.pi)/2 - beta\nelse:\n  alfa=math.atan(b/(2*x/(a*b)))\nprint(math.degrees(alfa))", "import math\na,b,x = map(int,input().split())\nif x>=a*a*b*0.5:\n    theta = math.degrees(math.atan(2*(a*a*b-x)/a**3))\nelse:\n    theta = math.degrees(math.atan(0.5*a*b*b/x))\nprint(theta)", "import math\na, b, x = map(int, input().split())\n\nif x == a**2*b:\n    print(0)\nelif 2*x <= (a**2)*b:\n    print(math.degrees(math.atan((b**2)*a/(2*x))))\nelse :\n    print(90-math.degrees(math.atan((a**3)/(2*((a**2)*b-x)))))", "import sys\nfrom math import *\n\ninput = sys.stdin.readline\n\na, b, x = list(map(int, input().split()))\n\ns = x / a\n\n\nif s > a*b / 2:\n    sankaku = a*b - s\n    h = (a*b - s) * 2 / a \n    print((degrees(atan(h/a))))\nelse:\n    w = 2*s/b\n    print((degrees(atan(b/w))))\n", "import math\na, b, x = map(int, input().split())\nif a*a*b//2 <= x:\n    print(math.degrees(math.atan((a*a*b-x)/a*2/a/a)))\nelse:\n    print(math.degrees(math.atan(b/(x/a*2/b))))", "from math import atan, degrees\na, b, x = list(map(int, input().split()))\nif x == a * b * b:\n    print((0))\nelse:\n    x = x / a ** 2\n    if x >= b / 2:\n        print((90-degrees(atan(a / (2 * b - 2 * x)))))\n    else:\n        print((90-degrees(atan(2 * a * x / b ** 2))))\n", "import math\n\na, b, x = map(int, input().split())\n\nif x/a >= a*b/2:\n    ans = math.atan((b-x/a/a)*2/a)\nelse:\n    ans = math.atan(a*b*b/x/2)\nprint(math.degrees(ans))", "import math\n\ndef slv(n,m):\n    return math.tan(n)*m*m/2\n\na,b,x = map(int,input().split())\nc = a*a/2\nang = (0.50)*math.pi\nsang = ang\nif x>c*b:\n    x = a*a*b-x\n    for i in range(1000):\n        if slv(ang,a)*a>x:\n            ang -= sang/(2**(i+1))\n        else:\n            ang += sang/(2**(i+1))\n    print(math.degrees(ang))\nelse:\n    for i in range(1000):\n        if slv(ang,b)*a>x:\n            ang -= sang/(2**(i+1))\n        else:\n            ang += sang/(2**(i+1))\n    print(math.degrees(math.pi/2-ang))", "from math import atan, degrees\n\ndef angle(a, b, x):\n    return degrees(atan(((a * b ** 2) / ( 2 * x)) if x <= 0.5 * b * a ** 2 else ((2 * (b - (x / (a ** 2)))) / a)))\n\t\nprint(angle(*map(int, input().split())))", "import math\na,b,x = [ int(r) for r in input().split(' ') if len(r) > 0]\n\nif 2*x >= a*a*b:\n    print((90-math.degrees((math.atan2(a,2*(b-x/a**2))))))\nelse:\n    print((90-math.degrees(math.atan2((2*x)/(a*b),b))))\n", "from math import degrees, atan\n\na, b, x = map(int, input().split())\n\nif a * a * b < x * 2:\n    c = 2 * (a * a * b - x) / a ** 3\nelse:\n    c = a * b * b / (2 * x)\n\nprint(degrees(atan(c)))", "import math\na,b,x=map(int,input().split())\nif x>=(1/2)*a*a*b:\n  y=2*(b-x/(a*a))\n  print(math.degrees(math.atan2(y,a)))\nelse:\n  y=2*x/(a*b)\n  print(math.degrees(math.atan2(b,y)))", "import math\na,b,x = map(int,input().split())\nif a*a*b/2 <= x:\n    j = 2*(b/a - x/(a**3))\nelse:\n    j = b*b*a/(2*x)\nans = math.degrees(math.atan(j))\nprint(ans)", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Sep  9 19:58:50 2020\n\n@author: liang\n\"\"\"\n\"\"\"\n\u3010\u4e09\u89d2\u5f62\u306e\u9762\u7a4d\u306e\u516c\u5f0f\u3011\nS = 1/2 * a * b\n\"\"\"\nimport math\na, b, x = map(int, input().split())\nL = math.sqrt((x/a/b)**2 + b**2)\nif x >= a**2*b/2:\n    ans = math.degrees(math.atan((b-x/a**2)/a*2))\nelse:\n    ans = math.degrees(math.atan((a*b**2)/x/2))\n    #ans = math.degrees(math.asin(b/L))\nprint(ans)", "import math\n\na, b, x = [int(_) for _ in input().split()]\n\nh = x / a / a\nif a * b / 2 < a * h:\n    theta = math.atan(2 * (b - h) / a)\nelse:\n    theta = math.atan(b * b / a / h / 2)\n\nans = math.degrees(theta)\nprint(ans)\n", "# ABC 144 D\nimport math\n[a, b, x] = [int(i) for i in input().split()]\nif x <= (a**2) * b / 2:\n    t = (a*b**2)/(2*x)\n    theta = math.atan(t)\nelse:\n    t = (2*b) / a - (2*x) / a**3\n    theta = math.atan(t)\nprint(math.degrees(theta))", "from math import atan2, degrees\na,b,x = map(int, input().split())\n\ns = x/a\nif x >= a**2*b/2:\n  print(degrees(atan2(2*(a*b-s)/a, a)))\nelse:\n  print(degrees(atan2(b, 2*s/b)))", "import math\na,b,x=list(map(int,input().split()))\n\nh=x/a/a\nA=h*a\n\nif A<=b*a/2:\n    L=A/b*2\n    ans=math.degrees(math.atan(b/L))\nelse:\n    L=A*2/a-b\n    ans=math.degrees(math.atan((b-L)/a))\n\nprint(ans)\n", "from math import*\nA,B,X = map(int,input().split())\nV = A*A*B\n\nif V/2<X:\n  print(degrees(atan(2*(V-X)/A**3)))\nelse:\n  print(degrees(atan(A*B*B/2/X)))", "import math\n\ndef main():\n    a,b,x=map(int,input().split())\n    if a**2*b/2<x :\n        theta=math.atan(2*(a**2*b-x)/a**3)\n    else :\n        theta=math.pi/2-math.atan(2*x/(a*b**2))\n    print(theta*180/math.pi)\n\nmain()", "a, b, x = map(int, input().split())\n\nimport math\nif x <= ((a ** 2) * b) / 2:\n    n = 2 * x / (a * b)\n    ans = math.acos(n / (math.sqrt(b ** 2 + n ** 2)))\nelse:\n    n = 2 * b - (2 * x / (a ** 2))\n    ans = math.acos(a / math.sqrt(a ** 2 + n ** 2))\n\nprint(math.degrees(ans))", "import math\n\na, b, x = [int(n) for n in input().split()]\nv = a**2 * b /2\n#print(v, x)\n\nif v == x:\n    theta = math.atan(b/a)\n\nelif v > x:\n    theta = math.atan(a*(b**2)/(2*x))\nelif v < x:\n    theta = math.atan(2/a*(b-x/a**2))\n    \nprint((math.degrees(theta)))\n", "import math\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\na, b, x = LI()\nif x == (a**2*b)/2:\n    ans = 45\nelif x > (a**2*b)/2:\n    ans = math.degrees(math.atan((2*(b-x/(a**2)))/a))\nelse:\n    ans = math.degrees(math.atan(a*b**2/(2*x)))\nprint(ans)\n", "import math\na,b,x = [ int(r) for r in input().split(' ') if len(r) > 0]\n\nif 2*x >= a*a*b:\n    # \u534a\u5206\u3088\u308a\u591a\u3044\n    print(90-math.degrees((math.atan2(a,2*(b-x/a**2)))))\nelse:\n    # \u534a\u5206\u3088\u308a\u5c11\u306a\u3044\n    print(90-math.degrees(math.atan2((2*x)/(a*b),b)))", "import math\na,b,x = map(int,input().split())\n\nif x >= (a**2) * b / 2 :\n    theta = math.atan(2*(b-x/(a**2))/a)\n    print(math.degrees(theta))\nelse :\n    theta = math.pi/2-math.atan(2*x/((a*(b**2))))\n    print(math.degrees(theta))", "import math\na,b,x = map(int,input().split())\n\nif x >= a**2*b/2:\n  y = 2*(a**2*b-x)/(a**2)\n  ans = math.degrees(math.atan(y/a))\nelse:\n  y = 2*x/(a*b)\n  ans = math.degrees(math.atan(b/y))\nprint(ans)", "from math import atan, degrees\na, b, x = map(int, input().split())\n\nif a*a*b <= 2*x:\n    theta = degrees(atan(2*b/a-2*x/(a*a*a)))\nelse:\n    theta = degrees(atan(a*b*b/(2*x)))\nprint(theta)", "import math\na, b, x = map(int, input().split())\nif a*a*b >= 2*x:\n  print(math.degrees(math.atan2(a*b*b,2*x)))\nelse:\n  print(math.degrees(math.atan2(2*(a*a*b-x),a**3)))", "a, b, x = map(int, input().split())\nimport math\n\nS = a*b\ns = x/a\nif s == S:\n  print(0)\n\nelif s >= S/2:\n  em_s = S-s\n  tan = (a**2)/(2*em_s)\n  ans = math.degrees(math.atan(tan))\n  print(90-ans)\n\nelse:\n  tan = (2*s)/(b**2)\n  ans = math.degrees(math.atan(tan))\n  print(90-ans)", "import sys\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\n#mod = 998244353\nINF = 10**18\neps = 10**-7\n\na,b,x=map(int,input().split())\nv=a*a*b-x\nmaxh=v/(a*a)*2\nimport math\nif maxh<=b:\n  print(math.degrees(math.atan(maxh/a)))\nelse:\n  maxh=2*x/(a*b)\n  print(math.degrees(math.atan(b/maxh)))", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return list(map(int, input().split()))\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\ndef main():\n    a,b,x = i_map()\n    if a*a*b<x*2:\n        water_y = x/a**2\n        left_y = b-water_y\n        half_x = a/2\n        d = math.degrees(math.atan(left_y/half_x))\n        print(d)\n    else:\n        c = (x*2)/(a*b)\n        c = math.degrees(math.atan(b/c))\n        print(c)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\n\na, b, x = list(map(int, input().split()))\n\ns = x / a\n\nif s >= a * b / 2:\n    h = (a * b - s) * 2 / a\n    rad = math.atan2(h, a)\nelse:\n    w = s * 2 / b\n    rad = math.atan2(b, w)\n\nprint((rad / (2 * math.pi) * 360))\n", "import math\n\na,b,x = map(int,input().split())\nc = 2*x/(a*b)\n\nif c <= a:\n    ans = 90 - math.degrees(math.atan(c/b))\n    \nelse:\n    d = 2*(a**2 * b - x)/a**2\n    \n    if d == 0:\n        ans = 0\n    else:\n        ans = 90 - math.degrees(math.atan(a/d))\n    \nprint(ans)", "from math import atan, degrees\n\na, b, x = map(int, input().split())\nif x > 1/2 * b * a**2:\n    w = 2 * (b/a - x/a**3)\nelse:\n    w = a * b**2 / (2*x)\nprint(degrees(atan(w)))", "import math\na,b,x=map(int,input().split())\nV=a*a*b\nif 2*x<=V:\n    print(90-math.degrees(math.atan((2*x)/(a*b*b))))\nelse:\n    print(math.degrees(math.atan((2*(a*a*b-x))/(a*a*a))))", "import math\na, b, x = list(map(int, input().split()))\nsq = a*a*b/2\n\nif sq >= x:\n    A1 = 2*x/(a*b)\n    num = math.atan(b/A1)\nelse:\n    B1 = 2*x/a**2 - b\n    num = math.atan((b-B1)/a)\n\nprint((math.degrees(num)))\n", "import math\n\na,b,x = map(int, input().split())\n\nif x >= a*a*b / 2:\n  tan = ((a*a*b - x) * 2) / a**3\n  print(math.degrees(math.atan(tan)))\n\nelse:\n  tan = 2*x / (a*b*b)\n  print(90 - math.degrees(math.atan(tan)))", "import math\ndef at(n):\n\treturn math.degrees(math.atan(n))\n\ndef main():\n\ta, b, x = [int(p) for p in input().split(\" \")]\n\tV = a * a * b\n\tif x < V / 2:\n\t\tprint((at(a * b * b / (2 * x))))\n\telse:\n\t\tprint((at(2*(a*a*b-x)/a**3)))\n\nmain()\n", "import numpy\n\na, b, x = list(map(int, input().split()))\nif a * b / 2 < x / a:\n    theta = numpy.arctan(2 * (b / a - x / a ** 3))\nelse:\n    theta = numpy.arctan(a * b ** 2 / 2 / x)\n\ntheta = numpy.rad2deg(theta)\nprint(theta)\n", "import math\na, b, x = map(int, input().split())\nx = x / a\nif x >= a*b/2:\n  K = (a*b - x)/a*2\n  L = K/math.sqrt(K**2+a**2)\n  ans = math.degrees(math.asin(L))\n  print(ans)\nelse:\n  K = 2*x/b\n  L = b/math.sqrt(K**2+b**2)\n  ans = math.degrees(math.asin(L))\n  print(ans)", "import math\na, b, x = map(int, input().split())\nif x>=pow(a,2)*b/2:\n    print(math.degrees(math.atan(2*(pow(a,2)*b-x)/pow(a,3))))\nelse:\n    print(math.degrees(math.atan(a*pow(b,2)/(2*x))))", "a, b, x = map(int, input().split())\nimport math\nif a*a*b/2 >= x:\n    print(180*math.atan((a*b*b)/(2*x))/math.pi)\nelse:\n    h = x / (a*a)\n    deruta_h = b - h\n    print(180*math.atan((2*deruta_h)/a)/ math.pi)", "import math\n\ndef main():\n    a, b, x = list(map(int, input().split()))\n    if a*a*b == x:\n        print((0))\n        return\n    mid = a**2*b/2\n    c = x/(a**2)\n    if mid == x:\n        ans = 90 - math.degrees(math.atan(a/b))\n    elif mid < x:\n        d = 2*x/(a**2) - b\n        ans = 90 - math.degrees(math.atan(a/(b-d)))\n    else:\n        d = 2*a*c/b\n        ans = 90 - math.degrees(math.atan(d/b))\n\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "### ----------------\n### \u3053\u3053\u304b\u3089\n### ----------------\n\nimport sys\nimport math\nfrom io import StringIO\nimport unittest\n\ndef yn(b):\n    print((\"Yes\" if b==1 else \"No\"))\n    return\n\ndef resolve():\n    readline=sys.stdin.readline\n\n    a,b,x=list(map(int, readline().rstrip().split()))\n    if x <= a*a*b/2:\n        l = x*2/b/a\n        print((math.degrees(math.atan(b/l))))\n        return\n    l = (2*x)/(a*a)-b\n    print((math.degrees(math.atan((b-l)/a))))\n    #arr=list(map(int, readline().rstrip().split()))\n    #n=int(readline())\n    #ss=readline().rstrip()\n    #yn(1)\n\n    return\n\nif 'doTest' not in globals():\n    resolve()\n    return\n\n### ----------------\n### \u3053\u3053\u307e\u3067 \n### ----------------\n", "import math\na, b, x = list(map(int, input().split()))\n\nif x == a**2*b:\n  print((0))\n  \nelif x >= a**2*b/2:\n  print((90 - math.degrees(math.atan(a**3/(2*a**2*b-2*x)))))\nelse:\n  \n  print((90 - math.degrees(math.atan(2*x/(a*b**2)))))\n", "# D - Water Bottle\n\nfrom math import atan, degrees\n\na, b, x = map(int, input().split())\nvolume = a * a * b\n\nif x * 2 >= volume:\n  h = 2 * b - 2 * x / (a * a)\n  print(degrees(atan(h / a)))\nelse:\n  h = 2 * x / (a * b)\n  print(degrees(atan(b / h)))", "a, b, x = map(int, input().split())\n\nimport math\nr = 180/math.pi\n\nc = x / (a * b * 0.5)\nif c <= a:\n    print(math.atan(b/c) * r)\nelse:\n    c = ((a**2)*b - x) * 2 / (a**2)\n    print(math.atan(c/a) * r)", "import math\na, b, x = map(int,input().split())\nv1 = math.degrees(math.atan((a*b*b)/(2*x)))\nv2 = math.degrees(math.atan((2*a*a*b-2*x)/(a*a*a)))\nif a*a*b/2 > x:\n    print('{:.7f}'.format(v1))\nelse:\n    print('{:.7f}'.format(v2))", "# import itertools\nimport math\n# import sys\n# sys.setrecursionlimit(500*500)\n# import numpy as np\n\n# N = int(input())\n# S = input()\n# n, *a = map(int, open(0))\na, b, x = map(int, input().split())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# tree = [[] for _ in range(N + 1)]\n# B_C = [list(map(int,input().split())) for _ in range(M)]\n\n# B_C = sorted(B_C, reverse=True, key=lambda x:x[1])\n# all_cases = list(itertools.permutations(P))\n# a = list(itertools.combinations_with_replacement(range(1, M + 1), N))\n# itertools.product((0,1), repeat=n)\n\n# A = np.array(A)\n# cum_A = np.cumsum(A)\n# cum_A = np.insert(cum_A, 0, 0)\n\n# def dfs(tree, s):\n#     for l in tree[s]:\n#         if depth[l[0]] == -1:\n#             depth[l[0]] = depth[s] + l[1]\n#             dfs(tree, l[0])\n# dfs(tree, 1)\n\n# def factorization(n):\n#     arr = []\n#     temp = n\n#     for i in range(2, int(-(-n**0.5//1))+1):\n#         if temp%i==0:\n#             cnt=0\n#             while temp%i==0:\n#                 cnt+=1\n#                 temp //= i\n#             arr.append([i, cnt])\n#     if temp!=1:\n#         arr.append([temp, 1])\n#     if arr==[]:\n#         arr.append([n, 1])\n#     return arr\n\nx_s = a * a * b - x\nif x <= x_s:\n    print(math.degrees(math.atan(a * b * b / (2 * x))))\nelse:\n    print(math.degrees(math.atan(2 * x_s / (a * a * a))))", "#!/usr/bin/env python3\n\n#import\nimport math\n#import numpy as np\n#= int(input())\n#= input()\na, b, x= list(map(int, input().split()))\n#= list(map(int, input().split()))\n#= [input(), input()]\n#= [list(map(int, input().split())) for _ in range(N)]\n#= [int(input()) for _ in range(N)]\n#= {i:[] for i in range(N)}\n\nd = a * a * b\n\n# \u534a\u5206\u3088\u308a\u591a\u3044\nif x * 2 > d:\n    x = d - x\n    xx = 2 * x / (a * a * a)\n    theta = math.atan(xx)\n    print((theta * 180 / math.pi))\n\nelse:\n    xx = 2 * x / (a * b * b)\n    theta = math.atan(xx)\n    print((90 - theta * 180 / math.pi))\n\n", "import numpy as np\na,b,x=map(int,input().split())\nif x<=a*a*b/2:\n  y=2*x/(a*b)\n  print(360/((2*np.pi)/np.arctan(b/y)))\nelse:\n  y=2*x/(a**2)-b\n  print(360/((2*np.pi)/np.arctan((b-y)/a)))", "import math\na, b, x = list(map(int, input().split()))\ns = x/a\nhalf = (a*b)/2\n\nif s<=half:\n    y = (2*s)/b\n    z = math.sqrt(b**2+y**2)\n    alpha = b/z\n    alpha = math.asin(alpha)\n    alpha = math.degrees(alpha)\n\n    print(alpha)\n\nif s>half:\n    z = math.sqrt(b**2+a**2)\n\n    alpha = b/z\n    alpha = math.asin(alpha)\n    alpha = math.degrees(alpha)\n\n    beta = a/z\n    beta = math.asin(beta)\n    beta = math.degrees(beta)\n\n    l = 2*(s-half)/(math.sin(math.radians(90-alpha))*z)\n    k = math.sqrt(z**2+l**2-2*l*z*math.cos(math.radians(90-alpha)))\n\n    gamma = 2*(s-half)/(k*z)\n    gamma = math.asin(gamma)\n    gamma = math.degrees(gamma)\n\n    print((90-(gamma+beta)))\n", "import re\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef v(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b//math.gcd(a,b)\nsys.setrecursionlimit(10 ** 6)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\nal = \"abcdefghijklmnopqrstuvwxyz\"\nAL = al.upper()\n\na,b,x = I()\n\nif a**2*b <= 2*x:\n  ama = a**2*b-x\n  ran = 2*ama/(a**2)\n  print(90-180/math.pi*math.atan2(a,ran))\nelse:\n  ran = 2*x/(a*b)\n  print(90-180/math.pi*math.atan2(ran,b))", "from math import *\na,b,x=map(int,input().split())\nx=x/a\nif x<=a*b/2:\n  t=2*x/b\n  c=sqrt(b**2+t**2)\n  ans=90-degrees(asin(t/c))\nelse:\n  t=2*(a*b-x)/a\n  c=sqrt(a**2+t**2)\n  ans=90-degrees(asin(a/c))\nprint(ans)", "import math\na, b, x = map(int, input().split())\n\nif a*a*b / 2 > x:\n    h = x / b * 2 / a\n    deg = math.atan(h/b)\n    deg = math.degrees(deg)\n    deg = 90 - deg\nelse:\n    x = a*a*b - x\n    h = x / a * 2 / a\n    deg = math.atan(h/a)\n    deg = math.degrees(deg)\nprint(deg)", "import math        # factorical\uff08\u968e\u4e57) # hypot(\u8ddd\u96e2)\n# import heapq\n# from fractions import gcd # Python3.5\u4ee5\u524d # lcm\uff08\u6700\u5c0f\u516c\u500d\u6570\uff09 = (a*b)//gcd(a,b)\n# from fractions import Fraction\n# from math import gcd # Python3.6\u4ee5\u964d\n# --------------------------------------------------------------\n\na,b,x = list(map(int,input().split()))\n\nif x*2 <= a*a*b:\n    print((math.degrees(math.atan(a*b*b/(2*x)))))\nelse:\n    print((math.degrees(math.atan((a*a*b-x)*2/(a**3)))))\n", "from math import atan, degrees\n\ndef angle(a, b, x):\n\treturn degrees(atan(((a * b ** 2) / ( 2 * x)) if x <= 0.5 * b * a ** 2 else ((2 * (b - (x / (a ** 2)))) / a)))\n\t\nprint(angle(*map(int, input().split())))", "# \u53c2\u8003:https://drken1215.hatenablog.com/entry/2020/04/26/193500 #\nfrom math import pi\nfrom math import atan2\na,b,x = map(int,input().split())\nx /= a\nif x > a * b / 2:\n    print(atan2(2 * (a * b - x),(a ** 2)) * 180 / pi)\nif x <= a * b / 2:\n    print(atan2((b ** 2),2 * x) * 180 / pi)", "import math\na,b,x=list(map(int,input().split()))\n\n\ndef f(a,b,deg):\n  theta=math.radians(deg)\n  if b*math.tan(math.pi/2-theta)<=a:\n    return b*b*math.tan(math.pi/2-theta)*a/2\n  else:\n    return a*a*b-a*a*math.tan(theta)*a/2\n\n\nl=0\nr=90\nwhile r-l>=10**-6:\n  mid=(l+r)/2\n  #print(mid,f(a,b,mid))\n  if x-10**-6<=f(a,b,mid)<=x+10**-6:\n    print(mid)\n    return\n  if f(a,b,mid)>x:\n    l=mid\n  else:\n    r=mid\nprint(l)\n", "import math\n\na, b, x = list(map(int, input().split()))\n\nvol = a * a * b\n\nif x <= vol // 2:\n    tmp = 2 * x / (a*b)\n    ans = math.atan(b / tmp)\nelse:\n    tmp = 2 * x / (a**2) - b\n    tmp = b - tmp\n    ans = math.atan(tmp / a)\nprint((math.degrees(ans)))\n"]