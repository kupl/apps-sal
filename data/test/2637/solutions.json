["class Solution:\n     def permuteUnique(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[List[int]]\n         \"\"\"\n         if not nums:\n             return []\n         \n         nums.sort()\n         n = len(nums)\n         res = [nums[:]]\n         i = n-1\n         while i > 0:\n             if nums[i-1] < nums[i]:\n                 j = n-1\n                 while nums[j] <= nums[i-1]:\n                     j -= 1\n                 nums[i-1], nums[j] = nums[j], nums[i-1]\n                 nums[i:] = sorted(nums[i:])\n                 res.append(nums[:])\n                 i = n-1\n             else:\n                 i -= 1\n         \n         return res\n         \n         \n         \n", "class Solution:\n     def permuteUnique(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[List[int]]\n         \"\"\"\n         def dfs(nums):\n             if not nums:\n                 return [[]]\n             dic = set()\n             new = []\n             for i in range(len(nums)):\n                 if nums[i] not in dic:\n                     dic.add(nums[i])\n                     new += [[nums[i]] + item for item in dfs(nums[: i] + nums[i + 1 :])]\n             return new\n         \n         return dfs(nums)", "class Solution:\n     def permuteUnique(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[List[int]]\n         \"\"\"\n         res=[]\n         nums.sort()\n         self.dfs(nums,[],res,[False] * len(nums))\n         return res\n     \n     def dfs(self,nums,path,res,used):\n         if len(path)==len(nums):\n             res.append(path)\n         else:\n             for i in range(len(nums)):\n                 if used[i] or (i>0 and nums[i] == nums[i-1] and not used[i-1]):\n                     continue\n                 used[i] = True\n                 self.dfs(nums,path+[nums[i]],res,used)\n                 used[i]=False", "class Solution:\n     def permuteUnique(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[List[int]]\n         \"\"\"\n         res = []\n         nums.sort()\n         def swap(a, i, j):\n             temp = a[i]\n             a[i] = a[j]\n             a[j] = temp\n         \n         def helper(index, path):\n             if index == len(nums) - 1:\n                 res.append(path.copy())\n             for i in range(index, len(nums)):\n                 if i != index and path[i] == path[index]:\n                     continue\n                 swap(path, index, i)\n                 helper(index + 1, path.copy())\n             \n         helper(0, nums)\n         return res\n"]