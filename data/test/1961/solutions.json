["n, m = [int(i) for i in input().split()]\nA = []\nct = []\nfor i in range(n):\n    x = list(input())\n    y = [0]*m\n    A.append(x)\n    ct.append(y)\nok = 1\nfor i in range(n-2):\n    for j in range(m-2):\n        if A[i][j]=='#' and A[i][j+1]=='#' and A[i][j+2]=='#' and A[i+1][j]=='#' and A[i+2][j]=='#' and A[i+2][j+1]=='#' and A[i+2][j+2]=='#' and A[i+1][j+2]=='#':\n            ct[i][j] = 1\n            ct[i][j+1] = 1\n            ct[i][j+2] = 1\n            ct[i+1][j] = 1\n            ct[i+1][j+2] = 1\n            ct[i+2][j] = 1\n            ct[i+2][j+1] = 1\n            ct[i+2][j+2] = 1\n\nxct = 0\nxhs = 0\n\nfor i in range(len(ct)):\n    for j in range(len(ct[i])):\n        if ct[i][j] == 1:\n            xct+=1\n        if A[i][j] == '#':\n            xhs+=1\nif xhs==xct:\n    print('YES')\nelse:\n    print('NO')\n", "def isValid(field, y, x):\n\tfor i in range(3):\n\t\tfor j in range(3):\n\t\t\tif i == 1 and j == 1:\n\t\t\t\tcontinue\n\t\t\tif field[y + i][x + j] == '.':\n\t\t\t\treturn False\n\treturn True\ndef fill(field, y, x):\n\tfor i in range(3):\n\t\tfor j in range(3):\n\t\t\tif i == 1 and j == 1:\n\t\t\t\tcontinue\n\t\t\tcur[y + i][x + j] = '#'\nn, m = list(map(int, input().split()))\nsig = []\ncur = []\nfor i in range(n):\n\tsig += [list(input())]\n\tcur += [[\".\"] * m]\n\nfor i in range(n - 2):\n\tfor j in range(m - 2):\n\t\tif isValid(sig, i, j):\n\t\t\tfill(cur, i, j)\n\nif sig == cur:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")", "def main():\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        s = input()\n        b = []\n        for l in s:\n            b.append(l)\n        a.append(b)\n    for i in range(1, n - 1):\n        for j in range(1, m - 1):\n            may = True\n            if (a[i][j - 1] == '.' or a[i][j + 1] == '.' or a[i + 1][j - 1] == '.' or a[i + 1][j + 1] == '.' or a[i + 1][j] == '.' or a[i - 1][j - 1] == '.' or a[i - 1][j + 1] == '.' or a[i - 1][j] == '.'):\n                may = False\n            if (may):\n                a[i][j - 1] = a[i][j + 1] = a[i + 1][j - 1] = a[i + 1][j + 1] = a[i + 1][j] = a[i - 1][j - 1] = a[i - 1][j + 1] = a[i - 1][j] = '?'\n    for i in range(n):\n        for j in range(m):\n            if (a[i][j] == '#'):\n                print(\"NO\")\n                return\n    print(\"YES\")\nmain()", "import sys\n\n\ndef solve(n, m, grid):\n    for i, row in enumerate(grid):\n        for j, cell in enumerate(row):\n            if cell == 0:\n                continue\n            must = cell == 1\n            if i >= n - 2 or j >= m - 2:\n                if must:\n                    return 'NO'\n                continue\n            for di, dj in [(0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)]:\n                if grid[i + di][j + dj] == 0:\n                    if must:\n                        return 'NO'\n                    break\n            else:\n                for di, dj in [(0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)]:\n                    grid[i + di][j + dj] = 2\n                grid[i][j] = 2\n    return 'YES'\n\n\nn, m = list(map(int, input().split()))\ngrid = [['.#'.index(c) for c in line.strip()] for line in sys.stdin.readlines()]\nprint(solve(n, m, grid))\n", "n, m = list(map(int, input().split()))\n\nmp = []\n\nfor i in range(n):\n    line = input().strip()\n    \n    mp.append(list([c == '#' for c in line]))\n\nmp1 = [[False for _ in range(m)] for _ in range(n)]\n\nfor i in range(1, n - 1):\n    for j in range(1, m - 1):\n        f = all(mp[i - 1][j - k] for k in range(-1, 1+1))\n        f = f and all(mp[i + 1][j - k] for k in range(-1, 1+1))\n        f = f and (mp[i][j - 1] and mp[i][j + 1])\n        \n        if not f:\n            continue\n        \n        for ik in range(-1, 2):\n            for jk in range(-1, 2):\n                if ik == 0 and jk == 0:\n                    continue\n                mp1[i + ik][j + jk] = True\n\nif all(all(mp[i][j] == mp1[i][j] for j in range(m)) for i in range(n)):\n    print('YES')\nelse:\n    print('NO')\n", "n, m = list(map(int, input().split()))\nu = []\nu1 = []\nfor i in range(n):\n    u.append(list(input()))\n    u1.append(['.'] * m)\nfor i in range(n - 2):\n    for j in range(m - 2):\n        ok = True\n        for k in range(3):\n            if u[i][j + k] != '#' or u[i + k][j] != '#':\n                ok = False\n                break\n##        print(ok)\n        if ok:\n            if u[i + 2][j + 1] != '#' or u[i + 2][j + 2] != '#' or u[i + 1][j + 2] != '#':\n                ok = False\n            else:\n                for k in range(3):\n                    u1[i][j + k] = '#'\n                    u1[i + k][j] = '#'\n                u1[i + 2][j + 1] = '#'  \n                u1[i + 2][j + 2] = '#'\n                u1[i + 1][j + 2] = '#'\nok = True\n##for i in u:\n##    print(i)\n##for i in u1:\n##    print(i)\nfor i in range(n):\n    for j in range(m):\n        if u[i][j] != u1[i][j]:\n            ok = False\n            break\n    if not ok:\n        break\nif ok:\n    print('YES')\nelse:\n    print('NO')\n", "n,m=map(int,input().split())\ns=[]\nst=set()\ncst=set()\nfor i in range(n):\n    s.append(input())\n    for j in range(len(s[i])):\n        if s[i][j]=='#':\n            st.add((i,j))\nfor i in range(1,n-1):\n    for j in range(1,m-1):\n        if s[i-1][j-1]!='#':\n            continue\n        if s[i - 1][j ] != '#':\n            continue\n        if s[i-1][j+1]!='#':\n            continue\n        if s[i][j-1]!='#':\n            continue\n        if s[i][j+1]!='#':\n            continue\n        if s[i+1][j-1]!='#':\n            continue\n        if s[i+1][j]!='#':\n            continue\n        if s[i+1][j+1]!='#':\n            continue\n        cst.add((i-1,j))\n        cst.add((i - 1, j-1))\n        cst.add((i - 1, j+1))\n        cst.add((i + 1, j))\n        cst.add((i + 1, j-1))\n        cst.add((i + 1, j+1))\n        cst.add((i , j+1))\n        cst.add((i , j-1))\nif len(cst)==len(st):\n    print('YES')\nelse:\n    print('NO')", "3\n\nimport math\nimport sys\n\n\nDEBUG = False\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\ndef solve(H, W, A):\n    visited = [bytearray(W) for _ in range(H)]\n\n    for y in range(H):\n        for x in range(W):\n            if A[y][x] == '.' or visited[y][x]:\n                continue\n\n            dprint(x, y)\n            for dx, dy in [(0, 0), (-1, 0), (-2, 0),\n                           (0, -1), (-2, -1),\n                           (0, -2), (-1, -2), (-2, -2)]:\n                tx = x + dx\n                ty = y + dy\n                dprint('  ', tx, ty)\n                if tx < 0 or ty < 0 or tx + 2 >= W or ty + 2 >= H:\n                    continue\n                bad = False\n                for ex, ey in [(0, 0), (1, 0), (2, 0),\n                               (0, 1), (2, 1),\n                               (0, 2), (1, 2), (2, 2)]:\n                    nx = tx + ex\n                    ny = ty + ey\n                    if A[ny][nx] == '.':\n                        bad = True\n                        break\n                if bad:\n                    continue\n\n                for ex, ey in [(0, 0), (1, 0), (2, 0),\n                               (0, 1), (2, 1),\n                               (0, 2), (1, 2), (2, 2)]:\n                    nx = tx + ex\n                    ny = ty + ey\n                    visited[ny][nx] = 1\n\n                assert visited[ny][nx] == 1\n                break\n\n            if visited[y][x] == 0:\n                return False\n\n    return True\n\n\ndef main():\n    H, W = [int(e) for e in inp().split()]\n    A = [inp() for _ in range(H)]\n\n    print('YES' if solve(H, W, A) else 'NO')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nimport copy\nlines = iter(sys.stdin)\n\ndef nexts():\n    return next(lines)\n\ndef nextint():\n    return int(nexts())\n\ndef snexts():\n    return next(lines).split(' ')\n\ndef snextint():\n    return map(int, snexts())\n\ndef array(length, base=0):\n    return [base] * length\n\ndef matrix(length, width, base=0):\n    return [[base] * width for _ in range(length)]\n\nn, m = snextint()\ngrid = array(n, [])\n\nfor i in range(n):\n    grid[i] = list(nexts())\n\ngrid2 = copy.deepcopy(grid)\n\nfor i in range(1, n - 1):\n    for j in range(1, m - 1):\n        # print('Attempting on i=%d,j=%d'%(i,j))\n        if grid[i - 1][j] == '#' and grid[i - 1][j + 1] == '#' and grid[i][j + 1] == '#' and grid[i + 1][j + 1] == '#' and grid[i + 1][j] == '#' and grid[i + 1][j - 1] == '#' and grid[i][j - 1] == '#' and grid[i - 1][j - 1] == '#':\n            grid2[i - 1][j] = '.'\n            grid2[i - 1][j + 1] = '.'\n            grid2[i][j + 1] = '.'\n            grid2[i + 1][j + 1] = '.'\n            grid2[i + 1][j] = '.'\n            grid2[i + 1][j - 1] = '.'\n            grid2[i][j - 1] = '.'\n            grid2[i - 1][j - 1] = '.'\n\nmatch = True\nfor i in grid2:\n    for ch in i:\n        if ch == '#':\n            match = False\n            break\n\nif match:\n    print('YES')\nelse:\n    print('NO')", "def mi():\n\treturn list(map(int, input().split()))\n\n'''\n5 7\n.......\n.#####.\n.#.#.#.\n.#####.\n.......\n'''\nn,m = mi()\na = [0]*n\nb = [0]*n\nfor i in range(n):\n\ta[i] = list(input())\n\tb[i] = a[i].copy()\nfor i in range(n-2):\n\tfor j in range(m-2):\n\t\tif a[i][j]=='#' and a[i+1][j]=='#' and a[i+2][j]=='#' and a[i+2][j+1]=='#' and a[i+2][j+2]=='#' and a[i+1][j+2]=='#' and a[i][j+2]=='#' and a[i][j+1]=='#':\n\t\t\tb[i][j]=b[i+1][j]=b[i+2][j]=b[i+2][j+1]=b[i+2][j+2]=b[i+1][j+2]=b[i][j+2]=b[i][j+1]='.'\nfor i in range(n):\n\tfor j in range(m):\n\t\tif b[i][j]=='#':\n\t\t\tprint ('NO')\n\t\t\treturn\nprint ('YES')\n", "n,m=list(map(int,input().split()))\nMAP=[list(input()) for i in range(n)]\n\nANSMAP=[[\".\" for i in range(m)] for j in range(n)]\n\nfor i in range(1,n-1):\n    for j in range(1,m-1):\n        if MAP[i-1][j-1]==\"#\" and MAP[i-1][j]==\"#\" and MAP[i-1][j+1]==\"#\" and MAP[i][j-1]==\"#\" and MAP[i-1][j+1]==\"#\" and MAP[i+1][j-1]==\"#\" and MAP[i+1][j]==\"#\" and MAP[i+1][j+1]==\"#\":\n            ANSMAP[i-1][j-1] =\"#\"\n            ANSMAP[i-1][j]=\"#\"\n            ANSMAP[i-1][j+1]=\"#\"\n            ANSMAP[i][j-1]=\"#\"\n            ANSMAP[i][j+1]=\"#\"\n            ANSMAP[i+1][j-1]=\"#\"\n            ANSMAP[i+1][j]=\"#\"\n            ANSMAP[i+1][j+1]=\"#\"\n\nif MAP==ANSMAP:\n    print(\"YES\")\n\nelse:\n    print(\"NO\")\n            \n", "\nN, M = list(map(int, input().split()))\n\n\ngrid = []\nfor _ in range(N):\n    grid.append(list(input()))\n\ndef check(grid, i, j, sx, sy):\n    if i - sx >= 0 and j - sy >= 0 and i + 2 - sx < N and j + 2 - sy < M:\n        i -= sx\n        j -= sy\n        v = grid[i][j] == '#' and grid[i+1][j] == '#' and grid[i+2][j] == '#' and grid[i][j+1] == '#' and grid[i+2][j+1] == '#' and grid[i][j+2] == '#' and grid[i+1][j+2] == '#' and grid[i+2][j+2] == '#'\n        return v\n\n    return False\n\n\n\nprev = False\nfor m in range(M):\n    for n in range(N):\n        if grid[n][m] == '#':\n            if not (check(grid, n, m, 0, 0) or check(grid, n, m, 1, 0) or check(grid, n, m, 2, 0) or check(grid, n, m, 0, 1) or check(grid, n, m, 2, 1) or check(grid, n, m, 0, 2) or check(grid, n, m, 1, 2) or check(grid, n, m, 2, 2)):\n                print(\"NO\")\n                return\n\nprint(\"YES\")\n", "from math import ceil, sqrt\n#from sys import stdout\n#from collections import deque\n\nt = 1#int(input())\nfor test in range(1,t+1):\n    n,m = (list(map(int, input().split())))\n    arr = [[\".\" for i in range(m)] for i in range(n)]\n    arr2 = []\n    for i in range(n):\n        arr2.append(list(input()))\n    for i in range(1,n-1):\n        for j in range(1,m-1):\n            if arr2[i+1][j] == arr2[i][j+1]==arr2[i+1][j+1]==arr2[i-1][j]==arr2[i][j-1]==arr2[i-1][j-1]==arr2[i+1][j-1]==arr2[i-1][j+1]==\"#\":\n                arr[i+1][j] = arr[i][j+1]=arr[i+1][j+1]=arr[i-1][j]=arr[i][j-1]=arr[i-1][j-1]=arr[i+1][j-1]=arr[i-1][j+1]=\"#\"\n\n    if arr == arr2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n\n\n", "n,m=[int(x) for x in input().split()]\ns=[]\nfor i in range(n):\n    s.append(input())\nmapp=[[False]*m for i in range(n)]\n\n\n\n\n\nrnd=((-1,-1),(-1,0),(-1,1),(0,-1),(0,1),(1,-1),(1,0),(1,1))\n\ndef gene(x,y,p):\n    cx=x-rnd[p][0]\n    cy=y-rnd[p][1]\n    ans=[]\n    for i in range(8):\n        ans.append((cx+rnd[i][0],cy+rnd[i][1]))\n    return ans\ndef judge(ps):\n    for x,y in ps:\n        if x>=0 and x<n and y>=0 and y<m and s[x][y]=='#':\n            continue\n        else:\n            return False\n    return True\ndef dye(ps):\n    nonlocal mapp\n    for x,y in ps:\n        mapp[x][y]=True\ndef check(x,y):\n    for i in range(8):\n        r=gene(x,y,i)\n        if judge(r):\n            dye(r)\n            return True\n    return False\nfor i in range(n):\n    for j in range(m):\n        if s[i][j]=='#' and mapp[i][j]==False:\n            if check(i,j):\n                continue\n            else:\n                print('NO')\n                quit()\nprint('YES')", "n,m = map(int, input().split())\na = []\nfor i in range(n):\n    s = input()\n    a.append(s)\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == '.':\n            continue\n        if i >= 2 and j >= 2:\n            if a[i-2][j-2] == '#' and a[i-2][j-1] == '#' and a[i-2][j] == '#' \\\n                    and a[i-1][j] == '#' and a[i-1][j-2] == '#' and a[i][j-1] == '#' and a[i][j-2] == '#':\n                continue\n        if i >= 1 and i <= n-2 and j >= 2 and a[i-1][j-2] == '#' and a[i-1][j-1] == '#' and a[i-1][j] == '#' \\\n                and a[i][j-2] == '#' and a[i+1][j-2] == '#' and a[i+1][j-1] == '#' and a[i+1][j] == '#':\n            continue\n        if i <= n-3 and j >= 2 and a[i][j-1] == '#' and a[i][j-2] == '#' and a[i+1][j] == '#' \\\n                and a[i+1][j-2] == '#' and a[i+2][j] == '#' and a[i+2][j-1] == '#' and a[i+2][j-2] == '#':\n            continue\n        if i <= n-3 and j >= 1 and j <= m-2 and a[i][j-1] == '#' and a[i][j+1] == '#' and a[i+1][j-1] == '#' \\\n                and a[i+1][j+1] == '#' and a[i+2][j] == '#' and a[i+2][j-1] == '#' and a[i+2][j+1] == '#':\n            continue\n        if i <= n-3 and j <= m-3 and a[i][j+1] == '#' and a[i][j+2] == '#' and a[i+1][j] == '#' \\\n                and a[i+1][j+2] == '#' and a[i+2][j] == '#' and a[i+2][j+1] == '#' and a[i+2][j+2] == '#':\n            continue\n        if i <= n-2 and i >= 1 and j <= m-3 and a[i-1][j] == '#' and a[i-1][j+1] == '#' and a[i-1][j+2] == '#' \\\n                and a[i][j+2] == '#' and a[i+1][j] == '#' and a[i+1][j+1] == '#' and a[i+1][j+2] == '#':\n            continue\n        if i >= 2 and j <= m-3 and a[i-2][j] == '#' and a[i-2][j+1] == '#' and a[i-2][j+2] == '#' \\\n                and a[i-1][j] == '#' and a[i-1][j+2] == '#' and a[i][j+1] == '#' and a[i][j+2] == '#':\n            continue\n        if i >= 2 and j <= m-2 and j >= 1 and a[i-2][j-1] == '#' and a[i-2][j] == '#' and a[i-2][j+1] == '#' \\\n                and a[i-1][j-1] == '#' and a[i-1][j+1] == '#' and a[i][j-1] == '#' and a[i][j+1] == '#':\n            continue\n        print('NO')\n        return\nprint('YES')", "#!/usr/bin/env python3\nimport sys\n\ndef rint():\n    return list(map(int, sys.stdin.readline().split()))\n#lines = stdin.readlines()\n\ndef writable(r, c):\n    if r+2 >= n or c+2 >= m:\n        return False\n    t = set()\n    t.add(cells[r][c])\n    t.add(cells[r][c+1])\n    t.add(cells[r][c+2])\n    t.add(cells[r+1][c])\n    t.add(cells[r+1][c+2])\n    t.add(cells[r+2][c])\n    t.add(cells[r+2][c+1])\n    t.add(cells[r+2][c+2])\n    return not '.' in t\n\ndef fill_ink(r,c):\n    paper[r][c] = \"#\"\n    paper[r][c+1] = \"#\"\n    paper[r][c+2] = \"#\"\n    paper[r+1][c] = \"#\"\n    paper[r+1][c+2] = \"#\"\n    paper[r+2][c] = \"#\"\n    paper[r+2][c+1] = \"#\"\n    paper[r+2][c+2] = \"#\"\n\nn, m = rint()\n\ncells = []\nfor i in range(n):\n    cells.append(input())\n\n#for i in range(n):\n#    for j in range(m):\n#        print(cells[i][j], end='')\n#    print()\n\npaper = [[\".\" for j in range(m)] for i in range(n)]\n\nfor r in range(n):\n    for c in range(m):\n        if writable(r,c) is True:\n            fill_ink(r, c)\n\nfor r in range(n):\n    for c in range(m):\n        if cells[r][c] != paper[r][c]:\n            print(\"NO\")\n            return\n\nprint(\"YES\")\n", "\"\"\"n,L,a=map(int,input().split())\n#s=[int(x) for x in input().split()]\ned=0\nct=0\nfor j in range(0,n):\n    t,l=map(int,input().split())\n    ct=ct+((t-ed)//a)\n    ed=t+l\nt=L\nct=ct+((t-ed)//a)\nprint(ct)\"\"\"\n\nn,m=list(map(int,input().split()))\ndp=[[-1 for i in range(m)] for j in range(n)]\ndp2=[[-1 for i in range(m)] for j in range(n)]\n#dp=[]\n#dp2=[]\nfor i in range(0,n):\n    s=input()\n    for j in range(0,m):\n        if(s[j]=='.'):\n            dp[i][j]=-1\n        else:\n            dp[i][j]=s[j]\nfor i in range(0,n-2):\n    for j in range(0,m-2):\n        #print(i,j)\n        p=0\n        c=0\n        for k in range(i,i+3):\n            for h in range(j,j+3):\n                p=p+1\n                if(p!=5):\n                    if(dp[k][h]=='#'):\n                        c=c+1\n\n                    \n        if(c==8):\n            p=0\n            for k in range(i,i+3):\n                for h in range(j,j+3):\n                    p=p+1\n                    if(p!=5):\n                        dp2[k][h]='#'\n\n\n                        \n#print(dp)\n#print(dp2)\nif(dp==dp2):\n    print('YES')\nelse:\n    print('NO')\n\n                            \n", "n,m=list(map(int,input().split()))\ns=[]\nfor i in range(n):\n\ts.append(list(map(str,input().strip())))\n#print(s)\nt=[]\nfor i in range(n):\n\tp=['.']*m\n\tt.append(p)\n\nfor i in range(1,n-1):\n\tfor j in range(1,m-1):\n\t\tf=0\n\t\tif s[i-1][j-1]=='#' and s[i-1][j]=='#' and s[i-1][j+1]=='#' and s[i][j-1]=='#' and s[i][j+1]=='#' and s[i+1][j-1]=='#' and s[i+1][j]=='#' and s[i+1][j+1]=='#':\n\t\t\tf=1\n\t\tif f==1:\n\t\t\tt[i-1][j-1]='#'\n\t\t\tt[i-1][j]='#'\n\t\t\tt[i-1][j+1]='#'\n\t\t\tt[i][j-1]='#'\n\t\t\tt[i][j+1]='#'\n\t\t\tt[i+1][j-1]='#'\n\t\t\tt[i+1][j]='#'\n\t\t\tt[i+1][j+1]='#'\nf=1\n#print(t)\nfor i in range(n):\n\tfor j in range(m):\n\t\tif s[i][j]=='#' and s[i][j]!=t[i][j]:\n\t\t\tf=0\n\t\t\tbreak\n\tif f==0:\n\t\tbreak\nif f==1:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n", "n,m = [int(i) for i in input().split()]\nb=[]\na=[]\nfor i in range(n):\n    b.append([i for i in input()])\n    a.append([0 for i in range(m)])\n    \ndef check(e,r,q):\n    if e>=0 and r>=0 and e+2<n and r+2<m:\n        if b[e][r]=='#' and b[e+1][r]=='#' and b[e+2][r]=='#' and b[e+2][r+1]=='#' and b[e+2][r+2]=='#' and b[e+1][r+2]=='#' and b[e][r+2]=='#' and b[e][r+1]=='#':\n            a[e][r]==1 \n            a[e+1][r]==1 \n            a[e+2][r]==1\n            a[e+2][r+1]==1\n            a[e+2][r+2]==1  \n            a[e+1][r+2]==1\n            a[e][r+2]==1 \n            a[e][r+1]==1\n            return True\n    if q ==1:\n        return False\n    return check(e,r-1,1) or check(e,r-2,1) or check(e-1,r-2,1) or check(e-2,r-2,1) or check(e-2,r-1,1) or check(e-2,r,1) or check(e-1,r,1)\nfor i in range(n):\n    for j in range(m):\n        if b[i][j]=='#':\n            if (not check(i,j,0)) and a[i][j]==0:\n                print(\"NO\")\n                return\nprint(\"YES\")", "def color8(i,j,ip):\n    if i>n-3 or j>m-3:\n        return\n    else:\n        ip[i][j]='#'\n        ip[i][j+1]='#'\n        ip[i][j+2]='#'\n        ip[i+1][j]='#'\n        ip[i+1][j+2]='#'\n        ip[i+2][j]='#'\n        ip[i+2][j+1]='#'\n        ip[i+2][j+2]='#'\n        \nn,m=list(map(int,input().split()))\nip=[]\nop=[['.' for i in range(m)] for j in range(n)]\n#print(op)\nb=0\nfor i in range(n):\n    ip.append(str(input()))\n#print(ip,ip[1][1])\nfor i in range(n):\n    for j in range(m):\n        if ip[i][j]=='#':\n            try:\n                if ip[i+2][j+2]=='#':\n                    temp=(ip[i][j]=='#' and ip[i][j+1]=='#' and ip[i][j+2]=='#' and ip[i+1][j]=='#' and ip[i+1][j+2]=='#' and ip[i+2][j]=='#' and ip[i+2][j+1]=='#' and ip[i+2][j+2]=='#')\n                    #print(temp)\n                    if temp==True:\n                        color8(i,j,op)\n            except:\n                pass\n#print(ip,op)\nfor i in range(n):\n    if ''.join(op[i])!=ip[i]:\n        print('NO')\n        b=1\n        break\nif b==0:\n    print('YES')\n", "import sys;\ndef transform(c):\n\tif c == '.': return 0;\n\tif c == '#': return 1;\n\treturn 2;\n\ndef take_care(board,n,m):\n\tif n + 2 >= N:\n\t\treturn;\n\tif m + 2 >= M:\n\t\treturn;\n\tif board[n][m+1] == 0 or board[n][m+2] == 0 or board[n+1][m] == 0 or board[n+1][m+2] == 0 or board[n+2][m] == 0 or board[n+2][m+1] == 0 or board[n+2][m+2] == 0:\n\t\treturn;\n\tboard[n][m] = 2\n\tboard[n][m+1] = 2\n\tboard[n][m+2] = 2\n\tboard[n+1][m] = 2\n\tboard[n+1][m+2] = 2\n\tboard[n+2][m] = 2\n\tboard[n+2][m+1] = 2\n\tboard[n+2][m+2] = 2\n\treturn False,board;\n\nN,M = [int(i) for i in input().strip().split()];\nboard = [];\nfor n in range(N):\n\trow = input().strip();\n\trow = [ transform(c) for c in row];\n\tboard.append(row);\n#print('board = ');\n#print(board);\nfor n in range(N):\n\tfor m in range(M):\n\t\ttake_care(board,n,m);\nfor row in board:\n\tif 1 in row:\n\t\tprint('NO');\n\t\treturn;\nprint('YES');\n", "#!/usr/bin/env python\n    \nn, m = [int(x) for x in input().split()]\nmat = []\nv = []\n\nfor i in range(n):\n    mat.append([x == '#' for x in input()])\n    v.append([False]*m)\n\ndef check(m, v, x, y):\n    for i in (-1,0,1):\n        for j in (-1,0,1):\n            if (i,j) == (0,0):\n                continue\n            if not m[x+i][y+j]:\n                return\n\n    for i in (-1,0,1):\n        for j in (-1,0,1):\n            if (i,j) != (0,0):\n                v[x+i][y+j] = True\n\nfor x in range(1, n-1):\n    for y in range(1,m-1):\n        check(mat, v, x, y)\n\nflag = True\nfor i in range(0,n):\n    for j in range(0,m):\n        if mat[i][j] and (not v[i][j]):\n            flag = False\n\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "n, m = list(map(int, input().split()))\ncl = []\nfor i in range(n):\n  cl.append(input())\n\ndef is_squad(x, y):\n  if cl[x][y]=='#' and cl[x+1][y]=='#' and cl[x+2][y]=='#' and cl[x+2][y+1]=='#' and cl[x+2][y+2]=='#' and cl[x+1][y+2]=='#' and cl[x][y+2]=='#' and cl[x][y+1]=='#':\n    return True\n  else:\n    return False\n\ndef cv(x, y):\n  counter = 0\n  if x-2>=0 and y+2<=m-1 and is_squad(x-2, y):\n    return True\n   \n  elif x-1>=0 and x+1<=n-1 and y+2<=m-1 and is_squad(x-1, y):\n    return True\n\n  elif x+2<=n-1 and y+2<=m-1 and is_squad(x, y):\n    return True\n  \n  elif x+2<=n-1 and y+1<=m-1 and y-1>=0 and is_squad(x, y-1):\n    return True\n\n  elif x+2<=n-1 and y-2>=0 and is_squad(x, y-2):\n    return True\n\n  elif x+1<=n-1 and x-1>=0 and y-2>=0 and is_squad(x-1, y-2):\n    return True\n\n  elif x-2>=0 and y-2>=0 and is_squad(x-2, y-2):\n    return True\n\n  elif x-2>=0 and y-1>=0 and y+1<=m-1 and is_squad(x-2, y-1):\n    return True\n  else:\n    return False\n  \n\n  \n\n  \n  \n\nfor i in range(n):\n  for j in range(m):\n    if cl[i][j]=='#':\n      if not cv(i, j):\n        print('NO')\n        return\n\nprint('YES')", "n,m=list(map(int,input().split()))\na=[list('') for x in range(n)]\nb=[list('.'*m) for x in range(n)]\nstart=0\n#end=n-2\nfor i in range(n):\n    a[i]=list(input())\n    if (start==0):\n        if ('.' in a[i]):\n            start=((i-3)//3) *3 \nfor i in range(start):\n    b[i]=list('#'*m)\n#print(start)\nfor i in range(start,n-2):\n    for j in range(m-2):\n        ok=True\n        if a[i][j]=='#':\n            for y in range(i,i+3):\n                if ok==False:\n                    break\n                for x in range(j,j+3):\n                    if not((y==i+1)and(x==j+1)):\n                        if a[y][x]!='#':\n                            #print('lel')\n                            #print(x,y)\n                            ok=False\n                            break                      \n            if ok:\n                for y in range(i,i+3):\n                    for x in range(j,j+3):\n                        if not((y==i+1)and(x==j+1)):   \n                            b[y][x]='#'\n                        \n#for i in a:\n#    print(i)\n#print()\n#for i in b:\n#    print(i)\n    \nif a==b:\n    print('YES')\nelse:\n    print('NO')\n", "n, m = map(int, input().split())\na = []\narray = []\nfor i in range(n):\n    a.append(list(map(str, input())))\n    listt = []\n    for c in range(m):\n        if a[i][c] == '#':\n            listt.append(1)\n        else:\n            listt.append(0)\n    array.append(listt)\nfor y in range(1, n - 1):\n    for x in range(1, m - 1):\n        f = a[y + 1][x] == '#' and a[y + 1][x + 1] == '#' and a[y + 1][x - 1] == '#'\n        s = a[y][x + 1] == '#' and a[y][x - 1] == '#'\n        th = a[y - 1][x] == '#' and a[y - 1][x + 1] == '#' and a[y - 1][x - 1] == '#'\n        if f and s and th:\n            array[y + 1][x] -= 1\n            array[y + 1][x + 1] -= 1\n            array[y + 1][x - 1] -= 1\n            array[y][x + 1] -= 1\n            array[y][x - 1] -= 1\n            array[y - 1][x - 1] -= 1\n            array[y - 1][x] -= 1\n            array[y - 1][x + 1] -= 1\nmb = True\nfor y in range(n):\n    for x in range(m):\n        if array[y][x] == 1:\n            mb = False\n            break\nif mb:\n    print(\"YES\")\nelse:\n    print(\"NO\")"]