["def calc_shortest(N, D, s1, s2):\n    #D[1:3] = D[1]+D[2] = d_2+d_3 = distance between Station 2 and Station 4\n    if s1 == s2:\n        return 0\n    elif s1 < s2:\n        s1_index = s1-1\n        s2_index = s2-1\n    else:\n        s1_index = s2-1\n        s2_index = s1-1\n\n    #print(\"s1:\"+str(s1_index)+\" s2:\"+str(s2_index))\n    path1 = sum(D[s1_index:s2_index])\n    path2 = sum(D)-path1\n\n    if path1 < path2:\n        return path1\n    else:\n        return path2\n\nN = [int(i) for i in input().strip().split()][0]\nD = [int(i) for i in input().strip().split()]\ns1, s2 = [int(i) for i in input().strip().split()]\nprint(calc_shortest(N, D, s1, s2))\nreturn", "def calc_shortest(D, s1, s2):\n    #D[1:3] = D[1]+D[2] = d_2+d_3 = distance between Station 2 and Station 4\n    if s1 == s2:\n        return 0\n    elif s1 < s2:\n        path1 = sum(D[s1-1:s2-1])\n    else:\n        path1 = sum(D[s2-1:s1-1])\n\n    path2 = sum(D)-path1\n\n    if path1 < path2:\n        return path1\n    else:\n        return path2\n\nN = [int(i) for i in input().strip().split()][0]\nD = [int(i) for i in input().strip().split()]\ns1, s2 = [int(i) for i in input().strip().split()]\nprint(calc_shortest(D, s1, s2))\nreturn", "def calc_shortest(D, s1, s2):\n    #D[1:3] = D[1]+D[2] = d_2+d_3 = distance between Station 2 and Station 4\n    if s1 == s2:\n        return 0\n    elif s1 < s2:\n        path1 = sum(D[s1-1:s2-1])\n    else:\n        path1 = sum(D[s2-1:s1-1])\n    path2 = sum(D)-path1\n    return min(path1, path2)\n\nN = [int(i) for i in input().strip().split()][0]\nD = [int(i) for i in input().strip().split()]\ns1, s2 = [int(i) for i in input().strip().split()]\nprint(calc_shortest(D, s1, s2))\nreturn", "\"\"\"Python 3.3\"\"\"\nnumStation = int(input())\ndistance = [int(x) for x in input().split()]\nwantDis = [int(x) for x in input().split()]\nwantDis2 = sorted(wantDis)\nwantDis = sorted(wantDis)\ncheck1 = 0\nwhile wantDis[1]>wantDis[0]:\n\tcheck1+=distance[wantDis[1]-2]\n\twantDis[1]-=1\ncheck2 = 0\nwhile wantDis2[1]<=\tnumStation:\n\tcheck2+=distance[wantDis2[1]-1]\n\twantDis2[1]+=1\ncount = 1\nwhile count<wantDis2[0]:\n\tcheck2+=distance[count-1]\n\tcount+=1\nprint(min(check1,check2))\n\n\n\n", "import sys\nmy_file = sys.stdin\n##my_file = open(\"input.txt\", \"r\")\nnum = int(my_file.readline())\ndist = my_file.readline().strip(\"\\n\").split(\" \")\ncoords = my_file.readline().strip(\"\\n\").split(\" \")\ndist = [int(i) for i in dist]\ncoords = [int(i) for i in coords]\nstart = coords[0]-1\nend = coords[1]-1\nif start > end:\n    temp = start\n    start = end\n    end = temp\n##print(dist, \"\\n\", coords)\nlen1 = sum(dist[start:end:])\nlen2 = sum(dist[end:len(dist):])+sum(dist[:start:])\n##print(sum(dist[:start:]))\n##print(len1, len2)\nif len1<len2:\n    print(len1)\nelse:\n    print(len2)", "n = int(input())\narr = list (map (int, input().split()))\n\ns,t = list(map (int, input().split()))\ns -= 1; t -= 1\nif s > t: s, t = t, s\n\nprint(min (sum (x for x in arr[s:t]), sum (arr) - sum (x for x in arr[s:t])))\n", "n = int(input())\ns = list(map(int,input().split()))\na,b=  [int(x)-1 for x in input().split()]\nif a > b: a,b=b,a\ntot = sum(s[a:b])\nprint(min(tot, sum(s)-tot))\n", "n=int(input())\n\ns=(input().split())\nfor i in range(n):\n    s[i]=int(s[i])\n\na,b=list(map(int,input().split()))\n\nif(a>b):\n    t=a\n    a=b\n    b=t\ns1=s[a-1:b-1]\ns2=s[b-1:]+s[:a-1]\nans1=0\nans2=0\nfor item in s1:\n    ans1+=item\n\nfor item in s2:\n    ans2+=item\n\nprint(min(ans1,ans2))\n    \n", "3\n\nn = int(input())\nd = list(map(int, input().split()))\ns, t = tuple(map(int, input().split()))\n\nif s > t:\n    s, t = t, s\na1 = sum([d[i] for i in range(s - 1, t - 1)])\na2 = sum([d[i] for i in range(s - 2, t - n - 2, -1)])\nprint(min(a1, a2))\n", "n, t = int(input()), [0] + list(map(int, input().split()))\na, b = map(int, input().split())\n\nfor i in range(1, n + 1):\n    t[i] += t[i - 1]\n\nif a > b: a, b = b, a\na, b = a - 1, b - 1\nprint(min(t[b] - t[a], t[a] + t[n] - t[b]))", "n,d=int(input()),list(map(int,input().split()))\na,b=map(int,input().split())\ntemp=min(a,b)\nb=max(a,b)\na=temp\nprint(min(sum(d[a-1:b-1]),sum(d[b-1:]+d[0:a-1])))", "n = int(input())\na = list(map(int, input().split()))\ns, t = list(map(int, input().split()))\ns -= 1\nt -= 1\nif s > t: s,t = t,s\nx = sum(a[s:t])\ny = sum(a[0:s]) + sum(a[t:n])\nprint(min(x, y))\n\n", "a= int(input())\ns= list(map(int,(input().split())))\nc,d = list(map(int,(input().split())))\nif(c>d):\n    c,d=d,c\ntotal=0\nsum=0\nfor i in range(len(s)):\n    total = total+s[i]\nfor i in range(c-1,d-1):\n    sum=sum+s[i]\nprint(min(sum,(total-sum)))\n", "n=int(input())\nl=[int (i) for i in input().split(\" \")]\np=[int (i) for i in input().split(\" \")]\nsum1=0\nsum2=0\na=max(p)\nb=min(p)\nsum1+=sum(l[b-1:a-1])\nsum2+=sum(l)-sum1\nprint(min(sum1,sum2))", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\nn = int(input())\nd = list(map(int, input().split()))\ns, t = sorted(list(map(int, input().split())))\ns -= 1\nt -= 1\nprint(min(sum(d[s:t]), sum(d) - sum(d[s:t])) if s != t else '0')", "n = int(input())\ns = input().split(' ')\na,b = input().split(' ')\na = int(a)\nb = int(b)\nif a>b :\n    temp = a\n    a = b\n    b = temp\ncount1 = 0\ncount2 = 0\nfor i in range(a-1,b-1) :\n    count1 += int(s[i])\n    s[i] = '0'\nfor i in s :\n    count2 += int(i)\nif count1>count2 :\n    print(count2)\nelse :\n    print(count1)\n", "n = int(input())\narr = list(map(int, input().split()))\na, b = map(int, input().split())\nif a > b:\n    a, b = b, a\ns = sum(arr[a - 1:b - 1])\nprint(min(s, sum(arr) - s))", "def shortest_distance(n_station: int, distances: list, start: int, end: int) -> int:\n    station_from = min(start, end)\n    station_to = max(start, end)\n\n    home = sum(distances[station_from:station_to])\n    away = sum(distances[station_to:]) + sum(distances[:station_from])\n\n    return (min(home, away))\n\n\nn = int(input())\nd = [0] + [int(i) for i in input().split()]\n(s, t) = map(int, input().split())\n\nprint(shortest_distance(n, d, s, t))", "def shortest_distance(distances: list, start: int, end: int) -> int:\n    if start > end:\n        start, end = end, start\n\n    home = sum(distances[start:end])\n    away = sum(distances[end:]) + sum(distances[:start])\n\n    return min(home, away)\n\n\ninput()\nd = [0] + [int(i) for i in input().split()]\n(s, t) = map(int, input().split())\n\nprint(shortest_distance(d, s, t))", "n = int(input())\nst = list(map(int, input().split()))\nx = list(map(int, input().split()))\na = min(x)-1\nb = max(x)-1\nif a == b:\n    print(0)\n    return\n\nal = sum(st)\n\nf = sum(st[a:b])\ns = al - f\n\nprint(min(f, s))\n", "n = int(input())\nd = [int(x) for x in input().split(' ')]\ns, t = [int(x) for x in input().split(' ')]\na = min(s,t)\nb = max(s,t)\nx = 0\nfor i in range(a - 1, b - 1):\n\tx += d[i]\ny = 0\nfor i in list(range(b - 1, n)) + list(range(a - 1)):\n\ty += d[i]\nprint(min(x,y))\n", "n = int(input())\nd = list(map(int, input().split()))\ns, t = list(map(int, input().split()))\nop1 = op2 = 0\ni = s-1\nwhile i != t-1:\n    op1 += d[i]\n    i = (i + 1) % n\n\nj = t-1\nwhile j != s-1:\n    op2 += d[j]\n    j = (j + 1) % n\n\nprint(min(op1, op2))\n", "n = int(input())\nd = [int(str) for str in input().split()]\ns1, f1 = [int(str) - 1 for str in input().split()]\ns = min(s1, f1)\nf = max(s1, f1)\ndirect = sum(d[s:f])\nrevers = sum(d[f:]+d[:s])\nif min(direct, revers) == 0 & (f - s) > 0:\n    print(max(direct, revers))\nelse :\n    print(min(direct, revers))", "n = int(input())\nt = list(map(int, input().split())) * 2\na, b = sorted([int(x) - 1 for x in input().split()])\n\nprint(min(sum(t[a:b]), sum(t[b:a+n])))\n"]