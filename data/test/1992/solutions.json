["n, m, k = map(int, input().split())\narr = [0] * n\npl = [0] * n\nz = 0\nfor i in input().split():\n    j = int(i)\n    arr[j - 1] = z\n    pl[z] = j - 1\n    z += 1\n#print(arr, pl)\nr = 0\nfor i in input().split():\n    j = int(i) - 1\n    c = arr[j]\n    r += c // k + 1\n    if c != 0:\n        pl[c - 1], pl[c] = pl[c], pl[c - 1]\n        arr[pl[c]] += 1\n        arr[j] -= 1\n    #print(arr, pl)\nprint(r)", "n, m, k = map(int, input().split())\napps = list(map(int, input().split()))\nruns = list(map(int, input().split()))\n\nplaces = [0] * (n + 1)\nfor i in range(n):\n    places[apps[i]] = i\n    \ntouchs = 0\nfor app in runs:\n    place = places[app]\n    touchs += place // k + 1\n    if place > 0:\n        app2 = apps[place - 1]\n        apps[place - 1], apps[place] = apps[place], apps[place - 1]\n        places[app] = place - 1\n        places[app2] = place\n\nprint(touchs)", "def foo():\n    n, m, k = list(map(int, input().split()))\n    a, b = [0] * n, [0] * n\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] -= 1\n        b[a[i]] = i\n    c = list(map(int, input().split()))\n    answer = 0;\n    for element in c:\n        element -= 1\n        answer += b[element] // k + 1\n        if b[element]:\n            a[b[element]], a[b[element] - 1] = a[b[element] - 1], a[b[element]]\n            b[a[b[element]]] += 1\n            b[element] -= 1\n    return answer\n        \nprint(foo())\n", "n,m,k = input().split()\nn = int(n)\nm = int(m)\nk = int(k)\np = [int(x) for x in input().split()]\no = [int(x) for x in input().split()]\ng = 0\npos = {}\nval = {}\nj = 0\nfor i in p:\n    pos[i] = j\n    val[j] = i\n    j += 1\nfor i in o:\n    ind = pos[i]\n    g += ((ind)//k)+1\n    if ind > 0:\n        tmp = val[ind-1]\n        val[ind-1] = i\n        pos[i] = ind -1\n        val[ind] = tmp\n        pos[tmp] = ind\n\nprint(g)", "__author__ = 'PrimuS'\n\nn, m, k = (int(x) for x in input().split())\n\norder = [int(x) for x in input().split()]\n\ntouch = [int(x) for x in input().split()]\n\n# n = 100000\n# order = [0] * n\n# k = 2\n# m = 100000\n# touch = [0] * n\n# for i in range(n):\n#     order[i] = i\n# for i in range(m):\n#     touch[i] = i\n\nres = 0\nd = {}\n\nfor i in range(n):\n    d[order[i]] = i\n\nfor x in touch:\n    pos = d[x]\n    res += pos // k + 1\n    if pos > 0:\n        order[pos - 1], order[pos] = order[pos], order[pos - 1]\n        d[x] = pos - 1\n        d[order[pos]] = pos\n\nprint(res)", "n, m, k = list(map(int,input().split()))\np       = [int(i) for i in input().split()]\nu       = [0      for i in range(n+1)]\np      += [0]\na    = 0\n\nfor i in range(n,0,-1):\n    p[i]    = p[i-1]\nfor i in range(1,n+1):\n    u[p[i]] = i\n\nfor x in [int(i) for i in input().split()]:\n    y  = u[x]\n    a += int((y-1) / k) + 1\n    if y < 2:\n        continue\n    p[y], p[y-1]       = p[y-1], p[y]\n    u[p[y]], u[p[y-1]] = y,      y-1\n\nprint(a)\n", "def main():\n    n, m, k = map(int, input().split())\n    aa = [0]\n    aainv = [0] * (n + 1)\n    for a in map(int, input().split()):\n        aainv[a] = len(aa)\n        aa.append(a)\n    bb = list(map(int, input().split()))\n    res = 0\n    for b in bb:\n        bpos = aainv[b]\n        res += (bpos - 1) // k + 1\n        if bpos > 1:\n            bpos -= 1\n            c = aa[bpos]\n            aainv[b] = bpos\n            aa[bpos] = b\n            bpos += 1\n            aainv[c] = bpos\n            aa[bpos] = c\n    print(res)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n, m, k = list(map(int, input().split()))\nan = [0] + list(map(int, input().split()))\nna = [0]*(n+1)\nbm = list(map(int, input().split()))\nnum = 0\nfor i in range(1,n+1):\n    na[an[i]] = i\nfor i in range(m):\n    if na[bm[i]] != 1:\n        temp = an[na[bm[i]]-1]\n        an[na[bm[i]]-1]= an[na[bm[i]]]\n        an[na[bm[i]]] = temp\n        num += (na[bm[i]]-1)//k\n        temp2 = na[bm[i]]\n        na[bm[i]] = na[temp]\n        na[temp] = temp2\nprint(num+m)\n", "#Doc du lieu (d\u00f2ng 1)\ns=input().split()\nn=int(s[0])\nm=int(s[1])\nk=int(s[2])\n#Khoi tao mang\ns=input().split()\nscreen=[0 for i in range(n+1)]\nposition=[0 for i in range(n+1)]\n\nsl=0\na=[[0]]\ntg=[0]\nfor ii in range(n):\n    i=ii+1\n    screen[int(s[ii])]=int(i/k)+min(1,i%k)\n    tg.append(int(s[ii]))\n    sl+=1\n    if sl==k or ii==n-1:\n        a.append(tg)\n        sl=0\n        tg=[0]\n    if i%k==0:\n        position[int(s[ii])]=k\n    else: position[int(s[ii])]=i%k\n#Doc du lieu (d\u00f2ng 2)\n#Doc du lieu (d\u00f2ng 3)\ns=input().split()\nquest=[]\nfor i in range(m):\n    quest.append(int(s[i]))\n#Ktra\n#Xu ly\nkq=0\n\nfor i in range(m):\n    app=quest[i]\n    kq+=screen[app]\n    vt_scr=screen[app]\n    vt_pos=position[app]\n    if position[app]!=1:\n        bef_pos=vt_pos-1\n        bef_scr=vt_scr\n        app_bef=a[bef_scr][bef_pos]\n        position[app_bef],position[app]=position[app],position[app_bef]\n        a[bef_scr][bef_pos],a[vt_scr][vt_pos]=a[vt_scr][vt_pos],a[bef_scr][bef_pos]\n    else:\n        if screen[app]!=1:\n            bef_pos=k\n            bef_scr=vt_scr-1\n            app_bef=a[bef_scr][bef_pos]\n            position[app_bef],position[app]=position[app],position[app_bef]\n            screen[app_bef],screen[app]=screen[app],screen[app_bef]\n            a[bef_scr][bef_pos],a[vt_scr][vt_pos]=a[vt_scr][vt_pos],a[bef_scr][bef_pos]\nprint(kq)            \n            \n\n", "n, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd = {}\nfor i in range(len(a)):\n    d[a[i]] = i\ncnt = 0\nfor i in range(len(b)):\n    cnt += ((d[b[i]]) // k)\n    cnt += 1\n    if d[b[i]] != 0:\n        d[b[i]] -= 1\n        d[a[d[b[i]]]] += 1\n        m = a[d[b[i]]]\n        a[d[b[i]]] = a[d[b[i]] + 1]\n        a[d[b[i]] + 1] = m \n    \nprint(cnt)\n    \n    \n    \n", "def main():\t\n\tn, m, k = map(int, input().split())\n\ta = list(map(int, input().split()))\n\tb = list(map(int, input().split()))\n\tpos  = [0] * (n + 5)\n\tapp = [0] * (n + 5)\n\tfor i in range(n):\n\t\tpos[i + 1] = a[i]\n\t\tapp[a[i]] = i + 1\n\t#print(app[1:], pos[1:])\n\tswipes = 0\n\tfor x in b:\n\t\tif app[x] % k != 0:\n\t\t\tswipes += ((app[x] // k) + 1)\n\t\telse:\n\t\t\tswipes += (app[x]//k)\n\t\tif app[x] != 1:\n\t\t\ttempPos = app[x]\n\t\t\ttempApp = pos[tempPos - 1]\n\t\t\tpos[tempPos] = tempApp\n\t\t\tapp[tempApp] = tempPos\n\t\t\tapp[x] = tempPos - 1\n\t\t\tpos[tempPos - 1] = x\n\t\t\t#print(app[1:], pos[1:])\n\tprint(swipes)\n\n\n\n\ndef __starting_point():\n\tmain()\n__starting_point()", "#!/usr/env python3\n\nn, m, k = map(int, input().split())\na = [int(x) for x in input().split()]  # a[p] = id of app at position p (p=0,1,2,...)\nb = [int(x) for x in input().split()]\nassert(len(a) == n)\nassert(len(b) == m)\npos = [0]*(n+1)  # c[i] = position of app with id i (id=1,2,3,...)\nfor p in range(n):\n    pos[a[p]] = p\ngesture = 0\nfor i in b:\n    this_pos = pos[i]\n    this_id = i\n\n    gesture += this_pos//k + 1\n\n    if this_pos > 0:\n        prev_pos = pos[i] - 1\n        prev_id = a[prev_pos]\n\n        a[this_pos], a[prev_pos] = a[prev_pos], a[this_pos]\n        pos[this_id], pos[prev_id] = pos[prev_id], pos[this_id]\nprint(gesture)", "def main(): \n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    pos  = [0] * (n + 5)\n    app = [0] * (n + 5)\n    for i in range(n):\n        pos[i + 1] = a[i]\n        app[a[i]] = i + 1\n    #print(app[1:], pos[1:])\n    swipes = 0\n    for x in b:\n        if app[x] % k != 0:\n            swipes += ((app[x] // k) + 1)\n        else:\n            swipes += (app[x]//k)\n        if app[x] != 1:\n            tempPos = app[x]\n            tempApp = pos[tempPos - 1]\n            pos[tempPos] = tempApp\n            app[tempApp] = tempPos\n            app[x] = tempPos - 1\n            pos[tempPos - 1] = x\n            #print(app[1:], pos[1:])\n    print(swipes)\n\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n, m, k = list(map(int, input().split()))\n    icons = list(map(int, input().split()))\n    icons_for_launch_positions = list(map(int, input().split()))\n    # n = 10\n    # m = 12\n    # k = 3\n    # icons = [6, 1, 2, 9, 3, 10, 8, 5, 7, 4]\n    # icons_for_launch_positions = [3, 9, 9, 4, 8, 2, 3, 8, 10, 8, 3, 4]\n\n    gestures = m\n    icons_positions = [0] * (n + 1)\n\n    for i in range(0, len(icons)):\n        icons_positions[icons[i]] = i\n\n    for icon in icons_for_launch_positions:\n        gestures += (icons_positions[icon] // k)\n\n        if icons_positions[icon] != 0:\n            previous_icon = icons[icons_positions[icon] - 1]\n\n            swap(icons, icons_positions[icon], icons_positions[previous_icon])\n            swap(icons_positions, icon, previous_icon)\n\n    print(gestures)\n\n\ndef swap(collection_list, first_index, second_index):\n    temp = collection_list[first_index]\n    collection_list[first_index] = collection_list[second_index]\n    collection_list[second_index] = temp\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n, m, k = list(map(int, input().split()))\n    icons = list(map(int, input().split()))\n    icons_for_launch_positions = list(map(int, input().split()))\n\n    gestures = m\n    positions = [0] * (n + 1)\n\n    for i in range(0, len(icons)):\n        positions[icons[i]] = i\n\n    for icon in icons_for_launch_positions:\n        gestures += (positions[icon] // k)\n\n        if positions[icon] != 0:\n            previous_icon = icons[positions[icon] - 1]\n\n            swap(icons, positions[icon], positions[previous_icon])\n            swap(positions, icon, previous_icon)\n\n    print(gestures)\n\n\ndef swap(collection_list, first_index, second_index):\n    temp = collection_list[first_index]\n    collection_list[first_index] = collection_list[second_index]\n    collection_list[second_index] = temp\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\n\ndef solve():\n    n, m, k = read()\n    a = read()\n    b = read()\n    loc = [0]*(n+1)\n    for i in range(n): loc[a[i]] = i\n    res = 0\n    for i in range(m):\n        dist = loc[b[i]] // k\n        res += (dist+1)\n        if loc[b[i]] > 0:\n            loc[b[i]]-=1\n            val = a[loc[b[i]]]\n            loc[val]+=1\n            a[loc[b[i]]], a[loc[b[i]]+1] = a[loc[b[i]]+1], a[loc[b[i]]]\n    return res\n    \ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "import sys\n\ndef solve():\n    n, m, k = read()\n    a = read()\n    b = read()\n    loc = [0]*(n+1)\n    for i in range(n): loc[a[i]] = i\n    res = 0\n    for i in range(m):\n        dist = loc[b[i]] // k\n        res += (dist+1)\n        if loc[b[i]] > 0:\n            loc[b[i]]-=1\n            val = a[loc[b[i]]]\n            loc[val]+=1\n            a[loc[b[i]]], a[loc[b[i]]+1] = a[loc[b[i]]+1], a[loc[b[i]]]\n    return res\n    \ndef read(mode=2):\n    inputs = input().strip()\n    if mode == 0: return inputs  # String\n    if mode == 1: return inputs.split()  # List of strings\n    if mode == 2: return list(map(int, inputs.split()))  # List of integers\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    if isinstance(s, tuple): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\ndef run():\n    if sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\n    res = solve()\n    write(res)\nrun()", "n, m, k = map(int, input().split())\nphone = list(map(int, input().split()))\naction = list(map(int, input().split()))\npositions = [0]*(n+1)\n\nfor i in range(len(phone)):\n\t\tpositions[phone[i]] = i\n\n\nfocus = 0\nfor i in action:\n\tfocus += 1+(positions[i])//k\n\t#print('\u044d\u043b\u0435\u043c\u0435\u043d\u0442', i, '\u0438\u043c\u0435\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441', positions[i])\n\t#print('\\t',  1+(positions[i])//k, phone)\n\tif positions[i] > 0:\n\t\tphone[positions[i]], phone[positions[i]-1] = phone[positions[i]-1], phone[positions[i]] \n\t\tpositions[i] -= 1\n\t\tpositions[phone[positions[i]+1]] += 1\n\n\t#print('\u043f\u043e\u0441\u043b\u0435 \u043e\u043d \u0438\u043c\u0435\u0435\u0442 \u0438\u0434\u0435\u043a\u0441', positions[i])\n\nprint(focus)", "#!/usr/bin/env python3\nn, m, k = map(int, input().split(' '))\na = map(int, input().split(' ')) # initial app order\nb = map(int, input().split(' ')) # launch order\n\npos_app_id = {}\napp_id_pos = {}\nfor pos, app_id in enumerate(a):\n\tpos_app_id[app_id] = pos\n\tapp_id_pos[pos] = app_id\n\ndef rotate_left(a_id):\n\ta_pos = pos_app_id[a_id]\n\tif a_pos > 0:\n\t\tb_pos = a_pos - 1\n\t\tb_id = app_id_pos[b_pos]\n\n\t\tpos_app_id[a_id] = b_pos\n\t\tpos_app_id[b_id] = a_pos\n\n\t\tapp_id_pos[a_pos] = b_id\n\t\tapp_id_pos[b_pos] = a_id\n\nswipes = 0\nfor app_id in b:\n\tapp_pos = pos_app_id[app_id]\n\tswipes += app_pos // k + 1\n\trotate_left(app_id)\n\nprint(swipes)", "n, m, k = [int(x) for x in input().split()]\na = [int(x) - 1 for x in input().split()]\nb = [int(x) - 1 for x in input().split()]\nra = [0] * n\nfor i, v in enumerate(a):\n    ra[v] = i\nans = 0\nfor v in b:\n    i = ra[v]\n    ans += i // k + 1\n    if i == 0:\n        continue\n    j = i - 1\n    u = a[j]\n    ra[u], ra[v] = ra[v], ra[u]\n    a[i], a[j] = a[j], a[i]\nprint(ans)\n\n", "n, m, k = [int(x) for x in input().split()]\na = [int(x) - 1 for x in input().split()]\nb = [int(x) - 1 for x in input().split()]\nra = [0] * n\nfor i, v in enumerate(a):\n    ra[v] = i\nans = 0\nfor v in b:\n    i = ra[v]\n    ans += i // k + 1\n    if i == 0:\n        continue\n    j = i - 1\n    u = a[j]\n    ra[u], ra[v] = ra[v], ra[u]\n    a[i], a[j] = a[j], a[i]\nprint(ans)\n\n", "n, m, k = (int(x) for x in input().split())\na = [int(x) for x in input().split()]\nforward = dict(enumerate(a))\nbackward = dict((y, x) for (x, y) in enumerate(a))\nb = [int(x) for x in input().split()]\nres = 0\nfor x in b:\n\tpos = backward[x]\n\tres += pos // k + 1\n\tif pos != 0:\n\t\tprev = forward[pos - 1]\n\t\tforward[pos] = prev\n\t\tforward[pos - 1] = x\n\t\tbackward[prev] = pos\n\t\tbackward[x] = pos - 1\nprint(res)\n", "n, m, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\npos = [0]*(n+1)\narr = [0]*(n+1)\nfor i in range(len(a)):\n    pos[a[i]] = i+1\n    arr[i+1] = a[i]\nl = 0\n#print(pos, arr)\nfor i in b:\n    if pos[i] % k:\n        l += pos[i] // k + 1\n    else:\n        l += pos[i] // k\n    if pos[i] - 1:\n        tempPos = pos[i]\n        tempArr = arr[pos[i]-1]\n        pos[i] -= 1\n        pos[tempArr] += 1\n        arr[pos[i]] = i\n        arr[pos[i]+1] = tempArr\nprint(l)\n", "#!/bin/python\n\napps_size, launched_size, apps_per_screen = list(map(int, input().split()))\n\napps = list(map(int, input().split()))\nlaunched = list(map(int, input().split()))\n\napps_pos = {}\nfor pos, elem in enumerate(apps):\n    apps_pos[elem] = pos\n\nresult = 0\nfor app in launched:\n    pos = apps_pos[app]\n    if pos == 0:\n        result += 1\n        continue\n    prev_app = apps[pos-1]\n\n    result += pos // apps_per_screen + 1\n\n    apps[pos-1] = app\n    apps[pos] = prev_app\n    apps_pos[prev_app] = pos\n    apps_pos[app] = pos-1\n\nprint(result)\n", "import math\ns = input()\nl = s.split()\nn, m, k = (int(i) for i in l)\ns = input()\na = s.split()\ns = input()\nb = s.split()\nh1 = [0 for i in range(0,100001)]\nh2 = [0 for i in range(0,100001)]\ncount = 1\nfor i in a:\n    t_n = int(i)\n    h1[t_n] = int(math.ceil(count / k))\n    h2[t_n] = count % k\n    if h2[t_n] == 0:\n        h2[t_n] = k\n    count += 1\n\nans = 0\nfor i in b:\n    num = int(i)\n    ans += h1[num]\n    if h2[num] == 1 and h1[num] == 1:\n        continue\n    elif h2[num] == 1:\n        cn = k*(h1[num]-1) + h2[num] - 1\n        h1[int(a[cn-1])] += 1\n        h2[int(a[cn-1])] = 1\n        h1[num] -= 1\n        h2[num] = k\n        a[cn-1], a[cn] = (a[cn], a[cn-1])\n    else:\n        cn = k*(h1[num]-1) + h2[num] - 1\n        h2[num] -= 1\n        h2[int(a[cn-1])] += 1\n        a[cn-1], a[cn] = (a[cn], a[cn-1])\nprint(ans)"]