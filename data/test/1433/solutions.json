["s, r = map(int, input().split())\nv = []\nfor i in range(s):\n\tv += [list(map(int, input().split()))]\nans = 0\np = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nfor i in range(s):\n\tif v[i].count(1) == 0:\n\t\tcontinue\n\tif v[i].count(1) == 1:\n\t\tans += r - 1\n\telse: \n\t\ta = v[i].index(1)\n\t\tb = v[i][::-1].index(1)\n\t\tans += 2 * r - a - b - 2 * v[i].count(1)\nv1 = []\nfor i in range(r):\n\tv1 += [[v[j][i] for j in range(s)]]\nfor i in range(r):\n\tif v1[i].count(1) == 0:\n\t\tcontinue\n\tif v1[i].count(1) == 1:\n\t\tans += s - 1\n\telse: \n\t\ta = v1[i].index(1)\n\t\tb = v1[i][::-1].index(1)\n\t\tans += 2 * s - a - b - 2 * v1[i].count(1)\nprint(ans)", "def f():\n    n, m = list(map(int, input().split()))\n    S = [list(map(int, input().split())) for i in range(n)]\n\n    strp = [[S[i][0]] for i in range(n)]\n    for i in range(n):\n      for j in range(1, m):\n        strp[i].append(strp[i][j-1] + S[i][j])\n    stbp = [[S[0][j]] for j in range(m)]\n    for j in range(m):\n      for i in range(1, n):\n        stbp[j].append(stbp[j][i-1] + S[i][j])\n\n\n    def good(x, y, d):\n        if S[x][y] == 1:\n            return False\n        else:\n            d = 'ruld'.find(d)\n            if not d % 2:\n                return bool( strp[x][y] if d == 0 else strp[x][-1] - strp[x][y] )\n            else:\n                return bool( stbp[y][x] if d == 1 else stbp[y][-1] - stbp[y][x] )\n            \n\n\n    cnt = 0\n    for x in range(n):\n        for y in range(m):\n            cnt += good(x, y, 'r') + \\\n                   good(x, y, 'u') + \\\n                   good(x, y, 'l') + \\\n                   good(x, y, 'd')\n\n    print(cnt)\nf()\n", "n, m = map(int, input().split())\ns = [input().split() for i in range(n)]\nans = 0\nfor i in range(n):\n    cur_r = s[i]\n    prev_1 = 0\n    prev_0 = 0\n    for j in cur_r:\n        if j == '1':\n            ans += prev_0\n            prev_0 = 0\n            prev_1 = 1\n        else:\n            ans += prev_1\n            prev_0 += 1\nfor i in range(m):\n    prev_1 = 0\n    prev_0 = 0\n    for t in range(n):\n        j = s[t][i]\n        if j == '1':\n            ans += prev_0\n            prev_0 = 0\n            prev_1 = 1\n        else:\n            ans += prev_1\n            prev_0 += 1\nprint(ans)", "n, m = list(map(int, input().split()))\nd = []\nres = 0\nfor i in range(n):\n    s = input()\n    if s.count('1') != 0:\n        l = s.find('1')\n        r = s.rfind('1')\n        res += s[:l].count('0')\n        res += s[r+1:].count('0')\n        res += s[l+1:r].count('0') * 2\n        #print(res)\n    d.append(s)\n#print(d)\n    \nfor i in range(0, m * 2, 2):\n    ss = ''\n    for k in range(n):\n        ss += d[k][i]\n        \n    if ss.count('1') != 0:\n        l = ss.find('1')\n        r = ss.rfind('1')\n        res += ss[:l].count('0')\n        res += ss[r+1:].count('0')\n        res += ss[l+1:r].count('0') * 2        \n    \n    #print(ss, res)\n    \nprint(res)\n    \n", "# !!!!!!\nfrom sys import stdin as fin\n# fin = open(\"t2b.in\")\n\n# n = int(fin.readline())\nn, m = map(int, fin.readline().split())\n# line = fin.readline().strip()\nmtrx = [list(map(int, fin.readline().split())) for i in range(n)]\n\nlines, cols = [[0] * m for i in range(n)], [[0] * n for i in range(m)]\n\nfor i in range(n):\n    for j in range(m):\n        if mtrx[i][j] == 1:\n            lines[i][j] = 1\n            cols[j][i] = 1\n\nfor i in range(n):\n    for j in range(1, m):\n       lines[i][j] += lines[i][j - 1]\n    # print(' '.join(str(n) for n in lines[i]))\n# print()\n\nfor j in range(m):\n    for i in range(1, n):\n        cols[j][i] += cols[j][i - 1]\n    # print(' '.join(str(n) for n in cols[j]))\n# print()\n\ncnt = 0\nfor i in range(n):\n    for j in range(m):\n        if mtrx[i][j] == 0:\n            # print((i, j), lines[i][j], lines[i][m - 1] - lines[i][j], cols[j][i], cols[j][n - 1] - cols[j][i])\n            cnt += (1 if lines[i][j] else 0) + (1 if (lines[i][m - 1] - lines[i][j]) else 0) +\\\n                (1 if cols[j][i] else 0) + (1 if (cols[j][n - 1] - cols[j][i]) else 0)\nprint(cnt)", "n, m = list(map(int, input().split()))\nminn_g = [1001] * n\nmaxx_g = [-1] * n\nminn_v = [1001] * m\nmaxx_v = [-1] * m\nsize_g = [0] * n\nsize_v = [0] * m\nfor i in range(n):\n    o = list(map(int, input().split()))\n    for j in range(m):\n        if (o[j] == 1):\n            size_g[i] += 1\n            size_v[j] += 1\n            minn_g[i] = min(minn_g[i], j);\n            minn_v[j] = min(minn_v[j], i);\n            maxx_g[i] = max(maxx_g[i], j);\n            maxx_v[j] = max(maxx_v[j], i);            \nres = 0\nfor i in range(n):\n    if size_g[i] != 0:\n        res += m - size_g[i] - minn_g[i];\n        res += maxx_g[i] + 1 - size_g[i];\nfor i in range(m):\n    if size_v[i] != 0:\n        res += n - size_v[i] - minn_v[i];\n        res += maxx_v[i] + 1 - size_v[i];\nprint(res)", "n,m = map(int,input().split())\ngrid = [[i for i in map(int, input().split())] for _ in range(n)]\ngood_spots = 0\nfound1 = False\nfor row in grid:\n    found1 = False\n    if sum(row) == 0:\n        continue\n    last_one = len(row) - row[::-1].index(1) - 1\n    for idx,num in enumerate(row):\n        if num == 0:\n            if idx < last_one:\n                good_spots += 1\n            if found1:\n                good_spots += 1\n        else:\n            found1 = True\n\nfor c in range(m):\n    found1 = False\n    col = [row[c] for row in grid]\n    if sum(col) == 0:\n        continue\n    last_one = len(col) - col[::-1].index(1) - 1\n    for idx, num in enumerate(col):\n        if num == 0:\n            if idx < last_one:\n                good_spots += 1\n            if found1:\n                good_spots += 1\n        else:\n            found1 = True\nprint(good_spots)", "#!/usr/bin/env python3\n\nfrom sys import stdin\n\n\ndef main():\n    r, c = stdin_get_ints_from_line()\n\n    a = []\n\n    for _ in range(r):\n        a.append(stdin_get_ints_list_from_line())\n\n    good = 0\n\n    col_have = [0] * 1000\n    row_have = [0] * 1000\n\n    zeros_left = [0] * 1000\n    zeros_up = [0] * 1000\n\n    for row in range(r):\n        for col in range(c):\n            if a[row][col] == 1:\n                row_have[row] = 1\n                col_have[col] = 1\n\n                good += zeros_left[row]\n                zeros_left[row] = 0\n\n                good += zeros_up[col]\n                zeros_up[col] = 0\n                continue\n\n            zeros_left[row] += 1\n            zeros_up[col] += 1\n            if row_have[row] == 1:\n                good += 1\n            if col_have[col] == 1:\n                good += 1\n\n    print(good)\n\n\ndef stdin_get_ints_from_line():\n    return (int(x) for x in stdin.readline().strip().split(' '))\n\n\ndef stdin_get_ints_list_from_line():\n    return list(int(x) for x in stdin.readline().strip().split(' '))\n\n\ndef stdin_get_string_from_line():\n    return stdin.readline().strip()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\n# coding: utf-8\n\n# In[134]:\n\nn,m = list(map(int, input().split()))\n\n\n# In[135]:\n\nplan = []\nfor i in range(n):\n    plan.append(input().split())\n\n\n# In[136]:\n\nplan2 = list(map(list,list(zip(*plan))))\n\n\n# In[137]:\n\ndef findLeft(string):\n    i = 0\n    while i < len(string):\n        if string[i] == '1':\n            return i\n        else:\n            i += 1\n\n\n# In[138]:\n\ndef findRight(string):\n    i = len(string)-1\n    while i>=0:\n        if string[i] == '1':\n            return i\n        else:\n            i -= 1\n\n\n# In[139]:\n\ncount = 0\nfor each in plan:\n    if each.count('1') == 1:\n        count += each.count('0')\n    elif each.count('1') > 1:\n        l = findLeft(each)\n        r = findRight(each)\n        count += each[:l].count('0')+2*each[l+1:r].count('0') + each[r+1:].count('0')\n\n\nfor each in plan2:\n    if each.count('1') == 1:\n        count += each.count('0')\n    elif each.count('1') > 1:\n        l = findLeft(each)\n        r = findRight(each)\n        count += each[:l].count('0')+2*each[l+1:r].count('0') + each[r+1:].count('0')\n\n\n# In[140]:\n\nprint(count)\n\n", "a, b = map(int, input().split())\nscene = [list(map(int, input().split())) for i in range(a)]\nans = 0\nfor i in range(a):\n    first = 0\n    between = 0\n    last = 0    \n    isactor = False\n    for j in range(b):\n        if scene[i][j] == 0 and isactor == False:\n                first += 1\n        elif isactor == True and scene[i][j] == 0:\n            last += 1\n        elif isactor == True and scene[i][j] == 1:\n            between += last\n            last = 0\n        elif isactor == False and scene[i][j] == 1:\n            isactor = True\n    if isactor == True:\n        ans += first + 2 * between + last\nfor j in range(b):\n    first = 0\n    between = 0\n    last = 0    \n    isactor = False\n    for i in range(a):\n        if scene[i][j] == 0 and isactor == False:\n            first += 1\n        elif isactor == True and scene[i][j] == 0:\n            last += 1\n        elif isactor == True and scene[i][j] == 1:\n            between += last\n            last = 0\n        elif isactor == False and scene[i][j] == 1:\n            isactor = True\n    if isactor == True:\n        ans += first + 2 * between + last  \nprint(ans)", "n, m = map(int, input().split())\na = []\nt_a = []\nans = 0\n\nfor i in range(n):\n    x = list(map(int, input().split()))\n    a.append(x)\n\nt_a = list(map(list, zip(*a)))\n#print(a)\n#print(t_a)\nfor i in range(n):\n    c = a[i].count(1)\n    if (c > 1):\n        l = a[i].index(1)\n        r = m - a[i][::-1].index(1) - 1\n        #print(l, r, ((m - c - (l + (m - r - 1)))))\n        ans += l + (m - r - 1) + ((m - c - (l + (m - r - 1))) * 2)\n    elif (c == 1):\n        ans += m - 1\n    #print(ans)\n    \nfor i in range(m):\n    c = t_a[i].count(1)\n    if (c > 1):\n        l = t_a[i].index(1)\n        r = n - t_a[i][::-1].index(1) - 1\n        ans += l + (n - r - 1) + ((n - c - (l + (n - r - 1))) * 2)\n    elif (c == 1):\n        ans += n - 1\n    #print(ans)\nprint(ans)", "def count_place(a, n, m):\n    place = 0\n    for i in range(n):\n        c = a[i].count(1)\n        if (c > 1):\n            l = a[i].index(1)\n            r = m - a[i][::-1].index(1) - 1\n            #print(l, r, ((m - c - (l + (m - r - 1)))))\n            place += l + (m - r - 1) + ((m - c - (l + (m - r - 1))) * 2)\n        elif (c == 1):\n            place += m - 1  \n    return place\n\nn, m = map(int, input().split())\na = []\nt_a = []\nans = 0\n\nfor i in range(n):\n    x = list(map(int, input().split()))\n    a.append(x)\n\nt_a = list(map(list, zip(*a)))\nans = count_place(a, n, m) + count_place(t_a, m, n)\nprint(ans)", "n,m=list(map(int,input().split()))\n\njadval=[]\nfor i in range(n):\n    jadval.append(list(input().replace(\" \", \"\")))\ns=0\n#raste\nfor i in range(n):\n    f=0\n    for j in range(m):\n        if jadval[i][j]=='1':\n            f=1\n        elif f==1:\n            s+=1\n#chape\nfor i in range(n):\n    f=0\n    j=m-1\n    while j>=0:\n        if jadval[i][j]=='1':\n            f=1\n        elif f==1:\n            s+=1\n        j-=1\n#paeene\nfor j in range(m):\n    f=0\n    for i in range(n):\n        if jadval[i][j]=='1':\n            f=1\n        elif f==1:\n            s+=1\n#balae\nfor j in range(m):\n    f=0\n    i=n-1\n    while i>=0:\n        if jadval[i][j]=='1':\n            f=1\n        elif f==1:\n            s+=1\n        i-=1\nprint(s)\n", "def f(s):\n    l, r = s.find('1'), s.rfind('1')\n    if l == -1:\n        return 0\n    else:\n        return l + len(s) - r - 1 + 2 * sum(s[i] == '0' for i in range(l + 1, r))\nn, m = map(int, input().split())\na = [''.join(input().split()) for i in range(n)]\nr = sum(f(s) for s in a)\nc = sum(f(''.join(a[i][j] for i in range(n))) for j in range(m))\nprint(r + c)", "from sys import *\n\nn,m=(int(z) for z in stdin.readline().split())\nans=0\nmat=[]\nfor i in range(n):\n    mat.append([int(z) for z in stdin.readline().split()])\n    fst=m\n    lst=-1\n    nu=0\n    for j in range(m):\n        if mat[-1][j]==1:\n            nu+=1\n            lst=j\n            if not fst-m:\n                fst=j\n    ans+=lst+1-nu\n    ans+=m-fst-nu\n    #print(ans)\nfor i in range(m):\n    fst=n\n    lst=-1\n    nu=0\n    for j in range(n):\n        if mat[j][i]==1:\n            nu+=1\n            lst=j\n            if not fst-n:\n                fst=j\n    ans+=lst+1-nu\n    ans+=n-fst-nu\n    #print(ans,lst,fst,nu)\nprint(ans)", "def calc(s, length):\n    l = s.find('1')\n    if l == -1:\n        return 0\n    r = s.rfind('1')\n    return l + length - 1 -r + 2*sum(s[i] == '0' for i in range(l+1, r))\n\n\nn, m = list(map(int, input().split()))\ndp = []\nnum = 0\nfor i in range(n):\n    dp.append(''.join(input().split()))\n    num += calc(dp[i], m)\n\nnum += sum((calc(''.join(dp[i][j] for i in range (n)), n) for j in range(m)))\n\nprint(num)\n\n\n\n\n\n\n\n\n\n\n\n\n", "\"\"\"\nB. \u041f\u0440\u043e\u0436\u0435\u043a\u0442\u043e\u0440\u044b\n\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\n1 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\n\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u0430\u043c\u044f\u0442\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\n256 \u043c\u0435\u0433\u0430\u0431\u0430\u0439\u0442\n\u0432\u0432\u043e\u0434\n\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0432\u0432\u043e\u0434\n\u0432\u044b\u0432\u043e\u0434\n\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434\n\n\u0422\u0435\u0430\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0446\u0435\u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c n\u2009\u00d7\u2009m. \u0414\u0438\u0440\u0435\u043a\u0442\u043e\u0440 \u0442\u0435\u0430\u0442\u0440\u0430 \u0432\u044b\u0434\u0430\u043b \u0432\u0430\u043c \u043f\u043b\u0430\u043d \u0441\u0446\u0435\u043d\u044b, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e\n\u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043d\u0430 \u043d\u0435\u0439 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c\u0441\u044f \u0430\u043a\u0442\u0451\u0440\u044b. \u041d\u0430 \u043f\u043b\u0430\u043d\u0435 \u043e\u0442\u043c\u0435\u0447\u0435\u043d\u043e \u0432 \u043a\u0430\u043a\u0438\u0445 \u043a\u043b\u0435\u0442\u043a\u0430\u0445 \u0431\u0443\u0434\u0443\u0442 \u0441\u0442\u043e\u044f\u0442\u044c \u0430\u043a\u0442\u0451\u0440\u044b, \u0430 \u0432 \u043a\u0430\u043a\u0438\u0445 \u043d\u0435\u0442.\n\n\u041f\u0440\u043e\u0436\u0435\u043a\u0442\u043e\u0440, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043d\u0430 \u0441\u0446\u0435\u043d\u0443, \u0431\u0443\u0434\u0435\u0442 \u0441\u0432\u0435\u0442\u0438\u0442\u044c \u0432 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u0447\u0435\u0442\u044b\u0440\u0451\u0445 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439 (\u0435\u0441\u043b\u0438 \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u043f\u043b\u0430\u043d \u0441\u0446\u0435\u043d\u044b \u0441\u0432\u0435\u0440\u0445\u0443) \u2014\n\u0432\u043b\u0435\u0432\u043e, \u0432\u0432\u0435\u0440\u0445, \u0432\u043f\u0440\u0430\u0432\u043e \u0438\u043b\u0438 \u0432\u043d\u0438\u0437. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u043e\u0434 \u043f\u043e\u0437\u0438\u0446\u0438\u0435\u0439 \u043f\u0440\u043e\u0436\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u043a\u043b\u0435\u0442\u043a\u0430,\n\u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043e\u043d \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0441\u0432\u0435\u0442\u0438\u0442.\n\n\u041f\u0435\u0440\u0435\u0434 \u0432\u0430\u043c\u0438 \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043d\u0430 \u0441\u0446\u0435\u043d\u0443 \u043f\u0440\u043e\u0436\u0435\u043a\u0442\u043e\u0440 \u0432 \u0445\u043e\u0440\u043e\u0448\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e.\n\u041f\u043e\u0437\u0438\u0446\u0438\u044f \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0435\u0439, \u0435\u0441\u043b\u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u044f:\n\n    \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0435\u0439 \u043a\u043b\u0435\u0442\u043a\u0435 \u043d\u0435\u0442 \u0430\u043a\u0442\u0451\u0440\u0430;\n    \u0432 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u0432\u0435\u0442\u0438\u0442 \u043f\u0440\u043e\u0436\u0435\u043a\u0442\u043e\u0440, \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0430\u043a\u0442\u0451\u0440.\n\n\u041f\u0435\u0440\u0435\u0434 \u0432\u0430\u043c\u0438 \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0440\u043e\u0436\u0435\u043a\u0442\u043e\u0440\u0430.\n\u0414\u0432\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0440\u043e\u0436\u0435\u043a\u0442\u043e\u0440\u0430 \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438, \u0435\u0441\u043b\u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043a\u043b\u0435\u0442\u043a\u0438 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0436\u0435\u043a\u0442\u043e\u0440\u0430,\n\u0438\u043b\u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0441\u0432\u0435\u0442\u0438\u0442.\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 n \u0438 m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u20091000) \u2014\n\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u043f\u043b\u0430\u043d\u0435.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043f\u043e m \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u0440\u0430\u0432\u043d\u043e \u043b\u0438\u0431\u043e 0, \u043b\u0438\u0431\u043e 1, \u2014\n\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0430. \u0415\u0441\u043b\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0440\u0430\u0432\u043d\u043e 1, \u0442\u043e \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043a\u043b\u0435\u0442\u043a\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0430\u043a\u0442\u0451\u0440,\n\u0430 \u0435\u0441\u043b\u0438 0, \u0442\u043e \u043a\u043b\u0435\u0442\u043a\u0430 \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u043f\u0443\u0441\u0442\u043e\u0439. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432 \u043f\u043b\u0430\u043d\u0435 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0430\u043a\u0442\u0451\u0440.\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0440\u043e\u0436\u0435\u043a\u0442\u043e\u0440\u0430.\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n2 4\n0 1 0 0\n1 0 1 0\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n9\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n4 4\n0 0 0 0\n1 0 0 1\n0 1 1 0\n0 1 0 0\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n20\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0445\u043e\u0440\u043e\u0448\u0438\u043c\u0438 \u043f\u043e\u0437\u0438\u0446\u0438\u044f\u043c\u0438 \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0440\u043e\u0436\u0435\u043a\u0442\u043e\u0440\u0430 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f:\n\n    \u043a\u043b\u0435\u0442\u043a\u0430 (1, 1) \u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043f\u0440\u0430\u0432\u043e;\n    \u043a\u043b\u0435\u0442\u043a\u0430 (1, 1) \u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043d\u0438\u0437;\n    \u043a\u043b\u0435\u0442\u043a\u0430 (1, 3) \u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043b\u0435\u0432\u043e;\n    \u043a\u043b\u0435\u0442\u043a\u0430 (1, 3) \u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043d\u0438\u0437;\n    \u043a\u043b\u0435\u0442\u043a\u0430 (1, 4) \u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043b\u0435\u0432\u043e;\n    \u043a\u043b\u0435\u0442\u043a\u0430 (2, 2) \u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043b\u0435\u0432\u043e;\n    \u043a\u043b\u0435\u0442\u043a\u0430 (2, 2) \u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0432\u0435\u0440\u0445;\n    \u043a\u043b\u0435\u0442\u043a\u0430 (2, 2) \u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043f\u0440\u0430\u0432\u043e;\n    \u043a\u043b\u0435\u0442\u043a\u0430 (2, 4) \u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u043b\u0435\u0432\u043e.\n\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u0441\u0435\u0433\u043e 9 \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u0439.\n\"\"\"\nimport random\n# import time\n\n\ndef print_arrary(temp_array):\n    for row in range(len(temp_array)):\n        print(temp_array[row])\n\n\ndef count_best_positions():\n    result = 0\n    for i in range(count_rows):\n        found = False\n        start = -1\n        end = -1\n        result_hor = 0\n        for j in range(count_cols):\n            if input_array[i][j] == 1:\n                if not found:\n                    found = True\n                    start = j\n                else:\n                    result_hor += 1\n                end = j\n        if found:\n            if start != end:\n                # result += start + ((count_cols - 1) - end) + ((end - 1) - start - (result_hor - 1)) * 2\n                result += count_cols - start + end - 1 - result_hor * 2\n            else:\n                result += start + ((count_cols - 1) - end)\n    for j in range(count_cols):\n        found = False\n        start = -1\n        end = -1\n        result_vert = 0\n        for i in range(count_rows):\n            if input_array[i][j] == 1:\n                if not found:\n                    found = True\n                    start = i\n                else:\n                    result_vert += 1\n                end = i\n        if found:\n            if start != end:\n                # result += start + ((count_rows - 1) - end) + ((end - 1) - start - (result_vert - 1)) * 2\n                result += count_rows - start + end - 1 - result_vert * 2\n            else:\n                result += start + ((count_rows - 1) - end)\n    return result\n\n\ninput_array = []\n# file = open('./input.txt')\n# temp_array_string = file.readline().split()\ntemp_array_string = input().split()\ncount_rows = int(temp_array_string[0])  # i == n\ncount_cols = int(temp_array_string[1])  # j == m\nfor row in range(count_rows):\n    # temp_array_string = [int(cell) for cell in file.readline().split()]\n    temp_array_string = [int(cell) for cell in input().split()]\n    temp_row = []\n    for col in range(count_cols):\n        temp_row.append(temp_array_string[col])\n    input_array.append(temp_row)\nprint(count_best_positions())\n# print('Generation array.')\n# input_array = []\n# count_rows = 1000\n# count_cols = 1\n# for i in range(count_rows):\n#     input_array.append([])\n#     for j in range(count_cols):\n#         input_array[i].append(random.randint(0, 0))\n# input_array[999][0] = 1\n# print('Array is Generated.')\n# start_time = time.time()\n# print(count_best_positions())\n# end_time = time.time()\n# print('Time = %s ms' % ((end_time - start_time) * 1000))\n# file.close()\n\nprint()\n", "def f(s):\n    l, r = s.find('1'), s.rfind('1')\n    if l == -1:\n        return 0\n    else:\n        return l + len(s) - r - 1 + 2 * sum(s[i] == '0' for i in range(l + 1, r))\nn, m = map(int, input().split())\na = [''.join(input().split()) for i in range(n)]\nr = sum(f(s) for s in a)\nc = sum(f(''.join(a[i][j] for i in range(n))) for j in range(m))\nprint(r + c)", "n, m = list(map(int, input().split()))\na, b = [],  [[] for i in range(m)]\n\nfor i in range(n):\n    a += [list(map(int, input().split()))]\n    for j in range(m):\n        b[j] += [a[i][j]]\n\ndef count(arr):\n    l, r = -1, -1\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            l = i\n            break\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == 1:\n            r = i\n            break\n    if l == -1:\n        return 0\n    return l + (len(arr) - r - 1) + 2 * (sum(arr[i] == 0 for i in range(l + 1, r)))\n\nprint(sum(count(a[i]) for i in range(n)) + sum(count(b[j]) for j in range(m)))\n        \n", "n, m = list(map(int, input().split()))\ns = 0\nv = [0 for i in range(m)]\nfor i in range(m):\n  v[i] = [-1, 0]\nfor i in range(n):\n  l = list(map(int, input().split()))\n  c0 = -1\n  c2 = 0\n  for j in range(m):\n    if l[j] == 1:\n      if c0 == -1:\n        c0 = j\n      else:\n        s -= 2\n        \n      \n      if v[j][0] > -1:\n        s -= 2\n      else:\n        v[j][0] = i\n      v[j][1] = i\n      c2 = j\n  if c0 > -1:\n    s += c0 + (c2 - c0)*2 + m - c2 - 1\n\nfor i in range(m):\n  if v[i][0] > -1:\n    s += v[i][0] + (v[i][1] - v[i][0])*2 + n - v[i][1] - 1\nprint(s)\n", "n,m=list(map(int,input().split()))\nans=0\na=[]\nfor i in range(n):\n    a.append(list(map(int,input().split())))\nfor i in range(n):\n    for j in range(m):\n        if a[i][j]:\n            ans+=a[i][j:].count(0)\n            break\n    for j in range(m-1,-1,-1):\n        if a[i][j]:\n            ans+=a[i][:j].count(0)\n            break\nfor j in range(m):\n    for i in range(n):\n        if a[i][j]:\n            for k in range(i,n):\n                if a[k][j]==0:\n                    ans+=1\n            break\n    for i in range(n-1,0,-1):\n        if a[i][j]:\n            for k in range(i):\n                if a[k][j]==0:\n                    ans+=1\n            break\nprint(ans)\n        \n", "n,m=list(map(int,input().split()))\nans=0\na=[]\nfor i in range(n):\n    a.append(list(map(int,input().split())))\nfor i in range(n):\n    for j in range(m):\n        if a[i][j]:\n            ans+=a[i][j:].count(0)\n            break\n    for j in range(m-1,-1,-1):\n        if a[i][j]:\n            ans+=a[i][:j].count(0)\n            break\nfor j in range(m):\n    for i in range(n):\n        if a[i][j]:\n            for k in range(i,n):\n                if a[k][j]==0:\n                    ans+=1\n            break\n    for i in range(n-1,0,-1):\n        if a[i][j]:\n            for k in range(i):\n                if a[k][j]==0:\n                    ans+=1\n            break\nprint(ans)\n        \n", "n, m = map(int, input().split())\na = [''.join(input().split()) for i in range(n)]\ncolumns = []\nc = 0\n#\u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0435\nfor i in a:\n    f = i.find('1')\n    s = i.rfind('1')\n    if f != -1 and s != -1:\n        c += i[f:].count('0') + i[:s+1].count('0')\n#\u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\nfor i in range(m):\n    column = ''\n    for j in range(n):\n        column += a[j][i]\n    columns.append(column)\nfor column in columns:\n    f = column.find('1')\n    s = column.rfind('1')\n    if f != -1 and s != -1:\n        c += column[f:].count('0') + column[:s+1].count('0')\nprint(c)", "n,m=map(int,input().split())\ncols=['']*m\ncount=0\nfor i in range(n):\n\tline=input().split()\n\tif ('0' in line) and ('1' in line):\n\t\tcount+=line.count('0')\n\t\tstart=line.index('1')+1\n\t\tend=m-line[::-1].index('1')-1\n\t\tcount+=line[start:end].count('0')\n\tfor j in range(m):\n\t\tcols[j]+=line[j]\n\nfor i in range(m):\n\tcur=cols[i]\n\tif ('0' in cur) and ('1' in cur):\n\t\tcount+=cur.count('0')\n\t\tstart=cur.index('1')+1\n\t\tend=n-cur[::-1].index('1')-1\n\t\tcount+=cur[start:end].count('0')\nprint(count)", "def f(s):\n\n    l, r = s.find('1'), s.rfind('1')\n\n    if l == -1:\n\n        return 0\n\n    else:\n\n        return l + len(s) - r - 1 + 2 * sum(s[i] == '0' for i in range(l + 1, r))\n\nn, m = list(map(int, input().split()))\n\na = [''.join(input().split()) for i in range(n)]\n\nr = sum(f(s) for s in a)\n\nc = sum(f(''.join(a[i][j] for i in range(n))) for j in range(m))\n\nprint(r + c)\n\n\n\n# Made By Mostafa_Khaled\n"]