["n, k = list(map(int, input().split()))\nprint(k * (n // k + 1))\n", "n, k = [int(x) for x in input().split(' ')]\n\nprint((n // k + 1) * k)", "n,k=list(map(int,input().split()))\nprint((n+k)//k*k)\n", "n, k = map(int, input().split())\nif n % k == 0:\n    print(n + k)\nelse:\n    print(k * ((n + k - 1) // k))", "n, k = map(int, input().split())\nprint((n // k + 1) * k)", "n,k=map(int,input().split())\n\nprint( (n//k+1)*k )", "n, k = map(int, input().split())\nx = (n // k + 1) * k\nprint(x)", "n, k = list(map(int, input().split()))\n\nt = n // k\ns = t * k\nwhile s <= n:\n\ts += k\nprint(s)\n\n", "n,k = list(map(int,input().split()))\nprint(n+k-n%k)\n", "from collections import defaultdict, deque, Counter, OrderedDict\nfrom bisect import insort, bisect_right, bisect_left\nimport threading, sys\n\ndef main():\n    n, k = list(map(int , input().split()))\n    ans = 0\n    if n < k:\n        ans = k\n    else:\n        ex = n%k\n        ans = n + (k - n%k)\n    print(ans)\n\n\n\n\ndef __starting_point():\n    \"\"\"sys.setrecursionlimit(400000)\n    threading.stack_size(40960000)\"\"\"\n    thread = threading.Thread(target=main)\n    thread.start()\n\n__starting_point()", "3\n# Copyright (C) 2016 Sayutin Dmitry.\n#\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; version 3\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; If not, see <http://www.gnu.org/licenses/>.\n\nn, k = list(map(int, input().split()))\nprint(k * ((n + k) // k))\n", "a, b = [int(i) for i in input().split()]\nprint((a + b ) - (a + b ) % b)", "n, k = map(int, input().split())\nn += 1\nprint(k * -(-n//k))", "n, k = (int(x) for x in input().split())\nprint(n + (k - (n % k)))\n", "n, k = list(map(int, input().strip().split()))\nprint(k * ((n // k) + 1))\n", "a,b = (int(x) for x in input().split())\nprint((a//b+1)*b)", "def main():\n    n, k = list(map(int, input().split()))\n    if n % k == 0:\n        print(n + k)\n    else:\n        print(((n // k) + 1) * k)\n\nmain()\n", "n, k = map(int, input().split())\nz = ((n) // k + 1) * k\nprint(z)", "n, k = tuple(map(int, input().split()))\n\nq = n // k\n\nwhile q * k <= n:\n    q += 1\n\nprint(q * k) ", "n , k = map(int,input().split())\nprint(n + (k - (n%k)))", "#A\ncin=lambda:map(int,input().split())\nn,k=cin()\nprint((n//k)*k+k)", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n\n\n(n, k) = (int(i) for i in input().split())\n\nstart = time.time()\n\nif (n%k == 0):\n    ans = n+k\nelse:\n    ans = (n//k+1)*k\n\nprint(ans)\nfinish = time.time()\n#print(finish - start)\n", "#!/usr/bin/env python3\n\ntry:\n    while True:\n        n, k = list(map(int, input().split()))\n        print((n + k) // k * k)\n\nexcept EOFError:\n    pass\n", "n,k = [int(i) for i in input().split()]\nprint(n + k - n % k)\n", "import math\n\nn, k = list(map(int, input().split()))\n\nprint((math.floor(n / k) + 1) * k)\n"]