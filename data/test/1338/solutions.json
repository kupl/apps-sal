["\"\"\"\nCodeforces Rockethon Contest Problem B\n\nAuthor  : chaotic_iak\nLanguage: Python 3.4.2\n\"\"\"\n\n################################################### SOLUTION\n\ndef main():\n    n,m = read()\n    m -= 1\n    perm = [0]*n\n    lf = 0\n    rt = n-1\n    for i in range(n):\n        if m >= 2**(n-i-2):\n            perm[rt] = i+1\n            rt -= 1\n        else:\n            perm[lf] = i+1\n            lf += 1\n        m %= 2**(n-i-2)\n    write(perm)\n\n\n\n#################################################### HELPERS\n\n\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0: return inputs\n    if mode == 1: return inputs.split()\n    if mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\nwrite(main())", "import itertools\nimport collections\n\n\nf = lambda p: sum(itertools.starmap(lambda i, j: min(p[i: j + 1]), itertools.combinations_with_replacement(list(range(n)), 2)))\n\nn, m = list(map(int, str.split(input())))\nmem = collections.defaultdict(list)\nfor p in itertools.permutations(list(range(1, n + 1)), n):\n\n    mem[f(p)].append(p)\n\nprint(str.join(\" \", list(map(str, mem[max(mem)][m - 1]))))\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Author: kanari\n# @Date:   2015-02-08 01:11:21\n# @Last Modified by:   kanari\n# @Last Modified time: 2015-02-08 01:29:15\n[n, m] = map(int, input().split())\na = [0 for i in range(0, n + 1)]\nfac = [1]\nfor i in range(1, n + 1):\n#   fac.append(fac[i - 1] * i)\n    fac.append(fac[i - 1] * 2)\n\ndef dfs(x, l, r, m):\n    if l == r:\n        a[l] = x\n        return\n    elif m <= fac[n - x - 1]:\n        a[l] = x\n        dfs(x + 1, l + 1, r, m)\n    else:\n        a[r] = x\n        dfs(x + 1, l, r - 1, m - fac[n - x - 1])\n\ndfs(1, 1, n, m)\nfor i in range(1, n + 1):\n    print(a[i], end = '')\n    if i == n:\n        print('\\n', end = '')\n    else:\n        print(' ', end = '')\n", "arc = []\ndef sv(a,b,c,n,v):\n\tif n < c//2:\n\t\tarc[a] = v\n\t\tif b-a>1: sv(a+1,b,c//2,n,v+1)\n\telse:\n\t\tarc[b-1] = v\n\t\tif b-a>1: sv(a,b-1,c//2,n-c//2,v+1)\n\nn, m = list(map(int, input().split()))\narc = [0]*n\nssc = 1<<(n-1)\nsv(0, n, ssc, m-1, 1)\nprint(' '.join(map(str, arc)))\n", "import itertools\n\ndef factorial(n):\n    x = 1\n    for i in range(2,n+1):\n        x *= i\n    return x\n\ndef haha(t):\n    l = []\n    for i in range(len(t)):\n        l.append(int(t[i]))\n    p = 0\n    for i in range(len(l)):\n        for j in range(i,len(l)):\n            p += min(l[i:j+1])\n    return [p,l]\n            \n\nn,m = list(map(int,input().split()))\ns = ''\nfor i in range(1,n+1):\n    s += str(i)\nl = [1,4,10,20,35,56,84,120]\nx = l[n-1]\nc = 0\nasdf = list(itertools.permutations(s))\nfor i in range(factorial(n)):\n    y = haha(asdf[i])\n    if y[0] == x:\n        c += 1\n        if c == m:\n            y = y[1]\n            for j in range(len(y)):\n                y[j] = str(y[j])\n            print(' '.join(y))\n            break\n", "from itertools import *\nmaxans = 0\nposs = []\ndef getsum(perm):\n    nonlocal maxans, poss\n    ans = 0\n    n = len(perm)\n    h = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            ans += min(perm[i:j + 1])\n#            for k in range(i, j + 1):\n#                h[k] += 1\n    if ans > maxans:\n        maxans = ans\n        poss = [perm]\n    elif ans == maxans:\n        poss.append(perm)\n    return ans\nn, m = list(map(int, input().split()))\nlst = list(range(1, n + 1))\nperms = list(permutations(lst))\nfor i in range(len(perms)):\n    getsum(perms[i])\n#print(maxans)\nprint(' '.join(map(str, poss[m - 1])))\n\n", "from itertools import permutations\n\ndef f(a):\n    ans = 0\n    for i in range(n):\n        cur = a[i]\n        for j in range(i, n):\n            cur = min(cur, a[j])\n            ans += cur\n    return ans\n\nn, m = list(map(int, input().split()))\nans = max(list(map(f, permutations(list(range(1, n + 1))))))\nfor a in permutations(list(range(1, n + 1))):\n    m -= f(a) == ans\n    if not m:\n        print(*a)\n        break\n", "__author__ = 'yushchenko'\n\ndef countf(f):\n    sum = 0\n    for i in range(len(f)):\n        for j in range(len(f))[i:]:\n            # print(i, j)\n            # print(f[i:j + 1])\n            sum += min(f[i:j + 1])\n    return sum\n\nimport itertools\nn,m = input().split()\nn = int(n)\nm = int(m)\nmaxf = 0;\ncount = 0;\nsave = ()\nfor x in itertools.permutations(list(range(n + 1))[1:]):\n    t = countf(x)\n    if t > maxf:\n        maxf = t\n        count = 0\n    if t == maxf:\n        # print (x , '-' , t)\n        count = count + 1\n        if count == m:\n            save = x\nprint(' '.join(str(e) for e in save))\n\n\n\n", "3\n\ndef gen(n, start, t):\n    if n == 1:\n        return [start]\n    if t <= 2 ** (n - 2):\n        return [start] + gen(n - 1, start + 1, t)\n    else:\n        return gen(n - 1, start + 1, t - 2 ** (n - 2)) + [start]\n\n\nn, t = list(map(int, input().split()))\nprint(\" \".join(map(str, gen(n, 1, t))))\n", "n, m = map(int, input().split())\ns = 1\nc = n - 1\narr = [0] * n\ni = 0\nwhile i <= c:\n    r = 0\n    j = s\n    while j <= n and r < m:\n        if j < n:\n            r += 2 ** (n - j - 1)\n        j += 1\n    #print(s, j, r, m)\n    if j > s and j != n + 1:\n        r -= 2 ** (n - j)\n    m -= r\n    j -= 1\n    arr[i] = j\n    while s < j:\n        arr[c] = s\n        c -= 1\n        s += 1\n    s += 1\n    i += 1\nfor i in arr:\n    print(i, end = ' ')", "import itertools\n\nn, m = list(map(int, input().split()))\nA = [i + 1 for i in range(n)]\n\nperms = list(itertools.permutations(A))\nd = []\nfor x in perms:\n    s = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            s += min(x[i:(j + 1)])\n    d.append((s, x))\nmx = max(d)[0]\nans = []\nfor x in d:\n    if x[0] == mx:\n        ans.append(x[1])\nans.sort()\nprint(' '.join(str(x) for x in ans[m - 1]))\n", "from itertools import permutations\n\ndef f(perm):\n    res = 0\n    for i in range(len(perm)):\n        for j in range(i, len(perm)):\n            res += min(perm[i:j + 1])\n    return res\n\nn, m = list(map(int, input().split()))\nres = f(list(range(1, n + 1)))\n\ni = 0\nfor p in permutations(list(range(1, n + 1))):\n    if f(p) == res:\n        i += 1\n        if i == m:\n            print(\" \".join(list(map(str, p))))\n            break\n\n", "import sys\nn, k = [int(i) for i in input().split()]\nm = 0\na = [True for i in range(n+1)]\nl = [0 for i in range(n+1)]\nbig = 0\nfor x in range(1,n+1):\n    for y in range(x,n+1):\n        big += x\ndef r(i):\n    if i > n:\n        f = 0\n        for x in range(1,n+1):\n            u = l[x]\n            for y in range(x,n+1):\n                u = min(u, l[y])\n                f += u\n        nonlocal m\n        if f == big:\n            m += 1\n        if m == k:\n            for j in range(1,n+1):\n                print(l[j], end = ' ')\n            return\n        return 0\n    for j in range(1,n+1):\n        if a[j]:\n            a[j] = False\n            l[i] = j\n            r(i+1)\n            a[j] = True\n    return 0\n\nr(1)", "def main():\n    from itertools import permutations\n\n    n, m = [int(i) for i in input().split()]\n    \n    maxS = 0\n    for p in permutations(list(range(1, n + 1))):\n        S = 0\n        for i in range(n):\n            t = float(\"inf\")\n            for j in range(i, n):\n                t = min(t, p[j])\n                S += t\n        maxS = max(maxS, S)\n    \n    for p in permutations(list(range(1, n + 1))):\n        S = 0\n        for i in range(n):\n            t = float(\"inf\")\n            for j in range(i, n):\n                t = min(t, p[j])\n                S += t\n        if S == maxS:\n            m -= 1\n            if m == 0:\n                print(*p)\n                break\n\n\n\nmain()\n", "\nn, m = map(int, input().split())\n\ndef gen(n, m, now):\n    if n == 1:\n        return [now]\n    if m <= 2 ** (n - 2):\n        return [now] + gen(n - 1, m, now + 1)\n    else:\n        return gen(n - 1, m - 2 ** (n - 2), now + 1) + [now]\n\np = 2 ** (n - 2)\n\nprint(' '.join(map(str, gen(n, m, 1))))", "inp = input().split(' ')\nn = int(inp[0])\nm = bin(int(inp[1])-1)[2:]\nlenbin = n-1\nwhile len(m) < lenbin:\n    m = '0' + m\nstart = []\nend = []\nfor x in range(n-1):\n    if m[x] == '0':\n        start = start + [x+1]\n    else:\n        end = [x+1] + end\nfinal = start + [n] + end\nfor x in final:\n    print(x, end = ' ')\n", "#file = open(\"\", 'r')\n#f = lambda:file.readline()\nf= lambda: input()\n\nn,m = list(map(int, f().split()))\n\nmost = 0\n\np = []\n\nfor i in range(1, n+1):\n    p.append(i)\n    most += i * (n+1-i)\n\ndef next_perm():\n    i = len(p)-1\n    while i >0 and p[i-1] >= p[i]:\n        i-=1\n\n    if i <= 0:\n        return False\n\n    j = len(p)-1\n\n    while p[j]<= p[i-1]:\n        j-= 1\n\n    p[i-1],p[j] = p[j],p[i-1]\n\n    j = len(p)-1\n    while(i < j):\n        p[i],p[j] = p[j],p[i]\n        i += 1\n        j -= 1\n\n    return True\n\ndef fp():\n    s = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            s += min(p[i-1:j])\n    return s\n\nwhile(m > 0):\n    if (fp() == most):\n        m-= 1\n        if m == 0:\n            break\n\n    next_perm()\n\nprint(\" \".join(str(e) for e in p))\n        \n", "from itertools import permutations\n\ndef f(l):\n\tn = len(l)\n\tres = 0\n\tfor i in range(n):\n\t\tfor j in range(i + 1, n + 1):\n\t\t\tres += min(l[i:j])\n\treturn res\n\nn, m = (int(x) for x in input().split())\nres = 0\nresl = []\nfor perm in permutations(list(range(1, n + 1))):\n\tcur = f(perm)\n#\tprint(perm, cur)\n\tif cur > res:\n\t\tres = cur\n\t\tresl = []\n\tif cur == res:\n\t\tresl.append(perm)\n#print(res)\nprint(' '.join(str(x) for x in resl[m - 1]))\n", "n,m = map(int, input().split())\na = [i for i in range(1,n+1)]\nused = [0] * (n+1)\nc = 0\nt = 0\n\ndef gen(ind):\n    nonlocal c, t\n    if t:\n        return\n    if ind == n:\n        s=0\n        for k in range(n):\n            mi = a[k]\n            for d in range(k,n):\n                if mi > a[d]:\n                    mi = a[d]\n                s+=mi\n        if s == ma:\n            c+=1\n            if c == m:\n                print(*a)\n                t = 1\n                return\n        return\n    for i in range(1,n+1):\n        if t:\n            return\n        if not used[i]:\n            used[i] = 1\n            a[ind] = i\n            gen(ind+1)\n            a[ind] = 1\n            used[i] = 0\n    return\n\nma = 0\nfor i in range(n-1,-1,-1):\n    ma+=(n-i)*a[i]\ngen(0)", "n, m = [int(x) for x in input().split()]\n\nbest = 0\nans = []\n\ndef foo(p):\n\tans = 0\n\tfor i in range(n):\n\t\tfor j in range(i,n):\n\t\t\tans += min(p[i:j+1])\n\treturn ans\n\ndef eval(p):\n\tnonlocal ans, best\n\tval = foo(p)\n\tif val > best:\n\t\tans = [p]\n\t\tbest = val\n\telif val == best:\n\t\tans.append(p)\n\ndef generate(l=[],remaining = list(range(1,n+1))):\n\tif not remaining:\n\t\teval(l)\n\telse:\n\t\tfor i, x in enumerate(remaining):\n\t\t\tgenerate(l+[x],remaining[:i] + remaining[i+1:])\n\ngenerate()\nprint(' '.join(str(x) for x in ans[m-1]))", "def rek(s,t):\n    nonlocal q,n\n    for x in range(t+1,n+1):\n        y=s[:n-x]+s[n-x:][::-1]\n        q.append(y)\n        rek(y,x)\n    \nn,m=map(int,input().split())\na=''.join(map(str,range(1,n+1)))\nq=[a]\nrek(a,1)\nq.sort()\nprint(' '.join(q[m-1]))", "sum1 = 0\ndef gen(used, pref, m, ans):\n    if len(pref) == n:\n        ans.append(pref)\n    else:\n        for i in range(1, n+ 1):\n            if not used[i]:\n                used[i] = True\n                gen(used, pref + [i], m, ans)\n                used[i] = False\n            \n            \nn, m = map(int, input().split())\nused = [False] * (n + 1)\nans = []\ngen(used, [], m, ans)\nmin1 = -1\nmm = -1\nsumm = [0] * len(ans)\nfor i in range(len(ans)):\n    sum1 = 0\n    for z in range(n):\n        for j in range(z, n):\n            sum1 += min(ans[i][z:j + 1])\n    summ[i] = sum1\n    if sum1 >= min1:\n        min1 = sum1\n        mm = i\nss = 0\ni = 0\nwhile ss <= m:\n    #print(i, ss)\n    if summ[i] < min1:\n        \n        #print(i, ss, 1)\n        i += 1\n    else:\n        if summ[i] == min1:\n            if ss == m - 1:\n                break\n            #print(i, ss, 2)\n            ss += 1\n            i += 1            \n#print(i)\nprint(' '.join(map(str, ans[i])))", "n, m = map(int, input().split())\ns = 0\nflag = False\nk = 0\nmyset = set()\nflag1 = True\nfor j in range(n):\n    if n in myset:\n        for i in range(n, 0, -1):\n            if i not in myset:\n                print(i, end = ' ')\n                flag1 = False\n    if flag1 == False:\n        break        \n    flag = False\n    s = 0\n    for i in range(n):\n        if s < m <= s + 2**(n - i - 2 - k):\n            print(i + 1 + k, end = ' ')\n            myset.add(i + 1 + k)\n            k = i + 1 + k\n            flag = True\n            break\n        s += (2**(n - i - 2 - k))\n    if flag == False:\n        print(n, end = ' ')\n        myset.add(n)\n        k = n\n    m -= s\n            \n            \n    \n\n            "]