["import sys\nimport collections\nrlines = sys.stdin.readlines()\nlines = (l.strip() for l in rlines)\n\ndef eucycle(n,m,adj):\n    diredges = []\n    us = list(adj.keys())\n    for u in us:\n        while adj[u]:\n            v0 = u\n            v1 = adj[v0].pop()\n            adj[v1].remove(v0)\n            diredges.append((v0,v1))\n            while v1 != u:\n                v0 = v1\n                v1 = adj[v0].pop()\n                adj[v1].remove(v0)\n                diredges.append((v0,v1))\n    return diredges\n\ndef solve(n,m,edges):\n    adj = collections.defaultdict(set)\n    diredges = []\n    for u,v in edges:\n        adj[u].add(v)\n        adj[v].add(u)\n    odds = set(u for u in adj if len(adj[u])%2 == 1)\n    ans = n - len(odds)\n    assert(len(odds)%2 == 0)\n    for o in odds:\n        adj[n+1].add(o)\n        adj[o].add(n+1)\n    diredges = eucycle(n+1,m,adj)\n    return str(ans) + '\\n' + '\\n'.join(str(u) + ' ' + str(v) for (u,v) in diredges\\\n            if u != n+1 and v != n+1)\n\n\nt = int(next(lines))\n\nfor ti in range(t):\n    n,m = [int(s) for s in next(lines).split()]\n    edges = []\n    for ei in range(m):\n        u,v = [int(s) for s in next(lines).split()]\n        edges.append((u,v))\n    #print(edges)\n    print(solve(n,m,edges))\n\n", "import sys\nfrom collections import defaultdict\n\nrlines = sys.stdin.readlines()\nlines = (l.strip() for l in rlines)\n \ndef eucycle(n,m,adj):\n\tdir_edges = []\n\tus = list(adj.keys())\n\tfor u in us:\n\t\twhile adj[u]:\n\t\t\tv0 = u \n\t\t\tv1 = adj[v0].pop()\n\t\t\tadj[v1].remove(v0)\n\t\t\tdir_edges.append((v0, v1))\n\t\t\twhile v1 != u:\n\t\t\t\tv0 = v1\n\t\t\t\tv1 = adj[v0].pop()\n\t\t\t\tadj[v1].remove(v0)\n\t\t\t\tdir_edges.append((v0, v1))\n\treturn dir_edges\n \ndef solve(n,m,edges):\n\tadj = defaultdict(set)\n\tfor u, v in edges:\n\t\tadj[u].add(v)\n\t\tadj[v].add(u)\n\n\todds = set(u for u in adj if len(adj[u])%2==1)\n\n\tfor odd in odds:\n \t\tadj[odd].add(n+1)\n \t\tadj[n+1].add(odd)\n\ttotal = n - len(odds)\n\tdir_edges = eucycle(n+1, m, adj)\n\treturn total, dir_edges\n \nt = int(next(lines))\n \nfor ti in range(t):\n\tn,m = [int(s) for s in next(lines).split()]\n\tedges = []\n\tfor ei in range(m):\n\t\tu,v = [int(s) for s in next(lines).split()]\n\t\tedges.append((u,v))\n\ttotal, ans = solve(n,m,edges)\n\tprint(total)\n\tprint('\\n'.join(str(u)+ ' '+ str(v) for u, v in ans if u != n+1 and v!= n+1))"]