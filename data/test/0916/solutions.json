["def coloring(i, ancestors, color):\n    while i != 0 and color[ancestors[i - 1]] is None:\n        color[ancestors[i - 1]] = not color[i]\n        i = ancestors[i - 1]\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ancestors = list([int(x) - 1 for x in input().split()])\n    descendants = [[] for i in range(n)]\n    for i in range(n - 1):\n        descendants[ancestors[i]].append(i + 1)\n    color = [None for i in range(n)]\n    for i in range(n):\n        if not descendants[i]:\n            color[i] = True\n            coloring(i, ancestors, color)\n    reds = 0\n    blues = 0\n    xor = 0\n    count_red = dict()\n    count_blue = dict()\n    for i in range(n):\n        if color[i]:\n            blues += 1\n            xor ^= a[i]\n            if str(a[i]) in count_blue:\n                count_blue[str(a[i])] += 1\n            else:\n                count_blue[str(a[i])] = 1\n        else:\n            reds += 1\n            if str(a[i]) in count_red:\n                count_red[str(a[i])] += 1\n            else:\n                count_red[str(a[i])] = 1\n    res = 0\n    if xor == 0:\n        res += (blues - 1) * blues // 2\n        res += (reds - 1) * reds // 2\n        for i in list(count_blue.items()):\n            if i[0] in count_red:\n                res += i[1] * count_red[i[0]]\n    else:\n        for i in list(count_blue.items()):\n            if str(xor ^ int(i[0])) in count_red:\n                res += i[1] * count_red[str(xor ^ int(i[0]))]\n    print(res)\n\n\nmain()\n\n", "n= int(input())\na = [int(_) for _ in input().split()]\nc = [int(_) for _ in input().split()]\ndepth = [0] * (n)\nfor i in range(1,n):\n  depth[i] = depth[c[i-1]-1] + 1\nMAX = max(depth)\nt = 0\nstore = {}\ntodo = []\np = 0\n\nfor i in range(n):\n    if (MAX-depth[i]) % 2 == 0: # odd, useful\n        t ^= a[i]\n        todo.append(a[i])\n    else:\n        store[a[i]]  = store.get(a[i],0) + 1\n        p += 1\n\nans = 0\nfor i in todo:\n    ans += store.get(i^t,0)\n\nif t == 0:\n    ans += (p*(p-1)//2) + (n-p)*(n-p-1)//2\n\nprint(ans)"]