["\"\"\"\nCodeforces Contest 289 Div 2 Problem C\n\nAuthor  : chaotic_iak\nLanguage: Python 3.4.2\n\"\"\"\n\n################################################### SOLUTION\n\ndef printing(num):\n    arr = num[:]\n    while len(arr) > 1 and arr[-1] == 0: arr.pop()\n    print(\"\".join(map(str, reversed(arr))))\n\ndef main():\n    n, = read()\n    last = [0]*500\n    for i in range(n):\n        b, = read()\n        last[0] += 1\n        p = 0\n        while last[p] == 10:\n            last[p] = 0\n            p += 1\n            last[p] += 1\n        p = 0\n        while sum(last) > b:\n            last[p] = 0\n            p += 1\n            k = p\n            last[k] += 1\n            while last[k] == 10:\n                last[k] = 0\n                k += 1\n                last[k] += 1\n        p = 0\n        while sum(last) < b:\n            while last[p] == 9: p += 1\n            last[p] += 1\n        printing(last)\n\n\n\n#################################################### HELPERS\n\n\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0: return inputs\n    if mode == 1: return inputs.split()\n    if mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\nwrite(main())", "n = int(input())\n\ndef get_sum(x):\n    result = 0\n    while x > 0:\n        d, m = divmod(x, 10)\n        result += m\n        x = d\n    return result\n\ndef dec(x):\n    assert x != 0\n    t = x\n    mult = 1\n    while True:\n        d, m = divmod(x, 10)\n        if m != 0:\n            return t + (10 - m) * mult\n        x = d\n        mult *= 10\n\ndef get_next(prev_x, prev_sum, sum):\n    t = prev_x\n    while True:\n        while prev_sum > sum:\n            prev_x = dec(prev_x)\n            prev_sum = get_sum(prev_x)\n        s = list(reversed(str(prev_x)))\n        required = sum - prev_sum\n        i = 0\n        while required:\n            try:\n                a = min(9 - (ord(s[i]) - ord('0')), required)\n                s[i] = chr(ord(s[i]) + a)\n            except IndexError:\n                a = min(9, required)\n                s += chr(a + ord('0'))\n            required -= a\n            i += 1\n        x = int(\"\".join(reversed(s)))\n        if x != t:\n            return x\n        prev_x = dec(prev_x)\n        prev_sum = get_sum(prev_x)\n\na = s = 0\nfor i in range(n):\n    b = int(input())\n    a = get_next(a, s, b)\n    print(a)\n    s = b\n", "__author__ = 'PrimuS'\n\nn = int(input())\nb = [0] * n\nfor i in range(n):\n    b[i] = int(input())\n\nlast = 0\n\nimport math\n\n\ndef build_smallest(csum, length):\n    if math.ceil(csum / 9) == length:\n        f = csum % 9\n        if f == 0:\n            f = 9\n        return int(str(f) + \"9\" * (length-1))\n\n    csum -= 1\n    s = \"\"\n    while csum > 0:\n        s = str(min(csum, 9)) + s\n        csum -= min(csum, 9)\n\n    return int(\"1\" + \"0\" * (length - 1 - len(s)) + s)\n\n\ndef build_greater(csum, x):\n    x = [int(y) for y in x]\n\n    last_possible = -1\n    i = len(x) - 1\n    while i >= 0:\n        if x[i] < 9:\n            last_possible = i\n            break\n        i -= 1\n\n    if last_possible == -1:\n        return 0\n\n    if x[0] >= csum:\n        return 0\n\n    last_avail = -1\n    ac_sum = 0\n    for i in range(len(x)):\n        ac_sum += x[i]\n        if ac_sum >= csum:\n            last_avail = i - 1\n            break\n\n    if last_avail == -1:\n        last_avail = len(x) - 1\n\n    pos = last_avail\n\n    while pos >= 0:\n        if x[pos] < 9:\n            break\n        pos -= 1\n\n    if pos == -1:\n        return 0\n\n    res = list(x)\n\n    res[pos] += 1\n    for i in range(pos+1):\n        csum -= res[i]\n\n    i = len(res) - 1\n\n    while i > pos:\n        res[i] = min(9, csum)\n        csum -= res[i]\n        i -= 1\n\n    if csum > 0:\n        i = len(res) - 1\n        while i >= 0:\n            if res[i] < 9:\n                u = min(csum, 9 - res[i])\n                res[i] = res[i] + u\n                csum -= u\n            i -= 1\n        if csum > 0:\n            return 0\n\n    res2 = 0\n    for y in res:\n        res2 = res2 * 10 + y\n\n    return res2\n\n\nfor i in range(n):\n    bx = b[i]\n    cur = bx % 9\n    bx -= cur\n    while bx > 0:\n        cur = cur * 10 + 9\n        bx -= 9\n    if cur <= last:\n        cur = build_greater(b[i], str(last))\n        if cur <= last:\n            cur = build_smallest(b[i], len(str(last)) + 1)\n\n\n    print(cur)\n    last = cur\n", "#input = open(\"input.txt\").readline\n#f = open(\"output.txt\", \"w\")\n\ndef greedy(le, su):\n    if su > le * 9:\n        return None\n    l = []\n    while su > 0:\n        if su <= 9:\n            l.append(su)\n            su = 0\n        else:\n            l.append(9)\n            su -= 9\n    for i in range(le - len(l)):\n        l.append(0)\n    return l[::-1]\n\n\ndef get(li):\n    st = \"\"\n    for i in li:\n        st += str(i)\n    if st == \"\":\n        st = \"0\"\n    return st\n\n\nmi = [0]  # mi is OK ans\nmi_str = \"0\"\n\nconst = \"9\" * 500\n\nn = int(input())\n\nfor i in range(n):\n    s = int(input())\n    for j in range(len(mi), -1, -1):\n        begin = mi[:j]\n        begin_sum = sum(begin)\n        mi_can = const\n        for dig in range(1, 10):\n            if begin_sum + dig > s:\n                continue\n            g = greedy(len(mi) - j - 1, s - begin_sum - dig)\n            if g is None:\n                continue\n            if begin_sum + dig + sum(g) != s:\n                continue\n            g = begin + [dig] + g\n            g_str = get(g)\n            if int(mi_str) <= int(g_str) < int(mi_can):\n                mi_can = g_str\n                continue\n        if mi_can != const:\n            print(mi_can)\n            mi_str = str(int(mi_can) + 1)\n            mi = list(map(int, mi_str))\n            break\n    else:\n        g_str = const\n        for dig in range(1, 10):\n            g = greedy(len(mi), s - dig)\n            c = 1\n            while g is None:\n                g = greedy(len(mi) + c, s - dig)\n                c += 1\n            g = [dig] + g\n            can = get(g)\n            if int(can) < int(g_str):\n                g_str = can\n        mi_str = g_str\n        print(mi_str)\n        mi_str = str(int(mi_str) + 1)\n        mi = list(map(int, mi_str))", "digs, a, le = [0] * 333, 0, 0\nfor _ in range(int(input())):\n    b = int(input())\n    delta, a = b - a, b\n    for i, d in enumerate(digs):\n        if d < 9 and 0 < delta <= 9 * i + 9 - d:\n            break\n        delta += d\n        digs[i] = 0\n    digs[i] += 1\n    le = max(le, i)\n    i, delta = divmod(delta - 1, 9)\n    digs[:i] = [9] * i\n    digs[i] += delta\n    print(''.join(map(str, digs[le::-1])))\n", "# written with help of editorial\ndef get_smallest(dig_sum):\n    ret = str(dig_sum % 9) + '9' * (dig_sum // 9)\n    return int(ret)\n\ndef f(n):\n    ret = 0\n    while n:\n        ret += n % 10\n        n //= 10\n    return ret\n\ndef nx(n):\n    s = str(n)\n    sm = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] < '9' and sm > 0:\n            return int(s[:i] + str(int(s[i]) + 1) + \\\n                    str(get_smallest(sm - 1)).zfill(len(s) - i - 1))\n        sm += int(s[i])\n\n    return int('1' + str(get_smallest(sm - 1)).zfill(len(s)))\n\ndef after(d, low):\n    s = '0' * 600 + str(low)\n    n = len(s)\n\n    has = f(low)\n    for i in range(n - 1, -1, -1):\n        has -= int(s[i])\n        for x in range(int(s[i]) + 1, 10):\n            if s[i] < '9' and has + x <= d <= has + x + 9 * (n - i - 1):\n                if i == n - 1:\n                    return int(s[:i] + str(x))\n                return int(s[:i] + str(x) + \\\n                        str(get_smallest(d - has - x)).zfill(n - i - 1))\n\nn = int(input())\nlow = 0\nfor i in range(n):\n    ds = int(input())\n    cur = after(ds, low)\n    print(cur)\n    low = cur\n\n", "#!/usr/bin/env python\n\ndef add(c, v, p=0):\n    assert(v < 10 and p < len(c))\n    for i in range(p, len(c)):\n        c[i] += v\n        if c[i] >= 10:\n            c[i] %= 10\n            v = 1\n        else:\n            return\n    c.append(v)\n\ndef find_min(xsum, l):\n    csum = sum(l)\n    if csum == xsum:\n        return l\n\n    if csum < xsum:\n        for i, e in enumerate(l):\n            delta = min(9 - e, xsum - csum)\n            l[i] += delta\n            csum += delta\n        while csum != xsum:\n            delta = min(9, xsum - csum)\n            l.append(delta)\n            csum += delta\n    else:\n        for i in range(0, len(l)):\n            c = l[i]\n            if c != 0:\n                delta = 10 - c\n                add(l, delta, i)\n                csum = sum(l)\n                if csum <= xsum:\n                    return find_min(xsum, l)\n\nn = int(input())\n\nc = [0]\nfor i in range(n):\n    b = int(input())\n    find_min(b, c)\n    print(''.join(map(str, c[::-1])))\n    add(c, 1)\n", "def getnum(digsum):\n    if digsum < 0:\n        return 0\n    if digsum < 10:\n        return digsum\n    else:\n        nnine = digsum // 9\n        res = digsum % 9\n        for i in range(nnine):\n            res = 10 * res + 9\n        return res\n\ndef digsumf(n):\n    return sum([int(i) for i in str(n)])\n\ndef getnext(bnum, last):\n    if last == 0:\n        return getnum(bnum)\n\n    k = last + 1\n    digsum = digsumf(k)\n    diff = bnum - digsum\n    if diff >= 0 and 9 - k % 10 >= diff:\n        return k + diff\n\n    omitsum = 0\n    startdigsum = digsumf(last)\n    lastl = [int(i) for i in str(last)]\n    digsum = digsumf(last)\n    l = 10\n    i = 1\n    while True:\n        if i == 1 and len(str(l)) - 1 <= len(lastl):\n            omitsum += lastl[-(len(str(l)) - 1)]\n        if (last // l) % 10 + i > 9:\n            l *= 10\n            i = 1\n            continue\n        k = (last // l) * l + l * i\n        digsum = startdigsum - omitsum + i\n        diff = bnum - digsum\n        r = getnum(diff)\n        if diff >= 0 and len(str(r)) <= len(str(l // 10)):\n            return r + k\n        if diff < 0:\n            l *= 10\n            i = 1\n        else:\n            i += 1\n\nn = int(input())\nlast = 0\nfor i in range(n):\n    last = getnext(int(input()), last)\n    print(last)\n", "digs, a, le = [0] * 333, 0, 0\nfor _ in range(int(input())):\n    b = int(input())\n    delta, a = b - a, b\n    for i, d in enumerate(digs):\n        if d < 9 and 0 < delta <= 9 * i + 9 - d:\n            break\n        delta += d\n        digs[i] = 0\n    digs[i] += 1\n    le = max(le, i)\n    i, delta = divmod(delta - 1, 9)\n    digs[:i] = [9] * i\n    digs[i] += delta\n    print(''.join(map(str, digs[le::-1])))", "def cr_mn(sm):\n    d = 1\n    res = 0\n    while sm > 0:\n        res += min(9, sm) * d\n        sm -= min(9, sm)\n        d *= 10\n    return res\n\ndef cr_ln(sm, ln):\n    if sm == 0:\n        return '0' * ln\n    res = int('1' + '0' * (ln - 1))\n    d = 1\n    sm -= 1\n    while sm > 0:\n        res += min(9, sm) * d\n        sm -= min(9, sm)\n        d *= 10\n    return str(res)\n\ndef cr_min(sm, lst):\n    r1 = cr_mn(sm)\n    if r1 > int(lst):\n        r1 = str(r1)\n        return '0' * (len(lst) - len(r1)) + str(r1)\n    ln = len(lst)\n    lfs = int(lst[0])\n    if lfs >= sm:\n        return '-1'\n    if ln == 1:\n        return sm\n    r1 = cr_min(sm - lfs, lst[1:])\n    if r1 == '-1':\n        if lfs == 9:\n            return '-1'\n        r1 = str(cr_mn(sm - lfs - 1))\n        return str(lfs + 1) + '0' * (ln - 1 - len(r1)) + r1\n    return lst[0] + r1\n\nn = int(input())\na = []\nfor i in range(n):\n    a += [int(input())]\nb = [-1 for i in range(n)]\nb[0] = str(cr_mn(a[0]))\nprint(b[0])\nfor i in range(1, n):\n    b[i] = cr_min(a[i], b[i - 1])\n    if b[i] == '-1':\n        b[i] = cr_ln(a[i], len(b[i - 1]) + 1)\n    print(b[i])\n", "toInt = lambda x : int(''.join(map(str,x[-1::-1])))\nimport sys\n#sys.stdin=open('note.txt')\npre=0\nans=[0]*1000\nsum=0\nfor n in range(int(input())):\n    sum=int(input())\n    d=sum-pre\n    pre=sum\n    if d>0:\n        for i,dig in enumerate(ans):\n            if d+dig<=9:\n                ans[i]=dig+d\n                break\n            d-=9-dig\n            ans[i]=9\n        print(toInt(ans))\n    else: #d is minus\n        d=-d+1\n        d2=0\n        for i, dig in enumerate(ans):\n            d2+=dig\n            ans[i]=0\n            if ans[i+1]<9 and d2>=d:\n                break\n\n        ans[i+1]+=1\n        d2-=d\n        cnt = d2//9\n        ans[:cnt]=[9]*cnt\n        ans[cnt]=d2 % 9\n\n        print(toInt(ans))\n", "def fill9(x,u):\n    k=x//9\n    for i in range(k):\n        u[i]=9\n    if x%9:\n        u[k]=x%9\n        return k+1\n    else:\n        return k\nn=input()\nn=int(n)\nu=[0 for i in range(300//9*150+150)]\nk=1\nfor i in range(n):\n    x=input()\n    x=int(x)\n    t=k-1\n    while t>=0:\n        if u[t]+9*t<x:\n            t=fill9(x,u)\n            if t>k:\n                k=t\n            break\n        elif u[t]>=x:\n            t+=1\n            u[t]+=1\n            x-=1\n            while u[t]==10:\n                u[t]=0\n                t+=1\n                u[t]+=1\n                x+=9\n            if t+1>k:\n                k=t+1\n            for t in range(fill9(x,u),t):\n                u[t]=0\n            break\n        else:\n            x-=u[t]\n            t-=1\n    v=[str(j) for j in u[k-1:-len(u)-1:-1]]\n    print(''.join(v))", "def min_number(sum_digits):\n    res = 0;\n    base = 1\n    while sum_digits > 9:\n        res += 9 * base\n        base *= 10\n        sum_digits -= 9\n    res += sum_digits * base\n    return res\n\ndef from_digits(d):\n    res = 0\n    base = 1\n    for digit in d:\n        res += digit * base\n        base *= 10\n    return res\n        \ndef next_number(x, sum_digits):\n    if min_number(sum_digits) > x:\n        return min_number(sum_digits)\n    \n    sd = sum_digits\n    x_digits = []\n    while x:\n        x_digits.append(x % 10)\n        x //= 10\n    \n    if sum_digits > sum(x_digits):\n        res_digits = x_digits[::]\n        i = 0\n        while sum(res_digits) < sum_digits:\n            while res_digits[i] == 9:\n                i += 1\n            res_digits[i] += 1\n        return from_digits(res_digits)\n    \n    x_digits.append(0)\n    d = x_digits[::-1]\n    \n    res_digits = [0] * len(d)\n    last_incable = 0\n    for i in range(0, len(d)):\n        if sum_digits > d[i]:\n            res_digits[i] = d[i]\n            sum_digits -= d[i]\n            if d[i] != 9:\n                last_incable = i\n        else:\n            break\n    \n    d[last_incable] += 1\n    for i in range(last_incable + 1, len(d)):\n        d[i] = 0\n    rest = sd - sum(d)\n    res = from_digits(d[::-1]) + min_number(rest)\n    return res\n\ndef solve(b):\n    r = min_number(b[0])\n    print(r)\n    for i in range(1, len(b)):\n        r = next_number(r, b[i])\n        print(r)\n\nn = int(input())\nb = [0] * n\nfor i in range(0, n):\n    b[i] = int(input())\n\nsolve(b)\n", "n = int(input())\nprv = 0\nr = [0] * 500\np = 0\nfor i in range(n):\n    x = int(input())\n    if x > p:\n        d = x - p\n        i = 0\n        while d > 0:\n            e = min(d, 9 - r[i])\n            r[i] += e\n            d -= e\n            i += 1\n    else:\n        d = p - x + 1\n        i = 0\n        s = 0\n        while d > s or r[i] == 9:\n            s += r[i]\n            i += 1\n        j = 0\n        d = s - d\n        while j < i:\n            e = min(d, 9)\n            r[j] = e\n            d -= e\n            j += 1\n        while r[i] == 9:\n            i += 1\n        r[i] += 1\n    s = ''.join(map(str, reversed(r)))\n    print(s.lstrip('0'))\n    p = x\n", "n = int(input())\nprv = 0\nr = [0] * 500\np = 0\nfor i in range(n):\n    x = int(input())\n    if x > p:\n        d = x - p\n        i = 0\n        while d > 0:\n            e = min(d, 9 - r[i])\n            r[i] += e\n            d -= e\n            i += 1\n    else:\n        d = p - x + 1\n        i = 0\n        s = 0\n        while d > s or r[i] == 9:\n            s += r[i]\n            i += 1\n        j = 0\n        d = s - d\n        while j < i:\n            e = min(d, 9)\n            r[j] = e\n            d -= e\n            j += 1\n        while r[i] == 9:\n            i += 1\n        r[i] += 1\n    s = ''.join(map(str, reversed(r)))\n    print(s.lstrip('0'))\n    p = x\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Nov 30 12:04:02 2015\n\n@author: Mary\n\"\"\"\nn = int(input())\nprev_b = 0\nr = [0] * 500\n\nfor _ in range(n):\n\n    b = int(input())\n    \n    if b > prev_b:        \n        delta = b - prev_b\n        i = 0\n\n        while delta > 0:\n            if r[i] < 9:\n                delta_i = min(delta, 9 - r[i])\n                r[i] += delta_i\n                delta -= delta_i\n            i += 1\n    else:\n        max_i = -1\n        s = 0\n        \n        while s < prev_b:\n            max_i += 1\n            s += r[max_i]\n\n        max_i += 1\n        sum_ge_max_i = 0\n\n        i = max_i        \n        s = 0\n\n        while b > s + r[i-1]:\n            \n            s += r[i-1]\n            i -= 1\n            \n            if r[i] < 9:\n                max_i = i\n                sum_ge_max_i = s\n        \n        r[max_i] += 1\n        sum_ge_max_i += 1\n\n        delta = b - sum_ge_max_i \n        \n        for i in range(max_i):\n            if delta > 0:\n                delta_i = min(delta, 9)\n                r[i] = delta_i\n                delta -= delta_i\n            else:\n                r[i] = 0\n                \n    res = ''.join(map(str, reversed(r)))\n    print(res.lstrip('0'))\n    \n    prev_b = b", "def nd(n):\n    v = 0\n    while n:\n        n, v = n // 10, v + 1\n    return v\ndef sd(n):\n    v = 0\n    while n:\n        n, v = n // 10, v + n % 10\n    return v\ndef mina(s):\n    d9 = s // 9\n    return (s % 9 + 1) * 10 ** d9 - 1\ndef maxan(s, n):\n    v = 0\n    for i in range(n - 1, -1, -1):\n        c = min(s, 9)\n        s -= c\n        v += c * 10 ** i\n    return v\ndef minan(s, n):\n    d9 = (s - 1) // 9\n    return 10 ** d9 - 1 + 10 ** (n - 1) + (s - 1) % 9 * 10 ** d9\ndef f(s, m):\n    a1 = mina(s)\n    if a1 > m:\n        return a1\n    n = nd(m)\n    if m >= maxan(s, n):\n        return minan(s, n + 1)\n    for i in range(n):\n        if m // 10 ** i % 10 == 9:\n            continue\n        x = m - m % 10 ** i + 10 ** i\n        sx = sd(x)\n        if sx > s:\n            continue\n        for j in range(i + 1):\n            d = x // 10 ** j % 10\n            c = min(9 - d, s - sx)\n            x += c * 10 ** j\n            sx += c\n        if sx == s:\n            return x\n    return minan(s, n + 1)\nv = 0\nfor i in range(int(input())):\n    v = f(int(input()), v)\n    print(v)", "t = [0] * 400\nx = k = 0\nfor q in range(int(input())):\n    y = int(input())\n    d, x = y - x, y\n    j = 0\n    while d < 1 or t[j] > min(8, 9 * j + 9 - d):\n        d += t[j]\n        t[j] = 0\n        j += 1\n    t[j] += 1\n    k = max(k, j)\n    a, b = divmod(d - 1, 9)\n    t[:a] = [9] * a\n    t[a] += b\n    print(''.join(map(str, t[k::-1])))", "t = [0] * 400\nx = k = 0\nfor q in range(int(input())):\n    y = int(input())\n    d, x = y - x, y\n    j = 0\n    while d < 1 or t[j] > min(8, 9 * j + 9 - d):\n        d += t[j]\n        t[j] = 0\n        j += 1\n    t[j] += 1\n    k = max(k, j)\n    a, b = divmod(d - 1, 9)\n    t[:a] = [9] * a\n    t[a] += b\n    print(''.join(map(str, t[k::-1])))\n", "t = [0] * 400\nx = k = 0\nfor q in range(int(input())):\n    y = int(input())\n    d, x = y - x, y\n    j = 0\n    while d < 1 or t[j] > min(8, 9 * j + 9 - d):\n        d += t[j]\n        t[j] = 0\n        j += 1\n    t[j] += 1\n    k = max(k, j)\n    a, b = divmod(d - 1, 9)\n    t[:a] = [9] * a\n    t[a] += b\n    print(''.join(map(str, t[k::-1])))\n", "t = [0] * 400\nx = k = 0\nfor q in range(int(input())):\n    y = int(input())\n    d, x = y - x, y\n    j = 0\n    while d < 1 or t[j] > min(8, 9 * j + 9 - d):\n        d += t[j]\n        t[j] = 0\n        j += 1\n    t[j] += 1\n    k = max(k, j)\n    a, b = divmod(d - 1, 9)\n    t[:a] = [9] * a\n    t[a] += b\n    print(''.join(map(str, t[k::-1])))\n", "t = [0] * 400\nx = k = 0\nfor q in range(int(input())):\n    y = int(input())\n    d, x = y - x, y\n    j = 0\n    while d < 1 or t[j] > min(8, 9 * j + 9 - d):\n        d += t[j]\n        t[j] = 0\n        j += 1\n    t[j] += 1\n    k = max(k, j)\n    a, b = divmod(d - 1, 9)\n    t[:a] = [9] * a\n    t[a] += b\n    print(''.join(map(str, t[k::-1])))\n", "t = [0] * 400\nx = k = 0\nfor q in range(int(input())):\n    y = int(input())\n    d, x = y - x, y\n    j = 0\n    while d < 1 or t[j] > min(8, 9 * j + 9 - d):\n        d += t[j]\n        t[j] = 0\n        j += 1\n    t[j] += 1\n    k = max(k, j)\n    a, b = divmod(d - 1, 9)\n    t[:a] = [9] * a\n    t[a] += b\n    print(''.join(map(str, t[k::-1])))\n", "t = [0] * 400\nx = k = 0\nfor q in range(int(input())):\n    y = int(input())\n    d, x = y - x, y\n    j = 0\n    while d < 1 or t[j] > min(8, 9 * j + 9 - d):\n        d += t[j]\n        t[j] = 0\n        j += 1\n    t[j] += 1\n    k = max(k, j)\n    a, b = divmod(d - 1, 9)\n    t[:a] = [9] * a\n    t[a] += b\n    print(''.join(map(str, t[k::-1])))\n", "t = [0] * 400\nx = k = 0\nfor q in range(int(input())):\n    y = int(input())\n    d, x = y - x, y\n    j = 0\n    while d < 1 or t[j] > min(8, 9 * j + 9 - d):\n        d += t[j]\n        t[j] = 0\n        j += 1\n    t[j] += 1\n    k = max(k, j)\n    a, b = divmod(d - 1, 9)\n    t[:a] = [9] * a\n    t[a] += b\n    print(''.join(map(str, t[k::-1])))\n"]