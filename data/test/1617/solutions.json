["N = int(input())\ndef f(x):\n  y = N//x\n  return y + x * y * (y-1) // 2\nans = set()\nfor i in range(1,32000):\n  if N % i == 0:\n    ans.add(f(i))\n    ans.add(f(N//i))\nprint(\" \".join(str(x) for x in sorted(ans)))", "import math\n\nn = int(input())\n\ndef s(n, k):\n    count = n//k\n    return k*count*(count-1)//2 + count\n\nresult = []\n\nfor d in range(1, int(math.sqrt(n))+1):\n    if n%d != 0:\n        continue\n    d2 = n//d\n    result.append(s(n, d))\n    if d2 != d:\n        result.append(s(n, d2))\n\nresult.sort()\n\nprint(*result)\n", "def factorize(n):\n    fct = []  # prime factor\n    b, e = 2, 0  # base, exponent\n    while b * b <= n:\n        while n % b == 0:\n            n = n // b\n            e = e + 1\n        if e > 0:\n            fct.append((b, e))\n        b, e = b + 1, 0\n    if n > 1:\n        fct.append((n, 1))\n    return fct\n\n\ndef divisorize(fct):\n    b, e = fct.pop()  # base, exponent\n    pre_div = divisorize(fct) if fct else [[]]\n    suf_div = [[(b, k)] for k in range(e + 1)]\n    return [pre + suf for pre in pre_div for suf in suf_div]\n\n\ndef num(fct):\n    a = 1\n    for base, exponent in fct:\n        a = a * base ** exponent\n    return a\n\n\ndef fact(n):\n    fct = factorize(n)\n    res = []\n    for div in divisorize(fct):\n        res.append(num(div))\n    return res\n\n\ndef read():\n    return int(input())\n\n\ndef readlist():\n    return list(map(int, input().split()))\n\n\ndef readmap():\n    return map(int, input().split())\n\n\ndef f(n, k):\n    return n * (n - k + 2) // k // 2\n\n\nn = read()\nk_list = fact(n)\n\nans = []\nfor k in k_list:\n    ans.append(f(n, k))\n\nans.sort()\n\nprint(\" \".join(list(map(str, ans))))", "from math import sqrt\n\nn = int(input())\nans = [1, n * (n+1) // 2]\ndivisor = []\n\nfor i in range(2, int(sqrt(n))+1):\n\tif n % i == 0:\n\t\tdivisor.append(i)\n\t\tif i != n//i:\n\t\t\tdivisor.append(n//i)\n\nfor d in divisor:\n\tans.append(((n//d-1) * (n//d) // 2) * d + (n//d))\n\nans.sort()\nprint(*ans)", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[31]:\n\n\nn=int(input())\n\n\n# In[ ]:\n\n\n\n\n\n# In[32]:\n\n\nimport math\n\ndef divisorGenerator(n):\n    large_divisors = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            yield i\n            if i*i != n:\n                large_divisors.append(n // i)\n    for divisor in reversed(large_divisors):\n        yield divisor\n\n\n# In[33]:\n\n\ndlist= list(divisorGenerator(n))\n\n\n# In[34]:\n\n\ndlist.sort(key=lambda x: -x)\n\n\n# In[35]:\n\n\nfun=[]\n\n\n# In[36]:\n\n\nfor d in dlist:\n    number=n//d\n    fun.append(number*(number+1)//2*d-number*(d-1))\n\n\n# In[37]:\n\n\nprint(*fun)\n\n\n# In[ ]:\n\n\n", "n = int(input())\na = 1\nmass = []\nmass1 = []\nwhile a ** 2 <= n:\n    if n % a == 0:\n        mass.append(a)\n        mass1.append(a)\n    a += 1\nfor i in mass:\n    if i ** 2 != n:\n        mass1.append(n // i)\nmass1.sort()\nmass2 = []\nfor i in mass1:\n    if i not in mass2:\n        mass2.append(i)\n        print(((i - 1) * n) // 2 + i, end = ' ')", "import sys\nimport math\n\n\ndef get_sum(a, d, n):\n    return ((2 * a + (n - 1) * d) * n) >> 1\n\n\ndef main():\n    n = int(input())\n    \n    divisors = set()\n    for d in range(1, min(n + 1, 10**5)):\n        if n % d == 0:\n            divisors.add(d)\n            divisors.add(n // d)\n    \n    fun_values = [get_sum(1, d, n // d) for d in divisors]\n    fun_values = sorted(list(fun_values))\n    \n    print(' '.join(str(v) for v in fun_values))\n    \n    \ndef __starting_point():\n\tmain() \n\n__starting_point()", "from math import sqrt\n\nn = int(input())\nans = []\nfor p in range(1, n + 1):\n    ps = p ** 2\n    if ps > n:\n        break\n    if n % p == p % p:\n        ans.append(p * (n + 2 - n // p) // 2)\n        if ps < n:\n            ans.append(n // p * (n + 2 - p) // 2)\nans.sort()\nprint(*ans)\n", "n = int(input())\nans = []\nfor d in range(1, n):\n    if n < d * d:\n         break\n    if n % d != 0:\n         continue\n    ans.append(n * (d - 1) // 2 + d)\n    if d * d < n:\n        ans.append(n * (n // d - 1) // 2 + n // d)\t\nans = list(sorted(ans))\nprint(' '.join(map(str, ans)))\n", "n = int(input())\nf = []\ni = 1\nwhile i*i < n:\n    if n%i == 0:\n        f.append(i)\n        f.append(n//i)\n    i += 1\nif i*i == n:\n    f.append(i)\nfuns = []\nfor fs in f:\n    funs.append((n*n+2*n-n*fs)//(2*fs))\nfuns.sort()\nprint(*funs)\n", "import math\nn = int(input())\nst = set([])\nfor i in range(1, int(math.sqrt(n)) + 2):\n    if not (n % i):\n        k = i\n        st.add((k * (n // k - 1) * (n // k)) // 2 + n // k)\n        k = n // i\n        st.add((k * (n // k - 1) * (n // k)) // 2 + n // k)\nprint(*sorted(list(st)))", "import math\nn = int(input())\na = []\nend = math.floor(n ** 0.5) + (1 if math.floor(n ** 0.5) ** 2 == n else 0)\nfor i in range(1, end + 1):\n    if n % i == 0:\n        a.append(i)\n        if i != n // i:\n            a.append(n // i)\nans = []\nfor i in a:\n    m = n // i\n    ans.append(m + i * (m - 1) * m // 2)\nprint(\" \".join([str(i) for i in sorted(ans)]))\n", "\nfrom math import sqrt,ceil\nfrom collections import defaultdict\n\nlim = int((10**9)**.5+100)\n\ndef sieve(N):\n    \"\"\"Dumb sieve of Eratosthemes, O(N*log(log(N)))\"\"\"\n    b = [True]*(N+1)\n    b[0] = False\n    b[1] = False\n\n    lim = ceil(sqrt(N))\n    i = 2\n    while i <= lim:\n        if b[i]:\n            for n in range(i**2,N+1,i):\n                b[n] = False\n        i+=1\n    \n    return [i for i,b in enumerate(b) if b]\n\nP = sieve(lim)\n\ndef factor(n):\n    \"\"\"Given prime list, factorize n. Format as dict of factors with counts.\"\"\"\n    if n in P: return {n: 1}\n\n    F = []\n    for p in P:\n        while n%p == 0:\n            n//=p\n            F.append(p)\n        if n in P:\n            F.append(n)\n            break\n    else:\n        if n != 1:\n            F.append(n)\n\n    C = {}\n    for f in F:\n        if f not in C:\n            C[f] = 0\n        C[f] += 1\n\n    return C\n\ndef divisors(n):\n    \"\"\"Generate divisors.\"\"\"\n    return divisors_from_factors(factor(n))\n\ndef divisors_from_factors(F):\n    \"\"\"Given factors, generate divisors.\"\"\"\n    D = {1}\n    for f in F:\n        D |= {f**p*d for d in D for p in range(1,F[f]+1)}\n    return D\n\nn = int(input())\nD = divisors(n)\n\nprint(*sorted((1+n-d+1)*n//d//2 for d in D))\n", "# alpha = \"abcdefghijklmnopqrstuvwxyz\"\n# prime = 998244353\n# INF = 100000000000\n# from heapq import heappush\nt = 1#int(input())\nfor test in range(t):\n    n = int(input())\n    ans = set()\n    ans.add(1)\n    ans.add((n*(n+1))//2)\n    for i in range(2, int(pow(n,0.5))+2):\n        if n%i==0:\n            tmp = n//i\n            tmp2 = tmp*(2+((tmp-1)*i))\n            ans.add(tmp2//2)\n            tmp2 = i*(2+((i-1)*tmp))\n            ans.add(tmp2//2)\n    print(*sorted(list(ans)))\n\n\n\n\n", "n = int(input())\ns = []\ni = 1\nwhile i * i <= n:\n    if n % i == 0:\n        y = n // i\n        a = i\n        x = (a * y * (y + 1)) // 2 - (a - 1) * y\n        s.append(x)\n        j = n // i\n        if j > i:\n            y = n // j\n            a = j\n            x = (a * y * (y + 1)) // 2 - (a - 1) * y\n            s.append(x)\n    i += 1\ns = set(s)\ns = list(s)\ns.sort()\nprint(*s)\n", "#                                          .\u2227\uff3f\u2227\n#                                         ( \uff65\u03c9\uff65\uff61)\u3064\u2501\u30fb*\u3002\n#                                          \u2282\u3000 \u30ce \u3000\u3000\u3000\u30fb\u309c+.\n#                                          \u3057\u30fc\uff2a\u3000\u3000\u3000\u00b0\u3002+ *\u00b4\u00a8)\n#                           \u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000         .\u00b7 \u00b4\u00b8.\u00b7*\u00b4\u00a8) \u00b8.\u00b7*\u00a8)\n#\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000                                        (\u00b8.\u00b7\u00b4 (\u00b8.\u00b7'*\n#                                                               #\n#                                                              ***\n#                                                             *****\n#                                                            *****~~\n#                                                             **~~~\n#                                                            *~~~***\n#                                                           ~~~******\n#                                                          ~~*********\n#                                                         *************\n#                                                          ***********\n#                                                         *************\n#                                                        ***************\n#                                                       *@***************\n#                                                      ***@************@**\n#                                                     *@****************@**\n#                                                       @****************\n#                                                      *******************\n#                                                     *****@***************\n#                                                    ***********************\n#                                                   ********@****************\n#                                                  *****************@*********\n#                                                 *****************************\n#                                                             |||||\n#                                                             |||||   _8_8_\n#                                                             |||||  |  |  |_8_\n#                                                             |||||  |__|__|___|\n\n\n\nn = int(input())\nb = set()\nfor i in range(1, int(n ** 0.5) + 3):\n    if n % i == 0:\n        v = n // i\n        b.add(i * ((v * (v - 1)) // 2) + v)\n        b.add(v * ((i * (i - 1)) // 2) + i)\nprint(*sorted(b))", "n = int(input())\nl = []\ns = set()\nfor i in range(1, int(n ** 0.5) + 1):\n\tif n % i == 0:\n\t\ts.add(int(i))\n\t\ts.add(int(n // i))\n\nans = []\nfor x in s:\n\tk = n // x\n\tlast = 1 + x * (k - 1)\n\tans.append((1 + last) * k // 2)\nans = sorted(ans)\nfor i in ans:\n\tprint(i, end=' ')", "def GetDiv(n):\n    Div = []\n    i = 1\n    while i*i<=n:\n        if n%i==0:\n            Div.append(i)\n            Div.append(n//i)\n        i+=1\n    \n    return sorted(list(set(Div))) \n\nN = int(input())\nAns = []\nAns.append( N*(N+1) // 2)\n\nfor i in GetDiv(N):\n    M = N // i \n    Ans.append( M*(1-i) + i*M*(M+1)//2 )\n\nprint(\" \".join(map(str,sorted(list(set(Ans))))))\n", "from math import sqrt\nN = int(input())\nans = []\nadd = ans.append\nfor k in filter(lambda p: N % p == 0, range(1, int(sqrt(N))+1)):\n    add(N*k*(k-1)//2//k+k)\n    k = N//k\n    add(N*k*(k-1)//2//k+k)\n\nprint(*sorted(set(ans)))", "from math import sqrt\nn=int(input().strip())\ns = set()\n\ndef f(n):\n    return n*(n+1)//2\n\nfor i in range(1,int(sqrt(n))+1):\n    if(n%i==0):\n        x=i*f(n//i-1)+n//i\n        s.add(x)\n        \n        j=n//i\n        y=j*f(n//j-1)+n//j\n        s.add(y)\n        #print(i, j, x,y)\n\nprint(\" \".join(map(str,sorted(list(s)))))", "# -*- coding: utf-8 -*-\n\"\"\"\nSpyder Editor\n\nThis is a temporary script file.\n\"\"\"\n\nn=int(input())\na=[]\ni=1\n\nwhile i*i<=n:\n    if n%i==0:\n        a.append(i)\n        a.append(n//i)\n    i+=1\na.sort(reverse=True)\ntemp=2*n+(n*n)\nminus=n\nl=[]\nl.append(0)\nfor i in a:\n    ans=(temp//i-minus)//2\n    if l[-1]!=ans:\n        l.append(ans)\nfor i in l:\n    if i>0:\n        print(i,end=' ')\n#   print(i,end=' ')", "import math\nn = int(input())\nsq = int(math.sqrt(n))\n\nM = {}\n\nM[1] = 1\nM[n*(n+1)//2] = 1\n\nfor i in range(2, sq+1):\n    if n%i == 0:\n        r = n-i+1\n        ret = ((1+r)*(r-1+i))//(2*i)\n        M[ret]=1\n\n        if (n//i != sq):\n            f = n//i\n            r = n-f+1\n            ret = ((1+r)*(r-1+f))//(2*f)\n            M[ret]=1\n\nret = sorted(M.keys())\n\nprint(*ret)", "n=int(input())\nl1=[]\nl1.append(1)\nl1.append((n*(n+1))//2)\nfor i in range(2,int(n**0.5)+1):\n    if n%i==0:\n        x=(n//i)*(2+((n//i)-1)*i)//2\n        if x not in l1:\n            l1.append(x)\n    k=n//i\n    if n%k==0:\n        x=(n//k)*(2+((n//k)-1)*k)//2\n        if x not in l1:\n            l1.append(x)\nl1.sort()\nfor item in l1:\n    print(item,end=\" \")", "n = int(input())\ndels = set()\nfor k in range(1, int((n+1)**0.5)+1):\n    if n%k==0:\n        dels.add(k)\n        dels.add(n//k)\nfor d in sorted(dels, reverse=True):\n    z = n//d\n    print((n*(n+1)//2-z*d*(d-1)//2)//d, end=' ')\n\n"]