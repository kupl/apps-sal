["import sys\n\n\ndef get_sol(a, b, c, n, reverse):\n\t#1\n\tif reverse[0]:\n\t\ta = (a[1], a[0], a[2])\n\tif reverse[1]:\n\t\tb = (b[1], b[0], b[2])\n\tif reverse[2]:\n\t\tc = (c[1], c[0], c[2])\n\n\n\tans = []\n\tif a[0] == b[0] == c[0] == n:\n\t\tif a[1] + b[1] + c[1] == n:\n\t\t\tfor i in range(a[1]):\n\t\t\t\tans.append(a[2]*n)\n\t\t\tfor i in range(b[1]):\n\t\t\t\tans.append(b[2]*n)\n\t\t\tfor i in range(c[1]):\n\t\t\t\tans.append(c[2]*n)\n\t\t\treturn True, ans\n\tif a[0] + c[0] == b[0] + c[0] == n and c[1] == n == a[1] + b[1]:\n\t\tfor i in range(a[1]):\n\t\t\tans.append(a[2]*a[0] + c[2] * c[0])\n\t\tfor i in range(b[1]):\n\t\t\tans.append(b[2]*b[0] + c[2] * c[0])\n\t\treturn True, ans\n\treturn False, ans\n\ndef printans(ans, n):\n\tprint(n)\n\tfor line in ans:\n\t\tprint(line)\n\treturn\n\n#sys.stdin = open('input.txt')\n#sys.stdout = open('output.txt', 'w')\n\nx1, y1, x2, y2, x3, y3 = [int(i) for i in input().split()]\ntotal_area = x1*y1 + x2*y2 + x3*y3\nn = 0\nwhile n ** 2 < total_area:\n\tn += 1\nif n ** 2 != total_area:\n\tprint(-1)\nelse:\n\tfirst = (x1, y1, 'A')\n\tsecond = (x2, y2, 'B')\n\tthird = (x3, y3, 'C')\n\tpereb = (\t(first, second, third),\n\t\t\t\t(first, third, second),\n\t\t\t\t(second, first, third),\n\t\t\t\t(second, third, first),\n\t\t\t\t(third, first, second),\n\t\t\t\t(third, second, first))\n\tfor rev1 in (False, True):\n\t\tfor rev2 in (False, True):\n\t\t\tfor rev3 in (False, True):\n\t\t\t\tfor per in pereb:\n\t\t\t\t\treverse = (rev1, rev2, rev3)\n\t\t\t\t\tis_ans, ans = get_sol(per[0], per[1], per[2], n, reverse)\n\t\t\t\t\tif is_ans: printans(ans, n)\n\t\n\t\n\tprint(-1)\n", "w1,h1, w2,h2, w3,h3 = map(int, input().split())\nr1, r2, r3 = sorted((w1,h1)), sorted((w2,h2)), sorted((w3,h3))\nfor i in range(3):\n    ra, ca = (r1,r2,r3)[i], \"ABC\"[i]\n    rb, cb = (r1,r2,r3)[(i+1)%3], \"ABC\"[(i+1)%3]\n    rc, cc = (r1,r2,r3)[(i+2)%3], \"ABC\"[(i+2)%3]\n    if ra[0] == ra[1]: continue\n    # solve a ra[1]-ra[0] x ra[1] rectangle with 2 remaining rectangles\n    w, h = ra[1]-ra[0], ra[1]\n    rs = []\n    wtot, whit, ws = 0, 0, []\n    htot, hhit, hs = 0, 0, []\n    for r in (rb, rc):\n        rs.append(r)\n        if r[0] != r[1]:\n            rs.append((r[1], r[0]))\n    for r in rs:\n        if r[0] == w:\n            wtot += r[1]\n            whit += 1\n            ws.append(r[1])\n        if r[0] == h:\n            htot += r[1]\n            hhit += 1\n            hs.append(r[1])\n    if whit == 2 and wtot == h:\n        n = ra[1]\n        xb = rb[0] if rb[1] == w else rb[1]\n        xc = rc[0] if rc[1] == w else rc[1]\n        print(n)\n        print((ca * n + '\\n') * ra[0], end='')\n        print((cb * xb + cc * xc + '\\n') * w, end='')\n        break\n    if hhit == 2 and htot == w:\n        n = ra[1]\n        xb = rb[0] if rb[1] == h else rb[1]\n        xc = rc[0] if rc[1] == h else rc[1]\n        print(n)\n        print((ca * n + '\\n') * ra[0], end='')\n        print((cb * n + '\\n') * xb, end='')\n        print((cc * n + '\\n') * xc, end='')\n        break\nelse:\n    print(-1)\n", "import sys\n\n#this solves only a specific orientation\n#is fine because we consider all orientations\nimport itertools\n\n\ndef can(h1, w1, h2, w2, h3, w3, c1, c2, c3, tot):\n    #height = h1\n    if tot % h1 == 0 and tot // h1 == h1:\n        # side by side or on top of each other are the two options\n        # side by side\n        if h1 == h2 == h3:\n            print(h1)\n            for r in range(h1):\n                temp = \"\"\n                for c in range(w1 + w2 + w3):\n                    if c < w1: temp += c1\n                    elif c < w1 + w2: temp += c2\n                    else: temp += c3\n                print(temp)\n            return True\n        if h2 + h3 == h1 and w2 == w3:\n            print(h1)\n            for r in range(h1):\n                temp = \"\"\n                for c in range(w1 + w2):\n                    if c < w1: temp += c1\n                    else:\n                        if r < h2: temp += c2\n                        else: temp += c3\n                print(temp)\n            return True\n    return False\n\n\ndef solve(perm):\n    x1, y1 = perm[0][0][0],  perm[0][0][1]\n    x2, y2 = perm[1][0][0],  perm[1][0][1]\n    x3, y3 = perm[2][0][0],  perm[2][0][1]\n    c1 = perm[0][1]\n    c2 = perm[1][1]\n    c3 = perm[2][1]\n    tot = x1 * y1 + x2 * y2 + x3 * y3\n    for sw1 in range(2):\n        for sw2 in range(2):\n            for sw3 in range(2):\n                h1, w1, h2, w2, h3, w3 = x1, y1, x2, y2, x3, y3\n                if sw1 == 1: h1, w1 = w1, h1\n                if sw2 == 1: h2, w2 = w2, h2\n                if sw3 == 1: h3, w3 = w3, h3\n                if can(h1, w1, h2, w2, h3, w3, c1, c2, c3, tot):\n                    return True\n\ndef supersolve():\n    x1, y1, x2, y2, x3, y3, = rv()\n    a = [([x1, y1], 'A'), ([x2, y2], 'B'), ([x3, y3], 'C')]\n    for perm in itertools.permutations(a):\n        if solve(perm): return\n    print(-1)\n\n\ndef prt(l): return print(' '.join(map(str, l)))\ndef rs(): return map(str, input().split())\ndef rv(): return map(int, input().split())\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]  \nif sys.hexversion == 50594544 : sys.stdin = open(\"test.txt\")\nsupersolve()", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\ndef flag(a, b, c, d, e, f, X, Y, Z):\n    if (b == d and d == f and a+c+e == b):\n\n        m = [ [ 0 for i in range(b) ] for i in range(b) ]\n\n        for i in range(a):\n            for j in range(b):\n                m[i][j] = X\n\n        for i in range(a, a+c):\n            for j in range(b):\n                m[i][j] = Y\n\n        for i in range(a+c, a+c+e):\n            for j in range(b):\n                m[i][j] = Z\n\n        return (b, m)\n    return False\n\ndef frame(a, b, c, d, e, f, X, Y, Z):\n    if ((a == c + e) and ( a == b+d ) and (d == f)):\n\n        m = [ [ 0 for i in range(a) ] for i in range(a) ]\n\n        for i in range(a):\n            for j in range(b):\n                m[i][j] = X\n\n        for i in range(c):\n            for j in range(b, a):\n                m[i][j] = Y\n\n        for i in range(c, a):\n            for j in range(b, a):\n                m[i][j] = Z\n        return (a, m)\n    return False\n\ndef test0(a, b, c, d, e, f, X, Y, Z):\n    ans = flag(a, b, c, d, e, f, X, Y, Z)\n    if ans == False:\n        ans = frame(a, b, c, d, e, f, X, Y, Z)\n    return ans\n\ndef test(a, b, c, d, e, f, X, Y, Z):\n    ans = test0(a, b, c, d, e, f, X, Y, Z)\n\n    if ans == False:\n        ans = test0(a, b, c, d, f, e, X, Y, Z)\n    if ans == False:\n        ans = test0(a, b, d, c, e, f, X, Y, Z)\n    if ans == False:\n        ans = test0(b, a, c, d, e, f, X, Y, Z)\n\n    if ans == False:\n        ans = test0(a, b, d, c, f, e, X, Y, Z)\n    if ans == False:\n        ans = test0(b, a, c, d, f, e, X, Y, Z)\n    if ans == False:\n        ans = test0(b, a, d, c, e, f, X, Y, Z)\n\n    if ans == False:\n        ans = test0(b, a, d, c, f, e, X, Y, Z)\n\n    return ans\n\n(a, b, c, d, e, f) = (int(i) for i in input().split())\n\nstart = time.time()\n\nans = test(a, b, c, d, e, f, 'A', 'B', 'C')\n\nif ans == False:\n    ans = test(c, d, a, b, e, f, 'B', 'A', 'C')\n\nif ans == False:\n    ans = test(e, f, a, b, c, d, 'C', 'A', 'B')\n\nif ans == False:\n    print(-1)\nelse:\n    print(ans[0])\n\n    for i in range(ans[0]):\n        for j in range(ans[0]):\n            print(ans[1][i][j], end = '' )\n        print()\n\nfinish = time.time()\n#print(finish - start)\n", "import itertools\n\nx1,y1,x2,y2,x3,y3 = list(map(int, input().split(' ')[:6]))\n\nA, B, C = (x1, y1,'A'),(x2,y2,'B'),(x3,y3,'C')\n\n\ndef rot(X, do_rot):\n    return (X[1], X[0], X[2]) if do_rot else X\n\n\ndef solve_1(A,B,C):\n    w = A[0] + B[0] + C[0]\n    if A[1] == B[1] == C[1] == w:\n        res = [['' for j in range(w)] for i in range(w)]\n        for i in range(w):\n            for j in range(w):\n                if j < A[0]:\n                    res[i][j] = A[2]\n                elif j < A[0] + B[0]:\n                    res[i][j] = B[2]\n                else:\n                    res[i][j] = C[2]\n        return res\n\n\ndef solve_2(A,B,C):\n    w = A[0] + B[0]\n    if w == A[1] + C[1] and C[0] == w and B[1] == A[1]:\n        res = [['' for j in range(w)] for i in range(w)]\n        for i in range(w):\n            for j in range(w):\n                if i < A[1]:\n                    if j < A[0]:\n                        res[i][j] = A[2]\n                    else:\n                        res[i][j] = B[2]\n                else:\n                    res[i][j] = C[2]\n        return res\n\n\n\nfor I, J, K in itertools.permutations([A,B,C]):\n    for i in range(2):\n        for j in range(2):\n            for k in range(2):\n                L = rot(I, i)\n                M = rot(J, j)\n                N = rot(K, k)\n                v = solve_1(L,M,N)\n                if not v:\n                    v = solve_2(L,M,N)\n                if v:\n                    print(len(v))\n                    for l in v:\n                        print(''.join(map(str,l)))\n                    return\nprint(-1)\n", "x1,y1,x2,y2,x3,y3 = list(map(int,input().split(\" \")))\nif (x1==x2==x3==(y1+y2+y3)):\n    print(x1)\n    for i in range(y1):\n        print(\"\".join([\"A\"]*x1))\n    for i in range(y2):\n        print(\"\".join([\"B\"]*x1))\n    for i in range(y3):\n        print(\"\".join([\"C\"]*x1))\nelif (x1==x2==y3==(y1+y2+x3)):\n    print(x1)\n    for i in range(y1):\n        print(\"\".join([\"A\"]*x1))\n    for i in range(y2):\n        print(\"\".join([\"B\"]*x1))\n    for i in range(x3):\n        print(\"\".join([\"C\"]*x1))\nelif (x1==y2==x3==(y1+x2+y3)):\n    print(x1)\n    for i in range(y1):\n        print(\"\".join([\"A\"]*x1))\n    for i in range(x2):\n        print(\"\".join([\"B\"]*x1))\n    for i in range(y3):\n        print(\"\".join([\"C\"]*x1))\nelif (x1==y2==y3==(y1+x2+x3)):\n    print(x1)\n    for i in range(y1):\n        print(\"\".join([\"A\"]*x1))\n    for i in range(x2):\n        print(\"\".join([\"B\"]*x1))\n    for i in range(x3):\n        print(\"\".join([\"C\"]*x1))\nelif (y1==y2==y3==(x1+x2+x3)):\n    print(y1)\n    for i in range(x1):\n        print(\"\".join([\"A\"]*y1))\n    for i in range(x2):\n        print(\"\".join([\"B\"]*y1))\n    for i in range(x3):\n        print(\"\".join([\"C\"]*y1))\nelif (y1==y2==x3==(x1+x2+y3)):\n    print(y1)\n    for i in range(x1):\n        print(\"\".join([\"A\"]*y1))\n    for i in range(x2):\n        print(\"\".join([\"B\"]*y1))\n    for i in range(y3):\n        print(\"\".join([\"C\"]*y1))\nelif (y1==x2==y3==(x1+y2+x3)):\n    print(y1)\n    for i in range(x1):\n        print(\"\".join([\"A\"]*y1))\n    for i in range(y2):\n        print(\"\".join([\"B\"]*y1))\n    for i in range(x3):\n        print(\"\".join([\"C\"]*y1))\nelif (y1==x2==x3==(x1+y2+y3)):\n    print(y1)\n    for i in range(x1):\n        print(\"\".join([\"A\"]*y1))\n    for i in range(y2):\n        print(\"\".join([\"B\"]*y1))\n    for i in range(y3):\n        print(\"\".join([\"C\"]*y1))\n#1\nelif (x1==x2+x3==y1+y2==y1+y3):\n    print(x1)\n    for i in range(y1):\n        print(\"\".join([\"A\"]*x1))\n    for i in range(y2):\n        print(\"\".join([\"B\"]*x2+[\"C\"]*x3))\nelif (x1==x2+y3==y1+y2==y1+x3):\n    print(x1)\n    for i in range(y1):\n        print(\"\".join([\"A\"]*x1))\n    for i in range(y2):\n        print(\"\".join([\"B\"]*x2+[\"C\"]*y3))\nelif (x1==y2+x3==y1+x2==y1+y3):\n    print(x1)\n    for i in range(y1):\n        print(\"\".join([\"A\"]*x1))\n    for i in range(x2):\n        print(\"\".join([\"B\"]*y2+[\"C\"]*x3))\nelif (x1==y2+y3==y1+x2==y1+x3):\n    print(x1)\n    for i in range(y1):\n        print(\"\".join([\"A\"]*x1))\n    for i in range(x2):\n        print(\"\".join([\"B\"]*y2+[\"C\"]*y3))\nelif (y1==y2+y3==x1+x2==x1+x3):\n    print(y1)\n    for i in range(x1):\n        print(\"\".join([\"A\"]*y1))\n    for i in range(x2):\n        print(\"\".join([\"B\"]*y2+[\"C\"]*y3))\nelif (y1==y2+x3==x1+x2==x1+y3):\n    print(y1)\n    for i in range(x1):\n        print(\"\".join([\"A\"]*y1))\n    for i in range(x2):\n        print(\"\".join([\"B\"]*y2+[\"C\"]*x3))\nelif (y1==x2+y3==x1+y2==x1+x3):\n    print(y1)\n    for i in range(x1):\n        print(\"\".join([\"A\"]*y1))\n    for i in range(y2):\n        print(\"\".join([\"B\"]*x2+[\"C\"]*y3))\nelif (y1==x2+x3==x1+y2==x1+x3):\n    print(y1)\n    for i in range(x1):\n        print(\"\".join([\"A\"]*y1))\n    for i in range(y2):\n        print(\"\".join([\"B\"]*x2+[\"C\"]*x3))\n#2\nelif (x2==x1+x3==y1+y2==y2+y3):\n    print(x2)\n    for i in range(y2):\n        print(\"\".join([\"B\"]*x2))\n    for i in range(y1):\n        print(\"\".join([\"A\"]*x1+[\"C\"]*x3))\nelif (x2==x1+y3==y1+y2==y2+x3):\n    print(x2)\n    for i in range(y2):\n        print(\"\".join([\"B\"]*x2))\n    for i in range(y1):\n        print(\"\".join([\"A\"]*x1+[\"C\"]*y3))\nelif (x2==y1+x3==x1+y2==y2+y3):\n    print(x2)\n    for i in range(y2):\n        print(\"\".join([\"B\"]*x2))\n    for i in range(x1):\n        print(\"\".join([\"A\"]*y1+[\"C\"]*x3))\nelif (x2==y1+y3==x1+y2==y2+x3):\n    print(x2)\n    for i in range(y2):\n        print(\"\".join([\"B\"]*x2))\n    for i in range(x1):\n        print(\"\".join([\"A\"]*y1+[\"C\"]*y3))\nelif (y2==y1+y3==x1+x2==x2+x3):\n    print(y2)\n    for i in range(x2):\n        print(\"\".join([\"B\"]*y2))\n    for i in range(x1):\n        print(\"\".join([\"A\"]*y1+[\"C\"]*y3))\nelif (y2==y1+x3==x1+x2==x2+y3):\n    print(y2)\n    for i in range(x2):\n        print(\"\".join([\"B\"]*y2))\n    for i in range(x1):\n        print(\"\".join([\"A\"]*y1+[\"C\"]*x3))\nelif (y2==x1+y3==y1+x2==x2+x3):\n    print(y2)\n    for i in range(x2):\n        print(\"\".join([\"B\"]*y2))\n    for i in range(y1):\n        print(\"\".join([\"A\"]*x1+[\"C\"]*y3))\nelif (y2==x1+x3==y1+x2==x2+y3):\n    print(y2)\n    for i in range(x2):\n        print(\"\".join([\"B\"]*y2))\n    for i in range(y1):\n        print(\"\".join([\"A\"]*x1+[\"C\"]*x3))\n#3\nelif (x3==x2+x1==y1+y3==y2+y3):\n    print(x3)\n    for i in range(y3):\n        print(\"\".join([\"C\"]*x3))\n    for i in range(y1):\n        print(\"\".join([\"B\"]*x2+[\"A\"]*x1))\nelif (x3==x2+y1==x1+y3==y2+y3):\n    print(x3)\n    for i in range(y3):\n        print(\"\".join([\"C\"]*x3))\n    for i in range(x1):\n        print(\"\".join([\"B\"]*x2+[\"A\"]*y1))\nelif (x3==y2+x1==y1+y3==x2+y3):\n    print(x3)\n    for i in range(y3):\n        print(\"\".join([\"C\"]*x3))\n    for i in range(y1):\n        print(\"\".join([\"B\"]*y2+[\"A\"]*x1))\nelif (x3==y2+y1==x1+y3==x2+y3):\n    print(x3)\n    for i in range(y3):\n        print(\"\".join([\"C\"]*x3))\n    for i in range(x1):\n        print(\"\".join([\"B\"]*y2+[\"A\"]*y1))\nelif (y3==y2+y1==x1+x3==x2+x3):\n    print(y3)\n    for i in range(x3):\n        print(\"\".join([\"C\"]*y3))\n    for i in range(x1):\n        print(\"\".join([\"B\"]*y2+[\"A\"]*y1))\nelif (y3==y2+x1==y1+x3==x2+x3):\n    print(y3)\n    for i in range(x3):\n        print(\"\".join([\"C\"]*y3))\n    for i in range(y1):\n        print(\"\".join([\"B\"]*y2+[\"A\"]*x1))\nelif (y3==x2+y1==x1+x3==y2+x3):\n    print(y3)\n    for i in range(x3):\n        print(\"\".join([\"C\"]*y3))\n    for i in range(x1):\n        print(\"\".join([\"B\"]*x2+[\"A\"]*y1))\nelif (y3==x2+x1==y1+x3==y2+x3):\n    print(y3)\n    for i in range(x3):\n        print(\"\".join([\"C\"]*y3))\n    for i in range(y1):\n        print(\"\".join([\"B\"]*x2+[\"A\"]*x1))\nelse:\n    print(-1)\n\n", "def main():\n    mode=\"filee\"\n    if mode==\"file\":p=open(\"test.txt\",\"r\")\n    #f.readline()\n    #input()\n    get = lambda :[int(x) for x in (p.readline() if mode==\"file\" else input()).split()]\n    [a,b,c,d,e,f]=get()\n    g=[[a,b,\"A\"],[c,d,\"B\"],[e,f,\"C\"]]\n    n=0\n    for i in g:n=max(n,max(i[:2]))\n    if a*b + c*d + e*f !=n*n:\n        print(\"-1\")\n        return\n    h=[]\n    print(n)\n    for i in g:\n        if n in i:\n            for j in range(min(i[:2])):\n                print(i[2]*max(i[:2]))\n        else:\n            h.append(i)\n    if len(h)>0:\n        for j in range(2):\n            for k in range(2):\n                if h[0][j]==h[1][k] and (h[0][1-j] + h[1][1-k])==n:\n                    l1 = h[0][1-j]\n                    l2 = h[1][1-k]\n                    times = h[0][j]\n                    c1 = h[0][2]\n                    c2 = h[1][2]\n                    break\n        for i in range(times):\n            print(c1*l1 + c2*l2)\n\n    if mode==\"file\":p.close()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "a,b,c,d,e,f=list(map(int,input().split()))\nm=sorted([(max(a,b),min(a,b),\"A\"),(max(c,d),min(c,d),\"B\"),(max(e,f),min(e,f),\"C\")])\nma=m[-1][0]\nma2=ma-m[-1][1]\nans=[[\"A\"]*ma for i in range(ma)]\nif a*b+c*d+e*f!=ma*ma: print(-1)\nelif m[0][0]*m[0][1]+m[1][0]*m[1][1]!=ma2*ma: print(-1)\nelif m[0][0]!=m[1][0]:\n    if m[0][0]!=m[1][1] and m[0][1]!=m[1][1] : print(-1)\n    else:\n        for i in range(m[-1][1]):\n            for j in range(ma): ans[i][j]=m[-1][2]\n        for i in range(m[-1][1],ma):\n            for j in range(m[0][0]+m[0][1]-ma2): ans[i][j]=m[0][2]        \n        for i in range(m[-1][1],ma):\n            for j in range(m[0][0]+m[0][1]-ma2,ma): ans[i][j]=m[1][2]\n        print(ma)    \n        for x in ans:\n            print(''.join(x))            \nelse:\n    for i in range(m[-1][1]):\n        for j in range(ma): ans[i][j]=m[-1][2]\n    if m[0][0]==ma:\n        for i in range(m[-1][1],m[-1][1]+m[0][1]):\n                for j in range(ma): ans[i][j]=m[0][2]        \n        for i in range(m[-1][1]+m[0][1],ma):\n                for j in range(ma): ans[i][j]=m[1][2]\n    else:\n        for i in range(m[-1][1],ma):\n                for j in range(m[0][1]): ans[i][j]=m[0][2]        \n        for i in range(m[-1][1],ma):\n                for j in range(m[0][1],ma): ans[i][j]=m[1][2]\n    print(ma)    \n    for x in ans:\n        print(''.join(x))\n\n", "def stripe(a, b, c):\n    ans = [str(a[0])]\n    ans.append('\\n'.join(a[2]*a[0] for _ in range(a[1])))\n    ans.append('\\n'.join(b[2]*b[0] for _ in range(b[1])))\n    ans.append('\\n'.join(c[2]*c[0] for _ in range(c[1])))\n    return '\\n'.join(ans)\n\n\ndef tt(a):\n    return (a[1], a[0], a[2])\n\n\ndef one_two(a, b, c):\n    ans = [str(a[0])]\n    ans.append('\\n'.join(a[2]*a[0] for _ in range(a[1])))\n    for _ in range(b[1]):\n        ans.append(b[2]*b[0] + c[2]*c[0])\n    return '\\n'.join(ans)\n\n\ndef solve():\n    x1, y1, x2, y2, x3, y3 = list(map(int, input().split()))\n    a = (x1, y1, 'A')\n    b = (x2, y2, 'B')\n    c = (x3, y3, 'C')\n\n    from itertools import permutations\n    for a, b, c in permutations((a, b, c)):\n        for a, b, c in ((a, b, c), (tt(a), b, c), (a, tt(b), c), (a, b, tt(c)),\n                        (tt(a), tt(b), c), (tt(a), b, tt(c)), (a, tt(b), tt(c)),\n                        (tt(a), tt(b), tt(c))):\n            if a[0] == a[1] + b[1] + c[1]:\n                return stripe(a, b, c)\n            if a[0] == b[0] + c[0] and b[1] == c[1] and a[0] == a[1]+b[1]:\n                return one_two(a, b, c)\n\n    return -1\n\nprint(solve())\n", "a = list(map(int, input().split()))\n\nfrom math import sqrt\n\nt = a[0] * a[1] + a[2] * a[3] + a[4] * a[5]\nc = ('A', 'B', 'C')\np = int(sqrt(t))\nif p ** 2 != t:\n    print('-1')\n    return\n\nk = 0\nfor i in a:\n    if i == p:\n        k += 1\n\nif k == 0 or k == 2:\n    print('-1')\n    return\n\nb = list()\nans = ''\nif (k == 3):\n    for i in a:\n        if i != p:\n            b.append(i)\n    if sum(b) != p:\n        print('-1')\n        return\n    for i in range(p):\n        for j in range(3):\n            ans += (c[j] * b[j])\n        ans += '\\n'\n    print(p)\n    print(ans)\n    return\n\narr = []\narr.append([a[0], a[1]])\narr.append([a[2], a[3]])\narr.append([a[4], a[5]])\narr[0].sort(reverse=True)\narr[1].sort(reverse=True)\narr[2].sort(reverse=True)\narr[0] += [0]\narr[1] += [1]\narr[2] += [2]\narr.sort()\narr[0][0], arr[0][1] = arr[0][1], arr[0][0]\narr[1][0], arr[1][1] = arr[1][1], arr[1][0]\narr[2][0], arr[2][1] = arr[2][1], arr[2][0]\n\n\nkol = p - arr[2][0]\nfor i in range(2):\n    for j in range(2):\n        if arr[0][i] == arr[1][j] == kol and arr[0][1 - i] + arr[1][1 - j] == p:\n            ans = (((c[arr[2][2]] + '') * p).__str__() + '\\n') * arr[2][0]\n            ans += (((c[arr[0][2]] + '') * arr[0][1 - i]) + ((c[arr[1][2]] + '') * arr[1][1 - j]) + '\\n') * kol\n            print(p)\n            print(ans)\n            return\nprint('-1')", "def print_if_possible(w, h):\n    xw, xh = max(w), max(h)\n    nw, nh = min(w), min(h)\n    x = max(xw, xh)\n    wm, hm = w.count(xw), h.count(xh)\n    if hm == 1 and xh == x:\n        q = h.index(xh)\n        i, j = (q+1)%3, (q+2)%3\n        if xh != sum(w)-w[i] or h[q] != h[i] + h[j] or w[i]!=w[j]:\n            return False\n        print(x)\n        for yi in range(h[i]):\n            print(\"%s%s\" % ((\"ABC\"[i])*w[i], (\"ABC\"[q])*w[q]))\n        for yi in range(h[j]):\n            print(\"%s%s\" % ((\"ABC\"[j])*w[j], (\"ABC\"[q])*w[q]))\n        return True\n    elif wm == 1 and xw == x:\n        q = w.index(xw)\n        i, j = (q+1)%3, (q+2)%3\n        if xw != sum(h)-h[i] or w[q] != w[i] + w[j] or h[i]!=h[j]:\n            return False\n        print(x)\n        for yi in range(h[i]):\n            print(\"%s%s\" % ((\"ABC\"[i])*w[i], (\"ABC\"[j])*w[j]))\n        for yi in range(h[q]):\n            print((\"ABC\"[q])*w[q])\n        return True\n    elif wm == 3 and xw == sum(h):\n        q = w.index(xw)\n        i, j = (q+1)%3, (q+2)%3\n        print(x)\n        for yi in range(h[i]): print((\"ABC\"[i])*w[i])\n        for yi in range(h[j]): print((\"ABC\"[j])*w[j])\n        for yi in range(h[q]): print((\"ABC\"[q])*w[q])\n        return True\n    elif hm == 3 and xh == sum(w):\n        q = h.index(xh)\n        i, j = (q+1)%3, (q+2)%3\n        print(x)\n        for yi in range(h[i]):\n            print(\"%s%s%s\" % ((\"ABC\"[i])*w[i], (\"ABC\"[j])*w[j], (\"ABC\"[q])*w[q]))\n        return True\n    else:\n        return False\n\ndef rec(i, w, h):\n    if i == 3:\n        if print_if_possible(w, h):\n            return\n        return\n    rec(i+1, w, h)\n    w[i], h[i] = h[i], w[i]\n    rec(i+1, w, h)\n    w[i], h[i] = h[i], w[i]\n\nw, h = [0, 0, 0], [0, 0, 0]\nw[0], h[0], w[1], h[1], w[2], h[2] = [int(i) for i in input().split()]\nrec(0, w, h)\nprint(-1)", "def getprint(c1, c2, c3, maxi, ost, delta):\n    ans = str(maxi) + \"\\n\" + (c1 * maxi + \"\\n\") * ost\n    return ans + (c2 * delta + c3 * (maxi - delta) + \"\\n\") * (maxi - ost)\n\n\ndef solve():\n    a = list(map(int, input().split()))\n    if max(a) ** 2 != a[0] * a[1] + a[2] * a[3] + a[4] * a[5]:\n        return -1\n    maxi = max(a)\n    if maxi in a[:2] and maxi in a[2:4] and maxi in a[4:]:\n        return str(maxi) + \"\\n\" + (\"A\" * maxi + \"\\n\") * min(a[:2]) + (\"B\" * maxi + \"\\n\") * min(a[2:4]) + (\"C\" * maxi + \"\\n\") * min(a[4:])\n    ind = a.index(maxi)\n    ost = a[ind ^ 1]\n    if ind // 2 == 0 and maxi - ost in a[2:4] and maxi - ost in a[4:]:\n        return getprint(\"A\", \"B\", \"C\", maxi, ost, a[2] * a[3] // (maxi - ost))\n    elif ind // 2 == 1 and maxi - ost in a[:2] and maxi - ost in a[4:]:\n        return getprint(\"B\", \"A\", \"C\", maxi, ost, a[0] * a[1] // (maxi - ost))\n    elif ind // 2 == 2 and maxi - ost in a[:2] and maxi - ost in a[2:4]:\n        return getprint(\"C\", \"A\", \"B\", maxi, ost, a[0] * a[1] // (maxi - ost))\n    return -1\n\nprint(solve())\n", "def out(t, x1, y1, x2, y2, x3, y3, m):\n    if t == 1:\n        print(x1)\n        for i in range(y1):\n            for j in range(x1):\n                print(\"A\", end=\"\")\n            print()\n        for i in range(y2):\n            for j in range(x1):\n                print(\"B\", end=\"\")\n            print()\n        for i in range(y3):\n            for j in range(x1):\n                print(\"C\", end=\"\")\n            print()\n    else:\n        if m == 1:\n            print(x1)\n            for i in range(y1):\n                for j in range(x1):\n                    print(\"A\", end=\"\")\n                print()\n            for i in range(x1 - y1):\n                for j in range(x1):\n                    if x2 > j:\n                        print(\"B\", end=\"\")\n                    else:\n                        print(\"C\", end=\"\")\n                print()\n        elif m == 2:\n            print(x2)\n            for i in range(y2):\n                for j in range(x2):\n                    print(\"B\", end=\"\")\n                print()\n            for i in range(x2 - y2):\n                for j in range(x2):\n                    if x1 > j:\n                        print(\"A\", end=\"\")\n                    else:\n                        print(\"C\", end=\"\")\n                print()\n        else:\n            print(x3)\n            for i in range(y3):\n                for j in range(x3):\n                    print(\"C\", end=\"\")\n                print()\n            for i in range(x3 - y3):\n                for j in range(x3):\n                    if x1 > j:\n                        print(\"A\", end=\"\")\n                    else:\n                        print(\"B\", end=\"\")\n                print()\n\n\ndef check1(x1, y1, x2, y2, x3, y3):\n    a, b = max(x1, y1), min(x1, y1)\n    b += (y2 if x2 == a else x2) + (y3 if x3 == a else x3)\n    if a == b:\n        out(1, a, min(x1, y1), a, (y2 if x2 == a else x2), a, (y3 if x3 == a else x3), 1)\n    return a == b\n\n\ndef check2(x1, y1, x2, y2, x3, y3):\n    a, b = max(x1, y1), min(x1, y1)\n    bt = x2 + x3\n    if (bt == a) and (y2 == a - b) and (y3 == a - b):\n        out(2, a, b, x2, y2, x3, y3, 1)\n        return\n    bt = x2 + y3\n    if (bt == a) and (y2 == a - b) and (x3 == a - b):\n        out(2, a, b, x2, y2, y3, x3, 1)\n        return\n    bt = y2 + x3\n    if (bt == a) and (x2 == a - b) and (y3 == a - b):\n        out(2, a, b, y2, x2, x3, y3, 1)\n        return\n    bt = y2 + y3\n    if (bt == a) and (x2 == a - b) and (x3 == a - b):\n        out(2, a, b, y2, x2, y3, x3, 1)\n        return\n\n    a, b = max(x2, y2), min(x2, y2)\n    bt = x1 + x3\n    if (bt == a) and (y1 == a - b) and (y3 == a - b):\n        out(2, x1, y1, a, b, x3, y3, 2)\n        return\n    bt = x1 + y3\n    if (bt == a) and (y1 == a - b) and (x3 == a - b):\n        out(2, x1, y1, a, b, y3, x3, 2)\n        return\n    bt = y1 + x3\n    if (bt == a) and (x1 == a - b) and (y3 == a - b):\n        out(2, y1, x1, a, b, x3, y3, 2)\n        return\n    bt = y1 + y3\n    if (bt == a) and (x1 == a - b) and (x3 == a - b):\n        out(2, y1, x1, a, b, y3, x3, 2)\n        return\n\n    a, b = max(x3, y3), min(x3, y3)\n    bt = x2 + x1\n    if (bt == a) and (y2 == a - b) and (y1 == a - b):\n        out(2, x1, y1, x2, y2, a, b, 3)\n        return\n    bt = x2 + y1\n    if (bt == a) and (y2 == a - b) and (x1 == a - b):\n        out(2, y1, x1, x2, y2, a, b, 3)\n        return\n    bt = y2 + x1\n    if (bt == a) and (x2 == a - b) and (y1 == a - b):\n        out(2, x1, y1, y2, x2, a, b, 3)\n        return\n    bt = y2 + y1\n    if (bt == a) and (x2 == a - b) and (x1 == a - b):\n        out(2, y1, x1, y2, x2, a, b, 3)\n        return\n\n\nx1, y1, x2, y2, x3, y3 = [int(x) for x in input().split()]\nb = check1(x1, y1, x2, y2, x3, y3)\nif b:\n    return\nb = check2(x1, y1, x2, y2, x3, y3)\nif b:\n    return\nprint(-1)", "inp = input().split()\na = [int(inp[0]),int(inp[1])]\nb = [int(inp[2]),int(inp[3])]\nc = [int(inp[4]),int(inp[5])]\na.sort()\na.reverse()\na.append(\"A\")\nb.sort()\nb.reverse()\nb.append(\"B\")\nc.sort()\nc.reverse()\nc.append(\"C\")\nfirst = [a, b ,c]\nfirst.sort()\nfirst.reverse()\nsecond = [a, b, c]\nsecond.sort()\nsecond.reverse()\nthird = [a, b, c]\n#print(first)\n#print(second)\n\ndef swap(a):\n    temp = a[0]\n    a[0] = a[1]\n    a[1] = temp\n\ndef check_first(x):\n    #print(x)\n    fla = (x[0][0] == x[1][0] + x[2][0])\n    #print(x[0][0], \"==\", x[1][0], \"+\", x[2][0])\n    #print(fla)\n    flb = (x[1][1] == x[2][1] == (x[0][0] - x[0][1]))\n    #print(x[1][1], \"==\", x[2][1], \"==\", x[0][0] - x[0][1])\n    #print(flb)\n    return fla and flb\n\ndef check_second(x):\n    if (x[0][0] == x[1][0]) and (x[0][1] + x[1][1] == x[2][0] == x[0][0]):\n        return True\n    else:\n        return False\n\nflag = False\nind = 0\nres = -1\ns = \"\"\n\nwhile (not flag):\n    ind = 1\n    if check_first(first):\n        break\n    swap(first[1])\n    if check_first(first):\n        break\n    swap(first[2])\n    if check_first(first):\n        break\n    swap(first[1])\n    if check_first(first):\n        break\n    ind = 2\n    if check_second(second):\n        break\n    swap(second[2])\n    if check_second(second):\n        break\n    if (third[0][0] == third[1][0] == third[2][0]) and (third[0][0] == third[0][1] + third[1][1] + third[2][1]):\n        ind = 3\n        break\n    flag = True\n\nif flag:\n    print(-1)\nelif ind == 1:\n    print(first[0][0])\n    for i in range(first[0][1]):\n        print(first[0][2] * first[0][0])\n    for i in range(first[1][1]):\n        print(first[1][2]*first[1][0] + first[2][2] * first[2][0])\nelif ind == 2:\n    print(second[2][1])\n    for i in range(second[0][1]):\n        print(second[0][2]*second[0][0] + second[2][2]*second[2][0])\n    for i in range(second[1][1]):\n        print(second[1][2]*second[1][0] + second[2][2]*second[2][0])\n\nelif ind == 3:\n    print(third[0][0])\n    for i in range(third[0][1]):\n        print(third[0][2]*third[0][0])\n    for i in range(third[1][1]):\n        print(third[1][2]*third[0][0])\n    for i in range(third[2][1]):\n        print(third[2][2]*third[0][0])\n\n\n\n\n\n\n", "import sys\nx1,y1,x2,y2,x3,y3 = map(int, input().split())\n\na = (x1, y1)\nb = (x2, y2)\nc = (x3, y3)\n\n\nfor i in range(2):\n    for j in range(2):\n        for k in range(2):\n            if a[i] == b[j] == c[k] and a[1 - i] + b[1 - j] + c[1 - k] == a[i]:\n                print(a[i])\n                print((\"A\"*a[i] + \"\\n\" )*a[1-i], end=\"\")\n                print((\"B\"*b[j] + \"\\n\" )*b[1-j], end=\"\")\n                print((\"C\"*c[k] + \"\\n\" )*c[1-k], end=\"\")\n                \n               # print(i, j, k)\n                return\n\n                \n                \nr = max(max(a), max(b), max(c))\n\nxs = [a, b, c]\n\n\nfor i, t in enumerate(xs):\n    if r == max(t):\n        index = i\n        break\n\no = xs[index][:]\n\ns = o[1] if o[0] == r else o[0]\ndel xs[index]\n\nfor i in range(2):\n    for j in range(2):\n        if (xs[0][i]==xs[1][j] == r - s and xs[0][1-i] + xs[1][1 - j] == r):\n            print(r)\n            symb = chr(ord(\"A\") + index)\n            print((symb * r + \"\\n\") * s, end = \"\")\n            syms = [\"A\", \"B\", \"C\"]\n            syms.remove(symb)\n            print((syms[0] * xs[0][1-i] + syms[1] * xs[1][1-j] + \"\\n\") * (r-s), end=\"\")\n            return\n#print(r)\n# not possible, return - 1\n\n\nprint(-1)\n", "x1, y1, x2, y2, x3, y3 = [int(s) for s in input().split()]\n\ndef print_logos(top, bottom, h1, h2):\n    top_line = \"\"\n    if 'a' in top:\n        top_line += (x1 if top['a'] else y1) * \"A\"\n    if 'b' in top:\n        top_line += (x2 if top['b'] else y2) * \"B\"\n    if 'c' in top:\n        top_line += (x3 if top['c'] else y3) * \"C\"\n\n    print(len(top_line))\n\n    for i in range(h1):\n        print(top_line)\n\n    bottom_line = \"\"\n    if 'a' in bottom:\n        bottom_line += (x1 if bottom['a'] else y1) * \"A\"\n    if 'b' in bottom:\n        bottom_line += (x2 if bottom['b'] else y2) * \"B\"\n    if 'c' in bottom:\n        bottom_line += (x3 if bottom['c'] else y3) * \"C\"\n\n    for i in range(h2):\n        print(bottom_line)\n\ndone = False\n\nfor a in [True, False]: # flip logo 1\n    if done:\n        break\n    for b in [True, False]: # flip logo 2\n        if done: break\n\n        for c in [True, False]: # flip logo 3\n            # try 3 side-by-side\n            width  = (x1 if a else y1) + (x2 if b else y2) + (x3 if c else y3)\n            # all heights are correct\n            if width == (y1 if a else x1) and \\\n               width == (y2 if b else x2) and \\\n               width == (y3 if c else x3):\n                   # success!\n                   print_logos({'a': a, 'b': b, 'c': c}, {}, y1 if a else x1, 0)\n                   done = True\n                   break\n\n            # otherwise, try combinations [a, b] c, [a, c] b and [b, c] a\n\n            # [a, b], c\n            width = (x1 if a else y1) + (x2 if b else y2)\n            if width == (x3 if c else y3) and \\\n               (y1 if a else x1) == (y2 if b else x2) and \\\n               (y1 if a else x1) + (y3 if c else x3) == width:\n                   print_logos({'a': a, 'b': b}, {'c': c}, y1 if a else x1, y3 if c else x3)\n                   done = True\n                   break\n\n            # [a, c], b\n            width = (x1 if a else y1) + (x3 if c else y3)\n            if width == (x2 if b else y2) and \\\n               (y1 if a else x1) == (y3 if c else x3) and \\\n               (y1 if a else x1) + (y2 if b else x2) == width:\n                   print_logos({'a': a, 'c': c}, {'b': b}, y1 if a else x1, y2 if b else x2)\n                   done = True\n                   break\n\n            # [b, c], a\n            width = (x3 if c else y3) + (x2 if b else y2)\n            if width == (x1 if a else y1) and \\\n               (y3 if c else x3) == (y2 if b else x2) and \\\n               (y1 if a else x1) + (y3 if c else x3) == width:\n                   print_logos({'b': b, 'c': c}, {'a': a}, y2 if b else x2, y1 if a else x1)\n                   done = True\n                   break\n\nif not done:\n    print(-1)\n", "v=list(map(int,input().split()))\ndef funk(a):\n\tif ((a[0]==a[2]+a[4])and(a[1]+a[3]==a[0])and(a[3]==a[5])):\n\t\tprint(a[0])\n\t\tfor i in range(a[1]):\n\t\t\tprint('A'*a[0])\n\t\tfor i in range(a[3]):\n\t\t\tprint('B'*a[2]+'C'*a[4])\n\telif ((a[0]==a[2]==a[4])and(a[1]+a[3]+a[5]==a[0])):\n\t\tprint(a[0])\n\t\tfor i in range(a[1]):\n\t\t\tprint('A'*a[0])\n\t\tfor i in range(a[3]):\n\t\t\tprint('B'*a[2])\n\t\tfor i in range(a[5]):\n\t\t\tprint('C'*a[4])\n\telif ((a[0]+a[2]+a[4]==a[1])and(a[1]==a[3]==a[5])):\n\t\tprint(a[1])\n\t\tfor i in range(a[1]):\n\t\t\tprint('A'*a[0]+'B'*a[2]+'C'*a[4])\n\telif ((a[0]+a[2]==a[4])and(a[1]==a[3])and(a[1]+a[5]==a[4])):\n\t\tprint(a[4])\n\t\tfor i in range(a[1]):\n\t\t\tprint('A'*a[0]+'B'*a[2])\n\t\tfor i in range(a[5]):\n\t\t\tprint('C'*a[4])\n\telif ((a[0]+a[2]==a[1])and(a[2]==a[4])and(a[3]+a[5]==a[1])):\n\t\tprint(a[1])\n\t\tfor i in range(a[3]):\n\t\t\tprint('A'*a[0]+'B'*a[2])\n\t\tfor i in range(a[5]):\n\t\t\tprint('A'*a[0]+'C'*a[4])\n\telif ((a[0]+a[2]==a[3])and(a[0]==a[4])and(a[1]+a[5]==a[3])):\n\t\tprint(a[3])\n\t\tfor i in range(a[1]):\n\t\t\tprint('A'*a[0]+'B'*a[2])\n\t\tfor i in range(a[5]):\n\t\t\tprint('C'*a[4]+'B'*a[2])\n\telse:\n\t\t#~ print('-1')\n\t\treturn 0\n\treturn 1\ns=0\nfor i in range(2):\n\tv[0],v[1]=v[1],v[0]\n\tfor i1 in range(2):\n\t\tv[2],v[3]=v[3],v[2]\n\t\tfor i2 in range(2):\n\t\t\tv[4],v[5]=v[5],v[4]\n\t\t\tif s==0:\n\t\t\t\ts=funk(v)\n\t\t\tif s:break\nif s==0:\n\tprint('-1')", "x1, y1, x2, y2, x3, y3 = list(map(int, input().split()))\n\ndef solve(x1, y1, x2, y2, x3, y3):\n    n = max(x1, y1, x2, y2, x3, y3)\n    sum_area = x1 * y1 + x2 * y2 + x3 * y3\n    if sum_area != n * n:\n        return -1, None\n    if x1 < y1:\n        x1, y1 = y1, x1\n    if x2 < y2:\n        x2, y2 = y2, x2\n    if x3 < y3:\n        x3, y3 = y3, x3\n    if x1 == x2 == x3:\n        bil = ['A' * n for i in range(y1)]\n        bil.extend(['B' * n for i in range(y2)])\n        bil.extend(['C' * n for i in range(y3)])\n        return n, bil\n    xys = [(x1, y1, 'A'), (x2, y2, 'B'), (x3, y3, 'C')]\n    xys.sort(reverse = True)\n    x1, y1, C1 = xys[0]\n    x2, y2, C2 = xys[1]\n    x3, y3, C3 = xys[2]\n    if x2 == x1:\n        return -1, None\n    m = n - y1\n    if (x2 == m or y2 == m) and (x3 == m or y3 == m):\n        bil = [C1 * n for i in range(y1)]\n        w2 = x2 + y2 - m\n        w3 = x3 + y3 - m\n        bil.extend([C2 * w2 + C3 * w3 for i in range(m)])\n        return n, bil\n    return -1, None\n\nn, pattern = solve(x1, y1, x2, y2, x3, y3)\nif n == -1:\n    print(-1)\nelse:\n    print(n)\n    for row in pattern:\n        print(row)\n", "__author__ = 'User'\ndef f(arr, value, deep, vis):\n    nonlocal flag\n    if flag == True:\n        return\n    fl = False\n    #print(\"Num\")\n    pos = (0, 0)\n    for i in range(n):\n        for j in range(n):\n            #print(i, j, arr[i][j], end = \" \")\n            if arr[i][j] == 0:\n                pos = (i, j)\n                fl = True\n                break\n        if fl == True:\n            break\n    #print()    \n    #print(n, \"N\")    \n    #print(arr, \"AAAAAA\")\n    #print(pos, vis)\n    symbol = value[2]\n    for y, x in value[:-1]:\n        #print(y, x, \"YX\" + symbol)\n        tarr = arr[:]\n        y0, x0 = pos[0], pos[1]\n        if y0 < n and x0 < n and arr[y0][x0] == 0:\n            if x0 + x - 1 < n and y0 + y - 1 < n:\n                tr = True\n                for i in range(y0, y0 + y):\n                    for j in range(x0, x0 + x):\n                        if arr[i][j] != 0:\n                            tr = False\n                            break\n                        arr[i][j] = symbol\n                    if tr == False:\n                        break\n                if tr:\n                    \"\"\"print(tr)\n                    for i in range(n):\n                        print(*tarr[i])\n    \n                    print()\"\"\"                   \n                    if deep == 0:\n                        print(n)\n                        flag = True\n                        for i in range(n):\n                            print(*arr[i], sep = '')\n                        return\n                    for k in range(3):\n                        if vis[k] == 0:\n                            vis[k] = -1\n                            #print(tarr, val[k], deep - 1, vis)\n                            f(arr, val[k], deep - 1, vis)\n                    \"\"\"\n                    for i in range(n):\n                        print(*arr[i])  \n                    print()\n                    \"\"\"\n                tr = True\n                for i in range(y0, y0 + y):\n                    for j in range(x0, x0 + x):\n                        if arr[i][j] == symbol:\n                            arr[i][j] = 0\n                        else:\n                            tr = False\n                            break\n                    if tr == False:\n                        break\n\n\n\n\nx1, y1, x2, y2, x3, y3 = map(int, input().split())\nval = [[(x1, y1), (y1, x1), \"A\"], [(x2, y2) , (y2, x2), \"B\"], [(x3, y3) , (y3, x3), \"C\"]]\ns = x1 * y1 + x2 * y2 + x3 * y3\nflag = True\nmx = max(x1, x2, x3, y1, y2, y3)\nif round((s) ** (1/2)) == round((s) ** (1/2), 8):\n    n = int(s ** 0.5)\n    if n < mx:\n        flag = False\nelse:\n    flag = False\nif flag == True:\n    flag = False\n    arr = [n * [0] for i in range(n)]\n    for i in range(3):\n        deep = 3\n        vis = [0] * 3\n        vis[i] = -1\n        #print(n, \"N\")\n        f(arr, val[i], deep - 1, vis)\n    if flag == False:\n        print(-1)\nelse:\n    print(-1)", "from collections import namedtuple\nfrom itertools   import permutations\n\nRect = namedtuple(\"Rect\", \"h w c\")\n\ndef rotations(r):\n    yield r\n    yield Rect(r[1], r[0], r[2])\n\ndef main():\n    a, b, c, d, e, f = map(int, input().split())\n    a = Rect(a, b, 'A')\n    b = Rect(c, d, 'B')\n    c = Rect(e, f, 'C')\n    del d, e, f\n    for a0 in rotations(a):\n        for b0 in rotations(b):\n            for c0 in rotations(c):\n                for x, y, z in permutations((a0, b0, c0), 3):\n                    if x.w == y.w == z.w == x.h + y.h + z.h:\n                        # AAA\n                        # BBB\n                        # CCC\n                        print(x.w)\n                        for i in range(x.h):\n                            print(x.c * x.w)\n                        for i in range(y.h):\n                            print(y.c * y.w)\n                        for i in range(z.h):\n                            print(z.c * z.w)\n                        return\n                    elif x.w == y.w + z.w == x.h + y.h and y.h == z.h:\n                        # AAA\n                        # BBC\n                        # BBC\n                        print(x.w)\n                        for i in range(x.h):\n                            print(x.c * x.w)\n                        for i in range(y.h):\n                            print(y.c * y.w, end=\"\")\n                            print(z.c * z.w)\n                        return\n    print(-1)\n\nmain()\n", "x1, y1, x2, y2, x3, y3 = map(int, input().split())\nx1, y1 = max(x1, y1), min(x1, y1)\nx2, y2 = max(x2, y2), min(x2, y2)\nx3, y3 = max(x3, y3), min(x3, y3)\nx1c, y1c, x2c, y2c, x3c, y3c = x1, y1, x2, y2, x3, y3\nif x2 == max(x1, x2, x3) :\n    x1, y1, x2, y2 = x2, y2, x1, y1\nelif x3 == max(x1, x2, x3) :\n    x1, y1, x3, y3 = x3, y3, x1, y1\nif x1 == x1c and y1 == y1c and x2 == x2c and y2 == y2c :\n    s1 = 'A'\n    s2 = 'B'\n    s3 = 'C'\nelif x1 == x1c and y1 == y1c and x2 == x3c and y2 == y3c :\n    s1 = 'A'\n    s2 = 'C'\n    s3 = 'B'\nelif x1 == x2c and y1 == y2c and x2 == x1c and y2 == y1c :\n    s1 = 'B'\n    s2 = 'A'\n    s3 = 'C'\nelif x1 == x2c and y1 == y2c and x2 == x3c and y2 == y3c :\n    s1 = 'B'\n    s2 = 'C'\n    s3 = 'A'\nelif x1 == x3c and y1 == y3c and x2 == x1c and y2 == y1c :\n    s1 = 'C'\n    s2 = 'A'\n    s3 = 'B'\nelif x1 == x3c and y1 == y3c and x2 == x2c and y2 == y2c :\n    s1 = 'C'\n    s2 = 'B'\n    s3 = 'A'\nif x1 == x2 == x3 and y1 + y2 + y3 == x1 :\n    print(x1)\n    for i in range(x1) :\n        for j in range(x1) :\n            if i < y1 :\n                print(s1, end = '')\n            elif y1 <= i < y1 + y2 :\n                print(s2, end = '')\n            else :\n                print(s3, end = '')\n        print()\nelif x1 == y2 + x3 and x2 + y1 == y3 + y1 == x1 :\n    print(x1)\n    for i in range(x1) :\n        for j in range(x1) :\n            if i < y1 :\n                print(s1, end = '')\n            else :\n                if j < y2 :\n                    print(s2, end = '')\n                else :\n                    print(s3, end = '')                 \n        print()\nelif x1 == x2 + y3 and y2 + y1 == x3 + y1 == x1 :\n    print(x1)\n    for i in range(x1) :\n        for j in range(x1) :\n            if i < y1 :\n                print(s1, end = '')\n            else :\n                if j < x2 :\n                    print(s2, end = '')\n                else :\n                    print(s3, end = '')                 \n        print()\nelif x1 == x2 + x3 and y2 + y1 == y3 + y1 == x1 :\n    print(x1)\n    for i in range(x1) :\n        for j in range(x1) :\n            if i < y1 :\n                print(s1, end = '')\n            else :\n                if j < x2 :\n                    print(s2, end = '')\n                else :\n                    print(s3, end = '')                 \n        print()\nelif x1 == y2 + y3 and x2 + y1 == x3 + y1 == x1 :\n    print(x1)\n    for i in range(x1) :\n        for j in range(x1) :\n            if i < y1 :\n                print(s1, end = '')\n            else :\n                if j < y2 :\n                    print(s2, end = '')\n                else :\n                    print(s3, end = '')                 \n        print()\nelse :\n    print(-1)\n\n", "x1, y1, x2, y2, x3, y3 = map(int, input().split())\nx1, y1 = max(x1, y1), min(x1, y1)\nx2, y2 = max(x2, y2), min(x2, y2)\nx3, y3 = max(x3, y3), min(x3, y3)\nx1c, y1c, x2c, y2c, x3c, y3c = x1, y1, x2, y2, x3, y3\nif x2 == max(x1, x2, x3) :\n\tx1, y1, x2, y2 = x2, y2, x1, y1\nelif x3 == max(x1, x2, x3) :\n\tx1, y1, x3, y3 = x3, y3, x1, y1\nif x1 == x1c and y1 == y1c and x2 == x2c and y2 == y2c :\n\ts1 = 'A'\n\ts2 = 'B'\n\ts3 = 'C'\nelif x1 == x1c and y1 == y1c and x2 == x3c and y2 == y3c :\n\ts1 = 'A'\n\ts2 = 'C'\n\ts3 = 'B'\nelif x1 == x2c and y1 == y2c and x2 == x1c and y2 == y1c :\n\ts1 = 'B'\n\ts2 = 'A'\n\ts3 = 'C'\nelif x1 == x2c and y1 == y2c and x2 == x3c and y2 == y3c :\n\ts1 = 'B'\n\ts2 = 'C'\n\ts3 = 'A'\nelif x1 == x3c and y1 == y3c and x2 == x1c and y2 == y1c :\n\ts1 = 'C'\n\ts2 = 'A'\n\ts3 = 'B'\nelif x1 == x3c and y1 == y3c and x2 == x2c and y2 == y2c :\n\ts1 = 'C'\n\ts2 = 'B'\n\ts3 = 'A'\nif x1 == x2 == x3 and y1 + y2 + y3 == x1 :\n\tprint(x1)\n\tfor i in range(x1) :\n\t\tfor j in range(x1) :\n\t\t\tif i < y1 :\n\t\t\t\tprint(s1, end = '')\n\t\t\telif y1 <= i < y1 + y2 :\n\t\t\t\tprint(s2, end = '')\n\t\t\telse :\n\t\t\t\tprint(s3, end = '')\n\t\tprint()\nelif x1 == y2 + x3 and x2 + y1 == y3 + y1 == x1 :\n\tprint(x1)\n\tfor i in range(x1) :\n\t\tfor j in range(x1) :\n\t\t\tif i < y1 :\n\t\t\t\tprint(s1, end = '')\n\t\t\telse :\n\t\t\t\tif j < y2 :\n\t\t\t\t\tprint(s2, end = '')\n\t\t\t\telse :\n\t\t\t\t\tprint(s3, end = '')\t\t\t\t\t\n\t\tprint()\nelif x1 == x2 + y3 and y2 + y1 == x3 + y1 == x1 :\n\tprint(x1)\n\tfor i in range(x1) :\n\t\tfor j in range(x1) :\n\t\t\tif i < y1 :\n\t\t\t\tprint(s1, end = '')\n\t\t\telse :\n\t\t\t\tif j < x2 :\n\t\t\t\t\tprint(s2, end = '')\n\t\t\t\telse :\n\t\t\t\t\tprint(s3, end = '')\t\t\t\t\t\n\t\tprint()\nelif x1 == x2 + x3 and y2 + y1 == y3 + y1 == x1 :\n\tprint(x1)\n\tfor i in range(x1) :\n\t\tfor j in range(x1) :\n\t\t\tif i < y1 :\n\t\t\t\tprint(s1, end = '')\n\t\t\telse :\n\t\t\t\tif j < x2 :\n\t\t\t\t\tprint(s2, end = '')\n\t\t\t\telse :\n\t\t\t\t\tprint(s3, end = '')\t\t\t\t\t\n\t\tprint()\nelif x1 == y2 + y3 and x2 + y1 == x3 + y1 == x1 :\n\tprint(x1)\n\tfor i in range(x1) :\n\t\tfor j in range(x1) :\n\t\t\tif i < y1 :\n\t\t\t\tprint(s1, end = '')\n\t\t\telse :\n\t\t\t\tif j < y2 :\n\t\t\t\t\tprint(s2, end = '')\n\t\t\t\telse :\n\t\t\t\t\tprint(s3, end = '')\t\t\t\t\t\n\t\tprint()\nelse :\n\tprint(-1)\n", "\"\"\"\nCodeforces Round #322 (Div. 2)\n\nProblem 581 D. Three Logos\n\n@author yamaton\n@date 2015-10-06\n\"\"\"\n\nimport itertools as it\nimport functools\nimport operator\nimport collections\nimport math\nimport sys\nimport bisect\n\n\ndef solve(x1, y1, x2, y2, x3, y3):\n    x1, y1 = min(x1, y1), max(x1, y1)\n    x2, y2 = min(x2, y2), max(x2, y2)\n    x3, y3 = min(x3, y3), max(x3, y3)\n    pairs = [(x1, y1), (x2, y2), (x3, y3)]\n\n    area = sum(x * y for (x, y) in pairs)\n    side = math.floor(math.sqrt(area))\n    if side*side != area:\n        return None\n\n    count = [y1, y2, y3].count(side)\n\n    # case1: stacking\n    if count == 3:\n        if x1 + x2 + x3 == side:\n            As = 'A' * side\n            Bs = 'B' * side\n            Cs = 'C' * side\n            return ([As for _ in range(x1)]\n                  + [Bs for _ in range(x2)]\n                  + [Cs for _ in range(x3)])\n\n    # case2: spliting\n    result = []\n    abc = 'ABC'\n    if count == 1:\n        i, x, y = next((i, x, y) for i, (x, y) in enumerate(pairs) if y == side)\n        result.append((abc[i], (x, y)))\n\n        length = side - x\n        tmp = 0\n        for k, (x, y) in enumerate(pairs):\n            if k == i:\n                continue\n            if x == length:\n                tmp += y\n                result.append((abc[k], (x, y)))\n            elif y == length:\n                tmp += x\n                result.append((abc[k], (y, x)))\n            else:\n                return None\n\n        if tmp == side:\n            c, (x0, y0) = result[0]\n            c1, (x1, y1) = result[1]\n            c2, (x2, y2) = result[2]\n\n            top = [c*side for _ in range(x0)]\n            bottom = [c1*y1 + c2*y2 for _ in range(x1)]\n            return top + bottom\n\n    return None\n\n\ndef main():\n    xys = [int(i) for i in input().strip().split()]\n    assert len(xys) == 6\n    result = solve(*xys)\n\n    if result is None:\n        print(-1)\n    else:\n        print(len(result))\n        for line in result:\n            print(line)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "__author__ = 'Admin'\ndef f(n):\n    return max(n[0], n[1])\nt = True\nx1, y1, x2, y2, x3, y3 = map(int, input().split())\nm = [x1, y1, x2, y2, x3, y3]\nm1 = [[x1, y1, 'A'], [x2, y2, 'B'], [x3, y3, 'C']]\nm1.sort(key = f)\nmaxi = max(m1[-1][0], m1[-1][1])\nmini = min(m1[-1][0], m1[-1][1])\nmaxj = max(m1[-2][1], m1[-2][0])\nminj = min(m1[-2][1], m1[-2][0])\nmaxk = max(m1[0][1], m1[0][0])\nmink = min(m1[0][1], m1[0][0])\ns = m1[-1][2]\ns1 = m1[-2][2]\ns2 = m1[0][2]\nmatr = [[0] * maxi for i in range(maxi)]\nfor i in range(mini):\n    for j in range(maxi):\n        matr[i][j] = s\nif maxj == maxi and mini + minj <= maxi:\n    for i in range(mini, minj + mini):\n        for j in range(maxj):\n            matr[i][j] = s1\n    if maxk == maxi and mini + minj + mink == maxi:\n        for i in range(minj + mini, mink + minj + mini):\n            for j in range(maxk):\n                matr[i][j] = s2\n    else:\n        t = False\nelse:\n    if maxj == maxi - mini:\n        for i in range(mini, mini + maxj):\n            for j in range(minj):\n                matr[i][j] = s1\n        if maxk == maxj and mink == maxi - minj:\n            for i in range(mini, mini + maxk):\n                for j in range(minj, minj + mink):\n                    matr[i][j] = s2\n        else:\n            t = False\n    elif minj == maxi - mini:\n        for i in range(mini, mini + minj):\n            for j in range(maxj):\n                matr[i][j] = s1\n        if mink == minj and maxk == maxi - maxj:\n            for i in range(mini, mini + mink):\n                for j in range(maxj, maxj + maxk):\n                    matr[i][j] = s2\n        elif maxk == minj and mink == maxi - maxj:\n            for i in range(mini, mini + maxk):\n                for j in range(maxj, maxj + mink):\n                    matr[i][j] = s2\n        else:\n            t = False\n    else:\n        t = False\nif t == True:\n    print(maxi)\n    for i in range(maxi):\n        print(*matr[i], sep = '')\nelse:\n    print(-1)", "import itertools\n\na, b, c = [[0 for _ in range(2)] for _ in range(3)]\na[0], a[1], b[0], b[1], c[0], c[1] = [int(i) for i in input().split()]\n\nif max(a) == max(b) == max(c) == min(a)+min(b)+min(c):\n    print(max(a))\n    for _ in range(min(a)):\n        print(\"\".join([\"A\" for __ in range(max(a))]))\n    for _ in range(min(b)):\n        print(\"\".join([\"B\" for __ in range(max(a))]))\n    for _ in range(min(c)):\n        print(\"\".join([\"C\" for __ in range(max(a))]))\nelse:\n    fl = False\n    for i in itertools.permutations(a):\n        for j in itertools.permutations(b):\n            for k in itertools.permutations(c):\n                for l in itertools.permutations([(\"A\", i), (\"B\", j), (\"C\", k)]):\n                    if l[0][1][1] == l[0][1][0]+l[1][1][0] and l[0][1][1] == l[1][1][1]+l[2][1][1] and l[1][1][0]==l[2][1][0]:\n                        if fl:\n                            break\n                        print(l[0][1][1])\n                        for _ in range(l[0][1][0]):\n                            print(\"\".join([l[0][0] for __ in range(l[0][1][1])]))\n                        for _ in range(l[1][1][0]):\n                            print(\"\".join([l[1][0] for __ in range(l[1][1][1])] + [l[2][0] for __ in range(l[2][1][1])]))\n                        fl = True\n    if not fl:\n        print(-1)\n"]