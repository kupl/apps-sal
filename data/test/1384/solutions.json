["n = int(input())\ns = list(map(int, input().split()))\n\nans = 0\nx0 = 0\nx1 = 0\nfor i in range(n):\n    if s[i] == 1:\n        x1 = max(x0, x1) + 1\n    else:\n        x0 = x0 + 1\n    ans = max(x0, x1)\nprint(ans)\n", "length = int(input())\narray = list(map(int, input().split()))\n\ncount = []\ntotal = 0\n\nfor k in range(length):\n    if array[length - 1 - k] == 1:\n        total += 1\n    count.append(total)\ncount.reverse()\n\ntotal = 0\nmaximum = 0\nfor k in range(length):\n    if array[k] == 0:\n        total += 1\n\n    maximum = max(maximum, total + count[k])\n\nprint(maximum)\n", "n = int(input())\na = [int(i) for i in input().split()]\nans = sum(a)\nfor i in range(len(a) - 1, - 1, -1):\n    ans = min(ans, (len(a) - i - sum(a[i:])) + sum(a[:i]))\nprint(len(a) - ans)\n", "n = int(input())\ns = list(map(int, input().split()))\nmax_games = 0\nfor i in range(n+1):\n    max_games = max(max_games, s[:i].count(0) + s[i:].count(1))\nprint(max_games)\n", "n = int(input())\narr = list(map(int, input().split()))\npref1 = [0]\nfor i in arr:\n    pref1.append(pref1[-1] + i)\nsuf0 = [0]\nfor i in arr[::-1]:\n    suf0.append(suf0[-1] + (i + 1) % 2)\nans = []\nfor i in range(n + 1):\n    ans.append(n - (suf0[::-1][i] + pref1[i]))\nprint(max(ans))", "n =  int(input())\ndata = list(map(int, input().split()))\ndata2 = [0] * n\ndata2[0] = data[0]\nfor i in range(1, n):\n    if data[i]:\n        data2[i] = data2[i - 1] + 1\n    else:\n        data2[i] = data2[i - 1]\ndata2 = [0] + data2\nma = -2\nfor i in range(n + 1):\n    ma = max(ma, data2[-1] - data2[i] + i - data2[i])\nprint(ma)", "\n\ndef solve(s):\n    '''\n    >>> solve([1, 1, 0, 1])\n    3\n    >>> solve([0, 1, 0, 0, 1, 0])\n    4\n    >>> solve([0])\n    1\n    '''\n    zeroes = accum(s, 0)\n    ones = list(reversed(accum(reversed(s), 1)))\n    return max(x + y for x, y in zip(zeroes, ones))\n\n\ndef accum(lst, value):\n    counts = [0]\n    for el in lst:\n        if el == value:\n            counts.append(counts[-1] + 1)\n        else:\n            counts.append(counts[-1])\n    return counts\n\n\ndef main():\n    n = input()\n    s = list(map(int, input().split()))\n    print(solve(s))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def read_ints():\n\treturn [int(i) for i in input().split()]\n\nn = int(input())\ns = read_ints()\nto_rem = n if sum(s) else 0\nfor i in range(n):\n\tto_rem = min(to_rem, s[:i].count(1) + (s[i:].count(0) if sum(s[i:]) else 0))\n\nprint(n - to_rem)", "n = int(input())\ngames = list(map(int, input().split()))\n\nstrike = [0] * n\n\nfor i in range(n):\n\tstrike[i] = 1\n\tfor j in range(i):\n\t\tif games[j] <= games[i]:\n\t\t\tstrike[i] = max(strike[i], strike[j] + 1)\n\n# print(strike)\nprint(max(strike))\n", "n = int(input())\nnums = list(map(int, input().split()))\n\nright = [0 for i in range(n)]\nfor i in range(n - 1, -1, -1):\n    right[i] = nums[i]\n    if i < n - 1:\n        right[i] += right[i + 1]\n        \nleft = [0 for i in range(n)]\nfor i in range(n):\n    left[i] = nums[i]\n    if i > 0:\n        left[i] += left[i - 1]\n        \nres = 0\nfor i in range(-1, n):\n    count = 0\n    if i >= 0:\n        count = i + 1 - left[i]\n    if i + 1 < n:\n        count += right[i + 1]\n    res = max(res, count)\n\nprint(res)", "n = int(input())\n\ndef it():\n  A = list(map(int,input().split()))\n  A.reverse()\n\n  c1 = 0\n  r0 = len(A) - sum(A)\n  yield r0\n\n  for a in A:\n    if a == 1:\n      c1 += 1\n      yield c1 + r0\n    else:\n      r0 -= 1\n\nprint(max(it()))\n\n\n", "\n\nINF = 10 ** 9 + 7\n\n\ndef cutoff(games, pos):\n    leave = 0\n\n    for i, g in enumerate(games):\n        if i < pos:\n            if g == 0:\n                leave += 1\n        else:\n            if g == 1:\n                leave += 1\n\n    return leave\n\n\ndef main():\n    n = int(input())\n\n    games = [int(x) for x in input().split()]\n\n    max_leave = -INF\n\n    for i in range(n+1):\n        max_leave = max(max_leave, cutoff(games, i))\n\n    print(max_leave)\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "n = int(input())\na = [int(i) for i in input().split()]\nanswer = [0] * n\nanswer[0] = 1\n\nfor i in range(1, n):\n    if a[i] == 1:\n        answer[i] = max(answer) + 1\n    else:\n        temp_max = 0\n        for j in range(i):\n            if a[j] == 0 and answer[j] > temp_max:\n                temp_max = answer[j]\n        answer[i] = temp_max + 1\n        \nprint(max(answer))", "import math\n\nn = int(input())\na = list(map(int, input().split()))\n\nz2 = a.count(0)\no2 = n - z2\nz1 = 0\no1 = 0\n\nres = z1 + o2\ni = 0\nwhile i < n:\n\tz2 -= (1-a[i])\n\tz1 += (1-a[i])\n\to2 -= (a[i])\n\to1 += (a[i])\n\tres = max(res, z1+o2)\n\ti+=1\nprint(res)", "a=int(input())\nb=[int(i) for i in input().split()]\nc=b.copy()\nans=0\nfor i in range(a):\n    if b[i]==1:\n        ans+=(b[i:].count(1))\n        break\n    ans+=1\nans1=0\nfor i in range(a):\n    if b[i]==1:\n        ans1=max(ans1,b[:i].count(0)+b[i:a].count(1))\nprint(max(ans,ans1,b.count(0),b.count(1)))\n\n        \n", "n = int(input())\na = [int(i) for i in input().split()]\nans = 0\nfor i in range(a.count(0) + 1):\n    zc = 0\n    for j in range(n):\n        if a[j] == 0:\n            zc += 1\n        if zc == i:\n            break\n    ans = max(ans, i + a[j:].count(1))\nprint(ans)", "import sys\nfrom collections import Counter\nn = int(input())\na = list(map(int, input().split()))\nm = 0\nd = Counter(a)\nfor i in range(d[0]+1):\n    j = 0\n    k = 0\n    while k != i:\n        if a[j] == 0:\n            k += 1\n        j += 1\n    while j < n:\n        if a[j] == 1:\n            k += 1\n        j += 1\n    m = max(m,k)\nprint(m)\n", "from sys import stdout\nfrom random import randint \nfrom math import *\nimport re\n\n\nn = int(input())\ns = input().replace(' ', '')\n\nones = s.count(\"1\")\nzeros = 0\nmx = 0\nfor c in s:\n    zeros += c == '0'\n    if zeros + ones > mx: mx = zeros + ones\n    ones -= c == '1'\n\nprint(mx)\n", "n = int(input())\na = list(map(int, input().split()))\nl = [a[i+1:].count(0)+a[:i].count(1) for i in range(n)]\nprint(n - min(l))", "n = int(input())\na = list(map(int, input().split()))\np = [0] * n\np[0]= a[0]\nfor i in range(1, n):\n    p[i] = p[i - 1] + a[i]\nans = min(n, n - p[n - 1])\nfor i in range(n):\n    l = p[i]\n    r = (n - i - 1) - (p[n - 1] - p[i])\n    ans = min(ans, l + r)\nprint(n - ans)\n", "n = int(input())\nval = list(map(int, input().split()))\nk = 0\nfor i in range(n + 1):\n    k = max(k, i - sum(val[:i]) + sum(val[i:]))\nprint(k)", "n = int(input())\n\nl = list(map(int, input().split()))\n\nmax_games = [1 for i in range(n)]\n\nif n > 1:\n    if l[1] == 0:\n        if l[0] == 1:\n            max_games[1] = 1\n        else:\n            max_games[1] = 2\n    else:\n        max_games[1] = 2\n\nt_max = max(max_games)\n\nif n > 2:\n    for i in range(2, n):\n        if l[i] == 0:\n            j = i - 1\n            while (j >= 0):\n                if l[j] == 0:\n                    max_games[i] = max_games[j] + 1\n                    t_max = max([t_max, max_games[i]])\n                    break\n                j -= 1\n        else:\n            max_games[i] = t_max + 1\n            t_max += 1\n\n\n\nprint(t_max)\n", "n = int(input())\narr = list(map(int, input().split()))\n\nans = arr.count(0)\nfor i in range(1, n + 1):\n    one = 0\n    ind = -1\n    j = n - 1\n    for j in range(n -1, -1, -1):\n        if one == i:\n            ind = j\n            break\n        if arr[j] == 1:\n            one += 1\n    else:\n        if one == i:\n            ind = j\n        else:\n            break\n    ans = max(ans, i + arr[:ind + 1].count(0))\nprint(ans)\n", "KoKoKo = int\nkudaxKudax = input\nkukareku = max\nkokokokoko = print\nkudkudax = range\n\n\n\n\nkokoko = KoKoKo(kudaxKudax())\nko = [KoKoKo(x) for x in kudaxKudax().split()]\nKO = KOKOKO = 0\nfor kok in kudkudax(kokoko - 1, -1, -1):\n    KO += ko[kok]\n    KOKOKO = kukareku(KOKOKO, KO + ko[:kok + 1].count(0))\nkokokokoko(KOKOKO)", "n = int(input())\np = list(map(int, input().split()))\nind_z = []\nind_o = []\nfor i in range(n):\n    if p[i] == 0:\n        ind_z.append(i)\n    else:\n        ind_o.append(i)\nz = [0] * len(ind_z)\no = [0] * len(ind_o)\nfor i in range(len(z)):\n    z[i] = i + 1\n    for j in range(ind_z[i], n):\n        if p[j] == 1:\n            z[i] += 1\nfor i in range(len(o)):\n    o[i] = len(o) - i \n    for j in range(ind_o[i] - 1, -1, -1):\n        if p[j] == 0:\n            o[i] += 1 \nz = [0] + z\no = [0] + o\nprint(max(max(o), max(z)))"]