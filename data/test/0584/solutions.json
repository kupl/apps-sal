["n = int(input())\nlen_out, count_in = 0, 0\nbalance, cur = 0, 0\nfor c in input():\n    if not (('a' <= c <= 'z') or ('A' <= c <= 'Z')) and cur:\n        if balance:\n            count_in += 1\n        else:\n            len_out = max(len_out, cur)\n        cur = 0\n    if c == '(':\n        balance += 1\n    elif c == ')':\n        balance -= 1\n    elif ('a' <= c <= 'z') or ('A' <= c <= 'Z'):\n        cur += 1\nif cur:\n    len_out = max(len_out, cur)\nprint(len_out, count_in)\n", "import re\n\na = input()\na = input()\n\norg = a\n\ninclam = re.findall(\"\\(.*?\\)\", a)\n\nfor i in inclam:\n    a = a.replace(i, \"_\")\n\nwords = a.split('_')\nc = max(list(map(len, words)))\n\ncount = 0\nfor i in inclam:\n    count += len(list([_f for _f in i.replace(\"(\", \"_\").replace(\")\", \"_\").split(\"_\") if _f]))\n\nprint(c, count)\n", "n = int(input())\ns = input()\ns = s.replace('(', '_(_')\ns = s.replace(')', '_)_')\n\nword = s.split('_')\n\ncntI = 0\nmx = 0\ninside = False\n\nfor w in word:\n    if w == '':\n        continue\n    # print(w)\n    if w == '(':\n        inside = True\n        continue\n    if w == ')':\n        inside = False\n        continue\n\n    if inside:\n        cntI += 1\n    else:\n        mx = max(mx, len(w))\n\nprint(mx, cntI)\n", "input()\ns = input()\n\nw, maxp = 0, 0\ncur = 0\ninp = False\nfor c in s:\n    if c.isalpha():\n        cur += 1\n    elif cur > 0:\n        if inp:\n            w += 1\n        cur = 0\n    if c == \"(\":\n        inp = True\n    if c == \")\":\n        inp = False\n    if not inp and cur > maxp:\n        maxp = cur\nprint(maxp, w)\n", "n = int(input())\ns = input().split('(')\nt = []\nfor i in range(len(s)):\n    t += s[i].split(')')\na = t[1::2]\nb = t[::2]\na1, b1 = 0, 0\nfor i in b:\n    for j in i.split('_'):\n        a1 = max(a1, len(j))\nfor i in a:\n    for j in i.split('_'):\n        if j != \"\":\n            b1 += 1\nprint(a1, b1)", "n = int(input())\ns = input()\n\ninp = False\nst, A, B = 0, 0, 0\n\nfor c in s:\n    if c == '_':\n        if st:\n            if inp:\n                B += 1\n            else:\n                A = max(A, st)\n            st = 0\n    elif c == '(':\n        assert(not inp)\n        if st:\n            A = max(A, st)\n            st = 0\n        inp = True\n    elif c == ')':\n        assert(inp)\n        if st:\n            B += 1\n            st = 0\n        inp = False\n    else:\n        st += 1\n\nassert(not inp)\nif st:\n    A = max(A, st)\n    st = 0\n\nprint(A, B)\n\n", "n = int(input())\ns = input()\nswb = ''\nopened = 0\nsib = ''\nfor sym in s:\n    if sym == '(':\n        opened += 1\n    if sym == ')':\n        opened -= 1\n    if opened == 0:\n        if sym != '(' and sym != ')':\n            swb += sym\n        if sym == ')':\n            swb += '_'\n    if opened > 0:\n        if sym != ')' and sym != '(':\n            sib += sym\n        if sym == '(':\n            sib += '_'\nt = swb.split('_')\nprint(max([len(elem) for elem in t]), end = ' ')\nt = sib.split('_')\nt1 = []\nfor lem in t:\n    if lem != '':\n        t1.append(lem)\nprint(len(t1))", "n = int(input())\ns = str(input())\n\ns = s.replace(\"(\", \" ( \")\ns = s.replace(\")\", \" ) \")\ns = s.replace(\"_\", \" \")\nanswer = s.split()\n\na = 0\nb = 0\nop = False\nfor element in answer:\n    if element == \"(\":\n        op = True\n    elif element == \")\":\n        op = False\n    else:\n        if op:\n            b += 1\n        else:\n            a = max(len(element), a)\n\nprint(a, b)", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**10\nmod = 10**9 + 7\n\ndef f():\n    n = int(input())\n    s = input()\n    f = False\n    r = 0\n    r2 = 0\n    sc = ''\n    for c in s:\n        if c == '(':\n            for ss in sc.split('_'):\n                r = max(r, len(ss))\n            sc = ''\n        elif c == ')':\n            r2 += len([_ for _ in sc.split('_') if len(_) > 0])\n            sc = ''\n        else:\n            sc += c\n    for ss in sc.split('_'):\n        r = max(r, len(ss))\n    return '{0} {1}'.format(r,r2)\n\nprint(f())\n", "n = int(input())\ns = input()\n\n\nout = []\ninn = []\np = ''\n\nfor x in s:\n    if(x=='('):\n        out.append(p)\n        p = ''\n    elif(x==')'):\n        inn.append(p)\n        p = ''\n    else:\n        p += x\n\nout.append(p)\n\noouut = []\nfor x in out:\n    for y in x.split('_'):\n        if(len(y)):\n            oouut.append(y)\niiinn = []\nfor x in inn:\n    for y in x.split('_'):\n        if(len(y)):\n            iiinn.append(y)\n\nmax = 0\nfor k in oouut:\n    if(len(k)>max):\n        max = len(k)\n\nprint(max, len(iiinn))", "n = input()\ns = input() + '_'\n\ninbrackets = False\nl = 0\nc = 0\n\nlength = len(s)\n\ncur = 0\nfor i in range(length):\n    if s[i] == '_':\n        if not inbrackets:\n            l = max(l, cur)\n        else:\n            if cur > 0:\n                c += 1\n        cur = 0\n    elif s[i] == '(':\n        if not inbrackets:\n            l = max(l, cur)\n        else:\n            if cur > 0:\n                c += 1\n        inbrackets = True\n        cur = 0\n    elif s[i] == ')':\n        if not inbrackets:\n            l = max(l, cur)\n        else:\n            if cur > 0:\n                c += 1\n        inbrackets = False\n        cur = 0\n    else:\n        cur += 1\n\nprint(l, c)\n\n", "#!/usr/bin/env python3\n\nn = int(input())\ns = input()\n\np, w = False, False\nx, y, z = 0, 0, 0\n\nfor c in s:\n  if c == '_':\n    w = False\n    x = 0\n  elif c == '(':\n    p = True\n    w = False\n    x = 0\n  elif c == ')':\n    p = False\n    w = False\n    x = 0\n  else:\n    x += 1\n    if not p and x > y:\n      y = x\n    if p and not w:\n      z += 1\n    w = True\n\nprint(y, z)", "n = int(input())\ns1 = input().rstrip()\ns = (')'.join(s1.split('('))).split(')')\nfl = 0\nans = 0\nk = 0\nfor i in range(len(s)):\n    if i % 2 == 0:\n        for j in s[i].split('_'):\n            if len(j) > ans:\n                ans = len(j)\n    else:\n        for j in s[i].split('_'):\n            if len(j) > 0:\n                k += 1\nprint(ans, k)", "import sys, math\nn = int(input())\ns = input()\nfl = 1\nsk = 0\na = [0, 0]\ngg = ['(', '_', ')']\ni = 0\nwhile i < n:\n    #print(i)\n    if s[i] not in gg:\n        y = 0\n        while (i < n and (s[i] not in gg)):\n            y += 1\n            i += 1\n        if sk == 0:\n            a[0] = max(a[0], y)\n        else:\n            a[1] += 1\n        if i >= n:\n            break\n    elif s[i] == '(':\n        sk = 1\n        i += 1\n    elif s[i] == ')':\n        sk = 0\n        i += 1\n    else:\n        i += 1\nprint(*a)\n        \n        \n    \n\n", "input()\ns = input()\n\nans = [ \"\", \"\" ]\ncur = 0\nfor c in s:\n    if c == '(':\n        ans[cur]+='_'\n        cur+=1\n    elif c == ')':\n        ans[cur]+='_'\n        cur-=1\n    else:\n        ans[cur] += c\nfor i in range(2):\n    ans[i] = ans[i].split('_')\n\n# print(ans[0])\n# print(ans[1])\n\nprint(max([0] + [len(w) for w in ans[0]]), sum(1 if w else 0 for w in ans[1]))\n", "n=int(input())\ns=input().strip()\nlw=0\nlw1=0\ncw=0\nbf=0\nwf=0\nfor i in s:\n\tif i=='(':\n\t\tif lw1>lw:\n\t\t\tlw=lw1\n\t\tlw1=0\n\t\tbf=1\n\t\twf=0\n\telif i==')':\n\t\tlw1=0\n\t\tif wf and bf:\n\t\t\tcw+=1\n\t\tbf=0\n\t\twf=0\n\telif i=='_':\n\t\tif lw1>lw:\n\t\t\tlw=lw1\n\t\tlw1=0\n\t\tif wf and bf:\n\t\t\tcw+=1\n\t\twf=0\n\telse:\n\t\tif not bf:\n\t\t\tlw1+=1\n\t\twf=1\nif lw1>lw:\n\tlw=lw1\nprint(lw,cw)\n", "n = int(input())\na = [s.split(')')[::-1] for s in input().split('(')]\nx, y = 0, 0\nfor i in range(len(a)):\n    if len(a[i]) == 2:\n        for s in a[i][1].split('_'):\n            if len(s) > 0:\n                y += 1\n    for s in a[i][0].split('_'):\n        x = max(x, len(s))\nprint(x, y)\n    \n        \n", "n = int(input())\ns = input()\n\nsesgsin = []\ntoksout = []\n\ninparens = []\noutparens = []\n\nfor i,c in enumerate(s):\n    if c == '(':\n        inparens.append(i)\n    elif c == ')':\n        outparens.append(i)\n\nnuminparen = 0\n\nfor i,o in zip(inparens, outparens):\n    numinparen += sum(1 for t in s[i+1:o].split('_') if t)\n\nstarts = [-1] + outparens\nends = inparens + [len(s)]\nmaxlen = 0\nfor st,e in zip(starts, ends):\n    maxlen = max(maxlen, max(len(t) for t in s[st+1:e].split('_')))\n\nprint(maxlen, numinparen)\n", "import re\n\n\ndef count_words(s: str, balance: int):\n    if balance == 0:\n        return 0\n    s = list([x for x in s.split('_') if x != ''])\n    return len(s)\n\ndef get_len(s: str, balance: int):\n    if balance == 1:\n        return 0\n    s = list([x for x in s.split('_') if x != ''])\n    if len(s) == 0:\n        return 0\n    return max(list(map(len, s)))\n\ndef main():\n    n = int(input())\n    text = input()\n    balance = 0\n    text = re.split(r'[()]', text)\n    q = 0\n    l = 0\n    for i in text:\n        q += count_words(i, balance)\n        l = max(l, get_len(i, balance))\n        if balance == 0:\n            balance += 1\n        else:\n            balance -= 1\n    print(l, q)\n\nmain()\n", "import re\nl = input()\nS = input()\na = [word for e in re.split(r\"\\([^()]*\\)\",S) for word in re.split(r\"_+\", e)]\nb = [word for e in re.findall(r\"\\([^()]*\\)\", S) for word in re.split(r\"_+\", e[1:-1]) if word]\nprint(str(len(max(a, key=len))) + \" \" + str(len(b)))\n", "input()\ni = input()\nl1 = []\nl2 = []\nwhile len(i.split('(')) > 1:\n    l1.append(i.split('(')[0])\n    i = '('.join(i.split('(')[1:])\n    l2.append(i.split(')')[0])\n    i = ')'.join(i.split(')')[1:])\nl1.append(i)\n\nl1 = ('_'.join(l1)).split('_')\nl2 = ('_'.join(l2)).split('_')\n\nfor i in range(len(l2)-1,-1,-1):\n    if l2[i] == '':\n        l2.pop(i)\n\nprint(max(list(map(len,l1+['']))),len(l2))\n", "input()\ns=input()\n\nf=False\na=[]\nfor c in s:\n    if c=='(':\n        f=True\n    if f==False:\n        a.append(c)\n    if c==')':\n        f=False\n        a.append('_')\na=''.join(a)\nb=[len(s) for s in a.split('_') if s!='']+[0]\nc=sorted(b)[-1]\nal=len(b)-1\nd=s.replace('_',' ').replace('(',' ').replace(')',' ')\nd=d.split()\nprint(c,len(d)-al,end=' ')\n", "n = int(input())\nk = input().strip() + '_'\nans1 = 0\nans2 = 0\ncnt1 = 0\ncnt2 = 0\n_in = 0\np = '_'\nfor i in k:\n    if _in:\n        if i == ')':\n            _in = 0\n        if ((i == '_' or i == ')') and (p != '_' and p != '(')):\n            ans2 += 1\n        p = i\n    else:\n        if (i == '('):\n            if (p != '_' and p != ')'):\n                ans1 = max(ans1, cnt1)\n            cnt1 = 0\n            _in = 1\n        elif (i == '_' and p != '_' and p != ')'):\n            ans1 = max(ans1, cnt1)\n            cnt1 = 0\n        elif (i != '_'):\n            cnt1 += 1\n        p = i\n\nprint(ans1, ans2)\n\n", "def B():\n    bra = False\n    braWord = False\n    nIn = 0\n    worOut = [0] * 256\n    nOut = 0\n\n    n = int(input())\n    str = list(input())\n    for i in range(n):\n        if not bra:\n            if str[i] == \"_\":\n                nOut += 1\n            elif str[i] == \"(\":\n                nOut += 1\n                bra = True\n            else:\n                worOut[nOut] += 1\n        else:\n            if str[i] == \"_\":\n                if braWord:\n                    nIn += 1\n                    braWord = False\n            elif str[i] == \")\":\n                if braWord:\n                    nIn += 1\n                braWord = False\n                bra = False\n            else:\n                braWord = True\n\n    print(max(worOut), nIn)\n\nB()"]