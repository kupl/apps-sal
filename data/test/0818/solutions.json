["import re\nimport itertools\nfrom collections import Counter\n\nclass Task:\n    n = 0\n    answer = \"\"\n\t\n    def getData(self):\n        self.n = int(input())\n\t\n    def solve(self):\n        n = self.n\n        if n < 3:\n            self.answer = \"-1\"\n            return\n        if n == 3:\n            self.answer = \"210\"\n            return\n        tenRemainders = [1, 3, 2, 6, 4, 5]\n        for x in range(0, 100):\n            if (tenRemainders[(n - 1) % 6] + x * 10) % 7 == 0 and \\\n                    (1 + x // 10 + x % 10) % 3 == 0:\n                self.answer = '1' + '0' * (n - 4)\n                self.answer += '0' + str(x) if (x < 10) else str(x)\n                self.answer += '0'\n                return\n\n    def printAnswer(self):\n        print(self.answer)\n\ntask = Task();\ntask.getData();\ntask.solve();\ntask.printAnswer();\n", "n=int(input())\nk=True\nif(n<3):\n    print(-1)\n    k=False\nif(k):\n    x=10**(n-1)\n\n    while(x%210!=0):\n        x+=1\n\n    print(x)\n", "n=int(input())-1\nif n<2:print(-1)\nelse:\n    z=10**n\n    print(210+z-z%210)\n", "n = int(input())\nb = 2*3*5*7\n\na = b * (10**(n - 1) // b + 1)\n\nif a >= 10**n:\n    print(-1)\nelse:\n    print(a)", "#Dasmesh Singh\nimport math\nn=int(input())\ns=0\nif n<3:\n    print (-1)\nelif n==3:\n    print (210)\nelse:\n    s=10**(n-1)\n    while 1:\n        if s%2==0 and s%3==0 and s%5==0 and s%7==0:\n            print (s)\n            break\n        else:\n            s+=1", "n = int(input()) - 1\nk = 10 ** n\nm = 210 - k % 210\nprint(k + m if m < 9 * k else -1)", "n = int(input()) - 1\nprint(10 ** n + 210 - 10 * pow(10, n - 1, 21) if n > 1 else -1)", "n = int(input()) - 1\nif n < 2: print(-1)\nelif n == 2: print(210)\nelse:\n    k = str(210 - 10 * pow(10, n - 1, 21))\n    print('1' + '0' * (n - len(k)) + k)", "NumLength = int(input())\ntens = 100\n\nif NumLength <= 2:\n    print(\"-1\")\nelif NumLength == 3:\n    print(\"210\")\nelse:\n    tens = tens * pow(10, (NumLength - 3))\n    tens = tens + 210 - (tens % 210)\n    print(tens)", "n = int(input())\nif n < 3:\n\tprint(-1)\nelif n == 3:\n\tprint(210)\nelse:\n\tx = 7-[1, 3, 2, 6, 4, 5][(n-1)%6]\n\tif x%2 == 1:\n\t\tx += 7\n\twhile (x+1)%3 != 0 or x%5 != 0:\n\t\tx += 14\n\tprint(10**(n-1)+x)\n", "n=int(input())\nif n==1 or n==2:\n    print(-1)\nelif n==3:\n    print(210)\nelse:\n    a=(10**(n-1))\n    if a%210==0:\n        print(a)\n    else:\n        print(((a//210)+1)*210)\n    \n", "n = int(input())\nprint(-1 if n < 3 else 10 ** (n - 1) // 210 * 210 + 210)", "\nx=int(input())\nif x in [1,2]:\n   print(-1)\nelif x==3:\n   print(210)\nelse:\n   print('1'+'0'*(x-4+3-len(str(210-pow(10,x-1,210))))+str(210-pow(10,x-1,210)))\n", "n=int(input())\nif n<3:\n    print(-1)\nelse:\n    print(10**(n-1) + 210 - (10**(n-1))%210)\n", "n = int(input())\n\nif (n < 3):\n    print(-1)\n    return\n\ncur = 10 ** (n - 1)\n\nans = 2 * 3 * 5 * 7\n\nnex = cur//ans\n\nprint(ans * (nex + 1))\n", "from fractions import gcd\nfrom random import randint\n\n\ndef __starting_point():\n    n = int(input())\n    if n < 3:\n        print(-1)\n        return\n    res = (210 -(10**(n-1) % 210)) + 10**(n-1);\n    print(res)\n__starting_point()", "n = int(input())\nif n < 3:\n    print(-1)\nelse:\n    t = 10**(n-1)\n    print(t+(210-t%210))\n", "n = int(input())\nif n < 3:\n    print(-1)\nelse:\n    t = 10**(n-1)\n    print(t+210-t%210)\n", "n=int(input())\n\nif n<3:\n    print(-1)\nelse:\n    k=int(pow(10,n-1))\n    l=k+210-(k%210)\n    print(l)\n", "n = int(input());\nti = 1;\n\nif(n<=2):\n    print(-1);\n    return;\n\nn-=2;\nti = 10**n;\n\nif(ti%21):\n    ti//=21;\n    ti+=1;\n    ti*=21;\nti*=10;\nprint(ti);", "n = int(input())\nif n<3: print(-1)\nelse:\n\tx=int('1'+'0'*(n-1))\n\tx=x+(210-x%210)\n\tprint(x)", "n = int(input())\nif n < 3:\n\tprint(-1)\nelse :\n\tprint(((10**(n-1)-1)//210 + 1)*210)", "'''input\n3\n'''\nn = int(input())\nif n < 3:\n\tprint(-1)\nelse:\n\tprint(((10**(n-1))//210+1)*210)", "'''input\n99988\n'''\nn = int(input())\nif n < 3:\n\tprint(-1)\nelse:\n\tprint(((10**(n-1))//210+1)*210)"]