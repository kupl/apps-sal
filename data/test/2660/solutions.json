["Q = int(input())\nqs = [input().split() for i in range(Q)]\n\nimport heapq\nclass Heapq:\n    def __init__(self, arr, desc=False):\n        if desc:\n            arr = [-a for a in arr]\n        self.sign = -1 if desc else 1\n        self.hq = arr\n        heapq.heapify(self.hq)\n\n    def pop(self):\n        return heapq.heappop(self.hq) * self.sign\n\n    def push(self, a):\n        heapq.heappush(self.hq, a * self.sign)\n\n    def top(self):\n        return self.hq[0] * self.sign\n\n    def size(self):\n        return len(self.hq)\n\nlq = Heapq([], True)\nrq = Heapq([], False)\n\nofs = 0\nfor q in qs:\n    if q[0] == '2':\n        print(lq.top(), ofs)\n        continue\n    _,a,b, = q\n    a,b = int(a),int(b)\n    ofs += b\n    lq.push(a)\n    rq.push(a)\n    if lq.top() > rq.top():\n        l,r = lq.pop(), rq.pop()\n        ofs += abs(l-r)\n        lq.push(r)\n        rq.push(l)", "from heapq import *\nl = list()\nr = list()\nq = int(input())\nsb = 0\nsr = 0\nsl = 0\nf = 0\nfor _ in range(q):\n  t = list(map(int, input().split()))\n  if t[0] == 1:\n    f ^= 1\n    _, a, b = t\n    sb += b\n    if f:\n      c = heappushpop(r, a)\n      sr += a - c\n      heappush(l, -c)\n      sl += c\n    else:\n      c = -heappushpop(l, -a)\n      sl += a - c\n      heappush(r, c)\n      sr += c   \n  else:\n    print(-l[0], l[0]*(len(r)-len(l)) + sr - sl + sb)", "import heapq\n\n\ndef main():\n    Q = int(input())\n    query_list = [list(map(int, input().split(' '))) for _ in range(Q)]\n    # f\u306e\u6700\u5c0f\u3092\u4e0e\u3048\u308bx\u306e\u8a08\u7b97\u7528\n    que_left, que_right = [], []  # \u6700\u5927\u30d2\u30fc\u30d7\u3068\u6700\u5c0f\u30d2\u30fc\u30d7\n    # f\u306e\u6700\u5c0f\u5024\u306e\u8a08\u7b97\u7528\n    sum_a_cost = 0\n    sum_b = 0\n    for query in query_list:\n        if query[0] == 1:\n            a, b = query[1], query[2]\n            # f\u306e\u66f4\u65b0\n            if len(que_right) - len(que_left) == 1:\n                sum_a_cost += abs(a - que_right[0])\n            elif 0 < len(que_left) == len(que_right):\n                if a > que_right[0]:\n                    sum_a_cost += a - que_right[0]\n                elif a < - que_left[0]:\n                    sum_a_cost += - que_left[0] - a\n            sum_b += b\n            # x\u306e\u66f4\u65b0\n            if len(que_right) == 0 or a >= que_right[0]:\n                heapq.heappush(que_right, a)\n            else:\n                # \u6700\u5927\u30d2\u30fc\u30d7\u306b\u3059\u308b\u305f\u3081\u7b26\u53f7\u53cd\u8ee2\n                heapq.heappush(que_left, - a)\n            # \u30d2\u30fc\u30d7\u306e\u30b5\u30a4\u30ba\u5dee\u304c0 or 1\u306b\u306a\u308b\u3088\u3046\u8abf\u6574\n            if len(que_right) - len(que_left) == - 1:\n                heapq.heappush(que_right, - heapq.heappop(que_left))\n            elif len(que_right) - len(que_left) == 2:\n                heapq.heappush(que_left, - heapq.heappop(que_right))\n        else:\n            x = que_right[0] if len(que_right) - len(que_left) == 1 else (- que_left[0])\n            f = sum_a_cost + sum_b\n            print('{} {}'.format(x, f))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from heapq import heappop,heappush\nl,r=[],[]\nans=0\nfor _ in range(int(input())):\n\ta=list(map(int,input().split()))\n\tif a[0]==1:\n\t\t_,ia,ib=a\n\t\theappush(l,-ia)\n\t\theappush(r,ia)\n\t\tll=heappop(l)\n\t\trr=heappop(r)\n\t\theappush(l,-rr)\n\t\theappush(r,-ll)\n\t\tans+=ib+abs(ll+rr)\n\telse:print(-l[0],ans)", "from heapq import heappop, heappush\nQ = int(input())\nmaxh = []\nminh = []\nsum1 = sum2 = b = med = 0\nfor i in range(Q):\n  q = list(map(int, input().split()))\n  if q[0]==1:\n    b += q[2]\n    if len(maxh)==0 or q[1]<-maxh[0]:\n      heappush(maxh, -q[1])\n      sum1 += q[1]\n      if len(maxh)>len(minh)+1:\n        t = -heappop(maxh)\n        heappush(minh, t)\n        sum1 -= t\n        sum2 += t\n    else:\n      heappush(minh, q[1])\n      sum2 += q[1]\n      if len(maxh)<len(minh):\n        t = heappop(minh)\n        heappush(maxh, -t)\n        sum1 += t\n        sum2 -= t\n    med = -maxh[0]\n  else:\n    ans = len(maxh)*med-sum1+sum2-len(minh)*med+b\n    print(med, ans)", "import heapq\n\nq = int(input())\n\nnchange = 0\nming, maxg = [], []\nheapq.heapify(ming)\nheapq.heapify(maxg)\na = 0\nb = 0\nfor i in range(q):\n    qi = input()\n    if qi[0] == '1':\n        _, ai, bi = map(int, qi.split())\n        b += bi\n        nchange += 1\n        if nchange % 2 == 1:\n            if nchange == 1:\n                x = ai\n                continue\n            Smax = -heapq.heappop(ming)\n            Dmin = heapq.heappop(maxg)\n            if Smax <= ai and ai <= Dmin:\n                heapq.heappush(ming, -Smax)\n                heapq.heappush(maxg, Dmin)\n                x = ai\n            elif ai < Smax:\n                heapq.heappush(ming, -ai)\n                heapq.heappush(maxg, Dmin)\n                x = Smax\n                a += Smax - ai\n            else:\n                heapq.heappush(ming, -Smax)\n                heapq.heappush(maxg, ai)\n                x = Dmin\n                a += ai - Dmin\n        else:\n            heapq.heappush(ming, -min(x, ai))\n            heapq.heappush(maxg, max(x, ai))\n            a += abs(x - ai)\n            x = -heapq.heappop(ming)\n            heapq.heappush(ming, -x)\n    else:\n        print(x, a+b)", "from heapq import *\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\ndij=[(1,0),(-1,0),(0,1),(0,-1)]\n\ndef main():\n    sa = sb = 0\n    hp1 = []\n    hp2 = []\n    m = None\n    for _ in range(II()):\n        ab=input().split()\n        if ab[0]==\"1\":\n            a,b=int(ab[1]),int(ab[2])\n            sb+=b\n            heappush(hp1,-a)\n            heappush(hp2,a)\n            while -hp1[0]>hp2[0]:\n                heappush(hp1,-heappop(hp2))\n                heappush(hp2,-heappop(hp1))\n            if m==None:\n                m=a\n                continue\n            if -hp1[0]>m:\n                d=-hp1[0]-m\n                sa+=(len(hp1)-1)//2*d-(len(hp2)+1)//2*d\n            if -hp1[0]<m:\n                d=hp1[0]+m\n                sa+=-(len(hp1))//2*d+(len(hp2))//2*d\n            sa += abs(m - a)\n            m=-hp1[0]\n        else:\n            print(m,sa+sb)\n\nmain()", "from heapq import*\nL,R=[],[]\nB=t=0\nQ,*E=open(0)\nfor e in E:\n  if' 'in e:_,a,b=map(int,e.split());t^=1;a*=2*t-1;c=heappushpop([L,R][t],a);heappush([R,L][t],-c);B+=b+a-c-c\n  else:print(-L[0],B-L[0]*t)", "import heapq\n\nclass heap():\n    def __init__(self):\n        self.heap = []\n        self.asum = 0\n\nclass solve():\n    def __init__(self):\n        self.lower = heap()\n        self.upper = heap()\n        self.bsum = 0\n        self.amed = 0\n    \n    def update(self,a,b):\n        self.bsum += b\n        if a > self.amed:\n            self.__add(self.upper, a)\n        else:\n            self.__add(self.lower,-a)\n            \n        if len(self.upper.heap)>len(self.lower.heap):\n            a = self.__del(self.upper)\n            self.__add(self.lower, -a)\n        elif len(self.lower.heap) > len(self.upper.heap) + 1:\n            a = self.__del(self.lower)\n            self.__add(self.upper, -a)\n        \n        self.amed = -self.lower.heap[0]\n        \n    def get_min(self):\n        x = self.amed\n        fx = (x * len(self.lower.heap) + self.lower.asum) + (self.upper.asum - x*len(self.upper.heap))\n        fx += self.bsum\n        print(x,fx)\n            \n    def __add(self,heap, a):\n        heapq.heappush(heap.heap,a)\n        heap.asum += a\n    \n    def __del(self, heap):\n        a = heapq.heappop(heap.heap)\n        heap.asum -= a\n        return a\n\nfx = solve()\n    \nQ = int(input())\nfor _ in range(Q):\n    q = input()\n    if q[0]==\"2\":\n        fx.get_min()\n    else:\n        _,a,b = map(int,q.split())\n        fx.update(a,b)", "from heapq import heapify, heappush, heappop\nimport sys\ninput = sys.stdin.readline\n\nQ = int(input())\nquerys = [tuple(map(int, input().split())) for _ in range(Q)]\n\nanss = []\nPQL, PQR = [], []\nsumL = sumR = 0\nnumL = numR = 0\nsumB = 0\nfor query in querys:\n    if query[0] == 1:  # \u66f4\u65b0\n        a, b = query[1:]\n        sumB += b\n        if numL == 0:\n            heappush(PQL, -a)\n            sumL += a\n            numL += 1\n        elif numL == numR:\n            if a <= -PQL[0]:\n                heappush(PQL, -a)\n                sumL += a\n                numL += 1\n            else:\n                heappush(PQR, a)\n                c = heappop(PQR)\n                sumR += a-c\n                heappush(PQL, -c)\n                sumL += c\n                numL += 1\n        else:\n            if a < -PQL[0]:\n                heappush(PQL, -a)\n                c = -heappop(PQL)\n                sumL += a-c\n                heappush(PQR, c)\n                sumR += c\n                numR += 1\n            else:\n                heappush(PQR, a)\n                sumR += a\n                numR += 1\n\n    else:  # \u6c42\u5024\n        x = -PQL[0]\n        fx = numL*x - sumL + sumR - numR*x + sumB\n        anss.append((x, fx))\n\nprint(('\\n'.join([str(x[0])+' '+str(x[1]) for x in anss])))\n", "from heapq import*\nL,R=[],[]\nB=t=0\nQ,*E=open(0)\nfor e in E:\n\tif' 'in e:_,a,b=map(int,e.split());t=1-t;a*=2*t-1;c=heappushpop([L,R][t],a);heappush([R,L][t],-c);B+=b+a-c-c\n\telse:print(-L[0],B-L[0]*t)", "from heapq import*\nL,R=[],[]\nB=t=0\nQ,*E=open(0)\nfor e in E:\n  if' 'in e:_,a,b=map(int,e.split());t^=1;a*=2*t-1;c=heappushpop([L,R][t],a);heappush([R,L][t],-c);B+=b+a-c-c\n  else:print(-L[0],B-L[0]*t)", "import heapq\n\nq = int(input())\ninf = 10000000000\nleft = [inf]\nright = [inf]\nminval = 0\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        _, a, b = query\n        if a < -left[0]:\n            v = -heapq.heappop(left)\n            heapq.heappush(right, v)\n            heapq.heappush(left, -a)\n            heapq.heappush(left, -a)\n            minval += abs(v - a) + b\n        elif a > right[0]:\n            v = heapq.heappop(right)\n            heapq.heappush(left, -v)\n            heapq.heappush(right, a)\n            heapq.heappush(right, a)\n            minval += abs(v - a) + b\n        else:\n            heapq.heappush(left, -a)\n            heapq.heappush(right, a)\n            minval += b\n    else:\n        print(-left[0], minval)", "import heapq\nQ = int(input())\n\n# \u4e2d\u592e\u5024\u306e\u5de6\u5074\u306e\u5024\u3001\u53f3\u5074\u306e\u5024\u3092\u7ba1\u7406\u3059\u308b\n# heapq\u3068\u3059\u308b\u3002right\u306f\u6700\u5c0f\u304c\u8208\u5473\u3042\u308b\u304c\u3001left\u306f\u6700\u5927\u306a\u306e\u3067\u3001-1\u3092\u304b\u3051\u3066\u6271\u3046\nleft, right = [], []\n# \u4e21\u65b9\u306eSUM\u3082\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u6bce\u56deSUM\u3057\u3066\u305f\u3089\u9593\u306b\u5408\u308f\u3093\nLsum, Rsum = 0,0\nLcnt, Rcnt = 0,0\nB = 0\nfor _ in range(Q):\n  q = list(map(int, input().split()))\n  if len(q) == 1:\n    # 2\n    # heapq\u3063\u3066Peak\u3067\u304d\u306a\u3044\u306e\u30fb\u30fb\u30fb\uff1f\n    l = (-1) * heapq.heappop(left)\n    heapq.heappush(left,(-1)*l)\n    # (l-l1) + (l-l2) + ... + (l-l) + (r-l) + ... + (r1 - l)\n    print(l, Rsum//2 - Lsum//2 + B)\n    #print(left,right, Lsum, Rsum)\n  else:\n    # 1\n    _,a,b = q\n    B += b\n    # \u307e\u305a\u53cc\u65b9\u306ba\u3092\u7a81\u3063\u8fbc\u3080\n    heapq.heappush(left,(-1)*a)\n    heapq.heappush(right,a)\n    Lsum += a\n    Lcnt += 1\n    Rsum += a\n    Rcnt += 1\n    # left\u306e\u6700\u5927\u5024\u3068\u3001right\u306e\u6700\u5c0f\u5024\u306e\u95a2\u4fc2\u304c\u5d29\u308c\u3066\u3044\u305f\u3089\u3001\u4ea4\u63db\u3059\u308b\n    l = (-1) * heapq.heappop(left)\n    r = heapq.heappop(right)\n    if l>=r:\n      Lsum = Lsum - l + r\n      Rsum = Rsum - r + l\n      l,r = r,l\n    heapq.heappush(left,(-1)*l)\n    heapq.heappush(right,r)", "import heapq\nQ = int(input())\n\nA_left, A_right = [], []\nA_left_sum, A_right_sum = 0, 0\nheapq.heapify(A_left)\nheapq.heapify(A_right)\n\nB_sum = 0\nfor _ in range(Q):\n    query = list(map(int,input().split()))\n\n    if query[0] == 1:\n        now = query[1]\n        B_sum += query[2]\n\n        l, r = len(A_left), len(A_right)\n        if l <= r:\n            heapq.heappush(A_right, now)\n            A_right_sum += now\n\n            out = heapq.heappop(A_right)\n            A_right_sum -= out\n\n            heapq.heappush(A_left, -out)\n            A_left_sum += out\n        else:\n            heapq.heappush(A_left, -now)\n            A_left_sum += now\n\n            out = -heapq.heappop(A_left)\n            A_left_sum -= out\n\n            heapq.heappush(A_right, out)\n            A_right_sum += out\n    else:\n        m = -A_left[0]\n        ans = len(A_left) * m - A_left_sum - len(A_right) * m + A_right_sum + B_sum\n        print((\"{0} {1}\".format(m,ans)))\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue May 28 22:22:21 2019\n\n@author: Yamazaki Kenichi\n\"\"\"\nimport heapq\n\nQ = int(input())\nQ2 = [input() for i in range(Q)]\n\nans = []\nAl,Ar = [-(-(10**9+1))],[10**9+1]\nd, a, b = list(map(int,Q2[0].split()))\nheapq.heappush(Al,-a)\nB = b\n\nfor i in range(1,Q):\n    if Q2[i][0] == '1':\n#        intput\n        d, a, b = list(map(int,Q2[i].split()))\n        if len(Al) == len(Ar):\n            if a < Ar[0]:\n                heapq.heappush(Al,-a)\n            else:\n                heapq.heappush(Ar,a)\n                heapq.heappush(Al,-(heapq.heappop(Ar)))\n            C = abs(a - (-Al[0]))\n        else:\n            C = abs(a - (-Al[0]))\n            if a < Ar[0]:\n                heapq.heappush(Al,-a)\n                heapq.heappush(Ar,-(heapq.heappop(Al)))\n            else:\n                heapq.heappush(Ar,a)\n        B += (b + C)\n#        print(Al,Ar,a,B,b)\n    else:\n#        output\n        ans.append([(-Al[0]),B])\n\nfor c in ans:\n    print((' '.join(map(str,c))))\n\n", "import heapq\n\nq = int(input())\n\nminheap = [] # right\nmaxheap = [] # left\nheapq.heapify(minheap)\nheapq.heapify(maxheap)\n\ns = 0\nm = 0\n\nfor _ in range(0, q):\n    token = input().split()\n    if len(token) > 1:\n        a = int(token[1])\n        b = int(token[2])\n        s += b\n        heapq.heappush(minheap, a)\n        heapq.heappush(maxheap, -a)\n        if -maxheap[0] > minheap[0]:\n            maxv = -heapq.heappop(maxheap)\n            minv = heapq.heappop(minheap)\n            m += abs(maxv - minv)\n            heapq.heappush(minheap, maxv)\n            heapq.heappush(maxheap, -minv)\n    else:\n        print(('{} {}'.format(-maxheap[0], s + m)))\n", "from heapq import heappop,heappush\nimport sys\ninput=sys.stdin.readline\n\nq=int(input())\nquery=[list(map(int,input().split())) for _ in range(q)]\ninf=10**12\nleft=[inf]\nleft_sum=0\nright=[inf]\nright_sum=0\n\ncnt=0\nb=0\nfor i in range(q):\n    if query[i][0]==1:\n        a=query[i][1]\n        b+=query[i][2]\n        if cnt==0:\n            d=right[0]\n            if a>d:\n                heappush(left,-heappop(right))\n                heappush(right,a)\n                right_sum+=a-d\n                left_sum-=d\n            else:\n                heappush(left,-a)\n                left_sum-=a\n            cnt=1\n        else:\n            c=-left[0]\n            if a<c:\n                heappush(right,-heappop(left))\n                heappush(left,-a)\n                right_sum+=c\n                left_sum+=c-a\n            else:\n                heappush(right,a)\n                right_sum+=a\n            cnt=0\n    else:\n        x=-left[0]\n        if cnt==0:\n            print(x,b+right_sum+left_sum)\n        else:\n            print(x,b+x+right_sum+left_sum)", "# python 3.4.3\nimport sys\ninput = sys.stdin.readline\n\n# -------------------------------------------------------------\n# library\n# -------------------------------------------------------------\n\n\n\n# -------------------------------------------------------------\n# main\n# -------------------------------------------------------------\nimport heapq\n\nL,R = [10**15],[10**15]\nlenL,lenR = 1,1\nsumL,sumR = 0,0\ny = 0\n\nQ = int(input())\nfor i in range(Q):\n    query = list(map(int,input().split()))\n    if len(query) == 1:\n        x = -L[0]\n        f = sumR - sumL + y\n        if lenL != lenR:\n            f += x\n        print((\"{} {}\".format(x, f)))\n    else:\n        q,a,b = query\n        y += b\n        if lenL > lenR:\n            sumL += a\n            a = -heapq.heappushpop(L, -a)\n            sumL -= a\n            heapq.heappush(R, a)\n            sumR += a\n            lenR += 1\n        else:\n            sumR += a\n            a = heapq.heappushpop(R, a)\n            sumR -= a\n            heapq.heappush(L, -a)\n            sumL += a\n            lenL += 1\n\n\n", "from heapq import*\nL,R=[],[]\nB=t=0\nQ,*E=open(0)\nfor e in E:\n\tif' 'in e:_,a,b=map(int,e.split());t^=1;a*=2*t-1;c=heappushpop([L,R][t],a);heappush([R,L][t],-c);B+=b+a-c-c\n\telse:print(-L[0],B-L[0]*t)", "import sys\nstdin = sys.stdin\n\nsys.setrecursionlimit(10 ** 7)\n\ndef li(): return map(int, stdin.readline().split())\ndef li_(): return map(lambda x: int(x) - 1, stdin.readline().split())\ndef lf(): return map(float, stdin.readline().split())\ndef ls(): return stdin.readline().split()\ndef ns(): return stdin.readline().rstrip()\ndef lc(): return list(ns())\ndef ni(): return int(stdin.readline())\ndef nf(): return float(stdin.readline())\n\nfrom heapq import heappop, heappush\n\nbigger = []\nsmaller = []\n\ndef modify(bigger, smaller, a: int, b: int, mid: int, ans: int):\n    if not bigger and not smaller:\n        heappush(smaller, -a)\n        mid = a\n    elif not bigger:\n        if a < -smaller[0]:\n            heappush(bigger, -heappop(smaller))\n            heappush(smaller, -a)\n\n            ans += abs(-smaller[0] - mid)\n\n        else:\n            heappush(bigger, a)\n    else:\n        if a < -smaller[0]:\n            tmp = -heappop(smaller)\n            heappush(smaller, -a)\n            if (len(smaller) + len(bigger)) % 2:\n                ans += abs(-smaller[0] - mid)\n        elif a > bigger[0]:\n            tmp = heappop(bigger)\n            heappush(bigger, a)\n        else:\n            tmp = a\n\n        if len(smaller) == len(bigger):\n            heappush(smaller, -tmp)\n        else:\n            heappush(bigger, tmp)\n\n    ans += (abs(-smaller[0] - a) + b)\n    mid = -smaller[0]\n\n    return mid, ans\n\nq = ni()\nmid = ans = 0\n\nfor _ in range(q):\n    # judge process\n    query = ns()\n    if query.startswith(\"1\"):\n        _, a, b = map(int, query.split())\n        mid, ans = modify(bigger, smaller, a, b, mid, ans)\n\n    else:\n        print(mid, ans)", "import heapq\n\nq = int(input())\nl = []\nr = []\nans = 0\n\nfor i in range(q):\n    a = list(map(int,input().split()))\n    if a[0] == 1:\n        ans += a[2]\n        if l == []:\n            heapq.heappush(r,a[1])\n            heapq.heappush(l,-a[1])\n        else: \n            ll = -heapq.heappop(l)\n            rr = heapq.heappop(r)\n            if ll <= a[1] <= rr:\n                heapq.heappush(r,rr)\n                heapq.heappush(l,-ll) \n                heapq.heappush(r,a[1])\n                heapq.heappush(l,-a[1]) \n\n            elif ll > a[1]:\n                ans += ll-a[1]\n                heapq.heappush(r,rr)\n                heapq.heappush(r,ll) \n                heapq.heappush(l,-a[1])\n                heapq.heappush(l,-a[1]) \n            else:\n                ans += a[1] -rr\n                heapq.heappush(l,-rr)\n                heapq.heappush(l,-ll) \n                heapq.heappush(r,a[1])\n                heapq.heappush(r,a[1]) \n        \n    else:\n        a = heapq.heappop(l)\n        print(-a,ans)\n        heapq.heappush(l,a)", "import heapq\n\nq = int(input())\nans = []\nmini = 0\nleft, right = [], []\ncnt = 0\nmid = None\nfor _ in range(q):\n    qi = input()\n    if qi == '2':\n        if cnt%2 == 0:\n            ans.append([-left[0], mini])\n        else:\n            ans.append([mid, mini])\n    else:\n        kind, a, b = map(int, qi.split())\n        if cnt%2 == 1:\n            mini += abs(mid-a) + b\n            heapq.heappush(left, -min(mid, a))\n            heapq.heappush(right, max(mid, a))\n            mid = None\n        else:\n            if cnt == 0:\n                mid = a\n                mini = b\n                cnt += 1\n                continue\n            l = -heapq.heappop(left)\n            r = heapq.heappop(right)\n            if a <= l:\n                mini += l-a + b\n                heapq.heappush(left, -a)\n                heapq.heappush(right, r)\n                mid = l\n            elif a <= r:\n                mini += b\n                heapq.heappush(left, -l)\n                heapq.heappush(right, r)\n                mid = a\n            else:\n                mini += a-r + b\n                heapq.heappush(left, -l)\n                heapq.heappush(right, a)\n                mid = r\n        cnt += 1\n\nfor i, j in ans:\n    print(i, j)", "from heapq import heapify, heappush, heappop\nimport sys\ninput = sys.stdin.readline\n\nQ = int(input())\nss = input()\nt, A, B = list(map(int, ss.split()))\nPQ1, PQ2 = [-A], [A]\nfr = to = A\nminF = 0\naccB = B\nanss = []\nfor _ in range(Q-1):\n    ss = input()\n    if ss[0] == '1':\n        t, A, B = list(map(int, ss.split()))\n        if fr <= A <= to:\n            heappush(PQ1, -A)\n            heappush(PQ2, A)\n        elif A < fr:\n            p = -heappop(PQ1)\n            heappush(PQ2, p)\n            heappush(PQ1, -A)\n            heappush(PQ1, -A)\n            minF += fr-A\n        else:\n            p = heappop(PQ2)\n            heappush(PQ1, -p)\n            heappush(PQ2, A)\n            heappush(PQ2, A)\n            minF += A-to\n        fr = -heappop(PQ1)\n        to = heappop(PQ2)\n        heappush(PQ1, -fr)\n        heappush(PQ2, to)\n        accB += B\n    else:\n        anss.append((fr, minF+accB))\n\nprint(('\\n'.join([str(x[0])+' '+str(x[1]) for x in anss])))\n", "from heapq import heappop,heappush\nq=int(input())\nqueries=[list(map(int,input().split()))for _ in range(q)]\nl=[]\nr=[]\nans=0\nqueonecount=0\nmid=-1\nfor query in queries:\n  if query[0]==1:\n    queonecount+=1\n    _,a,b=query\n    ans+=b\n    heappush(l,-a)\n    heappush(r,a)\n    midl=-heappop(l)\n    midr=heappop(r)\n    ans+=abs(midl-midr)\n    heappush(l,-midr)\n    heappush(r,midl)\n  if query[0]==2:\n    minind=-heappop(l)\n    print(minind,ans)\n    heappush(l,-minind)", "import heapq as hq\nQ = int(input())\nminval = 0\nargminval = -(10**9)\n#a\u3092\u5927\u304d\u3044\u65b9\u3068\u5c0f\u3055\u3044\u65b9\u306b\u5206\u3051\u3066\u6700\u5c0f\u30d2\u30fc\u30d7\u3067\u7ba1\u7406(L\u306f\u6700\u5927\u304c\u6b32\u3057\u3044\u306e\u3067-1\u639b\u3051\u3066\u304a\u304f)\nL, R = [10**9], [10**9]\nlenL, lenR = 0, 0\n\nfor _ in range(Q):\n    qi = list(map(int, input().split()))\n    if qi[0] == 1:\n        ai, bi = qi[1], qi[2]\n        LC, RC = -1*L[0], R[0] #\u5de6\u53f3\u305d\u308c\u305e\u308c\u3067\u4e2d\u592e\u306b\u4e00\u756a\u8fd1\u3044\u3082\u306e\n        if lenL == lenR:\n            if ai < RC:\n                #L\u306bai\u3092\u8ffd\u52a0\n                hq.heappush(L, -1*ai)\n            else:\n                #RC\u3092L\u306b\u79fb\u52d5, R\u306bai\u3092\u8ffd\u52a0\n                hq.heappop(R)\n                hq.heappush(L, -1*RC)\n                hq.heappush(R, ai)\n            lenL += 1\n            #\u65b0\u3057\u3044argmin\u3067\u6700\u5c0f\u5024\u66f4\u65b0\n            argminval = -1*L[0]\n            minval += abs(argminval - ai) + bi\n        else:\n            if ai < LC:\n                #LC\u3092R\u306b\u79fb\u52d5, L\u306bai\u3092\u8ffd\u52a0\n                hq.heappop(L)\n                hq.heappush(L, -1*ai)\n                hq.heappush(R, LC)\n            else:\n                #R\u306bai\u3092\u8ffd\u52a0\n                hq.heappush(R, ai)\n            lenR += 1\n            #\u53e4\u3044argmin\u3067\u6700\u5c0f\u5024\u66f4\u65b0\n            minval += abs(argminval - ai) + bi\n            argminval = -1*L[0]\n    else:\n        print(\"{} {}\".format(argminval, minval))", "import heapq as h\nq_num=int(input())\nbsum=0\nhigh=[]\nlow=[]\nasum=0\nfor iii in range(q_num):\n  q=[int(_) for _ in input().split()]\n  if q[0]==1:\n    bsum+=q[2]\n    if len(low)==0:\n      h.heappush(low,-q[1])\n    else:\n      asum+=abs(q[1]+low[0])\n      if -low[0]>=q[1]:\n        h.heappush(low,-q[1])\n      else:\n        h.heappush(high,q[1])\n      \n    if len(low)>=len(high)+2:\n      ltoh=h.heappop(low)\n      h.heappush(high, -ltoh)\n    elif len(high)>=len(low)+1:\n      ltoh=h.heappop(high)\n      asum+=-low[0]-ltoh\n      h.heappush(low, -ltoh)\n  else:\n    print(-low[0],asum+bsum)", "import sys\nsys.setrecursionlimit(10000000)\nMOD = 10 ** 9 + 7\nINF = 10 ** 15\n\nfrom heapq import heapify,heappop,heappush\ndef main():\n    Q = int(input())\n    total_b = 0\n    total_a = 0\n    less_than_middle = 0\n    left = []\n    right = []\n    cnt = 0\n    for _ in range(Q):\n        query = tuple(map(int,input().split()))\n        if query[0] == 1:\n            a,b = query[1:]\n            total_b += b\n            total_a += a\n            cnt += 1\n            heappush(right,a)\n            while left and right and (-left[0] > right[0]):\n                p = -heappop(left)\n                q = heappop(right)\n                heappush(left,-q)\n                heappush(right,p)\n                less_than_middle += -p + q\n            if cnt%2 == 0:\n                p = heappop(right)\n                heappush(left,-p)\n                less_than_middle += p\n        else:\n            if cnt%2 == 0:\n                x = -left[0]\n                ans = total_a - 2*less_than_middle + total_b\n                print(x,ans)\n            else:\n                x = right[0]\n                ans = total_a - 2*less_than_middle - x + total_b\n                print(x,ans)\ndef __starting_point():\n    main()\n__starting_point()", "import heapq\n\nq = int(input())\nbig, small = [], []\nheapq.heapify(big)\nheapq.heapify(small)\nsumb = 0\nsumdist = 0\ni = 0\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        i += 1\n        a, b = query[1], query[2]\n        sumb += b\n        if i % 2 == 1:\n            if i == 1:\n                median = a\n            else:\n                if big[0] <= a:\n                    median = heapq.heappushpop(big, a)\n                    sumdist += abs(a - median)\n                elif a <= -small[0]:\n                    median = -heapq.heappushpop(small, -a)\n                    sumdist += abs(a - median)\n                else:\n                    median = a\n        else:\n            sumdist += abs(a - median)\n            heapq.heappush(big, max(a, median))\n            heapq.heappush(small, -min(a, median))\n            median = -small[0]\n    else:\n        print(median, sumdist + sumb)", "import numpy as np\nimport heapq\nQ = int(input())\nQinit = list(map(int,input().split()))\nQlist = [list(map(int,input().split())) for i in range(Q-1)]\n\n#coef_list = []\nintercept = Qinit[2]\nleft_list = []\ncent_list = [Qinit[1]]\nright_list = []\nleft_sum = 0\nright_sum = 0\n\nmedian = Qinit[1]\ncount = 0\n\nfor query in Qlist:\n    if query[0] == 1:\n        source = query[1]\n        intercept += query[2]\n\n        if cent_list == []:\n            if median > source:\n                heapq.heappush(left_list, -source)\n                left_sum += source #\n                tmp = -heapq.heappop(left_list)\n                left_sum -= tmp #\n                cent_list.append(tmp)\n            elif right_list[0] > source:\n                cent_list.append(source)\n            else:\n                heapq.heappush(right_list, source)\n                tmp = heapq.heappop(right_list)\n                right_sum += source - tmp\n                cent_list.append(tmp)\n            median = cent_list[0]\n        else:\n            if cent_list[0] < source:\n                heapq.heappush(left_list, -cent_list[0])\n                left_sum += cent_list[0]\n                median = cent_list[0]\n                heapq.heappush(right_list, source)\n                right_sum += source\n                cent_list.remove(cent_list[0])\n            else:\n                heapq.heappush(left_list, -source)\n                left_sum += source\n                median = -left_list[0]\n                heapq.heappush(right_list, cent_list[0])\n                right_sum += cent_list[0]\n                cent_list.remove(cent_list[0])\n            count += 1\n\n    else:\n        minval = np.abs(left_sum-count*median) + np.abs(right_sum-count*median) + intercept\n        #print(str(median) + \" \" + str(minval))\n        print((\"{} {}\".format(median, minval)))\n", "import heapq\n\nQ = int(input())\nm = L = R = 0\nl, r = [], []\nn = 0\nb = 0\n\nfor i in range(Q):\n  query = list(map(int, input().split()))\n  if len(query) == 3: # \u66f4\u65b0\u30af\u30a8\u30ea\n    b += query[2]\n    new = query[1]\n    if  n == 0:\n      m = new\n    elif n == 1:\n      if new <= m:\n        heapq.heappush(l, -new)\n        heapq.heappush(r, m)\n        L, R = new, m\n        m = new\n      else:\n        heapq.heappush(l, -m)\n        heapq.heappush(r, new)\n        L, R = m, new\n    elif n == 2:\n      if new < m:\n        m = -heapq.heappop(l)\n        heapq.heappush(l, -new)\n        L = new\n      else:\n        _r = heapq.heappop(r)\n        if new < _r:\n          m = new\n          heapq.heappush(r, _r)\n        else:\n          m = _r\n          heapq.heappush(r, new)\n          R = new\n    else:\n      _l = - l[0]\n      _r = r[0]\n      if n%2:\n        if new <= _l:\n          _ = heapq.heappop(l)\n          heapq.heappush(l, -new)\n          heapq.heappush(r, m)\n          m, L, R = _l, L+new, R+m\n        elif new <= m:\n          heapq.heappush(r, m)\n          m, L, R = new, L+new, R+m\n        else:\n          heapq.heappush(r, new)\n          L, R = L+m, R+new\n      else:\n        if new <= m:\n          heapq.heappush(l, -new)\n          L += new - m\n        elif new <= _r:\n          heapq.heappush(l, -m)\n          m = new\n        else:\n          _ = heapq.heappop(r)\n          heapq.heappush(l, -m)\n          heapq.heappush(r, new)\n          m, R = _r, R+new-_r\n    n += 1\n  else: # \u6c42\u5024\u30af\u30a8\u30ea\n    print(m, R-L+b)", "import heapq\nQ = int(input())\nans = 0\nL = []\nR = []\nfor _ in range(Q):\n    q = input()\n    if q[0] == '1':\n        _, a, b = map(int, q.split())\n        ans += b\n        if len(L) > 0 and not -L[0] <= a <= R[0]:\n            ans += min(abs(a + L[0]), abs(a - R[0]))\n        l = heapq.heappushpop(L, -a)\n        r = heapq.heappushpop(R, a)\n        heapq.heappush(L, -r)\n        heapq.heappush(R, -l)\n    else:\n        print(-L[0], ans)", "import heapq\nimport collections\n\ncnt=1\ncnts=collections.defaultdict(int)\nmedian=0\nleft_cnt=0\nright_cnt=0\nleft_sum=0\nright_sum=0\nleft_pos=[]\nright_pos=[]\nb=0\nq=int(input())\ninitial=list(map(int,input().split()))\nmedian=initial[1]\nb+=initial[2]\ncnts[median]=1\nfor _ in range(q-1):\n  query=list(map(int,input().split()))\n  if query[0]==1:\n    cnt+=1\n    b+=query[2]\n    if query[1]==median:\n      cnts[median]+=1\n    elif query[1]<median:\n      left_cnt+=1\n      left_sum+=query[1]\n      cnts[query[1]]+=1\n      if cnts[query[1]]==1:\n        heapq.heappush(left_pos,-query[1])\n    elif query[1]>median:\n      right_cnt+=1\n      right_sum+=query[1]\n      cnts[query[1]]+=1\n      if cnts[query[1]]==1:\n        heapq.heappush(right_pos,query[1])\n    if left_cnt+1<=(cnt+1)//2<=left_cnt+cnts[median]:\n      continue\n    elif left_cnt+1>(cnt+1)//2:\n      heapq.heappush(right_pos,median)\n      right_cnt+=cnts[median]\n      right_sum+=median*cnts[median]\n      median=-heapq.heappop(left_pos)\n      left_cnt-=cnts[median]\n      left_sum-=median*cnts[median]\n    elif (cnt+1)//2>left_cnt+cnts[median]:\n      heapq.heappush(left_pos,-median)\n      left_cnt+=cnts[median]\n      left_sum+=median*cnts[median]\n      median=heapq.heappop(right_pos)\n      right_cnt-=cnts[median]\n      right_sum-=median*cnts[median]\n  elif query[0]==2:\n    value=b\n    if left_cnt!=0:\n      value+=abs(left_sum-median*left_cnt)\n    if right_cnt!=0:\n      value+=abs(right_sum-median*right_cnt)\n    print(median,value)", "Q = int(input())\nqs = [tuple(map(int,input().split())) for i in range(Q)]\n\nimport heapq\nclass Heapq:\n    def __init__(self, arr, desc=False):\n        if desc:\n            arr = [-a for a in arr]\n        self.sign = -1 if desc else 1\n        self.hq = arr\n        heapq.heapify(self.hq)\n\n    def pop(self):\n        return heapq.heappop(self.hq) * self.sign\n\n    def push(self, a):\n        heapq.heappush(self.hq, a * self.sign)\n\n    def top(self):\n        return self.hq[0] * self.sign\n\nlq = Heapq([],True)\nrq = Heapq([])\nans = 0\n\nfor q in qs:\n    if q[0] == 2:\n        print(lq.top(), ans)\n        continue\n    _,a,b = q\n    ans += b\n    lq.push(a)\n    rq.push(a)\n    if lq.top() > rq.top():\n        l = lq.pop()\n        r = rq.pop()\n        ans += abs(l-r)\n        lq.push(r)\n        rq.push(l)", "def main():\n\tdef Technique_often_used():    \n\t\t# enumerate: for i, a in enumerate(a_list):\n\t\t# q, mod = divmod(a, b)\n\t\t# Functional Programming: filter, map, reduce\n\t\tpass\n\tdef naming_conventions():\n\t\t# [s_1, s_2, s_3, ..., s_k] is named s_k\n\t\t# [[s_11, s_12, ..., s_1k], ..,[s_j1, s_j2, ..., s_jk] is named s_jk\n\t\t# [[b1,c1],[b2,c2],..,[bm,cm]] is named bc\n\t\t# if there is something strange in a list then I add _ to the list's name (ex:s_jk_)\n\t\tpass\n\tdef visual_studio_code_shortcut():    \n\t\t# visual studio code shortcut https://qiita.com/TakahiRoyte/items/cdab6fca64da386a690b\n\t\t# delete line: Ctrl+Shift+k\n\t\t# choose same words: Ctrl+Shift+l\n\t\tpass\n\timport sys\n\tfrom itertools import combinations, permutations # https://docs.python.org/ja/3/library/itertools.html\n\tfrom collections import deque, Counter # https://docs.python.org/ja/3/library/collections.html#collections.deque\n\tfrom heapq import heapify, heappop, heappush, heappushpop, heapreplace,nlargest,nsmallest # https://docs.python.org/ja/3/library/heapq.html\n\tfrom copy import deepcopy, copy # https://docs.python.org/ja/3/library/copy.html\n\tfrom functools import reduce\n\tfrom fractions import gcd # Deprecated since version 3.5: Use math.gcd() instead.\n\tdef gcds(numbers):\n\t\treturn reduce(gcd, numbers)\n\tdef lcm(x, y):\n\t\treturn (x * y) // gcd(x, y)\n\tdef lcms(numbers): #\n\t\treturn reduce(lcm, numbers, 1)\n\n\t# set the inputs\n\t\t# open(0).read() is a convenient method: \n\t\t# ex) n, m, *x = map(int, open(0).read().split())\n\t\t#     min(x[::2]) - max(x[1::2])\n\t\t# ex2) *x, = map(int, open(0).read().split())\n\t\t#     don't forget to add comma after *x if only one variable is used\n\t\t# ex1) n, k = R()\n\t\t# ex2) v = list(R())\n\t\t# ex3) bc = [list(R()) for i in range(m)]\n\n\tR = lambda: map(int, input().split())\n\tq = int(input())\n\tqueries = [list(R()) for i in range(q)]\n\n\t# q = 4\n\t# queries=[[1,4,2],[1,5,3],[1,-9,5],[1,1,-8],[2]]\n\n\tl = []\n\tr = []\n\tans = 0\n\tfor query in queries:\n\t\tif query[0] == 1:\n\t\t\ta = heappushpop(l,-query[1])\n\t\t\tb = heappushpop(r, query[1])\n\t\t\theappush(l,-b)\n\t\t\theappush(r,-a)\n\t\t\tans += abs(b+a) + query[2]\n\t\telse:\n\t\t\tprint(-l[0],ans)\n\ndef __starting_point():\n    main()\n__starting_point()", "import heapq\n\nQ = int(input())\nm = L = R = 0\nl, r = [], []\nn = 0\nb = 0\n\nfor i in range(Q):\n  query = list(map(int, input().split()))\n  if len(query) == 3: # \u66f4\u65b0\u30af\u30a8\u30ea\n    b += query[2]\n    new = query[1]\n    if  n == 0:\n      m = new\n    elif n == 1:\n      if new <= m:\n        heapq.heappush(l, -new)\n        heapq.heappush(r, m)\n        L, R = new, m\n        m = new\n      else:\n        heapq.heappush(l, -m)\n        heapq.heappush(r, new)\n        L, R = m, new\n    elif n == 2:\n      if new < m:\n        m = -heapq.heappop(l)\n        heapq.heappush(l, -new)\n        L = new\n      else:\n        _r = heapq.heappop(r)\n        if new < _r:\n          m = new\n          heapq.heappush(r, _r)\n        else:\n          m = _r\n          heapq.heappush(r, new)\n          R = new\n    else:\n      _l = - heapq.heappop(l)\n      _r = heapq.heappop(r)\n      if n%2:\n        if new <= _l:\n          heapq.heappush(l, -new)\n          heapq.heappush(r, _r)\n          heapq.heappush(r, m)\n          m, L, R = _l, L+new, R+m\n        elif new <= m:\n          heapq.heappush(l, -_l)\n          heapq.heappush(r, _r)\n          heapq.heappush(r, m)\n          m, L, R = new, L+new, R+m\n        else:\n          heapq.heappush(l, -_l)\n          heapq.heappush(r, _r)\n          heapq.heappush(r, new)\n          L, R = L+m, R+new\n      else:\n        if new <= m:\n          heapq.heappush(l, -_l)\n          heapq.heappush(l, -new)\n          heapq.heappush(r, _r)\n          L += new - m\n        elif new <= _r:\n          heapq.heappush(l, -_l)\n          heapq.heappush(l, -m)\n          heapq.heappush(r, _r)\n          m = new\n        else:\n          heapq.heappush(l, -_l)\n          heapq.heappush(l, -m)\n          heapq.heappush(r, new)\n          m, R = _r, R+new-_r\n    n += 1\n  else: # \u6c42\u5024\u30af\u30a8\u30ea\n    print(m, R-L+b)", "from heapq import heappush,heappop\ndef main():\n    Q=int(input())\n\n    ab_list=[]\n    query_type=[]\n\n    for i in range(Q):\n        query=list(map(int,input().split()))\n        query_type.append(query[0])\n        if query[0]==1:\n            ab_list.append((query[1],query[2]))\n\n    #query_type->[1,1,2,1,2]\n    #ab_list->[(a,b),(a,b),(a,b)]\n\n    L=[]\n    R=[]\n\n    ini=0\n\n    counter=0\n    ab_pointer=0\n    minF=0\n    for i in query_type:\n        if i==1:\n            a_new=ab_list[ab_pointer][0]\n            b_new=ab_list[ab_pointer][1]\n            heappush(L,-1*a_new)\n            heappush(R,a_new)\n            Lmax=-1*heappop(L)\n            Rmin=heappop(R)\n            if Lmax<=Rmin:\n                heappush(L,-1*Lmax)\n                heappush(R,Rmin)\n            else:\n                heappush(L,-1*Rmin)\n                heappush(R,Lmax)\n            delta=abs(Lmax-Rmin)\n            minF+=delta+b_new\n            ab_pointer+=1\n        else:\n            minX=-1*heappop(L)\n            print((str(minX)+\" \"+str(minF)))\n            heappush(L,-1*minX)\n\n\n\ndef __starting_point():\n    main()\n\n\n\n\n__starting_point()", "import heapq\nQ = int(input())\nqs = [tuple(map(int,input().split())) for i in range(Q)]\n\nlq = []\nrq = []\nheapq.heapify(lq)\nheapq.heapify(rq)\nans = 0\n\nfor q in qs:\n    if q[0] == 2:\n        print(-lq[0], ans)\n        continue\n    _,a,b = q\n    ans += b\n    heapq.heappush(lq, -a)\n    heapq.heappush(rq, a)\n    if -lq[0] > rq[0]:\n        l = -heapq.heappop(lq)\n        r = heapq.heappop(rq)\n        ans += abs(l-r)\n        heapq.heappush(lq,-r)\n        heapq.heappush(rq,l)", "from heapq import*\nL,R=[],[]\nn=int(input())\nB=0\ncnt=0\nl,r=0,0\nfor i in range(n):\n    I=input()\n    if I[0]==\"1\":\n        a,b,c=map(int,I.split())\n        B+=c\n        cnt+=1\n        \n        if cnt%2:\n            x=heappushpop(R,b)\n            r+=b-x\n            heappush(L,-x)\n            l+=-x\n        else:\n            x=heappushpop(L,-b)\n            l+=-b-x\n            heappush(R,-x)\n            r+=-x\n        #print(L,R,l,r)\n        #print(b,x)\n    else:\n        med=-L[0]\n#        print(L,R)\n#        print(l,r)\n        print(med,cnt%2*med+B+l+r)", "from heapq import heappop,heappush\nl = []\nr = []\nQ = int(input())\nans = 0\nl_s = 0\nr_s = 0\n_,m,b = map(int,input().split())\nans += b\nn = 0\nfor i in range(1,Q):\n    s = input()\n    if s != '2':\n        _,a,b = map(int,s.split())\n        ans += b\n        if n == 0:\n            c,d = sorted([m,a])\n            heappush(l,-c)\n            heappush(r,d)\n            l_s += c\n            r_s += d\n            m1 = c\n        else:\n            c,d = heappop(l),heappop(r)\n            l_s += c\n            r_s -= d\n            c = -c\n            if n%2 == 1:\n                c,m,d = sorted([a,c,d])\n                heappush(l,-c)\n                heappush(r,d)\n                l_s += c\n                r_s += d\n            else:\n                c,m1,m2,d = sorted([m,a,c,d])\n                heappush(l,-c)\n                heappush(l,-m1)\n                heappush(r,d)\n                heappush(r,m2)\n                l_s += c\n                r_s += d\n                l_s += m1\n                r_s += m2\n        n += 1\n    else:\n        if n == 0:\n            print('{} {}'.format(m,ans))\n        elif n == 1:\n            print('{} {}'.format(m1,r_s-l_s+ans))\n        elif n%2 == 0:\n            print('{} {}'.format(m,r_s-l_s+ans))\n        else:\n            print('{} {}'.format(m1,r_s-l_s+ans))", "from itertools import zip_longest\nfrom heapq import heappush, heappop\n\n# \u5165\u529b\nQ = int(input())\n\nq, a, b = (\n    zip_longest(*(list(map(int, input().split())) for _ in range(Q))) if Q else\n    ((), ())\n)\n\nINF = 10**18\nL = []\nR = []\nheappush(L, INF)\nheappush(R, INF)\nS = 0\nres = []\n\nfor i, A, B in zip(q, a, b):\n    if i == 1:\n        S += B\n        if len(L) == len(R):\n            if A < -L[0]:\n                S += -L[0] - A\n                heappush(L, -A)\n            elif A <= R[0]:\n                heappush(L, -A)\n            else:\n                S += A - R[0]\n                t = heappop(R)\n                heappush(L, -t)\n                heappush(R, A)\n        else:\n            if A < -L[0]:\n                S += -L[0] - A\n                t = -heappop(L)\n                heappush(R, t)\n                heappush(L, -A)\n            else:\n                S += A - (-L[0])\n                heappush(R, A)\n    else:\n        res.append((-L[0], S))\n\nans = '\\n'.join(\n    ' '.join(map(str, r))\n    for r in res\n)\n\n# \u51fa\u529b\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue May 28 22:22:21 2019\n\n@author: Yamazaki Kenichi\n\"\"\"\nimport heapq\n\nQ = int(input())\nQ2 = [input() for i in range(Q)]\n\nans = []\nAl,Ar = [-(-(10**9+1))],[10**9+1]\nB = 0\nflg = False\nfor q in Q2:\n    if q[0] == '1':\n#        input\n        d, a, b = list(map(int,q.split()))\n        if not flg:\n            heapq.heappush(Al,-a)\n            B += b\n            flg = True\n            continue\n        \n#        C = abs(a - (-Al[0]))\n        if len(Al) == len(Ar):\n            if a < Ar[0]:\n#                C = abs(a - (-Al[0]))\n                heapq.heappush(Al,-a)\n#                C = abs(a - (-Al[0]))\n#            elif a < Ar[0]:\n#                heapq.heappush(Al,-(heapq.heappop(Ar)))\n#                heapq.heappush(Ar,a)\n                C = abs(a - (-Al[0]))\n            else:\n                heapq.heappush(Ar,a)\n                heapq.heappush(Al,-(heapq.heappop(Ar)))\n                C = abs(a - (-Al[0]))\n        else:\n            if a < Ar[0]:\n                C = abs(a - (-Al[0]))\n                heapq.heappush(Al,-a)\n                heapq.heappush(Ar,-(heapq.heappop(Al)))\n#                C = abs(a - (-Al[0]))\n#            elif a < A[]\n            else:\n                C = abs(a - (-Al[0]))\n                heapq.heappush(Ar,a)\n#                C = abs(a - (-Al[0]))\n        B += (b + C)\n#        print(Al,Ar,a,B,b)\n    else:\n#        output\n        ans.append([(-Al[0]),B])\n        \nfor c in ans:\n    print((' '.join(map(str,c))))\n\n", "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda :sys.stdin.readline().rstrip()\ndef resolve():\n    k=int(input())\n    score=0\n    B=0\n\n    from heapq import heappush,heappop\n    q=[] # \u5c0f\u3055\u3044\u307b\u3046\u306e\u6700\u5927\u3092\u3068\u308b\u2192\u30de\u30a4\u30ca\u30b9\u306b\u3057\u3066\u5165\u308c\u308b\n    Q=[] # \u5927\u304d\u3044\u307b\u3046\u306e\u6700\u5c0f\u3092\u3068\u308b\n\n    for _ in range(k):\n        s=input()\n        if(s[0]=='1'):\n            s,a,b=map(int,s.split())\n            heappush(q,-a)\n            heappush(Q,a)\n            B+=b\n            # \u5927\u5c0f\u95a2\u4fc2\u304c\u9006\u8ee2\u3057\u3066\u3044\u308b\u304b\u3092\u5224\u65ad\u3059\u308b\n            t=-q[0]; T=Q[0]\n            if(t>T):\n                score+=t-T\n                heappop(q); heappop(Q)\n                heappush(q,-T); heappush(Q,t)\n        else:\n            print(-q[0],score+B)\nresolve()", "import heapq\nQ=int(input())\n\nalist=[]\nhq_left,hq_right=[],[]\ndummy,a1,b1=map(int,input().split())\nheapq.heappush(hq_left,-a1)\nheapq.heappush(hq_right,a1)\nb=b1\n\nmin_arg=-hq_left[0]\nmin_diff=0\n#min_value=b      \nfor _ in range(Q-1):\n  query=list(map(int,input().split()))\n  if len(query)==3:    \n    dummy,ai,bi=query\n    b+=bi\n    \n    max_left=-hq_left[0]\n    min_right=hq_right[0]\n    if ai<max_left:\n      heapq.heappush(hq_left,-ai)\n      heapq.heappush(hq_left,-ai)\n      heapq.heappop(hq_left)\n      heapq.heappush(hq_right,max_left)      \n      min_diff+=max_left-ai\n    elif min_right<ai:\n      heapq.heappush(hq_right,ai)\n      heapq.heappush(hq_right,ai)\n      heapq.heappop(hq_right)\n      heapq.heappush(hq_left,-min_right)      \n      min_diff+=ai-min_right\n    else:\n      heapq.heappush(hq_left,-ai)\n      heapq.heappush(hq_right,ai)      \n  else:    \n    min_arg=-hq_left[0]\n    min_value=min_diff+b\n    print(min_arg,min_value)", "from heapq import heappop,heappush\nq=int(input())\nqueries=[list(map(int,input().split()))for _ in range(q)]\nl=[]\nr=[]\nans=0\nquecount=0\nfor query in queries:\n  if query[0]==1:\n    quecount+=1\n    _,a,b=query\n    ans+=b\n    if quecount==1:\n      mid=a\n    elif quecount%2==1:\n      if a<-l[0]:\n        mid=-heappop(l)\n        heappush(l,-a)\n      elif r[0]<a:\n        mid=heappop(r)\n        heappush(r,a)\n      else:\n        mid=a\n      ans+=abs(a-mid)\n    else:\n      ans+=abs(a-mid)\n      heappush(l,-min(a,mid))\n      heappush(r,max(a,mid))\n  if query[0]==2:\n    if quecount%2==1:\n      ansind=mid\n    else:\n      ansind=-l[0]\n    print(ansind,ans)", "import sys\ninput = sys.stdin.readline\nimport heapq\n\ndef main():\n  less = []\n  greater = []\n  s = 0\n  sum_ = 0\n  q = int(input())\n  def query(n):\n    nonlocal s, sum_\n    if n[0] == \"1\":\n      c, a, b = map(int, n.split())\n      s += b\n      if len(less) == len(greater):\n        if not greater or a <= greater[0]:\n          heapq.heappush(less, -a)\n          sum_ -= a\n        else:\n          r = heapq.heappushpop(greater, a)\n          heapq.heappush(less, -r)\n          sum_ += a - 2*r\n      else:\n        if a >= -less[0]:\n          heapq.heappush(greater, a)\n          sum_ += a\n        else:\n          r = -heapq.heappushpop(less, -a)\n          heapq.heappush(greater, r)\n          sum_ += 2*r - a\n    else:\n      res = sum_\n      if len(less) > len(greater):\n        res -= less[0]\n      res += s\n      print(-less[0], res)\n\n  for _ in range(q):\n    k = input()\n    query(k)\n    \ndef __starting_point():\n  main()\n__starting_point()", "\"\"\"\n\u8a00\u3044\u63db\u3048\u308b\u3068\u6b21\u306e\u3053\u3068\u3092\u3059\u308c\u3070\u3088\u3044\n\u521d\u671f\u5024\u3092l = [], s = 0 \u3068\u3057\u3066\n'1 a b': l\u306ba\u3092\u8ffd\u52a0\u3001s\u306bb\u3092\u8db3\u3059\n'2': \u4e2d\u592e\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u306e\u548c-\uff5e\uff5e\u3088\u308a\u5c0f\u3055\u3044\u8981\u7d20\u306e\u548c+s\u3092\u51fa\u529b\n(\u8981\u7d20\u304c\u4eee\u306b\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u306a\u3089\u3001\u8981\u7d20\u6570\u3092k\u3068\u3057\u3066\u3001\nsum(l[(k+1)//2:]) - sum(l[:k//2]) + s\u3000\u3092\u51fa\u529b\u3001x\u3068\u3057\u3066\u306fl[(k-1)//2]\u3092\u51fa\u529b\n\"\"\"\nimport heapq\n\nless = []\ngreater = []\ns = 0\nsum_ = 0\nq = int(input())\ndef query(n):\n  nonlocal s, sum_\n  if n[0] == \"1\":\n    c, a, b = map(int, n.split())\n    s += b\n    if len(less) == len(greater):\n      if not greater or a <= greater[0]:\n        heapq.heappush(less, -a)\n        sum_ -= a\n      else:\n        r = heapq.heappushpop(greater, a)\n        heapq.heappush(less, -r)\n        sum_ += a - 2*r\n    else:\n      if a >= -less[0]:\n        heapq.heappush(greater, a)\n        sum_ += a\n      else:\n        r = -heapq.heappushpop(less, -a)\n        heapq.heappush(greater, r)\n        sum_ += 2*r - a\n  else:\n    res = sum_\n    if len(less) > len(greater):\n      res -= less[0]\n    res += s\n    print(-less[0], res)\n    \nfor _ in range(q):\n  k = input()\n  query(k)", "import heapq\nq=int(input())\nL=[]\nR=[]\nheapq.heapify(L)\nheapq.heapify(R)\nfx=0\nfor i in range(q):\n  Q=list(map(int,input().split()))\n  if Q[0]==1:\n    a,b=Q[1],Q[2]\n    heapq.heappush(L,-a)\n    heapq.heappush(R,a)\n    l=-heapq.heappop(L)\n    r=heapq.heappop(R)\n    if l==a and r==a:\n      heapq.heappush(L,-l)\n      heapq.heappush(R,r)\n    else:\n      fx+=abs(r-l)\n      heapq.heappush(L,-r)\n      heapq.heappush(R,l)\n    x=-L[0]\n    fx+=b\n  else:\n    print(x,fx)"]