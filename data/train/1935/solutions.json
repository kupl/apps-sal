["class Solution:\n     def isToeplitzMatrix(self, matrix):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :rtype: bool\n         \"\"\"\n         if not matrix:\n             return False\n         colSize = len(matrix[0]) - 1\n         for row in range(len(matrix) - 1):\n             if matrix[row][:colSize] != matrix[row+1][1:colSize+1]:\n                 return False\n         return True", "class Solution:\n     def isToeplitzMatrix(self, matrix):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :rtype: bool\n         \"\"\"\n         return all(True if len(matrix[i])==1 or matrix[i][:-1]==matrix[i+1][1:] \\\n                    else False for i in range(len(matrix)-1))", "class Solution:\n     def isToeplitzMatrix(self, matrix):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :rtype: bool\n         \"\"\"\n         diagonals_upper = []\n         x, y = len(matrix[0]), len(matrix)\n         starters = [[0, i] for i in range(x)] + [[i, 0] for i in range(y)]\n         for starter in starters:\n             for j in range(min(x,y)):\n                 if starter[0] + j < y and starter[1] + j < x:\n                     print(starter[0] + j , starter[1] + j)\n                     if matrix[starter[0]][starter[1]] != matrix[starter[0] + j][starter[1] + j]:\n                         return False\n             print('\\n')\n         return True", "class Solution:\n     def isToeplitzMatrix(self, matrix):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :rtype: bool\n         \"\"\"\n         \n         x, y = len(matrix[0]), len(matrix)\n         \n         for i in range(x - 1):\n             for j in range(y - 1):\n                 if matrix[j][i] != matrix[j+1][i+1]:\n                     return False\n         return True\n         \"\"\"\n         starters = [[0, i] for i in range(x)] + [[i, 0] for i in range(y)]\n         for starter in starters:\n             for j in range(min(x,y)):\n                 if starter[0] + j < y and starter[1] + j < x:\n                     print(starter[0] + j , starter[1] + j)\n                     if matrix[starter[0]][starter[1]] != matrix[starter[0] + j][starter[1] + j]:\n                         return False\n             print('\\n')\n         return True\n         \"\"\"", "class Solution:\n     def isToeplitzMatrix(self, matrix):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :rtype: bool\n         \"\"\"\n         for c in range(len(matrix)-1):\n             for r in range(len(matrix[0])-1):\n                 if (matrix[c][r] != matrix[c + 1][r + 1]):\n                     return False\n         return True", "class Solution:\n     def isToeplitzMatrix(self, matrix):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :rtype: bool\n         \"\"\"\n         M, N = len(matrix), len(matrix[0])\n         if M == 1: return True\n         prev_row = matrix[0][:-1]\n         for row in matrix[1:]:\n             if row[1:] != prev_row: return False\n             prev_row = row[:-1]\n         return True\n         \n", "class Solution:\n     def isToeplitzMatrix(self, matrix):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :rtype: bool\n         \"\"\"\n         \n         x, y = len(matrix[0]), len(matrix)\n         \n         for i in range(x - 1):\n             for j in range(y - 1):\n                 if matrix[j][i] != matrix[j+1][i+1]:\n                     return False\n         return True", "class Solution:\n     def isToeplitzMatrix(self, matrix):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :rtype: bool\n         \"\"\"\n         vmap = collections.defaultdict(set)\n         M, N = len(matrix), len(matrix[0])\n         for x in range(M):\n             for y in range(N):\n                 vmap[y - x].add(matrix[x][y])\n                 if len(vmap[y - x]) > 1: \n                     return False\n         return True", "class Solution:\n     def isToeplitzMatrix(self, matrix):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :rtype: bool\n         \"\"\"\n         hashMap = {}\n         for i in range(len(matrix)):\n             for j in range(len(matrix[0])):\n                 if hashMap.get(i-j, \"no\") != \"no\":\n                     if hashMap[i-j] != matrix[i][j]:\n                         return False\n                 else:\n                     hashMap[i-j] = matrix[i][j]\n         return True\n", "class Solution:\n     def isToeplitzMatrix(self, matrix):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :rtype: bool\n         \"\"\"\n         \n         rows = len(matrix)\n         cols = len(matrix[0])\n         \n         for i in range(rows-1):\n             for j in range(cols-1):\n                 if matrix[i][j] != matrix[i+1][j+1]:\n                     return False\n         return True", "class Solution:\n     def isToeplitzMatrix(self, matrix):\n         for i in range(0,len(matrix)):\n             for j in range(0,len(matrix[0])):\n                 r = i+1;\n                 c = j+1;\n                 \n                 while r < (len(matrix)) and c < (len(matrix[0])):\n                     if matrix[i][j] == matrix[r][c]:\n                         r += 1;\n                         c += 1;\n                         continue;\n                     else:\n                         return False;\n         return True;\n                     \n                     \n                     \n", "class Solution:\n     def isToeplitzMatrix1(self, matrix):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :rtype: bool\n         \"\"\"\n         row,col=len(matrix),len(matrix[0])\n         for j in range(col):\n             a=0\n             while a+1<row and j+a+1<col:\n                 if matrix[a][j+a]==matrix[a+1][j+a+1]:\n                     a+=1\n                 else:\n                     return False\n         for i in range(row):\n             a=0\n             while a+1<col and i+1+a<row:\n                 if matrix[i+a][a]==matrix[i+a+1][a+1]:\n                     a+=1\n                 else:\n                     return False\n         return True\n     def isToeplitzMatrix(self, m):\n         return all(m[i][j] == m[i+1][j+1] for i in range(len(m)-1) for j in range(len(m[0])-1))\n", "class Solution:\n     def isToeplitzMatrix(self, matrix):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :rtype: bool\n         \"\"\"\n         result = True\n         \n         for i in range (len(matrix)-1):\n             result = result and (matrix[i][:-1] == matrix[i+1][1:])\n             \n         \n         return result \n \n", "class Solution:\n     def isToeplitzMatrix(self, matrix):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :rtype: bool\n         \"\"\"\n         rows = len(matrix)\n         col = len(matrix[0])\n \n         i = 0\n         j = 0\n \n         while i < rows-1:\n             while j < col-1:\n                 print('Comparing: ',matrix[i][j], matrix[i + 1][j + 1])\n                 if matrix[i][j] == matrix[i + 1][j + 1]:\n                     j += 1\n                 else:\n                     return False\n             i += 1\n             j = 0\n         return True"]