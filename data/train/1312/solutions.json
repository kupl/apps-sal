["import sys\n\nspoon = [ \"SPOON\", \"spoon\" ]\n\ndef main():\n try:\n  tc=int(input())\n  while tc>0:\n   tc=tc-1\n   [r,c] = input().split()\n   r=int(r)\n   c=int(c)\n   k=0\n   flag=0\n   matrix=[0]*r\n   i=0\n   while i<r:\n    matrix[i]=input()\n    i=i+1\n   \n   #Check row wise\n   for m in matrix:\n    for s in m:\n     if s==spoon[0][k] or s==spoon[1][k]:\n      k=k+1\n      if k==5:\n       flag=1\n       k=0\n       break\n     else:\n      k=0\n   \n   if flag==1:\n    print(\"There is a spoon!\")\n    continue\n   \n   #Check column wise\n   i=0\n   k=0\n   while i<c:\n    j=0\n    while j<r:\n     if matrix[j][i]==spoon[0][k] or matrix[j][i]==spoon[1][k]:\n      k=k+1\n      if k==5:\n       flag=1\n       k=0\n       break\n     else:\n      k=0\n     j=j+1\n    i=i+1\n   \n   if flag==1:\n    print(\"There is a spoon!\")\n    continue\n   \n   print(\"There is indeed no spoon!\")\n \n except:\n  return 0\nmain()\n", "def check(L):\n for l in L:\n  if \"spoon\" in \"\".join(l):\n   return True\n return False\n\ndef change(r,c,L):\n n = []\n for x in range(c):\n  t = []\n  for q in range(r):\n   t.append(L[q][x])\n  n.append(t)\n return n\n\nfor case in range(eval(input())):\n r, c = list(map(int, input().strip().split()))\n \n m = []\n for row in range(r):\n  m.append(list(input().lower().strip()))\n if check(m):\n  print(\"There is a spoon!\")\n else:\n  m = change(r, c, m)\n  if check(m):\n   print(\"There is a spoon!\")\n  else:\n   print(\"There is indeed no spoon!\")\n  \n  \n", "import string\n\nt=0\ntry:\n t=int(input().strip())\nexcept:\n pass\nfor _ in range(0,t):\n r,c=[int(j) for j in input().split()]\n a=[]\n flag=False\n m=\"\"\n for q in range(0,r):\n  ll=input().lower()\n  a.append(ll)\n  m=m+ll\n  \n for q in a:\n  if q.find(\"spoon\")!=-1:\n   flag = True\n   break\n if not flag:\n  q=0\n  bb=(r-4)*c\n  while q<bb:\n   if m[q]==\"s\":\n    ja=m[q]+m[q+c]+m[q+2*c]+m[q+3*c]+m[q+4*c]\n    if ja==\"spoon\":\n     flag=True\n     break\n   q+=1\n if flag:\n  print(\"There is a spoon!\")\n else:\n  print(\"There is indeed no spoon!\")\n", "t=int(input().strip())\nfor i in range(t):\n R,C=list(map(int,input().strip().split()))\n hit=['']*R\n for j in range(R):\n  hit[j]=input().strip().lower()\n found=False\n for w in hit:\n  if w.find('spoon')!=-1:\n   print('There is a spoon!')\n   found=True\n   break\n if not found:\n  for i in range(C):\n   new=''.join([x[i] for x in hit])\n   if new.find('spoon')!=-1:\n    print('There is a spoon!')\n    found=True\n    break\n  if not found: print('There is indeed no spoon!')\n\n   \n", "import sys\n\nt = int(input())\n\ndebug = 0\n\nfor x in range(t):\n row, col = list(map(int, sys.stdin.readline().split()))\n\n spoon = 0\n\n matrix = []\n for r in range(row):\n  row_in = sys.stdin.readline().strip().lower()\n  pos = row_in.find('spoon')\n  if pos != -1:\n   spoon = 1\n  matrix.append(row_in)\n \n if spoon == 1:\n  print(\"There is a spoon!\")\n  continue\n\n # If not found in row major form, then try the column major form\n for c in range(col):\n  col_in = ''\n  for r in range(row):\n   col_in += matrix[r][c]\n\n  pos = col_in.find('spoon')\n  if pos != -1:\n   spoon = 1\n\n if spoon == 1:\n  print(\"There is a spoon!\")\n else:\n  print(\"There is indeed no spoon!\")\n \n if debug == 1:\n  print(spoon)\n  print(matrix)\n", "import sys\n\nt = int(input())\n\ndebug = 0\n\nfor x in range(t):\n row, col = list(map(int, sys.stdin.readline().split()))\n\n spoon = 0\n\n matrix = []\n for r in range(row):\n  row_in = sys.stdin.readline().strip().lower()\n  pos = row_in.find('spoon')\n  if pos != -1:\n   spoon = 1\n  matrix.append(row_in)\n \n\n # If not found in row major form, then try the column major form\n for c in range(col):\n  col_in = ''\n  for r in range(row):\n   col_in += matrix[r][c]\n\n  pos = col_in.find('spoon')\n  if pos != -1:\n   spoon = 1\n\n if spoon == 1:\n  print(\"There is a spoon!\")\n else:\n  print(\"There is indeed no spoon!\")\n \n if debug == 1:\n  print(spoon)\n  print(matrix)\n", "import sys\n\nT = int( sys.stdin.readline() )\n\nwhile( T ):\n T -= 1\n ins = sys.stdin.readline().split()\n R = int( ins[0] )\n C = int( ins[1] )\n horiwords = []\n vertiwords = [' ']*C\n flag = False\n for i in range( R ):\n  horiwords.append( sys.stdin.readline().lower() )\n  if 'spoon' in horiwords[i]:\n   flag = True\n\n if not flag:\n  for i in range( C ):\n   for j in range( R ):\n    vertiwords[i] += horiwords[j][i]\n   if 'spoon' in vertiwords[i]:\n    flag = True\n    break\n\n if( flag ):\n  print( 'There is a spoon!' )\n else:\n  print( 'There is indeed no spoon!' )\n", "#Program question at: http://www.codechef.com/MARCH12/problems/SPOON\n\nt = int(input())\nwhile t>0:\n t-=1\n s = input().split()\n m = int(s[0]); n = int(s[1])\n ar = []; f = True\n for i in range(m):\n  s = input().lower()\n  if s.find('spoon') >=0:\n   print('There is a spoon!')\n   f = False\n  ar.append(s)\n if not f: continue\n for i in range(n):\n  s = ''\n  for j in range(m):\n   s += ar[j][i]\n  if s.find('spoon') >= 0:\n   print('There is a spoon!')\n   f = False\n   break\n if f: print('There is indeed no spoon!')\n", "t = int(input())\nspoon = \"spoon\"\nwhile t>0:\n t -= 1\n x, y = list(map(int, input().split(\" \")))\n inp = []\n done = False\n for i in range(x):\n  inp.append(input().lower())\n if y>4:\n  for i in range(x):\n   if inp[i].find(spoon) != -1:\n    print(\"There is a spoon!\")\n    done = True\n    break\n  if done:\n   continue\n if x>4:\n  for i in range(y):\n   temp = \"\"\n   for j in range(x):\n    temp += inp[j][i]\n   if temp.find(spoon) != -1:\n    print(\"There is a spoon!\")\n    done = True\n    break\n  if done:\n   continue\n print(\"There is indeed no spoon!\")", "t=int(input())\nwhile t:\n t-=1\n r,c=list(map(int,input().split(\" \")))\n l=['']*c\n flag=0\n while r:\n  r-=1\n  str = input()\n  if 'spoon' in str.lower():\n   flag=1\n  else:\n   j=0\n   for char in list(str):\n    l[j]+=char\n    j+=1\n for str1 in l:\n  if 'spoon' in str1.lower():\n   flag = 1\n   break\n if flag==1: print('There is a spoon!')\n if flag==0: print('There is indeed no spoon!')", "t = eval(input())\nfor p in range(t):\n line = input().split()\n r,c = int(line[0]),int(line[1])\n matrix = []\n found = False\n for i in range(r):\n  matrix.append(input().lower())\n for i in range(r):\n  if(matrix[i].find(\"spoon\") != -1):\n   print(\"There is a spoon!\")\n   found = True\n   break\n if(not found):\n  for i in range(c):\n   line = \"\"\n   for j in range(r):\n    line += matrix[j][i]\n   #print line\n   if(line.find(\"spoon\") != -1):\n    print(\"There is a spoon!\")\n    found = True\n    break\n if(not found):\n  print(\"There is indeed no spoon!\")\n", "t = eval(input())\nfor ti in range(t):\n x = [int(i) for i in input().split()]\n found = False\n a = []\n for i in range(x[0]):\n  a.append(input().lower())\n for i in range(x[0]):\n  if a[i].find(\"spoon\") != -1:\n   found = True\n   break;\n if not found:\n  for j in range(x[1]):\n   str = \"\"\n   for i in range(x[0]):\n    str += a[i][j]\n   if str.find(\"spoon\") != -1:\n    found = True\n    break;\n if found:\n  print(\"There is a spoon!\")\n else:\n  print(\"There is indeed no spoon!\")", "cases=int(input())\nfor i in range(cases):\n flag,lines=0,[]\n nums=input().split()\n r,c=int(nums[0]),int(nums[1])\n for j in range(r):\n  lines.append(input().lower())\n  if lines[j].find(\"spoon\")>=0:\n   flag=1\n for j in range(c):\n  line=\"\"\n  for k in range(r):\n   line+=lines[k][j]\n  if line.find(\"spoon\")>=0:\n   flag=1\n if flag==1:\n  print(\"There is a spoon!\")\n else:\n  print(\"There is indeed no spoon!\")\n \n \n"]