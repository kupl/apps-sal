["from bisect import bisect\nn = 32000\ndef primeSeive(n):\n    prime = [True for i in range(n + 1)]\n    primes = []\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    for p in range(n + 1):\n        if prime[p]:\n            primes.append(p)\n    return primes\narr = primeSeive(n)\nfin = []\nfor i in arr:\n    fin.append(pow(i,4))\nfor _ in range(int(input())):\n    n = int(input())\n    print(bisect(fin,n))\n", "# cook your dish here\nfrom math import sqrt\nt=int(input())\ndef isprime(n) : \n \n    # Corner cases \n    if (n <= 1) : \n        return False\n    if (n <= 3) : \n        return True\n \n    # This is checked so that we can skip \n    # middle five numbers in below loop \n    if (n % 2 == 0 or n % 3 == 0) : \n        return False\n \n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n \n    return True\n   \nd={}\nfor i in range(2,100000):\n    d[i]=isprime(i)\nl= [i for i in d.keys() if d[i]==True]\nfor _ in range(t):\n    n=int(input())\n    s=0\n    e=len(l)-1\n    ans=-1\n    while(s<=e):\n        mid=(s+e)//2\n        if((l[mid]**4)<=n):\n            ans=mid\n            s=mid+1;\n        else:\n            e=mid-1\n    print(ans+1)", "import sys\r\nimport math\r\nfrom collections import defaultdict,Counter\r\nimport bisect\r\ninput=sys.stdin.readline\r\ndef print(x):\r\n    sys.stdout.write(str(x)+\"\\n\")\r\n\r\n# sys.stdout=open(\"CP1/output.txt\",'w')\r\n# sys.stdin=open(\"CP1/input.txt\",'r')\r\n\r\ndef Sieve(n):\r\n    prime = [True for i in range(n + 1)]\r\n    p = 2\r\n    while (p * p <= n):\r\n\t    if (prime[p] == True):\r\n\t\t    for i in range(p * p, n + 1, p):\r\n\t\t\t    prime[i] = False\r\n\t    p += 1\r\n    prime[0]= False\r\n    prime[1]= False\r\n\r\n    p1=[]\r\n    for p in range(n + 1):\r\n\t    if prime[p]:\r\n\t\t    p1.append(pow(p,4))\r\n    return p1\r\n\r\np=Sieve(10**5)\r\n# mod=pow(10,9)+7\r\nt=int(input())\r\nfor i in range(t):\r\n\tn=int(input())\r\n\tans=bisect.bisect_right(p,n)\r\n\tprint(ans)", "from sys import stdin, stdout\nfrom math import ceil, floor, gcd, fabs, factorial, fmod, sqrt, inf\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nmod = pow(10, 9) + 7\nmod2 = 998244353\ndef inp(): return stdin.readline().strip()\ndef out(var, end=\"\\n\"): stdout.write(str(var)+\"\\n\")\ndef outa(*var, end=\"\\n\"): stdout.write(' '.join(map(str, var)) + end)\ndef lmp(): return list(mp())\ndef mp(): return list(map(int, inp().split()))\ndef smp(): return list(map(str, inp().split()))\ndef l1d(n, val=0): return [val for i in range(n)]\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\ndef remadd(x, y): return 1 if x%y else 0\n\ndef chkprime(x):\n    if x<=1: return False\n    if x in (2, 3): return True\n    if x%2 == 0: return False\n    for i in range(3, int(sqrt(x))+1, 2):\n        if x%i == 0: return False\n    return True\n\nl = []\ni = 2\nwhile True:\n    if i**4 > 10**18: break\n    if chkprime(i):\n        l.append(i**4)\n    i += 1\n\nfor _ in range(int(inp())):\n    n = int(inp())\n    k = br(l, n)\n    print(k)\n    \n"]