["# cook your dish here\n# cook your dish here\ntest=int(input())\nfor _ in range(test):\n n=int(input())\n a=[(bin(int(x))[2:][::-1]+(\"0\")*32)for x in input().split()]\n res=\"\"\n mysum=0\n for i in range(32):\n  mycount=0\n  for j in range(n):\n   if(a[j][i]==\"0\"):\n    mycount+=1\n  if(mycount==n):\n   break\n  if(mycount>(n//2)):\n   res+=\"0\"\n   mysum+=(n-mycount)*int(pow(2,i))\n  else:\n   res+=\"1\"\n   mysum+=mycount*int(pow(2,i))\n print(mysum)", "# cook your dish here\ntest=int(input())\nfor _ in range(test):\n n=int(input())\n a=[(bin(int(x))[2:][::-1]+(\"0\")*32)for x in input().split()]\n res=\"\"\n mysum=0\n for i in range(32):\n  mycount=0\n  for j in range(n):\n   if(a[j][i]==\"0\"):\n    mycount+=1\n  if(mycount==n):\n   break\n  if(mycount>(n//2)):\n   res+=\"0\"\n   mysum+=(n-mycount)*int(pow(2,i))\n  else:\n   res+=\"1\"\n   mysum+=mycount*int(pow(2,i))\n print(mysum)", "t = int(input())\nfor _ in range(t):\n n = int(input())\n a = [(bin(int(x))[2:][::-1]+(\"0\")*32)for x in input().split()]\n res = \"\"\n mysum = 0\n for i in range(32):\n  mycount = 0\n  for j in range(n):\n   if(a[j][i] == \"0\"):\n    mycount += 1\n  if(mycount == n):\n   break\n  if(mycount > (n//2)):\n   res += \"0\"\n   mysum += (n-mycount)*int(pow(2,i))\n  else:\n   res += \"1\"\n   mysum += mycount*int(pow(2,i))\n print(mysum)", "import operator\nt=int(input())\nfor z in range(t):\n  n=int(input())\n  lis=list(map(int,input().split()))\n  lis2=[0]*32\n  for i in range(n):\n    a=bin(lis[i])[2:]\n    for i in range(len(a)):\n      if a[i]=='1':\n        lis2[len(a)-i-1]+=1\n  ss=''\n  lis2.reverse()\n  #print(lis2)\n  for i in lis2:\n    if i>n//2:\n      ss+='1'\n    else:\n      ss+='0'\n  #print(ss)\n  aa=int(ss,2)\n  s=0\n  for i in lis:\n    s+=i^aa\n  print(s)\n", "import operator\nt=int(input())\nfor z in range(t):\n  n=int(input())\n  lis=list(map(int,input().split()))\n  lis2=[0]*32\n  for i in range(n):\n    a=bin(lis[i])[2:]\n    for i in range(len(a)):\n      if a[i]=='1':\n        lis2[len(a)-i-1]+=1\n  ss=''\n  lis2.reverse()\n  #print(lis2)\n  for i in lis2:\n    if i>n//2:\n      ss+='1'\n    else:\n      ss+='0'\n  #print(ss)\n  aa=int(ss,2)\n  s=0\n  for i in lis:\n    s+=i^aa\n  print(s)\n", "t = int(input())\nfor _ in range(t):\n n = int(input())\n l = list(map(int,input().split()))\n #print(l)\n \n s = max(l)\n s = bin(s)\n maxbits = len(s)-1\n x = []\n for i in range(maxbits+1):\n  count = 0\n  for j in range(n):\n   if ((2**i)&l[j])==2**i:\n    count+=1 \n  \n  \n   \n  if count>n//2:\n   x.append(1)\n  else:\n   x.append(0)\n x.reverse() \n ans = ''\n \n for i in x:\n  ans+=str(i)\n ans1 = int(ans,2)\n #print(ans1)\n sm=0\n for i in l:\n  sm+=(i^ans1)\n print(sm)\n  \n \n", "# cook your dish here\nfrom math import log2\nt=int(input())\ndef odd(a,n):\n count=0\n for i in range(n):\n  count+=a[i]%2\n if count>=n/2:\n  return 1;\n return 0\ndef divide(a):\n for i in range(len(a)):\n  a[i]=a[i]>>1\n return a;\nfor _ in range(t):\n n=int(input())\n a=list(map(int,input().split()))\n m=a[:]\n time=int(log2(max(a))+1)\n \n i=0\n answer=0\n while i<time:\n  answer+=odd(a,n)*(1<<i)\n  a=divide(a)\n  i+=1\n  \n x=answer;\n # print(x)\n for i in range(n):\n  m[i]=m[i]^x\n # print(a)\n print(sum(m)) \n", "from math import log2 \n\ndef findX(arr, n): \n itr = arr[0] \n for i in range(len(arr)): \n  if(arr[i] > itr): \n   itr = arr[i] \n p = int(log2(itr)) + 1\n X = 0\n for i in range(p): \n  count = 0\n  for j in range(n): \n   if (arr[j] & (1 << i)): \n    count += 1\n  if (count > int(n / 2)): \n   X += 1 << i \n sum = 0\n for i in range(n): \n  sum += (X ^ arr[i]) \n print(sum)\ntry:\n t = int(input())\n for _ in range(t):\n  ss = int(input())\n  arr = list(map(int, input().split()))\n  n = len(arr) \n  findX(arr, n)\nexcept:\n pass", "# # cook your dish here\n# def more_frequent_item(lst):\n#     new_lst = []\n#     times = 0\n#     for item in lst:\n#         count_num = lst.count(item)\n#         new_lst.append(count_num)\n#         times = max(new_lst)\n#     key = max(lst, key=lst.count)\n#     return [key, times]\n# try:\n#     t = int(input())\n#     for _ in range(t):\n#         jk = int(input())\n#         lst = list(map(int, input().split()))\n#         Nlst = [0]*len(lst)\n#         Nlst2 = [0]*len(lst)\n#         z = more_frequent_item(lst)\n#         if z[0] * z[1] > max(lst):\n#             x = z[0]\n#         else:\n#             x = max(lst)\n#         for i in range(len(lst)):\n#             Nlst[i] = lst[i] ^ x\n#         for j in range(len(lst)):\n#             Nlst2[j] = lst[j] ^ z[0]\n#         print(min(sum(Nlst), sum(Nlst2)))\n# except:\n#     pass4\n\nfrom math import log2 \ndef findX(arr, n): \n itr = arr[0] \n for i in range(len(arr)): \n  if(arr[i] > itr): \n   itr = arr[i] \n p = int(log2(itr)) + 1\n X = 0\n for i in range(p): \n  count = 0\n  for j in range(n): \n   if (arr[j] & (1 << i)): \n    count += 1\n  if (count > int(n / 2)): \n   X += 1 << i \n sum = 0\n for i in range(n): \n  sum += (X ^ arr[i]) \n print(sum)\ndef __starting_point(): \n t = int(input())\n for _ in range(t):\n  ss = int(input())\n  arr = list(map(int, input().split()))\n  n = len(arr) \n  findX(arr, n)\n__starting_point()", "# cook your dish here\ntc=int(input())\n\nwhile tc>0:\n n = int(input())\n sum=[]\n s=0\n lis = list(map(int, input().split()))\n\n for i in range(n):\n  x=lis[i]\n  s=0\n  for j in range(n):\n   y=lis[j]\n   s+=y^x\n  sum.append(s)\n print(min(sum))\n tc-=1", "def fun(s):\n su=0\n for j,i in enumerate(s):\n  if i=='1':\n   su+=2**j\n return su\nfor i in range(int(input())):\n n=int(input())\n b=list(map(int,input().split()))\n a=list(str(bin(int(i)))[2:] for i in b)\n m=str(bin(max(b))[2:])\n l=len(m)\n s=''\n for i in range(l):\n  c1=c2=0\n  for j in a:\n   l1=len(j)\n   if l1-i-1>=0:\n    if j[l1-i-1]=='0':\n     c1+=1\n    else:\n     c2+=1\n   else:\n    c1+=1\n  if c1>c2:\n   s+='0'\n  else:\n   s+='1'\n s=fun(s)\n su=0\n for i in b:\n  su+=s^i\n print(su)\n    \n", "# cook your dish here\nfor _ in range(int(input())):\n n = int(input())\n arr = list(map(int, input().split()))\n x, cur_bit = 0, 0 #max bit is the highest value bit (0-indexed)\n bitset = {}\n for ele in arr:\n  while ele:\n   if ele & 1: bitset[cur_bit] = bitset.get(cur_bit,0)+1\n   cur_bit += 1\n   ele >>= 1\n  cur_bit = 0\n for b in bitset:\n  if bitset[b] > n-bitset[b]: x |= (1 << b)\n total = 0\n for ele in arr: total += ele^x\n print(total)\n", "# cook your dish here\nfor _ in range(int(input())):\n n = int(input())\n arr = list(map(int, input().split()))\n x, max_bit = 0, 0 #max bit is the highest value bit (0-indexed)\n bitset = {}\n for ele in arr:\n  for i, bit in enumerate(reversed(bin(ele)[2:])):\n   if bit == '1':\n    bitset[i] = bitset.get(i,0)+1\n   max_bit = max(max_bit, i)\n for b in range(max_bit+1):\n  if b in bitset:\n   if bitset[b] > n-bitset[b]: x |= (1 << b)\n total = 0\n for ele in arr: total += ele^x\n print(total)\n", "# import sys\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\nt = int(input())\n\nfor _ in range(t):\n n = int(input())\n ar = [int(num) for num in input().split()]\n\n res = 0\n for i in range(31):\n  one = zero = 0\n\n  for ele in ar:\n   if ele & (1 << i):\n    one += 1\n   else:\n    zero += 1\n\n  if one > zero:\n   res += zero * (1 << i)\n  else:\n   res += one * (1 << i)\n\n print(res)\n\n\n", "# import sys\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\nt = int(input())\n\nfor _ in range(t):\n n = int(input())\n ar = [int(num) for num in input().split()]\n\n res = 0\n for i in range(31):\n  one = zero = 0\n  x = 1\n\n  for j in range(n):\n   if ar[j] & (x << i):\n    one += 1\n   else:\n    zero += 1\n\n  if one > zero:\n   res += zero * (x << i)\n  else:\n   res += one * (x << i)\n\n print(res)\n\n\n", "# cook your dish here\nfor _ in range(int(input())):\n N = int(input())\n A = list(map(int, input().split()))\n bitCountOne=[0]*31\n bitCountZero=[0]*31\n for a in A:\n  binA=bin(a)[2:][::-1]\n  placeValue=-1\n  for bit in binA:\n   if bit=='1':\n    bitCountOne[placeValue]+=1\n   else:\n    bitCountZero[placeValue]+=1\n   placeValue-=1\n\n binStr=''\n for i in range(31):\n  if bitCountOne[i]>bitCountZero[i]:\n   binStr+='1'\n  else:\n   binStr+='0'\n\n X=int(binStr, 2)\n minSum=0\n for a in A:\n  minSum+=X^a\n print(minSum)\n", "for _ in range(int(input())):\n n=int(input())\n l=list(map(int,input().split()))\n ans=0\n for i in range(32):\n  c=0\n  for x in l:\n   if x&(1<<i):\n    c+=1\n  if c>n//2:\n   ans|=1<<i\n x=0\n for i in l:\n  x+=i^ans \n print(x)\n", "t=int(input())\nwhile (t>0):\n n=int(input())\n x=list(map(int,input().split()))\n max=[]\n for i in x:\n  li=[]\n  for j in x:\n   li.append(i^j)\n  max.append(sum(li))\n print(min(max))\n t=t-1\n", "\n\ntwopow = {}\nfor i in range(31):twopow[i] = 2**i\nfor _ in range(int(input())):\n n,a,b,original_tot = int(input()),list(map(int, input().split())),dict(),0\n for i in range(31):b[i] = 0\n for i in range(n):\n  s = bin(a[i])[2:][::-1];\n  original_tot += a[i]\n  for i in range(len(s)):\n   if s[i] == '1':b[i] += 1\n change = 0\n for x in b:\n  p = b[x]\n  if p > 0:\n   if p > n - p:change += (p - (n - p)) * (twopow[x])\n\n original_tot -= change\n print(original_tot)\n", "\n\ntwopow = {}\nfor i in range(31):twopow[i] = 2**i\nfor _ in range(int(input())):\n n = int(input());a = list(map(int, input().split()));b = dict()\n for i in range(31):b[i] = 0\n original_tot = 0\n for i in range(n):\n  s = bin(a[i])[2:];s = s[::-1];original_tot += a[i]\n  for i in range(len(s)):\n   if s[i] == '1':b[i] += 1\n change = 0\n for x in b:\n  p = b[x]\n  if p > 0:\n   if p > n - p:change += (p - (n - p)) * (twopow[x])\n\n original_tot -= change\n print(original_tot)\n", "\n\ndef solve():\n twopow = {}\n for i in range(31):twopow[i] = 2**i\n for _ in range(int(input())):\n  n = int(input())\n  a = list(map(int, input().split()))\n  b = dict()\n  for i in range(31):b[i] = 0\n  original_tot = 0\n  for i in range(n):\n   s = bin(a[i])[2:]\n   s = s[::-1]\n   original_tot += a[i]\n   for i in range(len(s)):\n    if s[i] == '1':\n     b[i] += 1\n  change = 0\n  for x in b:\n   p = b[x]\n   if p > 0:\n    if p > n - p:\n     change += (p - (n - p)) * (twopow[x])\n\n  original_tot -= change\n  print(original_tot)\n\nsolve()\n\n", "# cook your dish here\nT=int(input())\nfor i in range(T):\n n=int(input())\n a=list(map(int,input().split()))\n #k=a[0]\n \n s=sum(a)*sum(a)\n for j in range(n):\n  q=0\n  k=a[j]\n  for t in range(n):\n   q=q+(k^a[t])\n   \n  s=min(q,s) \n  \n print(s) \n  \n  \n", "# cook your dish here\nT=int(input())\nfor i in range(T):\n n=int(input())\n a=list(map(int,input().split()))\n #k=a[0]\n \n s=sum(a)\n for j in range(n):\n  q=0\n  k=a[j]\n  for t in range(n):\n   q=q+(k^a[t])\n   \n  s=min(q,s) \n  \n print(s) \n  \n  \n"]