["class Solution:\n    def minInteger(self, num: str, k: int) -> str:\n        n=len(num)\n        if k<=0:\n            return num\n        \n        if k>n*(n-1)//2:\n            return ''.join(sorted(list(num)))\n        \n        for i in range(10):\n            idx = num.find(str(i))\n            if idx>=0 and idx<=k:\n                return num[idx]+self.minInteger(num[:idx]+num[idx+1:],k-idx)", "class Solution:\n    def minInteger(self, num: str, k: int) -> str:\n        n=len(num)\n        if k<=0:\n            return num\n        \n        if k>n*(n-1)//2:\n            return ''.join(sorted(list(num)))\n        \n        for i in range(10):\n            idx = num.find(str(i))\n            if idx>=0 and idx<=k:\n                return num[idx]+self.minInteger(num[:idx]+num[idx+1:],k-idx)\n        \n        \n        \n        \n        \n        \n        '''from collections import deque\n        j=0\n        \n        arr=[deque() for i in range(10)]\n        \n        n=len(num)\n        \n        for i in range(n):\n            arr[int(num[i])].append(i)\n            #print(arr)\n        \n        curr=0\n        ans=\\\"\\\"\n        \n        def fun(x,y):\n            l=list(arr[x])\n            l.append(y)\n            l.sort()\n            arr[x]=deque(l)\n        \n        while k>0 and curr<n:\n            ch=None\n            ch_ind=curr\n            for i in range(0,int(num[curr])):\n                if arr[i] and arr[i][0]<=k:\n                    ch=i\n                    ch_ind=arr[i][0]\n                    arr[i].popleft()\n                    break\n                    \n            print(arr,ch,ch_ind,curr,k)\n            if ch:\n                ans+=str(ch)\n                k-=(ch_ind-curr)\n                \n            else:\n                ans+=num[curr]\n                curr+=1\n            print(ans)\n            \n        \n        return ans'''", "class Solution:\n    def minInteger(self, num: str, k: int) -> str:\n        rest = num\n        move = 0\n        s = ''\n        for dig in range(10):\n            count = 0\n            digC = str(dig)\n            for i,c in enumerate(rest):\n                if c == digC:\n                    if k < move + i - count:\n                        rest = rest.replace(digC, '', count)\n                        s += digC * count\n                        remain = k - move\n                        mid = rest[0:remain+1]\n                        while remain:\n                            tmp = min(mid)\n                            for ti, tc in enumerate(mid):\n                                if tc == tmp:\n                                    remain -= ti\n                                    s += tc\n                                    rest = rest.replace(tc, '', 1)\n                                    mid = rest[0:remain+1]\n                                    break\n                        return s + rest\n                    move += i-count\n                    count += 1\n            rest = rest.replace(digC, '')\n            s += digC * count\n        return s\n", "class Solution:\n    def minInteger(self, num: str, k: int) -> str:\n        if k == 0: return num \n        n = len(num)\n        if k >= n*(n+1)//2: return ''.join(sorted(num))\n        for i in range(10):\n            idx = num.find(str(i))\n            if 0<=idx<=k:\n                res = str(i) + self.minInteger(num[:idx]+num[idx+1:], k-idx)\n                return res ", "class Solution:\n    def minInteger(self, num: str, k: int) -> str:\n        min_num = ''.join(sorted(list(num)))\n        i = 0\n        to_find = 0\n        while num != min_num and k > 0 and i < len(num):\n            index = num.find(str(to_find), i)\n            while index != -1:\n                if index - i <= k:\n                    num = num[:i] + num[index] + num[i:index] + num[index + 1:]\n                    k -= (index - i)\n                    i += 1\n                    to_find = 0\n                    index = num.find(str(to_find), i)\n                else:\n                    break\n            to_find += 1\n        return num", "class Solution:\n    ''' greedy approach. start from the left side, \n\\t    and everytime pick the smallest number on the right side that is able to swap, then do the swap\n    '''\n    def minInteger(self, num: str, k: int) -> str:\n        min_num = sorted(list(num))\n        min_num = ''.join(min_num)\n        i = 0\n        to_find = 0\n        while num != min_num and k > 0 and i < len(num):\n            indx = num.find(str(to_find), i)\n            while indx != -1:\n                if indx - i <= k:   # able to swap\n                    num = num[:i] + num[indx] + num[i:indx] + num[indx+1:]  # the swap\n                    k -= (indx - i)\n                    i += 1\n                    to_find = 0     # restart the to_find variable\n                    indx = num.find(str(to_find), i)\n                else:\n                    break\n            to_find += 1\n        return num", "class Solution:\n    def minInteger(self, num: str, k: int) -> str:\n        n = len(num)\n        if k >= (n-1)*n//2:\n            return ''.join(sorted(num))\n        \n        ans = []\n        while k and num:\n            for d in '0123456789':\n                i = num.find(d)\n                if 0 <= i <= k:\n                    ans.append(d)\n                    num = num[:i] + num[i+1:]\n                    k -= i\n                    break\n\n        return ''.join(ans) + num", "class Solution:\n    def minInteger(self, num: str, k: int) -> str:\n        n = len(num)\n        if k <= 0:\n            return num\n        if k >= (n+1)*n//2:\n            return ''.join(sorted(num))\n        \n        for i in range(10):\n            index = num.find(str(i))\n            if 0 <= index <= k:\n                return str(num[index]) + self.minInteger(num[:index]+num[index+1:], k-index)\n            \n        return num", "class Solution:\n    def minInteger(self, num: str, k: int) -> str:\n        if k <= 0:\n            return num\n        for i in range(10):\n            ind = num.find(str(i))\n            if 0 <= ind <= k:\n                return str(num[ind]) + self.minInteger(num[0:ind] + num[ind+1:], k - ind)\n        return num", "class Solution:\n    def minInteger(self, num: str, k: int) -> str:\n        D = 10\n        ans = num\n        for d in range(D):\n            i = num.find(str(d))\n            if i < 0:\n                continue\n            cost = i\n            if cost > k:\n                continue\n            if i == 0:\n                return num[i] + self.minInteger(num[i + 1:], k)\n            return num[i] + self.minInteger(num[:i] + num[i + 1:], k - cost)\n        return num"]