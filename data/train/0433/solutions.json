["class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        if len(arr) < k:\n            return 0\n        bar = k * threshold\n        total = 0\n        window = sum(arr[:k])\n        if window >= bar:\n            total += 1\n        for i in range(k, len(arr)):\n            window -= arr[i - k]\n            window += arr[i]\n            if window >= bar:\n                total += 1\n        return total", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        s = threshold*k\n        s1 = sum(arr[:k])\n        n = len(arr)\n        c = 0\n        if s1>=s:\n            c+=1\n        for i in range(k,n):\n            s1 -= arr[i-k]\n            s1 += arr[i]\n            if s1>=s:\n                c+=1\n        return c", "class Solution:\n    def numOfSubarrays(self, nums: List[int], k: int, target: int) -> int:\n        target *= k\n        ans = 0\n        summ = 0\n        for i,n in enumerate(nums):\n            if i >= k:\n                summ -= nums[i - k]\n                \n            summ += n\n            \n            if i >= k - 1:\n                if summ >= target:\n                    ans += 1\n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        # sliding window\n        minVal = k * threshold\n        \n        beg = 0\n        end = k - 1\n        total = 0\n        currSum = 0\n        \n        for i in range(beg, end+1):\n            currSum += arr[i]\n\n        while end < len(arr):\n            if beg != 0:\n                currSum = currSum - arr[beg - 1] + arr[end] \n            \n            if currSum >= minVal:\n                total+= 1\n            beg += 1\n            end += 1\n            \n        return total", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        # subarry, not sub elements, can be resolved by using running sum\n        \n        cur = 0\n        res = 0\n        for i in range(k):\n            cur += arr[i]\n        if cur / k >= threshold:\n            res += 1\n        for i in range(k, len(arr)):\n            cur = cur + arr[i] - arr[i - k]\n            if cur / k >= threshold:\n                res += 1\n        return res", "class Solution:\n    def numOfSubarrays(self, a: List[int], k: int, threshold: int) -> int:\n        prefixSum = [0]\n        for i in a:\n            prefixSum.append(i + prefixSum[-1])\n        return sum(prefixSum[i + k] - prefixSum[i] >= k * threshold for i in range(len(a) - k + 1))\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        start = 0\n        end = k\n\n        count = 0\n\n        #Sum the values initially as a buffer\n        sumInit = sum(arr[start:end])                                   \n\n        #To check if the average exceeds threshold if yes increase count by 1\n        if ((sumInit / k) >= threshold):                                \n            count += 1\n\n        #To check end is within limits\n        while end < len(arr):   \n            #Subtract the start and end\n            sumInit = sumInit - arr[start] + arr[end]\n            #Check if average exceeds threshold\n            if ((sumInit / k) >= threshold):\n                count += 1\n            start += 1\n            end += 1\n\n\n\n        return count", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        if len(arr) < k:\n            return 0\n        \n        prevAverage = 0\n        counter = 0\n        for i in range(len(arr)-k+1):\n            if i == 0:\n                average = sum(arr[i:i+k])/k\n            else:\n                average = (prevAverage*k - (arr[i-1]) + arr[i+k-1])/k\n                \n            if average >= threshold:\n                counter+=1\n                \n            #print(arr[i:i+k], prevAverage, average)\n                \n            prevAverage = average\n            \n        return counter", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        start = 0\n        count = 0\n        threshold = threshold * k\n        avg = sum(arr[start:k])\n        i = k\n        while i <= len(arr):\n            if start != 0:\n                avg = avg - arr[start-1] + arr[i-1]\n            if avg >= threshold:\n                count += 1\n                start += 1\n                i = start + k\n            else:\n                start += 1\n                i += 1\n        \n        return count\n        \n        \n        \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        i, j = 0, k-1\n        total = sum(arr[i: j+1])\n        target = threshold * k\n        res = 0\n        if total >= target:\n            res += 1\n        while j < len(arr) - 1:\n            total -= arr[i]\n            i += 1\n            j += 1\n            total += arr[j]\n            if total >= target:\n                res += 1\n        return res\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        dp=[0]*len(arr)\n        dp[0]=arr[0]\n        for i in range(1,len(arr)):\n            dp[i]=dp[i-1]+arr[i]\n        cn=0\n        for i in range(k-1,len(arr)):\n            if i==k-1:\n                if dp[i]//k>=threshold:\n                    cn+=1\n            else:\n                if (dp[i]-dp[i-k])//k>=threshold:\n                    cn+=1\n        return cn", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        target = k * threshold\n        curr_sum = sum(arr[:k])\n        res = 1 if curr_sum >= target else 0\n        \n        for i in range(k, len(arr)):\n            curr_sum = curr_sum - arr[i - k] + arr[i]\n            if curr_sum >= target:\n                res += 1\n        \n        return res\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        c=0\n        a=0\n        f=0\n        for i in range(len(arr)):\n            a=a+1\n            c=c+arr[i]\n            if a>=k:\n                if c/k>=threshold:\n                    f=f+1\n                c=c-arr[i-a+1]\n                a=a-1\n        return f            \n                    \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        \n        size = len(arr)\n        \n        avg = sum(arr[:k]) / k\n        count = 1 if avg >= threshold else 0\n        \n        end = k\n        \n        while end < size:\n            prevVal = arr[end-k] / k\n            nextVal = arr[end] / k\n            \n            avg += nextVal - prevVal\n            \n            count += 1 if avg >= threshold else 0\n            end += 1\n            \n        return count\n        \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        total = sum(arr[:k])\n        result = 0\n        for i in range(k, len(arr) + 1):\n            avg = total / k\n            if avg >= threshold:\n                result += 1\n            \n            if i < len(arr):\n                left = arr[i-k]\n                right = arr[i]\n                total -= left\n                total += right\n        \n        return result\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, t: int) -> int:\n        cur = 0\n        ans = 0\n        for i in range(len(arr)):\n            cur += arr[i]\n            if i>=k:\n                cur -= arr[i-k]\n            if i>=k-1 and cur >= k*t:\n                ans += 1\n        return ans\n                \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        \n        presum = [0]\n        \n        for num in arr:\n            presum.append( presum[-1]+num )\n        \n        res = 0\n        i=0\n        while i+k < len(presum):\n            if presum[i+k]-presum[i] >= threshold*k:\n                res += 1\n            i+= 1\n        \n        return res", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        c=0\n        a=0\n        f=0\n        for i in range(len(arr)):\n            a=a+1\n            c=c+arr[i]\n            while a>=k:\n                if c/k>=threshold:\n                    f=f+1\n                c=c-arr[i-a+1]\n                a=a-1\n        return f            \n                    \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        ans, sm = 0, 0\n        q = deque()\n        \n        for v in arr:\n            sm += v\n            q.append(v)\n            \n            if len(q) > k:\n                sm -= q.popleft()\n            \n            if len(q) == k:\n                ans += ((sm/k) >= threshold)\n        \n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        n = len(arr)\n        target = threshold * k\n        n_subarrays = n - k + 1\n        \n        curr_sum = sum(arr[0:k])\n        count    = 0 if (curr_sum < target) else 1\n\n        for i in range(1, n_subarrays):\n            curr_sum += (-arr[i-1] + arr[i+k-1])\n            count = count if (curr_sum < target) else (count + 1)\n            \n        return count\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        if not arr or len(arr) < k:\n            return 0\n        \n        summ = [0]\n        res = 0 \n        for p, v in enumerate(arr):\n            i = p+1  \n            summ.append(summ[p] + v)\n            if i-k >= 0:\n                if (summ[i] - summ[i-k]) / k >= threshold:\n                    res +=1 \n        \n        return res\n            \n            \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        rep=0\n        target=k*threshold\n        \n        cur=sum(arr[:k])\n        if cur>=target:\n            rep+=1\n        l,r=0,k\n        while r<len(arr):\n            cur-=arr[l]\n            cur+=arr[r]\n            l+=1\n            r+=1\n            if cur>=target:\n                rep+=1\n        return rep", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        \n        answer = 0\n        \n        initial_sum = sum(arr[:k])\n        \n        for i in range(len(arr) - k + 1):\n            if i == 0:\n                if initial_sum / k >= threshold:\n                    answer += 1\n            else:\n                initial_sum = initial_sum - arr[i - 1] + arr[i + k - 1]\n                if initial_sum / k >= threshold:\n                    answer += 1\n                \n        return answer", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        threshold *= k\n        window = 0\n        ans = 0\n        for r, num in enumerate(arr):\n            window += num\n            if r >= k:\n                window -= arr[r - k]\n            if r >= k - 1 and window >= threshold:\n                ans += 1\n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        ans = 0\n        \n        n = len(arr)\n        start = 0\n        end = 0\n        \n        presum = [0]\n        \n        for num in arr:\n            presum.append(presum[-1]+num)\n        \n        for i in range(0,n-k+1):\n            \n            \n            if (presum[i+k]-presum[i]) / k >= threshold:\n                # print(arr[start:end])\n                ans += 1\n        \n            \n        return ans\n            \n            \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        #### Sliding window problem\n        \n        ### Edge case\n        if len(arr) < k: return None\n        \n        ###Initialize variables and this is required to initilize the first condition as in the while loop\n        ### k_sum = k_sum - arr[p1] + arr[p2] already take to next k+1 calculation\n        k_sum = sum([arr[i] for i in range(0,k)])\n        count = 0\n        p1, p2 = 0, k\n        \n        if k_sum/k >= threshold: count+= 1\n        \n        while p2 < len(arr):\n\n            k_sum = k_sum - arr[p1] + arr[p2]\n                \n            if k_sum/k >= threshold: count+= 1\n\n        \n        \n            p1 += 1\n            p2 += 1\n        \n        return count\n        \n        \n        \n    \n        \n        \n#         ## Backtacking time out!\n#         res = []\n        \n#         def helper(start_pos = 0, curr_arr = []):\n#             if len(curr_arr) == k and mean(curr_arr) >= threshold:\n#                 res.append(curr_arr[:])\n#             elif len(curr_arr) == k:\n#                 return\n#             else:\n#                 curr_arr.append(arr[start_pos])\n                \n#                 helper(start_pos = start_pos + 1, curr_arr = curr_arr)\n                \n#                 curr_arr.pop()\n        \n        \n#         for i in range(len(arr) - k + 1):\n#             helper(start_pos = i, curr_arr = [])\n        \n#         return len(res)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        sm = threshold * k\n        ct = 0\n        tot = 0\n        for i in range(len(arr)):\n            tot += arr[i]\n            if i < k - 1: continue\n            if i > k - 1: tot -= arr[i - k]\n            if tot >= sm: ct += 1\n        return ct\n            \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        n=len(arr)\n        a=[0]*(n+1)\n        for i in range(1,n+1):\n            a[i]=arr[i-1]+a[i-1]\n        cnt=0\n        for i in range(k,n+1):\n            res=a[i]-a[i-k]\n            if(res/k>=threshold):\n                cnt+=1\n        return cnt\n            \n", "class Solution:\n    def __init__(self):\n        self.counter = 0\n        self.threshold = 0\n        self.k = 0\n\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        self.k = k\n        self.threshold = threshold\n\n        interval = sum(arr[:k])\n        self._count_if_slice_sum_passes_threshold(interval)\n\n        left = 0\n        while left + k < len(arr):\n            interval -= arr[left]\n            left += 1\n            right = left + k - 1\n            interval += arr[right]\n            self._count_if_slice_sum_passes_threshold(interval)\n        return self.counter\n\n    def _count_if_slice_sum_passes_threshold(self, slice):\n        if slice / self.k >= self.threshold:\n            self.counter += 1", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        temp = sum(arr[:k])\n        count = 0 if temp / k < threshold else 1\n        \n        for i in range(k, len(arr)):\n            temp = temp - arr[i - k] + arr[i]\n            if temp / k >= threshold:\n                count += 1\n            \n        \n        return count", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        s = l = 0\n        for r in range(k):\n            s += arr[r]\n        ans = 0\n        while(r < len(arr)-1):\n            if(s >= threshold*k):\n                ans += 1\n            s -= arr[l]\n            l += 1\n            r += 1\n            s += arr[r]\n        ans += (s >= threshold*k)\n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        if k > len(arr):\n            return 0\n        \n        min_sum = k * threshold\n        \n        # first sum!\n        running_sum = sum(arr[0:k])\n        \n        if running_sum >= min_sum:\n            count = 1\n        else:\n            count = 0\n        \n        for i in range(len(arr) - k):\n            running_sum -= arr[i]\n            running_sum += arr[i + k]\n            if running_sum >= min_sum:\n                count += 1\n            \n        return count\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        ans = 0\n        x = 0\n        running_sum = sum(arr[0:k])\n        if running_sum/k >= threshold: ans+=1\n        for x in range(len(arr)-k):\n            running_sum+=arr[k+x]-arr[x]\n            if running_sum/k >= threshold: ans+=1\n        return ans\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        averages = []\n        first = True\n        sum_avg = 0\n        for i in range(len(arr) - (k - 1)):\n            if first:\n                for j in range(k):\n                    sum_avg += arr[i + j]\n                first = False\n            else:\n                sum_avg -= arr[i - 1]\n                sum_avg += arr[i + (k - 1)]\n            averages.append(sum_avg / k)\n        averages.sort(reverse=True)\n        i = 0\n        while i < len(averages) and averages[i] >= threshold:\n            i += 1\n        return i", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        l,r = 0,k-1\n        temp = 0\n        for i in range(l, r+1):\n            temp += arr[i]\n        res = 0 if temp<k*threshold else 1\n        while r<len(arr)-1:\n            temp += arr[r+1]-arr[l]\n            r += 1\n            l += 1\n            if temp >= k*threshold:\n                res += 1\n        return res\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        for i in range(1,len(arr)):\n            arr[i]+=arr[i-1]\n        counter=0\n        for i in range(len(arr)):\n            if i-k>=0:\n                if (arr[i]-arr[i-k])/k>=threshold:\n                    counter+=1\n            elif i-k==-1:\n                if arr[i]/k>=threshold:\n                    counter+=1\n        return counter\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        l = 0\n        r = k - 1\n        total = sum(arr[0:k])\n        if total/k >= threshold:\n            count = 1\n        else:\n            count = 0\n        \n        while r < len(arr) - 1:\n            total -= arr[l]\n            l += 1\n            r += 1\n            total += arr[r]\n            if total/k >= threshold:\n                count += 1\n        \n        return count\n            \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        i=0\n        j=i+k\n        s=sum(arr[i:j])\n        c=0\n        while(j<=len(arr)):\n            if(s//k>=threshold):\n                #print(s,arr[i:j])\n                c+=1\n            s-=arr[i]\n            if(j<len(arr)):\n                s+=arr[j]\n            j+=1\n            i+=1\n        return c", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        ans = 0\n        total = 0\n        if len(arr) < k:\n            return 0\n        else:\n            for i in range(k):\n                total += arr[i]\n            if float(total/k) >= threshold:\n                ans += 1    \n                \n            i = k\n            while i < len(arr):                \n                total += arr[i] - arr[i-k]\n                if float(total/k) >= threshold:\n                    ans += 1\n                i += 1\n            return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        if len(arr)<k:\n            return 0\n        store=[0]*len(arr)\n        i=0\n        j=0\n        ans=0\n        while i<len(arr):\n            if i-j+1==k:\n                if j==0:\n                    store[i]=store[i-1]+arr[i]\n                else:\n                    store[i]=store[i-1]+arr[i]-arr[j-1]\n                if store[i]//k>=threshold:\n                    ans=ans+1\n                j=j+1\n                i=i+1\n            else:\n                if i==0:\n                    store[i]=arr[i]\n                else:\n                    store[i]=arr[i]+store[i-1]\n                i=i+1\n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        goal = k * threshold\n        cSums = [0 for i in arr]\n        c = 0\n        for i in range(len(arr)):\n            if i == 0:\n                cSums[0] = arr[0]\n            else:\n                cSums[i] = cSums[i-1] + arr[i]\n            if i == k-1:\n                if cSums[i] >= goal:\n                    c += 1\n            elif i >= k:\n                if cSums[i] - cSums[i-k] >= goal:\n                    c += 1\n        print(cSums)\n        return c", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        sumThreshold = k*threshold\n        arrLength = len(arr)\n        currentSum = 0##be sure you always define local variables before calling them...\n        for i in range(k):\n            currentSum += arr[i]\n        count = 0\n        if currentSum >= sumThreshold:\n            count += 1\n        for i in range(k,arrLength):\n            currentSum += arr[i]-arr[i-k]\n            if currentSum >= sumThreshold:\n                count += 1\n        return count\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        # establish the first sum\n        s = 0\n        ret = 0\n        for i, num in enumerate(arr):\n            if i - k < 0:\n                s += num\n                if s >= threshold * k and i == k-1:\n                    ret += 1\n                    print(i)\n                continue\n            s -= arr[i-k]\n            s += num\n            if s >= threshold * k:\n                ret += 1\n                print(i)\n        return ret\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        s=0\n        c=0\n        for i in range(k):\n            s=s+arr[i]\n        if(s/k>=threshold):\n            c=c+1\n        for i in range(k,len(arr)):\n            s=s+arr[i]\n            s=s-arr[i-k]\n            if(s/k>=threshold):\n                c=c+1\n        return c\n        \n                \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        \n        output = 0\n    \n        #calculate initial sum\n        summ = 0\n        for i in range(k):\n            summ += arr[i]\n\n        #check initial summ for avg\n        if summ / k >= threshold:\n            output += 1\n\n        for i in range(k, len(arr)):\n            summ = summ + arr[i] - arr[i-k]\n            if summ / k >= threshold:\n                output += 1\n\n        return output", "class Solution:\n    def numOfSubarrays(self, a: List[int], k: int, threshold: int) -> int:\n        lo, sum_of_win, cnt, target = -1, 0, 0, k * threshold\n        for hi, v in enumerate(a):\n            sum_of_win += v\n            if hi - lo == k:\n                if sum_of_win >= target:\n                    cnt += 1\n                lo += 1   \n                sum_of_win -= a[lo]\n        return cnt\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        res = 0\n        s = sum(arr[:k-1])\n        t = threshold * k\n        for i in range(k - 1, len(arr)):\n            s += arr[i]\n            if s >= t:\n                res += 1\n            s -= arr[i+1-k]\n        return res", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        target = k * threshold\n        s, ans = 0, 0\n        for i, num in enumerate(arr):\n            if i < k:\n                s += num\n                continue\n            if s >= target:\n                ans += 1  \n            s = s - arr[i - k] + arr[i]\n        if s >= target:\n            ans += 1\n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        tmp = [sum(arr[:k])]\n        \n        for i in range(k, len(arr)):\n            temp = tmp[-1]\n            temp = temp - arr[i - k] + arr[i]\n            tmp.append(temp)\n            \n        print(tmp)\n        \n        count = 0\n        \n        for el in tmp:\n            if el / k >= threshold:\n                count += 1\n        \n        return count", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        p = k - 1\n        res = 0\n        s = sum(arr[:k-1])\n        t = threshold * k\n        for i in range(k - 1, len(arr)):\n            s += arr[i]\n            if s >= t:\n                res += 1\n            s -= arr[i+1-k]\n        return res", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        threshold*=k\n        n = len(arr)\n        l=0\n        tmp_sum=0\n        count=0\n        for i in range(k):\n            tmp_sum+=arr[i]\n        if tmp_sum>=threshold:\n            count+=1\n        for l in range(n-k):\n            tmp_sum-=arr[l]\n            r=l+k\n            tmp_sum+=arr[r]\n            if tmp_sum>=threshold:\n                count+=1\n        return count\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        l = len(arr)\n        ans = 0\n        x = 0\n        running_sum = sum(arr[0:k])\n        if running_sum/k >= threshold: ans+=1\n        while k+x < l:            \n            running_sum+=arr[k+x]-arr[x]\n            if running_sum/k >= threshold: ans+=1\n            x+=1\n        return ans\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        ans = 0\n        total = 0\n        threshold = k*threshold\n        if len(arr) < k:\n            return 0\n        else:\n            #check the first k numbers\n            for i in range(k):\n                total += arr[i]\n            if total >= threshold:\n                ans += 1    \n            \n            #slide window to the right 1\n            i = k\n            while i < len(arr):                \n                total += arr[i] - arr[i-k]\n                if total >= threshold:\n                    ans += 1\n                i += 1\n            return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        run = [0]\n        for i in range(len(arr)):\n            run.append(run[-1] + arr[i])\n        res = 0\n        for i in range(k, len(arr) + 1):\n            if (run[i] - run[i - k]) / k >= threshold:\n                res += 1\n        return res", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        curr = sum(arr[:k])\n        ans = 1 if curr >= threshold*k else 0\n        for i in range(k, len(arr)):\n            curr += arr[i]\n            curr -= arr[i-k]\n            # print(curr)\n            if curr >= threshold*k:\n                ans += 1\n        return ans\n            \n", "class Solution:\n    def numOfSubarrays(self, A, k, target):     \n        # NOTE:\n        #     - Since avg = sum/k , and \\\"k\\\" is fixed, we can work with the (minimum) \\\"sum\\\" directly \n        #     - So we can multiple \\\"target\\\" by \\\"k\\\"\n        target *= k\n        #\n        # s: temporary \\\"sum\\\" for the latest sub-array of size k\n        s = 0\n        for i in range(k):\n            s += A[i]\n        # res: Final result counter\n        res     = 1 if s>=target else 0\n        #\n        for i in range( len(A) - k ):\n            s   += - A[i] + A[i+k]\n            res += 1 if s>=target else 0\n        return res", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        start = 0\n        s = 0\n        count=0\n        for end in range(len(arr)):\n            s = s + arr[end]\n            if end-start+1 == k:\n                if s/k >= threshold:\n                    count+=1\n                s-=arr[start]\n                start+=1\n        return count\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        l, r = 0, k - 1\n        res = 0\n        s = sum(arr[:k])\n        t = threshold * k\n        while r < len(arr):\n            if s >= t:\n                res += 1\n            if r + 1 < len(arr):\n                s = s - arr[l] + arr[r + 1]\n            l += 1\n            r += 1\n        return res", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        c = 0\n        s = sum(arr[:k])\n        if s/k >=threshold :\n                c=1\n        i = 1\n        while i<= len(arr) - k:\n            s = s - arr[i-1] + arr[i+k-1]\n            if s/k >=threshold :\n                c+=1\n            i+=1\n        return c", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        total = 0\n        \n        subarray = 0\n        for i in range(k):\n            subarray += arr[i] \n        average = subarray / k\n        \n        if average >= threshold:\n            total += 1\n        \n        for i in range(len(arr) - k):\n            subarray = subarray - arr[i] + arr[i + k]\n            average = subarray / k\n            if average >= threshold:\n                total += 1\n        \n        \n        return total", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        # lst_set = set()\n        # arr_sort = sorted(arr, reverse = True)\n\n        rolling_sum = sum(arr[:k])\n        count = 0 if rolling_sum < threshold * k else 1\n        for i in range(len(arr) - k):\n            rolling_sum  = rolling_sum - arr[i] + arr[i + k]\n            if rolling_sum >= threshold * k:\n                count += 1\n        return count\n\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        c = 0\n        i = 0\n        s = sum(arr[:k])\n        while i<= len(arr) - k:\n            if i>0:\n                s = s - arr[i-1] + arr[i+k-1]\n            if s/k >=threshold :\n                c+=1\n            i+=1\n        return c", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        res, curr = 0, 0\n        for i, v in enumerate(arr):\n            curr += v\n            if i >= k:\n                curr -= arr[i-k]\n            if i >= k-1 and curr / k >= threshold:\n                res += 1\n        return res", "class Solution:\n    def numOfSubarrays(self, arr, k, threshold) -> int:\n        s = 0\n        sub = arr[0:k]\n        subSum = sum(sub)\n        avg = subSum/k\n        if avg >= threshold:\n            s += 1\n        i = k\n        j = 0\n        while i < len(arr):\n            subSum += arr[i]\n            subSum -= arr[j]\n            j += 1\n            i += 1\n            avg = subSum / k\n            if avg >= threshold:\n                s += 1\n        return s\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        ans = 0\n        running_sum = sum(arr[0:k])\n        if running_sum/k >= threshold: ans+=1\n        for x in range(len(arr)-k):\n            running_sum+=arr[k+x]-arr[x]\n            if running_sum/k >= threshold: ans+=1\n        return ans\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        answer = 0\n\n        avg = average(arr[0:k])\n        prev_el = arr[0]\n\n        if avg >= threshold: answer += 1\n\n        for i in range(k, len(arr)):\n            new_avg = (avg * k - prev_el + arr[i]) / k\n            if new_avg >= threshold: answer += 1\n            avg = new_avg\n            prev_el = arr[i-k+1]\n\n        return answer\n\ndef average(l):\n    return sum(l) / len(l)"]