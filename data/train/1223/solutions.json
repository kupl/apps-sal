["t=int(input())\n \ndef vsense(val,a,l):\n sense=0\n ctr=a\n for c in range(n):\n  if val[c]<=ctr:\n   sense+=-1\n  else:\n   sense+=1\n  ctr+=l\n return sense\n \nwhile t:\n n,l,a,b=list(map(int,input().split()))\n val=list(map(int,input().split()))\n val.sort()\n sense=0\n if b==a+n*l or vsense(val,a,l)<=0:\n  loc=a\n else:\n  st=a\n  end=b-n*l\n  while st<=end:\n   m=(st+end)/2\n   chk=vsense(val,m,l)\n   if chk==0:\n    loc=m\n    break\n   elif chk<0:\n    end=m-1\n   else:\n    loc=m\n    st=m+1\n ans=0\n st=loc\n for c in range(n):\n  ans+=abs(st-val[c])\n  st+=l\n print(ans)\n \n t-=1\n", "T = eval(input())\ndef diff(seqA, seqB):\n d = 0\n for i in range(len(seqA)):\n  d += abs(seqA[i]- seqB[i])\n return d\ndef gen_seq(start, L, N):\n return [start + i*L for i in range(N)]\n\n\ndef binSearch(s,e,ll,L,N):\n # find the middle item\n if s==e:\n  return diff(ll,gen_seq(s,L,N))\n\n mid = int((s+e)/2)\n if diff(ll,gen_seq(mid,L,N)) > diff(ll,gen_seq(mid+1,L,N)):\n  # we go left \n  return binSearch(mid+1,e,ll,L,N)\n else:\n  return binSearch(s,mid,ll,L,N)\n  #we go right\n\n\n\n\nwhile T>0:\n T-=1\n\n N,L,A,B = list(map(int,input().split()))\n ll = list(map(int,input().split()))\n ll = sorted(ll)\n\n lastpossible = B - L\n startA = A\n\n # the one for which the last one remains there in range \n lastA = int((B-L) - (N-1)*L)\n # print \"N %d L %d A %d B %d\" % (N,L,A,B)\n # print \"startA %d, lastA %d\" %(startA,lastA)\n # print(lastA - startA)/(1.0*L)\n\n seq_cost_beg = diff(ll,gen_seq(startA,L,N)) \n seq_cost_end = diff(ll,gen_seq(lastA,L,N)) \n\n\n # print min(seq_cost_beg, seq_cost_end)\n\n print(binSearch(startA,lastA,ll,L,N))\n\n\n\n\n # for j in range(startA,lastA+1):\n #     leg_seq = gen_seq(j,L,N)\n #     print ll,leg_seq,diff(ll,leg_seq)   \n # print \"-------------\"\n"]