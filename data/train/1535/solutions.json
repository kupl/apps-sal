["# cook your dish here\ndef solve(edges,ans):\n n = len(edges)\n visited = set()\n parents = [-1]*(n+1)\n dp = [0]*(n+1)\n stack = [1]\n w = float('inf')\n x = -1\n while stack:\n  node = stack[-1]\n  if node not in visited:\n   count = 0\n   for kid in edges[node]:\n    if parents[kid] == -1:\n     if kid != 1:\n      parents[kid] = node\n    else:\n     if kid != parents[node]:\n      if kid in visited:\n       count += 1\n      else:\n       stack.append(kid)\n\n   if node == 1:\n    count -= 1\n   if count == len(edges[node])-1:\n    stack.pop()\n    visited.add(node)\n    max_val = 0\n    for kid in edges[node]:\n     dp[node] += dp[kid]\n     max_val = max(max_val,dp[kid])\n\n    dp[node] += 1\n\n    max_val = max(max_val,n-dp[node])\n    if max_val < w:\n     w = max_val\n     x = node\n    elif max_val == w:\n     x = min(x,node)\n\n ans.append(str(x)+' '+str(w))\n  \ndef main():\n t = int(input())\n ans = []\n for i in range(t):\n  n = int(input())\n  edges = {}\n  for j in range(1,n+1):\n   edges[j] = []\n\n  for j in range(n-1):\n   x,y = list(map(int,input().split()))\n   edges[x].append(y)\n   edges[y].append(x)\n\n  solve(edges,ans)\n\n print('\\n'.join(ans))\n\nmain()\n"]