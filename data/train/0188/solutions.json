["class Solution:\n     V1 = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\",\n           \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n     V2 = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n     V3 = [\"Thousand\", \"Million\", \"Billion\"]\n \n     def numberToWords(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return \"Zero\"\n         \n         answer = self.convert_hundred(num % 1000)\n         for i in range(3):\n             num //= 1000\n             \n             if num % 1000 > 0:\n                 following = \" \" + answer if answer else \"\"\n                 answer = self.convert_hundred(num % 1000) + \" \" + self.V3[i] + following\n \n         return answer\n \n     def convert_hundred(self, num):\n         answer = \"\"\n         \n         a = num // 100\n         b = num % 100\n         c = num % 10\n         \n         if b < 20:\n             answer = self.V1[b]\n         else:\n             following = \" \" + self.V1[c] if c > 0 else \"\"\n             answer = self.V2[b // 10] + following\n         \n         if a > 0:\n             following = \" \" + answer if answer else \"\"\n             answer = self.V1[a] + \" Hundred\" + following\n         \n         return answer\n", "class Solution:\n     def parseHundred(self, n):\n         to19 = 'One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen Fourteen Fifteen Sixteen Seventeen Eighteen Nineteen'.split()\n         tens = 'Twenty Thirty Forty Fifty Sixty Seventy Eighty Ninety'.split()\n         \n         if n == 0:\n             return ''\n         \n         w = \"\"\n \n         while n > 0:\n             if n > 99:\n                 digit = n//100\n         \n                 w += to19[digit-1] + ' ' + 'Hundred'\n                 n = n % 100\n                 \n                 if n != 0:\n                     w += ' '\n                 \n             else:\n                 if n <= 19:\n                     w +=  to19[n-1]\n                     n = 0\n                 else:\n                     digit = n// 10\n                     w += tens[digit-2] \n                     n = n % 10\n                     \n                     if n != 0:\n                         w += ' '\n                     \n         return w\n                             \n         \n     def numberToWords(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         thousands = ['', ' Thousand ', ' Million ', ' Billion ']\n         i = 0\n         w = \"\"\n         \n         if num == 0:\n             return 'Zero'\n         \n         while num > 0:\n             digits = num % 1000\n             if digits != 0:\n                 w = self.parseHundred(digits) +  thousands[i] + w\n             num = num//1000\n             \n             i += 1\n             \n         return w.strip()\n         \n", "class Solution:\n     def numberToWords(self, num):\n         return ' '.join(self.words(num)) or 'Zero'\n         \n         \n     def words(self, n):\n         print(n)\n         to19 = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\n         tens = ['Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety',]\n                         \n         if n < 20:\n             return to19[n - 1: n]\n         if n < 100:\n             return [tens[n//10 - 2]] + self.words(n%10)\n         if n < 1000:\n             return [to19[n//100 - 1]] + ['Hundred'] + self.words(n%100)\n             \n         for p, w in enumerate(('Thousand', 'Million', 'Billion'), 1):\n             if n < 1000**(p + 1):\n                 return self.words(n//1000**p)  + [w] + self.words(n%1000**p)\n         \n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n", "class Solution:\n     def numberToWords(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num==0:\n             return \"Zero\"\n         res=\"\"\n         less20=[\"Zero\",\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\",\"Ten\",\"Eleven\",\"Twelve\",\"Thirteen\",\"Fourteen\",\"Fifteen\",\"Sixteen\",\"Seventeen\",\"Eighteen\",\"Nineteen\"]\n         tens=[\"Zero\",\"Ten\",\"Twenty\",\"Thirty\",\"Forty\",\"Fifty\",\"Sixty\",\"Seventy\",\"Eighty\",\"Ninety\"]\n         thousands=[\"\",\"Thousand\",\"Million\",\"Billion\"]\n         for k in range(4):\n             if num ==0:\n                 break\n             cur=\"\"\n             curNum=num%1000\n             num//=1000\n             print((\"num\",num))\n             if curNum>=100:\n                 x=curNum//100\n                 curNum%=100\n                 cur=less20[x]+\" Hundred\"\n             if curNum>0:\n                 if cur:\n                     cur+=\" \"\n                 if curNum<20:\n                     cur+=less20[curNum]\n                 else:\n                     x=curNum//10\n                     curNum%=10\n                     cur+=tens[x]\n                     if curNum!=0:\n                         cur+=\" \"+less20[curNum]\n             print(\"cur\")\n             if cur:\n                 res=cur+((\" \"+thousands[k] if k else\"\")) +((\" \"+res if res else\"\"))\n         return res\n", "class Solution:\n     def __init__(self):\n         self.twenties = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten',\n                       'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\n         self.tens = ['', 'Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n         self.thousands = ['', 'Thousand', 'Million', 'Billion']\n         \n     def numberToWords(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return 'Zero'\n         \n         result = ''\n         for i in range(len(self.thousands)):\n             if num % 1000 != 0:\n                 result = self.helper(num%1000) + self.thousands[i] + ' ' + result\n             num //= 1000\n     \n         return result.strip()\n     \n     def helper(self, num):\n         if num == 0:\n             return ''\n         elif num < 20:\n             return self.twenties[num] + ' '\n         elif num < 100:\n             return self.tens[num//10] + ' ' + self.helper(num%10)\n         else:\n             return self.twenties[num//100] + ' Hundred ' + self.helper(num%100)\n", "class Solution:\n     def numberToWords(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n \n         # special case 0\n         def translate(num):\n             if num == 0: return ''\n             less20 = [\n                 '', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'\n                 , 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen'\n                 , 'Eighteen', 'Nineteen'\n             ]\n \n             more20 = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n \n             res = ''\n             if num // 100:\n                 res = less20[num // 100] + ' Hundred' + (' ' if num % 100 else '')\n \n             num %= 100\n             res += less20[num] if num < 20 else more20[num // 10] + (' ' + less20[num % 10] if num % 10 else '')\n             return res\n         \n         if num == 0: return 'Zero'\n \n         unit = ['', 'Thousand', 'Million', 'Billion']\n         i = 0\n         res = []\n         while num > 0:\n             t = translate(num % 1000)\n             if t:\n                 res += [unit[i], t]\n             num //= 1000\n             i += 1\n \n         return (' '.join(res[::-1])).strip()", "class Solution:\n     \n     digit = {\n         0: '',\n         1: 'One',\n         2: 'Two',\n         3: 'Three',\n         4: 'Four',\n         5: 'Five',\n         6: 'Six',\n         7: 'Seven',\n         8: 'Eight',\n         9: 'Nine'\n         }\n     \n     teen = {\n         10: 'Ten',\n         11: 'Eleven',\n         12: 'Twelve',\n         13: 'Thirteen',\n         14: 'Fourteen',\n         15: 'Fifteen',\n         16: 'Sixteen',\n         17: 'Seventeen',\n         18: 'Eighteen',\n         19: 'Nineteen'\n     }\n     \n     ten = {\n         2: 'Twenty',\n         3: 'Thirty',\n         4: 'Forty',\n         5: 'Fifty',\n         6: 'Sixty',\n         7: 'Seventy',\n         8: 'Eighty',\n         9: 'Ninety'\n     }\n     \n     idx = {\n         0: '',\n         1: 'Thousand',\n         2: 'Million',\n         3: 'Billion',\n         4: 'Trillion',\n         5: 'Quadrillion'\n     }\n     def helper(self,num):\n         result = \"\"\n         while len(num) < 3:\n             num = '0' + num   \n         \n         if num[0] is not '0':\n             result = self.digit[int(num[0])] + ' Hundred'\n         if num[1] is not '0':\n             if num[1] == '1':\n                 return result + \" \" + self.teen[int(num[1]+num[2])]\n             else:\n                 return result + \" \" + self.ten[int(num[1])] + \" \" + self.digit[int(num[2])]\n         if num[2] is not '0':\n             result = result + \" \" + self.digit[int(num[2])]\n         return result\n     \n     def numberToWords(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return 'Zero'\n         result = \"\"\n         rev = str(num)[::-1]\n         slices = [rev[i:i+3] for i in range(0,len(str(num)),3)]\n         \n         for idx, slice in enumerate((slices)):\n             if slice == '000':\n                 continue\n             else:\n                 result = self.helper(str(slice[::-1])) + \" \" + self.idx[idx] + \" \"+ result\n         result = result.split(' ')\n         result = [ x for x in result if x is not \"\"]   \n         return ' '.join(result)\n     \n \n", "class Solution:\n     def numberToWords(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         num_lyst = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n         tens_lyst = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n         under20_lyst = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']\n         large_scale = ['', 'Thousand', 'Million', 'Billion']\n         \n         def convert(num):\n             out_str = ''\n             hundred = num // 100\n             ten_digit = num % 100\n             if hundred:\n                 out_str += num_lyst[hundred] + ' ' + 'Hundred '\n             if ten_digit:\n                 if ten_digit < 10:\n                     out_str += num_lyst[ten_digit]\n                 elif ten_digit < 20:\n                     out_str += under20_lyst[ten_digit % 10]\n                 else:\n                     out_str += tens_lyst[ten_digit // 10] + ' ' + num_lyst[ten_digit % 10]\n                     \n             return out_str.strip()\n         \n         if not num:\n             return 'Zero'\n         \n         \n         res = num // 1000    # \u5546\n         last3 = num % 1000     # \u4f59\u6570\uff0c\u540e\u4e09\u4f4d\n         ans = ''\n \n         while res or last3:\n             if last3:\n                 ans = convert(last3) + ' ' + large_scale.pop(0) + ' '+ ans\n             else:\n                 large_scale.pop(0)\n             \n             last3 = res % 1000\n             res = res //1000\n             \n         return ans.strip()\n                 \n             \n                 \n                 \n             \n             \n", "class Solution:\n     def getEnglishThousand(self, n):\n         if 1 <= n <= 9:\n             return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][n-1]\n         elif 10 <= n <= 19:\n             return ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'][n-10]\n         elif 20 <= n <= 99:\n             eng = ['Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'][(n//10)-2]\n             if n % 10 > 0:\n                 return eng + ' ' + self.getEnglishThousand(n % 10)\n             else:\n                 return eng\n         else:\n             hundred = self.getEnglishThousand(n // 100) + ' Hundred'\n             if n % 100 > 0:\n                 return hundred + ' ' + self.getEnglishThousand(n % 100)\n             else:\n                 return hundred\n \n     def numberToWords(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return 'Zero'\n         stack = ['Billion', 'Million', 'Thousand', None]\n         english = []\n         while num:\n             quantifier = stack.pop()\n             if num % 1000 > 0:\n                 english.append(self.getEnglishThousand(num % 1000) + (' ' + quantifier if quantifier else ''))\n             num //= 1000\n         return ' '.join(reversed(english))", "class Solution:\n \n     quantity_unit = ['', 'Thousand', 'Million', 'Billion']\n     digit_to_str = ['', ' One', ' Two', ' Three', ' Four', ' Five', ' Six', ' Seven', ' Eight', ' Nine']\n \n     ten_to_str = {10: 'Ten', 11: 'Eleven', 12: 'Twelve', 13: 'Thirteen', 14: 'Fourteen', 15: 'Fifteen', 16: 'Sixteen',\n                   17: 'Seventeen', 18: 'Eighteen', 19: 'Nineteen', 20: 'Twenty', 30: 'Thirty', 40: 'Forty', 50: 'Fifty',\n                   60: 'Sixty', 70: 'Seventy', 80: 'Eighty', 90: 'Ninety', 0: ''}\n \n     def read_three_digits(self, unit, ten, hundred, index):\n \n         if ten == 1:\n             str_of_num = ' ' + Solution.ten_to_str[ten * 10 + unit]\n         else:\n             str_of_num = (' ' + Solution.ten_to_str[ten * 10] + Solution.digit_to_str[unit]) if ten > 1 else Solution.digit_to_str[unit]\n \n         str_of_num = (Solution.digit_to_str[hundred] + ' Hundred' if hundred > 0 else \"\") + str_of_num\n         # print(str_of_num + str(index))\n         return str_of_num[1:] + ' ' + Solution.quantity_unit[index] if str_of_num else str_of_num[1:]\n \n     def numberToWords(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return 'Zero'\n \n         str_of_num = \"\"\n         index = 0\n         while num > 0:\n             part = num % 1000\n             unit = part % 10\n             ten = (part % 100) // 10\n             hundred = part // 100\n             str_of_num = self.read_three_digits(unit, ten, hundred, index) + ' ' + str_of_num.strip()\n             num //= 1000\n             index += 1\n         return str_of_num.strip()"]