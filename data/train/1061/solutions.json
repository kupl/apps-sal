["# cook your dish here\ndef value(a, b, c):\n    if(c == '&'):\n        return a&b\n    elif(c == '^'):\n        return a^b\n    elif(c == '|'):\n        return a|b\n\ndef break_rules(n, operator):\n    if(len(n) == 1):\n        return n\n    elif(len(n) == 2):\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1,len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\n\nt = int(input())\nwhile t > 0 :\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if(ord(exp[i]) > 47 and ord(exp[i]) < 58):\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if(i == len(exp) - 1):\n            num.append(int(temp))\n    t -= 1\n    # print(num,operator)\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if(c == '&'):\n        return a&b\n    elif(c == '^'):\n        return a^b\n    elif(c == '|'):\n        return a|b\n\ndef break_rules(n, operator):\n    if(len(n) == 1):\n        return n\n    elif(len(n) == 2):\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1,len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\n\nt = int(input())\nwhile t > 0 :\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if(ord(exp[i]) > 47 and ord(exp[i]) < 58):\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if(i == len(exp) - 1):\n            num.append(int(temp))\n    t -= 1\n    # print(num,operator)\n    print(max(break_rules(num, operator)))", "# cook your dish here\ndef value(a, b, c):\n    if(c == '&'):\n        return a&b\n    elif(c == '^'):\n        return a^b\n    elif(c == '|'):\n        return a|b\n\ndef break_rules(n, operator):\n    if(len(n) == 1):\n        return n\n    elif(len(n) == 2):\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1,len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\n\nt = int(input())\nwhile t > 0 :\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if(ord(exp[i]) > 47 and ord(exp[i]) < 58):\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if(i == len(exp) - 1):\n            num.append(int(temp))\n    t -= 1\n    \n    print(max(break_rules(num, operator)))", "# cook your dish here\ndef value(a, b, c):\n    if(c == '&'):\n        return a&b\n    elif(c == '^'):\n        return a^b\n    elif(c == '|'):\n        return a|b\n\ndef break_rules(n, operator):\n    if(len(n) == 1):\n        return n\n    elif(len(n) == 2):\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1,len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\n\nt = int(input())\nwhile t > 0 :\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if(ord(exp[i]) > 47 and ord(exp[i]) < 58):\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if(i == len(exp) - 1):\n            num.append(int(temp))\n    t -= 1\n    \n    print(max(break_rules(num, operator)))", "# cook your dish here\ndef value(a, b, c):\n    if(c == '&'):\n        return a&b\n    elif(c == '^'):\n        return a^b\n    elif(c == '|'):\n        return a|b\n\ndef break_rules(n, operator):\n    if(len(n) == 1):\n        return n\n    elif(len(n) == 2):\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1,len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\n\nt = int(input())\nwhile t > 0 :\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if(ord(exp[i]) > 47 and ord(exp[i]) < 58):\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if(i == len(exp) - 1):\n            num.append(int(temp))\n    t -= 1\n    \n    print(max(break_rules(num, operator)))", "# cook your dish here\ndef value(a, b, c):\n    if(c == '&'):\n        return a&b\n    elif(c == '^'):\n        return a^b\n    elif(c == '|'):\n        return a|b\n\ndef break_rules(n, operator):\n    if(len(n) == 1):\n        return n\n    elif(len(n) == 2):\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1,len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\n\nt = int(input())\nwhile t > 0 :\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if(ord(exp[i]) > 47 and ord(exp[i]) < 58):\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if(i == len(exp) - 1):\n            num.append(int(temp))\n    t -= 1\n    \n    print(max(break_rules(num, operator)))", "# cook your dish here\ndef value(a, b, c):\n    if(c == '&'):\n        return a&b\n    elif(c == '^'):\n        return a^b\n    elif(c == '|'):\n        return a|b\n\ndef break_rules(n, operator):\n    if(len(n) == 1):\n        return n\n    elif(len(n) == 2):\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1,len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\nt = int(input())\nwhile t > 0 :\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if(ord(exp[i]) > 47 and ord(exp[i]) < 58):\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if(i == len(exp) - 1):\n            num.append(int(temp))\n    t -= 1\n    \n    print(max(break_rules(num, operator)))", "# cook your dish here\ndef value(a, b, c):\n    if(c == '&'):\n        return a&b\n    elif(c == '^'):\n        return a^b\n    elif(c == '|'):\n        return a|b\n\ndef break_rules(n, operator):\n    if(len(n) == 1):\n        return n\n    elif(len(n) == 2):\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1,len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\n\nt = int(input())\nwhile t > 0 :\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if(ord(exp[i]) > 47 and ord(exp[i]) < 58):\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if(i == len(exp) - 1):\n            num.append(int(temp))\n    t -= 1\n    \n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if(c == '&'):\n        return a&b\n    elif(c == '^'):\n        return a^b\n    elif(c == '|'):\n        return a|b\n\ndef break_rules(n, operator):\n    if(len(n) == 1):\n        return n\n    elif(len(n) == 2):\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1,len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\n\nt = int(input())\nwhile t > 0 :\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if(ord(exp[i]) > 47 and ord(exp[i]) < 58):\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if(i == len(exp) - 1):\n            num.append(int(temp))\n    t -= 1\n    \n    print(max(break_rules(num, operator)))", "def value(a, b, c):\r\n    if(c == '&'):\r\n        return a&b\r\n    elif(c == '^'):\r\n        return a^b\r\n    elif(c == '|'):\r\n        return a|b\r\n\r\ndef break_rules(n, operator):\r\n    if(len(n) == 1):\r\n        return n\r\n    elif(len(n) == 2):\r\n        return [value(n[0], n[1], operator[0])]\r\n    else:\r\n        cont_ans = []\r\n        for i in range(1,len(n)):\r\n            l1 = n[:i]\r\n            l2 = n[i:]\r\n            o1 = operator[:i - 1]\r\n            o2 = operator[i:]\r\n            l1_ans = break_rules(l1, o1)\r\n            l2_ans = break_rules(l2, o2)\r\n            for k in l1_ans:\r\n                for j in l2_ans:\r\n                    cont_ans.append(value(k, j, operator[i - 1]))\r\n    return cont_ans\r\n\r\nt = int(input())\r\nwhile t > 0 :\r\n    operator = []\r\n    num = []\r\n    exp = input()\r\n    temp = ''\r\n    for i in range(len(exp)):\r\n        if(ord(exp[i]) > 47 and ord(exp[i]) < 58):\r\n            temp = temp + exp[i]\r\n        else:\r\n            num.append(int(temp))\r\n            temp = ''\r\n            operator.append(exp[i])\r\n        if(i == len(exp) - 1):\r\n            num.append(int(temp))\r\n    t -= 1\r\n    \r\n    print(max(break_rules(num, operator)))", "def value(a, b, c):\n    if(c == '&'):\n        return a&b\n    elif(c == '^'):\n        return a^b\n    elif(c == '|'):\n        return a|b\n\ndef break_rules(n, operator):\n    if(len(n) == 1):\n        return n\n    elif(len(n) == 2):\n        return [value(n[0], n[1], operator[0])]\n    else:\n        cont_ans = []\n        for i in range(1,len(n)):\n            l1 = n[:i]\n            l2 = n[i:]\n            o1 = operator[:i - 1]\n            o2 = operator[i:]\n            l1_ans = break_rules(l1, o1)\n            l2_ans = break_rules(l2, o2)\n            for k in l1_ans:\n                for j in l2_ans:\n                    cont_ans.append(value(k, j, operator[i - 1]))\n    return cont_ans\n\nt = int(input())\nwhile t > 0 :\n    operator = []\n    num = []\n    exp = input()\n    temp = ''\n    for i in range(len(exp)):\n        if(ord(exp[i]) > 47 and ord(exp[i]) < 58):\n            temp = temp + exp[i]\n        else:\n            num.append(int(temp))\n            temp = ''\n            operator.append(exp[i])\n        if(i == len(exp) - 1):\n            num.append(int(temp))\n    t -= 1\n    \n    print(max(break_rules(num, operator)))", "def extract(s):\n\tarr = []\n\tnews = ''\n\tfor x in s:\n\t\ttry:\n\t\t\tx = int(x)\n\t\t\tnews = news+str(x)\n\t\texcept:\n\t\t\tarr = [news]+arr\n\t\t\tnews = ''\n\t\t\tarr = [x]+arr\n\tarr = [news]+arr\n\treturn arr\nfor i in range(int(input())):\n\ts = input()\n\tarr = extract(s)\n\tn = len(arr)//2 + 1\n\tdp = [[0]*n for j in range(n)]\n\tfor i in range(n):\n\t\tdp[i][i] = [int(arr[2*i])]\n\tn = len(arr)\n\tfor i in range(3, n+1, 2):\n\t\tfor j in range(0, n-i+1, 2):\n\t\t\tans = []\n\t\t\tfor k in range(j+2, i+j+1, 2):\n\t\t\t\tfor x in dp[j//2][(k-1)//2]:\n\t\t\t\t\tfor y in dp[k//2][(i+j)//2]:\n\t\t\t\t\t\tif arr[k-1] == '&':\n\t\t\t\t\t\t\tans += [x & y]\n\t\t\t\t\t\tif arr[k-1] == '|':\n\t\t\t\t\t\t\tans += [x | y]\n\t\t\t\t\t\tif arr[k-1] == '^':\n\t\t\t\t\t\t\tans += [x ^ y]\n\t\t\tif i != n:\n\t\t\t\tdp[j//2][k//2] = ans[:]\n\t\t\telse:\n\t\t\t\tprint(max(ans))", "def extract(s):\r\n\tarr = []\r\n\tnews = ''\r\n\tfor x in s:\r\n\t\ttry:\r\n\t\t\tx = int(x)\r\n\t\t\tnews += str(x)\r\n\t\texcept:\r\n\t\t\tarr += [news]\r\n\t\t\tnews = ''\r\n\t\t\tarr += [x]\r\n\tarr += [news]\r\n\treturn arr\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n\ts = input()\r\n\tarr = extract(s)\r\n\tn = len(arr)//2 + 1\r\n\tdp = [[0]*n for j in range(n)]\r\n\tfor i in range(n):\r\n\t\tdp[i][i] = [int(arr[2*i])]\r\n\r\n\tn = len(arr)\r\n\tfor i in range(3, n+1, 2):\r\n\t\tfor j in range(0, n-i+1, 2):\r\n\t\t\tans = []\r\n\t\t\tfor k in range(j+2, i+j+1, 2):\r\n\t\t\t\tfor x in dp[j//2][(k-1)//2]:\r\n\t\t\t\t\tfor y in dp[k//2][(i+j)//2]:\r\n\t\t\t\t\t\tif arr[k-1] == '&':\r\n\t\t\t\t\t\t\tans += [x & y]\r\n\t\t\t\t\t\tif arr[k-1] == '|':\r\n\t\t\t\t\t\t\tans += [x | y]\r\n\t\t\t\t\t\tif arr[k-1] == '^':\r\n\t\t\t\t\t\t\tans += [x ^ y]\r\n\t\t\tif i != n:\r\n\t\t\t\tdp[j//2][k//2] = ans[:]\r\n\t\t\telse:\r\n\t\t\t\tprint(max(ans))\r\n", "def extract(s):\r\n\tarr = []\r\n\tnews = ''\r\n\tfor x in s:\r\n\t\ttry:\r\n\t\t\tx = int(x)\r\n\t\t\tnews += str(x)\r\n\t\texcept:\r\n\t\t\tarr += [news]\r\n\t\t\tnews = ''\r\n\t\t\tarr += [x]\r\n\tarr += [news]\r\n\treturn arr\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n\ts = input()\r\n\tarr = extract(s)\r\n\tn = len(arr)//2 + 1\r\n\tdp = [[0]*n for j in range(n)]\r\n\tfor i in range(n):\r\n\t\tdp[i][i] = [int(arr[2*i])]\r\n\r\n\tn = len(arr)\r\n\tfor i in range(3, n+1, 2):\r\n\t\tfor j in range(0, n-i+1, 2):\r\n\t\t\tans = []\r\n\t\t\tfor k in range(j+2, i+j+1, 2):\r\n\t\t\t\tfor x in dp[j//2][(k-1)//2]:\r\n\t\t\t\t\tfor y in dp[k//2][(i+j)//2]:\r\n\t\t\t\t\t\tans += [eval(str(x) + arr[k-1] + str(y))]\r\n\r\n\t\t\tif i != n:\r\n\t\t\t\tdp[j//2][k//2] = ans[:]\r\n\t\t\telse:\r\n\t\t\t\tprint(max(ans))\r\n"]