["class Solution:\n     def removeKdigits(self, num, k):\n         \"\"\"\n         :type num: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         out=[]\n         for digit in num:\n             while k and out and out[-1] > digit:\n                 out.pop()\n                 k-=1\n             out.append(digit)\n         return ''.join(out[:-k or None]).lstrip('0') or \"0\"", "class Solution:\n     def removeKdigits(self, num, k):\n         \"\"\"\n         :type num: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         if(num == \"\"): return \"\"\n         arr = [i for i in list(num)]\n         stack = [arr[0]]\n         out = 0\n         for i in range(1, len(arr)):\n             while(out < k and len(stack)>0 and arr[i] < stack[-1]):\n                 stack.pop()\n                 out += 1\n             stack.append(arr[i])\n         diff = k - out\n         for i in range(diff): stack.pop()\n         res = \"\".join(stack).lstrip(\"0\")\n         if(res == \"\"): return \"0\"\n         return res\n", "class Solution(object):\n     def removeKdigits(self, num, k):\n         \"\"\"\n         :type num: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         if k == len(num):\n             return \"0\"\n         stack = []\n         cnt = 0\n         for i, ch in enumerate(num):\n             if cnt == k:\n                 for j in range(i, len(num)):\n                     stack.append(num[j])\n                 break\n             if not stack or ch >= stack[-1]:\n                 stack.append(ch)\n             else:\n                 while stack and ch < stack[-1] and cnt < k:\n                     stack.pop()\n                     cnt += 1\n                 stack.append(ch)\n         while cnt < k:\n             stack.pop()\n             cnt += 1\n         i = 0\n         while i < len(stack) and stack[i] == '0':\n             i += 1\n         if i == len(stack):\n             return \"0\"\n         return ''.join(stack[i:])", "class Solution:\n     def removeKdigits(self, num, k):\n         \"\"\"\n         :type num: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         while True:\n             if k == 0:\n                 return num if num != \"\" else \"0\"\n             if num == \"\":\n                 return \"0\"\n             index = 0\n             num_len = len(num)\n             while True:\n                 if index == num_len - 1:\n                     num = num[:-1]\n                     k -= 1\n                     break\n                 if num[index] > num[index + 1]:\n                     new_num = num[:index] + num[index+1:]\n                     num = new_num.lstrip(\"0\")\n                     k -= 1\n                     break\n                 index += 1", "class Solution:\n     def removeKdigits(self, num, k):\n         \"\"\"\n         :type num: str\n         :type k: int\n         :rtype: str\n         \"\"\"\n         stack = []\n         i = 0\n         num += '0'\n         while i < len(num):\n             while stack and stack[-1] > num[i] and k > 0:\n                 stack.pop()\n                 k -= 1\n             if (stack or num[i] != '0') and i < len(num)-1:     \n                 stack.append(num[i]) \n             i += 1\n         res = ''.join(stack)\n         return res if res else '0'\n \n"]