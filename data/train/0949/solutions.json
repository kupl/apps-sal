["def check(l,n):\n    m = 0\n    for i in range(n-1):\n        x = l[i]\n        c = 0\n        j = i\n        while (j+2<n and l[j+2]==x) or (j+1<n and l[j+1] == x):\n            if l[j+1] == x:\n                j = j+1\n            else:\n                j+=2\n            c+=1\n        if m<c:\n            m = c\n    return m\n\nt = int(input())\nfor _ in range(t):\n    no = int(input())\n    a = list(map(int,input().split()))\n    print(check(a,no))", "# cook your dish here\ntry:\n    x = int(input())\n    for _ in range(x):\n        y=int(input())\n        a=list(map(int,input().split()))\n        if len(list(set(a)))==len(a):\n            print(0)\n        else:\n            j=0\n            e=0\n            while j<y:\n                count=0\n                i=j\n                while i < len(a):\n                    if i+1<y:\n                        if a[i]==a[i+1] :\n                            i+=1\n                            count+=1\n                        else:\n                            if i+2<y:\n                                if a[i]==a[i+2] :\n                                    i+=2\n                                    count+=1\n                                else:    \n                                    break\n                            else:\n                                break\n                    else:\n                        break\n                j=j+1\n                e=max(e,count)\n            print(e)\nexcept:\n    pass", "from copy import copy\r\ndef main():\r\n    for _ in range(int(input())):\r\n        n=int(input())\r\n        a=list(map(int,input().split()))\r\n        i=0\r\n        l=[]\r\n        visited=[False for i in range(n)]\r\n        for j in range(n):\r\n            if(not visited[j]):\r\n                i=j\r\n                s=0\r\n                while(i<n):\r\n                    visited[i]=True\r\n                    if(i+1<n and a[i]==a[i+1]):\r\n                        s+=1\r\n                        i+=1\r\n                    elif(i+2<n and a[i]==a[i+2]):\r\n                        s+=1\r\n                        i+=2\r\n                    else:\r\n                        break\r\n                l.append(s)\r\n        print(max(l))\r\nmain()", "# cook your dish here\nt = int(input())\nfor _ in range(t):\n    N = int(input())\n    lst = list(map(int, input().split()))\n    maxcc = 0\n    el = 0\n    for j in range(N):\n        i = j\n        count = 0\n        while i < len(lst):\n            if i+1 < N and lst[i] == lst[i+1]:\n                count += 1\n                i += 1\n            elif i+2 <= N-1 and lst[i] == lst[i+2]:\n                count += 1\n                i += 2\n            else:\n                break\n        if count > maxcc:\n            maxcc = count\n    print(maxcc)", "# cook your dish here\nt = int(input())\nfor _ in range(t):\n    N = int(input())\n    lst = list(map(int, input().split()))\n    maxcc = 0\n    el = 0\n    for j in range(N):\n        i = j\n        count = 0\n        while i < len(lst):\n            if i+1 < N and lst[i] == lst[i+1]:\n                count += 1\n                i += 1\n            elif i+2 <= N-1 and lst[i] == lst[i+2]:\n                count += 1\n                i += 2\n            else:\n                break\n        if count > maxcc:\n            maxcc = count\n    print(maxcc)", "from sys import stdin,stdout\nimport math,bisect\nfrom collections import Counter,deque,defaultdict\nL=lambda:list(map(int, stdin.readline().strip().split()))\nM=lambda:list(map(int, stdin.readline().strip().split()))\nI=lambda:int(stdin.readline().strip())\nS=lambda:stdin.readline().strip()\nC=lambda:stdin.readline().strip().split()\ndef pr(a):return(\" \".join(list(map(str,a))))\n#_________________________________________________#\n\nm = 2*pow(10,5)+1\ndef solve():\n    n = I()\n    a = L()\n    b = [-1]*m\n    c = [0]*m\n    ans = 0\n    for i in range(n):\n        if b[a[i]]==-1:\n            b[a[i]] = i\n        elif i-b[a[i]]==1:\n            b[a[i]] = i\n            c[a[i]]+=1\n            ans = max(ans,c[a[i]])\n        elif i-b[a[i]]==2:\n            b[a[i]] = i\n            c[a[i]]+=1\n            ans = max(ans,c[a[i]])\n        else:\n            b[a[i]] = i\n            c[a[i]] = 0\n    print(ans)\nfor _ in range(I()):\n    solve()\n", "# cook your dish here\n# code by RAJ BHAVSAR\nimport sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\n\ndef helper(arr,s,n):\n\tans = 0\n\ti = s\n\twhile(i < n):\n\t\tif(i+1<n and arr[i] == arr[i+1]):\n\t\t\tans += 1\n\t\t\ti += 1\n\t\telse:\n\t\t\tif(i+2<n and arr[i] == arr[i+2]):\n\t\t\t\tans += 1\n\t\t\t\ti += 2\n\t\t\telse:\n\t\t\t\tbreak\n\treturn ans\n\t\nfor _ in range(int(input())):\n\tn = int(input())\n\tarr = get_list()\n\tans = 0\n\tfor i in range(n):\n\t\tans = max(ans,helper(arr,i,n))\n\tprint(ans)", "\r\nfor test in range(int(input())):\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    m = 0\r\n    for i in range(0,n-1):\r\n        m1 = 0\r\n        j = i\r\n        while j<(n-1):\r\n            jd = j\r\n            if l[jd]==l[jd + 1]:\r\n                m1 = m1 + 1\r\n                j = j + 1\r\n            elif jd<(n-2) and l[jd]==l[jd + 2]:\r\n                m1 = m1 + 1\r\n                j = j + 2\r\n            else:\r\n                break\r\n        #print(m1)\r\n        m = max(m1, m)\r\n    print(m)", "# cook your dish here\nfrom collections import defaultdict\nfor _ in range(int(input())):\n\n\n    n=int(input())\n    a=list(map(int,input().split()))\n    d= defaultdict(lambda:-1)\n    d1= defaultdict(lambda:-1)\n    maxi=-1\n    for i in range(len(a)):\n\n        x=d[a[i]]\n        if x!=-1 and (i-x==1 or i-x==2) :\n            d1[a[i]]+=1\n        else:\n            d1[a[i]]=0\n        d[a[i]]=i\n        maxi=max(maxi,d1[a[i]])\n\n    print(maxi)\n", "# cook your dish here\nx = int(input())\nfor i in range(x):\n    y = int(input())\n    z = list(map(int, input().strip().split(\" \")))\n    m = 0\n    for j in range(0, len(z)):\n        t = j\n        c = 0\n        while((t+1 < len(z) and z[t+1] == z[t]) or (t+2 < len(z) and z[t+2] == z[t])):\n            if(z[t+1] == z[t]):\n                t = t+1\n                c = c+1\n            else:\n                t = t+2\n                c = c+1\n            if(c > m):\n                m = c\n    print(m)", "#dt = {} for i in x: dt[i] = dt.get(i,0)+1\r\nimport sys;input = sys.stdin.readline\r\n#import io,os; input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline #for pypy\r\ninp,ip = lambda :int(input()),lambda :[int(w) for w in input().split()]\r\n\r\nfor _ in range(inp()):\r\n    n = inp()\r\n    x = ip()\r\n    dp = [0]*n\r\n    for i in range(n):\r\n        if (i-1)>=0 and x[i] == x[i-1]:\r\n            dp[i] = max(dp[i],dp[i-1]+1)\r\n        if (i-2)>=0 and x[i] == x[i-2]:\r\n            dp[i] = max(dp[i],dp[i-2]+1)\r\n    print(max(dp))", "def solve(i):\r\n    if c[i] != 0:\r\n        return c[i]\r\n\r\n    maxi = 0\r\n\r\n    if i+1 < n and a[i+1] == a[i]: maxi = max(maxi, solve(i+1) + 1)\r\n    if i+2 < n and a[i+2] == a[i]: maxi = max(maxi, solve(i+2) + 1)\r\n\r\n    c[i] = maxi\r\n    return c[i]\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n\r\n    c = [0] * n\r\n\r\n    for i in range(n):\r\n        solve(i)\r\n\r\n    print(max(c))\r\n", "for _ in range(int(input())):\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n\r\n    if len(arr) <= 1:\r\n        print(0)\r\n        continue\r\n    mx = 0\r\n    narr = [0]\r\n    narr.append(0 if arr[1]!=arr[0] else 1)\r\n    for i in range(2, n):\r\n        if arr[i-2] == arr[i] and arr[i-1] == arr[i]:\r\n            narr.append(max(narr[-2], narr[-1])+1)\r\n        elif arr[i-1] == arr[i]:\r\n            narr.append(narr[-1]+1)\r\n        elif arr[i-2] == arr[i]:\r\n            narr.append(narr[-2]+1)\r\n        else:\r\n            narr.append(0)\r\n        mx = max(mx, narr[-1])\r\n    print(mx)"]