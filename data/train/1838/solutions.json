["class Solution:\n     def maxChunksToSorted(self, arr):\n         \"\"\"\n         :type arr: List[int]\n         :rtype: int\n         \"\"\"\n         cnt, sm, ism = 0, 0, 0\n         for i, num in enumerate(arr):\n             sm += num\n             ism += i\n             if sm == ism:\n                 cnt += 1\n         return cnt", "class Solution:\n     def maxChunksToSorted(self, arr):\n         \"\"\"\n         :type arr: List[int]\n         :rtype: int\n         \"\"\"\n         max =0;\n         rtype = 0\n         for i in range(0,len(arr)):\n             if arr[i] > max:\n                 max = arr[i]\n             if max == i:\n                 rtype = rtype +1\n         return rtype", "class Solution:\n     def maxChunksToSorted(self, a):\n         \"\"\"\n         :type arr: List[int]\n         :rtype: int\n         \"\"\"\n         max_seen, total_seen, res_count = 0, 0, 0\n         for num in a:\n             max_seen = max(max_seen, num)\n             total_seen += 1\n             if max_seen == total_seen - 1:\n                 res_count += 1\n         return res_count", "class Solution:\n     def maxChunksToSorted(self, arr):\n         \"\"\"\n         :type arr: List[int]\n         :rtype: int\n         \"\"\"\n         cnt = 0\n         max_curr = -1\n         for i in range(len(arr)):\n             max_curr = max(max_curr, arr[i])\n             if max_curr == i:\n                 cnt += 1\n         return cnt", "class Solution:\n     def maxChunksToSorted(self, arr):\n         \"\"\"\n         :type arr: List[int]\n         :rtype: int\n         \"\"\"\n         # seen = [False] * len(arr)\n         maxx, chunkCount = 0, 0\n         for i in range(len(arr)):\n             maxx = max(maxx, arr[i])\n             if i >= maxx:\n                 chunkCount += 1\n             \n         return chunkCount\n", "class Solution:\n     def maxChunksToSorted(self, arr):\n         \"\"\"\n         :type arr: List[int]\n         :rtype: int\n         \"\"\"\n         if not arr:\n             return 0\n         \n         res = 0\n         l = len(arr)\n         curr = -1\n         flag = False\n         for i in range(l):\n             c = arr[i]\n             if flag:\n                 curr = max(curr, c)\n                 if curr == i:\n                     curr = -1\n                     res += 1\n                     flag = False\n             else:\n                 if c == i:\n                     res += 1\n                 else:\n                     curr = max(curr, c)\n                     flag = True\n         \n         return res\n             \n", "class Solution:\n     def maxChunksToSorted(self, arr):\n         \"\"\"\n         :type arr: List[int]\n         :rtype: int\n         \"\"\"\n         chunks = 0\n         max_this_chunk = 0\n         for index, num in enumerate(arr):\n             if num > max_this_chunk:\n                 max_this_chunk = num\n             if max_this_chunk <= index:\n                 chunks += 1\n                 max_this_chunk = 0\n         return chunks\n", "class Solution:\n     def maxChunksToSorted(self, arr):\n         \"\"\"\n         :type arr: List[int]\n         :rtype: int\n         \"\"\"\n         m = -1\n         ans = 0\n         for i, num in enumerate(arr):\n             m = max(num, m)\n             if m == i:\n                 ans += 1\n                 # m = -1\n         return ans", "class Solution:\n     def maxChunksToSorted(self, arr):\n         \"\"\"\n         :type arr: List[int]\n         :rtype: int\n         \n         If is increasing then it is chunkable.\n         It if decreases then no.\n         \n         We start with one chunk (the whole array)\n         \"\"\"\n         total_chunks = 0\n         max_so_far = 0\n         for i, val in enumerate(arr):\n             max_so_far = max(max_so_far, val)\n             if max_so_far == i:\n                 total_chunks += 1\n                 \n         return total_chunks\n", "class Solution:\n     def maxChunksToSorted(self, arr):\n         res = 0\n         cur = arr[0]\n         for i,v in enumerate(arr):\n             if v > cur:\n                 cur =v\n             if i ==cur:\n                 res += 1\n         return res\n         \"\"\"\n         :type arr: List[int]\n         :rtype: int\n         \"\"\"\n"]