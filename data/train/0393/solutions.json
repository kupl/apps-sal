["class Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:\n        \n        def enough(num):\n            total = num//a + num//b + num//c -num//ab - num//bc - num//ac + num//abc\n            return total>=n\n    \n    \n        ab = (a*b)//math.gcd(a,b)\n        ac = (a*c)//math.gcd(a,c)\n        bc = (b*c)//math.gcd(b,c)\n        abc = (a*bc)//math.gcd(a,bc)\n        \n        \n        left , right = 1, min(a,b,c)*n\n        \n        while left < right:\n            mid = left+ (right-left)//2\n            if enough(mid): right = mid\n            else : left = mid + 1\n                \n        return left", "class Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:     \n        ab = a*b//math.gcd(a,b)\n        bc = b*c//math.gcd(b,c)\n        ca = a*c//math.gcd(c,a)\n        abc = ab*c//math.gcd(ab,c)\n        lo = 1\n        hi = 2*10**9\n        while lo < hi:\n            m = (lo+hi) //2\n            cnt = m//a + m//b + m//c - m//ab - m//bc - m//ca + m//abc\n            if cnt < n:\n                lo = m+1\n            else:\n                hi = m\n        return lo", "class Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:\n        def enough(num) -> bool:\n            total = mid//a + mid//b + mid//c - mid//ab - mid//ac - mid//bc + mid//abc\n            return total >= n\n\n        ab = a * b // math.gcd(a, b)\n        ac = a * c // math.gcd(a, c)\n        bc = b * c // math.gcd(b, c)\n        abc = a * bc // math.gcd(a, bc)\n        left, right = 1, 10 ** 10\n        while left < right:\n            mid = left + (right - left) // 2\n            if enough(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left    ", "class Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:\n        def lcm(a, b):\n            return a * b // math.gcd(a, b)\n        \n        nums = sorted([a, b, c])\n        nums2 = [lcm(a, b), lcm(b, c), lcm(a, c)]\n        nums3 = lcm(nums2[0], c)\n        \n        lo, hi = n, nums[-1] * n\n        \n        while lo < hi:\n            mid = (lo + hi) // 2\n            rank = (sum(mid // n for n in nums) - sum(mid//n for n in nums2) + mid // nums3)\n            if rank < n:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo", "\n\nclass Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:\n        '''\n        the fact: num1*num2=LCM*GCD -> LCM=num1*num2//gcd\n        \n        '''\n        ab = a*b//math.gcd(a, b)\n        bc = b*c//math.gcd(c, b)\n        ac = a*c//math.gcd(a, c)\n        abc = ab*c//math.gcd(ab, c)\n        \n        \n        def nthUgly(k:int) -> bool: #are there more than n uglies below it number?\n        \n            h = k//a + k//b + k//c - k//ab - k//ac - k//bc+ k//abc\n            \n            if h >= n:\n                return True\n            return False\n        \n        left, right = 1, 10**10\n        #print(nthUgly(10))\n        while left < right:\n            mid =(right + left)//2\n            if nthUgly(mid):\n                right = mid\n            else:\n                left = mid + 1\n            \n        return left", "\n\nclass Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:\n        '''\n        the fact: num1*num2=LCM*GCD -> LCM=num1*num2//gcd\n        \n        '''\n        ab=a*b//math.gcd(a,b)\n        ac=a*c//math.gcd(a,c)\n        bc=b*c//math.gcd(b,c)\n        abc=ab*c//math.gcd(ab,c)\n        \n        def has_nsmaller(num):\n            k=num//a+num//b+num//c-num//ac-num//ab-num//bc+num//abc\n            return k>=n\n        \n        low,high=0,2*10**9\n        while low<high:\n            mid=(low+high)//2\n            if has_nsmaller(mid):\n                high=mid\n            else:\n                low=mid+1\n        return low\n", "import math\nclass Solution:\n    def ugly(self, n, a, b, c, ab, ac, bc, abc, num):\n        return ((num // a) + (num // b) + (num // c) - (num // ab) - (num // ac) - (num // bc) + (num // abc)) >= n\n        \n        \n        \n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:\n        left = min(a,b,c)\n        right = a * b * c * n\n        \n        ab = (a*b) // math.gcd(a,b)\n        ac = (a*c) // math.gcd(a,c)\n        bc = (b*c) // math.gcd(b,c)\n        \n        abc = (a * bc) // math.gcd(a,bc)\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            if self.ugly(n, a, b, c, ab, ac, bc, abc, mid):\n                right = mid\n            else:\n                left = mid + 1\n                \n        return left", "class Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:\n        def gcd(a, b):\n            while b:\n                a, b = b, a%b\n            return a\n        \n        def lcm(a, b):\n            return a*b//gcd(a, b)\n        \n        def count_ugly(N, a, b, c):\n            ab, ac, bc = lcm(a, b), lcm(a, c), lcm(b, c)\n            abc = lcm(ab, c)\n            return N//a+N//b+N//c-N//ab-N//ac-N//bc+N//abc\n            \n        s, e =1, 2*10**9\n        while s<=e:\n            m = s+(e-s)//2\n            cnt = count_ugly(m, a, b, c)\n            if cnt>=n:\n                e = m-1\n            else:\n                s = m+1\n                \n        return s\n        \n", "class Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:\n        ab = a*b//gcd(a, b)\n        bc = b*c//gcd(b, c)\n        ca = c*a//gcd(c, a)\n        abc = ab*c//gcd(ab, c)\n        \n        def fn(k):\n            return k//a + k//b + k//c - k//ab - k//bc - k//ca + k//abc\n\n        lo, hi = 0, 2_000_000_000\n        while lo < hi:\n            mid = (lo + hi)//2\n            if fn(mid) >= n: hi = mid\n            else: lo = mid + 1\n        return lo", "class Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:        \n        lo = 1\n        hi = 2*10**9;\n        \n        ab = a * b // math.gcd(a, b);\n        bc = b * c // math.gcd(b, c);\n        ac = a * c // math.gcd(a, c);\n        abc = a * bc // math.gcd(a, bc);\n        \n        while lo < hi:\n            mid = lo + (hi - lo)//2;\n            cnt = mid//a + mid//b + mid//c - mid//ab - mid//bc - mid//ac + mid//abc;\n            if cnt < n: \n                lo = mid + 1;\n            else:\n                hi = mid;\n        \n        return lo", "class Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:\n        \n        def isEnough(num):\n            total = num//a + num//b + num//c - num//ab - num//ac - num//bc + num//abc\n            return total >= n\n        \n        ab = a*b // math.gcd(a,b)\n        ac = a*c // math.gcd(a,c)\n        bc = b*c // math.gcd(b,c)\n        abc = a*bc // math.gcd(a,bc)\n        \n        left = 1\n        right = 10 ** 10\n        while left < right:\n            mid = left + (right - left) // 2\n            if isEnough(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n"]