["#for _ in range(int(input()):\n#n,m = map(int,input().split())\n#x = [int(w) for w in input().split()]\n#n = int(input())\n#x = [int(input()) for _ in range(n)]\n#for i in range(n):\n#dt = {} for i in x:dt[i] = dt.get(i,0)+1\n#dt = {k:v for k,v in sorted(x.items(), key=lambda i: i[1])}\n\nm,n = map(int,input().split())  # top,right,bottom,left\nx = []\nfor i in range(m):\n    x.append([])\n    for j in range(n):\n        clr = [w for w in input().split()]\n        x[i].append(clr)\n\nimport queue as Q                \ndp = [float('inf')]*m\nfor i in range(m):\n    dp[i] = [float('inf')]*n\ndp[m-1][n-1] = 0\npq = Q.PriorityQueue()\npq.put([dp[m-1][n-1],m-1,n-1])\nvisited = set()\nxx,yy = [-1,0,1,0],[0,1,0,-1] # top,right,bottom,left\nwhile not pq.empty():\n    pop = pq.get()\n    cx,cy = pop[1],pop[2]\n    if (cx,cy) not in visited:\n        visited.add((cx,cy))\n        for k in range(4):\n            nx,ny = cx+xx[k],cy+yy[k]\n            if 0<=nx<m and 0<=ny<n and (nx,ny) not in visited:\n                clr = x[cx][cy][k]\n                #print(\"*\",nx,ny,\"_\",k,clr)\n                ind = x[nx][ny].index(clr)\n                cost = (k-(ind+2)%4)%4\n                #print(cost)\n                if dp[cx][cy]+cost < dp[nx][ny]:\n                    dp[nx][ny] = dp[cx][cy]+cost\n                    pq.put([dp[nx][ny],nx,ny])\n        #print(\"#############\")\n#print(dp)\nprint(dp[0][0])", "from bisect import insort\nclass disk:\n    def __init__(self):\n        self.U = ''\n        self.D = ''\n        self.L = ''\n        self.R = ''\n        \n        \nm, n = map(int,input().split())\nadj = [[] for _ in range(m*n)]\ngrid = [[disk() for _ in range(n)] for _ in range(m)]\nfor i in range(m):\n    for j in range(n):\n        grid[i][j].U,grid[i][j].R,grid[i][j].D,grid[i][j].L = input().split()\nfor i in range(m):\n\tfor j in range(n):\n\t\tif (j!=0):\n\n\t\t\tif (grid[i][j].R == grid[i][j-1].R):\n\t\t\t    dist = 2\n\t\t\tif (grid[i][j].U == grid[i][j-1].R): \n\t\t\t    dist = 3\n\t\t\tif (grid[i][j].L == grid[i][j-1].R): \n\t\t\t    dist = 0\n\t\t\tif (grid[i][j].D == grid[i][j-1].R): \n\t\t\t    dist = 1\n\t\t\tadj[i*n + j].append((dist, i*n + j - 1))\n\t\t\n\t\tif (j!=n-1):\n\n\t\t\tif (grid[i][j].R == grid[i][j+1].L): \n\t\t\t    dist = 0\n\t\t\tif (grid[i][j].U == grid[i][j+1].L): \n\t\t\t    dist = 1\n\t\t\tif (grid[i][j].L == grid[i][j+1].L): \n\t\t\t    dist = 2\n\t\t\tif (grid[i][j].D == grid[i][j+1].L): \n\t\t\t    dist = 3\n\t\t\tadj[i*n + j].append((dist, i*n + j + 1))\n\n\t\t\n\t\tif (i!=0):\n\n\t\t\tif (grid[i][j].R == grid[i-1][j].D):\n\t\t\t    dist = 3\n\t\t\tif (grid[i][j].U == grid[i-1][j].D):\n\t\t\t    dist = 0\n\t\t\tif (grid[i][j].L == grid[i-1][j].D):\n\t\t\t    dist = 1\n\t\t\tif (grid[i][j].D == grid[i-1][j].D):\n\t\t\t    dist = 2\n\t\t\tadj[i*n + j].append((dist, i*n + j - n))\n\n\t\t\n\t\tif (i!=m-1):\n\n\t\t\tif (grid[i][j].R == grid[i+1][j].U): \n\t\t\t    dist = 1\n\t\t\tif (grid[i][j].U == grid[i+1][j].U): \n\t\t\t    dist = 2\n\t\t\tif (grid[i][j].L == grid[i+1][j].U): \n\t\t\t    dist = 3\n\t\t\tif (grid[i][j].D == grid[i+1][j].U):\n\t\t\t    dist = 0\n\t\t\tadj[i*n + j].append((dist, i*n + j + n))\nq = []\nq.append((0,0))\ndists = [2147483647 for _ in range(m*n)]\nvisited = [False for _ in range(m*n)]\ndists[0] = 0\nwhile q:\n    cur = q[-1]\n    q.pop()\n    if visited[cur[1]] == False:\n        visited[cur[1]] = True\n        dists[cur[1]] = -1*cur[0]\n    for i in range(len(adj[cur[1]])):\n        to = adj[cur[1]][i][1]\n        dis = adj[cur[1]][i][0]\n        if (not visited[to] and dists[cur[1]] + dis < dists[to]):\n            insort(q,(-1*(dists[cur[1]] + dis),to))\nprint(dists[m*n - 1])"]