["# cook your dish here\n# cook your dish here\nfor _ in range(int(input())) :\n n,k=map(int,input().split())\n #reading the string \n s=input()\n i,j=0,0\n q=0\n while(i<n and j<n) :\n  if(s[i]=='M') :\n   if(s[j]=='I') :\n    cnt=0\n    if(i>j) :\n     p=s[j:i]\n     cnt=p.count(':')\n    else :\n     p=s[i:j]\n     cnt=p.count(':')\n    t=k+1-abs(i-j)-cnt\n    if(t>0) :\n     q+=1\n     i+=1\n     j+=1\n    else:\n     if(i<j) :\n      i+=1\n     else:\n      j+=1\n   elif(s[j]=='X') :\n    j+=1\n    i=j\n   else:\n    j+=1\n  elif(s[i]=='X') :\n   i+=1\n   j=i\n  else:\n   i+=1\n print(q) ", "# cook your dish here\n\ndef solve(Str, K):\n S = ''\n ind = -1\n iron, mag = [], []\n for it in Str:\n  ind += 1\n  if it == ':':\n   ind += 1\n\n  if it == 'I':\n   iron.append(ind)\n  elif it == 'M':\n   mag.append(ind)\n\n ans = 0\n lr = len(iron)\n lm = len(mag)\n\n i, j = 0, 0\n while i<lr and j<lm:\n  ir, mg = iron[i], mag[j]\n  if abs(ir - mg) <= K:\n   ans += 1\n   i+=1\n   j+=1\n  else:\n   if ir > mg:\n    j += 1\n   else:\n    i += 1\n return ans\n\nfor case in range(int(input())):\n n, k = list(map(int, input().split()))\n st = input()\n li = [it for it in st.split('X') if len(it)>0]\n\n ans = sum(solve(string, k) for string in li)\n print(ans)\n", "# cook your dish here\nt=int(input())\nfor t in range(t):\n n,k=list(map(int,input().split()))\n s=input()\n i=0\n j=0\n a=0\n while(i<n and j<n):\n  if(s[i]=='M'):\n   if(s[j]=='I'):\n    c=0\n    if(i>j):\n     z=s[j:i]\n     c=z.count(\":\")\n    else:\n     z=s[i:j]\n     c=z.count(\":\")\n    p=k+1-abs(i-j)-c\n    if(p>0):\n     a+=1\n     i+=1\n     j+=1\n    else:\n     if(i<j):\n      i+=1\n     else:\n      j+=1\n   elif(s[j]=='X'):\n    j+=1\n    i=j\n   else:\n    j+=1\n  elif(s[i]=='X'):\n   i+=1\n   j=i\n  else:\n   i+=1\n print(a)\n\n  \n  \n", "t=int(input())\nfor _ in range(t):\n n,k=list(map(int,input().split()))\n s=list(input())\n ma,ir=[],[]\n total=0\n for i in range(n):\n  k1=s[i]\n  if k1=='M':\n   ma.append(i)\n  elif k1=='I':\n   ir.append(i)\n  if k1=='X' or i==n-1:    \n   alt=ir.copy()\n   el,l=0,len(ir)\n   for mag in ma:\n    for j in range(l):\n     iron=ir[j]\n     if iron>mag:\n      #sheet=s[mag:iron].count(\":\")\n      sheet=0\n      p=k+1-(iron-mag)-sheet \n      if p>0:\n       el+=1\n       alt.pop(j)\n       l-=1\n       break \n     else:\n      #sheet=s[iron:mag].count(\":\")\n      sheet=0\n      #print(iron,mag,sheet)\n      p=k+1-(mag-iron)-sheet \n      if p>0: \n       el+=1\n       alt.pop(j)\n       l-=1\n       break \n    ir=alt.copy() \n   total+=el\n   #for k,v in attr.items():\n   #    total-=v-1 \n   #print(ma,ir,total)   \n   ma,ir=[],[]\n print(total) \n\n\n", "t=int(input())\nfor _ in range(t):\n n,k=list(map(int,input().split()))\n s=list(input())\n ma,ir=[],[]\n total=0\n for i in range(n):\n  k1=s[i]\n  if k1=='M':\n   ma.append(i)\n  elif k1=='I':\n   ir.append(i)\n  if k1=='X' or i==n-1:    \n   alt=ir.copy()\n   el=0\n   for mag in ma:\n    for iron in ir:\n     if iron>mag:\n      #sheet=s[mag:iron].count(\":\")\n      sheet=0\n      p=k+1-(iron-mag)-sheet \n      if p>0:\n       el+=1\n       alt.remove(iron)\n       break \n     else:\n      #sheet=s[iron:mag].count(\":\")\n      sheet=0\n      #print(iron,mag,sheet)\n      p=k+1-(mag-iron)-sheet \n      if p>0: \n       el+=1\n       alt.remove(iron)\n       break \n    ir=alt.copy() \n   total+=el\n   #for k,v in attr.items():\n   #    total-=v-1 \n   #print(ma,ir,total)   \n   s1=set() \n   ma,ir=[],[]\n print(total) \n\n\n", "for _ in range(int(input())):\n n,k = map(int,input().split())\n s = input()\n l = ''\n for i in s:\n  if i == ':':\n   l += ':'\n  l += i\n magnet = []\n iron = []\n n = len(l)\n ans = 0\n for i in range(n):\n  if l[i] == 'I':\n   while magnet != [] and abs(magnet[0]-i) > k:\n    magnet.pop(0)\n   if len(magnet)>0:\n    ans += 1\n    magnet.pop(0)\n   else:\n    iron.append(i)\n  elif l[i] == 'M':\n   while iron!=[] and abs(iron[0]-i)>k:\n    iron.pop(0)\n   if len(iron) > 0:\n    ans += 1\n    iron.pop(0)\n   else:\n    magnet.append(i)\n  elif l[i] == 'X':\n   while iron!=[]:\n    iron.pop(0)\n   while magnet != []:\n    magnet.pop(0)\n print(ans)", "t=int(input()) #TESTCASES\n\nfor y in range(t):\n inptstr=input().split()\n\n n=int(inptstr[0]) #N TOTAL ELEMENTS\n\n K=int(inptstr[1]) #K CONSTaNT IN Pij\n\n s=input() #STRING SEQUENCE OF CELLS ELEMENTS\n\n \n noblock=s.split('X')\n cnt=[]\n cntiron=0\n for ele in noblock: #PARSING ELEMENTS WITHOUT BLOCK\n  d={}\n  d1={}\n  iron=[]\n  magnet=[]\n  for x in range(len(ele)):#TRACKING LOCATION OF ELEMENTS IN NOBLOCK\n   if ele[x]=='I':\n    iron.append(x)\n   elif ele[x]=='M':\n    magnet.append(x)\n  #print('part',ele)\n  for i in iron:\n\n   #print('IRON - ',i)\n   for j in magnet:\n    #print('MAGNET - ',j)\n    \n    if i in d or j in d1:\n     continue\n    if i<j:\n     Sij=(ele[i:j]).count(':')\n\n    if j<i:\n     Sij=(ele[j:i]).count(':')\n    Pij=(K+1)-(abs(j-i))-Sij\n    if Pij > 0:\n     cntiron=cntiron+1\n     #print('CONNECTION DONE')\n     d[i]=j\n     d1[j]=i\n     break\n \n print(cntiron)\n\n    \n    \n    \n  \n  \n\n\n\n\n \n \n\n", "t=int(input()) #TESTCASES\n\nfor y in range(t):\n inptstr=input().split()\n\n n=int(inptstr[0]) #N TOTAL ELEMENTS\n\n K=int(inptstr[1]) #K CONSTaNT IN Pij\n\n s=input() #STRING SEQUENCE OF CELLS ELEMENTS\n\n \n noblock=s.split('X')\n cnt=[]\n cntiron=0\n for ele in noblock: #PARSING ELEMENTS WITHOUT BLOCK\n  d={}\n  d1={}\n  iron=[]\n  magnet=[]\n  for x in range(len(ele)):#TRACKING LOCATION OF ELEMENTS IN NOBLOCK\n   if ele[x]=='I':\n    iron.append(x)\n   elif ele[x]=='M':\n    magnet.append(x)\n  #print('part',ele)\n  for i in iron:\n\n   #print('IRON - ',i)\n   for j in magnet:\n    #print('MAGNET - ',j)\n    \n    if i in d or j in d1:\n     continue\n    if i<j:\n     Sij=(ele[i:j]).count(':')\n\n    if j<i:\n     Sij=(ele[j:i]).count(':')\n    Pij=(K+1)-(abs(j-i))-Sij\n    if Pij > 0:\n     cntiron=cntiron+1\n     #print('CONNECTION DONE')\n     d[i]=j\n     d1[j]=i\n     break\n \n print(cntiron)\n\n    \n    \n    \n  \n  \n\n\n\n\n \n \n\n", "# cook your dish here\nfrom collections import deque\nfor _ in range(int(input())):\n\n n, k = list(map(int, input().split()))\n s = input()\n\n new_s = \"\"\n for obj in s:\n  if obj == \":\":\n   new_s+=obj\n  new_s+=obj\n\n qi = deque()\n qm = deque()\n\n ans = 0; j = 0\n for i in new_s:\n\n  if i == 'I':\n   while (len(qm)!=0 and qm[0]+k < j):\n    qm.popleft()\n\n   if len(qm) != 0:\n    ans+=1\n    qm.popleft()\n\n   else:\n    qi.append(j)\n\n  elif i == 'M':\n   while (len(qi) != 0 and qi[0]+k < j):\n    qi.popleft()\n\n   if len(qi)!=0:\n    ans+=1\n    qi.popleft()\n\n   else:\n    qm.append(j)\n\n  elif i == 'X':\n   while len(qm)!=0:\n    qm.popleft()\n   while len(qi)!=0:\n    qi.popleft()\n\n  j+=1\n print(ans)\n", "def fema(s,k):\n iron=[]\n mag=[]\n sheet=0\n ind=-1\n for i in s:\n  ind+=1\n  if i==':':\n   sheet+=1\n   ind+=1\n  if i=='I':\n   iron.append(ind)\n  if i=='M':\n   mag.append(ind)\n\n count=0\n i,j=0,0\n while i<len(iron) and j<len(mag):\n  if abs(iron[i]-mag[j])<=k:\n   count+=1\n   i+=1\n   j+=1\n  else:\n   if(iron[i]>mag[j]):\n    j+=1\n   else:\n    i+=1\n return count\n\ntest=int(input())\nwhile(test!=0):\n test-=1\n n,k=list(map(int,input().split()))\n s=input()\n li=[st for st in s.split('X') if len(st)>0]\n ans=sum(fema(st,k) for st in li)\n print(ans)\n", "def fema(s,k):\n iron=[]\n mag=[]\n sheet=0\n ind=-1\n for i in s:\n  ind+=1\n  if i==':':\n   sheet+=1\n  if i=='I':\n   iron.append(ind)\n  if i=='M':\n   mag.append(ind)\n\n count=0\n i,j=0,0\n while i<len(iron) and j<len(mag):\n  if abs(iron[i]-mag[j])<=k:\n   count+=1\n   i+=1\n   j+=1\n  else:\n   if(iron[i]>mag[j]):\n    j+=1\n   else:\n    i+=1\n return count\n\ntest=int(input())\nwhile(test!=0):\n test-=1\n n,k=list(map(int,input().split()))\n s=input()\n li=[st for st in s.split('X') if len(st)>0]\n ans=sum(fema(st,k) for st in li)\n print(ans)\n", "test=int(input())\nwhile(test!=0):\n test=test-1\n n,k= list(map(int,input().split()))\n s=input()\n i=0\n j=0\n mag=0\n sheet=0\n while(i<n and j<n):\n  if(s[i]=='I'):\n   if(s[j]=='M'):\n    if(i<j):\n     for a in range(i,j+1):\n      if s[a]==':':\n       sheet=sheet+1\n    if(j<i):\n     for a in range(j,i+1):\n      if s[a]==':':\n       sheet=sheet+1\n\n    power=(k+1)-abs(j-i)+sheet\n    sheet=0\n    if(power>0):\n     mag+=1\n     i+=1\n     j+=1\n    else:\n     if(i>j):\n      j+=1\n     else:\n      i+=1\n   elif(s[j]=='X'):\n    i=j\n    i+=1\n    j+=1\n   else:\n    j+=1\n  elif(s[i]=='X'):\n   j=i\n   j+=1\n   i+=1\n  else:\n   i+=1\n print(mag)\n       \n", "for t in range(int(input())):\n n, k = list(map(int, input().split()))\n s = input()\n i = 0\n j = 0\n ans = 0\n while i < n and j < n:\n  if s[i] == \"M\":\n   if s[j] == \"I\":\n    c = 0\n    if i > j:\n     o = s[j:i]\n     c = o.count(':')\n    else:\n     o = s[i:j]\n     c = o.count(':')\n    p = k+1-abs(i-j)-c\n    if p > 0:\n     ans = ans+1\n     i = i+1\n     j = j+1\n    else:\n     if i < j:\n      i += 1\n     else:\n      j += 1\n   elif s[j] == \"X\":\n    j += 1\n    i = j\n   else:\n    j += 1\n  elif s[i] == 'X':\n   i += 1\n   j = i\n  else:\n   i += 1\n print(ans)\n", "def solve(string,k):\n ind = 0\n iron,mag = [],[]\n for i in string:\n  if i==':':\n   ind+=1\n  elif i=='I':\n   iron.append(ind)\n  elif i==\"M\":\n   mag.append(ind)\n  ind+=1\n i,j = 0,0\n li = len(iron)\n lm = len(mag)\n ans = 0\n while i<li and j<lm:\n  if abs(iron[i]-mag[j])<=k:\n   ans+=1\n   i+=1\n   j+=1\n  else:\n   if iron[i]>mag[j]:\n    j+=1\n   else:\n    i+=1\n return ans\nfor _ in range(int(input())):\n ans = 0\n n,k = list(map(int,input().split()))\n s = input()\n real = [i for i in s.split(\"X\") if len(i)>0]\n ans+=sum(solve(string,k)for string in real)\n print(ans)\n", "class check:\n def __init__(self, k, s):\n  self.sl = s.split(\"X\")\n  self.k = k\n\n def ans(self):\n  answer = 0\n  for strings in self.sl:\n   irons = []\n   magnets = []\n   sheets = 0\n   for i in range(len(strings)):\n    if strings[i] == \"I\":\n     if not magnets:\n      irons.append(i + sheets)\n     else:\n      index_i = i + sheets\n      for x in magnets:\n       if (self.k + 1 - abs(x - index_i)) > 0:\n        answer += 1\n        magnets.remove(x)\n        break\n      else:\n       irons.append(index_i)\n    elif strings[i] == \"M\":\n     if not irons:\n      magnets.append(i + sheets)\n     else:\n      index_m = i + sheets\n      for x in irons:\n       if (self.k + 1 - abs(x - index_m)) > 0:\n        answer += 1\n        irons.remove(x)\n        break\n      else:\n       magnets.append(index_m)\n    elif strings[i] == \":\":\n     sheets += 1\n  return answer\n\n\nfor _ in range(int(input())):\n n, k = list(map(int, input().split()))\n s = input()\n st = check(k, s)\n print(st.ans())\n", "from collections import deque\n\nt = int(input())\n\nfor _ in range(t):\n n, k = map(int, input().split())\n s = input()\n l = str()\n for i in range(n):\n  if s[i]==\":\":\n   l+=\":\"\n  l+=s[i]\n  \n \n fe = deque()\n mg = deque()\n tot = 0\n for i in range(len(l)):\n  if l[i] == \"I\":\n   while len(mg)>0 and abs(mg[0]-i)>k:\n    mg.popleft()\n   if len(mg)>0:\n    tot += 1\n    mg.popleft()\n   else:\n    fe.append(i)\n  elif l[i] == \"M\":\n   while len(fe)>0 and abs(fe[0]-i)>k:\n    fe.popleft()\n   if len(fe) >0:\n    tot+=1\n    fe.popleft()\n   else:\n    mg.append(i)\n  elif l[i] == \"X\":\n   while len(fe)>0:\n    fe.popleft()\n   while len(mg)>0:\n    mg.popleft()\n print(tot)", "from collections import deque\n\nt = int(input())\n\nfor _ in range(t):\n n, k = map(int, input().split())\n s = input()\n l = str()\n for i in range(n):\n  if s[i]==\":\":\n   l+=\":\"\n  l+=s[i]\n  \n \n fe = deque()\n mg = deque()\n tot = 0\n for i in range(len(s)):\n  if s[i] == \"I\":\n   while len(mg)>0 and abs(mg[0]-i)>k:\n    mg.popleft()\n   if len(mg)>0:\n    tot += 1\n    mg.popleft()\n   else:\n    fe.append(i)\n  elif s[i] == \"M\":\n   while len(fe)>0 and abs(fe[0]-i)>k:\n    fe.popleft()\n   if len(fe) >0:\n    tot+=1\n    fe.popleft()\n   else:\n    mg.append(i)\n  elif s[i] == \"X\":\n   while len(fe)>0:\n    fe.popleft()\n   while len(mg)>0:\n    mg.popleft()\n print(tot)", "from collections import deque\n\nt = int(input())\n\nfor _ in range(t):\n n, k = map(int, input().split())\n s = input()\n \n l = \" \"\n for i in range(n):\n  if s[i]==\":\":\n   l+=\":\"\n  l+=s[i]\n  \n \n fe = deque()\n mg = deque()\n tot = 0\n for i in range(len(s)):\n  if s[i] == \"I\":\n   while len(mg)>0 and abs(mg[0]-i)>k:\n    mg.popleft()\n   if len(mg)>0:\n    tot += 1\n    mg.popleft()\n   else:\n    fe.append(i)\n  elif s[i] == \"M\":\n   while len(fe)>0 and abs(fe[0]-i)>k:\n    fe.popleft()\n   if len(fe) >0:\n    tot+=1\n    fe.popleft()\n   else:\n    mg.append(i)\n  elif s[i] == \"X\":\n   while len(fe)>0:\n    fe.popleft()\n   while len(mg)>0:\n    mg.popleft()\n print(tot)", "from collections import deque\n\nt = int(input())\n\nfor _ in range(t):\n n, k = map(int, input().split())\n s = input()\n \n l = \"\"\n for i in range(n):\n  if s[i]==\":\":\n   l+=\":\"\n  l+=s[i]\n  \n \n fe = deque()\n mg = deque()\n tot = 0\n for i in range(len(s)):\n  if s[i] == \"I\":\n   while len(mg)>0 and abs(mg[0]-i)>k:\n    mg.popleft()\n   if len(mg)>0:\n    tot += 1\n    mg.popleft()\n   else:\n    fe.append(i)\n  elif s[i] == \"M\":\n   while len(fe)>0 and abs(fe[0]-i)>k:\n    fe.popleft()\n   if len(fe) >0:\n    tot+=1\n    fe.popleft()\n   else:\n    mg.append(i)\n  elif s[i] == \"X\":\n   while len(fe)>0:\n    fe.popleft()\n   while len(mg)>0:\n    mg.popleft()\n print(tot)", "# cook your dish here\nt=int(input())\nfor _ in range(t):\n n,k=map(int,input().split())\n l=input()\n count=0\n i=0\n j=0\n while i<n and j<n:\n  if l[i]==\"M\":\n   if l[j]==\"I\":\n    if i<j:\n     sij=l[i:j].count(\":\")\n    else:\n     sij=l[j:i].count(\":\")\n    p=k+1-abs(i-j)-sij\n    if p>0:\n     count+=1\n     i+=1\n     j+=1\n    else:\n     if i<j:\n      i+=1\n     else:\n      j+=1\n   elif l[j]==\"X\":\n    j+=1\n    i=j\n   else:\n    j+=1\n  elif l[i]==\"X\":\n   i+=1\n   j=i\n  else:\n   i+=1\n print(count)", "t=int(input())\nfor t in range(t):\n n,k=list(map(int,input().split()))\n s=input()\n i=0\n j=0\n a=0\n while(i<n and j<n):\n  if(s[i]=='M'):\n   if(s[j]=='I'):\n    c=0\n    if(i>j):\n     z=s[j:i]\n     c=z.count(\":\")\n    else:\n     z=s[i:j]\n     c=z.count(\":\")\n    p=k+1-abs(i-j)-c\n    if(p>0):\n     a+=1\n     i+=1\n     j+=1\n    else:\n     if(i<j):\n      i+=1\n     else:\n      j+=1\n   elif(s[j]=='X'):\n    j+=1\n    i=j\n   else:\n    j+=1\n  elif(s[i]=='X'):\n   i+=1\n   j=i\n  else:\n   i+=1\n print(a)\n\n\n", "t=int(input()) #TESTCASES\n\nfor y in range(t):\n inptstr=input().split()\n\n n=int(inptstr[0]) #N TOTAL ELEMENTS\n\n K=int(inptstr[1]) #K CONSTaNT IN Pij\n\n s=input() #STRING SEQUENCE OF CELLS ELEMENTS\n\n \n noblock=s.split('X')\n cnt=[]\n cntiron=0\n for ele in noblock: #PARSING ELEMENTS WITHOUT BLOCK\n  d={}\n  d1={}\n  iron=[]\n  magnet=[]\n  for x in range(len(ele)):#TRACKING LOCATION OF ELEMENTS IN NOBLOCK\n   if ele[x]=='I':\n    iron.append(x)\n   elif ele[x]=='M':\n    magnet.append(x)\n  #print('part',ele)\n  for i in iron:\n\n   #print('IRON - ',i)\n   for j in magnet:\n    #print('MAGNET - ',j)\n    \n    if i in d or j in d1:\n     continue\n    if i<j:\n     Sij=(ele[i:j]).count(':')\n\n    if j<i:\n     Sij=(ele[j:i]).count(':')\n    Pij=(K+1)-(abs(j-i))-Sij\n    if Pij > 0:\n     cntiron=cntiron+1\n     #print('CONNECTION DONE')\n     d[i]=j\n     d1[j]=i\n     break\n \n print(cntiron)\n\n    \n    \n    \n  \n  \n\n\n\n\n \n \n\n"]