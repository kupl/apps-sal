["T = int(input())\r\nfor _ in range(T):\r\n    N, K1, K2 = list(map(int, input().split()))\r\n    P1, P2, P3, P4 = list(map(int, input().split()))\r\n    ans = 0\r\n    arr = [0] * (1005)\r\n\r\n    length = len(arr)\r\n    for i in range(1,N+1):\r\n\r\n        j = 0\r\n        while j < length:\r\n            arr[j] += 1\r\n            j += i\r\n\r\n    for i in range(K1,K2+1):\r\n        if arr[i]==3:\r\n           ans += P1\r\n        elif arr[i]%2==1:\r\n            ans += P2\r\n        else:\r\n            ans += P3\r\n\r\n    print(ans)\r\n", "import atexit\nimport io\nimport sys\nimport math\nfrom collections import defaultdict,Counter\n\n# _INPUT_LINES = sys.stdin.read().splitlines()\n# input = iter(_INPUT_LINES).__next__\n# _OUTPUT_BUFFER = io.StringIO()\n# sys.stdout = _OUTPUT_BUFFER\n\n# @atexit.register\n# def write():\n    # sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\ninput=sys.stdin.readline\ndef print(x):\n    sys.stdout.write(str(x)+\"\\n\")\n \n# dp=[0]*(2*pow(10,7)+1)\n# for i in range(1,2*pow(10,7)+1):\n#     d=int(math.sqrt(i))\n#     if d*d==i:\n#         c=0\n#         for j in range(2,int(math.sqrt(d))+1):\n#             if d%j==0:\n#                 c=1\n#                 break\n                \n#         if c==0:\n#             dp[i]=3\n#         else:\n#             dp[i]=0\n#     else:\n#         dp[i]=1\n        \n# n0=[0]*(2*pow(10,7)+1)\n# n1=[0]*(2*pow(10,7)+1)\n# n3=[0]*(2*pow(10,7)+1)\n# for i in range(1,2*pow(10,7)+1):\n#     if dp[i]==0:\n#         n0[i]=1\n#     elif dp[i]==1:\n#         n1[i]=1\n#     else:\n#         n3[i]=1\n#     n0[i]+=n0[i-1]\n#     n1[i]+=n1[i-1]\n#     n3[i]+=n3[i-1]\ndef isprime(d):\n    for j in range(2,int(math.sqrt(d))+1):\n        if d%j==0:\n            return False\n    return True\n          \nm=100000007\nt=int(input())\nfor i in range(t):\n    n,k1,k2=map(int,input().split())\n    p1,p2,p3,p4=map(int,input().split())\n    p=int(math.sqrt(k1))\n    if p*p<k1:\n        p+=1\n    c=0\n    ans=0\n    while p*p<=k2:\n        c+=1\n        if p!=1 and isprime(p):\n            ans=(ans+p1)%m\n        else:\n            ans=(ans+p2)%m\n        p+=1\n    ans=(ans+(p3*(k2-k1+1-c))%m)%m\n    print(ans)\n", "for _ in range(int(input())):\n    # = int(input())\n    n, k1, k2 = list(map(int, input().strip().split()))\n    p1, p2, p3, p4 = list(map(int, input().strip().split()))\n    ans = [0]*(n+1)\n    for i in range(1, n+1):\n        j = i \n        while j<=n:\n            ans[j] += 1 \n            j += i \n            \n    cost = 0\n    for i in range(k1,k2 +1):\n        if ans[i] == 3:\n            cost += p1\n        elif ans[i]%2 == 1:\n            cost += p2\n        else:\n            cost += p3\n            \n    print(cost)\n", "import atexit\nimport io\nimport sys\nimport math\nfrom collections import defaultdict,Counter\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\ndef write():\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\n# dp=[0]*(2*pow(10,7)+1)\n# for i in range(1,2*pow(10,7)+1):\n#     d=int(math.sqrt(i))\n#     if d*d==i:\n#         c=0\n#         for j in range(2,int(math.sqrt(d))+1):\n#             if d%j==0:\n#                 c=1\n#                 break\n                \n#         if c==0:\n#             dp[i]=3\n#         else:\n#             dp[i]=0\n#     else:\n#         dp[i]=1\n        \n# n0=[0]*(2*pow(10,7)+1)\n# n1=[0]*(2*pow(10,7)+1)\n# n3=[0]*(2*pow(10,7)+1)\n# for i in range(1,2*pow(10,7)+1):\n#     if dp[i]==0:\n#         n0[i]=1\n#     elif dp[i]==1:\n#         n1[i]=1\n#     else:\n#         n3[i]=1\n#     n0[i]+=n0[i-1]\n#     n1[i]+=n1[i-1]\n#     n3[i]+=n3[i-1]\ndef isprime(d):\n    for j in range(2,int(math.sqrt(d))+1):\n        if d%j==0:\n            return False\n    return True\n          \nm=100000007\nt=int(input())\nfor i in range(t):\n    n,k1,k2=list(map(int,input().split()))\n    p1,p2,p3,p4=list(map(int,input().split()))\n    p=int(math.sqrt(k1))\n    if p*p<k1:\n        p+=1\n    c=0\n    ans=0\n    while p*p<=k2:\n        c+=1\n        if p!=1 and isprime(p):\n            ans=(ans+p1)%m\n        else:\n            ans=(ans+p2)%m\n        p+=1\n    ans=(ans+(p3*(k2-k1+1-c))%m)%m\n    print(ans)\n", "import atexit\nimport io\nimport sys\nimport math\nfrom collections import defaultdict,Counter\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\ndef write():\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\n# dp=[0]*(2*pow(10,7)+1)\n# for i in range(1,2*pow(10,7)+1):\n#     d=int(math.sqrt(i))\n#     if d*d==i:\n#         c=0\n#         for j in range(2,int(math.sqrt(d))+1):\n#             if d%j==0:\n#                 c=1\n#                 break\n                \n#         if c==0:\n#             dp[i]=3\n#         else:\n#             dp[i]=0\n#     else:\n#         dp[i]=1\n        \n# n0=[0]*(2*pow(10,7)+1)\n# n1=[0]*(2*pow(10,7)+1)\n# n3=[0]*(2*pow(10,7)+1)\n# for i in range(1,2*pow(10,7)+1):\n#     if dp[i]==0:\n#         n0[i]=1\n#     elif dp[i]==1:\n#         n1[i]=1\n#     else:\n#         n3[i]=1\n#     n0[i]+=n0[i-1]\n#     n1[i]+=n1[i-1]\n#     n3[i]+=n3[i-1]\ndef isprime(d):\n    for j in range(2,int(math.sqrt(d))+1):\n        if d%j==0:\n            return False\n    return True\n          \nm=100000007\nt=int(input())\nfor i in range(t):\n    n,k1,k2=list(map(int,input().split()))\n    p1,p2,p3,p4=list(map(int,input().split()))\n    p=int(math.sqrt(k1))\n    if p*p<k1:\n        p+=1\n    c=0\n    ans=0\n    while p*p<=k2:\n        c+=1\n        if isprime(p):\n            ans=(ans+p1)%m\n        else:\n            ans=(ans+p2)%m\n        p+=1\n    ans=(ans+(p3*(k2-k1+1-c))%m)%m\n    print(ans)\n", "import atexit\nimport io\nimport sys\nimport math\nfrom collections import defaultdict,Counter\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\ndef write():\n    sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\n# dp=[0]*(2*pow(10,7)+1)\n# for i in range(1,2*pow(10,7)+1):\n#     d=int(math.sqrt(i))\n#     if d*d==i:\n#         c=0\n#         for j in range(2,int(math.sqrt(d))+1):\n#             if d%j==0:\n#                 c=1\n#                 break\n                \n#         if c==0:\n#             dp[i]=3\n#         else:\n#             dp[i]=0\n#     else:\n#         dp[i]=1\n        \n# n0=[0]*(2*pow(10,7)+1)\n# n1=[0]*(2*pow(10,7)+1)\n# n3=[0]*(2*pow(10,7)+1)\n# for i in range(1,2*pow(10,7)+1):\n#     if dp[i]==0:\n#         n0[i]=1\n#     elif dp[i]==1:\n#         n1[i]=1\n#     else:\n#         n3[i]=1\n#     n0[i]+=n0[i-1]\n#     n1[i]+=n1[i-1]\n#     n3[i]+=n3[i-1]\ndef isprime(d):\n    c=0\n    for j in range(2,int(math.sqrt(d))+1):\n        if d%j==0:\n            return False\n    return True\n          \nm=100000007\nt=int(input())\nfor i in range(t):\n    n,k1,k2=list(map(int,input().split()))\n    p1,p2,p3,p4=list(map(int,input().split()))\n    p=int(math.sqrt(k1))\n    if p*p<k1:\n        p+=1\n    c=0\n    ans=0\n    while p*p<=k2:\n        c+=1\n        if isprime(p):\n            ans=(ans+p1)%m\n        else:\n            ans=(ans+p2)%m\n        p+=1\n    ans=(ans+p3*(k2-k1+1-c))%m\n    print(ans)\n", "maxx  = 2*(10**4) + 1\r\nhas = [1]*(maxx)\r\nmod = 100000007\r\nfor i in range(2, maxx):\r\n    for j in range(i , maxx , i):\r\n        has[j]+=1\r\n\r\nodd = 0\r\neven = 0\r\nth = 0\r\nl = []\r\nfor i in has:\r\n    if i == 3:\r\n        th+=1   \r\n    elif i%2 == 0:\r\n        even+=1\r\n    else:\r\n        odd+=1\r\n    l.append([th,even,odd])\r\n\r\n\r\n\r\nfor t in range(1,int(input())+1):\r\n    n , k1 ,k2 = list(map(int,input().split()))\r\n    p1,p2,p3,p4 = list(map(int,input().split()))\r\n\r\n    th = l[k2][0] - l[k1-1][0] \r\n    even = l[k2][1] - l[k1-1][1]\r\n    odd = l[k2][2] - l[k1-1][2]\r\n\r\n    # print(th , even , odd)\r\n\r\n    summ = (th * p1)%mod + (odd *p2)%mod + (even*p3)%mod\r\n    print(summ)\r\n", "t = int(input())\n\nclass Container:\n    def __init__(self):\n        self.comp = [0, 0]\n        self.state = -1\n    def process(self):\n        if self.state == -1 or self.state == 1:\n            if self.comp == [1, 1]:\n                self.state = 3\n            else:\n                self.state = 0\n            self.comp[0] += 1\n        elif self.state == 0 or self.state == 3:\n            self.state = 1\n            self.comp[1] += 1\n\n\nfor _ in range(t):\n    n, k1, k2 = map(int, input().split())\n    p1, p2, p3, p4 = map(int, input().split())\n    containers = [Container() for _ in range(n)]\n    sum = 0\n    for i in range(1, n+1):\n        con = [x for x in range(1, n+1) if x%i == 0]\n        for ele in con:\n            containers[ele-1].process()\n    for ele in containers[k1-1:k2]:\n        if ele.state == 0:\n            sum += p2\n        elif ele.state == 3:\n            sum += p1\n        elif ele.state == 1:\n            sum+= p3\n    print(sum)", "t = int(input())\n\nclass Container:\n    def __init__(self):\n        self.comp = [0, 0]\n        self.state = -1\n    def process(self):\n        if self.state == -1 or self.state == 1:\n            if self.comp == [1, 1]:\n                self.state = 3\n            else:\n                self.state = 0\n            self.comp[0] += 1\n        elif self.state == 0 or self.state == 3:\n            self.state = 1\n            self.comp[1] += 1\n\n\nfor _ in range(t):\n    n, k1, k2 = map(int, input().split())\n    p1, p2, p3, p4 = map(int, input().split())\n    containers = [Container() for _ in range(n)]\n    sum = 0\n    for i in range(1, n+1):\n        con = [x for x in range(1, n+1) if x%i == 0]\n        for ele in con:\n            containers[ele-1].process()\n    for ele in containers[k1-1:k2]:\n        if ele.state == 0:\n            sum += p2\n        elif ele.state == 2:\n            sum += p4\n        elif ele.state == 3:\n            sum += p1\n        elif ele.state == 1:\n            sum+= p3\n    print(sum)", "primes={}\ndef SieveOfEratosthenes(n): \n      \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    for p in range(2, n+1): \n        if prime[p]: \n            primes[p]=1\n\nt=int(input())\n\nSieveOfEratosthenes(10000)\nfactors={1:2,2:3}\n\nfor i in range(3,6000):\n    if i in primes:\n        factors[i*i]=1\n    else:\n        factors[i*i]=2\n\nfor case in range(t):\n    n,k1,k2=list([int(x) for x in input().split()])\n    p1,p2,p3,p4=list([int(x) for x in input().split()])\n    costs=[0,p1%100000007,p2%100000007,p3%100000007,p4%100000007]\n    cost=0\n    numbers_to_remove=0\n    for number in factors:\n        if number<=n and ((number >=k1 and number <=k2) or (number <=k1 and number >=k2)):\n            cost=cost+costs[factors[number]]\n            numbers_to_remove+=1\n    cost=(cost%100000007+(k2-k1+1-numbers_to_remove)*costs[3]%100000007)%100000007\n    \n    print(cost%100000007)\n            \n            \n", "t = int(input())\n\nfor _ in range(t):\n    n, k1, k2 = map(int, input().split())\n    p1, p2, p3, p4 = map(int, input().split())\n    sum = 0\n    cont = [[[0, 0], -1] for _ in range(n)]\n    for i in range(1, n+1):\n        con = [x for x in range(1, n+1) if x%i == 0]\n        \n        for ele in con:\n            if cont[ele-1][1] == -1:\n                cont[ele-1][1] = 0\n                cont[ele-1][0][0] += 1\n                \n            elif cont[ele-1][1] == 0:\n                cont[ele-1][0][1] += 1\n                cont[ele-1][1] = 1\n            \n            elif cont[ele-1][1] ==  1:\n                if cont[ele-1][0] == [1, 1]:\n                    cont[ele-1][1] = 3\n                else:\n                    cont[ele-1][1] = 0\n                cont[ele-1][0][0] += 1\n            \n            elif cont[ele-1][1] == 3:\n                cont[ele-1][0][1] += 1\n                cont[ele-1][1] = 1\n    \n    for ele in cont[k1-1:k2]:\n        # print(ele[1])\n        if ele[1] == 0:\n            sum += p2\n        elif ele[1] == 2:\n            sum += p4\n        elif ele[1] == 3:\n            sum += p1\n        elif ele[1] == 1:\n            sum+= p3\n    print(sum)", "primes={}\ndef SieveOfEratosthenes(n): \n      \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    for p in range(2, n+1): \n        if prime[p]: \n            primes[p]=1\n\nt=int(input())\n\nSieveOfEratosthenes(10000)\nfactors={1:2,2:3}\n\nfor i in range(3,4475):\n    if i in primes:\n        factors[i*i]=1\n    else:\n        factors[i*i]=2\n\nfor case in range(t):\n    n,k1,k2=list([int(x) for x in input().split()])\n    p1,p2,p3,p4=list([int(x) for x in input().split()])\n    costs=[0,p1%100000007,p2%100000007,p3%100000007,p4%100000007]\n    cost=0\n    numbers_to_remove=0\n    for number in factors:\n        if number<=n and ((number >=k1 and number <=k2) or (number <=k1 and number >=k2)):\n            cost=cost+costs[factors[number]]\n            numbers_to_remove+=1\n    cost=(cost%100000007+(k2-k1+1-numbers_to_remove)*costs[3]%100000007)%100000007\n    \n    print(cost%100000007)\n            \n            \n", "primes={}\ndef SieveOfEratosthenes(n): \n      \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    for p in range(2, n+1): \n        if prime[p]: \n            primes[p]=1\n\nt=int(input())\n\nSieveOfEratosthenes(10000)\nfactors={1:2,2:3}\n\nfor i in range(3,4475):\n    if i in primes:\n        factors[i*i]=1\n    else:\n        factors[i*i]=2\n\nfor case in range(t):\n    n,k1,k2=list([int(x) for x in input().split()])\n    p1,p2,p3,p4=list([int(x) for x in input().split()])\n    costs=[0,p1%100000007,p2%100000007,p3%100000007,p4%100000007]\n    cost=0\n    numbers_to_remove=0\n    for number in factors:\n        if (number >=k1 and number <=k2) or (number <=k1 and number >=k2):\n            cost=cost+costs[factors[number]]\n            numbers_to_remove+=1\n    cost=(cost%100000007+(k2-k1+1-numbers_to_remove)*costs[3]%100000007)%100000007\n    \n    print(cost%100000007)\n            \n            \n", "primes={}\ndef SieveOfEratosthenes(n): \n      \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    for p in range(2, n+1): \n        if prime[p]: \n            primes[p]=1\n\nt=int(input())\n\nSieveOfEratosthenes(10000)\nfactors={1:2,2:3}\n\nfor i in range(3,4475):\n    if i in primes:\n        factors[i*i]=1\n    else:\n        factors[i*i]=2\n\nfor case in range(t):\n    n,k1,k2=list([int(x) for x in input().split()])\n    p1,p2,p3,p4=list([int(x) for x in input().split()])\n    costs=[0,p1%100000007,p2%100000007,p3%100000007,p4%100000007]\n    cost=0\n    numbers_to_remove=0\n    for number in factors:\n        if number >=k1 and number <=k2:\n            cost=cost+costs[factors[number]]\n            numbers_to_remove+=1\n    cost=(cost%100000007+(k2-k1+1-numbers_to_remove)*costs[3]%100000007)%100000007\n    \n    print(cost%100000007)\n            \n            \n", "primes={}\ndef SieveOfEratosthenes(n): \n      \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    for p in range(2, n+1): \n        if prime[p]: \n            primes[p]=1\n\nt=int(input())\n\nSieveOfEratosthenes(10000)\nfactors={1:2,2:3}\n\nfor i in range(3,6000):\n    if i in primes:\n        factors[i*i]=1\n    else:\n        factors[i*i]=2\n\nfor case in range(t):\n    n,k1,k2=list([int(x) for x in input().split()])\n    p1,p2,p3,p4=list([int(x) for x in input().split()])\n    costs=[0,p1%100000007,p2%100000007,p3%100000007,p4%100000007]\n    cost=0\n    numbers_to_remove=0\n    for number in factors:\n        if number >=k1 and number <=k2:\n            cost=cost+costs[factors[number]]\n            numbers_to_remove+=1\n    cost=(cost%100000007+(k2-k1+1-numbers_to_remove)*costs[3]%100000007)%100000007\n    \n    print(cost%100000007)\n            \n            \n", "primes={}\ndef SieveOfEratosthenes(n): \n      \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n      \n    # Print all prime numbers \n    for p in range(2, n+1): \n        if prime[p]: \n            primes[p]=1\n\n        \nt=int(input())\n\nSieveOfEratosthenes(10000)\nfactors={1:2,2:3}\n\nfor i in range(3,10000):\n    if i in primes:\n        factors[i*i]=1\n    else:\n        factors[i*i]=2\n\nfor case in range(t):\n    n,k1,k2=list([int(x) for x in input().split()])\n    p1,p2,p3,p4=list([int(x) for x in input().split()])\n    costs=[0,p1%100000007,p2%100000007,p3%100000007,p4%100000007]\n    cost=0\n    numbers_to_remove=0\n    for number in factors:\n        if number >=k1 and number <=k2:\n            cost=cost+costs[factors[number]]\n            numbers_to_remove+=1\n    cost=(cost%100000007+(k2-k1+1-numbers_to_remove)*costs[3]%100000007)%100000007\n    \n    print(cost%100000007)\n            \n            \n", "primes={}\ndef SieveOfEratosthenes(n): \n      \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n      \n    # Print all prime numbers \n    for p in range(2, n+1): \n        if prime[p]: \n            primes[p]=1\n\n        \nt=int(input())\n\nSieveOfEratosthenes(15000)\nfactors={1:2,2:3}\n\nfor i in range(3,15000):\n    if i in primes:\n        factors[i*i]=1\n    else:\n        factors[i*i]=2\n\nfor case in range(t):\n    n,k1,k2=list([int(x) for x in input().split()])\n    p1,p2,p3,p4=list([int(x) for x in input().split()])\n    costs=[0,p1%100000007,p2%100000007,p3%100000007,p4%100000007]\n    cost=0\n    numbers_to_remove=0\n    for number in factors:\n        if number >=k1 and number <=k2:\n            cost=cost+costs[factors[number]]\n            numbers_to_remove+=1\n    cost=(cost%100000007+(k2-k1+1-numbers_to_remove)*costs[3]%100000007)%100000007\n    \n    print(cost%100000007)\n            \n            \n", "primes={}\ndef SieveOfEratosthenes(n): \n      \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n      \n    # Print all prime numbers \n    for p in range(2, n+1): \n        if prime[p]: \n            primes[p]=1\n\n        \nt=int(input())\n\nSieveOfEratosthenes(10000)\nfactors={1:2,2:3}\n\nfor i in range(3,5000):\n    if i in primes:\n        factors[i*i]=1\n    else:\n        factors[i*i]=2\n\nfor case in range(t):\n    n,k1,k2=list([int(x) for x in input().split()])\n    p1,p2,p3,p4=list([int(x) for x in input().split()])\n    costs=[0,p1%100000007,p2%100000007,p3%100000007,p4%100000007]\n    cost=0\n    numbers_to_remove=0\n    for number in factors:\n        if number >=k1 and number <=k2:\n            cost=cost+costs[factors[number]]\n            numbers_to_remove+=1\n    cost=(cost%100000007+(k2-k1+1-numbers_to_remove)*costs[3]%100000007)%100000007\n    \n    print(cost%100000007)\n            \n            \n", "primes={}\ndef SieveOfEratosthenes(n): \n      \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n      \n    # Print all prime numbers \n    for p in range(2, n+1): \n        if prime[p]: \n            primes[p]=1\nSieveOfEratosthenes(20000)\nfactors={1:2,2:3}\n\nfor i in range(3,15000):\n    if i in primes:\n        factors[i*i]=1\n    else:\n        factors[i*i]=2\n        \nt=int(input())\n\nfor case in range(t):\n    n,k1,k2=list([int(x) for x in input().split()])\n    p1,p2,p3,p4=list([int(x) for x in input().split()])\n    costs=[0,p1,p2,p3,p4]\n    cost=0\n    numbers_to_remove=0\n    for number in factors:\n        if number >=k1 and number <=k2:\n            cost=cost+costs[factors[number]]\n            numbers_to_remove+=1\n    cost=cost+(k2-k1+1-numbers_to_remove)*costs[3]%100000007\n    \n    print(cost%100000007)\n            \n            \n", "primes={}\ndef SieveOfEratosthenes(n): \n      \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n      \n    # Print all prime numbers \n    for p in range(2, n+1): \n        if prime[p]: \n            primes[p]=1\nSieveOfEratosthenes(10000)\nfactors={1:2,2:3}\n\nfor i in range(3,5000):\n    if i in primes:\n        factors[i*i]=1\n    else:\n        factors[i*i]=2\n        \nt=int(input())\n\nfor case in range(t):\n    n,k1,k2=list([int(x) for x in input().split()])\n    p1,p2,p3,p4=list([int(x) for x in input().split()])\n    costs=[0,p1,p2,p3,p4]\n    cost=0\n    numbers_to_remove=0\n    for number in factors:\n        if number >=k1 and number <=k2:\n            cost=cost+costs[factors[number]]\n            numbers_to_remove+=1\n    cost=cost+(k2-k1+1-numbers_to_remove)*costs[3]%100000007\n    \n    print(cost%100000007)\n            \n            \n", "primes={}\ndef SieveOfEratosthenes(n): \n      \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n      \n    # Print all prime numbers \n    for p in range(2, n+1): \n        if prime[p]: \n            primes[p]=1\nSieveOfEratosthenes(10000)\nfactors={1:2,2:3}\n\nfor i in range(3,5000):\n    if i in primes:\n        factors[i*i]=1\n    else:\n        factors[i*i]=2\n        \nt=int(input())\n\nfor case in range(t):\n    n,k1,k2=list([int(x) for x in input().split()])\n    p1,p2,p3,p4=list([int(x) for x in input().split()])\n    costs=[0,p1,p2,p3,p4]\n    cost=0\n    numbers_to_remove=0\n    for number in factors:\n        if number >=k1 and number <=k2:\n            cost=cost+costs[factors[number]]\n            numbers_to_remove+=1\n    cost=cost+(k2-k1+1-numbers_to_remove)*costs[3]\n    \n    print(cost%100000007)\n            \n            \n", "import math \ndef no_of_factors(n) : \n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count = count + 1\n            else :\n                count = count + 2\n\n    return count \n\nt = int(input())\nfor i in range(t):\n    n,k1,k2 = [int(x) for x in input().split()]\n    p1,p2,p3,p4 = [int(x) for x in input().split()]\n    l = [-1 for x in range(k2-k1+1)]\n    for x in range(k1,k2+1):\n        fact = no_of_factors(x)\n        cont = x-k1\n        if fact == 3:\n            l[cont] = p1\n        elif fact%2==1:\n            l[cont] = p2\n        else:\n            l[cont] = p3\n    total = 0\n    for x in l:\n        total+=x\n    print(total)", "primes={}\ndef SieveOfEratosthenes(n): \n      \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n      \n    # Print all prime numbers \n    for p in range(2, n+1): \n        if prime[p]: \n            primes[p]=1\nt=int(input())\nSieveOfEratosthenes(10000)\nfactors={1:2,2:3}\n\nfor i in range(3,5000):\n    if i in primes:\n        factors[i*i]=1\n    else:\n        factors[i*i]=2\n        \nfor case in range(t):\n    n,k1,k2=list([int(x) for x in input().split()])\n    p1,p2,p3,p4=list([int(x) for x in input().split()])\n    costs=[0,p1,p2,p3,p4]\n    cost=0\n    numbers_to_remove=0\n    for number in factors:\n        if number >=k1 and number <=k2:\n            cost=cost+costs[factors[number]]\n            numbers_to_remove+=1\n    cost=cost+(k2-k1+1-numbers_to_remove)*costs[3]\n    \n    print(cost)\n            \n            \n", "primes={}\ndef SieveOfEratosthenes(n): \n      \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n          \n        \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n      \n    # Print all prime numbers \n    for p in range(2, n+1): \n        if prime[p]: \n            primes[p]=1\nt=int(input())\nSieveOfEratosthenes(10000)\nfactors={1:2,2:3}\n\nfor i in range(3,5000):\n    if i in primes:\n        factors[i*i]=1\n    else:\n        factors[i*i]=2\n        \nfor case in range(t):\n    n,k1,k2=list([int(x) for x in input().split()])\n    p1,p2,p3,p4=list([int(x) for x in input().split()])\n    costs=[0,p1,p2,p3,p4]\n    cost=0\n    for i in range(k1,k2+1):\n        if i in factors:\n            cost+=costs[factors[i]]\n        else:\n            cost+=costs[3]\n    print(cost)\n            \n            \n", "import math\r\ncn=[0,0]\r\nfor _ in range(10000):\r\n    cn.append(1)\r\nfor i in range(2,10000):\r\n    if(cn[i]==1):\r\n        j=2*i\r\n        while(j<10000):\r\n            cn[j]=0\r\n            j+=i\r\nfor i in range(1,10000):\r\n    cn[i]+=cn[i-1]\r\nt=int(input())\r\nfor _ in range(t):\r\n    n,k1,k2=(int(i) for i in input().split())\r\n    p1,p2,p3,p4=(int(i) for i in input().split())\r\n    s1=math.floor(math.sqrt(k1-1))\r\n    s2=math.floor(math.sqrt(k2))\r\n    pr=cn[s2]-cn[s1]\r\n    ans=p1*pr+p2*(s2-s1-pr)+p3*(k2-k1+1-s2+s1)\r\n    print(ans%100000007)"]