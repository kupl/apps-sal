["# Python3 program to find XNOR\n# of two numbers\nimport math\n\n\ndef swap(a, b):\n temp = a\n a = b\n b = temp\n\n\n# log(n) solution\ndef xnor(a, b):\n # Make sure a is larger\n if (a < b):\n  swap(a, b)\n\n if (a == 0 and b == 0):\n  return 1;\n\n # for last bit of a\n a_rem = 0\n\n # for last bit of b\n b_rem = 0\n\n # counter for count bit and\n # set bit in xnor num\n count = 0\n\n # for make new xnor number\n xnornum = 0\n\n # for set bits in new xnor\n # number\n while (a != 0):\n\n  # get last bit of a\n  a_rem = a & 1\n\n  # get last bit of b\n  b_rem = b & 1\n\n  # Check if current two\n  # bits are same\n  if (a_rem == b_rem):\n   xnornum |= (1 << count)\n\n  # counter for count bit\n  count = count + 1\n\n  a = a >> 1\n  b = b >> 1\n\n return xnornum;\n\n\nt= int(input())\nfor o in range(t):\n a,b,n=map(int,input().split())\n c=a^b\n x=bin(c)\n x=x.split(\"b\")\n x=x[1]\n x=len(x)\n d=xnor(a,b)\n p=[a,b,c];r=[a,b,d]\n k=n%3-1\n if p[k]>r[k]:\n  print(p[k])\n else :\n  print(r[k])", "import math\n\ndef xnor(num1, num2): \n  \n if (num1 < num2): \n  temp = num1 \n  num1 = num2 \n  num2 = temp \n num1 = togglebit(num1) \n  \n return num1 ^ num2 \n \ndef togglebit( n): \n \n if (n == 0): \n  return 1\n \n i = n \n n = n|(n >> 1) \n n |= n >> 2\n n |= n >> 4\n n |= n >> 8\n n |= n >> 16\n \n return i ^ n \n\nfor _ in range(int(input())):\n a, b, n = [int(i) for i in input().split()]\n \n xoro = [a, b, a^b]\n xnoro = [a, b]\n index = 2\n \n while index != 8:\n  xnoro.append(xnor(xnoro[index-1], xnoro[index-2]))\n  index += 1\n \n if n > 8:\n  print(max(xoro[(n%3)-1], xnoro[n%3+5]))\n else:\n  print(max(xoro[(n%3)-1], xnoro[n-1]))", "# Python3 program to find XNOR\n# of two numbers\nimport math\n\n\ndef swap(a, b):\n temp = a\n a = b\n b = temp\n\n\n# log(n) solution\ndef xnor(a, b):\n # Make sure a is larger\n if (a < b):\n  swap(a, b)\n\n if (a == 0 and b == 0):\n  return 1;\n\n # for last bit of a\n a_rem = 0\n\n # for last bit of b\n b_rem = 0\n\n # counter for count bit and\n # set bit in xnor num\n count = 0\n\n # for make new xnor number\n xnornum = 0\n\n # for set bits in new xnor\n # number\n while (a != 0):\n\n  # get last bit of a\n  a_rem = a & 1\n\n  # get last bit of b\n  b_rem = b & 1\n\n  # Check if current two\n  # bits are same\n  if (a_rem == b_rem):\n   xnornum |= (1 << count)\n\n  # counter for count bit\n  count = count + 1\n\n  a = a >> 1\n  b = b >> 1\n\n return xnornum;\n\n\nt= int(input())\nfor o in range(t):\n a,b,n=map(int,input().split())\n c=a^b\n x=bin(c)\n x=x.split(\"b\")\n x=x[1]\n x=len(x)\n d=xnor(a,b)\n p=[a,b,c];r=[a,b,d]\n k=n%3-1\n if p[k]>r[k]:\n  print(p[k])\n else :\n  print(r[k])", "# Python3 program to find XNOR\n# of two numbers\nimport math\n\n\ndef swap(a, b):\n temp = a\n a = b\n b = temp\n\n\n# log(n) solution\ndef xnor(a, b):\n # Make sure a is larger\n if (a < b):\n  swap(a, b)\n\n if (a == 0 and b == 0):\n  return 1;\n\n # for last bit of a\n a_rem = 0\n\n # for last bit of b\n b_rem = 0\n\n # counter for count bit and\n # set bit in xnor num\n count = 0\n\n # for make new xnor number\n xnornum = 0\n\n # for set bits in new xnor\n # number\n while (a != 0):\n\n  # get last bit of a\n  a_rem = a & 1\n\n  # get last bit of b\n  b_rem = b & 1\n\n  # Check if current two\n  # bits are same\n  if (a_rem == b_rem):\n   xnornum |= (1 << count)\n\n  # counter for count bit\n  count = count + 1\n\n  a = a >> 1\n  b = b >> 1\n\n return xnornum;\n\n\nt= int(input())\nfor o in range(t):\n a,b,n=map(int,input().split())\n c=a^b\n x=bin(c)\n x=x.split(\"b\")\n x=x[1]\n x=len(x)\n d=xnor(a,b)\n p=[a,b,c];r=[a,b,d]\n k=n%3-1\n if p[k]>r[k]:\n  print(p[k])\n else :\n  print(r[k])", "# Python3 program to find XNOR\n# of two numbers\nimport math\n\n\ndef swap(a, b):\n temp = a\n a = b\n b = temp\n\n\n# log(n) solution\ndef xnor(a, b):\n # Make sure a is larger\n if (a < b):\n  swap(a, b)\n\n if (a == 0 and b == 0):\n  return 1;\n\n # for last bit of a\n a_rem = 0\n\n # for last bit of b\n b_rem = 0\n\n # counter for count bit and\n # set bit in xnor num\n count = 0\n\n # for make new xnor number\n xnornum = 0\n\n # for set bits in new xnor\n # number\n while (a != 0):\n\n  # get last bit of a\n  a_rem = a & 1\n\n  # get last bit of b\n  b_rem = b & 1\n\n  # Check if current two\n  # bits are same\n  if (a_rem == b_rem):\n   xnornum |= (1 << count)\n\n  # counter for count bit\n  count = count + 1\n\n  a = a >> 1\n  b = b >> 1\n\n return xnornum;\n\n\nt= int(input())\nfor o in range(t):\n a,b,n=list(map(int,input().split()))\n c=a^b\n x=bin(c)\n x=x.split(\"b\")\n x=x[1]\n x=len(x)\n d=xnor(a,b)\n p=[a,b,c];r=[a,b,d]\n k=n%3-1\n if p[k]>r[k]:\n  print(p[k])\n else :\n  print(r[k])\n", "# Python3 program to find XNOR\n# of two numbers\nimport math\n\n\ndef swap(a, b):\n temp = a\n a = b\n b = temp\n\n\n# log(n) solution\ndef xnor(a, b):\n # Make sure a is larger\n if (a < b):\n  swap(a, b)\n\n if (a == 0 and b == 0):\n  return 1;\n\n # for last bit of a\n a_rem = 0\n\n # for last bit of b\n b_rem = 0\n\n # counter for count bit and\n # set bit in xnor num\n count = 0\n\n # for make new xnor number\n xnornum = 0\n\n # for set bits in new xnor\n # number\n while (a != 0):\n\n  # get last bit of a\n  a_rem = a & 1\n\n  # get last bit of b\n  b_rem = b & 1\n\n  # Check if current two\n  # bits are same\n  if (a_rem == b_rem):\n   xnornum |= (1 << count)\n\n  # counter for count bit\n  count = count + 1\n\n  a = a >> 1\n  b = b >> 1\n\n return xnornum;\n\n\nt= int(input())\nfor o in range(t):\n a,b,n=list(map(int,input().split()))\n c=a^b\n x=bin(c)\n x=x.split(\"b\")\n x=x[1]\n x=len(x)\n d=xnor(a,b)\n p=[a,b,c];r=[a,b,d]\n k=n%3-1\n if p[k]>r[k]:\n  print(p[k])\n else :\n  print(r[k])\n", "def xnor(a, b):\n if a == 0:\n  return 1 ^ b \n p = a\n a = a|(a>>1)\n a = a|(a>>2)\n a = a|(a>>4)\n a = a|(a>>8)\n a = a|(a>>16)\n a = a|(a>>32)\n a = a|(a>>64) \n return (a ^ p) ^ b\ndef solve():\n a, b, n = list(map(int, input().split()))\n n -= 1\n index = n % 3\n if index == 0:\n  print(a)\n elif index == 1:\n  print(b)\n else:\n  x = a ^ b\n  e = xnor(max(a, b), min(a, b))\n  print(max(x, e))\n\nfor _ in range(int(input())):\n solve()\n", "def xnor(a, b):\n if a == 0:\n  return 1 ^ b \n p = a\n a = a|(a>>1)\n a = a|(a>>2)\n a = a|(a>>4)\n a = a|(a>>8)\n a = a|(a>>16)\n a = a|(a>>32)\n a = a|(a>>64) \n return (a ^ p) ^ b\ndef solve():\n a, b, n = list(map(int, input().split()))\n n -= 1\n index = n % 3\n if index == 0:\n  print(a)\n elif index == 1:\n  print(b)\n else:\n  x = a ^ b\n  e = xnor(max(a, b), min(a, b))\n  print(max(x, e))\n  \nt = int(input())\nwhile(t > 0):\n solve()\n t = t-1\n", "def xnor(a, b):\n if a == 0:\n  return 1 ^ b \n p = a\n a = a|(a>>1)\n a = a|(a>>2)\n a = a|(a>>4)\n a = a|(a>>8)\n a = a|(a>>16)\n a = a|(a>>32)\n a = a|(a>>64) \n return (a ^ p) ^ b\ndef solve():\n a, b, n = list(map(int, input().split()))\n n -= 1\n index = n % 3\n if index == 0:\n  print(a)\n elif index == 1:\n  print(b)\n else:\n  x = a ^ b\n  e = xnor(max(a, b), min(a, b))\n  print(max(x, e))\n  \nt = int(input())\nwhile(t > 0):\n solve()\n t = t-1\n", "# cook your dish here\ndef xnor(a, b):\n if a == 0:\n  return 1 ^ b \n p = a\n a = a|(a>>1)\n a = a|(a>>2)\n a = a|(a>>4)\n a = a|(a>>8)\n a = a|(a>>16)\n a = a|(a>>32)\n a = a|(a>>64) \n return (a ^ p) ^ b\ndef solve():\n a, b, n = map(int, input().split())\n n -= 1\n index = n % 3\n if index == 0:\n  print(a)\n elif index == 1:\n  print(b)\n else:\n  x = a ^ b\n  e = xnor(max(a, b), min(a, b))\n  print(max(x, e))\nt = int(input())\nwhile(t > 0):\n solve()\n t = t-1", "import math \n \ndef togglebit( n): \n \n if (n == 0): \n  return 1\n i = n \n n = n|(n >> 1) \n n |= n >> 2\n n |= n >> 4\n n |= n >> 8\n n |= n >> 16\n \n return i ^ n \ndef xnor( num1, num2): \n  \n # Make sure num1 is larger \n if (num1 < num2): \n  temp = num1 \n  num1 = num2 \n  num2 = temp \n num1 = togglebit(num1) \n  \n return num1 ^ num2 \ndef x(A,B,N):\n if N==1:\n  return A\n elif N==2:\n  return B\n else:\n  t0=A^B\n  t1=B^t0\n  t2=t0^t1\n  if N%3==0:\n   return t0\n  elif N%3==1:\n   return t1\n  else:\n   return t2\n   \ndef xn(A,B,N):\n if N==1:\n  return A\n elif N==2:\n  return B\n else:\n  cache=[xnor(A,B)]\n  cache.append(xnor(cache[0],B))\n  for i in range(2,7):\n   cache.append(xnor(cache[i-1],cache[i-2]))\n  t1=xnor(cache[6],cache[5])\n  t2=xnor(cache[6],t1)\n  t0=xnor(t2,t1)\n  if N<=9:\n   return cache[N-3]\n  else:\n   if N%3==0:\n    return t0\n   elif N%3==1:\n    return t1\n   else:\n    return t2\n \nt=int(input())\nfor _ in range(t):\n p,q,n=map(int,input().split())\n print(max(x(p,q,n),xn(p,q,n)))", "def xnor(a, b):\n if a == 0:\n  return 1 ^ b \n p = a\n a = a|(a>>1)\n a = a|(a>>2)\n a = a|(a>>4)\n a = a|(a>>8)\n a = a|(a>>16)\n a = a|(a>>32)\n a = a|(a>>64) \n return (a ^ p) ^ b\ndef solve():\n a, b, n = map(int, input().split())\n n -= 1\n index = n % 3\n if index == 0:\n  print(a)\n elif index == 1:\n  print(b)\n else:\n  x = a ^ b\n  e = xnor(max(a, b), min(a, b))\n  print(max(x, e))\nt = int(input())\nwhile(t > 0):\n solve()\n t = t-1", "\ndef togglebit( n): \n \n if (n == 0): \n  return 1\n\n i = n \n\n n = n|(n >> 1) \n\n n |= n >> 2\n n |= n >> 4\n n |= n >> 8\n n |= n >> 16\n \n return i ^ n \n  \ndef xnor( num1, num2): \n  \n if (num1 < num2): \n  temp = num1 \n  num1 = num2 \n  num2 = temp \n num1 = togglebit(num1) \n  \n return num1 ^ num2 \ndef nthXorFib(n, a, b): \n if n == 0 :  \n  return a \n if n == 1 :  \n  return b \n if n == 2 :  \n  return a ^ b \n \n return nthXorFib(n % 3, a, b) \ndef nthXnorFib(n, a, b): \n if n == 0 :  \n  return a \n if n == 1 :  \n  return b \n if n == 2 :  \n  return xnor(a,b)\n \n return nthXnorFib(n % 3, a, b) \n \nt=int(input())\nwhile(t):\n a,b,n=map(int,input().split())\n print(max(nthXnorFib(n-1,a,b),nthXorFib(n-1,a,b)))\n t-=1", "# cook your dish here\ndef togglebit(n):\n if (n == 0):\n  return 1\n \n i = n; \n\n n |= n >> 1; \n \n n |= n >> 2 \n n |= n >> 4 \n n |= n >> 8 \n n |= n >> 16\n return i ^ n\n\n \ndef xnor(num1,num2):\n if (num1 < num2):\n  temp = num1\n  num1 = num2\n  num2 = temp\n num1 = togglebit(num1)\n \n return num1 ^ num2\n \n\n\ndef xn(a,b,n):\n f = [0]*3 \n f[0] = a\n f[1] = b\n \n f[2] = xnor(a,b)\n if(n%3==0):\n  return f[2]\n else:\n  return f[(n%3)-1]\n\n\n\ndef fib(a, b, n):\n f = [0]*3 \n f[0] = a \n f[1] = b\n f[2] = a^b\n if(n%3==0):\n  return f[2]\n else:\n  return f[(n%3)-1]\n \n\ndef __starting_point():\n for _ in range(int(input())):\n  a,b,n = list(map(int, input().split()))\n  print(max(fib(a,b,n), xn(a,b,n)))\n\n\n__starting_point()", "# cook your dish here\ndef xnor(a, b):\n if a == 0:\n  return 1 ^ b \n p = a\n a = a|(a>>1)\n a = a|(a>>2)\n a = a|(a>>4)\n a = a|(a>>8)\n a = a|(a>>16)\n a = a|(a>>32)\n a = a|(a>>64) \n return (a ^ p) ^ b\ndef solve():\n a, b, n = map(int, input().split())\n n -= 1\n index = n % 3\n if index == 0:\n  print(a)\n elif index == 1:\n  print(b)\n else:\n  x = a ^ b\n  e = xnor(max(a, b), min(a, b))\n  print(max(x, e))\nt = int(input())\nwhile(t > 0):\n solve()\n t = t-1", "import sys\nimport math\nfrom collections import defaultdict,Counter\n\ninput=sys.stdin.readline\ndef print(x):\n sys.stdout.write(str(x)+\"\\n\")\n\n# sys.stdout=open(\"CP2/output.txt\",'w')\n# sys.stdin=open(\"CP2/input.txt\",'r')\n\n# m=pow(10,9)+7\nt=int(input())\nfor i in range(t):\n a,b,n=map(int,input().split())\n c=a^b\n c1=bin(c).lstrip('0b')\n c1=list(c1.rjust(max(len(bin(a)),len(bin(b)))-2,'0'))\n # print(c1)\n for j in range(len(c1)):\n  if c1[j]=='0':\n   c1[j]='1'\n  else:\n   c1[j]='0'\n c1=int(''.join(c1),2)\n  # print(c1,end=' ')\n l=[a,b,max(c,c1)]\n # if a==b:\n #   l[2]=1\n # n1=n\n # a1,b1=a,b\n ans=l[(n-1)%3]\n print(ans)\n # while n1-2:\n #   n1-=1\n #   c=a^b\n #   print(c,end=' ')\n #   a,b=b,c\n # print()\n # a,b=a1,b1\n # while n-2:\n #   n-=1\n #   c1=bin(a^b).lstrip('0b')\n #   c1=list(c1.rjust(max(len(bin(a)),len(bin(b)))-2,'0'))\n #   # print(c1)\n #   for j in range(len(c1)):\n #       if c1[j]=='0':\n #           c1[j]='1'\n #       else:\n #           c1[j]='0'\n #   c1=int(''.join(c1),2)\n #   print(c1,end=' ')\n #   a,b=b,c1\n #   # print(max(c,int(''.join(c1),2)))\n", "from sys import stdin\nimport math\n# Input data\n#stdin = open(\"input\", \"r\")\n\n\ndef togglebit(n):\n\n if (n == 0):\n  return 1\n\n i = n\n n = n | (n >> 1)\n n |= n >> 2\n n |= n >> 4\n n |= n >> 8\n n |= n >> 16\n\n return i ^ n\n\n\ndef xnor(num1, num2):\n if (num1 < num2):\n  temp = num1\n  num1 = num2\n  num2 = temp\n num1 = togglebit(num1)\n return num1 ^ num2\n\nfor _ in range(int(stdin.readline())):\n a, b, n = list(map(int, stdin.readline().split()))\n X = [a, b, a ^ b]\n E = [a, b]\n for i in range(2, n):\n  E.append(xnor(E[-1], E[-2]))\n  if E[-3:] == E[-6:-3]:\n   break\n x = (n - 1) % 3\n e = (n - len(E)) % 3\n if e == 0:\n  e = -1\n elif e == 1:\n  e = -3\n else:\n  e = -2\n print(max(X[x], E[e]))\n", "import math \n\ndef xnor(a, b): \n if (a < b): \n  a, b = b, a\n \n if (a == 0 and b == 0) : \n  return 1; \n # for last bit of a \n a_rem = 0 \n # for last bit of b \n b_rem = 0\n # counter for count bit and  \n #  set bit in xnor num \n count = 0\n # for make new xnor number \n xnornum = 0 \n # for set bits in new xnor \n # number \n while (a!=0) : \n  # get last bit of a \n  a_rem = a & 1 \n  # get last bit of b \n  b_rem = b & 1 \n  # Check if current two  \n  # bits are same \n  if (a_rem == b_rem):      \n   xnornum |= (1 << count) \n  # counter for count bit \n  count=count+1\n   \n  a = a >> 1\n  b = b >> 1\n  \n return xnornum;\n\nfor _ in range(int(input())):\n a, b, n = map(int, input().split())\n X = [a, b, a^b]\n E = [a, b, xnor(a, b)]\n \n i = (n-1)%3\n \n print(max(X[i], E[i]))", "def xnor(a,b): \n if (a < b): \n  a,b=b,a \n \n if (a == 0 and b == 0):  \n  return 1 \n \n a_rem = 0\n b_rem = 0\n \n count = 0 \n \n xnornum = 0 \n \n while (a):  \n  a_rem = a & 1 \n \n  b_rem = b & 1 \n  if (a_rem == b_rem):         \n   xnornum |= (1 << count)\n\n  count+=1 \n  a = a >> 1\n  b = b >> 1 \n return xnornum \n\ndef xor(a,b,n):\n if((n+2)%3==0):\n  return a\n elif((n+1)%3==0):\n  return b\n else:\n  return a^b\n  \ndef check(a,b,n):\n if(n==1):\n  return a\n elif(n==2):\n  return b\n if(n<=6):\n  ans=xnor(a,b)\n  for i in range(3,n):    \n   ans,b=xnor(ans,b),ans\n  return ans \n elif((n-4)%3==0):\n  return a\n elif((n-5)%3==0):\n  return b\n elif((n-6)%3==0):\n  return xnor(a,b)\n  \nfor z in range(int(input())):\n a,b,n=map(int,input().split()) \n print(max(xor(a,b,n),check(a,b,n)))", "import math \n \ndef swap(a,b): \n \n temp=a \n a=b \n b=temp \n \n# log(n) solution \ndef xnor(a, b): \n  \n # Make sure a is larger \n if (a < b): \n  swap(a, b) \n \n if (a == 0 and b == 0) : \n  return 1; \n  \n # for last bit of a \n a_rem = 0 \n  \n # for last bit of b \n b_rem = 0 \n \n # counter for count bit and  \n #  set bit in xnor num \n count = 0\n  \n # for make new xnor number \n xnornum = 0 \n \n # for set bits in new xnor \n # number \n while (a!=0) : \n  \n  # get last bit of a \n  a_rem = a & 1 \n   \n  # get last bit of b \n  b_rem = b & 1 \n \n  # Check if current two  \n  # bits are same \n  if (a_rem == b_rem):      \n   xnornum |= (1 << count) \n   \n  # counter for count bit \n  count=count+1\n   \n  a = a >> 1\n  b = b >> 1\n  \n return xnornum;\n\ndef nthXorFib(n, a, b): \n if n == 0 :  \n  return a \n if n == 1 :  \n  return b \n if n == 2 :  \n  return a ^ b \n \n return nthXorFib(n % 3, a, b)\n\ndef nthXNorFib(n, a, b): \n if n == 0 :  \n  return a \n if n == 1 :  \n  return b \n if n == 2 :  \n  return xnor(a, b)\n \n return nthXNorFib(n % 3, a, b)\n\nfor test in range(int(input())):\n a, b, n = map(int, input().split())\n\n print(max(nthXNorFib(n - 1, a, b), nthXorFib(n - 1, a, b)))", "def xnor(a, b) :\n if a == 0:\n  return 1 ^ b \n p = a\n a = a|(a>>1)\n a = a|(a>>2)\n a = a|(a>>4)\n a = a|(a>>8)\n a = a|(a>>16)\n a = a|(a>>32)\n a = a|(a>>64) \n return (a ^ p) ^ b\n\ndef solve() :\n a, b, n = list(map(int, input().split()))\n n -= 1\n index = n % 3\n if index == 0:\n  print(a)\n elif index == 1:\n  print(b)\n else:\n  x = a ^ b\n  e = xnor(max(a, b), min(a, b))\n  print(max(x, e))\n\nfor _ in range(int(input())) :\n solve()\n", "t = int(input())\nfor x in range(t):\n a,b,n = list(map(int,input().split()))\n import math \n \n# Please refer below post for details of this function \n# https://www.geeksforgeeks.org/toggle-bits-significant-bit/ \n def togglebit( n): \n  \n  if (n == 0): \n   return 1\n  \n  # Make a copy of n as we are \n  # going to change it. \n  i = n \n  \n  # Below steps set bits after \n  # MSB (including MSB) \n  \n  # Suppose n is 273 (binary \n  # is 100010001). It does following \n  # 100010001 | 010001000 = 110011001 \n  n = n|(n >> 1) \n  \n  # This makes sure 4 bits \n  # (From MSB and including MSB) \n  # are set. It does following \n  # 110011001 | 001100110 = 111111111 \n  n |= n >> 2\n  n |= n >> 4\n  n |= n >> 8\n  n |= n >> 16\n  \n  return i ^ n \n   \n # Returns XNOR of num1 and num2 \n def xnor( num1, num2): \n   \n  # Make sure num1 is larger \n  if (num1 < num2): \n   temp = num1 \n   num1 = num2 \n   num2 = temp \n  num1 = togglebit(num1) \n   \n  return num1 ^ num2 \n\n def xor(x,y,p):\n  if p%3 == 1:\n   return x\n  elif p%3 == 2:\n   return y\n  elif p%3 == 0:\n   return (x^y)\n def xnnor(x,y,p):\n  if p%3 == 1:\n   return x\n  elif p%3 == 2:\n   return y\n  elif p%3 == 0:\n   return xnor(x,y) \n #print(xor(a,b,n),xnor(a,b,n))\n print(max(xor(a,b,n),xnnor(a,b,n))) \n", "#Coded By Ujjwal Bharti\ndef binary(x):\n result = []\n while x != 0:\n  temp = x%2\n  x = x//2\n  result.append(temp)\n return result\ndef binCount(x):\n count=0\n while x != 0:\n  x = x//2\n  count += 1 \n return count\ndef xnor(a,b):\n final = []\n count = max(binCount(a),binCount(b))\n abin = binary(a)\n bbin = binary(b)\n if count != len(abin):\n  while len(abin) != count:\n   abin.append(0)\n if count != len(bbin):\n  while len(bbin) != count:\n   bbin.append(0)\n #print(abin,bbin)\n i=0\n while i <count:\n  if (bbin[i]==0 and abin[i]==0) or (bbin[i]==1 and abin[i]==1):\n   final.append(1)\n  else:\n   final.append(0)\n  i += 1\n #print(abin,bbin,final)\n ans = 0\n i = 0\n #print(final)\n for dig in final:\n  ans += (dig*(2**i))\n  #print(ans)\n  i += 1\n return ans\n \ntulu = int(input())\nfor _ in range(tulu):\n a,b,n = [int(x) for x in input().split()]\n x = a ^ b\n y = xnor(a,b)\n #print(y)\n value1 = x\n value2 = y\n if n %3==1:\n  value1=a\n  value2=a\n if n%3==2:\n  value2=b\n  value1=b\n print(max(value1,value2))", "t = int(input())\n\ndef xnor(a, b): \n  \n # Make sure a is larger \n if (a < b): \n  a, b = b, a\n \n if (a == 0 and b == 0) : \n  return 1; \n  \n # for last bit of a \n a_rem = 0 \n  \n # for last bit of b \n b_rem = 0 \n \n # counter for count bit and  \n #  set bit in xnor num \n count = 0\n  \n # for make new xnor number \n xnornum = 0 \n \n # for set bits in new xnor \n # number \n while (a!=0) : \n  \n  # get last bit of a \n  a_rem = a & 1 \n   \n  # get last bit of b \n  b_rem = b & 1 \n \n  # Check if current two  \n  # bits are same \n  if (a_rem == b_rem):      \n   xnornum |= (1 << count) \n   \n  # counter for count bit \n  count=count+1\n   \n  a = a >> 1\n  b = b >> 1\n  \n return xnornum;\n\nwhile t:\n t -= 1\n\n a, b, n = input().split()\n a, b, n = int(a), int(b), int(n)\n\n if n%3 == 1:\n  print(a)\n  continue\n\n if n%3 == 2:\n  print(b)\n  continue\n\n xor_ = a ^ b\n xnor_ = xnor(a, b)\n\n print(max(xor_, xnor_))"]