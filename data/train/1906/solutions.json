["class Solution:\n     def reconstructQueue(self, people):\n         \"\"\"\n         :type people: List[List[int]]\n         :rtype: List[List[int]]\n         \"\"\"\n         people.sort(key = lambda x: (-x[0], x[1]))\n         queue = []\n         for p in people:\n             queue.insert(p[1], p)\n         return queue\n \n", "class Solution:\n     def reconstructQueue(self, people):\n         \"\"\"\n         :type people: List[List[int]]\n         :rtype: List[List[int]]\n         \"\"\"\n         people.sort(key=lambda x: (-x[0], x[1]))\n         result=[]\n         for person in people:\n             result.insert(person[1],person)\n         return result", "class Solution:\n     def reconstructQueue(self, people):\n         \"\"\"\n         :type people: List[List[int]]\n         :rtype: List[List[int]]\n         \"\"\"\n         \n         \n         if not people:\n             return []\n         ordered_line = []\n         people = sorted(people, key=lambda x: x[1])\n         people = sorted(people, key=lambda x: -x[0])\n         for person in people:\n             ordered_line.insert(person[1], person)    \n         \n         \n         return ordered_line\n", "class Solution:\n     def reconstructQueue(self, people):\n         \"\"\"\n         :type people: List[List[int]]\n         :rtype: List[List[int]]\n         \"\"\"\n         people.sort(key=lambda x: (-x[0], x[1]))\n         \n         res = []\n         for person in people:\n             res.insert(person[1], person)\n             \n         return res\n"]