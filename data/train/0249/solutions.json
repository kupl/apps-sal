["class Solution:\n    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:\n        # slide window and call isMagicSquare\n        if len(grid) < 3 or len(grid[0]) < 3:\n            return 0\n        rows = len(grid)\n        cols = len(grid[0])\n        magic_squares = 0\n        for i in range(rows - 2):\n            for j in range(cols - 2):\n                window = [tmp[j:j + 3] for tmp in grid[i: i + 3]]\n                if self.isMagicSquare(window):\n                    magic_squares += 1\n        \n        return magic_squares\n    \n    def isMagicSquare(self, square: List[List[int]]) -> bool:\n        target = square[0][0] + square[0][1] + square[0][2]\n        seen = {}\n        print(square)\n        # check rows\n        for row in square:\n            tmp = 0\n            for i in row:\n                tmp += i\n                if i in seen or i > 9 or i < 1:\n                    return False\n                else:\n                    seen[i] = 1\n            if tmp != target:\n                return False\n        \n        # check cols\n        for i in range(3):\n            tmp = 0\n            for row in square:\n                tmp += row[i]\n            \n            if tmp != target:\n                return False\n        \n        \n        # check left to right diag\n        tmp = 0\n        for i in range(3):\n            tmp += square[i][i]\n        if tmp != target:\n            return False\n        \n        # check right to left diag\n        tmp = 0\n        for i in range(3):\n            tmp += square[i][2 - i]\n        if tmp != target:\n            return False\n        \n        return True", "class Solution:\n    \n    def isMagicSquare(self, grid):\n        '''\n        Check whether the given grid is a magic square\n        '''\n        # Check the elements\n        flat = [num for row in grid for num in row]\n        if sorted(flat) != [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n            return False\n        \n        # Check the row, column and diagnal sums\n        row_sums = [sum(row) for row in grid]\n        col_sums = [sum([row[i] for row in grid]) for i in range(3)]\n        diag_sums = [sum([grid[i][i] for i in range(3)]), (grid[0][2] + grid[1][1] + grid[2][0])]\n        row_sums.extend(col_sums)\n        row_sums.extend(diag_sums)\n        return len(set(row_sums)) == 1\n    \n    \n    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:\n        # 9:37 --> 9:52 --> 10:31 9/14/20\n        cnt = 0\n        # Construct the 3x3 square\n        for i in range(len(grid)-2):\n            for j in range(len(grid)-2):\n                temp_grid = [grid[i+k][j:j+3] for k in range(3)]\n                if self.isMagicSquare(temp_grid):\n                    cnt += 1\n        \n        return cnt\n        \n\n"]