["n, _q = map(int, input().split())\nmni = [-1] * 200001\nmxi = [-1] * 200001\ncnt = [0] * 200001\nnd = 0\na = list(map(int, input().split()))\nfor i, v in enumerate(a):\n    if mni[v] == -1: mni[v] = i; nd += 1\n    mxi[v] = i\n    cnt[v] += 1\nr = 0\nz = 0\ncurrmax = 0\nfor i, v in enumerate(a):\n    if i == mni[v]: z += 1\n    if i == mxi[v]: z -= 1\n    currmax = max(currmax, cnt[v])\n    if z == 0: r += currmax; currmax = 0\nprint(n - r)", "from sys import stdin\nn, q = tuple(int(x) for x in stdin.readline().split())\n\ntpl = tuple(x for x in stdin.readline().split())\n\ndic = {}\namt = {}\nfor i in range(n):\n    dic[tpl[i]] = i\n    if tpl[i] not in amt:\n        amt[tpl[i]] = 1\n    else:\n        amt[tpl[i]] += 1\n\nans = 0\ncounter = 0\nwhile counter < n:\n    right_bound = dic[tpl[counter]]\n    involved = set((tpl[counter],))\n    counter += 1\n    while counter < right_bound:\n        if tpl[counter] not in involved:\n            involved.add(tpl[counter])\n            right_bound = max(right_bound, dic[tpl[counter]])\n        counter += 1\n    \n    \n    temp = tuple(amt[x] for x in involved)\n    ans += sum(temp) - max(temp)\nprint(ans)\n", "N, Q = list(map(int, input().split()))\nA = [int(a) for a in input().split()]\nB = sorted(list(set(A)))\nM = len(B)\nIA = {}\nfor i in range(M):\n    IA[B[i]] = i\n\nA = [IA[a] for a in A]\nL = [N] * M\nR = [-1] * M\nC = [0] * M\nfor i in range(N):\n    L[A[i]] = min(L[A[i]], i)\n    R[A[i]] = max(R[A[i]], i)\n    C[A[i]] += 1\n\nX = []\nfor i in range(M):\n    X.append((L[i], R[i], C[i]))\nX = sorted(X, key = lambda x: x[1])\n\nY = [(-1, 0, 0)]\nfor i in range(M):\n    l, r, t = X[i]\n    m = t\n    while Y[-1][0] > l:\n        a, b, c = Y.pop()\n        t += b\n        m = max(m, c)\n    Y.append((r, t, m))\nprint(sum([y[1] - y[2] for y in Y[1:]]))\n\n", "import sys\ninput = sys.stdin.readline\n\nn,q=list(map(int,input().split()))\nA=list(map(int,input().split()))\n\nif max(A)==min(A):\n    print(0)\n    return\n\n\nL=max(A)\n\nMM=[[200005,-1,i] for i in range(L+1)]\nCOUNT=[0]*(L+1)\n\nfor i in range(n):\n    a=A[i]\n    MM[a][0]=min(MM[a][0],i)\n    MM[a][1]=max(MM[a][1],i)\n    COUNT[a]+=1\n\nMM.sort()\n\ni,j,k=MM[0]\n\nMAX=j\nCC=COUNT[k]\nMAXC=COUNT[k]\nANS=0\n\nfor i,j,k in MM[1:]:\n    if i==200005:\n        ANS+=CC-MAXC\n        break\n    \n    if MAX<i:\n        ANS+=CC-MAXC\n        \n        MAX=j\n        CC=COUNT[k]\n        MAXC=COUNT[k]\n\n    else:\n        CC+=COUNT[k]\n        MAX=max(MAX,j)\n        MAXC=max(MAXC,COUNT[k])\n\nprint(ANS)\n", "n, q = map(int, input().split())\nA = list(map(int, input().split()))\nleft = {}\nright = {}\nfor i in range(n):\n    if A[i] not in left:\n        left[A[i]] = i\n    right[A[i]] = i\nE = []\nfor elem in left:\n    E.append([left[elem], -1])\n    E.append([right[elem], 1])\nE.sort()\nu = 0\nb = 0\ncntr = {}\nans = 0\nfor i in range(n):\n    while u < len(E) and E[u][0] == i:\n        b -= E[u][1]\n        u += 1\n    if A[i] not in cntr:\n        cntr[A[i]] = 0\n    cntr[A[i]] += 1\n    if b == 0:\n        s = 0\n        m = 0\n        for iss in cntr:\n            s += cntr[iss]\n            m = max(m, cntr[iss])\n        ans += s - m\n        cntr = {}\nprint(ans)", "#!usr/bin/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\ndef S():\n    res = list(sys.stdin.readline())\n    if res[-1] == \"\\n\":\n        return res[:-1]\n    return res\ndef IR(n):\n    return [I() for i in range(n)]\ndef LIR(n):\n    return [LI() for i in range(n)]\ndef SR(n):\n    return [S() for i in range(n)]\ndef LSR(n):\n    return [LS() for i in range(n)]\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\n#A\ndef A():\n    n = I()\n    a = LI()\n    a.sort()\n    f = [1]*n\n    p = 0\n    ans = 0\n    while p < n:\n        while p < n and not f[p]:\n            p += 1\n        if p == n:\n            break\n        ans += 1\n        for i in range(n):\n            if a[i]%a[p] == 0:\n                f[i] = 0\n    print(ans)\n    return\n\n#B\ndef B():\n    n = I()\n    s = list(map(int, input()))\n    g = LIR(n)\n    ans = sum(s)\n    for t in range(30000):\n        for i in range(n):\n            ai,bi = g[i]\n            if t < bi:\n                continue\n            if (t-bi)%ai == 0:\n                s[i] ^= 1\n        su = sum(s)\n        if ans < su:\n            ans = su\n    print(ans)\n    return\n\n#C\ndef C():\n    t = I()\n    for _ in range(t):\n        n = I()\n        s = list(map(int, input()))\n        mi = [s[-1]]\n        for i in range(n-1)[::-1]:\n            mi.append(min(mi[-1],s[i]))\n        mi = mi[::-1]\n        ans = [None]*n\n        for i in range(n):\n            if mi[i] == s[i]:\n                ans[i] = 1\n            else:\n                ans[i] = 2\n        q = [s[i] for i in range(n) if ans[i] > 1]\n        p = [q[i] for i in range(len(q))]\n        p.sort()\n        if p == q:\n            for i in ans:\n                print(i,end = \"\")\n            print()\n        else:\n            print(\"-\")\n    return\n\n#D\ndef D():\n    def root(x):\n        if x == par[x]:\n            return x\n        par[x] = root(par[x])\n        return par[x]\n\n    def unite(x,y):\n        x = root(x)\n        y = root(y)\n        if rank[x] < rank[y]:\n            par[x] = y\n        else:\n            par[y] = x\n            if rank[x] == rank[y]:\n                rank[x] += 1\n\n    n,k = LI()\n    par = [i for i in range(n)]\n    rank = [0]*n\n    for i in range(k):\n        x,y = LI()\n        x -= 1\n        y -= 1\n        if root(x) != root(y):\n            unite(x,y)\n    size = [0]*n\n    for i in range(n):\n        size[root(i)] += 1\n    ans = 0\n    for i in size:\n        if i > 0:\n            ans += i-1\n    print(k-ans)\n    return\n\n#E\ndef E():\n    t = I()\n    for _ in range(t):\n        n,m = LI()\n        s = LIR(n)\n        s = [[s[i][j] for i in range(n)] for j in range(m)]\n        if n <= m:\n            ma = [max(s[i]) for i in range(m)]\n            ma.sort(reverse = True)\n            print(sum(ma[:n]))\n        else:\n            ans = 0\n            k = [[]]\n            for _ in range(m):\n                k_ = []\n                for i in range(n):\n                    k_ += [x+[i] for x in k]\n                k = [x for x in k_]\n            for l in k:\n                s_ = [[s[i][(j+l[i])%n] for j in range(n)] for i in range(m)]\n                print(l)\n                p = sum([max([s_[i][j] for i in range(m)]) for j in range(n)])\n                print(s_,p)\n                if ans < p:\n                    ans = p\n            print(ans)\n    return\n\n#F\ndef F():\n\n    return\n\n#G\ndef G():\n    def root(x):\n        if x == par[x]:\n            return x\n        par[x] = root(par[x])\n        return par[x]\n\n    def unite(x,y):\n        x = root(x)\n        y = root(y)\n        if rank[x] < rank[y]:\n            par[x] = y\n        else:\n            par[y] = x\n            if rank[x] == rank[y]:\n                rank[x] += 1\n\n    m = 200000\n    par = [i for i in range(m)]\n    rank = [0]*m\n    n,q = LI()\n    a = LI()\n    for i in range(n):\n        a[i] -= 1\n    count = defaultdict(lambda : 0)\n    l = defaultdict(lambda : 0)\n    lis = []\n    for i in range(n):\n        ai = a[i]\n        if count[ai] == 0:\n            l[ai] = i\n            lis.append(ai)\n        count[ai] += 1\n    f = defaultdict(lambda : 0)\n    r = defaultdict(lambda : 0)\n    for i in range(n)[::-1]:\n        ai = a[i]\n        if not f[ai]:\n            r[ai] = i\n            f[ai] = 1\n    f = [0]*n\n    for i in lis:\n        li,ri = l[i],r[i]\n        f[li] += 1\n        f[ri] -= 1\n    for i in range(n-1):\n        if f[i] > 0:\n            x,y = a[i], a[i+1]\n            if root(x) != root(y):\n                unite(x,y)\n        f[i+1] += f[i]\n    size = defaultdict(lambda : [])\n    for i in l:\n        size[root(i)].append(count[i])\n    ans = 0\n    for i in size.values():\n        ans += sum(i)-max(i)\n    print(ans)\n    return\n\n#H\ndef H():\n\n    return\n\n#Solve\ndef __starting_point():\n    G()\n\n__starting_point()", "MAXN = 200100\n\nn, q = list(map(int, input().split()))\na = list(map(int, input().split()))\nlpos = [-1]*MAXN\nfor i in range(n):\n\tlpos[a[i]] = i\nneed = 0\ni = 0\nwhile i < n:\n\tstart = i\n\tr = lpos[a[i]]\n\tj = i + 1\n\twhile j < r:\n\t\tr = max(r, lpos[a[j]])\n\t\tj += 1\n\tcnts = {}\n\twhile i <= r:\n\t\tif a[i] in cnts:\n\t\t\tcnts[a[i]] += 1\n\t\telse:\n\t\t\tcnts[a[i]] = 1\n\t\ti += 1\n\tbest = 0\n\tfor k, v in list(cnts.items()):\n\t\tbest = max(best, v)\n\tneed += i - start - best\n\nprint(need)\n", "MAXN = 200100\n\nn, q = list(map(int, input().split()))\na = list(map(int, input().split()))\nlpos = [-1]*MAXN\nfor i in range(n):\n\tlpos[a[i]] = i\nneed = 0\ni = 0\nwhile i < n:\n\tstart = i\n\tr = lpos[a[i]]\n\tcnts = {}\n\twhile i <= r:\n\t\tr = max(r, lpos[a[i]])\n\t\tif a[i] in cnts:\n\t\t\tcnts[a[i]] += 1\n\t\telse:\n\t\t\tcnts[a[i]] = 1\n\t\ti += 1 \n\tneed += i - start - max(cnts.values())\n\nprint(need)\n", "from sys import stdin\nn,m=list(map(int,stdin.readline().strip().split()))\ns=list(map(int,stdin.readline().strip().split()))\nmx=200000\narr=[-1 for i in range(mx+1)]\nvisited=[False for i in range(mx+1)]\ncnt=[0 for i in range(mx+1)]\nfor i in range(n):\n    arr[s[i]]=i\nx=0\nans=0\ninf=mx+30\nwhile x<n:\n    ind=arr[s[x]]\n    v=[]\n    l=x\n    while x<=ind and x<n:\n        ind=max(arr[s[x]],ind)\n        v.append(s[x])\n        cnt[s[x]]+=1\n        x+=1\n    aux=0\n    for i in v:\n        aux=max(aux,cnt[i])\n    ans+=(x-l-aux)\n        \n    \nprint(ans)\n", "n, q = map(int, input().split())\na    = list(map(int, input().split()))\nd    =  {}\n\ndef max_frequent(s, e, a):\n    d = {}\n    for x in a[s: e+1]:\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        \n    return e - s + 1 - max(list(d.values()))     \n    \nfor i, x in enumerate(a):\n    if x not in d:\n        d[x] = []\n    d[x].append(i)\n\nsegment = [[v[0], v[-1]] for v in d.values()]    \nend     = -1\nstart   = -1 \nblock   = []\n\nfor s, e in segment:\n    if s > end:\n        if end != -1:\n            block.append([start, end])\n        start = s   \n        end   = e \n    if e > end:\n        end = e\n        \nblock.append([start, end])        \n\ncnt = 0\nfor s, e in block:\n    cnt += max_frequent(s, e, a)\nprint(cnt)       ", "n, _q = map(int, input().split())\nmni = [-1] * 200001\nmxi = [-1] * 200001\ncnt = [0] * 200001\nnd = 0\na = list(map(int, input().split()))\nfor i, v in enumerate(a):\n    if mni[v] == -1: mni[v] = i; nd += 1\n    mxi[v] = i\n    cnt[v] += 1\nr = 0\nz = 0\ncurrmax = 0\nfor i, v in enumerate(a):\n    if i == mni[v]: z += 1\n    if i == mxi[v]: z -= 1\n    currmax = max(currmax, cnt[v])\n    if z == 0: r += currmax; currmax = 0\nprint(n - r)", "n, q = map(int,input().split())\nA = list(map(int,input().split()))\nsizes = dict()\n\n\nfor j in range(n):\n    if A[j] in sizes:\n        sizes[A[j]][2] += 1\n        sizes[A[j]][1] = j\n    else:\n        sizes[A[j]] = [j,j,1]\n#print(sizes)\n\nanswer = 0\nend = -1\nmax_size = -1\nfor j in range(n):\n    end = max(end, sizes[A[j]][1])\n    max_size = max(max_size, sizes[A[j]][2])\n    if j == end:\n        answer+= max_size\n        #print(j, max_size)\n        max_size = 0\n\nanswer = -answer\n\nfor j in sizes:\n    answer += sizes[j][2]\n\nprint(answer)", "import itertools\nimport sys\n\ndef __starting_point():\n    n, q = map(int, input().split())\n    blocks = list(map(int, input().split()))\n    # create empty dictionary - unordered collection\n    dif = dict()\n\n    for i in range(n):\n        if blocks[i] in dif:\n            dif[blocks[i]][1] = i\n            dif[blocks[i]][2] = dif[blocks[i]][2] + 1\n        elif blocks[i] not in dif:\n            dif[blocks[i]] = [i, i, 1]\n\n    rez = 0\n    end = -1\n    maxi = -1\n    for i in range(n):\n        if dif[blocks[i]][1] >= end:\n            end = dif[blocks[i]][1]\n        if dif[blocks[i]][2] >= maxi:\n            maxi = dif[blocks[i]][2]\n        if i == end:\n            rez  = rez + maxi\n            maxi = 0\n    rez = (-1) * rez\n    for i in dif:\n        rez = rez + dif[i][2]\n    print(rez)\n__starting_point()"]