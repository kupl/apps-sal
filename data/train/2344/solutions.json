["import sys\ninput = sys.stdin.readline\n\nT = int(input())\nfor _ in range(T):\n    N, M = list(map(int, input().split()))\n    X = [[] for i in range(3*N)]\n    for i in range(M):\n        x, y = list(map(int, input().split()))\n        x, y = min(x,y), max(x,y)\n        X[x-1].append((y-1, i+1))\n    \n    MAT = []\n    IND = []\n    DONE = [0] * 3*N\n    for i in range(3*N):\n        if DONE[i]: continue\n        for j, ind in X[i]:\n            if DONE[j] == 0:\n                MAT.append(ind)\n                DONE[i] = 1\n                DONE[j] = 1\n                break\n        else:\n            IND.append(i+1)\n\n    if len(MAT) >= N:\n        print(\"Matching\")\n        print(*MAT[:N])\n    else:\n        print(\"IndSet\")\n        print(*IND[:N])\n\n\n", "import sys\ninput=sys.stdin.readline\nT=int(input())\nfor _ in range(T):\n    n,m=map(int,input().split())\n    edges=[0]*m\n    for i in range(m):\n        edges[i]=tuple(map(int,input().split()))\n    used=[0]*(3*n)\n    edgess=[]\n    check=0\n    for i in range(m):\n        if used[edges[i][0]-1]==used[edges[i][1]-1]==0:\n            edgess.append(i+1)\n            used[edges[i][0]-1]=1\n            used[edges[i][1]-1]=1\n            check+=1\n    if check>=n:\n        useful=edgess[:n]\n        edgess=[str(guy) for guy in useful]\n        print(\"Matching\")\n        print(\" \".join(edgess))\n    else:\n        indep=[]\n        for i in range(1,3*n+1):\n            if used[i-1]==0:\n                indep.append(i)\n        useful=indep[:n]\n        verts=[str(guy) for guy in useful]\n        print(\"IndSet\")\n        print(\" \".join(verts))", "import sys\ninput=sys.stdin.readline\nT=int(input())\nfor _ in range(T):\n    n,m=map(int,input().split())\n    edges=[0]*m\n    for i in range(m):\n        edges[i]=tuple(map(int,input().split()))\n    used=set()\n    edgess=[]\n    check=0\n    for i in range(m):\n        if (edges[i][0] not in used) and (edges[i][1] not in used):\n            edgess.append(i+1)\n            used.add(edges[i][0])\n            used.add(edges[i][1])\n            check+=1\n    if check>=n:\n        useful=edgess[:n]\n        edgess=[str(guy) for guy in useful]\n        print(\"Matching\")\n        print(\" \".join(edgess))\n    else:\n        indep=[]\n        for i in range(1,3*n+1):\n            if i not in used:\n                indep.append(i)\n        useful=indep[:n]\n        verts=[str(guy) for guy in useful]\n        print(\"IndSet\")\n        print(\" \".join(verts))", "from sys import stdin\ninput = stdin.readline\nq = int(input())\nfor query in range(q):\n\tn, m = map(int, input().split())\n\tdupa = [0] * (3 * n + 1)\n\tedges = []\n\tfor i in range(m):\n\t\tu, v = map(int, input().split())\n\t\tif dupa[u] == 0 and dupa[v] == 0:\n\t\t\tdupa[u] = 1\n\t\t\tdupa[v] = 1\n\t\t\tif len(edges) < n:\n\t\t\t\tedges.append(i+1)\n\tif len(edges) == n:\n\t\tprint(\"Matching\")\n\t\tprint(*edges)\n\telse:\n\t\tprint(\"IndSet\")\n\t\tchuj = 0\n\t\tfor i in range(1, 3 * n + 1):\n\t\t\tif chuj == n:\n\t\t\t\tbreak\n\t\t\tif dupa[i] == 0:\n\t\t\t\tif chuj < n - 1:\n\t\t\t\t\tprint(i, end = \" \")\n\t\t\t\telse:\n\t\t\t\t\tprint(i)\n\t\t\t\tchuj += 1", "import sys\n\n\ndef main():\n    # sys.stdin = open(\"in.txt\", \"r\")\n    # sys.stdout = open(\"out.txt\", \"w\")\n\n    it = iter(map(int, sys.stdin.read().split()))\n\n    t = next(it)\n    for _ in range(t):\n        n = next(it)\n        m = next(it)\n\n        total_node = 3 * n\n        is_node_covered = [False for _ in range(total_node+1)]\n        is_edge_in_matching = [False for _ in range(m+1)]\n        matching_edge_count = 0\n\n        for i in range(1, m+1):\n            u = next(it)\n            v = next(it)\n\n            if (not is_node_covered[u]) and (not is_node_covered[v]):\n                is_node_covered[u] = is_node_covered[v] = True\n                is_edge_in_matching[i] = True\n                matching_edge_count += 1\n\n        ansL = []\n        if matching_edge_count >= n:\n            ansL.append('Matching\\n')\n            edge_taken = 0\n            for i in range(1, m+1):\n                if is_edge_in_matching[i]:\n                    ansL.append(str(i) + ' ')\n                    edge_taken += 1\n                    if edge_taken == n: break\n        else:\n            ansL.append('IndSet\\n')\n            node_taken = 0\n            for i in range(1, total_node+1):\n                if not is_node_covered[i]:\n                    ansL.append(str(i) + ' ')\n                    node_taken += 1\n                    if node_taken == n: break\n\n        ansL.append('\\n')\n        sys.stdout.write(''.join(ansL))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\ninput = sys.stdin.readline\nmaxn=100005\nhell=1000000007\nvis = [0]*3*maxn\ndef meowmeow321():\n    n,m=map(int,input().split())\n    for i in range(3*n+1):\n        vis[i]=0\n    elst = []\n    for i in range(m):\n        x,y=map(int,input().split())\n        if (not vis[x]) and (not vis[y]):\n            vis[x]=1\n            vis[y]=1\n            elst.append(i+1)\n    if len(elst)>=n :\n        print(\"Matching\")\n        for i in range(n):\n            print(elst[i],end=\" \")\n        print(\"\")\n    else:\n        print(\"IndSet\")\n        cnt=0\n        cur=1\n        while cnt<n and cur<=3*n:\n            if not vis[cur]:\n                print(cur,end=\" \")\n                cnt+=1\n            cur+=1\n        print(\"\")\nt=int(input())\nfor xxx in range(t):\n    meowmeow321()"]