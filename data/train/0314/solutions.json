["class Solution:\n    def numSub(self, s: str) -> int:\n        # 10/6/20\n        dic = collections.defaultdict(int)\n        \n        n = len(s)\n        left, right = 0, 0\n        while left < n:\n            if s[left] == '1':\n                right = left\n                while right < n and s[right] == '1':\n                    right += 1\n                dic[right-left] += 1\n                left = right\n            else:\n                left += 1\n        \n        total = 0\n        for ones in dic:\n            total = (total + (ones *(ones+1)) // 2 * dic[ones]) % (10**9 + 7)\n        return total\n            \n        \n        \n        \n", "class Solution:\n    def calc_num_variations(self, num_ones, memo):\n        \n        if num_ones in memo:\n            return memo[num_ones]\n        \n        curr_sum = 0\n        \n        for x in range(num_ones+1):\n            curr_sum += x\n            if not x in memo:\n                memo[x] = curr_sum\n        \n        memo[num_ones] = curr_sum\n        \n        return curr_sum\n\n    \n    def numSub(self, s: str) -> int:\n        memo = {}\n        num_ones = 0\n        \n        num_variations = 0\n        \n        for one in s:\n            if one == '1':\n                num_ones += 1\n            else:\n                num_variations += self.calc_num_variations(num_ones, memo)\n                num_ones = 0\n                \n        if num_ones > 0:\n            num_variations += self.calc_num_variations(num_ones, memo)\n            \n        return num_variations%(10**9 + 7)", "class Solution:\n    def numSub(self, s: str) -> int:\n        res = 0\n        i = 0\n        mod = (int)(1e9+7)\n        while i < len(s):\n            if s[i]!='1':\n                i+=1\n                continue\n            start = i\n            while i<len(s) and s[i] == '1':\n                i+=1\n            count = i-start\n            res += count*(count+1)/2\n            res %= mod\n        \n        return int(res)\n", "class Solution:\n    def numSub(self, s: str) -> int:\n        res = 0\n\n        mod = pow(10,9) + 7\n\n        i = 0\n        while i< len(s):\n            cnt = 0\n            while i < len(s) and s[i] == '1':\n                cnt+=1\n                i+=1\n            i+=1\n            res += (cnt*(cnt+1))//2 % mod\n        return res", "class Solution:\n    def numSub(self, s: str) -> int:\n        n = len(s)\n        \n        start = 0 \n        while start < n and s[start] != '1':\n            start += 1 \n        if start == n:\n            return 0 \n        i = start\n        count = 0\n        while i < n and start < n:\n            if s[i] == '1':\n                count += i - start + 1\n                count = count % (10**9 + 7)\n                i += 1\n                continue\n            start = i\n            while start < n and s[start] != '1':\n                start += 1 \n            i = start\n        return count", "class Solution:\n    def numSub(self, s: str) -> int:\n        result, stop_idx = 0, -1\n        for idx, char in enumerate(s):\n            if char != '1' or idx <= stop_idx:\n                continue\n            \n            freq = 1\n            next_idx = idx + 1\n            while (next_idx < len(s) and s[next_idx] == '1'):\n                freq += 1\n                stop_idx = next_idx\n                next_idx += 1\n            \n            result += (freq + 1)*freq/2\n        \n        return int(result % (1e9 + 7))\n", "class Solution:\n    def numSub(self, s: str) -> int:\n        cont_one_count = 0\n        one_sub = 0\n        for char in s:\n            if char=='1':\n                cont_one_count+=1\n            if char=='0':\n                one_sub+=(cont_one_count*(cont_one_count+1))/2\n                cont_one_count=0\n        one_sub+=(cont_one_count*(cont_one_count+1))/2\n        return int(one_sub)%(10**9+7)\n", "class Solution:\n    def numSub(self, s: str) -> int:\n        result, stop_idx = 0, -1\n        for idx, char in enumerate(s):\n            if char != '1':\n                continue\n            \n            if idx <= stop_idx:\n                continue\n            \n            freq = 1\n            next_idx = idx + 1\n            while (next_idx < len(s) and s[next_idx] == '1'):\n                freq += 1\n                stop_idx = next_idx\n                next_idx += 1\n            \n            result += (freq + 1)*freq/2\n        \n        return int(result % (1e9 + 7))\n", "class Solution:\n    def numSub(self, s: str) -> int:\n        self.s = s\n        \n        modulo = 1000000007\n\n        def numSub(s):\n            sOne = ''\n            sSub = []\n            for i in range(len(s)):\n                if s[i] == '1':\n                    sOne += '1'\n                    if i != len(s) - 1:\n                        if s[i + 1] == '1':\n                            continue\n                        else:\n                            sSub.append(sOne)\n                            sOne = ''\n                    else:\n                        sSub.append(sOne)\n            return sSub\n\n        sSub = numSub(s)\n        num_sOne = 0\n        for sOne in sSub:\n            len_sOne = len(sOne)\n            num_sOne += ((len_sOne * (len_sOne + 1)) // 2) % modulo\n        num_sOne %= modulo\n        \n        return int(num_sOne)", "class Solution:\n    def numSub(self, s: str) -> int:\n        num_lst = []\n        ans = 0\n        temp = 0\n        \n        for n in s:\n            if n == '1':\n                temp += 1\n                \n            if n == '0' and temp != 0:\n                num_lst.append(temp)\n                temp = 0\n                \n        if temp != 0: num_lst.append(temp) \n        \n        if len(num_lst) == 0: return 0\n        \n        for num in num_lst:\n            while num != 0:\n                ans += num\n                num -= 1\n                \n        return ans % ((10**9) + 7)", "class Solution:\n    def numSub(self, s: str) -> int:\n        n = len(s)\n        i = 0 \n        \n        count = 0\n        while (i<n): \n            if s[i] == '1': \n                seq = 0 \n                while (i<n) and (s[i] == '1'):\n                    seq += 1\n                    i += 1                \n                count += seq*(seq+1)//2\n                \n            else: \n                i += 1\n                    \n                \n        print(count%(10**9 + 7))\n        \n        return count%(10**9 + 7)", "class Solution:\n    def numSub(self, s: str) -> int:\n        sum = cnt = 0\n        for c in s:\n            if c == '1':\n                cnt += 1\n                sum = (sum + cnt) % (10 ** 9 + 7)\n            else:\n                cnt = 0\n        return sum\n"]