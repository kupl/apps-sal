["def gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n\nn = int(input())\nA = list(map(int, input().split()))\n\nGCD = A[0]\nfor x in A[1:]:\n    GCD = gcd(GCD, x)\nnum = max(A) // GCD - n\nif num % 2 == 0:\n    print(\"Bob\")\nelse:\n    print(\"Alice\")\n\n", "from fractions import gcd\n\n\nn = int(input())\na = list(map(int, input().split()))\nmel = max(a)\nfor i in range(1, len(a)):\n    a[0] = gcd(a[0], a[i])\nprint(('Bob', 'Alice')[(mel // a[0] - n) % 2])", "#print('Bob' if int(input()) % 2 else 'Alice')\n#argh I hate misreading the problem\n\nimport fractions\nn = int(input())\na = list(map(int, input().split()))\ngcd = a[0]\nfor x in a:\n    gcd = fractions.gcd(gcd, x)\nmoves = max(a) // gcd - n\nprint('Alice' if moves % 2 else 'Bob')\n", "import fractions, functools\nn = int(input())\na = list(map(int, input().split()))\ngcd = functools.reduce(fractions.gcd, a)\nmoves = max(a) // gcd - n\nprint(['Bob', 'Alice'][moves % 2])\n", "from fractions import gcd\n\nn=int(input())\n\nA=list(map(int,input().split()))\nA.sort()\nx=A[0]\nfor i in range(1,n):\n    x=gcd(x,A[i])\n\n                \n\nmoves=(max(A)//x)-n\n\nif(moves%2==0):\n    print(\"Bob\")\nelse:\n    print(\"Alice\")\n", "def gcd(a, b):\n  return gcd(b, a % b) if b else a\n\nn = int(input())\nA = [int(x) for x in input().split()]\nA.sort()\ng = 0\nfor x in A:\n  g = gcd(x, g);\nprint(\"Alice\" if (A[n-1]//g-n) % 2 else \"Bob\")\n", "from fractions import gcd\nn = int(input())\na = [int(x) for x in input().split()]\ngg = a[0]\nfor i in range(1,n):\n    gg = gcd(gg,a[i])\nfor i in range(n):\n    a[i] //= gg\nif (max(a) - n) % 2 == 0:\n    print('Bob')\nelse:\n    print('Alice')", "def gcd(a,b):\n  if b == 0:\n    return a\n  return gcd(b,a%b)\na = int(input())\nb = list(map(int,input().split()))\nc = m = 0\nfor x in b:\n  c = gcd(c,x)\n  if(x > m):\n    m = x\nif (m//c-a)&1:\n  print(\"Alice\")\nelse:\n  print(\"Bob\")\n\n", "from fractions import gcd\n\nn=int(input())\n\nA=list(map(int,input().split()))\nA.sort()\nx=A[0]\nfor i in range(1,n):\n    x=gcd(x,A[i])\n\n                \n\nmoves=(max(A)//x)-n\n\nif(moves%2==0):\n    print(\"Bob\")\nelse:\n    print(\"Alice\")", "def gcd(a, b):\n    c = a % b\n    return gcd(b, c) if c else b\n\nn = int(input())\nt = list(map(int, input().split()))\n\nx = gcd(t[0], t[1])\nfor i in t[2: ]:\n    x = gcd(i, x)\nprint(['Bob', 'Alice'][(max(t) // x - n) % 2])", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport fractions\n\nn = int(input())\na = list(map(int, input().split()))\nm = max(a)\ng = 0\nfor i in a:\n    g = fractions.gcd(g, i)\n\nif (m//g - n) % 2 == 0:\n    print('Bob')\nelse:\n    print('Alice')\n", "import fractions;\n\nn = int(input());\na = list(map(int, input().split()));\ngcd = a[0];\nfor i in range(1, n):\n\tgcd = fractions.gcd(gcd, a[i]);\nx = (max(a) / gcd - n)\nif (x % 2 == 1):\n\tprint(\"Alice\");\nelse:\n\tprint(\"Bob\");", "from fractions import gcd\nn, f, m = int(input()), 0, 0\nfor x in map(int, input().split()):\n    f, m = gcd(f, x), max(m, x)\nprint('Alice' if (m // f - n) % 2 else 'Bob')\n", "def main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[-1]\n    for b in l:\n        while a:\n            a, b = b % a, a\n        a = b\n    print(('Bob', 'Alice')[(max(l) // a - n) & 1])\n\n\ndef __starting_point():\n    main()\n__starting_point()", "from fractions import gcd\nn = int(input())\na = list(map(int, input().split()))\nd = gcd(a[0], a[1])\nfor i in range(1, n, 1):\n    d = gcd(d, a[i])\nm2 = max(a)\nif (m2//d-n) % 2 == 1:\n    print('Alice')\nelse:\n    print('Bob')\n", "from fractions import gcd\n\nn = int(input())\nx = list(map(int, input().split(' ')))\ngcdx = x[0]\nfor i in x:\n    gcdx = gcd(gcdx, i)\n    \nnums = max(x) / gcdx\n\nif (int(nums) - n)%2 == 1:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")\n", "#!/usr/bin/env python3\nimport collections, itertools, functools, math, fractions\n\ndef solve(a):\n    g = functools.reduce(fractions.gcd, a)\n    r = max(a)//g - len(a)\n    return 1 - r%2\n\ndef __starting_point():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(['Alice', 'Bob'][solve(a)])\n\n\n\n__starting_point()", "\nfrom math import gcd\n\nn = int(input())\nar = sorted(map(int,input().split()))\n\nd =  gcd(ar[0],ar[1])\n\nfor i in range(2,n):\n\td = gcd(d,ar[i])\n\nN = max(ar)//d - n\nprint( \"Alice\" if N%2 else \"Bob\")\n\n\n#  C:\\Users\\Usuario\\HOME2\\Programacion\\ACM\n", "# coding = utf-8\nfrom functools import reduce\ndiv = 1000000007\ns = input()\nn = int(s)\ns = input()\nnum = list([int(x) for x in s.split(\" \")])\n\ndef gcd(a,b):\n\tif b == 0:\n\t\treturn a\n\treturn gcd(b,a%b)\n\ng = reduce(gcd,num)\nm = max(num)\n\nnow = m/g\nremain = now - len(num)\nif remain%2==0:\n\tprint(\"Bob\")\nelse:\n\tprint(\"Alice\")\n", "from math import gcd\nfrom functools import reduce\nn, a = int(input()), list(map(int, input().split()))\ng = reduce(lambda x, y: gcd(x, y), a, 0)\nprint(\"Alice\" if (max(a) // g - n) % 2 == 1 else \"Bob\")", "import math\n\nn = int(input())\narr = list(map(int, input().split()))\n\ngcd = 0\nfor num in arr:\n\tgcd = math.gcd(gcd, num)\n\nmoves = max(arr) / gcd - n\nif moves % 2:\n\tprint('Alice')\nelse:\n\tprint('Bob')", "from fractions import gcd\nfrom functools import reduce\nn = int(input())\na = list(map(int, input().split()))\ng = reduce(gcd, a)\ns = max(a)//g - n\nif s%2:\n    print('Alice')\nelse:\n    print('Bob')", "from fractions import gcd\nn=int(input())\na=list(map(int,input().split()))\na.sort()\nx=a[0]\nfor i in range(1,n):\n    x=gcd(x,a[i])\n# In the end,array will be x,2x,3x...,regardless of the initial state\nmoves=(max(a)//x)-n\nif(moves%2==0):\n    print(\"Bob\")\nelse:\n    print(\"Alice\")", "import fractions, functools\n\nn = int(input())\n\na = list(map(int, input().split()))\n\ngcd = functools.reduce(fractions.gcd, a)\n\nmoves = max(a) // gcd - n\n\nprint(['Bob', 'Alice'][moves % 2])\n\n", "n=int(input())\nl=[int(i) for i in input().split()]\ndef gcd(a,b):\n    if b==0: return a \n    return gcd(b,a%b) \ng=0\nfor i in l:\n    g=gcd(g,i)\nno_of_moves=max(l)//g-n \nprint('Alice' if no_of_moves&1 else 'Bob')\n"]