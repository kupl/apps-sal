["class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = [0]*121\n        s = [0]*121\n        for a in ages:\n            count[a]+=1\n        for i in range(1,121):\n            s[i] = s[i-1]+count[i]\n        res = 0\n        for i in range(15,121):\n            edge = i//2+7\n            num = s[i]-s[edge]\n            res+=count[i]*num-count[i]\n        return res", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        # Note age[B] > 100 && age[A] < 100 is redundant since we have age[B] > age[A]\n        def wantToRequest(A, B):\n            return not(B <= 0.5 * A + 7 or B > A)\n        \n        count = Counter(ages)\n        ans = 0\n        ages = [*sorted(count.keys())]\n        \n        for i, a in enumerate(ages):\n            for j in range(0, i+1):\n                b = ages[j]\n                if wantToRequest(a, b):\n                    ans += count[a] * count[b] if a != b else count[a] * (count[b] - 1)\n        \n        return ans\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        sum = 0\n        counts = collections.Counter(ages)\n        ages = sorted(counts.keys())\n        for A in range(0,len(ages)):\n            for B in range(0,len(ages)):\n                condition1 = ages[B] <= 0.5 * ages[A] + 7\n                condition2 = ages[B] > ages[A]\n                condition3 = ages[B] > 100 and ages[A] < 100\n                if not (condition1 or condition2 or condition3):\n                    if A!=B:\n                        sum += counts[ages[A]]*counts[ages[B]]\n                    else:\n                        sum += (counts[ages[A]]-1)*counts[ages[B]]\n        return sum", "class Solution(object):\n    def numFriendRequests(self, ages):\n        count = [0] * 121\n        for age in ages:\n            count[age] += 1\n\n        ans = 0\n        for ageA, countA in enumerate(count):\n            for ageB, countB in enumerate(count):\n                if ageA * 0.5 + 7 >= ageB: continue\n                if ageA < ageB: continue\n                if ageA < 100 < ageB: continue\n                ans += countA * countB\n                if ageA == ageB: ans -= countA\n\n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = [0 for _ in range(121)]\n        for a in ages:\n            count[a] += 1\n        ans = 0\n        for a, cnt_a in enumerate(count):\n            for b, cnt_b in enumerate(count):\n                if a <= 0.5 * b + 7:\n                    continue\n                if a > b:\n                    continue\n                if a > 100 and b < 100:\n                    continue\n                ans += cnt_a * cnt_b\n                if a == b:\n                    ans -= cnt_a\n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        def request(a,b):\n            return not (b <= 0.5*a +7 or b > a or (b>100 and a < 100))\n        c = collections.Counter(ages)\n        return sum( request(a,b) * c[a]* (c[b] - (a==b)) for a in c for b in c)\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        if not ages:\n            return 0\n        \n        freq = Counter(ages)\n        \n        def can_request(a, b):\n            return not (b <= 0.5 * a + 7 or b > a or b > 100 and a < 100)\n            \n        ans = 0\n        for a1 in range(1, 121):\n            for a2 in range(1, 121):\n                if can_request(a1, a2):\n                    ans += (freq[a1] * freq[a2]) if a1 != a2 else (freq[a1] * (freq[a1]-1))     \n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        if not ages or len(ages) < 2: return 0\n        res=0\n        d=[0]*121\n        for age in ages:\n            d[age]+=1\n        for A in range(121):\n            for B in range(121):\n                count=0\n                if B<=A and B> A//2 +7:\n                    count+=d[A]*d[B]\n                if A==B and count:\n                    count-=d[A]\n                res+=count\n        return res\n", "'''\n    a -> b if\n    a = 10\n    b = 12\n    b > a\n    a = 50\n    b = 30\n    \n    a = 50\n    b = 50\n    .5 * 50 + 7 = 32\n    a -> b if a >= b and b > 0.5 * a + 7\n    a > 0.5 * a + 7\n    0 > 0.5*a + 7 - a\n    0 > 7 - .5a\n    .5a > 7\n    a > 14\n    mutual friend request if a > 14\n    \n    [20, 20, 18, 18, 14, 12 ]\n    15 * .5 + 7 = 14.5\n    14 * .5 + 7 = 14\n    12 * .5 + 7 = 13\n    20 * .5 + 7 = 17\n    18 * .5 + 7 = 16\n    {\n    16: 1\n    17: 2\n    18: 4\n    19: 2\n    20: 4\n    }\n    num_reqs = 8, \n    [102, 98, 59]\n    102 * .5 + 7 = 58\n    59\n    98 * .5 + 7 = 56\n    {56: 1, 57: 1, 58: 1, 59: 2,...98: 3,...102: 2}\n    3\n    O(nlogn)\n    O(1)\n'''\n\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        def invert(a):\n            return -1 * a\n        ages.sort(key=invert)\n        age_request_map = collections.defaultdict(int)\n        num_requests = 0\n        for age in ages:\n            if age <= 14:\n                break\n            num_requests += age_request_map[age]\n            # need to double count for same ages\n            age_request_map[age] += 1\n            lowest_age = floor(age * .5 + 7) + 1\n            for i in range(lowest_age, age + 1):\n                age_request_map[i] += 1\n        return num_requests", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        \n        \n        age_dic = {age: ages.count(age) for age in range(1,121)}\n        \n        \n        pairs = 0\n        for A in range(1,121):\n            for B in range(1,121):\n                if B <= 0.5 * A + 7:\n                    continue\n                elif B > A:\n                    continue \n                elif B > 100 and A < 100:  \n                    continue \n                \n        \n                else:\n                    pairs += age_dic[A] * age_dic[B]\n                    if A == B:\n                        pairs -= age_dic[A]\n        return pairs\n        \n                \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        # time O(A^2+n); space O(A)\n        age_cnt = [0] * 121\n        for age in ages:\n            age_cnt[age] += 1\n        \n        res = 0\n        for ageA, cntA in enumerate(age_cnt):\n            for ageB, cntB in enumerate(age_cnt):\n                if ageB <= (0.5 * ageA + 7) or ageB > ageA or (ageB > 100 and ageA < 100):\n                    continue\n                res += (cntA * cntB)\n                if ageA == ageB:\n                    res -= cntA\n        return res", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        counter = Counter(ages)\n        \n        ages = list(counter.keys())\n        res = 0\n        for a in ages:\n            for b in ages:\n                if b <= 0.5*a + 7:\n                    continue\n                if b > a:\n                    continue\n                if b > 100 and a < 100:\n                    continue\n                    \n                if a == b:\n                    res += counter[a]*(counter[a]-1)\n                else:\n                    res += counter[a]*counter[b]\n    \n        return res", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ages = sorted(ages)\n        res = 0\n        prev = None\n        for i in range(len(ages) - 1, -1, -1):\n            if i == len(ages) - 1 or ages[i] != ages[i + 1]:\n                prev = i\n            low ,right = 0 ,prev - 1\n            while low < right:\n                mid = (low + right)//2\n                if ages[mid] <= 0.5*ages[i] + 7:\n                    low = mid + 1\n                else:\n                    right = mid\n            if ages[low] >  0.5 * ages[prev] + 7:\n                res += (prev - low)\n        return res\n                    \n", "from collections import Counter\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        def is_valid(a, b):\n            return not any([\n                b <= 0.5 * a + 7,\n                b > a,\n                b > 100 and a < 100\n            ])\n        counts = Counter(ages)\n        ages = list(counts)\n        requests = 0\n        for i in range(len(ages)):\n            for j in range(len(ages)):\n                count = (\n                    counts[ages[i]] * (counts[ages[i]] - 1) if i == j\n                    else counts[ages[i]] * counts[ages[j]]\n                )\n                requests += int(is_valid(ages[i], ages[j])) * count\n        return requests", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        def counting_sort():\n            counts = 120 * [0]\n            for i in range(len(ages)):\n                counts[ages[i] - 1] += 1\n            s = []\n            for i in range(len(counts)):\n                s += [i + 1] * counts[i]\n            return s\n        ages = counting_sort()\n        res = 0\n        prev = None\n        for i in range(len(ages) - 1, -1, -1):\n            if i == len(ages) - 1 or ages[i] != ages[i + 1]:\n                prev = i\n            low ,right = 0 ,prev - 1\n            while low < right:\n                mid = (low + right)//2\n                if ages[mid] <= 0.5*ages[prev] + 7:\n                    low = mid + 1\n                else:\n                    right = mid\n            if ages[low] >  0.5 * ages[prev] + 7:\n                res += (prev - low)\n        return res\n                    \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        def counting_sort():\n            nonlocal ages\n            counts = 120 * [0]\n            for i in range(len(ages)):\n                counts[ages[i] - 1] += 1\n            ages = []\n            for i in range(len(counts)):\n                ages += [i + 1] * counts[i]\n        counting_sort()\n        res = 0\n        prev = None\n        for i in range(len(ages) - 1, -1, -1):\n            if i == len(ages) - 1 or ages[i] != ages[i + 1]:\n                prev = i\n            low ,right = 0 ,prev - 1\n            while low < right:\n                mid = (low + right)//2\n                if ages[mid] <= 0.5*ages[prev] + 7:\n                    low = mid + 1\n                else:\n                    right = mid\n            if ages[low] >  0.5 * ages[prev] + 7:\n                res += (prev - low)\n        return res\n                    \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ages = sorted(ages)\n        res = 0\n        prev = None\n        for i in range(len(ages) - 1, -1, -1):\n            if i == len(ages) - 1 or ages[i] != ages[i + 1]:\n                prev = i\n            low ,right = 0 ,prev - 1\n            while low < right:\n                mid = (low + right)//2\n                if ages[mid] <= 0.5*ages[i] + 7:\n                    low = mid + 1\n                else:\n                    right = mid\n            if ages[low] >  0.5 * ages[i] + 7:\n                res += (prev - low)\n        return res\n                    \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ages = sorted(ages)\n        res = 0\n        prev = None\n        for i in range(len(ages) - 1, -1, -1):\n            if i == len(ages) - 1 or ages[i] != ages[i + 1]:\n                prev = i\n            low ,right = 0 ,prev - 1\n            while low < right:\n                mid = (low + right)//2\n                if ages[mid] <= 0.5*ages[prev] + 7:\n                    low = mid + 1\n                else:\n                    right = mid\n            if ages[low] >  0.5 * ages[prev] + 7:\n                res += (prev - low)\n        return res\n                    \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        cnt = collections.Counter(ages)\n        ans = 0\n        for age in ages:\n            cnt[age] -= 1\n            left, right = age // 2 + 8, age\n            ans += sum(cnt[age] for age in range(left, right + 1))\n            cnt[age] += 1\n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        def req(A, B):\n            if B<=(0.5*A+7) or B>A or (B>100 and A<100):\n                return False\n            return True\n        \n        cnt = Counter(ages)\n        ans = 0\n        for i in cnt:\n            if cnt[i] > 1 and req(i, i):\n                ans += cnt[i]*(cnt[i]-1)\n            \n            for j in cnt:\n                if i != j and req(i, j):\n                    ans += cnt[i]*cnt[j]\n        return ans", "from collections import Counter\nimport math\n\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        counter = Counter(ages)\n        count = 0\n        \n        for age_A in ages:\n            max_age = age_A\n            min_age = 0.5 * age_A + 7\n            for age_B in range(math.floor(min_age)+1, max_age+1):\n                count += counter[age_B]\n                if age_B == age_A:\n                    count -= 1\n        \n        return count\n                \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ages = sorted(ages)\n        count, temp_count = 0, 0\n        for i in range(len(ages)-1, -1, -1):\n            if i+1 < len(ages) and ages[i+1] == ages[i]:\n                count += temp_count\n                continue\n\n            temp_count, current = 0, i-1\n            age = 0.5 * ages[i] + 7\n            while current >= 0 and ages[current] > age:\n                temp_count += 1\n                current = current - 1\n\n            count = count + temp_count\n\n        return count\n                \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ages.sort()\n        res = 0\n        i = 0\n        while i<len(ages):\n            if ages[i]<=14:\n                i+=1\n            else:\n                break\n        if i==len(ages):\n            return 0\n        leftmost = i\n        for i in range(leftmost,len(ages)):\n            left,right = leftmost,i-1\n            edge = ages[i]*0.5+7\n            while left<=right:\n                m = (left+right)//2\n                if ages[m]<=edge:\n                    left = m+1\n                else:\n                    right = m-1\n            res+=i-left\n            # find same age:\n            left,right = i+1,len(ages)-1\n            while left<=right:\n                m = (left+right)//2\n                if ages[m]<=ages[i]:\n                    left = m+1\n                else:\n                    right = m-1\n            left-=1\n            res+=left-i\n        return res\n                \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ageIdx = defaultdict(list)\n        for i,age in enumerate(ages):\n            ageIdx[age].append(i)\n            \n        count = 0\n        for age in ageIdx:\n            lowerBound = int((1/2)*age)+7+1\n            upperBound = age\n            for A in ageIdx[age]:\n                for candAge in range(lowerBound,upperBound+1):\n                    if candAge in ageIdx:\n                        if candAge != age:\n                            count += len(ageIdx[candAge])\n                        else:\n                            count += len(ageIdx[candAge]) - 1\n        \n        return count", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        \n        age_range = [0] * 121\n        \n        ages = sorted(ages)\n        \n        ans = 0\n        \n        for age in ages:\n            \n            for i in range(age - 1, -1, -1):\n                \n                if i <= 0.5 * age + 7:\n                    break\n                                        \n                ans += age_range[i]\n            \n#             it is tricky here, becareful\n            if age > 0.5 * age + 7:\n                ans += age_range[age] * 2\n                        \n            age_range[age] += 1\n            \n        return ans\n", "'''\nStart: 2:25 p.m.\n'''\n\n'''\n- Visualize everything.\n- Work with concrete examples.\n- Commit to a hunch. Crystallize it into an approach that can be evaluated (validated/invalidated). OK if approach seems unlikely to work.\n'''\n\n'''\n[16, 16]\n\nA will not send FR to someone who is older (same age OK).\n=> sort the array\n\nA will not send FR to someone who is \\\"much\\\" younger.\nIf A is under 100, he will not send FR to anyone over 100.\nNot FR self.\n'''\n\n'''\nBrute-force: evaluate every pair\nTime: O(n^2)\nSpace: O(1)\n'''\n\n'''\n- A will not friend anyone older so no need to look forward, only backward.\n\nTime:O(n log n)\nSpace: O(n)\n\n- Sort\n- For each num, compute minimum bound, BS.\n\nlb = 16/8 + 7 = 15\n\n[16,17,18]\n i\n \n 17/2 = 8.5 ~= 8\n 15\n'''\n\n'''\nTest Cases\nno numbers before i (works)\n[5]\n i\n \n nothing >= lower bound (works)\n [1, 2, 50]\n        i\n        \nlb = 32\nmultiple occurrences of lb (works)\n[1, 2, 32, 32, 40, 41, 50]\n       m\n l\n       r\n                       i\n       ret\n               \nlb = 32\nonly > lb (works)\n[1, 2, 40, 41, 50] \n               i\n       ret\n       \n[40, 41, 50] (works)\n         i\n ret\n'''\n\n'''\nPASS\n[1, 2, 32, 32, 40, 41, 50]\n[1, 2, 50]\n[1, 2, 40, 41, 50] \n[40, 41, 50]\n[16,16]\n'''\n\nclass Solution:\n    def firstLTE(self, lowerBound, ages, endIndex):\n        if endIndex < 0:\n            return 0\n        \n        l = 0\n        r = endIndex\n        \n        while l < r:\n            m = (l + r) // 2  # originally ages[l], ages[r] instead of l, r -- I'm very compromised today.\n            \n            if ages[m] <= lowerBound:\n                l = m + 1\n            else:\n                r = m\n                \n        if l <= r and ages[l] > lowerBound:\n            return l\n                \n        return endIndex + 1\n    \n    def findEarliest(self, key, ages, endIndex):\n        if endIndex < 0:\n            return -1\n        \n        l = 0\n        r = endIndex\n        \n        while l < r:\n            m = (l + r) // 2\n            \n            if ages[m] >= key:\n                r = m\n            else:\n                l = m + 1\n        \n        if l <= endIndex and ages[l] == key:\n            return l\n        \n        return -1\n    \n    '''\n    [16, 16]\n     l\n     r\n         i\n      \n     lowerBound = 23\n    [1, 2, 32, 32]\n        m        \n           l\n           r\n    '''\n    \n    def numFriendRequests(self, ages: List[int]) -> int:\n        if not ages:\n            return 0\n        \n        numRequests = 0\n        \n        ages.sort()  # O(n log n)/O(n)\n        \n        for i, a in enumerate(ages):\n            lowerBound = a*0.5 + 7  # divided instead of multiplied originally\n            startIndex = self.firstLTE(lowerBound, ages, i - 1)\n            #print('i = {}, startIndex = {}, delta = {}'.format(i, startIndex, i - startIndex))\n            numRequests += i - startIndex\n            \n            if a > lowerBound:\n                startIndex = self.findEarliest(a, ages, i - 1)\n                if startIndex >= 0 and startIndex < i:\n                    numRequests += i - startIndex\n        \n        return numRequests\n    \n'''\n[73,106,39,6,26,15,30,100,71,35,46,112,6,60,110]\n'''   \n        \n", "import collections\n\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        age_count = collections.Counter(ages)\n        res = 0\n        for age_A, count_A in age_count.items():\n            for age_B, count_B in age_count.items():\n                if not age_B <= age_A * 0.5 + 7 and not age_B > age_A:\n                    if age_A == age_B:\n                        res += count_A * (count_A - 1)\n                    else:\n                        res += count_A * count_B\n        return res", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ages = sorted(ages)\n        print(ages)\n        def bound(a):\n            low = a//2 + 8\n            hi = a\n            return (min(low, a), hi)\n        def getlow(v):\n            lo, hi = 0, len(ages)\n            while lo < hi:\n                mid = (lo + hi)//2\n                if ages[mid] >= v: hi = mid\n                else: lo = mid + 1\n            return hi\n        def getupper(v):\n            lo, hi = 0, len(ages)\n            while lo < hi:\n                mid = (lo + hi)//2\n                if ages[mid] <= v:\n                    lo = mid + 1\n                else:\n                    hi = mid\n            return hi-1\n        \n        count = 0\n        for i in range(len(ages)):\n            if ages[i] <= 14: continue\n            minv, maxv = bound(ages[i])\n            c= getupper(maxv) - getlow(minv) \n            # print(i,\\\"  :\\\",c, getlow(minv), getupper(maxv) )\n            count += c\n          \n        p = 115\n        # print( getlow(p), getupper(p))\n        return count", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        \n        ages = sorted(ages, reverse=True)\n        n = len(ages)\n        \n        dp = [0] * n\n        res = 0\n        \n        for i in range(n):\n            \n            if i > 0 and ages[i] == ages[i-1]:\n                dp[i] = dp[i-1]\n                res += dp[i]\n                continue\n            \n            for j in range(i+1, n):\n                if ages[j] <= 0.5 * ages[i] + 7:\n                    break\n                else:\n                    dp[i] += 1\n            \n            res += dp[i]\n        \n        return res\n        \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        if ages == []:\n            return 0\n        ages.sort()\n        res = 0\n        for i in range(len(ages) - 1, -1, -1):\n            if ages[i] < 15:\n                break\n            age = ages[i]\n            left = self.binary_search_left(ages, 0, i, age // 2 + 8)\n            right = self.binary_search_right(ages, i, len(ages) - 1, age)\n            #print(left, right)\n            res += max(0, right - left)\n        return res\n\n    def binary_search_left(self, ages, start, end, target):\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if ages[mid] < target:\n                start = mid\n            else:\n                end = mid\n        \n        if ages[start] >= target:\n            return start\n        if ages[end] >= target:\n            return end\n        return -1\n\n    def binary_search_right(self, ages, start, end, target):\n        while start + 1 < end:\n            mid = (start + end) // 2\n            if ages[mid] <= target:\n                start = mid\n            else:\n                end = mid\n        if ages[end] <= target:\n            return end\n        if ages[start] <= target:\n            return start\n        return -1", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ages.sort()\n\n        def count(a):\n            i, j = 0, len(ages) - 1\n\n            while i < j:\n                k = (i + j + 1) // 2\n                if ages[k] <= a:\n                    i = k\n                else:\n                    j = k - 1\n\n            u = i\n\n            v = a // 2 + 7\n            i, j = 0, len(ages) - 1\n\n            while i < j:\n                k = (i + j) // 2\n                if ages[k] <= v:\n                    i = k + 1\n                else:\n                    j = k\n\n            l = i\n\n            return u - l if l <= u else 0\n\n        return sum(count(a) for a in ages)\n\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = 0\n        ages.sort()\n        for i, age in enumerate(ages):\n            minTarget = (age // 2) + 7\n            maxTarget = age\n            minIdx = self.binFinder(ages, minTarget)\n            maxIdx = self.binFinder(ages, maxTarget)\n            count += max(0, maxIdx - minIdx -1)\n        return count\n    def binFinder(self, arr, target):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = left + ((right - left)//2)\n            if arr[mid] <= target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left", "# id(index) -> age\n# age1 <= 7 + 0.5 age2\n# age1 > age2\n#age1 > 100 and age b < 100\n# no selfloop,\n#A request does not mean B reqeust A\n\ndef count_smaller_than(ages, target): # 1,15,17\n    left = 0 # 1\n    right = len(ages) - 1 # 0\n    \n    # 1 5 6 11 all elements smaller than  target 7\n    # 1  [5] [6  [11] L = 3 R= 3 --> L = 3 R = 2 L -1\n    #           L = 4 R = 3\n  # [5] [6] 11 12 0 -> 0 0 -> -1\n    # 5 6 | [6] 6 7 \n    while left <= right:\n        mid = left+(right-left)//2 # 15 # 1\n        if ages[mid] < target: # 15 < 15\n            left = mid+1        \n        # elif ages[mid] == target and ages[a_index] == ages[mid]:\n        #     right = mid - 1\n        else:# ages[mid] >= target:\n            right = mid -1 # 0 \n            \n    return left # 0 - 1\n            \n    # edge case [16,16]\n    \n    \n\nimport math\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        #brute force\n        #we loop on friends A\n            # we loop again B\n                # increment if a request B or B requests A\n                \n                # time o(n^2), space o(1)\n                \n        #A < B\n        # --> check only once not twice because second one is always false\n        #whenever B > 100 and A < 100 --> recursve\n        # O(N^2)\n        \n        #A --> 10 ---> [maximum length we make friends of] --> we search for that in the array and then we return\n        # nlogn --> sort\n        # n * logn (Binary search) to get the count\n        \n        ages.sort() # sort in ascending order\n        friend_requests = 0\n        \n        #[1,17,18]\n        for i in range(len(ages)):\n            age_a = ages[i]  # 16\n            \n            # max_age_b = max(age_a,) # age_a = 9 -> 4.5 + 7 -> 11.5\n            # 0 \n            \n            # 0 1 2 3 \n            # 1 * 0.5 + 7 -> 7\n            smaller_than = count_smaller_than(ages, math.floor(0.5 * age_a) + 8) # these are the ones to exclude, if it's\n            smaller_than_i = count_smaller_than(ages, age_a+1)\n            \n            a_requests = max(0, smaller_than_i - 1 - smaller_than)  #(itself)\n            \n            friend_requests += a_requests\n            \n        return friend_requests\n            \n", "class Solution:\n    \n    def B_search(self, nums, target):\n    \n        low, high=0, len(nums)-1\n        while low<high:\n            mid=low+(high -low)//2\n            if nums[mid] < target:\n                low=mid+1\n            else:\n                high=mid\n        return high\n    \n    def numFriendRequests(self, ages: List[int]) -> int:\n        ages.sort()\n        count = 0\n        for age in ages:\n            \n            left= self.B_search(ages,  int((0.5 * age) + 7)+1)\n            right= self.B_search(ages,age+1)\n            if right==len(ages)-1 and ages[right]==age:\n                right+=1\n            \n            if ages[left]==(0.5 * age) + 7:\n                left+=1\n            count += max(0, right - left - 1)                \n        return count", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ages.sort()\n        ans = 0\n        l, r, N = 0, 0, len(ages)\n        same_count = 0\n        while r < N:\n            same_count = 1\n            while r+1 < N and ages[r+1] == ages[r]:\n                same_count += 1\n                r += 1\n            while l < r and ages[l] <= 0.5*ages[r]+7:\n                l += 1\n            if l != r:\n                ans += same_count*(r-l)\n            r += 1\n        return ans\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        n = len(ages)\n        if n < 2: return 0\n        \n        ages.sort()\n        \n        mins = [0] * n\n        pairs = [0] * n\n        \n        mins[0] = ages[0] / 2 + 7\n        \n        for i in range(1, n):\n            mins[i] = (ages[i] - ages[i-1]) / 2 + mins[i-1]\n            \n            if ages[i-1] <= mins[i]:\n                continue\n            \n            if mins[i] == mins[i-1]:\n                pairs[i] = pairs[i-1] + 2\n                continue\n\n            j = i - 1\n            while j >= 0 and ages[j] > mins[i]:\n                pairs[i] += 1\n                if ages[j] == ages[i]: pairs[i] += 1\n                j-=1\n\n        return sum(pairs)", "from collections import Counter\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        dic = Counter(ages)\n        res = 0\n        for ageA, cntA in list(dic.items()):\n            for ageB, cntB in list(dic.items()):\n                if (ageB <= 0.5*ageA + 7) or (ageB > ageA) or (ageB > 100 and ageA < 100):\n                    continue\n                    \n                res += cntA*cntB\n                \n                if ageA == ageB:\n                    res -= cntA\n                    \n        return res\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        '''\n        Algorithm\n        ---------\n        We first count the frequency of the ages\n        '''\n        def friendRequests(age_a, age_b):\n            if age_b <= (0.5 * age_a + 7) or age_b > age_a:\n                return False\n            return True\n        age_groups = collections.Counter(ages)\n        total_requests = 0\n        \n        for age_a, count_a in list(age_groups.items()):\n            for age_b, count_b in list(age_groups.items()):\n                if friendRequests(age_a,age_b):\n                    total_requests += count_a * count_b\n                    \n                    # if both candidates are the same, we reduce total\n                    # requests by one of their frequencies\n                    if age_a == age_b:\n                        total_requests -= count_a\n        return total_requests\n            \n", "import collections\n\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        age_count = collections.Counter(ages)\n        res = 0\n        for age_A, count_A in age_count.items():\n            for age_B, count_B in age_count.items():\n                if not age_B <= age_A * 0.5 + 7 and not age_B > age_A:\n                    res += count_A * count_B\n                    if age_A == age_B:\n                        res -= count_A\n        return res", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        c = collections.Counter(ages)\n        count = 0\n        \n        for a in c:\n            for b in c:\n                if self.request(a, b):\n                    continue\n                count += c[a]*c[b]\n                \n                if a == b:\n                    count -= c[a]\n                    \n        return count\n\n    def request(self, a, b):\n        return (b<=0.5*a+7 or b > a or a < 100 < b)\n\n#         c = collections.Counter(ages)\n#         count = 0\n        \n#         for a in c:\n#             for b in c:\n#                 result = self.request(a, b)\n#                 if result:\n#                     continue\n                \n#                 count += c[a] * c[b]\n#                 if a == b:\n#                     count -= c[b]\n#         return count\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        counts = [0]*121\n        for age in ages:\n            counts[age] += 1\n        SUM = 0\n        sums = []\n        for c in counts:\n            SUM += c\n            sums.append(SUM)\n        res = 0\n        for age in range(15 ,121):\n            up = age\n            down = age//2 + 7\n            res += counts[age] * (sums[up]-sums[down]-1) \n        return res\n        \n         \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        c = collections.Counter(ages)\n        def request(x, y):\n            return not (y <= 0.5 * x + 7 or (x < 100 and y > 100) or x < y)\n        \n        ans = 0\n        for x in c:\n            for y in c:\n                if request(x, y):\n                    if x == y:\n                        ans += c[x] * (c[y] - 1)\n                    else:\n                        ans += c[x] * c[y]\n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        c = collections.Counter(ages)\n        count = 0\n        \n        for a in c:\n            for b in c:\n                result = self.request(a, b)\n                if result:\n                    continue\n                \n                count += c[a] * c[b]\n                if a == b:\n                    count -= c[b]\n        return count\n\n    def request(self, a, b):\n        return (b<=0.5*a+7 or b > a or a < 100 < b)\n    \n    \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ages.sort(reverse = True)\n        n = len(ages)\n        def check(a,b):\n            if b <= (a*0.5)+7:\n                return False\n            if b> a:\n                return False\n            if b> 100 and a< 100:\n                return False\n            return True\n        res = 0\n        c = collections.Counter(ages)\n        for a in c:\n            for b in c:\n                if check(a,b):\n                    res+= c[a]*(c[b]-(a==b))\n        return res\n", "class Solution:\n    def numFriendRequests(self, ages) -> int:\n        ages = collections.Counter(ages)\n        ans = 0\n        for ageA, countA in list(ages.items()):\n            for ageB, countB in list(ages.items()):\n                if ageA * 0.5 + 7 >= ageB: continue\n                if ageA < ageB: continue\n                ans += countA * countB\n                if ageA == ageB: ans -= countA\n        return ans\n", "import collections\nclass Solution:\n    \n    #problem: https://leetcode.com/problems/friends-of-appropriate-ages/\n    # refered the solution in : https://leetcode.com/problems/friends-of-appropriate-ages/discuss/737217/Python-simple-solution-using-counters-beats-85\n    \n    \n    def numFriendRequests(self, ages: List[int]) -> int:\n        \n        count = 0 # the number of friend requests\n        \n        table = collections.Counter(ages)\n        \n        for ageA in table:\n            num_ = table[ageA] # the number age' people\n            for ageB in table:\n                if ageB <= 0.5 * ageA + 7:\n                    continue\n                if ageB > ageA:\n                    continue\n                if ageB > 100 and ageA < 100:\n                    continue\n                # if the age is not me\n                if ageA != ageB:\n                    count += num_ * table[ageB]\n                else:\n                    count += int(num_ * (num_ - 1))\n                    \n        return count\n                    \n        \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        def helper(a,b):\n            tmpB = a*0.5+7\n            return 0 if b<=tmpB or b>a or (b>100 and a<100) else 1\n        res,n = 0,len(ages)\n        if n == 1:\n            return res\n        counts = Counter(ages)\n        for ageA in counts:\n            for ageB in counts:\n                countA,countB = counts[ageA],counts[ageB]\n                if helper(ageA,ageB):\n                    res += countA*countB\n                    if ageA == ageB:\n                        res -= countA\n        return res", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = 0\n        \n        counter = [0]*121\n        for i in ages:\n            counter[i] += 1\n        \n        for a in range(1, 121):\n            for b in range(1, 121):\n                if b > a:\n                    continue\n                \n                if b <= 0.5*a+7:\n                    continue\n                \n                if b > 100 and a < 100:\n                    continue\n                \n                count += counter[a]*counter[b]\n                \n                if a == b:\n                    count -= counter[a]\n        \n        return count", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        def cond(a, b):\n            return not (b <= 0.5 * a + 7 or b>a or (b > 100 and a < 100))\n\n        freq = Counter(ages).items()\n        cnt= 0\n        for a, r in freq:\n            for b, c in freq:                \n                if cond(a,b):\n                    if a==b: cnt+=(r*(r-1))\n                    else: cnt+=r*c\n        return cnt", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        counter = [0]*121\n        res = 0\n        for a in ages:\n            if a<=14: continue\n            counter[a] += 1\n            \n        for i in range(15, 121):\n            for j in range(i+1):\n                if j<=0.5*i+7: continue\n                res += counter[i]*counter[j]\n                \n                if i==j:\n                    res -= counter[i]\n                    \n        return res", "import math\n\nfrom collections import Counter\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        sol = 0\n        c = Counter(ages)\n        smaller_equal_age = [0]\n        for i in range(1,121):\n            smaller_equal_age.append(smaller_equal_age[-1] + c[i])\n        for i in range(15,121):\n            sol += c[i] * (smaller_equal_age[i] - 1 - smaller_equal_age[math.floor(0.5 * i + 7)])\n        return sol", "class Solution:\n    def numFriendRequests(self, ages) -> int:\n        ages = Counter(ages)\n        ans = 0\n        for age_a, count_a in ages.items():\n            for age_b, count_b in ages.items():\n                if age_a * 0.5 + 7 >= age_b:\n                    continue\n                if age_a < age_b:\n                    continue\n                if age_a < 100 and age_b > 100:\n                    continue\n                ans += count_a * count_b\n                if age_a == age_b:\n                    ans -= count_a\n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = [0] * 121\n        for a in ages:\n            count[a] += 1\n        # * iterates entire count\n        for i, val in enumerate(count):\n            count[i] = count[i - 1] + val\n\n        total = 0\n        for a in ages:\n            ageMin = floor(0.5 * a + 8)\n            ageMax = min(a, 120)\n            ageMin = max(ageMin - 1, 0)\n            total += max(count[ageMax] - count[ageMin] - 1, 0)\n            # * total += max(count[min(ageMax, 120)] - count[max(ageMin - 1, 0)] - 1, 0)\n\n        return total\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        def request(a, b):\n            return not (b <= 0.5 * a + 7 or b > a or b > 100 and a < 100)\n        c = collections.Counter(ages)\n        return sum(request(a, b) * c[a] * (c[b] - (a == b)) for a in c for b in c)", "from collections import Counter\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        c = Counter(ages)\n        return sum(self.can_be_friend(a, b) * c[a] * (c[b] - (a == b)) for a in c for b in c)\n        \n    \n    \n    def can_be_friend(self, age1, age2):\n        if age2 <= 0.5 * age1 + 7 or age2 > age1 or (age2 > 100 and age1 < 100):\n            return False\n        return True", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = [0] * 121\n        for age in ages:\n            count[age] += 1\n\n        ans = 0\n        for ageA, countA in enumerate(count):\n            for ageB, countB in enumerate(count):\n                if ageA * 0.5 + 7 >= ageB: continue\n                if ageA < ageB: continue\n                if ageA < 100 < ageB: continue\n                ans += countA * countB\n                if ageA == ageB: ans -= countA\n\n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        nums=[0]*121\n        for age in ages:\n            nums[age]+=1\n        ans=0\n        request=[set() for i in range(121)]\n        for i in range(1,121):\n            for j in range(1,121):\n                if (not ((j<=i//2+7) or (j>i) or (j>100 and i<100))):\n                    request[i].add(j)\n        for i in range(1,121):\n            for j in request[i]:\n                ans+=nums[i]*(nums[j] if i!=j else(nums[j]-1))\n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        '''\n        102\n        \n        A -- not -> B\n        \n        B <= 0.5A + 7\n        B > A\n        ~ B > 100 & A < 100\n        \n        split to > 100, < 100 groups\n        \n        \n        right to left, > 100 region\n        \n        '''\n\n        count = [0] * 121\n        for age in ages:\n            count[age] += 1\n        \n        res = 0\n        for ageA, countA in enumerate(count):\n            for ageB, countB in enumerate(count):\n                \n                if (ageA * 0.5 + 7 >= ageB): continue\n                if (ageA < ageB): continue\n                if (ageA<100 and ageB >100): continue\n                \n                res += countA * countB\n                if ageA == ageB: \n                    res -= countA\n        return res\n                    \n", "'''class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        total_age = 121\n        ageCnt = [0]*total_age\n        prefixSum = [0]*total_age\n        for age in ages:\n            ageCnt[age] += 1\n        for i in range(1, total_age):\n            prefixSum[i] = ageCnt[i] + prefixSum[i-1]\n        res = 0 \n        for i in range(15, total_age):\n            if ageCnt[i] == 0:\n                continue \n            res += ageCnt[i]*(prefixSum[i]-prefixSum[int(i*.5+7)]-1)#)- ageCnt[i]\n        return res '''\n\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        maxAge = 121 \n        preSum = [0]*maxAge \n        from collections import Counter \n        ageCnt = Counter(ages)\n        for i in range(1, maxAge):\n            preSum[i] += preSum[i-1] + ageCnt[i]\n        res =0 \n        for age in range(15, maxAge):\n            res += (preSum[age]-preSum[int(.5*age+7)]-1) * ageCnt[age]\n        return res \n            \n        \n        \n        '''\n        Person A will NOT friend request person B (B != A) \n        if any of the following conditions are true:\nage[B] <= 0.5 * age[A] + 7\nage[B] > age[A]\nage[B] > 100 && age[A] < 100\n        '''\n        '''from collections import Counter \n        cnt = Counter(ages)\n        res = 0 \n        def request(a,b):\n            return not (b <= .5*a+7 or b>a)\n        for a in cnt:\n            for b in cnt:\n                res += request(a,b)*cnt[a]*(cnt[b]-(a==b))\n        return res '''\n            \n        \n        \n        \n        \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        valid_ages = [0] * 121\n        for age in ages:\n            valid_ages[age] += 1\n        \n        count = 0\n        for i in range(1, 121):\n            ageA = valid_ages[i]\n            for j in range(1, 121):\n                ageB = valid_ages[j]\n                if j <= 0.5 * i + 7 or j > i:\n                    continue\n                if j > 100 and i < 100:\n                    continue \n                count += ageA * ageB\n                if i == j:\n                    count -= ageA\n        return count", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        # first start something simple \n        # should be able to do this in O(n) \n        ages.sort()\n        ans, i, j = 0, 0, 0\n        while i < len(ages): \n            val = ages[i]\n            while j < i and ages[j] <= (0.5 * val + 7): \n                j += 1\n            cnt, num_equal = i - j, 0\n            while i < len(ages) and ages[i] == val: \n                num_equal, i = num_equal + 1, i+1\n            # here could be either out of bound of different value\n            ans += (num_equal * cnt) + (num_equal * (num_equal-1))\n        return ans\n    def numFriendRequests(self, ages):\n        count = [0] * 121\n        for age in ages:\n            count[age] += 1\n\n        ans = 0\n        for ageA, countA in enumerate(count):\n            for ageB, countB in enumerate(count):\n                if ageA * 0.5 + 7 >= ageB: continue\n                if ageA < ageB: continue\n                # if ageA < 100 < ageB: continue\n                ans += countA * countB\n                if ageA == ageB: ans -= countA\n\n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:       \n        age_counts = [0] * 121\n        for age in ages:\n            age_counts[age] += 1\n            \n        request_count = 0\n        for ageA, age_countA in enumerate(age_counts):\n            for ageB, age_countB in enumerate(age_counts):    \n                if ageB <= ((.5 * ageA) + 7):\n                    continue\n                if ageB > ageA:\n                    continue\n                if ageA < 100 < ageB:\n                    continue\n                request_count += age_countA * age_countB\n                \n                if ageA == ageB:\n                    request_count -= age_countA\n        \n        return request_count", "class Solution:\n    def numFriendRequests(self, ages):\n        count = [0] * 121\n        for age in ages:\n            count[age] += 1\n\n        ans = 0\n        for ageA, countA in enumerate(count):\n            for ageB, countB in enumerate(count):\n                if ageA * 0.5 + 7 >= ageB: continue\n                if ageA < ageB: continue\n                if ageA < 100 < ageB: continue\n                ans += countA * countB\n                if ageA == ageB: ans -= countA\n\n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = [0] * 121\n        for age in ages:\n            count[age] += 1\n        res = 0 \n        for age_a, count_a in enumerate(count):\n            for age_b, count_b in enumerate(count):\n                if age_b <= 0.5 * age_a + 7:\n                    continue \n                if age_b > age_a:\n                    continue \n                if age_b > 100 and age_a < 100:\n                    continue \n                res += count_a * count_b\n                if age_a == age_b:\n                    res -= count_a\n        return res", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = [0] * 121\n        max_age = 0\n        for age in ages:\n            count[age] += 1\n            max_age = max(max_age, age)\n            \n        ans = 0\n        for ageA, countA in enumerate(count[:max_age+2]):\n            for ageB, countB in enumerate(count[:max_age+2]):\n                if ageA * 0.5 + 7 >= ageB: continue\n                if ageA < ageB: continue\n                if ageA < 100 < ageB: continue\n                ans += countA * countB\n                if ageA == ageB: ans -= countA\n\n        return ans   ", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = [0] * 121\n        for age in ages:\n            count[age] += 1\n        \n        res = 0\n        for ageA, countA in enumerate(count):\n            for ageB, countB in enumerate(count):\n                if ageB <= ageA*0.5+7: continue\n                if ageB > ageA: continue\n                if ageB > 100 and ageA < 100: continue\n                res += countA*countB\n                if ageA == ageB: res-=countA\n        \n        return res", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = [0] * 121\n        for age in ages:\n            count[age] += 1\n\n        ans = 0\n        for ageA, countA in enumerate(count):\n            for ageB, countB in enumerate(count):\n                if ageA * 0.5 + 7 >= ageB: continue\n                if ageA < ageB: continue\n                if ageA < 100 < ageB: continue\n                ans += countA * countB\n                if ageA == ageB: ans -= countA\n\n        return ans\n\n\n'''\n\u4e0d\u8003\u8651\u904d\u5386\u6240\u6709\u7684 20000 \u4e2a\u4eba\uff0c\u6211\u4eec\u53ea\u8003\u8651\u904d\u5386\u6240\u6709\u7684\u5143\u7ec4 (age, count) \u8868\u793a\u5728\u8fd9\u4e2a\u5e74\u7eaa\u6709\u591a\u5c11\u4eba\u3002\u56e0\u4e3a\u6700\u591a\u53ea\u6709 120 \u4e2a\u53ef\u80fd\u7684\u5e74\u7eaa\uff0c\u8fd9\u4f1a\u662f\u4e00\u4e2a\u5f88\u5feb\u7684\u63d0\u5347\u3002\n\n\u7b97\u6cd5\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7ec4 (ageA, countA)\uff0c(ageB, countB)\uff0c\u5982\u679c\u6761\u4ef6\u6ee1\u8db3\u5bf9\u5e94\u7684\u5e74\u7eaa\uff0c\u90a3\u4e48\u4e45\u5c06 countA * countB \u52a0\u5165\u53d1\u597d\u53cb\u8bf7\u6c42\u7684\u4eba\u6570\u3002\n\n\u5f53 ageA == ageB \u7684\u65f6\u5019\u6211\u4eec\u5c31\u6570\u591a\u4e86\uff1a\u6211\u4eec\u53ea\u6709 countA * (countA - 1) \u5bf9\u597d\u53cb\u8bf7\u6c42\uff0c\u56e0\u4e3a\u4f60\u4e0d\u80fd\u548c\u81ea\u5df1\u53d1\u9001\u8bf7\u6c42\u3002\n\nJavaPython\n\n\n\n'''", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        requests = 0\n        ageCount = [0] * 121\n        for age in ages:\n            ageCount[age] += 1\n\n        for A in range(120, 14, -1):\n            if not ageCount[A]:\n                continue\n            requests += (ageCount[A] * (ageCount[A] - 1))\n            for B in range(A-1, int(0.5*A + 7), -1):\n                requests += (ageCount[A] * ageCount[B])\n        return requests", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        a = sorted(ages)\n        i,j,k = 0,0,0\n        ans = 0\n        for i in range(1,len(a)):\n            if a[i] <= 14: continue\n            lb = a[i]*0.5 + 7\n            while a[j] <= lb:\n                j += 1\n            ans += i-j\n            if a[k] != a[i]:\n                k = i\n            ans += i-k\n        return ans\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        age_dict = collections.Counter(ages)\n        sorted_ages = sorted(age_dict.keys())\n        requests = 0\n        for i in sorted_ages:\n            for j in sorted_ages:\n                if (j>100 and i<100) or (j<=0.5*i+7): continue\n                if j>i: break\n                if i==j: requests += age_dict[i]*(age_dict[j]-1)\n                else: requests +=age_dict[i]*age_dict[j]\n        return requests\n            \n", "'''\nPASS\n[1, 2, 32, 32, 40, 41, 50]\n[1, 2, 50]\n[1, 2, 40, 41, 50] \n[40, 41, 50]\n[16,16]\n[6, 6]\n'''\n\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        '''\n        Observation: ages might be long (20,000), but there are only 120\n        possible values for ages.\n        '''\n        \n        ageCounts = Counter(ages)\n        numRequests = 0\n        \n        '''\n        [8,85,24,85,69]\n        '''\n        \n        for a in range(1, 121):                \n            if ageCounts[a] > 0:\n                exclLowerBound = 0.5*a + 7\n                lowerBound = ceil(exclLowerBound)\n            \n                if lowerBound == exclLowerBound:\n                    lowerBound += 1\n                    \n                for a2 in range(lowerBound, a):\n                    # multiply by ageCounts[a], each instance will send FR\n                    numRequests += ageCounts[a2]*ageCounts[a]\n                    \n                if lowerBound <= a: # 16, 16, 16\n                    # each instance will send FR to all the others\n                    numRequests += ageCounts[a]*(ageCounts[a] - 1)\n            \n        return numRequests\n", "class Solution:\n    def check(self, a, b):\n        if b <= 0.5*a+7:\n            return False\n        if b > a:\n            return False\n        if b > 100 and a < 100:\n            return False\n        \n        return True\n    \n    def numFriendRequests(self, ages: List[int]) -> int:\n        cnt = 0\n        c = [0 for x in range(121)]\n        \n        for a in ages:\n            c[a] += 1\n        \n        #print(c)\n        \n        for i in range(len(c)):\n            for j in range(len(c)):\n                if self.check(i, j):\n                    #print(i, j)\n                    #print(ages[i], ages[j])\n                    cnt += c[i]*c[j]\n                    if i == j:\n                        cnt -= c[i]\n                    \n        return cnt", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        dp=[0]*(121)\n        for i in ages:\n            dp[i]+=1\n        \n        ans=0\n        mp={}\n        for i in range(15,121):\n            p=0\n            if dp[i]>0:\n                if i%2==0:\n                    Min=int((i/2)+8)\n                else:\n                    Min=int(math.ceil((i/2)+7))\n                # Min=int(0.5*i+7)\n                Max=i\n                j=Min\n                while j<=Max and j<=120:\n                    if j==i:\n                        ans+=dp[j]*(dp[j]-1)\n                        p+=dp[j]*(dp[j]-1)\n                    else:\n                        ans+=dp[i]*dp[j]\n                        p+=dp[i]*dp[j]\n                    j+=1\n\n                mp[i]=p\n        \n        # print(mp)\n        return ans\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        counts = Counter(ages)\n        requests = 0\n        \n        conditions = [\n            lambda ageA, ageB: 0.5 * ageA + 7 >= ageB,\n            lambda ageA, ageB: ageA < ageB\n        ]\n        \n        def canSendRequest(ageA, ageB):\n            return not any(condition(ageA, ageB) for condition in conditions)\n        \n        for ageA, countA in counts.items():\n            for ageB, countB in counts.items():\n                if canSendRequest(ageA, ageB):\n                    if ageA == ageB:\n                        requests += countA * (countA - 1)\n                    else:\n                        requests += countA * countB\n        \n        return requests", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        counts = Counter(ages)\n        requests = 0\n        \n        conditions = [\n            lambda ageA, ageB: 0.5 * ageA + 7 >= ageB,\n            lambda ageA, ageB: ageA < ageB            \n        ]\n        \n        def canSendRequest(ageA, ageB):\n            # if any condition is True, then we can't request friend             \n            return not any(condition(ageA, ageB) for condition in conditions)   \n         \n        for ageA, countA in counts.items():\n            for ageB, countB in counts.items():\n                if canSendRequest(ageA, ageB):\n                    \n                    if ageA == ageB:\n                        requests += countA * (countA - 1)\n                    else:\n                        requests += countA * countB\n                \n        return requests", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        counts = Counter(ages)\n        requests = 0\n        \n        conditions = [\n            lambda ageA, ageB: 0.5 * ageA + 7 >= ageB,\n            lambda ageA, ageB: ageA < ageB\n        ]\n        \n        def canRequestFriend(ageA, ageB):\n            return not any(condition(ageA, ageB) for condition in conditions)\n        \n        for ageA, countA in list(counts.items()):\n            for ageB, countB in list(counts.items()):\n                if canRequestFriend(ageA, ageB):\n                    if ageA == ageB:\n                        requests += countA * (countA - 1)\n                    else:\n                        requests += countA * countB\n                \n        return requests\n", "class Solution:\n    \n    #problem: https://leetcode.com/problems/friends-of-appropriate-ages/\n    # refered the solution in : https://leetcode.com/problems/friends-of-appropriate-ages/discuss/837786/Binary-Search-beating-100-with-detail-explanation\n    \n    def numFriendRequests(self, ages: List[int]) -> int:\n        ages.sort()\n        right_most = {}\n        for ix,x in enumerate(ages):\n            right_most[x] = ix\n        \n        l = 0\n        count = 0\n        for ix,x in enumerate(ages):\n            while ages[l]<= (x/2 + 7) and l<right_most[x]:\n                l+=1\n            count+= right_most[x] - l\n        return count\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = collections.Counter(ages)\n        \n        #print(count)\n        ans = 0\n        \n        for ageA in count:\n            for ageB in count:\n                countA = count[ageA]\n                countB = count[ageB]\n                if ageB <= ageA*0.5 + 7:\n                    continue\n                if ageA < ageB:\n                    continue\n                ans += countA * countB\n                if ageA == ageB:\n                    ans -= countA\n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        age_count = Counter(ages)\n        distinct_ages = set(age_count.keys())\n        total_req = 0\n        \n        for a_age in distinct_ages:\n            a_frn_req = 0\n            for b_age in distinct_ages:\n                if b_age > a_age or (a_age < 100 < b_age) or b_age <= (0.5 * a_age + 7):\n                    continue\n\n                a_frn_req += age_count[a_age] * age_count[b_age]\n                if a_age == b_age: a_frn_req -= age_count[a_age]\n                \n            total_req += a_frn_req\n            \n        return total_req", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        counts = collections.Counter(ages)\n        valid = lambda A, B: not any([A *.5 + 7 >= B, A < B, A < 100 < B])\n        count = 0\n        \n        items = list(counts.items())\n        for A, cntA in items:\n            for B, cntB in items:\n                if valid(A, B):\n                    count += cntA * cntB\n                    if A == B:\n                        count -= cntA\n        \n        return count\n            \n            \n        \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        age_count = [0] * 121\n        for age in ages:\n            age_count[age] += 1\n            \n        res = 0\n        print(len(age_count))\n        for i in range(121):\n            for j in range(121):\n                if  age_count[i] > 0 and age_count[j] > 0:\n                    if j <= 0.5 * i + 7 or j > i:\n                        continue\n                    res += age_count[i] * age_count[j]\n                    if i == j:\n                        res -= age_count[i] # One doesn't send request to himself\n                        \n        return res", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = [0] * 121\n        for age in ages:\n            count[age] += 1\n        answer = 0\n        for age_a, count_a in enumerate(count):\n            for age_b, count_b in enumerate(count):\n                if age_a * 0.5 + 7 >= age_b:\n                    continue\n                if age_a < age_b:\n                    continue\n                if age_a < 100 < age_b:\n                    continue\n                \n                answer += count_a * count_b\n                \n                if age_a == age_b:\n                    answer -= count_a\n                    \n        return answer\n                    \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        agesCount = [0]*121\n        for age in ages:\n            agesCount[age] += 1\n        \n        res = 0\n        for i in range(1, 121):\n            for j in range(1, 121):\n                if agesCount[i] == 0 or agesCount[j] == 0 or j > i or (j > 100 and i < 100) or (j <= i/2 + 7):\n                    continue\n                \n                res += agesCount[i]*agesCount[j]\n                if i == j:\n                    res -= agesCount[i]  #because I can't send request to myself\n        \n        return res", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = collections.Counter(ages)\n        \n        print(count)\n        ans = 0\n        \n        for ageA in count:\n            for ageB in count:\n                countA = count[ageA]\n                countB = count[ageB]\n                if ageB <= ageA*0.5 + 7:\n                    continue\n                if ageA < ageB:\n                    continue\n                ans += countA * countB\n                if ageA == ageB:\n                    ans -= countA\n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        age_library = {}\n\n        for age in ages:\n            age_library[age] = age_library.get(age, 0) + 1\n\n        res = 0\n        for A, numA in list(age_library.items()):\n            for B, numB in list(age_library.items()):\n                if not (B <=0.5*A + 7 or B > A or (B > 100 and A < 100)):\n                    res += numA * numB - numA*(A == B)\n        return res\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        def request(a, b):\n            return not (b <= 0.5 * a + 7 or b > a or b > 100 and a < 100)\n        c = collections.Counter(ages)\n        return sum(request(a, b) * c[a] * (c[b] - (a == b)) for a in c for b in c)\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        cnt = collections.Counter(ages)\n        \n        res = 0\n        for p1 in cnt:\n            for p2 in cnt:\n                # print(cnt, p1, p2, res)\n                if p2 <= 0.5 * p1 + 7 or p2 > p1 or (p2 > 100 and p1 < 100):\n                    continue\n                if p1 == p2:\n                    res += (cnt[p1]-1)*cnt[p1]\n                else:\n                    res += cnt[p1] * cnt[p2]\n\n        return res\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        if not ages:\n            return 0\n        agesToCount = [0] * 121\n        for age in ages:\n            agesToCount[age] += 1\n\n        result = 0\n        for ageA in range(1, 121):\n            for ageB in range(1, 121):\n                if ageB <= ageA and ageB > 0.5 * ageA + 7:\n                    if ageA == ageB:\n                        result += agesToCount[ageA] * (agesToCount[ageA] - 1)\n                    else:\n                        result += agesToCount[ageA] * agesToCount[ageB]\n        return result", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        buckets = [0] * 121\n        for age in ages:\n            buckets[age] += 1\n        \n        ans = 0\n        for i in range(1, 121):\n            if buckets[i] <= 0:\n                continue\n            for j in range(1, 121):\n                if buckets[j] <= 0:\n                    continue\n                \n                if j <= 0.5 * i + 7 or j > i or (j > 100 and i < 100):\n                    continue\n                \n                ans += buckets[i] * buckets[j]\n                if i == j:\n                    ans -= buckets[i]\n        \n        return ans", "'''\n\nArr: [16, 16]\n\n\nArr: [16, 16, 17, 18]\n\n\n{16:2, 17: 1, 18:1}\n\nA: 16, B = 17\n\n17 <= 8 + 7\n\n17 <= 15 NOT\n\n\n{16:2, 17: 1, 18:1}\n\n{16:2, 17: 1, 18:1}\n\n2 + 2 + 0 + 1\n\n[20,30,100,110,120]\n\n{20:1, 30:1, 100:1, 110:1, 120: 1}\n\n{20:1, 30:1, 100:1, 110:1, 120: 1}\n\n20:0\n30:1, 30: B, 20: A  30 <= 17\n100:0\n\nSolution:\n\nCount the ages. \n\n* For each age, compare with other ages and figure how many possible matches happen. \n'''\nfrom collections import Counter\n\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        \n        # if there are no ages\n        if not ages:\n            return 0\n        \n        def friend (A, B):\n            if B > A:\n                return False\n            if B <= (A * 0.5) + 7:\n                return False\n            return True\n        \n        # define a counter for ages\n        counter = Counter (ages)\n        \n        # total friend requests\n        requests = 0\n        \n        # iterate over the ages\n        # [16, 16, 16] => 2, 2, 2 => 6\n        for ageA, countA in list(counter.items()):\n            for ageB, countB in list(counter.items()):\n                if friend(ageA, ageB):\n                    requests = requests + (countA * countB) if ageA != ageB else requests + (countA - 1) * countA\n                    \n        return requests\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = Counter(ages)\n        ans= 0\n        for i in count:\n            for j in count:\n                if not (j <= i * 0.5 + 7 or j > i):\n                    ans+=count[i]*count[j]\n                    if j==i:\n                        ans-=count[i]\n        return ans\n", "class Solution(object):\n    def numFriendRequests(self, ages):\n        count = [0] * 121\n        for age in ages:\n            count[age] += 1\n\n        ans = 0\n        for ageA, countA in enumerate(count):\n            for ageB, countB in enumerate(count):\n                if ageA * 0.5 + 7 >= ageB: continue\n                if ageA < ageB: continue\n                if ageA < 100 < ageB: continue\n                ans += countA * countB\n                \n                if ageA == ageB: ans -= countA\n\n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        \n        count = collections.Counter(ages)\n        \n        ans = 0\n        for A, countA in count.items():\n            for B, countB in count.items():\n                if B <= 0.5 * A + 7: continue\n                elif B > A: continue\n                elif B > 100 and A < 100: continue\n                    \n                ans += countA * countB\n                if A == B:\n                    ans -= countA\n        \n        return ans", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        age_cnt = [0] * 121\n        for age in ages:\n            age_cnt[age] += 1\n        \n        res = 0\n        for ageA, cntA in enumerate(age_cnt):\n            for ageB, cntB in enumerate(age_cnt):\n                if ageB <= (0.5 * ageA + 7) or ageB > ageA or (ageB > 100 and ageA < 100):\n                    continue\n                res += (cntA * cntB)\n                if ageA == ageB:\n                    res -= cntA\n        return res", "class Solution:\n    '''\n    a will quest b if\n        b > 0.5 * a + 7\n        b <= a\n        b and a both < or > 100, or a or b is 100\n    bucket sort!\n    \n    ''' \n    def numFriendRequests(self, ages: List[int]) -> int:\n        ct = Counter(ages)\n    \n        res = 0\n        for a in ct:\n            for b in ct:\n                if b <= 0.5 * a +7: continue\n                if b > a: continue\n                #if b > 100 and a < 100: continue\n                res += ct[a] * ct[b] if a!= b else ct[a]**2 - ct[a]\n        return res\n", "class Solution:\n    def numFriendRequests(self, ages):\n        def request(a, b):\n            return not (b <= 0.5 * a + 7 or b > a or b > 100 and a < 100)\n        c = collections.Counter(ages)\n        return sum(request(a, b) * c[a] * (c[b] - (a == b)) for a in c for b in c)", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        c = collections.Counter(ages)\n        return sum(self.sendFriend(a, b) * c[a] * (c[b] - (a == b)) for a in c for b in c)\n        \n    \n    def sendFriend(self,A,B):\n        if B <= 0.5*A+7:\n            return False\n        if B > A:\n            return False\n        if B >100 and A<100:\n            return False\n        return True\n        \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        \n        d={}\n        ans=0\n        \n        for age in ages:\n            if(age not in d):\n                d[age]=1\n            else:\n                d[age]+=1\n        \n        print (d)\n        for ageA,countA in (list(d.items())):\n            for ageB ,countB in (list(d.items())):\n                print((ageA,countA,ageB,countB))\n                \n                if(ageA*0.5+7>=ageB):\n                    continue\n                    \n                if(ageA<ageB):\n                    continue\n                    \n                if(ageA<100<ageB):\n                    continue\n                    \n                if(ageA!=ageB):\n                    ans+=countA*countB\n                else:\n                    ans+=(countA-1)*countA\n                # if(ageA==ageB):\n                #     ans-=countA\n        return ans\n                    \n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        \n        count = [0]*121\n        for age in ages:\n            count[age] += 1\n        \n        ans = 0\n        for ageA, countA in enumerate(count):\n            for ageB, countB in enumerate(count):\n                if ageA * 0.5 + 7 >= ageB:\n                    continue\n                if ageA < ageB:\n                    continue\n                if ageA < 100 < ageB:\n                    continue\n                ans += countA * countB\n                if ageA == ageB:\n                    ans -= countA\n        return ans\n", "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ages.sort()\n        right_most = {}\n        for ix,x in enumerate(ages):\n            right_most[x] = ix\n        \n        l = 0\n        count = 0\n        for ix,x in enumerate(ages):\n            while ages[l]<= (x/2 + 7) and l<right_most[x]:\n                l+=1\n            count+= right_most[x] - l\n        return count", "import bisect\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        if not ages: \n            return 0\n        cnt = 0\n        N = len(ages)\n        ages.sort()\n        for i in range(N):\n            a = ages[i]\n            if a<=14: #\u542b14\u6b72\u4ee5\u524d\u4e0d\u80fd\u4ea4\u670b\u53cb => \u6578\u5b78\u63a8\u5c0e\n                continue\n            idx1 = bisect.bisect(ages, a)\n            x = 0.5*a+7\n            idx2 = bisect.bisect(ages, x)\n            while idx2<N and ages[idx2]==x: #\u627e\u51fa\u53f3boundary\n                idx2 += 1\n            cnt += max(0, idx1-idx2+(-1 if idx2<=i<=idx1 else 0)) #\u4e0d\u80fd\u8ddf\u81ea\u5df1\u4ea4\u670b\u53cb\n        return cnt\n                \n        \n", "class Solution:\n    \n    #problem: https://leetcode.com/problems/friends-of-appropriate-ages/\n    \n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = [0] * 121\n        for age in ages:\n            count[age] += 1\n\n        ans = 0\n        for ageA, countA in enumerate(count):\n            for ageB, countB in enumerate(count):\n                if ageA * 0.5 + 7 >= ageB: continue\n                if ageA < ageB: continue\n                if ageA < 100 < ageB: continue\n                ans += countA * countB\n                if ageA == ageB: ans -= countA\n\n        return ans\n"]