["import sys\nimport os\nimport random\nimport math\n#nonlocal defs\nn, m, p = list(map(int, input().split()))\narr = [dict() for _ in range(n)]\nfor _ in range(p):\n i,j = list(map(int,input().split()))\n i -= 1\n j -= 1\n if j not in arr[i]:\n  arr[i][j] = j+1\n else:\n  arr[i][j] += 1\n\ndef chefbm(arr,i):\n for (e,f) in arr[i].items():\n  if e == m-1:\n   continue\n  if e+1 in arr[i]:\n   c = arr[i][e+1]\n  else:\n   c = e+1\n  if arr[i][e] > c:\n   return -1\n y = arr[i][m-1] if m-1 in arr[i] else m-1\n x = arr[i][0] if 0 in arr[i] else 0\n return y-x\n\nfor i in range(n):\n print(chefbm(arr,i))", "N,M,P = list(map(int,input().split()))\nA = [dict() for _ in range(N)]\nfor _ in range(P):\n i,j = list(map(int,input().split()))\n i -= 1\n j -= 1\n if j not in A[i]:\n  A[i][j] = j+1\n else:\n  A[i][j] += 1\n\ndef solve(A,i):\n for (k,v) in A[i].items():\n  if k == M-1:\n   continue\n  if k+1 in A[i]:\n   c = A[i][k+1]\n  else:\n   c = k+1\n  if A[i][k] > c:\n   return -1\n y = A[i][M-1] if M-1 in A[i] else M-1\n x = A[i][0] if 0 in A[i] else 0\n return y-x\n\nfor i in range(N):\n print(solve(A,i))", "import sys\nimport os\nimport random\nimport math\n#nonlocal defs\nn,m,p = list(map(int,input().split()))\na = [dict() for _ in range(n)]\nfor _ in range(p):\n i,j = list(map(int,input().split()))\n i -= 1\n j -= 1\n if j not in a[i]:\n  a[i][j] = j+1\n else:\n  a[i][j] += 1\n\ndef chefbm(a,i):\n for (k,v) in a[i].items():\n  if k == m-1:\n   continue\n  if k+1 in a[i]:\n   c = a[i][k+1]\n  else:\n   c = k+1\n  if a[i][k] > c:\n   return -1\n y = a[i][m-1] if m-1 in a[i] else m-1\n x = a[i][0] if 0 in a[i] else 0\n return y-x\n\nfor i in range(n):\n print(chefbm(a,i))", "N,M,P = list(map(int,input().split()))\nA = [dict() for _ in range(N)]\nfor _ in range(P):\n i,j = list(map(int,input().split()))\n i -= 1\n j -= 1\n if j not in A[i]:\n  A[i][j] = j+1\n else:\n  A[i][j] += 1\n\ndef solve(A,i):\n for (k,v) in list(A[i].items()):\n  if k == M-1:\n   continue\n  if k+1 in A[i]:\n   c = A[i][k+1]\n  else:\n   c = k+1\n  if A[i][k] > c:\n   return -1\n y = A[i][M-1] if M-1 in A[i] else M-1\n x = A[i][0] if 0 in A[i] else 0\n return y-x\n\nfor i in range(N):\n print(solve(A,i))\n", "N,M,P = list(map(int,input().split()))\nA = [dict() for _ in range(N)]\nfor _ in range(P):\n i,j = list(map(int,input().split()))\n i -= 1\n j -= 1\n if j not in A[i]:\n  A[i][j] = j+1\n else:\n  A[i][j] += 1\n\ndef solve(A,i):\n for (k,v) in A[i].items():\n  if k == M-1:\n   continue\n  if k+1 in A[i]:\n   c = A[i][k+1]\n  else:\n   c = k+1\n  if A[i][k] > c:\n   return -1\n y = A[i][M-1] if M-1 in A[i] else M-1\n x = A[i][0] if 0 in A[i] else 0\n return y-x\n\nfor i in range(N):\n print(solve(A,i))", "n,m,p=(int(e) for e in input().split())\n\ndef add(d,k):\n if k in d:\n  d[k]+=1\n else:\n  d[k]=1\ndef get(d,k):\n if k in d:\n  return d[k]\n else:\n  return 0\ndic2={}\ndic={}\n\n\nsumd={}\nfor i in range(n):\n dic[i]=[]\n sumd[i]=m-1\nfor i in range(p):\n a,b=(int(e) for e in input().split())\n if b==1:\n  sumd[a-1]-=1\n if b==m:\n  sumd[a-1]+=1\n add(dic2,(a-1,b-1))\n dic[a-1].append(b-1)\n\n\nfor i in range(n):\n if len(dic[i])<=1:\n  print(sumd[i])\n else:\n  arr=set(dic[i])\n  flag=0\n  for e in arr:\n   if e==m-1 or get(dic2,(i,e))-1 <= get(dic2,(i,e+1)):\n    pass\n   else:\n    flag=1\n    break\n  if flag==1:\n   print(-1)\n  else:\n   print(sumd[i])\n\n\n", "N,M,P = list(map(int,input().split()))\nA = [dict() for _ in range(N)]\nfor _ in range(P):\n i,j = list(map(int,input().split()))\n i -= 1\n j -= 1\n if j not in A[i]:\n  A[i][j] = j+1\n else:\n  A[i][j] += 1\n\ndef solve(A,i):\n for (k,v) in A[i].items():\n  if k == M-1:\n   continue\n  if k+1 in A[i]:\n   c = A[i][k+1]\n  else:\n   c = k+1\n  if A[i][k] > c:\n   return -1\n y = A[i][M-1] if M-1 in A[i] else M-1\n x = A[i][0] if 0 in A[i] else 0\n return y-x\n\nfor i in range(N):\n print(solve(A,i))", "from collections import defaultdict\n\nn, m, p = list(map(int, input().split()))\nc = [defaultdict(int) for _ in range(n+1)]\n\nfor _ in range(p):\n i, j = list(map(int, input().split()))\n c[i][j] += 1\n\nfor i in range(1, n+1):\n if not c[i]:\n  print(m-1)\n else:\n  x = m + c[i].get(m, 0)\n  v = list(c[i].items())\n  v.sort(reverse=True)\n  cost = 0 \n  last_col = m\n  ok = True\n  for j, h in v:\n   cost += max(0, last_col-j-1)\n   if j < m:\n    x = j+1 + c[i].get(j+1, 0)\n    if x < j+h:\n     ok = False\n     break\n   if j > 1:\n    x = h+1 - c[i].get(j-1, 0)\n    if x < 0:\n     ok = False\n     break\n    cost += x\n   last_col = j-1\n  if ok:\n   print(cost+max(0, last_col-1))\n  else:\n   print(-1)\n", "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\n\n## Codechef May Challenge 2014\n## Chef and Strange Matrix\n\ntry:\n import psyco\n psyco.full()\nexcept ImportError:\n pass\n\n\ndef main(N, M, P, tab):\n \"\"\"Evolved solution\"\"\"\n # make a dictionnary with rows and cols increased\n dtab = dict()\n for ii, jj in tab:\n  i, j = ii-1, jj-1\n  if i in dtab:\n   dtab[i].append(j)\n  else:\n   dtab[i] = [j]\n\n # move along each row\n for i in range(N):\n  sol = M-1\n  if i in dtab:\n   line = sorted(dtab[i])\n   # only the first and the last col give points\n   sol += line.count(M-1) - line.count(0)\n   # check for unsolvable cases\n   prev = -1 # don't repeat k\n   for k in line:\n    if k > prev and k < (M - 1):\n     inc_k = line.count(k)\n     inc_kp = line.count(k+1)\n     if inc_k > (inc_kp + 1):\n      sol = -1\n      break\n     prev = k\n\n  print(sol)\n\n\ndef __starting_point():\n N, M, P = list(map(int, input().split())) # rows, cols, increasing cmds\n tab = [list(map(int, input().split())) for _ in range(P)]\n main(N, M, P, tab)\n\n__starting_point()", "def __starting_point():\n n,m,p = list(map(int, input().split()))\n hit={}\n sums={}\n for i in range(1,n+1):\n  hit[i]={}\n  sums[i]=m-1\n for _ in range(p):\n  i,j = list(map(int, input().split()))\n  if j not in hit[i]:\n   hit[i][j]=1\n  else:\n   hit[i][j]+=1\n for i in range(1,n+1):\n  done = True\n  for j in hit[i]:\n   if j!=m and (hit[i][j] - hit[i].get(j+1,0)) > 1:\n    done=False\n    break\n   if j==1 and m>1: sums[i]-=hit[i][j]\n   elif j==m and m>1: sums[i]+=hit[i][j]\n  if done:\n   print(sums[i])\n  else:\n   print(-1)\n \n  \n\n__starting_point()", "n,m,p=list(map(int,input().split()))\nmn={}\nfor i in range (0,p):\n x,y=list(map(int,input().split()))\n key = (x,y)\n if key in mn:\n  mn[key] +=1\n else:\n  mn[key] = 1\n\n\n#print mn\nans = {}\nfor key in (mn):\n cur = key \n next = (key[0],key[1]+1)\n if next[1] <= m:\n  if next in mn:\n   if mn[cur] > mn[next]+1:   # Strictly correct.\n    ans[cur[0]] = -1\n  elif mn[cur] > 1:\n   ans[cur[0]] = -1\n  \nfor i in range(1,n+1):\n if i in ans:\n  print(-1)\n else:\n  start = (i,1)\n  end = (i,m)\n  #if start != end:\n  if end in mn and start in mn:\n   print(mn[end]-mn[start]+(m-1))\n  if end in mn and start not in mn:\n   print(mn[end]+(m-1))\n  if end not in mn and start in mn:\n   print((m-1)-mn[start])\n  if end not in mn and start not in mn:\n   print(m-1)\n  #else:\n   #print mn[start]+1\n", "inp = input().split()\n\nrow_n,col_m,operation_p = int(inp[0]),int(inp[1]),int(inp[2])\n\noperations = []\n\nfor i in range(operation_p):\n inp = input().split()\n row,col = int(inp[0]),int(inp[1])\n operations.append([row,col])\noperations.sort()\n\n\ni=0\nsol_index = 1\nwhile i<operation_p:\n if operations[i][0]==sol_index:\n  #Logic\n  sol = col_m-1\n  o = {}\n  while (i<operation_p and operations[i][0]==sol_index ):\n   e = operations[i][1]\n   if e in o:\n    o[e]+=1\n   else:\n    o[e]=1\n   i+=1\n  #print o\n  for e in o:\n   if o[e]>1:\n    if e+1<=col_m:\n     if e+1 in o:\n      if o[e]-o[e+1]>1:\n       sol = -1\n       break\n     else:\n      sol = -1\n      break\n  if sol != -1:\n   if 1 in o:\n    sol-=o[1]\n   if col_m in o:\n    sol+=o[col_m]\n  print(sol)\n  sol_index+=1\n else:\n  print(col_m-1)\n  sol_index+=1\nwhile sol_index <= row_n:\n print(col_m-1)\n sol_index+=1", "inp = input().split()\n\nrow_n,col_m,operation_p = int(inp[0]),int(inp[1]),int(inp[2])\n\noperations = []\n\n#---------------Getting Operations-------------\nfor i in range(operation_p):\n inp = input().split()\n row,col = int(inp[0]),int(inp[1])\n operations.append([row,col])\noperations.sort()\n#------------------------------------------------\n\ni=0\nsol_index = 1\nwhile i<operation_p:\n if operations[i][0]==sol_index:\n  #Logic\n  sol = col_m-1\n  o = {}\n  while (i<operation_p and operations[i][0]==sol_index ):\n   e = operations[i][1]\n   if e in o:\n    o[e]+=1\n   else:\n    o[e]=1\n   i+=1\n  #print o\n  for e in o:\n   if o[e]>1:\n    # print \"O[e] > 1\"\n    if e+1<=col_m:\n     # print(\"e+1 <= col_m\")\n     if e+1 in o:\n      #print \"e+1 in o\"\n      if o[e]-o[e+1]>1:\n       sol = -1\n       break\n     else:\n      sol = -1\n      break\n  if sol != -1:\n   if 1 in o:\n    sol-=o[1]\n   if col_m in o:\n    sol+=o[col_m]\n  print(sol)\n  sol_index+=1\n else:\n  print(col_m-1)\n  sol_index+=1\nwhile sol_index <= row_n:\n print(col_m-1)\n sol_index+=1", "N,M,P = list(map(int,input().split()))\nA = [dict() for _ in range(N)]\nfor _ in range(P):\n i,j = list(map(int,input().split()))\n i -= 1\n j -= 1\n if j not in A[i]:\n  A[i][j] = j+1\n else:\n  A[i][j] += 1\n\ndef solve(A,i):\n for (k,v) in list(A[i].items()):\n  if k == M-1:\n   continue\n  if k+1 in A[i]:\n   c = A[i][k+1]\n  else:\n   c = k+1\n  if A[i][k] > c:\n   return -1\n y = A[i][M-1] if M-1 in A[i] else M-1\n x = A[i][0] if 0 in A[i] else 0\n return y-x\n\nfor i in range(N):\n print(solve(A,i))\n", "import sys\n\n__author__ = 'm.melnik'\n\nn, m, p = [int(i) for i in sys.stdin.readline().split()]\nincs = {i: [] for i in range(1, n + 1)}\n\nfor i in range(p):\n x, y = [int(i) for i in sys.stdin.readline().split()]\n incs[x].append(y)\n\nfor i in range(1, n + 1):\n cur = 1\n cost = 0\n height = cur\n prev_height = 0\n # print(sorted(incs[i]))\n for j in sorted(incs[i]):\n  if j == cur:\n   height += 1\n  elif j == cur + 1:\n   if cur != 1:\n    if height >= prev_height:\n     cost += height - prev_height\n    else:\n     cost = -1\n     break\n   prev_height = height\n   height = j + 1\n   cur = j\n  else:\n   if cur != 1:\n    if height >= prev_height:\n     cost += height - prev_height\n    else:\n     cost = -1\n     break\n   if height > cur + 1:\n    cost = -1\n    break\n   else:\n    cost += j - height - 1\n    cur = j\n    height = j + 1\n    prev_height = j - 1\n\n if cost != -1:\n  if cur != m:\n   if cur != 1:\n    if height >= prev_height:\n     cost += height - prev_height\n    else:\n     cost = -1\n   if cost != -1:\n    if height > cur + 1:\n     cost = -1\n    else:\n     cost += m - height\n  else:\n   if cur != 1:\n    if height >= prev_height:\n     cost += height - prev_height\n    else:\n     cost = -1\n print(cost)\n", "import operator\nn, m, p = list(map(int, input().split()))\na = []\nfor i in range(p):\n a.append(list(map(int, input().split())))\na.sort(key=operator.itemgetter(0, 1))\nb = []\nj = p - 1\nfor i in range(n, 0, -1):\n last = 200000\n now = 0\n k = m\n low = 1\n high = m\n while j >= 0 and a[j][0] == i:\n  if a[j][1] == k:\n   now += 1\n   if now > last + 1:\n    break\n  elif a[j][1] == k - 1:\n   k = a[j][1]\n   last = now\n   now = 1\n  else:\n   k = a[j][1]\n   now = 1\n   last = 0\n  if a[j][1] == m:\n   high = now + a[j][1]\n  if a[j][1] == 1:\n   low = now + a[j][1]\n  j -= 1\n if now > last + 1:\n  b.append(-1)\n  while j >= 0 and a[j][0] == i:\n   j -= 1\n else:\n  b.append(high - low)\nfor i in range(n - 1, -1, -1):\n print(b[i])\n", "from sys import stdout, stdin\nfrom operator import itemgetter\nn, m, p = list(map(int, stdin.readline().split()[0:3]))\nincreases = {}\nfor _ in range(p):\n i, j = list(map(int, stdin.readline().split()[0:2]))\n if not i in increases:\n  increases[i] = {}\n  increases[i][j] = 1\n else:\n  if j in increases[i]:\n   increases[i][j] += 1\n  else:\n   increases[i][j] = 1\nfor row in range(1, n + 1, 1):\n base = m - 1\n if not row in increases or m == 1:\n  print(base)\n else:\n  keylist = list(increases[row].keys())\n  keylist.sort()\n  for key in keylist:\n   if key == m:\n    base += increases[row][key]\n    continue\n   if not key + 1 in increases[row]:\n    if increases[row][key] >= 2:\n     base = -1\n     break\n    if key == 1:\n     base -= increases[row][key]\n     continue\n   else:\n    if increases[row][key] - increases[row][key + 1] >= 2:\n     base = -1\n     break\n    else:\n     if key == 1:\n      base -= increases[row][key]\n     continue\n  print(base)", "import sys\n\nn,m,p = list(map(int,sys.stdin.readline().split()))\n\nd1 = {}\n\nfor i in range(p):\n i,j = list(map(int,sys.stdin.readline().split()))\n if i not in d1:\n  d1[i] = {}\n  d1[i][j] = 1\n else:\n  if j not in d1[i]:\n   d1[i][j] = 1\n  else:\n   d1[i][j] += 1\n\ndef matrix(n,m,d):\n ans = m-1\n l = list(reversed(sorted(d.keys())))\n #print \"l = \",l\n #print \"d = \",d\n for i in range(len(l)):\n  #print \"ans = \",ans\n  number = l[i]\n  if number > 1:\n   below = number - 1\n  else:\n   if len(l) == 1:\n    if d[1] > 1:\n     return -1\n    else:\n     return m-2\n   else:\n    value = 1 + d[1]\n    if 2 not in d:\n     if 2-value >= 0:\n      ans += 2 - value - 1\n     else:\n      return -1\n    return ans\n  if number < m:\n   above = number + 1\n  else:\n   if len(l) == 1:\n    return ((m+d[m])-(m-1)-1)+ans\n   else:\n    if m-1 not in d:\n     ans += (m+d[m])-(m-1)-1\n    else:\n     below = (m-1)+d[below]\n     value = m+d[m]\n     if value - below < 0:\n      return -1\n     else:\n      ans += value-(below) - 1\n    continue\n  value = number + d[number]\n  if below in d:\n   initial = below + d[below]\n  else:\n   initial = below\n  if above in d:\n   final = above + d[above]\n  else:\n   final = above\n  if value - initial >= 0:\n   ans += value - initial - 1\n  else:\n   return -1\n  if len(l)==1:\n   if final - value >= 0:\n    ans += final - value - 1\n   else:\n    return -1\n  elif number+1 != l[i-1]:\n   if final - value >= 0:\n    ans += final - value - 1\n   else:\n    return -1\n \n return ans \n\n\nfor i in range(1,n+1):\n if m == 1:\n  print(0)\n elif i not in d1:\n  print(m-1)\n else:\n  print(matrix(n,m,d1[i]))\n\n", "import sys\n\nn,m,p = list(map(int,sys.stdin.readline().split()))\n\nd1 = {}\n\nfor i in range(p):\n i,j = list(map(int,sys.stdin.readline().split()))\n if i not in d1:\n  d1[i] = {}\n  d1[i][j] = 1\n else:\n  if j not in d1[i]:\n   d1[i][j] = 1\n  else:\n   d1[i][j] += 1\n\ndef matrix(n,m,d):\n ans = m-1\n l = list(reversed(sorted(d.keys())))\n #print \"l = \",l\n #print \"d = \",d\n for i in range(len(l)):\n  #print \"ans = \",ans\n  number = l[i]\n  if number > 1:\n   below = number - 1\n  else:\n   if len(l) == 1:\n    if d[1] > 1:\n     return -1\n    else:\n     return m-2\n   else:\n    value = 1 + d[1]\n    if 2 not in d:\n     if 2-value >= 0:\n      ans += 2 - value - 1\n     else:\n      return -1\n    return ans\n  if number < m:\n   above = number + 1\n  else:\n   if len(l) == 1:\n    return ((m+d[m])-(m-1)-1)+ans\n   else:\n    if m-1 not in d:\n     ans += (m+d[m])-(m-1)-1\n    else:\n     below = (m-1)+d[below]\n     value = m+d[m]\n     if value - below < 0:\n      return -1\n     else:\n      ans += value-(below) - 1\n    continue\n  value = number + d[number]\n  if below in d:\n   initial = below + d[below]\n  else:\n   initial = below\n  if above in d:\n   final = above + d[above]\n  else:\n   final = above\n  if value - initial >= 0:\n   ans += value - initial - 1\n  else:\n   return -1\n  if len(l)==1:\n   if final - value >= 0:\n    ans += final - value - 1\n   else:\n    return -1\n  elif number+1 != l[i-1]:\n   if final - value >= 0:\n    ans += final - value - 1\n   else:\n    return -1\n \n return ans \n\n\nfor i in range(1,n+1):\n if m == 1:\n  print(0)\n elif i not in d1:\n  print(m-1)\n else:\n  print(matrix(n,m,d1[i]))\n'''for i in xrange(1,n+1):\n    flag = True\n    if i not in d:\n     print m-1\n    else:\n     s = 0\n     temp = m\n     first = temp + d[i].count(temp)\n     while temp > 1:\n      second = (temp-1) + d[i].count(temp-1)\n      #print d[i]\n      if first >= second:\n       s += first-second\n       first = second\n       #print \"s = \",s\n      else:\n       flag = False\n       break\n      temp -= 1\n     if flag:\n      print s\n     else:\n      print -1\n   \n      '''\n"]