["import math\n\ndef lexComp(a, b):\n    if a[0] != b[0]:\n        return -1 if a[0] < b[0] else 1\n    if a[1] != b[1]:\n        return -1 if a[1] < b[1] else 1\n    return 0\n\ndef turn(a, b, c):\n    return (b[0] - a[0]) * (c[1] - b[1]) - (b[1] - a[1]) * (c[0] - b[0])\n    \ndef dist2(a, b):\n    return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2\n\ndef solve(n):\n    a = [list(map(int, input())) for _ in range(n)]\n    points = []\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 1:\n                curPoints = []\n                for dx in range(0, 2):\n                    for dy in range(0, 2):\n                        ok = True\n                        for ddx in range(0, 2):\n                            for ddy in range(0, 2):\n                                x, y = i - 1 + dx + ddx, j - 1 + dy + ddy\n                                if 0 <= x < n and 0 <= y < n and a[x][y] == 0:\n                                    ok = False\n                        if ok:\n                            curPoints.append((i + dx, j + dy))\n                points.append(curPoints[0])\n    points = list(set(points))\n    for i in range(1, len(points)):\n        if lexComp(points[0], points[i]) > 0:\n            points[0], points[i] = points[i], points[0]\n    points[1:] = sorted(points[1:], key=lambda p: (math.atan2(p[1] - points[0][1], p[0] - points[0][0]), dist2(p, points[0])))\n    hull = []\n    for p in points:\n        while len(hull) >= 2 and turn(hull[-2], hull[-1], p) <= 0:\n            hull.pop()\n        hull.append(p)\n    hull = [(p[1], n - p[0]) for p in hull]\n    hull = hull[::-1]\n    start = 0\n    for i in range(1, len(hull)):\n        if lexComp(hull[i], hull[start]) < 0:\n            start = i\n    newHull = hull[start:]\n    newHull.extend(hull[:start])\n    hull = newHull\n    print(len(hull))\n    for p in hull:\n        print(p[0], p[1])\n    \nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    solve(n)\n"]