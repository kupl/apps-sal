["from collections import defaultdict\nimport copy\n#def dfs(l,r,dct):\ndef dfs(l,r,dct):\n visit=[0 for i in range(n+1)]\n arr=[l]\n while(arr):\n  node=arr.pop()\n  if node==r:return True\n  visit[node]=1\n  for lnk in dct[node]:\n   if not visit[lnk]:\n    arr.append(lnk)\n return False\n \ndef ok(mid,cst):\n for i,j in edges:\n  cst[i][j]-=mid\n \n d=[10**9]*(n+1)\n d[l]=0\n for _ in range(n-1):\n  for i,j in edges:\n   d[j]=min(d[j],d[i]+cst[i][j])\n   \n if d[r]<=0:return 1\n for i,j in edges:\n  if d[j]>d[i]+cst[i][j] and dfs(l,i,dct) and dfs(j,r,dct):\n   return 1\n return 0\n \nfor _ in range(int(input())):\n n,m=map(int,input().split())\n dct=defaultdict(list)\n \n cost=[[1000 for i in range(n+1)] for j in range(n+1)]\n edges=[]\n for i in range(m):\n  a,b,w=map(int,input().split())\n  edges.append([a,b])\n  dct[a].append(b)\n  cost[a][b]=min(cost[a][b],w)\n \n l,r=map(int,input().split())\n if not dfs(l,r,dct):\n  print(-1)\n  continue\n #print(cost)\n lo=1\n hi=101\n for i in range(100):\n  cst=copy.deepcopy(cost)\n  mid=(lo+hi)/2\n  if ok(mid,cst):hi=mid-1\n  else:lo=mid+1\n print(\"%.7f\"%mid)"]