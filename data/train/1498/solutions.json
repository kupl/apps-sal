["def Testcase():\n    h,x,y = [int(x) for x in input().strip().split()]\n    \n    h = h-1\n    yt = h//y +1\n    # print(yt)\n    flag=0\n    ans = 100000000009\n \n    for i in range(0,yt):\n        temp = x+i*y\n        if h%temp==0:\n            flag = 1\n            cl =i+int(h/temp)\n            # print(temp,cl)\n            ans = min(ans,cl)\n            # print(temp,ans,i)\n    print(ans if flag==1 else '-1')\n    \n    \nt = int(input())\nwhile t>0:\n    Testcase()\n    \n    t-=1", "# cook your dish here\n\nt = int(input())\nfor rep in range(t):\n    h,x,y = list(map(int,input().split()))\n    req = h - 1\n    mini = 1000000000\n    g = 0\n    t = 0\n    base = x\n    f = 0\n    while base <= req:\n        if req % base == 0:\n            f = 1\n            t = req // base\n            if g + t < mini:\n                mini = g + t\n        base = base + y\n        g = g + 1\n    if f == 1:\n        print(mini)\n    else:\n        print(-1)\n", "# cook your dish here\ntry:\n    from functools import reduce\n\n    def factors(n):    \n        return set(reduce(list.__add__, \n                    ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    b = ()\n    test = int(input())\n    for i in range (test):\n        flag = 0\n        move = []\n        h , x , y = list(map(int,input().split(' ')))\n        b = factors(h-1)\n        h -= 1\n        if(h == x):\n            print(\"0\")\n        else:\n            for j in b:\n                if(j >= x):\n                    if(j==x ):\n                        flag = 1 \n                        move.append(h//j)\n                    elif((j-x)%y == 0 ):\n                        flag = 1\n                        move.append(((j-x)//y + h/j ))\n                    \n                    \n            if(flag == 0):\n                print(\"-1\")\n            else:\n                print(int(min(move)%((10**9)+7)))\n                \n                \nexcept EOFError:\n\tpass", "# cook your dish here\ntry:\n    from functools import reduce\n\n    def factors(n):    \n        return set(reduce(list.__add__, \n                    ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    b = ()\n    test = int(input())\n    for i in range (test):\n        flag = 0\n        move = []\n        h , x , y = list(map(int,input().split(' ')))\n        b = factors(h-1)\n        h -= 1\n        if(h == x):\n            print(\"0\")\n        else:\n            for j in b:\n                if(j >= x):\n                    if(j==x ):\n                        flag = 1 \n                        move.append(h//j)\n                    elif((j-x)%y == 0 ):\n                        flag = 1\n                        move.append(((j-x)//y + h/j ))\n                    \n                    \n            if(flag == 0):\n                print(\"-1\")\n            else:\n                print(int(min(move)%((10**9)+7)))\n                \n                \nexcept EOFError:\n\tpass", "# cook your dish here\ntry:\n    from functools import reduce\n\n    def factors(n):    \n        return set(reduce(list.__add__, \n                    ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    b = ()\n    test = int(input())\n    for i in range (test):\n        flag = 0\n        move = []\n        h , x , y = list(map(int,input().split(' ')))\n        b = factors(h-1)\n        h -= 1\n        if(h == x):\n            print(\"0\")\n        else:\n            for j in b:\n                if(j >= x):\n                    if(j==x ):\n                        flag = 1 \n                        move.append(h//j)\n                    elif((j-x)%y == 0 ):\n                        flag = 1\n                        move.append(((j-x)//y + h/j ))\n                    \n                    \n            if(flag == 0):\n                print(\"-1\")\n            else:\n                print(int(min(move)%((10**9)+7)))\n                \n                \nexcept EOFError:\n\tpass", "# cook your dish here\ntry:\n    from functools import reduce\n\n    def factors(n):    \n        return set(reduce(list.__add__, \n                    ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    b = ()\n    test = int(input())\n    for i in range (test):\n        flag = 0\n        move = 1000\n        h , x , y = list(map(int,input().split(' ')))\n        b = factors(h-1)\n        h -= 1\n        if(h == x):\n            print(\"0\")\n            move = 999\n        else:\n            for j in b:\n                if(j >= x):\n                    if(j==x ):\n                        flag = 1 \n                        if(move > h//j):\n                            move = h//j\n                    elif((j-x)%y == 0 ):\n                        flag = 1\n                        if(move > ((j-x)//y + h/j )):\n                            move = ((j-x)//y + h/j )\n                    \n                    \n            if(flag == 0):\n                print(\"-1\")\n            else:\n                print(int(move%((10**9)+7)))\n                \n                \nexcept EOFError:\n\tpass", "# cook your dish here\ntry:\n    from functools import reduce\n\n    def factors(n):    \n        return set(reduce(list.__add__, \n                    ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    b = ()\n    test = int(input())\n    for i in range (test):\n        flag = 0\n        move = 1000\n        h , x , y = list(map(int,input().split(' ')))\n        b = factors(h-1)\n        h -= 1\n        if(h == x):\n            print(\"0\")\n            move = 999\n        else:\n            for j in b:\n                if(j >= x):\n                    if(j==x ):\n                        flag = 1 \n                        if(move > h//j):\n                            move = h//j\n                    elif((j-x)%y == 0 ):\n                        flag = 1\n                        if(move > ((j-x)//y + h/j )):\n                            move = ((j-x)//y + h/j )\n                    \n                    \n            if(flag == 0):\n                print(\"-1\")\n            else:\n                print(int(move)%((10**9)+7))\n                \n                \nexcept EOFError:\n\tpass", "# cook your dish here\ntry:\n    from functools import reduce\n\n    def factors(n):    \n        return set(reduce(list.__add__, \n                    ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    b = ()\n    test = int(input())\n    for i in range (test):\n        flag = 0\n        move = 1000\n        h , x , y = list(map(int,input().split(' ')))\n        b = factors(h-1)\n        h -= 1\n        if(h == x):\n            print(\"0\")\n            move = 999\n        else:\n            for j in b:\n                if(j >= x):\n                    if(j==x ):\n                        flag = 1 \n                        if(move > h//j):\n                            move = h//j\n                    elif((j-x)%y == 0 ):\n                        flag = 1\n                        if(move > ((j-x)//y + h/j )):\n                            move = ((j-x)//y + h/j )\n                    \n                    \n            if(flag == 0):\n                print(\"-1\")\n            else:\n                print(int(move))\n                \n                \nexcept EOFError:\n\tpass", "# cook your dish here\n\nt = int(input())\nfor rep in range(t):\n    h,x,y = list(map(int,input().split()))\n    req = h - 1\n    mini = 1000000000\n    g = 0\n    t = 0\n    base = x\n    f = 0\n    while base <= req:\n        if req % base == 0:\n            f = 1\n            t = req // base\n            if g + t < mini:\n                mini = g + t\n        base = base + y\n        g = g + 1\n    if f == 1:\n        print(mini)\n    else:\n        print(-1)\n", "from sys import stdin\r\nfrom functools import reduce\r\n\r\ndef factors(n):    \r\n    return list(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\r\n\r\nfor _ in range(int(stdin.readline())):\r\n    h, x, y = list(map(int, stdin.readline().split()))\r\n    arr = factors(h-1)\r\n    ans = 1000000001\r\n    cond = False\r\n    for i in range(len(arr)):\r\n        if arr[i]>=x:\r\n            m = arr[i]-x\r\n            if m%y == 0:\r\n                cond = True\r\n                ans = min(ans, m//y + (h-1)//arr[i])\r\n    if cond == True:\r\n        print(ans)\r\n    else:\r\n        print(-1)\r\n            \r\n            \r\n", "# cook your dish here\nimport math  \n \ndef printDivisors(n,X,l) : \n    list = []   \n    for i in range(1, int(math.sqrt(n) + 1)) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                list.append(i)\n                a=0\n            else :  \n                list.append(i)\n                list.append(int(n / i)) \n                       \n    for i in list[::-1] :\n        if(i-X>=0):\n            l.append(i)\n          \n\nT=int(input())\nfor _ in range(T):\n    H,X,Y=list(map(int,input().split()))\n    l=[]\n    printDivisors(H-1,X,l)\n    mv=2*H\n    for i in l:\n        a=(i-X)//Y\n        if(a*Y==(i-X)):\n            v=((H-1)//i)+a\n            if(v<mv):\n                mv=v\n\n    if(mv>H):\n        print(-1)\n\n    else:\n        print(mv)\n        \n", "from math import sqrt\r\n\r\nINF = float('inf')\r\n\r\ndef divs(n):\r\n    d = []\r\n\r\n    for i in range(1, int(sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            d.append(i)\r\n\r\n            if n // i != i:\r\n                d.append(n // i)\r\n\r\n    return d\r\n\r\nfor _ in range(int(input())):\r\n    h, x, y = map(int, input().split())\r\n    h -= 1\r\n\r\n    d = divs(h)\r\n\r\n    mini = INF\r\n\r\n    for i in d:\r\n        if i - x >= 0 and (i - x) % y == 0:\r\n            f = (i - x) // y + h // i\r\n\r\n            mini = min(mini, f)\r\n\r\n    if mini == INF:\r\n        print(-1)\r\n    else:\r\n        print(mini)"]