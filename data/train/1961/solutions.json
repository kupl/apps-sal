["class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        \n        self.hashM = {}\n        self.maxIndex, self.currIndex = 0, 0\n        self.hashM[self.currIndex] = homepage\n\n    def visit(self, url: str) -> None:\n        \n        self.hashM[self.currIndex + 1] = url\n        self.currIndex = self.currIndex + 1\n        self.maxIndex = self.currIndex\n        return(url)\n        \n    def back(self, steps: int) -> str:\n        \n        if self.currIndex - steps < 0:\n            \n            self.currIndex = 0\n            \n        else:\n            \n            self.currIndex = self.currIndex - steps\n            \n        return(self.hashM[self.currIndex])\n\n    def forward(self, steps: int) -> str:\n        \n        if self.currIndex + steps > self.maxIndex:\n            \n            self.currIndex = self.maxIndex\n            \n        else:\n            \n            self.currIndex = self.currIndex + steps\n            \n        return(self.hashM[self.currIndex])\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.l = [homepage]\n        self.cur = 0\n        self.max = 0\n\n    def visit(self, url: str) -> None:\n        self.cur += 1\n        if self.cur == len(self.l):\n            self.l.append(url)\n        else:\n            self.l[self.cur] = url\n        self.max = self.cur\n\n    def back(self, steps: int) -> str:\n        self.cur -= steps\n        if self.cur < 0:\n            self.cur = 0\n        return self.l[self.cur]\n\n    def forward(self, steps: int) -> str:\n        self.cur += steps\n        if self.cur > self.max:\n            self.cur = self.max\n        return self.l[self.cur]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.history = [homepage]\n        self.idx = 0\n\n    def visit(self, url: str) -> None:\n        for _ in range(len(self.history) - 1 - self.idx):\n            self.history.pop()\n        self.history.append(url)\n        self.idx += 1\n\n    def back(self, steps: int) -> str:\n        self.idx = max(0, self.idx - steps)\n        return self.history[self.idx]\n\n    def forward(self, steps: int) -> str:\n        self.idx = min(len(self.history) - 1, self.idx + steps)\n        return self.history[self.idx]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "        \nclass BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.history = [homepage]\n        self.index =0\n        \n    def visit(self, url: str) -> None:\n        while len(self.history) > self.index + 1:\n            print((self.history.pop())) #to delete nodes after back\n        self.history.append(url)\n        self.index +=1       \n\n    def back(self, steps: int) -> str:\n        self.index = max(0, self.index - steps)\n        return self.history[self.index]\n\n    def forward(self, steps: int) -> str:\n        self.index = min(len(self.history) -1, self.index + steps)\n        return self.history[self.index]\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n    \\\"\\\"\\\"\n        Represents the browser history contents, and methods to visit\n        new urls, as well as move backwards and forwards in the \n        history and return the urls at those positions.\n    \\\"\\\"\\\"\n    \n    \n    def __init__(self, homepage: str):\n        \\\"\\\"\\\"The class is first initialized with\n           a starting homepage url added initially\n           to the history.\n        \\\"\\\"\\\"\n        \n        # Validation\n        min_len, max_len = 1, 20\n        if len(homepage) < min_len or len(homepage) > max_len:\n            return None\n        \n        self.current_index = 0\n        self.history = [homepage]\n\n        \n    def visit(self, url: str) -> None:\n        \\\"\\\"\\\"Visits a new url.\n        \n           Visits a new url, adds it to the history, increases\n           the history index position, and if we are currently\n           in the back-contents of the history, we remove all\n           forward contents except this new visit url which will\n           be most recent in the history.\n        \n           Args:\n              url (str): The url to visit and add to history.\n             \n           Returns:\n              None\n        \\\"\\\"\\\"\n        \n        # Validation\n        min_len, max_len = 1, 20\n        if len(url) < min_len or len(url) > max_len:\n            return None\n        \n        steps_until_final = len(self.history) - self.current_index - 1\n        \n        # If we have moved back in the history, we delete all forward history\n        if steps_until_final > 0:\n            old_history = self.history\n            self.history = []\n            for url_index in range(0, self.current_index + 1):\n                self.history.append(old_history[url_index])\n           \n        # Visiting new url afterward\n        self.current_index += 1\n        self.history.append(url)\n\n\n    def back(self, steps: int) -> str:\n        \\\"\\\"\\\"Moves backwards in the history an arbitrary amount of steps.\n           \n           Moves backwards in the history an arbitrary amount of steps.\n           If we can no longer move backwards in history, we stop at\n           the beginning of the history.\n        \n           Args:\n              steps (int): The number of steps to move backwards.\n             \n           Returns:\n              resulting_url (str): The url that resides after moving\n                                   backwards in the history.\n        \\\"\\\"\\\"\n        \n        # Validation\n        min_steps, max_steps = 1, 100\n        if steps < min_steps or steps > max_steps:\n            return None\n        \n        resulting_url = None\n        \n        if steps > self.current_index:\n            # We are going to the beginning of the history\n            self.current_index = 0\n            resulting_url = self.history[self.current_index]\n        else:\n            # We are within the bounds of the history\n            self.current_index -= steps\n            resulting_url = self.history[self.current_index]\n        \n        return resulting_url\n            \n\n    def forward(self, steps: int) -> str:\n        \\\"\\\"\\\"Moves forward in the history an arbitrary amount of steps.\n        \n           Moves forwards in the history an arbitrary amount of steps.\n           If we can no longer move forwards in history, we stop at\n           the end of the history.\n        \n           Args:\n              steps (int): The number of steps to move forward.\n             \n           Returns:\n              resulting_url (str): The url that resides after moving\n                                   forward in the history.\n        \\\"\\\"\\\"\n\n        # Validation\n        min_steps, max_steps = 1, 100\n        if steps < min_steps or steps > max_steps:\n            return None\n        \n        resulting_url = None\n        \n        steps_until_final = len(self.history) - self.current_index - 1\n        print('steps until final: ', steps_until_final)\n        if steps > steps_until_final:\n            # We are going to the end of the history\n            self.current_index = len(self.history) - 1\n            resulting_url = self.history[self.current_index]\n        else:\n            # We are within the bounds of the history\n            self.current_index += steps\n            resulting_url = self.history[self.current_index]\n            \n        return resulting_url\n            \n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.home = homepage\n        self.history = [homepage] + [0 for _ in range(5000)]\n        self.curr_ind = 0\n        self.top = 0\n\n    def visit(self, url: str) -> None:\n        self.history[self.curr_ind+1] = url\n        self.curr_ind += 1\n        self.top = self.curr_ind\n\n    def back(self, steps: int) -> str:\n        \n        self.curr_ind = max(0, self.curr_ind - steps)\n        return self.history[self.curr_ind]\n\n    def forward(self, steps: int) -> str:\n        \n        self.curr_ind = min(self.top, self.curr_ind + steps)\n        return self.history[self.curr_ind]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.currentIndex = 0\n        self.maxIndex = 0\n        self.history = {self.currentIndex: homepage}\n\n    def visit(self, url: str) -> None:\n        self.currentIndex += 1\n        self.history[self.currentIndex] = url\n        self.maxIndex = self.currentIndex\n\n    def back(self, steps: int) -> str:\n        self.currentIndex -= steps\n        self.currentIndex = 0 if self.currentIndex < 0 else self.currentIndex\n        return self.history[self.currentIndex]\n\n    def forward(self, steps: int) -> str:\n        self.currentIndex += steps\n        self.currentIndex = self.maxIndex if self.currentIndex > self.maxIndex else self.currentIndex\n        return self.history[self.currentIndex]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.pages = [homepage]\n        self.curr = 0\n\n    def visit(self, url: str) -> None:\n        self.pages = self.pages[:self.curr+1]\n        self.pages.append(url)\n        self.curr = len(self.pages)-1\n            \n        print((self.pages))\n    def back(self, steps: int) -> str:\n        if self.curr - steps < 0:\n            self.curr = 0\n            return self.pages[0]\n        else:\n            self.curr = self.curr - steps\n            return self.pages[self.curr]\n\n    def forward(self, steps: int) -> str:\n        if self.curr + steps >= len(self.pages):\n            self.curr = len(self.pages)-1\n            return self.pages[-1]\n        else:\n            self.curr = self.curr + steps\n            return self.pages[self.curr]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.history = [homepage]\n        self.i = 0\n\n    def visit(self, url: str) -> None:\n        self.history = self.history[0:self.i+1]\n        self.history.append(url)\n        self.i += 1\n\n    def back(self, steps: int) -> str:\n        if self.i >= steps:\n            for _ in range(steps):\n                self.i -= 1\n            return self.history[self.i]\n        else:\n            self.i = 0\n            return self.history[self.i]\n\n    def forward(self, steps: int) -> str:\n        if len(self.history) - self.i - 1 >= steps:\n            for _ in range(steps):\n                self.i += 1\n            return self.history[self.i]\n        else:\n            self.i = len(self.history) - 1\n            return self.history[self.i]\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.history = [homepage]\n        self.curr = 0\n\n    def visit(self, url: str) -> None:\n        self.history = self.history[:self.curr+1] \n        self.history += [url]\n        self.curr+=1\n        print((self.history, self.curr))\n\n    def back(self, steps: int) -> str:\n        if self.curr < steps:\n            self.curr=0\n            \n        else:\n            self.curr-=steps\n        return self.history[self.curr] \n\n    def forward(self, steps: int) -> str:\n        if self.curr + steps > len(self.history)-1:\n            self.curr=len(self.history)-1  \n        else:\n            self.curr += steps\n        return self.history[self.curr] \n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.stack = [homepage]\n        self.stack_position = 0\n\n    def visit(self, url: str) -> None:\n        self.stack_position += 1\n        print(('You are in \\\"{}\\\". Visit \\\"{}\\\"'.format(self.stack[-1], url)))\n        while self.stack_position < len(self.stack):  # to clear forward entries\n            self.stack.pop()\n        self.stack.append(url)\n\n    def back(self, steps: int) -> str:\n        self.stack_position = max(0, self.stack_position - steps)    \n        if self.stack_position == 0:\n            print('cant go any more back')\n        return self.stack[self.stack_position]\n\n    def forward(self, steps: int) -> str:\n        self.stack_position = min(len(self.stack)-1, self.stack_position + steps)    \n        if self.stack_position == len(self.stack)-1:\n            print('cant go any more forwards')\n        return self.stack[self.stack_position]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.arr = [homepage]\n        self.cur = 0\n        self.f = 0\n\n    def visit(self, url: str) -> None:\n        self.arr = self.arr[:self.cur+1]\n        self.arr.append(url)\n        self.cur += 1\n        self.f = 0\n        \n\n    def back(self, steps: int) -> str:\n        if steps > self.cur:\n            self.cur = 0\n            self.f = len(self.arr) - 1\n        else:\n            self.cur -= steps\n            self.f += steps\n            \n            \n        return self.arr[self.cur]\n            \n\n    def forward(self, steps: int) -> str:\n        if steps > self.f:\n            self.cur = len(self.arr) - 1\n            self.f = 0\n        else:\n            self.cur += steps\n            self.f -= steps\n            \n        return self.arr[self.cur]\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.history = [homepage]\n        self.pointer = 0\n\n    def visit(self, url: str) -> None:\n        #print(\\\"visiting \\\" + url + \\\": \\\" + str(len(self.history)) + \\\" pages total\\\")\n        #print(\\\"before the visit: \\\" + str(self.history))\n        if self.pointer < len(self.history) - 1:\n            del self.history[self.pointer + 1:]\n        self.history.append(url)\n        self.pointer = len(self.history) - 1\n        #print(\\\"after the visit: \\\" + str(self.history))\n        #print(\\\"after the visit: \\\" + str(len(self.history)) + \\\" pages total, pointer = \\\" + str(self.pointer))\n\n    def back(self, steps: int) -> str:\n        length = min(steps, self.pointer)\n        self.pointer -= length\n        #print(\\\"moving back, pointer = \\\" + str(self.pointer))\n        return self.history[self.pointer]\n\n    def forward(self, steps: int) -> str:\n        length = min(steps, len(self.history) - 1 - self.pointer)\n        self.pointer += length\n        #print(\\\"moving forward, pointer = \\\" + str(self.pointer))\n        return self.history[self.pointer]\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "# try next : store the actual visited pages in the history as well, not only the pointer system \nclass BrowserHistory:\n    curr = 0\n    history = []\n    \n    def __init__(self, homepage: str):\n        self.curr = 0\n        self.history = [homepage]\n        \n    def visit(self, url: str) -> None:\n        self.curr += 1\n        print((self.history))\n        self.history = self.history[0:self.curr]\n        self.history.append(url)\n        \n\n    def back(self, steps: int) -> str:\n        self.curr = max(0, self.curr - steps)\n        return self.history[self.curr]\n\n    def forward(self, steps: int) -> str:\n        self.curr = min(self.curr + steps, len(self.history)-1)\n        return self.history[self.curr]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.prev = [homepage]\n        self.future = []\n        \n\n    def visit(self, url: str) -> None:\n        self.prev.append(url)\n        self.future = []\n        \n\n    def back(self, steps: int) -> str:\n        size = len(self.prev)-1\n        for _ in range(min(steps, size)):\n            self.future.append(self.prev.pop())\n        return self.prev[-1]\n        \n\n    def forward(self, steps: int) -> str:\n        size = len(self.future)\n        for _ in range(min(steps, size)):\n            self.prev.append(self.future.pop())\n        return self.prev[-1]\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.history = LinkedList(homepage, None, None)\n        self.curr_page = self.history\n\n    def visit(self, url: str) -> None:\n        new_page = LinkedList(url, self.curr_page, None)\n        self.curr_page.next = new_page\n        self.curr_page = new_page\n\n    def back(self, steps: int) -> str:\n        num_steps = 0\n        temp = self.curr_page\n        while num_steps < steps and temp.prev != None: \n            temp = temp.prev\n            num_steps += 1\n        self.curr_page = temp\n        return temp.val\n\n    def forward(self, steps: int) -> str:\n        num_steps = 0\n        temp = self.curr_page\n        while num_steps < steps and temp.__next__ != None: \n            temp = temp.__next__\n            num_steps += 1\n        self.curr_page = temp\n        return temp.val\n        \nclass LinkedList: \n    def __init__(self, val, prev, next):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.pointer = 0\n        self.histlen = 1\n        self.history = [homepage]\n\n    def visit(self, url: str) -> None:\n        self.history = self.history[:(self.pointer+1)] + [url]\n        self.pointer += 1\n        self.histlen = len(self.history)\n\n    def back(self, steps: int) -> str:\n        self.pointer = max(self.pointer-steps, 0)\n        return self.history[self.pointer]\n\n    def forward(self, steps: int) -> str:\n        self.pointer = min(self.pointer+steps, self.histlen-1)\n        return self.history[self.pointer]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class Node:\n    def __init__(self, url: str):\n        self.url = url\n        self.next = None\n        self.prev = None\n\nclass BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.head = Node(homepage)\n        self.current_node = self.head\n        \n\n    def visit(self, url: str) -> None:\n        new_node = Node(url)\n        self.current_node.next = new_node\n        new_node.prev = self.current_node\n        self.current_node = self.current_node.__next__\n        \n\n    def back(self, steps: int) -> str:\n        for i in range(steps):\n            if self.current_node == self.head:\n                break\n            else:\n                self.current_node = self.current_node.prev\n        return self.current_node.url\n        \n    def forward(self, steps: int) -> str:\n        for i in range(steps):\n            if self.current_node.__next__ is None:\n                break\n            else:\n                self.current_node = self.current_node.__next__\n        return self.current_node.url\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class Node:\n    \n    def __init__(self, val, prev=None, next=None):\n        self.val = val\n        self.next = next\n        self.prev = prev\n        \nclass BrowserHistory(object):\n\n    def __init__(self, homepage):\n        \\\"\\\"\\\"\n        :type homepage: str\n        \\\"\\\"\\\"\n        self.head = Node(val=homepage)\n\n    def visit(self, url):\n        \\\"\\\"\\\"\n        :type url: str\n        :rtype: None\n        \\\"\\\"\\\"\n        self.head.next = Node(val=url, prev=self.head)\n        self.head = self.head.next\n\n    def back(self, steps):\n        \\\"\\\"\\\"\n        :type steps: int\n        :rtype: str\n        \\\"\\\"\\\"\n        while steps and self.head.prev:\n            self.head = self.head.prev\n            steps -= 1\n        return self.head.val\n        \n\n    def forward(self, steps):\n        \\\"\\\"\\\"\n        :type steps: int\n        :rtype: str\n        \\\"\\\"\\\"\n        while steps and self.head.next:\n            self.head = self.head.next\n            steps -= 1\n        return self.head.val\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.list = []\n        self.list.append(homepage)\n        self.currentIndex = 0\n\n    def visit(self, url: str) -> None:\n        self.currentIndex += 1\n        while self.currentIndex < len(self.list):\n            self.list.pop()\n            \n        self.list.append(url)\n        \n    #Move forward n steps\n    def forward(self, steps: int) -> str:\n        self.currentIndex = min(self.currentIndex+steps,len(self.list)-1)\n        return self.list[self.currentIndex]\n        \n    def back(self, steps: int) -> str:\n        self.currentIndex = max(self.currentIndex-steps,0)\n        return self.list[self.currentIndex]\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.fwd = []\n        self.bck = [homepage]  \n        self.lastback = homepage\n        \n    def visit(self, url: str) -> None:\n        self.bck.append(url)\n        self.lastback = url\n        self.fwd = []\n\n    def back(self, steps: int) -> str:\n        el = None\n        while steps and len(self.bck)>1:\n            self.fwd.append(self.bck.pop())\n            steps-=1\n        return self.bck[-1]\n\n    def forward(self, steps: int) -> str:\n        el = None\n        while steps and self.fwd:\n            self.bck.append(self.fwd.pop())\n            steps-=1\n        return self.bck[-1]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.fwd = []\n        self.bck = [homepage]  \n        \n    def visit(self, url: str) -> None:\n        self.bck.append(url)\n        self.fwd = []\n\n    def back(self, steps: int) -> str:\n        el = None\n        while steps and len(self.bck)>1:\n            self.fwd.append(self.bck.pop())\n            steps-=1\n        return self.bck[-1]\n\n    def forward(self, steps: int) -> str:\n        el = None\n        while steps and self.fwd:\n            self.bck.append(self.fwd.pop())\n            steps-=1\n        return self.bck[-1]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage):\n        self.history = [homepage]\n        self.curr = 0\n        self.bound = 0\n\n    def visit(self, url):\n        self.curr += 1\n        if self.curr == len(self.history):\n            self.history.append(url)\n        else:\n            self.history[self.curr] = url\n        self.bound = self.curr\n\n    def back(self, steps):\n        self.curr = max(self.curr - steps, 0)\n        return self.history[self.curr]\n\n    def forward(self, steps):\n        self.curr = min(self.curr + steps, self.bound)\n        return self.history[self.curr]\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n        self.prev = None\n        \nclass BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.root = ListNode(homepage)\n        \n\n    def visit(self, url: str) -> None:\n        \n        node =ListNode(url)\n        node.prev = self.root\n        self.root.next = node\n        self.root = self.root.__next__\n\n    def back(self, steps: int) -> str:\n        while self.root.prev and steps:\n            self.root = self.root.prev\n            steps-=1\n    \n        return self.root.val\n\n    def forward(self, steps: int) -> str:\n        while self.root.__next__ and steps:\n            self.root = self.root.__next__\n            steps-=1\n        return self.root.val\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.fwd = []\n        self.bck = [homepage]  \n        \n    def visit(self, url: str) -> None:\n        self.bck.append(url)\n        self.fwd = []\n\n    def back(self, steps: int) -> str:\n        while steps and len(self.bck)>1:\n            self.fwd.append(self.bck.pop())\n            steps-=1\n        return self.bck[-1]\n\n    def forward(self, steps: int) -> str:\n        while steps and self.fwd:\n            self.bck.append(self.fwd.pop())\n            steps-=1\n        return self.bck[-1]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.curr = 0 \n        self.history = [homepage] \n        self.bound = 0 \n\n    def visit(self, url: str) -> None:\n        self.curr += 1\n        if self.curr == len(self.history):\n            self.history.append(url)\n            self.bound += 1\n        else:\n            self.history[self.curr] = url\n            self.bound = self.curr\n        \n\n    def back(self, steps: int) -> str:\n        move = max(self.curr - steps, 0)\n        self.curr = move\n        return self.history[self.curr]\n        \n\n    def forward(self, steps: int) -> str:\n        move = min(self.bound, self.curr + steps)\n        self.curr = move\n        return self.history[self.curr]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        # self.list = []\n        # self.list.append(homepage)\n        # self.currentIndex = 0\n        self.forwardA = []\n        self.backward = [homepage]\n        \n\n    def visit(self, url: str) -> None:\n        self.backward.append(url)\n        self.forwardA = []\n        \n#         self.currentIndex += 1\n#         while self.currentIndex < len(self.list):\n#             self.list.pop()\n            \n#         self.list.append(url)\n        \n    #Move forward n steps\n    def forward(self, steps: int) -> str:\n        # self.currentIndex = min(self.currentIndex+steps,len(self.list)-1)\n        # return self.list[self.currentIndex]\n        i = 0\n        while len(self.forwardA) != 0 and i < steps:\n            i += 1\n            item = self.forwardA.pop()\n            self.backward.append(item)\n        return self.backward[-1]\n        \n        \n        \n    def back(self, steps: int) -> str:\n        # self.currentIndex = max(self.currentIndex-steps,0)\n        # return self.list[self.currentIndex]\n        i = 0\n        while len(self.backward) > 1 and i < steps:\n            item = self.backward.pop()\n            self.forwardA.append(item)\n            i += 1\n        return self.backward[-1]\n        \n        \n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n        self.prev = None\n\nclass BrowserHistory:\n    def __init__(self, homepage: str):\n        self.root = ListNode(homepage)\n\n    def visit(self, url: str) -> None:\n        node = ListNode(url)\n        node.prev = self.root\n        self.root.next = node\n        self.root = self.root.__next__\n\n    def back(self, steps: int) -> str:\n        while steps and self.root.prev:\n            self.root = self.root.prev\n            steps -= 1\n        return self.root.val\n            \n    def forward(self, steps: int) -> str:\n        while steps and self.root.__next__:\n            self.root = self.root.__next__\n            steps -= 1\n        return self.root.val\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.curr = homepage\n        self.backw = []\n        self.forw = []\n        \n\n    def visit(self, url: str) -> None:\n        self.backw.append(self.curr)\n        self.forw = []\n        self.curr = url\n\n    def back(self, steps: int) -> str:\n        for _ in range(steps):\n            if not self.backw: break\n            self.forw.append(self.curr)\n            self.curr = self.backw.pop()\n        return self.curr\n        \n    def forward(self, steps: int) -> str:\n        for _ in range(steps):\n            if not self.forw: break\n            self.backw.append(self.curr)\n            self.curr = self.forw.pop()\n        return self.curr\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.before = [homepage] \n        self.after = []\n\n    def visit(self, url: str) -> None:\n        self.before.append(url)\n        self.after = []\n\n    def back(self, steps: int) -> str:\n        while steps > 0 and len(self.before) > 1:\n            self.after.append(self.before[-1])\n            self.before.pop()\n            steps -= 1\n        return self.before[-1]\n        \n    def forward(self, steps: int) -> str:\n        while steps > 0 and self.after:\n            self.before.append(self.after[-1])\n            self.after.pop()\n            steps -= 1\n        return self.before[-1]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.curr_page = homepage\n        self.prev_pages = []\n        self.next_pages = []\n\n    def __str__(self):\n        return \\\"{0}-{1}-{2}\\\".format(self.prev_pages, self.curr_page, self.next_pages[::-1])\n        \n    def visit(self, url: str) -> None:\n        self.prev_pages.append(self.curr_page)\n        self.curr_page = url\n        self.next_pages = []\n\n    def back(self, steps: int) -> str:\n        counter = min(steps, len(self.prev_pages))\n    \n        while counter > 0:\n            self.next_pages.append(self.curr_page)\n            self.curr_page = self.prev_pages.pop(-1)\n            counter -= 1\n        return self.curr_page\n        \n    def forward(self, steps: int) -> str:\n        counter = min(steps, len(self.next_pages))\n        \n        while counter > 0:\n            self.prev_pages.append(self.curr_page)\n            self.curr_page = self.next_pages.pop(-1)\n            counter -= 1\n        return self.curr_page\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.backwardStack = [homepage]\n        self.forwardStack = []\n        \n    def visit(self, url: str) -> None:\n        self.backwardStack.append(url)\n        self.forwardStack.clear()\n        \n    def back(self, steps: int) -> str:\n        while len(self.backwardStack)>=2 and steps > 0:\n            top = self.backwardStack.pop()\n            self.forwardStack.append(top)\n            steps -= 1\n        return self.backwardStack[-1]\n\n    def forward(self, steps: int) -> str:\n        while steps > 0 and len(self.forwardStack)>0:\n            top = self.forwardStack.pop()\n            self.backwardStack.append(top)\n            steps -= 1 \n        return self.backwardStack[-1]\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n\n#   def __init__(self, homepage: str):\n#         self.back_stack = [homepage]\n#         self.forward_stack = []\n\n#     def visit(self, url: str) -> None:\n#         self.forward_stack.clear() \n#         self.back_stack.append(url)\n\n#     def back(self, steps: int) -> str:\n#         while len(self.back_stack) >= 2 and steps > 0:\n#             top = self.back_stack.pop()\n#             self.forward_stack.append(top)\n#             steps -= 1\n#         return self.back_stack[-1]\n\n#     def forward(self, steps: int) -> str:\n#         while len(self.forward_stack) > 0 and steps > 0:\n#             top = self.forward_stack.pop()\n#             self.back_stack.append(top)\n#             steps -= 1\n#         return self.back_stack[-1]\n", "class Node: \n    def __init__(self,data): \n        self.next = None # reference to next node in DLL \n        self.prev = None # reference to previous node in DLL \n        self.data = data \n\n\nclass BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.head=Node(homepage)\n        self.head.next=None\n        self.head.prev=None\n        self.curr=self.head\n        \n\n    def visit(self, url: str) -> None:\n        node=Node(url)\n        self.curr.next=node\n        node.prev=self.curr\n        self.curr=node\n        \n        \n    def back(self, steps: int) -> str:\n        count=0\n        while (count<steps and self.curr.prev!=None):\n            self.curr=self.curr.prev\n            count+=1\n        \n        return self.curr.data\n\n    def forward(self, steps: int) -> str:\n        count=0\n        while (count<steps and self.curr.__next__!=None):\n            self.curr=self.curr.__next__\n            count+=1\n        \n        return self.curr.data\n    \n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "# O(1) time and O(n) space, use a list\nclass BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.urls = []\n        self.urls.append(homepage)\n        self.i = 0\n        self.bound = 0\n        \n\n    def visit(self, url: str) -> None:\n        self.urls.append(url)\n        self.i += 1\n        if self.i == len(self.urls):\n            self.urls.append(url)\n        else:\n            self.urls[self.i] = url\n        self.bound = self.i\n\n        \n\n    def back(self, steps: int) -> str:\n        self.i = max(0, self.i-steps)\n        return self.urls[self.i]\n\n    def forward(self, steps: int) -> str:\n        self.i = min(self.bound, self.i+steps)\n        return self.urls[self.i]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        '''\n        Initializes the object with the homepage of the browser.\n        :type homepage: str\n        '''\n        self.history = [homepage]\n        self.forward_pages = []\n\n\n    def visit(self, url):\n        '''\n        Visits url from the current page.\n        It clears up all the future history.\n        :type url: str\n        :rtype: None\n        '''\n        self.history.append(url)\n        self.forward_pages = []\n\n\n    def back(self, steps):\n        '''\n        Move steps back in history.\n        :type steps: int\n        :rtype: str\n        '''\n        while steps > 0 and len(self.history) > 1:\n            self.forward_pages.append(self.history.pop())\n            steps -= 1\n        return self.history[-1]\n\n\n    def forward(self, steps):\n        '''\n        Move steps future in history.\n        :type steps: int\n        :rtype: str\n        '''\n        while steps > 0 and self.forward_pages:\n            self.history.append(self.forward_pages.pop())\n            steps -= 1\n        return self.history[-1]\n", "class BiLinkedNode:\n    def __init__(self, val: str):\n        self.val = val\n        self.next = None\n        self.prev = None\n\nclass BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.currPage = BiLinkedNode(homepage)\n        self.browseListLen = 1\n        self.currPageIdx = 0\n\n    def visit(self, url: str) -> None:\n        newPage = BiLinkedNode(url)\n        newPage.prev = self.currPage\n        self.currPage.next = newPage\n        self.currPage = newPage\n        self.currPageIdx += 1\n        self.browseListLen = self.currPageIdx + 1\n        # print (\\\"visit\\\", self.currPage.val)\n        \n    def back(self, steps: int) -> str:\n        while self.currPageIdx > 0 and steps > 0:\n            self.currPage = self.currPage.prev\n            self.currPageIdx -= 1\n            steps -= 1\n        # print (\\\"back\\\", self.currPage.val)\n        return self.currPage.val\n\n    def forward(self, steps: int) -> str:\n        while self.currPageIdx < self.browseListLen - 1 and steps > 0:\n            self.currPage = self.currPage.__next__\n            self.currPageIdx += 1\n            steps -= 1\n        \n        # print (\\\"forward\\\", self.currPage.val)\n        \n        return self.currPage.val\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class Node:\n    def __init__(self, url):\n        self.prev = None\n        self.next = None\n        self.url = url\n\n\nclass BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.head = Node(\\\"head\\\")\n        self.tail = Node(\\\"tail\\\")\n        self.current = Node(homepage)\n        self.current.prev = self.head\n        self.current.next = self.tail\n        self.head.next = self.current\n        self.tail.prev = self.current\n        \n        \n\n    def visit(self, url: str) -> None:\n        if self.current.next != self.tail:\n            # in the middle of the history\n            p = self.current.next\n            prev = None\n            while p and p != self.tail:\n                prev = p\n                if prev:\n                    del(prev)\n                p = p.next\n        new = Node(url)\n        self.current.next = new\n        new.prev = self.current\n        \n        new.next = self.tail\n        self.tail.prev = new\n        self.current = self.current.next\n        return\n        \n\n    def back(self, steps: int) -> str:\n        while self.current.prev != self.head and steps > 0:\n            self.current = self.current.prev\n            steps -= 1\n        return self.current.url\n            \n\n    def forward(self, steps: int) -> str:\n        print(self.current.url, steps)\n        while self.current.next != self.tail and steps > 0:\n            self.current = self.current.next\n            steps -= 1\n        return self.current.url\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.history = []\n        self.forwardHistory = []\n        self.curr = homepage\n        \n\n    def visit(self, url: str) -> None:\n        self.history.append(self.curr)\n        self.curr = url\n        self.forwardHistory = []\n        \n\n    def back(self, steps: int) -> str:\n        if not self.history:\n            return self.curr\n        \n        left = steps\n        url = None\n        while left and self.history:\n            url = self.history.pop()\n            left -= 1\n            self.forwardHistory.append(self.curr)\n            self.curr = url\n            \n        return url\n\n    def forward(self, steps: int) -> str:\n        if not self.forwardHistory:\n            return self.curr\n        \n        left = steps\n        url = None\n        while left and self.forwardHistory:\n            url = self.forwardHistory.pop()\n            left -= 1\n            self.history.append(self.curr)\n            self.curr = url\n            \n        return url\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        \n        self.list1 = [homepage]\n        self.currentInd = 0\n        \n        \n\n    def visit(self, url: str) -> None:\n        newList = self.list1[0:self.currentInd+1]\n        newList.append(url)\n        self.currentInd+=1\n        self.list1=newList\n        print((self.list1,self.currentInd))\n        \n\n    def back(self, steps: int) -> str:\n        \n        while self.currentInd >0 and steps > 0:\n            self.currentInd-=1\n            steps -=1\n        return self.list1[self.currentInd]\n        \n        \n        \n\n    def forward(self, steps: int) -> str:\n         while self.currentInd <len(self.list1)-1 and steps > 0:\n            self.currentInd+=1\n            steps -=1\n         print((self.list1[self.currentInd],self.currentInd))\n         return self.list1[self.currentInd]\n        \n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.curIndex = 0\n        self.history = [homepage]\n        \n    def visit(self, url: str) -> None:\n        self.history = self.history[:self.curIndex + 1]\n        self.history.append(url)\n        self.curIndex += 1\n\n    def back(self, steps: int) -> str:\n        self.curIndex = max(0, self.curIndex - steps)\n        return self.history[self.curIndex]\n\n    def forward(self, steps: int) -> str:\n        self.curIndex = min(len(self.history) - 1, self.curIndex + steps)\n        return self.history[self.curIndex]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.back_stack = []\n        self.front_stack = []\n        self.curr = homepage\n\n    def visit(self, url: str) -> None:\n        self.front_stack = []\n        self.back_stack.append(self.curr)\n        self.curr = url\n\n    def back(self, steps: int) -> str:\n        for i in range(steps):\n            if len(self.back_stack) == 0:\n                return self.curr\n            ans = self.back_stack.pop()\n            self.front_stack.append(self.curr)\n            self.curr = ans\n        return ans\n\n    def forward(self, steps: int) -> str:\n        for i in range(steps):\n            if len(self.front_stack) == 0:\n                return self.curr\n            ans = self.front_stack.pop()\n            self.back_stack.append(self.curr)\n            self.curr = ans\n        return ans\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.history=[]\n        self.future=[]\n        self.history.append(homepage)\n        \n\n    def visit(self, url: str) -> None:\n        self.history.append(url)\n        self.future=[]\n        \n\n    def back(self, steps: int) -> str:\n        while steps>0 and len(self.history)>1:\n            self.future.append(self.history[-1])\n            self.history.pop()\n            steps-=1\n        return self.history[-1]\n        \n\n    def forward(self, steps: int) -> str:\n        while steps>0 and len(self.future)>0:\n            self.history.append(self.future[-1])\n            self.future.pop()\n            steps-=1\n        return self.history[-1]\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n      self.history_ = [homepage]\n      self.count_ = 1\n\n    def visit(self, url: str) -> None:\n      self.history_ = self.history_[:self.count_]\n      self.history_.append(url)\n      self.count_ += 1\n        \n\n    def back(self, steps: int) -> str:\n      if steps < self.count_:\n        self.count_ -= steps\n        return self.history_[self.count_-1]\n      else:\n        self.count_ = 1\n        return self.history_[self.count_-1]\n        \n\n    def forward(self, steps: int) -> str:\n      if steps <= len(self.history_) - self.count_:\n        self.count_ += steps\n        return self.history_[self.count_ - 1]\n      else:\n        self.count_ = len(self.history_)\n        return self.history_[-1]\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.ls = []\n        self.ls.append(homepage)\n        self.hm = {}\n        self.cur = 0\n\n    def visit(self, url: str) -> None:\n        self.ls = self.ls[:self.cur+1]\n        self.ls.append(url)\n        self.cur = len(self.ls) - 1\n\n    def back(self, steps: int) -> str:\n        if steps > self.cur:\n            self.cur = 0\n            return self.ls[0]\n        self.cur -= steps\n        return self.ls[self.cur]\n\n    def forward(self, steps: int) -> str:\n        if steps > len(self.ls) - self.cur - 1:\n            self.cur = len(self.ls) - 1\n            return self.ls[self.cur]\n        self.cur += steps\n        return self.ls[self.cur]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        \\\"\\\"\\\"\n        :type homepage: str\n        \\\"\\\"\\\"\n        self.history = [homepage]\n        self.index = 0\n        \n\n    def visit(self, url):\n        \\\"\\\"\\\"\n        :type url: str\n        :rtype: None\n        \\\"\\\"\\\"\n        self.history = self.history[:self.index + 1]\n        self.history.append(url)\n        self.index = len(self.history) - 1\n        \n\n    def back(self, steps):\n        \\\"\\\"\\\"\n        :type steps: int\n        :rtype: str\n        \\\"\\\"\\\"\n        self.index = max(0, self.index - steps)\n        return self.history[self.index]\n        \n\n    def forward(self, steps):\n        \\\"\\\"\\\"\n        :type steps: int\n        :rtype: str\n        \\\"\\\"\\\"\n        self.index = min(len(self.history) - 1, self.index + steps)\n        return self.history[self.index]    \n\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.ls=[homepage]\n        self.cur=0\n\n    def visit(self, url: str) -> None:\n        last=len(self.ls)-1\n        while last!=self.cur:\n            self.ls.pop()\n            last-=1\n        self.ls.append(url)\n        self.cur=len(self.ls)-1\n\n    def back(self, steps: int) -> str:\n        while steps!=0 and self.cur>0:\n            self.cur-=1\n            steps-=1\n        return self.ls[self.cur]\n\n    def forward(self, steps: int) -> str:\n        while steps!=0 and self.cur<len(self.ls)-1:\n            self.cur+=1\n            steps-=1\n        return self.ls[self.cur]\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class Node:\n    def __init__(self, url):\n        self.prev = None\n        self.next = None\n        self.url = url\n\n\nclass BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.head = Node(\\\"head\\\")\n        self.tail = Node(\\\"tail\\\")\n        self.current = Node(homepage)\n        self.current.prev = self.head\n        self.current.next = self.tail\n        self.head.next = self.current\n        self.tail.prev = self.current\n        \n\n    def visit(self, url: str) -> None:\n\n        new = Node(url)\n        self.current.next = new\n        new.prev = self.current\n        \n        new.next = self.tail\n        self.tail.prev = new\n        self.current = self.current.next\n        return\n        \n\n    def back(self, steps: int) -> str:\n        while self.current.prev != self.head and steps > 0:\n            self.current = self.current.prev\n            steps -= 1\n        return self.current.url\n            \n\n    def forward(self, steps: int) -> str:\n        print(self.current.url, steps)\n        while self.current.next != self.tail and steps > 0:\n            self.current = self.current.next\n            steps -= 1\n        return self.current.url\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.l = [homepage]\n        self.curr = 0\n\n    def visit(self, url: str) -> None:\n        if self.curr == len(self.l)-1:\n            self.l.append(url)\n            self.curr += 1\n        else:\n            while self.curr < len(self.l)-1:\n                self.l.pop()\n            self.l.append(url)\n            self.curr += 1\n\n    def back(self, steps: int) -> str:\n        # print(self.l, self.curr, steps)\n        if self.curr - steps < 0:\n            self.curr = 0\n            return self.l[0]\n        self.curr -= steps\n        return self.l[self.curr]\n\n    def forward(self, steps: int) -> str:\n        if self.curr + steps >= len(self.l):\n            self.curr = len(self.l)-1\n            return self.l[-1]\n        self.curr += steps\n        return self.l[self.curr]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "from collections import deque\nclass BrowserHistory:\n    \n    def __init__(self, homepage: str):\n        self.history = deque()\n        self.future = deque()\n        self.history.append(homepage)\n\n    def visit(self, url: str) -> None:\n        self.history.append(url)\n        if self.future:\n            self.future = deque()\n\n    def back(self, steps: int) -> str:\n        # print(\\\"back\\\")\n        for i in range(steps):\n            if len(self.history)>1:\n                self.future.append(self.history.pop())\n        # print(self.history,self.future )\n        return self.history[-1] \n\n    def forward(self, steps: int) -> str:\n        # print(\\\"forward\\\")\n        for i in range(steps):\n            if self.future:\n                self.history.append(self.future.pop())\n        # print(self.history,self.future)\n        return self.history[-1]\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.history = []\n        self.future = []\n        self.history.append(homepage)\n        \n    def visit(self, url: str) -> None:\n        self.history.append(url)\n        self.future = []\n        \n    def back(self, steps: int) -> str:\n        while steps > 0 and len(self.history) > 1:\n            self.future.append(self.history.pop())\n            steps -= 1\n        return self.history[-1]\n\n    def forward(self, steps: int) -> str:\n        while steps > 0 and self.future:\n            self.history.append(self.future.pop())\n            steps -= 1\n        return self.history[-1]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n\n", "class BrowserHistory:\n    curr = None;\n    backHistory = 0;\n    forwardHistory = 0;\n\n    def __init__(self, homepage: str):\n        self.curr = Node(homepage)\n\n    def visit(self, url: str) -> None:\n        # break forward history\n        self.forwardHistory = 0\n        self.curr.next = Node(url)\n        self.curr.next.prev = self.curr\n        self.backHistory += 1\n        self.curr = self.curr.__next__\n\n    def back(self, steps: int) -> str:\n        while steps > 0 and self.curr.prev:\n            self.curr = self.curr.prev\n            self.forwardHistory += 1\n            self.backHistory -= 1\n            steps -= 1\n        return self.curr.url\n        \n\n    def forward(self, steps: int) -> str:\n        while steps > 0 and self.curr.__next__:\n            self.curr = self.curr.__next__\n            self.forwardHistory -= 1\n            self.backHistory += 1\n            steps -= 1\n        return self.curr.url\n\nclass Node:\n    url = None;\n    prev = None;\n    next = None;\n    \n    def __init__(self, url: str):\n        self.url = url\n        self.prev = None\n        self.next = None\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n    def __init__(self, homepage: str):\n        self.history = [homepage]\n        self.index = 0\n\n    def visit(self, url: str) -> None:\n        self.history = self.history[:self.index+1] + [url]\n        self.index = len(self.history) - 1\n\n    def back(self, steps: int) -> str:\n        self.index = max(0, self.index - steps)\n        return self.history[self.index]\n\n    def forward(self, steps: int) -> str:\n        self.index = min(len(self.history) - 1, self.index + steps)\n        return self.history[self.index]\n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "\\\"\\\"\\\"\n\u91cd\u5199\u800c\u4e0d\u662fpop\n\u7528\u4e00\u4e2asize \u8bb0\u5f55\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u91cd\u65b0visit \u65e7\u7684forward history\n\n\\\"\\\"\\\"\nclass BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.page_stack = []\n        self.cur_idx = None\n        self.visit(homepage)\n        \n\n    def visit(self, url: str) -> None:\n        \n        if self.cur_idx== None:\n             self.cur_idx = 0  \n            \n        else:\n            while len(self.page_stack) > self.cur_idx + 1:\n                self.page_stack.pop()\n            self.cur_idx += 1\n             \n        self.page_stack.append(url)\n   #    print(self.page_stack)\n\n    def back(self, steps: int) -> str:\n        new_idx = max(0, self.cur_idx - steps)\n      #  print(\\\"b\\\",self.cur_idx,new_idx,self.page_stack)\n\n        self.cur_idx = new_idx\n        return self.page_stack[self.cur_idx]\n        \n\n    def forward(self, steps: int) -> str:\n        new_idx = min(len(self.page_stack)-1, self.cur_idx + steps)\n        self.cur_idx = new_idx\n        return self.page_stack[self.cur_idx]\n        \n\n ", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.history=[homepage]\n        self.curr=0\n\n    def visit(self, url: str) -> None:\n        self.curr+=1\n        while self.curr<len(self.history):\n            self.history.pop()\n        self.history.append(url)\n        \n    def back(self, steps: int) -> str:\n        self.curr=max(0,self.curr-steps)\n        return self.history[self.curr]\n        \n\n    def forward(self, steps: int) -> str:\n        self.curr=min(len(self.history)-1,self.curr+steps)\n        return self.history[self.curr]\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.history = [homepage]\n        self.current = 0\n\n    def visit(self, url: str) -> None:\n        self.history = self.history[:self.current+1]\n        self.history.append(url)\n        self.current = len(self.history)-1\n\n    def back(self, steps: int) -> str:\n        ex = max(self.current - steps, 0)\n        self.current = ex\n        return self.history[ex]\n\n    def forward(self, steps: int) -> str:\n        if self.current + steps < len(self.history)-1:\n            self.current += steps\n        else:\n            self.current = len(self.history)-1\n        return self.history[self.current]\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)\n", "\\\"\\\"\\\"\n\n[\\\"google\\\", \\\"facebook\\\", \\\"youtube\\\"]\ncur = 0\nlength = 3\n\n\n[\\\"google\\\", \\\"linkedin\\\"]\ncur = 1\nlength = 2\n\nif cur == length - 1:\n    add one more element\nelse:\n    replace the next element\n\nDetails \nInput\n[\\\"google\\\", \\\"linkedin\\\"]\ncur = 1\n\n[\\\"BrowserHistory\\\",\\\"visit\\\",     \\\"visit\\\",\\\"back\\\",\\\"visit\\\",    \\\"forward\\\",\\\"visit\\\",     \\\"visit\\\",  \\\"forward\\\",\\\"visit\\\",\\\"back\\\",\\\"visit\\\",\\\"visit\\\",\\\"forward\\\"]\n[[\\\"esgriv.com\\\"],[\\\"cgrt.com\\\"],[\\\"tip.com\\\"],[9],[\\\"kttzxgh.com\\\"],[7],[\\\"crqje.com\\\"],[\\\"iybch.com\\\"],[5],   [\\\"uun.com\\\"],[10],[\\\"hci.com\\\"],[\\\"whula.com\\\"],[10]]\n[null,              null,      null, \\\"esgriv.com\\\",null,  \\\"kttzxgh.com\\\",null,       null,   \\\"crqje.com\\\",null,\\\"esgriv.com\\\",null,null,\\\"tip.com\\\"]\n[null,               null,     null, \\\"esgriv.com\\\",null,  \\\"kttzxgh.com\\\",null,        null,  \\\"iybch.com\\\",null,\\\"esgriv.com\\\",null,null,\\\"whula.com\\\"]\n[\\\"esgriv.com\\\",\\\"kttgzxgh.com\\\", \\\"tip.com\\\"]\n                 cur\n                               length \n\n\\\"\\\"\\\"\n\nclass BrowserHistory:\n\n    def __init__(self, homepage: str):\n        self.history = [homepage] \n        self.cur = 0\n        self.length = 1\n\n    def visit(self, url: str) -> None:\n        # append if needed\n        self.cur += 1\n        if self.cur == len(self.history):\n            self.history.append(url)\n        else:\n            self.history[self.cur] = url\n        self.length = self.cur + 1\n\n    def back(self, steps: int) -> str:\n        self.cur = max(0, self.cur - steps)\n        return self.history[self.cur]\n        \n\n    def forward(self, steps: int) -> str:\n        self.cur = min(self.length - 1, self.cur + steps)\n        return self.history[self.cur]\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)"]