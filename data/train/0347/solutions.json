["class Solution:\n     def checkInclusion(self, s1, s2):\n         \"\"\"\n         :type s1: str\n         :type s2: str\n         :rtype: bool\n         \"\"\"\n         if len(s2) < len(s1):\n             return False\n         c1 = [0] * 128\n         n = 0\n         for i in s1:\n             c = ord(i)\n             if c1[c] == 0: n += 1\n             c1[c] += 1\n         for i in range(len(s1)):\n             c = ord(s2[i])\n             c1[c] -= 1\n             if not c1[c]: n -= 1\n         if not n: return True\n         for i in range(len(s2) - len(s1)):\n             c = ord(s2[i])\n             if not c1[c]: n += 1\n             c1[c] += 1\n             c = ord(s2[i + len(s1)])\n             c1[c] -= 1\n             if not c1[c]:\n                 n -= 1\n                 if not n: return True\n         return False", "class Solution:\n     def checkInclusion(self, s1, s2):\n         \"\"\"\n         :type s1: str\n         :type s2: str\n         :rtype: bool\n         \"\"\"\n         l1, l2 = len(s1), len(s2)\n         c1 = [0] * 128\n         n = 0\n         for i in s1:\n             c = ord(i)\n             if c1[c] == 0: n += 1\n             c1[c] += 1\n         for i in range(l2):\n             j = i - l1\n             if j >= 0:\n                 c = ord(s2[j])\n                 if not c1[c]: n += 1\n                 c1[c] += 1\n             c = ord(s2[i])\n             c1[c] -= 1\n             if not c1[c]:\n                 n -= 1\n                 if not n: return True\n         return False", "class Solution:\n     def checkInclusion(self, s1, s2):\n         \"\"\"\n         :type s1: str\n         :type s2: str\n         :rtype: bool\n         \"\"\"\n         \n         if len(s2) < len(s1): return False\n         counter = collections.defaultdict(int)\n         for c in s1: counter[c] += 1\n         \n         seen = collections.defaultdict(int)\n         \n         for i in range(len(s1)-1):\n             seen[s2[i]] += 1\n \n         right = len(s1)-1\n         while right < len(s2):\n             seen[s2[right]] += 1\n             if seen == counter: return True\n             right += 1\n             left = right - len(s1)\n             seen[s2[left]] -= 1\n             if seen[s2[left]] == 0: del seen[s2[left]]\n                 \n         return False\n             \n", "class Solution:\n     def checkInclusion(self, s1, s2):\n         \"\"\"\n         :type s1: str\n         :type s2: str\n         :rtype: bool\n         \"\"\"\n         length_1 = len(s1)\n         length_2 = len(s2)\n         if length_1 > length_2:\n             return False\n         S1_MAP = [0] * 128  # size of ASCII table\n         S2_MAP = [0] * 128\n         \n         # Initialise MAP S1\n         \n         for char in s1:\n             S1_MAP[ord(char)] += 1\n         index = 0\n         while index < length_1 -1:\n             S2_MAP[ord(s2[index])] += 1\n             index += 1\n         while index < length_2:\n             S2_MAP[ord(s2[index])] += 1\n             if index >= length_1:\n                 S2_MAP[ord(s2[index-length_1])] -= 1\n             if S1_MAP == S2_MAP:\n                 return True\n             index += 1\n         return False"]