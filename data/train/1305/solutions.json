["res = []\nfor _ in range(int(input())):\n lst = []\n flag = 0\n n = int(input())\n for i in range(n):\n  lst.append(list(map(int, input().split())))\n for i in lst:\n  for j in range(n-1):\n   if i[j] == i[j+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n for i in range(n-1):\n  for j in range(n):\n   if lst[i][j] == lst[i+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n if flag == 0:\n  res.append(\"SAFE\")\nfor i in res:\n print(i)\n", "T = int(input())\n\nfor t in range(T):\n\n N = int(input())\n\n l = []\n\n for i in range(N):\n  l.append(list(map(int,input().split())))\n \n flg = True\n \n for i in range(N):\n  for j in range(1,N):\n   if l[i][j] == l[i][j-1] and l[i][j] == 1:\n    flg = False\n    break \n  if flg == False:\n   break\n \n if flg == False:\n  print('UNSAFE')\n else:\n  for i in range(1,N):\n   for j in range(N):\n    if l[i][j] == l[i-1][j] and l[i][j] == 1:\n     flg = False\n     break\n   if flg == False:\n    break\n  if flg == False:\n   print('UNSAFE')\n  else:\n   print('SAFE')", "for _ in range(int(input())):\n n=int(input());l = [];f=0\n while not l or len(l) < len(l[0]):\n  l.append(list(map(int, input().split())))\n a=sum(l, [])\n b = [i for i in range(len(a)) if a[i] ==1]\n for j in range(len(b)-1):\n  if b[j+1]-b[j]==1:\n   f=1;print(\"UNSAFE\");break\n if f != 1:\n  print(\"SAFE\")", "res = []\nfor _ in range(int(input())):\n lst = []\n flag = 0\n n = int(input())\n for i in range(n):\n  lst.append(list(map(int, input().split())))\n for i in lst:\n  for j in range(n-1):\n   if i[j] == i[j+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n for i in range(n-1):\n  for j in range(n):\n   if lst[i][j] == lst[i+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n if flag == 0:\n  res.append(\"SAFE\")\nfor i in res:\n print(i)\n", "# cook your dish here\nt=int(input())\nfor i in range(t):\n b=int(input())\n g=[]\n for i in range(b):\n  s=[]\n  l=list(map(int,input().split()))\n  for i in range(len(l)):\n   if(l[i]==1):\n    s.append(i)\n  if(len(s)==1):\n   g.append(\"SAFE\")\n  else:\n   for i in range(len(s)-1):\n    if(s[i+1]-s[i]>=2):\n     g.append(\"SAFE\")\n    else:\n     g.append(\"UNSAFE\")\n if \"UNSAFE\" in g:\n  print(\"UNSAFE\")\n else:\n  print(\"SAFE\")", "res = []\nfor _ in range(int(input())):\n lst = []\n flag = 0\n n = int(input())\n for i in range(n):\n  lst.append(list(map(int, input().split())))\n for i in lst:\n  for j in range(n-1):\n   if i[j] == i[j+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n for i in range(n-1):\n  for j in range(n):\n   if lst[i][j] == lst[i+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n if flag == 0:\n  res.append(\"SAFE\")\nfor i in res:\n print(i)\n", "res = []\nfor _ in range(int(input())):\n lst = []\n flag = 0\n n = int(input())\n for i in range(n):\n  lst.append(list(map(int, input().split())))\n for i in lst:\n  for j in range(n-1):\n   if i[j] == i[j+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n for i in range(n-1):\n  for j in range(n):\n   if lst[i][j] == lst[i+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n if flag == 0:\n  res.append(\"SAFE\")\nfor i in res:\n print(i)\n", "res = []\nfor _ in range(int(input())):\n lst = []\n flag = 0\n n = int(input())\n for i in range(n):\n  lst.append(list(map(int, input().split())))\n for i in lst:\n  for j in range(n-1):\n   if i[j] == i[j+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n for i in range(n-1):\n  for j in range(n):\n   if lst[i][j] == lst[i+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n if flag == 0:\n  res.append(\"SAFE\")\nfor i in res:\n print(i)\n", "for _ in range(int(input())):\n n = int(input())\n ar = [[0]*n]*n\n for i in range(n):\n  ar[i] = list(map(int, input().split()))\n flag = 1\n for r in range(n-1):\n  for c in range(n-1):\n   if ar[r][c]==1 :\n    if ar[r][c+1]==1:\n     flag = 0\n     break\n    elif ar[r+1][c]==1:\n     flag = 0\n     break\n if flag==1:\n  print(\"SAFE\")\n else:\n  print(\"UNSAFE\")", "res = []\nfor _ in range(int(input())):\n lst = []\n flag = 0\n n = int(input())\n for i in range(n):\n  lst.append(list(map(int, input().split())))\n for i in lst:\n  for j in range(n-1):\n   if i[j] == i[j+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n for i in range(n-1):\n  for j in range(n):\n   if lst[i][j] == lst[i+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n if flag == 0:\n  res.append(\"SAFE\")\nfor i in res:\n print(i)\n", "# cook your dish here\ntry:\n t=int(input())\n for i in range(t):\n  rc=int(input())\n  matr=[]\n  flag=0\n  for i in range(rc):\n   matr.append(list(map(int,input().split())))\n #    print(matr)\n  for i in range(rc-1):\n   for j in range(rc-1):\n    if(matr[i][j]==1):\n     if(matr[i+1][j]==1 or matr[i][j+1]==1):\n      flag=1\n      break\n    if(flag==1):\n     break\n  if(flag==1):\n   print(\"UNSAFE\")\n  else:\n   print(\"SAFE\")\nexcept:\n pass\n", "t=int(input())\nfor _ in range(t):\n n=int(input())\n cnt=0\n arr = [[0 for j in range(n)] for i in range(n)]\n for i in range(n):\n  l=list(map(int,input().split()))\n  arr.insert(i,l)\n  arr.pop()\n for i in range(n-1):\n  for j in range(n-1):\n   if arr[i][j]==arr[i][j+1]:\n    if arr[i][j+1]==1:\n     cnt=1\n     break\n   elif arr[i][j]==arr[i+1][j]:\n    if arr[i+1][j]==1:\n     cnt=1\n     break\n if cnt==0:\n  print(\"SAFE\")\n else:\n  print(\"UNSAFE\")", "res = []\nfor _ in range(int(input())):\n lst = []\n flag = 0\n n = int(input())\n for i in range(n):\n  lst.append(list(map(int, input().split())))\n for i in lst:\n  for j in range(n-1):\n   if i[j] == i[j+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n for i in range(n-1):\n  for j in range(n):\n   if lst[i][j] == lst[i+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n if flag == 0:\n  res.append(\"SAFE\")\nfor i in res:\n print(i)\n", "for ts in range(int(input())):\n N=int(input())\n l = []\n f=1\n while not l or len(l) < len(l[0]):\n  l.append(list(map(int, input().split())))\n p=sum(l, [])\n k = [i for i in range(len(p)) if p[i] ==1]\n for j in range(len(k)-1):\n  if k[j+1]-k[j]==1:\n   f=0\n   break\n if f==0:\n  print(\"UNSAFE\")\n else:\n  print(\"SAFE\")", "res = []\nfor _ in range(int(input())):\n lst = []\n flag = 0\n n = int(input())\n for i in range(n):\n  lst.append(list(map(int, input().split())))\n for i in lst:\n  for j in range(n-1):\n   if i[j] == i[j+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n for i in range(n-1):\n  for j in range(n):\n   if lst[i][j] == lst[i+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n if flag == 0:\n  res.append(\"SAFE\")\nfor i in res:\n print(i)\n", "# cook your dish here\ntry:\n for i in range(int(input())):\n  n=int(input())\n  li=[]\n  for j in range(n):\n   li.append(list(map(int,input().split())))\n  x=0\n  for k in range(n):\n   for j in range(n):\n    if(k!=n-1 and j!=n-1):\n     if(li[k][j]==1):\n      if(li[k][j+1]==1 or li[k+1][j]==1):\n       #print(k,' ',j,' ','1')\n       x=1\n       break\n       \n    elif(j==n-1 and k!=n-1):\n     if(li[k][j]==1):\n      if(li[k+1][j]==1):\n       x=1\n       #print(k,' ',j,' ','2')\n       break\n    elif(k==n-1 and j!=n-1):\n     if(li[k][j]==1):\n      if(li[k][j+1]==1):\n       x=1\n       #print(k,' ',j,' ','3')\n       break\n   if(x==1):\n    print('UNSAFE')\n    break\n  if(x==0):\n   print('SAFE')\n   \nexcept:\n pass\n", "try:\n t=int(input())\n for i in range(t):\n  rc=int(input())\n  matr=[]\n  flag=0\n  for i in range(rc):\n   matr.append(list(map(int,input().split())))\n #    print(matr)\n  for i in range(rc-1):\n   for j in range(rc-1):\n    if(matr[i][j]==1):\n     if(matr[i+1][j]==1 or matr[i][j+1]==1):\n      flag=1\n      break\n    if(flag==1):\n     break\n  if(flag==1):\n   print(\"UNSAFE\")\n  else:\n   print(\"SAFE\")\nexcept:\n pass\n", "# cook your dish here\nt = int(input())\n\nfor xx in range(t):\n n = int(input()) \n \n A = []\n \n for i in range(n):\n  A.append([int(x) for x in input().split()])\n \n check = 0\n for i in range(n):\n  for j in range(n):\n   if A[i][j] == 1:\n    if i < n - 1 and A[i + 1][j] == 1:\n     check = 1\n     break\n    elif j < n - 1 and A[i][j + 1] == 1:\n     check = 1\n     break\n  if check == 1:\n   break\n \n if check == 0:\n  print(\"SAFE\")\n else:\n  print(\"UNSAFE\")", "res = []\nfor _ in range(int(input())):\n lst = []\n flag = 0\n n = int(input())\n for i in range(n):\n  lst.append(list(map(int, input().split())))\n for i in lst:\n  for j in range(n-1):\n   if i[j] == i[j+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n for i in range(n-1):\n  for j in range(n):\n   if lst[i][j] == lst[i+1] == 1:\n    res.append(\"UNSAFE\")\n    flag = 1\n    break\n  if flag != 0:\n   break\n if flag == 0:\n  res.append(\"SAFE\")\nfor i in res:\n print(i)\n", "for _ in range(int(input())):\n n = int(input())\n a = []\n for i in range(n):\n  a.append(list(map(int,input().split())))\n flag=1\n for i in range(n-1):\n  for j in range(n-1):\n   if(a[i][j]==1):\n    if(a[i+1][j]==1 or a[i][j+1]==1):\n     flag = 0\n     break\n    else:\n     pass\n j = 0\n i = n-1\n while(j<n-1):\n  if(a[i][j]==1):\n   if(a[i][j+1]==1):\n    flag = 0\n    break\n   else:\n    pass\n  j+=1\n i = 0\n j = n-1\n while(i<n-1):\n  if(a[i][j]==1):\n   if(a[i+1][j]==1):\n    flag = 0\n    break\n   else:\n    pass\n  i+=1\n if(flag==1):\n  print('SAFE')\n else:\n  print('UNSAFE')", "# cook your dish here\nT = int(input())\nfor t in range(T):\n N = int(input())\n mat = []\n for i in range(N):\n  mat.append(list(map(int, input().strip().split())))\n # print(mat)\n safe = True\n for i in range(N-1):\n  for j in range(N-1):\n   if mat[i][j] == 1:\n    if mat[i+1][j] == 1:\n     safe = False\n     break\n    if mat[i][j+1] == 1:\n     safe = False\n     break\n    # if mat[i-1][j] == 1:\n    #     safe = False\n    #     break\n    # if mat[i-1][j] == 1:\n    #     safe = False\n    #     break\n    \n  if not safe:\n   # print(\"UNSAFE\")\n   break\n if safe:\n  print(\"SAFE\")\n else:\n  print(\"UNSAFE\")\n     \n"]