["for _ in range(int(input())):\n n=int(input())\n a=[]\n b=[]\n for i in range(4*n-1):\n  c,d=list(map(int,input().split()))\n  a.append(c)\n  b.append(d)\n c1=0\n c2=0\n for i in a:\n  c1^=i\n for i in b:\n  c2^=i\n print(c1,c2)", "for _ in range(int(input())):\n n=int(input())\n n=n*4-1\n x=0\n y=0\n for z in range(n):\n  a,b=list(map(int,input().split()))\n  x^=a\n  y^=b\n print(x,y)\n", "for _ in range(int(input())):\n n=int(input())\n n=n*4-1\n xm=0\n y=0\n for z in range(n):\n  a,b=list(map(int,input().split()))\n  xm^=a\n  y^=b\n print(xm,y)\n", "# cook your dish here\nfor _ in range(int(input())):\n n=int(input())\n n=n*4-1\n x=0\n y=0\n for z in range(n):\n  a,b=list(map(int,input().split()))\n  x^=a\n  y^=b\n print(x,y)\n", "# cook your dish here\nfor _ in range(int(input())):\n n=int(input())\n n=n*4-1\n x=0\n y=0\n for z in range(n):\n  a,b=list(map(int,input().split()))\n  x^=a\n  y^=b\n print(x,y)\n", "# cook your dish here\nfor _ in range(int(input())):\n n=int(input())\n n=n*4-1\n x=0\n y=0\n for z in range(n):\n  a,b=list(map(int,input().split()))\n  x^=a\n  y^=b\n print(x,y)\n", "test_case = int(input())\nwhile test_case :\n n = int(input())\n xdict = {}\n ydict = {}\n total_points = 4*n-1\n for _ in range(total_points) :\n  x,y = map(int, input().split())\n  if x not in xdict :\n   xdict[x] = 1 \n  else:\n   xdict[x] += 1 \n  \n  if y not in ydict :\n   ydict[y] = 1 \n  else:\n   ydict[y] += 1 \n \n for key in xdict.keys() :\n  if xdict[key] % 2 != 0 :\n   print(key, end = ' ')\n   break\n for key in ydict.keys():\n  if ydict[key] % 2 != 0 :\n   print(key)\n   break\n \n test_case -= 1\n \n \n \n \n \n \n \n \n \n \n ", "test_case = int(input())\nwhile test_case :\n n = int(input())\n xdict = {}\n ydict = {}\n total_points = 4*n-1\n for _ in range(total_points) :\n  x,y = map(int, input().split())\n  if x not in xdict :\n   xdict[x] = 1 \n  else:\n   xdict[x] += 1 \n  \n  if y not in ydict :\n   ydict[y] = 1 \n  else:\n   ydict[y] += 1 \n \n for key in xdict.keys() :\n  if xdict[key] == 1 :\n   print(key, end = ' ')\n   break\n for key in ydict.keys():\n  if ydict[key] == 1 :\n   print(key)\n   break\n \n test_case -= 1\n \n \n \n \n \n \n \n \n \n \n ", "test_case = int(input())\nwhile test_case :\n n = int(input())\n points = []\n total_points = 4*n-1\n for _ in range(total_points) :\n  points.append(list(map(int, input().strip().split())))\n \n xor_x = 0\n xor_y = 0\n \n for p in points :\n  xor_x ^= p[0]\n  xor_y ^= p[1]\n \n print(xor_x,xor_y)\n \n test_case -= 1\n \n \n \n \n \n \n \n \n \n \n", "# cook your dish here\nfor _ in range(int(input())):\n n=int(input())\n x=[]\n y=[]\n k=4*n-1\n for i in range(k):\n  a,b=input().split()\n  x.append(a) \n  y.append(b)\n x.sort()\n y.sort()\n l=y[k-1]\n j=x[k-1]\n for i in range(0,k-1,2):\n  if x[i]!=x[i+1]:\n   j=x[i]\n   break\n for i in range(0,k-1,2):\n  if y[i]!=y[i+1]:\n   l=y[i]\n   break\n print(j,l)", "# cook your dish here\nfor _ in range(int(input())):\n n=int(input())\n x=[]\n y=[]\n k=4*n-1\n for i in range(k):\n  a,b=input().split()\n  if a in x:\n   x.remove(a)\n  else:\n   x.append(a) \n  \n  if b in y:\n   y.remove(b)\n  else:\n   y.append(b)\n print(x[0],y[0])", "# cook your dish here\nfor _ in range(int(input())):\n n=int(input())\n x=[]\n y=[]\n for i in range(4*n-1):\n  a,b=input().split()\n  if a in x:\n   x.remove(a)\n  else:\n   x.append(a) \n  \n  if b in y:\n   y.remove(b)\n  else:\n   y.append(b)\n print(x[0],y[0])", "T=int(input())\nfor i in range(T):\n N=int(input())\n xcord={}\n ycord={}\n for i in range(4*N-1):\n  x,y=list(map(int,input().split()))\n  xcord[x]=xcord.get(x,0)+1\n  ycord[y]=ycord.get(y,0)+1\n x=None\n y=None\n \n for i in xcord:\n  if xcord[i]%2!=0:\n   x=i\n   break\n for i in ycord:\n  if ycord[i]%2!=0:\n   y=i\n   break\n print(x,y) ", "t=int(input())\nfor _ in range(t):\n N=int(input())\n m=[]\n n=[]\n for _ in range(4*N-1):\n  x,y=map(int,input().split())\n  m.append(x)\n  n.append(y)\n for i in m:\n  if m.count(i)!=2:\n   a=i\n for i in n:\n  if n.count(i)!=2:\n   b=i\n print(a ,b)", "# cook your dish here\n\nt = int(input())\nfor i in range(t):\n n = int(input())\n coordinates_x = {}\n coordinates_y = {}\n for j in range((4*n)-1):\n  coord = input().split()\n  x_axis = coordinates_x.get(int(coord[0]), [])\n  x_axis.append(int(coord[1]))\n  coordinates_x[int(coord[0])] = x_axis\n  y_axis = coordinates_y.get(int(coord[1]), [])\n  y_axis.append(int(coord[0]))\n  coordinates_y[int(coord[1])] = y_axis\n  \n for k,v in coordinates_x.items():\n  if len(v)%2 != 0:\n   x_coord = k\n   \n for k,v in coordinates_y.items():\n  if len(v)%2 != 0:\n   y_coord = k\n   \n print(x_coord, y_coord)", "try:\n testcases = int(input())\n for i in range(testcases):\n  rects = int(input())\n  xCords = {}\n  yCords = {}\n  \n  for i in range((rects*4)-1):\n   x,y = list(map(int,input().split()))\n   xCords[x] = xCords.get(x,0)+1\n   yCords[y] = yCords.get(y,0)+1\n  \n  x = None\n  y = None\n  for i in xCords:\n   if xCords[i]%2!=0:\n    x = i\n    break\n  for i in yCords:\n   if yCords[i]%2!=0:\n    y = i\n    break\n  print(x,y)\nexcept:\n pass", "try:\n testcases = int(input())\n for i in range(testcases):\n  rects = int(input())\n  xCords = {}\n  yCords = {}\n  check = lambda x,hashMap: True if x in hashMap else False\n  for i in range((rects*4)-1):\n   x,y = list(map(int,input().split()))\n   xCords[x] = xCords.get(x,0)+1\n   yCords[y] = yCords.get(y,0)+1\n  \n  x = None\n  y = None\n  for (i,j), (i1,j1) in zip(xCords.items(),yCords.items()):\n   if j%2!=0 and not x:\n    x = i\n   if j1%2!=0 and not y: \n    y = i1\n   if x and y:\n    break\n  print(x,y)\nexcept:\n pass", "try:\n testcases = int(input())\n for i in range(testcases):\n  rects = int(input())\n  xCords = {}\n  yCords = {}\n  check = lambda x,hashMap: True if x in hashMap else False\n  for i in range((rects*4)-1):\n   x,y = list(map(int,input().split()))\n   xCords[x] = xCords.get(x,0)+1\n   yCords[y] = yCords.get(y,0)+1\n  \n  for (i,j), (i1,j1) in zip(xCords.items(),yCords.items()):\n   if j%2!=0:\n    x = i\n   if j1%2!=0:\n    y = i1\n  print(x,y)\nexcept:\n pass", "# cook your dish here\nfrom collections import Counter\nt = int(input())\nfor _ in range(t):\n n = int(input())\n x = Counter()\n y = Counter()\n for i in range(4*n-1):\n  a,b = map(int, input().split())\n  x.update([a])\n  y.update([b])\n for i in x.keys():\n  if x[i]%2!=0:\n   p = i\n   break\n for j in y.keys():\n  if y[j]%2!=0:\n   q = j\n   break\n print(p,q)", "# cook your dish here\nt = int(input())\nfor _ in range(t):\n n = int(input())\n x = []\n y = []\n for i in range(4*n-1):\n  a,b = list(map(int, input().split()))\n  x.append(a)\n  y.append(b)\n xs = set(x)\n ys = set(y)\n for i in xs:\n  if x.count(i)%2!=0:\n   p = i\n   break\n for j in ys:\n  if y.count(j)%2!=0:\n   q = j\n   break\n print(p,q)\n", "# cook your dish here\nt = int(input())\nfor _ in range(t):\n n = int(input())\n x = []\n y = []\n for i in range(4*n-1):\n  a,b = list(map(int, input().split()))\n  x.append(a)\n  y.append(b)\n xs = set(x)\n ys = set(y)\n for i in xs:\n  if x.count(i)%2!=0:\n   p = i\n for j in ys:\n  if y.count(j)%2!=0:\n   q = j\n print(p,q)\n", "from collections import defaultdict as dd\nt = int(input())\nfor T in range(t):\n n = int(input())\n x = dd(int)\n y = dd(int)\n\n for i in range(4 * n - 1):\n  v1, v2 = [int(_) for _ in input().split()]\n  x[v1] += 1\n  y[v2] += 1\n ansx, ansy = 0, 0\n for i in x:\n  if x[i] % 2:\n   ansx = i\n   break\n\n for i in y:\n  if y[i] % 2:\n   ansy = i\n   break\n\n print(ansx, ansy)\n", "# cook your dish here\nfor tc in range(int(input())):\n  N1=int(input())\n  P1=set()\n  Q1=set()\n  for i in range(4 * N1 - 1):\n   firt, sec1=map(int, input().split())\n   if firt in P1:\n    P1.remove(firt)\n   else:\n    P1.add(firt)\n   if sec1 in Q1:\n    Q1.remove(sec1)\n   else:\n    Q1.add(sec1)\n  print(*P1, *Q1)", "# cook your dish here\nfor tc in range(int(input())):\n  N1=int(input())\n  P1=set()\n  Q1=set()\n  for i in range(4 * N1 - 1):\n   firt, sec1=map(int, input().split())\n   if firt in P1:\n    P1.remove(firt)\n   else:\n    P1.add(firt)\n   if sec1 in Q1:\n    Q1.remove(sec1)\n   else:\n    Q1.add(sec1)\n  print(*P1, *Q1)", "t = int(input())\nfor _ in range(t):\n n = int(input())\n x_points = {}\n y_points = {}\n for i in range(4 * n - 1):\n  x, y = map(int, input().split())\n  x_points[x] = x_points.setdefault(x, 0) + 1\n  y_points[y] = y_points.setdefault(y, 0) + 1\n\n for x in x_points:\n  if x_points[x] % 2 == 1:\n   print(x, end=\" \")\n\n for y in y_points:\n  if y_points[y] % 2 == 1:\n   print(y, end=\" \")\n"]