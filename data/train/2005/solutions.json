["X = [[], ['0', '1'], ['00', '01', '10', '11'], ['001', '010', '011', '100', '101', '110'], ['0010', '0011', '0100', '0101', '0110', '1001', '1010', '1011', '1100', '1101'], ['00100', '00101', '00110', '01001', '01011', '01100', '01101', '10010', '10011', '10100', '10110', '11001', '11010', '11011'], ['001001', '001011', '001100', '001101', '010010', '010011', '010110', '011001', '011010', '011011', '100100', '100101', '100110', '101001', '101100', '101101', '110010', '110011', '110100', '110110'], ['0010011', '0011001', '0011010', '0011011', '0100101', '0101100', '0101101', '0110011', '1001100', '1010010', '1010011', '1011010', '1100100', '1100101', '1100110', '1101100'], ['00110011', '01011010', '01100110', '10011001', '10100101', '11001100']]\ns = input()\nN = len(s)\nans = (N-1)*(N-2)//2\nfor i in range(N):\n    for j in range(i+3, min(i+9, N+1)):\n        if s[i:j] in X[j-i]:\n            ans -= 1\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\nS=input().strip()\nL=len(S)\n\nANS1=[0]*(L+10)\nANS2=[0]*(L+10)\nANS3=[0]*(L+10)\n\nfor i in range(L-2):\n    if S[i]==S[i+1]==S[i+2]:\n        ANS1[i]=1\n\nfor i in range(L-4):\n    if S[i]==S[i+2]==S[i+4]:\n        ANS2[i]=1\n\nfor i in range(L-6):\n    if S[i]==S[i+3]==S[i+6]:\n        ANS3[i]=1\n\nSCORE=0\n\nfor i in range(L):\n    if ANS1[i]==1:\n        SCORE+=max(0,L-i-2)\n    elif ANS1[i+1]==1:\n        SCORE+=max(0,L-i-3)\n    elif ANS1[i+2]==1:\n        SCORE+=max(0,L-i-4)\n\n    elif ANS2[i]==1:\n        SCORE+=max(0,L-i-4)\n    elif ANS2[i+1]==1:\n        SCORE+=max(0,L-i-5)\n\n        \n    elif ANS1[i+3]==1:\n        SCORE+=max(0,L-i-5)\n\n\n        \n        \n    elif ANS1[i+4]==1:\n        SCORE+=max(0,L-i-6)\n    elif ANS2[i+2]==1:\n        SCORE+=max(0,L-i-6)\n    elif ANS3[i]==1:\n        SCORE+=max(0,L-i-6)\n        \n    elif ANS1[i+5]==1:\n        SCORE+=max(0,L-i-7)\n    elif ANS2[i+3]==1:\n        SCORE+=max(0,L-i-7)\n    elif ANS3[i+1]==1:\n        SCORE+=max(0,L-i-7)\n     \n\n    else:\n        SCORE+=max(0,L-i-8)\n\n    #print(SCORE)\n\nprint(SCORE)\n        \n        \n", "from collections import defaultdict as dd\nimport math\ndef nn():\n\treturn int(input())\n\ndef li():\n\treturn list(input())\n\ndef mi():\n\treturn list(map(int, input().split()))\n\ndef lm():\n\treturn list(map(int, input().split()))\n\ns=li()\nn=len(s)\ntotal=0\n\ndef testsub(sub):\n\tfor k in range(1,(len(sub)-1)//2+1):\n\t\t\t#print(k)\n\t\t\tif sub[0]==sub[k] and sub[k]==sub[2*k]:\n\t\t\t\t#print(len(sli))\n\t\t\t\t#print('true')\t\t\t\t\n\t\t\t\treturn True\n\n\treturn False\n\nfor i in range(len(s)):\n\tr=n\t\n\tlets=3\n\t\n\tdone=0\n\twhile i+lets<=len(s):\n\t\t\n\t\tsli=s[i:i+lets]\n\t\tfor m in range(0,len(sli)-2):\n\t\t\t#print(sli[m:])\n\t\t\tif testsub(sli[m:]):\n\t\t\t\tdone=1\n\t\t\t\tbreak\n\t\tif done==1:\n\t\t\tr=i+len(sli)-1\n\t\t\tbreak\n\t\t\n\t\tlets+=1\n\t#print(total,r)\t\n\ttotal+=n-r\n\n\nprint(total)\n\n\n\n\n\n\n\n\t\t\n\n", "s=input()\nn=len(s)\nsml=(n*(n+1))//2\nfor i in range(8):\n    sml-=max(n-i,0)\ngood3=set()\ngood4=set()\ngood5=set()\ngood6=set()\ngood7=set()\nfor i in range(n-2):\n    if s[i]==s[i+1]==s[i+2]:\n        good3.add(i)\n        sml+=1\nfor i in range(n-3):\n    if i in good3 or i+1 in good3:\n        good4.add(i)\n        sml+=1\nfor i in range(n-4):\n    if i in good4 or i+1 in good4 or s[i]==s[i+2]==s[i+4]:\n        good5.add(i)\n        sml+=1\nfor i in range(n-5):\n    if i in good5 or i+1 in good5:\n        good6.add(i)\n        sml+=1\nfor i in range(n-6):\n    if i in good6 or i+1 in good6 or s[i]==s[i+3]==s[i+6]:\n        good7.add(i)\n        sml+=1\nfor i in range(n-7):\n    if i in good7 or i+1 in good7:\n        sml+=1\nprint(sml)", "s=input()\nn=len(s)\nsml=(n*(n+1))//2\nfor i in range(8):\n    sml-=max(n-i,0)\ngood3=set()\ngood4=set()\ngood5=set()\ngood6=set()\ngood7=set()\nfor i in range(n-2):\n    if s[i]==s[i+1]==s[i+2]:\n        good3.add(i)\n        sml+=1\nfor i in range(n-3):\n    if i in good3 or i+1 in good3:\n        good4.add(i)\n        sml+=1\nfor i in range(n-4):\n    if i in good4 or i+1 in good4 or s[i]==s[i+2]==s[i+4]:\n        good5.add(i)\n        sml+=1\nfor i in range(n-5):\n    if i in good5 or i+1 in good5:\n        good6.add(i)\n        sml+=1\nfor i in range(n-6):\n    if i in good6 or i+1 in good6 or s[i]==s[i+3]==s[i+6]:\n        good7.add(i)\n        sml+=1\nfor i in range(n-7):\n    if i in good7 or i+1 in good7:\n        sml+=1\nprint(sml)", "s = input()\n\nn = len(s)\n\nans = 0\nl = 0\n\nfor i in range(0, n):\n    for j in range(i - 1, l, -1):\n        if 2 * j - i < l:\n            break\n        if s[i] == s[j] == s[j + j - i]:\n             ans += ((2 * j - i) - l + 1) * (n - i)\n             l = (2 * j - i + 1)\t\n\nprint(ans)", "from sys import stdin\ns=stdin.readline().strip()\nx=-1\nans=0\nfor i in range(len(s)):\n    for j in range(1,100):\n        if (i-2*j)>=0 and s[i]==s[i-j] and s[i-j]==s[i-2*j]:\n            if (i-2*j)>x:\n                ans+=(i-2*j-x)*(len(s)-i)\n                x=i-2*j\nprint(ans)\n", "s = input()\nle = len(s)\nm = [le] * (le + 1)\nans = 0\nfor i in range(le - 1, -1, -1):\n    m[i] = m[i + 1]\n    k = 1\n    while k * 2 + i < m[i]:\n        if s[i] == s[i + k] and s[i] == s[i + 2 * k]:\n            m[i] = i + 2 * k\n        k += 1\n    ans += le - m[i]\nprint(ans)\n", "\ndef get_arr(v):\n    ans = []\n    while v != 0:\n        ans.append(v%2)\n        v//=2\n    return ans[::-1]\n\n\ndef check_arr(arr):\n    for i in range(len(arr)):\n        for di in range(1, (len(arr) - i)//2 + 1):\n            if i + 2 * di >=len(arr):\n                continue\n            if arr[i] == arr[i+di] == arr[i + 2 * di]:\n                return True\n    return False\n\ns = input()\n\n\nans = (len(s) * (len(s) + 1)) // 2\n\nfor i in range(len(s)):\n    for j in range(i+1, min(i + 10, len(s)+1)):\n        if not check_arr(s[i:j]):\n            ans-=1\nprint(ans)\n", "s = input()\nn = len(s)\n\n\na = [n] * (n + 1)\nans = 0\n\nfor i in range(n - 1, -1, -1):\n\ta[i] = a[i + 1]\n\tj = 1\n\twhile i + j + j < a[i]:\n\t\tif s[i] == s[i + j] and s[i] == s[i + j + j]:\n\t\t\ta[i] = i + j + j\n\t\tj += 1\n\tans += n - a[i]\nprint(ans)\n", "s = input()\ncur, ans = - 1, 0\nfor i in range(len(s)):\n    for j in range(cur + 1, i - 1):\n        if (i +  j) % 2 == 0 and s[i] == s[j] and s[i] == s[(i + j) // 2]:\n            cur = j\n    ans += cur + 1\nprint(ans)", "import bisect\n\ns = input()\nn = len(s)\nans = 0\nptn = [[0]*(n+1) for i in range(4)]\n\nfor i in range(1, 5):\n    for j in range(n):\n        if j+2*i >= n:\n            break\n        if s[j] == s[j+i] and s[j+i] == s[j+2*i]:\n            ptn[i-1][j+1] = 1\n    for j in range(n):\n        ptn[i-1][j+1] += ptn[i-1][j]\n        \nans = 0\nfor l in range(n):\n    tmp_ans = 1000000\n    for i in range(4):\n        tmp = bisect.bisect_left(ptn[i], ptn[i][l]+1)\n        tmp_ans = min(tmp_ans, tmp-1+2*(i+1))\n    ans += max(0, n - tmp_ans)\nprint(ans)", "import bisect\n\ns = input()\nn = len(s)\nans = 0\nptn = [[0]*(n+1) for i in range(4)]\n\nfor i in range(1, 5):\n    for j in range(n):\n        if j+2*i >= n:\n            break\n        if s[j] == s[j+i] and s[j+i] == s[j+2*i]:\n            ptn[i-1][j+1] = 1\n    for j in range(n):\n        ptn[i-1][j+1] += ptn[i-1][j]\n        \nans = 0\nfor l in range(n):\n    tmp_ans = 1000000\n    for i in range(4):\n        tmp = bisect.bisect_left(ptn[i], ptn[i][l]+1)\n        tmp_ans = min(tmp_ans, tmp-1+2*(i+1))\n    ans += max(0, n - tmp_ans)\nprint(ans)\n", "s = input()\nle = len(s)\nm = [le] * (le + 1)\nans = 0\nfor i in range(le - 1, -1, -1):\n    m[i] = m[i + 1]\n    k = 1\n    while k * 2 + i < m[i]:\n        if s[i] == s[i + k] and s[i] == s[i + 2 * k]:\n            m[i] = i + 2 * k\n        k += 1\n    ans += le - m[i]\nprint(ans)\n", "import sys\nimport math\n\ndata = sys.stdin.read().split()\ndata_ptr = 0\n\ndef data_next():\n    nonlocal data_ptr, data\n    data_ptr += 1\n    return data[data_ptr - 1]\n\nS = data[0]\nN = len(S)\n\nans = 0\nif N >= 9:\n    ans += (N - 8) * (N - 7) // 2\nfor l in range(3, 9):\n    for i in range(N - l + 1):\n        j = i + l - 1\n        for start in range(i, j - 1):\n            k = 1\n            found = False\n            while start + 2 * k <= j:\n                if S[start] == S[start + k] and S[start + k] == S[start + 2 * k]:\n                    found = True\n                    break\n                k += 1\n            if found:\n                ans += 1\n                break\nprint(ans)\n", "import sys\nimport math\nfrom collections import defaultdict,deque\nimport heapq\ns=sys.stdin.readline()[:-1]\nans=0\nn=len(s)\nmink=n\nfor i in range(n-1,-1,-1):\n\tk=1\n\tz=True\n\twhile i+2*k<n and z:\n\t\tif s[i]==s[i+k]==s[i+2*k]:\n\t\t\tz=False\n\t\t\tcontinue\n\t\tk+=1\n\tif not z:\n\t\tmink=min(mink,i+2*k)\n\t\t#print(mink,'mink',i,'i')\n\tx=n-mink\n\tans+=x\n\t\t#ans+=(n-(i+2*k))+(i-1)\n\t#print(ans,'ans',i,'i')\nprint(ans)", "import sys\nfrom collections import deque\n#from functools import *\n#from fractions import Fraction as f\n#from copy import *\n#from bisect import *\t\n#from heapq import *\n#from math import gcd,ceil,sqrt\n#from itertools import permutations as prm,product\n \ndef eprint(*args):\n    print(*args, file=sys.stderr)\nzz=1\n \n#sys.setrecursionlimit(10**6)\nif zz:\n\tinput=sys.stdin.readline\nelse:\t\n\tsys.stdin=open('input.txt', 'r')\n\tsys.stdout=open('all.txt','w')\ndi=[[-1,0],[1,0],[0,1],[0,-1]]\n\ndef string(s):\n\treturn \"\".join(s)\ndef fori(n):\n\treturn [fi() for i in range(n)]\t\ndef inc(d,c,x=1):\n\td[c]=d[c]+x if c in d else x\ndef bo(i):\n\treturn ord(i)-ord('A')\t\ndef li():\n\treturn [int(xx) for xx in input().split()]\ndef fli():\n\treturn [float(x) for x in input().split()]\t\ndef comp(a,b):\n\tif(a>b):\n\t\treturn 2\n\treturn 2 if a==b else 0\t\t\ndef gi():\t\n\treturn [xx for xx in input().split()]\ndef cil(n,m):\n\treturn n//m+int(n%m>0)\t\ndef fi():\n\treturn int(input())\ndef pro(a): \n\treturn reduce(lambda a,b:a*b,a)\t\t\ndef swap(a,i,j): \n\ta[i],a[j]=a[j],a[i]\t\ndef si():\n\treturn list(input().rstrip())\t\ndef mi():\n\treturn \tmap(int,input().split())\t\t\t\ndef gh():\n\tsys.stdout.flush()\ndef isvalid(i,j):\n\treturn 0<=i<n and 0<=j<m and a[i][j]!=\".\"\ndef bo(i):\n\treturn ord(i)-ord('a')\t\ndef graph(n,m):\n\tfor i in range(m):\n\t\tx,y=mi()\n\t\ta[x].append(y)\n\t\ta[y].append(x)\n\n\nt=1\n\n\nwhile t>0:\n\tt-=1\n\ts=si()\n\tn=len(s)\n\tp=[n]*(n+1)\n\tans=0\n\tfor i in range(n):\n\t\tk=1\n\t\twhile i+2*k<n:\n\t\t\tif s[i]==s[i+k]==s[i+2*k]:\n\t\t\t\tp[i]=i+2*k\n\t\t\t\tbreak\n\t\t\tk+=1\n\tfor i in range(n-2,-1,-1):\n\t\tp[i]=min(p[i],p[i+1])\n\t\tans+=(n-p[i])\n\tprint(ans)\t\t\n\n\t\t\t\n\t\t\t\n\n"]