["# cook your dish here\ndef solve(l,r,c,row,col,po):\n    count=0\n    visited=set()\n    stack=set()\n    stack.add((l[row][col],row,col))\n    while stack:\n        ele=stack.pop()\n        visited.add((ele[1],ele[2]))\n        if ele[0]<po:\n            count+=1 \n            if ele[1]-1>=0 and (ele[1]-1,ele[2]) not in visited:\n                if l[ele[1]-1][ele[2]]<po:\n                    stack.add((l[ele[1]-1][ele[2]],ele[1]-1,ele[2]))\n            if ele[1]+1<r and (ele[1]+1,ele[2]) not in visited:\n                if l[ele[1]+1][ele[2]]<po:\n                    stack.add((l[ele[1]+1][ele[2]],ele[1]+1,ele[2]))\n            if ele[2]-1>=0 and (ele[1],ele[2]-1) not in visited:\n                if l[ele[1]][ele[2]-1]<po:\n                    stack.add((l[ele[1]][ele[2]-1],ele[1],ele[2]-1))\n            if ele[2]+1<c and (ele[1],ele[2]+1) not in visited:\n                if l[ele[1]][ele[2]+1]<po:\n                    stack.add((l[ele[1]][ele[2]+1],ele[1],ele[2]+1))\n    return count\nfor _ in range(int(input())):\n    r,c,q=map(int,input().split())\n    l=[]\n    for i in range(r):\n        a=list(map(int,input().split()))\n        l.append(a)\n    for i in range(q):\n        row,col,po=map(int,input().split())\n        print(solve(l,r,c,row-1,col-1,po))", "def solve(l,r,c,row,col,po):\r\n    count=0\r\n    visited=set()\r\n    stack=set()\r\n    stack.add((l[row][col],row,col))\r\n    while stack:\r\n        ele=stack.pop()\r\n        visited.add((ele[1],ele[2]))\r\n        if ele[0]<po:\r\n            count+=1 \r\n            if ele[1]-1>=0 and (ele[1]-1,ele[2]) not in visited:\r\n                if l[ele[1]-1][ele[2]]<po:\r\n                    stack.add((l[ele[1]-1][ele[2]],ele[1]-1,ele[2]))\r\n            if ele[1]+1<r and (ele[1]+1,ele[2]) not in visited:\r\n                if l[ele[1]+1][ele[2]]<po:\r\n                    stack.add((l[ele[1]+1][ele[2]],ele[1]+1,ele[2]))\r\n            if ele[2]-1>=0 and (ele[1],ele[2]-1) not in visited:\r\n                if l[ele[1]][ele[2]-1]<po:\r\n                    stack.add((l[ele[1]][ele[2]-1],ele[1],ele[2]-1))\r\n            if ele[2]+1<c and (ele[1],ele[2]+1) not in visited:\r\n                if l[ele[1]][ele[2]+1]<po:\r\n                    stack.add((l[ele[1]][ele[2]+1],ele[1],ele[2]+1))\r\n    return count\r\nfor _ in range(int(input())):\r\n    r,c,q=map(int,input().split())\r\n    l=[]\r\n    for i in range(r):\r\n        a=list(map(int,input().split()))\r\n        l.append(a)\r\n    for i in range(q):\r\n        row,col,po=map(int,input().split())\r\n        print(solve(l,r,c,row-1,col-1,po))", "def traverse(l,h,w,i,j,p):\r\n    c=0\r\n    queue=[(i,j)]\r\n    visited=[[False for i in range(w)] for i in range(h)]\r\n    visited[i][j]=True\r\n    while queue:\r\n        newq=[]\r\n        c+=len(queue)\r\n        for i in range(len(queue)):\r\n            d=queue[i]\r\n            x,y=d[0],d[1]\r\n            if x+1<h and l[x+1][y]<p and not visited[x+1][y]:\r\n                newq.append((x+1,y))\r\n                visited[x+1][y]=True\r\n            if x-1>=0 and l[x-1][y]<p and not visited[x-1][y]:\r\n                newq.append((x-1,y))\r\n                visited[x-1][y]=True\r\n            if y+1<w and l[x][y+1]<p and not visited[x][y+1]:\r\n                newq.append((x,y+1))\r\n                visited[x][y+1]=True\r\n            if y-1>-1 and l[x][y-1]<p and not visited[x][y-1]:\r\n                newq.append((x,y-1))\r\n                visited[x][y-1]=True\r\n        queue=newq\r\n    return c\r\n\r\n\r\nfor i1 in range(int(input())):\r\n    h,w,q=map(int, input().split())\r\n    l=[]\r\n    for i in range(h):\r\n        l1=list(map(int, input().split()))\r\n        l+=[l1]\r\n    for i in range(q):\r\n        i,j,p=map(int, input().split())\r\n        i-=1\r\n        j-=1\r\n        if l[i][j]>=p:\r\n            print(0)\r\n        else:\r\n            b=traverse(l,h,w,i,j,p)\r\n            print(b)\r\n\r\n\r\n", "from collections import deque\r\n\r\ndef traverse(l,h,w,i,j,p):\r\n    c=0\r\n    queue=deque([(i,j)])\r\n    visited=[[False for i in range(w)] for i in range(h)]\r\n    visited[i][j]=True\r\n    while queue:\r\n        d=queue.popleft()\r\n        x,y=d[0],d[1]\r\n        c+=1\r\n        if x+1<h and l[x+1][y]<p and not visited[x+1][y]:\r\n            queue.append((x+1,y))\r\n            visited[x+1][y]=True\r\n        if x-1>=0 and l[x-1][y]<p and not visited[x-1][y]:\r\n            queue.append((x-1,y))\r\n            visited[x-1][y]=True\r\n        if y+1<w and l[x][y+1]<p and not visited[x][y+1]:\r\n            queue.append((x,y+1))\r\n            visited[x][y+1]=True\r\n        if y-1>-1 and l[x][y-1]<p and not visited[x][y-1]:\r\n            queue.append((x,y-1))\r\n            visited[x][y-1]=True\r\n    return c\r\n\r\n\r\nfor i1 in range(int(input())):\r\n    h,w,q=map(int, input().split())\r\n    l=[]\r\n    for i in range(h):\r\n        l1=list(map(int, input().split()))\r\n        l+=[l1]\r\n    for i in range(q):\r\n        i,j,p=map(int, input().split())\r\n        i-=1\r\n        j-=1\r\n        if l[i][j]>=p:\r\n            print(0)\r\n        else:\r\n            b=traverse(l,h,w,i,j,p)\r\n            print(b)\r\n\r\n\r\n", "import numpy as np\r\n\r\ndef solve(l,r,c,row,col,po):\r\n    count = 0\r\n    visited = set()\r\n    stack = set()\r\n    stack.add((l[row][col],row,col))\r\n    while stack:\r\n        ele = stack.pop()\r\n        visited.add((ele[1],ele[2]))\r\n        if ele[0]<po:\r\n            count+=1 \r\n            if ele[1]-1>=0 and (ele[1]-1,ele[2]) not in visited:\r\n                if l[ele[1]-1][ele[2]]<po:\r\n                    stack.add((l[ele[1]-1][ele[2]],ele[1]-1,ele[2]))\r\n            if ele[1]+1<r and (ele[1]+1,ele[2]) not in visited:\r\n                if l[ele[1]+1][ele[2]]<po:\r\n                    stack.add((l[ele[1]+1][ele[2]],ele[1]+1,ele[2]))\r\n            if ele[2]-1>=0 and (ele[1],ele[2]-1) not in visited:\r\n                if l[ele[1]][ele[2]-1]<po:\r\n                    stack.add((l[ele[1]][ele[2]-1],ele[1],ele[2]-1))\r\n            if ele[2]+1<c and (ele[1],ele[2]+1) not in visited:\r\n                if l[ele[1]][ele[2]+1]<po:\r\n                    stack.add((l[ele[1]][ele[2]+1],ele[1],ele[2]+1))\r\n    return count\r\n\r\n# cook your dish here\r\nfor _ in range(int(input())):\r\n    r,c,q = map(int,input().split())\r\n    \r\n    l = []\r\n    for i in range(r):\r\n        a = list(map(int,input().split()))\r\n        l.append(a)\r\n    \r\n    for i in range(q):\r\n        row,col,po = map(int,input().split())\r\n        if len(np.unique(l))==1:\r\n            if int(np.unique(l))<po:\r\n                print(r*c)\r\n            else:\r\n                print('0')\r\n            continue\r\n        print( solve(l,r,c,row-1,col-1,po) )\r\n", "def solve(l,r,c,row,col,po):\r\n    count = 0\r\n    visited = set()\r\n    stack = set()\r\n    stack.add((l[row][col],row,col))\r\n    while stack:\r\n        ele = stack.pop()\r\n        visited.add((ele[1],ele[2]))\r\n        if ele[0]<po:\r\n            count+=1 \r\n            if ele[1]-1>=0 and (ele[1]-1,ele[2]) not in visited:\r\n                if l[ele[1]-1][ele[2]]<po:\r\n                    stack.add((l[ele[1]-1][ele[2]],ele[1]-1,ele[2]))\r\n            if ele[1]+1<r and (ele[1]+1,ele[2]) not in visited:\r\n                if l[ele[1]+1][ele[2]]<po:\r\n                    stack.add((l[ele[1]+1][ele[2]],ele[1]+1,ele[2]))\r\n            if ele[2]-1>=0 and (ele[1],ele[2]-1) not in visited:\r\n                if l[ele[1]][ele[2]-1]<po:\r\n                    stack.add((l[ele[1]][ele[2]-1],ele[1],ele[2]-1))\r\n            if ele[2]+1<c and (ele[1],ele[2]+1) not in visited:\r\n                if l[ele[1]][ele[2]+1]<po:\r\n                    stack.add((l[ele[1]][ele[2]+1],ele[1],ele[2]+1))\r\n    return count\r\n\r\n# cook your dish here\r\nfor _ in range(int(input())):\r\n    r,c,q = map(int,input().split())\r\n    \r\n    l = []\r\n    for i in range(r):\r\n        a = list(map(int,input().split()))\r\n        l.append(a)\r\n    \r\n    for i in range(q):\r\n        row,col,po = map(int,input().split())\r\n        print( solve(l,r,c,row-1,col-1,po) )\r\n"]