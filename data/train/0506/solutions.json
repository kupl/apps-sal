["class Solution:\n     def myAtoi(self, str):\n         \"\"\"\n         :type str: str\n         :rtype: int\n         \"\"\"\n         base = \"0123456789\"\n         plus = \"+\"\n         minus = \"-\"\n         sum = 0\n         flag = 1\n         bit = 0\n         INT_MAX = 2147483647\n         INT_MIN = -2147483648\n         \n         if not str:\n             return 0\n         \n         if len(str) == 0:\n             return 0\n         \n         for letter in str.strip():\n             if letter in plus:\n                 if bit == 0:\n                     bit = 1\n                     continue\n                 else:\n                     break\n             elif letter in minus:\n                 if bit == 0:\n                     bit = 1\n                     flag = -1\n                     continue\n                 else:\n                     break\n             elif letter not in base:\n                 break;\n             else:\n                 sum *= 10\n                 sum += int(letter)\n         \n         sum *= flag\n         \n         if(sum > INT_MAX):\n             return INT_MAX\n         \n         if(sum < INT_MIN):\n             return INT_MIN\n         \n         return sum\n                 \n         \n", "class Solution:\n     def myAtoi(self, str):\n         \"\"\"\n         :type str: str\n         :rtype: int\n         \"\"\"\n         import sys\n         str = str.lstrip()\n         if not str:\n             return 0\n         negative = (str[0] == '-')\n         str = str.lstrip('')\n         if str[0] in ('-', '+'):\n             str = str[1:]\n         str.lstrip('0')\n         result = 0\n         for s in str:\n             if s.isnumeric():\n                 result *= 10\n                 result += int(s)\n             else:\n                 break\n         return max(min(result * (-1 if negative else 1), 2147483647), -2147483648)\n", "class Solution:\n     def myAtoi(self, str):\n         \"\"\"\n         :type str: str\n         :rtype: int\n         \"\"\"\n \n         str = str.strip()\n         if str == '':\n             return 0\n         str = str.split()[0]\n \n         flag = True\n         if str[0] == '+':\n             flag = True\n             str = str[1:]\n         elif str[0] =='-':\n             flag = False\n             str = str[1:]\n \n         if str == '' or str[0] not in \"0123456789\":\n             return 0\n         s = ''\n         for ch in str:\n             if ch in \"0123456789\":\n                 s += ch\n             else:\n                 break\n         try:\n             result = int(s)\n         except:\n             return 0\n         else:\n             if not flag:\n                 result = -result\n         if result > 2147483647:\n             result = 2147483647\n         elif result < -2147483648:\n             result = -2147483648\n         return result", "class Solution:\n     def myAtoi(self, str):\n         \"\"\"\n         :type str: str\n         :rtype: int\n         \"\"\"\n         INT_MAX = 2147483647\n         INT_MIN = -2147483648\n         str = str.strip()\n         if not str:\n             return 0\n         sign = 1\n         if str[0] in (\"+\", \"-\"):\n             if str[0] == \"-\":\n                 sign = -1\n             str = str[1:]\n         if not str:\n             return 0\n         if not str[0].isdigit():\n             return 0\n         for ind, val in enumerate(str):\n             if not val.isdigit():\n                 str = str[:ind]\n                 break\n         #sum = 0\n         #scale = 1\n         #for element in str[::-1]:\n         #    sum += scale * int (element)\n         #    scale *= 10\n         sum = int(str)\n \n             \n             \n         result = sign * sum\n         if result > INT_MAX:\n             return INT_MAX\n         if result < INT_MIN:\n             return INT_MIN\n         return result\n", "class Solution:\n     def myAtoi(self, s):\n         \"\"\"\n         :type str: str\n         :rtype: int\n         \"\"\"\n         count=0\n         sign=1\n         st='0'\n         s=s.strip()\n         for i in range(len(s)):\n                 \n             if ord(s[i])>=48 and ord(s[i])<=57:\n                 st=st+s[i]\n             \n             elif s[i]=='+' and count==0:\n                 count=1\n             elif s[i]=='+' and count==1:\n                 break\n                 \n             elif s[i]=='-' and count==0:\n                 sign=-1\n                 count=1\n             elif s[i]=='-' and count==1:\n                 break    \n     \n             else:\n                 break\n                 \n         n=sign*(int(st))        \n         \n         if n>=2147483647:\n             return 2147483647\n         elif n<=-2147483648:\n             return -2147483648\n         else:\n             return n\n             \n", "class Solution:\n     def myAtoi(self, s):\n         \"\"\"\n         :type str: str\n         :rtype: int\n         \"\"\"\n         count=0\n         sign=1\n         st='0'\n         s=s.strip()\n         for i in range(len(s)):\n                 \n             if ord(s[i])>=48 and ord(s[i])<=57:\n                 st=st+s[i]\n             \n             elif s[i]=='+' and count==0:\n                 count=1\n             elif s[i]=='+' and count==1:\n                 break\n                 \n             elif s[i]=='-' and count==0:\n                 sign=-1\n                 count=1\n             elif s[i]=='-' and count==1:\n                 break    \n     \n             else:\n                 break\n                 \n         n=sign*(int(st))        \n         \n         if n>=2147483647:\n             return 2147483647\n         elif n<=-2147483648:\n             return -2147483648\n         else:\n             return n\n             \n", "class Solution:\n     def myAtoi(self, str):\n         \"\"\"\n         :type str: str\n         :rtype: int\n         \"\"\"\n         if len(str) == 0 : return 0\n         ls = list(str.strip())\n         \n         sign = -1 if ls[0] == '-' else 1\n         if ls[0] in ['-','+'] : del ls[0]\n         ret, i = 0, 0\n         while i < len(ls) and ls[i].isdigit() :\n             ret = ret*10 + ord(ls[i]) - ord('0')\n             i += 1\n         return max(-2**31, min(sign * ret,2**31-1))", "class Solution:\n     def myAtoi(self, str):\n         \"\"\"\n         :type str: str\n         :rtype: int\n         \"\"\"\n         str = str.lstrip()\n         if not str:\n             return 0\n         \n         sign = -1 if str[0] == '-' else 1\n         if str[0] in ['+', '-']:\n             str = str[1:]\n         \n         i, res = 0, 0\n         while i < len(str) and str[i].isdigit():\n             res = res * 10 + ord(str[i]) - ord('0')\n             i += 1\n         \n         return max(-2**31, min(2**31-1, sign * res))\n", "class Solution:\n     def myAtoi(self, str):\n         \"\"\"\n         :type str: str\n         :rtype: int\n         \"\"\"\n         # get rid of leading whitespaces\n         s = str.lstrip()\n         \n         if len(s) == 0:\n             return 0\n         # get integer as far as possible        \n         if s[0] not in ['+','-']:\n             sign = 1\n             i = 0 \n             while i < len(s) and s[i].isdigit():\n                 i += 1\n             int_as_str = s[:i]\n         else:\n             sign = 1 if s[0] == '+' else -1\n             i = 1\n             while i < len(s) and s[i].isdigit():\n                 i += 1\n             int_as_str = s[1:i]\n         \n         # convert to integer\n         if len(int_as_str) == 0:\n             return 0\n         \n         return max(-2**31, min(sign * int(int_as_str),2**31-1))\n             \n         \n", "class Solution:\n     def myAtoi(self, str):\n         \"\"\"\n         :type str: str\n         :rtype: int\n         \"\"\"\n         str = str.strip()\n         if len(str)==0: return 0\n         \n         if str[0] ==\"-\":\n             ret, i = 0, 1\n             sign = -1\n         elif str[0] == \"+\":\n             ret, i = 0, 1\n             sign = 1\n         else:\n             ret, i = 0, 0\n             sign =1\n         while i < len(str) and str[i].isdigit() :\n             ret = ret*10 + int(str[i])\n             i += 1\n         return max(-2**31, min(sign * ret,2**31-1))", "class Solution:\n     def myAtoi(self, str):\n         \"\"\"\n         :type str: str\n         :rtype: int\n         \"\"\"\n         if not str:\n             return 0\n         str = str.strip()\n         number, flag = 0, 1\n         if str[0] == '-':\n             str = str[1:]\n             flag = -1\n         elif str[0] == '+':\n             str = str[1:]\n         for c in str:\n             if c >= '0' and c <= '9':\n                 number = 10*number + ord(c) - ord('0')\n             else:\n                 break\n         number = flag * number\n         number = number if number <= 2147483647 else 2147483647\n         number = number if number >= -2147483648 else -2147483648\n         return number\n"]