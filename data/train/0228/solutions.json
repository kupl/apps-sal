["class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        n = len(s)\n        vowel = set(['a','e','i','o','u'])\n        i=0\n        res = 0\n        while i<k:\n            if s[i] in vowel:\n                res+=1\n            i+=1\n        j=k\n        i=0\n        maxV = res\n        while j<n:\n            if s[i] in vowel:\n                res-=1\n            if s[j] in vowel:\n                res+=1\n            i+=1\n            j+=1\n            if maxV<res:\n                maxV = res\n        return maxV\n            \n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowels = set(['A','E','I','O','U','a','e','i','o','u'])\n        res = 0\n        cnt = 0\n\n        for i in range(k):\n            if s[i] in vowels:\n                cnt += 1    \n        res = max(res, cnt)\n        \n        for i in range(k, len(s)):\n            if s[i] in vowels:\n                cnt += 1       \n            if s[i-k] in vowels:\n                cnt -= 1 \n            res = max(res, cnt)\n        \n        return res\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowels = set(['A','E','I','O','U','a','e','i','o','u'])\n\n        res = 0\n        cnt = 0\n\n        for i in range(k):\n            if s[i] in vowels:\n                cnt += 1\n                \n        res = max(res, cnt)\n\n        for i in range(k, len(s)):\n\n            if s[i] in vowels:\n                cnt += 1\n                \n            if s[i-k] in vowels:\n                cnt -= 1\n                \n            res = max(res, cnt)\n        \n        return res\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        maxNum = -1\n        currNum = 0\n        vowels = 'aeiou'\n        j=0\n        while j <k:\n            if s[j] in vowels:\n                currNum+=1\n            j+=1    \n        maxNum = max(maxNum, currNum)\n        \n        for i in range(k,len(s)):\n            if s[i] in vowels:\n                currNum+=1\n            if s[i-k] in vowels:\n                currNum-=1\n            \n            maxNum = max(maxNum, currNum)\n                \n        return maxNum\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowel = {'a','e','i','o','u'}\n        cnt = 0\n        for i in range(k):\n            if s[i] in vowel:\n                cnt += 1\n        if cnt == k: return k\n        i = 0\n        res = cnt\n        for j in range(k,len(s)):\n            if s[i] in vowel:\n                cnt -= 1\n            if s[j] in vowel:\n                cnt += 1\n            i += 1\n            if cnt == k:\n                return k\n            res = max(res, cnt)\n        return res", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        \n        vowel = 'aeiou'\n        n = len(s)\n        i = k\n        window = s[:k]\n        res = sum([1 for x in window if x in vowel])\n        tmp = res\n        \n        while i <n:\n            if s[i-k] in vowel:\n                tmp -= 1\n            if s[i] in vowel:\n                tmp += 1\n            res = max(res, tmp)\n            i += 1\n            \n        return res", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowels = set('aeiou')\n        init = len([x for x in s[:k] if x in vowels])\n        ans = init\n        for i in range(1, len(s)-k+1):\n            if s[i-1] in vowels:\n                init -= 1\n            if s[i+k-1] in vowels:\n                init += 1\n            ans = max(ans, init)\n        return ans\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        ans=0\n        dic={'a':1,'e':1,'i':1,'o':1,'u':1}\n        for i in range(k):\n            if s[i] in dic:\n                ans+=1\n        i=0\n        j=k\n        temp=ans\n        while j<len(s):\n            if s[j] in dic:\n                temp+=1\n            if s[i] in dic:\n                temp-=1\n            ans=max(ans,temp)\n            i+=1\n            j+=1\n        return ans\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        # Sliding window with fixed width (=k)\n        vowels = 'aeiou'\n        num_vowels = sum(1 for i in range(k) if s[i] in vowels)\n        max_vowels = num_vowels\n        for removed_idx in range(0, len(s) - k):\n            added_idx = removed_idx + k\n            num_vowels += int(s[added_idx] in vowels) - int(s[removed_idx] in vowels)\n            if num_vowels > max_vowels:\n                max_vowels = num_vowels\n        return max_vowels", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowels = {'a','e','i','o','u'}\n        vowel_count = 0\n        for i in range(k):\n            if s[i] in vowels:\n                vowel_count += 1\n                \n        max_vowels = vowel_count\n        \n        for i in range(k, len(s)):\n            if s[i-k] in vowels:\n                vowel_count -= 1\n            if s[i] in vowels:\n                vowel_count += 1\n            max_vowels = vowel_count if vowel_count > max_vowels else max_vowels\n        \n        return max_vowels", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        truth_table = []\n        for idx, char in enumerate(s):\n            if char in ['a','e','i','o','u']:\n                truth_table.append(idx)\n        \n        pre_count, pre_idx, return_count = 0, 0, 0\n        \n        for idx, vowel_idx in enumerate(truth_table):\n            if idx == 0:\n                count = 1\n                next_idx = idx + 1\n            else:\n                count = pre_count - 1\n                next_idx = pre_idx + 1\n\n            while (next_idx < len(truth_table) and truth_table[next_idx] - vowel_idx + 1 <= k):\n                count += 1\n                pre_idx = next_idx\n                next_idx += 1\n            pre_count = count\n                \n            if count > return_count:\n                return_count = count\n           \n        return return_count", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        \n        # Bounded sliding window solution\n        \n        vowel = set('aeiou')\n        leftwindow = 0\n        \n        ans = 0\n        temp = 0\n        \n        for rightwindow in range(len(s)):\n            \n            # expand the window\n            if rightwindow < k:\n                if s[rightwindow] in vowel:\n                    temp += 1\n                    ans = max(temp, ans)\n                continue\n                    \n            leftChar = s[leftwindow]\n            rightChar = s[rightwindow]\n\n            if rightChar in vowel and leftChar in vowel:\n                pass\n\n            elif rightChar in vowel:\n                temp += 1\n\n            elif leftChar in vowel:\n                temp -= 1\n                \n            ans = max(temp, ans)\n            leftwindow += 1\n            \n        return ans", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        maxVow, count = 0, 0\n        for i, j in enumerate(s):\n            if j in 'aeiou':\n                count += 1\n            if i >= k and s[i-k] in 'aeiou':\n                count -= 1\n            maxVow = max(maxVow, count)\n        return maxVow", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowels=['a','e','i','o','u']\n        max_cnt=sum([1 for i in range(k) if s[i] in vowels])\n        cnt=max_cnt\n        for i in range(k,len(s)):\n            if s[i] in vowels:\n                cnt+=1\n            if s[i-k] in vowels:\n                cnt-=1\n            max_cnt=max(cnt,max_cnt)\n        return max_cnt\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        \n        ans=0\n        cur=0\n        \n        \n        \n      \n        for j,c in enumerate(s):\n            cur+=c in 'aeiou'\n            if j>=k:\n                cur-=s[j-k] in 'aeiou'\n                \n            ans=max(ans,cur)\n        return max(ans,cur)\n", "'''\nasdadrwsg3234\n   l\n     r\n'''\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vo = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        l, max_l, count = 0, 0, 0\n        for i in range(len(s)):\n            ch = s[i]\n            if ch in vo:\n                count += 1\n            if i - l + 1 > k:\n                if s[l] in vo:\n                    count -= 1\n                l += 1\n            max_l = max(max_l, count)\n        return max_l\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowels  = 'aeiou'\n        i,tmp,res = 0,0,0\n        for j in range(len(s)):\n            if s[j] in vowels:\n                tmp += 1\n            while j-i+1 > k:\n                if s[i] in vowels:\n                    tmp -= 1\n                i += 1\n            res = max(res,tmp)\n            \n        return res", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        su,res,vov = 0,0,('a', 'e', 'i', 'o','u')\n        for i,v in enumerate(s):\n            if v in vov:\n                su += 1\n            if i-k >= 0:\n                if s[i-k] in vov:\n                    su -= 1\n            res = max(res,su)\n        return res\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowelMap = {\n            'a': 0,\n            'e': 0,\n            'i': 0,\n            'o': 0,\n            'u': 0\n        }\n        \n        for i in range(0, k):\n            if s[i] in vowelMap:\n                vowelMap[s[i]] += 1\n        \n        maxVowels = sum(vowelMap.values())\n        for i in range(1, len(s)-k+1):\n            if s[i+k-1] in vowelMap:\n                vowelMap[s[i+k-1]] += 1\n            \n            if s[i-1] in vowelMap:\n                vowelMap[s[i-1]] -= 1\n            \n            maxVowels = max(maxVowels, sum(vowelMap.values()))\n        \n        return maxVowels\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        m, beg, end = len(s), 0, 0\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        maxi, count = 0, 0\n        \n        while end < m:\n            \n            if s[end] in vowels:\n                count += 1\n            \n            if end-beg+1 >= k:\n                maxi = max(maxi, count)\n                if s[beg] in vowels:\n                    count -= 1\n                beg += 1\n            \n            end += 1\n        \n        return maxi", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        \n        vowels = {'a','e','i','o','u'}\n        mx, vowelCount = 0, 0\n        l,r = 0,0\n        \n        while(r < len(s)):\n            if s[r] in vowels: vowelCount +=1\n            r += 1\n            \n            while(r - l == k and l < len(s)):\n                mx = max(vowelCount,mx)\n                if s[l] in vowels: vowelCount -= 1\n                l+=1\n        return mx", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n\n        def vowel_letters(ch):\n            if ch in ['a','e','i','o','u']:\n                return True\n            return False\n\n        temp = [1 if vowel_letters(i) else 0 for i in s]\n\n        su = sum(temp[:k])\n        m = su\n\n        for i in range(k,len(temp)):\n            su += temp[i]-temp[i-k]\n            m = max([su,m])\n\n        return m", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        ans = 0\n        n = len(s)\n        i, j = 0, 0\n        cnt = 0\n        vowels = {'a', 'e', 'i', 'o', 'u'}\n        \n        while j < n:\n            if s[j] in vowels:\n                cnt += 1\n            if j == k-1:\n                break\n            else:\n                j += 1\n        ans = max(ans, cnt)\n        \n        while j+1 < n:\n            if s[i] in vowels:\n                cnt -= 1\n            i += 1\n            j += 1\n            if s[j] in vowels:\n                cnt += 1\n            ans = max(ans, cnt)\n        \n        return ans", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        total=res=0\n        for i in range(len(s)):\n            if s[i] in 'aeiou':\n                total+=1\n            if i>=k-1:\n                res=max(res,total)\n                if s[i-k+1] in 'aeiou':\n                    total-=1\n        return res\n", "class Solution:\n    def maxVowels(self,S,K):\n        N=len(S)\n        L=[0]*(N+1)\n        for i in range(N):\n            if S[i] in ['a','e','i','o','u']:\n                L[i+1]=1\n        for i in range(1,N+1):\n            L[i]+=L[i-1]\n        i=0\n        j=K\n        ans=0\n        while(i<=N and j<=N):\n            ans=max(ans,L[j]-L[i])\n            i+=1\n            j+=1\n        return ans     \n            \n                \n        \n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        # Sliding window.\n        ret = 0\n        cnt = 0\n        ## initial window\n        for i in range(k):\n            if self.vowel(s[i]):\n                cnt += 1\n        ret = max(ret, cnt)\n        ## move the window\n        for i in range(k, len(s)):\n            if self.vowel(s[i]):\n                cnt += 1\n            if self.vowel(s[i-k]):\n                cnt -= 1\n            ret = max(ret, cnt)\n        \n        return ret\n        \n    def vowel(self, char):\n        return char in ['a', 'e', 'i', 'o', 'u']\n", "class Solution:\n    \n    # k = substring length. If sliding windows then left & right of sliding window should be different by k\n    def maxVowels(self, s: str, k: int) -> int:\n        is_a_vowel = lambda letter: letter in 'aeiou'\n\n        count = 0\n        maximum_vowels = 0\n        \n        \n        left = 0\n        \n        for right in range(len(s)):\n            # moving right but not touching left pointer\n            if right < k:\n                count = count + 1 if is_a_vowel(s[right]) else count # add next vowel if present\n                maximum_vowels = max(maximum_vowels, count)\n            else:\n            # moving right and touching left pointer so that distance between pointers is always k\n                count = max(0, count-1) if is_a_vowel(s[left]) else count # letter is cut from substrg of k, so decrease count but not lower than 0\n                count = count + 1 if is_a_vowel(s[right]) else count # add next vowel if present\n                left = left + 1\n                maximum_vowels = max(maximum_vowels, count)\n        \n        return maximum_vowels\n        \n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        # Sliding window.\n        ret = 0\n        cnt = 0\n        ## initial window\n        for i in range(k):\n            if self.vowel(s[i]):\n                cnt += 1\n        ret = max(ret, cnt)\n        ## move the window\n        for i in range(k, len(s)):\n            if self.vowel(s[i]):\n                cnt += 1\n            if self.vowel(s[i-k]):\n                cnt -= 1\n            ret = max(ret, cnt)\n        \n        return ret\n        \n    def vowel(self, char):\n        return char in ['a', 'e', 'i', 'o', 'u']", "class Solution:\n    def maxVowels(self, s, k):\n        vcnt, res = dict(), 0\n        for i, c in enumerate(s):\n            if i-k >= 0 and s[i-k] in 'aeiou':\n                vcnt[s[i-k]] -= 1\n            if c in 'aeiou':\n                vcnt[c] = vcnt.get(c, 0) + 1\n            res = max(res, sum(vcnt.values()))\n        return res\n    \nclass Solution:\n    def maxVowels(self, s, k):\n        res, cnt = 0, 0\n        for i, c in enumerate(s):\n            # if i-k >= 0 and s[i-k] in 'aeiou':\n            #     cnt -= 1\n            # if c in 'aeiou':\n            #     cnt += 1\n            cnt += (c in 'aeiou') - (i-k >= 0 and s[i-k] in 'aeiou')\n            #res = max(res, cnt)\n            if cnt > res: res = cnt\n        return res", "# class Solution:\n#     def maxVowels(self, s: str, k: int) -> int:\n#         vowels = {\\\"a\\\", \\\"e\\\", \\\"i\\\", \\\"o\\\", \\\"u\\\"}\n#         m = 0\n#         for el in s[:k]:\n#             if el in vowels:\n#                 m += 1\n#         a = m\n#         for i in range(k, len(s)):\n#             if s[i] in vowels:\n#                 a += 1\n#             if s[i-k] in vowels:\n#                 a -= 1\n#             m = max(a,m)\n#         return m\n    \nclass Solution:\n    \n    # k = substring length. If sliding windows then left & right of sliding window should be different by k\n    def maxVowels(self, s: str, k: int) -> int:\n        is_a_vowel = lambda letter: letter in 'aeiou'\n\n        count = 0\n        maximum_vowels = 0\n        \n        \n        left = 0\n        \n        for right in range(len(s)):\n            # moving right but not touching left pointer\n            if right < k:\n                count = count + 1 if is_a_vowel(s[right]) else count # add next vowel if present\n                maximum_vowels = max(maximum_vowels, count)\n            else:\n            # moving right and touching left pointer so that distance between pointers is always k\n                count = max(0, count-1) if is_a_vowel(s[left]) else count # letter is cut from substrg of k, so decrease count but not lower than 0\n                count = count + 1 if is_a_vowel(s[right]) else count # add next vowel if present\n                left = left + 1\n                maximum_vowels = max(maximum_vowels, count)\n        \n        return maximum_vowels", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        max_val = 0\n        tmp = 0\n        i = 0\n        he = len(s)\n        for i in range(k):\n            if s[i] in 'aeiou':\n                tmp += 1\n                if tmp == k:\n                    return k\n        if tmp > max_val:\n            max_val = tmp\n        for i in range(k,he):\n            if s[i-k] in 'aeiou':\n                tmp -= 1\n            if s[i] in 'aeiou':\n                tmp += 1\n            if tmp > max_val:\n                max_val = tmp\n        return max_val", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n               \n        i = 0\n        j = i+k-1\n        cc = 0\n        for k in range(i,j+1):\n            if s[k] == 'a' or s[k] == 'e' or s[k] == 'i' or s[k] == 'o' or s[k] == 'u':\n                cc += 1\n        \n        max_c = 0\n        while j<len(s):\n            if cc > max_c:\n                max_c = cc\n            if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n                cc -= 1\n            i += 1\n            j += 1\n            if j<len(s):\n                if s[j] == 'a' or s[j] == 'e' or s[j] == 'i' or s[j] == 'o' or s[j] == 'u':\n                    cc += 1\n        \n        return max_c\n            \n", "class Solution:\n    def maxVowels(self, s, k):\n        vcnt, res = dict(), 0\n        for i, c in enumerate(s):\n            if i-k >= 0 and s[i-k] in 'aeiou':\n                vcnt[s[i-k]] -= 1\n            if c in 'aeiou':\n                vcnt[c] = vcnt.get(c, 0) + 1\n            #res = max(res, sum(vcnt.values()))\n            if sum(vcnt.values()) > res:\n                res = sum(vcnt.values())\n        return res\n    \n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowels = {'a', 'e', 'i', 'o', 'u'}\n        current = 0\n        maxx = 0\n        start, end = 0, 0\n        if k == 0:\n            return 0 \n        while end < min(start + k, len(s)):\n            if s[end] in vowels:\n                current += 1\n            end += 1\n        \n        if end == len(s):\n            return current\n        \n        while end < len(s):\n            maxx = max(maxx, current)\n            if s[start] in vowels:\n                current -= 1\n            start += 1\n            if s[end] in vowels:\n                current += 1\n            end += 1\n            \n        return max(maxx, current)", "class Solution:\n    def maxVowels(self, s, k):\n        vcnt, res = dict(), 0\n        for i, c in enumerate(s):\n            if i-k >= 0 and s[i-k] in 'aeiou':\n                vcnt[s[i-k]] -= 1\n            if c in 'aeiou':\n                vcnt[c] = vcnt.get(c, 0) + 1\n            res = max(res, sum(vcnt.values()))\n        return res\n    \n# class Solution:\n#     def maxVowels(self, s, k):\n#         res, cnt = 0, 0\n#         for i, c in enumerate(s):\n#             if i-k >= 0 and s[i-k] in 'aeiou':\n#                 cnt -= 1\n#             if c in 'aeiou':\n#                 cnt += 1\n#             #res = max(res, cnt)\n#             if cnt > res: res = cnt\n#         return res\n    \n# class Solution:\n#     def maxVowels(self, s, k):\n#         cnt, res, N = 0, 0, len(s)\n#         for i, c in enumerate(s[:k]):\n#             if c in 'aeiou':\n#                 cnt += 1\n#         res = cnt\n#         for c1, c2 in zip(s[:-k], s[k:]):\n#             cnt += (c2 in 'aeiou') - (c1 in 'aeiou')\n#             #res = max(res, cnt)\n#             if cnt > res: res = cnt\n#         return res\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowels = 0\n        vowelString = ['a','e','i','o','u']\n        end = 0\n        start = 0\n        maxx = 0\n        while end < len(s):\n            if s[end] in vowelString:\n                vowels += 1\n                \n            if end >= k:\n                if s[start] in vowelString:\n                    vowels -= 1\n                start += 1\n            end += 1\n            maxx = max(maxx,vowels)\n        return maxx", "\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowel=0\n        max_vowel=0\n        front=0\n        for i in range(len(s)):\n            if s[i]=='a' or s[i]=='e' or s[i]=='i' or s[i]=='o' or s[i]=='u':\n                vowel+=1\n                print((s[i]))\n            if i>=k-1:\n                max_vowel=max(max_vowel,vowel)\n                front=s[i-k+1]\n                #print(vowel,i)\n                if front=='a' or front== 'e' or front=='i' or front=='o' or front=='u':\n                    vowel-=1\n            \n        return max_vowel\n                \n            \n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if len(s) < k:\n            k = len(s)\n        \n        cnt = 0\n        for i in range(k):\n            if s[i] in ('a', 'e', 'i', 'o', 'u'):\n                cnt += 1\n        \n        max_cnt = cnt\n        \n        for i in range(k, len(s)):\n            if s[i] in ('a', 'e', 'i', 'o', 'u'):\n                cnt += 1\n            if s[i-k] in ('a', 'e', 'i', 'o', 'u'):\n                cnt -= 1\n            max_cnt = max(max_cnt, cnt)\n        return max_cnt\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if not s or not k:\n            return 0\n        max_vowels = 0\n        start_pointer = 0\n        end_pointer = k - 1\n        vowels = {'a', 'e', 'i', 'o', 'u'}\n        num_curr_window_vowels = 0\n        for i in range(k):\n            if s[i] in vowels:\n                num_curr_window_vowels += 1\n        max_vowels = max(max_vowels, num_curr_window_vowels)\n        while end_pointer < len(s) - 1:\n            if s[start_pointer] in vowels:\n                num_curr_window_vowels -= 1\n            start_pointer += 1\n            end_pointer += 1\n            if s[end_pointer] in vowels:\n                num_curr_window_vowels += 1\n            max_vowels = max(max_vowels, num_curr_window_vowels)\n        return max_vowels", "def window_sums(bits, width):\n    coll = []\n    pointer = 0\n    total = 0\n    for elem in bits:\n        if len(coll) < width:\n            coll.append(elem)\n            total += elem\n            if len(coll) == width:\n                yield total\n        else:\n            total += elem - coll[pointer]\n            coll[pointer] = elem\n            pointer = (pointer + 1) % width\n            yield total\n\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        bits = (ch in 'aeiou' for ch in s)\n        sums = window_sums(bits, k)\n        return max(sums)", "class Solution:\n    def maxVowels(self, s, k):\n        vcnt, res = dict(), 0\n        for i, c in enumerate(s):\n            if i-k >= 0 and s[i-k] in 'aeiou':\n                vcnt[s[i-k]] -= 1\n            if c in 'aeiou':\n                vcnt[c] = vcnt.get(c, 0) + 1\n            #res = max(res, sum(vcnt.values()))\n            if sum(vcnt.values()) > res:\n                res = sum(vcnt.values())\n        return res\n    \n# class Solution:\n#     def maxVowels(self, s, k):\n#         res, cnt = 0, 0\n#         for i, c in enumerate(s):\n#             if i-k >= 0 and s[i-k] in 'aeiou':\n#                 cnt -= 1\n#             if c in 'aeiou':\n#                 cnt += 1\n#             #res = max(res, cnt)\n#             if cnt > res: res = cnt\n#         return res\n    \n# class Solution:\n#     def maxVowels(self, s, k):\n#         cnt, res, N = 0, 0, len(s)\n#         for i, c in enumerate(s[:k]):\n#             if c in 'aeiou':\n#                 cnt += 1\n#         res = cnt\n#         for c1, c2 in zip(s[:-k], s[k:]):\n#             cnt += (c2 in 'aeiou') - (c1 in 'aeiou')\n#             #res = max(res, cnt)\n#             if cnt > res: res = cnt\n#         return res\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowel = set({'a','e','i','o','u'})\n        curr = 0\n        maxx = 0\n        for i in range(k):\n            if s[i] in vowel:\n                curr+=1\n                maxx+=1\n        for i in range(1, len(s)-k+1):\n            if s[i+k-1] in vowel:\n                curr +=1\n            if s[i-1] in vowel:\n                curr -=1\n            if curr == k:\n                return curr\n            if curr >= maxx:\n                maxx = curr\n        return maxx\n            \n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowels = {'a', 'e', 'i', 'o', 'u'}\n        count = 0\n        maxCount = 0\n        i = 0\n        for j in range(len(s)):\n            if s[j] in vowels:\n                count += 1\n            if j >= k and s[j-k] in vowels:\n                count -= 1\n            maxCount = max(maxCount, count)\n        return maxCount\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        maks=0\n        string=''\n        count=0\n        lenght=0\n        for l in s:\n            if l=='a' or l=='e' or l=='i' or l=='o' or l=='u':\n                count+=1\n            string+=l\n            lenght+=1\n            if lenght==k:\n                if count>maks:\n                    maks=count\n                if string[0]=='a' or string[0]=='e' or string[0]=='i' or string[0]=='o' or string[0]=='u':\n                    count-=1\n                lenght-=1\n                string=string[1:k]\n        return maks\n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        self.vowels = ['a', 'e', 'i', 'o', 'u']\n        \n        def isVowel(char):\n            return char in self.vowels\n        \n        i = 0\n        j = 0\n        cur_count = 0\n        result = 0\n        length = len(s)\n        \n        while i < length and j < length:\n            if isVowel(s[j]):\n                cur_count += 1\n            \n            if j - i + 1 >= k:\n                result = max(result, cur_count)\n                if isVowel(s[i]):\n                    cur_count -= 1\n                i += 1\n            \n            j += 1\n        \n        return result\n            \n            \n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        a=s[:k]\n        d={'a':0,'e':0,'i':0,'o':0,'u':0}\n        def checkVowels():\n            total=0\n            for key in d:\n                total+=d[key]\n            return total\n        for c in s[:k]:\n            if c in d:\n                d[c]+=1\n        \n        total=checkVowels()\n        i=1\n        while(i<=len(s)-k):\n            prev=s[i-1]\n            if prev in d:\n                d[prev]-=1\n            nxt=s[i+k-1]\n            if nxt in d:\n                d[nxt]+=1\n            #print('i',i,'d',d)\n            total=max(total,checkVowels())\n            i+=1\n        return total", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        currMax = 0\n        curr = 0\n        vowels = set(['a','e','i','o','u'])\n        for i,c in enumerate(s):\n            if c in vowels:\n                curr += 1\n            if i >= k and s[i-k] in vowels:\n                curr -= 1\n            currMax = max(curr, currMax)\n            if currMax == k:\n                break\n        return currMax", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        memo = collections.defaultdict(lambda : 0)\n        i = 0\n        res = 0\n        vowels = set('aeiou')\n        for j in range(len(s)):\n            if s[j] in vowels:\n                memo[s[j]] += 1\n            if j-i+1==k:\n                res = max(res, sum(memo.values()))\n                if s[i] in memo:\n                    memo[s[i]] -= 1\n                    if memo[s[i]] ==0:\n                        del memo[s[i]]\n                i += 1\n        return res\n            \n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        cnt = i = ans = 0\n        for j in range(len(s)):\n            c = s[j]\n            cnt += (s[j] in 'aeiou')\n            if j >= k:\n                cnt -= (s[i] in 'aeiou')\n                i += 1\n            \n            if j >= k - 1:\n                ans = max(ans, cnt)\n        return ans", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        temp = defaultdict(lambda : 0)\n        for i in range(k):\n            temp[s[i]] += 1\n        \n        ans = sum(temp[i] for i in 'aeiou')\n        for i in range(k, len(s)):\n            temp[s[i-k]] -= 1\n            temp[s[i]] += 1\n            ans = max(ans, sum(temp[i] for i in 'aeiou'))\n        return ans\n", "from collections import Counter\n\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        c = Counter(s[:k])\n        m = sum([c[x] for x in 'aeiou'])\n        for i in range(len(s) - k):\n            c[s[i]] -= 1\n            c[s[i + k]] += 1\n            m = max(m, sum([c[x] for x in 'aeiou']))\n        return m", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int: \n        _start = 0\n        _end = 0\n        _max = 0\n        start = 0\n        length = 0\n        count = 0\n        \n        for end in range(len(s)):\n            length += 1\n            \n            if self.check(s[end]):\n                count += 1\n            \n            if length > k:\n                if self.check(s[start]):\n                    count -= 1\n                start += 1\n                \n            if count > _max:\n                _max = count\n                _start = start\n                _end = end\n        \n        return _max\n                \n    \n    def check(self, ch):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        for vowel in vowels:\n            if ch == vowel:\n                return True\n        \n        return False", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        \n        \n        l = 0\n        r = 0\n        \n    \n        \n        v_set = {'a','e','i','o','u'}\n        \n        window_len = 0\n        count = 0\n        \n        max_len = 0\n        while r < len(s):\n            if window_len < k:\n                if s[r] in v_set:\n                    count += 1\n                window_len+=1\n                \n            else:\n                print((window_len,count,s[r]))\n                if count == k:\n                    max_len = k\n                    return max_len\n                else:\n                    max_len = max(count,max_len)\n                    if s[l] in v_set:\n                        count-=1\n                    l+=1\n                    window_len-=1\n                    if s[r] in v_set:\n                        count += 1\n                    window_len+=1\n                    \n            r+=1\n        max_len = max(count,max_len)\n        return max_len\n                \n            \n", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int: \n        _max = 0\n        start = 0\n        length = 0\n        count = 0\n        \n        for end in range(len(s)):\n            length += 1\n            \n            if self.check(s[end]):\n                count += 1\n            \n            if length > k:\n                if self.check(s[start]):\n                    count -= 1\n                start += 1\n                \n            _max = max(_max, count)\n        \n        return _max\n                \n    \n    def check(self, ch):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        for vowel in vowels:\n            if ch == vowel:\n                return True\n        \n        return False", "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        i=0\n        j=0\n        cur_max=0\n        maxx=0\n        for i in range(len(s)):\n            if s[i]=='a' or s[i]=='e' or s[i]=='i' or s[i]=='o' or s[i]=='u':\n                cur_max+=1\n            if i-j+1>k:\n                if s[j]=='a' or s[j]=='e' or s[j]=='i' or s[j]=='o' or s[j]=='u':\n                    cur_max-=1\n                maxx=max(cur_max,maxx)\n                j+=1\n            maxx=max(cur_max,maxx)\n        return maxx\n                \n            \n            \n            \n            \n"]