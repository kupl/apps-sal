["def mForMaxSeq(arr, n):\r\n    eim = dict()\r\n    for i in range(n):\r\n        if arr[i] in eim:\r\n            eim[arr[i]].append(i)\r\n        else:\r\n            eim[arr[i]] = [i]\r\n    \r\n    keys = sorted(eim.keys())\r\n    \r\n    # print(eim, keys)\r\n\r\n    connected = False\r\n    count = 0\r\n    pI = -1\r\n\r\n    nKeys = len(keys)\r\n    for i in range(nKeys-1):\r\n        \r\n        if not connected:\r\n            pI = eim[keys[i]][0]\r\n            \r\n            for idx in eim[keys[i+1]]:\r\n                if idx >pI:\r\n                    connected = True\r\n                    count += 1\r\n                    pI = idx\r\n                    break\r\n        else:\r\n            connected = False\r\n\r\n            for idx in eim[keys[i+1]]:\r\n                if idx > pI:\r\n                    connected = True\r\n                    count += 1\r\n                    pI = idx\r\n                    break\r\n\r\n    \r\n    return (nKeys - count)\r\n\r\n\r\ndef __starting_point():\r\n    for _ in range(int(input())):\r\n        n = int(input())\r\n        arr = list(map(int, input().split()))\r\n        \r\n        print(mForMaxSeq(arr, n))\r\n        \r\n        \r\n\n__starting_point()", "import collections\nfrom sys import *\nimport bisect as bs\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    s = 1\n    d = {}\n    for i in range(n):\n        if(a[i] not in d):\n            d[a[i]] = []\n        d[a[i]].append(i)\n        \n    l = list(d.keys())\n    l.sort()\n    c = 0\n    \n    for j in l:\n        ln = len(d[j])\n        v = bs.bisect_left(d[j],c)\n        if(v==ln):\n            c = d[j][0] + 1\n            s +=1\n            continue\n        c = d[j][v] + 1\n    print(s)", "def findM(A, n):\r\n    elemIdxMap = dict()\r\n    for i in range(n):\r\n        if A[i] in elemIdxMap:\r\n            elemIdxMap[A[i]].append(i)\r\n        else:\r\n            elemIdxMap[A[i]] = [i]\r\n    \r\n    keys = sorted(elemIdxMap.keys())\r\n    \r\n    # print(elemIdxMap, keys)\r\n\r\n    connected = False\r\n    count = 0\r\n    prevIdx = -1\r\n\r\n    nKeys = len(keys)\r\n    for i in range(nKeys-1):\r\n        \r\n        if not connected:\r\n            prevIdx = elemIdxMap[keys[i]][0]\r\n            \r\n            for idx in elemIdxMap[keys[i+1]]:\r\n                if idx >prevIdx:\r\n                    connected = True\r\n                    count += 1\r\n                    prevIdx = idx\r\n                    break\r\n        else:\r\n            connected = False\r\n\r\n            for idx in elemIdxMap[keys[i+1]]:\r\n                if idx > prevIdx:\r\n                    connected = True\r\n                    count += 1\r\n                    prevIdx = idx\r\n                    break\r\n\r\n        # print(keys[i], count, prevIdx)\r\n    # if count == nKeys - 1:\r\n    #     return 1\r\n    # else:\r\n    #     return (nKeys - count)\r\n    # print(nKeys, count)\r\n    return (nKeys - count)\r\n\r\n\r\ndef __starting_point():\r\n    for _ in range(int(input())):\r\n        n = int(input())\r\n        A = list(map(int, input().split()))\r\n        \r\n        print(findM(A, n))\r\n        # print(findM([1, 3, 2, 1, 2], 5))\r\n        \r\n\n__starting_point()", "t = int(input())\r\nfor j in range(t):\r\n    n = int(input())\r\n    l = list(map(int,input().split()))\r\n    s = list(set(l))\r\n    s.sort()\r\n    dic = {}\r\n    le = {}\r\n    for j in s:\r\n        dic[j] = []\r\n        le[j] = 0\r\n    for j in range(n):\r\n        dic[l[j]].append(j+1)\r\n        le[l[j]]+=1\r\n    stack = [dic[s[0]][0]]\r\n    z = 0\r\n    m = 1\r\n    x = len(s)\r\n    for j in range(1,x):\r\n        flag = 0\r\n        for k in range(le[s[j]]):\r\n            if dic[s[j]][k]+(m-1)*n>stack[z]:\r\n                stack.append(dic[s[j]][k]+(m-1)*n)\r\n                z+=1\r\n                flag = 1\r\n                break\r\n        if flag==0:\r\n            m+=1\r\n            stack.append(dic[s[j]][0]+(m-1)*n)\r\n            z+=1\r\n    print(m)", "for _ in range(int(input())):\r\n    n = int(input())\r\n    l = list(map(int,input().split()))\r\n    u = list(set(l))\r\n    u.sort()\r\n    d ={}\r\n    for i in u:\r\n        d[i] = []\r\n    for i in range(n):\r\n        d[l[i]].append(i)\r\n    f = d[u[0]][0]\r\n    p = 1\r\n    m = 1\r\n    while p < len(u):\r\n        if d[u[p]][-1]>f:\r\n            for j in d[u[p]]:\r\n                if j>f:\r\n                    f = j\r\n                    p+=1\r\n                    break\r\n        else:\r\n            m += 1\r\n            f = d[u[p]][0]\r\n            p+=1\r\n    print(m)\r\n    \r\n    \r\n                \r\n                \r\n                \r\n", "from collections import defaultdict\r\nfrom bisect import bisect_right\r\n\r\nI = input\r\nt = int(I())\r\nfor _ in range(t):\r\n  I()\r\n  d = defaultdict(list)\r\n  for i, x in enumerate(map(int, I().split())):\r\n    d[x].append(i)\r\n  i, m = -1, 1\r\n  for x in sorted(d):\r\n    l = d[x]\r\n    j = bisect_right(l, i)\r\n    if j == len(l):\r\n      m += 1\r\n      j = 0\r\n    i = l[j]\r\n  print(m)\r\n", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    s = [int(i) for i in input().split()]\n    w = defaultdict(list)\n    for i in range(n):\n        w[s[i]].append(i)\n    typ = len(w)\n    keys = sorted(list(w.keys()))\n    length = len(keys)\n    ele_count = 1\n    i = 1\n    rnd = 0\n    val = keys[0]\n    pos = w[keys[0]][0]\n    while ele_count < typ:\n        if w[keys[ele_count]][-1] < pos:\n            rnd+=1\n            pos = w[keys[ele_count]][0]\n        else:\n            i = 0\n            while i < len(w[keys[ele_count]]) and w[keys[ele_count]][i]<=pos:\n                i+=1\n            pos = w[keys[ele_count]][i]\n        ele_count+=1\n    print(rnd+1)\n", "from collections import defaultdict\r\nfrom bisect import bisect_right\r\n\r\nI = input\r\nt = int(I())\r\nfor _ in range(t):\r\n  I()\r\n  d = defaultdict(list)\r\n  for i, x in enumerate(map(int, I().split())):\r\n    d[x].append(i)\r\n  i, m = -1, 1\r\n  for x in sorted(d):\r\n    l = d[x]\r\n    j = bisect_right(l, i)\r\n    i = l[j % len(l)]\r\n    m += j // len(l)\r\n  print(m)\r\n", "import collections\nimport bisect\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    d=collections.defaultdict(list)\n    c,find,ans,l=0,0,0,[]\n    for i in range(n):\n        if a[i] not in d:\n            l.append(a[i])\n            c+=1\n        d[a[i]].append(i)\n    l.sort()\n    for i in range(c):\n        if i==0:\n            ans+=1\n            find=d[l[i]][0]+1\n        else:\n            k=bisect.bisect_left(d[l[i]],find)\n            if k==0:\n                find=d[l[i]][k]+1\n            elif k==len(d[l[i]]):\n                find=d[l[i]][0]+1\n                ans+=1\n            else:\n                find=d[l[i]][k]+1\n    print(ans)\n            \n\n    \n    \n", "from sys import stdin\r\n\r\nfor _ in range(int(stdin.readline())):\r\n    n = int(stdin.readline())\r\n    arr = list(map(int,stdin.readline().split()))\r\n    final = {}\r\n    m = sorted(list(set(arr)))\r\n    count = 0\r\n    d = {}\r\n    for i in range(n):\r\n        if arr[i] in d:\r\n            d[arr[i]].append(i)\r\n        else:\r\n            d[arr[i]] = [i]\r\n            \r\n    pos = d[m[0]][0]\r\n    j = 1\r\n    while(j < len(m)):\r\n        k = None\r\n        for item in d[m[j]]:\r\n            if item > pos:\r\n                k = item\r\n                break\r\n        if k != None:\r\n            j += 1\r\n            pos = k\r\n        else:\r\n            count += 1\r\n            pos = -1\r\n    print(count+1)\r\n", "# cook your dish here\nimport collections\nimport bisect\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    d=collections.defaultdict(list)\n    c=0\n    l=[]\n    for i in range(n):\n        if a[i] not in d:\n            l.append(a[i])\n            c+=1\n        d[a[i]].append(i)\n    l.sort()\n    find=0\n    ans=0\n   # print(l)\n   # print(d)\n    for i in range(c):\n        if i==0:\n            ans+=1\n            find=d[l[i]][0]+1\n        else:\n            k=bisect.bisect_left(d[l[i]],find)\n           # print(k,find,l[i])\n            if k==0:\n                find=d[l[i]][k]+1\n            elif k==len(d[l[i]]):\n                find=d[l[i]][0]+1\n                ans+=1\n            else:\n                find=d[l[i]][k]+1\n       # print(ans)\n    print(ans)\n            \n\n    \n    \n", "from collections import defaultdict\r\nfrom bisect import bisect_right\r\n\r\nI = input\r\nt = int(I())\r\nfor _ in range(t):\r\n  I()\r\n  d = defaultdict(list)\r\n  for i, x in enumerate(map(int, I().split())):\r\n    d[x].append(i)\r\n  i, m = -1, 1\r\n  for x in sorted(d):\r\n    l = d[x]\r\n    j = bisect_right(l, i)\r\n    if j < len(l):\r\n      i = l[j]\r\n    else:\r\n      m += 1\r\n      i = l[0]\r\n  print(m)\r\n", "from collections import defaultdict\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    arr = list(map(int,input().split()))\r\n    ans = 1\r\n    d = defaultdict(list)\r\n    for i in range(n):\r\n        d[arr[i]].append(i+1)\r\n    ind = -10**10\r\n    uno = list(set(arr))\r\n    uno.sort()\r\n    for i in uno:\r\n        f = 0\r\n        f2 = 0 \r\n        k = 0\r\n        op = d[i]\r\n        for j in op:\r\n            if f2==0:\r\n                f2 = 1\r\n                ck = j\r\n            if j>ind:\r\n                ind = j\r\n                f = 1\r\n                break\r\n        if f==0:\r\n            ind = ck\r\n            ans+=1\r\n    print(ans)", "t=int(input())\r\nwhile(t):\r\n    t-=1\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    s=list(set(a))\r\n    s.sort()\r\n    ind=dict()\r\n    for i in range(n):\r\n        if(a[i] in ind):\r\n            ind[a[i]].append(i)\r\n        else:\r\n            ind[a[i]]=[i]\r\n\r\n    s1=1\r\n    ref=-1\r\n    for i in s:\r\n        flag=0\r\n        for j in ind[i]:\r\n            if(j>ref):\r\n                ref=j\r\n                flag=1\r\n                break\r\n        if(flag==0):\r\n            s1+=1\r\n            ref=ind[i][0]     \r\n    print(s1)\r\n", "def bs(x, prev, pict):\r\n    l = 0\r\n    r = len(pict[x]) - 1\r\n    while l <= r:\r\n        if r - l < 5:\r\n            for i in range(l, r + 1):\r\n                if pict[x][i] > prev:\r\n                    return pict[x][i]\r\n            return -1\r\n        mid = (l + r) // 2\r\n        if pict[x][mid] < prev:\r\n            l = mid + 1\r\n        else:\r\n            r = mid\r\n    return -1\r\n\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    s = list(map(int, input().split()))\r\n    li = []\r\n    pict = {}\r\n    for i in range(len(s)):\r\n        if pict.get(s[i]) is None:\r\n            pict[s[i]] = []\r\n            li.append(s[i])\r\n        pict[s[i]].append(i + 1)\r\n    li.sort()\r\n    count = 1\r\n    prev = 0\r\n    i=len(li)\r\n    for i in range(len(li)):\r\n        x = bs(li[i], prev, pict)\r\n        if x != -1:\r\n            prev = x\r\n        else:\r\n            count += 1\r\n            prev = pict[li[i]][0]\r\n    print(count)\r\n", "for T in range(int(input())):\r\n    N = int(input())\r\n    a = list(map(int, input().split()))\r\n    d = {}\r\n    elements = []\r\n    for i in range(N):\r\n        if a[i] not in d:\r\n            d[a[i]] = [i]\r\n            elements.append(a[i])\r\n        else:\r\n            d[a[i]].append(i)\r\n    elements.sort()\r\n    M = 1\r\n    prev_index = d[elements[0]][0]\r\n    for i in range(1, len(elements)):\r\n        flag = True\r\n        for j in range(len(d[elements[i]])):\r\n            if prev_index < d[elements[i]][j]:\r\n                flag = False\r\n                prev_index = d[elements[i]][j]\r\n                break\r\n        if flag:\r\n            M += 1\r\n            prev_index = d[elements[i]][0]\r\n    print(M)\r\n", "t=int(input())\r\nfor _ in range(t):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    b=set(a)\r\n    b=list(b)\r\n    b.sort()\r\n    c=dict()\r\n    for i in range(n):\r\n        if(a[i] in c):\r\n            c[a[i]].append(i)\r\n        else:\r\n           c[a[i]]=[i]\r\n   \r\n    index=-1\r\n    count=0\r\n    for i in range(len(b)):\r\n        r=c[b[i]]\r\n        flag=0\r\n        for j in range(len(r)):\r\n            if(r[j]>index):\r\n                flag=1\r\n                index=r[j]\r\n                break\r\n        if(flag!=1):\r\n            index=r[0]\r\n            count+=1\r\n        \r\n    print(count+1)\r\n", "from collections import defaultdict\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    s = list(map(int, input().split()))\r\n    r = defaultdict(list)\r\n    for i in range(n):\r\n        r[s[i]].append(i)\r\n    t = sorted(r.keys())\r\n    N = len(t)\r\n    l = r[t[0]][0]\r\n    ans = 1\r\n    for i in range(1, N):\r\n        flag = 0\r\n        for j in r[t[i]]:\r\n            if j >= l:\r\n                l = j\r\n                flag = 1\r\n                break\r\n        if flag == 0:\r\n            ans += 1\r\n            l = r[t[i]][0]\r\n    print(ans)\r\n", "def main():\r\n\r\n    from bisect import bisect_left as bl, bisect_right as br, insort\r\n    import sys\r\n    import heapq\r\n    # from math import *\r\n    from collections import defaultdict as dd, deque\r\n    def data(): return sys.stdin.readline().strip()\r\n    def mdata(): return list(map(int, data().split()))\r\n    out = sys.stdout.write\r\n    # sys.setrecursionlimit(100000)\r\n    INF = int(1e9)\r\n    mod = int(1e9)+7\r\n\r\n    for t in range(int(data())):\r\n        n=int(data())\r\n        A=mdata()\r\n        d=dd(list)\r\n        for i in range(n):\r\n            d[A[i]].append(i)\r\n        l=sorted(d.keys())\r\n        cnt=1\r\n        ind=d[l[0]][0]\r\n        for i in range(1,len(l)):\r\n            k=bl(d[l[i]],ind)\r\n            if k==len(d[l[i]]):\r\n                cnt+=1\r\n                ind=d[l[i]][0]\r\n            else:\r\n                ind=d[l[i]][k]\r\n        print(cnt)\r\n\r\ndef __starting_point():\r\n    main()\n__starting_point()", "from sys import stdin\r\ninput = stdin.readline\r\n\r\nfrom bisect import bisect_right\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n\r\n    d = {i: [] for i in a}\r\n\r\n    for i, j in enumerate(a):\r\n        d[j].append(i)\r\n\r\n    ans = 1\r\n\r\n    l = tuple(r[1] for r in sorted(d.items()))\r\n    p = 0\r\n\r\n    for i in range(len(l) - 1):\r\n        x = bisect_right(l[i+1], l[i][p])\r\n\r\n        if x == len(l[i+1]):\r\n            ans += 1\r\n            p = 0\r\n        else:\r\n            p = x\r\n\r\n    print(ans)\r\n", "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = [int(x) for x in input().strip().split()]\r\n    a = [(a[i],i) for i in range(n)]\r\n    a.sort()\r\n    res=1\r\n    prev=0\r\n    prev_ind = -1\r\n  \r\n    i=0\r\n    while i<n:\r\n        if a[i][1]>prev_ind:\r\n            prev_ind = a[i][1]\r\n            prev = a[i][0]\r\n            while i<n and a[i][0]==prev:\r\n                i+=1\r\n        else:\r\n            prev = a[i][0]\r\n            flag = False\r\n            mn=a[i][1]\r\n            while i<n and a[i][0]==prev:\r\n                if a[i][1]>prev_ind:\r\n                    prev_ind=a[i][1]\r\n                    flag = True\r\n                    break\r\n                i+=1\r\n            if flag:\r\n                while i<n and a[i][0]==prev:\r\n                    i+=1\r\n            else:\r\n                res+=1\r\n                prev_ind=mn\r\n    print(res)\r\n\r\n", "# cook your dish here\nimport bisect\n\ndef solve(arr,n,ans):\n    indices = {}\n    dist_vals = []\n    for i in range(n):\n        if arr[i] not in list(indices.keys()):\n            indices[arr[i]] = []\n            dist_vals.append(arr[i])\n\n        indices[arr[i]].append(i)\n\n    dist_vals.sort()\n    m = 1\n    index = -1\n    i = 0\n    while i < len(dist_vals):\n        x = dist_vals[i]\n        index = bisect.bisect(indices[x],index)\n        if index == len(indices[x]):\n            m += 1\n            index = -1\n        else:\n            index = indices[x][index]\n            i += 1\n\n    ans.append(m)\n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int,input().split()))\n        solve(arr,n,ans)\n\n    for i in ans:\n        print(i)\n\n\nmain()\n", "from collections import defaultdict\r\nimport bisect\r\nt = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    A = [int(j) for j in input().split()]\r\n    d = defaultdict(list)\r\n    for j,i in enumerate(A):\r\n        d[i].append(j)\r\n    #print(d)\r\n    keys = sorted(d.keys())\r\n    #print(keys)\r\n    pk = 0\r\n    ans = 1\r\n    prev = None\r\n    for i in keys:\r\n        pos = bisect.bisect_left(d[i],pk)\r\n        if pos==len(d[i]):\r\n            pos = 0\r\n            ans+=1\r\n        pos = d[i][pos]\r\n        pk = pos\r\n        #print(pk)\r\n    print(ans)\r\n        \r\n        \r\n"]