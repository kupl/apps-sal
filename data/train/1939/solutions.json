["class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        original = set(wordlist)\n        insensitive = {w.lower(): w for w in reversed(wordlist)}\n        vowels = {}\n        for c in reversed(wordlist):\n            w = c.lower()\n            t = w.replace('a', '_').replace('e', '_').replace('i', '_').replace('o', '_').replace('u', '_')\n            vowels[t] = c\n        results = []\n        for q in queries:\n            if q in original:\n                results.append(q)\n                continue\n            low = q.lower()\n            if low in insensitive:\n                results.append(insensitive[low])\n                continue\n            # vowel replace\n            t = low.replace('a', '_').replace('e', '_').replace('i', '_').replace('o', '_').replace('u', '_')\n            if t in vowels:\n                results.append(vowels[t])\n                continue\n            results.append(\\\"\\\")\n        return results", "def match(query, wordsSet):\n    if query in wordsSet:\n        return True, query\n    return False, \\\"\\\"\n\ndef capitalization(query, lowerWordsSet):\n    if query.lower() in lowerWordsSet:\n        return True, lowerWordsSet[query.lower()]\n    return False, \\\"\\\"\n\ndef vowelErrors(query, lowerAndWithoutVowelsSet):\n    vowelsRemoved = query.lower().replace('a', '*').replace('e', '*').replace('i', '*').replace('o', '*').replace('u', '*')\n    if vowelsRemoved in lowerAndWithoutVowelsSet:\n        return True, lowerAndWithoutVowelsSet[vowelsRemoved]\n    return False,  \\\"\\\"          \n\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        answer = []\n        wordsSet = set(wordlist)\n        lowerWordsList = {}\n        lowerAndWithoutVowelsSet = {}\n        for word in wordlist:\n            lowerWordsList.setdefault(word.lower(), word)\n            vowelsRemoved = word.lower().replace('a', '*').replace('e', '*').replace('i', '*').replace('o', '*').replace('u', '*')\n            lowerAndWithoutVowelsSet.setdefault(vowelsRemoved, word)\n        \n        for i, query in enumerate(queries):\n            res, toAdd = match(query, wordsSet)\n            if res:\n                answer.append(toAdd)\n            else:\n                res, toAdd = capitalization(query, lowerWordsList)\n                if res:\n                    answer.append(toAdd)\n                else:\n                    res, toAdd = vowelErrors(query, lowerAndWithoutVowelsSet)\n                    if res:\n                        answer.append(toAdd)\n                    else:\n                        answer.append(\\\"\\\")\n        return answer", "\n\nclass Trie:\n    def __init__(self):        \n        self.cache = defaultdict(str)\n        self.exacts = defaultdict(str)\n        self.novowels = defaultdict(str)\n        self.vowels = set('aeiou')\n                \n    def novo(self, word):\n        word = word.lower()\n        grp = list(word)\n        for i,g in enumerate(grp):\n            if g in self.vowels:\n                grp[i] = '*'\n        out = ''.join(grp)\n        return out\n\n    def add(self, word):    \n        lowered = word.lower()\n        if lowered not in self.cache:\n            self.cache[lowered] = word\n            \n        self.exacts[word] = word\n\n        nvwl = self.novo(word)\n        if nvwl not in self.novowels:            \n            self.novowels[nvwl] = word\n        \n        \n    def search(self, word):                    \n        if word in self.exacts:\n            return word\n        \n        lowered = word.lower()\n        if lowered in self.cache:\n            return self.cache[lowered]\n        \n        novowels = self.novo(word)\n        if novowels in self.novowels:\n            # print(word, novo(word), self.novowels[self.novo(word)])\n            return self.novowels[novowels]\n        \n        \n        return \\\"\\\"\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        tree = Trie()\n        \n        for word in wordlist:\n            tree.add(word)\n            \n        # out = []\n        # for q in queries:\n        #     res = tree.search(q)                            \n        #     out.append(res)\n        \n        # print(out)\n        return [tree.search(q) for q in queries]", "\n\nclass Trie:\n    def __init__(self):        \n        self.cache = defaultdict(str)\n        self.exacts = defaultdict(str)\n        self.novowels = defaultdict(str)\n        self.vowels = set('aeiou')\n                \n    def novo(self, word):\n        word = word.lower()\n        grp = list(word)\n        for i,g in enumerate(grp):\n            if g in self.vowels:\n                grp[i] = '*'\n        out = ''.join(grp)\n        return out\n\n    def add(self, words):\n        for word in words:\n            lowered = word.lower()\n            if lowered not in self.cache:\n                self.cache[lowered] = word\n\n            self.exacts[word] = word\n\n            nvwl = self.novo(word)\n            if nvwl not in self.novowels:            \n                self.novowels[nvwl] = word\n        \n        \n    def search(self, word):                    \n        if word in self.exacts:\n            return word\n        \n        lowered = word.lower()\n        if lowered in self.cache:\n            return self.cache[lowered]\n        \n        novowels = self.novo(word)\n        if novowels in self.novowels:\n            # print(word, novo(word), self.novowels[self.novo(word)])\n            return self.novowels[novowels]\n        \n        \n        return \\\"\\\"\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        tree = Trie()\n        \n        # for word in wordlist:\n        tree.add(wordlist)\n            \n        # out = []\n        # for q in queries:\n        #     res = tree.search(q)                            \n        #     out.append(res)\n        \n        # print(out)\n        return [tree.search(q) for q in queries]", "class Trie:\n    def __init__(self):        \n        self.cache = defaultdict(str)\n        self.exacts = defaultdict(str)\n        self.novowels = defaultdict(str)\n                \n    def novo(self, word):\n        grp = list(word)\n        for i,g in enumerate(grp):\n            if g.lower() in 'aeiou':\n                grp[i] = '*'\n        out = ''.join(grp)\n        out = out.lower()\n        return out\n\n    def add(self, word):        \n        if word.lower() not in self.cache:\n            self.cache[word.lower()] = word\n            \n        self.exacts[word] = word\n\n        nvwl = self.novo(word)\n        if nvwl not in self.novowels:            \n            self.novowels[nvwl] = word\n        \n        \n    def search(self, word, start=None):\n                    \n        if word in self.exacts and start is None:\n            return word\n        lowered = word.lower()\n        if lowered in self.cache and start is None:\n            return self.cache[lowered]\n        novowels = self.novo(word)\n        if novowels in self.novowels and start is None:\n            # print(word, novo(word), self.novowels[self.novo(word)])\n            return self.novowels[novowels]\n        \n        \n        return \\\"\\\"\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        tree = Trie()\n        \n        for word in wordlist:\n            tree.add(word)\n            \n        out = []\n        for q in queries:\n            res = tree.search(q)                            \n            out.append(res)\n        \n        # print(out)\n        return out", "class Solution:\n    def spellchecker(self, words, queries):\n        def vowels(s):\n            return ''.join('*' if c in 'AEIOU' else c for c in s)\n        wordset=set(words)\n        cap={w.upper():w for w in reversed(words)}\n        vow={vowels(w.upper()):w for w in reversed(words)}\n        \n        ans=[]\n        for q in queries:\n            if q in wordset:\n                ans.append(q)\n                continue\n            q=q.upper()\n            if q in cap:\n                ans.append(cap[q])\n                continue\n            q=vowels(q)\n            if q in vow:\n                ans.append(vow[q])\n                continue\n            ans.append('')\n        \n        return ans", "class Trie:\n    def __init__(self):        \n        self.cache = defaultdict(str)\n        self.exacts = defaultdict(str)\n        self.novowels = defaultdict(str)\n                \n    def novo(self, word):\n        grp = list(word)\n        vowels = set('aeiou')\n        for i,g in enumerate(grp):\n            if g.lower() in vowels:\n                grp[i] = '*'\n        out = ''.join(grp)\n        out = out.lower()\n        return out\n\n    def add(self, word):    \n        lowered = word.lower()\n        if lowered not in self.cache:\n            self.cache[lowered] = word\n            \n        self.exacts[word] = word\n\n        nvwl = self.novo(word)\n        if nvwl not in self.novowels:            \n            self.novowels[nvwl] = word\n        \n        \n    def search(self, word):\n                    \n        if word in self.exacts:\n            return word\n        \n        lowered = word.lower()\n        if lowered in self.cache:\n            return self.cache[lowered]\n        \n        novowels = self.novo(word)\n        if novowels in self.novowels:\n            # print(word, novo(word), self.novowels[self.novo(word)])\n            return self.novowels[novowels]\n        \n        \n        return \\\"\\\"\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        tree = Trie()\n        \n        for word in wordlist:\n            tree.add(word)\n            \n        # out = []\n        # for q in queries:\n        #     res = tree.search(q)                            \n        #     out.append(res)\n        \n        # print(out)\n        return [tree.search(q) for q in queries]", "class Trie:\n    def __init__(self):        \n        self.cache = defaultdict(str)\n        self.exacts = defaultdict(str)\n        self.novowels = defaultdict(str)\n                \n    def novo(self, word):\n        grp = list(word)\n        vowels = set('aeiou')\n        for i,g in enumerate(grp):\n            if g.lower() in vowels:\n                grp[i] = '*'\n        out = ''.join(grp)\n        out = out.lower()\n        return out\n\n    def add(self, word):        \n        if word.lower() not in self.cache:\n            self.cache[word.lower()] = word\n            \n        self.exacts[word] = word\n\n        nvwl = self.novo(word)\n        if nvwl not in self.novowels:            \n            self.novowels[nvwl] = word\n        \n        \n    def search(self, word, start=None):\n                    \n        if word in self.exacts and start is None:\n            return word\n        lowered = word.lower()\n        if lowered in self.cache and start is None:\n            return self.cache[lowered]\n        novowels = self.novo(word)\n        if novowels in self.novowels and start is None:\n            # print(word, novo(word), self.novowels[self.novo(word)])\n            return self.novowels[novowels]\n        \n        \n        return \\\"\\\"\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        tree = Trie()\n        \n        for word in wordlist:\n            tree.add(word)\n            \n        out = []\n        for q in queries:\n            res = tree.search(q)                            \n            out.append(res)\n        \n        # print(out)\n        return out", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        if len(queries) == 0:\n            return []\n        Perfect = set(wordlist)\n        Upper = {}\n        Vowel = {}\n        for word in wordlist:\n            l = word.lower()\n            if l not in Upper:\n                Upper[l] = word\n            temp = self.help(l)\n            if temp not in Vowel:\n                Vowel[temp] = word\n    \n        \n        ans = []\n        for word in queries:\n            t = word.lower()\n            temp = self.help(t)\n            if word in Perfect:\n                ans.append(word)\n            elif t in Upper:\n                ans.append(Upper[t])\n            elif temp in Vowel:\n                ans.append(Vowel[temp])\n            else:\n                ans.append(\\\"\\\")\n        \n        return ans\n        \n    def help(self, word):\n        return \\\"\\\".join('*' if c in 'aeiou' else c\n                           for c in word)\n        ", "class Trie:\n    def __init__(self):        \n        self.cache = defaultdict(str)\n        self.exacts = defaultdict(str)\n        self.novowels = defaultdict(str)\n                \n    def novo(self, word):\n        grp = list(word)\n        vowels = set('aeiou')\n        for i,g in enumerate(grp):\n            if g.lower() in vowels:\n                grp[i] = '*'\n        out = ''.join(grp)\n        out = out.lower()\n        return out\n\n    def add(self, word):        \n        if word.lower() not in self.cache:\n            self.cache[word.lower()] = word\n            \n        self.exacts[word] = word\n\n        nvwl = self.novo(word)\n        if nvwl not in self.novowels:            \n            self.novowels[nvwl] = word\n        \n        \n    def search(self, word):\n                    \n        if word in self.exacts:\n            return word\n        \n        lowered = word.lower()\n        if lowered in self.cache:\n            return self.cache[lowered]\n        \n        novowels = self.novo(word)\n        if novowels in self.novowels:\n            # print(word, novo(word), self.novowels[self.novo(word)])\n            return self.novowels[novowels]\n        \n        \n        return \\\"\\\"\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        tree = Trie()\n        \n        for word in wordlist:\n            tree.add(word)\n            \n        out = []\n        for q in queries:\n            res = tree.search(q)                            \n            out.append(res)\n        \n        # print(out)\n        return out", "class Node:\n    def __init__(self):\n        self.kids = defaultdict(Node)\n        self.words = []\nclass Trie:\n    def __init__(self):\n        self.head = Node()\n        self.cache = defaultdict(str)\n        self.exacts = defaultdict(str)\n        self.novowels = defaultdict(str)\n        self.time = 0\n        self.sortkey = {}\n                \n    def novo(self, word):\n        grp = list(word)\n        for i,g in enumerate(grp):\n            if g.lower() in 'aeiou':\n                grp[i] = '*'\n            else:\n                grp[i] = grp[i].lower()\n        return ''.join(grp)\n\n    def add(self, word):\n        curr = self.head\n        if word.lower() not in self.cache:\n            self.cache[word.lower()] = word\n            \n        self.exacts[word] = word\n\n        nvwl = self.novo(word)\n        if nvwl not in self.novowels:            \n            self.novowels[nvwl] = word\n        \n        \n    def search(self, word, start=None):\n                    \n        if word in self.exacts and start is None:\n            return word\n        lowered = word.lower()\n        if lowered in self.cache and start is None:\n            return self.cache[lowered]\n        novowels = self.novo(word)\n        if novowels in self.novowels and start is None:\n            # print(word, novo(word), self.novowels[self.novo(word)])\n            return self.novowels[novowels]\n        \n        \n        return \\\"\\\"\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        tree = Trie()\n        \n        for word in wordlist:\n            tree.add(word)\n            \n        out = []\n        for q in queries:\n            res = tree.search(q)                            \n            out.append(res)\n        \n        # print(out)\n        return out", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        def insert(word, trie):\n            node = trie\n            for letter in word:\n                if letter in 'aeouiAEOUI':\n                    key = '*'\n                else:\n                    key = letter.lower()\n                if not key in node:\n                    node[key] = {}\n                node = node[key]\n            if not '$' in node:\n                node['$'] = OrderedDict() \n            node['$'][word] = True\n            \n        def find(word, trie):\n            node = trie\n            matched = ''\n            for letter in word:\n                if letter in 'aeouiAEOUI':\n                    key = '*'\n                else:\n                    key = letter.lower()\n                if not key in node:\n                    return matched\n                node = node[key]\n            if '$' in node:\n                if word in node['$']:\n                    return word\n                else:\n                    k = 0\n                    for word_i in node['$'].keys():\n                        if k == 0:\n                            matched = word_i\n                        if word.lower() == word_i.lower():\n                            return word_i\n                        k += 1\n                    return matched\n            else:\n                return matched\n\n            \n        trie = {}\n        for i, word in enumerate(wordlist):\n            insert(word, trie)\n        ans = []    \n        for q in queries:\n            ans.append(find(q, trie))\n        \n        return ans", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        \n        vowel_template = lambda w: w.lower().replace(\\\"a\\\", \\\"#\\\").replace(\\\"e\\\", \\\"#\\\").replace(\\\"i\\\", \\\"#\\\").replace(\\\"o\\\", \\\"#\\\").replace(\\\"u\\\", \\\"#\\\")\n        \n        exact_matches = set(wordlist)\n        capital_matches = {w.lower() : w for w in wordlist[::-1]}\n        vowel_matches = {vowel_template(w) : w for w in wordlist[::-1]}\n        \n        \n        return [w if w in exact_matches else capital_matches.get(w.lower(), \\\"\\\") or vowel_matches.get(vowel_template(w), \\\"\\\") for w in queries]", "class Solution:    \n    def __init__(self):\n        self.words = set()\n        self.dict_cap = {}\n        self.dict_vowel = {}\n        \n    def _populate_dicts(self, wordlist):\n        for word in wordlist:\n            self.words.add(word)\n            self.dict_cap[word.lower()] = self.dict_cap.setdefault(word.lower(), word)\n            self.dict_vowel[self._jokerize_vowels(word.lower())] = self.dict_vowel.setdefault(self._jokerize_vowels(word.lower()), word)\n        print(self.dict_vowel)\n    \n    def _jokerize_vowels(self, word):\n        return \\\"\\\".join(\\\"*\\\" if l.lower() in \\\"aeiou\\\" else l for l in word)\n    \n    def check_word(self, word):\n        if word in self.words:\n                return word\n            \n        elif (word := word.lower()) in self.dict_cap:\n            return self.dict_cap[word]\n\n        elif (word := self._jokerize_vowels(word)) in self.dict_vowel:\n            return self.dict_vowel[word]\n\n        else:\n            return \\\"\\\"\n    \n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        self._populate_dicts(wordlist)\n\n        return [self.check_word(q) for q in queries]", "class Solution(object):\n    def spellchecker(self, wordlist, queries):\n        def devowel(word):\n            return \\\"\\\".join('*' if c in 'aeiou' else c\n                           for c in word)\n\n        words_perfect = set(wordlist)\n        words_cap = {}\n        words_vow = {}\n\n        for word in wordlist:\n            wordlow = word.lower()\n            words_cap.setdefault(wordlow, word)\n            words_vow.setdefault(devowel(wordlow), word)\n\n        def solve(query):\n            if query in words_perfect:\n                return query\n\n            queryL = query.lower()\n            if queryL in words_cap:\n                return words_cap[queryL]\n\n            queryLV = devowel(queryL)\n            if queryLV in words_vow:\n                return words_vow[queryLV]\n            return \\\"\\\"\n\n        return map(solve, queries)", "class Trie:\n    def __init__(self):        \n        self.cache = defaultdict(str)\n        self.exacts = defaultdict(str)\n        self.novowels = defaultdict(str)\n                \n    def novo(self, word):\n        grp = list(word)\n        for i,g in enumerate(grp):\n            if g.lower() in set('aeiou'):\n                grp[i] = '*'\n        out = ''.join(grp)\n        out = out.lower()\n        return out\n\n    def add(self, word):        \n        if word.lower() not in self.cache:\n            self.cache[word.lower()] = word\n            \n        self.exacts[word] = word\n\n        nvwl = self.novo(word)\n        if nvwl not in self.novowels:            \n            self.novowels[nvwl] = word\n        \n        \n    def search(self, word, start=None):\n                    \n        if word in self.exacts and start is None:\n            return word\n        lowered = word.lower()\n        if lowered in self.cache and start is None:\n            return self.cache[lowered]\n        novowels = self.novo(word)\n        if novowels in self.novowels and start is None:\n            # print(word, novo(word), self.novowels[self.novo(word)])\n            return self.novowels[novowels]\n        \n        \n        return \\\"\\\"\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        tree = Trie()\n        \n        for word in wordlist:\n            tree.add(word)\n            \n        out = []\n        for q in queries:\n            res = tree.search(q)                            \n            out.append(res)\n        \n        # print(out)\n        return out", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        def canonicalize(word: str) -> str:\n            chars = list(word.lower())\n            for i in range(len(chars)):\n                if chars[i] in ['a', 'e', 'i', 'o', 'u']:\n                    chars[i] = '.'\n\n            return ''.join(chars)\n\n        def remove_vowel(word: str) -> str:\n            chars = list(word)\n            for i in range(len(chars)):\n                if chars[i] in ['a', 'e', 'i', 'o', 'u']:\n                    chars[i] = '.'\n                    \n            return ''.join(chars)\n            \n        lowercase_wordlist = {}\n        for i in range(len(wordlist)-1, -1, -1):\n            word = wordlist[i]\n            lowercase_wordlist[word.lower()] = i\n            \n        antivowel = {}\n        for i in range(len(wordlist)-1, -1, -1):\n            word = remove_vowel(wordlist[i].lower())\n            antivowel[word] = i\n        \n        # canonical_wordlist = [canonicalize(word) for word in wordlist]\n        # print(canonical_wordlist)\n        wordlist_lookup = {}\n        for i in range(len(wordlist)-1, -1, -1):\n            wordlist_lookup[wordlist[i]] = i\n\n        def solve(query):\n            #canonical_query = canonicalize(query)\n            if query in wordlist_lookup:\n                return query\n            elif query.lower() in lowercase_wordlist:\n                return wordlist[lowercase_wordlist[query.lower()]]\n            elif remove_vowel(query.lower()) in antivowel:\n                return wordlist[antivowel[remove_vowel(query.lower())]]\n            else:\n                return \\\"\\\"\n        \n        return [solve(query) for query in queries]\n", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n\n        def wild_key(word):\n            return \\\"\\\".join([\\\"*\\\" if c in vowels else c for c in word])\n        \n        vowels = {'a', 'e', 'i', 'o', 'u'}\n        hs_word = set(); hs_lower = defaultdict(); hs_wild = defaultdict()\n        for word in wordlist:\n            hs_word.add(word)\n            \n            low_word = word.lower()\n            if low_word not in hs_lower: hs_lower[low_word] = word\n            \n            wild_word = wild_key(low_word)\n            if wild_word not in hs_wild: hs_wild[wild_word] = word\n        \n        res = []\n        for query in queries:\n            low_query  = query.lower()\n            wild_query = wild_key(low_query)\n            \n            if   query      in hs_word : res.append(query)\n            elif low_query  in hs_lower: res.append(hs_lower[low_query ])\n            elif wild_query in hs_wild : res.append(hs_wild [wild_query])\n            else                       : res.append(\\\"\\\")\n        return res\n\\\"\\\"\\\"\n- problem\n  * return word list, res[i]: correct word for query = queries[i]\n\n- constraints & notes\n  * n: len(wordlist)  , len(queries)   ; 1 <= n <= 5000\n  * m: len(wordlist[i], len(queries[i]); 1 <= m <= 7\n  * english letters\n\n- solution\n  * algorithm\n    - \n    - \n    - precedence rules\n      * query: exactly match -> return same word\n      * query: matches w/ a workd up to capitalization, first such match in wordlist\n      * query: matches w/ vowel error, return first match\n      * no match: empty\n    - helper\n      * check capitalization\n        - hash table: all wordlist\n          hash table {\\\"k*t*\\\": [\\\"KiTe\\\", \\\"kite\\\" -> ordered with same order w/ wordlist]}\n          query     : kite w/ k*t*\n          * find if query in hash table\n            - return first such match\n      * check vowel error \n        * \n    \n\\\"\\\"\\\"        ", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        st, cap, vow = set(wordlist), {}, {}\n        for w in wordlist:\n            newC = w.lower()\n            newW = \\\"\\\".join(c if c not in \\\"aeiou\\\" else \\\"*\\\" for c in newC)\n            if newC not in cap:\n                cap[newC] = w\n            if newW not in vow:\n                vow[newW] = w\n        for i, w in enumerate(queries):\n            if w in st:\n                continue\n            elif w.lower() in cap:\n                queries[i] = cap[w.lower()]\n            else:\n                new = \\\"\\\".join(c if c not in \\\"aeiou\\\" else \\\"*\\\" for c in w.lower())\n                if new in vow:\n                    queries[i] = vow[new]\n                else:\n                    queries[i] = \\\"\\\"\n        return queries\n        ", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        cache = {}\n        words = set()\n        vowels = set(['a', 'e', 'i', 'o', 'u'])\n        for w in wordlist:\n            words.add(w)\n            \n            if w not in cache:\n                cache[w] = w\n                \n            lowercase = w.lower()\n            if lowercase not in cache:\n                cache[lowercase] = w\n                \n            imd_w = lowercase\n            for i, ch in enumerate(w):\n                if ch.lower() in vowels:\n                    imd_w = imd_w[:i] + '*' + imd_w[i + 1:]\n            if imd_w not in cache:\n                cache[imd_w] = w\n            \n        # print(cache)\n        res = []\n        for q in queries:\n            # print(q)\n            if q in words:\n                res.append(q)\n            else:\n                lowercase = q.lower()\n                if lowercase in cache:\n                    res.append(cache[lowercase])\n                else:\n                    imd_w = lowercase\n                    for i, ch in enumerate(q):\n                        if ch.lower() in vowels:\n                            imd_w = imd_w[:i] + '*' + imd_w[i + 1:]\n                    # print(imd_w)\n                    if imd_w in cache:\n                        res.append(cache[imd_w])\n                    else:\n                        res.append('')\n        return res\n        # deal with Capitalization issue\n", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        words_set=set(wordlist)\n        \n        vowelLookUp={\n            \n        }\n        lowerLookUp={}\n        \n        vowels=[\\\"a\\\",\\\"e\\\",\\\"i\\\",\\\"o\\\",\\\"u\\\"]\n        \n        for word in wordlist:\n            temp=\\\"\\\"\n            lowercase=word.lower()\n            if lowercase not in lowerLookUp:\n                lowerLookUp[lowercase]=word\n            for i in range(len(lowercase)):\n                if lowercase[i] not in vowels:\n                    temp+=lowercase[i]\n                else:\n                    temp+=\\\"*\\\"\n            if temp not in vowelLookUp:\n                vowelLookUp[temp]=word\n        \n        result=[]\n        for query in queries:\n            if query in words_set:\n                result.append(query)\n                continue\n            elif query.lower() in lowerLookUp:\n                result.append(lowerLookUp[query.lower()])\n                continue\n            masked_query=\\\"\\\"\n            query=query.lower()\n            for i in range(len(query)):\n                if query[i] not in vowels:\n                    masked_query+=query[i]\n                else:\n                    masked_query+=\\\"*\\\"\n            if masked_query in  vowelLookUp:\n                result.append(vowelLookUp[masked_query])\n            else:\n                result.append(\\\"\\\")\n        return result\n        \n        ", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        def devowel(word):\n            return \\\"\\\".join('*' if c in 'aeiou' else c\n                           for c in word)\n\n        words_perfect = set(wordlist)\n        words_cap = {}\n        words_vow = {}\n\n        for word in wordlist:\n            wordlow = word.lower()\n            words_cap.setdefault(wordlow, word)\n            words_vow.setdefault(devowel(wordlow), word)\n\n        def solve(query):\n            if query in words_perfect:\n                return query\n\n            queryL = query.lower()\n            if queryL in words_cap:\n                return words_cap[queryL]\n\n            queryLV = devowel(queryL)\n            if queryLV in words_vow:\n                return words_vow[queryLV]\n            return \\\"\\\"\n\n        return map(solve, queries)", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        wd_raw = set(wordlist)\n        wd_low = {}\n        wd_vow = {}\n        \n        for w in wordlist:\n            wdLo = w.lower()\n            wd_low.setdefault(wdLo, w)\n            wd_vow.setdefault(self.devowel(wdLo), w)\n\n        res = []\n        \n        \n        for i,wd in enumerate(queries):\n            qLow = wd.lower()\n            qVow = self.devowel(qLow)\n            \n            if wd in wd_raw:\n                res.append(wd)\n            \n            elif qLow in wd_low:\n                res.append(wd_low[qLow])\n                \n            elif qVow in wd_vow:\n                res.append(wd_vow[qVow])\n                \n            else:\n                res.append(\\\"\\\")\n                \n        return res\n    \n    def devowel(self, wd):\n        res = []\n        for ch in wd:\n            if ch in \\\"aeiou\\\":\n                res.append(\\\"#\\\")\n            else:\n                res.append(ch)\n                \n        return \\\"\\\".join(res)\n        \n        ", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        exact = {word: word for word in wordlist}\n        caps = {word.lower(): word for word in wordlist[::-1]}\n        vowel = defaultdict(lambda: '')\n        \n        _vowels = set('aeiou')\n        for word in wordlist[::-1]:\n            orig_word, word = word, word.lower()\\\\\n                                        .replace('a', '$')\\\\\n                                        .replace('e', '$')\\\\\n                                        .replace('i', '$')\\\\\n                                        .replace('o', '$')\\\\\n                                        .replace('u', '$')\n            vowel[word] = orig_word\n                \n        ans = deque()\n        for query in queries:\n            if query in exact:\n                ans.append(exact[query])\n            elif query.lower() in caps:\n                ans.append(caps[query.lower()])\n            else:\n                query = query.lower().replace('a', '$')\\\\\n                                    .replace('e', '$')\\\\\n                                    .replace('i', '$')\\\\\n                                    .replace('o', '$')\\\\\n                                    .replace('u', '$')\n                \n                ans.append(vowel[query])\n        return ans", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        words = {w: w for w in wordlist}\n        low ={w.lower(): w for w in wordlist[::-1]}\n        vowel = {re.sub(\\\"[aeiou]\\\",'#',w.lower()): w for w in wordlist[::-1]}\n        return [words.get(w) or low.get(w.lower()) or vowel.get(re.sub(\\\"[aeiou]\\\",'#',w.lower()),\\\"\\\") for w in queries]", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        self.wordset = set(wordlist)\n        self.worddict_capitalized = {w.upper() : w for w in wordlist[::-1]}\n        self.worddict_vowels = {self.replace_vowels(w.upper()) : w for w in wordlist[::-1]}\n        \n        #print(self.worddict_vowels)\n        \n        return [self.correct(q) for q in queries]\n    \n    def correct(self, q):\n        if q in self.wordset:\n            return q\n        \n        if q.upper() in self.worddict_capitalized:\n            return self.worddict_capitalized[q.upper()]\n\n        if self.replace_vowels(q.upper()) in self.worddict_vowels:\n            return self.worddict_vowels[self.replace_vowels(q.upper())]\n        \n        return \\\"\\\"\n    \n    def replace_vowels(self, q):\n        return q.replace(\\\"A\\\", \\\"!\\\").replace(\\\"E\\\", \\\"!\\\").replace(\\\"I\\\", \\\"!\\\").replace(\\\"O\\\", \\\"!\\\").replace(\\\"U\\\", \\\"!\\\")\n", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        set_case_sensitive = set()\n        dict_case_insensitive = {}\n        dict_case_vowel_insensitive = {}\n                \n        def replace_all(text):\n            for c in \\\"aeiou\\\":\n                text = text.replace(c, '*')\n            return text\n        \n        for w in wordlist:\n            set_case_sensitive.add(w)\n            lw = w.lower()\n            if lw not in dict_case_insensitive:\n                dict_case_insensitive[lw] = w\n            lwv = replace_all(lw)\n            if lwv not in dict_case_vowel_insensitive:\n                dict_case_vowel_insensitive[lwv] = w \n            \n        res = []\n        for q in queries:\n            lq = q.lower()\n            if q in set_case_sensitive:\n                res.append(q)\n            elif lq in dict_case_insensitive:\n                res.append(dict_case_insensitive[lq])\n            else:\n                without_v = replace_all(lq)\n                if without_v in dict_case_vowel_insensitive:\n                    res.append(dict_case_vowel_insensitive[without_v])\n                else:\n                    res.append(\\\"\\\")\n                    \n        return res\n                \n        \n                ", "#replacing the vowels ('a', 'e', 'i', 'o', 'u') of the query word with any vowel individually\n#return the first such match in the wordlist.\n#important! Capitalization has a higher priority than Vowel Errors\n\n#backtrack + deque, O(n*4^l), O(4^l), TLE\n#notice that in all candidates, return the matched one with minimum index\n'''\nfrom collections import defaultdict, deque\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        if not wordlist or not queries:\n            return []\n        \n        hm = defaultdict(list)\n        for i, word in enumerate(wordlist):\n            hm[word].append(i)\n          \n        ans = []\n        for query in queries:\n            if query in hm:\n                ans.append(query)\n            else:\n                idx = self.capitalization(query, hm)\n                if idx != float('inf'):\n                    ans.append(wordlist[idx])\n                else:\n                    candidates = self.vowel_replace(query)\n                    j = 0\n                    min_idx = float('inf')\n                    while j < len(candidates):\n                        idx = self.capitalization(candidates[j], hm)\n                        min_idx = min(min_idx, idx)\n                        j += 1\n                    if min_idx != float('inf'):\n                        ans.append(wordlist[min_idx])\n                    else:\n                        ans.append('')\n        return ans\n                    \n                        \n    def capitalization(self, query, hm):\n        idx = float('inf')\n        for key in hm:\n            if query.lower() == key.lower():\n                idx = min(idx, hm[key][0])\n        return idx\n    \n    from collections import deque\n    def vowel_replace(self, query):\n        candidates = []\n        dq = deque([query.lower()])\n        visited = set([query])\n        while dq:\n            curr = dq.popleft()\n            candidates.append(curr)\n            for i, c in enumerate(curr):        #curr, not query\n                if c in 'aeiouAEIOU':       #c may be lower or upper\n                    for x in 'aeiou':\n                        if abs(ord(c) - ord(x)) != 32:  #c != x:\n                            candidate = curr[:i] + x + curr[i + 1:]\n                            if candidate.lower() not in visited:\n                                dq.append(candidate)\n                                visited.add(candidate.lower())\n        return candidates[1:]\n'''     \n\n#check Consonants, O(n^2 * l), O(n), TLE\n'''\nfrom collections import defaultdict\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        if not wordlist or not queries:\n            return []\n        \n        hm = defaultdict(list)\n        for i, word in enumerate(wordlist):\n            hm[word].append(i)\n          \n        ans = []\n        for query in queries:\n            if query in hm:\n                ans.append(query)\n            else:\n                idx = self.capitalization(query, hm)\n                if idx != float('inf'):\n                    ans.append(wordlist[idx])\n                else:\n                    idx = self.vowel_replace(query, hm)\n                    if idx != float('inf'):\n                        ans.append(wordlist[idx])\n                    else:\n                        ans.append('')\n        return ans\n                    \n                        \n    def capitalization(self, query, hm):\n        idx = float('inf')\n        for key in hm:\n            if query.lower() == key.lower():\n                idx = min(idx, hm[key][0])\n        return idx\n    \n    def vowel_replace(self, query, hm):\n        idx = float('inf')\n        for key in hm:\n            if self.is_matched(query, key):     #key, not query\n                idx = min(idx, hm[key][0])\n        return idx\n    \n    def is_matched(self, str1, str2):\n        if len(str1) != len(str2):\n            return False\n        i, j = 0, 0\n        while i < len(str1) and j < len(str2):\n            if str1[i] not in 'aeiouAEIOU' and abs(ord(str1[i]) - ord(str2[j])) not in [0, 32]:     #\u8f85\u97f3\u5b57\u6bcd\u4e5f\u53ef\u4ee5\u6709\u5927\u5c0f\u5199\n                return False\n            if str1[i] in 'aeiouAEIOU' and str2[j] not in 'aeiouAEIOU':\n                return False\n            i += 1\n            j += 1\n        return True\n'''\n\n#3 hashmap/hashset\nfrom collections import defaultdict\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        if not wordlist or not queries:\n            return []\n        \n        word_exact = set(wordlist)\n        word_capital = defaultdict(list)\n        word_vowel = defaultdict(list)\n        \n        for word in wordlist:\n            word_lower = word.lower()\n            word_capital[word_lower].append(word)\n            word_vowel[self.devowel(word_lower)].append(word)   #key is word_lower\n          \n        ans = []\n        for query in queries:\n            if query in word_exact:\n                ans.append(query)\n            else:\n                query_lower = query.lower()\n                if query_lower in word_capital:\n                    ans.append(word_capital[query_lower][0])\n                elif self.devowel(query_lower) in word_vowel:\n                    ans.append(word_vowel[self.devowel(query_lower)][0])\n                else:\n                    ans.append('')\n        return ans\n    \n    def devowel(self, word):\n        ans = ''\n        for i, c in enumerate(word):\n            if c in 'aeiou':\n                ans += '*'\n            else:\n                ans += c\n        return ans\n                    \n                        \n\n                \n        \n        \n            \n        \n                \n", "class Solution:\n    def spellchecker(self, w: List[str], q: List[str]) -> List[str]:\n        s = {i for i in w}\n        d = {w[i].lower(): i for i in range(len(w)-1, -1, -1)}\n        vowel = [\\\"a\\\", \\\"e\\\", \\\"i\\\", \\\"o\\\", \\\"u\\\"]\n        # print(d, s)\n        ans = []\n        def func(i):\n            n = len(i)\n            # print(n, i)\n            ls = [\\\"\\\"]\n            ind = float(\\\"inf\\\")\n            for j in range(n):\n                if i[j] in vowel:\n                    ls = [item+vow for item in ls for vow in vowel]\n                else:\n                    ls = [item+i[j] for item in ls]\n            # print(i, ls)\n            for item in ls:\n                if item in d:\n                    ind = min(ind, d[item])\n                if ind == 0:\n                    return ind\n            return ind\n        for i in q:\n            if i in s:\n                ans.append(i)\n                continue\n            i = i.lower()\n            if i in d:\n                ans.append(w[d[i]])\n                continue\n            flag = func(i)\n            # print(flag)\n            if flag == float(\\\"inf\\\"):\n                ans.append(\\\"\\\")\n            else:\n                ans.append(w[flag])\n        return ans", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        ww = set(wordlist)\n        d = {}\n        case = {}\n        trs = str.maketrans('aeiou', '*****')\n        for w in wordlist:\n            r = w.lower()\n            if r not in d:\n                d[r] = w\n            k = r.translate(trs)\n            if k not in case:\n                case[k] = w\n        res = []\n        for q in queries:\n            if q in ww:\n                res.append(q)\n            else:\n                x = q.lower()\n                if x in d:\n                    res.append(d[x])\n                else:\n                    y = x.translate(trs)\n                    if y in case:\n                        res.append(case[y])\n                    else:\n                        res.append('')\n        return res", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        dic1, dic2, dic3 = {}, {}, {}\n        for word in wordlist[::-1]:\n            dic1[word] = word\n            dic2[word.lower()] = word\n            dic3[re.sub('[aeiou]', '*', word.lower())] = word\n        return [dic1.get(q) or dic2.get(q.lower()) or dic3.get(re.sub('[aeiou]', '*', q.lower())) or \\\"\\\" for q in queries]\n        # for q in queries:\n        #     if q in dic1:\n        #         ans.append(q)\n        #         continue\n        #     elif q.lower() in dic2:\n        #         ans.append(dic2[q.lower()][0])\n        #         continue\n        #     elif re.sub('[aeiou]', '*', q.lower()) in dic3:\n        #         ans.append(dic3[re.sub('[aeiou]', '*', q.lower())][0])\n        #     else:\n        #         ans.append(\\\"\\\")\n        # # print(dic3)\n        # return ans", "def vowelprune(w):\n    vowels={'a','e','i','o','u'}\n    r=''\n    for i in w:\n        if i in vowels:r+='*'\n        else:r+=i\n    return r\ndef check(vow,se,fir,word):\n    \n    if word in se:return word\n    word=word.lower()\n    if word in fir:return fir[word]\n    l=len(word)\n    word=vowelprune(word)\n    if word in vow:return vow[word]\n    return \\\"\\\"\nclass Solution:\n    def spellchecker(self, w: List[str], q: List[str]) -> List[str]:\n        se=set(w)\n        fir={}\n        vow={}\n        for i in w:\n            z=i\n            i=i.lower()\n            if i not in fir:\n                fir[i]=z\n            j=vowelprune(i)\n            if j not in vow:\n                vow[j]=z\n        res=[]\n        for i in q:\n            res.append(check(vow,se,fir,i))\n        return res", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        all_words = set(wordlist)\n        lowered = {}\n        transformed = {}\n        \n        VOWELS = 'aeiou'\n        \n        def transform(word):\n            return ''.join(['_' if char in VOWELS else char for char in word])\n        \n        for word in wordlist:\n            lowered.setdefault(word.lower(), word)\n            transformed.setdefault(transform(word.lower()), word)\n        \n        res = []\n        for word in queries:\n            if word in all_words:\n                res.append(word)\n                continue\n            \n            low = word.lower()\n            if low in lowered:\n                res.append(lowered[low])\n                continue\n            \n            tran = transform(low)\n            if tran in transformed:\n                res.append(transformed[tran])\n            else:\n                res.append(\\\"\\\")\n        \n        return res", "import re\n\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        def vowel_norm(inword):\n            return re.sub(r\\\"[aeiou]\\\", \\\"a\\\", inword)\n\n        lookup_lower, lookup_vowel = {}, {}\n        for w in wordlist:\n            l = w.lower()\n            lookup_lower[l] = lookup_lower.get(l, []) + [w]\n            lv = vowel_norm(l)\n            lookup_vowel[lv] = lookup_vowel.get(lv, []) + [w]\n        wordlist = set(wordlist)\n\n        res = []\n        for q in queries:\n            qlow = q.lower()\n            qvowel = vowel_norm(qlow)\n            if q in wordlist:\n                res.append(q)\n            elif qlow in lookup_lower:\n                res.append(lookup_lower[qlow][0])\n            elif qvowel in lookup_vowel:\n                res.append(lookup_vowel[qvowel][0])\n            else:\n                res.append(\\\"\\\")\n        return res", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        vowels= {'a', 'e', 'i', 'o', 'u'}\n        output =[]\n        bucket = [[] for _ in range(8)]\n        signaturebucket = [{} for _ in range(8)]\n        \n        def makesignature(word):\n            result =0\n            index =0\n            for char in word:\n                num = ord(char)\n                if num < 97: #uppdercase -> lower:\n                    num = num + 32\n                if num == ord('a') or num == ord('i') or num == ord('e') or num == ord('o') or num == ord('u'):\n                    num =97 #originally 'a'              \n                num =num -97\n                result = result + 21**index * num\n                index +=1\n            return result\n        for word in wordlist:\n            bucket[len(word)].append(word)\n        for i in range(len(bucket)):\n            for word in bucket[i]:\n                signature = makesignature(word)\n                dic = signaturebucket[i]\n\n                if signature in dic:                    \n                    dic[signature].append(word)\n                else:\n                    dic[signature] = [word]\n\n        candidate = []\n        for query in queries:\n            if len(query) > 7:\n                output.append(\\\"\\\")\n                continue\n            querysignature = makesignature(query)\n            if len(signaturebucket[len(query)]) > 0:\n                if querysignature in signaturebucket[len(query)]:\n                    candidate = signaturebucket[len(query)][querysignature]\n            \n            if len(candidate) ==0:\n                output.append(\\\"\\\")\n                continue\n      \n            result=[3,\\\"\\\"]\n            for i, word in enumerate(candidate):\n\n                total=-1\n                for i in range(len(query)):\n                    if query[i] == word[i]:\n                        cur = 0\n                    elif query[i].lower() == word[i].lower():\n                        cur = 1\n                    elif query[i].lower() in vowels and word[i].lower() in vowels:\n                        cur = 2\n                    else:\n                        total = 3\n                        break\n                    if total == -1:\n                        total = cur\n                    elif total < cur:\n                        total = cur\n                if total < result[0]:\n                    result = [total, word]\n            output.append(result[1])\n            print (result[1])\n        return output", "vowels = {'a', 'e', 'i', 'o', 'u'}\n\n\nclass TrieNode:\n    def __init__(self):\n        self.ch = dict()\n        self.words = []\n        self.lower_words = defaultdict(list)\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        cur = self.root\n        for l in word:\n            lt = l.lower()\n            if lt in vowels:\n                lt = 'vowel'\n            if lt not in cur.ch:\n                cur.ch[lt] = TrieNode()\n            cur = cur.ch[lt]\n        cur.words.append(word)\n        cur.lower_words[word.lower()].append(word)\n\n    def search(self, word):\n        cur = self.root\n        for l in word:\n            lt = l.lower()\n            if lt in vowels:\n                lt = 'vowel'\n            if lt not in cur.ch:\n                return ''\n            cur = cur.ch[lt]\n        if not cur.words:\n            return ''\n        lw = word.lower()\n        if lw in cur.lower_words:\n            if word in cur.lower_words[lw]:\n                return word\n            return cur.lower_words[lw][0]\n        return cur.words[0]\n\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        trie = Trie()\n        for word in wordlist:\n            trie.insert(word)\n        return [trie.search(word) for word in queries]", "class Solution:\n    def spellchecker(self, wordlist,queries):\n        \n        def getWords(wordlist):\n            \n            dict = {}\n            \n            for i in range(len(wordlist)):\n                \n                if wordlist[i] not in dict:\n                    \n                    dict[wordlist[i]] = i\n                    \n            return dict\n        \n        def GetVowels(wordlist):\n            \n            dict = {}\n            \n            for i in range(len(wordlist)):\n                \n                word = GetWord(wordlist[i])\n                \n                if word not in dict:\n                    \n                    dict[word] = wordlist[i]\n                    \n            return dict\n            \n        \n        def GetCapital(wordlist):\n            \n            dict = {}\n            \n            for i in range(len(wordlist)):\n                \n                if wordlist[i].lower() not in dict:\n                    \n                    dict[wordlist[i].lower()] = wordlist[i]\n                    \n            return dict\n        \n        def helper(dict,word,ret):\n        \n            make = GetWord(word)\n            \n            return ret + [\\\"\\\"] if make not in dict else ret + [dict[make]]\n        \n        def GetWord(word):\n            \n            vowels = {\\\"a\\\":0,\\\"e\\\":0,\\\"i\\\":0,\\\"o\\\":0,\\\"u\\\":0}\n            word = word.lower()\n            \n            s = \\\"\\\"\n            \n            for i in range(len(word)):\n                \n                if word[i] in vowels:\n                    \n                    s += \\\"1\\\"\n                    \n                else:\n                    \n                    s += word[i]\n                    \n            return s\n                    \n        \n        ret = []\n        \n        words = getWords(wordlist)\n        vowels = GetVowels(wordlist)\n        capital = GetCapital(wordlist)\n        \n        for i in range(len(queries)):\n            \n            if queries[i] in words:\n                \n                ret.append(queries[i])\n                \n            elif queries[i].lower() in capital:\n                \n                ret.append(capital[queries[i].lower()])\n            \n            else:\n                \n                ret = helper(vowels,queries[i],ret)\n            \n        return ret\n        ", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        # 1. the same\n        # 2. case diff, all in lowercase then compare, hash of wordlist(low:orig.list)\n        # 3. vowel diff, same length, compare after removing? relative position info all aeiou with ' '? (compare all in lowercase)\n        \n        def rmvowel(word, iskeepcase=True):\n            outword = ''\n            word2 = word if iskeepcase else word.lower()\n            for char in word2:\n                if char in 'aeiou':\n                    outword += ' '\n                else:\n                    outword += char\n            return outword\n        \n        wordhash = defaultdict(list)\n        for word in wordlist:\n            wordhash[(word, 1)] = '' \n            wordhash[(word.lower(), 2)].append(word)\n            wordhash[(rmvowel(word, False), 3)].append(word)\n        \n        outq = []\n        for query in queries:\n            if (query, 1) in wordhash:\n                outq.append(query) # original format\n            elif (query.lower(), 2) in wordhash:\n                outq.append(wordhash[(query.lower(), 2)][0])\n            elif (rmvowel(query, False), 3) in wordhash:\n                outq.append(wordhash[(rmvowel(query, False), 3)][0])\n            else:\n                outq.append('')\n        return outq\n", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        def devowel(word):\n            return \\\"\\\".join('*' if c in 'aeiou' else c for c in word)\n\n        words_perfect = set(wordlist)\n        words_cap = {}\n        words_vow = {}\n\n        for word in wordlist:\n            wordlow = word.lower()\n            words_cap.setdefault(wordlow, word)\n            words_vow.setdefault(devowel(wordlow), word)\n\n        def solve(query):\n            if query in words_perfect:\n                return query\n\n            queryL = query.lower()\n            if queryL in words_cap:\n                return words_cap[queryL]\n\n            queryLV = devowel(queryL)\n            if queryLV in words_vow:\n                return words_vow[queryLV]\n            return \\\"\\\"\n\n        return map(solve, queries)", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        \n        m_cap = {}\n        for word in wordlist:\n            new_ = []\n            for c in word:\n                new_.append(c.lower())\n            new_ = ''.join(new_)\n            if new_ not in m_cap:\n                m_cap[new_] = word\n        # print(m_cap)\n        \n        m_devow = {}\n        for word in wordlist:\n            new_ = []\n            for c in word:\n                c = c.lower()\n                if c in set(['a','e','i','o','u']):\n                    c = '*'\n                new_.append(c.lower())\n            new_ = ''.join(new_)\n            if new_ not in m_devow:\n                m_devow[new_] = word\n        # print(m_devow)\n        \n        wordlist = set(wordlist)\n        \n        res = []\n        for query in queries:\n            if query in wordlist:\n                res.append(query)\n                continue\n            \n            lower_case = []\n            for c in query:\n                lower_case.append(c.lower())\n            lower_case = ''.join(lower_case)\n            if lower_case in m_cap:\n                res.append(m_cap[lower_case])\n                continue\n            \n            devowel = []\n            for c in query:\n                c = c.lower()\n                if c in set(['a','e','i','o','u']):\n                    c = '*'\n                devowel.append(c)\n            devowel = ''.join(devowel)\n            if devowel in m_devow:\n                res.append(m_devow[devowel])\n                continue\n            \n            res.append(\\\"\\\")\n        return res\n        \n                    ", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        s = set(wordlist)\n        d1 = {}\n        d2 = {}\n        for word in wordlist:\n            if word.lower() not in d1:\n                d1[word.lower()] = word\n                \n        for word in wordlist:\n            word1 = word.lower()\n            newWords = ['']\n            for c in word1:\n                newWords2 = []\n                for newWord in newWords:\n                    if c in 'aeiou':\n                        for ch in 'aeiou':\n                            newWords2.append(newWord + ch)\n                    else:\n                        newWords2.append(newWord + c)\n                newWords = newWords2\n            for newWord in newWords2:\n                if newWord not in d2:\n                    d2[newWord] = word\n                        \n        ans = []\n        for q in queries:\n            ql = q.lower()\n            if q in s:\n                ans.append(q)\n            elif ql in d1:\n                ans.append(d1[ql])\n            elif ql in d2:\n                ans.append(d2[ql])\n            else:\n                ans.append('')\n        return ans", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        res = []\n        # if totally same, then put that exact one\n        # if case-insensitively same, then earlier one\n        # check if indices for vowels are same, if same, then true\n        \n        vowels = [\\\"a\\\", \\\"e\\\", \\\"i\\\", \\\"o\\\", \\\"u\\\"]\n        \n        lookup = {}\n        for word in wordlist:\n            if not lookup.get(word.lower(), None):\n                lookup[word.lower()] = word\n                lookup[word] = word\n                preprocessed_word = \\\"\\\".join([\\\"#\\\" if letter.lower() in vowels else letter.lower() for letter in word])\n                if not lookup.get(preprocessed_word, None):\n                    lookup[preprocessed_word] = word\n            else:\n                if not lookup.get(word, None):\n                    lookup[word] = word\n        \n        \n        for query in queries:\n            # if totally same, then put that exact one\n            # the_word = lookup.get(query, None)\n            if query in lookup.keys() and query in wordlist:\n                res.append(query)\n                continue\n                \n            # if case-insensitively same, then earlier one\n            the_word = lookup.get(query.lower(), None)\n            if the_word:\n                res.append(the_word)\n                continue\n            \n            # check if indices for vowels are same, if same, then true\n            preprocessed_query = \\\"\\\".join([\\\"#\\\" if letter.lower() in vowels else letter.lower() for letter in query])\n            the_word = lookup.get(preprocessed_query, None)\n            if the_word:\n                res.append(the_word)\n                continue\n            \n            res.append(\\\"\\\")\n        \n        return res\n            ", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        res = []\n        # if totally same, then put that exact one\n        # if case-insensitively same, then earlier one\n        # check if indices for vowels are same, if same, then true\n        \n        vowels = [\\\"a\\\", \\\"e\\\", \\\"i\\\", \\\"o\\\", \\\"u\\\"]\n        \n        lookup = {}\n        for word in wordlist:\n            if not lookup.get(word.lower(), None):\n                lookup[word.lower()] = word\n                lookup[word] = word\n                preprocessed_word = \\\"\\\".join([\\\"#\\\" if letter.lower() in vowels else letter.lower() for letter in word])\n                if not lookup.get(preprocessed_word, None):\n                    lookup[preprocessed_word] = word\n            else:\n                if not lookup.get(word, None):\n                    lookup[word] = word\n        \n        for query in queries:\n            # if totally same, then put that exact one\n            # the_word = lookup.get(query, None)\n            if query in lookup.keys() and query in wordlist:\n                res.append(query)\n                continue\n                \n            # if case-insensitively same, then earlier one\n            the_word = lookup.get(query.lower(), None)\n            if the_word:\n                res.append(the_word)\n                continue\n            \n            # check if indices for vowels are same, if same, then true\n            preprocessed_query = \\\"\\\".join([\\\"#\\\" if letter.lower() in vowels else letter.lower() for letter in query])\n            the_word = lookup.get(preprocessed_query, None)\n            if the_word:\n                res.append(the_word)\n                continue\n            \n            res.append(\\\"\\\")\n        \n        print(lookup)\n            \n        return res\n            ", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        wordSet = set(wordlist)\n        res = []\n        words_dict = collections.defaultdict(list)\n        vowels = {'a', 'e', 'i', 'o', 'u'}\n        for i in range(len(wordlist)):\n            word = wordlist[i]\n            words_dict[word.lower()].append(i)\n            wild_word = word.lower()\n            for vowel in vowels:\n                wild_word = wild_word.replace(vowel, '*')\n            words_dict[wild_word.lower()].append(i)\n        print(words_dict)\n        for query in queries:\n            wild_query = query.lower()\n            for vowel in vowels:\n                wild_query = wild_query.replace(vowel, '*')                    \n            if query in wordSet:\n                res.append(query)\n            elif query.lower() in words_dict:\n                res.append(wordlist[words_dict[query.lower()][0]])\n            elif wild_query.lower() in words_dict:\n                res.append(wordlist[words_dict[wild_query.lower()][0]])\n            else:\n                res.append(\\\"\\\")\n        return res", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        res = []\n        # if totally same, then put that exact one\n        # if case-insensitively same, then earlier one\n        # check if indices for vowels are same, if same, then true\n        \n        vowels = [\\\"a\\\", \\\"e\\\", \\\"i\\\", \\\"o\\\", \\\"u\\\"]\n        \n        lookup = {}\n        for word in wordlist:\n            if not lookup.get(word.lower(), None):\n                lookup[word.lower()] = word\n                lookup[word] = word\n                preprocessed_word = \\\"\\\".join([\\\"#\\\" if letter.lower() in vowels else letter.lower() for letter in word])\n                if not lookup.get(preprocessed_word, None):\n                    lookup[preprocessed_word] = word\n            else:\n                if not lookup.get(word, None):\n                    lookup[word] = word\n        \n        for query in queries:\n            # if totally same, then put that exact one\n            # the_word = lookup.get(query, None)\n            if query in lookup.keys() and query in wordlist:\n                res.append(query)\n                continue\n                \n            # if case-insensitively same, then earlier one\n            the_word = lookup.get(query.lower(), None)\n            if the_word:\n                res.append(the_word)\n                continue\n            \n            # check if indices for vowels are same, if same, then true\n            preprocessed_query = \\\"\\\".join([\\\"#\\\" if letter.lower() in vowels else letter.lower() for letter in query])\n            print(preprocessed_query)\n            the_word = lookup.get(preprocessed_query, None)\n            if the_word:\n                res.append(the_word)\n                continue\n            \n            res.append(\\\"\\\")\n        \n        print(lookup)\n            \n        return res\n            ", "from collections import defaultdict\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        VOWELS = {\\\"a\\\", \\\"e\\\", \\\"i\\\", \\\"o\\\", \\\"u\\\"}\n        \n        wordDict = {}\n        for i in range(0, len(wordlist)):\n            wordDict[wordlist[i]] = i\n            \n        wordIDict = defaultdict(list)\n        for i in range(0, len(wordlist)):\n            word = wordlist[i]\n            wordIDict[word.lower()].append((i, word))\n            \n        ret = []\n        \n        \n        def findByReplace(i, q):\n            if i >= len(q): \n                return (len(wordlist), \\\"\\\")\n            \n            found = \\\"\\\"\n            best = len(wordlist)\n            if q[i] in VOWELS:\n                for c in VOWELS:\n                    q[i] = c\n                    qword = ''.join(q)\n                    if qword in wordIDict:\n                        (n, word) = wordIDict[qword][0]\n                        if n < best:\n                            found = word\n                            best = n\n                    (n, word) = findByReplace(i+1, q)\n                    if n < best:\n                        found = word\n                        best = n\n            else:\n                return findByReplace(i+1, q)\n            \n            return (best, found)\n\n        \n        \n        for query in queries:\n            if query in wordDict:\n                ret.append(query)\n            elif query.lower() in wordIDict:\n                ret.append(wordIDict[query.lower()][0][1])\n            else:  \n                ret.append(findByReplace(0, list(query.lower()))[1])\n            \n        return ret", "\\\"\\\"\\\"\nMatch exact, return exact\nMatch up to capitalizaion, return first\nMatch up to vowel error, return first\nReturn ''\n\\\"\\\"\\\"\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        \n        caps = {}\n        vowels = {}\n        setwordlist = set(wordlist)\n        \n        for i in wordlist:\n            cap = i.lower()\n            vowel = ''.join(['*' if x in 'aeiou' else x for x in i.lower()])\n            if cap not in caps:\n                caps[cap] = i\n            if  vowel not in vowels:\n                vowels[vowel] = i\n            \n        print(caps, vowels)\n        \n        ans = []\n        \n        for i in queries:\n            cap = i.lower()\n            vowel = ''.join(['*' if x in 'aeiou' else x for x in i.lower()])\n            if i in setwordlist:\n                ans.append(i)\n            elif cap in caps:\n                for x in caps:\n                    if x == cap:\n                        ans.append(caps[x])\n                        break\n            elif vowel in vowels:\n                for x in vowels:\n                    if x == vowel:\n                        ans.append(vowels[x])\n                        break\n            else:\n                ans.append('')\n            \n        return ans", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        \n        vowels = set('aeiou')\n        \n        # Map lowercase words to word\n        w = collections.defaultdict(list)\n        for word in wordlist:\n            w[word.lower()].append(word)\n            \n        # Map (vowel_count, len_word) to lowercase vowel-less words : word\n        v = collections.defaultdict(list)\n        vl = collections.defaultdict(list)\n        for k in w:\n            vowel_less = ''.join(char for char in k if char not in vowels)\n            v[(len(vowel_less), len(k))].append(vowel_less)\n            vl[vowel_less].append(k)\n        \n        res = []\n        for q in queries:\n            \n            # 1. Case sensitive check\n            k = q.lower()\n            if k in w:\n                res.append(q if (q in w[k]) else w[k][0])\n                continue\n                \n            # 2. Vowel check\n            vowel_less = ''.join(char for char in k if char not in vowels)\n            if vowel_less in v[(len(vowel_less), len(k))]:\n                for word in vl[vowel_less]:\n                    if len(word) == len(k):\n                        for a,b in zip(word,k):\n                            if (a in vowels) != (b in vowels):\n                                break\n                        else:\n                            res.append(w[word][0])\n                            break\n                else:\n                    res.append(\\\"\\\")\n            else:\n                res.append(\\\"\\\")\n        \n        return res", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        \n        caps = {}\n        vowels = {}\n        setwordlist = set(wordlist)\n        \n        for i in wordlist:\n            cap = i.lower()\n            vowel = ''.join(['*' if x in 'aeiou' else x for x in i.lower()])\n            if cap not in caps:\n                caps[cap] = i\n            if  vowel not in vowels:\n                vowels[vowel] = i\n            \n        print(caps, vowels)\n        \n        ans = []\n        \n        for i in queries:\n            cap = i.lower()\n            vowel = ''.join(['*' if x in 'aeiou' else x for x in i.lower()])\n            if i in setwordlist:\n                ans.append(i)\n            elif cap in caps:\n                for x in caps:\n                    if x == cap:\n                        ans.append(caps[x])\n                        break\n            elif vowel in vowels:\n                for x in vowels:\n                    if x == vowel:\n                        ans.append(vowels[x])\n                        break\n            else:\n                ans.append('')\n            \n        return ans", "class TrieNode:\n    def __init__(self):\n        self.isWord = False\n        self.children = {}\n        self.wordMatches = []\nclass SpellCheckTrie:\n\n    def __init__(self):\n        self.root = TrieNode()\n        self.exactRoot = TrieNode()\n        self.vowelRoot = TrieNode()\n\n\n    def addWord(self, word):\n\n        it = self.root\n        exactIt = self.exactRoot\n        vowelIt = self.vowelRoot\n\n        for c in word:\n            loweredChar = ord(c) | 32\n\n\n            vowNormalizedChar = loweredChar\n            if c in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n                vowNormalizedChar = -1 # We use a unique index to reference all vowels\n            childNode = it.children.get(loweredChar)\n            exactChildNode = exactIt.children.get(ord(c))\n            vowelChildNode = vowelIt.children.get(vowNormalizedChar)\n\n            if not childNode:\n                childNode = TrieNode()\n                it.children[loweredChar] = childNode\n            if not exactChildNode:\n                exactChildNode = TrieNode()\n                exactIt.children[ord(c)] = exactChildNode\n\n            if not vowelChildNode:\n                vowelChildNode = TrieNode()\n                vowelIt.children[vowNormalizedChar] = vowelChildNode    \n\n            it = childNode\n            exactIt = exactChildNode\n            vowelIt = vowelChildNode\n\n        it.isWord = True\n        it.wordMatches.append(word)\n        exactIt.isWord = True\n        vowelIt.isWord = True\n        vowelIt.wordMatches.append(word)\n\n    def searchWord(self, word):\n        it = self.root\n        exactIt = self.exactRoot\n        vowelIt = self.vowelRoot\n\n        for c in word:\n            loweredChar = ord(c) | 32\n            vowNormalizedChar = loweredChar\n            if c in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n                vowNormalizedChar = -1\n        \n            \n            if it:\n                childNode = it.children.get(loweredChar)\n            if exactIt:\n                exactChildNode = exactIt.children.get(ord(c))\n            if vowelIt:\n                vowelChildNode = vowelIt.children.get(vowNormalizedChar)\n\n            if childNode:\n                it = childNode\n            else:\n                it = None\n            if exactChildNode:\n                exactIt = exactChildNode\n            else:\n                exactIt = None\n                \n            if vowelChildNode:\n                vowelIt = vowelChildNode\n            else:\n                vowelIt = None\n\n        if exactIt and exactIt.isWord:\n            return word\n\n        if it and it.isWord:\n            return it.wordMatches[0]\n\n        if vowelIt and vowelIt.isWord:\n            return vowelIt.wordMatches[0]\n\n        return \\\"\\\"\n    \n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        trie = SpellCheckTrie()\n        for word in wordlist:\n            trie.addWord(word)\n            \n        return [trie.searchWord(q) for q in queries]\n            \n        ", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        words_ori = {}\n        words_cap = {}\n        words_vowel = {}\n        \n        vowel = ['a', 'e', 'i', 'o', 'u']\n        \n        def gen_vowel(cur, val, pos):\n            if pos >= len(cur):\n                return\n            if cur[pos] in vowel:\n                for i in vowel:\n                    if i != cur[pos]:\n                        key = (cur[0:pos] + i + cur[pos+1:]).lower()\n                        try:\n                            if words_vowel[key]:\n                                continue\n                        except:\n                            words_vowel[key] = val\n                        gen_vowel(key, val, pos+1)\n            gen_vowel(cur, val, pos+1)\n        \n        for i in wordlist:\n            words_ori[i] = i\n            temp = i[:]\n            gen_vowel(temp, i, 0)\n            try:\n                if words_cap[temp.lower()]:\n                    continue\n            except:\n                temp = temp.lower()\n                words_cap[temp] = i\n                \n        # print(words_ori, words_cap, words_vowel)\n        \n        ans = []\n        for i in queries:\n            try:\n                if words_ori[i]:\n                    ans.append(i)\n                    continue\n            except: pass\n            \n            try:\n                if words_cap[i.lower()]:\n                    ans.append(words_cap[i.lower()])\n                    continue\n            except: pass\n            \n            try:\n                if words_vowel[i.lower()]:\n                    ans.append(words_vowel[i.lower()])\n                    continue\n            except: pass\n            \n            ans.append(\\\"\\\")\n\n        return ans\n                ", "class Node:\n    def __init__(self):\n        self.kids = defaultdict(Node)\n        self.words = []\nclass Trie:\n    def __init__(self):\n        self.head = Node()\n        self.cache = defaultdict(str)\n        self.exacts = defaultdict(str)\n        self.novowels = defaultdict(str)\n        self.time = 0\n        self.sortkey = {}\n        \n    def add(self, word):\n        curr = self.head\n        if word.lower() not in self.cache:\n            self.cache[word.lower()] = word\n        self.exacts[word] = word\n        \n        def novo(word):\n            grp = list(word)\n            for i,g in enumerate(grp):\n                if g.lower() in 'aeiou':\n                    grp[i] = '*'\n                else:\n                    grp[i] = grp[i].lower()\n            return ''.join(grp)\n        \n        nvwl = novo(word)\n        if nvwl not in self.novowels:\n            print(nvwl, word)\n            self.novowels[nvwl] = word\n        \n        self.time += 1\n        self.sortkey[word] = self.time\n        temp = word.lower()\n        for w in temp:\n            curr = curr.kids[w]\n        \n        curr.words.append(word)\n        \n    def search(self, word, start=None):\n        def novo(word):\n            grp = list(word)\n            for i,g in enumerate(grp):\n                if g.lower() in 'aeiou':\n                    grp[i] = '*'\n                else:\n                    grp[i] = grp[i].lower()\n                    \n            return ''.join(grp)\n                    \n        if word in self.exacts and start is None:\n            return word\n        if word.lower() in self.cache and start is None:\n            return self.cache[word.lower()]\n        if novo(word) in self.novowels and start is None:\n            print(word, novo(word), self.novowels[novo(word)])\n            return self.novowels[novo(word)]\n        # print(self.novowels)\n        \n        if start is None:\n            start = self.head\n        if word == \\\"vavkmj\\\":\n            print(\\\"search.word\\\", word, [k for k in start.kids['v'].kids.keys()])     \n        curr = start\n\n        \n        for i,w in enumerate(word):\n            if w.lower() in 'aeiou':\n                res = []\n                for c in curr.kids.keys():\n                    if c in 'aeiou':\n                        out = self.search(word[i+1:], curr.kids[c])\n                        if out != \\\"\\\":\n                            res.append(out)\n                if res:\n                    print(\\\"resss\\\", word, res)\n                    res.sort(key=lambda x:self.sortkey[x])\n                    \n                    print(\\\"resss2\\\", word, res)\n                    return res[0]\n                return \\\"\\\"\n            elif w in curr.kids:\n                curr = curr.kids[w]\n            elif w.lower() in curr.kids:\n                curr = curr.kids[w.lower()]\n            elif w.upper() in curr.kids:\n                curr = curr.kids[w.upper()]\n            else:\n                break\n                # assert(False)\n                # if w.lower() in 'aeiou':\n                #     if word == \\\"vavkmj\\\":\n                #         print(curr.kids.keys())\n                #     for c in curr.kids.keys():\n                #         if c in 'aeiou':\n                #             out = self.search(c+word[i+1:], curr)\n                #             if out != \\\"\\\":\n                #                 return out\n                #     return \\\"\\\"\n                # else:\n                #     return \\\"\\\"\n        # print(\\\"curr.words\\\",word, \\\"->\\\", curr.words)     \n        if curr and curr.words:\n            curr.words.sort(key=lambda x:self.sortkey[x])\n            return curr.words[0]\n        return \\\"\\\"\n    \n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        tree = Trie()\n        \n        for word in wordlist:\n            tree.add(word)\n            \n        out = []\n        for q in queries:\n            res = tree.search(q)\n            # print(q,\\\"->\\\", res)\n            if res == \\\"\\\" and q and q[0].lower() in 'aeiou':\n                for v in 'aeiou':\n                    if q[0] != v:\n                        res = tree.search(v+q[1:])\n                        if res != \\\"\\\":\n                            break\n            # if q == \\\"aai\\\":\n            #     print(q,\\\"->\\\", res)\n            out.append(res)\n        \n        # print(out)\n        return out", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        wordset = set(wordlist)\n        wordset_lower = set()\n        code_map = dict()\n        for word in wordlist:\n            wordset_lower.add(word.lower())\n            code = encode(word)\n            if code not in code_map:\n                code_map[code] = word\n        answer = []\n        \n        for query in queries:\n            if query in wordset:\n                answer.append(query)\n            elif query.lower() in wordset_lower:\n                for word in wordlist:\n                    if word.lower() == query.lower():\n                        answer.append(word)\n                        break\n            elif encode(query) in code_map:\n                answer.append(code_map[encode(query)])\n            else:\n                answer.append('')\n                \n        return answer\n                \n                \ndef encode(word):\n    code = []\n    for c in word.lower():\n        if c in {'a', 'e', 'i', 'o', 'u'}:\n            code.append('@')\n        else:\n            code.append(c)\n    return ''.join(code)", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        capital = defaultdict(list)\n        for word in wordlist:\n            capital[word.lower()].append(word)\n            \n        vowels = defaultdict(list)\n        for word in wordlist:\n            newword = word\n            for ch in \\\"aeiouAEIOU\\\":\n                newword = newword.replace(ch, \\\"$\\\")\n            vowels[newword.lower()].append(word)\n        ans = []        \n        for q in queries:\n            if q in wordlist:\n                ans.append(q)\n            elif q.lower() in capital:\n                ans.append(capital[q.lower()][0])\n            else:\n                newq = q\n                for ch in \\\"aeiouAEIOU\\\":\n                    newq = newq.replace(ch, \\\"$\\\")\n                if newq.lower() in vowels:\n                    ans.append(vowels[newq.lower()][0])\n                else:\n                    ans.append(\\\"\\\")\n            \n        return ans", "vowels = set([\\\"a\\\", \\\"e\\\", \\\"o\\\", \\\"i\\\", \\\"u\\\"])\n\nclass Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        first_match = defaultdict(str)\n        vowel_match = defaultdict(str)\n        word_list = set(wordlist)\n        for word in wordlist:\n            lower_word = word.lower()\n            if not first_match.get(lower_word):\n                first_match[lower_word] = word\n            letters = list(lower_word)\n            self.find_valid_word(letters, 0, word, vowel_match)\n                    \n            \n        results = []\n        for word in queries:\n            if word in word_list:\n                results.append(word)\n            else:\n                lower_word = word.lower()\n                if lower_word in first_match:\n                    results.append(first_match[lower_word])\n                elif lower_word in vowel_match:\n                    results.append(vowel_match[lower_word])\n                else:\n                    results.append(\\\"\\\")\n        return results\n    \n    def find_valid_word(self, letters, start, curr_word, first_match):\n        new_str = \\\"\\\".join(letters)\n        if new_str not in first_match:\n            first_match[new_str] = curr_word\n        for i in range(start, len(letters)):\n            if self.is_vowel(letters[i]):\n                for vowel in vowels:\n                    letters[i] = vowel\n                    valid_word = self.find_valid_word(letters, i + 1, curr_word, first_match)\n        return \\\"\\\"\n          \n    def is_vowel(self, char):\n        return char in vowels", "def lower(y):return y.lower()\nclass Solution:\n    \n    def checkvowel(self,word,dic,vowels,Results):\n        vowelWord = ''\n        for y in word:\n            if y in vowels:vowelWord+='_'\n            else :vowelWord+=lower(y)\n        if vowelWord in dic:\n            Results += [dic[vowelWord]]\n            return True\n        else :return False\n            \n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        dic_vowels = {}\n        for x in wordlist: \n            vowelWord = ''\n            for y in x:\n                if lower(y) in vowels:vowelWord+='_'\n                else :vowelWord+=lower(y)\n            if vowelWord not in dic_vowels:\n                dic_vowels[vowelWord] = x\n        \n        wordlist_ = {}\n        for x in wordlist:\n            if lower(x) not in wordlist_:\n                wordlist_[lower(x)]=x\n        \n        Results = []\n        for word in queries:\n            if word in wordlist:\n                Results += [word]\n            elif lower(word) in wordlist_:\n                Results += [wordlist_[lower(word)]]\n            elif self.checkvowel(lower(word),dic_vowels,vowels,Results):\n                pass\n            else :Results+=[\\\"\\\"]\n        return Results\n    \n            ", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        def generate(string):\n            if not string:\n                yield string\n            else:\n                if string[0] in vowel:\n                    for v in vowel:\n                        for g in generate(string[1:]):\n                            yield v + g\n                else:\n                    for g in generate(string[1:]):\n                        yield string[0] + g\n        \n        dicti, vowel, ans = {}, {\\\"a\\\", \\\"e\\\", \\\"i\\\", \\\"o\\\", \\\"u\\\"}, []\n        for word in wordlist:\n            cur = word.lower()\n            if cur not in dicti:\n                dicti[cur] = [set(), None, None]\n            dicti[cur][0].add(word)\n            if dicti[cur][1] is None:\n                dicti[cur][1] = word\n            for new in generate(cur):\n                if new not in dicti:\n                    dicti[new] = [set(), None, None]\n                if dicti[new][2] is None:\n                    dicti[new][2] = word\n        for query in queries:\n            cur, flag = query.lower(), 1\n            if cur in dicti:\n                if query in dicti[cur][0]:\n                    ans.append(query)\n                    flag = 0\n                elif dicti[cur][1] is not None:\n                    ans.append(dicti[cur][1])\n                    flag = 0\n            if flag:\n                for new in generate(cur):\n                    if new in dicti and dicti[new][2] is not None:\n                        ans.append(dicti[new][2])\n                        flag = 0\n                        break\n            if flag:\n                ans.append(\\\"\\\")\n        return ans", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        first = set(wordlist)\n        second = [word.lower() for word in wordlist]\n        third = []\n        for word in wordlist:\n            tmp = \\\"\\\"\n            for c in word:\n                if c not in {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}:\n                    tmp += c\n                else:\n                    tmp += 'a'\n            third.append(tmp.lower())\n        res = []\n        for query in queries:\n            if query in first:\n                res.append(query)\n                continue\n            try:\n                idx = second.index(query.lower())\n                res.append(wordlist[idx])\n                continue\n            except ValueError:\n                pass\n            vowelIns = \\\"\\\"\n            for c in query:\n                if c not in {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}:\n                    vowelIns += c\n                else:\n                    vowelIns += 'a'\n            try:\n                idx = third.index(vowelIns.lower())\n                res.append(wordlist[idx])\n            except ValueError:\n                res.append(\\\"\\\")\n        return res", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        capLookup = {}\n        vowelLookup = {}\n        res = []\n        \n        for word in wordlist:\n            if word.lower() not in capLookup:\n                capLookup[word.lower()] = word\n            starword = ''.join('*' if l in 'aeiou' else l for l in word.lower())\n            if starword not in vowelLookup:\n                vowelLookup[starword] = word\n        \n        for query in queries:\n            if query in wordlist:\n                res.append(query)\n                continue\n            if query.lower() in capLookup:\n                res.append(capLookup[query.lower()])\n                continue\n            starquery = ''.join('*' if l in 'aeiou' else l for l in query.lower())\n            if starquery in vowelLookup:\n                res.append(vowelLookup[starquery])\n                continue\n            else:\n                res.append('')\n        return res\n", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        vowels = collections.defaultdict(list)\n        capitalization = collections.defaultdict(list)\n        \n        ans = []\n        for word in wordlist:\n            w = word.lower()\n            for vowel in 'aeiouAEIOU':\n                w = w.replace(vowel,\\\"*\\\")\n            vowels[w].append(word)\n        \n        for word in wordlist:\n            capitalization[word.lower()].append(word)\n        wordlist_set = set(wordlist)\n        for word in queries:\n            if word in wordlist:\n                ans.append(word)\n                continue\n            word_lower = word.lower()\n            if word_lower in capitalization:\n                ans.append(capitalization[word_lower][0])\n                continue\n                \n            for vowel in 'aeiouAEIOU':\n                word_lower = word_lower.replace(vowel,\\\"*\\\")\n            if word_lower in vowels:\n                ans.append( vowels[word_lower][0])\n                continue\n            else:\n                ans.append(\\\"\\\")\n                \n        return ans  \n            ", "class Solution:\n    def maskVowels(self, word) -> str:\n        VOWELS = ['a', 'e', 'i', 'o', 'u']\n        masked_word = word.lower()\n        for vowel in VOWELS:\n            masked_word = masked_word.replace(vowel, '_')\n        return masked_word\n    \n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        map = {}\n        output = []\n                       \n        for word in reversed(wordlist):\n            # if word.lower() not in map:\n            map[word.lower()] = word\n            masked_word = self.maskVowels(word)\n            map[masked_word] = word\n        \n        \n        for word in queries:\n            word_lower = word.lower()\n            word_masked = self.maskVowels(word)\n            if word in wordlist:\n                output.append(word)\n            elif word in map:\n                output.append(map[word])\n            elif word_lower in map:\n                output.append(map[word_lower])\n            elif word_masked in map:\n                output.append(map[word_masked])\n            else:\n                output.append(\\\"\\\")\n        \n        return output\n   ", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        def replace(w):\n            return re.sub(r'[aeiou]', '*', w)\n        \n        lowercases = {}\n        for w in wordlist:\n            ww = w.lower()\n            if ww not in lowercases:\n                lowercases[ww] = w\n            ww = replace(ww)\n            if ww not in lowercases:\n                lowercases[ww] = w\n        words = set(wordlist)\n        answer = []\n        for w in queries:\n            if w in words:\n                answer.append(w)\n                continue\n            ww = w.lower()\n            answer.append(lowercases.get(ww, lowercases.get(replace(ww), '')))\n        return answer", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        def helper(query):\n            # check for exact\n            if query in wordlist:\n                return query\n            # check for first case-insensitive match\n            if query.lower() in lowercase:\n                return wordlist[lowercase[query.lower()]]\n                \n            # check for vowel error match\n            withoutVowelQuery = \\\"\\\"\n            for char in query:\n                if char.lower() in vowels:\n                    withoutVowelQuery += '#'\n                else:\n                    withoutVowelQuery += char.lower()\n                    \n            if withoutVowelQuery in without_vowel:\n                return wordlist[without_vowel[withoutVowelQuery]]\n            # else return empty string\n            return \\\"\\\"\n        \n        res = []\n        \n        lowercase = {}\n        \n        for i, word in enumerate(wordlist):\n            if word.lower() not in lowercase:\n                lowercase[word.lower()] = i\n        \n        vowels = {'a', 'e', 'i', 'o', 'u'}\n        without_vowel = {}\n        \n        for i, word in enumerate(wordlist):\n            newWord = \\\"\\\"\n            for char in word:\n                if char.lower() in vowels:\n                    newWord += '#'\n                else:\n                    newWord += char.lower()\n            if newWord not in without_vowel:\n                without_vowel[newWord] = i\n        \n        # print(wordlist)\n        # print(lowercase)\n        # print(without_vowel)\n        \n        for query in queries:\n            res.append(helper(query))\n        return res", "class Solution:\n    def maskVowels(self, word) -> str:\n        return \\\"\\\".join('*' if c in 'aeiou' else c\n                           for c in word)\n        # VOWELS = ['a', 'e', 'i', 'o', 'u']\n        # masked_word = word\n        # for vowel in VOWELS:\n        #     masked_word = masked_word.replace(vowel, '_')\n        # return masked_word\n    \n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        map = {}\n        output = []\n                       \n        for word in reversed(wordlist):\n            lower = word.lower()\n            map[lower] = word\n            masked_word = self.maskVowels(lower)\n            map[masked_word] = word\n        \n        \n        for word in queries:\n            word_lower = word.lower()\n            word_masked = self.maskVowels(word_lower)\n            if word in wordlist:\n                output.append(word)\n            elif word in map:\n                output.append(map[word])\n            elif word_lower in map:\n                output.append(map[word_lower])\n            elif word_masked in map:\n                output.append(map[word_masked])\n            else:\n                output.append(\\\"\\\")\n        \n        return output\n   ", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        # for i in range(len(wordlist)):\n        #     if wordlist[i] != queries[i]:\n        #         print(i,wordlist[i], queries[i])\n        #         break\n        \n        lw = {}\n        for i in wordlist:\n            if i.lower() not in lw:\n                lw[i.lower()] = i\n        vfw = {}\n        for j in wordlist:\n            if re.sub('[aeiou]','*', j.lower()) not in vfw:\n                vfw[re.sub('[aeiou]','*', j.lower())] = j\n        l = len(queries)\n        res = []\n        for i in range(l):\n            low = queries[i].lower()\n            wild = ''.join(['*' if i in 'aeiou' else i for i in low])\n            if queries[i] in wordlist:\n                res.append(queries[i])\n                continue\n            elif low in lw:\n                res.append(lw[low])\n            elif wild in vfw:\n                res.append(vfw[wild])\n            else:\n                res.append('')\n        return res\n        \n#         low_origin, wild_origin = collections.defaultdict(str), collections.defaultdict(str)\n#         s = set(wordlist)            \n#         def to_wild(word): return ''.join(['*' if c in 'aeiou' else c for c in word])\n        \n#         for word in wordlist:\n#             low = word.lower()\n#             if low not in low_origin: low_origin[low] = word\n#             wild = to_wild(low)\n#             if wild not in wild_origin: wild_origin[wild] = word\n#         print()\n#         ans = []\n#         for query in queries:\n#             low = query.lower()\n#             wild = to_wild(low)\n#             if query in s: ans.append(query)\n#             elif low in low_origin: ans.append(low_origin[low])    \n#             elif wild in wild_origin: ans.append(wild_origin[wild]) \n#             else: ans.append('')\n#         return ans\n\n", "class Solution:\n    def maskVowels(self, word) -> str:\n        VOWELS = ['a', 'e', 'i', 'o', 'u']\n        masked_word = word\n        for vowel in VOWELS:\n            masked_word = masked_word.replace(vowel, '_')\n        return masked_word\n    \n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        map = {}\n        output = []\n                       \n        for word in reversed(wordlist):\n            lower = word.lower()\n            map[lower] = word\n            masked_word = self.maskVowels(lower)\n            map[masked_word] = word\n        \n        \n        for word in queries:\n            word_lower = word.lower()\n            word_masked = self.maskVowels(word_lower)\n            if word in wordlist:\n                output.append(word)\n            elif word in map:\n                output.append(map[word])\n            elif word_lower in map:\n                output.append(map[word_lower])\n            elif word_masked in map:\n                output.append(map[word_masked])\n            else:\n                output.append(\\\"\\\")\n        \n        return output\n   ", "class Solution:\n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        if not wordlist or not queries:\n            return None\n        \n        wordlistSet = set(wordlist)\n        wordUpper ={}\n        wordVowels = {}\n        res = []\n        \n        \n        def getwordWithVowelErrors(s):\n            newWord =\\\"\\\"\n            vowels = {'a','e','i','o','u'}\n            for ch in s:\n                if ch in vowels:\n                    newWord += \\\"*\\\"\n                else:\n                    newWord += ch\n            return newWord\n                    \n        \n        \n        for  w in wordlist:\n            lower = w.lower()\n            if lower not in wordUpper:\n                wordUpper[lower] = w\n                \n            wordWithVowelErrors = getwordWithVowelErrors(lower)\n            if wordWithVowelErrors not in wordVowels:\n                wordVowels[wordWithVowelErrors] = w\n                \n        for q in queries:\n            if q:\n                lower = q.lower()\n                wordWithVowelErrors = getwordWithVowelErrors(lower)\n                if q in wordlistSet:\n                    res.append(q)\n                elif lower in wordUpper:\n                    res.append(wordUpper[lower])\n                elif wordWithVowelErrors in wordVowels:\n                    res.append(wordVowels[wordWithVowelErrors])\n                else:\n                    res.append(\\\"\\\")\n                    \n        return res\n        ", "class Solution:\n    def replaceVowels(self, s):\n        return \\\"\\\".join(['*' if x in ['a','e','i','o','u'] else x for x in s.lower()])\n    \n    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:\n        result = [\\\"\\\" for q in queries]\n        \n        capitalizationDict = {}\n        vowelDict = {}\n        \n        for w in wordlist:\n            w_lower = w.lower()\n            if w_lower not in capitalizationDict:\n                capitalizationDict[w_lower] = []\n            capitalizationDict[w_lower].append(w)\n            \n            w_vowel = self.replaceVowels(w)\n            if w_vowel not in vowelDict:\n                vowelDict[w_vowel] = []\n                \n            vowelDict[w_vowel].append(w)\n            \n        wordSet = set(wordlist)\n        \n        for i in range(len(queries)):\n            if queries[i] in wordSet:\n                result[i] = queries[i]\n            elif queries[i].lower() in capitalizationDict:\n                result[i] = capitalizationDict[queries[i].lower()][0]\n            elif self.replaceVowels(queries[i]) in vowelDict:\n                result[i] = vowelDict[self.replaceVowels(queries[i])][0]\n                \n        return result"]