["# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     def countNodes(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         node = root\n         depth = 0\n         while node:\n             depth += 1\n             node = node.left\n         \n         if depth <= 1:\n             return depth\n         \n         lo, hi = 0, 2**(depth-2)\n         while lo < hi:\n             l = depth-3\n             mi = (lo+hi)//2\n             node = root\n             while l >= 0:\n                 d = mi & 2**l\n                 node = node.right if d > 0 else node.left\n                 l -= 1\n             if node.left and node.right:\n                 lo = mi+1\n             elif not node.left and not node.right:\n                 hi = mi\n             else:\n                 break\n         l, node = depth-3, root\n         while l >= 0:\n             d = mi & 2**l\n             node = node.right if d > 0 else node.left\n             l -= 1\n         return 2**(depth-1)-1 + 2*mi + int(node.left is not None) + int(node.right is not None)", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     def countNodes1(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         if not root:\n             return 0\n         if root.left is None and root.right is None:\n             return 1\n         if root.left is None:\n             return 1 + self.countNodes(root.right)\n         if root.right is None:\n             return 1 + self.countNodes(root.left)\n         return 1 + self.countNodes(root.right) + self.countNodes(root.left)\n \n     def countNodes(self,root):\n         p = root \n         height = 0\n         while p:\n             height += 1\n             p = p.left\n         if height <= 1:\n             return height\n         \n         p = root\n         while p:\n             hr = 0\n             pr = p.right\n             while pr:\n                 hr += 1\n                 pr = pr.left\n             if hr == height - 1:\n                 return 2 ** (height-1) + self.countNodes(p.right)\n             return 2 ** (height-2) + self.countNodes(p.left)\n             \n         \n         ", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     def findHeight(self, node):\n         return -1 if node is None else 1 + self.findHeight(node.left)\n         \n     def countNodes(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         h = self.findHeight(root)\n         return 0 if h == -1 else ((1 << h) + self.countNodes(root.right) \n                                   if self.findHeight(root.right) == h-1 else (1 << h-1) + self.countNodes(root.left))", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     def countNodes(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         if not root:\n             return 0\n         h = height(root)\n         res = 0\n         while root:\n             if height(root.right) == h-1:\n                 res += 1<<h\n                 root = root.right\n             else:\n                 res += 1<<(h-1)\n                 root = root.left\n             h -= 1\n             \n         return res\n \n def height(node):\n     if not node:\n         return -1\n     else:\n         return 1+height(node.left)"]