["class Solution:\n    def maxProductPath(self, grid: List[List[int]]) -> int:\n        rows = len(grid)\n        if (rows == 0):\n            return -1\n        \n        cols = len(grid[0])\n        if (cols == 0):\n            return -1\n        \n        dp = [(1,1)] * cols\n        for r, col in enumerate(grid):\n            for c, item in enumerate(col):\n                if (r == 0 and c == 0):\n                    dp[c] = (item, item)\n                elif (r == 0):\n                    dp[c] = (dp[c-1][0] * item, dp[c-1][1]* item)\n                elif (c == 0):\n                    dp[c] = (dp[c][0] * item, dp[c][1]* item)\n                else:\n                    candidate_1 = dp[c-1][0] * item\n                    candidate_2 = dp[c-1][1]* item\n                    candidate_3 = dp[c][0] * item\n                    candidate_4 = dp[c][1]* item\n                    \n                    m = min(candidate_1, candidate_2, candidate_3, candidate_4)\n                    M = max(candidate_1, candidate_2, candidate_3, candidate_4)\n                    \n                    dp[c] = (m, M)\n                    \n        if (dp[cols-1][1] >= 0):\n            return dp[cols-1][1] % (10**9+7)\n        else:\n            return -1", "class Solution:\n    def maxProductPath(self, grid: List[List[int]]) -> int:\n        rows = len(grid)\n        if (rows == 0):\n            return -1\n        \n        cols = len(grid[0])\n        if (cols == 0):\n            return -1\n        \n        dp = [(1,1)] * cols\n        \n        for r, col in enumerate(grid):\n            for c, item in enumerate(col):\n                if (r == 0 and c == 0):\n                    dp[c] = (item, item)\n                elif (r == 0):\n                    dp[c] = (dp[c-1][0]*item, dp[c-1][1] * item)\n                elif (c == 0):\n                    dp[c] = (dp[c][0]*item, dp[c][1] * item)\n                else:\n                    c1 = dp[c-1][0]*item\n                    c2 = dp[c-1][1] * item\n                    c3 = dp[c][0]*item\n                    c4 = dp[c][1] * item\n                    \n                    m = min( dp[c-1][0]*item, dp[c-1][1] * item,dp[c][0]*item,  dp[c][1] * item)\n                    M = max(dp[c-1][0]*item, dp[c-1][1] * item,dp[c][0]*item,  dp[c][1] * item)\n                    dp[c] = (m, M)\n                    \n        \n        if (dp[cols-1][1] >= 0):\n            return (dp[cols-1][1] % (10**9 + 7))\n        else:\n            return -1"]