["import sys\r\nfrom collections import defaultdict\r\nfrom copy import copy\r\n\r\nR = lambda t = int: t(eval(input()))\r\nRL = lambda t = int: [t(x) for x in input().split()]\r\nRLL = lambda n, t = int: [RL(t) for _ in range(n)]\r\n\r\ndef solve():\r\n    N, Q = RL()\r\n    P = RL()\r\n    B = RL()\r\n    phones = sorted(zip(P, B))\r\n    S = defaultdict(lambda : [])\r\n            \r\n    for p, b in phones:\r\n        for i in range(2**7):\r\n            if (i>>b) & 1:\r\n                S[i] += [p]\r\n    B = set(B)\r\n    I = [0] * len(B)\r\n\r\n    for _ in range(Q):\r\n        b, K = RL()\r\n        s = RL()\r\n        x = 0\r\n        for b in s:\r\n            x += 1<<b\r\n        if len(S[x]) < K:\r\n            print(-1)\r\n        else:\r\n            print(S[x][-K])\r\n            \r\n\r\nT = 1#R()\r\nfor t in range(1, T + 1):\r\n    solve()\r\n", "from itertools import combinations\r\n\r\nps = []\r\nfor i in range(1, 6+1):\r\n    ps.extend(combinations(list(range(6)), i))\r\n\r\nn, q = list(map(int, input().split()))\r\np = list(map(int, input().split()))\r\nb = list(map(int, input().split()))\r\n\r\nx = [[] for _ in range(6)]\r\n\r\nfor i, j in zip(p, b):\r\n    x[j-1].append(i)\r\n\r\nts = {i: sorted(sum((x[j] for j in i), []), reverse=True) for i in ps}\r\n\r\nfor _ in range(q):\r\n    t, k = list(map(int, input().split()))\r\n    f = tuple([int(x) - 1 for x in input().split()])\r\n\r\n    try:\r\n        print(ts[f][k-1])\r\n    except:\r\n        print(-1)\r\n"]