["class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        n = len(nums)\n        base = sum([abs(nums[i] - nums[i+1]) for i in range(n - 1)])\n        if (n <= 2):\n            return base\n        \n        #best = base\n        #for i in range(n-1):\n        #    for j in range(i+1, n):\n        #        guess = switch(nums, i, j, base)\n        #        if guess > best:\n        #            best = guess\n        \n        inds = sorted(list(range(n)), key=lambda x: nums[x])\n        return base + max(options(inds, nums))\n        \n    \ndef switch(nums, i, j, base=0):\n    i_inc = ((abs(nums[j] - nums[i-1]) - abs(nums[i] - nums[i-1])) if (i > 0) else 0)\n    j_inc = ((abs(nums[j+1] - nums[i]) - abs(nums[j+1] - nums[j])) if (j < len(nums) - 1) else 0)\n    return base + i_inc + j_inc\n    \n    \n\ndef options(inds, nums):\n    a,b = findRange(inds)\n    d,c = findRange(inds[::-1])\n    yield 0\n    yield 2 * (nums[c] - nums[b])\n\n    i = max(a, b)\n    j = max(c, d)\n    n = len(nums)\n    yield switch(nums, i, n-1)\n    yield switch(nums, j, n-1)\n    \n    yield switch(nums, 0, i-1)\n    yield switch(nums, 0, j-1)\n    \n    \n    \n    \n\ndef findRange(inds):\n    seen = set()\n    for i, idx in enumerate(inds):\n        if (idx + 1) in seen or (idx - 1) in seen:\n            return (idx + 1, idx) if (idx + 1) in seen else (idx-1, idx)\n        seen.add(idx)\n        \n", "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        n=len(nums)\n        s=0\n        gain=0\n        h=float('-inf')\n        l=float('inf')\n        for i in range(n-1):\n            n1=nums[i]\n            n2=nums[i+1]\n            s+=abs(n1-n2)\n            gain=max(gain, \n                 abs(nums[0] - n2) - abs(n1 - n2),\n                 abs(nums[n - 1] - n1) - abs(n1 - n2))\n            h=max(h,min(n1,n2))\n            l=min(l,max(n1,n2))\n        return s+max(gain,2*(h-l))\n", "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        vals = [0]*(len(nums)-1)\n        for i, n in enumerate(nums[1:]):\n            vals[i] = abs(n-nums[i])\n        base = sum(vals)\n        bonus = 0\n\n        MPP = max(nums[L]+nums[L+1]-vals[L] for L in range(len(nums)-1))\n        MPN = max(nums[L]-nums[L+1]-vals[L] for L in range(len(nums)-1))\n        MNP = max(-nums[L]+nums[L+1]-vals[L] for L in range(len(nums)-1))\n        MNN = max(-nums[L]-nums[L+1]-vals[L] for L in range(len(nums)-1))\n\n        bonus = max(MPP+MNN, MPN+MNP)\n\n        for R in range(0, len(nums)-1):\n            bonus = max(bonus, abs(nums[0]-nums[R+1]) - vals[R])\n\n        for L in range(1, len(nums)-1):\n            bonus = max(bonus, abs(nums[L-1]-nums[len(nums)-1]) - vals[L-1])\n\n        return base+bonus", "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        numsLen = len(nums)\n        oldSum = sum([abs(nums[i] - nums[i+1]) for i in range(numsLen-1)])\n        if numsLen < 3:\n            return oldSum\n        \n        delta = 0\n        for i in range(1, numsLen-1):\n            delta = max(delta, abs(nums[i + 1] - nums[0]) - abs(nums[i+1] - nums[i]), abs(nums[-1] - nums[i-1]) - abs(nums[i]-nums[i-1]))\n        \n        high = float('-inf')\n        low = float('inf')\n        \n        for x, y in zip(nums, nums[1:]):\n            high = max(high, min(x, y))\n            low = min(low, max(x, y))\n        \n        return oldSum + max(delta, (high-low)*2)\n        \n#         numsLen = len(nums)\n        \n#         def findDelta(l, r):\n#             if l == 0 and r == numsLen-1:\n#                 return 0\n#             if l == 0:\n#                 return abs(nums[r + 1] - nums[l]) - abs(nums[r+1] - nums[r])\n#             if r == numsLen-1:\n#                 return abs(nums[r] - nums[l-1]) - abs(nums[l]-nums[l-1])\n            \n#             return abs(nums[r + 1] - nums[l]) - abs(nums[r+1] - nums[r]) + abs(nums[r] - nums[l-1]) - abs(nums[l]-nums[l-1])\n        \n#         # print(findDelta(1,3))\n#         oldSum = sum([abs(nums[i] - nums[i+1]) for i in range(numsLen-1)])\n        \n#         maxDelta = 0\n#         for l in range(0, numsLen-1):\n#             for r in range(l, numsLen):\n#                 maxDelta = max(maxDelta, findDelta(l, r))\n#         return oldSum + maxDelta\n", "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        ans = sum(abs(nums[i+1]-nums[i]) for i in range(len(nums)-1))\n        d = 0\n        for i in range(1, len(nums)-1):\n            d = max(d, abs(nums[0]-nums[i+1]) - abs(nums[i]-nums[i+1]),\n                       abs(nums[-1]-nums[i-1]) - abs(nums[i]-nums[i-1]))\n        high = -math.inf\n        low = math.inf\n        for x, y in zip(nums, nums[1:]):\n            high = max(high, min(x,y))\n            low = min(low, max(x,y))\n        \n        return ans + max(d, (high-low)*2)", "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        n = len(nums)\n    \n        s = 0\n        for i in range(len(nums)-1):\n            s += abs(nums[i] - nums[i+1])\n        \n        if n <= 2:\n            return s\n        \n        maxup = inc = 0\n        minmax = float('inf')\n        maxmin = -float('inf')\n        for left in range(1,n):\n            dis = abs(nums[left]-nums[left-1])\n            minmax = min(minmax, max(nums[left], nums[left-1]))\n            maxmin = max(maxmin, min(nums[left], nums[left-1]))\n            inc = max(inc, abs(nums[0] - nums[left])- dis)\n            inc = max(inc, abs(nums[-1] - nums[left-1])- dis)\n            \n            \n        return s +  max(inc,2*(maxmin-minmax))\n                \n                \n", "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 1:\n            return 0\n        ans = 0\n        for i in range(1, n - 1):\n            ans = max(ans,\n                      abs(nums[0] - nums[i + 1]) - abs(nums[i] - nums[i + 1]),\n                      abs(nums[-1] - nums[i - 1]) - abs(nums[i] - nums[i - 1]))\n        small, large = (-1, float('inf')), (-1, -float('inf'))\n        for i in range(n):\n            if i >= 1:\n                if nums[i] >= nums[i - 1]:\n                    if small[1] > nums[i]:\n                        small = (i, nums[i])\n                if nums[i] <= nums[i - 1]:\n                    if large[1] < nums[i]:\n                        large = (i, nums[i])\n            if i < n - 1:\n                if nums[i] >= nums[i + 1]:\n                    if small[1] > nums[i]:\n                        small = (i, nums[i])\n                if nums[i] <= nums[i + 1]:\n                    if large[1] < nums[i]:\n                        large = (i, nums[i])\n        return sum([abs(nums[i] - nums[i + 1]) for i in range(n - 1)]) + max(2 * (large[1] - small[1]), 0, ans)\n", "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        totol, res, min2, max2 = 0, 0, float('inf'), -float('inf')\n        for a, b in zip(nums, nums[1:]):\n            totol += abs(a - b)\n            res = max(res, abs(nums[0] - b) - abs(a - b))\n            res = max(res, abs(nums[-1] - a) - abs(a - b))\n            min2, max2 = min(min2, max(a, b)), max(max2, min(a, b))\n        return totol + max(res, (max2 - min2) * 2)", "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        n = len(nums)\n        if(n==1):\n            return 0\n        if(n==2):\n            return abs(nums[1]-nums[0])\n        \n        base = 0\n        for i in range(n-1):\n            base = base + abs(nums[i+1]-nums[i])\n        res = base\n        for i in range(1, n-1):\n            if(res<base+abs(nums[i+1]-nums[0])-abs(nums[i+1]-nums[i])):\n                res = base+abs(nums[i+1]-nums[0])-abs(nums[i+1]-nums[i])\n        \n        for i in range(1, n-1):\n            if(res<base+abs(nums[i-1]-nums[n-1])-abs(nums[i]-nums[i-1])):\n                res = base+abs(nums[i-1]-nums[n-1])-abs(nums[i]-nums[i-1])\n        \n        \n        currMax = (nums[0], nums[1])\n        currMin = (nums[0], nums[1])\n        for i in range(1, n-1):\n            curr = (nums[i], nums[i+1])\n            if(min(currMax)>max(curr)):\n                if(res < base + 2*(min(currMax)-max(curr))):\n                    res = base + 2*(min(currMax)-max(curr))\n            \n            if(max(currMin)<min(curr)):\n                if(res < base + 2*(min(curr)-max(currMin))):\n                    res = base + 2*(min(curr)-max(currMin))\n            if(min(curr)>min(currMax)):\n                   currMax = curr\n            if(max(curr)<max(currMin)):\n                   currMin = curr\n        \n                   \n        return res\n            \n", "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        return sum(abs(a-b) for a,b in zip(nums,nums[1:])) + max(max(abs(nums[0]-b)-abs(a-b) for a,b in zip(nums,nums[1:])),max(abs(nums[-1]-a)-abs(a-b) for a,b in zip(nums,nums[1:])),2*(max(min(a,b) for a,b in zip(nums,nums[1:]))-min(max(a,b) for a,b in zip(nums,nums[1:]))))", "class Solution:\n  def maxValueAfterReverse(self, nums: List[int]) -> int:\n    # TC: O(N), SC: O(1), one pass\n    # 1. reverse A[0] -- A[i], improve abs(A[0] - A[i+1]) - abs(A[i] - A[i+1])\n    # 2. reverse A[i+1] -- A[n-1], improve abs(A[n-1] - A[i]) - abs(A[i] - A[i+1])\n    # 3. reverse A[i+1] -- A[j], improve abs(A[i] - A[j]) + abs(A[i+1] - A[j+1]) - abs(A[i] - A[i+1]) - abs(A[j]-A[j+1])\n    #   let A[i], A[i+1], A[j], A[j+1] be u, v, x, y and say u = max(u, v, x, y) will always be +u after disclose abs(),\n    #   and y = min(u, v, x, y) will always be -y after disclose abs(), so they wil cancel out, and the improve will be\n    #   2v - 2x if v >= x or 2x - 2v otherwise, e.g., (max(min(A[i], A[i+1])) - min(max(A[j], A[j+1]))) * 2\n    ans, imp1, min2, max2 = 0, 0, float('inf'), -float('inf')\n    for x, y in zip(nums[:-1], nums[1:]):\n      ans += abs(x - y)\n      imp1 = max(imp1, abs(nums[0] - y) - abs(x - y), abs(nums[-1] - x) - abs(x - y))\n      min2, max2 = min(min2, max(x, y)), max(max2, min(x, y))\n    return ans + max(imp1, (max2 - min2) * 2)", "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        ans = 0\n        for i in range(len(nums)-1):\n            ans += abs(nums[i+1]-nums[i])\n        \n        d = 0\n        for i in range(1,len(nums)-1):\n            d = max(d, abs(nums[0]-nums[i+1]) - abs(nums[i]-nums[i+1]),\n                       abs(nums[-1]-nums[i-1]) - abs(nums[i]-nums[i-1]))\n        high = -sys.maxsize\n        low = sys.maxsize\n        for x, y in zip(nums, nums[1:]):\n            high = max(high, min(x, y))\n            low = min(low, max(x, y))\n        return ans + max(d, (high-low)*2)\n        \n", "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        # \u4e09\u79cd\u60c5\u51b5\uff0c\u4ece\u5934\u5230\u4e2d\u95f4\u67d0\u4e2a\u5730\u65b9\u8fdb\u884creverse\uff1b\n        # \u4ece\u4e2d\u95f4\u5230\u6700\u540e\u8fdb\u884creverse\uff0c\u4e2d\u95f4\u7684\u67d0\u4e00\u6bb5\u8fdb\u884creverse\n        total, res, min2, max2 = 0, 0, float('inf'), float('-inf')\n        for a, b in zip(nums[:-1], nums[1:]):\n            total += abs(a - b)\n            res = max(res, abs(nums[0] - b) - abs(a - b))\n            res = max(res, abs(nums[-1] - a) - abs(a - b))\n            min2, max2 = min(min2, max(a, b)), max(max2, min(a, b))\n        return total + max(res, (max2 - min2) * 2)", "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        ans = sum(abs(nums[i + 1] - nums[i]) for i in range(len(nums) - 1))\n        d = 0\n        for i in range(1, len(nums) - 1):\n            d = max(d, abs(nums[0] - nums[i + 1]) - abs(nums[i] - nums[i + 1]),\n                       abs(nums[-1] - nums[i - 1]) - abs(nums[i] - nums[i - 1]))\n        \n        \n        high = -math.inf\n        low = math.inf\n        for x, y in zip(nums, nums[1:]):\n            high = max(high, min(x, y))\n            low = min(low, max(x, y))\n        return ans + max(d, (high - low) * 2)", "import sys\n\nfrom collections import defaultdict\nfrom typing import List\n\n\nclass Solution:\n  def maxValueAfterReverse(self, nums: List[int]) -> int:\n    result = 0\n\n    gain = - sys.maxsize\n    hi = -sys.maxsize\n    lo = sys.maxsize\n    for index in range(len(nums) - 1):\n      n1 = nums[index]\n      n2 = nums[index + 1]\n      result += abs(n1 - n2)\n      gain1 = - abs(n1 - n2) + abs(n2 - nums[0])\n      gain2 = - abs(n1 - n2) + abs(n1 - nums[-1])\n      gain = max(gain, gain1, gain2)\n      hi = max(hi, min(n1, n2))\n      lo = min(lo, max(n1, n2))\n\n    newgain = 2 * (hi - lo)\n    result += max(gain, newgain)\n    return result"]