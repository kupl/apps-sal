["from math import sqrt\n class Solution:\n     def largestDivisibleSubset(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: List[int]\n         \"\"\"\n         nums.sort()\n         l, prev = {}, {}  # length, previous number(largest divisor in nums)\n         max_l, end_number = 0, None\n         \n         for i in nums:\n             tmp_l, tmp_prev = 0, None\n             for j in range(1, 1 + int(sqrt(i))):\n                 if i % j == 0:\n                     tmp = i // j\n                     if tmp in prev and l[tmp] > tmp_l:\n                         tmp_l, tmp_prev = l[tmp], tmp\n                     if j in prev and l[j] > tmp_l:\n                         tmp_l, tmp_prev = l[j], j                    \n                     \n             tmp_l += 1\n             prev[i], l[i] = tmp_prev, tmp_l\n             \n             if tmp_l > max_l:\n                 max_l, end_number = tmp_l, i\n         \n         ans = []\n         while end_number is not None:\n             ans.append(end_number)\n             end_number = prev[end_number]\n         \n         return ans"]