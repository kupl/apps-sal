["T = int(input())\n\n\n\ndef solve(S):\n    res = [S[0]]\n    pos = 0 # think...\n    for s in S[1:]:\n        # can we change?\n        if 0 <= pos-1 < len(res) and res[pos-1] == s:\n            pos = pos-1\n        elif 0 <= pos+1 < len(res) and res[pos+1] == s:\n            pos = pos+1\n        elif pos == 0 and s not in res:\n            res.insert(0, s) # pos is still 0\n        elif pos == len(res)-1 and s not in res:\n            res.append(s)\n            pos += 1\n        else: return None\n    #print(''.join(res))\n    for x in range(ord('a'), ord('z')+1):\n        x = chr(x)\n        if x not in res:\n            res.append(x)\n    return ''.join(res)\n\nfor _ in range(T):\n    res = solve(input())\n    if res is None:\n        print('NO')\n    else:\n        print('YES')\n        print(res)\n", "#!python3\n\"\"\"\nAuthor: w1ld [at] inbox [dot] ru\n\"\"\"\n\nfrom collections import deque, Counter\nimport array\nfrom itertools import combinations, permutations\nfrom math import sqrt\n# import unittest\n\n\ndef read_int():\n    return int(input().strip())\n\n\ndef read_int_array():\n    return [int(i) for i in input().strip().split(' ')]\n\n######################################################\n\nclass Node:\n    def __init__(self, c):\n        self.c = c\n        self.l = None\n        self.r = None\n\n\ntests = read_int()\n\nfor test in range(tests):\n    s = input().strip()\n    left = Node(s[0])\n    x = left\n    found = True\n    used = set([x.c])\n    for c in s[1:]:\n        if x.c == c:\n            continue\n        if x.l and x.l.c == c:\n            x = x.l\n        elif x.r and x.r.c == c:\n            x = x.r\n        elif not x.l and c not in used:\n            x.l = Node(c)\n            used.add(c)\n            x.l.r = x\n            x = x.l\n            left = x\n        elif not x.r and c not in used:\n            x.r = Node(c)\n            used.add(c)\n            x.r.l = x\n            x = x.r\n        else:\n            found = False\n            break\n\n    if not found:\n        print(\"NO\")\n    else:\n        ans = []\n        x = left\n        while x:\n            ans.append(x.c)\n            x = x.r\n        for c in 'abcdefghijklmnopqrstuvwxyz':\n            if c not in used:\n                ans.append(c)\n        print(\"YES\")\n        print(''.join(ans))\n\n\n\n\n\n\n\n\n\n\n", "for _ in range(int(input())):\n    q=input()\n    ans=q[0]\n    test=[0]*26\n    j=0\n    c = 1\n    for i in q[1:]:\n        if j>0 and ans[j-1]==i:\n            j-=1\n            continue\n        if j<len(ans)-1 and ans[j+1]==i:\n            j+=1\n            continue\n        if j==0:\n            ans=i+ans\n            continue\n        if j==len(ans)-1:\n            ans+=i\n            j+=1\n            continue\n        c=0\n    for i in ans:test[ord(i)-97]+=1\n    for i in range(26):\n        if test[i]>1:c=0\n        if test[i]==0:ans+=chr(i+97)\n    if c:\n        print('YES')\n        print(ans)\n    else:\n        print('NO')", "T = int(input())\n\ndef solve(s):\n    kb = list()\n    cursor = -1\n    seen = set()\n    for c in s:\n        if c in seen:\n            if cursor - 1 >= 0 and kb[cursor - 1] == c:\n                cursor -= 1\n            elif cursor + 1 < len(kb) and kb[cursor + 1] == c:\n                cursor += 1\n            else:\n                print('NO')\n                return\n        else:\n            if cursor not in [0, len(kb) - 1]:\n                print('NO')\n                return\n            elif cursor == 0:\n                kb.insert(0, c)\n                cursor = 0\n            else:\n                kb.append(c)\n                cursor = len(kb) - 1\n            seen.add(c)\n    print('YES')\n    ans = ''.join(kb)\n    for c in 'abcdefghijklmnopqrstuvwxyz':\n        if c not in seen:\n            ans += c\n    print(ans)\n\nfor _ in range(T):\n    solve(input())"]