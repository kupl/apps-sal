["def middle_permutation(string):\n    s = sorted(string)\n    if len(s) % 2 ==0:        \n        return s.pop(len(s)//2-1) +''.join(s[::-1])\n    else:\n        return s.pop(len(s)//2) + middle_permutation(s)", "def middle_permutation(s):\n    s = ''.join(sorted(s))\n    return s[len(s)//2-1:(len(s)+1)//2][::-1] + s[(len(s)+1)//2:][::-1] + s[:len(s)//2-1][::-1]", "from math import factorial\n\ndef nth_permutation(s, n):\n    if not s:\n        return ''\n    m = factorial(len(s)-1)\n    q, r = divmod(n, m)\n    return s[q] + nth_permutation(s[:q] + s[q+1:], r)        \n\ndef middle_permutation(s):\n    return nth_permutation(sorted(s), factorial(len(s)) // 2 - 1)", "def middle_permutation(s):\n    s = ''.join(sorted(s, reverse=True))\n    return s[ len(s)//2 : (len(s)+3)//2 ] + s[ :len(s)//2 ] + s[ (len(s)+3)//2: ]", "def middle_permutation(string):\n    s = \"\".join(sorted(string))\n    mid = int(len(s) / 2) - 1\n    if len(s) % 2 == 0:\n        return s[mid] + (s[:mid] + s[mid + 1:])[::-1]\n    else:\n        return s[mid:mid + 2][::-1] + (s[:mid] + s[mid + 2:])[::-1]", "def middle_permutation(string):\n    letters = sorted(string, reverse=True)\n    start = letters.pop(len(string)//2)\n    if len(string) % 2:\n        start += letters.pop(len(string)//2)\n    return start + \"\".join(letters)", "from math import factorial\n\n# on factorial number system and its relation to lexicographically ordered permutations;\n# https://medium.com/@aiswaryamathur/find-the-n-th-permutation-of-an-ordered-string-using-factorial-number-system-9c81e34ab0c8\n# https://en.wikipedia.org/wiki/Factorial_number_system\ndef factoradic_representation(n):\n    res = []\n    i = 1\n    while n > 0:\n        res.append(n % i)\n        n = n // i\n        i += 1\n    return res[::-1]\n\ndef middle_permutation(string):\n    if len(string) < 2:\n        return string\n    s = sorted(string)\n    res = []\n    fr = factoradic_representation(factorial(len(s))//2-1)\n    fr = [0] * (len(string) - len(fr)) + fr\n    for idx in fr:\n        res.append(s.pop(idx))\n    return \"\".join(res)", "def middle_permutation(string):\n    rev, l = sorted(string)[::-1], len(string)\n    mid = rev[l//2:l//2 + l%2 + 1]\n    return ''.join(mid + [ch for ch in rev if ch not in mid])", "def middle_permutation(s):\n    s = ''.join(sorted(s))\n    m = int(len(s) / 2)\n    x = s[m-1:m+1] if len(s) % 2 else s[m-1]\n          \n    return (s.replace(x, '') + x)[::-1]", "def middle_permutation(string):\n    sortedString = ''.join(sorted(string))\n    reversedString = sortedString[::-1]\n    result = ''\n    result += reversedString[int(len(reversedString)/2) : int((len(reversedString)+3)/2)]\n    result += reversedString[0:int(len(reversedString)/2)]\n    result += reversedString[int((len(reversedString)+3)/2):]\n    return result"]