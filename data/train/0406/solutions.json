["class Solution:\n     def ladderLength(self, beginWord, endWord, wordList):\n \n         wordDict = set(wordList)\n         if not endWord in wordDict:\n             return 0\n \n         visited = set()\n \n         beginSet = set()\n         beginSet.add(beginWord)\n         visited.add(beginWord)\n \n         endSet = set()\n         endSet.add(endWord)\n         visited.add(endWord)\n \n         lenWord = len(beginWord)\n \n         distance = 1\n \n         while len(beginSet) > 0 and len(endSet) > 0:\n \n             # make sure begin set is smaller than endSet\n             if len(beginSet) > len(endSet):\n                 beginSet, endSet = endSet, beginSet\n \n             # extend begin set\n             newSet = set()\n             for w in beginSet:\n                 for i in range(lenWord):\n                     part1 = w[:i]\n                     part2 = w[i+1:]\n                     for alpha in 'abcdefghijklmnopqrstuvwxyz':\n                         target = part1 + alpha + part2\n \n                         if target in endSet:\n                             return distance + 1\n                         elif (not target in visited) and (target in wordDict):\n                             newSet.add(target)\n                             visited.add(target)\n \n             beginSet = newSet\n             distance += 1\n         return 0", "class Solution:\n     def ladderLength(self, beginWord, endWord, wordList):\n         \"\"\"\n         :type beginWord: str\n         :type endWord: str\n         :type wordList: List[str]\n         :rtype: int\n         \"\"\"             \n \n         words = set(wordList)\n         if endWord not in words:\n             return 0\n         \n         beginQ, endQ = {beginWord}, {endWord}\n         dist = 2\n         while beginQ:\n             print(('beginQ', beginQ, 'endQ', endQ))\n             newq = set()\n             for u in beginQ:\n                 for i in range(len(u)):\n                     for c in 'abcdefghijklmnopqrstuvwxyz':\n                         v = u[:i] + c + u[i+1:]\n                         if v in words:\n                             if v in endQ:\n                                 return dist\n                             newq.add(v)\n                             \n             dist += 1            \n             beginQ = newq\n             if len(beginQ) > len(endQ):\n                 beginQ, endQ = endQ, beginQ\n                 \n             words -= beginQ\n         \n         return 0\n             \n \n                         \n", "class Solution():\n     def ladderLength(self, beginWord, endWord, wordDict):\n         front, back = set([beginWord]), set([endWord])\n         wordDict = set(wordDict)\n         length = 2\n         width = len(beginWord)\n         charSet = 'abcdefghijklmnopqrstuvwxyz'\n         \n         if endWord not in wordDict:\n             return 0\n         \n         while front:\n             newFront = set()\n             \n             for phase in front:\n                 for i in range(width):\n                     for c in charSet:\n                         nw = phase[:i] + c + phase[i+1:]\n                         if nw in back:\n                             return length\n                         if nw in wordDict:\n                             newFront.add(nw)\n             front = newFront\n             \n             if len(front) > len(back):\n                 front,back = back,front\n                 \n             wordDict -= wordDict & front\n             length += 1\n         \n         return 0", "class Solution:\n     def ladderLength(self, beginWord, endWord, wordList):\n         \"\"\"\n         :type beginWord: str\n         :type endWord: str\n         :type wordList: List[str]\n         :rtype: int\n         \"\"\"\n         letters ='abcdefghijklmnopqrstuvwxyz'\n         wordList = set(wordList)\n         if endWord not in wordList:\n             return 0\n         reached = set()\n         backreached = set()\n         reached.add(beginWord)\n         backreached.add(endWord)\n         wordList.discard(beginWord)\n         wordList.discard(endWord)\n         depth = 1\n         while not (reached & backreached):\n             toAdd = set()\n             for word in reached:\n                 for i,letter in enumerate(word):\n                     for newletter in letters:\n                         if newletter != letter:\n                             newword = word[:i] + newletter + word[i+1:]\n                             if newword in backreached:\n                                 return depth + 1\n                             elif newword in wordList:\n                                 toAdd.add(newword)\n                                 wordList.remove(newword)\n             if len(toAdd) == 0:\n                 return 0\n             else:\n                 depth += 1\n                 reached = toAdd\n                 if len(reached) > len(backreached):\n                     reached, backreached = backreached, reached\n         return depth", "class Solution:\n     def ladderLength(self, beginWord, endWord, wordList):\n         \"\"\"\n         :type beginWord: str\n         :type endWord: str\n         :type wordList: List[str]\n         :rtype: int\n         \"\"\"\n         wordList=set(wordList)\n         if endWord not in wordList:\n             return 0\n         beginSet=set()\n         endSet=set()\n         visited=set()\n         res=1\n         beginSet.add(beginWord)\n         endSet.add(endWord)\n         while len(beginSet)!=0 and len(endSet)!=0:\n             if len(beginSet)>len(endSet):\n                 beginSet,endSet=endSet,beginSet\n             tmp=set()\n             for word in beginSet:\n                 chs=list(word)\n                 for i in range(len(chs)):\n                     for ch in range(ord('a'),ord('z')+1):\n                         old=chs[i]\n                         chs[i]=chr(ch)\n                         target=\"\".join(chs)\n                         if target in endSet:\n                             return res+1\n                         if target not in visited and target in wordList:\n                             tmp.add(target)\n                             visited.add(target)\n                         chs[i]=old\n             beginSet=tmp\n             res+=1\n         return 0\n"]