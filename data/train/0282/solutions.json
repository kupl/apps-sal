["class Solution:\n    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:\n        dp = [[0 for _ in range(len(mat[0]) + 1)]for r in range(len(mat) + 1)]\n        \n        for r in range(1, len(mat) + 1):\n            for c in range(1, len(mat[r-1]) + 1):\n                dp[r][c] += mat[r-1][c-1]\n                if not r and not c:\n                    continue\n                elif not r:\n                    dp[r][c] += dp[r][c-1]\n                    continue\n                elif not c:\n                    dp[r][c] += dp[r-1][c]\n                    continue\n                dp[r][c] += dp[r][c-1] + dp[r-1][c] - dp[r-1][c-1]\n         \n        # print(dp)\n        highest = -1\n        for r in range(1, len(dp)):\n            r0= r1 = r\n            c0= c1 = 1\n            while r1 < len(dp) and c1 < len(dp[0]):\n              \n                result = dp[r1][c1] + dp[r0-1][c0-1] - dp[r1][c0-1] - dp[r0-1][c1]\n  \n                # print(f'r0:{r0} r1:{r1} c0:{c0} c1:{c1} result:{result}')\n                if result <= threshold:\n                    highest = max(r1-r0, highest)\n                    r1 += 1\n                    c1 +=1\n                else:\n                    r1 -=1\n                    c0 +=1\n                r1 = max(r0+1,r1)\n                c1 = max(c0+1,c1)\n\n        return highest + 1"]