["arr = list(input())\r\nn = len(arr)\r\nans = list()\r\n#for i in arr:\r\n    #ans.append(ord(i)-96)\r\nli = ['b','d','f','h','j','l','n','p','r','t','v','x','z']\r\ns = set(arr)\r\ntemp = s.intersection(li)\r\nfor _ in range(int(input())):\r\n    x,y = list(map(int,input().split()))\r\n    li = list(temp)\r\n    #s = set()\r\n    c=0\r\n    for i in range(x-1,y):\r\n        if arr[i] in li:\r\n            c+=1 \r\n            li.remove(arr[i])\r\n        if len(li)==0:\r\n            break\r\n    print(c)\r\n", "S=input()\nN=len(S)\nQ=int(input())\nA=[[0]*27 for i in range(N)]\nfor i in range(N):\n    try:\n        if i>0:\n            for j in range(1,27):\n                A[i][j]=A[i-1][j]\n        A[i][ord(S[i])-ord('a')+1]+=1\n    except:\n        pass\n# for i in A:\n#     print(i)\nwhile Q>0:\n    Q-=1\n    X,Y = [int(x) for x in input().split()]\n    ans=0\n    X-=1\n    Y-=1\n    for i in range(2,27,2):\n        try:\n            if X>0:\n                val = A[Y][i]-A[X-1][i]\n            else:\n                val = A[Y][i]\n        except:\n            pass\n        if (val)>0:\n            ans+=1\n    print(ans)", "\r\nstring = input()\r\ntoken = {}\r\nfor i in range(98,123,2):\r\n    token[chr(i)] = 0\r\nl = [token.copy()]\r\nfor letter in string:\r\n    if (ord(letter)+1)%2:\r\n            token[letter] += 1\r\n    l.append(token.copy())\r\nq = int(input())\r\nfor query in range(q):\r\n    a,b = map(int,input().split())\r\n    if a > b:\r\n        a,b = b,a\r\n    ans = 0\r\n    if a > len(string):\r\n        a = len(string)\r\n    if b > len(string):\r\n        b = len(string)\r\n    if a < 1:\r\n        a = 1\r\n    if b < 1:\r\n        b = 1\r\n    for i in range(98,123,2):\r\n        if l[b][chr(i)] > l[a-1][chr(i)]:\r\n            ans += 1\r\n    print(ans)  ", "import sys\r\nfrom functools import lru_cache, cmp_to_key\r\nfrom heapq import merge, heapify, heappop, heappush\r\nfrom math import *\r\nfrom collections import defaultdict as dd, deque, Counter as C\r\nfrom itertools import combinations as comb, permutations as perm\r\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\r\nfrom time import perf_counter\r\nfrom fractions import Fraction\r\nimport copy\r\nimport time\r\nstarttime = time.time()\r\nmod = int(pow(10, 9) + 7)\r\nmod2 = 998244353\r\n# from sys import stdin\r\n# input = stdin.readline\r\ndef data(): return sys.stdin.readline().strip()\r\ndef out(*var, end=\"\\n\"): sys.stdout.write(' '.join(map(str, var))+end)\r\ndef L(): return list(sp())\r\ndef sl(): return list(ssp())\r\ndef sp(): return map(int, data().split())\r\ndef ssp(): return map(str, data().split())\r\ndef l1d(n, val=0): return [val for i in range(n)]\r\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\r\ntry:\r\n    # sys.setrecursionlimit(int(pow(10,7)))\r\n    sys.stdin = open(\"input.txt\", \"r\")\r\n    # sys.stdout = open(\"../output.txt\", \"w\")\r\nexcept:\r\n    pass\r\ndef pmat(A):\r\n    for ele in A:\r\n        print(*ele,end=\"\\n\")\r\ndef seive():\r\n    prime=[1 for i in range(10**6+1)]\r\n    prime[0]=0\r\n    prime[1]=0\r\n    for i in range(10**6+1):\r\n        if(prime[i]):\r\n            for j in range(2*i,10**6+1,i):\r\n                prime[j]=0\r\n    return prime\r\n\r\nimport sys\r\n\r\ns = list(sys.stdin.readline().strip())\r\nn = len(s)\r\nBIT = [[0]*(n+1) for i in range(26)]\r\n\r\ndef update(i, idx, val):\r\n    idx += 1\r\n    while idx <= n:\r\n        BIT[i][idx] += val\r\n        idx += (-idx & idx)\r\n\r\ndef read(i, idx):\r\n    ret = 0\r\n    while idx > 0:\r\n        ret += BIT[i][idx]\r\n        idx -= (-idx & idx)\r\n    return ret \r\n\r\nfor i in range(n):\r\n    update(ord(s[i])-97, i, 1)\r\n\r\nq = int(sys.stdin.readline())\r\n\r\nfor _ in range(q):\r\n    a, b = sys.stdin.readline().split()\r\n    t=2\r\n    if t==\"1\":\r\n        idx = int(a) - 1\r\n        bit_idx = ord(s[idx])-97\r\n        update(bit_idx, idx, -1)\r\n        s[idx] = b\r\n        bit_idx = ord(b)-97\r\n        update(bit_idx, idx, 1)\r\n    else:\r\n        ans = 0\r\n        l, r = int(a), int(b)\r\n        for i in range(1,26,2):\r\n            ans += 1 if (read(i, r) - read(i, l-1)) > 0 else 0\r\n        print(ans)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nendtime = time.time()\r\n# print(f\"Runtime of the program is {endtime - starttime}\")\r\n\r\n", "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\ninp = lambda: list(map(int,sys.stdin.readline().rstrip(\"\\r\\n\").split()))\r\n#______________________________________________________________________________________________________\r\n# from math import *\r\n# from bisect import *\r\n# from heapq import *\r\n# from collections import defaultdict as dd\r\n# from collections import OrderedDict as odict\r\n# from collections import Counter as cc\r\n# from collections import deque\r\n# sys.setrecursionlimit(2*(10**5)+100) this is must for dfs\r\n# mod = 10**9+7; md = 998244353\r\n# ______________________________________________________________________________________________________\r\n# Checking prime in O(root(N))\r\n# def isprime(n):\r\n#     if (n % 2 == 0 and n > 2) or n == 1: return 0\r\n#     else:\r\n#         s = int(n**(0.5)) + 1\r\n#         for i in range(3, s, 2):\r\n#             if n % i == 0:\r\n#                 return 0\r\n#         return 1\r\n# def lcm(a,b):\r\n#   return (a*b)//gcd(a,b)\r\n# ______________________________________________________________________________________________________\r\n# nCr under mod\r\n# def C(n,r,mod):\r\n#   if r>n:\r\n#       return 0\r\n#   num = den = 1\r\n#   for i in range(r):\r\n#       num = (num*(n-i))%mod\r\n#       den = (den*(i+1))%mod\r\n#   return (num*pow(den,mod-2,mod))%mod\r\n# M = 10**5 +10\r\n# ______________________________________________________________________________________________________\r\n# For smallest prime factor of a number\r\n# M = 1000010\r\n# pfc = [i for i in range(M)]\r\n# def pfcs(M):\r\n#   for i in range(2,M):\r\n#       if pfc[i]==i:\r\n#           for j in range(i+i,M,i):\r\n#               if pfc[j]==j:\r\n#                   pfc[j] = i\r\n#   return\r\n# pfcs(M)\r\n# ______________________________________________________________________________________________________\r\n# import sys\r\nsys.setrecursionlimit(10**5)\r\n# n = int(sys.stdin.readline().strip())\r\n# a = list(map(int,sys.stdin.readline().strip().split()))\r\na = str(input())\r\nn = len(a)\r\nst = [float('inf') for i in range(4*len(a))]\r\ndef build(a,ind,start,end):\r\n\tif start == end:\r\n\t\tst[ind] = [a[start]] if ord(a[start])%2==0 else []\r\n\telse:\r\n\t\tmid = (start+end)//2\r\n\t\tbuild(a,2*ind+1,start,mid)\r\n\t\tbuild(a,2*ind+2,mid+1,end)\r\n\t\tst[ind] = list(set(st[2*ind+1]+st[2*ind+2]))\r\nbuild(a,0,0,n-1)\r\ndef query(ind,l,r,start,end):\r\n\tif start>r or end<l:\r\n\t\treturn []\r\n\tif l<=start<=end<=r:\r\n\t\treturn st[ind]\r\n\tmid = (start+end)//2\r\n\treturn list(set(query(2*ind+1,l,r,start,mid)+query(2*ind+2,l,r,mid+1,end)))\r\nfor i in range(int(input())):\r\n\tl,r = inp()\r\n\tans = query(0,l-1,r-1,0,n-1)\r\n\t# print(ans)\r\n\tprint(len(ans))\r\n# tc = 1\r\n# # tc, = inp()\r\n# for _ in range(tc):\r\n#     # s = str(input())\r\n#     a = [i for i in input().split()]\r\n#     k = min(a,key = lambda x:len(x))\r\n#     print(k)\n"]