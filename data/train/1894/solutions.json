["# Definition for singly-linked list.\n # class ListNode(object):\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution(object):\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"\n         if not root:\n             return [None for _ in range(k)]\n         \n         if k == 1:\n             return [root]\n         \n         count_nodes = 1\n         start = root\n         while start.next:\n             start = start.next\n             count_nodes += 1\n         \n         buckets = [0 for _ in range(k)]\n         for i in range(len(buckets)):\n             import math\n             \n             curr = math.ceil(count_nodes / k)\n             count_nodes -= curr\n             k -= 1\n             buckets[i] = curr\n             \n             if count_nodes == 0:\n                 break\n \n         def split_ll(root, result, index, buckets):\n             if index == len(buckets):\n                 return\n             if not root:\n                 result.append(None)\n                 return split_ll(root, result, index + 1, buckets)\n             \n             end = root\n             curr_count = 1\n             while curr_count < buckets[index]:\n                 end = end.next\n                 curr_count += 1\n             \n             start = root\n             root = end.next\n             end.next = None\n             \n             result.append(start)\n             return split_ll(root, result, index + 1, buckets)\n         \n         result = []\n         split_ll(root, result, 0, buckets)\n         return result\n             \n", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"\n         # Calculate length of linked list\n         retList = []\n         if root == None:\n             for i in range(k):\n                 retList.append([])\n             return retList\n         \n         curr = root\n         total_len = 1\n         while(curr.next != None):\n             curr = curr.next\n             total_len += 1\n         part_len = total_len // k\n         r = total_len % k\n         head = root\n         prev = None\n         for i in range(k):\n            \n             retList.append(head)\n             if r>0:\n                 inc = 1\n             else:\n                 inc = 0\n             r -= 1\n             for j in range(part_len+inc):\n                 prev = head\n                 head = head.next\n             if prev:\n                 prev.next = None\n             \n         return retList", "# Definition for singly-linked list.\n # class ListNode(object):\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution(object):\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"\n         if not root: return [None for _ in range(k)]\n         length = 0;\n         i = root;\n         while i:\n             i = i.next;\n             length += 1;\n             \n         chunk_size = length//k\n         num_longer_chunks = length % k\n         \n         res = [chunk_size + 1] * num_longer_chunks + [chunk_size] * (k - num_longer_chunks)\n         \n         curr = root;\n         prev = None;\n         \n         for i,num in enumerate(res):\n             res[i] = curr;\n             for _ in range(num):\n                 prev = curr;\n                 curr = curr.next;\n             \n             prev.next = None;\n             \n         return res\n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"\n         length = 0\n         cur_node = root\n         while cur_node:\n             length += 1\n             cur_node = cur_node.next\n         result = []\n         part_base_len = length // k\n         p1 = length % k\n         p0 = k - p1\n         cur_node = root\n         for i in range(p1):\n             head = None\n             c_node = None\n             for j in range(part_base_len + 1):\n                 if not head:\n                     head = ListNode(cur_node.val)\n                     c_node = head\n                 else:\n                     c_node.next = ListNode(cur_node.val)\n                     c_node = c_node.next\n                 cur_node = cur_node.next\n             result.append(head)\n         for i in range(p0):\n             if cur_node:\n                 head = None\n                 c_node = None\n                 for j in range(part_base_len):\n                     if cur_node:\n                         if not head:\n                             head = ListNode(cur_node.val)\n                             c_node = head\n                         else:\n                             c_node.next = ListNode(cur_node.val)\n                             c_node = c_node.next\n                         cur_node = cur_node.next\n                 result.append(head)\n             else:\n                 result.append([])\n         return result", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"\n         \n         n = 0\n         res = []\n         def deepth(root):\n             if root == None:\n                 return 0\n             if root.next == None:\n                 return 1\n             return 1 + deepth(root.next)\n         n = deepth(root)\n         if n <= k:\n             for i in range(n):\n                 res.append([root.val])\n                 root = root.next\n             for i in range(k-n):\n                 res.append([])\n         if n > k:\n             j = [n//k]*k\n             for i in range(n%k):\n                 j[i] += 1\n             for i in j:\n                 temp = []\n                 for k in range(i):\n                     temp.append(root.val)\n                     root = root.next\n                 res.append(temp)\n         return res", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"\n         #\u5148\u5212\u5206\u957f\u5ea6\uff0c\u5728\u586b\u5145\n         le=0#\u5904\u7406[]\u7a7a\u6811\n         p=root\n         #\u6c42\u957f\u5ea6\n         while p:\n             le+=1\n             p=p.next\n         #\u6bcf\u4e2a\u5c0f\u6bb5\u957f\u5ea6\n         l=le//k\n         r=le%k\n         \n         #\u586b\u5145\n         res=[]\n         pre=ListNode(0)\n         head=root\n         #k\u4e2a\u5c0f\u6bb5\n         for i in range(k):\n             #root\u5b58\u5728\n             if head:\n                 res.append(head)\n                 r-=1\n                 #\u6bcf\u4e2a\u5c0f\u6bb5\u91cc\u586b\u5145\u7684\u5143\u7d20\u6570\n                 for j in range(l+(r>=0)):\n                     pre=head\n                     head=head.next\n                 #\u5207\u65ad\n                 pre.next=None\n             else:\n                 res.append(None)\n         return res\n         \n             \n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"\n \n         #\u5148\u6c42\u957f\u5ea6\uff0c\u5bf9\u957f\u5ea6\u5212\u5206\n         lg=0\n         p=root\n         while p:\n             lg+=1\n             p=p.next\n         #\u6bcf\u4e2a\u5c0f\u5e8f\u5217\u7684\u957f\u5ea6\n         l=lg//k\n         #\u5206\u914dr\n         r=lg%k\n         \n         res=[]\n         head=root\n         pre=ListNode(0)\n         for i in range(k):\n             if head:\n                 r-=1\n                 res.append(head)\n                 for j in range(l+(r>=0)):\n                     print(22)\n                     pre=head\n                     head=head.next\n                 pre.next=None\n                 print(111)\n             else:\n                 res.append(None)\n             \n         return res\n         \n             \n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"\n         '''\n         total = 0\n         nums = list()\n         head = root\n         while head:\n             total += 1\n             nums.append(head.val)\n             head = head.next\n         \n         if total%k == 0:\n             size = max(total//k, 1)\n             total = k * size\n             res = list()\n             for i in range(0, total, size):\n                 tmp = nums[i: i+size]\n                 if not tmp:\n                     tmp = []\n                 res.append(tmp)\n             return res\n         else:\n             len1 = total%k\n             len2 = k - len1\n             size1 = max(math.ceil(total/k), 1)\n             size2 = max(total//k, 1)\n             total1 = size1 * len1\n             total2 = size2 * len2\n             res1 = list()\n             res2 = list()\n             for i in range(0, total1, size1):\n                 tmp = nums[i: i+size1]\n                 if not tmp:\n                     tmp = []\n                 res1.append(tmp)\n             #print('0', total1, size1, res1)\n             for i in range(total1, total1+total2, size2):\n                 tmp = nums[i: i+size2]\n                 if not tmp:\n                     tmp = []\n                 res2.append(tmp)\n             #print(total1, total, size2, res2)\n             return res1+res2\n         '''\n         total = 0\n         head = root\n         while head:\n             total += 1\n             head = head.next\n         head = root\n         size = total//k\n         remain = total%k\n         res = list()\n         for i in range(k):\n             tmp = list()\n             for j in range(size):\n                 try:\n                     tmp.append(head.val)\n                     head = head.next\n                 except:\n                     continue\n             if remain > 0:\n                 try:\n                     tmp.append(head.val)\n                     head = head.next\n                 except:\n                     continue\n                 remain -= 1\n             res.append(tmp)\n         return res\n", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"\n         res=[]\n         ans=[]\n         for i in range(k):\n             res.append([])\n         while root:\n             ans.append(root.val)\n             root=root.next\n             \n         l=len(ans)\n         l1=l//k\n         l2=l%k\n         print(l1,l2)\n         for i in range(k):\n             if l2>0:\n                 for j in range(l1+1):\n                     res[i].append(ans.pop(0))\n             else:\n                 for j in range(l1):\n                     res[i].append(ans.pop(0))\n             print(res)\n             l2-=1\n         return res\n             ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"\n         def list_len(head):\n             cnt = 0\n             while head:\n                 cnt += 1\n                 head = head.next\n             return cnt\n         \n         tlen = list_len(root)\n         res = [None] * k\n         if tlen <= k:\n             i = 0\n             head = root\n             while head:\n                 res[i] = head\n                 i += 1\n                 pre = head\n                 head = head.next\n                 pre.next = None\n             return res\n         \n         rich = tlen % k\n         h = tlen // k\n         # print(tlen, k , rich, h)\n         res[0] = root\n \n         head = root\n         cur = 1\n         while cur < k:\n             i = 1\n             while i < h:\n                 head = head.next\n                 i += 1\n             if rich > 0:\n                 head = head.next\n                 rich -= 1\n             pre = head\n             head = head.next\n             res[cur] = head\n             pre.next = None\n             cur += 1\n         return res\n             \n             \n             \n         \n         \n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n import math\n class Solution:\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"\n         def length(node):\n             result = 0\n             while node is not None:\n                 result += 1\n                 node = node.next\n             return result\n         \n         total = length(root)\n         result = []\n         current = root\n         \n         while k > 0:\n             l = math.ceil(total / k)\n             total -= l\n             k -= 1\n             \n             if l == 0:\n                 result.append(None)\n                 continue\n                 \n             root = current\n             for _ in range(l-1):\n                 current = current.next\n             result.append(root)\n             current.next, current = None, current.next\n             \n         return result", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"    \n         # get the length of list:\n         node = root\n         total = 0\n         while node:\n           total += 1\n           node = node.next\n \n         avg = int(total / k)\n         extras = total % k\n         result = [None] * k\n         \n         curr = root\n         for i in range(k):\n           result[i] = curr\n           if extras > 0:\n             steps = avg + 1\n             extras -= 1\n           else:\n             steps = avg\n           prev = None\n           for j in range(steps):\n             prev = curr\n             curr = curr.next\n           \n           if prev:\n             prev.next = None\n         \n         return result\n \n             \n             \n         \n         \n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"\n         count = 0\n         node = root\n         while node:\n             count += 1\n             node = node.next\n         baseNodeLen = int(count / k)\n         extraLenCount = count % k\n         ans = []\n         newRoot = root\n         for index in range(k):\n             if newRoot == None:\n                 ans.append(None)\n                 continue\n             currentLen = baseNodeLen\n             lastNode = newRoot\n             if extraLenCount > 0:\n                 currentLen += 1\n                 extraLenCount -= 1\n             for i in range(currentLen - 1):\n                 lastNode = lastNode.next\n             currentRoot = newRoot\n             newRoot = lastNode.next\n             lastNode.next = None\n             ans.append(currentRoot)\n         return ans", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def splitListToParts(self, root, k):\n         \"\"\"\n         :type root: ListNode\n         :type k: int\n         :rtype: List[ListNode]\n         \"\"\"\n         ans = []\n         rootLength = self.length(root)\n         width, reminder = divmod(rootLength,k)\n         curr = root\n         for i in range(k):\n             head = curr\n             for j in range(width + (i<reminder) -1):\n                 if curr: curr = curr.next\n             if curr:\n                 pre = curr\n                 curr = curr.next\n                 pre.next = None\n             ans.append(head)\n         return ans\n \n \n \n \n \n \n     def length(self, head):\n         length = 0\n         while head:\n             length +=1\n             head = head.next\n         return length\n \n \n \n \n"]