["# cook your dish here\nfor a in range(int(input())):\n    N,M=map(int,input().split())\n    b=[]\n    for o in range(N):\n     b.append(input())\n    c=[]\n    for d in b:\n     f=[]\n     for e in range(len(d)):\n      if d[e]=='1':\n       f.append(e)\n     c.append(f)\n    i=[]\n    for g in range(len(c)):\n     for h in range(len(c[g])):\n      for j in range(len(c)):\n       for k in range(len(c[j])):\n        if (j>g) or(j==g and k>h):\n         if c[g][h]-c[j][k]>=0:\n          i.append(c[g][h]-c[j][k]+j-g)\n         else:\n          i.append(-1*(c[g][h]-c[j][k])+j-g)\n    l=[m for m in range(1,N+M-1)]\n    for n in l:\n     print(i.count(n),end=' ')", "for a in range(int(input())):\n    N,M=map(int,input().split())\n    b=[]\n    for o in range(N):\n     b.append(input())\n    c=[]\n    for d in b:\n     f=[]\n     for e in range(len(d)):\n      if d[e]=='1':\n       f.append(e)\n     c.append(f)\n    i=[]\n    for g in range(len(c)):\n     for h in range(len(c[g])):\n      for j in range(len(c)):\n       for k in range(len(c[j])):\n        if (j>g) or(j==g and k>h):\n         if c[g][h]-c[j][k]>=0:\n          i.append(c[g][h]-c[j][k]+j-g)\n         else:\n          i.append(-1*(c[g][h]-c[j][k])+j-g)\n    l=[m for m in range(1,N+M-1)]\n    for n in l:\n     print(i.count(n),end=' ')\n  ", "for _ in range(int(input())):\n    mat=[]\n    n,m=map(int,input().split())\n    for i in range(n):\n     mat.append(list(input()))\n    d=[0]*(n+m)\n    for i in range(n):\n     for j in range(m):\n      if mat[i][j]=='1':\n       for x in range(n):\n        for y in range(m):\n         if mat[x][y]=='1':\n          d[abs(x-i)+abs(y-j)]+=1 \n    for i in range(1,n+m-1):\n     print(d[i]//2,end=' ')", "from math import *\nt=int(input())\nfor _ in range(t):\n    n,m=map(int,input().split())\n    a=[]\n    for i in range(n):\n     a.append(input())\n \n    l=[]\n    for i in range(n):\n     for j in range(m):\n      if(a[i][j]=='1'):\n       l.append((i,j))\n    d={}\n    for i in range(1,n+m-2+1):\n     d[i]=0\n    for i in range(len(l)):\n     for j in range(i+1,len(l)):\n      dis=abs(l[i][0]-l[j][0])+abs(l[i][1]-l[j][1])\n      d[dis]+=1\n    for i in range(1,n+m-2+1):\n     print(d[i],end=' ')\n  ", "from itertools import combinations\nfrom scipy.spatial.distance import pdist\nimport numpy as np\n\ndef solve():\n    houses = []\n    n,m = list(map(int, input().split()))\n \n    for i in range(n):\n     s = input()\n     tmp = [i for i,x in enumerate(s) if x =='1']\n     houses = houses + [[i,j] for j in tmp]\n \n    counter = [0]* (n+m-1)\n    dis = pdist(np.array(houses),'cityblock').astype(int)\n \n    for i in dis:\n     counter[i] += 1\n    return [counter[i] for i in range(1,n+m-1)]\n\nfor _ in range(int(input())):\n    print(*solve())", "from itertools import combinations\nfrom scipy.spatial.distance import pdist\nimport numpy as np\n\ndef solve():\n    houses = []\n    n,m = list(map(int, input().split()))\n \n    for i in range(n):\n     s = input()\n     tmp = [i for i,x in enumerate(s) if x =='1']\n     houses = houses + [[i,j] for j in tmp]\n \n    counter = [0]* (n+m-1)\n    dis = pdist(np.array(houses),'cityblock').astype(int)\n \n    for i in dis:\n     counter[i] += 1\n    return [counter[i] for i in range(1,n+m-1)]\n\nfor _ in range(int(input())):\n    print(*solve())", "from collections import defaultdict\nfrom itertools import combinations\nfrom scipy.spatial.distance import pdist\n\ndef solve():\n    houses = []\n    n,m = list(map(int, input().split()))\n \n    for i in range(n):\n     s = input()\n     tmp = [i for i,x in enumerate(s) if x =='1']\n     houses = houses + [(i,j) for j in tmp]\n \n    counter = defaultdict(int)\n    dis = pdist(houses,'cityblock')\n    for i in dis:\n     counter[i] += 1\n    return [counter[i] for i in range(1,n+m-1)]\n\nfor _ in range(int(input())):\n    print(*solve())", "t = int(input())\nfor _ in range(t):\n    n,m = map(int,input().split())\n    l = []\n    for i in range(n):\n     l.append(input())\n    li=[]\n    for i in range(n):\n     for j in range(m):\n      if(l[i][j]=='1'):\n       li.append((i+1,j+1))\n    di = [0 for i in range(n+m-2)]\n    for x in range(len(li)):\n     for y in li[x+1:]:\n      z = li[x]\n      distance = abs(z[0]-y[0])+abs(z[1]-y[1])\n      di[distance-1]=di[distance-1]+1\n    for x in di:\n     print(x,end=' ')\n    print()\n", "from collections import defaultdict\nfrom itertools import combinations\n\ndef norm(a, b):\n    return abs(a[0]-b[0]) + abs(a[1]-b[1])\n\ndef solve():\n    houses = []\n    n,m = list(map(int, input().split()))\n \n    for i in range(n):\n     s = input()\n     tmp = [i for i,x in enumerate(s) if x =='1']\n     houses = houses + [(i,j) for j in tmp]\n \n    counter = defaultdict(int)\n    for a,b in combinations(houses,2):\n     counter[norm(a,b)] += 1\n    return [counter[i] for i in range(1,n+m-1)]\n\nfor _ in range(int(input())):\n    print(*solve())", "class Point(object):\n    def __init__(self,x,y):\n     self.x,self.y = x,y\n    def distance(self,other):\n     return abs(self.x-other.x)+abs(self.y-other.y)\n\nfor _ in range(int(input())):\n    n,m = map(int,input().split())\n    l,dist = [],[0]*(n+m-1)\n    for i in range(n):\n     c = input()\n     for j in range(m):\n      if c[j] == '1':\n       l.append(Point(i,j))\n\n    for i in range(len(l)):\n     for j in range(i+1,len(l)):\n      dist[l[i].distance(l[j] )]+=1\n\n    dist.pop(0)\n    for i in dist:\n     print(i,end=' ')\n    print()\n \n", "from itertools import combinations\nclass Point(object):\n    def __init__(self,x,y):\n     self.x,self.y = x,y\n    def distance(self,other):\n     return abs(self.x-other.x)+abs(self.y-other.y)\n\nfor _ in range(int(input())):\n    n,m = map(int,input().split())\n    l,dist = [],[0]*(n+m-1)\n    for i in range(n):\n     c = input()\n     for j in range(m):\n      if c[j] == '1':\n       l.append(Point(i,j))\n\n    total = 0\n \n    for i in combinations(l,2):\n     dist[i[0].distance(i[1])]+=1\n\n    dist.pop(0)\n    for i in dist:\n     print(i,end=' ')\n    print()\n ", "T=int(input())    \nfor i in range(T):\n    l=list(map(int,input().split()))\n    n,m=l[0],l[1]\n    z=[]\n    distance=[0]*(m+n-1)\n    for i in range(n):\n     arr=list(map(int,input()))\n     for j,v in enumerate(arr):\n       if v:\n        z.append((i,j))\n        for pt in z:\n         d=abs(pt[0]-i)+abs(pt[1]-j)\n         distance[d]+=1\n \n      \n    print(*distance[1:])\n", "T=int(input())\n\n \ndef dist(z,i,j):\n    return abs(z[i][0]-z[j][0])+abs(z[i][1]-z[j][1])\n \nfor i in range(T):\n    l=list(map(int,input().split()))\n    n,m=l[0],l[1]\n    grd=[list(map(int,input())) for i in range(n)]\n    z=[]\n    for i,r in enumerate(grd):\n     for j,v in enumerate(r):\n       if v:\n        z.append((i,j))\n   \n     distance=[0]*(n+m-2)\n     for i in range(len(z)):\n      for j in range(i+1,len(z)):\n       d=dist(z,i,j)\n       distance[d-1]+=1\n \n  \n \n    print(*distance)\n"]