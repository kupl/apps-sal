["import sys\n\ndef _r(*conv) :\n r = [conv[i](x) for i, x in enumerate(input().strip().split(' '))]\n return r[0] if len(r) == 1 else r\n\ndef _ra(conv) :\n return list(map(conv, input().strip().split(' ')))\n\ndef _rl() :\n return list(input().strip())\n\ndef _rs() :\n return input().strip()\n\ndef _a(k, *v) :\n return all(x == k for x in v)\n\ndef _i(conv) :\n for line in sys.stdin :\n  yield conv(line)\n##################################################################\n\nn = _r(int)\nlookup = dict([(x, i) for i, x in enumerate(_ra(str))])\ng = [(set(), dict()) for _ in range(n)]\n\nm = _r(int)\nfor _ in range(m) :\n c1, c2, d = _r(str, str, int)\n i1 = lookup[c1]\n\n g[i1][0].add(c2)\n g[i1][1][c2] = d\n\n\nt = _r(int)\nfor _ in range(t) :\n k = _ra(str)[1:]\n \n failed = False\n if len(set(k)) != len(k) :\n  failed = True\n\n if not failed :\n  if k[0] not in lookup : \n   failed = True\n  else : \n   r = 0\n   v = g[lookup[k[0]]]\n\n   for i in range(1, len(k)) : \n    if k[i] not in v[0] : \n     failed = True\n     break\n\n    r += v[1][k[i]]\n    v = g[lookup[k[i]]]\n   \n   if not failed : \n    print(r)\n  \n if failed : \n  print('ERROR')\n", "def main():\n n = eval(input())\n city = input().split()\n m = eval(input())\n mapp = {}\n for c in city:\n  mapp[c] = [0]*n\n while m:\n  m-=1\n  road = input().split()\n  temp = mapp[road[0]]\n  temp[city.index(road[1])] = int(road[-1])\n  mapp[road[0]] = temp\n t=eval(input())\n while t:\n  t-=1\n  dist = 0\n  v = [0]*n #visited\n  route = input().split()\n  if route[0] == '1':\n   if route[-1] in city:\n    print(dist)\n   else:\n    print('ERROR')\n  else:\n   for r in range(1,int(route[0])+1):\n    if (route[r] not in city) or v[city.index(route[r])]:\n     dist = 'ERROR'\n     break\n    elif r>1:\n     if mapp[route[r-1]][city.index(route[r])]:\n      dist+= mapp[route[r-1]][city.index(route[r])]\n     else:\n      dist = 'ERROR'\n      break\n    v[city.index(route[r])] = 1\n   print(dist)\nmain() ", "n=int(input())\ns=list(map(str,input().split()))\nm=int(input())\ndic={}\nfor i in range(m):\n a,b,c=list(map(str,input().split()))\n c=int(c)\n dic[(a,b)]=c\n  \nt=int(input())\nfor i in range(t):\n x=list(map(str,input().split()))\n y=len(x)\n if int(x[0])==1 and x[1] in s:\n  print(\"0\")\n elif int(x[0])==1:\n  print(\"ERROR\")\n elif x[1]==x[y-1]:\n  print(\"ERROR\")\n else:\n  if int(x[0])>n:\n   print(\"ERROR\")\n  else:\n   flag=1\n   ans=0\n   dic2={}\n   for j in range(1,len(x)):\n    if x[j] in dic2:\n     dic2[x[j]]+=1\n    else:\n     dic2[x[j]]=1\n   for j in dic2:\n    if dic2[j]>1:\n     flag=0\n     break\n   if flag==1:\n    for j in range(1,len(x)-1):\n     if (x[j],x[j+1]) in dic:\n      ans+=dic[(x[j],x[j+1])]\n     else:\n      flag=0\n      break\n   if flag==0:\n    print(\"ERROR\")\n   else:\n    print(ans)", "def main():\n #read no of cities\n n = eval(input())\n #read cities\n city = input().split()\n #read no of routes\n m = eval(input())\n mapp = {}\n #zero out map of routes\n for c in city:\n  mapp[c] = [0]*n\n #populate map with available routes by index\n while m:\n  m -= 1\n  road = input().split()\n  elem = mapp[road[0]]\n  elem[city.index(road[1])] = int(road[2])\n  mapp[road[0]] = elem\n #read no of itineraries\n itins = eval(input())\n #process each itinerary\n while itins:\n  itins -= 1\n  #read a route\n  route = input().split()\n  total = 0\n  #zero out visited cities\n  v = [0]*n\n  #if only 1 city in route, print 0\n  if route[0] == '1':\n   if route[-1] in city:\n    print(total)\n   #if city not available, print error\n   else:\n    print(\"ERROR\")\n  else:\n   #for each city in itinerary\n   for r in range(1, len(route)):\n    #if city not available or has been visited, print error\n    if (route[r] not in city) or v[city.index(route[r])]:\n     total = \"ERROR\"\n     break\n    #if first city in line, visit and move on, otherwise\n    elif r > 1:\n     #check if there is a route from the previous city to the \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current city in the map\n     if mapp[route[r-1]][city.index(route[r])]:\n      #add to totall\n      total += mapp[route[r-1]][city.index(route[r])]\n     #if no route available, print error\n     else:\n      total = \"ERROR\"\n      break\n    #mark as visited\n    v[city.index(route[r])] = 1\n   print(total)\nmain()", "def main():\n n = eval(input())\n city = input().split()\n m = eval(input())\n mapp = {}\n for c in city:\n  mapp[c] = [0]*n\n while m:\n  m -= 1\n  road = input().split()\n  temp = mapp[road[0]]\n  temp[city.index(road[1])] = int(road[-1])\n  mapp[road[0]] = temp\n t = eval(input())\n while t:\n  t -= 1\n  dist = 0\n  v = [0]*n #visited\n  route = input().split()\n  if route[0] == '1':\n   if route[-1] in city:\n    print(dist)\n   else:\n    print('ERROR')\n  else:\n   for r in range(1, int(route[0])+1):\n    if (route[r] not in city) or v[city.index(route[r])]:\n     dist = 'ERROR'\n     break\n    elif r>1:\n     if mapp[route[r-1]][city.index(route[r])]:\n      dist += mapp[route[r-1]][city.index(route[r])]\n     else:\n      dist = 'ERROR'\n      break\n    v[city.index(route[r])] = 1\n   print(dist)\nmain() ", "def main():\n n = eval(input())\n city = input().split()\n m = eval(input())\n mapp = {}\n for c in city:\n  mapp[c] = [0]*n\n while m:\n  m-=1\n  road = input().split()\n  temp = mapp[road[0]]\n  temp[city.index(road[1])] = int(road[-1])\n  mapp[road[0]] = temp\n t=eval(input())\n while t:\n  t-=1\n  dist = 0\n  v = [0]*n #visited\n  route = input().split()\n  if route[0] == '1':\n   if route[-1] in city:\n    print(dist)\n   else:\n    print('ERROR')\n  else:\n   for r in range(1,int(route[0])+1):\n    if (route[r] not in city) or v[city.index(route[r])]:\n     dist = 'ERROR'\n     break\n    elif r>1:\n     if mapp[route[r-1]][city.index(route[r])]:\n      dist+= mapp[route[r-1]][city.index(route[r])]\n     else:\n      dist = 'ERROR'\n      break\n    v[city.index(route[r])] = 1\n   print(dist)\nmain()"]