["p, n = [], int(input())\na = b = 0\nfor i in range(n):\n    t = list(map(int, input().split()))\n    k = t[0] // 2 + 1\n    a += sum(t[1: k])\n    if t[0] & 1:\n        p.append(t[k])\n        b += sum(t[k + 1: ])\n    else: b += sum(t[k: ])\np.sort(reverse = True)\nprint(a + sum(p[0 :: 2]), b + sum(p[1 :: 2]))", "n=int(input())\ns1,s2=0,0\ntab = []\nfor i in range(n):\n    c = list(map(int,input().split()))\n    for j in range(1,c[0]+1):\n        if(j*2<=c[0]): s1+=c[j]\n        else: s2+=c[j]\n    if(c[0] & 1):\n        s2-=c[(c[0]+1)//2]\n        tab.append(c[(c[0]+1)//2])\nif(len(tab)):\n    tab.sort()\n    tab.reverse()\n    for i in range(len(tab)):\n        if(i & 1): s2+=tab[i]\n        else: s1+=tab[i]\nprint(s1,s2)\n", "n=int(input())\n\ns1,s2=0,0\n\ntab = []\n\nfor i in range(n):\n\n    c = list(map(int,input().split()))\n\n    for j in range(1,c[0]+1):\n\n        if(j*2<=c[0]): s1+=c[j]\n\n        else: s2+=c[j]\n\n    if(c[0] & 1):\n\n        s2-=c[(c[0]+1)//2]\n\n        tab.append(c[(c[0]+1)//2])\n\nif(len(tab)):\n\n    tab.sort()\n\n    tab.reverse()\n\n    for i in range(len(tab)):\n\n        if(i & 1): s2+=tab[i]\n\n        else: s1+=tab[i]\n\nprint(s1,s2)\n\n\n\n\n\n# Made By Mostafa_Khaled\n", "#!/usr/bin/env python3\n\nodd, even = [], []\nplayer1_turn = True\nplayer1 = player2 = 0\npile_number = int(input())\n\nfor _ in range(pile_number):\n    n, *pile = tuple(map(int, input().split()))\n    if n % 2 == 0:\n        even.append(pile)\n    else:\n        odd.append(pile)\n\nfor pile in even:\n    n = len(pile)\n    player1 += sum(pile[:n//2])\n    player2 += sum(pile[n//2:])\n\nfor pile in sorted(odd, reverse=True, key=lambda x: x[len(x)//2]):\n    n = len(pile)\n    top, middle, bottom = pile[:n//2], pile[n//2], pile[n//2+1:]\n    player1 += sum(top)\n    player2 += sum(bottom)\n    if player1_turn:\n        player1 += middle\n        player1_turn = not player1_turn\n    else:\n        player2 += middle\n        player1_turn = not player1_turn\n\nprint(player1, player2)\n", "import sys\nfrom functools import reduce\n\nfor n in sys.stdin:\n    n = int(n)\n    cards = [list(map(int, input().split()[1:])) for i in range(n)]\n    mid = []\n    a, b = 0, 0\n    add = lambda x=0, y=0: x + y\n    for c in cards:\n        s = len(c)\n        m = s >> 1\n        if s & 1 == 0:\n            a += reduce(add, c[:m])\n            b += reduce(add, c[m:])\n        else:\n            a += reduce(add, c[:m] or [0])\n            b += reduce(add, c[m + 1:] or [0])\n            mid.append(c[m])\n    mid.sort(reverse=True)\n    j = True\n    for c in mid:\n        if j:\n            a += c\n        else:\n            b += c\n        j = not j\n    print(a, b)\n", "import sys\nfrom functools import reduce\n\nfor n in sys.stdin:\n    n = int(n)\n    cards = [list(map(int, input().split()[1:])) for i in range(n)]\n    mid = []\n    a, b = 0, 0\n    add = lambda x=0, y=0: x + y\n    for c in cards:\n        s = len(c)\n        m = s >> 1\n        a += reduce(add, c[:m] or [0])\n        b += reduce(add, c[m + (s & 1):] or [0])\n        if s & 1 == 1:\n            mid.append(c[m])\n    mid.sort(reverse=True)\n    j = True\n    for c in mid:\n        if j:\n            a += c\n        else:\n            b += c\n        j = not j\n    print(a, b)\n", "from functools import reduce\n\nn = int(input())\ncards = [list(map(int, input().split()[1:])) for i in range(n)]\nmid = [c[len(c) >> 1] for c in cards if len(c) & 1 == 1]\na, b = 0, 0\nadd = lambda x=0, y=0: x + y\nfor c in cards:\n    m = len(c) >> 1\n    a += reduce(add, c[:m] or [0])\n    b += reduce(add, c[m + (len(c) & 1):] or [0])\nmid.sort(reverse=True)\na += reduce(add, mid[::2] or [0])\nb += reduce(add, mid[1::2] or [0])\nprint(a, b)\n", "from functools import reduce\n\nn = int(input())\ncards = [list(map(int, input().split()[1:])) for i in range(n)]\nmid = sorted((c[len(c) >> 1] for c in cards if len(c) & 1 == 1), reverse=True)\nadd = lambda x=0, y=0: x + y\na, b = reduce(add, mid[::2] or [0]), reduce(add, mid[1::2] or [0])\nfor c in cards:\n    m = len(c) >> 1\n    a += reduce(add, c[:m] or [0])\n    b += reduce(add, c[m + (len(c) & 1):] or [0])\nprint(a, b)\n", "n = int(input())\nc = [list(map(int, input().split())) for _ in range(n)]\na, b = 0, 0\nd = []\nfor i in range(n):\n    if len(c[i]) % 2:\n        a += sum(c[i][1:c[i][0]//2+1])\n        b += sum(c[i][c[i][0]//2+1:])\n    else:\n        a += sum(c[i][1:c[i][0]//2+1])\n        b += sum(c[i][c[i][0]//2+2:])\n        d.append(c[i][c[i][0]//2+1])\nd.sort(reverse=True)\nprint(a+sum(d[0::2]), b+sum(d[1::2]))", "n = int(input())\na = b = 0\ns = []\nfor _ in range(n):\n    l = [*map(int, input().split())][1:]\n    m = len(l)\n    if m & 1:\n        s.append(l[m//2])\n    a += sum((l[:m//2]))\n    b += sum((l[(m + 1)//2:]))\ns.sort(reverse = True)\na += sum(s[::2])\nb += sum(s[1::2])\nprint(a, b)", "rr= lambda: input().strip()\nrri= lambda: int(rr())\nrrm= lambda: [int(x) for x in rr().split()]\n \ndef sol(n):\n    cm=[]\n    res1=0\n    res2=0\n    for i in range(n):\n        x=rrm()\n        if x[0]%2==1:\n            cm.append(x[x[0]//2+1])\n        res1+=sum(x[1:x[0]//2+1])\n        res2+=sum(x[(x[0]+1)//2+1:])\n    cm.sort(reverse=True)\n    for i,v in enumerate(cm):\n        if i%2==0:\n            #print(v)\n            res1+=v\n        else:\n            res2+=v\n    return str(res1)+\" \"+str(res2)\n \nT=1\nfor _ in range(T):\n    n=rri()\n    ans=sol(n)\n    print(ans)", "#!/usr/bin/env pypy\nrr= lambda: input().strip()\nrri= lambda: int(rr())\nrrm= lambda: [int(x) for x in rr().split()]\n \ndef sol(n):\n    cm=[]\n    res1=0\n    res2=0\n    for i in range(n):\n        x=rrm()\n        if x[0]%2==1:\n            cm.append(x[x[0]//2+1])\n        res1+=sum(x[1:x[0]//2+1])\n        res2+=sum(x[(x[0]+1)//2+1:])\n    cm.sort(reverse=True)\n    for i,v in enumerate(cm):\n        if i%2==0:\n            #print(v)\n            res1+=v\n        else:\n            res2+=v\n    return str(res1)+\" \"+str(res2)\n \nT=1\nfor _ in range(T):\n    n=rri()\n    ans=sol(n)\n    print(ans)", "chef_sum = 0\nramsay_sum = 0\nodds_mids = []\nfor n in range(int(input())):\n    c, *c_list = map(int, input().split())\n    if c%2 == 1:\n        odds_mids.append(c_list.pop(c//2))\n    for index,element in enumerate(c_list):\n        if index < len(c_list)/2:\n            chef_sum += element\n        else:\n            ramsay_sum += element\nodds_mids.sort(reverse = True)\nfor index, element in enumerate(odds_mids):\n    if index%2 == 0:\n        chef_sum += element\n    else:\n        ramsay_sum += element\nprint(chef_sum, ramsay_sum)", "n = int(input())\na,b = 0,0\nl = []\nfor _ in range(n):\n    inpt = list(map(int,input().split()))[1:]\n    li = len(inpt)\n    if li%2:\n        l.append(inpt[li//2])\n    a += sum((inpt[:li//2]))\n    b += sum((inpt[(li + 1)//2:]))\nl.sort(reverse=True)\na += sum(l[::2])\nb += sum(l[1::2])\nprint(a, b)", "n = int(input())\n\n\nlista = []\naux = []\n\nsomaA = 0\nsomaB = 0\n\nfor i in range(n):\n    a = [int(i) for i in input().split()][1:]\n    if len(a) > 1:\n        somaA += sum(a[0:len(a)//2])\n        somaB += sum(a[-(len(a)//2):])\n\n    if len(a) % 2 == 1:\n        aux.append(a[len(a)//2])\n\n\naux.sort(reverse=True)\n\nfor i in range(0, len(aux), 2):\n    somaA += aux[i]\nfor i in range(1, len(aux), 2):\n    somaB += aux[i]\n    \nprint(somaA, somaB)\n", "n = int(input())\n\nlista = []\naux = []\n\nsomaA = 0\nsomaB = 0\n\nfor i in range(n):\n    a = [int(i) for i in input().split()][1:]\n    if len(a) > 1:\n        somaA += sum(a[0:len(a)//2])\n        somaB += sum(a[-(len(a)//2):])\n\n    if len(a) % 2 == 1:\n        aux.append(a[len(a)//2])\n\n\naux.sort(reverse=True)\n\nfor i in range(0, len(aux), 2):\n    somaA += aux[i]\nfor i in range(1, len(aux), 2):\n    somaB += aux[i]\n    \nprint(somaA, somaB)", "N = int(input())\none = two =  0\nmiddles = []\nfor i in range(N):\n\tarray = list(map(int, input().split()))[1:]\n\tsize = len(array)-1\n\tmiddle = size//2\n\tfor i in range(middle):\n\t\tone += array[i]\n\tfor i in range(middle+1, len(array)):\n\t\ttwo += array[i]\n\tif len(array)%2==1:\n\t\tmiddles.append(array[middle])\n\telse:\n\t\tone += array[middle]\n\nmiddles = sorted(middles)\nONE = True\nfor i in range(len(middles)-1, -1, -1):\n\tif ONE:\n\t\tone += middles[i]\n\t\tONE = False\n\telse:\n\t\ttwo += middles[i]\n\t\tONE = True\nprint(one, two)\n", "N = int(input())\none = two =  0\nmiddles = []\nfor i in range(N):\n\tarray = list(map(int, input().split()))[1:]\n\tsize = len(array)-1\n\tmiddle = size//2\n\tfor i in range(middle):\n\t\tone += array[i]\n\tfor i in range(middle+1, len(array)):\n\t\ttwo += array[i]\n\tif len(array)%2==1:\n\t\tmiddles.append(array[middle])\n\telse:\n\t\tone += array[middle]\n\nmiddles = sorted(middles)\nONE = True\nfor i in range(len(middles)-1, -1, -1):\n\tif ONE:\n\t\tone += middles[i]\n\t\tONE = False\n\telse:\n\t\ttwo += middles[i]\n\t\tONE = True\nprint(one, two)\n", "from sys import stdin\nfrom collections import deque\nimport heapq\nn = int(stdin.readline())\n\npiles = []\n\nfor x in range(n):\n    a = [int(x) for x in stdin.readline().split()][1:]\n    piles.append(a)\n\ncielTotal = 0\njiroTotal = 0\n\nmids = []\n\nfor x in piles:\n    cielTotal += sum(x[:len(x)//2])\n    jiroTotal += sum(x[len(x)//2+len(x)%2:])\n    #print(x)\n    #print(cielTotal,jiroTotal)\n    if len(x)%2 == 1:\n        mids.append(x[len(x)//2])\n\nmids.sort(reverse=True)\n\nturn = True\nfor x in mids:\n    if turn:\n        cielTotal += x\n    else:\n        jiroTotal += x\n    turn = not turn\nprint(cielTotal,jiroTotal)\n\n    \n"]