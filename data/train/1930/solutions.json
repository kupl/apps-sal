["class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        \n        self.n = n\n        self.count = 0\n        self.discount = discount\n        self.products = {}\n        \n        for i in range(0, len(products)):\n            \n            self.products[products[i]] = prices[i]\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        \n        self.count += 1\n        \n        subtotal = 0\n        \n        for i in range(0, len(product)):\n            \n            subtotal += self.products[product[i]] * amount[i]\n            \n        if self.count == self.n:\n            \n            subtotal = subtotal - (self.discount * subtotal) / 100\n            self.count = 0\n        \n        return subtotal\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.count = 0\n        self.discount = discount\n        \n        self.prices = {prod:price for prod, price in zip(products, prices)}\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        bill = 0\n        for p, a in zip(product, amount):\n            bill += (self.prices[p] * a)\n        \n        self.count += 1\n        if  self.count % self.n == 0:\n            bill *= (1 - (self.discount/100.))\n        return bill\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.discount = discount/100\n        self.n = n\n        self.memo = dict()\n        for a, b in zip(products, prices):\n            self.memo[a] = b\n        self.idx = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.idx += 1\n        res = 0 \n        for a, b in zip(product, amount):\n            res += self.memo[a]*b\n        if self.idx%self.n==0:\n            res *= (1-self.discount)\n        return res\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.prices = {product: price for product, price in zip(products, prices)}\n        self.customer_number = 1\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        total = sum(self.prices[product[i]] * amount[i] for i in range(len(product)))\n        if self.customer_number % self.n == 0:\n            total *= (1 - self.discount / 100)\n        self.customer_number += 1\n        return total\n        \n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.c = 0\n        self.n = n\n        self.discount = discount\n        self.prod_price = {prod : price for prod, price in zip(products, prices)}\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        cost = 0\n        for p, a in zip(product, amount):\n            cost += self.prod_price[p] * a\n        self.c += 1\n        if self.c == self.n:\n            cost -= (cost * self.discount)/100\n            self.c = 0\n        return cost\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.N = n\n        self.count = 0\n        self.discount = discount\n        self.products = products\n        self.prices = prices\n        self.reverse_dict = {i: j for j, i in enumerate(products)}\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        price_total = 0\n        for i, am in zip(product, amount):\n            price_total += am * self.prices[self.reverse_dict[i]]\n            \n        self.count += 1\n        if self.count >= self.N:\n            price_total *= 1 - self.discount / 100.\n            self.count = 0\n        return price_total\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        \n        self.productsTable = {}\n        for i in range(len(products)):\n            self.productsTable[products[i]] = prices[i]\n        self.count = 0\n        self.n = n\n        self.discount = discount\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        bill = 0\n        self.count += 1\n        for i in range(len(product)):\n            bill += self.productsTable[product[i]] * amount[i]\n            \n        if self.count == self.n:\n            \n            self.count = 0\n            return bill - ((self.discount * bill ) / 100)\n        return bill\n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.counter = 0\n        self.n, self.discount, self.products = n, discount, products\n        self.prices = {}\n        \n        for product_id, price in zip(products, prices):\n            self.prices[product_id] = price\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.counter += 1\n        self.counter %= self.n\n                \n        cost_per_item = [self.prices[p] for p in product]\n        total_bill = sum([x[0] * x[1] for x in zip(cost_per_item, amount)])\n        \n        if not self.counter:\n            total_bill = total_bill * (100 - self.discount) / 100\n            \n        return total_bill\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.products = {}\n        for idx, item in enumerate(products):\n            self.products[item] = prices[idx]\n        self.count = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.count += 1\n        bill = 0\n        for idx, item in enumerate(product):\n            bill += self.products[item] * amount[idx]\n        if self.count % self.n == 0:\n            return ((100 - self.discount) / 100) * bill\n        else:\n            return bill\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self._n = n\n        self._discount = discount\n        self._id_to_price = {products[i]:prices[i] for i in range(len(products))}\n        self._customer_no = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self._customer_no += 1\n        num_purchases = len(product)\n        bill = 0\n        for i in range(num_purchases):\n            product_id = product[i]\n            quantity_of_product = amount[i]\n            bill += self._id_to_price[product_id] * quantity_of_product\n        \n        if self._customer_no == self._n:\n            self._customer_no = 0\n            return bill - (self._discount * bill) / 100\n        else:\n            return bill\n \n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.discount_limit = n\n        self.discount_count = n\n        self.discount = discount\n        self.prices = prices\n        \n        self.products = {}\n        i = 0\n        for p in products:\n            self.products[str(p)] = i\n            i += 1\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.discount_count -= 1\n        \n        bill = 0.0\n        for item in range(len(product)):\n            bill += self.prices[self.products[str(product[item])]] * amount[item]\n        \n        if self.discount_count < 1:\n            bill = bill - (self.discount * bill) / 100\n            self.discount_count = self.discount_limit\n        \n        return bill\n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.products = {p: i for i, p in enumerate(products)}\n        # self.products = products\n        self.prices = prices\n        \n        self.counter = 0\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.counter += 1\n        cost = sum([self.prices[self.products[p]] * amount[i] for i, p in enumerate(product)])\n        if self.counter % self.n == 0:\n            return cost - (self.discount * cost) / 100\n        else:\n            return cost\n            \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.count = 0\n        self.n = n\n        self.discount = discount\n        self.products = {}\n        \n        for i in range(len(products)):\n            self.products[products[i]] = prices[i]\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.count += 1\n        cost = 0\n        \n        for pr, am in zip(product, amount):\n            cost += self.products[pr] * am\n        if self.count % self.n == 0:\n            self.count = 0\n            return cost * (1 - self.discount/100)\n        return cost\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        prod_price = {}\n        \n        for i in range(len(products)):\n            prod_id = products[i]\n            price = prices[i]\n            prod_price[prod_id] = price\n        \n        self.prod_price = prod_price\n        self.count = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.count += 1\n        if(self.count % self.n == 0):\n            d = self.discount\n        else:\n            d = 0\n        \n        bill = 0\n        \n        for i in range(len(product)):\n            p_id = product[i]\n            a = amount[i]\n            price = self.prod_price[p_id]\n            bill += a*price\n        \n        return bill - (bill*d/100)\n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.prices = dict(list(zip(products, prices)))\n        self.discount = discount\n        self.cnt = 0\n        self.n = n\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        total = 0\n        self.cnt += 1\n        for i, p in enumerate(product):\n            total += self.prices[p] * amount[i]\n        \n        if self.cnt % self.n == 0:\n            return total  * ( 1 - self.discount / 100)\n        else:\n            return total\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n=n\n        self.discount=discount\n        self.products=products\n        self.prices=prices\n        self.mapping={}\n        for i in range(len(prices)):\n            self.mapping[products[i]]=prices[i]\n        self.customer=0\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        \n        self.customer+=1\n        total=0.0\n        for i in range(len(product)):\n            total+=self.mapping[product[i]]*amount[i]\n        if(self.customer%self.n ==0 ):\n            total=total-(self.discount/100)*total\n        return total\n        \n        \n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n    \n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.discount = discount\n        self.n = n\n        self.prices = {key:prices[idx] for idx,key in enumerate(products)}\n        self.count = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.count += 1\n        res = sum([amount[i] * self.prices[k] for i,k in enumerate(product)])\n        if self.count == self.n:\n            res *=  (1 - self.discount/100)\n            self.count = 0\n        return res\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.count = 0\n        self.discount_factor = 1 - discount/100\n        self.prices_dict = {}\n        for product, price in zip(products, prices):\n            self.prices_dict[product] = price\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.count += 1\n        discount_factor = 1\n        if self.count == self.n:\n            discount_factor = self.discount_factor\n            self.count = 0\n        price_sum = 0.\n        for p, a in zip(product, amount):\n            price_sum += a * self.prices_dict[p]\n        return discount_factor * price_sum\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.id_price_map = {}\n        for i, product_id in enumerate(products):\n            self.id_price_map[product_id] = prices[i]\n        self.customer_count = 0\n        \n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.customer_count += 1\n        \n        total_price = 0\n        for i, product_id in enumerate(product):\n            total_price += self.id_price_map[product_id] * amount[i]\n            \n        if self.customer_count % self.n == 0:\n            total_price -= (self.discount * total_price) / 100\n        \n        return total_price\n            \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self._counter = 0\n        self._n = n\n        self._discount = discount\n        \n        self._products: Dict[int, int] = {products[i]: prices[i] for i in range(len(products))}\n        # self._prices = prices\n        # self._products = products\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        bill = sum([self._products[pid] * amt for pid, amt in zip(product, amount)])\n        \n        self._counter += 1\n        if self._counter % self._n == 0:\n            bill -= self._discount * bill / 100\n            self._counter = 0\n        \n        return bill\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.count = 0\n        self.propri = {}\n        self.discount = discount\n        for i in range(len(products)):\n            self.propri[products[i]] = prices[i]\n            \n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.count += 1\n        discount_flag = False\n        if self.count % self.n == 0:\n            discount_flag = True\n            \n        result = 0\n        \n        for i in range(len(product)):\n            result += self.propri[product[i]] * amount[i]\n            \n        if discount_flag:\n            result *= (100-self.discount) / 100\n            \n        return result\n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.count = 0\n        self.price_dict = {}\n        for i, item in enumerate(products):\n            self.price_dict[item] = prices[i]\n            \n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        total = .0\n        self.count +=1\n        for i, idx in enumerate(product):\n            total += amount[i]* self.price_dict[idx]\n        \n        if self.count % self.n == 0 and self.count>0:\n            total -= total * self.discount/100.0 \n        \n        return total\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n, self.i, self.d = n, 0, discount\n        self.price = {product: price for product, price in zip(products, prices)}\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.i += 1\n        s = sum(self.price[p] * a for p, a in zip(product, amount))\n        return s if self.i % self.n else s * (1 - self.d / 100)", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.counter = 0\n        self.d = {}\n        self.discount = discount\n        self.n = n\n        \n        for i,x in enumerate(products):\n            self.d[x] = prices[i]\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        \n        total = 0\n        for i,productId in enumerate(product):\n            total += self.d[productId] * amount[i]\n        \n        self.counter += 1\n        if self.counter % self.n == 0:\n            total = total - ((self.discount * total) / 100)\n\n        return total\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.productToId = {product: productId for productId, product in enumerate(products)}\n        self.productIdToPrice = {productId: price for productId, price in enumerate(prices)}\n        self.customerNumber = 0\n        \n    def calculateCost(self, productsBought: List[int], amounts: List[int]) -> float:\n        cost = 0\n        \n        for i in range(len(productsBought)):\n            product, productAmount = productsBought[i], amounts[i]\n            price = self.getProductPrice(product)\n            cost += price * productAmount   \n        \n        return cost\n        \n    def calculateDiscountedCost(self, cost: float) -> float:\n        return cost - (self.discount * cost) / 100\n    \n    def getProductPrice(self, product: int) -> int:\n        return self.productIdToPrice[self.productToId[product]]\n        \n    def getBill(self, productsBought: List[int], amounts: List[int]) -> float:\n        self.customerNumber += 1\n        \n        cost = self.calculateCost(productsBought, amounts)\n        \n        if self.customerNumber == self.n:\n            cost = self.calculateDiscountedCost(cost)\n            self.customerNumber = 0\n            \n        return cost", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.product_to_price = dict(list(zip(products, prices)))\n        self.discount = discount / 100\n        self.n = n\n        self.cur_customer = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        prices = [self.product_to_price[prod] * amt for prod, amt in zip(product, amount)]\n        self.cur_customer += 1\n        disc = self.discount if self.cur_customer % self.n == 0 else 0\n        \n        return sum(prices) * (1 - disc)\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n    \n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.prod = {}\n        for i in range(0, len(products)):\n            self.prod[products[i]] = prices[i]\n        self.idx = n\n        self.dis = 1- discount/100\n        self.cur_idx=0\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.cur_idx+=1\n        s = 0\n        for i in range(0, len(product)):\n            s += self.prod[product[i]]*amount[i]\n            \n        if self.cur_idx%self.idx == 0:\n            s *= self.dis\n\n        return s\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        \n        self.n = self.m = n\n        self.discount = discount\n        self.prices = {pro:pri for pro,pri in zip(products, prices)}\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        \n        self.n -=1\n        res = sum(self.prices[pr]*am for pr, am in zip(product, amount))\n        if not self.n:\n            self.n = self.m\n            return res - res*(self.discount/100)\n        return res\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.index = 0\n        self.prices = collections.defaultdict(int)\n        for i in range(len(products)):\n            self.prices[products[i]] = prices[i]\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.index += 1\n        total = sum([self.prices[product[i]] * amount[i] for i in range(len(product))])\n        if self.index % self.n == 0:\n            total = (1 - self.discount / 100) * total\n        return float(total)\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n      self.counter_ = 0\n      self.discount_ = discount\n      self.max_ = n\n      self.dicts_ = {}\n      for i in range(len(products)):\n        self.dicts_[products[i]] = prices[i]\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n      self.counter_ += 1\n      bill = 0\n      for i in range(len(product)):\n        bill += self.dicts_[product[i]]*amount[i]\n      if self.counter_ == self.max_:\n        bill *= (1-self.discount_/100)\n        self.counter_ = 0\n      return bill\n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.products = products\n        self.prices = prices\n        self.crCustomer = 0\n        self.dic_prices = dict(list(zip(products, prices)))\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.crCustomer+=1\n        if self.crCustomer % self.n == 0:\n            discount =  self.discount\n        else:\n            discount = 0\n                 \n        return sum([ (1- discount/100) * self.dic_prices[p]*a for p,a in zip(product, amount)])\n            \n            \n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.price = dict(list(zip(products, prices))) \n        self.discount = discount\n        self.n = n\n        self.cnt = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.cnt += 1\n        total = 0.0\n        for i, p in enumerate(product):\n            total += self.price[p] * amount[i]\n        return total * (1 - self.discount / 100 if self.cnt % self.n == 0 else 1) \n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.product_price = {}\n        self.current = 0\n        for i in range(len(products)):\n            self.product_price[products[i]] = prices[i]\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.current+=1\n        total = 0\n        for i in range(len(product)):\n            total = total + (self.product_price[product[i]] * amount[i])\n        \n        if(self.current == self.n):\n            self.current = 0\n            total = total * (1 - self.discount/100)\n        return total\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.counter = 0\n        self.period = n\n        self.discount = 1-discount/100\n        self.prices = {}\n        for index,productId in enumerate(products):\n            self.prices[productId] = prices[index]\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.counter += 1\n        totalAmount = 0\n        for index,productId in enumerate(product):\n            totalAmount += self.prices[productId]*amount[index]\n        if self.counter%self.period == 0:\n            totalAmount = self.discount*totalAmount\n        return totalAmount\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.p=dict()\n        for p1,p2 in zip(products,prices):\n            self.p[p1]=p2\n        self.d=discount\n        self.n=n\n        self.count=0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.count+=1\n        bill=0\n        for p,a in zip(product,amount):\n            bill+=self.p[p]*a\n        if self.count==self.n:\n            bill-=bill*self.d/100\n            self.count=0\n        return bill\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.product_prices = dict(list(zip(products, prices)))\n        self.current = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.current += 1\n        bill = 0\n        for i in range(len(amount)):\n            bill += amount[i]*self.product_prices[product[i]]\n        if self.current == self.n:\n            self.current = 0\n            return (bill - bill*(self.discount/100))\n        return bill\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        # self.products = products\n        # self.prices = prices\n        self.product_prices = dict(list(zip(products, prices)))\n        self.current = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.current += 1\n        bill = 0\n        for i in range(len(amount)):\n            bill += amount[i]*self.product_prices[product[i]]\n        if self.current % self.n == 0:\n            bill = (bill - bill*(self.discount/100))\n        return bill\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.price = dict(list(zip(products, prices))) # here credit to @danielmittereder for making code clean.\n        self.discount = discount\n        self.n = n\n        self.cnt = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.cnt += 1\n        total = 0.0\n        for i, p in enumerate(product):\n            total += self.price[p] * amount[i]\n        return total * (1 - self.discount / 100 if self.cnt % self.n == 0 else 1)   \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.temp = n\n        self.discount = 1 - ( discount / 100 )\n        self.prices = {product: price for product, price in zip(products, prices)}\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.n -= 1\n        total = sum(self.prices[product_id] * quantity for product_id, quantity in zip(product, amount))\n        if self.n == 0:\n            total *= self.discount\n            self.n = self.temp\n        return total\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.product_map = { products[i]: prices[i] for i in range(len(products))}\n        self.prices = prices\n        self.customer_count = 0\n        self.discount = discount/100\n        self.discount_customer = n\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.customer_count += 1\n        bill = 0\n        discount = 0\n        for i in range(len(product)):\n            bill += amount[i] * self.product_map[product[i]]\n        if self.customer_count == self.discount_customer:\n            discount = self.discount * bill\n            self.customer_count = 0\n            bill = bill - discount\n        return bill\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.crCustomer = 0\n        self.dic_prices = dict(list(zip(products, prices)))\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.crCustomer+=1\n        if self.crCustomer % self.n == 0:\n            discount =  self.discount\n        else:\n            discount = 0\n                 \n        return sum([ (1- discount/100) * self.dic_prices[p]*a for p,a in zip(product, amount)])\n            \n            \n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.i = 1\n        self.n = n\n        self.discount = discount\n        self.prices = { products[i]:prices[i] for i in range(len(products)) }\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        x = sum( [ self.prices[product[i]]*amount[i] for i in range(len(product)) ] )\n        \n        if self.i == self.n:\n            x = x-(self.discount*x)/100.0\n            self.i = 0\n        self.i += 1\n        return x\n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.count = 0\n        self.n = n\n        self.discount = discount \n        self.products = products\n        self.prices = prices\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.count += 1\n        total = 0\n        for i in range(len(product)):\n            total += amount[i] * self.prices[self.products.index(product[i])]\n        if self.count % self.n == 0:\n            total = total - ((self.discount * total)/100)\n            return total\n        return total\n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.discount = discount\n        self.n = n\n        self.products = {product:price for product, price in zip(products, prices)}\n        self.customers = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.customers += 1\n        bill = sum([self.products[prod] *  amnt for prod, amnt in zip(product, amount)])\n        if (self.customers % self.n) == 0:\n            self.customers = 0\n            bill -= bill * self.discount / 100 \n        return bill\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.products = products\n        self.prices = prices\n        self.counter = 1\n        \n    def getBill(self, product: List[int], amounts: List[int]) -> float:\n        bill = 0\n        for i, product_id in enumerate(product):\n            bill += amounts[i] * self.prices[self.products.index(product_id)]\n        if self.counter == self.n:\n            bill -= bill * (self.discount / 100)\n            self.counter = 1\n        else:\n            self.counter += 1\n        return bill\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n=n\n        self.discount=discount\n        self.di=dict()\n        for i,j in zip(products,prices):\n            self.di[i]=j\n        self.present=0\n        \n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.present+=1\n        if(self.present==self.n):\n            tot=0\n            for pro,amt in zip(product,amount):\n                tot+=self.di[pro]*amt\n            tot-=((self.discount*tot)/100)\n            self.present=0\n            return tot\n        else:\n            tot=0\n            for pro,amt in zip(product,amount):\n                tot+=self.di[pro]*amt\n            return tot\n\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n    def __init__(self, n: int, discount: int, products, prices):\n        self.prices_dict = dict()\n        for p, m in zip(products, prices):\n            self.prices_dict[p] = m\n        self.discount = discount\n        self.counts = 0\n        self.n = n\n\n    def getBill(self, product, amount) -> float:\n        self.counts += 1\n        money = sum(self.prices_dict[p]*a for p,a in zip(product, amount))\n        if self.counts % self.n == 0:\n            money = money*(1-self.discount/100)\n        return money", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.d = discount\n        self.count = 0\n        self.p = {}\n        for i in range(len(products)):\n            self.p[products[i]] = prices[i]\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        bill = 0\n        self.count += 1\n        for i in range(len(product)):\n            bill += self.p[product[i]] * amount[i]\n        if self.count == self.n:\n            self.count = 0\n            bill = bill - ((self.d * bill) / 100)\n        return bill\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        dicta = {}\n        self.products = products\n        self.prices = prices\n        self.nown = n\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        applied = False\n        if self.nown==1:\n            applied = True\n            self.nown = self.n\n        else:\n            self.nown -=1\n        summoney = 0\n        for i in range(len(product)):\n            summoney+= self.prices[self.products.index(product[i])]*amount[i]\n        if applied:\n            return summoney - (summoney*self.discount)/100\n        else:\n            return summoney\n        \n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.count = 0\n        self.discount = discount\n        self.products = products.copy()\n        self.prices = prices.copy()\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.count += 1\n        bill = 0\n        for quantity, pid in zip(amount, product):\n            index = self.products.index(pid)\n            bill += self.prices[index] * quantity\n        if self.count == self.n:\n            bill = bill - ((self.discount * bill) / 100)\n            self.count = 0\n        return bill\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.discountNumber = n\n        self.discount = discount\n        self.productsList = products\n        self.pricesList = prices\n        self.currentCustNum = 1\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.cost = 0\n        for i in range(0, len(product)):\n            self.priceIndex = self.productsList.index(product[i])\n            self.cost += (self.pricesList[self.priceIndex] * amount[i])\n        if self.currentCustNum == self.discountNumber:\n            self.cost = self.cost - ((self.discount * self.cost) / 100)\n            self.currentCustNum = 1\n        else:\n            self.currentCustNum += 1\n        return self.cost\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n ,self.c , self.discount , self.d = n , n , 1 - discount/100 , {}\n        for i in range(len(products)):\n            self.d[products[i]] = prices[i]\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        bill = 0\n        for i , v in enumerate(product):\n            bill += self.d[v]*amount[i]\n        self.n -= 1\n        if self.n == 0:bill *= self.discount;self.n = self.c\n        return bill\n\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.customer = 0\n        self.n = n\n        self.discount = discount / 100\n        self.h = {}\n        for i in range(len(products)):\n            self.h[products[i]] = prices[i]\n        \n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.customer += 1\n\n        total = 0\n        for i in range(len(product)):\n            total += self.h[product[i]] * amount[i]\n        \n        if self.customer == self.n:\n            self.customer = 0\n            return total - (self.discount * total)\n        \n        else:\n            return total\n", "class Cashier:\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n, self.i, self.d = n, 0, discount\n        self.price = {product: price for product, price in zip(products, prices)}\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.i += 1\n        s = sum(self.price[p] * a for p, a in zip(product, amount))\n        return s if self.i % self.n else s * (1 - self.d / 100)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.products = products\n        self.prices = prices\n        self.client = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.client += 1\n        bill = 0\n        for p, a in zip(product, amount): \n            idx = self.products.index(p)\n            bill += a * self.prices[idx]\n        if self.client == self.n:\n            self.client = 0\n            bill = bill - self.discount * bill / 100     \n        return bill\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.d = discount\n        self.count = 0\n        self.p = {}\n        for i in range(len(products)):\n            if products[i] not in self.p:\n                self.p[products[i]] = prices[i]\n            else:\n                self.p[products[i]] += prices[i]\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        bill = 0\n        self.count += 1\n        for i in range(len(product)):\n            bill += self.p[product[i]] * amount[i]\n        if self.count != 0 and self.count % self.n == 0:\n            bill = bill - (self.d * bill) / 100\n        return bill\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n=n\n        self.discount=discount\n        self.products=products\n        self.prices=prices\n        self.customer=1\n        \n        \n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        bill=0\n        for i in range(len(product)):\n            ids=self.products.index(product[i])\n            bill+=self.prices[ids]*amount[i]\n        \n        if self.customer%self.n==0:\n            bill=bill-(self.discount)*bill/100\n        self.customer+=1\n        return bill\n        \n        \n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.products = products\n        self.prices = prices\n        self.n = n\n        self.i = 0\n        self.discount = discount / 100\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        \n        price = 0\n        \n        for p, a in zip(product, amount):\n            idx = self.products.index(p)\n            price += a*self.prices[idx]\n            \n        self.i += 1\n        \n        if self.i % self.n == 0:\n            price -= self.discount * price\n            \n        return price\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.n_customer = 0\n        self.discount = discount\n        self.products = products\n        self.prices = prices\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.n_customer += 1\n        bill = 0\n        for i in range(len(product)):\n            p = product[i]\n            product_index = self.products.index(p)\n            bill += amount[i] * self.prices[product_index] \n        if self.n_customer % self.n == 0:\n            return bill - bill *self.discount / 100\n        return bill\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.products = products\n        self.prices = prices\n        self.client = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.client += 1\n        bill = 0\n        for p, a in zip(product, amount): \n            idx = self.products.index(p)\n            bill += a * self.prices[idx]\n        if self.client == self.n:\n            self.client = 0\n            print(bill)\n            print((self.discount))\n            print((self.discount * bill / 100))\n            bill = bill - self.discount * bill / 100     \n            print(bill)\n            print()\n        return bill\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n    \n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.num_disc = n\n        self.disc = discount\n        self.prod = products\n        self.pric = prices\n        self.count = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.count+=1\n        total = 0\n        for i in range(len(product)):\n            ind = self.prod.index(product[i])\n            total += (self.pric[ind] * amount[i])\n        if(self.count != 0 and self.count % self.num_disc == 0):\n            total = (total - (self.disc * total) / 100)\n            self.count = 0\n        return total\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        # self.products = {p: i for i, p in enumerate(products)}\n        self.products = products\n        self.prices = prices\n        \n        self.counter = 0\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.counter += 1\n        cost = sum([self.prices[self.products.index(p)] * amount[i] for i, p in enumerate(product)])\n        if self.counter % self.n == 0:\n            return cost - (self.discount * cost) / 100\n        else:\n            return cost\n            \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n=n\n        self.dic={}\n        for x,y in zip(products,prices):\n            self.dic[x]=y\n        self.dis=discount\n        self.k=0\n    \n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        total=0\n        for x,y in zip(product,amount):\n            total+=self.dic[x]*y\n            \n        self.k+=1\n        if self.k==self.n:\n            self.k=0\n            return total-(total*(self.dis/100.0))\n            \n        else:\n            return total\n        \n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.customer = 1\n        self.n = n\n        self.discount = discount\n        self.products = products\n        self.prices = prices\n        \n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        total = 0\n        for i in range(0, len(product)):\n            total += self.prices[self.products.index(product[i])] * amount[i]\n        if self.customer == self.n:\n            total -= self.discount * total/100\n            self.customer = 1\n        else:\n            self.customer += 1 \n        \n        return total\n            \n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.price = dict(list(zip(products, prices))) \n        self.discount = discount\n        self.n = n\n        self.cnt = 0\n\n    def _calculateBillAmount(self, product: List[int], amount: List[int]) -> float:\n        bill = 0.0\n        \n        for i, p in enumerate(product):\n            bill += self.prices[p] * amount[i] \n            \n        return bill\n        \n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.cnt += 1\n        total = 0.0\n        for i, p in enumerate(product):\n            total += self.price[p] * amount[i]\n        return total * (1 - self.discount / 100 if self.cnt % self.n == 0 else 1)\n    \n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.customers=0\n        self.n=n\n        # self.prod=products\n        self.prices=prices\n        self.discount=discount\n        self.products={}\n        for i in range(len(products)):\n            self.products[products[i]]=i\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        bill=0\n        self.customers+=1\n        for i in range(len(product)):\n            bill+=(amount[i]*(self.prices[self.products[product[i]]]))\n        if(self.customers==self.n):\n            bill=bill-(bill*self.discount/100)\n            self.customers=0\n        return bill\n            \n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.cur = 0\n        self.discount = discount\n        self.products = products\n        self.prices = prices\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        temp = []\n        for i in range(len(product)):\n            temp.append([product[i], amount[i]])\n        self.cur += 1\n        result = 0\n        for id, number in temp:\n            real_id = self.products.index(id)\n            price = self.prices[real_id]\n            result += price * number\n        if self.cur % self.n == 0:\n            result = result * (1 - (self.discount/100))\n        return result\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "#749\n\nclass Cashier:\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n      self.n = n\n      self.discount = discount\n      self.prices = dict(list(zip(products, prices)))\n      self.pos = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n      self.pos += 1\n      sz = len(product)\n      cost = sum([self.prices[product[i]] * amount[i] for i in range(sz)])\n      if self.pos % self.n == 0:\n        # discount\n        cost = cost - (self.discount * cost) / 100\n      return cost\n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.ctr = 0\n        self.n = n\n        self.discount = (100-discount)/100\n        self.products = dict()\n        for idx in range(len(products)):\n            self.products[products[idx]] = prices[idx]\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        \n        self.ctr += 1\n        cost = 0\n        for idx in range(len(product)):\n            itemId = product[idx]\n            cost += self.products[itemId]*amount[idx]\n        \n        if self.ctr % self.n == 0:\n            self.ctr = 0\n            cost = self.discount * cost\n            \n        return cost\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.productToId = {product: productId for productId, product in enumerate(products)}\n        self.productIdToPrice = {productId: price for productId, price in enumerate(prices)}\n        self.customerNumber = 0\n    def calculateCost(self, products: List[int], amounts: List[int]) -> float:\n        cost = 0\n        \n        for i in range(len(products)):\n            product, productAmount = products[i], amounts[i]\n            price = self.getProductPrice(product)\n            cost += price * productAmount   \n        \n        return cost\n        \n    def calculateDiscountedCost(self, cost: float) -> float:\n        return cost - (self.discount * cost) / 100\n    \n    def getProductPrice(self, product: int) -> int:\n        return self.productIdToPrice[self.productToId[product]]\n        \n    def getBill(self, products: List[int], amounts: List[int]) -> float:\n        self.customerNumber += 1\n        \n        cost = self.calculateCost(products, amounts)\n        \n        if self.customerNumber == self.n:\n            cost = self.calculateDiscountedCost(cost)\n            self.customerNumber = 0\n            \n        return cost\n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.N = n\n        self.count = n\n        self.disc = discount\n        self.p_dict = {}\n        for pd,pr in zip(products,prices):\n            self.p_dict[pd] = pr\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        total_p = 0\n        for pd,num in zip(product,amount):\n            total_p += self.p_dict[pd]*num\n        if self.count == 1:\n            total_p = total_p*(1-self.disc/100)\n            self.count = self.N\n        else:\n            self.count -= 1\n        return total_p\n    \n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.products = products\n        self.prices = prices\n        \n        self.counter = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        \n        self.counter += 1\n        ans = 0\n        \n        for i in range(len(product)):\n            ans += self.prices[self.products.index(product[i])]*amount[i]\n        \n        if self.counter == self.n:\n            self.counter = 0\n            ans = ans - self.discount*ans/100.0\n            \n        return ans\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.products = products\n        self.prices = prices\n        self.top = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.top += 1\n        bill = 0\n        for i, p in enumerate(product):\n            index = self.products.index(p)\n            cost = self.prices[index]\n            total = cost * amount[i]\n            bill += total\n        if self.top == self.n:\n            bill -= (self.discount * bill)/100\n            self.top = 0\n        return bill\n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.customer_num = 1 % n\n        self.n = n\n        self.discount = discount\n        self.prices_by_id = {product_id: prices[idx] for idx, product_id in enumerate(products)}\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        if self.customer_num == 0:\n            multiplier = 1-(self.discount/100)\n        else:\n            multiplier = 1\n        self.customer_num = (self.customer_num + 1) % self.n\n        return sum([self.prices_by_id[product[i]] * amount[i] for i in range(len(product))]) * multiplier\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n    from functools import lru_cache\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.d = discount\n        self.p = products\n        self.amt = prices\n        self.c = 0\n    \n    @lru_cache(maxsize=128)\n    def compute_amount(self, pdt, qty):\n        bill = 0\n        for p, q in zip(pdt, qty):\n            i = self.p.index(p)\n            bill += self.amt[i]*q\n        return bill\n    \n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.c += 1\n        amt = self.compute_amount(tuple(product), tuple(amount))\n        if self.c%self.n == 0  and self.d:\n            return amt - (amt * self.d/100)\n        else:\n            return amt\n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n", "class Cashier:\n\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.n = n\n        self.discount = discount\n        self.products = products\n        self.prices = prices\n        self.currCustomer = 0\n        \n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.currCustomer += 1\n        currBill = 0\n        for i in range(len(product)):\n            currBill += self.prices[self.products.index(product[i])] * amount[i]\n        if (self.currCustomer == self.n):\n            currBill = currBill - ((self.discount * currBill)/100)\n            self.currCustomer = 0\n        return currBill\n        \n        \n\n\n# Your Cashier object will be instantiated and called as such:\n# obj = Cashier(n, discount, products, prices)\n# param_1 = obj.getBill(product,amount)\n"]