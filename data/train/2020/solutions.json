["import math\n#import fractions\nfrom functools import reduce\n\nn = int(input())\nodd = -1\nbeads = [int(x) for x in input().split()]\nfor i in range(n):\n    if beads[i]%2:\n        if odd >= 0:\n            print(0)\n            print(''.join(chr(ord('a') + i)*beads[i] for i in range(n)))\n            break\n        else:\n            odd = i\nelse:\n    gcd = reduce(lambda x,y: math.gcd(x,y), beads)\n    print(gcd)\n    if odd >= 0:\n        s = ''.join(chr(ord('a') + i)*(beads[i]//(2*gcd)) for i in range(n) if i != odd)\n        p = s + chr(ord('a') + odd)*(beads[odd]//gcd) + s[::-1]\n        print(p*gcd)\n    else:\n        s = ''.join(chr(ord('a') + i)*(beads[i]//gcd) for i in range(n))\n        p = s + s[::-1]\n        print(p*(gcd//2))\n", "from fractions import gcd\nfrom functools import reduce\n\n\nLETTERS = 'abcdefghijklmnopqrstuvwxyz'\n\n\ndef necklace_odd(a):\n    oi = next(i for i, ai in enumerate(a) if ai%2)\n    o = a[oi]\n    g = reduce(gcd, a)\n    s = [LETTERS[i] * (a[i]//(2*g)) for i in range(len(a)) if i != oi]\n    return g, (''.join(s) + (LETTERS[oi]*(o//g)) + ''.join(reversed(s))) * g\n\n\ndef necklace_even(a):\n    g = reduce(gcd, a)//2\n    s = [LETTERS[i]*(a[i]//(2*g)) for i in range(len(a))]\n    return 2*g, (''.join(s) + ''.join(reversed(s))) * g\n\n\ndef necklace(a):\n    if len(a) == 1:\n        return a[0], LETTERS[0]*a[0]\n\n    nodd = sum(ai%2 for ai in a)\n    if nodd > 1:\n        return 0, ''.join(LETTERS[i]*a[i] for i in range(len(a)))\n\n    return (necklace_odd if nodd else necklace_even)(a)\n\n\ndef __starting_point():\n    n = int(input())\n    a = list(map(int, input().split()))\n    assert len(a) == n\n    k, e = necklace(a)\n    print(k)\n    print(e)\n\n\n\n\n# Made By Mostafa_Khaled\n\n__starting_point()"]