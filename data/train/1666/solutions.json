["from fractions import gcd\nfrom functools import reduce\n\ndef solution(a):\n    return reduce(gcd, a) * len(a)", "def solution(a):\n    a_len = len(a)\n    a = set(a)\n    while len(a) != 1:\n        b = max(a)\n        a.remove(b)\n        a.add(b-max(a))\n    return(max(a) * a_len)", "from fractions import gcd\nfrom functools import reduce\n\ndef solution(a):\n    return len(a) * reduce(gcd, a)", "import sys\nif sys.version_info.major >= 3:\n    from functools import reduce\nif sys.version_info < (3,5):\n    from fractions import gcd\nelif sys.version_info >= (3,5):\n    from math import gcd\n\ndef solution(a):\n    return reduce(gcd, a) * len(a)", "from functools import reduce\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\ndef solution(a):\n    return len(a) * reduce(gcd, a)", "from math import gcd\nfrom functools import reduce\nsolution=lambda a:reduce(gcd,a)*len(a)", "def solution(a):\n    elem = min(a)\n    m = elem\n    for i in range(len(a)):\n        if (a[i] % elem != 0):\n            elem = a[i] % elem\n            if (m % elem != 0):\n                elem = m % elem\n    return abs(elem*len(a))\n", "def solution(a):\n    len_a = len(a)\n    a = set(a)\n    while len(a) > 1:\n        max_a = max(a)\n        a.remove(max_a)\n        a.add(max_a - max(a))\n    return a.pop() * len_a\n", "def gcd(x, y):\n    if x < y:\n        x, y = y, x\n    while y:\n        x, y = y, x % y\n    return x\n\ndef solution(arr):\n    uniques = list(set(arr))\n    N = len(arr)\n    if N < 2 or len(uniques) == 1:\n        return arr[0] * N\n        \n    min_gcd = gcd(uniques[0], uniques[1])\n    for i in range(2, len(uniques)):\n        if min_gcd == 1:\n            return N\n        cur = gcd(min_gcd, uniques[i])\n        min_gcd = min(cur, min_gcd)\n            \n    return min_gcd * N", "from fractions import gcd\nfrom functools import reduce\nsolution = lambda a: reduce(gcd, a)*len(a)"]