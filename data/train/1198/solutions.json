["import math\nimport bisect\nfrom functools import reduce\nfrom collections import defaultdict\n# import sys\n# input = sys.stdin.readline\n\ndef inn():\n return int(input())\n\ndef inl():\n return list(map(int, input().split()))\n\nMOD = 10**9+7\nINF = inf = 10**18+5\n\nn = inn()\na = inl()\nk = []\nfor q in range(inn()):\n k.append(inn())\n\ngcdn = reduce(math.gcd, a)\nlim = max(k)+1\nans = defaultdict(int)\nans[1] = 0\n\nfor i in range(n):\n cur_gcd = a[i]\n for j in range(i, n):\n  cur_gcd = math.gcd(cur_gcd, a[j])\n  if cur_gcd==1 or cur_gcd//gcdn==1:\n   ans[cur_gcd] += (n-j)\n   break\n  ans[cur_gcd] += 1\n# print(ans)\n\nkeys = list(ans.keys())\nans1 = [0]*lim\nfor i in keys:\n for j in range(i, lim, i):\n  ans1[j] += ans[i]\n# print(ans1[:10])\nfor i in k:\n print(ans1[i])", "import math\nimport bisect\nfrom functools import reduce\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n\ndef inn():\n return int(input())\n\ndef inl():\n return list(map(int, input().split()))\n\nMOD = 10**9+7\nINF = inf = 10**18+5\n\nn = inn()\na = inl()\nk = []\nfor q in range(inn()):\n k.append(inn())\n\ngcdn = reduce(math.gcd, a)\nlim = max(k)+1\nans = defaultdict(int)\nans[1] = 0\n\nfor i in range(n):\n cur_gcd = a[i]\n for j in range(i, n):\n  cur_gcd = math.gcd(cur_gcd, a[j])\n  if cur_gcd==1 or cur_gcd//gcdn==1:\n   ans[cur_gcd] += (n-j)\n   break\n  ans[cur_gcd] += 1\n# print(ans)\n\nkeys = list(ans.keys())\nans1 = [0]*lim\nfor i in keys:\n for j in range(i, lim, i):\n  ans1[j] += ans[i]\n# print(ans1[:10])\nfor i in k:\n print(ans1[i])", "import math\nimport bisect\nfrom functools import reduce\nfrom collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n\ndef inn():\n return int(input())\n\ndef inl():\n return list(map(int, input().split()))\n\nMOD = 10**9+7\nINF = inf = 10**18+5\n\nn = inn()\na = inl()\nk = []\nfor q in range(inn()):\n k.append(inn())\n\ngcdn = reduce(math.gcd, a)\nlim = max(k)+1\nans = defaultdict(int)\nans[1] = 0\n\nfor i in range(n):\n cur_gcd = a[i]\n for j in range(i, n):\n  cur_gcd = math.gcd(cur_gcd, a[j])\n  if cur_gcd==1 or cur_gcd//gcdn==1:\n   ans[cur_gcd] += (n-j)\n   break\n  ans[cur_gcd] += 1\n# print(ans)\n\nkeys = list(ans.keys())\nans1 = [0]*lim\nfor i in keys:\n for j in range(i, lim, i):\n  ans1[j] += ans[i]\n# print(ans1[:10])\nfor i in k:\n print(ans1[i])", "import math\nimport bisect\nfrom functools import reduce\nfrom collections import defaultdict\n\ndef inn():\n return int(input())\n\ndef inl():\n return list(map(int, input().split()))\n\nMOD = 10**9+7\nINF = inf = 10**18+5\n\nn = inn()\na = inl()\nk = []\nfor q in range(inn()):\n k.append(inn())\n\ngcdn = reduce(math.gcd, a)\nlim = max(k)+1\nans = defaultdict(int)\nans[1] = 0\n\nfor i in range(n):\n cur_gcd = a[i]\n for j in range(i, n):\n  cur_gcd = math.gcd(cur_gcd, a[j])\n  if cur_gcd==1 or cur_gcd//gcdn==1:\n   ans[cur_gcd] += (n-j)\n   break\n  ans[cur_gcd] += 1\n# print(ans)\n\nkeys = list(ans.keys())\nans1 = [0]*lim\nfor i in keys:\n for j in range(i, lim, i):\n  ans1[j] += ans[i]\n# print(ans1[:10])\nfor i in k:\n print(ans1[i])", "import math\nimport bisect\n\ndef inn():\n return int(input())\n\ndef inl():\n return list(map(int, input().split()))\n\nMOD = 10**9+7\nINF = inf = 10**18+5\n\nn = inn()\na = inl()\nk = []\nfor q in range(inn()):\n k.append(inn())\n\nlim = max(k)+1\nans = {}\nis_gcd = [0]*lim\nans[1] = 0\nfor i in range(n):\n cur_gcd = a[i]\n for j in range(i, n):\n  cur_gcd = math.gcd(cur_gcd, a[j])\n  if cur_gcd==1:\n   ans[1] += (n-j)\n   break\n  elif cur_gcd<lim:\n   if is_gcd[cur_gcd]==0:\n    is_gcd[cur_gcd] = 1\n    ans[cur_gcd] = 0\n   ans[cur_gcd] += 1\n# print(ans)\n\nkeys = list(ans.keys())\nans1 = [0]*lim\nfor i in keys:\n for j in range(i, lim, i):\n  ans1[j] += ans[i]\n# print(ans1[:10])\nfor i in k:\n print(ans1[i])", "from math import gcd\nn=int(input())\nit=list(map(int,input().split()))\nq=int(input())\naa=[{} for i in range(n)]\naa[0][it[0]]=1\nfor i in range(1,n):\n \n for j in aa[i-1]:\n  a=gcd(j,it[i])\n  try:\n   aa[i][a]+=aa[i-1][j]\n  except:\n   aa[i][a]=aa[i-1][j]\n try:\n  aa[i][it[i]]+=1\n except:\n  aa[i][it[i]]=1\nss={}\nma=10**6+1\nk=-1\nfor i in aa:\n k+=1\n for j in i:\n  if j>=ma:\n   continue\n  try:\n   ss[j]+=aa[k][j]\n  except:\n   ss[j]=aa[k][j]\nll=list(ss.keys())\nll.sort()\npre=[0]*(10**6+1)\nfor i in ll:\n for j in range(i,len(pre),i):\n  pre[j]+=ss[i]\nfor _ in range(q):\n k=int(input())\n print(pre[k])\n \n", "from math import gcd\nn=int(input())\nit=list(map(int,input().split()))\nq=int(input())\naa=[{} for i in range(n)]\naa[0][it[0]]=1\nfor i in range(1,n):\n \n for j in aa[i-1]:\n  a=gcd(j,it[i])\n  try:\n   aa[i][a]+=aa[i-1][j]\n  except:\n   aa[i][a]=aa[i-1][j]\n try:\n  aa[i][it[i]]+=1\n except:\n  aa[i][it[i]]=1\nss={}\nma=10**6+1\nk=-1\nfor i in aa:\n k+=1\n for j in i:\n  if j>=ma:\n   continue\n  try:\n   ss[j]+=aa[k][j]\n  except:\n   ss[j]=aa[k][j]\nll=list(ss.keys())\nll.sort()\npre=[0]*(10**6+1)\nfor i in ll:\n for j in range(i,len(pre),i):\n  pre[j]+=ss[i]\nfor _ in range(q):\n k=int(input())\n print(pre[k])\n \n", "\"\"\"\n  Url: https://www.codechef.com/problems/FUZZYLIN\n\"\"\"\n\n\n__author__ = \"Ronald Kaiser\"\n__email__ = \"raios dot catodicos at gmail dot com\"\n\n\nfrom collections import defaultdict\nfrom functools import reduce\nfrom math import gcd\n\n\nN = int(input())\nA = list(map(int, input().split()))\nQ = int(input())\nK = [int(input()) for _ in range(Q)]\nMAX_K = max(K)\nD = defaultdict(int)\ngcd_all = reduce(gcd, A)\n\nfor i in range(N):\n v = A[i]\n for j in range(i, N):\n  v = gcd(v, A[j]) \n  if v == 1 or v//gcd_all == 1:\n   D[v] += N - j \n   break\n  D[v] += 1\n\ns = D[1] if 1 in D else 0\nT = [s for _ in range(MAX_K + 1)]\n\nfor k, v in list(D.items()):\n if k == 1: continue\n for i in range(k, MAX_K + 1, k):\n  T[i] += v\n\nfor k in K: print(T[k])\n\n", "# cook your dish here\n\"\"\"\n  Url: https://www.codechef.com/problems/FUZZYLIN\n\"\"\"\n\n\n__author__ = \"Ronald Kaiser\"\n__email__ = \"raios dot catodicos at gmail dot com\"\n\n\nfrom math import gcd\nfrom collections import defaultdict\n\n\nN = int(input())\nA = list(map(int, input().split()))\nQ = int(input())\nK = [int(input()) for _ in range(Q)]\n\nD = defaultdict(int)\n\nt = A[0]\nfor i in range(1, N):\n t = gcd(t, A[i])\n\nfor i in range(N):\n v = A[i]\n for j in range(i, N):\n  v = gcd(v, A[j]) \n  if v == 1:\n   D[1] += N - j \n   break\n  elif v//t == 1:\n   D[v] += N - j\n   break\n  D[v] += 1\n\ni = D[1] if 1 in D else 0\nmax_k = max(K)\nT = [i for _ in range(max_k + 1)]\n\nfor k, v in list(D.items()):\n if k == 1:\n  continue\n j = k\n x = 1\n while j <= max_k:\n  T[j] += v\n  x += 1\n  j = k * x\n#print(m, D, T)\nfor k in K:\n print(T[k])\n\n", "import math\nfrom collections import defaultdict\nn=int(input())\na=[int(i) for i in input().split()]\nq=int(input())\nk=[int(input()) for i in range(q)]\nK=max(k)\nop=defaultdict(int)\ngcd=defaultdict(int)\nsmallestgcd=a[0]\nfor i in a:\n gcd[i]+=1\n smallestgcd=math.gcd(smallestgcd,i)\ns=[a[0]]\n\nfor i in range(1,n):\n for j in range(len(s)):\n  if s[j]!=1 and s[j]!=smallestgcd:\n   s[j]=math.gcd(a[i],s[j])\n  gcd[s[j]]+=1\n s.append(a[i])\nif gcd[1]!=0:\n op=defaultdict(lambda: gcd[1])\nfor i in gcd:\n j=i\n if j==1:\n  continue\n while(j<K+1):\n  op[j]+=gcd[i]\n  j+=i\nfor z in range(q):\n print(op[k[z]])\n", "import math\nfrom collections import defaultdict\nn=int(input())\na=[int(i) for i in input().split()]\nq=int(input())\nk=[int(input()) for i in range(q)]\nK=max(k)\nop=defaultdict(int)\ngcd=defaultdict(int)\nsmallestgcd=a[0]\nfor i in a:\n gcd[i]+=1\n smallestgcd=math.gcd(smallestgcd,i)\ns=[a[0]]\n\nfor i in range(1,n):\n for j in range(len(s)):\n  if s[j]!=1 and s[j]!=smallestgcd:\n   s[j]=math.gcd(a[i],s[j])\n  gcd[s[j]]+=1\n s.append(a[i])\nfor i in gcd:\n j=i\n while(j<K+1):\n  op[j]+=gcd[i]\n  j+=i\nfor z in range(q):\n print(op[k[z]])\n", "import math\nfrom collections import defaultdict\nn=int(input())\na=[int(i) for i in input().split()]\nop=defaultdict(int)\ngcd=defaultdict(int)\nfor i in a:\n gcd[i]+=1\ns=[a[0]]\nfor i in range(1,n):\n for j in range(len(s)):\n  s[j]=math.gcd(a[i],s[j])\n  gcd[s[j]]+=1\n s.append(a[i])\nfor i in gcd:\n j=i\n while(j<10**6+1):\n  op[j]+=gcd[i]\n  j+=i\nq=int(input())\nfor _ in range(q):\n print(op[int(input())])\n", "import math\nfrom collections import defaultdict\nn=int(input())\na=[int(i) for i in input().split()]\nop=defaultdict(int)\ngcd=defaultdict(int)\nfor i in a:\n gcd[i]=1\nwhile(len(a)!=0):\n newa=[]\n x=a[0]\n for i in a[1:]:\n  z=math.gcd(x,i)\n  gcd[z]+=1\n  newa.append(z)\n  x=i\n a=newa\nfor i in gcd:\n j=i\n while(j<10**6+1):\n  op[j]+=gcd[i]\n  j+=i\nq=int(input())\nfor _ in range(q):\n print(op[int(input())])\n", "import math\nn=int(input())\na=[int(i) for i in input().split()]\nop={}\ngcd={}\nfor i in a:\n gcd[i]=1\nwhile(len(a)!=0):\n newa=[]\n x=a[0]\n for i in a[1:]:\n  z=math.gcd(x,i)\n  try:\n   gcd[z]+=1\n  except:\n   gcd[z]=1\n  newa.append(z)\n  x=i\n a=newa\nfor i in gcd:\n j=i\n while(j<10**6+1):\n  try:\n   op[j]+=gcd[i]\n  except:\n   op[j]=gcd[i]\n  j+=i\nq=int(input())\nfor _ in range(q):\n try:\n  print(op[int(input())])\n except:\n  print(0)\n", "import math\nn=int(input())\na=[int(i) for i in input().split()]\nop=[0 for i in range(10**6+1)]\ngcd={}\nfor i in a:\n gcd[i]=1\nwhile(len(a)!=0):\n newa=[]\n x=a[0]\n for i in a[1:]:\n  z=math.gcd(x,i)\n  try:\n   gcd[z]+=1\n  except:\n   gcd[z]=1\n  newa.append(z)\n  x=i\n a=newa\nfor i in gcd:\n j=i\n while(j<10**6+1):\n  op[j]+=gcd[i]\n  j+=i\nq=int(input())\nfor _ in range(q):\n print(op[int(input())])\n", "import math as mt\nsz = 1000501\nn = int(input())\nx = [0]* sz\ngcs = [0]* int(n)\na = [int(temp) for temp in input().split()]\ngcs[n-1]=a[n-1]\ni=n-2\nwhile i>=0:\n gcs[i]=mt.gcd(gcs[i+1],a[i])\n i-=1\ni=0\nwhile i<n:\n curr = a[i]\n if curr < sz:\n  x[curr] += 1\n j=i+1\n while j<n:\n  curr = mt.gcd(curr,a[j])\n  if curr ==gcs[j]:\n   x[curr]+=(n-j)\n   break\n  elif curr<sz:\n   x[curr]+=1\n  j+=1\n i+=1\nq = int(input())\nfor i in range (q):\n q1=int(input())\n ans = 0\n for t in range(1, int(mt.sqrt(q1)+1)):\n  if q1%t ==0:\n   if q1/t==t:\n    ans += x[t]\n   else:\n    ans += x[t]\n    ans += x[int(q1/t)]\n print(ans)\n", "import math\nimport bisect\n\ndef inn():\n return int(input())\n\ndef inl():\n return list(map(int, input().split()))\n\nMOD = 10**9+7\nINF = inf = 10**18+5\n\nn = inn()\na = inl()\n\nans = {}\nis_gcd = [0]*1000001\nans[1] = 0\nfor i in range(n):\n cur_gcd = a[i]\n for j in range(i, n):\n  cur_gcd = math.gcd(cur_gcd, a[j])\n  if cur_gcd==1:\n   ans[1] += (n-j)\n   break\n  elif cur_gcd<1000001:\n   if is_gcd[cur_gcd]==0:\n    is_gcd[cur_gcd] = 1\n    ans[cur_gcd] = 0\n   ans[cur_gcd] += 1\n# print(ans)\n\nkeys = list(ans.keys())\nans1 = [0]*1000001\nfor i in keys:\n for j in range(i, 1000001, i):\n  ans1[j] += ans[i]\n# print(ans1[:10])\n\nfor q in range(inn()):\n k = inn()\n print(ans1[k])"]