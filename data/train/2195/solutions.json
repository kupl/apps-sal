["from collections import Counter\n\nn = int(input())\na = list(map(int, input().split()))\nc = Counter(a)\n\nres = 0\ncur = 0\nfor i in sorted(c.keys()):\n  d = min(c[i], cur)\n  cur -= d\n  res += d\n  cur += c[i]\n\nprint(res)", "3\n\ndef solve(N, A):\n    A.sort()\n\n    i = 0\n    j = 0\n    c = 0\n\n    while j < N:\n        while j < N and A[j] == A[i]:\n            j += 1\n\n        if j == N:\n            break\n\n        c += 1\n        i += 1\n        j += 1\n\n    return c\n\n\ndef main():\n    N = int(input())\n    A = [int(e) for e in input().split(' ')]\n    print(solve(N, A))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\narr = [int(t) for t in input().split()]\narr.sort()\n\nnx = 0\ni = 0\nres = 0\nwhile i < n:\n    j = i\n    while j < n and arr[i] == arr[j]:\n        j += 1\n    nx = max(nx, j)\n    t = min(j - i, n - nx)\n    nx += t\n    nx = min(nx, n)\n    res += t\n    i = j\nprint(res)\n", "from collections import *\nprint(int(input()) - max(Counter(map(int,input().split())).values()))", "n = int(input())\narr = list(map(int, input().split()))\narr.sort(reverse=True)\nr = 0\ns = 0\nm = 1\nfor i in range(1, n):\n    if arr[i] < arr[i - 1]:\n        s += m\n        m = 1\n    else:\n        m += 1\n    if s:\n        s -= 1\n        r += 1\nprint(r)\n", "from collections import Counter\n\n\ndef main():\n    input()\n    cnt = Counter(list(map(int, input().split())))\n    a, *rest = sorted(cnt.keys())\n    pool, res = cnt[a], 0\n    for a in rest:\n        c = cnt[a]\n        if pool < c:\n            res += pool\n            pool = c\n        else:\n            res += c\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\ndef main():\n\tn=int(input())\n\tli=list(map(int,input().split()))\n\tli.sort()\n\tli.reverse()\n\ti,j,count=0,1,0\n\twhile j<len(li):\n\t\tif li[j]<li[i]:\n\t\t\tj+=1\n\t\t\ti+=1\n\t\t\tcount+=1\n\t\telse:\n\t\t\tj+=1\n\tprint(count)\n\t\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "def readints():\n    return [int(x) for x in input().strip().split()]\n\n\ndef main():\n    n = readints()[0]\n    a = sorted(readints())\n\n    marker = 0\n    for i in range(n):\n        if a[i] > a[0]:\n            break\n        marker += 1\n\n    ans = 0\n    for i in range(n):\n        while marker < n:\n            if a[i] < a[marker]:\n                ans += 1\n                marker += 1\n                break\n            marker += 1\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\n\na = list(map(int,input().split(' ')))\n\nz = {}\n\nfor i in range(n):\n    if a[i] not in z:\n        z[a[i]] = 1\n    else:\n        z[a[i]] +=1\n\nans = n\n\n\ns = sorted(z.values())\n\nans = ans - max(s)\n\nprint(ans)\n", "n = int(input())\na = [int(i) for i in input().split()]\nd = {}\nfor i in a:\n    d[i] = 0\n\nfor i in a:\n    d[i] += 1\n\nans = n - max(d.values())\nprint(ans)\n", "def solution(n, num_array):\n\n\t# If there is only one element in the list, return 0.\n\tif (len(num_array) == 1):\n\t\treturn 0\n\t\n\n\t# sort the array first\n\tnum_array.sort()\n\tidx1 = 0\n\tidx2 = 1\n\tres = 0\n\twhile (idx2 < len(num_array)):\n\t\tnum1 = num_array[idx1]\n\t\tnum2 = num_array[idx2]\n\n\t\tif (num1 < num2):\n\t\t\tres += 1\n\t\t\tidx1 += 1\n\n\t\tidx2 += 1\n\n\t\n\treturn res\n\n\n\n\nn = input()\nnum_array = list(map(int, input().split()))\n\nprint(solution(n, num_array))\n\n\n", "def solution(n, num_array):\n\n\t# If there is only one element in the list, return 0.\n\t# import pdb; pdb.set_trace\n\tif (len(num_array) == 1):\n\t\treturn 0\n\t\n\n\t# sort the array first\n\tnum_array.sort()\n\tidx1 = 0\n\tidx2 = 1\n\tres = 0\n\twhile (idx2 < len(num_array)):\n\t\tnum1 = num_array[idx1]\n\t\tnum2 = num_array[idx2]\n\n\t\tif (num1 < num2):\n\t\t\t# swap the numbers\n\t\t\tres += 1\n\t\t\tidx1 += 1\n\t\t\tidx2 += 1\n\n\t\telse:\n\t\t\tidx2 += 1\n\n\t# print(sorted_arr)\n\treturn res\n\n\n\n\nn = input()\nnum_array = list(map(int, input().split()))\n\nprint(solution(n, num_array))\n\n\n", "n = int(input())\narr = sorted([int(a) for a in input().split()])\nj = 0\nfor i in range(0, n):\n    if arr[i] > arr[j]:\n        j += 1\nprint(j)\n\n", "n = int(input())\na = list(map(int, input().split(' ')))\na.sort()\nd = 0\nj = 0\nm = 1\nfor i in range(1, len(a)):\n    if a[i] == a[j]:\n        m += 1\n    else:\n        if m > d:\n            d = m\n        m = 1\n        j = i\n\nif m > d:\n    d = m\n\nprint(len(a) - d)\n", "def count_sort(mass, st):\n    i = st\n    while i < len(mass):\n        if mass[i] != mass[st]:\n            break\n        i += 1\n    return i - st\n\n\nn = int(input())\n\na = [int(x) for x in input().split(\" \")]\n\na.sort()\n\ni = a.count(a[0]) \nleft = i\nres = n - left\nwhile i < len(a) :\n    count = count_sort(a, i)\n    i += count\n    left -= count\n    if left < 0:\n        res += left\n        left = 0\n    left += count\n    \nprint(res)\n", "def go():\n    n = int(input())\n    a = sorted([int(i) for i in input().split(' ')])\n    total = i = j = 0\n    while j < n:\n        if a[i] == a[j]:\n            j += 1\n        else:\n            break\n    while j < n:\n        if a[i] < a[j]:\n            total += 1\n            i += 1\n        j += 1\n    return total\n\nprint(go())\n", "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\ni = 0\nfor j in range(n):\n\tif a[i] < a[j]:\n\t\ti = i + 1\n\nprint(i)", "from collections import Counter\nn = int(input())\narray = list(map(int, input().split()))\nprint(n - Counter(array).most_common(1)[0][1])\n", "from collections import Counter\nn=int(input())\na =map(int, input().split())\nb=Counter(a).values()\nmaxx=max(b)\nprint(n-maxx)", "from collections import Counter as co\nx=int(input())\ny=list(map(int,input().split()))\nprint(x-max(co(y).values()))\n", "from collections import*\nn = int(input())\n\ns = list(map(int, input().split()))\n\nx = max(Counter(s).values())\n\nprint(n - x)\n\n", "from collections import Counter\nlength = int(input())\narray = list(map(int, input().split()))\ndic = Counter(array)\nvalue_list = list(dic.values())\nprint(len(array) - max(value_list))", "from collections import *\n\nprint( int(input()) - max(Counter(map(int, input().split())).values()) )", "from collections import*\nprint(int(input())-max(Counter(map(int,input().split())).values()))"]