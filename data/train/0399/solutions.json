["class Solution:\n     def numDecodings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if not s:\n             return 0\n         \n         def num_decode(i):\n             # Number of ways to decode s[i:]\n             if i == len(s):\n                 return 1\n \n                 \n             if i not in memo:                \n                 num_ways = 0\n                 \n                 if s[i] in single_digit_codes:\n                     num_ways += num_decode(i + 1)\n \n                 if s[i:i+2] in double_digit_codes:\n                     num_ways += num_decode(i + 2)\n             \n                 memo[i] = num_ways\n             return memo[i]\n         single_digit_codes = set(str(x) for x in range(1, 10))\n         double_digit_codes = set(str(x) for x in range(10, 27))\n         memo = {}\n         return num_decode(0)", "class Solution:\n     def numDecodings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if not s: return 0\n         cipher = dict((str(k+1),v) for k,v in\n                       enumerate(\"abcdefghijklmnopqrstuvwxyz\"))\n         # funhash = dict((str(k),1) for k,v in cipher.items())\n         funhash = {\"\":1}\n         def helpRec(s):\n             if s in funhash: return funhash[s]\n             r1 = 0\n             if s[0] in cipher:\n                 r1 = helpRec(s[1:])\n             r2 = 0\n             if len(s) >= 2 and s[:2] in cipher:\n                 r2 = helpRec(s[2:])\n             rval = r1 + r2\n             funhash[s] = rval\n             # print(s,rval)\n             return rval\n         return helpRec(s)\n             \n", "class Solution:\n     def numDecodings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\" \n         if s == None or len(s) == 0:\n             return 0\n             \n         def in10(c):\n             return c.isdigit() and c>'0' and c<='9'\n         def in26(c):\n             return c.isdigit() and c>='10' and c<='26'\n         \n         \n         memo = [0 for _ in range(len(s))]\n         if in10(s[0]):\n             memo[0] = 1 \n         \n         for i in range(1, len(s)):\n             if i == 1:\n                 if in10(s[i]):\n                     memo[i] = memo[i-1]\n                 if in26(s[:2]):\n                     memo[i] = memo[i] + 1\n             else:\n                 if in10(s[i]):\n                     memo[i] += memo[i-1]\n                 if in26(s[i-1:i+1]):\n                     memo[i] += memo[i-2]\n                     \n         \n         return memo[-1]\n             \n             \n         \n         \n", "class Solution:\n     def numDecodings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         alphabet = 'abcdefghijklmnopqrstuvwxyz'\n         char_code = {k:str(v) for k, v in zip(alphabet, list(range(1, 27)))}\n         code_char = {v:k for k, v in list(char_code.items())}\n         def numDecodingsHelper(s, hist={}):\n             if not s: return 0\n             if len(s) == 1: return 1 if s in code_char else 0\n             if len(s) == 2:\n                 tmp = 1 if s in code_char else 0\n                 return tmp + numDecodingsHelper(s[0]) * numDecodingsHelper(s[1])\n             if s[1:] not in hist:\n                 hist[s[1:]] = numDecodingsHelper(s[1:], hist)\n             current1 = hist[s[1:]] if s[:1] in code_char else 0\n             if s[2:] not in hist:\n                 hist[s[2:]] = numDecodingsHelper(s[2:], hist)\n             current2 = hist[s[2:]] if s[:2] in code_char else 0\n             return current1 + current2\n         return numDecodingsHelper(s, {})\n             \n"]