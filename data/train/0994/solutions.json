["# cook your dish here\nimport sys\ninput=sys.stdin.readline\nfor _ in range(int(input())):\n n,x=list(map(int,input().split()))\n l=[0]\n pre=[0]*(n+1)\n sum=0\n i=1\n for m in input().split():\n  l.append(int(m))\n  sum+=int(m)\n  pre[i]=sum\n  i+=1\n dict={}\n k=[]\n i=1\n while (i*i)<=x:\n  if x%i==0:\n   k.append(i)\n   if (i*i)!=x:\n    k.append(x//i)\n   else:\n    break\n  i+=1 \n ans=0 \n for a in k:\n  if a>n:\n   continue\n  z=x//a \n  for j in range(a,n+1):\n   s=pre[j]-pre[j-a]\n   if s>z:\n    continue\n   if s in dict:\n    dict[s]+=1\n   else:\n    dict[s]=1\n  for j in range(a,n+1):\n   s=pre[j]-pre[j-a]\n   if s>z:\n    continue\n   if (z-s) in dict:\n    ans+=dict[z-s]\n  for j in range(a,n+1):\n   s=pre[j]-pre[j-a]\n   if s>z:\n    continue\n   dict[s]=0\n   \n print(ans) \n   \n", "# cook your dish here\nfor _ in range(int(input())):\n n,x=list(map(int,input().split()))\n l=[0]\n pre=[0]*(n+1)\n sum=0\n i=1\n for m in input().split():\n  l.append(int(m))\n  sum+=int(m)\n  pre[i]=sum\n  i+=1\n dict={}\n k=[]\n i=1\n while (i*i)<=x:\n  if x%i==0:\n   k.append(i)\n   if (i*i)!=x:\n    k.append(x//i)\n   else:\n    break\n  i+=1 \n ans=0 \n for a in k:\n  if a>n:\n   continue\n  z=x//a \n  for j in range(a,n+1):\n   s=pre[j]-pre[j-a]\n   if s>z:\n    continue\n   if s in dict:\n    dict[s]+=1\n   else:\n    dict[s]=1\n  for j in range(a,n+1):\n   s=pre[j]-pre[j-a]\n   if s>z:\n    continue\n   if (z-s) in dict:\n    ans+=dict[z-s]\n  for j in range(a,n+1):\n   s=pre[j]-pre[j-a]\n   if s>z:\n    continue\n   dict[s]=0\n   \n print(ans) \n   \n", "for _ in range(int(input())):\n n,X=map(int,input().split())\n b=list(map(int,input().split()))\n a=[[0 for j in range(n+1)] for k in range(n+1)]\n for i in range(n):\n  for j in range(n):\n   a[i+1][j+1]=b[i]+b[j]\n c=0\n #print(a)\n for i in range(n+1):\n  for j in range(n+1):\n   if i>0:\n    a[i][j]+=a[i-1][j]\n   if j>0:\n    a[i][j]+=a[i][j-1]\n   if i>0 and j>0:\n    a[i][j]-=a[i-1][j-1]\n   ii=i-1; jj=j-1\n   while ii>-1 and jj>-1:\n    if a[i][j]-a[ii][j]-a[i][jj]+a[ii][jj]==X:\n     c+=1\n    ii-=1; jj-=1\n #print(a)\n print(c)", "import math\nfor _ in range(int(input())):\n n,x=map(int,input().split())\n a=list(map(int,input().split()))\n count=0\n #y=a.copy()\n #y.sort()\n y=dict()\n for i in range(n):\n  if y.get(a[i]):\n   y[a[i]]+=1\n  else:\n   y[a[i]]=1\n for i in range(n):\n  if a[i]>=x:\n   pass\n  else:\n   p=x-a[i]\n   if y.get(p):\n    count+=y[p]\n   else:\n    pass\n p=math.sqrt(x)\n if n<p:\n  p=n\n b=[]\n k=2\n while k<=p:\n  if x%k==0:\n   b.append(k)\n  k+=1\n #print(b)\n for i in b:\n  summ=0\n  for j in range(i):\n   summ+=a[j]\n  c=[summ]\n  p=0\n  for j in range(i,n):\n   summ+=a[j]\n   summ-=a[p]\n   p+=1\n   c.append(summ)\n  #c.sort()\n  l=len(c)\n  #print(i)\n  #print(c)\n  y=dict()\n  for j in range(l):\n   if y.get(c[j]):\n    y[c[j]]+=1\n   else:\n    y[c[j]]=1\n  for j in range(l):\n   if c[j]>=(x//i):\n    pass\n   else:\n    p=(x//i)-c[j]\n    if y.get(p):\n     count+=y[p]\n    else:\n     pass\n  \n print(count)", "import math\nfor _ in range(int(input())):\n n,x=map(int,input().split())\n a=list(map(int,input().split()))\n count=0\n y=a.copy()\n y.sort()\n for i in range(n):\n  if y[i]>=x:\n   break\n  else:\n   p=x-y[i]\n   u=0\n   v=n-1\n   cond=0\n   q=0\n   while u<=v:\n    q=(u+v)//2\n    if y[q]>p:\n     v=q-1\n    elif y[q]<p:\n     u=q+1\n    else:\n     cond=1\n     count+=1\n     break\n   if cond==1:\n    r=q\n    s=q\n    while r>0:\n     if y[r-1]==y[r]:\n      count+=1\n      r-=1\n     else:\n      break\n    while s<n-1:\n     if y[s]==y[s+1]:\n      count+=1\n      s+=1\n     else:\n      break\n p=math.sqrt(x)\n if n<p:\n  p=n\n b=[]\n k=2\n while k<=p:\n  if x%k==0:\n   b.append(k)\n  k+=1\n #print(b)\n po=0\n pot=0\n for i in b:\n  summ=pot\n  for j in range(po,i):\n   summ+=a[j]\n  po=i\n  pot=summ \n  c=[summ]\n  p=0\n  for j in range(i,n):\n   summ+=a[j]\n   summ-=a[p]\n   p+=1\n   c.append(summ)\n  c.sort()\n  l=len(c)\n  #print(i)\n  #print(c)\n  for t in range(l):\n   if c[t]>=x//i:\n    break\n   else:\n    p=(x//i)-c[t]\n    u=0\n    v=l-1\n    cond=0\n    q=0\n    while u<=v:\n     q=(u+v)//2\n     if c[q]>p:\n      v=q-1\n     elif c[q]<p:\n      u=q+1\n     else:\n      cond=1\n      count+=1\n      break\n    if cond==1:\n     r=q\n     s=q\n     while r>0:\n      if c[r-1]==c[r]:\n       count+=1\n       r-=1\n      else:\n       break\n     while s<l-1:\n      if c[s]==c[s+1]:\n       count+=1\n       s+=1\n      else:\n       break\n    #print(count)\n print(count)", "import math\nfor _ in range(int(input())):\n n,x=map(int,input().split())\n a=list(map(int,input().split()))\n count=0\n y=a.copy()\n y.sort()\n for i in range(n):\n  if y[i]>=x:\n   break\n  else:\n   p=x-y[i]\n   u=0\n   v=n-1\n   cond=0\n   q=0\n   while u<=v:\n    q=(u+v)//2\n    if y[q]>p:\n     v=q-1\n    elif y[q]<p:\n     u=q+1\n    else:\n     cond=1\n     count+=1\n     break\n   if cond==1:\n    r=q\n    s=q\n    while r>0:\n     if y[r-1]==y[r]:\n      count+=1\n      r-=1\n     else:\n      break\n    while s<n-1:\n     if y[s]==y[s+1]:\n      count+=1\n      s+=1\n     else:\n      break\n p=math.sqrt(x)\n if n<p:\n  p=n\n b=[]\n k=2\n while k<=p:\n  if x%k==0:\n   b.append(k)\n  k+=1\n #print(b)\n for i in b:\n  summ=0\n  for j in range(i):\n   summ+=a[j]\n  c=[summ]\n  p=0\n  for j in range(i,n):\n   summ+=a[j]\n   summ-=a[p]\n   p+=1\n   c.append(summ)\n  c.sort()\n  l=len(c)\n  #print(i)\n  #print(c)\n  for t in range(l):\n   if c[t]>=x//i:\n    break\n   else:\n    p=(x//i)-c[t]\n    u=0\n    v=l-1\n    cond=0\n    q=0\n    while u<=v:\n     q=(u+v)//2\n     if c[q]>p:\n      v=q-1\n     elif c[q]<p:\n      u=q+1\n     else:\n      cond=1\n      count+=1\n      break\n    if cond==1:\n     r=q\n     s=q\n     while r>0:\n      if c[r-1]==c[r]:\n       count+=1\n       r-=1\n      else:\n       break\n     while s<l-1:\n      if c[s]==c[s+1]:\n       count+=1\n       s+=1\n      else:\n       break\n    #print(count)\n print(count)", "from datetime import datetime\n\nclass dicta(dict):\n def __init__(self, *args, **kwargs):\n  super(dicta, self).__init__(*args, **kwargs)\n  self.__dict__ = self\n\n# -----------------------------------------------------------------------------\nSTART_TIME = datetime.now()\n\ndef debug(**kwargs):\n\n return\n diff = str(datetime.now() - START_TIME)\n for key, value in list(kwargs.items()):\n  if isinstance(value, list):\n   print(diff, key + ':')\n   for itemKey, item in enumerate(value):\n    print('\\t\\t\\t', str(itemKey) + ': ' + str(item))\n  elif isinstance(value, dict):\n   print(diff, key + ':')\n   for itemKey, item in list(value.items()):\n    print('\\t\\t\\t', itemKey + ': ' + str(item))\n  else:\n   print(diff, key + ': ' + str(value))\n\n# -----------------------------------------------------------------------------\ndef printResult(result):\n if isinstance(result, list):\n  print(*result)\n else:\n  print(result)\n\n# -----------------------------------------------------------------------------\ndef main():\n debug(status='started')\n noOfTests = int(input())\n\n for i in range(noOfTests):\n  result = runATest(i)\n  if isinstance(result, tuple):\n   for line in result:\n    printResult(line)\n  else:\n   printResult(result)\n  if noOfTests > 1:\n   debug(status='-------------------- finished Test#' + str(i+1) + ' \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0--------------------')\n debug(status='finished')\n\ndef runATest(_testIndex):\n\n [count, refTotal] = [int(x) for x in input().split()]\n\n aList = [int(x) for x in input().split()]\n factors = findFactors(refTotal, count)\n # debug(refTotal=refTotal, count=count, factors=factors)\n\n total = 0\n for factor in factors:\n  total += countSquaresOfSize(aList, refTotal, count, factor)\n return total\n\ndef findFactors(refTotal, maxFactor):\n\n outList = [1]\n\n for i in range(2, int(refTotal/2)+1):\n  if i > maxFactor:\n   break\n  if refTotal % i == 0:\n   outList.append(i)\n\n if refTotal <= maxFactor:\n  outList.append(refTotal)\n\n return outList\n\ndef countSquaresOfSize(aList, refTotal, count, size):\n\n reqSum = int(refTotal / size)\n sumList = [0] * (reqSum + 1)\n\n sumSize = sum(aList[:size])\n if sumSize <= reqSum:\n  sumList[sumSize] += 1\n debug()\n\n rightOffset = size - 1\n for i in range(1, count + 1 - size):\n  # debug(window=i)\n  sumSize = sumSize - aList[i - 1] + aList[i + rightOffset]\n  if sumSize <= reqSum:\n   sumList[sumSize] += 1\n\n total = 0\n for i in range(0, (reqSum + 1) // 2 + 1):\n  # debug(summing=f'{i}, {-1 - i}')\n  subTotal = sumList[i] * sumList[-1 - i]\n  if i != reqSum - i:\n   subTotal *= 2\n  total += subTotal\n\n debug(reqSum=reqSum, size=size, total=total, sumList=sumList)\n return total\n\nmain()\n", "from sys import stdin, stdout\nimport numpy as np\n\ndef main():\n for _ in range(int(stdin.readline())):\n  N, X = list(map(int,stdin.readline().split()))\n  array = np.array(list(map(int,stdin.readline().split()))).reshape(N,1)\n  # matrix = array + array.T\n  count = 0\n  adsum = 0\n  sum = 0\n  # print(matrix)\n  valid = list([x for x in range(1,N+1) if (X/x).is_integer()])\n  # print(valid)\n  for length in valid:\n   for j in range(N-length+1):\n    sum = np.sum(array[j:j+length])*length\n    for k in range(N-length + 1):\n     adsum = length*np.sum(array[k:k+length])\n     if sum + adsum == X:\n      count += 1\n\n  print(count)\n\ndef __starting_point():\n main()\n\n__starting_point()", "from datetime import datetime\n\n# -----------------------------------------------------------------------------\nSTART_TIME = datetime.now()\n\ndef debug(*args, **kwargs):\n # print(datetime.now() - START_TIME, *args, dict(**kwargs))\n return\n\n# -----------------------------------------------------------------------------\ndef printResult(result):\n if isinstance(result, list):\n  print(*result)\n else:\n  print(result)\n\n# -----------------------------------------------------------------------------\ndef main():\n debug('started')\n noOfTests = int(input())\n\n for i in range(noOfTests):\n  result = runATest(i)\n  if isinstance(result, tuple):\n   for line in result:\n    printResult(line)\n  else:\n   printResult(result)\n debug('finished')\n\n# -----------------------------------------------------------------------------\n# def runATest(_testIndex):\n\n#     [count, refTotal] = [int(x) for x in input().split()]\n\n#     aList = [int(x) for x in input().split()]\n#     matrix = [None] * count\n\n#     debug(low=min(aList), high=max(aList), average=sum(aList)/count, len=len\u00a0\u00a0\u00a0\u00a0(aList))\n\n#     for i in range(count):\n#         matrix[i] = tuple((lambda xi, xj: xi + xj)(aList[i], xj) for xj in \u00a0\u00a0\u00a0\u00a0aList)\n#     matrix = tuple(matrix)\n\n#     # for i in range(count):\n#     #     debug(*matrix[i])\n\n#     return countSquares(matrix, refTotal, count)\n\n# def countSquares(matrix, refTotal, count):\n\n#     total = 0\n#     for i in range(count):\n#         for j in range(count):\n#             if countSquaresAtPoint(matrix, refTotal, count, i, j):\n#                 total += 1\n#         debug('completed col', i=i, j=j)\n\n#     return total\n\n# def countSquaresAtPoint(matrix, refTotal, count, x, y):\n\n#     maxLimit = min(count - x, count - y)\n\n#     totalSoFar = 0\n#     for limit in range(maxLimit):\n\n#         xLimit = x + limit\n#         yLimit = y + limit\n#         totalSoFar += matrix[xLimit][yLimit]\n\n#         for i in range(x, x + limit):\n#             totalSoFar += matrix[i][yLimit]\n\n#         for j in range(y, y + limit):\n#             totalSoFar += matrix[xLimit][j]\n\n#         # debug(x=x, y=y, limit=limit, totalSoFar=totalSoFar)\n\n#         if totalSoFar == refTotal:\n#             return True\n\n#         if totalSoFar > refTotal:\n#             return False\n\n#     return False\n\ndef runATest(_testIndex):\n\n [count, refTotal] = [int(x) for x in input().split()]\n\n aList = [int(x) for x in input().split()]\n factors = findFactors(refTotal, count)\n debug(factors=factors)\n\n total = 0\n for factor in factors:\n  total += countSquaresOfSize(aList, refTotal, count, factor)\n return total\n\ndef findFactors(refTotal, maxFactor):\n\n outList = [1]\n\n for i in range(2, int(refTotal/2)+1):\n  if i > maxFactor:\n   break\n  if refTotal % i == 0:\n   outList.append(i)\n\n if refTotal <= maxFactor:\n  outList.append(refTotal)\n\n return outList\n\ndef countSquaresOfSize(aList, refTotal, count, size):\n\n reqTotal = int(refTotal / size)\n maxLen = count + 1 - size\n total = 0\n\n for i in range(maxLen):\n  for j in range(maxLen):\n   if countSquaresAtPointOfSize(aList, reqTotal, size, i, j):\n    total += 1\n\n debug('completed size', size=size, total=total)\n return total\n\ndef countSquaresAtPointOfSize(aList, reqTotal, size, i, j):\n\n total = 0\n\n for k in range(size):\n  total += aList[i + k] + aList[j + k]\n\n debug(i=i, j=j, size=size, total=total, reqTotal=reqTotal)\n return total == reqTotal\n\nmain()\n", "# cook your dish here\nfrom math import sqrt\nt=int(input())\ndef get_factors(x):\n factors=[1]\n for i in range(2,int(sqrt(x))+1):\n  if k%i==0:\n   factors.append(i)\n factors.append(x)\n return factors\n\n\nfor _ in range(t):\n n,k=list([int(x) for x in input().split()])\n a=list([int(x) for x in input().split()])\n factors=get_factors(k)\n total=0\n for factor in factors:\n  if factor>len(a):\n   break\n  freq={}\n  sliding_window=a[0:factor]\n  s=sum(sliding_window)\n  freq[s]=1\n  for i in range(factor,len(a)):\n   sliding_window=sliding_window[1:]+[a[i]]\n   \n   s=sum(sliding_window)\n   if s>k/factor:\n    continue\n   if s not in freq:\n    freq[s]=0\n   freq[s]+=1\n  for s in freq:\n   total+=freq.get((k//factor)-s,0)*freq[s]\n print(total)\n", "def binary_search(b,item,n):\n lb = 0\n a = b[:]\n ub = n-1\n cnt = 1\n f = 0\n while lb<=ub:\n  mid = (lb+ub)//2\n  if a[mid] == item:\n   f = 1\n   a.pop(mid)\n   ub = ub - 1\n   cnt = cnt + 1\n  elif a[mid] > item:\n   ub = mid - 1\n  else:\n   lb = mid + 1\n\n if f == 1:\n  return cnt\n else:\n  return False\n\n\ncases = int(input())\nfor v in range(cases):\n a = list(map(int,input().strip().split()))\n n = a[0]\n x = a[1]\n a = list(map(int,input().strip().split()))\n \n cnt = 0\n\n for i in range(1,n+1):\n  if x%i == 0:\n   side = i\n   freq = 0\n   subsetsum = []\n   left = 0\n   right = i-1\n   s = sum(a[:right+1])\n   if s > x:\n    freq = freq + 1\n   else:\n    subsetsum.append(s)\n   while right < n - 1:\n    right += 1\n    s = s + a[right] - a[left]\n    left += 1\n    \n    if s > x:\n     freq = freq + 1\n    else:\n     subsetsum.append(s)\n    \n   y = x//side\n   subsetsum.sort()\n   \n   for r in range(n-side+1-freq):\n    h = binary_search(subsetsum,y-subsetsum[r],n-side+1-freq)\n    if h:\n     cnt = cnt + h-1\n    \n\n\n print(cnt)\n   \n    \n# a = [1,2,3,4,5]\n# n = 5\n# for i in range(1,6):\n#     print(i)\n#     left = 0\n#     right = i-1\n#     subset = []\n#     s = sum(a[:right+1])\n#     subset.append(s)\n#     while right < n-1:\n#         right += 1\n#         s = s + a[right] - a[left]\n#         left += 1\n#         subset.append(s)\n\n#     print(subset)\n", "cases = int(input())\nfor v in range(cases):\n a = list(map(int,input().strip().split()))\n n = a[0]\n x = a[1]\n a = list(map(int,input().strip().split()))\n \n cnt = 0\n\n for i in range(1,n+1):\n  if x%i == 0:\n   side = i\n   freq = 0\n   subsetsum = []\n   left = 0\n   right = i-1\n   s = sum(a[:right+1])\n   if s > x:\n    freq = freq + 1\n   else:\n    subsetsum.append(s)\n   while right < n - 1:\n    right += 1\n    s = s + a[right] - a[left]\n    left += 1\n    \n    if s > x:\n     freq = freq + 1\n    else:\n     subsetsum.append(s)\n    \n\n   for r in range(n-side+1-freq):\n    \n    for c in range(n-side+1-freq):\n     if subsetsum[r] + subsetsum[c] == x//side:\n      cnt += 1\n\n print(cnt)\n   \n    \n# a = [1,2,3,4,5]\n# n = 5\n# for i in range(1,6):\n#     print(i)\n#     left = 0\n#     right = i-1\n#     subset = []\n#     s = sum(a[:right+1])\n#     subset.append(s)\n#     while right < n-1:\n#         right += 1\n#         s = s + a[right] - a[left]\n#         left += 1\n#         subset.append(s)\n\n#     print(subset)\n", "cases = int(input())\nfor v in range(cases):\n a = list(map(int,input().strip().split()))\n n = a[0]\n x = a[1]\n a = list(map(int,input().strip().split()))\n \n cnt = 0\n\n for i in range(1,n+1):\n  if x%i == 0:\n   side = i\n   subsetsum = []\n   left = 0\n   right = i-1\n   s = sum(a[:right+1])\n   subsetsum.append(s)\n   while right < n - 1:\n    right += 1\n    s = s + a[right] - a[left]\n    left += 1\n    subsetsum.append(s)\n    \n\n   \n   for r in range(n-side+1):\n    if subsetsum[r] >= x:\n     continue\n    for c in range(n-side+1):\n     if subsetsum[r] + subsetsum[c] == x//side:\n      cnt += 1\n\n print(cnt)\n   \n    \n# a = [1,2,3,4,5]\n# n = 5\n# for i in range(1,6):\n#     print(i)\n#     left = 0\n#     right = i-1\n#     subset = []\n#     s = sum(a[:right+1])\n#     subset.append(s)\n#     while right < n-1:\n#         right += 1\n#         s = s + a[right] - a[left]\n#         left += 1\n#         subset.append(s)\n\n#     print(subset)\n", "try:\n import math\n from collections import defaultdict\n from sys import stdin\n for _ in range(int(stdin.readline())):\n  n,x=list(map(int,stdin.readline().strip().split()))\n  list1=list(map(int,stdin.readline().strip().split()))\n  ll=set()\n  for i in range(1,n):\n   list1[i]=list1[i]+list1[i-1]\n  c=0 \n  for i in range(1,n+1):\n   if(x%i==0):\n    a=i\n    y=x//a\n    list2=[0]*(y+1)\n    j=-1\n    dict1={}\n    for i in range(a-1,n):\n     if(j==-1):\n      if(list1[i]<=y):    \n       list2[list1[i]]+=1\n\n      j+=1\n     else:\n      if(list1[i]-list1[j]<=y):    \n       list2[list1[i]-list1[j]]+=1\n\n      j+=1\n    j=-1\n    for i in range(a-1,n):\n     if(j==-1):\n      if(list1[i]<=y):  \n       c+=list2[y-list1[i]] \n\n      j+=1\n     else:\n      if(list1[i]-list1[j]<=y):   \n       if(list1[i]-list1[j]<=y):    \n        c+=list2[y-(list1[i]-list1[j])]\n\n      j+=1\n\n  print(c)\n\nexcept:\n pass\n   \n", "try:\n import math\n from collections import defaultdict\n for _ in range(int(input())):\n  n,x=map(int,input().split())\n  list1=list(map(int,input().split()))\n  ll=set()\n  for i in range(1,n):\n   list1[i]=list1[i]+list1[i-1]\n  c=0 \n  for i in range(1,n+1):\n   if(x%i==0):\n    a=i\n    y=x//a\n    list2=[0]*(y+1)\n    j=-1\n    dict1={}\n    for i in range(a-1,n):\n     if(j==-1):\n      if(list1[i]<=y):    \n       list2[list1[i]]+=1\n\n      j+=1\n     else:\n      if(list1[i]-list1[j]<=y):    \n       list2[list1[i]-list1[j]]+=1\n\n      j+=1\n    j=-1\n    for i in range(a-1,n):\n     if(j==-1):\n      if(list1[i]<=y):  \n       c+=list2[y-list1[i]] \n\n      j+=1\n     else:\n      if(list1[i]-list1[j]<=y):   \n       if(list1[i]-list1[j]<=y):    \n        c+=list2[y-(list1[i]-list1[j])]\n\n      j+=1\n\n  print(c)\n\nexcept:\n pass", "try:\n import math\n from sys import stdin\n from collections import defaultdict\n for _ in range(int(stdin.readline())):\n  n,x=list(map(int,stdin.readline().strip().split()))\n  list1=list(map(int,stdin.readline().strip().split()))\n  ll=set()\n  for i in range(1,n):\n   list1[i]=list1[i]+list1[i-1]\n  c=0 \n  for i in range(1,n+1):\n   if(x%i==0):\n    a=i\n    y=x//a\n    list2=[]\n    j=-1\n    dict1={}\n    for i in range(a-1,n):\n     if(j==-1):\n      list2.append(list1[i])\n      if(list1[i] in dict1):\n       dict1[list1[i]]+=1\n      else:\n       dict1[list1[i]]=1\n      j+=1\n     else:\n      list2.append(list1[i]-list1[j])\n      if(list1[i]-list1[j] in dict1):\n       dict1[list1[i]-list1[j]]+=1\n      else:\n        dict1[list1[i]-list1[j]]=1\n      j+=1\n    # print(list2)\n    # print(dict1)\n    for k in list2:\n     # dict1[k]-=1\n     if(y-k in dict1):\n      c+=dict1[y-k]\n    # c+=dict1(y-k)\n    # dict1[k]+=1\n  print(c)\n\nexcept:\n pass\n   \n", "try:      \n import math\n from collections import defaultdict\n for _ in range(int(input())):\n  n,x=list(map(int,input().split()))\n  list1=list(map(int,input().split()))\n  ll=set()\n  for i in range(1,int(math.sqrt(x))+1):\n   if(x%i==0):\n    if(i<=n):\n     ll.add(i)\n    if(x//i<=n):\n     ll.add(x//i)\n     \n  for i in range(1,n):\n   list1[i]=list1[i]+list1[i-1]\n  c=0 \n  for i in ll:\n   a=i\n   y=x//a\n   list2=[]\n   j=-1\n   dict1={}\n   for i in range(a-1,n):\n    if(j==-1):\n     list2.append(list1[i])\n     if(list1[i] in dict1):\n      dict1[list1[i]]+=1\n     else:\n      dict1[list1[i]]=1\n     j+=1\n    else:\n     list2.append(list1[i]-list1[j])\n     if(list1[i]-list1[j] in dict1):\n      dict1[list1[i]-list1[j]]+=1\n     else:\n       dict1[list1[i]-list1[j]]=1\n     j+=1\n   # print(list2)\n   # print(dict1)\n   for k in list2:\n    # dict1[k]-=1\n    if(y-k in dict1):\n     c+=dict1[y-k]\n    # c+=dict1(y-k)\n    # dict1[k]+=1\n  print(c)\nexcept:\n pass\n\n", "try:    \n import math\n for _ in range(int(input())):\n  n,x=list(map(int,input().split()))\n  list1=list(map(int,input().split()))\n  ll=set()\n  for i in range(1,int(math.sqrt(x))+1):\n   if(x%i==0):\n    if(i<=n):\n     ll.add(i)\n    if(x//i<=n):\n     ll.add(x//i)\n     \n  for i in range(1,n):\n   list1[i]=list1[i]+list1[i-1]\n  c=0 \n  for i in ll:\n   a=i\n   y=x//a\n   list2=[]\n   j=-1\n   for i in range(a-1,n):\n    if(j==-1):\n     list2.append(list1[i])\n     j+=1\n    else:\n     list2.append(list1[i]-list1[j])\n     j+=1\n   # print(list2)\n   for k in list2:\n    c+=list2.count(y-k)\n  print(c)\n  \nexcept:\n pass\n", "import math\n\nt=int(input()) #scanf(\"%d\",&t);\nwhile(t!=0):\n t-=1\n ans=0\n n,x = map(int,input().split())\n l = list(map(int,input().split()))\n a = []\n a.append(0)\n for i in range(n):\n  a.append(l[i]+a[i])\n for i in range(1,(int)(math.sqrt(x)+1)):\n  if(x%i is 0):\n   y=x/i\n   m = {}\n   for j in range(i,n+1):\n    if(a[j]-a[j-i] in m):\n     m[a[j]-a[j-i]]+=1\n    else:\n     m[a[j]-a[j-i]]=1;\n   \n   for j in range(i,n+1):\n    z=y-(a[j]-a[j-i])\n    if(z in m):\n     if((a[j]-a[j-i]) == z):\n      ans+=(m[a[j]-a[j-i]]*m[z])\n      m[z]=0\n     else:\n      ans+=(m[a[j]-a[j-i]]*m[z]*2)\n      m[a[j]-a[j-i]]=0\n      m[z]=0\n print(ans)", "import math\n\nt=int(input()) #scanf(\"%d\",&t);\nwhile(t!=0):\n t-=1\n ans=0\n n,x = map(int,input().split())\n l = list(map(int,input().split()))\n a = []\n a.append(0)\n for i in range(n):\n  a.append(l[i]+a[i])\n for i in range(1,(int)(math.sqrt(x)+1)):\n  if(x%i is 0):\n   y=x/i\n   m = {}\n   for j in range(i,n+1):\n    if(a[j]-a[j-i] in m):\n     m[a[j]-a[j-i]]+=1\n    else:\n     m[a[j]-a[j-i]]=1;\n   \n   for j in range(i,n+1):\n    z=y-(a[j]-a[j-i])\n    if(z in m):\n     ans+=(m[a[j]-a[j-i]]*m[z])\n     if((a[j]-a[j-i]) == z):\n      m[a[j]-a[j-i]]=0\n     \n print(ans)", "def main():\n T=int(input())\n for _ in range(T):\n  N,X=map(int,input().split())\n  A=[0]+list(map(int,input().split()))\n  factorsList=[]\n  i=1\n  ans=0\n  while(i*i)<=X:\n   if X%i==0:\n    factorsList.append(i)\n    if i!=(X//i):\n     factorsList.append(X//i)\n   i+=1\n  prefixSums=[0]\n  for i in range(1,N+1):\n   prefixSums.append(prefixSums[i-1]+A[i])\n     \n  for factor in factorsList:\n   if factor>N:\n    continue\n   summRequired=X//factor\n   d={}\n   for i in range(factor,N+1):\n    s=prefixSums[i]-prefixSums[i-factor]\n    if s<=summRequired:\n     if s not in d:\n      d[s]=1\n     else:\n      d[s]+=1\n   for i in range(factor,N+1):\n    s=prefixSums[i]-prefixSums[i-factor]\n    if s<=summRequired:\n     if (summRequired-s) in d:\n      ans+=d[summRequired-s]\n  print(ans)\ndef __starting_point():\n main()\n__starting_point()"]