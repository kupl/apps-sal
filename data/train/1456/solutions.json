["import math\ndef GLR(x):\n summation_N = (x*(x+1))//2\n initial = x\n power = 0\n sum_A = 0\n while x>=1:\n  count = (x+1)//2\n  sum_A += count * 2**power\n  x = x - count\n  power += 1\n sum_B = summation_N - sum_A\n ans = sum_B - (int(math.log(initial,2))+1)\n return ans\n \nfor _ in range(int(input())):\n l,r = list(map(int,input().split()))\n if l==1:\n  print(GLR(r))\n else:\n  print((GLR(r) - GLR(l-1)))# cook your dish here\n", "import math \nfrom collections import defaultdict\ndef IsPowerOfTwo(x):\n return (x != 0) and ((x & (x - 1)) == 0)\n\ndef getFirstSetBitPos(n): \n  return int(math.log2(n&-n)+1)-1\n\ndef xpr(n):\n if IsPowerOfTwo(n): \n  return (-1, -1)\n # Has the first set bit from lsb\n index = getFirstSetBitPos(n)\n # print(\"Index : \", index)\n # Convert the number to binary string\n binary_n_string = str(bin(n))[2:]\n # print(binary_n_string)\n a = \"\"\n b = \"\"\n i = 0\n for bit in reversed(binary_n_string):\n  if i < index:\n   a = '0' + a\n   b = '0' + b\n  elif i == index:\n   a = '1' + a\n   b = '0' + b\n  else:\n   if bit == '0':\n    a = '0' + a\n    b = '0' + b\n   else:\n    a = '0' + a\n    b = '1' + b\n  i = i + 1\n a, b = int(a, 2), int(b, 2)\n return (a, b)\n \n \ndef glr(x):\n tot = (x*(x+1))//2\n lb = 0\n while x >= 1:\n  tot -= int(((x+1)//2)*2**lb)\n  lb += 1\n  tot -= 1\n  x = x / 2\n return tot \n \nt = int(input())\nwhile t > 0:\n l, r = list(map(int,input().split()))\n print(glr(r) - glr(l-1))\n t = t - 1", "import math \nfrom collections import defaultdict\ndef IsPowerOfTwo(x):\n return (x != 0) and ((x & (x - 1)) == 0)\n\ndef getFirstSetBitPos(n): \n  return int(math.log2(n&-n)+1)-1\n\ndef xpr(n):\n if IsPowerOfTwo(n): \n  return (-1, -1)\n # Has the first set bit from lsb\n index = getFirstSetBitPos(n)\n # print(\"Index : \", index)\n # Convert the number to binary string\n binary_n_string = str(bin(n))[2:]\n # print(binary_n_string)\n a = \"\"\n b = \"\"\n i = 0\n for bit in reversed(binary_n_string):\n  if i < index:\n   a = '0' + a\n   b = '0' + b\n  elif i == index:\n   a = '1' + a\n   b = '0' + b\n  else:\n   if bit == '0':\n    a = '0' + a\n    b = '0' + b\n   else:\n    a = '0' + a\n    b = '1' + b\n  i = i + 1\n a, b = int(a, 2), int(b, 2)\n return (a, b)\n \n \ndef glr(x):\n tot = (x*(x+1))//2\n lb = 0\n while x >= 1:\n  tot -= int(((x+1)//2)*2**lb)\n  lb += 1\n  tot -= 1\n  x = x / 2\n return tot \n \nt = int(input())\nwhile t > 0:\n l, r = list(map(int,input().split()))\n sumt = 0\n # dict1 = defaultdict(int)\n # for i in range(l, r+1):\n #   val = xpr(i)\n #   if val[1] != -1 and i%2 == 0:\n #       dict1[val[1]] += 1\n #   # print(i, val)\n #   sumt += val[1]\n \n print(glr(r) - glr(l-1))\n t = t - 1", "def fun(m):\n sumi=(m*(m+1))//2\n f=1\n while(f<=m):\n  x=(m//f)+1\n  sumi-=1+f*((x//2))\n  f*=2\n return sumi \n \nt=int(input())\nfor _ in range(t):\n l,r=map(int,input().split())\n print(fun(r)-fun(l-1))", "# cook your dish here\n\nfrom math import log2\n\n\ndef get_a(n):\n if n < 1:\n  return 0\n if n == 1:\n  return 1\n return (n + 1) // 2 + get_a(n // 2) * 2\n\n\ndef get(n):\n if n < 1:\n  return 0\n total = n * (n + 1) // 2\n a = get_a(n)\n return total - a - int(log2(n)) - 1\n\n\ndef read():\n t = int(input())\n for i in range(t):\n  l, r = list(map(int, input().strip().split()))\n  print(get(r) - get(l - 1))\n\n\nread()\n", "#!/usr/bin/python3\nimport math\n\ndef xor_solution(l, r):\n sum_xors = 0\n for i in range(l, r + 1):\n  if((i & (i - 1)) == 0):\n   sum_xors = sum_xors - 1\n  else:\n   sum_xors = sum_xors + (i & (i - 1))\n return sum_xors\n  \n\ndef sum_xor(x):\n if(x == 0):\n  return 0\n sum_n = (x * (x + 1)) // 2\n temp = x\n power2 = 1\n sum_a = 0\n while(x >= 1):\n  count = (x + 1) // 2\n  sum_a += count * power2\n  x = x - count\n  power2 = power2 * 2\n\n sum_b = sum_n - sum_a\n return (sum_b - (int(math.log2(temp)) + 1))\n\ndef main():\n test_case = int(input())\n ans = []\n while(test_case > 0):\n  l, r = list(map(int, input().split()))\n  ans.append(sum_xor(r) - sum_xor(l - 1))\n\n  test_case -= 1\n \n for i in ans:\n  print(i)\n\ndef __starting_point():\n main()\n\n__starting_point()", "# cook your dish here\ndef ans(p):\n pika=(p*(p+1))//2\n tmep=1\n while(p>=1):\n  pika-=(p+1)//2*tmep\n  pika-=1\n  p//=2\n  tmep*=2\n return pika\nfor _ in range(int(input())):\n l,r=map(int,input().split())\n print(ans(r)-ans(l-1))", "import math\ndef GLR(x):\n summation_N = (x*(x+1))//2\n initial = x\n power = 0\n sum_A = 0\n while x>=1:\n  count = (x+1)//2\n  sum_A += count * 2**power\n  x = x - count\n  power += 1\n sum_B = summation_N - sum_A\n ans = sum_B - (int(math.log(initial,2))+1)\n return ans\n \nfor _ in range(int(input())):\n l,r = map(int,input().split())\n if l==1:\n  print(GLR(r))\n else:\n  print(GLR(r) - GLR(l-1))", "import math\ndef GLR(x):\n summation_N = (x*(x+1))//2\n initial = x\n power = 0\n sum_A = 0\n while x>=1:\n  count = (x+1)//2\n  sum_A += count * 2**power\n  x = x - count\n  power += 1\n sum_B = summation_N - sum_A\n ans = sum_B - (int(math.log(initial,2))+1)\n return ans\n  \nfor _ in range(int(input())):\n l,r = list(map(int,input().split()))\n if l==1:\n  print(GLR(r))\n else:\n  print(GLR(r) - GLR(l-1))\n", "import math\nt=int(input())\n\ndef glr(x):\n sigma_a=0\n a=x\n sigma_n=(x*(x+1))//2\n p=0\n while(x>0):\n  \n  if(x%2==0):\n   count=x//2\n  else:\n   count=(x+1)//2\n\n  sigma_a+=count*(2**p)\n  x-=count\n  p+=1\n sigma_b=sigma_n-sigma_a\n\n sigma_b=sigma_b+(-1*(int(math.log(a,2))))\n\n return sigma_b\n  \n\nfor i in range(t):\n \n\n l,r=list(map(int,input().split()))\n\n if(l>1):\n  ans=glr(r)-glr(l-1)\n else:\n  \n  ans=glr(r)-1\n  \n  \n  \n\n \n\n\n print(ans)\n      \n\n \n\n \n", "# cook your dish here\nimport math\ndef jd(x):\n n=x\n y=(x*(x+1))//2\n ans=0\n p=0\n while n>=1:\n  c=(n+1)//2\n  ans+=int(c*math.pow(2,p))\n  n-=c\n  p+=1\n y-=ans\n y-=int(math.log2(x)+1)\n return int(y)\nfor _ in range(int(input())):\n l,r=map(int,input().split())\n if l>1:\n  print(jd(r)-jd(l-1))\n else:\n  print(jd(r))", "from math import log2\ndef grx(x):\n if(x==0):\n  return 0\n i = x\n summation_n = (x*(x+1))//2\n curr = (x+1)//2\n ans = 0\n p = 0\n while(x>=1):\n  ans+=((2**p)*(curr))\n  x-=curr\n  curr = (x+1)//2\n  p+=1\n return (summation_n-ans-int(log2(i))-1)\nfor _ in range(int(input())):\n l,r = map(int,input().split())\n print(grx(r)-grx(l-1))", "# cook your dish here\nimport math\ndef howmany(n):\n total=n*(n+1)//2 \n a=1 \n while(a<=n):\n  total=total-a*((n-a)//(2*a)+1)\n  total=total-1 \n  a=a*2 \n return total \nt=int(input())\nfor you in range(t):\n l=input().split()\n x=int(l[0])\n y=int(l[1])\n print(howmany(y)-howmany(x-1))\n \n", "import math\ndef count(N):\n if(N<1):\n  return 0\n total=N*(N+1)//2\n a=1\n d=2\n while(N>=a):\n  n=math.floor((N-a)/d)+1\n  total-=(n*a+1)\n  a*=2\n  d*=2\n return total\n  \n \n\nT=int(input())\nfor _ in range(T):\n L,R=list(map(int,input().split()))\n print(count(R)-count(L-1))\n", "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Dec 22 22:04:23 2019\n\n@author: user\n\"\"\"\nimport math\ndef ceil(n):\n if(int(n)==n):\n  return int(n)\n else:\n  return int(n)+1\ndef compute(n):\n if(n==0):\n  return 0\n temp=int(math.log(n,2))+1\n ans=((n)*(n+1))//2\n ans-=temp \n rr=1 \n while(n!=0):\n  ans-=ceil(n/2)*rr\n  n=n//2\n  rr=rr*2\n return ans\n \nt=int(input())\nfor i in range(t):\n l,r=list(map(int,input().split()))\n ans=compute(r)-compute(l-1)\n print(ans)\n", "import math\ndef Fun(a):\n if(a==0):\n  return 0\n sum_n = (a*(a+1))//2\n ini = a\n p=0\n anss = 0\n while(a>=1):\n  c = (a+1)//2\n  anss += c*pow(2,p)\n  a= a-c\n  p+=1\n dd = int(math.log2(ini))\n return (sum_n-anss-dd-1)\n \nt = int(input())\nwhile(t>0):\n arr = list(map(int,input().split()))\n l = arr[0]\n r = arr[1]\n ans = Fun(r) - Fun(l-1)\n print(ans)\n t=t-1", "# cook your dish here\nimport math\ndef GLR(x):\n summation_N = (x*(x+1))//2\n initial = x\n power = 0\n sum_A = 0\n while x>=1:\n  count = (x+1)//2\n  sum_A += count * 2**power\n  x = x - count\n  power += 1\n sum_B = summation_N - sum_A\n ans = sum_B - (int(math.log(initial,2))+1)\n return ans\n\nfor _ in range(int(input())):\n l,r = map(int,input().split())\n if l==1:\n  print(GLR(r))\n else:\n  print(GLR(r) - GLR(l-1))", "from math import *\ndef find(n):\n if n==0:\n  return 0\n if n==1:\n  return -1\n if n==2:\n  return -2\n a=1\n ans=0\n while a<=n:\n  ans+=(floor(n/a)-floor(n/(2*a)))*a\n  # print((floor(n/a)-floor(n/(2*a)))*a)\n  a*=2\n k=int(log(n,2))\n return n*(n+1)//2-int(ans)-k-1\n#print(find(17))\n\nt=int(input())\nfor _ in range(t):\n l,r=list(map(int,input().split()))\n print(find(r)-find(l-1))\n", "import math\ndef GLR(x):\n summation_N = (x * (x + 1)) // 2\n initial = x\n power = 0\n sum_A = 0\n while x >= 1:\n  count = (x + 1) // 2\n  sum_A += count * 2 ** power\n  x -= count\n  power += 1\n sum_B = summation_N - sum_A\n ans = sum_B - ( int(math.log(initial, 2)) + 1)\n return ans\n\nfor _ in range(int(input())):\n l, r = list(map(int, input().split()))\n if l == 1:\n  print(GLR(r))\n else: \n  print(GLR(r) - GLR(l - 1))\n", "import math\nt=int(input())\nfor _ in range(t):\n a,b=list(map(int,input().split()))\n if a==1:\n  ans=-1\n else:\n  ans=0\n k=((b-a+1)*(b+a))//2\n ans+=k\n if a%2:\n  ans-=math.ceil((b-a+1)/2)\n else:\n  if b%2:\n   ans-=math.ceil((b-a)/2)\n  else:\n   ans-=(b-a)//2\n i=2**30\n c=0\n while i>=2:\n  x=b//i-(a-1)//i\n  d=x-c\n  c=x\n  ans-=d*i\n  if i>=a and i<=b:\n   ans-=1\n  i=i//2\n print(ans)\n  \n  \n  \n  \n  \n  \n  \n", "import math\ndef xpn(n):\n sum_n = (n*(n+1))//2\n temp = n \n sum_a = 0\n p = 0\n while n>=1:\n  c = (n+1)//2\n  sum_a += c * 2**p\n  n-=c\n  p+=1 \n sum_b = sum_n - sum_a\n b = sum_b - (int(math.log(temp,2))+1)\n return b \nt = int(input())\nfor _ in range(t):\n l,r = map(int,input().split())\n if l==1:\n  m = xpn(r)\n else:\n  m = xpn(r) - xpn(l-1)\n print(m) ", "import numpy as np\nfrom numba import njit \n\n@njit\ndef solve(a):\n b = 1\n for i in range(31):\n  if a < b:\n   length = i\n   b >>= 1\n   break\n  b <<= 1\n res = a * (a + 1) // 2\n cumusum = 0\n for _ in range(length):\n  n = a // b - cumusum\n  res -= n * b + 1\n  cumusum += n\n  b >>= 1\n return res\n\ndef main():\n T = int(input())\n for _ in range(T):\n  l, r = list(map(int, input().split()))\n  print(solve(r) - solve(l - 1))\n\ndef __starting_point():\n main()\n\n__starting_point()", "def solve(a):\n b = 1\n for i in range(31):\n  if a < b:\n   length = i\n   b >>= 1\n   break\n  b <<= 1\n res = a * (a + 1) // 2\n cumusum = 0\n for _ in range(length):\n  n = a // b - cumusum\n  res -= n * b + 1\n  cumusum += n\n  b >>= 1\n return res\n\ndef main():\n T = int(input())\n for _ in range(T):\n  l, r = list(map(int, input().split()))\n  print(solve(r) - solve(l - 1))\n\ndef __starting_point():\n main()\n\n__starting_point()", "# cook your dish here\nimport math\ndef GLR(x):\n if x == 0:\n  return 0\n y = x\n p = 0\n sum_a = 0\n \n while x>=1:\n  c = (x+1)//2\n  sum_a += c*2**p\n  p += 1\n  x = x - c\n  \n sum_b = (y*(y+1))//2 - sum_a\n ans = sum_b - (int(math.log2(y))+1)\n return ans\n\nfor t in range(int(input())):\n l,r = map(int,input().split(' '))\n ans = GLR(r)-GLR(l-1)\n print(ans)"]