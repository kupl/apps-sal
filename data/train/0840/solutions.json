["def func(num):\r\n    for i in range(num):\r\n        if i < num//2 + 1:\r\n            print(' '*i, end='')\r\n            print('*')\r\n        else:\r\n            print(' '*(num-i-1), end='')\r\n            print('*')\r\n\r\n\r\n\r\nfor _ in range(int(input())):\r\n    num = int(input())\r\n    func(num)\r\n", "# cook your dish here\nT=int(input())\n\nfor _ in range(T):\n    \n    K=int(input())\n    V=(K+1)//2\n\n    for i in range(1,V+1):\n        line=''\n        for j in range(1,i+1):\n            if j==i:\n                line=line+'*'\n            else:\n                line=line+' '\n        print(line)\n\n    for i in range(V-1,0,-1):\n        line=''\n        for j in range(1,i+1):\n            if j==i:\n                line=line+'*'\n\n            else:\n                line=line+' '\n\n        print(line)", "t=int(input())\nwhile(t):\n    n=int(input())\n    p=int(n/2)\n    p=p+1\n    for i in range(0,p):\n        for j in range(0,i):\n            if(j>=0):\n                print(end=\" \")\n        print(\"*\")\n    p=p-2\n    for i in range(p,0,-1):\n        for j in range(0,i):\n            print(end=\" \")\n        print(\"*\")\n    \n    if(n>1):\n        print(\"*\")\n    t=t-1\n", "for _ in range(int(input())):\n    n=int(input())\n    x=0\n    for _ in range(1,n+1):\n        if _<=(n+1)//2:\n           print(' '*x,end=\"\")\n           print('*')\n           x+=1\n        else:\n            if _==((n+1)//2)+1:\n                x=x-2\n            print(' '*x,end=\"\")\n            print('*')\n            x-=1\n            \n       \n       ", "# cook your dish here\nfor _ in range(int(input())):\n    n = int(input())\n    count = 0\n    for i in range(n):\n        for j in range(count):\n            print(\" \",end=\"\")\n        print(\"*\")\n        if i<n//2:\n            count += 1\n        else:\n            count -= 1", "# cook your dish here\nfor i in range(int(input())):\n    n=int(input())\n    a=(n//2)+1\n    l=a-2\n    for j  in range(1,a+1):\n        space=j-1\n        print(' '*space,end='')\n        print('*')\n    for j  in range(a+1,n+1):\n        space=l\n        print(' '*space,end='')\n        print('*')\n        l-=1\n ", "# cook your dish here\nfor _ in range(int(input())):\n    n = int(input())\n    for i in range(n//2 +1):\n        for j in range(i):\n            print(' ',end = '')\n        print('*')\n    for i in range(n//2 -1,0,-1):\n        for j in range(i):\n            print(' ',end = '')\n        print('*')\n    if(n>1):\n        print('*')", "for _ in range(int(input())):\r\n    n = int(input())\r\n    print('*')\r\n    for i in range(1, n // 2):\r\n        print(' ' * (i) + '*')\r\n    for i in range(n // 2, 0, -1):\r\n        print(' ' * (i) + '*')\r\n    if n > 1:\r\n        print('*')\r\n", "# cook your dish here\n# cook your dish here\ndef solve():\n    n = int(input())\n    #n,m = input().split()\n    #n = int(n)\n    #m = int(m)\n    #s = input()\n    #a = list(map(int, input().split()))\n    k=n//2\n    for i in range(n):\n        j=0\n        if i<=k : z=i\n        else: z=n-i-1\n        while j!=z :\n            print(\" \",end=\"\")\n            j+=1\n        print(\"*\")\n        \n            \n    \n    \ndef __starting_point():\n    T = int(input())\n    for i in range(T):\n        #a = solve()\n        #n = len(a)\n        #for i in range(n):\n         #   if i==n-1 : print(a[i])\n          #  else: print(a[i],end=\" \")\n        (solve())\n__starting_point()", "# cook your dish here\nfor _ in range(int(input())):\n    n=int(input())\n    mid=n//2\n    for i in range(n):\n        if(i>mid):\n            break\n        print(\" \"*i+\"*\")\n        \n    for i in range(mid-1,-1,-1):\n        print(\" \"*i+\"*\")", "def solve(n):\r\n    if n == 1:\r\n        print('*')\r\n        return\r\n    s = 0\r\n    ms = n//2\r\n    o = 1\r\n    for i in range(n):\r\n        if s==ms:\r\n            o = -1\r\n        x = '*'\r\n        x = x.rjust(1+s)\r\n        s+=o\r\n        print(x)\r\n\r\ndef main():\r\n    t = int(input())\r\n    for i in range(t):\r\n        n = int(input())\r\n        solve(n)\r\nmain()\r\n\r\n", "# cook your dish here\n\nfor _ in range(int(input())):\n    n=int(input())\n    for i in  range(n):\n        if i<(n//2):\n            print(' '*i,end='')\n        else:\n            print(' '*(n-i-1),end=\"\")\n\n        print(\"*\")", "# cook your dish here\ndef f(n):\n     if n==1:\n          print('*')\n          return\n     if n==2:\n          print('*')\n          print(\"*\")\n          return\n     k=n//2\n     j=2 \n     print('*')\n     while j<=k:\n          print(j*\" \"+\"*\")\n          j+=1\n     while j>1:\n          print(j*\" \"+'*')\n          j-=1\n     print(\"*\")\n     return\n\n\n\n\nt=int(input())\nfor i in range(t):\n     n=int(input())\n     f(n)\n", "def f(n):\n    # odd number is 2k + 1\n    k = (n+1) // 2\n    line = lambda i: print(\" \"*(i-1) + \"*\")\n    \n    for i in range(1, k+1):\n        line(i)\n    i = k-1\n    while i>0:\n        line(i)\n        i -= 1\n    \nt = int(input())\nquestions = list()\nfor _ in range(t):\n    n = int(input())\n    questions.append(n)\n\nfor question in questions:\n    f(question)", "import sys\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nfor _ in range(int(input())):\n    n = int(input())\n    k = 0\n    for i in range(n//2+1):\n        for i in range(k):\n            print(\" \", end =\"\")\n        print(\"*\")\n        k = k+1\n    #print(\"*\")\n    k = k-2\n    for i in range(n//2):\n        for i in range(k):\n            print(\" \",end=\"\")\n        print(\"*\")", "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n\r\n    k = n//2 + 1\r\n    \r\n    ans = [[\" \" for i in range(k) ] for j in range(n)]\r\n    \r\n    for i in range(k):\r\n        ans[i][i] = \"*\"\r\n\r\n    c = k-2\r\n\r\n    for i in range(k,n):\r\n\r\n        ans[i][c] = '*'\r\n        c-=1\r\n\r\n    for i in range(n):\r\n        for j in range(k):\r\n            print(ans[i][j],end=\" \")\r\n\r\n        print()\r\n", "# cook your dish here\nfor _ in range(int(input())):\n    n=int(input())\n    for i in range((n+1)//2):\n        for j in range(i):\n            print(end=\" \") \n        print(\"*\\r\")\n            \n    for i in range((n//2)-1,-1,-1):\n        for j in range(i):\n            print(end=\" \") \n        print(\"*\\r\")\n\n\n\n    \n         ", "# cook your dish here\nt = int(input())\nwhile(t):\n    n = int(input())\n    for i in range (1,n+1):\n        if(i==1 or i==n):\n            print(\"*\")\n            continue\n        print(\" \"*min(i-1, n-i) + \"*\")\n    t -= 1\n        \n        \n", "# cook your dish here\nfor _ in range(int(input())):\n    n = int(input())\n    space = 0\n    for i in range(n):\n        print(i * \" \", end=\"\")\n        print(\"*\")\n", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    for i in range(k):\n        for j in range(int(k/2)+1):\n            if i <= j:\n                if i==j:\n                    print('*',end='')\n                elif i<j:\n                    print(' ',end='')\n            else:\n                if i+j==k-1:\n                    print('*',end='')\n                elif i>j:\n                    print(' ',end='')\n        print()\n", "for _ in range(int(input())):\r\n    n=int(input())\r\n    r=(n+1)//2\r\n    dr=[]\r\n    for i in range(r):\r\n        t=\" \"*i +\"*\"\r\n        dr.append(t)\r\n\r\n    for i in range(r):\r\n        print(dr[i])\r\n    for i in range(r-2,-1,-1):\r\n        print(dr[i])", "# cook your dish here\nt = int(input())\nfor _ in range(t):\n    k =int(input())\n    i = 0\n    l = k-1\n    for j in range(k):\n        print((\" \"*min(i,l))+\"*\")\n        i += 1\n        l -= 1\n", "import sys\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\ninp = lambda: list(map(int,sys.stdin.readline().rstrip(\"\\r\\n\").split()))\r\n#______________________________________________________________________________________________________\r\n# from math import *\r\n# from bisect import *\r\n# from heapq import *\r\n# from collections import defaultdict as dd\r\n# from collections import OrderedDict as odict\r\n# from collections import Counter as cc\r\n# from collections import deque\r\n# sys.setrecursionlimit(2*(10**5)+100) this is must for dfs\r\n# mod = 10**9+7; md = 998244353\r\n# ______________________________________________________________________________________________________\r\n# segment tree for range minimum query\r\n# sys.setrecursionlimit(10**5)\r\n# n = int(input())\r\n# a = list(map(int,input().split()))\r\n# st = [float('inf') for i in range(4*len(a))]\r\n# def build(a,ind,start,end):\r\n#   if start == end:\r\n#       st[ind] = a[start]\r\n#   else:\r\n#       mid = (start+end)//2\r\n#       build(a,2*ind+1,start,mid)\r\n#       build(a,2*ind+2,mid+1,end)\r\n#       st[ind] = min(st[2*ind+1],st[2*ind+2])\r\n# build(a,0,0,n-1)\r\n# def query(ind,l,r,start,end):\r\n#   if start>r or end<l:\r\n#       return float('inf')\r\n#   if l<=start<=end<=r:\r\n#       return st[ind]\r\n#   mid = (start+end)//2\r\n#   return min(query(2*ind+1,l,r,start,mid),query(2*ind+2,l,r,mid+1,end))\r\n# ______________________________________________________________________________________________________\r\n# Checking prime in O(root(N))\r\n# def isprime(n):\r\n#     if (n % 2 == 0 and n > 2) or n == 1: return 0\r\n#     else:\r\n#         s = int(n**(0.5)) + 1\r\n#         for i in range(3, s, 2):\r\n#             if n % i == 0:\r\n#                 return 0\r\n#         return 1\r\n# def lcm(a,b):\r\n#   return (a*b)//gcd(a,b)\r\n# ______________________________________________________________________________________________________\r\n# nCr under mod\r\n# def C(n,r,mod):\r\n#   if r>n:\r\n#       return 0\r\n#   num = den = 1\r\n#   for i in range(r):\r\n#       num = (num*(n-i))%mod\r\n#       den = (den*(i+1))%mod\r\n#   return (num*pow(den,mod-2,mod))%mod\r\n# M = 10**5 +10\r\n# ______________________________________________________________________________________________________\r\n# For smallest prime factor of a number\r\n# M = 1000010\r\n# pfc = [i for i in range(M)]\r\n# def pfcs(M):\r\n#   for i in range(2,M):\r\n#       if pfc[i]==i:\r\n#           for j in range(i+i,M,i):\r\n#               if pfc[j]==j:\r\n#                   pfc[j] = i\r\n#   return\r\n# pfcs(M)\r\n# ______________________________________________________________________________________________________\r\ntc = 1\r\ntc, = inp()\r\nfor _ in range(tc):\r\n    n, = inp()\r\n    for i in range(n//2):\r\n        print(' '*i+'*')\r\n        print()\r\n    print(' '*(n//2)+'*')\r\n    for i in range(n//2-1,-1,-1):\r\n        print()\r\n        print(' '*i+'*')\r\n", "from sys import stdin, stdout\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nfrom collections import defaultdict as dd, deque\nfrom heapq import merge, heapify, heappop, heappush, nsmallest\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nmod = pow(10, 9) + 7\nmod2 = 998244353\ndef inp(): return stdin.readline().strip()\ndef out(var, end=\"\\n\"): stdout.write(str(var)+\"\\n\")\ndef outa(*var, end=\"\\n\"): stdout.write(' '.join(map(str, var)) + end)\ndef lmp(): return list(mp())\ndef mp(): return map(int, inp().split())\ndef smp(): return map(str, inp().split())\ndef l1d(n, val=0): return [val for i in range(n)]\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\ndef remadd(x, y): return 1 if x%y else 0\ndef ceil(a,b): return (a+b-1)//b\n\ndef isprime(x):\n    if x<=1: return False\n    if x in (2, 3): return True\n    if x%2 == 0: return False\n    for i in range(3, int(sqrt(x))+1, 2):\n        if x%i == 0: return False\n    return True\n    \nfor _ in range(int(inp())):\n    n = int(inp())\n    for i in range(n):\n        for j in range(n):\n            if (j>=i and i==j):\n                print(\"*\",end=\"\")\n            else:\n                print(\" \",end=\"\")\n        print()"]