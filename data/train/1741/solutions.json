["import numpy as np\ndef five_by_2n(n):\n    x=np.array([[1,1,1,1,1,1,1,1],[1,2,1,1,1,2,2,1],[1,1,2,1,1,1,2,1],[1,1,1,2,1,1,2,1],[1,1,1,1,2,1,2,2],[1,2,1,1,2,1,6,1],[1,2,1,1,2,1,6,1],[1,2,1,1,2,1,6,1]])\n    y=np.array([1,1,1,1,1,1,1,1])\n    z=y\n    for i in range(n-1):\n        z=np.mod(x@z,12345787*y)\n    return z.T@y%12345787", "mod=12345787\nmemo=[0,8,95,1183,14824]\nfor i in range(10**5): memo.append((15*memo[-1]-32*memo[-2]+15*memo[-3]-memo[-4])%mod);\ndef five_by_2n(n): return memo[n]", "a=[3];b=[1];c=[2];d=[1];e=[2];f=[3];g=[1];h=[1];i=[1];j=[8]\n\nfor _ in range(10000):\n    next_a = 3*a[-1] + b[-1] + e[-1] + f[-1] + h[-1] + i[-1] + 3*j[-1]\n    next_b = a[-1] + 2*b[-1] + e[-1] + i[-1] + j[-1]\n    next_c = 2*c[-1] + d[-1] + f[-1] + g[-1] + 2*j[-1]\n    next_d = c[-1] + 2*d[-1] + f[-1] + g[-1] + j[-1]\n    next_e = a[-1] + b[-1] + 2*e[-1] + i[-1] + 2*j[-1]\n    next_f = a[-1] + c[-1] + d[-1] + 3*f[-1] + g[-1] + h[-1] + 3*j[-1]\n    next_g = c[-1] + d[-1] + f[-1] + g[-1] + j[-1]\n    next_h = a[-1] + f[-1] + h[-1] + j[-1]\n    next_i = a[-1] + b[-1] + e[-1] + i[-1] + j[-1]\n    next_j = 3*a[-1] + b[-1] + 2*c[-1] + d[-1] + 2*e[-1] + 3*f[-1] + g[-1] + h[-1] + i[-1] + 8*j[-1]\n    a.append(next_a%12345787)\n    b.append(next_b%12345787)\n    c.append(next_c%12345787)\n    d.append(next_d%12345787)\n    e.append(next_e%12345787)\n    f.append(next_f%12345787)\n    g.append(next_g%12345787)\n    h.append(next_h%12345787)\n    i.append(next_i%12345787)\n    j.append(next_j%12345787)\n    \ndef five_by_2n(n):\n    return j[n-1]", "MOD = 12345787\nMSK = 1 << 5\nANS = [1]\nFLAG = False\n\ndef trans(T, x):\n    y = [0 for i in range(MSK)]\n    for i in range(MSK):\n        for j in T[i]:\n            y[j] += x[i]\n    for i in range(MSK):\n        y[i] %= MOD\n    return y\n\ndef prework(MAXN=10010):\n    nonlocal FLAG\n    if FLAG:\n        return\n    FLAG = True\n    T = [[] for i in range(MSK)]\n    for i in range(MSK):\n        for j in range(MSK):\n            if (i & j) == 0:\n                rm = (MSK - 1) ^ (i | j)\n                p = [k for k in range(5) if ((rm >> k) & 1) == 1]\n                flag = (len(p) % 2 == 0)\n                if flag:\n                    for k in range(len(p) // 2):\n                        flag &= (p[2 * k] + 1 == p[2 * k + 1])\n                if flag:\n                    T[i].append(j)\n    x = [0 for i in range(MSK)]\n    x[0] = 1\n    nonlocal ANS\n    for i in range(2 * MAXN):\n        x = trans(T, x)\n        if i % 2 == 1:\n            ANS.append(x[0])\n\ndef five_by_2n(n):\n    prework()\n    nonlocal ANS\n    return ANS[n]", "# https://www.codeleading.com/article/49772209610/\narr=[0, 8, 95, 1183, 14824]\n\nfor i in range(0, 10**5): \n    arr.append((15 * arr[-1] - 32 * arr[-2] + 15 * arr[-3] - arr[-4]) % 12345787)\n\ndef five_by_2n(n): \n    return arr[n]", "def five_by_2n(n):\n    a1, a2, a3, a4 = 1, 8, 95, 1183\n    \n    for i in range(n):     \n        nxt = (15 * a4 - 32 * a3 + 15 * a2 - a1) % 12345787\n        a1, a2, a3, a4 = a2, a3, a4, nxt\n    \n    return a1", "def five_by_2n(n):\n    a = [1, 8, 95, 1183, 14824]\n    \n    while len(a) <= n:\n        nxt = (15 * a[-1] - 32 * a[-2] + 15 * a[-3] - a[-4])  % 12345787\n        a.append(nxt)\n    \n    return a[n]", "def five_by_2n(n):\n    def b(n):\n        dp = [0] * n\n        dp[:8] = [0, 8, 0, 95, 0, 1183, 0, 14824]\n        for i in range(8, n):\n            dp[i] = 15 * dp[i - 2] - 32 * dp[i - 4] + 15 * dp[i - 6] - dp[i - 8]\n        return dp[-1] % 12345787\n    if n<=8:\n        return {1:8, 2:95, 3:1183, 4:14824, 5:185921, 6:2332097, 7:4561586,8:8916464}[n]\n    else:\n        return b(2*n)", "def five_by_2n(n):\n    b = [8, 95, 1183, 14824]\n    if n <= 4:\n        return b[n - 1]\n    for i in range(4,n):\n        b.append((15*b[i-1] - 32*b[i-2] + 15*b[i-3] - b[i-4])%12345787)\n    return b[-1]\n", "N,m,five_by_2n=12345787,{0:1,1:8,2:95,3:1183},lambda n:m[n]            # set\nfor n in range(4,10001):m[n]=(15*m[n-1]-32*m[n-2]+15*m[n-3]-m[n-4])%N  # build"]