["# cook your dish here\nt=int(input())\nfor i in range(t):\n (n,k,e,m)=tuple(map(int,input().split()))\n scores=[]\n for j in range(n-1):\n  scores.append(sum(list(map(int,input().split()))))\n scores.sort(reverse=True);\n bsc=scores[k-1];\n msc=sum(list(map(int,input().split())))\n mini=bsc-msc+1\n if(mini<0):\n  print(0)\n elif(mini>m):\n  print(\"Impossible\")\n else:\n  print(mini)\n", "t=int(input())\nfor i in range(t):\n n,k,e,m=map(int,input().split())\n p=[]\n for i in range(n-1):\n  p.append(sum(map(int,input().split())))\n q=sum(map(int,input().split()))\n p.sort()\n d=p[n-k-1]-q\n if(d+1>m):\n  print('Impossible')\n elif(d<=-1):\n  print(0)\n else:\n  print(d+1)", "t=int(input())\nfor i in range(t):\n n,k,e,m=map(int,input().split())\n p=[]\n for i in range(n-1):\n  p.append(sum(map(int,input().split())))\n q=sum(map(int,input().split()))\n p.sort()\n d=p[n-k-1]-q\n if(d+1>m):\n  print('Impossible')\n elif(d<=-1):\n  print(0)\n else:\n  print(d+1)", "\nfor i in range(int(input())):\n n=list(map(int,input().split()))\n a = []\n for j in range(n[0]-1):\n  a.append(sum(map(int,input().split())))\n\n re = sum(map(int, input().split()))\n\n a.sort(reverse=True)\n s = a[n[1] - 1]\n b = s - re + 1\n if b<0:\n  print(\"0\")\n elif b <=n[3]:\n  print(b)\n else:\n  print(\"Impossible\")", "\nfor i in range(int(input())):\n n=list(map(int,input().split()))\n a = []\n for j in range(n[0]-1):\n  a.append(sum(map(int,input().split())))\n\n re = sum(map(int, input().split()))\n\n a.sort(reverse=True)\n s = a[n[1] - 1]\n b = s - re + 1\n if b<0:\n  print(\"0\")\n elif b > n[3]:\n  print(\"Impossible\")\n else:\n  print(b)", "# cook your dish here\nt = int(input())\nwhile(t>0):\n n,k,e,m = map(int,input().split())\n scores = []\n for i in range(n-1):\n  sc = [int(x) for x in input().split()]\n  scores.append(sum(sc))\n ram = [int(x) for x in input().split()]\n r = sum(ram)\n scores.sort(reverse = True)\n v = scores[k - 1]\n reqd = v - r + 1\n if(reqd < 0):\n  print(\"0\")\n elif(reqd > m):\n  print(\"Impossible\")\n else:\n  print(reqd)\n t -= 1", "# cook your dish here\nt = int(input())\nwhile(t>0):\n n,k,e,m = map(int,input().split())\n scores = []\n for i in range(n-1):\n  sc = [int(x) for x in input().split()]\n  scores.append(sum(sc))\n ram = [int(x) for x in input().split()]\n r = sum(ram)\n scores.sort(reverse = True)\n v = scores[k - 1]\n reqd = v - r + 1\n if(reqd < 0):\n  print(\"0\")\n elif(reqd > m):\n  print(\"Impossible\")\n else:\n  print(reqd)\n t -= 1", "# cook your dish here\nt = int(input())\nwhile(t>0):\n n,k,e,m = map(int,input().split())\n scores = []\n for i in range(n-1):\n  sc = [int(x) for x in input().split()]\n  scores.append(sum(sc))\n ram = [int(x) for x in input().split()]\n r = sum(ram)\n scores.sort(reverse = True)\n v = scores[k - 1]\n reqd = v - r + 1\n if(reqd < 0):\n  print(\"0\")\n elif(reqd > m):\n  print(\"Impossible\")\n else:\n  print(reqd)\n t -= 1", "for i in range(int(input())):\n n, k, e, m = list(map(int,input().split()))\n stu = n-k-1\n sum_list = []\n for i in range(n-1):\n  l = list(map(int, input().split()))\n  sum_list.append(sum(l))\n score = list(map(int,input().split()))\n sum_ser = sum(score)\n sum_list.sort()\n x = max(sum_list[stu] + 1 - sum_ser,0)\n if x<m:\n  print(x)\n else:\n  print(\"Impossible\")\n", "# cook your dish here\nfor _ in range(int(input())):\n n,k,e,m=map(int,input().strip().split())\n res_arr=[]\n \n for i in range(n-1):\n  res_arr.append(sum(map(int,input().strip().split())))\n  \n res_arr=sorted(res_arr,reverse=True)[:k]\n serg_mrks=sum(map(int,input().strip().split()))\n \n least_max=res_arr[k-1]\n if(least_max<m*e):\n  if(least_max>=serg_mrks):\n   finl_mrks=least_max-serg_mrks+1\n   print(finl_mrks if finl_mrks<=m else 'Impossible')\n  else:\n   print(0)\n else:\n  print('Impossible')", "# cook your dish here\n\nfor _ in range(int(input())):\n n,k,e,m=map(int,input().strip().split())\n res_arr=[]\n \n for i in range(n-1):\n  res_arr.append(sum(map(int,input().strip().split())))\n  \n res_arr=sorted(res_arr,reverse=True)[:k]\n serg_mrks=sum(map(int,input().strip().split()))\n \n least_max=res_arr[k-1]\n if(least_max<m*e):\n  if(least_max>=serg_mrks):\n   finl_mrks=least_max-serg_mrks+1\n   print(finl_mrks if finl_mrks<=m else 'Impossible')\n  else:\n   print(0)\n else:\n  print('Impossible')", "for t in range(int(input())):\n n, k, e, m = map(int,input().split())\n stud = n-k-1\n sum_list = []\n for i in range(n-1):\n  l = list(map(int, input().split()))\n  sum_list.append(sum(l))\n score = list(map(int,input().split()))\n sum_sergey = sum(score)\n sum_list.sort()\n x = max(sum_list[stud] + 1 - sum_sergey,0)\n if x<m:\n  print(x)\n else:\n  print(\"Impossible\")", "for t in range(int(input())):\n n, k, e, m = map(int,input().split())\n stud = n-k-1\n sum_list = []\n for i in range(n-1):\n  l = list(map(int, input().split()))\n  sum_list.append(sum(l))\n score = list(map(int,input().split()))\n sum_sergey = sum(score)\n sum_list.sort()\n x = sum_list[stud] + 1 - sum_sergey\n if x<m and x>0:\n  print(x)\n elif x<=0:\n  print(0)\n else:\n  print(\"Impossible\")", "# cook your dish here\nfor test in range(0,int(input())):\n N,K,E,M = map(int,input().split())\n scores = []\n for i in range(0,N-1):\n  scores.append(sum(list(map(int,input().split()))))\n sergey_score = sum(list(map(int,input().split())))\n scores.sort()\n #using max because maybe Sergey's two exam scores are sufficient to qualify\n req_score = max(scores[N-K-1]-sergey_score+1,0)\n \n if req_score<=M:\n  print(req_score) \n else:\n  print(\"Impossible\")", "# cook your dish here\nfor test in range(0,int(input())):\n N,K,E,M = map(int,input().split())\n scores = []\n for i in range(0,N-1):\n  scores.append(sum(list(map(int,input().split()))))\n sergey_score = sum(list(map(int,input().split())))\n scores.sort()\n #using max because maybe Sergey's two exam scores are sufficient to qualify\n req_score = max(scores[N-K-1]-sergey_score+1,0)\n \n if req_score<=M:\n  print(req_score) \n else:\n  print(\"Impossible\")", "# cook your dish here\ntc = int(input())\nwhile tc>0 :\n N,K,E,M = map(int,input().split())\n sumi = []\n for i in range(N-1):\n  a = list(map(int,input().split()))\n  sumi.append(sum(a))\n \n my_score = list(map(int,input().split()))\n my_sum = sum(my_score)\n \n sumi = sorted(sumi)\n answer = max(sumi[N-K-1]+1-my_sum,0)\n if answer > M:\n  answer = \"Impossible\"\n print(answer)\n tc = tc - 1", "for i in range(int(input())):\n n,k,e,m=map(int,input().split())\n s = [sum(list(map(int, input().split()))) for j in range(n-1)]\n s.sort(reverse=True)\n ob = sum(list(map(int, input().split())))\n if(s[k-1]-ob+1>m):\n  print(\"Impossible\")\n else:\n  print(max(0,s[k-1]-ob+1))", "# cook your dish here\nfrom sys import stdin, stdout\nreadline, writeline = stdin.readline, stdout.write\n\n\nfor _ in range(int(readline())):\n n, k, e, m = list(map(int, readline().strip().split()))\n scores = []\n for _ in range(n-1):\n  scores.append(sum(list(map(int, readline().strip().split()))))\n scores.sort()\n my = sum(list(map(int, readline().strip().split())))\n ans = scores[-k]+1 - my\n print(max(0, ans) if ans <= m else \"Impossible\")\n", "# cook your dish here\nfor _ in range(int(input())):\n n,k,e,m = map(int,input().split())\n s = []\n for i in range(n-1):\n  a = [int(x) for x in input().split()]\n  s.append(sum(a))\n s.sort(reverse=True)\n a = [int(x) for x in input().split()]\n c = s[k-1]+1-sum(a)\n if(c > m):\n  print(\"Impossible\")\n else:\n  if(c > 0):\n   print(c)\n  else:\n   print(0)", "t = int(input())\n\nfor _ in range(t):\n n, k, e, m = [int(x) for x in input().split()]\n \n s = []\n \n for i in range(n-1):\n  a = [int(x) for x in input().split()]\n  \n  s.append(sum(a))\n \n s.sort()\n s.reverse()\n \n a = [int(x) for x in input().split()]\n ap = sum(a)\n \n ans = s[k-1]+1-sum(a)\n \n if(ans > m):\n  print(\"Impossible\")\n else:\n  if(ans > 0):\n   print(ans)\n  else:\n   print(0)", "# cook your dish here\nfor _ in range(int(input())):\n n, k, e, m = list(map(int, input().split()))\n all_marks = []\n for i in range(n-1):\n  marks = sum(list(map(int, input().split())))\n  all_marks.append(marks)\n  \n ser = list(map(int, input().split()))\n\n all_marks = sorted(all_marks)\n \n q = all_marks[n-k-1:]\n \n ser_req = min(q) - sum(ser) + 1\n \n if ser_req > m:\n  print(\"Impossible\")\n else:\n  if ser_req>0:\n   print(ser_req)\n  else:\n   print(0)"]