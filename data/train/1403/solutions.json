["# cook your dish here\n# cook your dish here\ndef numDec(s):\n  if not s:\n   return 0\n\n  dp = [0 for _ in range(len(s) + 1)]\n\n  dp[0] = 1\n  dp[1] = 0 if s[0] == '0' else 1\n\n\n  for i in range(2, len(dp)):\n\n   if s[i-1] != '0':\n    dp[i] += dp[i-1]\n\n   two_digit = int(s[i-2 : i])\n   if two_digit >= 10 and two_digit <= 26:\n    dp[i] += dp[i-2]\n  return dp[len(s)]\n\nt = int(input())\n\nwhile(t):\n t-=1\n s = input()\n print(numDec(s)%1000000007)", "t = int(input())\nfor i in range(t):\n def numDecodings(A):\n  if A[0]=='0':\n   return 0\n  d=[0]*(len(A)+1)\n  d[0]=1\n  d[1]=1\n  for i in range(1,len(A)):\n   g=int (A[i-1]+A[i])\n   if A[i]=='0' and(g!=10 and g!=20) :\n    return 0\n   elif g==10 or g==20 :\n    d[i+1]=d[i-1]\n   elif g>10 and g<=26 :\n    d[i+1]=d[i]+d[i-1]\n   else : \n    d[i+1]=d[i]\n  \n \n  return d[len(A)]%1000000007\n digits = input()\n print(numDecodings(digits))", "# cook your dish here\ndef numDec(s):\n  if not s:\n   return 0\n\n  dp = [0 for _ in range(len(s) + 1)]\n\n  dp[0] = 1\n  dp[1] = 0 if s[0] == '0' else 1\n\n\n  for i in range(2, len(dp)):\n\n   if s[i-1] != '0':\n    dp[i] += dp[i-1]\n\n   two_digit = int(s[i-2 : i])\n   if two_digit >= 10 and two_digit <= 26:\n    dp[i] += dp[i-2]\n  return dp[len(s)]\n\nt = int(input())\n\nwhile(t):\n t-=1\n s = input()\n print(numDec(s)%1000000007)", "for _ in range(int(input())):\n s = input()\n n = len(s)\n decode = [0]*(n+1)\n if s[0]=='0':\n  print(0)\n  continue\n \n decode[0] = 1\n decode[1] = 1\n modul = 1000000007\n for i in range(2, n+1):\n  if s[i-1]>'0': \n   decode[i] = (decode[i]%modul+decode[i-1]%modul)%modul\n   \n  if s[i-2]=='1' or (s[i-2]=='2' and s[i-1]<'7'):\n   decode[i] = (decode[i]%modul+decode[i-2]%modul)%modul\n \n print(decode[n])\n \n", "N = 10**9 + 7 \n\nt = int(input())\nfor _ in range(t):\n s = str(input())\n \n if(s[0]=='0'):\n  print(0)\n else:\n  x = len(s)\n  a = [1]*(x+1)\n  for i in range(2,x+1):\n   if(s[i-1]=='0'):\n    if(s[i-2]=='1' or s[i-2]=='2'):\n     a[i] = a[i-2]\n    else:\n     a[x] = 0\n     break\n   elif(s[i-1]=='7' or s[i-1]=='8' or s[i-1]=='9'):\n    if(s[i-2]=='1'):\n     a[i] = a[i-1] + a[i-2]\n    else:\n     a[i] = a[i-1]\n   else:\n    if(s[i-2]=='1' or s[i-2]=='2'):\n     a[i] = a[i-1] + a[i-2] \n    else:\n     a[i] = a[i-1]\n   a[i] = a[i]%N\n  \n  print(a[x])\n  \n   \n", "def numDecodings(s):\n dp = [0] * (len(s) + 2)\n dp[0] = 1\n  \n for i in range(len(s)):\n  if int(s[i]) != 0:\n   dp[i+1] += dp[i]\n   \n  if int(s[i:i+2]) >= 10 and int(s[i:i+2]) <= 26:\n   dp[i+2] += dp[i]\n  \n return dp[len(s)] # careful\nt=int(input())\nfor _ in range(t):\n st=input()\n print(numDecodings(st)%1000000007)\n", "def count_ways(s, indx, n):\n if indx == n:\n  return 1\n\n if s[indx] == '0':\n  return 0\n\n if dp[indx] != -1:\n  return dp[indx]\n\n ans = count_ways(s, indx+1, n)%1000000007\n\n if n - indx >= 2 and (int(s[indx:indx+2]) <= 26):\n  ans += count_ways(s, indx+2, n)%1000000007\n  ans %= 1000000007\n\n dp[indx] = ans\n return ans\n\nt = int(input())\n\nwhile t:\n t -= 1\n\n s = input()\n\n dp = [-1]*len(s)\n\n print(count_ways(s, 0, len(s)))", "def count_ways(s, indx, n):\n if indx == n:\n  return 1\n\n if s[indx] == '0':\n  return 0\n\n if dp[indx] != -1:\n  return dp[indx]\n\n ans = count_ways(s, indx+1, n)%1000000007\n\n if n - indx >= 2 and (int(s[indx:indx+2]) <= 26):\n  ans += count_ways(s, indx+2, n)%1000000007\n  ans %= 1000000007\n\n dp[indx] = ans\n return ans\n\nt = int(input())\n\nwhile t:\n t -= 1\n\n s = input()\n\n dp = [-1]*len(s)\n\n print(count_ways(s, 0, len(s)))", "def numDecodings(s):\n dp = [0] * (len(s) + 2)\n dp[0] = 1\n  \n for i in range(len(s)):\n  if int(s[i]) != 0:\n   dp[i+1] += dp[i]\n   \n  if int(s[i:i+2]) >= 10 and int(s[i:i+2]) <= 26:\n   dp[i+2] += dp[i]\n return dp[len(s)]\nfor _ in range(int(input())):\n s = input();\n print(numDecodings(s)%1000000007)\n", "for _ in range(int(input())):\n s = input()\n n = len(s)\n dp = [0 for _ in range(n)]\n if s[0] != '0':\n  dp[0] = 1\n for i in range(1, n):\n  x = int(s[i])\n  y = int(s[i-1:i+1])\n  if x >= 1 and x <= 9:\n   dp[i] += dp[i-1]\n  if y >= 10 and y <= 26:\n   if i - 2 >= 0:\n    dp[i] += dp[i-2]\n   else:\n    dp[i] += 1\n print(dp[-1] % 1000000007)\n", "# cook your dish here\nt = int(input())\nfor _ in range(t):\n s = input()\n dp = [0] * (len(s)+1)\n dp[0] = 1\n dp[1] = 1\n for i in range(2,len(s)+1):\n  if s[i-1] >'0':\n   dp[i] = dp[i-1]\n  if s[i-2] == '1' or (s[i-2] == '2' and s[i-1] < '7'):\n   dp[i] += dp[i-2]\n \n if s[0] == '0':\n  print(0)\n else:\n  print(dp[len(s)] % (10**9 + 7))", "import sys\nimport math\nimport bisect\nfrom sys import stdin,stdout\nfrom math import gcd,floor,sqrt,log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl,bisect_right as br\n\nsys.setrecursionlimit(100000000)\n\nii =lambda: int(input())\nsi =lambda: input()\njn =lambda x,l: x.join(map(str,l))\nsl =lambda: list(map(str,input().strip()))\nmi =lambda: list(map(int,input().split()))\nmif =lambda: list(map(float,input().split()))\nlii =lambda: list(map(int,input().split()))\n\nceil =lambda x: int(x) if(x==int(x)) else int(x)+1\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\n\nflush =lambda: stdout.flush()\nstdstr =lambda: stdin.readline()\nstdint =lambda: int(stdin.readline())\nstdpr =lambda x: stdout.write(str(x))\n\nmod=1000000007\ndef sol(s):  \n dp = [0] * (len(s) + 2)\n dp[0] = 1\n  \n for i in range(len(s)):\n  if int(s[i]) != 0:\n   dp[i+1] += dp[i]\n   \n  if int(s[i:i+2]) >= 10 and int(s[i:i+2]) <= 26:\n   dp[i+2] += dp[i]\n  \n return dp[len(s)] \n \n\n\n#main code\nfor _ in range(ii()):\n s=si()\n ans=sol(s)\n print(ans%mod)\n"]