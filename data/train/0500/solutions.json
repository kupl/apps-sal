["class Solution:\n     def calculate(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         \n         if not s:\n             return 0\n         \n         pre_op = '+'\n         stack = [0]\n         cur_num = 0\n         digits = '0123456789'\n         s += '#'\n         \n         for c in s:\n             if c == ' ':\n                 continue\n             \n             if c in digits:\n                 cur_num = cur_num * 10 + int(c)\n                 continue\n                 \n             if pre_op == '-':\n                 cur_num *= -1\n             elif pre_op == '*':\n                 cur_num *= stack.pop()\n             elif pre_op == '/':\n                 if cur_num == 0:\n                     return None\n                 \n                 pre_num = stack.pop()\n                 flag = 1 if pre_num > 0 else -1\n                 cur_num = abs(pre_num) // cur_num * flag\n                 \n             stack.append(cur_num)\n             pre_op = c\n             cur_num = 0\n             \n         return sum(stack)\n                 \n         \n         \n", "class Solution:\n     def calculate(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         \n         if not s:\n             return 0\n         \n         stack = [0]\n         pre_op = '+'\n         cur_num = 0\n         digits = '0123456789'\n         s += '#'\n         \n         for c in s:\n             if c == ' ':\n                 continue\n                 \n             if c in digits:\n                 cur_num = cur_num * 10 + int(c)\n                 continue\n             \n             if pre_op == '-':\n                 cur_num *= -1\n             elif pre_op == '*':\n                 cur_num = cur_num * stack.pop()\n             elif pre_op == '/':\n                 if cur_num == 0:\n                     return None\n                 \n                 pre_num = stack.pop()\n                 flag = 1 if pre_num > 0 else -1\n                 cur_num = abs(pre_num) // cur_num * flag\n             \n             stack.append(cur_num)\n             pre_op = c\n             cur_num = 0\n             \n         return sum(stack)\n                 \n                 \n                 \n                 \n", "class Solution:\n     def calculate(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         \n         if not s:\n             return 0\n         \n         digits = '0123456789'\n         stack = [0]\n         pre_op = '+'\n         cur_num = 0\n         s += '#'\n         \n         for c in s:\n             if c == ' ':\n                 continue\n                 \n             if c in digits:\n                 cur_num = cur_num * 10 + int(c)\n                 continue\n                 \n             if pre_op == '-':\n                 cur_num *= -1\n             elif pre_op == '*':\n                 cur_num *= stack.pop()\n             elif pre_op == '/':\n                 if cur_num == 0:\n                     return None\n                 \n                 pre_num = stack.pop()\n                 flag = 1 if pre_num > 0 else -1\n                 cur_num = abs(pre_num) // cur_num * flag\n                 \n             stack.append(cur_num)\n             pre_op = c\n             cur_num = 0\n             \n         return sum(stack)\n         \n", "class Solution:\n     def calculate(self, s):\n         if not s: return 0\n         length = len(s)\n         stack = []\n         num = 0\n         sign = '+'\n         for idx, c in enumerate(s):\n             if c.isdigit():\n                 num = num*10 + ord(c) - ord('0')\n             if c in ['+','-','*','/'] or idx == length - 1:\n                 if sign == '+':\n                     stack.append(num)\n                 elif sign == '-':\n                     stack.append(-num)\n                 elif sign == '*':\n                     stack.append(stack.pop() * num)\n                 elif sign == '/':\n                     stack.append(int(stack.pop() / num))\n                 sign = c\n                 num = 0\n         \n         return sum(stack)\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n"]