["# cook your dish here\r\ndef offset(l, flag):\r\n    x = 0\r\n    # print(l)\r\n    for i in range(1, len(l)):\r\n        temp = []\r\n        for j in range(i):\r\n            v = getbig(l[i], l[j], fs)\r\n            if v > 1:\r\n                temp.append(v)\r\n                if flag:\r\n                    x += 2**v - 2\r\n                else:\r\n                    x -= 2**v - 2\r\n        x += offset(temp, not flag)\r\n    return x\r\n    \r\ndef getbig(v1, v2, factors):\r\n    x = 1\r\n    for f in factors:\r\n        while v1%f == 0 and v2%f == 0:\r\n            v1//=f\r\n            v2//=f\r\n            x*=f\r\n    return x\r\n    \r\ndef prime_factors(n):\r\n    i = 2\r\n    factors = set()\r\n    while i * i <= n:\r\n        if n % i:\r\n            i += 1\r\n        else:\r\n            n //= i\r\n            factors.add(i)\r\n    if n > 1:\r\n        factors.add(n)\r\n    return factors\r\n    \r\nn,m = map(int, input().split())\r\nif n == 1:\r\n    print(1)\r\nelse:\r\n    fs = prime_factors(n)\r\n    fs.discard(n)\r\n    ans = 2**n-2\r\n    temp = []\r\n    for v in fs:\r\n        v = n//v\r\n        temp.append(v)\r\n        ans -= 2**v - 2\r\n        # print(ans)\r\n    ans += offset(temp, True)\r\n    # print(fs)\r\n    print(ans%m)", "from math import sqrt\n\ndef per(n):\n    if n in diz:\n        return diz[n]\n    else:\n        counter=pow(2,n,m)\n        for i in range(1,int(sqrt(n))+1):\n            if n%i==0:\n                counter-=per(i)\n                if i!=1 and i!=(n//i):\n                    counter-=per(n//i)\n                counter%=m\n        return counter\n        \nn, m = map(int, input().split())\ndiz={1:2}\nprint(per(n))\ncounter=pow(2,n,m)", "powersof2 = {}\r\nnonperiodics= {}\r\n\r\n\r\ndef pow2(x, m):\r\n    powersof2[0] = 1%m\r\n    powersof2[1] = 2%m\r\n    for i in range(2, x+1):\r\n        powersof2[i] = (powersof2[i-1]*2)%m\r\n\r\n\r\ndef nonperiodicsfill(x):\r\n    for i in range(x):\r\n        nonperiodics[i]=0\r\n\r\n\r\ndef listoffactors(x):\r\n    lista=[]\r\n    for i in range(1, 1 + x//2):\r\n        if x%i == 0 :\r\n            lista.append(i)\r\n    return lista\r\n\r\n\r\ndef sieve(x):\r\n    for i in range(2, x):\r\n        if prime[i]:\r\n            for q in range(i*2, x, i):\r\n                prime[q] = False\r\n\r\n\r\ndef nonPeriodicStrings(s,m):\r\n   # print(\"\\nNPS\"+ str(s) +\" \"+ str(m) + \"\\n\")\r\n    if s==1:\r\n        return 2%m\r\n    if s in nonperiodics:\r\n        return nonperiodics[s]\r\n    if prime[s]:\r\n        nps = (powersof2[s] - 2) % m\r\n        nonperiodics[s] = nps\r\n        return nps\r\n #   print(s)\r\n    li = listoffactors(s)\r\n   # print(li)\r\n    nps = powersof2[s]\r\n    for i in li:\r\n        nps -= nonPeriodicStrings(i, m)\r\n    #    print(nonPeriodicStrings(i,m))\r\n        nps %= m\r\n    nonperiodics[s] = nps\r\n    return nps\r\n\r\n\r\ncc = input().split(' ')\r\na= int(cc[0])\r\nm= int(cc[1])\r\n#print(a)\r\n#print(m)\r\nprime = [True for i in range(a+1)]\r\n#m = int(input())\r\npow2(a, m)\r\n#print(powersof2)\r\nsieve(a+1)\r\n#print(prime)\r\nif prime[a]:\r\n    l = powersof2[a] - 2\r\n    print(l)\r\nelse:\r\n    print(nonPeriodicStrings(a, m))\r\n\r\n\r\n\r\n", "# cook your dish here\nimport sys\n\n\ndef get_factor(n:int):\n    for i in range(2, int(n**0.5)+1):\n        if(n%i==0):\n            return i, n\n    return n,n\n\nN,M=sys.stdin.readline().strip().split(\" \")[:2]\n\nN,M=int(N),int(M)\nif(N in (0,1)): print(0)\n#elif(N==1): print(2%M)\nelse:\n    res=2**N-2\n    f_, n_=get_factor(N)\n    if(f_<N):\n        res_=[f_]\n        res-=2**(N//f_)-2\n        while(f_<n_):\n            f_, n_=get_factor(n_//f_)\n            if(f_ not in res_):\n               res_.append(f_)\n               res-=2**(N//f_)-2\n        if(n_ not in res_):\n            res-=2**(N//n_)-2\n#        if(N%(f_**2)==0):\n#            res-=2**(N//f_)-2\n#        else:\n#            res-=2**(N//f_)-2+2**f_-2\n    print(res%M)\n    \n        ", "# cook your dish here\nimport sys\n\n\ndef get_factor(n:int):\n    for i in range(2, int(n**0.5)+1):\n        if(n%i==0):\n            return i\n            \n\nN,M=sys.stdin.readline().strip().split(\" \")[:2]\n\nN,M=int(N),int(M)\nif(N in (0,1)): print(0)\n#elif(N==1): print(2%M)\nelse:\n    res=2**N-2\n    f_=get_factor(N)\n    if(f_):\n        if(N%(f_**2)==0):\n            res-=2**(N//f_)-2\n        else:\n            res-=2**(N//f_)-2+2**f_-2\n            \n    print(res%M)\n    \n        ", "# cook your dish here\nimport sys\n\ndef get_factors(n:int):\n    for i in range(2, n//2+1):\n        if(n%i==0):\n            yield i\n\nN,M=sys.stdin.readline().strip().split(\" \")[:2]\n\nN,M=int(N),int(M)\nif(N in (0,1)): print(0)\n#elif(N==1): print(2%M)\nelse:\n    res=2**N-2\n    for el in get_factors(N):\n        res-=2**el-2\n    print(res%M)\n    \n        ", "# cook your dish here\ndef offset(l, flag):\n    x = 0\n    # print(l)\n    for i in range(1, len(l)):\n        temp = []\n        for j in range(i):\n            v = getbig(l[i], l[j], fs)\n            if v > 1:\n                temp.append(v)\n                if flag:\n                    x += 2**v - 2\n                else:\n                    x -= 2**v - 2\n        x += offset(temp, not flag)\n    return x\n    \ndef getbig(v1, v2, factors):\n    x = 1\n    for f in factors:\n        while v1%f == 0 and v2%f == 0:\n            v1//=f\n            v2//=f\n            x*=f\n    return x\n    \ndef prime_factors(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return factors\n    \nn,m = map(int, input().split())\nif n == 1:\n    print(1)\nelse:\n    fs = prime_factors(n)\n    fs.discard(n)\n    ans = 2**n-2\n    temp = []\n    for v in fs:\n        v = n//v\n        temp.append(v)\n        ans -= 2**v - 2\n        # print(ans)\n    ans += offset(temp, True)\n    # print(fs)\n    print(ans%m)", "# cook your dish here\ndef prime_factors(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return factors\n    \nn,m = map(int, input().split())\nfs = prime_factors(n)\nfs.discard(n)\nans = 2**n-2\nfor v in fs:\n    # print(ans, v)\n    v = n//v\n    # print(v)\n    ans -= 2**v - 2\n    # print(ans)\n# print(fs)\nprint(ans%m)", "# cook your dish here\ndef prime_factors(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(n)\n            if n % i != 0:\n                factors.add(i)\n            break\n            \n    return factors\n    \nn,m = map(int, input().split())\nif n > 1:\n    fs = prime_factors(n)\n    ans = 2**n-2\n    for v in fs:\n        # print(ans, v)\n        ans -= 2**v - 2\n        # print(ans)\n    # print(fs)\n    print(ans%m)\nelse:\n    print(1)", "# cook your dish here\ndef prime_factors(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(n)\n            if n % i != 0:\n                factors.add(i)\n            break\n            \n    return factors\n    \nn,m = map(int, input().split())\nfs = prime_factors(n)\nans = 2**n-2\nfor v in fs:\n    if v != n:\n        # print(ans, v)\n        ans -= 2**v - 2\n        # print(ans)\n# print(fs)\nprint(ans%m)", "# cook your dish here\ndef prime_factors(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n            factors.add(n)\n            break\n            \n    return factors\n    \nn,m = map(int, input().split())\nfs = prime_factors(n)\nans = 2**n-2\nfor v in fs:\n    if v != n:\n        # print(ans, v)\n        ans -= 2**v - 2\n        # print(ans)\n# print(fs)\nprint(ans%m)", "# cook your dish here\ndef prime_factors(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return factors\n    \nn,m = map(int, input().split())\nfs = prime_factors(n)\nans = 2**n-2\nfor v in fs:\n    if v != n:\n        ans -= 2**v - 2\n# print(fs)\nprint(ans%m)", "def mod(f,m):\r\n    if f==1:\r\n        return(2%m)\r\n    elif f%2==0:\r\n        return(((mod(f//2,m))**2)%m)\r\n    else:\r\n        return((((mod(f//2,m))**2)*2)%m)\r\nn,m=list(map(int,input().strip().split()))\r\nl=[0 for i in range(n+1)]\r\nl[0],l[1]=1,1\r\nfor i in range(2,n+1):\r\n    if l[i]==0:\r\n        t=2\r\n        while t*i<=n:\r\n            l[t*i]=1\r\n            t+=1\r\nprime=[]\r\nfor i in range(len(l)):\r\n    if l[i]==0:\r\n        prime.append(i)\r\nt=0\r\nfor j in prime:\r\n    if n%j==0:\r\n        t+=mod(n//j,m)\r\ns=mod(n,m)\r\nt%=m\r\nif s-t>0:\r\n    print(s-t)\r\nelse:\r\n    print(m-s+t)\r\n\r\n        ", "import random\ndef miller_rabin(n, k):\n\n    if n == 2 or n==3:\n        return True\n\n    if n % 2 == 0:\n        return False\n\n    r, s = 0, n - 1\n    while s % 2 == 0:\n        r += 1\n        s //= 2\n    for _ in range(k):\n        a = random.randrange(2, n - 1)\n        x = pow(a, s, n)\n        if x == 1 or x == n - 1:\n            continue\n        for _ in range(r - 1):\n            x = pow(x, 2, n)\n            if x == n - 1:\n                break\n        else:\n            return False\n    return True\npows = {1:2}\nn, k = list(map(int, input().split(' ')))\nT = pow(2,n)\nif miller_rabin(n,6):\n    print((T-2)%k)\nelse:\n    m = 0\n    for i in range(2,n//2+1):\n        if n%i==0:\n            if i>50000:\n                a = 6\n            elif i>20000:\n                a = 5\n            else:\n                a = 4\n            if miller_rabin(i,a):\n                pows[i]=pow(2,i)-2\n                m+=pows[i]\n            else:\n                w = 0\n                for j in pows:\n                    if i%j==0:\n                        w+=pows[j]\n                    if j>i//2:\n                        break\n                pows[i] = pow(2,i)-w\n                m+=pows[i]\n\n    print((T-m-2)%k)\n", "# cook your dish here\nimport random\ndef miller_rabin(n, k):\n\n    if n == 2 or n==3:\n        return True\n\n    if n % 2 == 0:\n        return False\n\n    r, s = 0, n - 1\n    while s % 2 == 0:\n        r += 1\n        s //= 2\n    for _ in range(k):\n        a = random.randrange(2, n - 1)\n        x = pow(a, s, n)\n        if x == 1 or x == n - 1:\n            continue\n        for _ in range(r - 1):\n            x = pow(x, 2, n)\n            if x == n - 1:\n                break\n        else:\n            return False\n    return True\npows = {1:2}\nn, k = list(map(int, input().split(' ')))\nT = pow(2,n)\nif miller_rabin(n,6):\n    print((T-2)%k)\nelse:\n    m = 0\n    for i in range(2,n//2+1):\n        if n%i==0:\n            if i>50000:\n                a = 6\n            elif i>20000:\n                a = 5\n            else:\n                a = 4\n            if miller_rabin(i,a):\n                pows[i]=pow(2,i)-2\n                m+=pows[i]\n            else:\n                w = 0\n                for j in pows:\n                    if i%j==0:\n                        w+=pows[j]\n                    if j>i//2:\n                        break\n                pows[i] = pow(2,i)-w\n                m+=pows[i]\n\n    print((T-m-2)%k)\n", "\r\npowers=[0 for i in range(150001)]\r\n\r\ndef factorize(n):\r\n    factors=set()\r\n    for i in range(1,n):\r\n        if i*i>n:\r\n            break\r\n        else:\r\n            if (n%i)==0:\r\n                factors.add(i)\r\n                factors.add(n//i)\r\n    factors.remove(n)\r\n    return factors\r\n\r\ndef calc(m):\r\n    powers[0]=1\r\n    for i in range(1,150001):\r\n        powers[i]=(powers[i-1]*2)%m\r\n\r\nn,m=list(map(int,input().split()))\r\ncalc(m)\r\ndp=[0 for i in range(n+1)]\r\ndp[1]=2\r\nfor i in range(2,n+1):\r\n    factors=factorize(i)\r\n    dp[i]=powers[i]\r\n    for num in factors:\r\n        dp[i]-=dp[num]\r\n        dp[i]=(dp[i]+m)%m\r\nprint(dp[n])\r\n", "\nn, m = map(int, input().split())\np, mem = 3, []\nres = 2**n - 2\nif n % 2 == 0:\n    res -= 2\nwhile p < n:\n    if not any(p % e == 0 for e in mem) and n % p == 0 :\n        mem.append(p)\n        res -= 2**p - 2\n        \n    p +=2\n        \nprint(res % m)\n            \n            \n        \n        \n        \n        \n        ", "from math import sqrt, gcd\r\nn, MOD = list(map(int, input().split()))\r\nfactors = set()\r\nfor i in range(2, 1+int(sqrt(n))):\r\n    if(n % i == 0):\r\n        factors.add(i)\r\n        factors.add(n//i)\r\nfactors = sorted(list(factors), reverse = True)\r\nans = 2**n\r\nif(factors == []):\r\n    ans -= 2\r\ndone = []\r\nfor i in factors:\r\n    ans -= (2**i) % MOD\r\n    temp = i\r\n    #print(\"i=\",i,ans)\r\n    for j in done:\r\n        if(temp == 1):\r\n            break\r\n        ans = (ans + (2**gcd(temp,j))%MOD) % MOD\r\n        temp //= gcd(temp,j)\r\n        #print(\"j=\",j,ans)\r\n    done.append(i)\r\nif(factors):\r\n    ans -= max(0,len(factors)//2 - 1) * 2\r\nprint(ans%MOD)", "\r\nN,M = map(int,input().split())\r\ndp = [0]*( (2*(10**5)) +1)\r\npower = [0]*( (2*(10**5)) +1)\r\npower[1] = 2\r\ndp[1] = 2%int(M)\r\nfor i in range(2,int(N)+1):\r\n    power[i] = (2*power[i-1])%int(M)\r\n\r\n\r\nfor i in range(2,int(N)+1):\r\n    if(int(N)%i!=0):\r\n        continue\r\n\r\n    dp[i] = power[i]\r\n    #print(power[i])\r\n    for j in range(1,int(int(i)/2)+1):\r\n        if(i%j==0):\r\n            dp[i] = dp[i]-dp[j]\r\n            if(dp[i]<0):\r\n                dp[i] += int(M)\r\n        \r\nprint(dp[int(N)]) ", "factors = []\r\n\r\ndef fact(n):\r\n    factors.clear()\r\n    for i in range(2,int(n**0.5)+1):\r\n        if n%i == 0:\r\n            factors.append(i)\r\n            if i*i != n:\r\n                factors.append(n//i)\r\nn , m  = map(int,input().split())\r\n\r\ndp = [0]*( (2*(10**5)) +1)\r\n\r\ndp[2] = 2%m\r\ndp[3] = 6%m\r\ndp[4] = 12%m\r\n\r\nif n > 4:\r\n    for i in range(5,n+1):\r\n        fact(i)\r\n        k = (pow(2,i,m) - 2)%m\r\n        if len(factors) == 0:\r\n            dp[i] = k\r\n        else:\r\n            sub = 0\r\n            for j in factors:\r\n                sub += dp[j]\r\n                sub %= m\r\n            dp[i] = (k - sub)%m\r\nprint(dp[n])\r\n", "# cook your dish here\n\nN, M  =  map(int, input().split())\n\npow2ModM = [1 for i in range(N + 1)]\npow2ModM[0] = 1\nfor i in range(1, N + 1):\n  pow2ModM[i] = (pow2ModM[i - 1] * 2) % M\n\ndef fModM(N):\n  answer = pow2ModM[N]\n  for d in range(1, N):\n    if N % d == 0:\n      answer = (answer - fModM(d)) % M\n  return answer\n\nprint(fModM(N))\n\n"]