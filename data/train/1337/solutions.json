["from math import gcd\r\ndef compute_lcm(x, y):\r\n    lcm = (x*y)//gcd(x,y)\r\n    return lcm\r\n\r\ndef LCMofArray(a):\r\n    lcm = a[0]\r\n    for i in range(1,len(a)):\r\n        lcm = lcm*a[i]//gcd(lcm, a[i])\r\n    return lcm\r\n\r\nfor _ in range(int(input())):\r\n    lens = int(input())\r\n    arrs = [int(x) for x in input().split()]\r\n    rest = int(input())\r\n    print(LCMofArray(arrs) + rest)\r\n\r\n", "def find_lcm(num1, num2): \n    if(num1>num2): \n        num = num1 \n        den = num2 \n    else: \n        num = num2 \n        den = num1 \n    rem = num % den \n    while(rem != 0): \n        num = den \n        den = rem \n        rem = num % den \n    gcd = den \n    lcm = int(int(num1 * num2)/int(gcd)) \n    return lcm \n    \nfor _ in range(int(input())):\n    n=int(input())\n    p=list(map(int,input().split()))\n    r=int(input())\n    num1 = p[0]\n    num2 = p[1]\n    lcm = find_lcm(num1, num2)\n    for i in range(2, n):\n        lcm = find_lcm(lcm, p[i]) \n    print(lcm+r)", "# cook your dish here\ndef hcf(x, y):\n   if x > y:\n       smaller = y\n   else:\n       smaller = x\n   for i in range(1,smaller + 1):\n       if((x % i == 0) and (y % i == 0)):\n           hcf = i\n   return hcf\nl=[]\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    r=int(input())\n    s=a[0]\n    for i in range(1,n):\n        s=(s*a[i])//hcf(s,a[i])\n    l.append(s+r)\nfor i in l:\n    print(i)", "def listLCM(l):\r\n    ans = 1\r\n    for i in l:\r\n        ans = lcm(ans,i)\r\n    return ans\r\ndef lcm(a,b): \r\n    return (a*b) / gcd(a,b)\r\n\r\ndef gcd(a,b): \r\n    if a == 0: \r\n        return b \r\n    return gcd(b % a, a)\r\n\r\ntc = int(input())\r\nfor _ in range(tc):\r\n    people = int(input())\r\n    candidates = list(set(map(int,input().split())))\r\n    resh = int(input())\r\n    print(int(listLCM(candidates))+resh, end = ' ')\r\n", "import math \n  \ndef lcm (s, s1): \n    mul = s * s1 \n    gcd = math.gcd(s, s1) \n    lcm = mul // gcd \n    return lcm \n  \n# Driver Code \ndef __starting_point(): \n  \n    t=int(input()) #take the size\n    while(t>0):\n        t = t-1;\n        N=int(input()) #take the size\n        num_array=list(map(int, input().split(' ')[:N]))\n        #for i in range(N):\n            #n = int(input())\n            #num_array[i] = n\n        l = num_array[0]\n        for i in range(1, N):\n            l = lcm(l, num_array[i])\n        r = int(input())\n        print(l+int(r)) \n  \n\n__starting_point()", "# cook your dish here\n# Python Program to find LCM of n elements \n\ndef find_lcm(num1, num2): \n\tif(num1>num2): \n\t\tnum = num1 \n\t\tden = num2 \n\telse: \n\t\tnum = num2 \n\t\tden = num1 \n\trem = num % den \n\twhile(rem != 0): \n\t\tnum = den \n\t\tden = rem \n\t\trem = num % den \n\tgcd = den \n\tlcm = int(int(num1 * num2)/int(gcd)) \n\treturn lcm \nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    l = list(map(int,input().split()))\n    r=int(input())\n    \n\n    num1 = l[0] \n    num2 = l[1] \n    lcm = find_lcm(num1, num2) \n\n    for i in range(2, len(l)): \n    \tlcm = find_lcm(lcm, l[i]) \n\t\n    print(lcm+r) \n\n\n", "import sys\r\n\r\n\r\ndef find_lcm(num1, num2):\r\n    if(num1 > num2):\r\n        num = num1\r\n        den = num2\r\n    else:\r\n        num = num2\r\n        den = num1\r\n    rem = num % den\r\n    while(rem != 0):\r\n        num = den\r\n        den = rem\r\n        rem = num % den\r\n    gcd = den\r\n    lcm = int(int(num1 * num2) / int(gcd))\r\n    return lcm\r\n\r\n\r\nt = int(sys.stdin.readline())\r\nwhile t:\r\n    n = int(sys.stdin.readline())\r\n    l = list(map(int, sys.stdin.readline().split()))\r\n    r = int(sys.stdin.readline())\r\n    num1 = l[0]\r\n    num2 = l[1]\r\n    lcm = find_lcm(num1, num2)\r\n\r\n    for i in range(2, len(l)):\r\n        lcm = find_lcm(lcm, l[i])\r\n\r\n    print(lcm + r)\r\n    t -= 1", "\r\nfrom math import gcd\r\nn_case=int(input())\r\ndef LCMofArray(a):\r\n  lcm = a[0]\r\n  for i in range(1,len(a)):\r\n    lcm = lcm*a[i]//gcd(lcm, a[i])\r\n  return lcm\r\n\r\nfor _ in range(n_case):\r\n    n=int(input())\r\n    lt=list(set(map(int,input().split())))\r\n    r=int(input())\r\n    \r\n    lcm=LCMofArray(lt)\r\n    lcm+=r\r\n    print(lcm)\r\n\r\n", "# cook your dish here\nimport math\n# function to calculate LCM\ndef LCMofArray(a):\n       lcm = a[0]\n       for i in range(1,len(a)):\n              lcm = lcm*a[i]//math.gcd(lcm, a[i])\n       return lcm\nfor T in range(int(input())):\n       n=int(input())\n       N=list(map(int,input().split()))\n       r=int(input())\n       print(LCMofArray(N)+r)\n", "# cook your dish here\n\ndef gcd(a,b):\n    if b==0:\n        return(a)\n    return gcd(b,a%b)\n\ndef lcm(x):\n    ans=x[0]\n    for i in range(1,len(x)):\n        ans=(ans*x[i])//gcd(x[i],ans)\n    return(ans)\n    \n\nt=int(input())\nwhile t>0:\n    t-=1\n    n=int(input())\n    x=list(map(int,input().split()))\n    r=int(input())\n    z=lcm(x)+r\n    print(z)", "def LCM(arr, n): \n      \n   \n    max_num = 0; \n    for i in range(n): \n        if (max_num < arr[i]): \n            max_num = arr[i]\n\n    res = 1; \n  \n    x=2\n    while (x <= max_num): \n          \n\n        indexes = []; \n        for j in range(n): \n            if (arr[j] % x == 0): \n                indexes.append(j)\n  \n        if (len(indexes) >= 2): \n              \n            \n            for j in range(len(indexes)): \n                arr[indexes[j]] = int(arr[indexes[j]] / x)\n  \n            res = res * x\n        else: \n            x += 1; \n  \n  \n    for i in range(n): \n        res = res * arr[i]\n        \n  \n    return res+r\nt=int(input())\nfor i in range(0,t):\n\n    n=int(input())\n    arr=list(map(int,input().split()))\n    r=int(input())\n    print(LCM(arr, n))\n    \n    \n\n", "def lcm(a,b):\r\n    if(a>b): \r\n        num = a \r\n        den = b \r\n    else: \r\n        num = b \r\n        den = a\r\n    rem = num % den \r\n    while(rem != 0): \r\n        num = den \r\n        den = rem \r\n        rem = num % den \r\n    gcd = den \r\n    x = int(int(a * b)/int(gcd)) \r\n    return x\r\n\r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n    p=list(map(int,input().split()))\r\n    r=int(input())\r\n    if n==1:\r\n        print(p[0]+r)\r\n    else:\r\n        ans=lcm(p[0],p[1])\r\n        for i in range(2,n):\r\n            ans=lcm(ans,p[i])\r\n        print(ans+r)", "\ndef op_lcm(nm1, nm2): \n\tif(nm1>nm2): \n\t\tnm = nm1 \n\t\tden = nm2 \n\telse: \n\t\tnm = nm2 \n\t\tden = nm1 \n\trem = nm % den \n\twhile(rem != 0): \n\t\tnm = den \n\t\tden = rem \n\t\trem = nm % den \n\tgcd = den \n\tlcm = int(int(nm1 * nm2)/int(gcd)) \n\treturn lcm \n\nt=int(input())\nwhile t>0:\n\tt-=1\n\tn=int(input())\n\tl=list(map(int,input().split()))\n\tr=int(input())\n\tnm1 = l[0] \n\tnm2 = l[1] \n\tlcm = op_lcm(nm1, nm2) \n\n\tfor i in range(2, len(l)): \n\t\tlcm = op_lcm(lcm, l[i]) \n\t\t\n\tprint(lcm+r) \n\n\n\t\n", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int,input().split()))\n    r = int(input())\n    lcm = p[0]\n    for i in p[1:]:\n      lcm = int(lcm*i/gcd(lcm, i))\n    print(int(lcm+r))", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int,input().split()))\n    r = int(input())\n    lcm = p[0]\n    for i in p[1:]:\n      lcm = int(lcm*i/gcd(lcm, i))\n    print(int(lcm+r))", "# cook your dish here\nfrom math import gcd\nfor _ in range(int(input())):\n    N = int(input())\n    lst = list(map(int,input().split()))\n    R = int(input())\n    lcm = lst[0]\n    \n    for i in lst[1:]:\n      lcm = lcm*(i//(gcd(lcm, i)))\n    print(lcm+R)", "# Python Program to find LCM of n elements \r\n\r\ndef find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile(rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\nfor j in range(int(input())):\r\n    n=int(input())\r\n    l =list(map(int,input().split())) \r\n    x=int(input())\r\n    num1 = l[0] \r\n    num2 = l[1] \r\n    lcm = find_lcm(num1, num2) \r\n    for i in range(2, len(l)):\r\n        lcm = find_lcm(lcm, l[i])\r\n    lcm+=x\r\n    print(lcm)\r\n\t\r\n \r\n\r\n# Code contributed by Mohit Gupta_OMG \r\n", "import math\ndef LCM(a):\n  lcm = a[0]\n  for i in range(1,len(a)):\n    lcm = lcm*a[i]//math.gcd(lcm, a[i])\n  return lcm\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    guest=list(map(int,input().split()))\n    r=int(input())\n    lcm=LCM(guest)\n    print(lcm+r)\n", "from math import gcd\r\n\r\n\r\ndef LCM(a):\r\n  lcm = a[0]\r\n  for i in range(1,len(a)):\r\n    lcm = lcm*a[i]//gcd(lcm, a[i])\r\n  return lcm\r\n\r\n\r\n\r\nt = int(input())\r\nwhile t>0:\r\n    n = int(input())\r\n    lst = list(map(int,input().split()))\r\n    r = int(input())\r\n\r\n    res = LCM(lst)\r\n\r\n    print(res + r)\r\n\r\n    t-=1", "import math\n\ndef LCM(a):\n  lcm = a[0]\n  for i in range(1,len(a)):\n    lcm = lcm*a[i]//math.gcd(lcm, a[i])\n  return lcm\n\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    guest=list(map(int,input().split()))\n    r=int(input())\n    lcm=LCM(guest)\n    print(lcm+r)\n", "# cook your dish here\ndef find_lcm(num1, num2): \n    if(num1>num2): \n        num = num1 \n        den = num2 \n    else: \n        num = num2 \n        den = num1 \n    rem = num % den \n    while(rem != 0): \n        num = den \n        den = rem \n        rem = num % den \n    gcd = den \n    lcm = int(int(num1 * num2)/int(gcd)) \n    return lcm \n\nfor _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    r=int(input())\n\n    num1 = l[0] \n    num2 = l[1] \n    lcm = find_lcm(num1, num2) \n    for i in range(2, len(l)): \n        lcm = find_lcm(lcm, l[i]) \n    print(lcm+r) \n", "\nimport math\n\ndef lcm(a):\n  lm = a[0]\n  for i in range(1,len(a)):\n    lm = lm*a[i]//math.gcd(lm, a[i])\n  return lm\n\t\nt = int(input())\nfor T in range(t):\n\tn = int(input())\n\tl = list(map(int,input().split()))\n\tr = int(input())\n\tlc = lcm(l)\n\tprint(lc+r)\n", "def gcd(a,b): \r\n    if a == 0: \r\n        return b \r\n    return gcd(b % a, a) \r\n\r\n# Function to return LCM of two numbers \r\ndef lcm(a): \r\n    res = 1\r\n    for i in range(len(a)):\r\n      res = res*a[i]//gcd(res,a[i])\r\n    return res\r\n\r\nfor _ in range(int(input())):\r\n  n = int(input())\r\n  p = list(map(int,input().split()))\r\n  r = int(input())\r\n  print(lcm(p)+r)", "# cook your dish here\ndef gcd(a,b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n  \ndef lcm(a,b): \n    return (a*b) // gcd(a,b) \n \nfor _ in range(int(input())) :\n    n = int(input())\n    arr = list(map(int , input().split()))\n    k = int(input())\n    if(n==1) :\n        print(arr[0]+k)\n    if(n==2) :\n        print(lcm(arr[0],arr[1])+k)\n    else :\n        l = lcm(arr[0],arr[1])\n        for i in range(2, len(arr)): \n            l = lcm(l, arr[i])\n        print(l+k)", "import math\n\n# function to calculate LCM\ndef L(a):\n  lcm = a[0]\n  for i in range(1,len(a)):\n    lcm = lcm*a[i]//math.gcd(lcm, a[i])\n  return lcm\n  \nfor _ in range(int(input())):\n    n=int(input())\n    l=list(map(int,input().split()))\n    r=int(input())\n    c=L(l)\n    print(c+r)\n"]