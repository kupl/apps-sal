["# cook your dish here\nimport sys\n\nmod_val = 1000000007\nrang = [0]*101\npow_cache = [0]*102\nmultisets = {}\n\n\ndef mod_pow(base, pow):\n result = 1\n while pow:\n  if pow&1:\n   result = (result*base) % mod_val\n  base = (base*base) % mod_val\n  pow = pow>>1\n return result\n\n\ndef precalculate():\n\n for i in range(1, 102):\n  pow_cache[i] = mod_pow(i, mod_val-2)\n\n\ndef cal_recurse(i, target_sum):\n if target_sum == 0:\n  return 1\n if i>=target_sum:\n  return 0\n if (i, target_sum) in multisets:\n  return multisets[(i, target_sum)]\n ans = cal_recurse(i+1, target_sum)\n max_pos = target_sum//(i+1)\n choose = rang[i+1]%mod_val\n for j in range(1, max_pos+1):\n  temp = choose*cal_recurse(i+1, target_sum-j*(i+1))\n  # temp%=mod_val\n  ans += temp\n  ans %= mod_val\n  choose *= rang[i+1]+j\n  # choose %= mod_val\n  choose *= pow_cache[j+1]\n  choose %= mod_val\n multisets[i, target_sum] = ans\n return ans\n\n\ndef calculate(target_sum, rang_index):\n populate(target_sum, rang_index)\n return cal_recurse(0, target_sum)\n\n\ndef populate(target_sum, rang_i):\n for i in range(1, target_sum+1):\n  rang[i] = rang_i[0] + (rang_i[1] + (rang_i[2] + rang_i[3]*i)*i)*i\n\n\n_test_cases = int(input())\nprecalculate()\nfor _a_case in range(_test_cases):\n rang = [0]*101\n multisets = {}\n _rang_index = [int(i) for i in input().split(' ')]\n _target_sum = int(input())\n print(calculate(_target_sum, _rang_index))\n"]