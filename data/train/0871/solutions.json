["import sys\r\n\r\nt = int(input())\r\n# print(t)\r\nfor _ in range(t):\r\n\tn,m = map(int,input().split());\r\n\ts = [];\r\n\tfor i in range(n):\r\n\t\ts.append(input())\r\n\tans = []\r\n\tfor i in range(n):\r\n\t\tans.append([])\r\n\t\tfor j in range(m):\r\n\t\t\tans[i].append([])\r\n\tfor i in range(n):\r\n\t\tfor j in range(m):\r\n\t\t\tc = 0\r\n\t\t\tif s[i][j] == 'U':\r\n\t\t\t\tfor k in range(i,-1,-1):\r\n\t\t\t\t\tif s[k][j] == '#':\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tans[k][j].append(c)\r\n\t\t\t\t\tc+=1\r\n\t\t\telif s[i][j] == 'D':\r\n\t\t\t\tfor k in range(i,n):\r\n\t\t\t\t\tif s[k][j] == '#':\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tans[k][j].append(c)\r\n\t\t\t\t\tc+=1\r\n\t\t\telif s[i][j] == 'L':\r\n\t\t\t\tfor k in range(j,-1,-1):\r\n\t\t\t\t\tif s[i][k] == '#':\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tans[i][k].append(c)\r\n\t\t\t\t\tc+=1\r\n\t\t\telif s[i][j] == 'R':\r\n\t\t\t\tfor k in range(j,m):\r\n\t\t\t\t\tif s[i][k] == '#':\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tans[i][k].append(c)\r\n\t\t\t\t\tc+=1\r\n\tfor i in range(n):\r\n\t\tfor j in range(m):\r\n\t\t\tans[i][j].sort()\r\n\tres = []\r\n\tfor i in range(n):\r\n\t\tfor j in range(m):\r\n\t\t\tc= 1\r\n\t\t\t# print(ans[i][j])\r\n\t\t\tfor k in range(1,len(ans[i][j])):\r\n\t\t\t\t# print(ans[i][j][k])\r\n\t\t\t\tif ans[i][j][k] == ans[i][j][k-1]:\r\n\t\t\t\t\tc+=1\r\n\t\t\t\telse :\r\n\t\t\t\t\tif c!=1:\r\n\t\t\t\t\t\tres.append(c)\r\n\t\t\t\t\tc = 1\r\n\t\t\t\tif k==len(ans[i][j])-1:\r\n\t\t\t\t\tif c!=1:\r\n\t\t\t\t\t\tres.append(c)\r\n\tpairs = 0\r\n\t# print(res)\r\n\tfor i in range(len(res)):\r\n\t\tpairs  += ((res[i]*(res[i]-1))//2)\r\n\t\r\n\tprint(pairs)", "# cook your dish here\ndef count_ants(l, r, u, d):\n    cnt = 0\n    if l is False:\n        cnt += 1\n    if r is False:\n        cnt += 1\n    if u is False:\n        cnt += 1\n    if d is False:\n        cnt += 1\n    return cnt\n\n\ndef solve(m, row, col):\n    ans = 0\n    for i in range(row):\n        for j in range(col):\n            lw = True\n            rw = True\n            uw = True\n            dw = True\n            if m[i][j] == '#':\n                continue\n            for d in range(1, max(row, col)):\n                cnt = 0\n                if j - d < 0:\n                    lw = False\n                if j + d >= col:\n                    rw = False\n                if i - d < 0:\n                    uw = False\n                if i + d >= row:\n                    dw = False\n                if count_ants(lw, rw, uw, dw) > 2:\n                    break\n                if lw and j - d >= 0:\n                    if m[i][j - d] == 'R':\n                        cnt += 1\n                    elif m[i][j-d] == '#':\n                        lw = False\n                if rw and j + d < col:\n                    if m[i][j + d] == 'L':\n                        cnt += 1\n                    elif m[i][j+d] == '#':\n                        rw = False\n\n                if uw and i - d >= 0:\n                    if m[i - d][j] == 'D':\n                        cnt += 1\n                    elif m[i-d][j] == '#':\n                        uw = False\n\n                if dw and i + d < row:\n                    if m[i + d][j] == 'U':\n                        cnt += 1\n                    elif m[i+d][j] == '#':\n                        dw = False\n                if cnt > 1:\n                    ans += (cnt * (cnt - 1)) // 2\n    return ans\n\n\ndef read():\n    t = int(input())\n    for i in range(t):\n        r, c = list(map(int, input().strip().split()))\n        m = [[] for i in range(r)]\n        for i in range(r):\n            s = input().strip()\n            m[i] = s\n        ans = solve(m, r, c)\n        print(ans)\n\nread()", "import copy\r\ndef AllDead(arr):\r\n\tvar=1\r\n\tfor x in arr:\r\n\t\tfor y in x:\r\n\t\t\tif \"U\" in y or \"D\" in y or \"L\"in y or \"R\" in y:\r\n\t\t\t\tvar=0\r\n\treturn var\r\ndef checkMeet(arr):\r\n\tans=0\r\n\tfor x in arr:\r\n\t\tfor y in x:\r\n\t\t\tif len(y)>=2 and '-' not in y:\r\n\t\t\t\tans+=(len(y)*(len(y)-1))//2\r\n\treturn ans\r\nt=int(input())\r\nfor i in range(t):\r\n\tn,m=map(int,input().split())\r\n\tlol=[['#']]*(m+2)\r\n\tarr=[lol]\r\n\tfor j in range(n):\r\n\t\tmo=[[x] for x in input()]\r\n\t\tarr+=[[['#']]+mo+[['#']]]\r\n\tarr+=[lol]\r\n\tmeet=0\r\n\twhile AllDead(arr)==0:\r\n\t\ttemp=copy.deepcopy(arr)\r\n\t\tfor x in range(1,n+1):\r\n\t\t\tfor y in range(1,m+1):\r\n\t\t\t\tfor z in arr[x][y]:\r\n\t\t\t\t\tif z=='U':\r\n\t\t\t\t\t\tif arr[x-1][y]==['#']:\r\n\t\t\t\t\t\t\tdo_nothing=1\r\n\t\t\t\t\t\telif temp[x-1][y]==['-']:\r\n\t\t\t\t\t\t\ttemp[x-1][y].remove('-')\r\n\t\t\t\t\t\t\ttemp[x-1][y]+=['U']\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\ttemp[x-1][y]+=['U']\r\n\t\t\t\t\t\ttemp[x][y].remove(z)\r\n\t\t\t\t\t\tif len(temp[x][y])==0:\r\n\t\t\t\t\t\t\ttemp[x][y]=['-']\r\n\t\t\t\t\tif z=='D':\r\n\t\t\t\t\t\tif arr[x+1][y]==['#']:\r\n\t\t\t\t\t\t\tdo_nothing=1\r\n\t\t\t\t\t\telif temp[x+1][y]==['-']:\r\n\t\t\t\t\t\t\ttemp[x+1][y].remove('-')\r\n\t\t\t\t\t\t\ttemp[x+1][y]+=['D']\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\ttemp[x+1][y]+=['D']\r\n\t\t\t\t\t\ttemp[x][y].remove(z)\r\n\t\t\t\t\t\tif len(temp[x][y])==0:\r\n\t\t\t\t\t\t\ttemp[x][y]=['-']\r\n\t\t\t\t\tif z=='L':\r\n\t\t\t\t\t\tif arr[x][y-1]==['#']:\r\n\t\t\t\t\t\t\tdo_nothing=1\r\n\t\t\t\t\t\telif temp[x][y-1]==['-']:\r\n\t\t\t\t\t\t\ttemp[x][y-1].remove('-')\r\n\t\t\t\t\t\t\ttemp[x][y-1]+=['L']\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\ttemp[x][y-1]+=['L']\r\n\t\t\t\t\t\ttemp[x][y].remove(z)\r\n\t\t\t\t\t\tif len(temp[x][y])==0:\r\n\t\t\t\t\t\t\ttemp[x][y]=['-']\r\n\t\t\t\t\tif z=='R':\r\n\t\t\t\t\t\tif arr[x][y+1]==['#']:\r\n\t\t\t\t\t\t\tdo_nothing=1\r\n\t\t\t\t\t\telif temp[x][y+1]==['-']:\r\n\t\t\t\t\t\t\ttemp[x][y+1].remove('-')\r\n\t\t\t\t\t\t\ttemp[x][y+1]+=['R']\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\ttemp[x][y+1]+=['R']\r\n\t\t\t\t\t\ttemp[x][y].remove(z)\r\n\t\t\t\t\t\tif len(temp[x][y])==0:\r\n\t\t\t\t\t\t\ttemp[x][y]=['-']\r\n\t\tarr=copy.deepcopy(temp)\r\n\t\tmeet+=checkMeet(arr)\r\n\tprint(meet)", "readFromFile = 0\r\nif readFromFile:\r\n    f = open(\"inputSmall.txt\", \"r\")\r\n    T = int(f.readline())\r\nelse:\r\n    T = int(input())\r\n\r\ntestCases = range(T)\r\n\r\nfor case in testCases:\r\n    if (readFromFile):\r\n        RC = [int(x) for x in f.readline().split()]\r\n    else:\r\n        RC = [int(x) for x in input().split()]\r\n\r\n    R = RC[0]\r\n    C = RC[1]\r\n\r\n    aByCols = {}\r\n    aByRows = {}\r\n\r\n    uAll = []\r\n    dAll = []\r\n    lAll = []\r\n    rAll = []\r\n    \r\n    for r in range(R):\r\n        if(readFromFile):\r\n            row = f.readline()\r\n        else:\r\n            row = input()\r\n\r\n        for c in range(C):\r\n            if(row[c] == '#'):\r\n                if(r not in aByRows):\r\n                    aByRows[r] = []                \r\n                aByRows[r].append(c)\r\n                if(c not in aByCols):\r\n                    aByCols[c] = []\r\n                aByCols[c].append(r)\r\n\r\n            elif(row[c] == 'U'):\r\n                uAll.append((r,c))\r\n\r\n            elif(row[c] == 'D'):\r\n                dAll.append((r,c))\r\n\r\n            elif(row[c] == 'L'):\r\n                lAll.append((r,c))\r\n\r\n            elif(row[c] == 'R'):\r\n                rAll.append((r,c))\r\n\r\n    # U ant will die if # in same column, smaller row\r\n    for x in range(len(uAll)):\r\n        item = uAll[x]\r\n        r = item[0]\r\n        c = item[1]\r\n        if (c in aByCols):\r\n            eaters = aByCols[c]\r\n        else:\r\n            eaters = []\r\n        age = R\r\n        for y in eaters:\r\n            if (y < r):\r\n                age = min(age, r-y)\r\n        uAll[x] = (item[0], item[1], age)\r\n\r\n    # D ant will die if # in same column, larger row\r\n    for x in range(len(dAll)):\r\n        item = dAll[x]\r\n        r = item[0]\r\n        c = item[1]\r\n        if (c in aByCols):\r\n            eaters = aByCols[c]\r\n        else:\r\n            eaters = []\r\n        age = R\r\n        for y in eaters:\r\n            if (y > r):\r\n                age = min(age, y-r)\r\n        dAll[x] = (item[0], item[1], age)\r\n\r\n    # L ant will die if # in same row, smaller col\r\n    for x in range(len(lAll)):\r\n        item = lAll[x]\r\n        r = item[0]\r\n        c = item[1]\r\n        if (r in aByRows):\r\n            eaters = aByRows[r]\r\n        else:\r\n            eaters = []\r\n        age = C\r\n        for y in eaters:\r\n            if (y < c):\r\n                age = min(age, c-y)\r\n        lAll[x] = (item[0], item[1], age)\r\n\r\n    # R ant will die if # in same row, larger col\r\n    for x in range(len(rAll)):\r\n        item = rAll[x]\r\n        r = item[0]\r\n        c = item[1]\r\n        if (r in aByRows):\r\n            eaters = aByRows[r]\r\n        else:\r\n            eaters = []\r\n        age = C\r\n        for y in eaters:\r\n            if (y > c):\r\n                age = min(age, y-c)\r\n        rAll[x] = (item[0], item[1], age)\r\n\r\n    uBySum = {}\r\n    uByDiff = {}\r\n    uByCol = {}\r\n    \r\n    dBySum = {}\r\n    dByDiff = {}\r\n    dByCol = {}\r\n    \r\n    rBySum = {}\r\n    rByDiff = {}\r\n    rByRow = {}\r\n    \r\n    lBySum = {}\r\n    lByDiff = {}\r\n    lByRow = {}\r\n\r\n    for x in uAll:\r\n        r = x[0]\r\n        c = x[1]\r\n        if (r+c not in uBySum):\r\n            uBySum[r+c] = []\r\n        if (r-c not in uByDiff):\r\n            uByDiff[r-c] = []\r\n        if (c not in uByCol):\r\n            uByCol[c] = []\r\n\r\n        uBySum[r+c].append((r,c,x[2]))\r\n        uByDiff[r-c].append((r,c,x[2]))\r\n        uByCol[c].append((r,c,x[2]))\r\n\r\n    for x in dAll:\r\n        r = x[0]\r\n        c = x[1]\r\n        if (r+c not in dBySum):\r\n            dBySum[r+c] = []\r\n        if (r-c not in dByDiff):\r\n            dByDiff[r-c] = []\r\n        if (c not in dByCol):\r\n            dByCol[c] = []\r\n\r\n        dBySum[r+c].append((r,c,x[2]))\r\n        dByDiff[r-c].append((r,c,x[2]))\r\n        dByCol[c].append((r,c,x[2]))\r\n\r\n    for x in lAll:\r\n        r = x[0]\r\n        c = x[1]\r\n        if (r+c not in lBySum):\r\n            lBySum[r+c] = []\r\n        if (r-c not in lByDiff):\r\n            lByDiff[r-c] = []\r\n        if (r not in lByRow):\r\n            lByRow[r] = []\r\n\r\n        lBySum[r+c].append((r,c,x[2]))\r\n        lByDiff[r-c].append((r,c,x[2]))\r\n        lByRow[r].append((r,c,x[2]))\r\n\r\n    for x in rAll:\r\n        r = x[0]\r\n        c = x[1]\r\n        if (r+c not in rBySum):\r\n            rBySum[r+c] = []\r\n        if (r-c not in rByDiff):\r\n            rByDiff[r-c] = []\r\n        if (r not in rByRow):\r\n            rByRow[r] = []\r\n\r\n        rBySum[r+c].append((r,c,x[2]))\r\n        rByDiff[r-c].append((r,c,x[2]))\r\n        rByRow[r].append((r,c,x[2]))\r\n\r\n    uSums = set(uBySum.keys())\r\n    uDiffs = set(uByDiff.keys())\r\n    uCols = set(uByCol.keys())\r\n    dSums = set(dBySum.keys())\r\n    dDiffs = set(dByDiff.keys())\r\n    dCols = set(dByCol.keys())\r\n    rSums = set(rBySum.keys())\r\n    rDiffs = set(rByDiff.keys())\r\n    rRows = set(rByRow.keys())\r\n    lSums = set(lBySum.keys())\r\n    lDiffs = set(lByDiff.keys())\r\n    lRows = set(lByRow.keys())\r\n\r\n    total = 0\r\n\r\n    ## same sums: possible collision between U and L\r\n    candidates = uSums & lSums\r\n    for cc in candidates:\r\n        r1 = [(x[0], 1, x[2]) for x in uBySum[cc]]\r\n        r2 = [(x[0], 0, x[2]) for x in lBySum[cc]]\r\n        rTot = r1 + r2\r\n        rTot.sort()\r\n\r\n        # Collision only when row of U > row of L\r\n        # both parties survive\r\n        zeros = []\r\n        for i in range(len(rTot)):\r\n            item = rTot[i]\r\n            if (item[1] == 1):\r\n                for j in zeros:\r\n                    if (item[0] - j[0] < j[2]) and (item[0] - j[0] < item[2]):\r\n                        total = total + 1\r\n            elif (item[1] == 0):\r\n                zeros.append(item)\r\n\r\n    ## same sums: possible collision between D and R\r\n    candidates = dSums & rSums\r\n    for cc in candidates:\r\n        r1 = [(x[0], 1, x[2]) for x in rBySum[cc]]\r\n        r2 = [(x[0], 0, x[2]) for x in dBySum[cc]]\r\n        rTot = r1 + r2\r\n        rTot.sort()\r\n\r\n        # Collision only when row of R > row of D\r\n        # both parties survive\r\n        zeros = []\r\n        for i in range(len(rTot)):\r\n            item = rTot[i]\r\n            if (item[1] == 1):\r\n                for j in zeros:\r\n                    if (item[0] - j[0] < j[2]) and (item[0] - j[0] < item[2]):\r\n                        total = total + 1\r\n            elif (item[1] == 0):\r\n                zeros.append(item)\r\n\r\n    ## same diffs: possible collision between U and R\r\n    candidates = uDiffs & rDiffs\r\n    for cc in candidates:\r\n        r1 = [(x[0], 1, x[2]) for x in uByDiff[cc]]\r\n        r2 = [(x[0], 0, x[2]) for x in rByDiff[cc]]\r\n        rTot = r1 + r2\r\n        rTot.sort()\r\n\r\n        # Collision only when row of U > row of R\r\n        # both parties survive\r\n        zeros = []\r\n        for i in range(len(rTot)):\r\n            item = rTot[i]\r\n            if (item[1] == 1):\r\n                for j in zeros:\r\n                    if (item[0] - j[0] < j[2]) and (item[0] - j[0] < item[2]):\r\n                        total = total + 1\r\n            elif (item[1] == 0):\r\n                zeros.append(item)\r\n\r\n    ## same diffs: possible collision between D and L\r\n    candidates = dDiffs & lDiffs\r\n    for cc in candidates:\r\n        r1 = [(x[0], 1, x[2]) for x in lByDiff[cc]]\r\n        r2 = [(x[0], 0, x[2]) for x in dByDiff[cc]]\r\n        rTot = r1 + r2\r\n        rTot.sort()\r\n\r\n        # Collision only when row of L > row of D\r\n        # both parties survive\r\n        zeros = []\r\n        for i in range(len(rTot)):\r\n            item = rTot[i]\r\n            if (item[1] == 1):\r\n                for j in zeros:\r\n                    if (item[0] - j[0] < j[2]) and (item[0] - j[0] < item[2]):\r\n                        total = total + 1\r\n            elif (item[1] == 0):\r\n                zeros.append(item)\r\n\r\n    ## same cols: possible collision between D and U\r\n    candidates = dCols & uCols\r\n    for cc in candidates:\r\n        r1 = [(x[0], 1, x[2]) for x in uByCol[cc]]\r\n        r2 = [(x[0], 0, x[2]) for x in dByCol[cc]]\r\n        rTot = r1 + r2\r\n        rTot.sort()\r\n\r\n        # Collision only when row of U > row of D,\r\n        # distance is even\r\n        # both parties survive\r\n        zeros = []\r\n        for i in range(len(rTot)):\r\n            item = rTot[i]\r\n            if (item[1] == 1):\r\n                for j in zeros:\r\n                    if ((item[0] - j[0]) % 2 == 0) and (item[0] - j[0] < 2*j[2]) and (item[0] - j[0] < 2*item[2]):\r\n                        total = total + 1\r\n            elif (item[1] == 0):\r\n                zeros.append(item)\r\n\r\n    ## same rows: possible collision between L and R\r\n    candidates = lRows & rRows\r\n    for cc in candidates:\r\n        r1 = [(x[1], 1, x[2]) for x in lByRow[cc]]\r\n        r2 = [(x[1], 0, x[2]) for x in rByRow[cc]]\r\n        rTot = r1 + r2\r\n        rTot.sort()\r\n\r\n        # Collision only when col of L > col of R, \r\n        # distance is even\r\n        # both parties survive\r\n        zeros = []\r\n        for i in range(len(rTot)):\r\n            item = rTot[i]\r\n            if (item[1] == 1):\r\n                for j in zeros:\r\n                    if ((item[0] - j[0]) % 2 == 0) and (item[0] - j[0] < 2*j[2]) and (item[0] - j[0] < 2*item[2]):\r\n                        total = total + 1\r\n            elif (item[1] == 0):\r\n                zeros.append(item)\r\n\r\n    print(total)", "def nCr(n, r): \r\n  \r\n    return (fact(n) / (fact(r) * fact(n - r))) \r\n\r\ndef fact(n):\r\n    res = 1\r\n      \r\n    for i in range(2, n+1): \r\n        res = res * i \r\n          \r\n    return res \r\n\r\n\r\nwhile True:\r\n    try:\r\n        for _ in range(int(input())):\r\n            r,c = map(int,input().split())\r\n            arena = [[i for i in input().strip()] for j in range(r)]\r\n\r\n            #print(*arena,sep='\\n')\r\n\r\n            antsInitialPositions = []\r\n            antsDirection=[]\r\n            antEaterPositions = []\r\n            for i in range(r):\r\n                for j in range(c):\r\n                    if arena[i][j] in ['R','U','D','L']:\r\n                        antsInitialPositions.append([i,j])\r\n                        antsDirection.append(arena[i][j])\r\n                    elif arena[i][j] == '#':\r\n                        antEaterPositions.append([i,j])\r\n\r\n            #print(antsInitialPositions)\r\n            #print(antEaterPositions)\r\n\r\n            antCount = len(antsInitialPositions)\r\n            grid = [[{} for j in range(c)] for i in range(r)]\r\n\r\n            for current in range(antCount):\r\n                i,j = antsInitialPositions[current]\r\n                direction = antsDirection[current]\r\n                movei,movej = i,j\r\n                if direction == 'D':\r\n                    steps = 0\r\n                    while movei<r and arena[movei][movej] != '#':\r\n                        steps = abs(i-movei)\r\n                        if steps in grid[movei][movej]:\r\n                            grid[movei][movej][steps]+=1\r\n                        else:\r\n                            grid[movei][movej][steps]=1\r\n                        movei+=1\r\n                elif direction == 'U':\r\n                    steps=0\r\n                    while movei>=0 and arena[movei][movej] != '#':\r\n                        steps = abs(i-movei)\r\n                        #print(\"steps counted \", steps,movei,movej)\r\n                        if steps in grid[movei][movej]:\r\n                            #print(\"already there in dict\")\r\n                            grid[movei][movej][steps]+=1\r\n                        else:\r\n                            grid[movei][movej][steps]=1\r\n                        movei-=1\r\n                elif direction == 'L':\r\n                    steps=0\r\n                    while movej>=0 and arena[movei][movej] != '#':\r\n                        steps = abs(j-movej)\r\n                        if steps in grid[movei][movej]:\r\n                            grid[movei][movej][steps]+=1\r\n                        else:\r\n                            grid[movei][movej][steps]=1\r\n                        movej-=1\r\n                elif direction == 'R':\r\n                    steps=0\r\n                    while movej<c and arena[movei][movej] != '#':\r\n                        steps = abs(j-movej)\r\n                        if steps in grid[movei][movej]:\r\n                            grid[movei][movej][steps]+=1\r\n                        else:\r\n                            grid[movei][movej][steps]=1\r\n                        movej+=1\r\n            #print(*grid,sep='\\n')\r\n            meetings=0\r\n            for i in range(r):\r\n                for j in range(c):\r\n                    for meets in grid[i][j].values():\r\n                        if meets>=2:\r\n                            meetings+=nCr(meets,2)\r\n            print(int(meetings))\r\n\r\n\r\n    except (ValueError,EOFError) as e:\r\n        break", "def nCr(n, r): \r\n  \r\n    return (fact(n) / (fact(r) * fact(n - r))) \r\n\r\ndef fact(n):\r\n    res = 1\r\n      \r\n    for i in range(2, n+1): \r\n        res = res * i \r\n          \r\n    return res \r\n\r\n\r\nwhile True:\r\n    try:\r\n        for _ in range(int(input())):\r\n            r,c = map(int,input().split())\r\n            arena = [[i for i in input().strip()] for j in range(r)]\r\n\r\n            #print(*arena,sep='\\n')\r\n\r\n            antsInitialPositions = []\r\n            antsDirection=[]\r\n            antEaterPositions = []\r\n            for i in range(r):\r\n                for j in range(c):\r\n                    if arena[i][j] in ['R','U','D','L']:\r\n                        antsInitialPositions.append([i,j])\r\n                        antsDirection.append(arena[i][j])\r\n                    elif arena[i][j] == '#':\r\n                        antEaterPositions.append([i,j])\r\n\r\n            #print(antsInitialPositions)\r\n            #print(antEaterPositions)\r\n\r\n            antCount = len(antsInitialPositions)\r\n            grid = [[{} for j in range(c)] for i in range(r)]\r\n\r\n            for current in range(antCount):\r\n                i,j = antsInitialPositions[current]\r\n                direction = antsDirection[current]\r\n                movei,movej = i,j\r\n                if direction == 'D':\r\n                    steps = 0\r\n                    while movei<r and arena[movei][movej] != '#':\r\n                        steps = abs(i-movei)\r\n                        if steps in grid[movei][movej]:\r\n                            grid[movei][movej][steps]+=1\r\n                        else:\r\n                            grid[movei][movej][steps]=1\r\n                        movei+=1\r\n                elif direction == 'U':\r\n                    steps=0\r\n                    while movei>=0 and arena[movei][movej] != '#':\r\n                        steps = abs(i-movei)\r\n                        #print(\"steps counted \", steps,movei,movej)\r\n                        if steps in grid[movei][movej]:\r\n                            #print(\"already there in dict\")\r\n                            grid[movei][movej][steps]+=1\r\n                        else:\r\n                            grid[movei][movej][steps]=1\r\n                        movei-=1\r\n                elif direction == 'L':\r\n                    steps=0\r\n                    while movej>=0 and arena[movei][movej] != '#':\r\n                        steps = abs(j-movej)\r\n                        if steps in grid[movei][movej]:\r\n                            grid[movei][movej][steps]+=1\r\n                        else:\r\n                            grid[movei][movej][steps]=1\r\n                        movej-=1\r\n                elif direction == 'R':\r\n                    steps=0\r\n                    while movej<c and arena[movei][movej] != '#':\r\n                        steps = abs(j-movej)\r\n                        if steps in grid[movei][movej]:\r\n                            grid[movei][movej][steps]+=1\r\n                        else:\r\n                            grid[movei][movej][steps]=1\r\n                        movej+=1\r\n            #print(*grid,sep='\\n')\r\n            meetings=0\r\n            for i in range(r):\r\n                for j in range(c):\r\n                    for meets in grid[i][j].values():\r\n                        if meets>=2:\r\n                            meetings+=nCr(meets,2)\r\n            print(int(meetings))\r\n\r\n\r\n    except (ValueError,EOFError) as e:\r\n        break", "def find_next(arr):\r\n    ans=[[set() for i in range(len(arr[0]))] for j in range(len(arr))]\r\n    for i in range(len(arr)):\r\n        for j in range(len(arr[0])):\r\n            if j>0:\r\n                if 'R' in arr[i][j-1] and '#' not in arr[i][j]:\r\n                    ans[i][j].add('R')\r\n            if j<len(arr[0])-1:\r\n                if 'L' in arr[i][j+1] and '#' not in arr[i][j]:\r\n                    ans[i][j].add('L')\r\n            if i>0:\r\n                if 'D' in arr[i-1][j] and '#' not in arr[i][j]:\r\n                    ans[i][j].add('D')\r\n            if i<len(arr)-1:\r\n                if 'U' in arr[i+1][j] and '#' not in arr[i][j]:\r\n                    ans[i][j].add('U')\r\n            if '#' in arr[i][j]:\r\n                ans[i][j].add(\"#\")\r\n    return ans\r\n\r\ndef cal(arr):\r\n    ans=0\r\n    for i in range(len(arr)):\r\n        for j in range(len(arr[0])):\r\n            n=len(arr[i][j])\r\n            ans+=n*(n-1)//2\r\n    return ans\r\nt=int(input())\r\nfor _ in range(t):\r\n    r,c=list(map(int,input().split()))\r\n    arr=[]\r\n    for i in range(r):\r\n        toadd=list(map(set,list(input())))\r\n        arr+=[toadd]\r\n    ans=0\r\n    for i in range(max(r,c)):\r\n        arr=find_next(arr)\r\n        ans+=cal(arr)\r\n    print(ans)\r\n        \r\n", "t = int(input())\nfor x in range(t):\n    r, c = map(int, input().split())\n    antU = []\n    antD = []\n    antR = []\n    antL = []\n    anteater = []\n    j = 0\n    for y in range(r):\n        s = input()\n        i = 0\n        for z in s:\n            if(z == 'U'):\n                antU.append([j, i, 0, i])\n            elif(z == 'D'):\n                antD.append([j, i, r - 1, i])\n            elif(z == 'R'):\n                antR.append([j, i, j, c - 1])\n            elif(z == 'L'):\n                antL.append([j, i, j, 0])\n            elif(z == '#'):\n                anteater.append([j, i])\n            i = i + 1\n        j = j + 1\n    for y in anteater:\n        for z in antU:\n            if(y[1] == z[1] and z[0] > y[0] and z[2] <= y[0]):\n                z[2] = y[0] + 1     \n        for z in antD:\n            if(y[1] == z[1] and z[0] < y[0] and z[2] >= y[0]):\n                z[2] = y[0] - 1\n        for z in antR:\n            if(y[0] == z[0] and z[1] < y[1] and z[3] >= y[1]):\n                z[3] = y[1] - 1\n        for z in antL:\n            if(y[0] == z[0] and z[1] > y[1] and z[3] <= y[1]):\n                z[3] = y[1] + 1\n    total = 0\n    for y in antU:\n        for z in antD:\n            if(y[1] == z[1] and y[2] <= z[2] and y[0] > z[0]):\n                if((y[0] - z[0]) % 2 == 0):\n                    total = total + 1\n        for z in antR:\n            if(y[1] - z[1] == y[0] - z[0]):\n                if(y[2] <= z[0] and z[3] >= y[1]):\n                    if(y[0] > z[0] and y[1] > z[1]):\n                        total = total + 1\n        for z in antL:\n            if(y[1] - z[1] == z[0] - y[0]):\n                if(z[3] <= y[1] and y[2] <= z[0]):\n                    if(y[0] > z[0] and y[1] < z[1]):\n                        total = total + 1\n    for y in antL:\n        for z in antR:\n            if((y[1] - z[1]) % 2 == 0):\n                if(y[0] == z[0] and y[3] <= z[3] and y[1] > z[1]):\n                    total = total + 1\n        for z in antD:\n            if(y[0] - z[0] == y[1] - z[1]):\n                if(y[3] <= z[1] and z[2] >= y[0]):\n                    if(y[0] > z[0] and y[1] > z[1]):\n                        total = total + 1\n    for y in antD:\n        for z in antR:\n            if(y[0] - z[0] == z[1] - y[1]):\n                if(z[3] >= y[1] and y[2] >= z[0]):\n                    if(y[0] < z[0] and y[1] > z[1]):\n                        total = total + 1\n    print(total)", "# cook your dish here\nfor i in range(int(input())):\n    r,c = [int(a) for a in input().split()]\n    a = []\n    for i in range(r):\n        a.append(input())\n    \n    n = max(r,c)\n    lst = [0 for i in range(n)]\n    complete_list = []\n    for i in range(r):\n        z = []\n        for j in range(c):\n            z.append(lst.copy())\n        complete_list.append(z)\n    \n    for i in range(r):\n        for j in range(c):\n            if a[i][j] == 'R':\n                l = 1\n                for p in range(j+1, c):\n                    if a[i][p] == '#':\n                        break\n                    complete_list[i][p][l] += 1\n                    l += 1\n\n            elif a[i][j] == 'L':\n                l = 1\n                for p in range(j-1,-1,-1):\n                    if a[i][p] == '#':\n                        break\n                    complete_list[i][p][l] += 1\n                    l += 1\n\n            elif a[i][j] == 'D':\n                l = 1\n                for p in range(i+1,r):\n                    if a[p][j] == '#':\n                        break\n                    complete_list[p][j][l] += 1\n                    l += 1\n\n            elif a[i][j] == 'U':\n                l = 1\n                for p in range(i-1,-1,-1):\n                    if a[p][j] == '#':\n                        break\n                    complete_list[p][j][l] += 1\n                    l += 1\n\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            for p in range(n):\n                if complete_list[i][j][p] == 2:\n                    ans += 1\n                elif complete_list[i][j][p] == 3:\n                    ans += 3\n                elif complete_list[i][j][p] == 4:\n                    ans += 6          \n    print(ans)\n            \n\n            \n\n    ", "import copy\r\nfor t in range(int(input())):\r\n    r,c = list(map(int,input().split()))\r\n    grid = []\r\n    cpy = []\r\n    for i in range(r):\r\n        grid.append(list(input()))\r\n    change = True\r\n    ans = 0\r\n    while(change):\r\n        cpy = [[\"\" for i in range(c)] for j in range(r)]\r\n        change = False\r\n        for i in range(r):\r\n            for j in range(c):\r\n                for ele in grid[i][j]:\r\n                    if(ele==\"D\" and i<r-1):\r\n                        change = True\r\n                        if(grid[i+1][j]!=\"#\"):\r\n                            cpy[i+1][j] += \"D\"\r\n                    elif(ele==\"U\" and i>0):\r\n                        change = True\r\n                        if(grid[i-1][j]!='#'):\r\n                            cpy[i-1][j] += \"U\"\r\n                    elif(ele==\"R\" and j<c-1):\r\n                        change = True\r\n                        if(grid[i][j+1]!=\"#\"):\r\n                            cpy[i][j+1] += \"R\"\r\n                    elif(ele==\"L\" and j>0):\r\n                        change = True\r\n                        if(grid[i][j-1]!='#'):\r\n                            cpy[i][j-1] += \"L\"\r\n                    elif(ele==\"#\"):\r\n                        cpy[i][j] = \"#\"\r\n        for i in range(r):\r\n            for j in range(c):\r\n                s = cpy[i][j]\r\n                ans += len(s)*(len(s)-1)/2\r\n                grid[i][j] = s\r\n    print(int(ans))", "for t in range(int(input())):\r\n    r,c = list(map(int,input().split()))\r\n    grid = []\r\n    cpy = []\r\n    for i in range(r):\r\n        grid.append(list(input()))\r\n    change = True\r\n    ans = 0\r\n    while(change):\r\n        cpy = [[\"\" for i in range(c)] for j in range(r)]\r\n        change = False\r\n        for i in range(r):\r\n            for j in range(c):\r\n                for ele in grid[i][j]:\r\n                    if(ele==\"D\" and i<r-1):\r\n                        change = True\r\n                        if(grid[i+1][j]!=\"#\"):\r\n                            cpy[i+1][j] += \"D\"\r\n                    elif(ele==\"U\" and i>0):\r\n                        change = True\r\n                        if(grid[i-1][j]!='#'):\r\n                            cpy[i-1][j] += \"U\"\r\n                    elif(ele==\"R\" and j<c-1):\r\n                        change = True\r\n                        if(grid[i][j+1]!=\"#\"):\r\n                            cpy[i][j+1] += \"R\"\r\n                    elif(ele==\"L\" and j>0):\r\n                        change = True\r\n                        if(grid[i][j-1]!='#'):\r\n                            cpy[i][j-1] += \"L\"\r\n                    elif(ele==\"#\"):\r\n                        cpy[i][j] = \"#\"\r\n        for i in range(r):\r\n            for j in range(c):\r\n                s = cpy[i][j]\r\n                ans += len(s)*(len(s)-1)/2\r\n                grid[i][j] = s\r\n    print(int(ans))\r\n                \r\n                \r\n                    \r\n                \r\n                \r\n                    \r\n", "def sumOfN(n): return n*(n-1)//2\r\n\r\ndef display():\r\n\tfor i in range(r):\r\n\t\tfor j in range(c):\r\n\t\t\tprint(grid[i][j], end =\" \")\r\n\t\tprint()\r\n\t\r\n\tprint()\r\n\r\nfor t in range(int(input())):\r\n\tr,c = map(int,input().split())\r\n\tgrid = []\r\n\tpairs = 0\r\n\tfor i in range(r):\r\n\t\tto_add = []\r\n\t\tfor x in input().strip(): to_add.append([x,1])\r\n\t\tgrid.append(to_add)\t\r\n\r\n\t#display()\r\n\tsteps = max(r,c)\r\n\tfor _ in range(steps):\r\n\t\tfor i in range(r):\r\n\t\t\tfor j in range(c):\r\n\t\t\t\ts = grid[i][j][0][:grid[i][j][1]]\r\n\t\t\t\tif s==\"#\" or s==\"-\":\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t\r\n\t\t\t\tfor ants in s:\r\n\t\t\t\t\tif ants==\"U\":\r\n\t\t\t\t\t\tif i>0:\r\n\t\t\t\t\t\t\tif grid[i-1][j][0]!=\"#\": grid[i-1][j][0] += \"U\"\r\n\t\t\t\t\telif ants==\"D\":\r\n\t\t\t\t\t\tif i<r-1:\r\n\t\t\t\t\t\t\tif grid[i+1][j][0]!=\"#\": grid[i+1][j][0] += \"D\"\r\n\t\t\t\t\telif ants==\"L\":\r\n\t\t\t\t\t\tif j>0:\r\n\t\t\t\t\t\t\tif grid[i][j-1][0]!=\"#\": grid[i][j-1][0] += \"L\"\r\n\t\t\t\t\telif ants==\"R\":\r\n\t\t\t\t\t\tif j<c-1:\r\n\t\t\t\t\t\t\tif grid[i][j+1][0]!=\"#\": grid[i][j+1][0] += \"R\"\r\n\r\n\t\t\t\tgrid[i][j][0] = (\"-\" if len(grid[i][j][0])==grid[i][j][1] else grid[i][j][0][grid[i][j][1]:])\r\n\r\n\t\tfor i in range(r):\r\n\t\t\tfor j in range(c):\r\n\t\t\t\tif grid[i][j][0].lstrip('-')!=\"\":\r\n\t\t\t\t\tgrid[i][j][0] = grid[i][j][0].lstrip('-')\r\n\t\t\t\t\tpairs += sumOfN(len(grid[i][j][0]))\r\n\t\t\t\tgrid[i][j][1] = len(grid[i][j][0])\r\n\t\t\r\n\t\t#display()\r\n\tprint(pairs)", "# cook your dish here\n'''test=int(input())\nfor _ in range(test):\n    r,c=map(int,input().split())\n    \n    pathant=[]\n    rc=[]\n    for i in range(r):\n        ci=list(map(str,input()))\n        rc.append(ci)\n        for j in range(c):\n            if(ci[j]!='#' and ci[j]!='-'):\n                pathant.append([ci[j],i,j])\n            \n    count=0\n    parr=[]\n    print(pathant)\n    for i in range(len(pathant)):\n        temp=[]\n        if(pathant[i][0]=='L'):\n            count=pathant[i][2]\n            for j in range(count,-1,-1):\n                if(rc[pathant[i][1]][j]=='#'):\n                    break\n                temp.append([pathant[i][1],j])\n            parr.append(temp)\n        if(pathant[i][0]=='R'):\n            count=pathant[i][2]\n            for j in range(count,c):\n                if(rc[pathant[i][1]][j]=='#'):\n                    break\n                temp.append([pathant[i][1],j])\n            parr.append(temp)\n        if(pathant[i][0]=='U'):\n            count=pathant[i][1]\n            for j in range(count,-1,-1):\n                if(rc[j][pathant[i][2]]=='#'):\n                    break\n                temp.append([j,pathant[i][2]])\n            parr.append(temp)\n        if(pathant[i][0]=='D'):\n            count=pathant[i][1]\n            for j in range(count,r):\n                if(rc[j][pathant[i][2]]=='#'):\n                    break\n                temp.append([j,pathant[i][2]])\n            parr.append(temp)\n    print(parr)\n    length=len(parr)\n    noe=[0]*len(parr)\n    nop=0\n    pointer=0\n    lim=max(r,c)\n    temp=[]\n    while pointer < lim:\n        temp=[]\n        for x in range(length):\n            if(pointer<=len(parr[x])):\n                temp.append(parr[x][pointer])'''\n                \nfrom collections import defaultdict as df\nt=int(input())\nfor x in range(t):\n    r,c=list(map(int,input().split()))\n    p=df(list)\n    a=[[0]*c for i in range(r)]\n    for i in range(r):\n        s=input().rstrip()\n        for j in range(c):\n            a[i][j]=s[j]\n    for i in range(r):\n        for j in range(c):\n            timer=0\n            if a[i][j]=='U':\n                \n                for k in range(i-1,-1,-1):\n                    if a[k][j]!='#':\n                        timer+=1\n                        p[str(k)+' '+str(j)].append(timer)\n                    else:\n                        break\n            if a[i][j]=='R':\n                for k  in range(j+1,c):\n                    if a[i][k]!='#':\n                        timer+=1\n                        p[str(i)+' '+str(k)].append(timer)\n                    else:\n                        break\n            if a[i][j]=='D':\n                for k in range(i+1,r):\n                    if a[k][j]!='#':\n                        timer+=1\n                        p[str(k)+' '+str(j)].append(timer)\n                    else:\n                        break\n            if a[i][j]=='L':\n                for  k in range(j-1,-1,-1):\n                    if a[i][k]!='#':\n                        timer+=1\n                        p[str(i)+' '+str(k)].append(timer)\n                    else:\n                        break\n    #print(p)\n    total=0\n    #print(p)\n    for i in p:\n        y=set(p[i])\n        for j in y:\n            if p[i].count(j)>1:\n                n1=p[i].count(j)\n                total+=(n1*(n1-1))//2\n    print(total)\n                \n                \n        \n                    \n                        \n                        \n                \n        \n            \n    \n        \n            \n        \n        \n        \n                \n            \n            \n        \n    \n    ", "# cook your dish here\nfrom collections import defaultdict\nfrom math import factorial\nt = int(input())\n\nfor _ in range(t):\n    n,m = map(int,input().split())\n    l = []\n    hash = defaultdict(int)\n    for i in range(n):\n        k = list(input())\n        l.append(k)\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            count = 0\n            if l[i][j] == 'R':\n                x = i\n                y = j\n\n                while y<m:\n                    if l[x][y]!='#':\n                        hash[(count,x,y)]+=1\n                    else:\n                        break\n\n                    count+=1\n                    y+=1\n\n            elif l[i][j] == 'L':\n                    x = i\n                    y = j\n                    count = 0\n                    while y>=0:\n                       if l[x][y]!='#':\n                          hash[(count,x,y)]+=1\n                       else:\n                           break\n\n                       count+=1\n\n\n                       y-=1\n            elif l[i][j] == 'U':\n                x = i\n                y = j\n                count = 0\n                while x>=0:\n                    if l[x][y]!='#':\n                        hash[(count,x,y)]+=1\n                    else:\n                        break\n\n                    count+=1\n                    x-=1\n            elif l[i][j] == 'D' :\n                x = i\n                y = j\n                count = 0\n                while x<n:\n                    if l[x][y]!='#':\n                        hash[(count,x,y)]+=1\n                    else:\n                        break\n\n                    count+=1\n                    x+=1\n\n\n    for i in hash.keys():\n\n        z = hash[i]\n        if z>1:\n          ans +=  factorial(z)//((factorial(z-2))*factorial(2))\n\n    # print(hash.keys())\n    print(ans)\n\n\n\n\n", "for _ in range(int(input())):\r\n    r,c=map(int,input().split())\r\n    d=[]\r\n    s=0\r\n    for _ in range(r):\r\n        a=input()\r\n        a=[i for i in a]\r\n        d.append(a)\r\n    for i in range(r):\r\n        for j in range(c):\r\n            if d[i][j]=='R':\r\n                for k in range(j,c):\r\n                    if d[i][k]=='#':break\r\n                    elif d[i][k]=='L' and not((k-j) & 1):s+=1\r\n                l=i+1\r\n                k=j+1\r\n                while k<c and l<r:\r\n                    f=0\r\n                    if d[l][k]=='U':\r\n                        for m in range(j,k+1):\r\n                            if d[i][m]=='#':\r\n                                f=1\r\n                                break\r\n                        if f==0:\r\n                         for m in range(i,l+1):\r\n                             if d[m][k]=='#':\r\n                                 f=1\r\n                                 break\r\n                        if f==0:s+=1\r\n                    k+=1\r\n                    l+=1\r\n            elif d[i][j]=='L':\r\n                l=i+1\r\n                k=j-1\r\n                while l<r and k>-1:\r\n                  if d[l][k]=='U':\r\n                    f=0\r\n                    for m in range(j,k-1,-1):\r\n                        if d[i][m] == '#':\r\n                            f = 1\r\n                            break\r\n                    if f == 0:\r\n                        for m in range(i,l+1):\r\n                            if d[m][k] == '#':\r\n                                f=1\r\n                                break\r\n                    if f == 0: s += 1\r\n                  l+=1\r\n                  k-=1\r\n            elif d[i][j]=='D':\r\n                for m in range(i,r):\r\n                    if d[m][j]=='#':break\r\n                    elif d[m][j]=='U' and not((m-i) & 1):s+=1\r\n                l=i+1\r\n                k=j+1\r\n                while l<r and k<c:\r\n                    f=0\r\n                    if d[l][k]=='L':\r\n                        for m in range(i,l+1):\r\n                            if d[m][j] == '#':\r\n                                f = 1\r\n                                break\r\n                        if f == 0:\r\n                            for m in range(j,k+1):\r\n                                if d[l][m] == '#':\r\n                                    f = 1\r\n                                    break\r\n                        if f == 0: s += 1\r\n                    l += 1\r\n                    k += 1\r\n                l=i+1\r\n                k=j-1\r\n                while l<r and k>-1:\r\n                    f=0\r\n                    if d[l][k]=='R':\r\n                        for m in range(i,l+1):\r\n                            if d[m][j]=='#':\r\n                                f=1\r\n                                break\r\n                        if f==0:\r\n                            for m in range(k,j+1):\r\n                                if d[l][m]=='#':\r\n                                    f=1\r\n                                    break\r\n                        if f==0:s+=1\r\n                    l+=1\r\n                    k-=1\r\n    print(s)", "t=int(input())\r\nfor i in range(t):\r\n    r,c=map(int,input().split())\r\n    arr=[[\"\"for x in range(c)]for y in range(r)]\r\n    for j in range(r):\r\n        arr[j]=list(str(input()))\r\n    # for j in range(r):\r\n    #     print(arr[j])\r\n    # anrnum=0\r\n    anr=['U','D','L','R']\r\n    # for j in range(r):\r\n    #     for k in range(c):\r\n    #         if(arr[j][k]in anr):\r\n    #             anrnum+=1\r\n    meet=0\r\n    pos=[[[0 for z in range(c)] for y in range(r)] for x in range(max(r,c))]\r\n    j=0\r\n    k=0\r\n    while j <r:\r\n        j_init = j\r\n        # if(j==r):\r\n            # print(\"Fault:\"+str(j))\r\n        k=0\r\n        while k <c:\r\n            k_init = k\r\n            # if(j==r or k==c):\r\n            #     print(\"Fault:\"+str(j)+\" \"+str(k))\r\n            # print(str(j) + \" \" + str(k))\r\n            if(arr[j][k] in anr):\r\n\r\n                for z in range(max(r, c)):\r\n                    if(j==r or k==c or arr[j][k]==\"#\" or k==-1 or j==-1):\r\n                        break\r\n                    if(pos[z][j][k]>0):\r\n                        meet+=pos[z][j][k]\r\n                    # else:\r\n                        # print(str(z) + \" \" + str(j) + \" \" + str(k))\r\n                    pos[z][j][k]+=1\r\n                    if(arr[j_init][k_init]=='D'):\r\n                        j+=1\r\n                    elif(arr[j_init][k_init]=='U'):\r\n                        j-=1\r\n                    elif (arr[j_init][k_init] == 'L'):\r\n                        k -= 1\r\n                    elif (arr[j_init][k_init] == 'R'):\r\n                        k += 1\r\n            k=k_init+1\r\n            j = j_init\r\n        j=j_init+1\r\n    print(meet)\r\n    # for iter in range(max(r,c)):\r\n    #     print(pos[iter])\r\n\r\n\r\n\r\n", "for _ in range(int(input())):\r\n\tr, c = map(int, input().split())\r\n\tm = [[*input()] for _ in range(r)]\r\n\r\n\tans = 0\r\n\tp = []\r\n\r\n\tfor i in range(r):\r\n\t\tfor j in range(c):\r\n\t\t\tif m[i][j] in 'UDLR':\r\n\t\t\t\tp.append([i, j, m[i][j]])\r\n\r\n\tfrom collections import Counter\r\n\r\n\tfor i in range(max(r, c) + 1):\r\n\t\tz = Counter([tuple(i[:2]) for i in p])\r\n\t\tfor j in z.values():\r\n\t\t\tans += (j * (j - 1)) // 2\r\n\r\n\t\td = set()\r\n\r\n\t\tfor j in range(len(p)):\r\n\t\t\tif p[j][2] == 'U':\r\n\t\t\t\tif p[j][0] > 0 and m[p[j][0] - 1][p[j][1]] != '#':\r\n\t\t\t\t\tp[j][0] -= 1\r\n\t\t\t\telse:\r\n\t\t\t\t\td.add(j)\r\n\t\t\telif p[j][2] == 'R':\r\n\t\t\t\tif p[j][1] < c - 1 and m[p[j][0]][p[j][1] + 1] != '#':\r\n\t\t\t\t\tp[j][1] += 1\r\n\t\t\t\telse:\r\n\t\t\t\t\td.add(j)\r\n\t\t\telif p[j][2] == 'L':\r\n\t\t\t\tif p[j][1] > 0 and m[p[j][0]][p[j][1] - 1] != '#':\r\n\t\t\t\t\tp[j][1] -= 1\r\n\t\t\t\telse:\r\n\t\t\t\t\td.add(j)\r\n\t\t\telse:\r\n\t\t\t\tif p[j][0] < r - 1 and m[p[j][0] + 1][p[j][1]] != '#':\r\n\t\t\t\t\tp[j][0] += 1\r\n\t\t\t\telse:\r\n\t\t\t\t\td.add(j)\r\n\r\n\t\tp = [p[i] for i in set([*range(len(p))]) - d]\r\n\r\n\tprint(ans)", "# your code goes here\n# cook your dish here\nfrom collections import Counter\nt=int(input())\nfor x in range(t):\n    inp = list(map(int,input().split()))\n    r=inp[0]\n    c=inp[1]\n    listo=[]\n    listb=set()\n    pair=0\n    for i in range(r):\n        \n        string=input()\n        for j in range(len(string)):\n            if(string[j]=='U'):\n                listo.append([i,j,1])\n            elif(string[j]=='D'):\n                listo.append([i,j,2])\n            elif(string[j]=='L'):\n                listo.append([i,j,3])\n            elif(string[j]=='R'):\n                listo.append([i,j,4])\n            elif(string[j]=='#'):\n                listb.add((i,j))\n    \n                \n    for y in range(max(r,c)):\n        nants=Counter()\n        for i in range(len(listo)):\n            if(listo[i][2]!=5):\n                nants[tuple(listo[i][:-1])]+=1\n        for key in nants:\n            pair+=(nants[key]*(nants[key]-1))//2\n        \n        for ant in listo:\n            if(ant[2]==1):\n                 ant[0]-=1\n            elif(ant[2]==2):\n                ant[0]+=1\n            elif(ant[2]==3):\n                ant[1]-=1\n            elif(ant[2]==4):\n                ant[1]+=1\n            if(tuple(ant[:-1])) in listb:\n                ant[2]=5\n            elif(ant[0]<0) or ant[0]>=r:\n                ant[2]=5\n            elif ant[1]<0 or ant[1]>=c:\n                ant[2]=5\n    print(pair)\n            \n            \n             \n    \n        \n                \n        \n    \n", "T = int(input())\r\n\r\nwhile T > 0:\r\n    R, C = input().split()\r\n    R = int(R)\r\n    C = int(C)\r\n    output = [ [0] * C for i in range(R) ]\r\n    for i in range(R):\r\n        for j in range(C):\r\n            output[i][j] = dict()\r\n    matrix = [0] * R\r\n    for i in range(R):\r\n        matrix[i] = input()\r\n    for i in range(R):\r\n        for j in range(C):\r\n            if matrix[i][j] == 'R':\r\n                column = j + 1\r\n                while column < C and matrix[i][column] != '#':\r\n                    output[i][column][column-j] = output[i][column].get(column-j,0) + 1\r\n                    column = column + 1\r\n            elif matrix[i][j] == 'L':\r\n                column = j - 1\r\n                while column >= 0 and matrix[i][column] != '#':\r\n                    output[i][column][j-column] = output[i][column].get(j-column,0) + 1\r\n                    column = column - 1\r\n            elif matrix[i][j] == 'U':\r\n                row = i - 1\r\n                while row >= 0 and matrix[row][j] != '#':\r\n                    output[row][j][i-row] = output[row][j].get(i-row,0) + 1\r\n                    row = row - 1\r\n            elif matrix[i][j] == 'D':\r\n                row = i + 1\r\n                while row < R and matrix[row][j] != '#':\r\n                    output[row][j][row-i] = output[row][j].get(row-i,0) + 1\r\n                    row = row + 1\r\n    no_of_pairs = 0\r\n    for i in range(R):\r\n        for j in range(C):\r\n            for no_of_steps, count in output[i][j].items():\r\n                if count > 1:\r\n                    no_of_pairs = no_of_pairs + (count*(count-1)) // 2\r\n    print(no_of_pairs)\r\n    T = T - 1", " \nimport math as mt \ndef countPairs(arr, n): \n\n\tmp = dict() \n\tfor i in range(n): \n\t\tif arr[i] in mp.keys(): \n\t\t\tmp[arr[i]] += 1\n\t\telse: \n\t\t\tmp[arr[i]] = 1\n\tans = 0\n\tfor it in mp: \n\t\tcount = mp[it] \n\t\tans += (count * (count - 1)) // 2\n\treturn ans \n\n# cook your dish here\nfor _ in range(int(input())):\n    (r,c)= map(int,input().split())\n    has = []\n    simple = []\n    for i in range(r):\n        lis = input()\n        lis = list(lis)\n        for j in range(c):\n            if(lis[j]=='#'):\n                has.append([i,j])\n            elif(lis[j]!='-'):\n                simple.append([lis[j],[i,j]])\n    sum1=0\n    for j in range(max(r,c)):\n        he ,del1= [],[]\n        flag = 0\n        for i in simple:\n            if(i[0]=='R' and i[1][1]+j+1<=c):\n                if(has.count([i[1][0],i[1][1]+j+1])==0):\n                    he.append((i[1][0],i[1][1]+j+1))\n                else:\n                    del1.append(i)\n            elif(i[0]=='D' and i[1][0]+j+1<=r):\n                if(has.count([i[1][0]+j+1,i[1][1]])==0):\n                    he.append((i[1][0]+j+1,i[1][1]))\n                else:\n                    del1.append(i)\n                    \n            elif(i[0]=='L' and i[1][1]-j-1>=0):\n                if(has.count([i[1][0],i[1][1]-j-1])==0):\n                    he.append((i[1][0],i[1][1]-j-1))\n                else:\n                    del1.append(i)\n                    \n            elif(i[0]=='U' and (i[1][0]-j-1)>=0):\n                if(has.count([i[1][0]-j-1,i[1][1]])==0):\n                    he.append((i[1][0]-j-1,i[1][1]))\n                else:\n                   del1.append(i)\n        sum1+=countPairs(he,len(he))\n        for p in del1:\n            simple.remove(p)\n    print(sum1)", "import math\n\ndef nCr(n):\n    f = math.factorial\n    return f(n) // f(2) // f(n-2)\n# Python3 program to count of index pairs \n# with equal elements in an array. \nimport math as mt \n\n# Return the number of pairs with \n# equal values. \ndef countPairs(arr, n): \n\n\tmp = dict() \n\n\t# Finding frequency of each number. \n\tfor i in range(n): \n\t\tif arr[i] in mp.keys(): \n\t\t\tmp[arr[i]] += 1\n\t\telse: \n\t\t\tmp[arr[i]] = 1\n\t\t\t\n\t# Calculating pairs of each value. \n\tans = 0\n\tfor it in mp: \n\t\tcount = mp[it] \n\t\tans += (count * (count - 1)) // 2\n\treturn ans \n\n# cook your dish here\nfor _ in range(int(input())):\n    (r,c)= map(int,input().split())\n    has = []\n    simple = []\n    for i in range(r):\n        lis = input()\n        lis = list(lis)\n        for j in range(c):\n            if(lis[j]=='#'):\n                has.append([i,j])\n            elif(lis[j]!='-'):\n                simple.append([lis[j],[i,j]])\n    sum1=0\n    for j in range(max(r,c)):\n        he ,del1= [],[]\n        flag = 0\n        for i in simple:\n            if(i[0]=='R' and i[1][1]+j+1<=c):\n                if(has.count([i[1][0],i[1][1]+j+1])==0):\n                    he.append((i[1][0],i[1][1]+j+1))\n                else:\n                    del1.append(i)\n            elif(i[0]=='D' and i[1][0]+j+1<=r):\n                if(has.count([i[1][0]+j+1,i[1][1]])==0):\n                    he.append((i[1][0]+j+1,i[1][1]))\n                else:\n                    del1.append(i)\n                    \n            elif(i[0]=='L' and i[1][1]-j-1>=0):\n                if(has.count([i[1][0],i[1][1]-j-1])==0):\n                    he.append((i[1][0],i[1][1]-j-1))\n                else:\n                    del1.append(i)\n                    \n            elif(i[0]=='U' and (i[1][0]-j-1)>=0):\n                if(has.count([i[1][0]-j-1,i[1][1]])==0):\n                    he.append((i[1][0]-j-1,i[1][1]))\n                else:\n                   del1.append(i)\n        sum1+=countPairs(he,len(he))\n        for p in del1:\n            simple.remove(p)\n    print(sum1)", "def check_left_hor(mat, row, col, r,c, z, diff):\n\tif 0<=(z+diff)<c and mat[row][z+diff]==\"L\":\n\n\t\tfor q in range(z+1, z+diff):\n\t\t\tif mat[row][q] == \"#\":\n\t\t\t\treturn False\n\n\t\treturn True\n\n\treturn False\n\n\ndef check_left_ver(mat, row, col, r,c, z, diff):\n\tif 0<=(col+diff)<c and mat[z][col+diff]==\"L\":\n\n\t\tfor q in range(col+1, col+diff):\n\t\t\tif mat[z][q] == \"#\":\n\t\t\t\treturn False\n\n\t\treturn True\n\n\treturn False\n\n\ndef check_right_hor(mat, row, col, r,c, z, diff):\n\tif 0<=(z-diff)<c and mat[row][z-diff] == \"R\":\n\n\t\tfor q in range(z-1, z-diff, -1):\n\t\t\tif mat[row][q] == \"#\":\n\t\t\t\treturn False\n\n\t\treturn True\n\n\treturn False\n\n\ndef check_right_ver(mat, row, col, r,c, z, diff):\n\tif 0<=(col-diff)<c and mat[z][col-diff] == \"R\":\n\n\t\tfor q in range(col-1, col-diff, -1):\n\t\t\tif mat[z][q] == \"#\":\n\t\t\t\treturn False\n\n\t\treturn True\n\n\treturn False\n\n\ndef check_down_hor(mat, row, col, r,c, z, diff):\n\tif 0<=(row-diff)<r and mat[row-diff][z] == \"D\":\n\t\t\n\t\tfor q in range(row-diff, row):\n\t\t\tif mat[q][z] == \"#\":\n\t\t\t\treturn False\n\n\t\treturn True\n\n\treturn False\n\n\ndef check_down_ver(mat, row, col, r,c, z, diff):\n\tif 0<=(z-diff)<r and mat[z-diff][col] == \"D\":\n\t\t\n\t\tfor q in range(z-diff, z):\n\t\t\tif mat[q][col] == \"#\":\n\t\t\t\treturn False\n\n\t\treturn True\n\n\treturn False\n\n\ndef check_up_hor(mat, row, col, r,c, z, diff):\n\t# print(z, row, diff)\n\tif 0<=(row+diff)<r and mat[row+diff][z] == \"U\":\n\t\tfor q in range(row+1, row+diff):\n\t\t\tif mat[q][z] == \"#\":\n\t\t\t\treturn False\n\n\t\treturn True\n\n\treturn False\n\ndef check_up_ver(mat, row, col, r,c, z, diff):\n\n\tif 0<=(z+diff)<r and mat[z+diff][col] == \"U\":\n\t\tfor q in range(z+1, z+diff):\n\t\t\tif mat[q][col] == \"#\":\n\t\t\t\treturn False\n\n\t\treturn True\n\n\treturn False\n\n\nt = int(input())\n\nfor i in range(t):\n\tr, c = map(int, input().split())\n\n\tmat = []\n\tcount = 0\n\n\tfor j in range(r):\n\t\ttemp = []\n\t\ts = input()\n\n\t\tfor a in range(c):\n\t\t\ttemp.append(s[a])\n\t\t\tif s[a]!=\"-\" and s[a]!=\"#\":\n\t\t\t\t# print(s[a]==\"-\")\n\t\t\t\tcount+=1\n\n\t\tmat.append(temp)\n\n\t# print(count, mat)\n\tmeets = 0\n\n\tfor row in range(r):\n\n\t\tfor col in range(c):\n\n\t\t\tif mat[row][col]==\"-\" or mat[row][col]==\"#\":\n\t\t\t\tcontinue\n\n\t\t\telse:\n\n\t\t\t\tif mat[row][col] == \"U\":\n\n\t\t\t\t\tfor z in range(row-1, -1, -1):\n\t\t\t\t\t\tif mat[z][col] == \"#\":\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tdiff = row-z\n\t\t\t\t\t\t\tif check_left_ver(mat, row, col, r, c, z, diff):\n\t\t\t\t\t\t\t\tmeets+=1\n\n\t\t\t\t\t\t\tif check_right_ver(mat, row, col, r, c, z, diff):\n\t\t\t\t\t\t\t\tmeets+=1\n\n\t\t\t\t\t\t\tif check_down_ver(mat, row, col, r, c, z, diff):\n\t\t\t\t\t\t\t\tmeets+=1\n\n\n\t\t\t\tif mat[row][col] == \"D\":\n\n\t\t\t\t\tfor z in range(row+1, r):\n\t\t\t\t\t\tif mat[z][col] == \"#\":\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t# print(col-row+z, col, row, z)\n\t\t\t\t\t\t\tdiff = z-row\n\t\t\t\t\t\t\tif check_left_ver(mat, row, col, r, c, z, diff):\n\t\t\t\t\t\t\t\tmeets+=1\n\n\t\t\t\t\t\t\tif check_right_ver(mat, row, col, r, c, z, diff):\n\t\t\t\t\t\t\t\tmeets+=1\n\n\t\t\t\t\t\t\tif check_up_ver(mat, row, col, r, c, z, diff):\n\t\t\t\t\t\t\t\tmeets+=1\n\n\t\t\t\tif mat[row][col] == \"L\":\n\n\t\t\t\t\tfor z in range(col-1, -1, -1):\n\t\t\t\t\t\tif mat[row][z] == \"#\":\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tdiff = col-z\n\t\t\t\t\t\t\t# print(col-row+z, col, row, z)\n\t\t\t\t\t\t\tif check_down_hor(mat, row, col, r, c, z, diff):\n\t\t\t\t\t\t\t\tmeets+=1\n\n\t\t\t\t\t\t\tif check_right_hor(mat, row, col, r, c, z, diff):\n\t\t\t\t\t\t\t\tmeets+=1\n\n\t\t\t\t\t\t\tif check_up_hor(mat, row, col, r, c, z, diff):\n\t\t\t\t\t\t\t\tmeets+=1\n\n\t\t\t\tif mat[row][col] == \"R\":\n\n\t\t\t\t\tfor z in range(col+1, c):\n\t\t\t\t\t\tif mat[row][z] == \"#\":\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t# print(col-row+z, col, row, z)\n\t\t\t\t\t\t\tdiff = z-col\n\t\t\t\t\t\t\tif check_down_hor(mat, row, col, r, c, z, diff):\n\t\t\t\t\t\t\t\tmeets+=1\n\n\t\t\t\t\t\t\tif check_left_hor(mat, row, col, r, c, z, diff):\n\t\t\t\t\t\t\t\tmeets+=1\n\n\n\t\t\t\t\t\t\tif check_up_hor(mat, row, col, r, c, z, diff):\n\t\t\t\t\t\t\t\tmeets+=1\n\n\n\tprint(meets//2)", "for _ in range(int(input())):\r\n    r, c = map(int, input().split())\r\n    board = []\r\n    for i in range(r):\r\n        x = input()\r\n        board.append(x)\r\n\r\n    coll = []\r\n    for i in range(r):\r\n        coll.append([])\r\n        for j in range(c):\r\n            coll[i].append([])\r\n\r\n    for i in range(r):\r\n        for j in range(c):\r\n            if board[i][j]=='-' or board[i][j]=='#':\r\n                pass\r\n            else:\r\n                cnt = 1\r\n                if board[i][j]=='D':\r\n                    for k in range(i+1,r):\r\n                        if board[k][j]=='#':\r\n                            break\r\n                        coll[k][j].append(cnt)\r\n                        cnt+=1\r\n\r\n                if board[i][j]=='U':\r\n                    for k in range(i-1,-1,-1):\r\n                        if board[k][j]=='#':\r\n                            break\r\n                        coll[k][j].append(cnt)\r\n                        cnt+=1\r\n                \r\n                if board[i][j]=='R':\r\n                    for k in range(j+1,c):\r\n                        if board[i][k]=='#':\r\n                            break\r\n                        coll[i][k].append(cnt)\r\n                        cnt+=1\r\n                \r\n                if board[i][j]=='L':\r\n                    for k in range(j-1,-1,-1):\r\n                        if board[i][k]=='#':\r\n                            break\r\n                        coll[i][k].append(cnt)\r\n                        cnt+=1\r\n    cnts = 0\r\n    for i in range(r):\r\n        for j in range(c):\r\n            if len(coll[i][j])>1:\r\n                sets = set(coll[i][j])\r\n                counts = {}\r\n                for k in sets:\r\n                    counts[k]=0\r\n                for k in coll[i][j]:\r\n                    counts[k]+=1\r\n                for k in counts.values():\r\n                    if k>1:\r\n                        cnts+=int(k*(k-1)//2)\r\n    #print(counts)\r\n    print(cnts)\r\n", "# Contest Code: PRACTICE      Problem Code: ANTEATER\n#\n# Author: Keyur Shroff\n# Date: 24 June 2019\n\nimport math\nfrom collections import defaultdict\n\n# --- Function to calculate nCr\ndef nCr(n,r):\n    f = math.factorial\n    return (f(n) // f(r)) // f(n-r)\n\n# --- Main Program ---\ndef main() :\n    t = int(input())\n    for _ in range(t) :\n        r, c = map(int, input().split())\n        matrix = []\n        for i in range(r) :\n            data = list(input())\n            matrix.append(data)\n        \n        timeHorizon = defaultdict(int)\n        for i in range(r) :\n            for j in range(c) :\n                if (matrix[i][j] == \"U\") :\n                    step = 1\n                    for k in range(i-1, -1, -1) :\n                        if (matrix[k][j] == \"#\") :\n                            break\n                        timeHorizon[(step,k,j)] += 1\n                        step += 1\n                elif (matrix[i][j] == \"D\") :\n                    step = 1\n                    for k in range(i+1, r, 1) :\n                        if (matrix[k][j] == \"#\") :\n                            break\n                        timeHorizon[(step,k,j)] += 1\n                        step += 1\n                elif (matrix[i][j] == \"L\") :\n                    step = 1\n                    for k in range(j-1, -1, -1) :\n                        if (matrix[i][k] == \"#\") :\n                            break\n                        timeHorizon[(step,i,k)] += 1\n                        step += 1\n                elif (matrix[i][j] == \"R\") :\n                    step = 1\n                    for k in range(j+1, c, 1) :\n                        if (matrix[i][k] == \"#\") :\n                            break\n                        timeHorizon[(step,i,k)] += 1\n                        step += 1\n        \n        # Count total number of pairs of ants that meet each other\n        count = 0\n        for key in timeHorizon :\n            if (timeHorizon[key] > 1) :\n                ants = timeHorizon[key]\n                count += nCr(ants, 2)\n        \n        print(count)\n\n\ndef __starting_point():\n    #import profile\n    #profile.run('main()')\n    main()\n    \n__starting_point()", "t = int(input())\r\nfor _ in range(t):\r\n    r, c = map(int, input().split())\r\n    a = [list(input()) for _ in range(r)]\r\n    ans = 0\r\n    for i, row in enumerate(a):\r\n        for j, x in enumerate(row):\r\n            if x == 'R':\r\n                for k, y in enumerate(row[j + 1:]):\r\n                    if y == '#':\r\n                        break\r\n                    if k % 2 and y == 'L':\r\n                        ans += 1\r\n            elif x in 'UD':\r\n                b = a[i + 1:] if x == 'D' else reversed(a[:i])\r\n                for k, row1 in enumerate(b, 1):\r\n                    if row1[j] == '#':\r\n                        break\r\n                    if k % 2 == 0 and row1[j] == 'UD'[x == 'U']:\r\n                        ans += 1\r\n                    m = j - k\r\n                    if m >= 0 and row1[m] == 'R' and '#' not in row1[m + 1: j]:\r\n                        ans += 1\r\n                    m = j + k\r\n                    if m < c and row1[m] == 'L' and '#' not in row1[j + 1: m]:\r\n                        ans += 1\r\n                a[i][j] = None\r\n    print(ans)\r\n"]