["# cook your dish here\ntry:\n    X=list(map(int, input().split()))\nexcept:\n    X=[0,0]\nch=[]\nchnew=[]\npar={}\npar[1]=0\nfor i in range(X[0]+1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0]-1):\n    Y=list(map(int, input().split()))\n    #par[Y[1]]=[Y[0],Y[2]]\n    ch[Y[0]].append([Y[1],Y[2]])\n    ch[Y[1]].append([Y[0],Y[2]])\ntre=[1]\nwhile(len(tre)):\n    cr=tre[-1]\n    tre=tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]]=[cr,i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if(j[0]==cr):\n                ch[i[0]].remove(j)\n                break\nch=chnew\ndef goup(par,nd):\n    if(nd==1):\n        return 0\n    else:\n        p=par[nd]\n        ans=p[1]+goup(par,p[0])\n        return (max([ans,0]))\n\ndef godown(ch,nd):\n    ans=0\n    for i in ch[nd]:\n        ans=max([(i[1]+godown(ch,i[0])),ans])\n    return(ans)\n\nfor i in range(X[1]):\n    Z=list(map(int,input().split()))\n    r=Z[0]\n    s=Z[1]\n    nans=0\n    while(r!=s):\n        if(r>s):\n            nans=nans+par[r][1]\n            r=par[r][0]\n        else:\n            nans=nans+par[s][1]\n            s=par[s][0]\n    if((r==Z[0]) or (r==Z[1])):\n        if(Z[0]<Z[1]):\n            nans=nans+2*max(goup(par,Z[0]),godown(ch,Z[1]))\n        else:\n            nans=nans+2*max(goup(par,Z[1]),godown(ch,Z[0]))\n    else:\n        nans=nans+2*goup(par,r)\n    print(nans)", "# cook your dish here\ntry:\n    X=list(map(int, input().split()))\nexcept:\n    X=[0,0]\nch=[]\nchnew=[]\npar={}\npar[1]=0\nfor i in range(X[0]+1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0]-1):\n    Y=list(map(int, input().split()))\n    #par[Y[1]]=[Y[0],Y[2]]\n    ch[Y[0]].append([Y[1],Y[2]])\n    ch[Y[1]].append([Y[0],Y[2]])\ntre=[1]\nwhile(len(tre)):\n    cr=tre[-1]\n    tre=tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]]=[cr,i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if(j[0]==cr):\n                ch[i[0]].remove(j)\n                break\nch=chnew\ndef goup(par,nd):\n    if(nd==1):\n        return 0\n    else:\n        p=par[nd]\n        ans=p[1]+goup(par,p[0])\n        return (max([ans,0]))\n\ndef godown(ch,nd):\n    ans=0\n    for i in ch[nd]:\n        ans=max([(i[1]+godown(ch,i[0])),ans])\n    return(ans)\n\nfor i in range(X[1]):\n    Z=list(map(int,input().split()))\n    r=Z[0]\n    s=Z[1]\n    nans=0\n    while(r!=s):\n        if(r>s):\n            nans=nans+par[r][1]\n            r=par[r][0]\n        else:\n            nans=nans+par[s][1]\n            s=par[s][0]\n    if((r==Z[0]) or (r==Z[1])):\n        if(Z[0]<Z[1]):\n            nans=nans+2*max(goup(par,Z[0]),godown(ch,Z[1]))\n        else:\n            nans=nans+2*max(goup(par,Z[1]),godown(ch,Z[0]))\n    else:\n        nans=nans+2*goup(par,r)\n    print(nans)", "# cook your dish here\n# cook your dish here\ntry:\n    X=list(map(int, input().split()))\nexcept:\n    X=[0,0]\nch=[]\nchnew=[]\npar={}\npar[1]=0\nfor i in range(X[0]+1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0]-1):\n    Y=list(map(int, input().split()))\n    #par[Y[1]]=[Y[0],Y[2]]\n    ch[Y[0]].append([Y[1],Y[2]])\n    ch[Y[1]].append([Y[0],Y[2]])\ntre=[1]\nwhile(len(tre)):\n    cr=tre[-1]\n    tre=tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]]=[cr,i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if(j[0]==cr):\n                ch[i[0]].remove(j)\n                break\nch=chnew\ndef goup(par,nd):\n    if(nd==1):\n        return 0\n    else:\n        p=par[nd]\n        ans=p[1]+goup(par,p[0])\n        return (max([ans,0]))\n\ndef godown(ch,nd):\n    ans=0\n    for i in ch[nd]:\n        ans=max([(i[1]+godown(ch,i[0])),ans])\n    return(ans)\n\nfor i in range(X[1]):\n    Z=list(map(int,input().split()))\n    r=Z[0]\n    s=Z[1]\n    nans=0\n    while(r!=s):\n        if(r>s):\n            nans=nans+par[r][1]\n            r=par[r][0]\n        else:\n            nans=nans+par[s][1]\n            s=par[s][0]\n    if((r==Z[0]) or (r==Z[1])):\n        if(Z[0]<Z[1]):\n            nans=nans+2*max(goup(par,Z[0]),godown(ch,Z[1]))\n        else:\n            nans=nans+2*max(goup(par,Z[1]),godown(ch,Z[0]))\n    else:\n        nans=nans+2*goup(par,r)\n    print(nans)", "try:\n    X=list(map(int, input().split()))\nexcept:\n    X=[0,0]\nch=[]\nchnew=[]\npar={}\npar[1]=0\nfor i in range(X[0]+1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0]-1):\n    Y=list(map(int, input().split()))\n    #par[Y[1]]=[Y[0],Y[2]]\n    ch[Y[0]].append([Y[1],Y[2]])\n    ch[Y[1]].append([Y[0],Y[2]])\ntre=[1]\nwhile(len(tre)):\n    cr=tre[-1]\n    tre=tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]]=[cr,i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if(j[0]==cr):\n                ch[i[0]].remove(j)\n                break\nch=chnew\ndef goup(par,nd):\n    if(nd==1):\n        return 0\n    else:\n        p=par[nd]\n        ans=p[1]+goup(par,p[0])\n        return (max([ans,0]))\n\ndef godown(ch,nd):\n    ans=0\n    for i in ch[nd]:\n        ans=max([(i[1]+godown(ch,i[0])),ans])\n    return(ans)\n\nfor i in range(X[1]):\n    Z=list(map(int,input().split()))\n    r=Z[0]\n    s=Z[1]\n    nans=0\n    while(r!=s):\n        if(r>s):\n            nans=nans+par[r][1]\n            r=par[r][0]\n        else:\n            nans=nans+par[s][1]\n            s=par[s][0]\n    if((r==Z[0]) or (r==Z[1])):\n        if(Z[0]<Z[1]):\n            nans=nans+2*max(goup(par,Z[0]),godown(ch,Z[1]))\n        else:\n            nans=nans+2*max(goup(par,Z[1]),godown(ch,Z[0]))\n    else:\n        nans=nans+2*goup(par,r)\n    print(nans)", "# cook your dish here\ntry:\n    X=list(map(int, input().split()))\nexcept:\n    X=[0,0]\nch=[]\nchnew=[]\npar={}\npar[1]=0\nfor i in range(X[0]+1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0]-1):\n    Y=list(map(int, input().split()))\n    #par[Y[1]]=[Y[0],Y[2]]\n    ch[Y[0]].append([Y[1],Y[2]])\n    ch[Y[1]].append([Y[0],Y[2]])\ntre=[1]\nwhile(len(tre)):\n    cr=tre[-1]\n    tre=tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]]=[cr,i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if(j[0]==cr):\n                ch[i[0]].remove(j)\n                break\nch=chnew\ndef goup(par,nd):\n    if(nd==1):\n        return 0\n    else:\n        p=par[nd]\n        ans=p[1]+goup(par,p[0])\n        return (max([ans,0]))\n\ndef godown(ch,nd):\n    ans=0\n    for i in ch[nd]:\n        ans=max([(i[1]+godown(ch,i[0])),ans])\n    return(ans)\n\nfor i in range(X[1]):\n    Z=list(map(int,input().split()))\n    r=Z[0]\n    s=Z[1]\n    nans=0\n    while(r!=s):\n        if(r>s):\n            nans=nans+par[r][1]\n            r=par[r][0]\n        else:\n            nans=nans+par[s][1]\n            s=par[s][0]\n    if((r==Z[0]) or (r==Z[1])):\n        if(Z[0]<Z[1]):\n            nans=nans+2*max(goup(par,Z[0]),godown(ch,Z[1]))\n        else:\n            nans=nans+2*max(goup(par,Z[1]),godown(ch,Z[0]))\n    else:\n        nans=nans+2*goup(par,r)\n    print(nans)", "# cook your dish here\r\ntry:\r\n    X=list(map(int, input().split()))\r\nexcept:\r\n    X=[0,0]\r\nch=[]\r\nchnew=[]\r\npar={}\r\npar[1]=0\r\nfor i in range(X[0]+1):\r\n    ch.append([])\r\n    chnew.append([])\r\nfor i in range(X[0]-1):\r\n    Y=list(map(int, input().split()))\r\n    #par[Y[1]]=[Y[0],Y[2]]\r\n    ch[Y[0]].append([Y[1],Y[2]])\r\n    ch[Y[1]].append([Y[0],Y[2]])\r\ntre=[1]\r\nwhile(len(tre)):\r\n    cr=tre[-1]\r\n    tre=tre[:-1]\r\n    for i in ch[cr]:\r\n        chnew[cr].append(i)\r\n        par[i[0]]=[cr,i[1]]\r\n        tre.append(i[0])\r\n        for j in ch[i[0]]:\r\n            if(j[0]==cr):\r\n                ch[i[0]].remove(j)\r\n                break\r\nch=chnew\r\ndef goup(par,nd):\r\n    if(nd==1):\r\n        return 0\r\n    else:\r\n        p=par[nd]\r\n        ans=p[1]+goup(par,p[0])\r\n        return (max([ans,0]))\r\n\r\ndef godown(ch,nd):\r\n    ans=0\r\n    for i in ch[nd]:\r\n        ans=max([(i[1]+godown(ch,i[0])),ans])\r\n    return(ans)\r\n\r\nfor i in range(X[1]):\r\n    Z=list(map(int,input().split()))\r\n    r=Z[0]\r\n    s=Z[1]\r\n    nans=0\r\n    while(r!=s):\r\n        if(r>s):\r\n            nans=nans+par[r][1]\r\n            r=par[r][0]\r\n        else:\r\n            nans=nans+par[s][1]\r\n            s=par[s][0]\r\n    if((r==Z[0]) or (r==Z[1])):\r\n        if(Z[0]<Z[1]):\r\n            nans=nans+2*max(goup(par,Z[0]),godown(ch,Z[1]))\r\n        else:\r\n            nans=nans+2*max(goup(par,Z[1]),godown(ch,Z[0]))\r\n    else:\r\n        nans=nans+2*goup(par,r)\r\n    print(nans)", "# cook your dish here\ntry:\n    X=list(map(int, input().split()))\nexcept:\n    X=[0,0]\nch=[]\nchnew=[]\npar={}\npar[1]=0\nfor i in range(X[0]+1):\n    ch.append([])\n    chnew.append([])\nfor i in range(X[0]-1):\n    Y=list(map(int, input().split()))\n    #par[Y[1]]=[Y[0],Y[2]]\n    ch[Y[0]].append([Y[1],Y[2]])\n    ch[Y[1]].append([Y[0],Y[2]])\ntre=[1]\nwhile(len(tre)):\n    cr=tre[-1]\n    tre=tre[:-1]\n    for i in ch[cr]:\n        chnew[cr].append(i)\n        par[i[0]]=[cr,i[1]]\n        tre.append(i[0])\n        for j in ch[i[0]]:\n            if(j[0]==cr):\n                ch[i[0]].remove(j)\n                break\nch=chnew\ndef goup(par,nd):\n    if(nd==1):\n        return 0\n    else:\n        p=par[nd]\n        ans=p[1]+goup(par,p[0])\n        return (max([ans,0]))\n\ndef godown(ch,nd):\n    ans=0\n    for i in ch[nd]:\n        ans=max([(i[1]+godown(ch,i[0])),ans])\n    return(ans)\n\nfor i in range(X[1]):\n    Z=list(map(int,input().split()))\n    r=Z[0]\n    s=Z[1]\n    nans=0\n    while(r!=s):\n        if(r>s):\n            nans=nans+par[r][1]\n            r=par[r][0]\n        else:\n            nans=nans+par[s][1]\n            s=par[s][0]\n    if((r==Z[0]) or (r==Z[1])):\n        if(Z[0]<Z[1]):\n            nans=nans+2*max(goup(par,Z[0]),godown(ch,Z[1]))\n        else:\n            nans=nans+2*max(goup(par,Z[1]),godown(ch,Z[0]))\n    else:\n        nans=nans+2*goup(par,r)\n    print(nans)"]