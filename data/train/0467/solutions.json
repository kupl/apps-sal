["# 1390. Four Divisors\n# version 2, with optimized prime-finding.\n\nimport math\n\ndef remove (lst, index):\n    assert lst\n    tail = len (lst) - 1\n    lst[index], lst[tail] = lst[tail], lst[index]\n    lst.pop ()\n\ndef swap_min (lst):\n    if not lst: return\n    argmin = min (range (len (lst)), key = lambda i: lst[i])\n    lst[0], lst[argmin] = lst[argmin], lst[0]\n\ndef find_primes (top):\n    candidates = list (range (2, top))\n    primes = []\n    while candidates:\n        # here, candidates[0] is the least element.\n        latest_prime = candidates[0]\n        primes.append (latest_prime)\n        remove (candidates, 0)\n        for i in range (len (candidates) - 1, -1, -1):\n            if candidates[i] % latest_prime == 0:\n                remove (candidates, i)\n\n        swap_min (candidates)\n        # before continuing, set candidates[0] to be the least element.\n    return primes\n\ndef find_prime_factor (n, primes):\n    for p in primes:\n        if n % p == 0:\n            return p\n\ndef div4 (n, primes, setprimes):\n    if n <= 3:\n        return 0\n    elif n in setprimes:\n        return 0\n    else:\n        p1 = find_prime_factor (n, primes)\n        if p1 is None:\n            return 0\n        p2 = find_prime_factor (n // p1, primes)\n        if p2 is None:\n            p2 = n // p1\n        if p1 * p2 == n and p1 != p2:\n            # success\n            return (1 + p1) * (1 + p2)\n        elif p1 ** 3 == n:\n            # success\n            return (1 + p1) * (1 + p1**2)\n        else:\n            return 0\n\ndef sum_four_divisors (arr):\n    top = math.ceil (math.sqrt (max (arr) + 5))\n    primes = find_primes (top)\n    setprimes = set (primes)\n    return sum (div4 (elem, primes, setprimes) for elem in arr)\n\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        return sum_four_divisors(nums)", "\nimport math\n\ndef remove (lst, index):\n    assert lst\n    tail = len (lst) - 1\n    lst[index], lst[tail] = lst[tail], lst[index]\n    lst.pop ()\n\ndef swap_min (lst):\n    if not lst: return\n    argmin = min (range (len (lst)), key = lambda i: lst[i])\n    lst[0], lst[argmin] = lst[argmin], lst[0]\n\ndef find_primes (top):\n    candidates = list (range (2, top))\n    primes = []\n    while candidates:\n        # here, candidates[0] is the least element.\n        latest_prime = candidates[0]\n        primes.append (latest_prime)\n        remove (candidates, 0)\n        for i in range (len (candidates) - 1, -1, -1):\n            if candidates[i] % latest_prime == 0:\n                remove (candidates, i)\n\n        swap_min (candidates)\n        # before continuing, set candidates[0] to be the least element.\n    return primes\n\ndef find_prime_factor (n, primes):\n    for p in primes:\n        if n % p == 0:\n            return p\n\ndef div4 (n, primes, setprimes):\n    if n <= 3:\n        return 0\n    elif n in setprimes:\n        return 0\n    else:\n        p1 = find_prime_factor (n, primes)\n        if p1 is None:\n            return 0\n        p2 = find_prime_factor (n // p1, primes)\n        if p2 is None:\n            p2 = n // p1\n        if p1 * p2 == n and p1 != p2:\n            # success\n            return (1 + p1) * (1 + p2)\n        elif p1 ** 3 == n:\n            # success\n            return (1 + p1) * (1 + p1**2)\n        else:\n            return 0\n\ndef sum_four_divisors (arr):\n    top = math.ceil (math.sqrt (max (arr) + 5))\n    primes = find_primes (top)\n    setprimes = set (primes)\n    return sum (div4 (elem, primes, setprimes) for elem in arr)\n\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        return sum_four_divisors(nums)", "class Solution:\n    def sumFourDivisors(self, nums: List[int], c={}) -> int:\n        r = 0\n        for n in nums:\n            if n in c:\n                r += c[n]\n                continue\n            s = n + 1\n            cnt = 2\n            end = sqrt(n)\n            if end == int(end):\n                s += end\n                cnt += 1\n                end -= 1\n            for i in range(2, int(end) + 1):\n                if n % i == 0:\n                    cnt += 2\n                    if cnt > 4:\n                        s = 0\n                        break\n                    s += i\n                    s += n // i\n            if cnt == 4:\n                c.update({n:s})\n                r += s\n            else:\n                c.update({n:0})\n        return r", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:    \n        factors_cache = {}\n        \n        def get_factors(num):\n            if num in factors_cache:\n                return factors_cache[num]\n            else:\n                factors = set([1, num])\n                for potential_divisor in range(2, math.ceil(math.sqrt(num))):\n                    if num % potential_divisor == 0:\n                        factors = factors.union(get_factors(potential_divisor))\n                        factors = factors.union(get_factors(num // potential_divisor))\n                    if len(factors) > 4:\n                        break\n                factors_cache[num] = factors\n                return factors\n            \n        running_sum = 0\n        for num in nums:\n            factors = get_factors(num)\n            if len(factors) == 4:\n                running_sum += sum(factors)\n            \n        return running_sum\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0\n        for num in nums:\n            out = set()\n\n            for i in range(1, int(num ** 0.5+1)):\n                a, b = divmod(num, i)\n                if b == 0:\n                    out.add(i)\n                    out.add(a)\n                if len(out) > 4: break\n            if len(out) == 4:\n                ans += sum(out)\n        \n        return ans", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0\n        for num in nums:\n            ans += self.fourDivisors(num)\n        return ans\n    def fourDivisors(self,num):\n        memo = set()\n        for i in range(1,num + 1):\n            if i * i > num:\n                break\n            if num % i == 0:\n                memo.add(i)\n                memo.add(num//i)\n                if len(memo) > 4:\n                    return 0\n                \n        if len(memo) == 4:\n            return sum(memo)\n        return 0", "class Solution:\n    def divs(self,x):\n        memo = self.memo\n        if x in memo:\n            return memo[x]\n        #\n        L = 2     if x>1 else 1\n        S = (1+x) if x>1 else 1\n        for a in range(2,x):\n            if (a**2)>x:\n                break\n            #\n            if not x%a:\n                L += 1 if x==(a**2) else 2\n                S += a if x==(a**2) else (a + x//a)\n            #\n            if L>4:\n                break\n        #\n        memo[x] = L,S\n        return L,S\n    def sumFourDivisors(self, A):\n        self.memo = {}\n        res = 0\n        for x in A:\n            L,S = self.divs(x)\n            if L==4:\n                res += S\n        return res", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        # find all divisor of this number and use set() to select all the distinct factors\n        res = 0\n        for num in nums:\n            divisor_num = set()\n            for i in range(1, int(sqrt(num))+1):\n                if num%i == 0:\n                    divisor_num.add(num//i)\n                    divisor_num.add(i)\n                    \n            if len(divisor_num) == 4:\n                res +=sum(divisor_num)\n                \n                \n                \n        #capital one len(divisor_num)==3, divisor_sum.remove(num)\n                \n                \n                \n        return res\n                \n                    \n                    \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0\n        for n in nums:\n            sq = floor(n**0.5)\n            if sq*sq == n:\n                continue\n            divs = 2\n            divsum = 1+n\n            for i in range(sq, 1, -1):\n                if n % i == 0:\n                    divs += 2\n                    divsum += i + n // i\n                if divs > 4:\n                    break\n            if divs == 4:\n                ans += divsum\n        return ans", "\n\nclass Solution:\n    def divs(self,x):\n        memo = self.memo\n        if x in memo:\n            return memo[x]\n        #\n        L = 2     if x>1 else 1\n        S = (1+x) if x>1 else 1\n        for a in range(2,x):\n            if (a**2)>x:\n                break\n            #\n            if not x%a:\n                L += 1 if x==(a**2) else 2\n                S += a if x==(a**2) else (a + x//a)\n            #\n            if L>4:\n                break\n        #\n        memo[x] = L,S\n        return L,S\n    def sumFourDivisors(self, A):\n        self.memo = {}\n        res = 0\n        for x in A:\n            L,S = self.divs(x)\n            if L==4:\n                res += S\n        return res", "class Solution:\n    def divs(self,x):\n        memo = self.memo\n        if x in memo:\n            return memo[x]\n        #\n        L = 2     if x>1 else 1\n        S = (1+x) if x>1 else 1\n        for a in range(2,x):\n            if (a**2)>x:\n                break\n            #\n            if not x%a:\n                L += 1 if x==(a**2) else 2\n                S += a if x==(a**2) else (a + x//a)\n            #\n            if L>4:\n                break\n        #\n        memo[x] = L,S\n        return L,S\n    def sumFourDivisors(self, A):\n        self.memo = {}\n        res = 0\n        for x in A:\n            L,S  = self.divs(x)\n            if L==4:\n                res += S\n        return res", "class Solution:\n    def divisors(self, n):\n        for i in range(1, int(sqrt(n) + 1)):\n            if n % i == 0:\n                yield i\n                j = n // i\n                if j != i:\n                    yield j\n\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        s = 0\n        for n in nums:\n            l = list(self.divisors(n))\n            if len(l) == 4:\n                s += sum(l)\n        return s", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def make_divisors(n):\n            divisors = []\n            for i in range(1, int(n**0.5)+1):\n                if n % i == 0:\n                    divisors.append(i)\n                    if i != n // i:\n                        divisors.append(n//i)\n            return len(divisors), divisors\n        \n        ret = [0]\n        for n in nums:\n            l, d = make_divisors(n)\n            if l == 4:\n                ret.append(sum(d))\n        return sum(ret)\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int], c={}) -> int:\n        r = 0\n        for n in nums:\n            if n in c:\n                r += c[n]\n                continue\n            s = n + 1\n            cnt = 2\n            e = sqrt(n)\n            if (end := int(e)) == e:\n                s += end\n                cnt += 1\n                end -= 1\n            for i in range(2, end + 1):\n                if n % i == 0:\n                    cnt += 2\n                    if cnt > 4:\n                        s = 0\n                        break\n                    s += i\n                    s += n // i\n            if cnt == 4:\n                c.update({n:s})\n                r += s\n            else:\n                c.update({n:0})\n        return r", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        sum2=0\n        for n in nums:\n            cnt=0\n            sum1=0\n            for i in range(1,int(sqrt(n))+1):\n                if n%i==0:\n                    if i==sqrt(n):\n                        cnt+=1\n                    else:\n                        cnt+=2\n                        sum1+=i+n//i\n            if cnt==4:\n                sum2 += sum1\n        return sum2\n", "import math\n\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        divisorSum = 0\n        for num in nums:\n            divisorSum += self.findDivisors(num)\n        return divisorSum\n    \n    def findDivisors(self, num):\n        divisors = set([1, num])\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                divisors.add(i)\n                divisors.add(num//i)\n        if len(divisors) == 4:\n            return sum(list(divisors))\n        return 0\n", "# N = len(nums)\n# time: O(NlogN)\n# space: O(N)\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def make_divisors(n):\n            divisors = []\n            for i in range(1, int(n**0.5)+1):\n                if n % i == 0:\n                    divisors.append(i)\n                    if i != n // i:\n                        divisors.append(n//i)\n            return len(divisors), divisors\n        \n        ret = [0]\n        for n in nums:\n            l, d = make_divisors(n)\n            if l == 4:\n                ret.append(sum(d))\n        return sum(ret)\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def count_divisors(x):\n            num_divisors = 0\n            sum_divisors = 0\n            if sqrt(x) == int(sqrt(x)):\n                num_divisors += 1\n                sum_divisors += sqrt(x)\n            for i in range(1, ceil(sqrt(x))):\n                if x % i == 0:\n                    num_divisors += 2\n                    sum_divisors += i + (x // i)\n            return sum_divisors if num_divisors == 4 else 0\n        return sum([count_divisors(x) for x in nums])", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        for num in nums:\n            divisor = set()\n            for i in range(1, int(sqrt(num))+1):\n                if num%i == 0:\n                    divisor.add(num//i)\n                    divisor.add(i)\n                if len(divisor) > 4:\n                    break\n                \n            if len(divisor) == 4:\n                res += sum(divisor)\n        \n        return res\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        for num in nums:\n            curr = 0\n            div_sum = 0\n            for i in range(1, int(sqrt(num)) + 1):\n                if num % i == 0:\n                    curr += 2\n                    \n                    if i == num // i:\n                        div_sum -= i\n                        curr -= 1\n                        \n                    div_sum += i\n                    div_sum += (num // i)\n        \n            if curr == 4:\n                res += div_sum\n        \n        return res\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ret = 0\n        for num in nums:\n            ret += self.has_four_divisors(num)\n        return int(ret)\n    \n    def has_four_divisors(self, num):\n        divisor_sum = 0\n        divisors = 0\n        for i in range(1, int(sqrt(num))+1):\n            if num % i == 0:\n                if i != num / i:\n                    divisors += 2\n                    divisor_sum += i\n                    divisor_sum += num / i\n                else:\n                    divisors += 1\n                    divisor_sum += i\n        if divisors == 4:\n            return divisor_sum\n        return 0", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0\n        for num in nums:\n            divisor = 0\n            a = 2\n            upperLimit = int(num**0.5)\n            if upperLimit**2 == num:\n                continue\n            upperLimit += 1\n            subAns = 1 + num\n            while a < upperLimit:\n                if num%a == 0:\n                    if divisor == 0:\n                        divisor += 1\n                        subAns += (a+num//a)\n                    else:\n                        break\n                upperLimit = min(upperLimit, num//a)\n                a += 1\n            else:\n                if divisor == 1:\n                    ans += subAns\n        return ans", "import math\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        total = 0\n        for num in nums:\n            divisors = self.getDivisors(num)\n            if len(divisors) == 4:\n                print(divisors, num)\n                total+=sum(divisors)\n        return total\n    \n    def getDivisors(self, num):\n        res = set([1, num])\n        for i in range(2,1+math.ceil(math.sqrt(num))):\n            if num%i == 0:\n                res.add(i)\n                res.add(num//i)\n        return res ", "from math import sqrt\n\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def helper(num):\n            divisors = set()\n            for i in range(1, int(sqrt(num))+1):\n                if num % i == 0:\n                    divisors.add(i)\n                    divisors.add(num // i)\n            return sum(divisors) if len(divisors) == 4 else 0\n\n        return sum(helper(num) for num in nums)", "class Solution:\n    def sumFourDivisors(self, nums: List[int], c={}) -> int:\n        r = 0\n        for n in nums:\n            if n in c:\n                r += c[n]\n                continue\n            s = 0\n            cnt = 0\n            for i in range(1, round(sqrt(n) + 1)):\n                if n % i == 0:\n                    cnt += 1\n                    if cnt > 4:\n                        s = 0\n                        break\n                    s += i\n                    j = n // i\n                    if j != i:\n                        cnt += 1\n                        if cnt > 4:\n                            s = 0\n                            break\n                        s += j\n            if cnt == 4:\n                c.update({n:s})\n                r += s\n            else:\n                c.update({n:0})\n        return r", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0 \n        \n        for n in nums:\n            st = set()\n            for i in range(1, int(sqrt(n))+1):\n                if n%i == 0:\n                    st.add(i)\n                    st.add(n//i)\n            \n            if len(st) == 4:\n                ans += sum(st)\n        \n        return ans", "class Solution:\n    def divs(self,x):\n        memo = self.memo\n        if x in memo:\n            return memo[x]\n        #\n        res = 2 if x>1 else 1\n        B   = {1,x}\n        for a in range(2,x):\n            if x<(a**2):\n                break\n            if not x%a:\n                res += 1 if x==(a**2) else 2\n                B.update( {a, x//a} )\n            if res>4:\n                break\n            a += 1\n        memo[x] = res,B\n        return res,B\n    def sumFourDivisors(self, A):\n        self.memo = {}\n        res = 0\n        for x in A:\n            r,B = self.divs(x)\n            if r==4:\n                res += sum(B)\n        return res", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def NOD(x):\n            divisor = set([1,x])\n            for i in range(2,int(x**.5) + 1):\n                if not x%i:\n                    divisor.add(i)\n                    divisor.add(x//i)\n            return divisor\n        ans = []\n        for num in nums:\n            divisor = NOD(num)\n            if len(divisor) == 4:\n                ans.append(divisor)\n        return sum([sum(i) for i in ans])\n        \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        for num in nums:\n            divisor = set() \n            for i in range(1, floor(sqrt(num)) + 1):\n                if num % i == 0:\n                    divisor.add(num//i)\n                    divisor.add(i)\n                if len(divisor) > 4:    \n                    break\n                    \n            if len(divisor) == 4:\n                res += sum(divisor)\n        return res \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def div_num(x):\n            ans, ssum = 2, x + 1\n            for i in range(2, int(x ** 0.5)+1):\n                if x % i == 0:\n                    ans += 1 + (i*i != x)\n                    ssum += (i + x//i) if i*i != x else i\n            return ans == 4, ssum\n        res = 0\n        for x in nums:\n            flag, ssum = div_num(x)\n            if flag == 1:\n                res += ssum\n        return res\n        \n        \n\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0\n        for num in nums:\n            divisors = set()\n            for i in range(1, int(num**0.5)+1):\n                if num % i == 0:\n                    divisors.add(i)\n                    divisors.add(num//i)\n            if len(divisors) == 4:\n                ans += sum(divisors)\n                \n        return ans", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        out = 0\n        for i in nums:\n            temp = set()\n            for j in range(1, floor(sqrt(i))+1):\n                if i % j == 0:\n                    temp.add(j)\n                    temp.add(int(i/j))\n                # if len(temp) > 4:\n                #     break\n            if len(temp) == 4:\n                out += sum(temp)\n        return out", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def findfactors(n):\n            f = []\n            for i in range(1,int(n**0.5)+1):\n                if n%i==0:\n                    f.append(i)\n                    if (i!=n//i):\n                        f.append(n//i)\n            return sum(f) if len(f)==4 else 0\n        return sum([findfactors(x) for x in nums])\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ret = 0\n        for num in nums:\n            divs = self.divisors(num)\n            if len(divs) == 4:\n                ret += sum(divs)\n        \n        return ret \n    \n    def divisors(self, num):\n        ret = []\n        for i in range(1, int(num**0.5)+1):\n            if num%i == 0:\n                ret += [i]\n                if num//i != i:\n                    ret += [num//i]\n        \n        return ret", "import math\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        divisors = []\n        for num in nums:\n            d = set()\n            for i in range(1, floor(sqrt(num) + 1)):\n                if num % i == 0:\n                    d.add(i)\n                    d.add(num // i)\n            divisors.append(d)\n        # print(divisors)\n        result = 0\n        for s in divisors:\n            if len(s) == 4:\n                result += sum(s)\n        return result\n                \n            \n", "import math\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        divisors = []\n        for num in nums:\n            d = set()\n            for i in range(1, floor(sqrt(num) + 1)):\n                if num % i == 0:\n                    d.add(i)\n                    d.add(num // i)\n            divisors.append(d)\n        result = 0\n        for s in divisors:\n            if len(s) == 4:\n                result += sum(s)\n        return result\n                \n            \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0\n        for n in nums:\n            tmp = set([1,n])\n            for d in range(2,ceil(sqrt(n))+1):\n                if n%d==0:\n                    tmp.add(d)\n                    tmp.add(n//d)\n            #print(tmp)\n            if len(tmp) ==4:\n                ans += sum(tmp)\n        return ans", "import math\n\nclass Solution:\n    \n    def s_factors_if_len_4(self, n, d):\n        s = set()\n        for i in range(1,math.floor(n**0.5)+1):\n            if n%i == 0:\n                s.add(i)\n                s.add(n//i)\n        if len(s) == 4:\n            d[n] = sum(s)\n        else:\n            d[n] = 0\n    \n    def sumFourDivisors(self, nums: List[int]) -> int:\n        d = {}\n        sol = 0\n        for n in nums:\n            if n not in d.keys():\n                self.s_factors_if_len_4(n, d)\n            sol += d[n]\n        return sol", "class Solution:\n    cache = {}\n    def factors(self, n):\n        if n in self.cache:\n            return self.cache[n]\n        result = set()\n        for i in range(1, int(n ** 0.5) + 1):\n            div, mod = divmod(n, i)\n            if mod == 0:\n                result |= {i, div}\n        self.cache[n] = result\n        return result\n    \n    def sumFourDivisors(self, nums: List[int]) -> int:\n        factors = [ self.factors(f) for f in nums ]\n        return sum([sum(f) for f in factors if len(f) == 4])\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def compute(n):\n            s = set()\n            for i in range(1, 1 + int(n**0.5)):\n                if n % i == 0:\n                    s.add(i)\n                    s.add(n // i)\n            return sum(s) if len(s) == 4 else 0\n        return sum(compute(i) for i in nums)", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        for i in range(len(nums)):\n            curr = nums[i]\n            counter = 1\n            divisors = []\n            while counter <= sqrt(nums[i]) and len(divisors)<5:\n                if nums[i]%counter == 0:\n                    if counter not in divisors:\n                        divisors.append(counter)\n                    if nums[i]//counter not in divisors:\n                        divisors.append(nums[i]//counter)\n                counter+=1\n            if len(divisors) == 4:\n                res += sum(divisors)\n            print(divisors)\n                \n        return res", "class Solution:\n    def sumFourDivisors(self, lst: List[int]) -> int:\n        import math\n        final = 0\n        for i in lst:\n            factors = []\n            for j in range(1, round(math.sqrt(i)) + 1):\n                if i % j == 0:\n                    factors.append(int(j))\n                    factors.append(int(i / j))\n            factors = list(dict.fromkeys(factors))\n            if len(factors) == 4:\n                final += sum(factors)\n        return final", "class Solution:\n    def divs(self,x):\n        #\n        L = 2     if x>1 else 1\n        S = (1+x) if x>1 else 1\n        for a in range(2,x):\n            if (a**2)>x:\n                break\n            #\n            if not x%a:\n                L += 1 if x==(a**2) else 2\n                S += a if x==(a**2) else (a + x//a)\n            #\n            if L>4:\n                break\n        #\n        return L,S\n    def sumFourDivisors(self, A):\n        self.memo = {}\n        res = 0\n        for x in A:\n            L,S = self.divs(x)\n            if L==4:\n                res += S\n        return res", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def isPrime(n):\n            if n<=1:\n                return False\n            if n<=3:\n                return True\n            if n & 1 == 0 or n % 3 == 0:\n                return False\n            i=5\n            while i*i<=n:\n                if n % i == 0 and n % (i+2) == 0:\n                    return False\n                i+=6\n            return True\n        res=0\n        c=0\n        temp=set()\n        for i in nums:\n                for j in range(1,int(i**.5)+1):\n                    if i%j==0:\n                        temp.add(j)\n                        temp.add(i//j)\n                        if i//j!=j:\n                            c+=2\n                        else:\n                            c+=1\n                res+=sum(temp) if c==4 else 0\n                temp=set()\n                c=0\n        return res", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0\n        def get_divisor(num):\n            val = set()\n            i = 1\n            while i < math.sqrt(num) + 1:\n                if num % i == 0:\n                    val.add(i)\n                    val.add(num // i)\n                if len(val) > 4:\n                    return val\n                i += 1\n            return val\n        \n        for num in nums:\n            a = get_divisor(num)\n            if len(a) == 4:\n                ans += sum(a)\n        return ans\n    \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        # 10:58 9/24/20\n        def four_divisors3(n):\n            div = set()\n            i = 1\n            while i*i < n:\n                if n % i == 0:\n                    div.add(i)\n                    div.add(n // i)\n                    if len(div) > 4:\n                        return 0\n                i += 1\n            return sum(div) if len(div) == 4 else 0\n        \n        def four_divisors(n):\n            div = set()\n            for i in range(1, int(n ** 0.5) + 1):\n                if n % i == 0:\n                    div.add(i)\n                    div.add(n // i)\n                    if len(div) > 4:\n                        return 0\n            return sum(div) if len(div) == 4 else 0\n        \n        def four_divisors2(n):\n            cnt = 0\n            sums = 0\n            div = set()\n            if n != 0:\n                # i = 1\n                for i in range(1, int(n** 0.5) + 1):\n                    if n % i == 0:\n                        cnt += 2\n                        sums += i + n // i\n                        # div.add(i)\n                        # div.add(n // i)\n                    if cnt > 4:\n                        return 0\n                    # i += 1\n            return sums if cnt == 4 else 0\n        \n        if not nums: return 0\n        nums.sort()\n        total = 0\n        # sums = [0]\n        past = [None, None]\n        \n        for i, v in enumerate(nums):\n            if i > 0 and v == nums[i - 1] and v == past[0]:\n                total += past[1]\n                continue\n            tmp = four_divisors(v)\n            total += tmp\n            past = [v, tmp]\n            \n                    \n        return total\n                    \n        \n        \n        \n            \n            \n           \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        ls = len(nums)\n        for i in range(ls):\n            divs = set()\n            for j in range(1, floor(sqrt(nums[i])) + 1):\n                if nums[i] % j == 0:\n                    divs.add(nums[i]//j)\n                    divs.add(j)\n            \n            if len(divs) == 4:\n                res = res + sum(divs)\n        return res", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def NOD(x):\n            divisor = set()\n            for i in range(1,int(sqrt(x)) + 1):\n                if not x%i:\n                    divisor.add(i)\n                    divisor.add(x//i)\n            return divisor\n        \n        res = 0\n        for num in nums:\n            divisor = NOD(num)\n            if len(divisor) == 4:\n                res += sum(divisor)\n        return res\n        \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        maxim=max(nums)\n      \n       \n        total=0\n        for k in range(len(nums)):\n            num_div=0\n          \n            index=2\n            div=[]\n            curr_val=nums[k]\n            if abs(int(sqrt(curr_val))-sqrt(curr_val))>10**(-12) :\n                while index<=int(sqrt(curr_val)):\n\n                    if curr_val%index==0:\n                        div.append(index)\n\n                        div.append(nums[k]/index)\n                    if len(div)>2:\n                        break\n                    index+=1\n\n                if len(div)==2:\n                    total=total+sum(div)+1+nums[k]\n                    \n            \n        return int(total)\n        \n                \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def NOD(x):\n            divisor = set([1,x])\n            for i in range(2,int(x**.5) + 1):\n                if not x%i:\n                    divisor.add(i)\n                    divisor.add(x//i)\n            return divisor\n        res = 0\n        for num in nums:\n            divisor = NOD(num)\n            if len(divisor) == 4:\n                res += sum(divisor)\n        return res\n        \n", "def div(n):\n    c=0\n    i=1\n    k=0\n    if sqrt(n).is_integer(): \n        return 0\n    while i*i<n and c<=3:\n        if n%i==0:\n            c+=1\n            k+=i+n//i\n        \n        i+=1\n    if c==2:\n        return k\n    else:\n        return 0\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans=0\n        for i in nums:\n            ans+=div(i)\n        return ans", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        \n        \n        def findFactors(num):\n            if num==0:\n                return 0\n            res = set()\n            for i in range(int(num**0.5)+1):                \n                if num%(i+1)==0:\n                    res.add(i+1)\n                    res.add(num//(i+1))\n                    \n            return [len(res),sum(res)]\n        output = 0\n        for num in nums:\n            c,sm = findFactors(num)\n            # print(c,sm)\n            if c==4:\n                output+=sm\n        return output", "class Solution:\n    def __init__(self):\n        self.divisors = {}\n        \n    def generate_result(self, n):\n        counter = 1\n        quo = n // counter\n        \n        while counter <= quo:\n            \n            if n % counter == 0:\n                yield counter\n                if quo != counter:\n                    yield quo\n                \n            counter += 1\n            quo = n // counter\n        \n        \n    def count_divisors(self, n):\n        if n in self.divisors:\n            return self.divisors[n]\n        \n        result = list(self.generate_result(n))\n        \n        self.divisors[n] = result\n        \n        return result\n    \n    def sumFourDivisors(self, nums: List[int]) -> int:\n        divisors = list(map(self.count_divisors, nums))\n        four_divisors = list([x for x in divisors if len(x) == 4])\n        return sum(map(sum, four_divisors))\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        for n in nums:\n            divisors = self.getDivisors(n)\n            if len(divisors) == 4:\n                res += sum(divisors)\n        return res\n\n    def getDivisors(self, n):\n        divisors = set()\n        for i in range(1, n):\n            if i ** 2 > n:\n                break\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n//i)\n            if len(divisors) > 4:\n                break\n        return divisors", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ret = 0\n        for num in nums:\n            divs = set()\n            i = 1\n            while i ** 2 <= num:\n                if not num % i:\n                    divs.add(i)\n                    divs.add(num // i)\n                if len(divs) > 4:\n                    break\n                i += 1\n            if len(divs) == 4:\n                ret += sum(divs)\n        return ret", "class Solution:\n    def __init__(self):\n        self.divisors = {}\n    def count_divisors(self, n):\n        if n in self.divisors:\n            return self.divisors[n]\n        result = []\n        \n        counter = 1\n        quo = n // counter\n        \n        while counter <= quo:\n            \n            if n % counter == 0:\n                result.append(counter)\n                if quo != counter:\n                    result.append(quo)\n                \n            counter += 1\n            quo = n // counter\n                \n        self.divisors[n] = result\n        return result\n    \n    def sumFourDivisors(self, nums: List[int]) -> int:\n        divisors = list(map(self.count_divisors, nums))\n        four_divisors = list([x for x in divisors if len(x) == 4])\n        return sum(map(sum, four_divisors))\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        # 10:58 9/24/20\n \n        \n        def four_divisors(n):\n            div = set()\n            cnt = 0\n            for i in range(1, int(n ** 0.5) + 1):\n                if n % i == 0:\n                    div.add(i)\n                    div.add(n // i)\n                    cnt += 2\n                    if cnt > 4:\n                    # if len(div) > 4:\n                        return 0\n            return sum(div) if len(div) == 4 else 0\n        \n \n        \n        if not nums: return 0\n        nums.sort()\n        total = 0\n        # sums = [0]\n        past = [None, None]\n        \n        for i, v in enumerate(nums):\n            if i > 0 and v == nums[i - 1] and v == past[0]:\n                total += past[1]\n                continue\n            tmp = four_divisors(v)\n            total += tmp\n            past = [v, tmp]\n            \n                    \n        return total\n                    \n        \n        \n        \n            \n            \n           \n", "class Solution:\n    def helper(self, n):\n        if n == 1:\n            return 0\n        \n        d = int(math.sqrt(n))\n        cnt = 2\n        sm = 1 + n\n        while d > 1:\n            if n % d == 0:\n                d1 = n // d\n                if d1 != d:\n                    sm += d + d1\n                    cnt += 2\n                else:\n                    sm += d\n                    cnt += 1\n            if cnt > 4:\n                return 0\n            \n            d -= 1\n        \n        if cnt == 4:\n            return sm\n        return 0\n        \n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        for n in nums:\n            res += self.helper(n)\n            #print(n, res)\n        return res", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        summ = 0\n        for num in nums:\n            if num > 1:\n                summ += self.divisors(num)\n        \n        return summ\n    \n    def divisors(self, num):\n        visited_factors = set()\n        visited_factors.add(1)\n        visited_factors.add(num)\n        factors = 2\n        summ = 1 + num\n        for i in range(2, int(num ** 0.5) + 1):\n            # print(\\\"i \\\", i, \\\" num \\\", num)\n            if not num % i and num % i not in visited_factors:\n                visited_factors.add(i)\n                summ += i\n                factors += 1\n                secondHalf = num // i\n                if secondHalf not in visited_factors:\n                    visited_factors.add(secondHalf)\n                    factors += 1\n                    summ += secondHalf\n        \n        # print(\\\"factors \\\", factors)\n        if factors == 4:\n            return summ\n        return 0", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0\n        for n in nums:\n            tmp = set([1,n])\n            r = ceil(sqrt(n))\n            if r*r == n:\n                continue\n            for d in range(2,r+1):\n                if n%d==0:\n                    tmp.add(d)\n                    tmp.add(n//d)\n            #print(tmp)\n            if len(tmp) ==4:\n                ans += sum(tmp)\n        return ans", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        z = 0\n        for num in nums:\n            i = 1\n            res = []\n\n            while i*i <= num:\n                if (num % i ==0):\n                    res.append(i)\n                i += 1\n            if len(res) == 2:\n                lin = [num//j for j in res]\n                final = list(set(res + lin))\n                if (len (final) == 4):\n                    z += sum(final)\n        \n        return max(0, z)\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        # p1 * p2\n        # 1, p1, p2, p1 * p2\n        # p^n: n+1\n        # 8: 1, 2, 4, 8\n        # p^3\n        \n        def find_divisors(n):\n            i = 1\n            divisors = []\n            while i * i < n:\n                if n % i == 0:\n                    divisors.append(i)\n                    divisors.append(n // i)\n                i += 1\n            if i * i == n:\n                divisors.append(i)\n            return divisors\n        \n        ans = 0\n        for n in nums:\n            divisors = find_divisors(n)\n            if len(divisors) == 4:\n                ans += sum(divisors)\n        return ans", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        \n        \n        ##LEARN THISS BRUHHHH\n        res = 0\n        for i in range(len(nums)):\n            curSum, curAns = 1 + nums[i], 2\n            for j in range(2, int(sqrt(nums[i])) + 1):\n                if nums[i] % j == 0:\n                    if j == (nums[i] // j):\n                        curSum += (nums[i] // j)\n                        curAns += 1\n                    else:\n                        curSum += (j + (nums[i] // j))\n                        curAns += 2\n            if curAns == 4:\n                res += curSum\n        return res\n  \n                \n", "class Solution:\n    def find_factors(self, n):\n        factors = []\n        i = 1\n        j = n\n        while True:\n            if i*j == n:\n                factors.append(i)\n                if i == j:\n                    break\n                factors.append(j)\n            i += 1\n            j = n // i\n            if i > j:\n                break\n        return factors\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        d = 0\n        for i in nums:\n            f = self.find_factors(i)\n            if len(f)==4:\n                d+=f[0]+f[1]+f[2]+f[3]\n        return d\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        # 10:58 9/24/20\n        def four_divisors(n):\n            div = set()\n            for i in range(1, int(n ** 0.5) + 1):\n                if n % i == 0:\n                    div.add(i)\n                    div.add(n // i)\n                    if len(div) > 4:\n                        return 0\n            return sum(div) if len(div) == 4 else 0\n        \n        # def four_divisors(n):\n        #     cnt = 0\n        #     sums = 0\n        #     if n != 0:\n        #         i = 1\n        #         while i * i < n:\n        #             if n % i == 0:\n        #                 cnt += 2\n        #                 sums += i + n // i\n        #             if cnt > 4:\n        #                 return 0\n        #             i += 1\n        #     return sums if cnt == 4 else 0\n        \n        if not nums: return 0\n        nums.sort()\n        total = 0\n        # sums = [0]\n        past = [None, None]\n        \n        for i, v in enumerate(nums):\n            if i > 0 and v == nums[i - 1] and v == past[0]:\n                total += past[1]\n                continue\n            tmp = four_divisors(v)\n            total += tmp\n            past = [v, tmp]\n            \n                    \n        return total\n                    \n        \n        \n        \n            \n            \n           \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0\n        for n in nums:\n            d = set()\n            for cnd in range(1, floor(sqrt(n))+1):\n                q, r = divmod(n, cnd)\n                if not r:\n                    d.add(q)\n                    d.add(cnd)\n            if len(d) == 4:\n                ans += sum(d)\n        return ans", "class Solution:\n    def __init__(self):\n        self.divisors = {}\n        \n    def generate_result(self, n):\n        counter = 1\n        quo = n // counter\n        \n        while counter <= quo:\n            \n            if n % counter == 0:\n                yield counter\n                if quo != counter:\n                    yield quo\n                \n            counter += 1\n            quo = n // counter\n        \n        \n    def count_divisors(self, n):\n        \n        result = list(self.generate_result(n))\n        \n        \n        return result\n    \n    def sumFourDivisors(self, nums: List[int]) -> int:\n        divisors = list(map(self.count_divisors, nums))\n        four_divisors = list([x for x in divisors if len(x) == 4])\n        return sum(map(sum, four_divisors))\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        divs = dict()\n        \n        for v in nums:\n            divs.setdefault(v, [0, []])\n            divs[v][0] += 1\n        \n        n = max(nums)\n        sieve = (1 + n) * [0]\n            \n        for i in range(2, 1 + n):\n            j = i\n                \n            while j <= n:\n                sieve[j] += 1\n                    \n                if j in divs:\n                    divs[j][1].append(i)\n                    \n                j += i\n            \n        # print(divs)\n            \n        return sum([freq * (1 + sum(cur_div)) for k, (freq, cur_div) in list(divs.items()) if len(cur_div) == 3])\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        ans = 0\n        for n in nums:\n            rangemax = int(math.sqrt(n))\n            factsum = n + 1\n            factcount = 2\n            for f1 in range(2, rangemax + 1):\n                if not n%f1:\n                    f2 = n//f1\n                    factcount += 1\n                    factsum += f1\n                    if f1 != f2:\n                        factcount += 1\n                        factsum += f2\n                    if factcount > 4 or factcount%2:\n                        break\n            if factcount == 4:\n                ans += factsum\n        return ans", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        # 10:58 9/24/20\n        def four_divisors3(n):\n            div = set()\n            i = 1\n            while i*i < n:\n                if n % i == 0:\n                    div.add(i)\n                    div.add(n // i)\n                    if len(div) > 4:\n                        return 0\n                i += 1\n            return sum(div) if len(div) == 4 else 0\n        \n        def four_divisors(n):\n            div = set()\n            cnt = 0\n            for i in range(1, int(n ** 0.5) + 1):\n                if n % i == 0:\n                    div.add(i)\n                    div.add(n // i)\n                    cnt += 2\n                    if cnt > 4:\n                    # if len(div) > 4:\n                        return 0\n            return sum(div) if len(div) == 4 else 0\n        \n        def four_divisors2(n):\n            cnt = 0\n            sums = 0\n            div = set()\n            if n != 0:\n                # i = 1\n                for i in range(1, int(n** 0.5) + 1):\n                    if n % i == 0:\n                        cnt += 2\n                        sums += i + n // i\n                        # div.add(i)\n                        # div.add(n // i)\n                    if cnt > 4:\n                        return 0\n                    # i += 1\n            return sums if cnt == 4 else 0\n        \n        if not nums: return 0\n        nums.sort()\n        total = 0\n        # sums = [0]\n        past = [None, None]\n        \n        for i, v in enumerate(nums):\n            if i > 0 and v == nums[i - 1] and v == past[0]:\n                total += past[1]\n                continue\n            tmp = four_divisors(v)\n            total += tmp\n            past = [v, tmp]\n            \n                    \n        return total\n                    \n        \n        \n        \n            \n            \n           \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        # 10:58 9/24/20\n \n        \n        def four_divisors(n):\n            div = set()\n            cnt = 0\n            sums = 0\n            for i in range(1, int(n ** 0.5) + 1):\n                if n % i == 0:\n                    div.add(i)\n                    sums += i\n                    div.add(n // i)\n                    sums += n // i\n                    cnt += 2\n                    if cnt > 4:\n                    # if len(div) > 4:\n                        return 0\n                    \n            return sums if len(div) == 4 else 0\n            # return sum(div) if len(div) == 4 else 0\n        \n \n        \n        if not nums: return 0\n        nums.sort()\n        total = 0\n        # sums = [0]\n        past = [None, None]\n        \n        for i, v in enumerate(nums):\n            if i > 0 and v == nums[i - 1] and v == past[0]:\n                total += past[1]\n                continue\n            tmp = four_divisors(v)\n            total += tmp\n            past = [v, tmp]\n            \n                    \n        return total\n                    \n        \n        \n        \n            \n            \n           \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        return sum(contr(n) for n in nums)        \n    \ndef contr(n):\n    p = None\n    if n**.5%1==0:\n        return 0\n    for i in range(2,math.ceil(n**.5)):\n        if n%i==0:\n            if p is None:\n                p = i\n            else:\n                return 0\n    if p is None:\n        return 0\n    return 1 + p + n//p + n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        n = 400\n        prime = [True for i in range(n+1)] \n        p = 2\n        while (p * p <= n):\n            if (prime[p] == True):\n                for i in range(p * p, n+1, p): \n                    prime[i] = False\n            p += 1\n        prime[0] = False\n        prime[1] = False\n        prime_set = [p for p in range(n+1) if prime[p]]\n        \n        cnt = 0\n        for i in nums:\n            if i == 0:\n                continue\n            for p in prime_set:\n                if i % p == 0:\n                    r = i // p\n                    if r == p or r == 1:\n                        break\n                    r_prime = True\n                    for q in prime_set:\n                        if r % q == 0:\n                            if r != q:\n                                r_prime = False\n                            break\n                    if r_prime:  \n                        cnt += (p+1) * (r+1)\n                    break\n                    \n        \n        for i in nums:\n            p = int(i**(1/3) +0.5)\n            if prime[p] and p**3 == i:\n                cnt += (p * i - 1) // (p - 1)\n                print(i, p, p**2, p)\n                    \n        return cnt", "class Solution:\n    def divisors(self, n, c={}):\n        if n in c:\n            return c[n]\n        d = []\n        for i in range(1, int(sqrt(n) + 1)):\n            if n % i == 0:\n                d.append(i)\n                j = n // i\n                if j != i:\n                    d.append(j)\n            if len(d) > 4:\n                break\n        if len(d) == 4:\n            s = sum(d)\n            c.update({n:s})\n            return s\n        else:\n            c.update({n:0})\n            return 0\n\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        return sum(self.divisors(x) for x in nums)", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        @lru_cache(None)\n        def divisors(v):\n            divs = set()\n            for i in range(1,ceil(sqrt(v))+1):\n                if not v % i: divs.update({i, v//i})\n                if len(divs) > 4: return 0\n            return sum(divs) if len(divs)==4 else 0\n\n        return sum(map(divisors, nums))\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        total = 0\n        pSieve = [0 for k in range(10**5 + 1)]\n        for k in range(2, len(pSieve)):\n            if pSieve[k] == 1:\n                continue\n            pSieve[k + k::k] = [1]*((len(pSieve) - 1)//k - 1)\n        for num in nums:\n            if num == 1 or pSieve[num] == 0 or sqrt(num) == int(sqrt(num)):\n                continue\n            k = 2\n            while num % k != 0:\n                k += 1\n            if (num == k**3) or pSieve[num // k] == 0:\n                total += 1 + num + k + num // k\n        return total", "class Solution:\n    def sumFourDivisors(self, nums: List[int], c={}) -> int:\n        r = 0\n        for n in nums:\n            if n in c:\n                r += c[n]\n                continue\n            d = []\n            for i in range(1, round(sqrt(n) + 1)):\n                if n % i == 0:\n                    d.append(i)\n                    j = n // i\n                    if j != i:\n                        d.append(j)\n                if len(d) > 4:\n                    break\n            if len(d) == 4:\n                s = sum(d)\n                c.update({n:s})\n                r += s\n            else:\n                c.update({n:0})\n        return r", "class Solution:\n    def sumFourDivisors(self, nums: List[int], c={}) -> int:\n        r = 0\n        for n in nums:\n            if n in c:\n                r += c[n]\n                continue\n            s = n + 1\n            cnt = 2\n            for i in range(2, round(sqrt(n) + 1)):\n                if n % i == 0:\n                    cnt += 1\n                    if cnt > 4:\n                        s = 0\n                        break\n                    s += i\n                    j = n // i\n                    if j != i:\n                        cnt += 1\n                        if cnt > 4:\n                            s = 0\n                            break\n                        s += j\n            if cnt == 4:\n                c.update({n:s})\n                r += s\n            else:\n                c.update({n:0})\n        return r", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def helper(n):\n            if int(math.sqrt(n)) * int(math.sqrt(n)) == n:\n                return 0\n            summary = 1 + n\n            count = 2\n            for i in range(2, int(math.sqrt(n))+1):\n                if n % i == 0:\n                    summary += (n//i + i)\n                    count += 2\n                    if count > 4:\n                        break\n            \n            if count == 4: \n                return summary  \n            else: \n                return 0\n        res = 0\n        \n        for n in nums:\n            res += helper(n)\n                \n        return res", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        for n in nums:\n            divisor = set()\n            for i in range(1, floor(sqrt(n)) + 1):\n                if n % i == 0:\n                    divisor.add(n // i)\n                    divisor.add(i)\n                    if len(divisor) > 4:\n                        break\n            if len(divisor) == 4:\n                res += sum(divisor)\n                \n        return res\n                    \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int], c={}) -> int:\n        r = 0\n        for n in nums:\n            if n in c:\n                r += c[n]\n                continue\n            d = []\n            for i in range(1, int(sqrt(n) + 1)):\n                if n % i == 0:\n                    d.append(i)\n                    j = n // i\n                    if j != i:\n                        d.append(j)\n                if len(d) > 4:\n                    break\n            if len(d) == 4:\n                s = sum(d)\n                c.update({n:s})\n                r += s\n            else:\n                c.update({n:0})\n        return r", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        valAll = 0\n        \n        for num in nums:\n            local = set()\n            for i in range(1, int(math.sqrt(num))+1):\n                if num % i == 0:\n                    local.add(i)\n                    local.add(int(num/i))\n                    if len(local) > 4:\n                        break\n            if len(local) == 4:\n                valAll += sum(local)\n            #print(str(num)+\\\"  \\\"+str(local))\n        return valAll", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        @lru_cache(None)\n        def divisors(v):\n            divs = set()\n            for i in range(1,ceil(sqrt(v))+1):\n                if not v % i: divs.update({i, v//i})\n                if len(divs) > 4: return 0\n            return sum(divs) if len(divs)==4 else 0\n        return sum(map(divisors, nums))\n        \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        @lru_cache(None)\n        def divisors(v):\n            res = set()\n            for i in range(1,ceil(sqrt(v))+1):\n                if not v % i:\n                    res.update({i, v//i})\n                if len(res) > 4: return 0\n            return sum(res) if len(res)==4 else 0\n        return sum(list(map(divisors, nums)))\n        \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ret_count = {}  # N -> Count\n        ret_sum = {}  # N -> Sum\n        # --\n        for n in nums:\n            if n in ret_sum:\n                if ret_sum[n] is not None:\n                    ret_count[n] += 1\n                continue\n            # calculate it!\n            # max_div = int(n ** 0.5)\n            # if max_div*max_div >= n:\n            #     max_div -= 1  # forbid three\n            cur_div = 2\n            hit_div = None\n            while cur_div*cur_div <= n:\n                if n % cur_div==0:\n                    if hit_div is None:\n                        hit_div = cur_div\n                    else:\n                        hit_div = None\n                        break\n                cur_div += 1\n            # get result\n            if hit_div is not None and hit_div!=(n//hit_div):  # hit it!!\n                res = 1 + n + hit_div + (n//hit_div)\n                ret_count[n] = 1\n            else:\n                res = None\n            ret_sum[n] = res\n        # --\n        ret = sum(ret_sum[k]*c for k,c in list(ret_count.items()))\n        return ret\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0\n        for num in nums:\n            cnt = 0\n            for i in range(2, int(num**0.5)+1):\n                if num%i == 0:\n                    cnt += 1\n                    d = i\n                if cnt > 1:\n                    break\n            if cnt == 1 and d != num//d:\n                ans += 1 + d + num//d + num\n        return ans", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        n = 400\n        prime = [True for i in range(n+1)] \n        p = 2\n        while (p * p <= n):\n            if (prime[p] == True):\n                for i in range(p * p, n+1, p): \n                    prime[i] = False\n            p += 1\n        prime[0] = False\n        prime[1] = False\n        prime_set = [p for p in range(n+1) if prime[p]]\n        \n        cnt = 0\n        for i in nums:\n            if i == 0:\n                continue\n            for p in prime_set:\n                if p * p > i:\n                    break\n                if i % p == 0:\n                    r = i // p\n                    if r == p or r == 1:\n                        break\n                    r_prime = True\n                    for q in prime_set:\n                        if q * q > r:\n                            break\n                        if r % q == 0:\n                            if r != q:\n                                r_prime = False\n                            break\n                    if r_prime:  \n                        cnt += (p+1) * (r+1)\n                    break\n                    \n        \n        for i in nums:\n            p = int(i**(1/3) +0.5)\n            if prime[p] and p**3 == i:\n                cnt += (p * i - 1) // (p - 1)\n                print(i, p, p**2, p)\n                    \n        return cnt", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        @lru_cache(None)\n        def divisors(v):\n            res = set()\n            for i in range(1,ceil(sqrt(v))+1):\n                if not v % i:\n                    res.add(i)\n                    res.add(v//i)\n                if len(res) > 4: return 0\n            return sum(res) if len(res)==4 else 0\n        return sum(list(map(divisors, nums)))\n        \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        @lru_cache(None)\n        def divisors(v):\n            divs = set()\n            for i in range(1,ceil(sqrt(v))+1):\n                if not v % i: divs.update({i, v//i})\n                if len(divs) > 4: return 0\n            return sum(divs) if len(divs)==4 else 0\n\n        return sum(map(divisors, nums))", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        @lru_cache(None)\n        def divisors(v):\n            res = set()\n            for i in range(1,ceil(sqrt(v))+2):\n                if not v % i:\n                    res.add(i)\n                    res.add(v//i)\n                if len(res) > 4: return 0\n            return sum(res) if len(res)==4 else 0\n        return sum(map(divisors, nums))\n        \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        \n        @lru_cache(None)\n        def divisors(v):\n            res = []\n            for i in range(1,ceil(sqrt(v))+2):\n                if len(res) > 4: return 0\n                if not v % i:\n                    res += i,\n                    if v//i > i:\n                        res += v//i,\n                    else:\n                        break\n            res = set(res)\n            return sum(res) if len(res)==4 else 0\n        \n        for v in nums:\n            res += divisors(v)\n            \n        return res\n", "from math import sqrt\n\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        \n        sum_of_factor = 0\n        \n        for x in nums:\n            \n            factors = set()\n            \n            # collect all factors into set\n            for i in range(1, int(sqrt(x)+1) ):\n                \n                if x % i == 0:\n                    \n                    factors.add( i )\n                    factors.add( x // i )\n                    \n                    if len( factors ) > 4:\n                        # early breaking when there is too many factors\n                        break\n                        \n                \n            if len( factors ) == 4:\n                # update sum of four divisors\n                sum_of_factor += sum(factors)\n        \n        return sum_of_factor        \n        \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        # 10:58 9/24/20\n        # def four_divisors(n):\n        #     div = set()\n        #     for i in range(1, int(n ** 0.5) + 1):\n        #         if n % i == 0:\n        #             div.add(i)\n        #             div.add(n // i)\n        #             if len(div) > 4:\n        #                 return 0\n        #     return sum(div) if len(div) == 4 else 0\n        \n        def four_divisors(n):\n            cnt = 0\n            div = set()\n            if n != 0:\n                i = 1\n                for i in range(1, int(n** 0.5) + 1):\n                    if n % i == 0:\n                        cnt += 2\n                        # sums += i + n // i\n                        div.add(i)\n                        div.add(n // i)\n                    if len(div) > 4:\n                        return 0\n                    # i += 1\n            return sum(div) if len(div) == 4 else 0\n        \n        if not nums: return 0\n        nums.sort()\n        total = 0\n        # sums = [0]\n        past = [None, None]\n        \n        for i, v in enumerate(nums):\n            if i > 0 and v == nums[i - 1] and v == past[0]:\n                total += past[1]\n                continue\n            tmp = four_divisors(v)\n            total += tmp\n            past = [v, tmp]\n            \n                    \n        return total\n                    \n        \n        \n        \n            \n            \n           \n", "from collections import defaultdict\nfrom math import ceil\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n\n        count = defaultdict(set)\n        for j, num in enumerate(nums):\n            for i in range(1,ceil(num**0.5)+1):\n                if num % i == 0:\n                    count[(j,num)].update({i, num//i})\n                    if (len(count[j,num])>4):\n                        break\n        total = 0 \n        print(count)\n        for num in count:\n            if len(count[num])==4:\n                total+=sum(count[num])\n        return total\n", "class Solution:\n    def getDivisors(self, x):\n        if x == 1:\n            return [1]\n        out = []\n        bound = int(sqrt(x)) + 1\n        for i in range(1, bound):\n            if x % i == 0:\n                out.append(i)\n                if x//i != i:\n                    out.append(x//i)\n            if len(out) > 4:\n                break\n        return out\n        \n    def sumFourDivisors(self, nums: List[int]) -> int:\n        divisors = {}\n        sum_four = 0\n        for x in nums:\n            if x in divisors:\n                if len(divisors[x]) == 4:\n                    sum_four += sum(divisors[x])\n            else:\n                x_div = self.getDivisors(x)\n                if len(x_div) == 4:\n                    sum_four += sum(x_div)\n                divisors[x] = x_div\n        return sum_four\n", "from collections import defaultdict\nfrom math import ceil\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n\n        count = defaultdict(set)\n        for j, num in enumerate(nums):\n            count[(j,num)].add(num)\n            for i in range(1,ceil(num**0.5)+1):\n                if num % i == 0:\n                    count[(j,num)].update({i, num//i})\n                    if (len(count[j,num])>4):\n                        break\n        total = 0 \n        print(count)\n        for num in count:\n            if len(count[num])==4:\n                total+=sum(count[num])\n        return total\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        # go through the range of numbers in range(0, len(nums))\n        # for each number go through the range(0, sqrt(num))\n        # for the first loop initialize a set or an arrya to keep track that there are 4 divisors\n        # go through the numbers, in the end if the len(set) == 4, get teh sum of array and append it to teh answer\n        answer = 0 \n        for num in nums:\n            mySet = set()\n            for num2 in range(1, (int(sqrt(num)) + 1)):\n                if (num % num2) == 0:\n                    mySet.add(num2)\n                    mySet.add(num / num2)\n                    if len(mySet) > 4:\n                        break\n            print(mySet)\n            if len(mySet) == 4:\n                answer += int(sum(mySet))\n        return answer", "class Solution:\n    def divisors(self, n, c={}):\n        if n in c:\n            return c[n]\n        d = []\n        for i in range(1, int(sqrt(n) + 1)):\n            if n % i == 0:\n                d.append(i)\n                j = n // i\n                if j != i:\n                    d.append(j)\n        if len(d) == 4:\n            s = sum(d)\n            c.update({n:s})\n            return s\n        else:\n            c.update({n:0})\n            return 0\n\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        return sum(self.divisors(x) for x in nums)", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        \n        def divisors(v):\n            divs = set()\n            for i in range(1,ceil(sqrt(v))+1):\n                if not v%i:\n                    divs.update({i, v//i})\n                if len(divs)>4:\n                    return 0\n            return sum(divs) if len(divs)==4 else 0\n        \n        return sum(map(divisors,nums))", "from collections import defaultdict\nfrom math import ceil\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        count = defaultdict(set)\n        for j, num in enumerate(nums):\n            count[(j,num)].add(num)\n            for i in range(1,ceil(num**0.5)+1):\n                if num % i == 0:\n                    count[(j,num)].update({i, num//i})\n                    if (len(count[j,num])>4):\n                        break\n        total = 0 \n        print(count)\n        for num in count:\n            if len(count[num])==4:\n                total+=sum(count[num])\n        return total\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ret = 0\n        for num in nums:\n            sqrt = int(math.sqrt(num))\n            if sqrt*sqrt == num:\n                continue\n            divSum = 0\n            count = 0\n            for i in range(1, sqrt+1):\n                if num%i == 0:\n                    divSum += i + num//i\n                    count += 1\n                    if count > 2:\n                        break\n            if count == 2:\n                ret += divSum\n        return ret", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def getDivisors(k):\n            count,second = 0,0\n            for i in range(2,int(sqrt(k))+1):\n                if k%i == 0 :\n                    count += 1\n                    if count > 1 or i*i == k: return [0]\n                    second = k//i\n            if count == 1: return [1,second,k//second,k]\n            else: return [0]        \n    \n        total = 0\n        for num in nums:\n            total += sum(getDivisors(num))\n        return total\n    \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        \n        def get_divs(num):\n            \n            #print(num)\n            divs = []\n            for i in range(1, int(sqrt(num)) + 1):\n                #print(divs)\n                \n                if(not num%i):\n                    #divides\n                    divs.append(i)\n                    if(i != int(num/i)):\n                        divs.append(int(num/i))\n                \n                if(len(divs) > 4):\n                    return None\n                \n            #print(divs)\n            if(len(divs) < 4):\n                return None\n            \n            #print(divs)\n            return sum(divs)\n        \n        ans = 0\n        \n        for item in nums:\n            divs = get_divs(item)\n            #print(item, divs)\n            if(divs):\n                ans += divs\n        \n        return ans", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0\n        for num in nums:\n            ans += self.divisors(num)\n            \n        return ans\n    \n    def divisors(self,num):\n        memo = set()\n        for i in range(1,num + 1):\n            if i * i > num:\n                break\n            if num % i == 0:\n                memo.add(i)\n                memo.add(num//i)\n                if len(memo) > 4:\n                    return 0\n                \n        if len(memo) == 4:\n            return sum(memo)\n        return 0\n", "class Solution:\n    def divisors(self, n, c={}):\n        if n in c:\n            return c[n]\n        d = []\n        for i in range(1, int(sqrt(n) + 1)):\n            if n % i == 0:\n                d.append(i)\n                j = n // i\n                if j != i:\n                    d.append(j)\n        c.update({n:d})\n        return d\n\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        s = 0\n        for n in nums:\n            d = self.divisors(n)\n            if len(d) == 4:\n                s += sum(d)\n        return s", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        for num in nums:\n            divisor = set() \n            for i in range(1, floor(sqrt(num)) + 1):\n                if num % i == 0:\n                    divisor.add(num//i)\n                    divisor.add(i)\n                if len(divisor) > 4:    \n                    break\n                    \n            if len(divisor) == 4:\n                res += sum(divisor)\n        return res  \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def div4(i):\n            if i <= 5:\n                return set()\n            else:\n                count = {1,i}\n                for j in range(2, int(math.sqrt(i)) + 1):\n                    if i % j == 0:\n#                        print(i,j)\n                        count.update({j,i/j})\n                    if len(count) > 4:\n                        return count\n                return count\n    \n        count = 0\n        for i in nums:\n            s = div4(i)\n#            print(s)\n            if len(s) ==4:\n                count += sum(s)\n        return int(count)", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        for num in nums:\n            divisor = set() \n            for i in range(1, floor(sqrt(num)) + 1):\n                if num % i == 0:\n                    divisor.add(num//i)\n                    divisor.add(i)\n                if len(divisor) > 4:    \n                    break\n                    \n            if len(divisor) == 4:\n                res += sum(divisor)\n        return res  ", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        return sum([self.sumofDivisors(num) for num in nums])  \n    def sumofDivisors(self, num):\n        s = set()\n        for i in range(1,int(sqrt(num))+1):\n            if num%i==0: \n                s.add(i)\n                s.add(num//i)\n            if len(s)>4:return 0    \n        return sum(s) if len(s)==4 else 0", "\n\n\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def four_div_sum(num):\n            divs = set()\n            for i in range(1, floor(sqrt(num)) + 1):\n                if num % i == 0:\n                    divs.update({i, num//i})\n                if len(divs) > 4:\n                    return 0\n            return sum(divs) if len(divs) == 4 else 0\n    \n        return sum(four_div_sum(num) for num in nums)", "from collections import defaultdict\nfrom math import ceil\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def getSumOfDivisors(n):\n            divisors = set()\n            for i in range(1, ceil(n**0.5)+1):\n                if n%i==0:\n                    divisors.update({i,n//i})\n                if len(divisors)>4:\n                    return 0\n            return sum(divisors) if len(divisors)==4 else 0\n        return sum(map(getSumOfDivisors, nums))", "import math\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n    \n        res = 0\n        for i in nums:\n            divisor = set()\n            for j in range(1, int(math.sqrt(i))+1):\n                if i%j == 0:\n                    divisor.add(j)\n                    divisor.add(i//j)\n                if len(divisor)>4:\n                    break\n            if len(divisor) == 4:\n                res += sum(divisor)\n        return res\n        \n            \n    \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        result = 0\n        for n in nums:\n            divisors = set()\n            for i in range(1, floor(sqrt(n)) + 1):\n                if n % i == 0:\n                    divisors.add(i)\n                    divisors.add(n//i)\n                if len(divisors) > 4:\n                    break\n            if len(divisors) == 4:\n                result += sum(divisors)\n        return result", "from math import sqrt\n\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        for num in nums:\n            divisor = set() \n            for i in range(1, floor(sqrt(num)) + 1):\n                if num % i == 0:\n                    divisor.add(num//i)\n                    divisor.add(i)\n                if len(divisor) > 4:    \n                    break\n                    \n            if len(divisor) == 4:\n                res += sum(divisor)\n        return res  \n\n# class Solution:\n#     def sumFourDivisors(self, nums: List[int]) -> int: #o(n^2)\n#         ans = 0\n#         for num in nums:\n#             if Solution.findNumDivisors(self,num) == 4:\n#                 ans += Solution.sumDivisors(self,num)\n        \n#         return ans\n    \n#     def findNumDivisors(self, num) -> int: #o(N)\n#         cnt = 1\n        \n#         for i in range(1,int(sqrt(num))):\n#             if num % i == 0:\n#                 cnt += 1\n        \n#         return cnt\n    \n#     def sumDivisors(self, num) -> int:\n#         ans = num\n        \n#         for i in range(1,int(sqrt(num)):\n#             if num % i == 0:\n#                 ans += i\n        \n#         return ans\n", "\n\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        \n        \n        div_sum = 0\n        \n        for num in nums:\n            divs = set()\n            for i in range(1, floor(sqrt(num))+1):\n                if num % i == 0:\n                    divs.add(num//i)\n                    divs.add(i)\n                if len(divs) > 4:\n                    break\n            if len(divs) == 4:\n                div_sum += sum(divs)\n        return div_sum\n\n       \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        \n        \n        def findFactors(num):\n            res = set()\n            for i in range(int(num**0.5)+1):                \n                if num%(i+1)==0:\n                    res.add(i+1)\n                    res.add(num//(i+1))\n                if len(res)>4:\n                    break\n            if len(res) == 4:                    \n                return sum(res)\n            else:\n                return 0\n        \n        output = 0\n        for num in nums:\n            temp = findFactors(num)\n            output+=temp\n        return output", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        out = 0\n        for i in nums:\n            temp = set()\n            for j in range(1, floor(sqrt(i))+1):\n                if i % j == 0:\n                    temp.add(j)\n                    temp.add(int(i/j))\n                if len(temp) > 4:\n                    break\n            if len(temp) == 4:\n                out += sum(temp)\n        return out", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        for num in nums:\n            divisor = set() \n            for i in range(1, int(sqrt(num)) + 1):\n                if num % i == 0:\n                    divisor.add(num//i)\n                    divisor.add(i)\n                if len(divisor) > 4:    \n                    break\n                    \n            if len(divisor) == 4:\n                res += sum(divisor)\n        return res \n        \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ret = 0\n        for n in nums:\n            divisors = set()\n            for i in range(1,math.floor(n**(0.5)) + 1):\n                if n % i == 0:\n                    divisors.add(i)\n                    divisors.add(n/i)\n                if len(divisors) > 4:\n                    break\n            if len(divisors) == 4:\n                ret += sum(divisors) \n            \n        return int(ret)\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        for num in nums:\n            divisor = set() \n            for i in range(1, floor(sqrt(num)) + 1):\n                if num % i == 0:\n                    divisor.add(num//i)\n                    divisor.add(i)\n                if len(divisor) > 4:    \n                    break\n                    \n            if len(divisor) == 4:\n                res += sum(divisor)\n        return res", "class Solution:\n    def find_divisors(self, num):\n        cnt = 0\n        run_sum = num + 1\n        for i in range(2, int(num**0.5)+1):\n            if i * i == num:\n                return 0\n            if cnt > 1:\n                return 0\n            if not num % i:\n                run_sum += num//i + i\n                cnt += 1\n        return run_sum if cnt == 1 else 0\n        \n    def sumFourDivisors(self, nums: List[int]) -> int:\n        cnt = 0\n        for i in nums:\n            cnt += self.find_divisors(i)\n        return cnt", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def getDivs(num):\n            result = []\n            for div in range(1,int(num**(1/2))+1):\n                if num % div == 0:\n                    result.append(div)\n                    result.append(num // div)\n                if len(result) > 4:\n                    print(num,result)\n                    return 0\n                \n            if (int(num**(1/2))) * (int(num**(1/2))) == num:\n                # result.append(int(num**(1/2)))\n                result.pop()\n                \n            # print(result,num)\n            if len(result) == 4:\n                return sum(result)\n            else:\n                return 0\n        \n        total = 0\n        for num in nums:\n            total += getDivs(num)\n        \n        return total", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        ls = len(nums)\n        for i in range(ls):\n            divs = set()\n            for j in range(1, floor(sqrt(nums[i])) + 1):\n                if nums[i] % j == 0:\n                    divs.add(nums[i]//j)\n                    divs.add(j)\n                if len(divs) > 4:\n                    break\n            \n            if len(divs) == 4:\n                res = res + sum(divs)\n        return res", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        def check(x):\n            v = set()\n            i = 1\n            while i * i <= x:\n                if x % i == 0:\n                    v.add(i)\n                    v.add(x // i)\n                    if len(v) > 4:\n                        return 0\n                i += 1\n            if len(v) == 4:\n                return sum(v)\n            return 0\n        return sum([check(x) for x in nums])\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        range_6 = list(range(6))\n        result = 0\n        for num in nums:\n            if num in range_6:\n                pass\n            else:\n                pivot = int(num ** 0.5)\n                temp = [1, num]\n                len_t = 2\n                for i in range(2, pivot+1):\n                    divisor, rem = divmod(num, i)\n                    if not rem:\n                        if i == divisor:\n                            len_t = 0\n                            break\n                        temp += [i, divisor]\n                        len_t += 2\n                        if len_t > 4:\n                            break\n                if len_t == 4:\n                    result += sum(temp)\n        return result\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans=0\n        for val in nums:\n            P=self.check(val)\n            if P:\n                ans+=sum(P)\n        return ans\n    \n    \n    \n    def check(self,n):\n        L=[n]\n        count=1\n        if n!=1:\n            L.append(1)\n            count+=1\n        \n        for i in range(2,int(n**0.5)+1):\n            \n            if n%i==0:\n                L.append(i)\n                count+=1\n                if n/i!=float(i):\n                    L.append(n//i)\n                    count+=1\n                if count>4:return None\n        if count!=4:\n            return None\n        return L", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        \n        def check(n):\n            i = 1\n            cnt = 0\n            res = 0\n            while i*i<n:\n                if n%i==0:\n                    cnt += 2\n                    res += i\n                    res += n//i\n                i += 1\n                if cnt>4:\n                    return 0\n            if i*i==n:\n                cnt += 1\n                res += i\n            if cnt == 4:\n                return res\n            else:\n                return 0\n            \n        # print (check(21))\n        # return 1\n        res = sum(check(n) for n in nums)\n        return res\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        range_6 = list(range(6))\n        result = 0\n        for num in nums:\n            if num in range_6:\n                pass\n            else:\n                pivot = int(num ** 0.5)\n                temp = 1 + num\n                len_t = 2\n                for i in range(2, pivot+1):\n                    divisor, rem = divmod(num, i)\n                    if not rem:\n                        if i == divisor:\n                            len_t = 0\n                            break\n                        temp += i + divisor\n                        len_t += 2\n                        if len_t > 4:\n                            break\n                if len_t == 4:\n                    result += temp\n        return result\n", "class Solution:\n    def __init__(self):\n        self.divisors = {}\n        \n        \n    def count_divisors(self, n):\n        if n in self.divisors:\n            return self.divisors[n]\n        result = [1, n]\n        \n        counter = 2\n        quo = n // counter\n        \n        while counter <= quo:\n            \n            if n % counter == 0:\n                result.append(counter)\n                if quo != counter:\n                    result.append(quo)\n                    \n            #Don't have to keep calculating\n            if len(result) > 4:\n                break\n                \n            counter += 1\n            quo = n // counter\n                \n        self.divisors[n] = result\n        return result\n    \n    def sumFourDivisors(self, nums: List[int]) -> int:\n        divisors = list(map(self.count_divisors, nums))\n        four_divisors = list([x for x in divisors if len(x) == 4])\n        return sum(map(sum, four_divisors))\n", "class Solution:\n    def __init__(self):\n        self.divisors = {}\n        \n        \n    def count_divisors(self, n):\n        if n in self.divisors:\n            return self.divisors[n]\n        result = []\n        \n        counter = 1\n        quo = n // counter\n        \n        while counter <= quo:\n            \n            if n % counter == 0:\n                result.append(counter)\n                if quo != counter:\n                    result.append(quo)\n                    \n            #Don't have to keep calculating\n            if len(result) > 4:\n                break\n                \n            counter += 1\n            quo = n // counter\n                \n        self.divisors[n] = result\n        return result\n    \n    def sumFourDivisors(self, nums: List[int]) -> int:\n        divisors = list(map(self.count_divisors, nums))\n        four_divisors = list([x for x in divisors if len(x) == 4])\n        return sum(map(sum, four_divisors))\n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        import math\n        \n        def isprime(n):\n            if not n % 1 == 0: return False\n            if math.sqrt(n) % 1 == 0: return False\n            for i in range(math.ceil(math.sqrt(n))):\n                if i == 0 or i == 1: continue\n                if n % i == 0: return False\n            return True\n        \n        ans = 0\n        for num in nums:\n            if num < 6:\n                continue\n            if math.sqrt(num) % 1 == 0: continue\n            if isprime(pow(num, 1/3)) or num == 4913: # pow(4913, 1/3) == 16.999999999999996\n                ans += 1 + pow(num, 1/3) + pow(num, 2/3) + num\n                continue\n            divisors = 0\n            for i in range(math.ceil(math.sqrt(num))):\n                if i == 0 or i == 1:\n                    continue\n                if num % i == 0:\n                    if (num / i) % i == 0:\n                        break\n                    if not divisors == 0:\n                        divisors = 0\n                        break\n                    divisors = i\n            if (not divisors == 0) and isprime(num / divisors) and isprime(divisors):\n                ans += (divisors + 1) * ((num / divisors) + 1)\n        \n        return int(ans)", "import numpy as np\n\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        \n        ret = 0\n        for num in nums:\n            divisors = set()\n            N = int(np.floor(np.sqrt(num)))\n            for i in range(1, N+1):\n                if num % i == 0:\n                    divisors.add(i)\n                    divisors.add(num//i)\n                if len(divisors) > 4:\n                    break\n            if len(divisors) == 4:\n                ret += sum(divisors)\n        return ret\n            \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        import math\n        \n        def isprime(n):\n            if not n % 1 == 0: return False\n            if math.sqrt(n) % 1 == 0: return False\n            for i in range(math.ceil(math.sqrt(n))):\n                if i == 0 or i == 1: continue\n                if n % i == 0: return False\n            return True\n        \n        ans = 0\n        for num in nums:\n            if num < 6:\n                continue\n            if math.sqrt(num) % 1 == 0: continue\n            if isprime(pow(num, 1/3)) or num == 4913:\n                ans += 1 + pow(num, 1/3) + pow(num, 2/3) + num\n                continue\n            divisors = 0\n            for i in range(math.ceil(math.sqrt(num))):\n                if i == 0 or i == 1:\n                    continue\n                if num % i == 0:\n                    if (num / i) % i == 0:\n                        break\n                    if not divisors == 0:\n                        divisors = 0\n                        break\n                    divisors = i\n            if (not divisors == 0) and isprime(num / divisors) and isprime(divisors):\n                ans += (divisors + 1) * ((num / divisors) + 1)\n        \n        return int(ans)", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        import math\n        s=0\n        nums=sorted(nums, reverse=True)\n        for i in nums:\n            count=set()\n            true=True\n            for x in range(2, int(math.sqrt(i))+1):\n                if len(count)>4:\n                    true=False\n                    break\n                if i%x==0:\n                    count.add(x)\n                    count.add(i//x)\n            if len(count)==2 and true:\n                s+=sum(count)+i+1\n        return s", "\nclass Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ttl = 0\n        \n        for n in nums:\n            seen = set()\n            for i in range(1,int(sqrt(n)) + 1):\n                if n % i == 0:\n                    seen.add(i)\n                    seen.add(n/i)\n                if len(seen) >= 5:\n                    break\n            if len(seen) == 4:\n                ttl += sum(seen)\n        return int(ttl)\n                    \n                \n                \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        res = 0\n        for num in nums:\n            div = set()\n            for j in range(1,int(sqrt(num)) + 1):\n                if not num%j:\n                    div.add(j)\n                    div.add(num//j)\n                if len(div) > 4:\n                    break\n            if len(div) == 4:\n                res += sum(div)\n        return res\n        \n", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        \n        def findiv(num):\n            res = 0\n            cnt = 0\n            for i in range(1, int(num ** 0.5) + 1):\n                if not num % i:\n                    if i * i == num:\n                        cnt += 1\n                        res += i\n                    else:\n                        cnt += 2\n                        res += i\n                        res += num // i\n            return res if cnt == 4 else 0\n        \n        \n        res = 0\n        \n        for num in nums:\n            res += findiv(num)\n        return res", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0\n        for n in nums:\n            tmp = set([1,n])\n            r = ceil(sqrt(n))\n            if r*r == n:\n                continue\n            for d in range(2,r+1):\n                if n%d==0:\n                    tmp.add(d)\n                    tmp.add(n//d)\n                if len(tmp)>4:\n                    break\n            #print(tmp)\n            if len(tmp) ==4:\n                ans += sum(tmp)\n        return ans", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        ans = 0\n        for num in nums:\n            out = []\n\n            for i in range(1, int(num ** 0.5)+1):\n                a, b = divmod(num, i)\n                if b == 0:\n                    if a == i: out.append(a)\n                    else: out.extend([a, i])\n                if len(out) > 4: break\n            if len(out) == 4:\n                ans += sum(out)\n        \n        return ans", "class Solution:\n    def sumFourDivisors(self, nums: List[int]) -> int:\n        # find all divisor of this number and use set() to select all the distinct factors\n        res = 0\n        for num in nums:\n            divisor_num = set()\n            for i in range(1, int(sqrt(num))+1):\n                if num%i == 0:\n                    divisor_num.add(num//i)\n                    divisor_num.add(i)\n                    \n            if len(divisor_num) == 4:\n                res +=sum(divisor_num)\n                \n                \n                \n        return res\n                \n                    \n                    \n"]