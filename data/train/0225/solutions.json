["INF = float('inf')\nclass Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        n = len(dominoes)\n        d1 = [-1] * n\n        d2 = [-1] * n\n        \n        cnt = INF\n        for i in range(n - 1, -1, -1):\n            if dominoes[i] == 'L':\n                cnt = 0\n            elif dominoes[i] == '.':\n                cnt += 1\n            elif dominoes[i] == 'R':\n                cnt = INF\n            d1[i] = cnt\n        \n        cnt = INF\n        for i in range(n):\n            if dominoes[i] == 'R':\n                cnt = 0\n            elif dominoes[i] == '.':\n                cnt += 1\n            elif dominoes[i] == 'L':\n                cnt = INF\n            d2[i] = cnt\n    \n        ret = []\n        for i in range(n):\n            if d1[i] == d2[i]:\n                ret.append('.')\n            elif d1[i] < d2[i]:\n                ret.append('L')\n            else:\n                ret.append('R')\n        return ''.join(ret)", "class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        n = len(dominoes)\n        \n        d = [0] * n\n        \n        force = 0\n        \n        for i in range(n):\n            c = dominoes[i]\n            \n            if c == 'R':\n                force = n\n            elif c == 'L':\n                force = 0\n            else:\n                force = max(force - 1, 0)\n                \n            d[i] += force\n            \n        force = 0\n        \n        for i in range(n-1, -1, -1):\n            c = dominoes[i]\n            \n            if c == 'R':\n                force = 0\n            elif c == 'L':\n                force = n\n            else:\n                force = max(force - 1, 0)\n                \n            d[i] -= force\n            \n        def inner():\n            for f in d:\n                if f == 0:\n                    yield '.'\n                elif f > 0:\n                    yield 'R'\n                else:\n                    yield 'L'\n                    \n        return ''.join(inner())", "class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        n = len(dominoes)\n        force = [0] * n\n        f = 0\n        for i in range(n):\n            if dominoes[i] == 'R':\n                f = n\n            elif dominoes[i] == 'L':\n                f = 0\n            else:\n                f = max(f-1, 0)\n            force[i] += f\n        for i in range(n-1, -1, -1):\n            if dominoes[i] == 'L':\n                f = n\n            elif dominoes[i] == 'R':\n                f = 0\n            else:\n                f = max(f-1, 0)\n            force[i] -= f\n        return ''.join('.' if f==0 else 'R' if f > 0 else 'L' for f in force)", "class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        l = len(dominoes)\n        right_force = [0]*l\n        left_force = [0]*l\n        force1 = 0\n        force2 = 0\n        for i in range(l):\n            if dominoes[i]=='R':\n                force1 = l\n            elif dominoes[i]=='L':\n                force1 = 0\n            else:\n                force1 = max(force1 - 1, 0)\n            right_force[i] += force1\n        for i in range(l-1, -1, -1):\n            if dominoes[i]=='L':\n                force2 = l\n            elif dominoes[i]=='R':\n                force2 = 0\n            else:\n                force2 = max(force2 - 1, 0)\n            left_force[i] += force2\n\n        result = ''\n        for i in range(l):\n            if right_force[i] > left_force[i]:\n                result += 'R'\n            elif right_force[i] < left_force[i]:\n                result += 'L'\n            else:\n                result += '.'\n        return result", "class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        forces = [0] * len(dominoes)\n        max_force = len(dominoes)\n\n        force = 0\n        for i, d in enumerate(dominoes):\n            if d == 'R':\n                force = max_force\n            elif d == 'L': # have to use elif here, not if\n                force = 0\n            else:\n                force = max(0, force - 1)\n            forces[i] += force\n\n        force = 0\n        for i in range(len(dominoes) - 1, -1, -1):\n            d = dominoes[i]\n            if d == 'L':\n                force = max_force\n            elif d == 'R':\n                force = 0\n            else:\n                force = max(0, force - 1)\n            forces[i] -= force\n            \n        print(forces)\n\n        result = ''\n        for f in forces:\n            if f == 0:\n                result += '.'\n            elif f > 0:\n                result += 'R'\n            else:\n                result += 'L'\n        return result\n    \n# TC: O(N)\n# SC: O(N)\n", "class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        n = len(dominoes)\n        balance = [0] * len(dominoes)\n        \n        b = 0\n        for index,c in enumerate(dominoes):\n            if c == 'R':\n                b = n\n            elif c == 'L':\n                b = 0\n            else:\n                b = max(b - 1, 0)\n            balance[index] += b\n\n        b = 0\n        for index,c in enumerate(reversed(dominoes)):\n            index = -index - 1\n            if c == 'R':\n                b = 0\n            elif c == 'L':\n                b = n\n            else:\n                b = max(b - 1, 0)\n            balance[index] -= b\n\n        result = ['.'] * len(dominoes)\n        for i in range(len(dominoes)):\n            if dominoes[i] == 'R' or dominoes[i] == 'L':\n                result[i] = dominoes[i]\n            elif balance[i] > 0:\n                result[i] = 'R'\n            elif balance[i] < 0:\n                result[i] = 'L'\n        return ''.join(result)\n"]