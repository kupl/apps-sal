["class Solution:\n     def simplifyPath(self, path):\n         \"\"\"\n         :type path: str\n         :rtype: str\n         \"\"\"\n         stack=[]\n         path=[p for p in path.split('/') if p]\n         for f in path:\n             if f == '.': continue\n             elif f == '..': \n                 if stack: stack.pop()\n             else: stack.append(f)\n         return '/'+'/'.join(stack)", "class Solution:\n     def simplifyPath(self, path):\n         \"\"\"\n         :type path: str\n         :rtype: str\n         \"\"\"\n         res=[]\n         str_list=path.split('/')\n         loc=len(str_list)-1\n         for i in range (len(str_list)):\n             ss=str_list[i]\n             if ss=='':\n                 continue\n             if ss=='.':\n                 continue\n             if ss=='..':\n                 if len(res)>0:\n                     res.pop()\n             else:\n                 res.append(ss)\n                 \n         return '/'+'/'.join(res)\n                 \n", "class Solution:\n     def simplifyPath(self, path):\n         \"\"\"\n         :type path: str\n         :rtype: str\n         \"\"\"\n         stack = []\n         for p in path.split(\"/\"):\n             if p == \"..\":\n                 if stack:\n                     stack.pop()\n             elif p and p != '.':\n                 stack.append(p)\n         return \"/\" + \"/\".join(stack)", "class Solution:\n     def simplifyPath(self, path):\n         \"\"\"\n         :type path: str\n         :rtype: str\n         \"\"\"\n         \n         lst = list([_f for _f in path.split(\"/\") if _f])\n         print(lst)\n         stack = []\n         \n         for item in lst:\n             if item == \"..\":\n                 if not stack:\n                     continue\n                 stack.pop()\n             elif item == \".\":\n                 print(\"here\")\n                 continue\n             else:\n                 stack.append(item)\n         \n         return \"/\"+\"/\".join(stack)\n", "class Solution:\n     def simplifyPath(self, path):\n         \"\"\"\n         :type path: str\n         :rtype: str\n         \"\"\"\n         place = [p for p in path.split('/') if p != '.' and p != '' ]\n         stack = []\n         for p in place:\n             if p == '..':\n                 if len(stack) > 0:\n                     stack.pop()\n             else:\n                 stack.append(p)\n         return '/'+'/'.join(stack)\n", "class Solution:\n     def simplifyPath(self, path):\n         \"\"\"\n         :type path: str\n         :rtype: str\n         \"\"\"\n         l = []\n         ans = '/'\n         names = path.split('/')\n         print(('names', names))\n         for s in names:\n             if s == '..':\n                 # if len(l) == 0:\n                 #     l.append(s)\n                 # else:\n                 #     l.pop()\n                 if len(l)!=0:\n                     l.pop()\n             elif s == '.':\n                 continue\n             elif s == '':\n                 continue\n             else:\n                 l.append(s)\n         print(('l: ', l))\n         for s in l:\n             ans += s + '/'\n         n = len(ans)\n         if n > 1:\n             return ans[:len(ans)-1]\n         else:\n             return ans\n", "class Solution:\n     def simplifyPath(self, path):\n         \"\"\"\n         :type path: str\n         :rtype: str\n         \"\"\"\n         place=[p for p in path.split('/') if p!='.' and p!='' ]\n         result=[]\n         for p in place:\n             if p=='..':\n                 if len(result)>0:\n                     result.pop()\n             else:\n                 result.append(p)\n         return '/'+'/'.join(result)\n                 \n", "class Solution:\n     def simplifyPath(self, path):\n         \"\"\"\n         :type path: str\n         :rtype: str\n         \"\"\"\n         stack = []\n         tmpstr = ''\n         path += '/'\n         for c in path:\n             if c == '/':\n                 if tmpstr:\n                     if tmpstr == '..':\n                         if stack:\n                             stack.pop()\n                     elif tmpstr != '.':\n                         stack.append(tmpstr)\n                 tmpstr = ''\n             else:\n                 tmpstr += c\n         return '/'+\"/\".join(stack)", "class Solution:\n     def simplifyPath(self, path):\n         \"\"\"\n         :type path: str\n         :rtype: str\n         \"\"\"\n         if not path or len(path)==1:\n             return path\n         stack = []\n         list_path = path.split('/')\n         for ch in list_path:\n             if ch == '..':\n                 if stack: stack.pop()\n             elif ch != '.' and ch:\n                 stack.append(ch)\n         return '/'+'/'.join(stack)", "class Solution:\n     def simplifyPath(self, path):\n         \"\"\"\n         :type path: str\n         :rtype: str\n         \"\"\"\n         n=len(path)\n         if(n==0): return path\n \n         v=[]\n         i=0\n         while(i<n):\n             while(i<n and path[i]=='/' ):i=i+1\n             if (i == n): break\n             \n             left=i\n             while(i<n and path[i]!='/'):i=i+1\n             right=i-1\n             \n             s=path[left:right+1]\n             \n             if s==\"..\":\n                 if (len(v)!=0):\n                     v.pop() \n             elif s!= \".\":\n                 v.append(s)\n \n         if(len(v)==0):\n             return \"/\"\n         \n         ret=''\n         for i in range(len(v)):\n             ret=ret+'/'+v[i]\n \n         return ret", "class Solution:\n     def simplifyPath(self, path):\n         \"\"\"\n         :type path: str\n         :rtype: str\n         \"\"\"\n         \n         tokens = path.split('/')\n         stack = list()\n         for token in tokens:\n             if token != '':\n                 stack.append(token)\n         \n         res = ''\n         back = 0\n         while stack:\n             top = stack.pop()\n             if top == '.':\n                 continue\n             elif top == '..':\n                 back = back + 1\n             else:\n                 if back == 0:\n                     res = '/'+top+res\n                 else:\n                     back = back - 1\n                     \n         if res == '':\n             return '/'\n         return res \n                         \n", "class Solution:\n     def simplifyPath(self, path):\n         \"\"\"\n         :type path: str\n         :rtype: str\n         \"\"\"\n     \n         \n         places = [tmp for tmp in path.split(\"/\") if tmp!=\".\" and tmp!=\"\"]\n         stack = []\n         for name in places:\n             \n             if name == \".\" or name == \"\":\n                 continue\n             elif name == \"..\":\n                 if len(stack) > 0:\n                     stack.pop()\n             else:\n                 stack.append(name)\n                     \n         return \"/\" + \"/\".join(stack)", "class Solution:\n     def simplifyPath(self, path):\n         \"\"\"\n         :type path: str\n         :rtype: str\n         \"\"\"\n         path = path.split(\"/\")\n         stack = []\n         for n in path:\n             if n == \"\" or n == \".\":\n                 continue\n             elif n == \"..\":\n                 if stack != []:\n                     stack.pop()\n             else:\n                 stack.append(n)\n                 \n         return \"/\" + '/'.join(stack)\n             \n             \n"]