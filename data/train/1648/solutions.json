["def spinning_rings(inner_max, outer_max):\n    p = inner_max + 1\n    q = outer_max + 1\n    move = 1\n    while (-move) % p != move % q:\n        if (-move) % p >= q:\n            move = move // p * p + p - q + 1\n        elif move % q >= p:\n            move = move // q * q + q\n        elif (-move) % p > move % q and ((-move) % p + move % q) % 2 == 0:\n            move += ((-move) % p - move % q) // 2\n        else:\n            move = min((move - 1) // p * p + p, (move - 1) // q * q + q) + 1\n    return move", "def spinning_rings(inner_max, outer_max):\n    \n    i = inner_max+1\n    j = outer_max+1\n    \n    x = 1\n    while x < i*j:\n        a = -x % i\n        b = x % j\n        if a == b:\n            return x\n        elif a > b: \n            if a > j:\n                x += a-j\n            else:                \n                x+= max((a-b)//2,1)\n        elif b > a:\n            if b > i:\n                x+= j-b\n            else:\n                x+= max(min(j-b,a),1)", "def spinning_rings(im, om):\n    a,b,res,d = im,1,1,abs(om - im)\n    while a != b:\n        x = 1\n        if a - b > 2: x = (a-b)//2\n        if a < b: x = min(a + 1, om - b + 1)\n        if b == im + 1 or om < im and a == im: x = d\n        if a - b == 1: x = min(d,min(a,om-b))\n        a,b = (a - x) % (im+1), (b + x) % (om+1)\n        res += x\n    return res", "def spinning_rings(inner_max, outer_max):\n    inner = inner_max\n    outer = 1\n    moves = 1\n    while inner != outer:\n        if outer > inner_max:\n            jump = outer_max + 1 - outer\n        elif inner > outer_max:\n            jump = inner - outer_max\n        elif inner > outer:\n            jump = (inner - outer + 1) // 2\n        elif inner == (outer_max + 1 - outer):\n            jump = inner\n        else:\n            jump = min(inner + 1, outer_max + 1 - outer)\n        outer = (outer + jump) % (outer_max + 1)\n        inner = (inner - jump) % (inner_max + 1)\n        moves += jump\n    return moves", "def spinning_rings(inner_max, outer_max):\n    if inner_max==outer_max:\n        if inner_max%2:\n            return (inner_max+1)/2\n        return inner_max+1\n    if inner_max%2:\n        res = (inner_max+1)/2 if outer_max>(inner_max+1)/2 else (inner_max+1+(outer_max+1)*((inner_max+1)//(outer_max+1)-1+(((inner_max+1)//(outer_max+1)+1)*(outer_max+1))%2))/2\n        return res    \n    if outer_max<inner_max:\n        if outer_max%2:\n            # outermax odd\n            a = 2*(inner_max+1) - (inner_max+1)%(outer_max+1) \n            return a if (inner_max+1)%(outer_max+1)>(outer_max+1)/2 else a - (outer_max+1)/2\n        else:\n            #a = ceil((inner_max-outer_max)/(outer_max+1))*(outer_max+1)\n            a = inner_max + 1 - (inner_max-outer_max)%(outer_max+1)\n            b = (inner_max + 1 - a)//2\n            #b = ((inner_max-outer_max)%(outer_max+1))//2\n            c = (outer_max + 1 + a)%2\n            return inner_max - b + 1 if not c else (inner_max - outer_max + a)/2\n    if outer_max>inner_max:\n        k = (outer_max + 1)//(inner_max + 1)\n        a = (k + 1)*(inner_max + 1) + ((outer_max + 1)%(inner_max + 1))/2\n        return a if not ((outer_max+1)%(inner_max+1))%2 else 2*(outer_max+1)-(outer_max-inner_max/2)-((outer_max+1)%(inner_max+1)+1)/2\n", "def spinning_rings(inner_max, outer_max):\n    i = 1\n    while True:\n        inner = -i % (inner_max + 1)\n        outer = i % (outer_max + 1)\n        if inner == outer:\n            return int(i)\n        elif inner < outer:\n            i += inner + 1 if inner_max > outer_max else outer_max - outer + 1\n        else:\n            if inner > outer_max:\n                i += inner - outer_max\n            else:\n                mid = (inner + outer) / 2\n                if mid % 1 == 0:\n                    i += mid - outer\n                else:\n                    i += min(inner, outer_max - outer) + 1", "def spinning_rings(inner_max, outer_max):\n    i = inner_max\n    o = 1\n    moves = 1\n    while i != o:\n        if o > inner_max:\n            jump = outer_max + 1 - o\n        elif i > outer_max:\n            jump = i - outer_max\n        elif i > o:\n            jump = (i - o + 1) // 2\n        elif i == (outer_max + 1 - o):\n            jump = i\n        else:\n            jump = min(i + 1, outer_max + 1 - o)\n        o = (o + jump) % (outer_max + 1)\n        i = (i - jump) % (inner_max + 1)\n        moves += jump\n    return moves", "def spinning_rings(innermax,outermax):\n    if innermax>outermax:\n        a = innermax\n        b = 1\n        c = 1\n        if a>outermax and outermax*2<innermax:\n            c+=(a-outermax)\n            b+=(a-outermax)%(outermax+1)\n            if b>outermax:\n                b=0\n            a=outermax\n\n        while a != b:\n            if a>outermax and c!=b:  # check if a> outermax than a become in outer max range.\n                temp=c\n                c+=(a-outermax)\n                b=(b+(c-temp))%(outermax+1)\n                a=outermax\n            if (a%2)==(b%2):\n                return c+(a-b)//2\n            elif a<b:\n                c+=a+1\n                b+=(a+1)%(outermax+1)\n                a=innermax\n            elif a>b:\n                c+=(outermax-b+1)\n                a=a-(outermax-b+1)\n                b=0\n            if a == 0:\n                a = innermax\n            else:\n                a -= 1\n            if b == outermax:\n                b = 0\n            else:\n                b += 1\n            c += 1\n        else:\n            return c\n\n    else:\n        a = innermax\n        b = 1\n        c = 1\n        if a % 2 != 0:\n            return a // 2 + 1\n        while a != b:\n\n            if a % 2 == 1 and b % 2 == 1:\n                return c + (a // 2 + 1)\n            elif a > b and a % 2 == 0 and b % 2 == 0:\n                return c + (a - b) // 2\n            else:\n\n                c = c + a\n                b = b + a\n                a = 0\n            if b > innermax:\n                a = abs((a - (outermax - b)) % (innermax + 1))\n                c += (outermax - b)\n                b = outermax\n            if a == 0:\n                a = innermax\n            else:\n                a -= 1\n            if b == outermax:\n                b = 0\n            else:\n                b += 1\n            c += 1\n        else:\n            return c", "def spinning_rings(inner_max, outer_max):\n\n    outer_ring = 0\n    count = 1\n    if inner_max > outer_max:\n        while True:\n            count += (inner_max - outer_max)\n            inner_ring = outer_max\n            outer_ring += ((count) % (outer_max+1))\n\n            if (inner_ring-outer_ring) % 2 == 0:\n                count += (inner_ring-outer_ring)//2\n                return count\n            else:\n                # parity change happens when one of the rings reaches 0\n                # it happens if inner reaches 0 or outer reaches outer_max\n                # since inner is at outer max it is certain that outer will reach zero sooner\n                count += (outer_max-outer_ring)+1\n                inner_ring -= (outer_ring)\n                if inner_ring % 2 == 0:\n                    count += (inner_ring//2)\n                    return count\n                else:\n                    dist = (inner_max + 1) // (outer_max + 1)\n                    steps = dist * (outer_max + 1)\n                    if inner_max%2 == outer_max%2:\n                        inner_ring = (inner_max-steps)\n                        count = steps + (inner_ring)//2\n                        return count+1\n                    elif(inner_max-steps-1)%2==0:\n                        inner_ring = (inner_max - steps)\n                        count = steps + inner_ring // 2\n                        return count + 1\n                    else:\n\n                        count = inner_max + (inner_max-outer_max) + 1\n                        outer_ring = count%(outer_max+1)\n                        count += (outer_max-outer_ring)//2\n                return count+1\n\n    elif outer_max > inner_max:\n        inner_ring = inner_max\n        count = 1\n        outer_ring = 1\n        while True:\n            if (inner_ring-outer_ring) % 2 == 0:\n                count += (inner_ring-outer_ring)//2\n                return count\n            else:\n                # check parity change\n                count = (outer_max) # larger ring reaches 0\n                outer_ring = 0\n                inner_ring -= count%(inner_max+1)\n                count += 1\n                if inner_ring%2 == 0:\n                    count += inner_ring//2\n                    return count\n                else:\n                        count += inner_ring + 1 # smaller reaches inner max\n                        outer_ring += inner_ring+1\n                        inner_ring = inner_max\n                        count += (inner_ring-outer_ring)//2\n                return count\n    else:\n        if(outer_max-1) %2 == 0:\n            return count + outer_max//2"]