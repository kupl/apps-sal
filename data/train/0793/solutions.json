["# cook your dish here\nimport math\ntry:\n    n,d=map( int,input().split() )\n    a=list(map(int,input().split()))\n    a.sort()\n    z=abs(a[0]-d)\n    for j in range(n):\n        x=abs(a[j]-d)\n        z=math.gcd(x,z)\n    print(z)    \n        \n    \nexcept:\n    pass", "# cook your dish here\nn,r=map(int,input().split())\nh=list(map(int,input().split()))\nd=[abs(r-h[0])]\ndef hcf(x, y):\n    while(y):\n        x, y = y, x % y\n    return x\n\nfor i in range(len(h)-1):\n    d.append(abs(h[i+1]-h[i]))\nfor i in range(len(d)-1):\n    d[i+1]=hcf(d[i],d[i+1])\nprint(d[-1])", "from math import fabs\r\nimport sys\r\nsys.setrecursionlimit(10**6)\r\ndef f(x):\r\n    return int(fabs(x-r))\r\ndef gcd(a, b):\r\n    if b == 0:\r\n        return a\r\n    return gcd(b, a % b)\r\n\r\n\r\nn, r = map(int, input().split())\r\nli = list(map(int, input().split()))\r\nli = list(map(f, li))\r\nresult = li[0]\r\nfor i in li[1:]:\r\n    result = gcd(result, i)\r\nprint(result)", "def gcd(a, b):\r\n    while b > 0:\r\n        a, b = b, a % b\r\n    return a\r\n\r\na = [4, 10, 16, 14]\r\nn,r=map(int,input().split())\r\nlst=[r]\r\nlst.extend(list(map(int,input().split())))\r\nnlst=[]\r\nfor i in range(0,n-1):\r\n\tnlst.append(lst[i+1]-lst[i])\r\nresult = nlst[0]\r\nfor i in nlst[1:]:\r\n    result = gcd(result, i)\r\n\r\nprint(result)", "# cook your dish here\nimport math\nn,k=map(int,input().split())\nls=list(map(int,input().split()))\nls.append(k)\nls.sort()\nif(len(ls)>2):\n    z=math.gcd(ls[1]-ls[0],ls[2]-ls[1])\n    for i in range(3,len(ls)):\n        z=math.gcd((ls[i]-ls[i-1]),z)\nelse:\n    z=ls[1]-ls[0]\nprint(z)", "# cook your dish here\nimport math\nn,r=[int(x) for x in input().split()]\na=[int(x) for x in input().split()]\na=sorted(a+[r])\ndiff=[]\n#print(a)\nfor i in range(0,len(a)-1):\n    diff.append(abs(a[i+1]-a[i]))\n#print(diff)    \nif len(diff)==1:\n    print(diff[0])\nelse:\n       flag=0\n       g=math.gcd(diff[0],diff[1])    \n       for i in range(2,len(diff)):\n          if g==1:\n              print(g)\n              flag=1\n              break\n          g=math.gcd(diff[i],g)\n       if flag==0:\n          print(g)\n\n\n\n\n\n\n\n\n", "from math import gcd\r\nfrom functools import reduce\r\ndef find_gcd(list):\r\n    x = reduce(gcd, list)\r\n    return x\r\n\r\nN,D = [int(i) for i in input().split()]\r\nH = [abs(int(i)-D) for i in input().split()]\r\n\r\nprint(find_gcd(H))", "# cook your dish here\ndef find_gcd(x, y): \n    while(y): \n        x, y = y, x % y \n  \n    return x \n      \nn,r=list(map(int,input().split()))\nl=list(map(int,input().split()))\nb=[l[0]-r]\nfor i in range(n-1):\n    b.append(l[i+1]-l[i])\n\nnum1=b[0]\nnum2=b[1]\ngcd=find_gcd(num1,num2)\nfor j in range(2,len(b)):\n    gcd=find_gcd(gcd,b[i])\nprint(gcd)\n    \n", "\nfrom math import fabs\nimport sys\nsys.setrecursionlimit(10**6)\ndef f(x):\n    return int(fabs(x-r))\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\nn, r = map(int, input().split())\nli = list(map(int, input().split()))\nli = list(map(f, li))\nresult = li[0]\nfor i in li[1:]:\n    result = gcd(result, i)\nprint(result)", "# cook your dish here\ndef gcd_(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd_(b,a%b)\n\ndef lcm(a,b):\n    return a*b//gcd_(a,b)\nn,r=map(int,input().split())\nl=list(map(int,input().split()))\nk=[]\nfor i in range(n):\n    k.append(l[i]-r)\ngcd=k[0]\nfor i in range(1,len(k)):\n    gcd=gcd_(gcd,k[i])\nprint(gcd)", "from math import fabs\r\nimport sys\r\nsys.setrecursionlimit(10**6)\r\ndef f(x):\r\n    return int(fabs(x-r))\r\ndef gcd(a, b):\r\n    if b == 0:\r\n        return a\r\n    return gcd(b, a % b)\r\n\r\n\r\nn, r = map(int, input().split())\r\nli = list(map(int, input().split()))\r\nli = list(map(f, li))\r\nresult = li[0]\r\nfor i in li[1:]:\r\n    result = gcd(result, i)\r\nprint(result)", "from math import fabs\r\ndef f(x):\r\n    return int(fabs(x-r))\r\n\r\nn, r = list(map(int, input().split()))\r\nli = list(map(int, input().split()))\r\nli = list(map(f, li))\r\nfor z in range(min(li),0,-1):\r\n    for k in li:\r\n        if k%z!=0:\r\n            break\r\n    else:\r\n        ans = z\r\n        break\r\ntry:\r\n    print(ans)\r\nexcept Exception:\r\n    print(1)\r\n", "# cook your dish here\nnum, loc = map(int, input().split())\nhouses = list(map(int, input().split()))\nans = 10**9\ntemp = []\nfor i in range(num):\n\tdiff = abs(houses[i] - loc)\n\tif diff != 0:\n\t\ttemp.append(diff)\ntemp.sort()\nx = temp[0]\nfor i in range(len(temp)):\n\tif temp[i]%x == 0:\n\t\tcontinue\n\telse:\n\t\tx = 1\n\t\tbreak\nprint(x)", "import math \r\nn,r=list(map(int,input().split()))\r\nl=list(map(int,input().split()))\r\na=[]\r\nfor i in range(len(l)):\r\n  a.append(abs(r-l[i]))\r\nnum1=a[0]\r\nnum2=a[1]\r\ngcd=math.gcd(num1,num2)\r\nfor i in range(2,len(a)):\r\n  gcd=math.gcd(gcd,a[i])\r\nprint(gcd)    \r\n\r\n", "# cook your di\nimport math\nn,r=map(int,input().split())\nl=list(map(int,input().split()))\nans=0\nfor i in range(len(l)):\n    ans=math.gcd(ans,abs(l[i]-r))\nprint(ans)", "# cook your dish here\nn,r = map(int,input().split())\nh = list(map(int,input().split()))\nif r not in h:\n    h.append(r)\nh.sort()\nd = [abs(h[i+1] - h[i]) for i in range(n-1)]\nm = max(d)\nans = 0\nfor i in range(m,0,-1):\n    if any([j%i!=0 for j in d]):\n        continue\n    else:\n        ans = i\n        break\nprint(ans)", "# cook your dish here\n# cook your dish here\ndef gcd (a,b):\n    if (b == 0):\n        return a\n    else:\n         return gcd (b, a % b)\nn,r=(input().split())\na=list(map(int,input().split()))\nc=[]\nfor i in range(len(a)-1):\n\tc.append(a[i+1]-a[i])\nc.append(abs(a[0]-int(r)))\nres=c[0]\nfor d in c[1::]:\n\tres=gcd(res,d)\nprint(res)", "# cook your dish here\ndef find_gcd(x, y): \n    while(y): \n        x, y = y, x % y \n  \n    return x \n\n\nn,r = list(map(int, input().split()))\nl = list(map(int, input().split()))\nfor i,ele in enumerate(l):\n    if ele > 0:\n        l[i] -= r\n    else:\n        l[i] += r\n        \n\n  \nnum1=l[0] \nnum2=l[1] \ngcd=find_gcd(num1,num2) \n  \nfor i in range(2,len(l)): \n    gcd=find_gcd(gcd,l[i]) \n      \nprint(gcd) \n", "import math\r\ndef gcda(l):\r\n\tnum1=l[0] \r\n\tnum2=l[1] \r\n\tgcdf=math.gcd(num1,num2) \r\n\t  \r\n\tfor i in range(2,len(l)): \r\n\t    gcdf=math.gcd(gcdf,l[i]) \r\n\t      \r\n\treturn(gcdf) \r\n\r\nn,R = list(map(int,input().split()))\r\narr = list(map(int,input().split()))\r\narr.append(R)\r\narr = sorted(arr)\r\nans = 99999999999999\r\nlisto = []\r\nfor i in range(n-1):\r\n\tlisto.append(min(ans,arr[i+1] - arr[i]))\r\n\r\nprint(gcda(listo))\r\n", "import math\r\ndef gcda(l):\r\n\tnum1=l[0] \r\n\tnum2=l[1] \r\n\tgcdf=math.gcd(num1,num2) \r\n\t  \r\n\tfor i in range(2,len(l)): \r\n\t    gcdf=math.gcd(gcdf,l[i]) \r\n\t      \r\n\treturn(gcdf) \r\n\r\nn,R = list(map(int,input().split()))\r\narr = list(map(int,input().split()))\r\narr.append(R)\r\narr = sorted(arr)\r\nans = 99999999999999\r\nlisto = []\r\nfor i in range(n-1):\r\n\tlisto.append(min(ans,arr[i+1] - arr[i]))\r\n\r\nprint(gcda(listo))\r\n", "import math\r\nn,r=list(map(int,input().split()))\r\nl=list(map(int,input().split()))\r\na=[]\r\nfor i in range(len(l)):\r\n    a.append(abs(r-l[i]))\r\nnum1=a[0]\r\nnum2=a[1]\r\ngcd=math.gcd(num1,num2)\r\nfor i in range(2,len(a)):\r\n    gcd=math.gcd(gcd,a[i])\r\nprint(gcd)\r\n", "from sys import stdin,stdout\r\nimport bisect\r\nfrom collections import defaultdict\r\ndef main():\r\n    #for _ in range(int(stdin.readline())):\r\n    n,d=map(int,stdin.readline().split())\r\n    arr=[int(k) for k in stdin.readline().split()]\r\n    arr.sort()\r\n    ind=bisect.bisect_left(arr,d)\r\n    diff=-1\r\n    if ind!=n and arr[ind]==d:\r\n        if ind==n-1:\r\n            diff=abs(arr[ind-1]-d)\r\n        else:\r\n            diff=min(abs(arr[ind+1]-d),abs(arr[ind-1]-d))\r\n    else:\r\n        if ind==n:\r\n            diff=abs(arr[ind-1]-d)\r\n        else:\r\n            diff=abs(arr[ind]-d)\r\n    counter=0\r\n    for i in range(1,n):\r\n        if abs(arr[i]-arr[i-1])%diff!=0:\r\n               counter=1\r\n               break\r\n    if counter==1:\r\n        print(1)\r\n    else:\r\n        print(diff)\r\n                   \r\n                \r\n        \r\n                \r\n            \r\ndef __starting_point():\r\n    main()\n__starting_point()", "# cook your dish here\nimport math\n\nn,r=list(map(int,input().split()))\n\ndef gcd(l):\n    m=math.gcd(l[0],l[1])\n    for t in l[2:]:\n        m=math.gcd(m,t)\n    return m\n    \nl=list(int(i) for i in input().split())\nl1=list([abs(x-r) for x in l])\nprint(gcd(l1))\n"]