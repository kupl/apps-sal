["#dt = {} for i in x: dt[i] = dt.get(i,0)+1\r\nimport sys;input = sys.stdin.readline\r\ninp,ip = lambda :int(input()),lambda :[int(w) for w in input().split()]\r\n\r\nn,k = ip()\r\nx = ip()\r\nx.sort()\r\nif k == 1:\r\n    a = x[n//2]\r\n    b = x[n//2-1]\r\nelse:\r\n    s = sum(x)\r\n    a = s//n\r\n    b = a + 1\r\nsa = sum([abs((a-i)**k) for i in x])\r\nsb = sum([abs((b-i)**k) for i in x])\r\nif sa < sb:\r\n    print(a)\r\nelse:\r\n    print(b)", "# cook your dish here\n\n# using the concept of binary search\n\ndef ret_sum(arr,k,x):\n    s=0\n    \n    for i in arr:\n        s+=abs((x-i)**k)\n    return s\n    \n   \nn,k=list(map(int,input().split()))\narr=list(map(int,input().split()))\nstart,end=min(arr),max(arr)\nhash_arr={}\nflag=0\n\nwhile start<=end and flag==0:\n    mid=(start+end)//2\n    mid_prev=mid-1\n    mid_next=mid+1\n    if mid not in hash_arr:\n        hash_arr[mid]=ret_sum(arr,k,mid)\n    if mid_next not in hash_arr:\n        hash_arr[mid_prev]=ret_sum(arr,k,mid_prev)\n    if mid_next not in hash_arr:\n        hash_arr[mid_next]=ret_sum(arr,k,mid_next)\n    if hash_arr[mid_prev]>hash_arr[mid] and hash_arr[mid_next]>hash_arr[mid]:\n        print(mid)\n        flag=1\n        break\n    elif hash_arr[mid_next]<hash_arr[mid]:\n        start=mid\n    else:\n        end=mid\n    \n    \n", "# cook your dish here\ndef func(n):\n\tsum = 0\n\tif k==1:\n\t\tfor i in l:\n\t\t\tsum+= abs(n-i)\n\t\treturn sum \n\tif k==2:\n\t\tfor i in l:\n\t\t\tsum+= (n-i)**2\n\t\treturn sum\n\tif k == 3:\n\t\tfor i in l:\n\t\t\tsum+= (abs(n-i))**3\n\t\treturn sum\ndef findPeakUtil(low,high,n):\n\tmid = low + (high-low)//2\n\tone = func(mid-1)\n\ttwo = func(mid)\n\tthree = func(mid+1)\n\t# print(one,two,three,mid)\n\tif (mid==0 or one >= two) and (mid==n-1 or three >= two):\n\t\treturn mid \n\telif (mid>0 and one < two):\n\t\treturn findPeakUtil(low,(mid-1),n)\n\telse:\n\t\treturn findPeakUtil(mid+1,high,n)\n\ndef findPeak(n): \n    return findPeakUtil(0, n - 1, n) \n\n(n,k) = map(int,input().split())\nl = list(map(int,input().split()))\nprint(findPeak(max(l)+2))", "import sys\r\nimport math\r\nfrom collections import defaultdict,Counter\r\n\r\ninput=sys.stdin.readline\r\ndef print(x):\r\n    sys.stdout.write(str(x)+\"\\n\")\r\n\r\n# sys.stdout=open(\"CP2/output.txt\",'w')\r\n# sys.stdin=open(\"CP2/input.txt\",'r')\r\n\r\n# m=pow(10,9)+7\r\nn,k=map(int,input().split())\r\na=list(map(int,input().split()))\r\na.sort(reverse=True)\r\navg1=sum(a)//n\r\navg2=avg1+1\r\nm=a[n//2]\r\nans1=0\r\nans2=0\r\nans3=0\r\nif k==1:\r\n    for j in a:\r\n        ans1+=abs(j-m)\r\n        ans2+=abs(j-a[n//2-1])\r\n        # ans2+=abs(j-avg1)\r\n        # ans3+=abs(j-avg2)\r\n    if ans1<=ans2:\r\n        print(m)\r\n    else:\r\n        print(a[n//2-1])\r\nelif k==2:\r\n    for j in a:\r\n        # ans1+=abs(j-m)*abs(j-m)\r\n        ans2+=abs(j-avg1)*abs(j-avg1)\r\n        ans3+=abs(j-avg2)*abs(j-avg2)\r\n    if ans2<=ans3:\r\n        print(avg1)\r\n    else:\r\n        print(avg2)\r\nelse:\r\n    for j in a:\r\n        # ans1+=pow(abs(j-m),3)\r\n        ans2+=pow(abs(j-avg1),3)\r\n        ans3+=pow(abs(j-avg2),3)\r\n    if ans2<=ans3:\r\n        print(avg1)\r\n    else:\r\n        print(avg2)\r\n", "# cook your dish here\ndef f(x):\n    sumi=0\n    for i in li:\n        sumi+=(abs((x-i)))**k\n    return sumi\ndef binary_search(l,r):\n    mid=(l+r)//2\n    if(f(mid)<f(mid-1)):\n        if(f(mid)<=f(mid+1)):\n            return mid\n        return binary_search(mid+1,r)\n    return binary_search(l,mid-1)\nl=input().split()\nn=int(l[0])\nk=int(l[1])\nl=input().split()\nli=[int(i) for i in l]\nprint(binary_search(0,5*(10**4)+5))\n", "# cook your dish here\ndef f(x):\n    sumi=0\n    for i in li:\n        sumi+=(abs((x-i)))**k\n    return sumi\ndef binary_search(l,r):\n    mid=(l+r)//2\n    if(f(mid)<f(mid-1)):\n        if(f(mid)<=f(mid+1)):\n            return mid\n        return binary_search(mid+1,r)\n    return binary_search(l,mid-1)\nl=input().split()\nn=int(l[0])\nk=int(l[1])\nl=input().split()\nli=[int(i) for i in l]\nprint(binary_search(0,5*(10**4)+5))\n"]