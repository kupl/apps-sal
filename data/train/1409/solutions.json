["for t in range(int(input())):\r\n    n=int(input())\r\n    print(bin(n).count(\"1\")) ", "for i in range(int(input())):\n    print(bin(int(input())).count(\"1\")) ", "\nfor i in range(int(input())):\n    print(bin(int(input())).count(\"1\")) \n", "t=int(input())\r\nfor items in range(t):\r\n    num=int(input())\r\n    print(bin(num).count(\"1\"))", "def bin_one(temp: int):\n    n = temp\n    count = 0\n    while n>0:\n        if n%2 == 1:\n            count += 1\n        n = n // 2\n    return count\n\nt = int(input())\nvalues = []\nfor _ in range(t):\n    values.append(input())\n\nfor value in values:\n    print(bin_one(int(value)))", "import sys\n# cook your dish here\nT=int(input())\nfor t in range(T):\n    N=int(sys.stdin.readline().strip())\n    cnt=0\n    while(N!=0):\n        N= N&(N-1)\n        cnt+=1\n    print(cnt)", "\n# def DecimaltoBinary():\n#     N = int(input())\n#     binary = bin(N)\n#     setbits = [ones for ones in binary[2:] if ones=='1']\n#     print(len(setbits))\n        \n        \n# cook your dish here\nt = int(input())\nfor i in range(t):\n    N = int(input())\n    print(bin(N).count(\"1\")) \n\n", "# cook your dish here\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return (x*y)//(gcd(x,y))\n\n\nabc=\"abcdefghijklmnopqrstuvwxyz\"\n\npi=3.141592653589793238\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    bin_n = bin(n)[2:]\n    print(bin_n.count('1'))", "for _ in range(int(input())):\n    n=int(input())\n    s=bin(n)\n    s=s[2:]\n    print(s.count('1'))", "for _ in range(int(input())):\r\n    print(bin(int(input())).count(\"1\"))\r\n", "# cook your dish here\nfor _ in range(int(input())):\n    n=int(input())\n    b=bin(n)\n    print(b.count('1'))\n", "cases = int(input())\nfor _ in range(cases):\n    a = int(input())\n    a = bin(a)\n    c = a.count('1')\n    print(c)", "# cook your dish here\nfrom collections import Counter\nimport string\nimport math\nimport sys\n# sys.setrecursionlimit(10**6) \ndef isprime(x): \n      \n    # check for numbers from 2 \n    # to sqrt(x) if it is divisible \n    # return false \n    i = 2\n    while(i * i <= x): \n        if (x % i == 0): \n            return 0\n        i+=1\n    return 1\ndef isSumOfKprimes(N, K): \n      \n    # N < 2K directly return false \n    if (N < 2 * K): \n        return 0\n  \n    # If K = 1 return value depends \n    # on primality of N \n    if (K == 1): \n        return isprime(N) \n  \n    if (K == 2): \n          \n        # if N is even directly \n        # return true; \n        if (N % 2 == 0): \n            return 1\n  \n        # If N is odd, then one  \n        # prime must be 2. All  \n        # other primes are odd \n        # and cannot have a pair \n        # sum as even. \n        return isprime(N - 2)\n      \n  \n    # If K >= 3 return true; \n    return 1\nfrom fractions import Fraction\ndef array_int():\n    return [int(i) for i in sys.stdin.readline().split()]\ndef vary(arrber_of_variables):\n    if arrber_of_variables==1:\n        return int(sys.stdin.readline())\n    if arrber_of_variables>=2:\n        return list(map(int,sys.stdin.readline().split())) \ndef makedict(var):\n    return dict(Counter(var))\ntestcases=vary(1)\n\nfor _ in range(testcases):\n    n=vary(1)\n    print(bin(n)[2:].count('1'))\n    \n    \n", "cases = int(input())\r\nfor _ in range(cases):\r\n    a = int(input())\r\n    a = bin(a)\r\n    c = a.count('1')\r\n    print(c)", "for i in range(int(input())):\n    n=int(input())\n    z=bin(n)\n    l=z.count('1')\n    print(l)\n", "# cook your dish here\nimport sys\n#from sys import stdin,stdout\ninput=sys.stdin.readline\n#sys.setrecursionlimit(10**7)\n#import math\n#import random\n#import heapq\n#from collections import Counter\n#from queue import PriorityQueue\n#from functools import lru_cache,cmp_to_key\n#@lru_cache(maxsize=None) #for optimizing the execution time of callable objects/functions(placed above callable functions)\n\ntry:\n    for _ in range(int(input())):\n        n=int(input())\n        ans=0\n        while n:\n            if n&1:\n                ans+=1\n            n=n//2\n        print(ans)\n        \n\n\n        \nexcept EOFError as e:\n    print(e)\n", "# cook your dish here\nfor i in range(int(input())):\n    n=int(input())\n    b=bin(n)\n    print(b.count(\"1\"))\n\n", "# cook your dish here\ntry:\n    for _ in range(int(input())):\n        n=int(input())\n        print(bin(n).count('1'))\nexcept:pass        ", "# cook your dish here\ntry:\n    for _ in range(int(input())):\n        n=int(input())\n        print(bin(n).count('1'))\nexcept:pass        ", "\r\nfor _ in range(int(input())):\r\n    N = int(input())\r\n    p = bin(N).count('1')\r\n    print(p)", "from sys import stdin, stdout, maxsize\nfrom math import sqrt, log, factorial, gcd\nfrom collections import defaultdict as D\nfrom bisect import insort\n\nfor _ in range(int(input())):\n    n = bin(int(input()))\n    print(n.count(\"1\"))\n    \n\n\n", "# cook your dish here\nn=int(input())\nfor i in range(n):\n    t=int(input())\n    print(bin(t).count('1')) \n", "# cook your dish here\nimport math\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    print(bin(n).count(\"1\"))"]