["# cook your dish here\nimport math\nN = 10**6\nsum_arr = [0] * (N + 1) \ndef lprime():\n    arr = [0] * (N + 1) \n    arr[0] = 1\n    arr[1] = 1\n    for i in range(2, math.ceil(math.sqrt(N) + 1)): \n        if arr[i] == 0: \n            for j in range(i * i, N + 1, i): \n                arr[j] = 1\n      \n    curr_prime_sum = 0\n\n    for i in range(1, N + 1): \n        if arr[i] == 0: \n            curr_prime_sum += i \n        sum_arr[i] = curr_prime_sum \n        \nn=int(input())\nlprime()\nfor _ in range(n):\n    x=int(input())\n    print(sum_arr[x]%10)", "# cook your dish here\n# https://www.codechef.com/CSEP2020/problems/IRVS\nfor _ in range(int(input())):\n    n = int(input())\n    prime = [True for __ in range(n+1)]\n    prime[:2] = [False, False]\n    total = 0\n    for i in range(2, n+1):\n        if prime[i] is True:\n            temp = i*2\n            total += i\n            while temp <= n:\n                prime[temp] = False\n                temp += i\n    print(str(total)[-1])\n", "def primalsum(n): \r\n\tprime = [True] * (n + 1);p = 2;sum_ = 0\r\n\twhile(p**2 <= n):\r\n\t\tif(prime[p] == True):\r\n\t\t\ti = p*2\r\n\t\t\twhile(i <= n): prime[i] = False;i += p\r\n\t\tp += 1\r\n\tfor i in range (2,n + 1): \r\n\t\tif(prime[i]): sum_ += i \r\n\treturn sum_\r\nfor _ in range(int(input())):N = int(input());print(str(primalsum(N))[-1]) ", "# cook your dish here\nt=int(input())\nfor i in  range(t):\n    sum1=0\n    n=int(input())\n    prime = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n    for p in range(n+1):\n        if prime[p]:\n            sum1+=p\n    print(sum1%10)\n    \n    \n", "def SieveOfEratosthenes(n): \n\tprime = [True for i in range(n+1)] ; ans = [];p = 2\n\twhile (p * p <= n): \n\t\tif (prime[p] == True): \n\t\t\tfor i in range(p * p, n+1, p):prime[i] = False\n\t\tp += 1\n\tfor p in range(2, n+1): \n\t\tif prime[p]:ans.append(p) \n\treturn ans\np = SieveOfEratosthenes(10**6+10)\nfor _ in range(int(input())):\n\tn = int(input());s = 0\n\tfor i in range(len(p)):\n\t\tif p[i] > n:break\n\t\telse:s += p[i]\n\tprint(s%10)", "# irrelevant sum\ndef SieveOfEratosthenes(n): \n\tprime = [True for i in range(n+1)] ; ans = []\n\tp = 2\n\twhile (p * p <= n): \n\t\tif (prime[p] == True): \n\t\t\tfor i in range(p * p, n+1, p): \n\t\t\t\tprime[i] = False\n\t\tp += 1\n      \n    # Print all prime numbers \n\tfor p in range(2, n+1): \n\t\tif prime[p]:ans.append(p) \n            #print p, \n\treturn ans\np = SieveOfEratosthenes(10**6+10)\nfor _ in range(int(input())):\n\tn = int(input())\n\ts = 0\n\tfor i in range(len(p)):\n\t\tif p[i] > n:\n\t\t\tbreak\n\t\telse:\n\t\t\ts += p[i]\n\tprint(s%10)", "# cook your dish here\ndef sieve(n):\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p] == True):\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n    return prime\nfor u in range(int(input())):\n    n=int(input())\n    p=sieve(n)\n    s=0\n    for i in range(2,n+1):\n        if(p[i]==True):\n            s+=i\n    r=str(s)\n    print(r[-1])\n", "# cook your dish here\n'''z=int(input())\nfor i in range(z):\n\tn=int(input())\n\tcounta=[]\n\tfor i in range(1,n+1):\n\t\tcount=0\n\t\tfor j in range(1,i+1):\n\t\t\tif i%j==0:\n\t\t\t\tcount+=1\n\t\tif count==2:\n\t\t\tcounta.append(i)\n\tprint(sum(counta)%10)\nimport math\nn=int(input())\nfor i in range(n):\n\tm=int(input())\n\tsumm=0\n\tfor num in range(2,m+1):\n\t      \tif all(num%i!=0 for i in range(2,int(math.sqrt(num))+1)):\n\t      \t\tsumm+=num\n\tprint(summ%10)\nimport math\n\ndef is_prime(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nn=int(input()) \nfor i in range(n):\n\tm=int(input())\n\tsumm=0\n\tfor num in range(2,m+1):\n\t       \tif is_prime(num):\n\t       \t\tsumm+=num \n\tprint(summ%10)''' \ndef sumOfPrimes(n): \n\n\n    prime = [True] * (n + 1) \n\n\n    p = 2\n\n    while p * p <= n: \n\n    \n\n        if prime[p] == True: \n\n          \n\n            i = p * 2\n\n            while i <= n: \n\n                prime[i] = False\n\n                i += p \n\n        p += 1    \n\n           \n\n\n\n    sum = 0\n\n    for i in range (2, n + 1): \n\n        if(prime[i]): \n\n            sum += i \n\n    return sum\n\nt=int(input())\nfor i in range(t):\n\tn=int(input())\n\tprint(sumOfPrimes(n)%10)\n", "# cook your dish here\ndef main(): \n      \n    # Create a boolean array \"prime[0..n]\" and initialize \n    # all entries it as true. A value in prime[i] will \n    # finally be false if i is Not a prime, else true. \n    n=1000000\n    prime = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime[i] = False\n        p += 1\n    prime[0]= False\n    prime[1]= False\n    # Print all prime numbers \n    s=[]\n    s.append(0)\n    for p in range(1,n + 1): \n        if prime[p]: \n            s.append(s[p-1]+(p))\n        else:\n            s.append(s[p-1])\n    # print(s)\n    t=int(input())\n    for _ in range(t):\n        num=int(input())\n        print(s[num]%10)\nmain()", "# cook your dish here\ndef sumOfPrimes(n): \n    # list to store prime numbers \n    prime = [True] * (n + 1) \n      \n    # Create a boolean array \"prime[0..n]\" \n    # and initialize all entries it as true. \n    # A value in prime[i] will finally be \n    # false if i is Not a prime, else true. \n      \n    p = 2\n    while p * p <= n: \n        # If prime[p] is not changed, then \n        # it is a prime \n        if prime[p] == True: \n            # Update all multiples of p \n            i = p * 2\n            while i <= n: \n                prime[i] = False\n                i += p \n        p += 1    \n           \n    # Return sum of primes generated through \n    # Sieve. \n    sum = 0\n    for i in range (2, n + 1): \n        if(prime[i]): \n            sum += i \n    return sum\nfor _ in range(int(input())):\n    n=int(input())\n    ans=sumOfPrimes(n)%10\n    print(ans)", "# cook your dish here\nimport math\nN = 1000003\ndp = [0] * (N + 1)\ndef seive():\n    array = [0] * (N + 1)\n    array[0] = 1\n    array[1] = 1\n    for i in range(2, math.ceil(math.sqrt(N) + 1)):\n        if array[i] == 0:\n            for j in range(i * i, N + 1, i):\n                array[j] = 1\n    runningPrimeSum = 0\n    for i in range(1, N + 1):\n        if array[i] == 0:\n            runningPrimeSum += i\n        dp[i] = runningPrimeSum\nseive()\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    print(dp[n]%10)", "def SieveOfEratosthenes(n):\n\tprime = [True for i in range(n+1)] \n\tp = 2\n\twhile(p * p <= n): \n\t\tif (prime[p] == True): \n\t\t\tfor i in range(p * p, n + 1, p): \n\t\t\t\tprime[i] = False\n\t\tp += 1\n\tc = 0\n\tfor p in range(2, n+1): \n\t\tif prime[p]: \n\t\t\tc += p\n\treturn c%10\nfor i in range(int(input())):\n    c = SieveOfEratosthenes(int(input())) \n    print(c) \n    \n\n\n\n", "import math\n\ndef sieve(x):\n    l=[0]*x\n    h=int(math.sqrt(x))\n    for i in range(2,h+1):\n        if(l[i-1]==0):\n            for j in range(i*i,x+1,i):\n                l[j-1]=1\n\n\n    l1=[]\n    for k in range(2,x+1):\n        if l[k-1]==0:\n            l1.append(k)\n    print(sum(l1)%10)\n\n\ndef __starting_point():\n    t=int(input())\n    for i in range(t):\n        n=int(input())\n        sieve(n)\n\n__starting_point()", "# cook your dish here\ndef sumOfPrimes(n): \n    prime = [True] * (n + 1) \n    p = 2\n    while p * p <= n:\n        if prime[p] == True: \n            i = p * 2\n            while i <= n: \n                prime[i] = False\n                i += p \n        p += 1    \n    sum = 0\n    for i in range (2, n + 1): \n        if(prime[i]): \n            sum += i \n    return sum \nfor _ in range(int(input())):    \n    n=int(input())     \n    c=sumOfPrimes(n) \n    print(c%10)", "def prime(n):  \n    l1 =[True]*(n + 1) \n    i=2\n    while i*i<=n:\n        if l1[i]==True: \n            a=i*2\n            while a<=n: \n                l1[a]=False\n                a=a+i \n        i=i+1    \n    s1=0\n    for i in range (2, n + 1): \n        if(l1[i]): \n            s1=s1+i \n    return s1\nfor _ in range(int(input())):\n    n=int(input())\n    s1=prime(n)\n    ##print(s1)\n    print(s1%10)\n", "\ndef sumOfPrimes(n): \n\n\tprime = [True] * (n + 1) \n\n\t\n\tp = 2\n\twhile p * p <= n: \n\n\t\tif prime[p] == True: \n\n\t\t\ti = p * 2\n\t\t\twhile i <= n: \n\t\t\t\tprime[i] = False\n\t\t\t\ti += p \n\t\tp += 1\t\n\n\tsum = 0\n\tfor i in range (2, n + 1): \n\t\tif(prime[i]): \n\t\t\tsum += i \n\treturn sum\n\nfor _ in range(int(input())):\n    n = int(input())\n    zzz = str(sumOfPrimes(n))\n    print(zzz[-1])", "def sumofprimes(n):\n  prime=[True]*(n+1)\n  p=2\n  while(p*p<=n):\n    if prime[p]==True:\n      i=p*2\n      while i<=n:\n        prime[i]=False\n        i+=p\n    p+=1\n  sum=0\n  for i in range(2,n+1):\n    if prime[i]:\n      sum+=i\n  return sum\ndef __starting_point():\n  for _ in range(int(input())):\n    n=int(input())\n    print(sumofprimes(n)%10)\n__starting_point()", "def sumofprimes(n):\n  prime=[True]*(n+1)\n  p=2\n  while(p*p<=n):\n    if prime[p]==True:\n      i=p*2\n      while i<=n:\n        prime[i]=False\n        i+=p\n    p+=1\n  sum=0\n  for i in range(2,n+1):\n    if prime[i]:\n      sum+=i\n  return sum\ndef __starting_point():\n  for _ in range(int(input())):\n    n=int(input())\n    print(sumofprimes(n)%10)\n__starting_point()", "# cook your dish here\nn=1000001\nsieve=[0]*(n+1)\nsieve[0]=1\nsieve[1]=1\nfor x in range(2,n+1):\n    if(sieve[x]):\n        continue\n    for u in range(2*x,n+1,x):\n        sieve[u]=1\nfor i in range(int(input())):\n    n=int(input())\n    count=0\n    sum1=0\n    #a1=[]\n    for i in range(n+1):\n        #if(count==n):\n            #break\n        if(sieve[i]==0):\n            sum1+=i\n            #a1.append(i)\n            #count+=1\n    print(sum1%10) \n    #print(a1)\n", "\ndef SieveOfEratosthenes(n): \n        \n    prime = [True for i in range(n+1)] \n      \n    p = 2\n    while(p * p <= n): \n           \n        if (prime[p] == True): \n               \n            for i in range(p * p, n + 1, p): \n                prime[i] = False\n        p += 1\n    sum = 0\n  \n    for p in range(2, n+1): \n        if prime[p]: \n            sum += p\n    return sum \n  \n\n\n\nx = int(input())\nfor i in range(0,x):\n    uptil = int(input())\n    sum = SieveOfEratosthenes(uptil)\n    print(sum%10)\n", "\n\n# Python program to find sum of primes\n# in range from 1 to n.\n#code on gfg\n# Returns sum of primes in range from\n# 1 to n\n\ndef sumOfPrimes(n):\n    # list to store prime numbers\n    prime = [True] * (n + 1)\n\n    # Create a boolean array \"prime[0..n]\"\n    # and initialize all entries it as true.\n    # A value in prime[i] will finally be\n    # false if i is Not a prime, else true.\n\n    p = 2\n    while p * p <= n:\n        # If prime[p] is not changed, then\n        # it is a prime\n        if prime[p] == True:\n            # Update all multiples of p\n            i = p * 2\n            while i <= n:\n                prime[i] = False\n                i += p\n        p += 1\n\n        # Return sum of primes generated through\n    # Sieve.\n    sum = 0\n    for i in range(2, n + 1):\n        if (prime[i]):\n            sum += i\n    return sum\n\n\n# Driver code\nfor _ in range(int(input())):\n    n=int(input())\n    ans=sumOfPrimes(n)\n    ans=str(ans)\n    print(ans[-1])\n\n", "try:\n    def findprimes(n,l):\n        prime=[True for i in range(n+1)]\n        p=2\n        while p*p<=n:\n            if prime[p]==True:\n                for i in range(p*p,n+1,p):\n                    prime[i]=False\n            p+=1\n        for i in range(2,n+1):\n            if prime[i]==True:\n                l.append(i)\n        return l\n    for _ in range(int(input())):\n        n=int(input())\n        l=[]\n        findprimes(n,l)\n        s=sum(l)\n        print(s%10)\nexcept:\n    pass", "for t in range(int(input())):\n    n = int(input())\n    A = [True for i in range(n+1)]\n    A[0],A[1] = False,False\n    i = 2\n    while i**2 <= n:\n        if A[i] == True:\n            for j in range(i**2,n+1,i):\n                A[j] = False\n        i += 1\n    sum = 0\n    for i in range(2,n+1):\n        if A[i] == True:\n            sum += i\n            if sum >= 10:\n                sum %= 10\n    print(sum)", "for t in range(int(input())):\n    n = int(input())\n    A = [True for i in range(n+1)]\n    A[0],A[1] = False,False\n    i = 2\n    while i**2 <= n:\n        if A[i] == True:\n            for j in range(i**2,n+1,i):\n                A[j] = False\n        i += 1\n    sum = 0\n    for i in range(2,n+1):\n        if A[i] == True:\n            sum += i\n    print(sum%10)"]