["class Solution:\n     def validUtf8(self, data):\n         \"\"\"\n         :type data: List[int]\n         :rtype: bool\n         \"\"\"\n         count=0\n         for x in data:\n             if count==0:\n                 if x>>5==0b110:\n                     count=1\n                 elif x>>4==0b1110:\n                     count=2\n                 elif x>>3==0b11110:\n                     count=3\n                 elif x>>7==1:\n                     return False\n             else:\n                 if x>>6!=0b10:\n                     return False\n                 count-=1\n         return count==0\n         \n         \n #         class Solution {\n # public:\n #     bool validUtf8(vector<int>& data) {\n #         int cnt = 0;\n #         for (int d : data) {\n #             if (cnt == 0) {\n #                 if ((d >> 5) == 0b110) cnt = 1;\n #                 else if ((d >> 4) == 0b1110) cnt = 2;\n #                 else if ((d >> 3) == 0b11110) cnt = 3;\n #                 else if (d >> 7) return false;\n #             } else {\n #                 if ((d >> 6) != 0b10) return false;\n #                 --cnt;\n #             }\n #         }\n #         return cnt == 0;\n #     }\n # };\n", "class Solution:\n     def validUtf8(self, data):\n         \"\"\"\n         :type data: List[int]\n         :rtype: bool\n         \"\"\"\n         count = 0\n         for d in data:\n             if count == 0:\n                 if d >> 5 == 0b110:\n                     count = 1\n                 elif d >> 4 == 0b1110:\n                     count = 2\n                 elif d >> 3 == 0b11110:\n                     count = 3\n                 elif d >> 7 != 0:\n                     return False\n             else:\n                 if d >> 6 == 0b10:\n                     count -= 1\n                 else:\n                     return False\n         return count == 0", "class Solution:\n     def countLeadingOne(self, w):\n         if w[0] == '0':\n             return 1\n         elif w[0:3] ==\"110\":\n             return 2\n         elif w[0:4] == '1110':\n             return 3\n         elif w[0:5] == '11110':\n             return 4\n         else:\n             return -1\n         \n     def checkStartWith10(self, L,l):\n         #print(L, l)\n         if len(L)!=l:\n             return False\n         \n         for w in L:\n             if w.startswith('10') == False:\n                 return False\n         \n         return True\n     \n     def validUtf8(self, data):\n         \"\"\"\n         :type data: List[int]\n         :rtype: bool\n         \"\"\"\n         A= []\n         for d in data:\n             A.append(format(d, '08b'))\n         \n         i = 0\n       \n         while i < len(A):\n             l = self.countLeadingOne(A[i])\n             if l == -1:\n                 return False\n \n             if l > 1:\n                 if self.checkStartWith10(A[i+1:i+l], l-1) == False:\n                     return False\n             \n             i+=l\n             \n         return True\n         \n", "class Solution:\n     def validUtf8(self, data):\n         n = len(data)\n         check10 = 0\n         for byte in data:\n             if check10:\n                 if byte & 0b11000000 != 0b10000000:\n                     return False\n                 check10 -= 1\n             elif byte & 0b11111000 == 0b11110000:\n                 check10 = 3\n             elif byte & 0b11110000 == 0b11100000:\n                 check10 = 2\n             elif byte & 0b11100000 == 0b11000000:\n                 check10 = 1\n             elif byte & 0b10000000 == 0:\n                 continue\n             else:\n                 return False\n         return check10 == 0\n \n", "class Solution:\n     def validUtf8(self, data):\n         \"\"\"\n         :type data: List[int]\n         :rtype: bool\n         \"\"\"\n         count = 0\n         for num in data:\n             if count == 0:\n                 if (num >> 5) == 0b110: count = 1\n                 elif (num >> 4) == 0b1110: count = 2\n                 elif (num >> 3) == 0b11110: count = 3\n                 elif (num >> 7): return False\n             else:\n                 if (num >> 6) != 0b10: return False\n                 count -= 1\n         return count == 0\n", "class Solution:\n     def check(self, nums, start, size):\n         for i in range(start + 1, start + size + 1):\n             if i >= len(nums) or (nums[i] >> 6) != 0b10: return False\n         return True\n \n     def validUtf8(self, nums, start=0):\n         \"\"\"\n         :type data: List[int]\n         :rtype: bool\n         \"\"\"\n         while start < len(nums):\n             first = nums[start]\n             if   (first >> 3) == 0b11110 and self.check(nums, start, 3): start += 4\n             elif (first >> 4) == 0b1110  and self.check(nums, start, 2): start += 3\n             elif (first >> 5) == 0b110   and self.check(nums, start, 1): start += 2\n             elif (first >> 7) == 0:                                 start += 1\n             else:                                                   return False\n         return True\n", "class Solution:\n     def validUtf8(self, data):\n         \"\"\"\n         :type data: List[int]\n         :rtype: bool\n         \"\"\"\n         def numOfFollowingBytes(num):\n             if 0 <= num <= 127:\n                 return 0\n             elif 192 <= num <= 223:\n                 return 1\n             elif 224 <= num <= 239:\n                 return 2\n             elif 240 <= num <= 247:\n                 return 3\n             else:\n                 return -1\n         \n         def isFollowingByte(num):\n             return 128 <= num <= 191\n         \n         if not data:\n             return False\n         \n         i, n = 0, len(data)\n         while i < n:\n             bytesToFollow = numOfFollowingBytes(data[i])\n             if bytesToFollow == -1:\n                 return False\n             \n             i += 1\n             if i + bytesToFollow > n:\n                 return False\n             \n             for _ in range(bytesToFollow):\n                 if not isFollowingByte(data[i]):\n                     return False\n                 i += 1\n         \n         return True", "class Solution:\n     def validUtf8(self, data):\n         \"\"\"\n         :type data: List[int]\n         :rtype: bool\n         \"\"\"\n         cont = 0\n         for n in data:\n             s=format(n, '08b')\n             if cont > 0:\n                 if s[:2] == '10':\n                     cont -= 1\n                     continue\n                 return False\n             if s[0] == '0':\n                 continue\n             if s[:3] == '110':\n                 cont = 1\n                 continue\n             if s[:4] == '1110':\n                 cont = 2\n                 continue\n             if s[:5] == '11110':\n                 cont = 3\n                 continue\n             return False\n         return cont == 0\n", "class Solution:\n     def validUtf8(self, data):\n         seqs = len(data)\n         idx = 0\n         while idx < seqs:\n             number = data[idx] & 255 | 256  # XXX: make it as 0b1xxxxxxxx\n             seq = bin(number)[3:]\n             bits = len(seq.split('0')[0])\n             \n             if idx + bits > seqs:\n                 return False\n             elif bits > 4:\n                 # maximum 4 bytes\n                 # 0b11111111\n                 return False\n             elif bits == 0:\n                 # 1 byte UTF-8\n                 idx += 1\n             elif bits == 1:\n                 # 0b10000000\n                 return False\n             else:\n                 for i in range(1, bits):\n                     num = data[idx + i] & 255\n                     if num >= int('11000000', 2) or num < int('10000000', 2):\n                         return False\n                 idx += bits\n \n         return True\n", "class Solution:\n     def validUtf8(self, data):\n         seqs = len(data)\n         idx = 0\n         while idx < seqs:\n             number = data[idx] & 255 | 256  # XXX: make it as 0b1xxxxxxxx\n             seq = bin(number)[3:]\n             bits = len(seq.split('0')[0])\n             \n             if idx + bits > seqs:\n                 return False\n             elif bits > 4:\n                 # maximum 4 bytes\n                 # 0b11111111\n                 return False\n             elif bits == 1:\n                 # 0b10000000\n                 return False\n             elif bits == 0:\n                 # 1 byte UTF-8\n                 idx += 1\n             else:\n                 for i in range(1, bits):\n                     num = data[idx + i] & 255\n                     if num >= int('11000000', 2) or num < int('10000000', 2):\n                         return False\n                 idx += bits\n \n         return True\n", "class Solution:\n     def validUtf8(self, data):\n         \"\"\"\n         :type data: List[int]\n         :rtype: bool\n         \"\"\"\n         current = 0\n         for byte in data:\n             b = \"{0:08b}\".format(byte)\n             if current == 0:\n                 cnt = 0\n                 for i in b:\n                     if i == '0':\n                         break\n                     else:\n                         cnt += 1\n                 if cnt == 1 or cnt > 4:\n                     return False\n                 if cnt > 0:\n                     current = cnt - 1\n                 else:\n                     current = 0\n             else:\n                 if b[0:2] != '10':\n                     return False\n                 current -= 1\n         if current > 0:\n             return False\n         return True"]