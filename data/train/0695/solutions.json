["# cook your dish here\ntc=int(input())\nfor j in range(tc):\n ip=list(map(int,input().rstrip().split()))\n x=ip[0]\n y=ip[1]\n n=ip[2]\n cnt=0\n if(x==y):\n  print('0')\n  continue\n ln=bin(x).replace(\"0b\", \"\") \n rn=bin(y).replace(\"0b\", \"\") \n ll=len(ln)\n rl=len(rn)\n #print(ln)\n #print(rn)\n if(ll==len(rn)):\n  for i in range(ll):\n   \n   if(ln[i]!=rn[i]):\n    ln=ln[i:]\n    rn=rn[i:]\n    break\n #print(ln)\n if(ln[0]=='0'):\n  ln=ln[1:]\n  ll-=1\n #print(rn)\n if(rn[0]=='0'):\n  rn=rn[1:]\n  rl-=1\n ll=len(ln)\n rl=len(rn)\n if(ll>rl):\n  lb=ll \n else:\n  lb=rl \n pl=2**lb \n hpl=pl//2\n amn=((n+1)//pl)*hpl \n rm=(n+1)%pl \n if((rm*2)<=pl):\n  amn+=rm\n else:\n  amn+=hpl \n #print(\"amn = \",amn)\n aln=(n+1)-amn\n #print(\"aln = \",aln)\n if(x<y):\n  print(amn)\n else:\n  print(aln)", "# cook your dish here\ntc=int(input())\nfor j in range(tc):\n ip=list(map(int,input().rstrip().split()))\n x=ip[0]\n y=ip[1]\n n=ip[2]\n cnt=0\n if(x==y):\n  print('0')\n  continue\n ln=bin(x).replace(\"0b\", \"\") \n rn=bin(y).replace(\"0b\", \"\") \n ll=len(ln)\n rl=len(rn)\n #print(ln)\n #print(rn)\n if(ll==len(rn)):\n  for i in range(ll):\n   \n   if(ln[i]!=rn[i]):\n    ln=ln[i:]\n    rn=rn[i:]\n    break\n #print(ln)\n if(ln[0]=='0'):\n  ln=ln[1:]\n  ll-=1\n #print(rn)\n if(rn[0]=='0'):\n  rn=rn[1:]\n  rl-=1\n ll=len(ln)\n rl=len(rn)\n if(ll>rl):\n  lb=ll \n else:\n  lb=rl \n pl=2**lb \n hpl=pl//2\n amn=((n+1)//pl)*hpl \n rm=(n+1)%pl \n if((rm*2)<=pl):\n  amn+=rm\n else:\n  amn+=hpl \n #print(\"amn = \",amn)\n aln=(n+1)-amn\n #print(\"aln = \",aln)\n if(x<y):\n  print(amn)\n else:\n  print(aln)", "# cook your dish here\ntc=int(input())\nfor j in range(tc):\n ip=list(map(int,input().rstrip().split()))\n x=ip[0]\n y=ip[1]\n n=ip[2]\n cnt=0\n for i in range(n+1):\n  if((x^i)<(y^i)):\n   cnt+=1 \n print(cnt)", "for _ in range(int(input())):\n x,y,n=map(int,input().split())\n c=0\n for i in range(n+1):\n  if x^i<y^i:\n   c=c+1\n print(c)", "t = int(input())\nfor i in range(t):\n x,y,n = [int(i) for i in input().split()]\n \n bx = list(bin(x))\n by = list(bin(y))\n bx.remove(bx[0])\n bx.remove(bx[0])\n by.remove(by[0])\n by.remove(by[0])\n lx = len(bx)\n ly = len(by)\n index = 0\n flag = 2\n k = -1\n if(lx!= ly):\n  index = max(lx,ly)\n  #print(index)\n  if((n+1)%2**(index) >= 2**(index-1)) :\n   k = 2**(index-1)\n  else :\n   k =( n+1)%(2**(index))\n  \n  if(lx<ly):\n   print(int((n+1)/2**index)*(2**(index-1)) + k) \n  else:\n   print(n+1 - (int((n+1)/2**index)*(2**(index-1)) + k))\n   \n else:\n  \n  for j in range(lx):\n   if(bx[j]!= by[j]):\n    index = lx-j\n    if(bx[j] == '0'):\n     flag = 0\n    else:\n     flag = 1\n    break\n  #  print(index)\n  if((n+1)%2**(index) >= 2**(index-1)) :\n   k = 2**(index-1)\n  else :\n   k =( n+1)%(2**(index))\n  if(flag == 2) :\n   print(0)\n  elif(flag == 1):\n   print(n+1 - (int((n+1)/2**index)*(2**(index-1)) + k))\n  else:\n   print(int((n+1)/2**index)*(2**(index-1)) + k) \n \n  \n# for 0\n# if((n+1)%2**(index) >= 2**(index-1)) : k = 2**(index-1)\n# else :k =( n+1)%(2**(index))\n#\n# (int(n+1)/2**index)*(2**(index-1) + k\n#\n  \n", "testcases = int(input())\nfor testcase in range(testcases):\n temparr = input()\n temparr = temparr.split()\n x = int(temparr[0])\n y = int(temparr[1])\n n = int(temparr[2])\n if x == y:\n  print(0)\n  continue\n diffbit = 0 \n biggestnum = 1<<5\n #print(biggestnum)\n checknum = 0 \n flag = 0 \n while True:\n  curx = x & biggestnum\n  cury = y & biggestnum\n  if curx == cury:\n   biggestnum = biggestnum >> 1 \n   continue \n  checknum = biggestnum\n  if curx:\n   flag = 1 \n  break \n ans = 0 \n for i in range(n + 1):\n  if flag == 1 :\n   if i & checknum:\n    ans += 1 \n  else:\n   if i & checknum == 0 :\n    ans += 1 \n print(ans)\n  \n  \n  \n", "testcases = int(input())\nfor testcase in range(testcases):\n temparr = input()\n temparr = temparr.split()\n x = int(temparr[0])\n y = int(temparr[1])\n n = int(temparr[2])\n if x == y:\n  print(0)\n  continue\n binaryx= \"{0:b}\".format(x)\n binaryy = \"{0:b}\".format(y)\n nx = len(binaryx)\n ny = len(binaryy)\n maxlen = max(nx, ny)\n binaryx = (maxlen - nx) *\"0\" + binaryx\n binaryy = (maxlen - ny) *\"0\" + binaryy\n # print(binaryx)\n # print(binaryy)\n binaryn= \"{0:b}\".format(n)\n index = 0 \n flag = 0 \n # print(binaryx)\n # print(binaryy)\n for i in range(maxlen):\n  if binaryx[i] == binaryy[i]:\n   continue \n  index = i \n  if binaryy[i] == \"0\":\n   flag = 1 \n   break \n  \n  break\n arr = []\n for i in range(maxlen):\n  if i == index:\n   arr.append(\"1\")\n  else:\n   arr.append(\"0\")\n newstrs = \"\".join(arr)\n compareresult = int(newstrs, 2)\n # print(\"index \" + str(index))\n # print(\"compareresult \" + str(compareresult))\n ans = 0 \n for i in range(n + 1):\n  if flag == 1 and ( i & compareresult ):\n   ans += 1 \n  if flag == 0 and ( i & compareresult == 0):\n   ans += 1 \n \n print(ans)\n \n \n \n \n \n \n", "for _ in range(int(input())):\n [x,y,n] = list(map(int , input().split()))\n \n if (x==y):\n  print(0)\n else:\n  sn = bin(n)[2:]\n  ln = len(sn)\n\n  sx = bin(x)[2:]\n  lx = len(sx)\n\n  sy = bin(y)[2:]\n  ly = len(sy)\n\n  l = max(ln,lx,ly)\n  \n  sn = '0'*(l-ln) + sn\n  sx = '0'*(l-lx) + sx\n  sy = '0'*(l-ly) + sy\n\n  for i in range(l):\n   if (sx[i] != sy[i]):\n    break\n  #print(\"i = \",i)\n\n  if (i == 0):\n   t1 = 1\n  else:\n   t1 = int(sn[:i],2)+1\n\n  rstval = 2**(l-i-1)\n\n  #no limits\n  if (sx[i] == '0' and sn[i] == '1'):\n   print(t1 * rstval)\n  \n  elif (sx[i] == '1' and sn[i] == '1'):\n   #print(256)\n   if (i == l-1):\n    t2 = 1\n   else:\n    t2 = int(sn[i+1:],2)+1\n   print(t2 + (t1-1)*rstval)\n\n  elif (sx[i] == '1' and sn[i] == '0'):\n   t2 = rstval\n   print((t1-1)*t2)\n\n  #limits\n  else:\n   if (i == l-1):\n    t2 = 1\n   else:\n    t2 = int(sn[i+1:],2)+1\n   print(t2 + (t1-1)*rstval)", "from random import randint\n\nf = input\n\n# f = open(\"in.txt\", \"r\").readline\n\n\ndef din(st):\n return bin(st)[2:].zfill(10)\n\n\ndef func(x, y, n):\n # count = 0\n # for z in range(0, n+1):\n #     print(din(x), \"xor\", din(z), end=\" \")\n #     if x ^ z < y ^ z:\n #         count += 1\n #         print(\"<\", end=\" \")\n #     else:\n #         print(\">=\", end=\"\")\n #     print(din(y), \"xor\", din(z), \"z =\", z)\n z0 = x ^ 0 < y ^ 0\n unmatch = 1\n # print(z0)\n # print(x ^ unmatch < y ^ unmatch)\n while z0 == (x ^ unmatch < y ^ unmatch) and unmatch < n+1:\n  # print(unmatch < n+1)\n  unmatch *= 2\n  # print(\"unmatch =\", unmatch)\n # print(\"x y =\", x, y)\n # print(\"unmatch =\", unmatch)\n # print(\"n =\", n)\n ans = ((n+1) // (unmatch*2)) * unmatch\n ans += min(unmatch, (n+1)-(ans*2))\n # print(\"ans =\", ans)\n return (ans if z0 else ((n+1)-ans))\n\n\nfor _ in range(int(f())):\n x, y, n = list(map(int, f().split()))\n # x, y = (randint(1, 20), randint(1, 20))\n print(func(x, y, n))\n", "# cook your dish here\na = int(input())\nfor i in range(a):\n b = list(map(int,str(input()).split(' ')))\n Ans = 0\n for i1 in range(b[2]+1):\n  if (b[0]^i1)<(b[1]^i1):\n   Ans+=1\n print(Ans)", "for t in range(int(input())):\n x,y,n=map(int,input().split())\n n+=1\n count=0\n flag=0\n for i in range(29,-1,-1):\n  if flag==0:\n   if(x & (1<<i)) != (y & (1<<i)):\n    for k in range(29,-1,-1):\n     if (n & (1<<k)):\n      if k>i:\n       count+=(1<<(k-1))\n      elif k==i:\n       if (x & (1<<i))==0:\n        count+=(1<<k)\n      else:\n       if (x & (1<<i)) == (n & (1<<i)):\n        count+=(1<<k)\n    flag=1\n print(count)", "for t in range(int(input())):\n x,y,n=map(int,input().split())\n n+=1\n count=0\n flag=0\n for i in range(28,-1,-1):\n  if flag==0:\n   if(x & (1<<i)) != (y & (1<<i)):\n    for k in range(28,-1,-1):\n     if (n & (1<<k)):\n      if k>i:\n       count+=(1<<(k-1))\n      elif k==i:\n       if (x & (1<<i))==0:\n        count+=(1<<k)\n      else:\n       if (x & (1<<i)) == (n & (1<<i)):\n        count+=(1<<k)\n    flag=1\n print(count)", "for t in range(int(input())):\n x,y,n=list(map(int,input().split()))\n count=0\n for i in range(n+1):\n  if (x^i)<(y^i):\n   count+=1\n print(count)\n", "for _ in range(int(input())):\n x,y,n=list(map(int,input().split()))\n z=[]\n count=0\n for i in range(n+1):\n  z.append(i)\n for j in range(len(z)):\n  if((x^z[j])<(y^z[j])):\n   count+=1\n print(count)\n", "# cook your dish here\nfor _ in range(int(input())):\n c=0\n x,y,n=tuple(map(int,input().split()))\n for z in range(0,n+1):\n  if x^z<y^z:\n   c+=1\n print(c)", "# cook your dish here\ndef optimized(x,y,n):\n if x==y:return 0\n p=(x^y).bit_length()\n diff=pow(2,p)\n n=n+1\n ans=(n//diff)*(diff//2)\n if x<y:\n  return ans+ (n%diff if n%(diff) < diff//2 else (diff//2))\n else:\n  return ans+ (n%diff -(diff//2) if n%(diff) > diff//2 else 0)\n  \n  \nfor test in range(int (input())):\n  x,y,n=map(int,input().split())\n  print(optimized(x,y,n))", "# cook your dish here\nfor _ in range(int(input())):\n x,y,n = map(int,input().split())\n n+=1\n ans = 0\n are_same = True\n for j in range(29,-1,-1):\n  if are_same:\n   if (x & (1 << j) != (y & (1 << j))):\n    for k in range(29,-1,-1):\n     if j>k:\n      if (n&(1<<k)):\n       if (n&(1<<j) == (x&(1<<j))):\n        ans+=(1<<k)\n     elif j==k:\n      if (n&(1<<k)):\n       if (x&(1<<j) == 0):\n        ans += (1<<k)\n     else:\n      if (n&(1<<k)):\n       ans +=(1<<(k-1))\n  if (x & (1<<j)!=(y&(1<<j))):\n   are_same = False\n print(ans)", "test=int(input())\nfor i in range(0,test):\n x,y,n=map(int,input().split())\n counter=0\n for i in range(0,n+1):\n  n=x^i\n  m=y^i\n  if(m>n):\n   counter=counter+1\n print(counter)", "for _ in range(int(input())):\n x,y,n=list(map(int,input().split()))\n c=0\n for i in range(n+1):\n  if((x^i)<(y^i)):\n   c+=1\n print(c)\n", "def XOR(x,y,n):\n c = 0\n for z in range(0,n+1):\n  a = x^z\n  b = y^z\n  if(a < b):\n   c+=1\n return c\n\n\nT = int(input())\nfor t in range(T):\n x,y,n = map(int,input().split())\n result = XOR(x,y,n)\n print(result)", "t = int(input())\n\nfor _ in range(t):\n x,y,n = list(map(int,input().split()))\n ct = 0\n for z in range(n+1):\n  if (z^x)<(z^y):\n   ct += 1\n print(ct)\n\n", "# cook your dish here\n \n\nfor _ in range(int(input())) :\n x, y, n = map(int,input().split())\n counter = 0\n \n for i in range(n+1) :\n  if x^i < y^i :\n   counter += 1\n   \n print(counter)", "# cook your dish here\nfrom random import randint\n\nf = input\n\n# f = open(\"in.txt\", \"r\").readline\n\n\ndef din(st):\n return bin(st)[2:].zfill(10)\n\n\ndef func(x, y, n):\n # count = 0\n # for z in range(0, n+1):\n #     print(din(x), \"xor\", din(z), end=\" \")\n #     if x ^ z < y ^ z:\n #         count += 1\n #         print(\"<\", end=\" \")\n #     else:\n #         print(\">=\", end=\"\")\n #     print(din(y), \"xor\", din(z), \"z =\", z)\n z0 = x ^ 0 < y ^ 0\n unmatch = 1\n # print(z0)\n # print(x ^ unmatch < y ^ unmatch)\n while z0 == (x ^ unmatch < y ^ unmatch) and unmatch < n+1:\n  # print(unmatch < n+1)\n  unmatch *= 2\n  # print(\"unmatch =\", unmatch)\n # print(\"x y =\", x, y)\n # print(\"unmatch =\", unmatch)\n # print(\"n =\", n)\n ans = ((n+1) // (unmatch*2)) * unmatch\n ans += min(unmatch, (n+1)-(ans*2))\n # print(\"ans =\", ans)\n return (ans if z0 else ((n+1)-ans))\n\n\nfor _ in range(int(f())):\n x, y, n = list(map(int, f().split()))\n # x, y = (randint(1, 20), randint(1, 20))\n print(func(x, y, n))\n", "# cook your dish here\nn=int(input())\nfor _ in range(n):\n a,b,c=[int(i) for i in input().split()]\n l=list(range(0,c+1))\n d=0\n for i in range(0,len(l)):\n  if((a^l[i])<(b^l[i])):\n   d=d+1\n print(d)"]