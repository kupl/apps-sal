["# cook your dish here\nfrom sys import stdin\nn, m = map(int,stdin.readline().split())\nforest=[]\nmatrix=[]\nfor _ in range(n):\n forest.append(list(map(int,stdin.readline().split())))\n matrix.append([0]*m)\nmatrix[0][0]=forest[0][0]\nfor j in range(1,m):\n matrix[0][j]=matrix[0][j-1]+forest[0][j]\nfor i in range(1,n):\n matrix[i][0]=matrix[i-1][0]+forest[i][0]\nfor i in range(1,n):\n for j in range(1,m):\n  matrix[i][j]=matrix[i-1][j]+matrix[i][j-1]-matrix[i-1][j-1]+forest[i][j]\nc=int(input())\nfor _ in range(c):\n x1, y1, x2, y2 = map(int,stdin.readline().split())\n x1-=1 \n y1-=1 \n x2-=1 \n y2-=1 \n appo=0\n if x1>0:\n  appo+=matrix[x1-1][y2]\n if y1>0:\n  appo+=matrix[x2][y1-1]\n if x1>0 and y1>0:\n  appo-=matrix[x1-1][y1-1]\n print(matrix[x2][y2]-appo)", "# cook your dish here\nfrom sys import stdin\nn, m = map(int,stdin.readline().split())\nforest=[]\nmatrix=[]\nfor _ in range(n):\n forest.append(list(map(int,stdin.readline().split())))\n matrix.append([0]*m)\nmatrix[0][0]=forest[0][0]\nfor j in range(1,m):\n matrix[0][j]=matrix[0][j-1]+forest[0][j]\nfor i in range(1,n):\n matrix[i][0]=matrix[i-1][0]+forest[i][0]\nfor i in range(1,n):\n for j in range(1,m):\n  matrix[i][j]=matrix[i-1][j]+matrix[i][j-1]-matrix[i-1][j-1]+forest[i][j]\nc=int(input())\nfor _ in range(c):\n x1, y1, x2, y2 = map(int,stdin.readline().split())\n x1-=1 \n y1-=1 \n x2-=1 \n y2-=1 \n appo=0\n if x1>0:\n  appo+=matrix[x1-1][y2]\n if y1>0:\n  appo+=matrix[x2][y1-1]\n if x1>0 and y1>0:\n  appo-=matrix[x1-1][y1-1]\n print(matrix[x2][y2]-appo)", "# cook your dish here\nn, m = map(int, input().split())\nforest=[]\nmatrix=[]\nfor _ in range(n):\n forest.append(list(map(int, input().split())))\n matrix.append([0]*m)\nmatrix[0][0]=forest[0][0]\nfor j in range(1,m):\n matrix[0][j]=matrix[0][j-1]+forest[0][j]\nfor i in range(1,n):\n matrix[i][0]=matrix[i-1][0]+forest[i][0]\nfor i in range(1,n):\n for j in range(1,m):\n  matrix[i][j]=matrix[i-1][j]+matrix[i][j-1]-matrix[i-1][j-1]+forest[i][j]\nc=int(input())\nfor _ in range(c):\n x1, y1, x2, y2 = map(int, input().split())\n x1-=1 \n y1-=1 \n x2-=1 \n y2-=1 \n appo=0\n if x1>0:\n  appo+=matrix[x1-1][y2]\n if y1>0:\n  appo+=matrix[x2][y1-1]\n if x1>0 and y1>0:\n  appo-=matrix[x1-1][y1-1]\n print(matrix[x2][y2]-appo)", "rows,columns=map(int,input().split())\na=[[0 for j in range(columns+1)] for i in range(rows+1)]\nfor i in range(1,rows+1):\n x=[int(i) for i in input().split()]\n s=0\n for j in range(columns):\n  s+=x[j]\n  a[i][j+1]=s+a[i-1][j+1]\nfor i in range(int(input())):\n x1,y1,x2,y2=map(int,input().split())\n s=a[x2][y2]-a[x2][y1-1]-a[x1-1][y2]+a[x1-1][y1-1]\n print(s)", "rows,columns=list(map(int,input().split()))\na=[[0] for i in range(rows+1)]\na[0]=[0 for i in range(columns+1)]\nfor i in range(1,rows+1):\n x=[int(i) for i in input().split()]\n s=0\n for j in range(columns):\n  s+=x[j]\n  a[i].append(s+a[i-1][j+1])\nfor i in range(int(input())):\n x1,y1,x2,y2=list(map(int,input().split()))\n s=a[x2][y2]-a[x2][y1-1]-a[x1-1][y2]+a[x1-1][y1-1]\n print(s)\n", "rows,columns=list(map(int,input().split()))\na=[[0] for i in range(rows)]\nfor i in range(rows):\n x=[int(i) for i in input().split()]\n s=0\n for j in x:\n  s+=j\n  a[i].append(s)\nfor i in range(int(input())):\n x1,y1,x2,y2=list(map(int,input().split()))\n s=0\n for j in range(x1-1,x2):\n  s+=a[j][y2]-a[j][y1-1]\n print(s)\n", "from numpy import *\n\nm,n=list(map(int, input().split()))\ntrees=array([[None]*n]*m)\nfor i in range(m):\n trees[i]=list(map(int, input().split()))\n\nc=int(input())\nresult=[]\nfor _ in range(c):\n ans=0\n x1,y1,x2,y2=list(map(int , input().split()))\n for i in range(x1-1,x2):\n  temp=[trees[i,j] for j in range(y1-1,y2)]\n  ans+=sum(temp)\n result.append(ans)\n\nfor i in result:\n print(i)\n", "from numpy import *\n\nm,n=list(map(int, input().split()))\ntrees=array([[None]*n]*m)\nfor i in range(m):\n trees[i]=list(map(int, input().split()))\n\nc=int(input())\nresult=[]\nfor _ in range(c):\n ans=0\n x1,y1,x2,y2=list(map(int , input().split()))\n for i in range(x1-1,x2):\n  for j in range(y1-1,y2):\n   ans+=trees[i,j]\n result.append(ans)\n\nfor i in result:\n print(i)\n", "a=input().split()\nn,m=int(a[0]),int(a[1])\narr=[]\nfor i in range(n):\n a=input().split()\n a=[int(j) for j in a]\n arr.append(a)\nfor t in range(int(input())):\n a=input().split()\n x1,y1,x2,y2=int(a[0]),int(a[1]),int(a[2]),int(a[3])\n total=0\n for i in range(x1-1,x2):\n  for j in range(y1-1,y2):\n   total+=arr[i][j]\n print(total)", "while True:\n try:\n  rolcol = input().split()\n  row = int(rolcol[0])\n  col = int(rolcol[1])\n  tree = []\n  for i in range(row):\n   a = input().split()\n   tree.append(a)\n  sell = int(input())\n  for i in range(sell):\n   sum1 = 0\n   pos = input().split()\n   x1 = int(pos[0])-1\n   y1 = int(pos[1])-1\n   x2 = int(pos[2])-1\n   y2 = int(pos[3])-1\n   for j in range(x1,x2+1):\n    for k in range(y1,y2+1):\n     sum1 = sum1 + int(tree[j][k])\n   print(sum1) \n except EOFError:\n  break", "# cook your dish here\nfrom sys import stdin, stdout\nrows,columns=map(int,stdin.readline().strip().split())\nmatrix=[]\nfor _ in range(rows):\n row=list(map(int,stdin.readline().strip().split()))\n matrix.append(row)\nC=int(stdin.readline().strip())\nfor _ in range(C):\n tlx,tly,brx,bry=map(int,stdin.readline().strip().split())\n s=0\n for r in range(tlx-1,brx):\n  for c in range(tly-1,bry):\n   s+=matrix[r][c]\n stdout.write(str(s)+'\\n')", "import numpy as np\nl = input().split()\nn=int(l[0])\nm=int(l[1])\nl=[]\nfor _ in range(n):\n l.append(list(map(int,input().split()))[:])\ntc = int(input())\narr = np.array(l)\nfor _ in range(tc):\n dim = input().split()\n r1 = int(dim[0])\n c1 = int(dim[1])\n r2 = int(dim[2])\n c2 = int(dim[3])\n t = arr[r1-1:r2,c1-1:c2]\n print(np.sum(t))\n \n", "l = input().split()\nn=int(l[0])\nm=int(l[1])\nl=[]\nfor _ in range(n):\n l.append(list(map(int,input().split()))[:])\ntc = int(input())\nfor _ in range(tc):\n dim = input().split()\n r1 = int(dim[0])\n c1 = int(dim[1])\n r2 = int(dim[2])\n c2 = int(dim[3])\n sum=0\n for i in range(r1-1,r2):\n  for j in range(c1-1,c2):\n   sum+=l[i][j]\n print(sum)\n \n", "# cook your dish here\ntry:\n m, n = list(map(int, input().split()))\n vol = [[0] * (n+1)]\n area = [[]]\n for i in range(m):\n  area.append([0] + list(map(int, input().split())))\n  vol.append([0] * (n+1))\n \n for i in range(1, m+1):\n  for j in range(1, n+1):\n   vol[i][j] = vol[i-1][j] + vol[i][j-1] - vol[i-1][j-1] + area[i][j]\n \n t = int(input())\n \n for i in range(t):\n  x, y, p, q = list(map(int, input().split()))\n  print(vol[p][q] - vol[x-1][q] - vol[p][y-1] + vol[x-1][y-1])\n\nexcept:\n pass", "# cook your dish here\nn,m = list(map(int,input().split()))\nl = []\nfor i in range(n):\n x = list(map(int,input().split()))\n l.append(x)\n\nt = int(input())\nfor _ in range(t):\n x1,y1,x2,y2 = list(map(int,input().split()))\n vol = 0\n for i in range(x1-1,x2):\n  for j in range(y1-1,y2):\n   vol+=l[i][j]\n print(vol)", "# cook your dish here\nn,m = list(map(int,input().split()))\nl = [[] for _ in range(n)]\nfor i in range(n):\n x = list(map(int,input().split()))\n l[i]+=(x)\n\nt = int(input())\nfor _ in range(t):\n x1,y1,x2,y2 = list(map(int,input().split()))\n vol = 0\n for i in range(x1-1,x2):\n  for j in range(y1-1,y2):\n   vol+=l[i][j]\n print(vol)", "m,n=map(int, input().split())\nl = []\nfor _ in range(m):\n l.append(list(map(int, input().split())))\nq=[]\nm, n = 0,0\nfor _ in range(int(input())):\n y1,x1,y2,x2 = map(int, input().split())\n q.append([y1,x1,y2,x2])\n n=max(n,x2)\n m=max(m,y2)\n \ndp = [[0 for _ in range(n+1)] for _ in range(m+1)]\ndp[1][1]=l[0][0]\nfor i in range(1,n+1):\n dp[1][i] = dp[1][i-1] + l[0][i-1]\n \nfor j in range(2, m+1):\n t_sum = 0\n for i in range(1, n+1):\n  t_sum += l[j-1][i-1]\n  dp[j][i] = t_sum + dp[j-1][i]\n\nfor y1,x1,y2,x2 in q:\n ans = dp[y2][x2]-dp[y2][x1-1]-dp[y1-1][x2] + dp[y1-1][x1-1]\n print(ans)"]