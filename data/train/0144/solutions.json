["class Solution:\n     def minSteps(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         primeFactors=[]\n         for i in range(2,int(n**.5)+1):\n             while n%i==0:\n                 primeFactors.append(i)\n                 n=n//i\n         if n>1:\n             primeFactors.append(n)\n         return sum(primeFactors)", "class Solution:\n     def minSteps(self, n):\n         m = n\n         sum = 0\n         tmp=2\n         if m == 1:\n             return 0\n         if m == 2:\n             return 2\n         else:\n             while(m>tmp):\n                 k=m%tmp\n                 if k==0:\n                     m=m/tmp\n                     sum += tmp\n                 else:\n                     tmp=tmp+1\n             sum = sum+tmp\n                 \n             return sum\n         \n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n", "class Solution:\n     def minSteps(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         def factors(n):\n             d = 2\n             while d * d <= n:\n                 while n % d == 0:\n                     n /= d\n                     yield d\n                 d += 1\n             if n > 1:\n                 yield n\n \n         return int(sum(factors(n)))\n             \n             \n     \n", "class Solution:\n     def minSteps(self, n):\n         primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n         ret = 0\n         for p in primes:\n             while not (n % p):\n                 n /= p\n                 ret += p\n         return int(ret + n * (n > 1))", "class Solution:\n     def minSteps(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         res = 0\n         p = 2\n         while n > 1:\n             while n%p == 0:\n                 res += p\n                 n /= p\n             p += 1\n         return res", "class Solution:\n     def minSteps(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n == 1:\n             return 0\n         \n         isPrime = [True for _ in range(n+1)]\n         isPrime[1] = False\n         prime = []\n         for i in range(2, n+1):\n             if isPrime[i] == True:\n                 prime.append(i)\n                 k = 1\n                 while (k+1) * i <= n:\n                     isPrime[(k+1) * i] = False\n                     k += 1\n         \n         if isPrime[n]:\n             return n\n         \n         cnt, i = 0, 0\n         while n > 1:\n             while n % prime[i] == 0:\n                 cnt += prime[i]\n                 n = n // prime[i]\n             if isPrime[n]:\n                 return cnt + n\n             i += 1\n         return cnt\n", "class Solution:\n     def minSteps(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         \n         if n == 1:\n             return 0\n         \n         # just manually does the first factor\n         # useless step\n         \n         #lf = min(self.primes(n))\n         \n         #steps = lf\n         #divs = n // lf\n         \n         \n         return self.calcsteps(0, n) \n         # return self.calcsteps(steps, lf)   \n         \n         '''\n         # this cleaner version of my approach starts at the lowest factor, then moves up when the number can no longer be cleanly divided\n         # d stands for divisor (?)\n         # both solutions run at 40ms\n         \n         ans = 0\n         d = 2\n         while n > 1:\n             while n % d == 0:\n                 ans += d\n                 n /= d\n             d += 1\n         return ans\n         '''\n     def isprime(self, n):\n         if n == 2 or n == 3:\n             return True\n         if n % 2 == 0 or n % 3 == 0:\n             return False\n \n         i = 5\n         w = 2\n \n         while i * i <= n:\n             if n % i == 0:\n                 return False\n \n             i += w\n             w = 6 - w\n \n         return True\n     \n     def primes(self, n):\n         # gets all prime factors of n\n         primfac = []\n         d = 2\n         while d*d <= n:\n             while (n % d) == 0:\n                 primfac.append(d)\n                 n //= d\n             d += 1\n         if n > 1:\n             primfac.append(n)\n         return primfac\n     \n     def calcsteps(self, steps, divs):\n         if self.isprime(divs):\n                 return divs + steps\n         \n         primes = self.primes(divs)\n         # if a factor is three, you have to copy n, then paste it twice. 1 + 2 = 3, 1 + n - 1 = n\n         # therefore, the number of steps is the sum of the primes\n         \n         return steps + sum(primes)\n", "class Solution:\n     def minSteps(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         s = 0\n         for d in range(2, n+1):\n             while n % d == 0:\n                 s += d\n                 n /= d\n         return s", "class Solution:\n     def minSteps(self, n):\n         d = 2\n         ans = 0\n         while(n>1):\n             while(n%d==0):\n                 ans += d\n                 n = n/d\n             d = d+1\n         return ans\n         \n         \n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"", "class Solution(object):\n     def minSteps(self, n):\n         steps = 0\n         div = 2\n         while n > 1:\n             if n % div == 0:\n                 steps += div\n                 \n                 n = n / div\n             else:\n                 div += 1\n         \n         return steps", "class Solution:\n     def minSteps(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         f=2\n         s=0\n         while f*f<=n:\n             while n%f==0:\n                 s+=f\n                 n=int(n/f)\n             f+=1\n         if n>1:\n             s+=n\n         return int(s)\n"]