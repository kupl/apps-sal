["import numpy as np\r\nfrom numba import njit\r\ni8 = np.int64\r\n\r\n\r\n@njit\r\ndef solve(a, b, t, K, N):\r\n    t1 = t // K\r\n    d = t % K * 2\r\n    # b \u304c a \u304b\u3089 a + d \u306e\u4f4d\u7f6e\u306b\u3042\u308c\u3070\u885d\u7a81\u3059\u308b\r\n    x = 0\r\n    y = 0\r\n    ans = 0\r\n    for c in a:\r\n        while b[x] < c:\r\n            x += 1\r\n        while b[y] <= c + d:\r\n            y += 1\r\n        ans += y - x\r\n    ans += t1 * len(a) * (N - len(a)) * 2\r\n    return ans\r\n\r\n\r\ndef set_ini(DX, K):\r\n    a = DX[1][DX[0] == 1]\r\n    a = np.sort(a)\r\n    b = DX[1][DX[0] == 2]\r\n    b = np.sort(b)\r\n    b = np.hstack((b, b + K, b + 2 * K, [3 * K]))\r\n    return a, b\r\n\r\n\r\ndef main():\r\n    f = open('/dev/stdin', 'rb')\r\n    vin = np.fromstring(f.read(), i8, sep=' ')\r\n    N, Q, K = vin[0:3]\r\n    head = 3\r\n    DX = vin[head:head + 2*N].reshape(-1, 2).T\r\n    a, b = set_ini(DX, K)\r\n    head += 2 * N\r\n    T = vin[head: head + Q]\r\n    for t in T:\r\n        print(solve(a, b, t, K, N))\r\n\r\n\r\ndef __starting_point():\r\n    main()\n__starting_point()"]