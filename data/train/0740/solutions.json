["t=int(input())\nwhile(t):\n t-=1\n d={}\n n,m,k=[int(x) for x in list(input().split())]\n sum=0\n while(k):\n  k-=1\n  x,y=[int(x) for x in list(input().split())]\n  a=[-1,1,0,0]\n  b=[0,0,-1,1]\n  for i in range(4):\n   if((x+a[i],y+b[i]) in d):\n    sum-=1\n   else:\n    sum+=1\n  d[(x,y)]=1\n print(sum)", "# cook your dish here\nimport numpy as np\nt=int(input())\nwhile(t):\n t-=1\n n,m,k=[int(x) for x in list(input().split())]\n l=np.array([[\".\"]*m]*n)\n sum=0\n while(k):\n  k-=1\n  x,y=[int(x) for x in list(input().split())]\n  i=x-1\n  j=y-1\n  l[i][j]=\"X\"\n  if(i==0 or l[i-1][j]==\".\"):\n   sum+=1\n  else:\n   sum-=1\n  if(i==n-1 or l[i+1][j]==\".\"):\n   sum+=1\n  else:\n   sum-=1\n  if(j==0 or l[i][j-1]==\".\"):\n   sum+=1\n  else:\n   sum-=1\n  if(j==m-1 or l[i][j+1]==\".\"):\n   sum+=1\n  else:\n   sum-=1\n print(sum)", "# cook your dish here\nimport numpy as np\nt=int(input())\nwhile(t):\n t-=1\n n,m,k=[int(x) for x in list(input().split())]\n l=np.array([[\".\"]*m]*n)\n while(k):\n  k-=1\n  x,y=[int(x) for x in list(input().split())]\n  l[x-1][y-1]=\"X\"\n sum=0\n for i in range(n):\n  for j in range(m):\n   if(l[i][j]==\"X\"):\n    if(i==0 or l[i-1][j]==\".\"):\n     sum+=1\n    if(i==n-1 or l[i+1][j]==\".\"):\n     sum+=1\n    if(j==0 or l[i][j-1]==\".\"):\n     sum+=1\n    if(j==m-1 or l[i][j+1]==\".\"):\n     sum+=1\n print(sum)", "from sys import stdin\ndef sin():\n return stdin.readline()\n\nfor _ in range(int(sin())):\n n,m,k = list(map(int, sin().split()))\n d={}\n ans=4*k\n for i in range(k):\n  r,c = list(map(int, sin().split()))\n  ans-=(2*d.get((r-1,c),0)+\n   2*(d.get((r,c-1),0))+\n   2*(d.get((r+1,c),0))+\n   2*(d.get((r,c+1),0)))\n  d[r,c]=1\n print(ans)\n", "from sys import stdin\nimport numpy as np\n\n\ndef sin():\n return stdin.readline()\n\nfor _ in range(int(sin())):\n n,m,k = list(map(int, sin().split()))\n grid= np.zeros([n,m])\n # print(grid)\n ans=4*k\n for i in range(k):\n  r,c = list(map(int, sin().split()))\n  r-=1\n  c-=1\n  if r>0 and grid[r-1][c]==1:\n   ans-=2\n  if c>0 and grid[r][c-1]==1:\n   ans-=2\n  if c<m-1 and grid[r][c+1]==1:\n   ans-=2\n  if r<n-1 and grid[r+1][c]==1:\n   ans-=2\n  grid[r][c]=1\n print(ans)\n # print(grid)\n", "from sys import stdin\ndef sin():\n return stdin.readline()\n\nfor _ in range(int(sin())):\n n,m,k = list(map(int, sin().split()))\n grid=[]\n ans=4*k\n for i in range(n):\n  grid.append([0]*m)\n for i in range(k):\n  r,c = list(map(int, sin().split()))\n  r-=1\n  c-=1\n  if r>0 and grid[r-1][c]==1:\n   ans-=2\n  if c>0 and grid[r][c-1]==1:\n   ans-=2\n  if c<m-1 and grid[r][c+1]==1:\n   ans-=2\n  if r<n-1 and grid[r+1][c]==1:\n   ans-=2\n  grid[r][c]=1\n print(ans)\n", "for _ in range(int(input())):\n n,m,k=map(int,input().split())\n d={}\n s=0\n for i in range(k):\n  #print(d)\n  x,y=map(int,input().split())\n  d[x,y]=1\n  s-=d.get((x-1,y),-1)\n  s-=d.get((x,y-1),-1)\n  s-=d.get((x,y+1),-1)\n  s-=d.get((x+1,y),-1)\n  #print(s)\n print(s)", "from sys import stdin as si\n\ndef __starting_point():\n for _ in range(int(si.readline().strip())):\n  _, _, k = list(map(int, si.readline().strip().split()))\n  lookup = {}\n  for i in range(k):\n   x, y = list(map(int, si.readline().strip().split()))\n   def check(d):\n    if d in lookup:\n     del lookup[d]\n    else:\n     lookup[d] = True\n   check((x-1, y-1, x-1, y))\n   check((x-1, y-1, x, y-1))\n   check((x-1, y, x, y))\n   check((x, y-1, x, y))\n  print(len(lookup))\n\n__starting_point()", "# cook your dish here\nfor _ in range(int(input())):\n n,m,k=list(map(int,input().split()))\n d={}\n s=0\n for i in range(k):\n  #print(d)\n  x,y=list(map(int,input().split()))\n  d[x,y]=1\n  s-=d.get((x-1,y),-1)\n  s-=d.get((x,y-1),-1)\n  s-=d.get((x,y+1),-1)\n  s-=d.get((x+1,y),-1)\n  #print(s)\n print(s)\n", "dirs = [(0, -1), (0, 1), (1, 0), (-1, 0)]\ndef fence(n, m, k, coords):\n f = 0\n for coord in coords:\n  for dx, dy in dirs:\n   x, y = coord[0]+dx, coord[1]+dy\n   if x >= 0 and x < n and y >= 0 and y < m and (x, y) in coords:\n    pass\n   else:\n    f += 1\n return f\n\n\nfor t in range(int(input())):\n n, m, k = map(int, input().split())\n coords = []\n for _ in range(k):\n  a, b = map(int, input().split())\n  coords.append((a-1, b-1))\n coords = set(coords)\n print(fence(n, m, k, coords))", "# cook your dish here\ndef fence(n, m, k, coords):\n # def bfs(n, m, s, visited):\n #   from collections import deque\n #   q = deque([s])\n #   visited.add(s)\n #   dirs = [(0, -1), (0, 1), (1, 0), (-1, 0)]\n #   f = 0\n #   while q:\n #       sr, sc = q.popleft()\n #       for dr, dc in dirs:\n #           new_sr, new_sc = sr+dr, sc+dc\n #           new_s = (new_sr, new_sc)\n #           if new_sr >= 0 and new_sr < n and \\\n #           new_sc >= 0 and new_sc < m and new_s not in visited: \n #               q.append(new_s); visited.add(new_s)\n #           else: f += 1\n #   return f\n # r, visited = 0, set([])\n # for s in coords:\n #   if s not in visited:\n #       r += bfs(n, m, s, visited)\n # return r\n dirs = [(0, -1), (0, 1), (1, 0), (-1, 0)]\n f = 0\n for coord in coords:\n  for dx, dy in dirs:\n   x, y = coord[0]+dx, coord[1]+dy\n   if x >= 0 and x < n and y >= 0 and y < m and (x, y) in coords:\n    pass\n   else:\n    f += 1\n return f\n \nt = int(input())\nfor _ in range(t):\n n, m, k = map(int, input().split())\n L = []\n for _ in range(k):\n  a, b = map(int, input().split())\n  L.append((a-1, b-1))\n coords = set(L)\n print(fence(n, m, k, coords))", "for _ in range(int(input())):\n row,col,k = list(map(int, input().split()))\n fen=0\n garden = [[0 for i in range(col)] for j in range(row)]\n for i in range(k):\n  r, c=list(map(int, input().split()))\n  garden[r-1][c-1] = 1\n #print(garden)\n for c in range(col):\n  for r in range(row):\n   if r==0 or r==row-1:\n    if garden[r][c]==1:\n     fen+=1\n     #print(c,r)\n   if r!=0 :\n    if garden[r][c]!=garden[r-1][c]:\n     fen+=1\n     #print(c,r)\n   if c==0 or c==col-1:\n    if garden[r][c]==1:\n     fen+=1\n     #print(c,r)\n   if c!=0 :\n    if garden[r][c]!=garden[r][c-1]:\n     fen+=1\n     #print(c,r)\n '''for r in range(row):\n     for c in range(col):\n      if c==0 or c==col-1:\n       if garden[r][c]==1:\n        fen+=1\n        #print(c,r)\n      if c!=0 :\n       if garden[r][c]!=garden[r][c-1]:\n        fen+=1\n        #print(c,r)'''\n print(fen)# cook your dish here\n", "for _ in range(int(input())):\n row,col,k = list(map(int, input().split()))\n fen=0\n garden = [[0 for i in range(col)] for j in range(row)]\n for i in range(k):\n  r, c=list(map(int, input().split()))\n  garden[r-1][c-1] = 1\n #print(garden)\n for c in range(col):\n  for r in range(row):\n   if r==0 or r==row-1:\n    if garden[r][c]==1:\n     fen+=1\n     #print(c,r)\n   if r!=0 :\n    if garden[r][c]!=garden[r-1][c]:\n     fen+=1\n     #print(c,r)\n for r in range(row):\n  for c in range(col):\n   if c==0 or c==col-1:\n    if garden[r][c]==1:\n     fen+=1\n     #print(c,r)\n   if c!=0 :\n    if garden[r][c]!=garden[r][c-1]:\n     fen+=1\n     #print(c,r)\n print(fen)# cook your dish here\n", "for _ in range(int(input())):\n n,m,q = list(map(int,input().split()))\n p = []\n dic = {}\n for i in range(q):\n  x,y = list(map(int,input().split()))\n  p.append([x,y])\n  dic[(x,y)] = 1\n\n cnt = 0\n #print(dic)\n for u in p:\n  r1 = u[0]\n  r2 = u[1]\n\n  one = (r1-1,r2)\n  two = (r1+1,r2)\n  thr = (r1,r2-1)\n  fo = (r1,r2+1)\n\n  s = 0\n  if one in dic:\n   s = s+1\n\n  if two in dic:\n   s = s+1\n\n  if thr in dic:\n   s = s+1\n\n  if fo in dic:\n   s = s+1\n\n  #print(s)\n\n  re = 4-s\n  cnt = cnt + re\n\n print(cnt)\n\n", "from math import *\nt=int(input())\nwhile t>0:\n t-=1\n n,m,k=list(map(int,input().split()))\n a=[]\n b=[]\n ll=k*4\n for i in range(k):\n  d=[int(x) for x in input().split()]\n  a.append(d)\n  d=d[::-1]\n  b.append(d)\n a.sort()\n b.sort()\n \n for i in range(1,len(a)):\n  #print(ll,a[i])\n  if a[i][0]==a[i-1][0] and abs(a[i][1]-a[i-1][1])==1:\n   ll-=2\n for i in range(1,len(b)):\n  if b[i][0]==b[i-1][0] and abs(b[i][1]-b[i-1][1])==1:\n   ll-=2 \n print(ll) \n", "# cook your dish here\n# cook your dish here\ndef binarySearch(ar,l,r,x): \n if r>=l: \n  mid=(l+r)//2\n  if ar[mid] == x: \n   return mid \n  elif ar[mid] > x: \n   return binarySearch(ar,l,mid-1,x) \n  else: \n   return binarySearch(ar,mid+1,r,x) \n else: \n  return -1\nt=int(input())\nfor _ in range (t):\n r,c,q=list(map(int,input().split()))\n er=[]\n ar=[]\n coun=0\n for i in range (q):\n  er.append(input().split())\n  ar.append((int(er[i][0]))*(c+1)+int(er[i][1]))\n ar=sorted(ar)\n for i in range (q):\n  l=0\n  r=q-1\n  x=((ar[i]//(c+1)+1)*(c+1)+(ar[i]%(c+1)))\n  if binarySearch(ar,l,r,x)==-1:\n   coun+=1\n  x=((ar[i]//(c+1)-1)*(c+1)+(ar[i]%(c+1)))\n  if binarySearch(ar,l,r,x)==-1:\n   coun+=1\n  x=ar[i]+1\n  if i<q-1:\n   if ar[i+1]!=x:\n    coun+=1\n  else:\n   coun+=1\n  x=ar[i]-1\n  if i>0:\n   if ar[i-1]!=x:\n    coun+=1\n  else:\n   coun+=1\n print(coun)\n  \n  \n  \n  \n", "for i in range(int(input())):\n n,m,k= map(int,input().split())\n a=[]\n item = {}\n count =0\n for j in range (k):\n  x,y= map(int,input().split())\n  ele=(x,y)\n  item[ele]=1\n  a.append([x,y])\n  count+=4\n  if (item.get((x-1,y))==1):\n   count-=2\n  if ((item.get((x,y+1)))==1):\n   count-=2\n  if ((item.get((x,y-1)))==1):\n   count-=2\n  if ((item.get((x+1,y)))==1):\n   count-=2 \n print(count)", "t = int(input())\nfor _ in range(t):\n n,m,k = map(int,input().strip().split())\n plants = []\n stat = {}\n count = 0\n for i in range(k):\n  x,y = map(int,input().strip().split())\n  ele = (x,y)\n  stat [ele] = 1\n  plants.append([x,y])\n  count += 4 \n  if(stat.get((x-1,y)) == 1):\n   count -= 2\n  if(stat.get((x,y+1)) == 1):\n   count -= 2\n  if(stat.get((x+1,y)) == 1):\n   count -= 2\n  if(stat.get((x,y-1)) == 1):\n   count -= 2\n print(count)", "def check(x,y,mat):\n tc=0\n if(mat[(x-1)][y]==0):\n  tc+=1\n if(mat[(x)][y-1]==0):\n  tc+=1\n if(mat[(x)][y+1]==0):\n  tc+=1\n if(mat[(x+1)][y]==0):\n  tc+=1\n #print(x,y,mat[x],tc)\n return tc\n\n\n\nT=int(input())\nfor t in range(T):\n ls=list(map(int,input().split()))\n N=ls[0]\n M=ls[1]\n K=ls[2]\n mat=[[0 for i in range(M+2)] for i in range(N+2)]\n rows=[]\n cols=[] \n for k in range(K):\n  es=list(map(int,input().split()))\n  mat[es[0]][es[1]]=1\n  rows.append(es[0])\n  cols.append(es[1])\n #for row in mat:\n #   print(row)\n count=0\n for i in range(len(rows)):\n  count=count+check(rows[i],cols[i],mat)\n print(count)\n", "# https://www.codechef.com/APRIL19B/problems/FENCE\n'''\n    Author - Subhajit Das\n    University of Engineering and Management, Kolkata\n    04/07/2019\n'''\n\n\ndef main():\n for _ in range(int(input())):\n  n, m, k = list(map(int, input().split()))\n  plants = dict()\n  ans = 0\n  while(k != 0):\n   r, c = list(map(int, input().split()))\n   plants[(r,c)] = True\n   ans += 4\n   if(plants.get((r+1,c),False)):\n    ans -= 2\n   if(plants.get((r-1,c),False)):\n    ans -= 2\n   if(plants.get((r,c+1),False)):\n    ans -= 2\n   if(plants.get((r,c-1),False)):\n    ans -= 2\n   k -= 1\n  print(ans)\n\n\ndef __starting_point():\n main()\n\n__starting_point()", "# https://www.codechef.com/APRIL19B/problems/FENCE\n'''\n    Author - Subhajit Das\n    University of Engineering and Management, Kolkata\n    04/07/2019\n'''\n\n\ndef main():\n for _ in range(int(input())):\n  n, m, k = list(map(int, input().split()))\n  field = [[0]*m for _ in range(n)]\n  moves = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n  ans = 0\n  while(k != 0):\n   r, c = list(map(int, input().split()))\n   r -= 1\n   c -= 1\n   field[r][c] = 1\n   for dx, dy in moves:\n    nr, nc = r+dx, c+dy\n    #print(f'r: {nr}\\tc: {nc}')\n    if(nr < 0 or nr >= n or nc < 0 or nc >= m):\n     ans += 1\n     continue\n    if(field[nr][nc] == 1):\n     ans -= 1\n    else:\n     ans += 1\n   k -= 1\n  print(ans)\n\n\ndef __starting_point():\n main()\n\n__starting_point()"]