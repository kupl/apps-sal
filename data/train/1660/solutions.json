["def simplify(poly):\n    # I'm feeling verbose today\n    \n    # get 3 parts (even if non-existent) of each term: (+/-, coefficient, variables)\n    import re\n    matches = re.findall(r'([+\\-]?)(\\d*)([a-z]+)', poly)\n    \n    # get the int equivalent of coefficient (including sign) and the sorted variables (for later comparison)\n    expanded = [[int(i[0] + (i[1] if i[1] != \"\" else \"1\")), ''.join(sorted(i[2]))] for i in matches]\n    \n    # get the unique variables from above list. Sort them first by length, then alphabetically\n    variables = sorted(list(set(i[1] for i in expanded)), key=lambda x: (len(x), x))\n    \n    # get the sum of coefficients (located in expanded) for each variable\n    coefficients = {v:sum(i[0] for i in expanded if i[1] == v) for v in variables}\n    \n    # clean-up: join them with + signs, remove '1' coefficients, and change '+-' to '-'\n    return '+'.join(str(coefficients[v]) + v for v in variables if coefficients[v] != 0).replace('1','').replace('+-','-')", "import re\ndef simplify(poly):\n    terms = {}\n    for sign, coef, vars in re.findall(r'([\\-+]?)(\\d*)([a-z]*)', poly):\n        sign = (-1 if sign == '-' else 1)\n        coef = sign * int(coef or 1)\n        vars = ''.join(sorted(vars))\n        terms[vars] = terms.get(vars, 0) + coef\n    # sort by no. of variables\n    terms = sorted(list(terms.items()), key=lambda v_c: (len(v_c[0]), v_c[0]))\n    return ''.join(map(format_term, terms)).strip('+')\n\ndef format_term(xxx_todo_changeme):\n    (vars, coef) = xxx_todo_changeme\n    if coef == 0:\n        return ''\n    if coef == 1:\n        return '+' + vars\n    if coef == -1:\n        return '-' + vars\n    return '%+i%s' % (coef, vars)\n", "def parse_terms(string):\n    poly, add = [], \"\"\n    for i in string:\n        if i == \"+\" and len(add) != 0:\n            poly.append(add)\n            #poly.append(\"+\")\n            add = \"\"\n        elif i == \"-\" and len(add) != 0:\n            poly.append(add)\n            #poly.append(\"+\")\n            add = \"-\"\n        else: \n            add = add + i\n    poly.append(add)\n    return poly\n\n\ndef parse_coef(term):\n    numbers = \"1234567890\"\n    coef, end = \"\", 0\n    \n    if term == \"+\":\n        return False, 0, term\n    else:\n        for i in range(len(term)):\n            if term[i] in numbers+\"-\":\n                coef = coef + term[i]\n            else: \n                end = i\n                break\n        \n    if coef == \"\":\n        return True, 1, term\n    elif coef == \"-\":\n        return True, -1, term[1:]\n    else:\n        return True, int(coef), term[end:]\n    \n    \ndef simplify(poly):\n    print(poly)\n    if poly[0] == \"+\":\n        poly = poly.replace(\"+\", \"\", 1)\n        print(poly)\n        \n    coeff = []\n    poly = parse_terms(poly)\n    print(poly)\n    \n    for i in range(len(poly)):\n        if_term, coef, term = parse_coef(poly[i])\n        if if_term:\n            coeff.append(coef)\n            poly[i] = \"\".join(sorted(term))\n            \n\n    for i in range(len(poly)-1):\n        for j in range(i+1, len(poly)):\n            if poly[i] == poly[j] and coeff[i] != 0:\n                coeff[i] = coeff[i] + coeff[j]\n                coeff[j] = 0\n            \n            \n    poly = [[poly[i], coeff[i], len(poly[i])] for i in range(len(poly))]\n    poly.sort(key= lambda poly: poly[0])    \n    poly.sort(key= lambda poly: poly[2])\n    print(poly)\n    \n    \n    for i in range(len(poly)):\n        if poly[i][1] == 1:\n            pass\n        elif poly[i][1] == -1:\n            poly[i][0] = \"-\" + poly[i][0]\n        elif poly[i][1] == 0:\n            poly[i][0] = \"\"            \n        else:\n            poly[i][0] = str(poly[i][1]) + poly[i][0]\n    \n    output = [i[0] for i in poly if i[0] != \"\"] \n    send = \"\"\n    for i in range(len(output) - 1):\n        if output[i+1][0] == \"-\":\n            send = send + output[i]\n        else: \n            send = send + output[i] + \"+\"\n    send = send + output[-1]\n    \n    print(send)\n    return send\n    \n", "import re\ndef simplify(poly):\n    p = {}\n    for m in re.findall(r'([+-]?)(\\d*)([a-z]+)', poly):\n        var = ''.join(sorted(m[2]))\n        p[var] = p.get(var,0)+(-1 if m[0]=='-' else 1)*(int(m[1]) if m[1]!='' else 1)\n    poly = ''.join('+-'[p[k]<0]+str(abs(p[k]))+k for k in sorted(p, key=lambda x:(len(x),x)) if p[k])\n    return re.sub('([+-])1(?=[a-z])',r'\\1', poly)[poly[0]=='+':]", "def simplify(poly):\n  import re\n  from collections import defaultdict\n  \n  terms = defaultdict(lambda: 0)\n  m = re.finditer(r'([+-]?)\\s*(\\d?)(\\w+)', poly)\n\n  for x in m:\n    terms[frozenset(x.group(3))] += int(x.group(1) + x.group(2)) if x.group(2) else -1 if x.group(1) == '-' else 1\n\n  f = [('+' if sign == 1 else '-' if sign==-1 else '{:+d}'.format(sign), ''.join(sorted(term))) for term, sign in terms.items() if sign != 0]\n  \n  ff = sorted(f, key=lambda x: (len(x[1]), x[1]))\n  \n  first_term = (ff[0][0][1:] if ff[0][0][0] == '+' else ff[0][0]) + ff[0][1]\n  \n  return first_term + ''.join(p + t for p, t in ff[1:])", "def simplify(poly):\n    \n    i = 0\n    eq = {}\n    length = len(poly)\n\n    while i < length:\n        if poly[i] in \"+-\":\n            const = poly[i]\n            i += 1\n        else:\n            const = \"+\"\n        \n        while poly[i].isnumeric():\n            const += poly[i]\n            i += 1\n        if not const[-1].isnumeric():\n            const += \"1\"\n        \n        var = \"\"\n        while i < length and poly[i] not in \"-+\":\n            var += poly[i]\n            i += 1\n        var = \"\".join(sorted(var))\n        eq[var] = eq.get(var, 0) + int(const)\n    \n    \n    output = \"\"\n    for term in sorted(eq, key = lambda x: (len(x), x)):\n        if eq[term] > 1:\n            output += \"+\" + str(eq[term]) + term\n        elif eq[term] == 1:\n            output += \"+\" + term\n        elif eq[term] == -1:\n            output += \"-\" + term\n        elif eq[term] < 0:\n            output += str(eq[term]) + term\n        \n    if output.startswith(\"+\"):\n        return output[1:]\n    else:\n        return output", "from collections import defaultdict\nimport re\ndef simplify(poly):\n    terms = defaultdict(lambda: 0)\n    for a, b, c in re.findall(r'([+-]?)(\\d*?)([a-z]+)', poly):\n        terms[''.join(sorted(c))] += eval(a + (b or '1'))\n    return (\n        re.sub\n        (\n            r'((?<=[-+])|\\b)1(?=[a-z])|((?:[-+])|\\b)0(?:[a-z]+)|\\+(?=-)',\n            '',\n            '+'.join([f'{terms[x]}{x}' for x in sorted(list(terms.keys()), key = lambda x: (len(x), x))])\n        )\n    )\n", "import re\ndef simplify(p):\n    p,d = p.strip('+'),{}\n    p = re.sub(r'([-+])', r' \\1 ', p).split()\n    start = 0 if p[0] != '-' else 1\n    for i in range(start, len(p), 2):\n        find = next(k for k in range(len(p[i])) if p[i][k].isalpha())\n        digits = int(p[i][:find] or 1)\n        digits = -digits if p[i - 1] == '-' else digits\n        to_find = \"\".join(sorted(p[i][find:]))\n        d[to_find] = d.get(to_find, 0) + digits\n    li = [[i, j] for i, j in d.items() if j != 0]\n    o= sorted(li, key=lambda x: (len(x[0]), x[0]))\n    return re.sub(r'(-|\\+)\\1+', r'\\1', \"\".join([['+', '-'][j < 0] + (str(j) if j not in [1, -1] else '') + i for i, j in o]).strip('+'))", "import re\ndef simplify(p):\n    if p[0] not in '-+':\n        p = '+'+p\n    p=p.replace('-',' -')\n    p=p.replace('+',' +')\n    p = p[1:].split(' ')\n    d = {}\n    for m in p:\n        f = re.search(r'\\d+',m)\n        n = int(f.group(0)) if f else 1\n        if m[0] == '-':\n            n = -n\n        v = re.search(r'[a-z]+',m).group(0)\n        v = ''.join(sorted(v))\n        try:\n            d[v] += n\n            if not d[v]:\n                del d[v]\n        except KeyError:\n            d[v] = n\n    res = ''.join(('+' if d[v]>0 else '-')+(str(abs(d[v])) if abs(d[v])>1 else '')+v for v in sorted(d.keys(),key=lambda x:(len(x),x)))\n    if res[0]=='+':\n        res = res[1:]\n    return res"]