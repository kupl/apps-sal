["class Solution:\n     def containsNearbyAlmostDuplicate(self, nums, k, t):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :type t: int\n         :rtype: bool\n         \"\"\"\n         if len(nums) < 2 or k <= 0 or t < 0: return False\n         if t == 0:\n             visited = set()\n             for i, n in enumerate(nums):\n                 if n in visited: return True\n                 visited.add(n)\n                 if i >= k: visited.remove(nums[i-k])\n             return False\n         bucket = {}\n         for i, n in enumerate(nums):\n             b = n // t\n             if b in bucket: return True\n             if b+1 in bucket and abs(bucket[b+1]-n) <= t: return True\n             if b-1 in bucket and abs(bucket[b-1]-n) <= t: return True\n             bucket[b] = n\n             if i >= k: del bucket[nums[i-k]//t]\n         return False", "class Solution:\n     def containsNearbyAlmostDuplicate(self, nums, k, t):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :type t: int\n         :rtype: bool\n         \"\"\"\n         nums2 = [(n, i) for i, n in enumerate(nums)]\n         nums2 = sorted(nums2)\n         print(nums2)\n         for i in range(1, len(nums2)):\n             j = i-1\n             a, n = nums2[j]\n             b, m = nums2[i]\n             while abs(a-b) <= t:\n                 if abs(n-m) <= k:\n                     return True\n                 j -= 1\n                 if j < 0:\n                     break\n                 a, n = nums2[j]\n \n         return False\n             \n", "class Solution(object):\n     def containsNearbyAlmostDuplicate(self, nums, k, t):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :type t: int\n         :rtype: bool\n         \"\"\"\n         if k < 1 or t < 0:\n             return False\n         import sys\n \n         bh = {}\n         # To prevent 0 as a divisor\n         w = t+1\n         for i in range(len(nums)):\n             n_i = nums[i]\n             n_i_w = n_i // w\n             if n_i_w in bh:\n                 return True\n             if n_i_w-1 in bh and abs(n_i - bh[n_i_w-1]) < w:\n                 return True\n             if n_i_w+1 in bh and abs(n_i - bh[n_i_w+1]) < w:\n                 return True\n             bh[n_i_w] = nums[i]\n             if len(bh) > k:\n                 del bh[(nums[i - k]) // w]\n         return False\n", "class Solution:\n     def containsNearbyAlmostDuplicate(self, nums, k, t):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :type t: int\n         :rtype: bool\n         \"\"\"\n         \n         if t<0:\n             return False\n         \n         w = t+1\n         d = {}\n         \n         for i in range(0, len(nums)):\n             m = nums[i]//w\n             #print(m,d)\n             if m in d:\n                 return True\n             if m-1 in d and abs(nums[i]-d[m-1])<=t:\n                 return True\n             if m+1 in d and abs(nums[i]-d[m+1])<=t:\n                 return True\n             d[m] = nums[i]\n             if i>=k:\n                 del d[nums[i-k]//w]\n                 \n         return False\n", "class Solution:\n     def containsNearbyAlmostDuplicate(self, nums, k, t):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :type t: int\n         :rtype: bool\n         \"\"\"\n         if t < 0: return False\n         n = len(nums)\n         buckets = {}\n         w = t + 1\n         for i in range(n):\n             bucket_num = nums[i] // w\n             if bucket_num in buckets:\n                 return True\n             if bucket_num - 1 in buckets and abs(nums[i] - buckets[bucket_num - 1]) < w:\n                 return True\n             if bucket_num + 1 in buckets and abs(nums[i] - buckets[bucket_num + 1]) < w:\n                 return True\n             buckets[bucket_num] = nums[i]\n             if i >= k: del buckets[nums[i-k]//w]\n         return False\n", "class Solution:\n     def equalSol(self, nums, k):\n         if k == 0:\n             return False\n         d = {}\n         for i in range(len(nums)):\n             if nums[i] in d.keys() and abs(i - d[nums[i]]) <= k:\n                 return True\n             else:\n                 d[nums[i]] = i\n         return False\n     \n     def containsNearbyAlmostDuplicate(self, nums, k, t):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :type t: int\n         :rtype: bool\n         \"\"\"\n         if k == 0:\n             return False\n         if t == 0:\n             return self.equalSol(nums, k)\n         for i in range(len(nums)):\n             for j in range(1,(k+1)):\n                 if (i + j) < len(nums) and abs(nums[i] - nums[i+j]) <= t:\n                     return True\n                 if (i - j) >= 0 and abs(nums[i] - nums[i-j]) <=t:\n                     return True\n         return False", "class Solution:\n     def containsNearbyAlmostDuplicate(self, nums, k, t):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :type t: int\n         :rtype: bool\n         \"\"\"\n         buckets = {}\n         for i, v in enumerate(nums):\n             bucket_num, offset = (v//t, 1) if t else (v, 0)\n             for idx in range(bucket_num - offset, bucket_num + offset + 1):\n                 if idx in buckets and abs(buckets[idx] - nums[i]) <= t:\n                     return True\n         \n             buckets[bucket_num] = nums[i]\n             if len(buckets) > k:\n                 del buckets[nums[i-k] // t if t else nums[i-k]]\n         \n         return False\n", "class Solution:\n     def containsNearbyAlmostDuplicate(self, nums, k, t):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :type t: int\n         :rtype: bool\n         \"\"\"\n         if t < 0: return False\n         n = len(nums)\n         buckets = {}\n         w = t + 1\n         for i in range(n):\n             bucket_num = nums[i] // w\n             if bucket_num in buckets:\n                 return True\n             if bucket_num - 1 in buckets and abs(nums[i] - buckets[bucket_num - 1]) < w:\n                 return True\n             if bucket_num + 1 in buckets and abs(nums[i] - buckets[bucket_num + 1]) < w:\n                 return True\n             buckets[bucket_num] = nums[i]\n             if i >= k: del buckets[nums[i-k]//w]\n         return False\n", "class Solution:\n     # @param {integer[]} nums\n     # @param {integer} k\n     # @param {integer} t\n     # @return {boolean}\n     def containsNearbyAlmostDuplicate(self, nums, k, t):\n         if len(nums) == 0 or len(nums) == 1 or k < 1 or t < 0:\n             return False\n         d = collections.OrderedDict()\n         for i in nums:\n             key = i if not t else i // t\n             for j in (d.get(key - 1), d.get(key), d.get(key + 1)):\n                 if j != None and abs(j - i) <= t:\n                     return True\n             if len(d) == k:\n                 d.popitem(False)\n             d[key] = i\n             \n         return False", "class Solution:\n     def containsNearbyAlmostDuplicate(self, nums, k, t):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :type t: int\n         :rtype: bool\n         \"\"\"\n         if k < 1 or t < 0:\n             return False\n         m = len(nums)\n         if m == 0:\n             return False\n         \n         \n         buckets = {}\n         _min = 0\n         for i in range(m):\n             num = nums[i] - _min\n             bucket = num // (t + 1)\n             flag = bucket in buckets \\\n                 or (bucket - 1 in buckets and abs(buckets[bucket - 1] - num) <= t) \\\n                 or (bucket + 1 in buckets and abs(buckets[bucket + 1] - num) <= t)\n                 \n             if flag:\n                 return True\n             if len(buckets) >= k:\n                 del buckets[(nums[i - k] - _min) // (t + 1)]\n             \n             buckets[bucket] = num\n         return False", "class Solution:\n     def containsNearbyAlmostDuplicate(self, nums, k, t):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :type t: int\n         :rtype: bool\n         \"\"\"\n         if t < 0:\n             return False\n         d = {}\n         w = t + 1\n         \n         for i in range(len(nums)):\n             b = nums[i] // w\n             if b in d:\n                 return True\n             if b - 1 in d and abs(nums[i] - d[b - 1]) < w:\n                 return True\n             if b + 1 in d and abs(nums[i] - d[b + 1]) < w:\n                 return True\n             d[b] = nums[i]\n             if i >= k:\n                 del d[nums[i - k] // w]\n         \n         return False"]