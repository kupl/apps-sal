["from math import factorial\ndef Ncr(n,r):\n    if r<0:return 0\n    return factorial(n)/(factorial(n-r)*factorial(r))\ndef solve(m,n):\n    modulo=10**9+7\n    if m==n:\n        return (Ncr(2*n-1,n-1)+Ncr(2*n-2,n-2))%modulo\n    elif m>n:\n        return (Ncr(m+n,n)-Ncr(m+n-2,n-1))%modulo\n    else:\n        return (Ncr(m+n,m)-Ncr(m+n-2,m-1))%modulo\n        \nt=int(input())\nfor i in range(t):\n    inp=list(map(int,input()))\n    m=inp.count(4)\n    n=inp.count(7)\n    print(solve(m,n))\n", "from math import factorial\ndef Ncr(n,r):\n    if r<0:return 0\n    return factorial(n)/(factorial(n-r)*factorial(r))\ndef solve(m,n):\n    modulo=10**9+7\n    if m==n:\n        return (Ncr(2*n-1,n-1)+Ncr(2*n-2,n-2))%modulo\n    elif m>n:\n        return (Ncr(m+n,n)-Ncr(m+n-2,n-1))%modulo\n    else:\n        return (Ncr(m+n,m)-Ncr(m+n-2,m-1))%modulo\n        \nt=int(input())\nfor i in range(t):\n    inp=list(map(int,input()))\n    m=inp.count(4)\n    n=inp.count(7)\n    print(solve(m,n))\n", "from functools import reduce\ndef factor(n):\n\tif n <= 1:\n\t\treturn 1\n\tret = 1\n\twhile n != 1:\n\t\tret *= n\n\t\tn -= 1;\n\treturn ret\n\n\nt = int(input())\nfor i in range(t):\n\ts = input()\n\tl = [0] * 10\n\tfor i in s:\n\t\tl[int(i)] += 1\n\tc4 = l[4]\n\tc7 = l[7]\n\tp = factor(c4+c7-2)\n\tr = reduce(lambda x,y: x*y,range(l[4]+l[7],len(s)),1)\n\tdv = reduce(lambda x,y:x*factor(y),l,1)\n\tans = (factor(len(s)) - p*c4*c7*r) / dv\n\tprint(ans % 1000000007)\n"]