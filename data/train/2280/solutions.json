["import sys\nreadline = sys.stdin.readline\nfrom itertools import accumulate\nfrom collections import Counter\nfrom bisect import bisect as br, bisect_left as bl\nclass PMS:\n    #1-indexed\n    def __init__(self, A, B, issum = False):\n        #A\u306b\u521d\u671f\u72b6\u614b\u306e\u8981\u7d20\u3092\u3059\u3079\u3066\u5165\u308c\u308b,B\u306f\u5024\u57df\u306e\u30ea\u30b9\u30c8\n        self.X, self.comp = self.compress(B)\n        self.size = len(self.X)\n        self.tree = [0] * (self.size + 1)\n        self.p = 2**(self.size.bit_length() - 1)\n        self.dep = self.size.bit_length()\n        \n        CA = Counter(A)\n        S = [0] + list(accumulate([CA[self.X[i]] for i in range(self.size)]))\n        for i in range(1, 1+self.size):\n            self.tree[i] = S[i] - S[i - (i&-i)]\n        if issum:\n            self.sumtree = [0] * (self.size + 1)\n            Ssum = [0] + list(accumulate([CA[self.X[i]]*self.X[i] for i in range(self.size)]))\n            for i in range(1, 1+self.size):\n                self.sumtree[i] = Ssum[i] - Ssum[i - (i&-i)]\n    \n    def compress(self, L):\n        #\u5ea7\u5727\n        L2 = list(set(L))\n        L2.sort()\n        C = {v : k for k, v in enumerate(L2, 1)}\n        # 1-indexed\n        return L2, C\n    \n    def leng(self):\n        #\u4eca\u5165\u3063\u3066\u3044\u308b\u500b\u6570\u3092\u53d6\u5f97\n        return self.count(self.X[-1])\n    \n    def count(self, v):\n        #v(B\u306e\u5143)\u4ee5\u4e0b\u306e\u500b\u6570\u3092\u53d6\u5f97\n        i = self.comp[v]\n        s = 0\n        while i > 0:\n            s += self.tree[i]\n            i -= i & -i\n        return s\n    \n    def less(self, v):\n        #v(B\u306e\u5143\u3067\u3042\u308b\u5fc5\u8981\u306f\u306a\u3044)\u672a\u6e80\u306e\u500b\u6570\u3092\u53d6\u5f97\n        i = bl(self.X, v)\n        s = 0\n        while i > 0:\n            s += self.tree[i]\n            i -= i & -i\n        return s\n    \n    def leq(self, v):\n        #v(B\u306e\u5143\u3067\u3042\u308b\u5fc5\u8981\u306f\u306a\u3044)\u4ee5\u4e0b\u306e\u500b\u6570\u3092\u53d6\u5f97\n        i = br(self.X, v)\n        s = 0\n        while i > 0:\n            s += self.tree[i]\n            i -= i & -i\n        return s\n \n    def add(self, v, x):\n        #v\u3092x\u500b\u5165\u308c\u308b,\u8ca0\u306ex\u3067\u53d6\u308a\u51fa\u3059,i\u306e\u500b\u6570\u4ee5\u4e0a\u53d6\u308a\u51fa\u3059\u3068\u30a8\u30e9\u30fc\u3092\u51fa\u3055\u305a\u306b\u30d0\u30b0\u308b\n        i = self.comp[v]\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & -i\n\n    def get(self, i):\n        # i\u756a\u76ee\u306e\u5024\u3092\u53d6\u5f97\n        if i <= 0:\n            return -1\n        s = 0\n        k = self.p\n        for _ in range(self.dep):\n            if s + k <= self.size and self.tree[s+k] < i:\n                s += k\n                i -= self.tree[s]\n            k //= 2\n        return self.X[s]\n    \n    def gets(self, v):\n        #\u7d2f\u7a4d\u548c\u304cv\u4ee5\u4e0b\u3068\u306a\u308b\u6700\u5927\u306eindex\u3092\u8fd4\u3059\n        v1 = v\n        s = 0\n        k = self.p\n        for _ in range(self.dep):\n            if s + k <= self.size and self.sumtree[s+k] < v:\n                s += k\n                v -= self.sumtree[s]\n            k //= 2\n        if s == self.size:\n            return self.leng()\n        return self.count(self.X[s]) + (v1 - self.countsum(self.X[s]))//self.X[s]\n    \n    def addsum(self, i, x):\n        #sum\u3092\u6271\u3044\u305f\u3044\u3068\u304d\u306badd\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u3046\n        self.add(i, x)\n        x *= i\n        i = self.comp[i]\n        while i <= self.size:\n            self.sumtree[i] += x\n            i += i & -i\n    \n    def countsum(self, v):\n        #v(B\u306e\u5143)\u4ee5\u4e0b\u306esum\u3092\u53d6\u5f97\n        i = self.comp[v]\n        s = 0\n        while i > 0:\n            s += self.sumtree[i]\n            i -= i & -i\n        return s\n    \n    def getsum(self, i):\n        #i\u756a\u76ee\u307e\u3067\u306esum\u3092\u53d6\u5f97\n        x = self.get(i)\n        return self.countsum(x) - x*(self.count(x) - i)\n    \nN, Q = map(int, readline().split())\nP = list(map(int, readline().split()))\nMOD = 998244353\nT = [100*pow(pi, MOD-2, MOD)%MOD for pi in P]\n\nAT = [None]*N\nAT[0] = T[0]\nfor i in range(1, N):\n    AT[i] = (AT[i-1]+1)*T[i]%MOD\nAM = [None]*N\nAMi = [None]*N\nAM[0] = T[0]\nfor i in range(1, N):\n    AM[i] = AM[i-1]*T[i]%MOD\nAMi[N-1] = pow(AM[N-1], MOD-2, MOD)\nfor i in range(N-2, -1, -1):\n    AMi[i] = AMi[i+1]*T[i+1]%MOD\nAT += [0]\nAM += [1]\nAMi += [1]\n\nAns = [None]*Q\nkk = set([0, N])\nPM = PMS([0, N], list(range(N+1)))\nans = AT[N-1]\nfor qu in range(Q):\n    f = int(readline()) - 1\n    if f not in kk:\n        kk.add(f)\n        PM.add(f, 1)\n        fidx = PM.count(f)\n        fm = PM.get(fidx-1)\n        fp = PM.get(fidx+1)\n        am = (AT[f-1] - AM[f-1]*AMi[fm-1]*AT[fm-1])%MOD\n        ap = (AT[fp-1] - AM[fp-1]*AMi[f-1]*AT[f-1])%MOD\n        aa = (AT[fp-1] - AM[fp-1]*AMi[fm-1]*AT[fm-1])%MOD\n        ans = (ans - aa + am + ap)%MOD\n    else:\n        kk.remove(f)\n        fidx = PM.count(f)\n        fm = PM.get(fidx-1)\n        fp = PM.get(fidx+1)\n        PM.add(f, -1)\n        am = (AT[f-1] - AM[f-1]*AMi[fm-1]*AT[fm-1])%MOD\n        ap = (AT[fp-1] - AM[fp-1]*AMi[f-1]*AT[f-1])%MOD\n        aa = (AT[fp-1] - AM[fp-1]*AMi[fm-1]*AT[fm-1])%MOD\n        ans = (ans + aa - am - ap)%MOD\n    Ans[qu] = ans\nprint('\\n'.join(map(str, Ans)))"]