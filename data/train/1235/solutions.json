["print(25)", "import sys\r\nimport math\r\nimport bisect\r\nfrom sys import stdin,stdout\r\nfrom math import gcd,floor,sqrt,log\r\nfrom collections import defaultdict as dd\r\nfrom bisect import bisect_left as bl,bisect_right as br\r\n\r\nsys.setrecursionlimit(100000000)\r\n\r\nii     =lambda: int(input())\r\nsi     =lambda: input()\r\njn     =lambda x,l: x.join(map(str,l))\r\nsl     =lambda: list(map(str,input().strip()))\r\nmi     =lambda: list(map(int,input().split()))\r\nmif    =lambda: list(map(float,input().split()))\r\nlii    =lambda: list(map(int,input().split()))\r\n\r\nceil   =lambda x: int(x) if(x==int(x)) else int(x)+1\r\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\r\n\r\nflush  =lambda: stdout.flush()\r\nstdstr =lambda: stdin.readline()\r\nstdint =lambda: int(stdin.readline())\r\nstdpr  =lambda x: stdout.write(str(x))\r\n\r\nmod=1000000007\r\n\r\n\r\n#main code\r\nn=ii()\r\nprint(25)\r\n\r\n", "# cook your dish here\nx = int(input())\n\nif(x==0):\n    print(0)\nelif(x==1):\n    print(5)\nelse:\n    print(25)", "_ = input()\nprint(25)", "N=float(eval(input()))\nprint(25)\n", "# cook your dish here\nn=float(input())\nprint(25)", "# cook your dish here\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    while (y > 0):\n        if (y & 1):\n            res = (res * x) % p \n        y = y >> 1 \n        x = (x * x) % p \n          \n    return res \n\ndef numberOfDigits(x): \n  \n    i = 0\n    while (x): \n        x //= 10\n        i += 1\n      \n    return i \n\ndef LastTwoDigit(n): \n  \n    temp = 1\n    for i in range(1, 3): \n        temp *= 10\n  \n    temp = power(5, n, temp) \n\n    for i in range(2 - numberOfDigits(temp)): \n        print(0, end = \"\") \n  \n    if temp: \n        print(temp) \n  \ndef __starting_point(): \n    n = int(input())\n    LastTwoDigit(n)\n    \n__starting_point()", "print(25)", "print(25)", "def p(x,y,p):\n    res=1\n    x=x%p\n    while(y>0):\n        if(y&1):\n            res=(res*x)%p\n        y=y>>1\n        x=(x*x)%p\n    return res\ndef nod(x):\n    i=0\n    while(x):\n        x//=10\n        i+=1\n    return i\ndef ltd(n):\n    temp=1\n    for i in range(1,3):\n        temp*=10\n        temp=p(5,n,temp)\n    for i in range(2-nod(temp)):\n        print(0,end=\"\")\n    if temp:\n        print(temp)\ndef __starting_point():\n    n=int(input())\n    ltd(n)\n__starting_point()", "def p(x,y,p):\n    res=1\n    x=x%p\n    while(y>0):\n        if(y&1):\n            res=(res*x)%p\n        y=y>>1\n        x=(x*x)%p\n    return res\ndef nod(x):\n    i=0\n    while(x):\n        x//=10\n        i+=1\n    return i\ndef ltd(n):\n    temp=1\n    for i in range(1,3):\n        temp*=10\n        temp=p(5,n,temp)\n    for i in range(2-nod(temp)):\n        print(0,end=\"\")\n    if temp:\n        print(temp)\ndef __starting_point():\n    n=int(input())\n    ltd(n)\n__starting_point()", "# cook your dish here\nn=int(input())\nprint(25)", "b = int(input())\r\nprint(int(25))", "print(25)\r\n", "# cook your dish here\nn=int(input())\nprint(25)\n", "n=int(input())\r\nprint(25)", "# cook your dish here\nprint('25')", "# cook your dish here\nn=eval(input())\nprint(25)\n", "# cook your dish here\nnum=int(input())\nprint(25)\n", "# cook your dish here\ndef power(x, y, p): \n  \n    res = 1 # Initialize result \n  \n    x = x % p # Update x if it is more  \n              # than or equal to p \n  \n    while (y > 0): \n  \n        # If y is odd, multiply \n        # x with result \n        if (y & 1): \n            res = (res * x) % p \n  \n        # y must be even now \n        y = y >> 1 # y = y/2 \n        x = (x * x) % p \n          \n    return res \n  \n# function to calculate \n# number of digits in x \ndef numberOfDigits(x): \n  \n    i = 0\n    while (x): \n        x //= 10\n        i += 1\n      \n    return i \n  \n# function to print  \n# last 2 digits of 2^n \ndef LastTwoDigit(n): \n  \n    \"\"\"print(\"Last \" + str(2) + \n          \" digits of \" + str(2), end = \"\") \n    print(\"^\" + str(n) + \" = \", end = \"\")\"\"\"\n  \n    # Generating 10^2 \n    temp = 1\n    for i in range(1, 3): \n        temp *= 10\n  \n    # Calling modular exponentiation \n    temp = power(5, n, temp) \n  \n    # Printing leftmost zeros.  \n    # Since (2^n)%2 can have digits  \n    # less then 2. In that case we  \n    # need to print zeros \n    for i in range(2 - numberOfDigits(temp)): \n        print(0, end = \"\") \n  \n    # If temp is not zero then print temp \n    # If temp is zero then already printed \n    if temp: \n        print(temp) \n  \n# Driver Code \ndef __starting_point(): \n    n = int(input())\n    LastTwoDigit(n)\n    \n__starting_point()", "a=int(input())\nprint(\"25\")\n", "n=int(input())\n\nprint(\"25\")", "n=int(input())\n\nprint(\"25\")", "# cook your dish here\nn=int(input())\n\nprint(25)", "# cook your dish here\nn = int(input())\n\nprint(25)"]