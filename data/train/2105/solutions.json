["3\nn = int(input())\na = [True] * (n + 2)\nfor i in range(2, n + 2):\n    if not a[i]:\n        continue\n    j =  i * i\n    while j < n + 2:\n        a[j] = False\n        j += i\nif n <= 2:\n    print(1)\nelse:\n    print(2)\nprint(' '.join('1' if x else '2' for x in a[2:]))\n", "def isprime(n):\n    if n==2:\n        return 1\n    else:\n        for i in range(2,int(n**0.5)+2):\n            if n%i==0:\n                return 0\n        return 1\n\nn=int(input())\nif n<=2:\n    print(1)\n    for i in range(n):\n        print(1,end=' ')\nelse:\n    print(2)\n    for i in range(2,n+2):\n        if isprime(i):\n            print(1, end=' ')\n        else:\n            print(2,end=' ')\n", "n = int(input())\nif n == 2:\n    print('1\\n1 1')\nelif n == 1:\n    print('1\\n1')\nelse:\n    a = [True for i in range(n + 2)]\n    for i in range(2, n + 2):\n        if a[i]:\n            for j in range(i * 2, n + 2, i):\n                a[j] = False\n    print(2, 1, sep = '\\n', end = '')\n    for i in range(1, n):\n        print('', 2 - a[i + 2], end = '')\n", "n = int(input())\nif n <= 2:\n    print(1)\n    for i in range(n):\n        print(1, end=' ')\nelse:\n    prime = [1] * (n + 2)\n    for i in range(2, n + 2):\n        if prime[i]:\n            k = i\n            while k + i < n + 2:\n                k += i\n                prime[k] = 0\n    print(2)\n    for i in range(2, n + 2):\n        if prime[i]:\n            print(1, end=' ')\n        else:\n            print(2, end=' ')", "n = int(input())\nif n == 1:\n    print(1)\n    print(1)\nelif n == 2:\n    print(1)\n    print('1 1')\nelse:\n    print(2)\n    ans = []\n\n    def prime(q):\n        j = 2\n        while j * j <= q:\n            if q % j == 0:\n                return False\n            j += 1\n        return True\n\n    for i in range(2, n + 2):\n        if prime(i):\n            ans.append('1')\n        else:\n            ans.append('2')\n    print(' '.join(ans))", "\ndef is_prime(n):\n\tif n == 2 or n == 3: return True\n\tif n < 2 or n%2 == 0: return False\n\tif n < 9: return True\n\tif n%3 == 0: return False\n\tr = int(n**0.5)\n\tf = 5\n\twhile f <= r:\n\t\tif n%f == 0: return False\n\t\tif n%(f+2) == 0: return False\n\t\tf +=6\n\treturn True\n\nn = int(input())\n\ncolors = []\n\nfor i in range(2, n + 2):\n\tif not is_prime(i):\n\t\tcolors.append(str(2))\n\telse:\n\t\tcolors.append(str(1))\n\t\t\nif n >= 3:\n\tprint(2)\nelse:\n\tprint(1)\n\nprint(\" \".join(colors))", "n = int(input())\nprimes = [2]\nprimes_bool = [2 for _ in range(10**5+4)]\nprimes_bool[2] = 1\nfor i in range(3,10**5+4,2):\n\tisPrime = True\n\tfor j in range(len(primes)):\n\t\tif(primes[j]**2 > i):\n\t\t\tbreak\n\t\tif(i % primes[j] == 0):\n\t\t\tisPrime = False\n\t\t\tbreak\n\tif(isPrime):\n\t\tprimes.append(i)\n\t\tprimes_bool[i] = 1\n\n\nif(n <= 2):\n\tprint(1)\nelse:\n\tprint(2)\n\nprint(*primes_bool[2:(n+2)])", "last = 1\nn = int(input())\narr = [1]*(n + 2)\nfor i in range(2, n + 2):\n    if arr[i] != 1:\n        continue\n    for j in range(2*i, n + 2, i):\n        if arr[j] == arr[i]:\n            arr[j] += 1\n            last = max(last, arr[j])\nprint(last)\nprint(\" \".join(map(str, arr[2:])))\n", "import math\n\ndef eratosthenes(n):\n\tis_composite = [False for _ in range(n+1)]\n\tis_composite[0] = is_composite[1] = True\n\n\tb = math.floor(math.sqrt(n)) + 1\n\n\tfor p in range(2, b+1):\n\t\tif is_composite[p]:\n\t\t\tcontinue\n\n\t\tx = 2*p\n\t\twhile x <= n:\n\t\t\tis_composite[x] = True\n\t\t\tx += p\n\n\treturn is_composite\n\t#return [k for k in range(2, n+1) if not is_composite[k]]\n\nn = int(input())\nis_composite = eratosthenes(n+1)\n\nif n >= 3:\n\tprint(2)\nelse:\n\tprint(1)\n\nprint(*(1 if not is_composite[k] else 2 for k in range(2, n+2)))\n\n\n", "n = int(input())\n\nr = [1 for i in range(n+2)]\n\nfor i in range(2, n+2):\n    if r[i] == 1:\n        for j in range(i*i, n+2, i):\n            r[j] = 2\nif n < 3:\n    print(1)\nelse:\n    print(2)\nprint(*r[2:])\n", "n=int(input())\nans=[1 for _ in range(n+2)]\nfor i in range(2,int(n**0.5)+2):\n    if ans[i]==2: continue\n    for j in range(i*2,n+2,i):\n        ans[j]=2\nprint(len(set(ans)))\nprint(*ans[2:])", "import sys\n\nfin = sys.stdin\nfout = sys.stdout\nn = int(fin.readline())\ncolors = [1] * n\nallCount = 1\nfor i in range(2, n + 2):\n    if colors[i - 2] == 1 and i * i <= n + 1:\n        allCount += 1\n        for j in range(i * i, n + 2, i):\n            colors[j - 2] = 2\nfout.write(str(max(colors)) + '\\n')\nfout.write(' '.join(map(str, colors)))\n", "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    n = int(input())\n\n    if n <= 2:\n        k = 1\n        ans = [1]*n\n        print(k)\n        print(*ans)\n    else:\n        k = 2\n        ans = color(n)\n        print(k)\n        print(*ans)\n\ndef color(n):\n    res = [1] * (n + 2) # 0, 1, 2, 3, ..., n + 1\n    for p in range(2, n + 2):\n        if res[p] != 1:\n            continue\n        for q in range(p*p, n + 2, p):\n            res[q] = 2\n\n    # debug(res, locals())\n\n    return res[2:]\n\ndef __starting_point():\n    solve()\n__starting_point()", "from math import sqrt\n\ndef prime(a):\n    if a < 2: return False\n    for x in range(2, int(sqrt(a)) + 1):\n        if a % x == 0:\n            return False\n    return True\n\nprime_lst = []\nn = int(input())\n\nif n < 3:\n    print(1)\nelse:\n    print(2)\nfor i in range(2, n+2):\n    if prime(i):\n        print(1, end=\" \")\n    else:\n        print(2, end=\" \")\n", "n = int(input())+2\n\nprime = [i%2 for i in range(n)]\nprime[1] = 0\nprime[2] = 1\nfor p in range(3, int(n**0.5)+2, 2):\n    if not prime[p]:\n        continue\n    for q in range(p*p, n, p+p):\n        prime[q] = 0\n\nl = [2-x for x in prime[2:]]\nprint(max(l))\nprint(\" \".join(map(str, l)))\n", "def primes_upto(limit):\n    num_list = [1 for i in range(0, limit + 1)]\n    ctr = 2\n    is_prime = [True]*(limit+1)\n    for n in range(2, int(limit**0.5) + 1): # stop at ``sqrt(limit)``\n        if is_prime[n]:\n            for i in range(n*n, limit + 1, n):\n                is_prime[i] = False\n                num_list[i] = ctr\n    del num_list[0]\n    del num_list[1]\n    return num_list\n\n\ndef main():\n    jewels = int(input())\n    result = primes_upto(jewels + 1)\n    print(len(set(result)))\n    for i in result:\n        print(i, end=' ')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def dfs(v, col):\n    used[v] = col\n    for u in g[v]:\n        if used[u] == -1:\n            dfs(u, col ^ 1)\n\nn = int(input())\nused = [1 for i in range(n)]\nfor i in range(2, n + 2):\n    if used[i - 2] == 1:\n        for j in range(i * i, n + 2, i):\n            used[j - 2] = 2\nprint(max(used))\nprint(*used)\n", "import sys\nn = int(input())\ncol = [1 for i in range(n+2)]\ncurprime = 1\nans = 0\nif n <= 2:\n    print(1)\n    for i in range(n):\n        print(1, end = ' ')\n    return\nwhile True:\n    prime = curprime + 1;\n    while  prime <= n + 1  and col[prime] == 2:\n        prime += 1\n    if prime >= n + 1:\n        break;\n    for i in range(prime + prime,n + 2,prime):\n        col[i] = 2\n    curprime = prime\nprint(2)\nfor i in range(2, n  + 2):\n    print(col[i], end = ' ')", "n = int(input())\nprizes = [1 for i in range(n)]\nfor j in range(int(n**(1/2))):\n    if prizes[j] == 1:\n        for i in range(2*j+2, n, j+2):\n            prizes[i] = 2\nif n > 2:\n    print(2)\nelse:\n    print(1)\nfor num in prizes:\n    print(num, end=' ')", "n = int(input())\nres = 1\n\npiece = [1 for i in range(n+2)]\nfor i in range(2, n+2):\n    if piece[i] != 1:\n        continue\n    for j in range(i+i, n+2, i):\n        piece[j] = 2\n\nfor p in piece:\n   res = max(p, res)\nprint(res)\nprint(\" \".join(map(str, piece[2:])))\n", "def main():\n    n = int(input())\n\n    if n == 1:\n        print(\"1\")\n        print(\"1\")\n        return\n    elif n == 2:\n        print(\"1\")\n        print(\"1 1\")\n        return\n    elif n == 3:\n        print(\"2\")\n        print(\"1 1 2\")\n        return\n    else:\n        numbers = [True] * (n+3)\n        for prime in range(2, n+3):\n            for i in range(2 * prime, n+3, prime):\n                numbers[i] = False\n\n        print(2)\n        print(\" \".join([str(1) if numbers[i+2] else str(2) for i in range(n)]))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "\ndef isprime(n):\n    '''check if integer n is a prime'''\n    # make sure n is a positive integer\n    n = abs(int(n))\n    # 0 and 1 are not primes\n    if n < 2:\n        return False\n    # 2 is the only even prime number\n    if n == 2: \n        return True    \n    # all other even numbers are not primes\n    if not n & 1: \n        return False\n    # range starts with 3 and only needs to go up the squareroot of n\n    # for all odd numbers\n    for x in range(3, int(n**0.5)+1, 2):\n        if n % x == 0:\n            return False\n    return True\n\ndef main():\n\tn=int(input())\n\tif n==1:\n\t\tprint('1\\n1')\n\telif n==2:\n\t\tprint('1\\n1 1')\n\t\t# //fkdjfk\n\telse:\n\t\tcnt=1\n\t\tans=[]\n\t\tfor i in range(1,n+1):\n\t\t\tif isprime(i+1):\n\t\t\t\tans.append(1)\n\t\t\telse:\n\t\t\t\tans.append(2)\n\t\t\t\tcnt=2\n\t\tprint(cnt)\n\t\tfor i in ans:\n\t\t\tprint(i,end=' ')\n\t\tprint('\\n')\n\ndef __starting_point():\n\tmain()\n\n\n__starting_point()", "def is_prime(x):\n    i = 2\n    while i * i <= x:\n        if x % i == 0:\n            return False\n        i += 1\n    return True\n\nn = int(input())\nans = []\nfor i in range(2, n+2):\n    if is_prime(i):\n        ans.append(1)\n    else:\n        ans.append(2)\nif n == 1:\n    print(1)\n    print(1)\nelif n == 2:\n    print(1)\n    print(1, 1)\nelse:\n    print(2)\n    print(\" \".join(str(num) for num in ans))\n", "n = int(input())\nprime = [True]*(n+2)\nprime[0] = prime[1] = False\nfor m in range(2,n+2):\n    if prime[m]:\n        for i in range(2*m,n+2,m):\n            prime[i] = False\nprint('2' if n>2 else '1')\ncolors = ['1' if prime[m] else '2' for m in range(2, n+2)]\nprint(' '.join(colors))\n"]