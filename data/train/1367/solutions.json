["from sys import stdin,stdout\n\n\n\n\ntotal_cost=0\ndef find(a):\n if par[a]==a:\n  return a\n else:\n  par[a]=find(par[a])\n  return par[a]\ndef union(a,b,c):\n a,b=find(a),find(b)\n nonlocal total_cost\n total_cost+=(rank[a]*rank[b]*c)\n if a!=b:\n  if rank[a]>rank[b]:\n   par[b]=a\n   rank[a]+=rank[b]\n  elif rank[b]>rank[a]:\n   par[a]=b\n   rank[b]+=rank[a]\n  else:\n   par[a]=b;\n   rank[b]+=rank[a]\n\nn=int(stdin.readline().strip())\npar=[i for i in range(n)]\nrank=[1 for i in range(n)]\nedges=[]\nfor i in range(n-1):\n u,v,c=stdin.readline().strip().split(' ')\n u,v,c=int(u)-1,int(v)-1,int(c)\n edges.append((c,u,v))\nedges.sort()\ntw=0\nfor i in edges:\n union(i[1],i[2],i[0])\n tw+=i[0]\n\nstdout.write(str(tw-(total_cost/((n*(n-1))/2))))", "# cook your dish here\nn = int(input())\nedges = []\nfor i in range(n-1):\n a, b, c = map(int, input().strip().split())\n edges.append((c, a-1, b-1))\nedges.sort()\n\nparent = [-1]*n\ndef find(n):\n if parent[n] < 0:\n  return n\n else:\n  pt = find(parent[n])\n  parent[n] = pt\n  return pt\n\ntotal = 0\nnum = 0\nden = 0\nfor c, a, b in edges:\n a = find(a)\n b = find(b)\n assert a != b\n total += c\n num += parent[a] * parent[b] * c\n den += parent[a] * parent[b]\n if parent[a] > parent[b]:\n  parent[b] += parent[a]\n  parent[a] = b\n else:\n  parent[a] += parent[b]\n  parent[b] = a\n\nprint(\"%.11f\" % (total - num / den))", "from sys import stdin,stdout\n\n\n\n\ntotal_cost=0\ndef find(a):\n if par[a]==a:\n  return a\n else:\n  par[a]=find(par[a])\n  return par[a]\ndef union(a,b,c):\n a,b=find(a),find(b)\n nonlocal total_cost\n total_cost+=(rank[a]*rank[b]*c)\n if a!=b:\n  if rank[a]>rank[b]:\n   par[b]=a\n   rank[a]+=rank[b]\n  elif rank[b]>rank[a]:\n   par[a]=b\n   rank[b]+=rank[a]\n  else:\n   par[a]=b;\n   rank[b]+=rank[a]\n\nn=int(stdin.readline().strip())\npar=[i for i in range(n)]\nrank=[1 for i in range(n)]\nedges=[]\nfor i in range(n-1):\n u,v,c=stdin.readline().strip().split(' ')\n u,v,c=int(u)-1,int(v)-1,int(c)\n edges.append((c,u,v))\nedges.sort()\ntw=0\nfor i in edges:\n union(i[1],i[2],i[0])\n tw+=i[0]\n\nstdout.write(str(tw-(total_cost/((n*(n-1))/2))))", "# cook your dish here\n\ndef find(n):\n if parent[n] != n:\n  parent[n] = find(parent[n])\n return parent[n] \n\ndef merge(a, b):\n a, b = find(a), find(b)\n if rank[a] > rank[b]:\n  parent[b] = a\n  size[a] += size[b]\n else:\n  parent[a] = b\n  size[b] += size[a]\n  if rank[a] == rank[b]:\n   rank[b] += 1\n\nn = int(input())\nsize = {}\nrank = {}\nparent = {}\nedges = []\n\nfor i in range(n):\n size[i] = 1\n parent[i] = i\n rank[i] = 1\n\nfor i in range(n - 1):\n a, b, c = list(map(int, input().split()))\n a -= 1\n b -= 1\n edges.append([c, a, b])\nedges.sort()\n\nS = T = C = 0\nfor c, a, b in edges:\n a = find(a)\n b = find(b)\n\n # update values\n S += size[a] * size[b] * c\n T += size[a] * size[b]\n C += c\n \n merge(a, b)\n\nprint(C - (S/T))\n \n \n \n \n", "n = int(input())\nsize = {}\nparent = {}\n\nfor i in range(1,n+1):\n size[i] = 1\n parent[i] = i\n\ndef find(a):\n if parent[a]==a:\n  return a\n parent[a] = find(parent[a])\n return parent[a]\n\nedges = []\n\nfor i in range(n-1):\n edges.append(list(map(int,input().split())))\n\nedges.sort(key = lambda x:x[2])\n\nc = 0\ns = 0\nt = 0\n\nfor i in range(n-1):\n a = find(edges[i][0])\n b = find(edges[i][1])\n c += edges[i][2]\n s += size[a]*size[b]*edges[i][2]\n t += size[a]*size[b]\n if size[a]>size[b]:\n  size[a] += size[b]\n  parent[b] = a\n else:\n  size[b] += size[a]\n  parent[a] = b\n\nprint(\"%.6f\" % (c - float(s)/t))\n"]