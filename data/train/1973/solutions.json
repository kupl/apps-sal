["class Solution:\n     def isIdealPermutation(self, A):\n         \"\"\"\n         :type A: List[int]\n         :rtype: bool\n         \"\"\"\n         # tle\n         # for i in range(len(A)-2):\n             # if A[i] > min(A[i+2:]):\n                 # return False\n         # return True\n                 \n         # ac\n         for i in range(len(A)):\n             if abs(A[i] - i) > 1:\n                 return False\n         return True", "'''\n # Brute Force\n class Solution:\n     def isIdealPermutation(self, A):\n         \"\"\"\n         :type A: List[int]\n         :rtype: bool\n         \"\"\"\n         countGlobal = 0\n         countLocal = 0\n         for i in range(len(A)):\n             for j in range(i+1, len(A)):\n                 if A[i] > A[j]:\n                     countGlobal += 1\n         \n         for i in range(len(A)-1):\n             if  A[i] > A[i+1]:\n                 countLocal += 1\n         \n         if countLocal == countGlobal:\n             return True\n         else:\n             return False\n '''     \n class Solution:\n     def isIdealPermutation(self, A):\n         for i in range(len(A)):\n             if abs(A[i]-i) >= 2:\n                 return False\n         return True\n         ", "class Solution:\n     def isIdealPermutation(self, A):\n         for i in range(len(A)):\n             if abs(A[i] - i) > 1:\n                 return False\n         return True", "class Solution:\n     def isIdealPermutation(self, A):\n         \"\"\"\n         :type A: List[int]\n         :rtype: bool\n         \"\"\"\n         \n         l=[]\n         [1,0,3,2]\n         # ix=0\n         # while ix<len(A)-1:\n         #     if A[ix]>A[ix+1]:\n         #         l.append(A[ix])\n         #         ix+=2\n         #         if A[ix]<l[-1]:return False\n         #     else:\n         #         ix+=1\n         # return True\n         if len(A)==1:return True\n         for i in range(len(A)):\n             if abs(A[i]-i)>1:return False\n         return True", "class Solution:\n     def isIdealPermutation(self, A):\n         \"\"\"\n         :type A: List[int]\n         :rtype: bool\n         \"\"\"\n         max_value = A[0]\n         for i in range(1,len(A)-1):\n             if A[i+1] < max_value:\n                 return False\n             if A[i] > max_value:\n                 max_value = A[i]\n         else:\n             return True\n         # local_count = 0\n         # global_count = 0\n         # for i in range(len(A)-1):\n         #     if A[i] > A[i+1]:\n         #         local_count += 1\n         #     for j in range(len(A)):\n         #         if A[i] > A[j] and i < j:\n         #             global_count += 1\n         # return local_count == global_count\n", "class Solution:\n     def isIdealPermutation(self, A):\n         \"\"\"\n         :type A: List[int]\n         :rtype: bool\n         \"\"\"\n         return all(abs(v-i)<=1 for i,v in enumerate(A)) #\u6709\u610f\u601d \u5176\u4e2d\u7684\u539f\u7406\u66f4\u6709\u610f\u601d", "class Solution:\n     def isIdealPermutation(self, A):\n         i = 0\n         while i < len(A) - 1:\n             if A[i] == i:\n                 i += 1\n             elif A[i] == i + 1 and A[i+1] == i:\n                 i += 2\n             else:\n                 return False\n         return True\n"]