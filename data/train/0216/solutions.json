["class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        # valid string? can be seperated into full croaks:\n        ### dict of letters. c, r, o, a, k should all be equal, nothing else in\n        if len(croakOfFrogs)%5!=0 or croakOfFrogs[0]!='c' or croakOfFrogs[-1]!='k':\n            return -1\n        \n        letters = {\n            'c': 0,\n            'r': 0,\n            'o': 0,\n            'a': 0,\n            'k': 0\n        }\n        \n        frogs = 0\n        temp = 0\n        \n        for l in croakOfFrogs:\n            letters[l] += 1\n            temp = letters['c'] - letters['k']\n            if temp > frogs:\n                frogs = temp\n                \n               \n        c_count = letters['c']\n        for letter in letters:\n            if letters[letter] != c_count:\n                return -1\n            \n        return frogs", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        croaks = {'c':[], 'r':[], 'o':[], 'a':[]}\n        nfrogs = 0\n        icroak = 0\n        curfrogs = 0\n        for sound in croakOfFrogs:\n            if sound == 'c':\n                icroak += 1\n                croaks['c'].append(icroak)\n                curfrogs += 1\n                nfrogs = max(curfrogs, nfrogs)\n            elif sound == 'r':\n                if croaks['c']:\n                    croaks['r'].append(croaks['c'].pop())\n                else:\n                    return -1\n            elif sound == 'o':\n                if croaks['r']:\n                    croaks['o'].append(croaks['r'].pop())\n                else:\n                    return -1\n            elif sound == 'a':\n                if croaks['o']:\n                    croaks['a'].append(croaks['o'].pop())\n                else:\n                    return -1\n            elif sound == 'k':\n                if croaks['a']:\n                    croaks['a'].pop()\n                    curfrogs -= 1\n                else:\n                    return -1\n            else:\n                return -1\n        \n        for sound in croaks:\n            if croaks[sound] != []:\n                return -1\n        \n        return nfrogs\n                \n", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        croaks = {'c':[], 'r':[], 'o':[], 'a':[]}\n        maxfrogs = 0\n        i_croak = 0\n        nfrogs = 0\n        for sound in croakOfFrogs:\n            if sound == 'c':\n                i_croak += 1\n                croaks['c'].append(i_croak)\n                nfrogs += 1\n                maxfrogs = max(nfrogs, maxfrogs)\n            elif sound == 'r':\n                if croaks['c']:\n                    croaks['r'].append(croaks['c'].pop())\n                else:\n                    return -1\n            elif sound == 'o':\n                if croaks['r']:\n                    croaks['o'].append(croaks['r'].pop())\n                else:\n                    return -1\n            elif sound == 'a':\n                if croaks['o']:\n                    croaks['a'].append(croaks['o'].pop())\n                else:\n                    return -1\n            elif sound == 'k':\n                if croaks['a']:\n                    croaks['a'].pop()\n                    nfrogs -= 1\n                else:\n                    return -1\n            else:\n                return -1\n        \n        for sound in croaks:\n            if croaks[sound] != []:\n                return -1\n        \n        return maxfrogs\n                \n", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        ans = 1\n        waitingFor = defaultdict(int)\n        croak = 'croak'\n        croakDict= {'c': 0, 'r': 1, 'o': 2, 'a': 3, 'k': 4}\n        \n        # waitingFor['c'] = 0\n        for char in croakOfFrogs:\n            if char == 'c':\n                if waitingFor[char] != 0 and ans <= waitingFor[char]:\n                    ans += 1\n                waitingFor[char] += 1\n                waitingFor[croak[croakDict[char]+1]] += 1\n            else:\n                if waitingFor[char] == 0:\n                    return -1\n                waitingFor[char] -= 1\n                if char != 'k':\n                    waitingFor[croak[croakDict[char]+1]] += 1\n                else:\n                    waitingFor['c'] -= 1\n        # print(waitingFor)\n        for char in waitingFor:\n            if waitingFor[char] != 0:\n                return -1\n        return ans", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        if len(croakOfFrogs)%5!=0 or croakOfFrogs[0]!='c' or croakOfFrogs[-1]!='k':\n            return -1\n\n        max_frog_croak = 0\n        present_frog_croak = 0\n\n        d={}\n        d['c']=0\n        d['r']=0\n        d['o']=0\n        d['a']=0\n        d['k']=0\n\n        for ch in croakOfFrogs:\n            d[ch]+=1\n            if ch=='c':\n                present_frog_croak+=1\n            if ch=='k':\n                present_frog_croak-=1\n\n            max_frog_croak = max(max_frog_croak,present_frog_croak)\n\n\n        if d['c']!=d['r'] or d['r']!=d['o'] or d['o']!=d['a'] or d['a']!=d['k']:\n            return -1\n\n        return max_frog_croak\n", "class Solution:\n    def minNumberOfFrogs(self, croak: str) -> int:\n        if len(croak) == 0:\n            return 0\n        if croak[0] != 'c':\n            return -1\n        if len(croak) % 5 != 0:\n            return -1\n        arr = [0 for _ in range(6)]\n        arr[0] = 9999999\n        index = {'c':1, 'r':2, 'o':3, 'a':4, 'k':5}\n        \n        for letter in croak:\n            i = index[letter]            \n            if arr[i-1] > 0:\n                if i == 1 and arr[5]:\n                    arr[5] -= 1\n                arr[i-1] -= 1\n                arr[i] += 1\n            else:\n                return -1\n        for i in arr[1:-1]:\n            if i != 0:\n                return -1\n        return arr[-1]", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        chr_c, chr_r, chr_o, chr_a = 0, 0, 0, 0\n        count = 0\n        for s in croakOfFrogs:\n            if s == 'c':\n                chr_c += 1\n            elif s == 'r':\n                if chr_c <= 0:\n                    return -1\n                chr_c -= 1\n                chr_r += 1\n            elif s == 'o':\n                if chr_r <= 0:\n                    return -1\n                chr_r -= 1\n                chr_o += 1\n            elif s == 'a':\n                if chr_o <= 0:\n                    return -1\n                chr_o -= 1\n                chr_a += 1\n            else:\n                if chr_a <= 0:\n                    return -1\n                chr_a -= 1\n            count = max(count, chr_c + chr_r + chr_o + chr_a)\n        # \u6ca1\u6709\u5531\u5b8c\u6574\u4e94\u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u5fc5\u7136\u4f1a\u5927\u4e8e0\n        if chr_c + chr_r + chr_o + chr_a > 0:\n            return -1\n        return count", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        # valid string? can be seperated into full croaks:\n        ### dict of letters. c, r, o, a, k should all be equal, nothing else in\n        if len(croakOfFrogs)%5!=0 or croakOfFrogs[0]!='c' or croakOfFrogs[-1]!='k':\n            return -1\n        \n        letters = {\n            'c': 0,\n            'r': 0,\n            'o': 0,\n            'a': 0,\n            'k': 0\n        }\n        \n        frogs = 0\n        temp = 0\n        \n        for l in croakOfFrogs:\n            letters[l] += 1\n            temp = letters['c'] - letters['k']\n            if temp > frogs:\n                frogs = temp\n                \n               \n        c_count = letters['c']\n        for letter in letters:\n            if letters[letter] != c_count:\n                return -1\n            \n        return frogs\n", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        curr=0\n        maxcurr=0\n        c=r=o=a=k=0\n        for i in croakOfFrogs:\n            if i=='c':\n                c+=1\n                curr+=1\n            elif i=='r':\n                r+=1\n            elif i=='o':\n                o+=1\n            elif i=='a':\n                a+=1\n            else:\n                k+=1\n                curr-=1\n            maxcurr=max(curr,maxcurr)\n            if c<r or r<o or o<a or a<k:\n                return -1\n        if curr==0 and c==r and r==o and o==a and a==k:\n            return maxcurr\n        return -1", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        if len(croakOfFrogs)%5!=0 or croakOfFrogs[0]!='c' or croakOfFrogs[-1]!='k':\n            return -1\n\n        max_frog_croak = 0\n        present_frog_croak = 0\n\n        d={}\n        d['c']=0\n        d['r']=0\n        d['o']=0\n        d['a']=0\n        d['k']=0\n\n        for ch in croakOfFrogs:\n            d[ch]+=1\n            if ch=='c':\n                present_frog_croak+=1\n            if ch=='k':\n                present_frog_croak-=1\n\n            max_frog_croak = max(max_frog_croak,present_frog_croak)\n\n\n        if d['c']!=d['r'] or d['r']!=d['o'] or d['o']!=d['a'] or d['a']!=d['k']:\n            return -1\n\n        return max_frog_croak", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        neighcount = [0,0,0,0,0]\n        minhorses = 0\n        nstarted = 0\n        nended = 0\n        \n        for s in croakOfFrogs:\n            if s == 'c':\n                neighcount[0] += 1\n                nstarted += 1\n            elif s == 'r':\n                neighcount[1] += 1\n                neighcount[0] -= 1\n            elif s == 'o':\n                neighcount[2] += 1\n                neighcount[1] -= 1\n            elif s == 'a':\n                neighcount[3] += 1\n                neighcount[2] -= 1\n            elif s == 'k':\n                neighcount[4] += 1\n                neighcount[3] -= 1\n                nstarted -= 1\n            else:\n                return -1\n            if nstarted > minhorses:\n                minhorses = nstarted\n            if neighcount[0] < 0 or neighcount[1] < 0 or neighcount[2] < 0 or neighcount[3] < 0:\n                return -1\n        if neighcount[0] == 0 and neighcount[1] == 0 and neighcount[2] == 0 and neighcount[3] == 0:\n            return minhorses\n        else:\n            return -1\n        \n        \n        \n", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        if not len(croakOfFrogs): return 0\n        \n        c = 0\n        r = 0\n        o = 0\n        a = 0\n        k = 0\n        count = 0\n        \n        for ch in croakOfFrogs:\n            \n            if ch == 'c':\n                count += 1\n                c += 1\n                \n            elif ch == 'r':\n                if not c:\n                    return -1\n                c -= 1\n                r += 1\n                \n                \n            elif ch == 'o':\n                if not r:\n                    return -1\n                r -= 1\n                o += 1\n                \n                \n            elif ch == 'a':\n                if not o:\n                    return -1\n                o -= 1\n                a += 1\n                \n                \n            elif ch == 'k':\n                if not a:\n                    return -1\n                a -= 1\n            \n                k = max(k, count)\n                count -= 1\n                \n                    \n            else:\n                return -1\n            \n        if not c and not r and not o and not a:\n            return k\n        else:\n            return -1", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        # print(len(croakOfFrogs))\n        if len(croakOfFrogs) % 5 > 0:\n            return -1\n        pos = {'c': 0, 'r': 1, 'o': 2, 'a': 3, 'k': 4}\n        count = [0]*5\n        res = 1\n        for c in croakOfFrogs:\n            count[pos[c]] += 1\n            # print(count)\n            if pos[c] > 0:\n                if count[pos[c]] > count[pos[c]-1]:\n                    return -1\n            if pos[c] == 4:\n                for i in range(5):\n                    count[i] -= 1\n            elif pos[c] == 0:\n                res = max(res, count[0])\n        for i in range(4):\n            if count[i+1] != count[i]:\n                return -1\n        return res", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        frogs, d = [], {c: [] for c in 'croak'}\n        for c in croakOfFrogs:\n            bucket = 'croak'['croak'.find(c)-1]\n            if not d[bucket]:\n                if bucket != 'k': return -1\n                frogs.append([])\n                d[c].append(len(frogs) - 1)\n            else:\n                d[c].append(d[bucket].pop())\n                if c == 'c':\n                    frogs[d[c][-1]].clear()\n            frogs[d[c][-1]].append(c)\n        return len(frogs) if all(len(frog) == 5 for frog in frogs) else -1\n", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        \n        r = 0\n        o = 0\n        a = 0\n        k = 0\n        \n        frogs = 0\n        max_frogs = 0\n        for L in croakOfFrogs:\n            \n            if L == 'c':\n                frogs += 1\n                max_frogs = max(max_frogs, frogs)\n                r += 1\n                \n            elif L == 'r':\n                if r == 0:\n                    return -1\n                else:\n                    r -= 1\n                    o += 1\n            \n            elif L == 'o':\n                if o == 0:\n                    return -1\n                else:\n                    o -= 1\n                    a += 1\n                    \n            elif L == 'a':\n                if a == 0:\n                    return -1\n                else:\n                    a -= 1\n                    k += 1\n            \n            else:\n                if k == 0:\n                    return -1\n                else:\n                    k -= 1\n                    frogs -= 1\n                    \n        if r + o + a + k != 0:\n            return -1\n        \n        return max_frogs\n                \n", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        if len(croakOfFrogs) % 5 != 0:\n            return -1\n        \n        min_val = 0\n        cnt = {char: 0 for char in 'croak'}\n        for char in croakOfFrogs:\n            if char not in 'croak' or not cnt['c'] >= cnt['r'] >= cnt['o'] >= cnt['a'] >= cnt['k']:\n                return -1\n            cnt[char] += 1\n            \n            min_val = max(min_val, cnt['c'] - cnt['k'])\n            \n        return min_val if cnt['c'] == cnt['r'] == cnt['o'] == cnt['a'] == cnt['k'] else -1", "class Solution:\n#     def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n#         neighcount = [0,0,0,0,0]\n#         minhorses = 0\n#         nstarted = 0\n#         nended = 0\n        \n#         for s in croakOfFrogs:\n#             if s == 'c':\n#                 neighcount[0] += 1\n#                 nstarted += 1\n#             elif s == 'r':\n#                 neighcount[1] += 1\n#                 neighcount[0] -= 1\n#                 if neighcount[0] < 0:\n#                     return -1\n#             elif s == 'o':\n#                 neighcount[2] += 1\n#                 neighcount[1] -= 1\n#                 if neighcount[1] < 0:\n#                     return -1\n#             elif s == 'a':\n#                 neighcount[3] += 1\n#                 neighcount[2] -= 1\n#                 if neighcount[2] < 0:\n#                     return -1\n#             elif s == 'k':\n#                 neighcount[4] += 1\n#                 neighcount[3] -= 1\n#                 nstarted -= 1\n#                 if neighcount[3] < 0:\n#                     return -1                \n#             else:\n#                 return -1\n#             if nstarted > minhorses:\n#                 minhorses = nstarted\n#         neighcount[4] = 0\n#         if max(neighcount) == 0:\n#             return minhorses\n#         else:\n#             return -1\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n\n        if len(croakOfFrogs)%5!=0 or croakOfFrogs[0]!='c' or croakOfFrogs[-1]!='k':\n                return -1\n    \n        max_frog_croak = 0\n        present_frog_croak = 0\n\n        d={}\n        d['c']=0\n        d['r']=0\n        d['o']=0\n        d['a']=0\n        d['k']=0\n\n        for ch in croakOfFrogs:\n            d[ch]+=1\n            if ch=='c':\n                present_frog_croak+=1\n            if ch=='k':\n                present_frog_croak-=1\n\n            max_frog_croak = max(max_frog_croak,present_frog_croak)\n\n\n        if d['c']!=d['r'] or d['r']!=d['o'] or d['o']!=d['a'] or d['a']!=d['k']:\n            return -1\n\n        return max_frog_croak        \n        \n        \n", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n\n        if len(croakOfFrogs) % 5 != 0:\n            return -1\n        nums = [0] * 5\n        \n        dic = {'c': 0, 'r': 1, 'o':2, 'a': 3, 'k' : 4}\n        res = 1\n        for ch in croakOfFrogs:\n            if dic[ch] != 0 and nums[dic[ch]] >= nums[dic[ch] - 1]:\n                return -1\n            \n            nums[dic[ch]] += 1\n            res = max(res, nums[0])\n            if ch == 'k':\n                for i in range(5):\n                    nums[i] -= 1        \n        \n            \n        return res", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        c, r, o, a, k, in_use, answer = 0, 0, 0, 0, 0, 0, 0\n        for d in croakOfFrogs:\n            if d == 'c':\n                c, in_use = c+1, in_use+1\n            elif d == 'r':\n                r += 1\n            elif d == 'o':\n                o += 1\n            elif d == 'a':\n                a += 1\n            else:\n                k, in_use = k+1, in_use-1\n                \n            answer = max(answer, in_use)\n            \n            if c < r or r < o or o < a or a < k:\n                return -1\n            \n        if in_use == 0 and c == r and r == o and o == a and a == k:\n            return answer\n        \n        return -1", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        \n        arr = [0] * 5 \n\n        for item in croakOfFrogs:\n            \n            if item == 'c':\n                arr[0] += 1\n            \n            elif item == 'r':\n                arr[1] += 1\n                for i in range(0, 1):\n                    if arr[i] < arr[1]:\n                        return -1\n            \n            elif item == 'o':\n                arr[2] += 1\n                for i in range(0, 1):\n                    if arr[i] < arr[2]:\n                        return -1\n            \n            elif item == 'a':\n                arr[3] += 1\n                for i in range(0, 1):\n                    if arr[i] < arr[3]:\n                        return -1\n\n            else:\n                arr[4] += 1\n                for i in range(0, 1):\n                    if arr[i] < arr[4]:\n                        return -1\n        \n        cur = arr[0]\n        \n        for i in range(1, 5):\n            if arr[i] != cur:\n                return -1\n            \n        ''' At this point there is a valid string '''\n        cur_frogs = 0\n        \n        result = float('-inf')\n        p = 0\n        \n        while p < len(croakOfFrogs):\n            \n            if croakOfFrogs[p] == 'c':\n                cur_frogs += 1\n            \n            elif croakOfFrogs[p] == 'k':\n                cur_frogs -= 1\n            \n            result = max(cur_frogs, result)\n            p += 1\n        \n        return result\n            \n            \n            \n            \n            \n", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        \n        dic = {'c': 0, 'r': 1, 'o': 2, 'a': 3, 'k': 4}\n        num = 0\n        num_c = 0\n        num_k = 0\n        \n        freq = [0] * 5\n        \n        if not croakOfFrogs[0] == 'c': return -1\n        \n        # count the number of c before the first k shows up\n        \n        for ch in croakOfFrogs:\n            if 'c' == ch: \n                if num_k == 0: num_c += 1\n                else: num_k -= 1\n                num = max(num_c, num)\n            if 'k' == ch: num_k += 1 \n                \n        # check validation\n        for ch in croakOfFrogs:\n            freq[dic[ch]] += 1\n            \n            for idx in range(1, 5):\n                if freq[idx] > freq[idx - 1]: return -1\n        \n        for idx in range(1, 5):\n            if not freq[idx] == freq[idx-1]: return -1\n        \n        return num\n        \n        \n        \n        \n", "class Solution:\n    def minNumberOfFrogs(self, s: str) -> int:\n        rec = defaultdict(int)\n        count = 0\n        \n        if not s.startswith('c') or not s.endswith('k'): return -1\n        \n        for i in range(len(s)):\n            if rec['c']>=rec['r']>=rec['o']>=rec['a']>=rec['k']:\n                rec[s[i]] += 1\n                if count < rec['c']: count += 1\n                if s[i] == 'k':\n                    for k in rec:\n                        rec[k] -= 1\n            else:\n                return -1\n        return count\n    \n    \n#         frog_counter = 0  # To count the minimum no. of frogs croaking\n#         crk_dict = {'c':0,'r':0,'o':0,'a':0,'k':0} # create dictionary initializing the values to 0\n        \n#         # The string must always start with 'c'\n#         if croakOfFrogs[0] != 'c':\n#             return (-1)\n        \n#         # The string must always end with 'k'\n#         elif croakOfFrogs[-1] != 'k':\n#             return (-1)\n        \n#         else:\n#             for i in range(len(croakOfFrogs)):\n#                 # As the craok always start with c and the characters are sequential always the count of each of the char should greater than or equal to the next char of string 'craok'\n#                 if crk_dict['c'] >= crk_dict['r'] >= crk_dict['o'] >= crk_dict['a'] >= crk_dict['k']:\n                    \n#                     crk_dict[croakOfFrogs[i]] += 1\n                    \n#                     # if 'c' is encountered in string before the completion of croak, that mean it is the other frog, hence add 1 to the frog counter\n#                     if frog_counter < crk_dict['c']:\n#                         frog_counter += 1\n                        \n#                     # if the iterable gets 'k' that means the frog is free to croak again\n#                     if croakOfFrogs[i] == 'k':\n#                         for m in crk_dict:\n#                             crk_dict[m] -= 1\n#                 else:\n#                     return (-1)\n#             return frog_counter\n", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        croak = 'croak'\n        frogs = 0\n        openCroaks = list()\n        char2count = {'c':0, 'r':0, 'o':0, 'a':0, 'k':0}\n        \n        for char in croakOfFrogs:\n            if char not in croak:\n                return -1\n            if char == 'c':\n                char2count[char]+=1\n            elif char2count[croak[croak.find(char)-1]]>0:\n                char2count[croak[croak.find(char)-1]]-=1\n                if char!= 'k':\n                    char2count[char]+=1\n            \n            else:\n                return -1\n            frogs = max(frogs, sum(char2count.values()))\n        return frogs if sum(char2count.values())==0 else -1", "chars = ['c','r','o','a','k']\nC = len(chars)\ncs = set(chars)\nclass Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        N=len(croakOfFrogs)\n        if N==0: return 0\n        if N%5!=0: return -1\n        counter = Counter(croakOfFrogs)\n        if len(counter)!=5: return -1\n        totFreq=None\n        for c in counter:\n            if not totFreq:\n                totFreq==counter[c]\n            elif totFreq!=counter[c]:\n                return -1\n        dic = [0]* C\n        ans=0\n        for i in range(N):\n            c = croakOfFrogs[i]\n            if c not in cs:\n                return -1\n            if c == chars[0]:\n                for j in range(1,len(chars)):\n                    dic[j]+=1\n                ans=max(ans,dic[C-1])\n            else:\n                j = chars.index(c)\n                dic[j]-=1\n                prev = dic[j]\n                for k in range(j-1,-1,-1):\n                    if dic[k]>prev:\n                        return -1\n                    prev=dic[k]\n        return ans", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        \n        if len(croakOfFrogs) % 5 != 0:\n            return -1\n        \n        dic = {'c': 0, 'r': 1, 'o': 2, 'a':3, 'k':4}\n        numsCount = [0]*5\n        \n        max_val = numOfFrogs = 0\n        \n        for i in range(len(croakOfFrogs)):\n            \n            if croakOfFrogs[i] == 'c':\n                numOfFrogs +=1\n            # print(numOfFrogs)\n            if croakOfFrogs[i] == 'k':\n                numOfFrogs -=1\n            \n            max_val = max(numOfFrogs, max_val)\n            numsCount[dic[croakOfFrogs[i]]] += 1\n            \n            for j in range(0, 4):\n                if numsCount[j] < numsCount[j+1]:\n                    return -1\n        \n        \n        return max_val\n                \n            \n", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        frog_counter = 0  # To count the minimum no. of frogs croaking\n        crk_dict = {'c':0,'r':0,'o':0,'a':0,'k':0} # create dictionary initializing the values to 0\n        \n        # The string must always start with 'c'\n        if croakOfFrogs[0] != 'c':\n            return (-1)\n        \n        # The string must always end with 'k'\n        elif croakOfFrogs[-1] != 'k':\n            return (-1)\n        \n        else:\n            for i in range(len(croakOfFrogs)):\n                # As the craok always start with c and the characters are sequential always the count of each of the char should greater than or equal to the next char of string 'craok'\n                if crk_dict['c'] >= crk_dict['r'] >= crk_dict['o'] >= crk_dict['a'] >= crk_dict['k']:\n                    \n                    crk_dict[croakOfFrogs[i]] += 1\n                    \n                    # if 'c' is encountered in string before the completion of croak, that mean it is the other frog, hence add 1 to the frog counter\n                    if frog_counter < crk_dict['c']:\n                        frog_counter += 1\n                        \n                    # if the iterable gets 'k' that means the frog is free to croak again\n                    if croakOfFrogs[i] == 'k':\n                        for m in crk_dict:\n                            crk_dict[m] -= 1\n                else:\n                    return (-1)\n            return frog_counter", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        croak = 'croak'\n        croak_positions = {char: 0 for char in croak}\n        max_size = 0\n        completed = 0\n        for char in croakOfFrogs:\n            if char in croak_positions:\n                croak_positions[char] += 1\n            else:\n                return -1\n            for char, count in croak_positions.items():\n                if char != croak[0]:\n                    diff = croak_positions[croak[0]] - count\n                    if diff < 0:\n                        return -1\n                    if diff > max_size:\n                        max_size = diff\n        for char, count in croak_positions.items():\n            if count != croak_positions[croak[0]]:\n                return -1\n        return max_size", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        res = croaking = c = r = o = a = k = 0\n        for x in croakOfFrogs:\n            if x == 'c':\n                c, croaking = c+1, croaking+1\n                res = max(res, croaking)\n            elif x == 'r': r += 1\n            elif x == 'o': o += 1\n            elif x == 'a': a += 1\n            else: k, croaking = k+1, croaking-1\n            if c < r or r < o or o < a or a < k: return -1 \n        \n        return res if c == r == o == a == k and croaking == 0 else -1\n", "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        frogs, c, r, o, a, k = 0, 0, 0, 0, 0, 0\n        for char in croakOfFrogs:\n            if char == 'c':\n                c += 1\n                frogs = max(frogs, c - k)\n            elif char == 'r':\n                r += 1\n            elif char == 'o':\n                o += 1\n            elif char == 'a':\n                a += 1\n            elif char == 'k':\n                k += 1\n            else:\n                return -1\n            if not c >= r >= o >= a >= k:\n                return -1\n        if c == k:\n            return frogs\n        return -1"]