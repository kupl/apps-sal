["# \u7d20\u56e0\u6570\u5206\u89e3\ndef prime_decomposition(n):\n    i = 2\n    table = []\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n            table.append(i)\n        i += 1\n    if n > 1:\n        table.append(n)\n    return table\nimport sys\ninput = sys.stdin.readline\nN = int(input())\nA = list(map(int, input().split()))\n# \u304b\u3051\u3089\u3092\u79fb\u52d5\u3055\u305b\u3066\u5171\u901a\u56e0\u6570\u3092\u6301\u3064\u3088\u3046\u306b\u3059\u308b\nsu = sum(A)\nif su == 1:\n    print(-1)\n    return\nprimes = list(set(prime_decomposition(su)))\nans = float(\"inf\")\nIdx1 = [i for i, a in enumerate(A) if a]\n\nfor p in primes:\n    an = 0\n    half = p // 2\n    for t in zip(*[iter(Idx1)]*p):\n        idx = t[half]\n        an += sum(abs(i-idx) for i in t)\n    ans = min(ans, an)\nprint(ans)\n", "N = int(input())\nA = [int(a) for a in input().split()]\n\nX = [-1] * (N+1)\n\nk = 2\nwhile k <= N:\n    X[k] = 1\n    for i in range(k*2, N+1, k):\n        X[i] = 0\n    while k <= N and X[k] >= 0:\n        k += 1\nP = [i for i in range(N+1) if X[i] == 1]\n\n\ns = sum(A)\nL = []\nfor p in P:\n    if s % p == 0:\n        L.append(p)\n\nif len(L) == 0:\n    print(-1)\nelse:\n    mi = 1<<100\n    for m in L:\n        mm = m // 2\n        k = 0\n        ans = 0\n        # print(\"m, mm =\", m, mm)\n        for i in range(N):\n            # print(\"i, k =\", i, k)\n            if A[i]:\n                k = (k + 1) % m\n            if k <= mm:\n                ans += k\n            elif k == mm and A[i]:\n                pass\n            else:\n                ans += m - k\n            # print(\"ans =\", ans)\n        mi = min(mi, ans)\n    print(mi)\n\n\n", "import bisect\nimport sys\ninput = sys.stdin.readline\n\n\ndef make_prime_factors(n):\n    \"\"\"\u81ea\u7136\u6570n\u306e\u7d20\u56e0\u6570\u3092\u5217\u6319\u3057\u305f\u30ea\u30b9\u30c8\u3092\u51fa\u529b\u3059\u308b\n    \u8a08\u7b97\u91cf: O(sqrt(N))\n    \u5165\u51fa\u529b\u4f8b: 156 -> [2, 2, 3, 13]\n    \"\"\"\n    prime_factors = []\n    for k in range(2, int(n**0.5) + 1):\n        while n % k == 0:\n            prime_factors.append(k)\n            n = n // k\n    if n != 1:\n        prime_factors.append(n)\n    return prime_factors\n\n\nn = int(input())\na = list(map(int, input().split()))\n\nruiseki = [0] * (n+1)\nfor i in range(n):\n    ruiseki[i+1] = ruiseki[i] + a[i]\n    \nsum_a = 0\nfor i in range(n):\n    sum_a += a[i]\nli = make_prime_factors(sum_a)\n\ndef count(begin, end, num):\n    #print(ruiseki[begin+1:end+1])\n    #print(a[begin:end])\n    res = 0\n    l = bisect.bisect_left(ruiseki[begin+1:end+1], (ruiseki[begin+1]+ruiseki[end]+1)//2)\n    for i, num2 in enumerate(a[begin:end]):\n        if num2 == 1:\n            res += abs(i - l)\n    return res\n\nif sum_a == 1:\n    print(-1)\n    return\n\nans = 10**18\nfor num in li:\n    tmp_ans = 0\n    cnt = 0\n    begin = 0\n    end = 0\n    while True:\n        if end == n:\n            break\n        cnt += a[end]\n        if cnt == num:\n            tmp_ans += count(begin, end + 1, num)\n            begin = end + 1\n            end = begin\n            cnt = 0\n        else:\n            end += 1\n    ans = min(tmp_ans, ans)\nprint(ans)\n\n", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nA=list(map(int,input().split()))\n\nLIST=[]\nfor i in range(n):\n    if A[i]==1:\n        LIST.append(i)\n\n\nk=len(LIST)\n\nimport math\n\nFLIST=[k]\n\nfor j in range(2,2+int(math.sqrt(k))):\n    if k%j==0:\n        FLIST.append(j)\n        if k//j>1:\n            FLIST.append(k//j)\n\nANS=0\nif FLIST==[1]:\n    print(-1)\n\nelse:\n    A=1<<35\n    for f in FLIST:\n        ANS=0\n\n        if f==2:\n            for i in range(len(LIST)):\n                if i%2==1:\n                    ANS+=LIST[i]-LIST[i-1]\n\n            A=min(A,ANS)\n\n        elif f%2==1:\n            for i in range(len(LIST)):\n                ANS+=abs(LIST[i]-LIST[i//f*f+f//2])\n\n            A=min(A,ANS)\n\n    print(A)\n    \n", "n = int(input())\na = [int(x) for x in input().split()]\nm = 0\nb = []\nfor i in range(n):\n    m += a[i]\n    if a[i] == 1:\n        b.append(i)\nans = n * m\nfor i in range(2, m + 1):\n    preans = 0\n    if m % i != 0:\n        continue\n    c = 0\n    for j in range(m):\n        wg = (j // i) * i + i // 2\n        if j != wg:\n            preans += abs(b[wg] - b[j])\n    ans = min(ans, preans)\nif m == 1:\n    ans = -1\nprint(ans)\n", "from itertools import accumulate\n \ndef divisors(n):\n\ttab = []\n\tfor i in range(2, int(n**.5) + 2):\n\t\tif n % i == 0:\n\t\t\twhile n % i == 0:\n\t\t\t\tn //= i\n\t\t\ttab.append(i)\n\tif n > 1:\n\t\ttab.append(n)\n\treturn tab\n \n \nn = int(input())\na = list(map(int, input().split()))\ns = sum(a)\ntab = divisors(s)\nif s == 1:\n\tprint(-1)\nelse:\n\tm = 10**18\n\tpref = list(accumulate(a))\n\tfor k in tab:\n\t\tx = 0\n\t\tfor i in range(n - 1):\n\t\t\tx += min(pref[i] % k, k - (pref[i] % k))\n\t\tm = min(m, x)\n\tprint(m)", "def count(x):\n    ans = 0\n    for i in range(0, m, x):\n        st = (2 * i + x - 1) // 2\n        for j in range(i, x + i):\n            ans += abs(a[j] - a[st])\n    return ans\n\n\nn = int(input())\ndata = list(map(int, input().split()))\na = []\nm = 0\nfor i in range(n):\n    if data[i] == 1:\n        a.append(i)\n        m += 1\nk = []\nfor i in range(2, m + 1):\n    if m % i == 0:\n        k.append(i)\nl, r = 0, len(k) - 1\nwhile r - l > 7:\n    m1 = l + (r - l) // 3\n    m2 = r - (r - l) // 3\n    if count(k[m1]) > count(k[m2]):\n        l = m1\n    else:\n        r = m2\nt = 10 ** 18\nfor i in range(l, r + 1):\n    t = min(t, count(k[i]))\nif t == 10 ** 18:\n    print(-1)\nelse:\n    print(t)\n", "from math import ceil\nn=int(input())\nx=list(map(int,input().split()))\ncount,mod,mi=0,0,1234567890645725645376267536754173\nv,y=[],[0]*(n+1)\nans=123456712220335762365463526564561564534565546326\nfor i in range(n): count+=x[i]\nt=count\nfor i in range(2,t+1):\n    if t%i==0:\n        v.append(i)\n        while(t%i==0):t//=i\nfor i2 in v:\n    c=0\n    for i in range(n):\n        y[i]=x[i]\n    for i in range(n):\n        if y[i]<=0:\n            y[i+1]-=abs(y[i])\n            c+=abs(y[i])\n        elif y[i]%i2<i2-y[i]%i2:\n            y[i+1]+=y[i]%i2\n            c+=y[i]%i2\n        else:\n            y[i+1]-=i2-y[i]%i2\n            c+=i2-y[i]%i2\n    ans=min(ans,c)\nif count==1: print(-1)\nelse: print(ans)", "def f(n):\n    minus= n//2 if n%2==0 else 0\n    n//=2\n    return n*(n+1) - minus\n\ndef cal(a, k):\n    ans=0\n    cur=0\n    \n    for i, x in enumerate(a):\n        if x==0:\n            ans+=min(cur, k-cur)\n        else:\n            cur+=1\n    return ans+f(k)     \n\ndef uoc(x):\n    i=1\n    arr=[]\n    while i*i<=x:\n        if x%i==0:\n            arr.append(i)\n            \n            if i*i!=x:\n                arr.append(x//i)\n        i+=1\n    return sorted(arr)[1:]\n\nn = int(input())\na = list(map(int, input().split()))\nmin_=float('inf')\n\nfor u in uoc(sum(a)):\n    cur=0\n    l=None\n    s=0\n    \n    for i, x in enumerate(a):\n        if x==1:\n            cur+=1\n            if l==None:\n                l=i\n            if cur==u:\n                s+=cal(a[l:i+1], u)\n                cur, l = 0, None\n    min_=min(min_, s)      \n    \nif min_ < float('inf'):    \n    print(min_)\nelse:\n    print(-1)", "mod = 1000000007\neps = 10**-9\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    S = sum(A)\n    if S == 1:\n        print(-1)\n        return\n    div_list = [S]\n    for d in range(2, int(S ** 0.5) + 1):\n        if S % d == 0:\n            div_list.append(d)\n            div_list.append(S // d)\n    if len(div_list) > 2:\n        if div_list[-1] == div_list[-2]:\n            div_list.pop()\n\n    ans_best = 10**10\n    for D in div_list:\n        ans = 0\n        cnt = 0\n        i_list = []\n        for i, a in enumerate(A):\n            if a == 1:\n                i_list.append(i)\n                cnt += 1\n                if cnt == D:\n                    cnt = 0\n                    j = i_list[D // 2]\n                    for ii in i_list:\n                        ans += abs(ii - j)\n                    i_list = []\n        ans_best = min(ans_best, ans)\n    print(ans_best)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\na = list(map(int,input().split()))\nif sum(a) == 1:\n  print(-1)\n  return\nsm = sum(a)\nnmax = 10**5+10\neratos = [0 for i in range(nmax+1)]\nprime = []\ncnt = 2\nwhile True:\n  while cnt <= nmax and eratos[cnt]:\n    cnt += 1\n  if cnt > nmax:\n    break\n  eratos[cnt] = 1\n  prime.append(cnt)\n  for i in range(cnt**2,nmax+1,cnt):\n    eratos[i] = 1\ndvls = []\nfor i in prime:\n  if sm%i == 0:\n    dvls.append(i)\nansls = []\nls = []\ncnti = 0\nfor dv in dvls:\n  ans = 0\n  if dv == 2:\n    for i in range(n):\n      if a[i]:\n        cnti += 1\n        if cnti%2:\n          pivot = i\n        else:\n          ans += i-pivot\n  else:\n    for i in range(n):\n      if a[i]:\n        cnti += 1\n        if 1 <= cnti%dv <= dv//2:\n          ls.append(i)\n        elif cnti%dv == dv//2+1:\n          pivot = i\n          for j in ls:\n            ans += pivot-j\n          ls.clear()\n        else:\n          ans += i-pivot\n  ansls.append(ans)\nprint(min(ansls))", "from math import inf\nfrom math import sqrt\n\ndef pf(n): \n  sets=set()\n  while n % 2 == 0: \n      sets.add(2) \n      n = n // 2\n  for i in range(3, int(sqrt(n))+1, 2): \n      while n % i == 0: \n          sets.add(i)\n          n = n // i \n  if n > 2: \n      sets.add(n)\n  return list(sets)\n            \ndef absdif(arr,x):\n  sums=0\n  for i in range(len(arr)):\n    sums+=abs(x-arr[i])\n  return sums\n\nn=int(input())\narr=list(map(int,input().split()))\none=0\nfor i in arr:\n  if i==1:\n    one+=1\n#print(one)\nif one==1:\n  print(-1)\nelse:\n  \n  ans=inf\n  karr=pf(one) \n  #print(karr)\n  p=0\n  minik=()\n  indexarr=[]\n  for k in karr:\n    ansk=0\n    #print(k)\n    for i in range(n):\n      if arr[i]==1:\n        p+=1\n        indexarr+=[i]\n        if p==k:\n          avg=sum(indexarr)/k\n          mini=absdif(indexarr,indexarr[p//2])\n          #print(str(mini)+\"###\")\n          p=0\n          ansk+=mini\n          #print(k,ansk)\n          indexarr=[]\n    #print(one)\n    #print(k,ansk)\n    ans=min(ans,ansk)\n  print(ans)", "def simple_div(x):\n    if not x & 1:\n        yield 2\n        while not x & 1:\n            x >>= 1\n    i = 3\n    while i * i <= x:\n        if x % i == 0:\n            yield i\n            while x % i == 0:\n                x //= i\n        i += 2\n    if x != 1:\n        yield x\n\ndef __main__():\n    n = int(input())\n    a = list(map(int, input().split()))\n    sa = sum(a)\n    a.pop()\n    if sa == 1:\n        print(-1)\n        return\n    res = 2**64\n    for d in simple_div(sa):\n        tmp = 0\n        m = 0\n        for x in a:\n            m = (x + m) % d\n            tmp += m if m * 2 <= d else d - m\n        if tmp < res:\n            res = tmp\n    print(res)\n\n__main__()\n", "import math\nimport sys\ninput = sys.stdin.readline\nn = int(input())\na = [int(_) for _ in input().split()]\ntotal = sum(a)\ncurrent = 2\nfactors = []\nwhile current * current <= total:\n    cnt = 0\n    while total % current == 0:\n        total = total // current\n        cnt = cnt + 1\n    if cnt > 0:\n        factors.append(current)\n    current = current + 1\nif total > 1:\n    factors.append(total)\n\nans = sum(a) * n * n\nfor i in factors:\n    total, moves = 0, 0\n    for j in a:\n        total += j\n        moves += min(total % i, i - (total % i))\n    ans = min(ans, moves)\nif len(factors) == 0: ans = -1\nprint(ans)\n", "n = int(input())\na = list(map(int, input().split()))\n\nids = []\nfor i in range(n):\n    if a[i] == 1:\n        ids.append(i)\n\nm = len(ids)\nsum = m\n\nif sum == 1:\n    print(-1)\n    return\n\ndef calculate(inc):\n    ret = 0\n    for i in range(0,m,inc):\n        mid = (i + (i + inc - 1)) // 2\n        for j in range(i,i+inc):\n            ret += abs(ids[j] - ids[mid])\n    return ret\n\nans = 10 ** 18\ndiv = 2\nwhile div <= sum:\n    if sum % div == 0:\n        get = calculate(div)\n        ans = min(ans, get)\n    div += 1\n\nans = min(ans, calculate(m))\n\nprint(ans)", "import itertools as it\nimport os\nimport sys\n\n\ndef calc_cost(cumsum, f):\n    return sum([min(x % f, f - x % f) for x in cumsum])\n\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n\n    return factors\n\n\ndef f(xs):\n    cumsum = list(it.accumulate(xs))\n    s = cumsum[-1]\n    if s == 1:\n        return -1\n\n    return min(calc_cost(cumsum, f) for f in prime_factors(s))\n\n\ndef pp(input):\n    input()\n    xs = list(map(int, input().split()))\n    print(f(xs))\n\n\nif \"paalto\" in os.getcwd():\n    from string_source import string_source\n\n    pp(\n        string_source(\n            \"\"\"10\n3 3 3 5 6 9 3 1 7 3\"\"\"\n        )\n    )\n\n    pp(\n        string_source(\n            \"\"\"5\n    3 10 2 1 5\"\"\"\n        )\n    )\n\n    s1 = string_source(\n        \"\"\"3\n4 8 5\"\"\"\n    )\n    pp(s1)\n\n    pp(\n        string_source(\n            \"\"\"4\n0 5 15 10\"\"\"\n        )\n    )\n\n    pp(\n        string_source(\n            \"\"\"1\n1\"\"\"\n        )\n    )\n\nelse:\n    pp(sys.stdin.readline)\n", "import itertools as it\nimport os\nimport sys\n\n\ndef calc_cost(cumsum, f):\n    return sum([min(x % f, f - x % f) for x in cumsum])\n\n\ndef prime_factors(x):\n    if not x & 1:\n        yield 2\n        while not x & 1:\n            x >>= 1\n    i = 3\n    while i * i <= x:\n        if x % i == 0:\n            yield i\n            while x % i == 0:\n                x //= i\n        i += 2\n    if x != 1:\n        yield x\n\n\ndef f(xs):\n    cumsum = list(it.accumulate(xs))\n    s = cumsum[-1]\n    if s == 1:\n        return -1\n\n    return min(calc_cost(cumsum, f) for f in prime_factors(s))\n\n\ndef pp(input):\n    input()\n    xs = list(map(int, input().split()))\n    print(f(xs))\n\n\nif \"paalto\" in os.getcwd():\n    from string_source import string_source\n\n    pp(\n        string_source(\n            \"\"\"10\n3 3 3 5 6 9 3 1 7 3\"\"\"\n        )\n    )\n\n    pp(\n        string_source(\n            \"\"\"5\n    3 10 2 1 5\"\"\"\n        )\n    )\n\n    s1 = string_source(\n        \"\"\"3\n4 8 5\"\"\"\n    )\n    pp(s1)\n\n    pp(\n        string_source(\n            \"\"\"4\n0 5 15 10\"\"\"\n        )\n    )\n\n    pp(\n        string_source(\n            \"\"\"1\n1\"\"\"\n        )\n    )\n\nelse:\n    pp(sys.stdin.readline)\n"]