["# v = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n# for _ in range(int(input())):\n#   n = int(input())\n#   a,b = [],[]\n#   for i in range(n):\n#       s = input()\n#       isa = True\n#       for j in range(1,len(s) - 1):\n#           if(s[j] in v):\n#               if(s[j - 1] not in v and s[j + 1] not in v):\n#                   isa = False\n#           else:\n#               if(s[j - 1] not in v or s[j + 1] not in v):\n#                   isa = False\n#           if(not isa):\n#               break\n#       if(s[0] not in v and s[1] not in v):\n#           isa = False\n#       if(s[-1] not in v and s[-2] not in v):\n#           isa = False\n#       if(isa):\n#           a.append(s)\n#       else:\n#           b.append(s)\n#   dicta,dictb = {},{}\n#   for i in a:\n#       freq = {}\n#       for j in i:\n#           if(j in freq):\n#               freq[j] += 1\n#           else:\n#               freq[j] = 1\n#       for j in freq:\n#           if(j not in dicta):\n#               dicta[j] = (1,freq[j])\n#           else:\n#               dicta[j] = (dicta[j][0] + 1,dicta[j][1] + freq[j])\n#   for i in b:\n#       freq = {}\n#       for j in i:\n#           if(j in freq):\n#               freq[j] += 1\n#           else:\n#               freq[j] = 1\n#       for j in freq:\n#           if(j not in dictb):\n#               dictb[j] = (1,freq[j])\n#           else:\n#               dictb[j] = (dictb[j][0] + 1,dictb[j][1] + freq[j])\n#   ans = 1\n#   for i in dicta:\n#       ans *= dicta[i][0]\n#   for i in dictb:\n#       ans /= dictb[i][0]\n#   x,y = 1,1\n#   for i in dictb:\n#       x *= dictb[i][1]\n#   for i in dicta:\n#       y *= dicta[i][1]\n#   alice,bob = len(a),len(b)\n#   for i in range(bob):\n#       while(alice > 0 and ans > 10**7):\n#           ans /= y\n#           alice -= 1\n#       ans *= x\n#       if(ans > 10**7 and alice == 0):\n#           break\n#   while(alice > 0):\n#       ans /= y\n#       if(ans < 1 and alice > 100):\n#           ans = 0\n#           break\n#       alice -= 1\n#   if(ans > 10**7):\n#       print(\"Infinity\")\n#   else:\n#       print(ans)\n# #partailly correct [75 pts]\n#sys.stdin.readline() and sys.stdout.write() are faster I/O methods than input() \u00a0\u00a0\u00a0\u00a0and print()\nfrom sys import stdin\nz=['a','i','e','o','u']\nt=int(stdin.readline())\nwhile(t>0):\n t-=1\n n=int(stdin.readline())\n alice=[]\n bob=[]\n for j in range(n):\n  s=str(stdin.readline().strip(\"\\n\"))\n  # print(s)\n  isalice=True\n  for i in range(1,len(s)-1):\n   if(s[i] in z):\n    if(s[i-1] not in z and s[i+1] not in z):\n     isalice=False\n   else:\n    if(s[i-1] not in z or s[i+1] not in z):\n     isalice=False\n   if(not isalice):\n    break\n  if(s[0] not in z and s[1] not in z):\n   isalice=False\n  if(s[-1] not in z and s[-2] not in z):\n   isalice=False\n  if(isalice):\n   alice.append(s)\n  else:\n   bob.append(s)\n ali={}\n bo={}\n for i in alice:\n  d={}\n  for j in i:\n   if(j in d):\n    d[j]+=1\n   else:\n    d[j]=1\n  for j in d:\n   if j not in ali:\n    ali[j]=(1,d[j])\n   else:\n    ali[j]=(ali[j][0]+1,ali[j][1]+d[j])\n for i in bob:\n  d={}\n  for j in i:\n   if(j in d):\n    d[j]+=1\n   else:\n    d[j]=1\n  for j in d:\n   if j not in bo:\n    bo[j]=(1,d[j])\n   else:\n\n    bo[j]=(bo[j][0]+1,bo[j][1]+d[j])\n ans=1\n for i in ali:\n  ans*=ali[i][0]\n for i in bo:\n  ans=ans/bo[i][0]\n x=1\n y=1\n\n for i in bo:\n  x=x*bo[i][1]\n for i in ali:\n  y=y*ali[i][1]\n # print(x,y)\n alice=len(alice)\n bob=len(bob)\n for i in range(bob):\n  while(alice>0 and ans>10000000):\n   ans=ans/y\n   alice-=1\n  ans*=x\n  if(ans>10000000 and alice==0):\n   break\n while(alice>0):\n  ans=ans/y\n  if(ans<1 and alice>100):\n   ans=0\n   break\n  alice-=1\n if(ans>10000000):\n  print(\"Infinity\")\n else:\n  print(ans)\n#AC\n", "# v = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n# for _ in range(int(input())):\n#   n = int(input())\n#   a,b = [],[]\n#   for i in range(n):\n#       s = input()\n#       isa = True\n#       for j in range(1,len(s) - 1):\n#           if(s[j] in v):\n#               if(s[j - 1] not in v and s[j + 1] not in v):\n#                   isa = False\n#           else:\n#               if(s[j - 1] not in v or s[j + 1] not in v):\n#                   isa = False\n#           if(not isa):\n#               break\n#       if(s[0] not in v and s[1] not in v):\n#           isa = False\n#       if(s[-1] not in v and s[-2] not in v):\n#           isa = False\n#       if(isa):\n#           a.append(s)\n#       else:\n#           b.append(s)\n#   dicta,dictb = {},{}\n#   for i in a:\n#       freq = {}\n#       for j in i:\n#           if(j in freq):\n#               freq[j] += 1\n#           else:\n#               freq[j] = 1\n#       for j in freq:\n#           if(j not in dicta):\n#               dicta[j] = (1,freq[j])\n#           else:\n#               dicta[j] = (dicta[j][0] + 1,dicta[j][1] + freq[j])\n#   for i in b:\n#       freq = {}\n#       for j in i:\n#           if(j in freq):\n#               freq[j] += 1\n#           else:\n#               freq[j] = 1\n#       for j in freq:\n#           if(j not in dictb):\n#               dictb[j] = (1,freq[j])\n#           else:\n#               dictb[j] = (dictb[j][0] + 1,dictb[j][1] + freq[j])\n#   ans = 1\n#   for i in dicta:\n#       ans *= dicta[i][0]\n#   for i in dictb:\n#       ans /= dictb[i][0]\n#   x,y = 1,1\n#   for i in dictb:\n#       x *= dictb[i][1]\n#   for i in dicta:\n#       y *= dicta[i][1]\n#   alice,bob = len(a),len(b)\n#   for i in range(bob):\n#       while(alice > 0 and ans > 10**7):\n#           ans /= y\n#           alice -= 1\n#       ans *= x\n#       if(ans > 10**7 and alice == 0):\n#           break\n#   while(alice > 0):\n#       ans /= y\n#       if(ans < 1 and alice > 100):\n#           ans = 0\n#           break\n#       alice -= 1\n#   if(ans > 10**7):\n#       print(\"Infinity\")\n#   else:\n#       print(ans)\n# #partailly correct [75 pts]\n#sys.stdin.readline() and sys.stdout.write() are faster I/O methods than input() \u00a0\u00a0\u00a0\u00a0and print()\nfrom sys import stdin\nz=['a','i','e','o','u']\nt=int(stdin.readline())\nwhile(t>0):\n t-=1\n n=int(stdin.readline())\n alice=[]\n bob=[]\n for j in range(n):\n  s=str(stdin.readline().strip(\"\\n\"))\n  # print(s)\n  isalice=True\n  for i in range(1,len(s)-1):\n   if(s[i] in z):\n    if(s[i-1] not in z and s[i+1] not in z):\n     isalice=False\n   else:\n    if(s[i-1] not in z or s[i+1] not in z):\n     isalice=False\n   if(not isalice):\n    break\n  if(s[0] not in z and s[1] not in z):\n   isalice=False\n  if(s[-1] not in z and s[-2] not in z):\n   isalice=False\n  if(isalice):\n   alice.append(s)\n  else:\n   bob.append(s)\n ali={}\n bo={}\n for i in alice:\n  d={}\n  for j in i:\n   if(j in d):\n    d[j]+=1\n   else:\n    d[j]=1\n  for j in d:\n   if j not in ali:\n    ali[j]=(1,d[j])\n   else:\n    ali[j]=(ali[j][0]+1,ali[j][1]+d[j])\n for i in bob:\n  d={}\n  for j in i:\n   if(j in d):\n    d[j]+=1\n   else:\n    d[j]=1\n  for j in d:\n   if j not in bo:\n    bo[j]=(1,d[j])\n   else:\n\n    bo[j]=(bo[j][0]+1,bo[j][1]+d[j])\n ans=1\n for i in ali:\n  ans*=ali[i][0]\n for i in bo:\n  ans=ans/bo[i][0]\n x=1\n y=1\n\n for i in bo:\n  x=x*bo[i][1]\n for i in ali:\n  y=y*ali[i][1]\n # print(x,y)\n alice=len(alice)\n bob=len(bob)\n for i in range(bob):\n  while(alice>0 and ans>10000000):\n   ans=ans/y\n   alice-=1\n  ans*=x\n  if(ans>10000000 and alice==0):\n   break\n while(alice>0):\n  ans=ans/y\n  if(ans<1 and alice>100):\n   ans=0\n   break\n  alice-=1\n if(ans>10000000):\n  print(\"Infinity\")\n else:\n  print(ans)\n#AC\n", "v = [\"a\",\"e\",\"i\",\"o\",\"u\"]\nfor _ in range(int(input())):\n n = int(input())\n a,b = [],[]\n for i in range(n):\n  s = input()\n  isa = True\n  for j in range(1,len(s) - 1):\n   if(s[j] in v):\n    if(s[j - 1] not in v and s[j + 1] not in v):\n     isa = False\n   else:\n    if(s[j - 1] not in v or s[j + 1] not in v):\n     isa = False\n   if(not isa):\n    break\n  if(s[0] not in v and s[1] not in v):\n   isa = False\n  if(s[-1] not in v and s[-2] not in v):\n   isa = False\n  if(isa):\n   a.append(s)\n  else:\n   b.append(s)\n dicta,dictb = {},{}\n for i in a:\n  freq = {}\n  for j in i:\n   if(j in freq):\n    freq[j] += 1\n   else:\n    freq[j] = 1\n  for j in freq:\n   if(j not in dicta):\n    dicta[j] = (1,freq[j])\n   else:\n    dicta[j] = (dicta[j][0] + 1,dicta[j][1] + freq[j])\n for i in b:\n  freq = {}\n  for j in i:\n   if(j in freq):\n    freq[j] += 1\n   else:\n    freq[j] = 1\n  for j in freq:\n   if(j not in dictb):\n    dictb[j] = (1,freq[j])\n   else:\n    dictb[j] = (dictb[j][0] + 1,dictb[j][1] + freq[j])\n ans = 1\n for i in dicta:\n  ans *= dicta[i][0]\n for i in dictb:\n  ans /= dictb[i][0]\n x,y = 1,1\n for i in dictb:\n  x *= dictb[i][1]\n for i in dicta:\n  y *= dicta[i][1]\n alice,bob = len(a),len(b)\n for i in range(bob):\n  while(alice > 0 and ans > 10**7):\n   ans /= y\n   alice -= 1\n  ans *= x\n  if(ans > 10**7 and alice == 0):\n   break\n while(alice > 0):\n  ans /= y\n  if(ans < 1 and alice > 100):\n   ans = 0\n   break\n  alice -= 1\n if(ans > 10**7):\n  print(\"Infinity\")\n else:\n  print(ans)\n#partailly correct [75 pts]\n", "from sys import stdin\nz=['a','i','e','o','u']\nt=int(stdin.readline())\nwhile(t>0):\n t-=1\n n=int(stdin.readline())\n alice=[]\n bob=[]\n for j in range(n):\n  s=str(stdin.readline().strip(\"\\n\"))\n  # print(s)\n  isalice=True\n  for i in range(1,len(s)-1):\n   if(s[i] in z):\n    if(s[i-1] not in z and s[i+1] not in z):\n     isalice=False\n   else:\n    if(s[i-1] not in z or s[i+1] not in z):\n     isalice=False\n   if(not isalice):\n    break\n  if(s[0] not in z and s[1] not in z):\n   isalice=False\n  if(s[-1] not in z and s[-2] not in z):\n   isalice=False\n  if(isalice):\n   alice.append(s)\n  else:\n   bob.append(s)\n ali={}\n bo={}\n for i in alice:\n  d={}\n  for j in i:\n   if(j in d):\n    d[j]+=1\n   else:\n    d[j]=1\n  for j in d:\n   if j not in ali:\n    ali[j]=(1,d[j])\n   else:\n    ali[j]=(ali[j][0]+1,ali[j][1]+d[j])\n for i in bob:\n  d={}\n  for j in i:\n   if(j in d):\n    d[j]+=1\n   else:\n    d[j]=1\n  for j in d:\n   if j not in bo:\n    bo[j]=(1,d[j])\n   else:\n\n    bo[j]=(bo[j][0]+1,bo[j][1]+d[j])\n ans=1\n for i in ali:\n  ans*=ali[i][0]\n for i in bo:\n  ans=ans/bo[i][0]\n x=1\n y=1\n\n for i in bo:\n  x=x*bo[i][1]\n for i in ali:\n  y=y*ali[i][1]\n # print(x,y)\n alice=len(alice)\n bob=len(bob)\n for i in range(bob):\n  while(alice>0 and ans>10000000):\n   ans=ans/y\n   alice-=1\n  ans*=x\n  if(ans>10000000 and alice==0):\n   break\n while(alice>0):\n  ans=ans/y\n  if(ans<1 and alice>100):\n   ans=0\n   break\n  alice-=1\n if(ans>10000000):\n  print(\"Infinity\")\n else:\n  print(ans)", "def printf(a):\n print(a)\n\ndef enter_int():\n a = int(input())\n return a\n\ndef enter_str():\n a = input()\n return a \n\nv = [\"a\",\"e\",\"i\",\"o\",\"u\"]\nfor _ in range(enter_int()):\n n = enter_int()\n a,b = [],[]\n for i in range(n):\n  s = enter_str()\n  isa = True\n  for j in range(1,len(s) - 1):\n   if(s[j] in v):\n    if(s[j - 1] not in v and s[j + 1] not in v):\n     isa = False\n   else:\n    if(s[j - 1] not in v or s[j + 1] not in v):\n     isa = False\n   if(not isa):\n    break\n  if(s[0] not in v and s[1] not in v):\n   isa = False\n  if(s[-1] not in v and s[-2] not in v):\n   isa = False\n  if(isa):\n   a.append(s)\n  else:\n   b.append(s)\n dicta,dictb = {},{}\n for i in a:\n  freq = {}\n  for j in i:\n   if(j in freq):\n    freq[j] += 1\n   else:\n    freq[j] = 1\n  for j in freq:\n   if(j not in dicta):\n    dicta[j] = (1,freq[j])\n   else:\n    dicta[j] = (dicta[j][0] + 1,dicta[j][1] + freq[j])\n for i in b:\n  freq = {}\n  for j in i:\n   if(j in freq):\n    freq[j] += 1\n   else:\n    freq[j] = 1\n  for j in freq:\n   if(j not in dictb):\n    dictb[j] = (1,freq[j])\n   else:\n    dictb[j] = (dictb[j][0] + 1,dictb[j][1] + freq[j])\n ans = 1\n for i in dicta:\n  ans *= dicta[i][0]\n for i in dictb:\n  ans /= dictb[i][0]\n x,y = 1,1\n for i in dictb:\n  x *= dictb[i][1]\n for i in dicta:\n  y *= dicta[i][1]\n alice,bob = len(a),len(b)\n for i in range(bob):\n  while(alice > 0 and ans > 10**7):\n   ans /= y\n   alice -= 1\n  ans *= x\n  if(ans > 10**7 and alice == 0):\n   break\n while(alice > 0):\n  ans /= y\n  if(ans < 1 and alice > 100):\n   ans = 0\n   break\n  alice -= 1\n if(ans > 10**7):\n  printf(\"Infinity\")\n else:\n  printf(ans)", "import math\ndef score(df):\n res,fx,li2,x = {} ,1,{},1\n for val in df:\n  for key in val:\n   if key not in res:res[key]=1\n   else:res[key]+=1\n for val in res.values():fx=fx*val \n for val in res:\n  li2[val]=0\n  for i in df:\n   if val in i:li2[val]+=1 \n for val in li2: x *= li2[val]\n return [x,fx]\ndef prog(li,al,bo):\n for cur in li:\n  prev,f = -1,0\n  for j in range(len(cur)):\n   if cur[j] not in ['a','e','i','o','u']:\n    if prev==-1:prev = j\n    else:\n     if abs(prev-j)==2 or abs(prev-j)==1:\n      f = 1\n      break\n     else:prev = j\n  if f==1:bo.append(cur)\n  else:al.append(cur) \n sca,scb = score(al),score(bo)\n ans1 = math.log10(sca[0])+len(bo)*math.log10(scb[1])\n ans2 = math.log10(scb[0])+len(al)*(math.log10(sca[1]))\n return (ans1-ans2 ) \nfor i in range(int(input())):\n li,x =[],int(input())\n for i in range(x):li.append(input())\n final =prog(li,[],[])\n print(\"Infinity\") if final >7.0 else print(pow(10,final))", "# cook your dish here\nimport math\nimport decimal\ndecimal.getcontext().prec = 1000\n\nt=int(input())\n\nfor _ in range(t):\n\n l=int(input())\n alice=[]\n bob=[]\n alice_all=\"\"\n bob_all=\"\"\n vowels=['a','e','i','o','u']\n for i in range(l):\n  temp=input()\n  consonant_index=-1\n  for j in range(len(temp)):\n   if temp[j] in vowels:\n    continue\n   else:\n    if consonant_index==-1:\n     consonant_index=j\n    else:\n     if j-consonant_index<=2:\n      bob.append(temp)\n      bob_all=bob_all+temp\n      break\n     else:\n      consonant_index=j\n  else:\n   alice.append(temp)\n   alice_all=alice_all+temp\n\n if l<=10:\n  n=len(alice)\n  m=len(bob)\n\n  score_A,score_B=1,1\n  x_a,x_b=1,1\n  fx_a,fx_b=1,1\n  for i in range(97,123):\n   char=chr(i)\n   if char in alice_all:\n    rec_a=[x for x in alice if char in x]\n    x_a*=len(rec_a)\n    fx_a=fx_a * alice_all.count(char)\n    \n\n   if char in bob_all:\n    rec_b=[x for x in bob if char in x]\n    x_b*=len(rec_b)\n    fx_b=fx_b * bob_all.count(char)\n\n  fx_a=math.pow(fx_a,n)\n  fx_b=math.pow(fx_b,m) \n  score_A=x_a/fx_a\n  score_B=x_b/fx_b\n  ans=score_A/score_B\n  if ans>10000000:\n   print(\"Infinity\")\n  else:\n   print(\"{0:.9f}\".format(ans))\n else:\n\n  n=decimal.Decimal(len(alice))\n  m=decimal.Decimal(len(bob))\n\n  score_A=decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n  score_B=decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n  x_a=decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n  x_b=decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n  denom_a=decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n  denom_b=decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n  fx_a=decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n  fx_b=decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n  ans=decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n  charInA=''.join(sorted(set(alice_all)))\n  charInB=''.join(sorted(set(bob_all)))\n  ctx=decimal.getcontext().copy()\n  ctx.Emax=decimal.MAX_EMAX\n  ctx.Emin=decimal.MIN_EMIN\n  ctx.prec=100\n\n\n  for i in charInA:\n   rec_a=[x for x in alice if i in x]\n   if len(rec_a)>0:\n    x_a=ctx.multiply(x_a,len(rec_a))\n    fx_a=ctx.multiply(fx_a,alice_all.count(i))\n\n  for i in charInB:\n   rec_b=[x for x in bob if i in x]\n   if len(rec_b)>0:\n    x_b=ctx.multiply(x_b,len(rec_b))\n    fx_b=ctx.multiply(fx_b,bob_all.count(i))\n  \n  denom_a=ctx.power(fx_a,n)\n  denom_b=ctx.power(fx_b,m)\n  score_A=ctx.divide(x_a,denom_a)\n  score_B=ctx.divide(x_b,denom_b)\n  \n  ans=ctx.divide(score_A,score_B)\n\n  if ans>10000000:\n   print(\"Infinity\")\n  else:\n   print(\"{0:.9f}\".format(ans))", "#RAJ JAIN\n\nimport decimal\ndecimal.getcontext().prec = 16\ndecimal.getcontext().Emin = -1000000000\ndecimal.getcontext().Emax = 1000000000\n\ndef vowel(x):\n return x in 'aeiou'\n\ndef is_alice(s):\n if not vowel(s[0]) and not vowel(s[1]):\n  return False\n\n for i in range(2, len(s)):\n  if not vowel(s[i]) and (not vowel(s[i - 1]) or not vowel(s[i - 2])):\n   return False\n\n return True\n\ndef fast_exp(x, p):\n x = decimal.Decimal(x)\n ans = decimal.Decimal(1)\n while p > 0:\n  if p & 1:\n   ans *= x\n  x *= x\n  p >>= 1\n return ans\n\ndef get_score(strings):\n k = len(strings)\n xc = [0] * 26\n fxc = [0] * 26\n\n for s in strings:\n  f = [0] * 26\n  for x in s:\n   f[ord(x) - 97] += 1\n\n  for i in range(26):\n   if f[i] > 0:\n    xc[i] += 1\n    fxc[i] += f[i]\n\n pxc, pfxc = 1, 1\n for i in range(26):\n  if xc[i] > 0:\n   pxc *= xc[i]\n   pfxc *= fxc[i]\n\n return decimal.Decimal(pxc) / fast_exp(pfxc, k)\n \nfor _ in range(int(input())):\n alice, bob = [], []\n for _ in range(int(input())):\n  inp = input()\n  if is_alice(inp):\n   alice.append(inp)\n  else:\n   bob.append(inp)\n\n alice_score = get_score(alice)\n bob_score = get_score(bob)\n\n ratio = alice_score / bob_score\n if ratio > 10000000.0:\n  print('Infinity')\n else:\n  print(ratio)\n", "import math\nfrom math import log10\n\ndef score(df):\n#     a=\"\"\n n=len(df)\n \n #calulation of fxc\n#     for val in df:\n#         a=a+val     \n  \n \n res = {} \n for val in df:\n  for key in val:\n   if key not in res:\n    res[key]=1\n   else:\n    res[key]+=1\n     \n \n#     print(res)\n fx=1\n for val in res.values():\n  fx=fx*val\n  \n li2={}\n #calculation of xc\n for val in res:\n  li2[val]=0\n  for i in df:\n   if val in i:\n    li2[val]+=1\n \n x=1\n for val in li2:\n  \n  x=x*li2[val]\n#     print(x,fx,\"x\",\"fc\")\n return [x,fx]\n\n\ndef prog(li):\n al=[]\n bo=[]\n for cur in li:\n  prev = -1\n  f = 0\n  for j in range(len(cur)):\n   if cur[j] not in ['a','e','i','o','u']:\n    if prev==-1:\n     prev = j\n    else:\n     if abs(prev-j)==2 or abs(prev-j)==1:\n      f = 1\n      break\n     else:\n      prev = j\n  if f==1:\n   bo.append(cur)\n  else:\n   al.append(cur)\n   \n#     print(al)\n#     print(bo)\n sca=score(al)\n scb=score(bo)\n#     print(sca,scb,\"dd\")\n ans1 = log10(sca[0])+len(bo)*log10(scb[1])\n ans2 = log10(scb[0])+len(al)*(log10(sca[1]))\n ans1 = ans1-ans2\n#     print(ans1)\n \n return ans1\n \n  \n    \n    \nt = int(input())\nfor i in range(0,t):\n li=[]\n x= int(input())\n for i in range(0,x):\n  e=input()\n  li.append(e)\n final =prog(li)\n if final >7.0:\n  print(\"Infinity\")\n else:\n  print(pow(10,final))", "from math import log10\nimport math\nfor _ in range(int(input())):\n n = int(input())\n alice = []\n bob = []\n words = []\n for i in range(n):\n  words.append(input())\n for cur in words:\n  prev = -1\n  f = 0\n  for j in range(len(cur)):\n   if cur[j] not in ['a','e','i','o','u']:\n    if prev==-1:\n     prev = j\n    else:\n     if abs(prev-j)==2 or abs(prev-j)==1:\n      f = 1\n      break\n     else:\n      prev = j\n  if f==1:\n   bob.append(cur)\n  else:\n   alice.append(cur)\n  \n#     print(alice)\n#     print(bob)\n # Alice \n n1 = len(alice)\n freq_a = {}\n for i in alice:\n  for j in i:\n   if j not in freq_a:\n    freq_a[j] = 1\n   else:\n    freq_a[j]+=1\n num_a = {}\n for i in freq_a:\n  num_a[i] = 0\n  for j in alice:\n   if i in j:\n    num_a[i]+=1\n#     print(freq_a)\n#     print(num_a)\n num1 = 1\n den1 = 1\n for i in num_a:\n  num1 = (num1*num_a[i])\n  den1 = den1*freq_a[i]\n \n \n # Bob alphabets\n n2 = len(bob)\n freq_b = {}\n for i in bob:\n  for j in i:\n   if j not in freq_b:\n    freq_b[j] = 1\n   else:\n    freq_b[j]+=1\n num_b = {}\n for i in freq_b:\n  num_b[i] = 0\n  for j in bob:\n   if i in j:\n    num_b[i]+=1\n num2 = 1\n den2 = 1\n for i in num_b:\n  num2 = (num2*num_b[i])\n  den2 = den2*freq_b[i]\n # # if n<=10:\n #     if n2>=n1:\n #         ans = pow(den2/den1,n1)*pow(den2,n2-n1)\n #     else:\n #         ans = pow(den2/den1,n2)*pow(den1,-(n1-n2))\n #     t = num1/num2\n #     ans = ans*t\n #     if ans>10000000.0:\n #         print(\"Infinity\")\n #     else:\n #         print(ans)\n # else:\n ans1 = log10(num1)+n2*log10(den2)\n ans2 = log10(num2)+n1*(log10(den1))\n ans1 = ans1-ans2\n if ans1 > 7.0:\n  print(\"Infinity\")\n else:\n  print(pow(10,ans1))", "from math import log10\nimport math\nfor _ in range(int(input())):\n n = int(input())\n alice = []\n bob = []\n words = []\n for i in range(n):\n  words.append(input())\n for cur in words:\n  prev = -1\n  f = 0\n  for j in range(len(cur)):\n   if cur[j] not in ['a','e','i','o','u']:\n    if prev==-1:\n     prev = j\n    else:\n     if abs(prev-j)==2 or abs(prev-j)==1:\n      f = 1\n      break\n     else:\n      prev = j\n  if f==1:\n   bob.append(cur)\n  else:\n   alice.append(cur)\n  \n#     print(alice)\n#     print(bob)\n # Alice \n n1 = len(alice)\n freq_a = {}\n for i in alice:\n  for j in i:\n   if j not in freq_a:\n    freq_a[j] = 1\n   else:\n    freq_a[j]+=1\n num_a = {}\n for i in freq_a:\n  num_a[i] = 0\n  for j in alice:\n   if i in j:\n    num_a[i]+=1\n#     print(freq_a)\n#     print(num_a)\n num1 = 1\n den1 = 1\n for i in num_a:\n  num1 = (num1*num_a[i])\n  den1 = den1*freq_a[i]\n \n \n # Bob alphabets\n n2 = len(bob)\n freq_b = {}\n for i in bob:\n  for j in i:\n   if j not in freq_b:\n    freq_b[j] = 1\n   else:\n    freq_b[j]+=1\n num_b = {}\n for i in freq_b:\n  num_b[i] = 0\n  for j in bob:\n   if i in j:\n    num_b[i]+=1\n num2 = 1\n den2 = 1\n for i in num_b:\n  num2 = (num2*num_b[i])\n  den2 = den2*freq_b[i]\n if n<=10:\n  if n2>=n1:\n   ans = pow(den2/den1,n1)*pow(den2,n2-n1)\n  else:\n   ans = pow(den2/den1,n2)*pow(den1,-(n1-n2))\n  t = num1/num2\n  ans = ans*t\n  if ans>10000000.0:\n   print(\"Infinity\")\n  else:\n   print(ans)\n else:\n  ans1 = log10(num1)+n2*log10(den2)\n  ans2 = log10(num2)+n1*(log10(den1))\n  ans1 = ans1-ans2\n  if ans1 > 7.0:\n   print(\"Infinity\")\n  else:\n   print(pow(10,ans1))", "from math import log10\nimport math\nfor _ in range(int(input())):\n n = int(input())\n alice = []\n bob = []\n words = []\n for i in range(n):\n  words.append(input())\n for cur in words:\n  prev = -1\n  f = 0\n  for j in range(len(cur)):\n   if cur[j] not in ['a','e','i','o','u']:\n    if prev==-1:\n     prev = j\n    else:\n     if abs(prev-j)==2 or abs(prev-j)==1:\n      f = 1\n      break\n     else:\n      prev = j\n  if f==1:\n   bob.append(cur)\n  else:\n   alice.append(cur)\n  \n#     print(alice)\n#     print(bob)\n # Alice \n n1 = len(alice)\n freq_a = {}\n for i in alice:\n  for j in i:\n   if j not in freq_a:\n    freq_a[j] = 1\n   else:\n    freq_a[j]+=1\n num_a = {}\n for i in freq_a:\n  num_a[i] = 0\n  for j in alice:\n   if i in j:\n    num_a[i]+=1\n#     print(freq_a)\n#     print(num_a)\n num1 = 1\n den1 = 1\n for i in num_a:\n  num1 = (num1*num_a[i])\n  den1 = den1*freq_a[i]\n \n \n # Bob alphabets\n n2 = len(bob)\n freq_b = {}\n for i in bob:\n  for j in i:\n   if j not in freq_b:\n    freq_b[j] = 1\n   else:\n    freq_b[j]+=1\n num_b = {}\n for i in freq_b:\n  num_b[i] = 0\n  for j in bob:\n   if i in j:\n    num_b[i]+=1\n num2 = 1\n den2 = 1\n for i in num_b:\n  num2 = (num2*num_b[i])\n  den2 = den2*freq_b[i]\n if n<=10:\n#         if n2>=n1:\n#             ans = pow(den2/den1,n1)*pow(den2,n2-n1)\n#         else:\n#             ans = pow(den2/den1,n2)*pow(den1,-(n1-n2))\n#         t = num1/num2\n#         ans = ans*t\n#         if ans>10000000.0:\n#             print(\"Infinity\")\n#         else:\n#             print(ans)\n#     else:\n  ans1 = log10(num1)+n2*log10(den2)\n  ans2 = log10(num2)+n1*(log10(den1))\n  ans1 = ans1-ans2\n  if ans1 > 7.0:\n   print(\"Infinity\")\n  else:\n   print(pow(10,ans1))", "from math import log10\nimport math\nfor _ in range(int(input())):\n n = int(input())\n alice = []\n bob = []\n words = []\n for i in range(n):\n  words.append(input())\n for cur in words:\n  prev = -1\n  f = 0\n  for j in range(len(cur)):\n   if cur[j] not in ['a','e','i','o','u']:\n    if prev==-1:\n     prev = j\n    else:\n     if abs(prev-j)==2 or abs(prev-j)==1:\n      f = 1\n      break\n     else:\n      prev = j\n  if f==1:\n   bob.append(cur)\n  else:\n   alice.append(cur)\n  \n # Alice \n n1 = len(alice)\n freq_a = {}\n for i in alice:\n  for j in i:\n   if j not in freq_a:\n    freq_a[j] = 1\n   else:\n    freq_a[j]+=1\n num_a = {}\n for i in freq_a:\n  num_a[i] = 0\n  for j in alice:\n   if i in j:\n    num_a[i]+=1\n num1 = 1\n den1 = 1\n for i in num_a:\n  num1 = (num1*num_a[i])\n  den1 = den1*freq_a[i]\n \n \n # Bob alphabets\n n2 = len(bob)\n freq_b = {}\n for i in bob:\n  for j in i:\n   if j not in freq_b:\n    freq_b[j] = 1\n   else:\n    freq_b[j]+=1\n num_b = {}\n for i in freq_b:\n  num_b[i] = 0\n  for j in bob:\n   if i in j:\n    num_b[i]+=1\n num2 = 1\n den2 = 1\n for i in num_b:\n  num2 = (num2*num_b[i])\n  den2 = den2*freq_b[i]\n if n<=10:\n  if n2>=n1:\n   ans = pow(den2/den1,n1)*pow(den2,n2-n1)\n  else:\n   ans = pow(den2/den1,n2)*pow(den1,-(n1-n2))\n  t = num1/num2\n  ans = ans*t\n  if ans>10000000.0:\n   print(\"Infinity\")\n  else:\n   print(ans)\n else:\n  ans1 = log10(num1)+n2*log10(den2)\n  ans2 = log10(num2)+n1*(log10(den1))\n  ans1 = ans1-ans2\n  if ans1 > 7.0:\n   print(\"Infinity\")\n  else:\n   print(pow(10,ans1))", "import math\ndef score(a):\n count = {}\n recipes = {}\n for i in range(len(a)):\n  x = a[i]\n  for j in range(len(x)):\n   if x[j] in count:\n    count[x[j]] += 1\n   else:\n    count[x[j]] = 1\n  for ch in set(x):\n   if ch in recipes:\n    recipes[ch] += 1\n   else:\n    recipes[ch] = 1\n num, den = 0, 0\n for key in recipes:\n  # print(key, '{}/{}**{}'.format(recipes[key], count[key], len(a)))\n  num += math.log(recipes[key])\n  den += len(a) * math.log(count[key])\n  # prod *= recipes[key] / (count[key] ** len(a))\n return math.exp(num - den)\nt = int(input())\nfor _ in range(t):\n l = int(input())\n alice = []\n bob = []\n vowels = set('aeiou')\n for i in range(l):\n  s = input()\n  count = 2\n  for j in range(len(s)):\n   if s[j] in vowels:\n    count += 1\n   else:\n    if count <= 1:\n     bob.append(s)\n     break\n    count = 0\n  else:\n   alice.append(s)\n # print(alice, bob)\n s1 = score(alice)\n s2 = score(bob)\n # print(len(alice), len(bob))\n # print(sA, sB)\n if s2 == 0 or math.exp(math.log(s1) - math.log(s2)) > 10**7:\n  print('Infinity')\n else:\n  print(math.exp(math.log(s1) - math.log(s2)))\n", "import time\nvowels = 'aeiou'\nstart_time = time.time()\ndef main():\n import math as m\n ryt = m.log(10**7, 2)\n lyt = m.log(0.0000009, 2)\n t = int(input())\n v = {\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n for qwer in range(t):\n  l = int(input())\n  a = []\n  b = []\n  for wer in range(l):\n   s = input()\n   n = len(s)\n   c1 = 0\n   for i in range(n):\n    if s[i] not in v:\n     if i+1 < n:\n      if s[i+1] not in v:\n       c1 = 1\n       break\n     if i+2 < n:\n      if s[i+2] not in v:\n       c1 = 1\n       break\n   if c1 == 1:\n    b.append(s)\n   else:\n    a.append(s)\n  # for _ in range(l):\n  #     flag = False\n  #     s = input()\n  #     for i in range(len(s)-2):\n  #         if s[i] not in vowels:\n  #             if s[i+1] not in vowels or s[i+2] not in vowels:\n  #                 flag = True\n  #                 break\n  #         else:\n  #             if s[i+1] not in vowels and s[i+2] not in vowels:\n  #                 flag = True \n  #                 break\n  #     if flag:\n  #         b.append(s)\n  #     else:\n  #         a.append(s)\n  xa = {}\n  fxa = {}\n  xb = {}\n  fxb = {}\n  ka = len(a)\n  kb = len(b)\n  for i in range(ka):\n   d = {}\n   for j in range(len(a[i])):\n    if a[i][j] in d:\n     d[a[i][j]] += 1\n    else:\n     d[a[i][j]] = 1\n   for u in d:\n    if u in xa:\n     xa[u] += 1\n     fxa[u] += d[u]\n    else:\n     xa[u] = 1\n     fxa[u] = d[u]\n  for i1 in range(kb):\n   d = {}\n   for j1 in range(len(b[i1])):\n    if b[i1][j1] in d:\n     d[b[i1][j1]] += 1\n    else:\n     d[b[i1][j1]] = 1\n   for u1 in d:\n    if u1 in xb:\n     xb[u1] += 1\n     fxb[u1] += d[u1]\n    else:\n     xb[u1] = 1\n     fxb[u1] = d[u1]\n  ans = 0\n  for y in xa:\n   ans += m.log(xa[y], 2)-ka*(m.log(fxa[y], 2))\n  for r in xb:\n   ans += kb*(m.log(fxb[r], 2))-m.log(xb[r], 2)\n  if ans > ryt:\n   print(\"Infinity\")\n  elif ans < lyt:\n   print(0)\n  else:\n   print(2**ans)\n\n\nmain()\n# print(time.time()-start_time)\n", "import time\nimport math\nimport random\nimport string\n\ndef log2(x):\n return math.log(x, 2)\n\nMAX = log2(1e7)\nMIN = log2(1e-7)\n\nstart_time = time.time()\n\nvowels = 'aeiou'\nv = {\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\nabets = string.ascii_lowercase\n\ntcs = int(input())\n\nfor test in range(tcs):\n l = int(input())\n a = []\n b = []\n # for _ in range(l):\n #     flag = False\n #     s = input()\n #     for i in range(len(s)-2):\n #         if s[i] not in vowels:\n #             if s[i+1] not in vowels or s[i+2] not in vowels:\n #                 flag = True\n #                 break\n #         else:\n #             if s[i+1] not in vowels and s[i+2] not in vowels:\n #                 flag = True \n #                 break\n #     if flag:\n #         b.append(s)\n #     else:\n #         a.append(s)\n for wer in range(l):\n  s = input()\n  n = len(s)\n  c1 = 0\n  for i in range(n):\n   if s[i] not in v:\n    if i+1 < n:\n     if s[i+1] not in v:\n      c1 = 1\n      break\n    if i+2 < n:\n     if s[i+2] not in v:\n      c1 = 1\n      break\n  if c1 == 1:\n   b.append(s)\n  else:\n   a.append(s)\n alen = len(a)\n blen = len(b)\n # ################ Alice ##############\n achar_dict = {}\n atotal_dict = {}\n for recipe in a:\n  d = {}\n  for ch in recipe:\n   d[ch] = 1\n   if atotal_dict.get(ch):\n    atotal_dict[ch] += 1\n   else:\n    atotal_dict[ch] = 1\n  for ch in d:\n   if achar_dict.get(ch):\n    achar_dict[ch] += 1\n   else:\n    achar_dict[ch] = 1\n ################ Bob ##############\n bchar_dict = {}\n btotal_dict = {}\n for recipe in b:\n  d = {}\n  for ch in recipe:\n   d[ch] = 1\n   if btotal_dict.get(ch):\n    btotal_dict[ch] += 1\n   else:\n    btotal_dict[ch] = 1\n  for ch in d:\n   if bchar_dict.get(ch):\n    bchar_dict[ch] += 1\n   else:\n    bchar_dict[ch] = 1\n ################## Calculation ##################\n result = 0\n for i in achar_dict:\n  result += log2(achar_dict[i]) - alen*log2(atotal_dict[i])\n  \n for i in bchar_dict:\n  result += blen*log2(btotal_dict[i]) - log2(bchar_dict[i])\n\n if result > MAX:\n  print('Infinity')\n elif result < MIN:\n  print(0)\n else:\n  print(2**result)\n  # print('%.7f' % 10**result)\n\n# print(time.time() - start_time)\n", "import time\nimport math\nimport random\nimport string\n\ndef log2(x):\n return math.log(x, 2)\n\nMAX = log2(1e7)\nMIN = log2(1e-7)\n\nstart_time = time.time()\n\nvowels = 'aeiou'\nv = {\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\nabets = string.ascii_lowercase\n\ntcs = int(input())\n\nfor test in range(tcs):\n l = int(input())\n a = []\n b = []\n for _ in range(l):\n  flag = False\n  s = input()\n  for i in range(len(s)-2):\n   if s[i] not in vowels:\n    if s[i+1] not in vowels or s[i+2] not in vowels:\n     flag = True\n     break\n   else:\n    if s[i+1] not in vowels and s[i+2] not in vowels:\n     flag = True \n     break\n  if flag:\n   b.append(s)\n  else:\n   a.append(s)\n # for wer in range(l):\n #     s = input()\n #     n = len(s)\n #     c1 = 0\n #     for i in range(n):\n #         if s[i] not in v:\n #             if i+1 < n:\n #                 if s[i+1] not in v:\n #                     c1 = 1\n #                     break\n #             if i+2 < n:\n #                 if s[i+2] not in v:\n #                     c1 = 1\n #                     break\n #     if c1 == 1:\n #         b.append(s)\n #     else:\n #         a.append(s)\n alen = len(a)\n blen = len(b)\n # ################ Alice ##############\n achar_dict = {}\n atotal_dict = {}\n for recipe in a:\n  d = {}\n  for ch in recipe:\n   d[ch] = 1\n   if atotal_dict.get(ch):\n    atotal_dict[ch] += 1\n   else:\n    atotal_dict[ch] = 1\n  for ch in d:\n   if achar_dict.get(ch):\n    achar_dict[ch] += 1\n   else:\n    achar_dict[ch] = 1\n ################ Bob ##############\n bchar_dict = {}\n btotal_dict = {}\n for recipe in b:\n  d = {}\n  for ch in recipe:\n   d[ch] = 1\n   if btotal_dict.get(ch):\n    btotal_dict[ch] += 1\n   else:\n    btotal_dict[ch] = 1\n  for ch in d:\n   if bchar_dict.get(ch):\n    bchar_dict[ch] += 1\n   else:\n    bchar_dict[ch] = 1\n ################## Calculation ##################\n result = 0\n for i in achar_dict:\n  result += log2(achar_dict[i]) - alen*log2(atotal_dict[i])\n  \n for i in bchar_dict:\n  result += blen*log2(btotal_dict[i]) - log2(bchar_dict[i])\n\n if result > MAX:\n  print('Infinity')\n elif result < MIN:\n  print(0)\n else:\n  print(2**result)\n  # print('%.7f' % 10**result)\n\n# print(time.time() - start_time)\n"]