["# cook your dish here\ndef isValid(mid):\n time = 0.0\n for i in range(n):\n  if time < c[i]:\n   time = c[i]\n   time += mid # cannon cooling\n  elif time >= c[i] and time <= c[i] + d:\n   time += mid # cannon cooling\n  else:\n   return False\n return True\n\nt = int(input())\nwhile t != 0:\n n, d = list(map(int, input().split()))\n c = list(map(int, input().split()))[:n]\n ans = -1\n c.sort()\n low, high = 0, 10 ** 10\n while (high - low) > 0.000001:\n  mid = (low + high) / 2\n  if isValid(mid):\n   ans = mid\n   low = mid\n  else:\n   high = mid \n print(\"{0:.6f}\".format(ans))\n t -= 1\n", "# cook your dish here\ndef valid(coolTime):\n Time = c[0]\n for i in range(1,n):\n  if(Time+coolTime<c[i]):\n   Time = c[i]\n  elif(Time+coolTime<=c[i]+d):\n   Time = Time + coolTime\n  else:\n   return False\n return True\n\ne=1e-6\ntest=int(input())\nfor _ in range(test):\n l = input().split() \n n = int(l[0])\n d = int(l[1])\n c = list(map(int, input().split()))\n c.sort()\n low = 0.0\n high = 4e9\n while(high-low>e):\n  mid = (low+high)/2.0\n  if(valid(mid)):\n   low = mid\n  else:\n   high = mid\n print(mid)", "# cook your dish here\ndef check(mid):\n time=0.0 \n for i in range(n):\n  if time<=arr[i]:\n   time=arr[i]+mid \n  elif time<=arr[i]+d:\n   time+=mid \n  else:\n   return False \n return True \n \nfor _ in range(int(input())):\n n,d=list(map(int,input().split()))\n arr=list(map(int,input().split()))\n arr.sort()\n low=0\n high=10000000000\n while ((high-low)>0.000001):\n  mid=low+(high-low)/2 \n  if check(mid):\n   ans=mid \n   low=mid \n  else:\n   high=mid\n print(\"{0:.6f}\".format(ans)) \n", "# cook your dish here\ndef check(mid):\n time=0.0 \n for i in range(n):\n  if time<arr[i]:\n   time=arr[i]+mid \n  elif time<=arr[i]+d:\n   time+=mid \n  else:\n   return False \n return True \n \nfor _ in range(int(input())):\n n,d=list(map(int,input().split()))\n arr=list(map(int,input().split()))\n arr.sort()\n low=0\n high=10000000000\n while ((high-low)>0.000001):\n  mid=low+(high-low)/2 \n  if check(mid):\n   ans=mid \n   low=mid \n  else:\n   high=mid\n print(\"{0:.6f}\".format(ans)) \n", "def valid(coolTime):\n Time = c[0]\n for i in range(1,n):\n  if(Time+coolTime<c[i]):\n   Time = c[i]\n  elif(Time+coolTime<=c[i]+d):\n   Time = Time + coolTime\n  else:\n   return False\n return True\n\ne = 1e-6\n\nt = int(input())\n\nfor lol in range(t):\n l = input().split() \n n = int(l[0])\n d = int(l[1])\n c = list(map(int, input().split()))\n c.sort()\n low = 0.0\n high = 4e9\n while(high-low>e):\n  mid = (low+high)/2.0\n  if(valid(mid)):\n   low = mid\n  else:\n   high = mid\n print(mid)", "def isValid(arr,mid,n):\n t = 0.0\n for i in range(n):\n  if t<arr[i]:\n   t = arr[i] + mid\n  elif t<=arr[i] + d:\n   t = t + mid\n  else:\n   return False\n return True\n\n\nfor _ in range(int(input())):\n n,d = list(map(int,input().split(' ')))\n arr = [int(num) for num in input().split(' ')]\n duration = []\n ans = -1\n arr.sort()\n  \n left = 0.0\n right = 10000000000\n while right -left >= 10**(-6):\n  mid = (left+right)/2\n  #print(mid)\n  if isValid(arr,mid,n)==True:\n   left = mid\n   ans = mid\n  else:\n   right = mid\n   \n print(ans)\n", "def isValid(arr,mid):\n t = 0.0\n for i in range(len(arr)):\n  if t<arr[i]:\n   t = arr[i] + mid\n  elif t<=arr[i] + d:\n   t = t + mid\n  else:\n   return False\n return True\n\n\nfor _ in range(int(input())):\n n,d = list(map(int,input().split(' ')))\n arr = [int(num) for num in input().split(' ')]\n duration = []\n ans = -1\n arr.sort()\n  \n left = 0.0\n right = 10000000000\n while right -left >= 10**(-6):\n  mid = (left+right)/2\n  #print(mid)\n  if isValid(arr,mid)==True:\n   left = mid\n   ans = mid\n  else:\n   right = mid\n   \n print(ans)\n", "for _ in range(int(input())):\n n,d=map(int,input().split())\n c=list(map(int,input().split()))\n c.sort()\n left=0\n right=10**10\n pos=0\n while left<=right:\n  con=0\n  mid=(left+right)//2\n  nxt=c[0]+mid\n  for i in range(1,n):\n   if nxt<c[i]:\n    nxt=c[i]+mid\n   elif nxt>=c[i] and nxt<=c[i]+d:\n    nxt+=mid\n   else:\n    con=1\n    break\n  if con!=1:\n   pos=mid\n   left=mid+1\n  else:\n   right=mid-1\n left=0\n right=999999\n pos1=0\n #print(pos)\n while left<=right:\n  con=0\n  mid=(left+right)//2\n  l=len(str(mid))\n  b=['0']*(6-l)\n  b+=[str(mid)]\n  b=''.join(b)\n  nxt1=str(pos)+'.'+b\n  nxt1=float(nxt1)\n  nxt=c[0]+nxt1\n  for i in range(1,n):\n   if nxt<c[i]:\n    nxt=c[i]+nxt1\n   elif nxt>=c[i] and nxt<=c[i]+d:\n    nxt+=nxt1\n   else:\n    con=1\n    break\n  if con!=1:\n   pos1=nxt1\n   left=mid+1\n  else:\n   right=mid-1\n print(format(pos1,'.6f'))", "import sys\n\n\ndef fn(a, mid, d):\n b = []\n for i in range(n):\n  b.append(a[i] + d)\n t = 0.0\n for i in range(n):\n  if(a[i] <= t and t <= b[i]):\n   t += mid\n  elif(t <= b[i]):\n   t = (a[i] + mid)\n  else:\n   return False\n return True\n\n\nt = int(input())\nwhile t:\n n, d = list(map(int, sys.stdin.readline().split()))\n c = list(map(int, sys.stdin.readline().split()))\n c.sort()\n l = 0\n r = max(c)+d\n for i in range(100):\n  mid = (l + r) / 2\n  if(fn(c, mid, d)):\n   l = mid\n  else:\n   r = mid\n print(mid)\n t -= 1\n", "import sys\n\n\ndef fn(a, mid, d):\n b = []\n for i in range(n):\n  b.append(a[i] + d)\n t = 0.0\n for i in range(n):\n  if(a[i] <= t and t <= b[i]):\n   t += mid\n  elif(t <= b[i]):\n   t = (a[i] + mid)\n  else:\n   return False\n return True\n\n\nt = int(input())\nwhile t:\n n, d = list(map(int, sys.stdin.readline().split()))\n c = list(map(int, sys.stdin.readline().split()))\n c.sort()\n l = 0\n r = 10**18\n for i in range(100):\n  mid = (l + r) / 2\n  if(fn(c, mid, d)):\n   l = mid\n  else:\n   r = mid\n print(mid)\n t -= 1\n", "from sys import stdin\n\nreadline = stdin.readline\nresults = []\nfor _ in range(int(readline())):\n n, d = list(map(int, readline().split()))\n c = sorted(map(int, readline().split()))\n low, high = 0.0, 2e9\n while low + 1e-6 < high:\n  mid = 0.5 * (low + high)\n  elapsed, okay = 0.0, True\n  for start in c:\n   if elapsed > start + d:\n    okay = False\n    break\n   if elapsed < start:\n    elapsed = start\n   elapsed += mid\n  if okay:\n   low = mid\n  else:\n   high = mid\n results.append('{:.6f}'.format(low))\nprint('\\n'.join(results))\n", "t = int(input())\nfor _ in range(t):\n n, d = map(int, input().split())\n arr = list(map(int, input().split()))\n arr.sort()\n\n low, high = 0, arr[-1]+d\n while (high - low) > 0.0000005:\n  mid = (high + low)/2\n  time = arr[0] + mid\n  ans = True\n  for i in range(1, n):\n   if arr[i] > time:\n    time = arr[i]\n    time += mid\n   elif arr[i] <= time <= arr[i]+d:\n    time += mid\n   else:\n    ans = False\n    break\n  if ans:\n   low = mid\n  else:\n   high = mid\n\n print(low)", "t= int(input())\nfor _ in range(t):\n n,d = map(int,input().split())\n c = list(map(int,input().split()))\n c.sort()\n start = 0\n end = 10**12\n possible = True\n ans = None\n while start<=end:\n  mid = (start+end)//2\n  current = c[0]\n  for i in range(1,n):\n   next = current + mid\n   if next >= c[i] and next <= c[i] +d :\n    current = next\n    possible = True\n   elif next < c[i]:\n    current = c[i]\n    possible = True\n   else:\n    possible = False\n    break\n  if possible:\n   ans = mid\n   start = mid + 1\n  else:\n   end = mid-1\n\n start = ans\n end = ans+1\n possible = True\n while start <= end:\n  mid = (start + end) / 2\n  current = c[0]\n  for i in range(1, n):\n   next = current + mid\n   if next >= c[i] and next <= c[i] + d:\n    current = next\n    possible = True\n   elif next < c[i]:\n    current = c[i]\n    possible = True\n   else:\n    possible = False\n    break\n  if possible:\n   ans = mid\n   start = mid + 0.000001\n  else:\n   end = mid - 0.000001\n\n\n print(ans)", "t= int(input())\nfor _ in range(t):\n n,d = map(int,input().split())\n c = list(map(int,input().split()))\n c.sort()\n start = 0\n end = 10**12\n possible = True\n ans = None\n while start<=end:\n  mid = (start+end)//2\n  current = c[0]\n  for i in range(1,n):\n   next = current + mid\n   if next >= c[i] and next <= c[i] +d :\n    current = next\n    possible = True\n   elif next < c[i]:\n    current = c[i]\n    possible = True\n   else:\n    possible = False\n    break\n  if possible:\n   ans = mid\n   start = mid + 1\n  else:\n   end = mid-1\n\n start = ans\n end = ans+1\n possible = True\n while start <= end:\n  mid = (start + end) / 2\n  current = c[0]\n  for i in range(1, n):\n   next = current + mid\n   if next >= c[i] and next <= c[i] + d:\n    current = next\n    possible = True\n   elif next < c[i]:\n    current = c[i]\n    possible = True\n   else:\n    possible = False\n    break\n  if possible:\n   ans = mid\n   start = mid + 0.000001\n  else:\n   end = mid - 0.000001\n\n\n print(ans-0.0000001)", "def binary_search(arr, x):\n arr.sort()\n low = 0\n high = len(arr) - 1\n mid = 0\n while low <= high:\n\n  mid = low + (high-low)//2\n  if arr[mid] < x:\n   low = mid + 1\n  elif arr[mid] > x:\n   high = mid - 1\n  else:\n   return mid\n return -1\ndef ternary_search(l, r, key, ar):\n if (r >= l):\n  mid1 = l + (r - l) // 3\n  mid2 = r - (r - l) // 3\n  if (ar[mid1] == key):\n   return mid1\n  if (ar[mid2] == key):\n   return mid2\n  if (key < ar[mid1]):\n   return ternary_search(l, mid1 - 1, key, ar)\n  elif (key > ar[mid2]):\n   return ternary_search(mid2 + 1, r, key, ar)\n  else:\n   return ternary_search(mid1 + 1,\n         mid2 - 1, key, ar)\n return -1\ndef cheaker(c,d,val,n):\n st = c[0]\n for i in range(1,n):\n  if st+val < c[i]:\n   st = c[i]\n  elif st+val > c[i]+d:\n   return False\n  else:\n   st += val\n return True\n\ndef binary_search_answer(low,high,d,a,n,de):\n x=1\n p=0\n while(p!=d):\n  while((high - low )> x):\n   mid = (high+low)/2\n   if cheaker(a,de,mid,n):\n    low= mid\n   else:\n    high = mid\n  x/=10\n  p+=1\n return low\ndef __starting_point():\n for i in range(int(input())):\n  n,d= list(map(int,input().split()))\n  a=[int(X) for X in input().split()]\n  a.sort()\n  print(binary_search_answer(0,2*(10**9),7,a,n,d))\n\n__starting_point()", "def binary_search(arr, x):\n arr.sort()\n low = 0\n high = len(arr) - 1\n mid = 0\n while low <= high:\n\n  mid = low + (high-low)//2\n  if arr[mid] < x:\n   low = mid + 1\n  elif arr[mid] > x:\n   high = mid - 1\n  else:\n   return mid\n return -1\ndef ternary_search(l, r, key, ar):\n if (r >= l):\n  mid1 = l + (r - l) // 3\n  mid2 = r - (r - l) // 3\n  if (ar[mid1] == key):\n   return mid1\n  if (ar[mid2] == key):\n   return mid2\n  if (key < ar[mid1]):\n   return ternary_search(l, mid1 - 1, key, ar)\n  elif (key > ar[mid2]):\n   return ternary_search(mid2 + 1, r, key, ar)\n  else:\n   return ternary_search(mid1 + 1,\n         mid2 - 1, key, ar)\n return -1\ndef cheaker(c,d,val,n):\n st = c[0]\n for i in range(1,n):\n  if st+val < c[i]:\n   st = c[i]\n  elif st+val > c[i]+d:\n   return False\n  else:\n   st += val\n return True\n\ndef binary_search_answer(low,high,d,a,n,de):\n x=1\n p=0\n while(p!=d):\n  while((high - low )> x):\n   mid = (high+low)/2\n   if cheaker(a,de,mid,n):\n    low= mid\n   else:\n    high = mid\n  x/=10\n  p+=1\n return low\ndef __starting_point():\n for i in range(int(input())):\n  n,d= list(map(int,input().split()))\n  a=[int(X) for X in input().split()]\n  a.sort()\n  print(round(binary_search_answer(0,2*(10**9),7,a,n,d),10))\n# cook your dish here\n\n__starting_point()", "import sys\n\nfrom sys import stdin\nL,R=1,10**16\ndef ck(m):\n c=0\n for i,x in enumerate(l):\n  if c<x:c=x\n  if x+d<c:\n   return False \n  c+=m\n return True\ndef bs():\n  l,r=L,R\n  while l<r:\n   m=(l+r+1)//2\n   if ck(m):\n    l=m\n   else:\n    r=m-1\n  return l\n \nfor _ in range(int(input())):\n n,d=map(int,input().split())\n d*=10**6\n l=sorted(map(lambda x: int(x)*(10**6),sys.stdin.readline().strip().split()))\n x=bs()\n print(x/10**6)", "\n\nL,R=1,10**16\ndef ck(m):\n c=0\n for i,x in enumerate(l):\n  if c<x:c=x\n  if x+d<c:\n   return False \n  c+=m\n return True\ndef bs():\n  l,r=L,R\n  while l<r:\n   m=(l+r+1)//2\n   if ck(m):\n    l=m\n   else:\n    r=m-1\n  return l\n \nfor _ in range(int(input())):\n n,d=map(int,input().split())\n d*=10**6\n l=sorted(map(lambda x: int(x)*(10**6),input().split()))\n x=bs()\n print(x/10**6)", "\n\nL,R=1,10**16\ndef ck(m):\n c=0\n for i,x in enumerate(l):\n  if c<x:c=x\n  if x+d<c:\n   return False \n  c+=m\n return True\ndef bs():\n  l,r=L,R\n  while l<r:\n   m=(l+r+1)//2\n   if ck(m):\n    l=m\n   else:\n    r=m-1\n  return l\n \nfor _ in range(int(input())):\n n,d=map(int,input().split())\n d*=10**6\n l=sorted(map(lambda x: int(x)*(10**6),input().split()))\n x=bs()\n print(x/10**6)", "import sys\ninput = sys.stdin.readline\ntestcase = int(input())\ne = 0.0000005\n\ndef check(m):\n  curr = 0\n  for i in range(n):\n    if curr <= a[i]:\n      curr = a[i] + m\n    elif curr <= (a[i] + d):\n      curr = curr + m\n    else:\n      return False\n  return True\n\ndef bs(l, h):\n  m = (l + h) / 2\n  if check(m):\n    if (m + e) <= h and check(m + e):\n      return bs(m + e, h)\n    else:\n      return m\n  else:\n    return bs(l, m - e)\n\nfor _ in range(testcase):\n  n, d = list(map(int, input().split()))\n  a = list(map(int, input().split()))\n  a.sort()\n  print(bs(0, max(a) + d))", "from sys import stdin\n\nfor _ in range(int(stdin.readline())):\n N,D = list(map(int,stdin.readline().split()))\n _list = list(map(int,stdin.readline().split()))\n\n _list.sort()\n\n l=0\n r=2e9\n precision=1e-5\n\n for i in range(80):\n  m=(l+r)/2\n  possible=True\n  curr=0\n  for j in _list:\n   #print('curr={} m={} j={} possible={}'.format(curr,m,j,possible))\n   if j>curr:\n    curr=j\n   if curr+precision>j+D:\n    possible=0\n    break\n   curr+=m\n  if possible:\n   l=m\n  else:\n   r=m\n\n print(round(l,10))\n\n", "from sys import stdin\n\nfor _ in range(int(stdin.readline())):\n N,D = list(map(int,stdin.readline().split()))\n _list = list(map(int,stdin.readline().split()))\n\n _list.sort()\n\n l=0\n r=2e9\n precision=1e-5\n\n for i in range(50):\n  m=(l+r)/2\n  possible=True\n  curr=0\n\n  for j in _list:\n   #print('curr={} m={} j={} possible={}'.format(curr,m,j,possible))\n   if j>curr:\n    curr=j\n   if curr+precision>j+D:\n    possible=0\n    break\n   curr+=m\n  if possible:\n   l=m\n  else:\n   r=m\n\n print(round(l,10))\n\n", "from sys import stdin\n\nfor _ in range(int(stdin.readline())):\n N,D = list(map(int,stdin.readline().split()))\n _list = list(map(int,stdin.readline().split()))\n\n _list.sort()\n\n l=0\n r=2e9\n precision=1e-5\n\n for i in range(70):\n  m=(l+r)/2\n  possible=True\n  curr=0\n\n  for j in _list:\n   #print('curr={} m={} j={} possible={}'.format(curr,m,j,possible))\n   if j>curr:\n    curr=j\n   if curr+precision>j+D:\n    possible=0\n    break\n   curr+=m\n  if possible:\n   l=m\n  else:\n   r=m\n\n print(round(l,10))\n\n"]