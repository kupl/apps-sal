["str = input()\nl = len(str)\na = [0] * (2 * l)\npos = [[] for i in range(26)]\nfor i, c in enumerate(str):\n    t = ord(c) - ord('a')\n    a[i] = t\n    a[i + l] = t\n    pos[t].append(i)\nans = 0\nfor c in range(26):\n    cur = 0\n    for k in range(1, l):\n        cnt = [0] * 26\n        for i in pos[c]:\n            cnt[a[i + k]] += 1\n        cur = max(cur, len(list([x for x in cnt if x == 1])))\n    ans += cur\nprint(ans / l)\n", "str = input()\nl = len(str)\na = [0] * (2 * l)\npos = [[] for i in range(26)]\nfor i, c in enumerate(str):\n    t = ord(c) - ord('a')\n    a[i] = t\n    a[i + l] = t\n    pos[t].append(i)\nans = 0\nfor c in range(26):\n    cur = 0\n    for k in range(1, l):\n        cnt = [0] * 26\n        for i in pos[c]:\n            cnt[a[i + k]] += 1\n        tot = 0\n        for i in cnt:\n            if i == 1:\n                tot += 1\n        cur = max(cur, tot)\n    ans += cur\nprint(ans / l)\n", "str = input()\nl = len(str)\na = [0] * (2 * l)\npos = [[] for i in range(26)]\nfor i, c in enumerate(str):\n    t = ord(c) - ord('a')\n    a[i] = t\n    a[i + l] = t\n    pos[t].append(i)\nans = 0\nfor c in range(26):\n    cur = 0\n    for k in range(1, l):\n        cnt = [0] * 26\n        for i in pos[c]:\n            cnt[a[i + k]] += 1\n        cur = max(cur, len([1 for x in cnt if x == 1]))\n    ans += cur\nprint(ans / l)\n", "\n\ns = input()\nl = len(s)\n\ninstances = [[] for x in range(26)]\n\ns_i = [ord(c) - 97 for c in s]\n\n\nfor i in range(l):\n    instances[s_i[i]].append(i)\n\n\n\n#sum_probability += len * probability\n#probability = sum_probabilty\n\nsum_probability = 0\n\nfor c in range(0,26):\n    if not instances[c]:\n        continue\n    if len(instances[c]) == 0:\n        sum_probability += 1\n        continue\n    max_probability = 0\n    for guess in range(1, l):\n        num_seen = [0]*26\n        probability = 0\n        for index in instances[c]:\n            num_seen[s_i[(index+guess)%l]] += 1\n        for x in num_seen:\n            if x == 1:\n                probability += 1\n        max_probability = max(max_probability, probability)\n    sum_probability += max_probability\n\n\n\n\n\nprint(sum_probability/l)", "s = input()\nn = len(s)\nsett = {}\n\nfor i in range(n):\n    if s[i] not in sett:\n        sett[s[i]] = []\n    sett[s[i]].append(s[i + 1:] + s[:i])\nans = 0\n\n# ao fazer sett.items(), \u00e9 realizado unpack da chave,valor para k,l, respectivamente\nfor k, l in list(sett.items()):\n    tmp = 0\n    for j in range(n - 1):\n        \n        seen, sett1 = set(), set()\n        \n        for i in range(len(l)):\n            \n            if l[i][j] in sett1:\n                sett1.remove(l[i][j])\n            elif l[i][j] not in seen: \n                sett1.add(l[i][j])\n                seen.add(l[i][j])\n                \n        tmp = max(tmp, len(sett1))\n    tmp /= n\n    ans += tmp\n\n# precisao 10^6\nprint('{:.7}'.format(ans))\n\n", "def func(a):\n    b=[0]*26\n    for i in range(len(a)):\n        b[ord(a[i])-ord(\"a\")]+=1\n    c=0\n    for i in b:\n        if i==1:\n            c=c+1\n    return c\n\n\n\ns=input()\nn=len(s)\na={}\nfor i in range(n):\n    a[s[i]]=[]\nfor i in range(n):\n    a[s[i]].append(i)\nc=0\nfor i in a:\n    if len(a[i])==1:\n        c=c+1\n    else:\n        e=[]\n        for j in range(n):\n            b=[]\n            d=0\n            for k in a[i]:\n                b.append((s[(k+j)%n]))\n            d=d+func(b)\n            e.append(d)\n        c=c+max(e)\n    \nprint(c/n)"]