["# cook your dish here\ndef modular_pow(base, exponent, modulus):\n result = 1\n while exponent > 0:\n  if(exponent %2 == 1):\n   result = (result * base) % modulus\n  exponent = exponent//2\n  base = (base * base)%modulus\n return result\ndef passesMillerRabinTest(n, a):\n s = 0\n d = n-1\n while(d%2 == 0):\n  s += 1\n  d >>= 1\n x = modular_pow(a, d, n)\n if(x == 1 or x == n-1):\n  return True\n for ss in range(s - 1):\n  x = (x*x)%n\n  if(x == 1):\n   return False\n  if(x == n-1):\n   return True\n return False\nprimeList = (2, 3,5,7,11,13,17,19, 23,29, 31,37)\ndef isPrime(n):\n for p in primeList:\n  if n%p == 0:\n   return n == p\n for p in primeList:\n  if passesMillerRabinTest(n, p) == False:\n   return False\n return True\n \nt = int(input())\nfor tt in range(t):\n n = int(input())\n if(n == 2):\n  print(2)\n  continue\n if n%2 == 0:\n  n -= 1\n while True:\n  if(isPrime(n)):\n   print(n)\n   break\n  n -= 2\n"]