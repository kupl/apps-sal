["#-*- coding:utf-8 -*-\n\nimport sys\n\n\n# class Point:\n#     def __init__(self, x, y):\n#         self.x = x\n#         self.y = y\n\n#     def mul(self, k):\n#         return Point(k * self.x, k * self.y)\n\n#     def __add__(self, other):\n#         return Point(self.x + other.x, self.y + other.y)\n\n#     def __sub__(self, other):\n#         return self + (-other)\n\n#     def __neg__(self):\n#         return Point(-self.x, -self.y)\n\n#     def __eq__(self, other):\n#         return self.x == other.x and self.y == other.y\n\n#     def __getitem__(self, index):\n#         return (self.x, self.y)[index]\n\n#     def __str__(self):\n#         return \"(%d;%d)\" % (self.x, self.y)\n\n\nDIRS = dict(\n U=(0, 1),\n D=(0, -1),\n R=(1, 0),\n L=(-1, 0)\n)\nKOEF = 0.2\n\n\ndef div(a, b):\n return round(float(a) / b, 1)\n\n\n# class Moving:\n#     def __init__(self, x, y, dir):\n#         self.p = Point(x, y)\n#         self.dir = Point(*DIRS[dir.upper()])\n\n#     def collide(self, other):\n#         times = []\n#         for coord in range(2):\n#             d = abs(self.p[coord] - other.p[coord])\n#             d2 = abs((self.p + self.dir.mul(KOEF) - other.p)[coord])\n#             d3 = abs((other.p + other.dir.mul(KOEF) - self.p)[coord])\n#             d_next = abs((self.p + self.dir.mul(KOEF) - (other.p + other.dir\u00a0\u00a0\u00a0\u00a0.mul(KOEF)))[coord])\n#             if d2 > d or d3 > d:\n#                 return None\n\n#             speed = abs(d_next - d)\n#             if speed == 0:\n#                 if self.p[coord] != other.p[coord]:\n#                     return None\n#                 continue\n#             times.append( div(d, speed / KOEF) )\n\n#         if len(times) == 2 and times[0] != times[1]:\n#             return\n#         return times[0]\n\n\ndef collide_coord(ex, edx, x, dx):\n d = abs(ex - x)\n d2 = abs(ex + edx - x)\n d3 = abs(ex - x - dx)\n if d2 > d or d3 > d:\n  return False\n\n d_next = abs(ex + edx * KOEF - x - dx * KOEF)\n speed = abs(d_next - d)\n if speed == 0:\n  if ex != x:\n   return\n  return \"all\" # all\n else:\n  return div(d, speed / KOEF)\n\n\ndef main():\n t = int(input())\n for _ in range(t):\n  ex, ey, dir = sys.stdin.readline().strip().split()\n  ex = int(ex)\n  ey = int(ey)\n  edx, edy = DIRS[dir]\n\n  n = int(sys.stdin.readline())\n  min_time = float(\"+inf\")\n  for _ in range(n):\n   x, y, dir = sys.stdin.readline().strip().split()\n   x = int(x)\n   y = int(y)\n   dx, dy = DIRS[dir]\n\n   tx = collide_coord(ex, edx, x, dx)\n   if tx is False:\n    continue\n   ty = collide_coord(ey, edy, y, dy)\n   if ty is False:\n    continue\n\n   if tx == \"all\":\n    min_time = min(min_time, ty)\n   elif ty == \"all\":\n    min_time = min(min_time, tx)\n   elif tx == ty:\n    min_time = min(min_time, tx)\n\n  print(min_time if min_time < 1000000 else \"SAFE\")\n\n\ndef __starting_point():\n main()\n\n__starting_point()", "# codechef - easy - collide\n\ndirTable = {}\ndirTable[\"R\"] = (1,0)\ndirTable[\"L\"] = (-1,0)\ndirTable[\"D\"] = (0,-1)\ndirTable[\"U\"] = (0,1)\n\ndef readCoordinates():\n strX, strY, strDir = input().split()\n x = int(strX)\n y = int(strY)\n dx,dy = dirTable[strDir]\n return x,y, dx,dy\n\n\nt = int(input())\nfor test in range(t):\n xe, ye, dxe, dye = readCoordinates()\n n = int(input())\n shortest = 1000\n for i in range(n):\n  xa, ya, dxa, dya = readCoordinates()\n  xa -= xe\n  ya -= ye\n  dxa -= dxe \n  dya -= dye\n\n  if dxa==0 and dya==0:\n   #print \"Same direction, pass\"\n   continue\n  elif dxa==0:\n   if xa!=0:\n    #print \"parallel, pass\"\n    continue\n   else:\n    time = -ya*1.0/dya\n    #print time\n    if 0<time<shortest:\n     shortest = time\n  elif dya==0:\n   if ya!=0:\n    #print \"parallel Y\"\n    continue\n   else:\n    time = -xa*1.0/dxa\n    #print time\n    if time>0 and time<shortest:\n     shortest = time\n  else:\n   # dx,dy both !=0\n   tx = -xa*1.0/dxa\n   ty = -ya*1.0/dya\n   #print tx,ty\n   if tx==ty and 0<tx<shortest:\n    shortest = tx\n if shortest<1000:\n  print(\"%.1f\" % shortest)\n else:\n  print(\"SAFE\")\n\n \n  \n  \n  \n"]