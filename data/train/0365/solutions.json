["class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        chrLoc = defaultdict(list)\n        ct = 0\n        md = 1000000007\n        l = len(s)\n        for i, c in enumerate(s):\n            chrLoc[c].append(i)\n        \n        for c in chrLoc:\n            locs = [-1] + chrLoc[c] + [l]\n            loc_ct = len(locs)\n            #print(c, locs)\n            for i in range(1, loc_ct-1): \n                leftWingSpan = locs[i] - locs[i-1] #i-mostRecently + 1\n                rightWingSpan = locs[i+1] - locs[i]  # l-i\n                ct += ((leftWingSpan % md) * (rightWingSpan % md)) % md\n                #print(leftWingSpan,rightWingSpan, c, i)\n                ct %= md \n                \n        return ct", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        dic = {}\n        for i in range(len(s)):\n            l = dic.get(s[i],[-1])\n            l.append(i)\n            dic[s[i]] =l\n        res = 0\n        for j in dic:\n            dic[j].append(len(s))\n            for i in range(1, len(dic[j])-1):\n                res+= (dic[j][i] - dic[j][i-1])*(dic[j][i+1]-dic[j][i])\n        return res%(10**9+7)", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        if not s:\n            return 0\n        \n        ind = defaultdict(list)\n        for i, ch in enumerate(s):\n            ind[ch].append(i)\n        \n        res = 0\n        for seq in ind.values():\n            for i, index in enumerate(seq):\n                len_left, len_right = 0, 0\n                if i > 0:\n                    len_left = index - seq[i - 1] - 1\n                else:\n                    len_left = index\n                \n                if i + 1 < len(seq):\n                    len_right = seq[i + 1] - index - 1\n                else:\n                    len_right = len(s) - index - 1\n                \n                res += ((len_left + 1) * (len_right + 1))\n        \n        return res", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        n = len(s)\n        dbefore = {}\n        dafter = {}\n        before = [-1] * n\n        after = [n] * n\n        for i in range(n):\n            before[i] = dbefore.get(s[i], -1)\n            after[n-1-i] = dafter.get(s[n-1-i], n)\n            dbefore[s[i]] = i\n            dafter[s[n-1-i]] = n-1-i\n        c = 10 ** 9 + 7\n        res = 0\n        for i in range(n):\n            res += (i-before[i])*(after[i]-i)\n            res %= c\n        return res", "# from collections import defaultdict\n# class Solution(object):\n#     def uniqueLetterString(self, s):\n#         \\\"\\\"\\\"\n#         :type S: str\n#         :rtype: int\n#         \\\"\\\"\\\"\n#         dic = defaultdict(list)\n#         for i,letter in enumerate(s):\n#             dic[letter].append(i)\n        \n#         pos = {letter:0 for letter in dic.keys()}\n#         res = 0\n#         for i,letter in enumerate(s):\n#             idx = pos[letter]\n            \n#             if idx - 1 >= 0:\n#                 left = dic[letter][idx - 1] + 1\n#             else:\n#                 left = 0\n#             if idx + 1 <= len(dic[letter]) - 1:\n#                 right = dic[letter][idx + 1] - 1\n#             else:\n#                 right = len(s) - 1\n            \n#             res += (i - left + 1) * (right - i + 1)\n#             pos[letter] += 1\n        \n#         return res % (10 ** 9 +7)\nfrom collections import defaultdict\nclass Solution(object):\n    def uniqueLetterString(self,S):\n        # write your code in Python 3.6\n        dictionary = dict()\n\n        for i in range(len(S)):\n            if dictionary.get(S[i]):\n                dictionary[S[i]].append(i)\n            else:\n                dictionary[S[i]] = [i]\n        position = dict()\n        for letter in dictionary.keys():\n            position[letter]=0\n        result = 0\n        for index, letter in enumerate(S):\n            i = position[letter]\n            if i-1>=0:\n                l = dictionary[letter][i-1]+1\n            else:\n                l=0\n            if i+1 <= len(dictionary[letter])-1:\n                r = dictionary[letter][i+1]-1\n            else:\n                r = len(S) - 1\n\n            result += ((index-l+1) * (r-index +1)) % 1000000007\n            position[letter]+=1\n        return result % 1000000007", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        ans, d = 0, defaultdict(lambda: (-1, -1))\n        for i, c in enumerate(s):\n            ans += (d[c][1]-d[c][0])*(i-d[c][1])\n            d[c] = (d[c][1], i)\n        for c, pre in d.items():\n            ans += (d[c][1]-d[c][0])*(len(s)-d[c][1])\n        return ans", "# from collections import defaultdict\n# class Solution(object):\n#     def uniqueLetterString(self, s):\n#         \\\"\\\"\\\"\n#         :type S: str\n#         :rtype: int\n#         \\\"\\\"\\\"\n#         dic = defaultdict(list)\n#         for i,letter in enumerate(s):\n#             dic[letter].append(i)\n        \n#         pos = {letter:0 for letter in dic.keys()}\n#         res = 0\n#         for i,letter in enumerate(s):\n#             idx = pos[letter]\n            \n#             if idx - 1 >= 0:\n#                 left = dic[letter][idx - 1] + 1\n#             else:\n#                 left = 0\n#             if idx + 1 <= len(dic[letter]) - 1:\n#                 right = dic[letter][idx + 1] - 1\n#             else:\n#                 right = len(s) - 1\n            \n#             res += (i - left + 1) * (right - i + 1)\n#             pos[letter] += 1\n        \n#         return res % (10 ** 9 +7)\nfrom collections import defaultdict\nclass Solution(object):\n    def uniqueLetterString(self,S):\n        # write your code in Python 3.6\n        dictionary = dict()\n    \n        for i in range(len(S)):\n            if dictionary.get(S[i]):\n                dictionary[S[i]].append(i)\n            else:\n                dictionary[S[i]] = [i]\n        position = dict()\n        for letter in dictionary.keys():\n            position[letter]=0\n        result = 0\n        for index, letter in enumerate(S):\n            i = position[letter]\n            if i-1>=0:\n                l = dictionary[letter][i-1]+1\n            else:\n                l=0\n            if i+1 <= len(dictionary[letter])-1:\n                r = dictionary[letter][i+1]-1\n            else:\n                r = len(S) - 1\n\n            result += ((index-l+1) * (r-index +1)) % 1000000007\n            position[letter]+=1\n        return result % 1000000007", "class Solution:\n    \n    \n\n    \n    def uniqueLetterString(self, s: str) -> int:\n        result = 0\n        mat = collections.defaultdict(list)\n        for i, ch in enumerate(s):\n            if mat[ch]:\n                mat[ch].append(i)\n            else:\n                mat[ch] = [i]\n                \n        def helperF(ranges, n):\n            res = 0\n            i = 0\n            while i < len(ranges):\n                elem = ranges[i]\n                lef = None\n                right = None\n                if i > 0:\n                    left = ranges[i] - ranges[i - 1]\n                else:\n                    left = ranges[i] + 1\n                if i != len(ranges) - 1:\n                    right = ranges[i + 1] - ranges[i]\n                else:\n                    right = n - ranges[i]\n                res += left * right\n                i += 1\n            return res\n                \n                \n        for ch in mat:\n            result += helperF(mat[ch], len(s))\n        return result", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        \n        ind = collections.defaultdict(list)\n        for i,v in enumerate(s): ind[v].append(i)\n        \n        ans , n = 0, len(s)\n        for i,v in ind.items():\n            temp = 0\n            for k,index in enumerate(v):\n                if k==0 and k==len(v)-1: \n                    temp+=(index+1)*(n-index)\n                elif k==0: \n                    temp+=(index+1)*(v[k+1]-index)\n                elif k>0 and k<len(v)-1: \n                    temp+=(index-v[k-1])*(v[k+1]-index)\n                elif k==len(v)-1: \n                    temp+=(index-v[k-1])*(n-index)\n            ans+=temp\n        \n        return ans", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        \n        ind = collections.defaultdict(list)\n        for i,v in enumerate(s): ind[v].append(i)\n        \n        ans , n = 0, len(s)\n        for i,v in ind.items():\n            temp = 0\n            # print(i,v, temp)\n            for k,index in enumerate(v):\n                if k==0 and k==len(v)-1: \n                    temp+=(index+1)*(n-index)\n                elif k==0: \n                    temp+=(index+1)*(v[k+1]-index)\n                elif k>0 and k<len(v)-1: \n                    temp+=(index-v[k-1])*(v[k+1]-index)\n                elif k==len(v)-1: \n                    temp+=(index-v[k-1])*(n-index)\n                # print(k,index,temp)\n            ans+=temp\n            # print('-----------------------')\n        \n        return ans", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        n = len(s)\n        mod = 10**9+7\n        index = defaultdict(deque)\n        for i,c in enumerate(s):\n            index[c].append(i)\n        for c in index:\n            index[c].append(n)\n            index[c].appendleft(-1)\n        ans = 0\n        for c in list(index.keys()):\n            for i in range(1,len(index[c])-1):\n                ans = (ans + (index[c][i]-index[c][i-1]) * (index[c][i+1]-index[c][i])) % mod\n                \n        return ans\n", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        '''\n        For each 'char' in string, count the number of substrings contains this 'char' and only one 'char'.\n        Time: O(n)\n        Space: O(n)\n        '''\n        def count(c, s):\n            n = len(s)\n            idxes = []\n            for i in range(n):\n                if s[i] == c:\n                    idxes.append(i)\n            total = 0\n            for i, idx in enumerate(idxes):\n                left = idx - 0 + 1\n                right = n - 1 - idx + 1\n                if i:\n                    left = idx - idxes[i-1]\n                if i < len(idxes) - 1:\n                    right = idxes[i+1] - idx\n                total += left * right\n            return total\n        \n        chars = set(s)\n        ans = 0\n        for c in chars:\n            ans += count(c, s)\n            ans = ans % (10 ** 9 + 7)\n        return ans", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        index = {char:[-1]+[ic for ic,char0 in enumerate(s) if char == char0]+[len(s)] for char in set(s)}\n        return sum([(index[char][jj]-index[char][jj-1])*(index[char][jj+1]-index[char][jj]) for char in index for jj in range(1,len(index[char])-1)])", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        \n        last = collections.defaultdict(int)\n        count = 0\n        for i, char in enumerate(s):\n            # print(last)\n            for comp in last:\n                if comp != char:\n                    count +=  last[comp][1] \n                else:\n                    count += i-last[comp][0]\n                    last[char] = (i, i-last[comp][0])\n            if char not in last:\n                count += i+1\n                last[char] = (i, i+1)\n        return count\n                \n            \n                \n            \n            \n", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        if not s: return 0\n        \n        dp = collections.defaultdict(list)\n        for index, val in enumerate(s):\n            dp[val].append(index)\n        \n        ans = 0\n        for A in list(dp.values()):\n            A = [-1] + A + [len(s)]\n            \n            for i in range(1, len(A)-1):\n                ans += (A[i] - A[i-1]) * (A[i+1]-A[i])\n                \n        return ans % (10**9 + 7)\n", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        index = collections.defaultdict(list)\n        for i, c in enumerate(s):\n            index[c].append(i)\n        \n        ans = 0\n        for a in index.values():\n            a = [-1] + a + [len(s)]\n            for i in range(1, len(a) - 1):\n                ans += (a[i] - a[i-1]) * (a[i+1] - a[i])\n        return ans % (10**9 + 7)", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        dic=collections.defaultdict(list)\n        for i ,e in enumerate(s):\n            dic[e].append(i)\n            \n        for k in dic.keys():\n            dic[k].append(len(s))\n            dic[k].insert(0,-1)\n            \n        res=0\n        for v in dic.values():\n            for i in range(1,len(v)-1):\n                res+=((v[i]-v[i-1])*(v[i+1]-v[i]))%(10**9+7)\n                \n        return res", "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        mod = 1000000007\n    \n        n = len(s)\n\n        char_locs = defaultdict(list)\n        for i in range(n):\n            c = s[i]\n            if not char_locs[c]: char_locs[c].append(-1)\n            char_locs[c].append(i)\n\n\n        ans = 0  \n        for c in char_locs:\n            char_locs[c].append(n)\n            indices = char_locs[c]\n\n            for i in range(1, len(indices)-1):\n                before = indices[i] - indices[i-1]\n                after = indices[i+1] - indices[i]\n\n                ans = (ans + before*after) % mod\n\n        return ans"]