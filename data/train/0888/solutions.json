["def search(arr, lenl, val):\r\n    s = 0\r\n    l = lenl - 1\r\n\r\n    total = 0\r\n\r\n    while (s <= l):\r\n        m = int((s + l) / 2)\r\n\r\n        if (arr[m] <= val):\r\n            total = m + 1\r\n            s = m + 1\r\n\r\n        else:\r\n            l = m - 1\r\n\r\n    return total\r\n\r\n\r\ndef kmpsearch(string, lps):\r\n    lis = []\r\n    lens = len(string)\r\n    lensh = lens // 2\r\n\r\n    l = 0\r\n    i = 0\r\n    while i < lens:\r\n        if string[i] == pat[l]:\r\n            l += 1\r\n            i += 1\r\n        elif l > 0:\r\n            l = lps[l - 1]\r\n        else:\r\n            i += 1\r\n\r\n        if l == lenp:\r\n            if i - l < lensh:\r\n                lis.append(i - l)\r\n\r\n            l = lps[l - 1]\r\n\r\n    return lis\r\n\r\n\r\ndef kmp(pat, lenp):\r\n\r\n    lps = [0]*(lenp)\r\n    l = 0\r\n    i = 1\r\n\r\n    while i < lenp:\r\n        if pat[i] == pat[l]:\r\n            l += 1\r\n            lps[i] = l\r\n            i += 1\r\n        elif l > 0:\r\n            l = lps[l-1]\r\n        else:\r\n            lps[i] = 0\r\n            i += 1\r\n\r\n    return lps\r\n\r\n\r\n\r\nkeyword = input()\r\npat = input()\r\nq = int(input())\r\n\r\nlenk = len(keyword)\r\nlenp = len(pat)\r\n\r\nk = keyword * 2\r\nlis = kmpsearch(k, kmp(pat, lenp))\r\nlenl = len(lis)\r\n\r\nfor _ in range(q):\r\n    n = int(input())\r\n    count = 0\r\n\r\n    q = n // lenk\r\n    r = n % lenk\r\n\r\n    count += search(lis, lenl, r - lenp)\r\n\r\n    if q >= 1:\r\n        count += search(lis, lenl, lenk + r - lenp)\r\n\r\n    if q >= 2:\r\n        count += (q - 1)*lenl\r\n\r\n    print(count)\r\n    \r\n", "def search(arr, lenl, val):\n    s = 0\n    l = lenl - 1\n\n    total = 0\n\n    while (s <= l):\n        m = int((s + l) / 2)\n\n        if (arr[m] <= val):\n            total = m + 1\n            s = m + 1\n\n        else:\n            l = m - 1\n\n    return total\n\n\ndef kmpsearch(string, lps):\n    lis = []\n    lens = len(string)\n    lensh = lens // 2\n\n    l = 0\n    i = 0\n    while i < lens:\n        if string[i] == pat[l]:\n            l += 1\n            i += 1\n        elif l > 0:\n            l = lps[l - 1]\n        else:\n            i += 1\n\n        if l == lenp:\n            if i - l < lensh:\n                lis.append(i - l)\n\n            l = lps[l - 1]\n\n    return lis\n\n\ndef kmp(pat, lenp):\n\n    lps = [0]*(lenp)\n    l = 0\n    i = 1\n\n    while i < lenp:\n        if pat[i] == pat[l]:\n            l += 1\n            lps[i] = l\n            i += 1\n        elif l > 0:\n            l = lps[l-1]\n        else:\n            lps[i] = 0\n            i += 1\n\n    return lps\n\n\n\nkeyword = input()\npat = input()\nq = int(input())\n\nlenk = len(keyword)\nlenp = len(pat)\n\nk = keyword * 2\nlis = kmpsearch(k, kmp(pat, lenp))\nlenl = len(lis)\n\nfor _ in range(q):\n    n = int(input())\n    count = 0\n\n    q = n // lenk\n    r = n % lenk\n\n    count += search(lis, lenl, r - lenp)\n\n    if q >= 1:\n        count += search(lis, lenl, lenk + r - lenp)\n\n    if q >= 2:\n        count += (q - 1)*lenl\n\n    print(count)", "def kmp(s, t, lps):\r\n    n = len(s)\r\n    m = len(t)\r\n    count = [0 for x in range(n)]\r\n    i = 0\r\n    j = 0\r\n    while i < n:\r\n        count[i] = count[i-1]\r\n        if t[j] == s[i]:\r\n            i += 1\r\n            j += 1\r\n        if j == m:\r\n            count[i-1] += 1\r\n            j = lps[j-1]\r\n        elif i < n and t[j] != s[i]:\r\n            if j != 0:\r\n                j = lps[j-1]\r\n            else:\r\n                i += 1\r\n    return count\r\n\r\n\r\ndef lpsa(t, m):\r\n    l = 0\r\n    lps = [0 for i in range(m)]\r\n    i = 1\r\n    while i < m:\r\n        if t[i] == t[l]:\r\n            l += 1\r\n            lps[i] = l\r\n            i += 1\r\n        else:\r\n            if l != 0:\r\n                l = lps[l-1]\r\n            else:\r\n                lps[i] = 0\r\n                i += 1\r\n    return lps\r\n\r\n\r\ns = input()\r\nt = input()\r\nn = len(s)\r\nm = len(t)\r\nlps = lpsa(t, m)\r\none = kmp(s, t, lps)[-1]\r\ncount = kmp(s+s, t, lps)\r\ntwo = count[-1]\r\nthree = two-(2*one)\r\nfor _ in range(int(input())):\r\n    q = int(input())\r\n    v = q//n\r\n    if v:\r\n        ans = v*one + (v-1)*three\r\n        e = q % n\r\n        ans += count[n-1+e]-count[n-1]\r\n    else:\r\n        e = q % n\r\n        ans = count[e-1]\r\n    print(ans)\r\n", "def kmp(s,t,lps):\n    \n    n=len(s)\n    m=len(t)\n    count=[0 for x in range(n)]\n    i=0\n    j=0\n    while i<n:\n        count[i]=count[i-1]\n        if t[j]==s[i]:\n            i+=1\n            j+=1\n        if j==m:\n            count[i-1]+=1\n            j=lps[j-1]\n        elif  i<n and t[j]!=s[i]:\n            if j!=0:\n                j=lps[j-1]\n            else:\n                i+=1\n    return count\n            \n            \n\n\ndef lpsa(t,m):\n    l=0\n    lps=[0 for i in range(m)]\n    i=1\n    while i<m:\n        if t[i] ==t[l]:\n            l+=1\n            lps[i]=l\n            i+=1\n        else:\n            if l!=0:\n                l=lps[l-1]\n            else:\n                lps[i]=0\n                i+=1\n    return lps\n\n\ns=input()\nt=input()\nn=len(s)\nm=len(t)\nlps=lpsa(t,m)\none=kmp(s,t,lps)[-1]\ncount=kmp(s+s,t,lps)\ntwo=count[-1]\nthree=two-(2*one)\n\nfor _ in range(int(input())):\n    q=int(input())\n    v=q//n\n    if v:\n        ans=v*one +(v-1)*three\n        e=q%n\n        ans+=count[n-1+e]-count[n-1]\n    else:\n        e=q%n\n        ans=count[e-1]\n    print(ans)", "def kmp(s,t,lps):\n    \n    n=len(s)\n    m=len(t)\n    count=[0 for x in range(n)]\n    i=0\n    j=0\n    while i<n:\n        count[i]=count[i-1]\n        if t[j]==s[i]:\n            i+=1\n            j+=1\n        if j==m:\n            count[i-1]+=1\n            j=lps[j-1]\n        elif  i<n and t[j]!=s[i]:\n            if j!=0:\n                j=lps[j-1]\n            else:\n                i+=1\n    return count\n            \n            \n\n\ndef lpsa(t,m):\n    l=0\n    lps= [0 for i in range(m)]\n    i=1\n    while i<m:\n        if t[i] ==t[l]:\n            l+=1\n            lps[i]=l\n            i+=1\n        else:\n            if l!=0:\n                l=lps[l-1]\n            else:\n                lps[i]=0\n                i+=1\n    return lps\ns=input()\nt=input()\nn=len(s)\nm=len(t)\nlps=lpsa(t,m)\none=kmp(s,t,lps)[-1]\ncount=kmp(s+s,t,lps)\ntwo=count[-1]\nthree=two-(2*one)\nfor _ in range(int(input())):\n    q=int(input())\n    v=q//n\n    if v:\n        ans=v*one +(v-1)*three\n        e=q%n\n        ans+=count[n-1+e]-count[n-1]\n    else:\n        e=q%n\n        ans=count[e-1]\n    print(ans)\n    # if one:\n    #     if q>n:\n    #         hh=q//n\n    #         i=0\n    #         for i in range(hh):\n    #             ans+=one\n    #     print(ans)\n    # elif two:\n    #     hh=q//(n+n)\n    #     i=0\n    #     for i in range(hh):\n    #         ans+=two\n    #     print(ans)\n    # elif three:\n    #     hh=q//(n+n+n)\n    #     i=0\n    #     for i in range(hh):\n    #         ans+=three\n    #     print(ans)\n    # else:\n    #     print(0)\n    # S=''\n    # if q<n:\n    #     for i in range(q):\n    #         S+=s[i]\n    #     kmp(S,t,lps)\n       \n    # elif q==n:\n    #     kmp(s,t,lps)\n        \n    # elif q%n==0:\n    #     tt=q//n\n    #     for i in range(tt):\n    #         S+=s\n    #     kmp(S,t,lps)\n        \n    # elif q%n!=0:\n    #     temp=0\n    #     while temp<q:\n    #         temp+=n\n    #     temp=temp-n\n    #     tem=temp//n\n    #     for i in range(tem):\n    #         S+=s\n          \n    #     h=q-temp\n    #     for i in range(h):\n    #         S+=s[i]\n    #     kmp(S,t,lps)\n        \n\n\n      \n\n\n"]