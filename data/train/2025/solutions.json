["def main():\n    n = int(input())\n    result = []\n    for i in range(2, n + 1):\n        j = 2\n        while j * j <= i:\n            if i % j == 0:\n                break\n            j += 1\n        else:\n            j = i\n            while j <= n:\n                result.append(j)\n                j *= i\n    \n    print(len(result))\n    print(' '.join(str(i) for i in result))\n    \n    \n    \nmain()\n", "n = int(input())\n\ndef is_prime(x):\n    if x == 2:\n        return True\n    if x == 1 or x % 2 == 0:\n        return False\n    i = 3\n    while i * i <= x:\n        if x % i == 0:\n            return False\n        i += 1\n    return True\n\nans = []\nfor i in range(2, n + 1):\n    if is_prime(i):\n        j = i\n        while j <= n:\n            ans.append(j)\n            j *= i\n\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "n = int(input())\n\np = [True for _ in range(n + 1)]\n\nl = []\n\nfor i in range(2, n + 1):\n    if not p[i]:\n        continue\n    for j in range(i, n + 1, i):\n        p[j] = False\n    \n    a = i\n    while a <= n:\n        l.append(a)\n        a *= i\n\nprint(len(l))\nfor i in l:\n    print(i, end=\" \")\nprint()", "import math\nimport array\ndef is_prime(x):\n    i = 2\n    while(i <= math.sqrt(x)):\n        if(x % i == 0):\n            return False\n        i = i + 1\n    return True\nprime = [False for c in range(1000)]\nn = int(input())\ni = 2\nanswer = 0\nwhile(i <= n):\n    if(prime[i - 1] == True):\n        i = i + 1\n        continue\n    if(is_prime(i)):\n        answer = answer + 1\n        prime[i - 1] = True\n        j = i*i\n        while(j <= n):\n            prime[j - 1] = True\n            answer = answer + 1\n            j = j * i\n    i = i + 1\ni = 2\nprint(answer)\nwhile(i <= n):\n    if(prime[i - 1]):\n        print(i, end = ' ')\n    i = i + 1\n    \n        \n                \n        \n        \n", "import math\nimport array\ndef is_prime(x):\n    i = 2\n    while(i <= math.sqrt(x)):\n        if(x % i == 0):\n            return False\n        i = i + 1\n    return True\nprimel = [0 for c in range(1000)]\nprime = array.array('i', primel)\nn = int(input())\ni = 2\nanswer = 0\nwhile(i <= n):\n    if(prime[i - 1] == 1):\n        i = i + 1\n        continue\n    if(is_prime(i)):\n        answer = answer + 1\n        prime[i - 1] = 1\n        j = i*i\n        while(j <= n):\n            prime[j - 1] = 1\n            answer = answer + 1\n            j = j * i\n    i = i + 1\ni = 2\nprint(answer)\nwhile(i <= n):\n    if(prime[i - 1]):\n        print(i, end = ' ')\n    i = i + 1\n    \n        \n                \n        \n        \n", "import math\nimport array\ndef is_prime(x):\n    i = 2\n    while(i <= math.sqrt(x)):\n        if(x % i == 0):\n            return False\n        i = i + 1\n    return True\nanswer_list = []\nprimel = [0 for c in range(1000)]\nprime = array.array('i', primel)\nn = int(input())\ni = 2\nanswer = 0\nwhile(i <= n):\n    if(prime[i - 1] == 1):\n        i = i + 1\n        continue\n    if(is_prime(i)):\n        answer = answer + 1\n        answer_list.append(i)\n        prime[i - 1] = 1\n        j = i*i\n        while(j <= n):\n            prime[j - 1] = 1\n            answer = answer + 1\n            answer_list.append(j)\n            j = j * i\n    i = i + 1\nprint(answer)\nfor x in answer_list:\n    print(x, end = ' ')\n    \n        \n                \n        \n        \n", "import math\nimport array\ndef is_prime(x):\n    i = 2\n    while(i <= math.sqrt(x)):\n        if(x % i == 0):\n            return False\n        i = i + 1\n    return True\nanswer_list = []\nn = int(input())\ni = 2\nanswer = 0\nwhile(i <= n):\n    if(is_prime(i)):\n        answer = answer + 1\n        answer_list.append(i)\n        j = i*i\n        while(j <= n):\n            answer = answer + 1\n            answer_list.append(j)\n            j = j * i\n    i = i + 1\nprint(answer)\nfor x in answer_list:\n    print(x, end = ' ')\n    \n        \n                \n        \n        \n", "n = int(input())\np = []\nfor i in range(2,n+1):\n    isprime = True\n    for j in p:\n        if i % j == 0:\n            isprime = False\n            break\n    if isprime:\n        p.append(i)\nans = []\nfor i in p:\n    k = 1\n    while i ** k <= n:\n        ans.append(str(i ** k))\n        k += 1\nprint(len(ans))\nprint(' '.join(ans))\n", "n = int(input())\nif n==1:\n\tprint(0)\n\treturn\nelif n==2:\n\tprint(1)\n\tprint(2)\n\treturn\n\nans = 0\npr = [0] * (n+1)\np = []\nend = 1\n\nwhile end > 0:\n\ti = 2\n\twhile pr[i] != 0: \n\t\ti += 1\n\t\tif i==n+1:\n\t\t\tend = 0\n\t\t\tbreak\n\tif i != n+1:\n\t\tpr[i] = 1\n\t\tp.append(i)\n\tj = i\n\twhile i+j<=n: \n\t\ti += j\n\t\tpr[i] = 2\nres = []\nfor a in p:\n\tx = a\n\twhile x <= n:\n\t\tres.append(x)\n\t\tans += 1\n\t\tx *= a\n\nprint(ans)\nprint(*res)\n", "def main():\n    n = int(input()) + 1\n    a, res = [True] * n, []\n    for p in range(2, n):\n        if a[p]:\n            pp = 1\n            while pp * p < n:\n                pp *= p\n                res.append(pp)\n            a[p:n:p] = [False] * ((n - 1) // p)\n    print(len(res))\n    print(*res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "prime=[2,3,5,7,11,13]\n\ndef create_list(n):\n    nonlocal prime\n    for x in range(15,n+1,2):\n        notPrime=False\n        hold=int(x**0.5)+1\n        for j in prime:\n            if j>hold:\n                break\n            if x%j==0:\n                notPrime=True\n                break\n        if notPrime==False:\n            prime.append(x)\n\ndef main():\n    nonlocal prime\n    mode=\"filee\"\n    if mode==\"file\":f=open(\"test.txt\",\"r\")\n    if mode==\"file\":n=int(f.readline())\n    else:n=int(input())\n    create_list(n)\n    k=[]\n    for j in range(len(prime)):\n        num=prime[j]\n        while num<=n:\n            k.append(num)\n            num*=prime[j]\n        j+=1\n    print(len(k))\n    for i in k:\n        print(i,end=' ')\n    if mode==\"file\":f.close()\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\nquestions = []\nfor i in range(2, n + 1):\n\tif all(i % q != 0 for q in questions):\n\t\tx = i\n\t\twhile x <= n:\n\t\t\tquestions.append(x)\n\t\t\tx *= i\nprint(len(questions))\nprint(' '.join(str(q) for q in questions))\n", "import math\nimport collections\n\ndef factorize(n):\n    ''' returns a list of prime factors of n.\n    ex. factorize(24) = [2, 2, 2, 3]\n    source: Rossetta code: prime factorization (slightly modified)\n    http://rosettacode.org/wiki/Prime_decomposition#Python:_Using_floating_point\n    '''\n    step = lambda x: 1 + (x<<2) - ((x>>1)<<1)\n    maxq = int(math.floor(math.sqrt(n)))\n    d = 1\n    q = n % 2 == 0 and 2 or 3\n    while q <= maxq and n % q != 0:\n        q = step(d)\n        d += 1\n    return q <= maxq and [q] + factorize(n//q) or [n]\n\ndef primes2(limit):\n    ''' returns a list of prime numbers upto limit.\n    source: Rossetta code: Sieve of Eratosthenes\n    http://rosettacode.org/wiki/Sieve_of_Eratosthenes#Odds-only_version_of_the_array_sieve_above\n    '''\n    if limit < 2: return []\n    if limit < 3: return [2]\n    lmtbf = (limit - 3) // 2\n    buf = [True] * (lmtbf + 1)\n    for i in range((int(limit ** 0.5) - 3) // 2 + 1):\n        if buf[i]:\n            p = i + i + 3\n            s = p * (i + 1) + i\n            buf[s::p] = [False] * ((lmtbf - s) // p + 1)\n    return [2] + [i + i + 3 for i, v in enumerate(buf) if v]\n\n\nn = int(input())\n\ndef solve(n):\n    if n == 1:\n        print(0)\n        return\n    primes = primes2(n)\n    record = {p:0 for p in primes}\n    for m in range(2, n+1):\n        facs = factorize(m)\n        counts = collections.Counter(facs)\n        for p, c in counts.items():\n            if c > record[p]:\n                record[p] = c\n    q = sum(record.values())\n    print(q)\n    nums = []\n    for p, c in record.items():\n        for i in range(1, c+1):\n            nums.append(p**i)\n    if q > 0:\n        print(*nums)\n\nsolve(n)", "n = int(input())\nprime = [False] * (n + 1)\nans = []\nfor i in range(2, n + 1):\n if prime[i]:\n   continue\n x = i\n while x <= n:\n   ans.append(x)\n   prime[x] = True\n   x *= i\n x = i\n while x <= n:\n   prime[x] = True\n   x += i   \n\nprint(len(ans))\nfor x in ans:\n  print(x, end= \" \")\n ", "n = int(input())\n\nfrom math import sqrt\na = []\ny = ''\n\nif n > 1:\n    for i in range (2, n+1):\n        k = 0\n        for j in range(2, int(sqrt(i))+1):\n             if i % j == 0:\n                 k = 1\n        if k ==0:\n            a.append(i)\n\nk = 0\nfor i in range(len(a)):\n    for j in range(1, 10):\n        if a[i]**j <= n:\n            k = k + 1\n            y = y + str(a[i]**j) + ' '\n\n\nif n == 1:\n   print(0)\nelse:\n    print(k)\n    print(y)\n\n\n\n\n    \n", "def is_prime(x):\n\ti = 2\n\twhile i * i <= x:\n\t\tif x % i == 0:\n\t\t\treturn False\n\t\ti += 1\n\treturn True\n\ndef primes():\n\ti = 2\n\twhile True:\n\t\tif is_prime(i):\n\t\t\tyield i\n\t\ti += 1\n\nimport itertools\n\nn = int(input())\nguesses = []\nfor p in itertools.takewhile(lambda p: p <= n, primes()):\n\tx = p\n\twhile x <= n:\n\t\tguesses.append(x)\n\t\tx *= p\nprint(len(guesses))\nprint(' '.join(map(str, guesses)))\n", "n=int(input())\nif n==1:\n    print(0)\n    print('')\nelse:\n    a=[]\n    for i in range(2,n+1):\n        x=i\n        p=0\n        for j in a:\n            if x%j==0:\n               p+=1 \n            while x%j==0:\n                x=x//j\n        if x>1 or (x==1 and p==1):\n            a.append(i)\n    s=str(a[0])\n    L=len(a)\n    for j in range(1,L):\n        s=s+' '+str(a[j])\n    print(len(a))\n    print(s)\n                \n", "import math\nimport itertools\n\nn = int(input())\nprimes = [2]\nprimes_degrees = []\nfor i in range(3, n + 1):\n    for p in itertools.takewhile(lambda x: x <= i ** 0.5, primes):\n        if i%p == 0:\n            k = i // p\n            while k > 1:\n                if k%p != 0: break\n                k = k // p\n            else:\n                primes_degrees.append(i)\n            break\n    else:\n        primes.append(i)\n\nif n == 1:\n    print(0)\nelse:\n    print(len(primes) + len(primes_degrees))\n    for p in primes:\n        print(p, end = ' ')\n    for pd in primes_degrees:\n        print(pd, end = ' ')\n", "def primes(n):\n    sieve = set(range(3, n + 1, 2))\n    if n >= 2:\n        sieve.add(2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if i in sieve:\n            sieve -= set(range(2 * i, n + 1, i))\n    return sieve\n\n\nn = int(input())\nres = []\nfor i in primes(n):\n    k = i\n    while k <= n:\n        res.append(str(k))\n        k *= i\n\nprint(len(res))\nprint(' '.join(res))", "n = int(input())\na = list(range(n+1))\na[1] = 0\nlst = []\n\ni = 2\nwhile i <= n:\n    if a[i] != 0:\n        lst.append(a[i])\n        for j in range(i, n+1, i):\n            a[j] = 0\n    i += 1\n\nfor i in range(len(lst)):\n    x = lst[i]\n    m = x\n    while m*x <= n:\n        lst.append(m*x)\n        m *= x\n\nprint(len(lst))\nprint(\" \".join(map(str, lst)))\n", "n = int(input())\nquestions = []\nfor i in range(2, n + 1):\n\tif all(i % q != 0 for q in questions):\n\t\tx = i\n\t\twhile x <= n:\n\t\t\tquestions.append(x)\n\t\t\tx *= i\nprint(len(questions))\nprint(' '.join(str(q) for q in questions))\n", "def Prime(x):\n    for i in range(2,int(x**0.5)+1):\n        if x%i==0: return 0\n    return 1\nn=int(input())\nans=[]\nfor i in range(2,n+1):\n    if Prime(i):\n        ans+=[str(i)]\n        t=i\n        while t*i<=n:\n            t*=i\n            ans+=[str(t)]\nprint(len(ans))\nprint(' '.join(ans))", "P=print\nR=range\nn=int(input())\nx=' '.join([' '.join(str(j**i)for i in R(1,11)if j**i<=n)for j in R(2,n+1)if 0==sum(j%i==0for i in R(2,j))])\nP(len(x.split()))\nP(x)", "n = int(input())\n\ndef prime(n):\n    i = 3\n    if n == 2 :\n        return True\n    if n % 2 == 0 :\n        return False\n    while i*i <= n :\n        if n % i == 0 :\n            return False\n        i += 2\n    return True\n\npr = [i for i in range(2,n+1) if prime(i)]\nprm = []\nfor p in pr :\n    x = p\n    prm.append(x)\n    while True:\n        #print(x)\n        x *= p\n        if x > n :\n            break\n        prm.append(x)\n\nprint(len(prm))\nprint(*prm)\n", "n = int(input())\n\ndef isprime(x):\n    for i in range(2, x):\n        if x%i == 0:\n            return False\n    else:\n        return True\n\nl = []\nfor i in range(2, n+1):\n    if isprime(i) == True:\n        l.append(i)\n\nl2 = []\nfor i in l:\n    c = 1\n    while i**c <= n:\n        l2.append(i**c)\n        c += 1\n\nprint(len(l2))\nfor i in l2:\n    print(i, end = ' ')\n"]