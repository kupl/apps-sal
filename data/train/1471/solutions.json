["import sys\n\ndef spaces(a,n,m,k,visit1,visit2,dist,position):\n queue = [position]\n lastedit = []\n dist[position[0]][position[1]] = 0 \n while queue!=[]:\n  point = queue[0]\n  i = point[0]\n  j = point[1]\n  #print 'point',i,j\n  if visit1[i][j]==False:\n   visit1[i][j] = True\n   startx = max(i-k,0)\n   endx = min(i+k,n-1)\n   for x in range(startx,endx+1):\n    starty = max(0,j+abs(x-i)-k)\n    endy = min(m-1,j-abs(x-i)+k)\n    for y in range(starty,endy+1):\n     if (a[x][y]==0 and visit1[x][y]==False):\n      if visit2[x][y]==True:\n       lastedit.append([x,y])\n      #print x,y,\n      if dist[x][y]>dist[i][j]+1:\n       dist[x][y]=dist[i][j]+1\n       queue.append([x,y])\n  #print queue,dist\n  queue = queue[1:]\n  #print\n return lastedit\n\nfor t in range(int(input())):\n n,m,k1,k2 = list(map(int,input().split()))\n a = []\n for i in range(n):\n  a.append(list(map(int,input().split())))\n #print a\n value = sys.maxsize\n listing = []\n visit1 = [[False for i in range(m)]for j in range(n)]\n visit2 = [[False for i in range(m)]for j in range(n)]\n dist1 = [[sys.maxsize for i in range(m)]for j in range(n)]\n dist2 = [[sys.maxsize for i in range(m)]for j in range(n)]\n if k1>=k2:\n  spaces(a,n,m,k1,visit1,visit2,dist1,[0,0])\n else:\n  spaces(a,n,m,k2,visit1,visit2,dist1,[0,m-1])\n  listing = spaces(a,n,m,k1,visit2,visit1,dist2,[0,0])\n if k1>k2:\n  listing = spaces(a,n,m,k2,visit2,visit1,dist2,[0,m-1])\n #print visit1\n #sprint visit2\n if k1==k2:\n  if dist1[0][m-1]==sys.maxsize:\n   print('-1')\n  else:\n   print(int((dist1[0][m-1]+1)/2))\n else:\n  d = len(listing)\n  for i in range(d-1,-1,-1):\n   x = listing[i][0]\n   y = listing[i][1]\n   if visit1[x][y]==True and dist2[x][y]<value:\n    value = dist2[x][y]\n  if value!=sys.maxsize:\n   print(value)\n  else:\n   print('-1')\n\n\n\n\n   \n   \n", "import sys\n\ndef spaces(a,n,m,k,visit1,visit2,dist,position):\n queue = [position]\n lastedit = []\n dist[position[0]][position[1]] = 0 \n while queue!=[]:\n  point = queue[0]\n  i = point[0]\n  j = point[1]\n  #print 'point',i,j\n  if visit1[i][j]==False:\n   visit1[i][j] = True\n   startx = max(i-k,0)\n   endx = min(i+k,n-1)\n   for x in range(startx,endx+1):\n    starty = max(0,j+abs(x-i)-k)\n    endy = min(m-1,j-abs(x-i)+k)\n    for y in range(starty,endy+1):\n     if (a[x][y]==0 and visit1[x][y]==False):\n      if visit2[x][y]==True:\n       lastedit.append([x,y])\n      #print x,y,\n      if dist[x][y]>dist[i][j]+1:\n       dist[x][y]=dist[i][j]+1\n       queue.append([x,y])\n  #print queue,dist\n  queue = queue[1:]\n  #print\n return lastedit\n\nfor t in range(int(input())):\n n,m,k1,k2 = list(map(int,input().split()))\n a = []\n for i in range(n):\n  a.append(list(map(int,input().split())))\n #print a\n value = sys.maxsize\n listing = []\n visit1 = [[False for i in range(m)]for j in range(n)]\n visit2 = [[False for i in range(m)]for j in range(n)]\n dist1 = [[sys.maxsize for i in range(m)]for j in range(n)]\n dist2 = [[sys.maxsize for i in range(m)]for j in range(n)]\n if k1<=k2:\n  spaces(a,n,m,k1,visit1,visit2,dist1,[0,0])\n else:\n  spaces(a,n,m,k2,visit1,visit2,dist1,[0,m-1])\n  listing = spaces(a,n,m,k1,visit2,visit1,dist2,[0,0])\n if k1<k2:\n  listing = spaces(a,n,m,k2,visit2,visit1,dist2,[0,m-1])\n #print visit1\n #sprint visit2\n if k1==k2:\n  if dist1[0][m-1]==sys.maxsize:\n   print('-1')\n  else:\n   print(int((dist1[0][m-1]+1)/2))\n else:\n  d = len(listing)\n  for i in range(d-1,-1,-1):\n   x = listing[i][0]\n   y = listing[i][1]\n   if visit1[x][y]==True and dist2[x][y]<value:\n    value = dist2[x][y]\n  if value!=sys.maxsize:\n   print(value)\n  else:\n   print('-1')\n\n\n\n\n   \n   \n", "from queue import Queue\n\ndef run_bfs(x,y,k1,a):\n visited=[]\n n=len(a)\n m=len(a[0])\n inf=float(\"inf\")\n for i in range(0,n):\n  visited=visited+[[inf]*m]\n visited[x][y]=0\n qu=Queue()\n qu.put((x,y,0))\n while(not(qu.empty())):\n  (x1,y1,a1)=qu.get()\n  # x1 in range(min(x1-k1,0),min(x1+k1+1,n))\n  for x_n in range(max(x1-k1,0),min(x1+k1+1,n)):\n   t1=abs(x_n-x1)\n   for y_n in range(max(y1-k1+t1,0),min(y1+k1-t1+1,m)):\n    if (a[x_n][y_n]==0):\n     if (visited[x_n][y_n]==inf):\n      visited[x_n][y_n]=a1+1\n      qu.put((x_n,y_n,a1+1))\n return visited\n\nt=eval(input())\nfor i in range(0,t):\n inp=input()\n inp=[int(j) for j in inp.split()]\n [n,m,k1,k2]=inp\n a=[]\n for t1 in range(0,n):\n  inp=input()\n  inp=[int(j) for j in inp.split()]\n  a=a+[inp]\n visited1=run_bfs(0,0,k1,a)\n visited2=run_bfs(0,m-1,k2,a)\n m1=float(\"inf\")\n for x in range(0,n):\n  for y in range(0,m):\n   m_l=max(visited1[x][y],visited2[x][y])\n   m1=min(m_l,m1)\n if (m1<float(\"inf\")):\n  print(m1)\n else:\n  print(\"-1\")", "import sys\nsys.setrecursionlimit(10000000)\n \nflag = []\n \ndef isSafe(l, x, y, n, m):\n if x >= 0 and x < n and y >= 0 and y < m and l[x][y] == 0:\n  return True\n return False\n \ndef solveMaze(l, n, m): \n x = solveMazeUtil(l, n, m, 0, 0, 0) \n return x\n \ndef solveMazeUtil(l, n, m, x, y, count):\n\n nonlocal flag\n\n count += 1\n if x == 0 and y == m-1:\n  if l[x][y] == 0:\n   return count\n  return -1\n \n \n if isSafe(l, x, y, n, m) == True:\n\n  if flag[x][y] == 0:\n\n   flag[x][y] = 1\n\n   #if flag[x-1][y] == 0:\n   z = solveMazeUtil(l, n, m, x-1, y, count)\n   if z != -1:\n    return z\n\n   #if flag[x][y-1] == 0:\n   z = solveMazeUtil(l, n, m, x, y-1, count)\n   if z != -1:\n    return z\n\n   #if flag[x][y+1] == 0:\n   z = solveMazeUtil(l, n, m, x, y+1, count)\n   if z != -1:\n    return z\n\n   #if flag[x+1][y] == 0:\n   z = solveMazeUtil(l, n, m, x+1, y, count)\n   if z != -1:\n    return z\n\n   return -1\n\n return -1 \n \ndef main():\n\n nonlocal flag\n for q in range(eval(input())):\n \n  a = [int(i) for i in input().split()]\n  n = a[0]\n  m = a[1]\n  l = []\n \n  if a[2] == 0 and a[3] == 0:\n   print(-1)\n \n  else:\n\n   flag = [[0 for i in range(m)] for j in range(n)]\n   for i in range(n):\n    l.append([int(i) for i in input().split()])\n  \n   ans = solveMaze(l, n, m)\n   \n   if a[2] == 0 or a[3] == 0:\n    print(ans)\n   \n   else:\n    if ans >= 0:\n     print(ans/2)\n    else:\n     print(ans) \n\nmain()", "#!/bin/python\nfrom heapq import heappush, heappop\nimport sys\ndef getDistancesBot1(a,n,m,mat,k):\n for i in range(n):\n  mat.append([20000 for j in range(m)])\n heap = []\n mat[0][0]=0;\n heappush(heap, (0,0,0))\n while len(heap)!=0:\n  item=heappop(heap);\n  top=max(0,item[2]-k)\n  bottom=min(n-1,item[2]+k)\n  for y in range(top,bottom+1):\n   c=k-abs(y-item[2]) \n   left=max(0,item[1]-c)\n   right=min(m-1,item[1]+c)\n   for x in range(left,right+1):\n    if a[y][x]==0:\n     if mat[y][x]>(item[0]+1):\n      mat[y][x]=item[0]+1\n      heappush(heap, (mat[y][x],x,y))\ndef getDistancesBot2(a,n,m,mat,k):\n for i in range(n):\n  mat.append([20000 for j in range(m)])\n heap = []\n mat[0][m-1]=0;\n heappush(heap, (0,m-1,0))\n while len(heap)!=0:\n  item=heappop(heap);\n  top=max(0,item[2]-k)\n  bottom=min(n-1,item[2]+k)\n  for y in range(top,bottom+1):\n   c=k-abs(y-item[2]) \n   left=max(0,item[1]-c)\n   right=min(m-1,item[1]+c)\n   for x in range(left,right+1):\n    if a[y][x]==0:\n     if mat[y][x]>(item[0]+1):\n      mat[y][x]=item[0]+1\n      heappush(heap, (mat[y][x],x,y))\n \nt=int(input().strip())\nfor i in range(t):\n [n,m,k1,k2] = list(map(int,input().strip().split(' ')));\n arr=[]\n for j in range(n):\n  arr.append(list(map(int,input().strip().split(' '))))\n mat1=[]\n mat2=[]\n getDistancesBot1(arr,n,m,mat1,k1)\n getDistancesBot2(arr,n,m,mat2,k2)\n minSteps=2000\n for x in range(n):\n  for y in range(m):\n   minSteps=min(minSteps,max(mat1[x][y],mat2[x][y]))\n if minSteps==2000:\n  print(-1)\n else:\n  print(minSteps)\n"]