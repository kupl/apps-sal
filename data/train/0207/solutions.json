["class Solution:\n     def largestNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         nums = [str(n) for n in nums]\n         \n         nums.sort(reverse=True)\n         \n         for i in range(1, len(nums)):\n             if len(nums[i-1]) > len(nums[i]):\n                 ran = len(nums[i])\n                 j = i\n                 while j-1 >= 0 and nums[j-1][:ran] == nums[j] and nums[j-1]+nums[j]<=nums[j]+nums[j-1]:\n                     nums[j-1], nums[j] = nums[j], nums[j-1]\n                     j -= 1\n                     \n         return str(int(''.join(nums)))", "class Solution:\n     class MyNumber:\n         def __init__(self, v):\n             self.str_val = str(v)\n             self.val = [int(x) for x in self.str_val]\n             self.n = len(self.val)\n         def __cmp__(self, other):\n             n1 = self.str_val + other.str_val\n             n2 = other.str_val + self.str_val            \n             return 0 if n1 == n2 else 1 if n1 > n2 else -1\n         \n \n     def largestNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         if all(x == 0 for x in nums):\n             return '0'\n         myns = [self.MyNumber(x) for x in nums]\n         \n         for i in range(len(nums)):\n             for j in range(i + 1, len(nums)):\n                 if myns[j].__cmp__(myns[i]) > 0:\n                     t = myns[i]\n                     myns[i] = myns[j]\n                     myns[j] = t\n \n         return \"\".join([x.str_val for x in myns])\n     \n", "class Solution:\n     def largestNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         # maxPos = 0\n         # maxNum = ''\n         # maxLen = 0\n         # maxCut = ''\n         # res = ''\n         # while nums:\n         #     for i in range(len(nums)):\n         #         cur = nums[i]\n         #         ori = cur\n         #         while cur % 10 == 0:\n         #             cur = cur // 10\n         #         if str(cur) > maxCut or (str(cur) == maxCut and len(str(ori)) < maxLen):\n         #             maxCut = str(cur)\n         #             maxNum = str(ori)\n         #             maxPos = i\n         #             maxLen = len(maxNum)\n         #     nums.pop(maxPos)\n         #     res += maxNum\n         #     maxPos = 0\n         #     maxNum = ''\n         #     maxLen = 0\n         #     maxCut = ''\n         # return res\n \n         maxPos = 0\n         maxNum = ''\n         res = ''\n         while nums:\n             for i in range(len(nums)):\n                 cur = nums[i]\n                 if str(cur) + maxNum >= maxNum + str(cur):\n                     maxNum = str(cur)\n                     maxPos = i\n             nums.pop(maxPos)\n             res += maxNum\n             maxPos = 0\n             maxNum = ''\n         if res[0] == '0':\n             return '0'\n         return res\n", "class Solution:\n     def largestNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         \n         ## edge case: 981 3,31 331 313\n         \n         \n         strs = [str(num) for num in nums]\n         \n         def bigger(str1, str2):\n             if int(str1+str2) >= int(str2+str1):\n                 return str1\n             else:\n                 return str2\n         \n         answer = \"\"\n         current = strs\n         while current:\n             maximum = current[0]\n             for i in range(len(current)):\n                 maximum = bigger(maximum, current[i])\n                 \n             answer += maximum\n             current.remove(maximum)\n         \n         if answer[0] == \"0\":\n             return \"0\"\n         return answer", "class Solution:\n     def largestNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         # case 1  34 vs 34\n         #case2: 3 vs 34  ;    34 vs 3;        30 vs 3;  3 vs 30\n \n         # this works:\n         # compare the element by ourselves according to the rule of largest number first    \n         if nums is None or len(nums) == 0:\n             return ''\n \n         for i in range(len(nums)-1, -1, -1):\n             for j in range(len(nums)-1, len(nums)-i-1, -1):\n                 #compare element 1, 2\n                 e1 = str(nums[j-1])\n                 e2 = str(nums[j])\n                 #print (\"e1, e2: \", e1, e2, nums)\n                 if e1+e2 < e2+e1:\n                     #swap \n                     t = nums[j]\n                     nums[j] = nums[j-1]\n                     nums[j-1] = t\n \n         ans = ''\n         for n in nums:\n             if n == 0 and ans == '':\n                 continue\n             ans += str(n)\n         #print (\"nums: \", nums)\n         return '0' if len(ans) == 0 else ans \n", "class Solution:\n     \n     def largestNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         import functools\n #         s_nums = []\n #         maximum_length = 0\n #         result = \"\"\n #         dic = {}\n #         for i in range(0, len(nums)):\n #             value = str(num[i])\n #             maximum_length = max(maximum_length, len(value))\n #             s_nums.append(value)\n #             dic[i] = True\n             \n #         for i in range(0, maximum_length-1): \n #             temp_max = \"\"\n #             temp_max_array = []\n #             for j in range(0, s_nums-1):\n #                 try:\n #                     a = s_nums[j][i]\n #                     try:\n #                         b = s_nums[j][i+1]\n #                     except:\n #                         if dic[j] != False:\n #                             temp_max_array.append(nums[j])\n #                             dic[j] = False\n #                         dic[j] += 1\n #                 except:\n #                     continue\n #             print(temp_max_array)\n #             result += ''.join(sorted(temp_max_array))\n             \n #         return result\n         nums_str = []\n         for each in nums:\n             nums_str.append(str(each))\n         \n         result = ''.join(sorted(nums_str, key = functools.cmp_to_key(self.comparator)))\n         \n         if int(result) == 0:\n             return '0'\n         else:\n             return result\n     \n     \n \n     def comparator(self, a, b):\n         \n         num1 = a + b\n         num2 = b + a\n         \n         if num1 > num2:\n             return -1\n         elif num2 > num1:\n             return 1\n         else:\n             return 0\n         \n", "class Solution:\n     def sorting(self, numstr):\n         newnumstr = []\n         #print(numstr)\n         for i in range(0, len(numstr)):\n             for j in range(1, len(numstr)-i):\n                 if numstr[j-1] + numstr[j] < numstr[j] + numstr[j-1]:\n                     temp = numstr[j-1]\n                     numstr[j-1] = numstr[j]\n                     numstr[j] = temp\n         #print(numstr)\n     def largestNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         matrix = dict()\n         for num in nums:\n             numstr = str(num)\n             if numstr[0] not in matrix:\n                 matrix[numstr[0]] = []\n             matrix[numstr[0]].append(numstr)\n         print(matrix)\n         \n         ret = \"\"\n         for i in range(9, -1, -1):\n             if str(i) in matrix:\n                 prenums = matrix[str(i)]\n                 self.sorting(prenums)\n                 #print(prenums)\n                 ret += \"\".join(prenums)\n                 #print(ret)\n         return str(int(ret))\n", "class Solution:\n     def largestNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         def lexic_comp(a, b):\n             ab = str(a) + str(b)\n             ba = str(b) + str(a)\n             if ab > ba:\n                 return -1\n             elif ba > ab:\n                 return 1\n             return 0\n         \n         import functools\n         \n         nums.sort(key=functools.cmp_to_key(lexic_comp))\n         \n         return str(int(''.join(map(str, nums))))\n", "class Solution:\n     def largestNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         s=self.sort(nums)\n         if s.startswith(\"0\"):\n             return \"0\"\n         else:return s\n     def sort(self,nums):\n         if not nums:return \"\"\n         else:\n             pivot=nums[0]\n             left=[]\n             right=[]\n             for i in range(1,len(nums)):\n                 if self.compare(nums[i],pivot):\n                     left.append(nums[i])\n                 else:\n                     right.append(nums[i])\n             return self.sort(left)+str(pivot)+self.sort(right)\n             \n     def compare(self,num1,num2):\n         num1,num2=str(num1),str(num2)\n         return int(num1+num2)>int(num2+num1)", "class Solution:\n     def largestNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         def cmp_to_key(mycmp):\n             'Convert a cmp= function into a key= function'\n             class K:\n                 def __init__(self, obj, *args):\n                     self.obj = obj\n                 def __lt__(self, other):\n                     return mycmp(self.obj, other.obj) < 0\n                 def __gt__(self, other):\n                     return mycmp(self.obj, other.obj) > 0\n                 def __eq__(self, other):\n                     return mycmp(self.obj, other.obj) == 0\n                 def __le__(self, other):\n                     return mycmp(self.obj, other.obj) <= 0\n                 def __ge__(self, other):\n                     return mycmp(self.obj, other.obj) >= 0\n                 def __ne__(self, other):\n                     return mycmp(self.obj, other.obj) != 0\n             return K\n         \n         def compare(n1, n2):\n             #print(n1, n2, \":\")\n             l1 = len(n1)\n             l2 = len(n2)\n             i = 0\n             if l1 != l2:\n                 tmp = n1 \n                 n1 = n1 + n2\n                 n2 = n2 + tmp\n                 l1 = l1 + l2\n             #print(n1, n2)\n             while i < max(l1, l2):\n                 #print(i, n1[i], n2[i])\n                 if n1[i] < n2[i]:\n                     #print(n1, \"<\", n2)\n                     return -1\n                 elif n1[i] > n2[i]:\n                     #print(n1, \">\", n2)\n                     return 1\n                 i += 1\n             #print(n1, \"=\", n2)\n             return 0\n             \n         \n         def convert(num):\n             if num == 0:\n                 return [0]\n             res = []\n             while num:\n                 res.append(num % 10)\n                 num //= 10\n             res.reverse()\n             return res\n         \n         nums = list(map(convert, nums))\n         nums.sort(key=cmp_to_key(compare), reverse=True)\n         print(nums)\n         res = [str(c) for num in nums for c in num]\n         \n         res =  \"\".join(res).lstrip('0')\n         if not res:\n             res = '0'\n         return res", "class Solution:\n     def largestNumber(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: str\n         \"\"\"\n         s=self.sort(nums)\n         if s.startswith(\"0\"):\n             return \"0\"\n         else:return s\n     def sort(self,nums):\n         if not nums:return \"\"\n         else:\n             pivot=nums[0]\n             left=[]\n             right=[]\n             for i in range(1,len(nums)):\n                 if self.compare(nums[i],pivot):\n                     left.append(nums[i])\n                 else:\n                     right.append(nums[i])\n             return self.sort(left)+str(pivot)+self.sort(right)\n             \n     def compare(self,num1,num2):\n         return int(str(num1)+str(num2))>int(str(num2)+str(num1))"]