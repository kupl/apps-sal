["from math import sqrt\nimport sys\nsys.setrecursionlimit(10**8)\nintMax = 10**18\ndef knapsack(rl,l,c,m):\n if m==0 and rl>0:\n  return intMax\n if rl<=0:\n  return 0\n return min(c[m-1]+knapsack(rl-l[m-1],l,c,m),knapsack(rl,l,c,m-1))\nfor _ in range(int(input())):\n n= int(input())\n cost=[]\n length=[]\n sides=[]\n for i in range(n):\n  x,y = map(int,input().split())\n  if i == 0:\n   x0 = x\n   y0 = y\n   prevx = x\n   prevy = y\n  elif i == n-1:\n   sides.append(sqrt((prevx-x)**2 + (prevy-y)**2))\n   sides.append(sqrt((x0-x)**2 + (y0-y)**2))\n  else:\n   sides.append(sqrt((prevx-x)**2 + (prevy-y)**2))\n   prevx = x\n   prevy = y\n m = int(input())\n for j in range(m):\n  li,ci = map(int,input().split())\n  length.append(li)\n  cost.append(ci)\n ans=0\n #print(sides)\n for k in sides:\n  ans= ans + knapsack(k,length,cost,m)\n print(int(ans))"]