["# encoding: utf-8\nfrom sys import stdin\n\ndef solve(a):\n\n    # root node of tries denotes empty stack\n    stack = [None]\n    node_stack = [[1, {}]]\n    trie = node_stack[-1]\n\n    counter = 0\n    for i in range(len(a)):\n        el = a[i]\n\n        if len(stack) == 0 or stack[-1] != el:\n\n            current_node = node_stack[-1]\n            stack.append(el)\n            if el not in current_node[1]:\n                current_node[1][el] = [0, {}]\n\n            next_node = current_node[1][el]\n            next_node[0] += 1\n            node_stack.append(next_node)\n\n        else:\n            # just go up in trie\n            stack.pop()\n            node_stack.pop()\n            node_stack[-1][0] += 1\n\n        value = node_stack[-1][0]\n        counter -= (((value - 1) * (value - 2)) // 2)\n        counter += (((value) * (value - 1)) // 2)\n\n    return counter\n\n\nq = int(stdin.readline().strip())\nfor _ in range(q):\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split()]\n    print(solve(a))\n", "# encoding: utf-8\nfrom sys import stdin\n\n\ndef solve(a):\n    # root node of tries denotes empty stack\n    stack = [None]\n    node_stack = [[1, {}]]\n\n    counter = 0\n    for i in range(len(a)):\n        el = a[i]\n\n        if len(stack) == 0 or stack[-1] != el:\n\n            current_node = node_stack[-1]\n            stack.append(el)\n            if el not in current_node[1]:\n                current_node[1][el] = [0, {}]\n\n            next_node = current_node[1][el]\n            next_node[0] += 1\n            node_stack.append(next_node)\n\n        else:\n            # just go up in trie\n            stack.pop()\n            node_stack.pop()\n            node_stack[-1][0] += 1\n\n        value = node_stack[-1][0]\n        counter += (value - 1)\n\n    return counter\n\n\nq = int(stdin.readline().strip())\nfor _ in range(q):\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split()]\n    print(solve(a))\n"]