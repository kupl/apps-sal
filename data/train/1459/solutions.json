["import math\n\n\nn,m = map(int, input().split())\nhyp = math.sqrt(1+m*m)\ncosx = 1/hyp\nsinx = m/hyp\n\npts = [[], []]\nfor i in range(n):\n    p = input().split()\n    px = int(p[0])\n    py = int(p[1])\n    pts[0].append(cosx*px+sinx*py)\n    pts[1].append(cosx*py-sinx*px)\n\nw = max(pts[0])-min(pts[0])\nl = max(pts[1])-min(pts[1])\n\nprint(2*l+2*w)", "# cook your dish here\nimport math\n\n\nn,m = map(int, input().split())\nhyp = math.sqrt(1+m*m)\ncosx = 1/hyp\nsinx = m/hyp\n\npts = [[], []]\nfor i in range(n):\n    p = input().split()\n    px = int(p[0])\n    py = int(p[1])\n    pts[0].append(cosx*px+sinx*py)\n    pts[1].append(cosx*py-sinx*px)\n\nw = max(pts[0])-min(pts[0])\nl = max(pts[1])-min(pts[1])\n\nprint(2*l+2*w)", "# cook your dish here\n# cook your dish here\nimport math\n\n\nn,m = map(int, input().split())\nhyp = math.sqrt(1+m*m)\ncosx = 1/hyp\nsinx = m/hyp\n\npts = [[], []]\nfor i in range(n):\n    p = input().split()\n    px = int(p[0])\n    py = int(p[1])\n    pts[0].append(cosx*px+sinx*py)\n    pts[1].append(cosx*py-sinx*px)\n\nw = max(pts[0])-min(pts[0])\nl = max(pts[1])-min(pts[1])\n\nprint(2*l+2*w)", "# cook your dish here\nimport math\n\n\nn,m = map(int, input().split())\nhyp = math.sqrt(1+m*m)\ncosx = 1/hyp\nsinx = m/hyp\n\npts = [[], []]\nfor i in range(n):\n    p = input().split()\n    px = int(p[0])\n    py = int(p[1])\n    pts[0].append(cosx*px+sinx*py)\n    pts[1].append(cosx*py-sinx*px)\n\nw = max(pts[0])-min(pts[0])\nl = max(pts[1])-min(pts[1])\n\nprint(2*l+2*w)", "import math\r\n\r\n\r\nn,m = map(int, input().split())\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\npts = [[], []]\r\nfor i in range(n):\r\n    p = input().split()\r\n    px = int(p[0])\r\n    py = int(p[1])\r\n    pts[0].append(cosx*px+sinx*py)\r\n    pts[1].append(cosx*py-sinx*px)\r\n\r\nw = max(pts[0])-min(pts[0])\r\nl = max(pts[1])-min(pts[1])\r\n\r\nprint(2*l+2*w)", "from math import sqrt\r\nN,M  = input().split()\r\nN,M = int(N),float(M)\r\nif(M==0):\r\n    n = 0\r\n    while(n<N):\r\n        \r\n        xi,yi = input().split()\r\n        xi,yi = float(xi),float(yi)\r\n        if n==0:\r\n            c1_min = c1_max = xi\r\n            c2_min = c2_max = yi\r\n        else:\r\n            if c1_min>xi:\r\n                c1_min  = xi\r\n            elif c1_max<xi:\r\n                c1_max = xi\r\n            \r\n            if c2_min>yi:\r\n                c2_min  = yi\r\n            elif c2_max<yi:\r\n                c2_max = yi\r\n        \r\n        n+=1\r\n    perimeter = 2*(c2_max-c2_min+c1_max-c1_min)\r\nelse:\r\n    n = 0\r\n    while(n<N):\r\n        xi,yi = input().split()\r\n        xi,yi = float(xi),float(yi)\r\n        temp1 = yi-M*xi\r\n        temp2 = yi+xi/M\r\n        if n==0:\r\n            c1_min = c1_max = temp1\r\n            c2_min = c2_max = temp2\r\n        else:\r\n            if c1_min>temp1:\r\n                c1_min  = temp1\r\n            elif c1_max<temp1:\r\n                c1_max = temp1\r\n            \r\n            if c2_min>temp2:\r\n                c2_min  = temp2\r\n            elif c2_max<temp2:\r\n                c2_max = temp2\r\n        n+=1\r\n    perimeter = 2*(((c1_max-c1_min)/sqrt(1.0+M*M))+\r\n    ((c2_max-c2_min)/sqrt(1.0+1.0/(M*M))));\r\nprint(perimeter)", "import math\r\n\r\n\r\nn,m = map(int, input().split())\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\npts = [[], []]\r\nfor i in range(n):\r\n    p = input().split()\r\n    px = int(p[0])\r\n    py = int(p[1])\r\n    pts[0].append(cosx*px+sinx*py)\r\n    pts[1].append(cosx*py-sinx*px)\r\n\r\nw = max(pts[0])-min(pts[0])\r\nl = max(pts[1])-min(pts[1])\r\n\r\nprint(2*l+2*w)", "import math\r\n\r\n\r\nn,m = map(int, input().split())\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\npts = [[], []]\r\nfor i in range(n):\r\n    p = input().split()\r\n    px = int(p[0])\r\n    py = int(p[1])\r\n    pts[0].append(cosx*px+sinx*py)\r\n    pts[1].append(cosx*py-sinx*px)\r\n\r\nw = max(pts[0])-min(pts[0])\r\nl = max(pts[1])-min(pts[1])\r\n\r\nprint(2*l+2*w)", "import math\r\n\r\n\r\nn,m = map(int, input().split())\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\npts = [[], []]\r\nfor i in range(n):\r\n    p = input().split()\r\n    px = int(p[0])\r\n    py = int(p[1])\r\n    pts[0].append(cosx*px+sinx*py)\r\n    pts[1].append(cosx*py-sinx*px)\r\n\r\nw = max(pts[0])-min(pts[0])\r\nl = max(pts[1])-min(pts[1])\r\n\r\nprint(2*l+2*w)", "import math\r\n\r\n\r\nn,m = map(int, input().split())\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\npts = [[], []]\r\nfor i in range(n):\r\n    p = input().split()\r\n    px = int(p[0])\r\n    py = int(p[1])\r\n    pts[0].append(cosx*px+sinx*py)\r\n    pts[1].append(cosx*py-sinx*px)\r\n\r\nw = max(pts[0])-min(pts[0])\r\nl = max(pts[1])-min(pts[1])\r\n\r\nprint(2*l+2*w)", "import math\r\n\r\n\r\nn,m = map(int, input().split())\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\npts = [[], []]\r\nfor i in range(n):\r\n    p = input().split()\r\n    px = int(p[0])\r\n    py = int(p[1])\r\n    pts[0].append(cosx*px+sinx*py)\r\n    pts[1].append(cosx*py-sinx*px)\r\n\r\nw = max(pts[0])-min(pts[0])\r\nl = max(pts[1])-min(pts[1])\r\n\r\nprint(2*l+2*w)", "import math\r\nimport numpy as np\r\n\r\n\r\nn,m = map(int, input().split())\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\npx = np.empty(n)\r\npy = np.empty(n)\r\nfor i in range(n):\r\n    p = input().split()\r\n    px[i] = int(p[0])\r\n    py[i] = int(p[1])\r\n\r\nw = max(cosx*px+sinx*py)-min(cosx*px+sinx*py)\r\nl = max(cosx*py-sinx*px)-min(cosx*py-sinx*px)\r\n\r\nprint(2*l+2*w)\r\n", "import math\r\nimport numpy as np\r\n\r\nn,m = map(int, input().split())\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\npts = np.array([list(map(int, input().split())) for i in range(n)]).T\r\n    \r\nptsx = cosx*pts[0]+sinx*pts[1]\r\nptsy = cosx*pts[1]-sinx*pts[0]\r\n\r\nw = max(ptsx)-min(ptsx)\r\nl = max(ptsy)-min(ptsy)\r\n\r\nprint(2*l+2*w)\r\n", "import math\r\n\r\n\r\nn,m = map(int, input().split())\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\nptsx = []\r\nptsy = []\r\nfor i in range(n):\r\n    p = input().split()\r\n    px = int(p[0])\r\n    py = int(p[1])\r\n    ptsx.append(cosx*px+sinx*py)\r\n    ptsy.append(cosx*py-sinx*px)\r\n\r\nw = max(ptsx)-min(ptsx)\r\nl = max(ptsy)-min(ptsy)\r\n\r\nprint(2*l+2*w)\r\n", "import math\r\n\r\n\r\nn,m = map(int, input().split())\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\nfor i in range(n):\r\n    p = list(map(int, input().strip().split()))\r\n    px = cosx*p[0]+sinx*p[1]\r\n    py = cosx*p[1]-sinx*p[0]\r\n\r\n    if i == 0:\r\n        left = px\r\n        rght = px\r\n        lowr = py\r\n        uppr = py\r\n    else:\r\n        left = min(left, px)\r\n        rght = max(rght, px)\r\n        lowr = min(lowr, py)\r\n        uppr = max(uppr, py)\r\n\r\nw = rght-left\r\nl = uppr-lowr\r\n\r\nprint(2*l+2*w)\r\n", "import math\r\n\r\n\r\nn,m = map(int, input().split())\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\nptsx = []\r\nptsy = []\r\nfor i in range(n):\r\n    px, py = list(map(int, input().strip().split()))\r\n    ptsx.append(cosx*px+sinx*py)\r\n    ptsy.append(cosx*py-sinx*px)\r\n\r\nw = max(ptsx)-min(ptsx)\r\nl = max(ptsy)-min(ptsy)\r\n\r\nprint(2*l+2*w)\r\n", "import math\r\n\r\n\r\nn,m = map(int, input().split())\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\nfor i in range(n):\r\n    px, py = list(map(int, input().strip().split()))\r\n    px_temp = cosx*px+sinx*py\r\n    py_temp = cosx*py-sinx*px\r\n\r\n    if i == 0:\r\n        px_max = px_temp\r\n        px_min = px_temp\r\n        py_max = py_temp\r\n        py_min = py_temp\r\n\r\n    if px_temp > px_max:\r\n        px_max = px_temp\r\n    elif px_temp < px_min:\r\n        px_min = px_temp\r\n\r\n    if py_temp > py_max:\r\n        py_max = py_temp\r\n    elif py_temp < py_min:\r\n        py_min = py_temp\r\n\r\nw = px_max-px_min\r\nl = py_max-py_min\r\n\r\nprint(2*l+2*w)\r\n", "import math\r\n\r\n\r\nn,m = map(int, input().split())\r\npts = [list(map(int, input().strip().split())) for i in range(n)]\r\n\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\npts = dict([[cosx*p[0]+sinx*p[1], -sinx*p[0]+cosx*p[1]] for p in pts])\r\n\r\nw = max(pts.keys())-min(pts.keys())\r\nl = max(pts.values())-min(pts.values())\r\n\r\nprint(2*l+2*w)\r\n", "import math\r\n\r\n\r\nn,m = map(int, input().split())\r\npts = [list(map(int, input().strip().split())) for i in range(n)]\r\n\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\npts = [[cosx*p[0]+sinx*p[1], -sinx*p[0]+cosx*p[1]] for p in pts]\r\n\r\nw = max(pts, key=lambda x: x[0])[0]-min(pts, key=lambda x: x[0])[0]\r\nl = max(pts, key=lambda x: x[1])[1]-min(pts, key=lambda x: x[1])[1]\r\n\r\nprint(2*l+2*w)\r\n", "import math\r\n\r\n\r\nn,m = map(int, input().split())\r\npts = [list(map(int, input().strip().split())) for i in range(n)]\r\n\r\nhyp = math.sqrt(1+m*m)\r\ncosx = 1/hyp\r\nsinx = m/hyp\r\n\r\nfor apt in pts:\r\n    apt[0],apt[1] = (cosx*apt[0] + sinx*apt[1], -sinx*apt[0] + cosx*apt[1])\r\n\r\nl = max(a[0] for a in pts) - min(a[0] for a in pts)\r\nw = max(a[1] for a in pts) - min(a[1] for a in pts)\r\n\r\nprint(2*l+2*w)\r\n", "import math\nimport sys\n\nn,m = map(int, input().split())\npts = [list(map(int, line.strip().split())) for line in sys.stdin]\n\nhyp = math.sqrt(1+m*m)\ncosx = 1/hyp\nsinx = m/hyp\n\nfor apt in pts:\n    apt[0],apt[1] = (cosx*apt[0] + sinx*apt[1], -sinx*apt[0] + cosx*apt[1])\n\nl = max(a[0] for a in pts) - min(a[0] for a in pts)\nw = max(a[1] for a in pts) - min(a[1] for a in pts)\n\nprint(2*l+2*w)", "n, m = [int(x) for x in input().split()]\ncoordinates = []\nfor i in range(n):\n    coordinates.append([int(y) for y in input().split()])\nhyp = (1+m*m)**(1/2)\ncosx = 1/hyp\nsinx = m/hyp\nfor point in coordinates:\n    point[0], point[1] = (cosx*point[0] + sinx*point[1], -sinx*point[0] + cosx*point[1])\n\nl = max(a[0] for a in coordinates) - min(a[0] for a in coordinates)\nb = max(a[1] for a in coordinates) - min(a[1] for a in coordinates)\n\nprint(2*(l+b))"]