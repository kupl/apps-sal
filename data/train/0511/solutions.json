["n=int(input())\na=list(map(int,input().split()))\n\nX=[]\nb=a[0]\nfor i in range(1,n) :\n    b^=a[i]\n\nfor i in range(n) :\n    x=b^a[i]\n    X.append(x)\n\nfor i in X :\n    print(i,end=\" \")\n", "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    scarf_0 = 0\n    for a in A[1:]:\n        scarf_0 ^= a\n    \n    scarf_all = scarf_0 ^ A[0]\n    \n    ans = [scarf_all^a for a in A]\n    \n    print(*ans, sep=\" \")\n\ndef __starting_point():\n    main()\n__starting_point()", "#!/usr/bin/env python3\n\n#import\n#import math\n#import numpy as np\nN = int(input())\nA = list(map(int, input().split()))\n\nt = 0\nfor a in A:\n    t = t ^ a\n\nans = [str(t ^ A[i]) for i in range(N)]\n\nprint(\" \".join(ans))", "N = int(input())\na = list(map(int,input().split()))\nans = []\nx = a[0]\nfor i in range(1,N):\n    x ^= a[i]\nfor i in a:\n    ans.append(x^i)\nprint(*ans)", "N = int(input())\nList = list(map(int,input().split()))\ntotal = List[0]\nfor i in range(1,N):\n  total = total^List[i]\nans = []\nfor i in range(N):\n  ans.append(List[i]^total)\nprint(*ans)", "import sys\ninput = sys.stdin.readline\n\ndef main():\n    N = int(input())\n    a = list(map(int, input().split()))\n\n    s = 0\n    for i in a:\n        s ^= i\n    \n    for i in a:\n        ans = s ^ i\n        print(ans, sep=' ', end=' ')\n\nmain()", "n = int(input())\na = list(map(int,input().split()))\nsub = 0\nfor i in range(n):\n    sub ^= a[i]\n\nfor i in range(n):\n    print(sub ^ a[i],end = ' ')\n\n", "N = int(input())\nA = list(map(int, input().split()))\n \nXOR = 0\nfor a in A:\n  XOR ^= a\nfor i in range(N):\n  A[i] = A[i]^XOR\nprint(*A)", "n = int(input())\nal = list(map(int, input().split()))\na_xor = al[0]\nfor i in range(1, n):\n    a_xor^=al[i]\n\nans = []\nfor a in al:\n    ans.append(a_xor^a)\n\nprint(*ans)", "_,*A=map(int,open(s:=0).read().split())\nfor a in A:s^=a\nprint(*[a^s for a in A])", "n = int(input())\nlis = list(map(int, input().split()))\nm = 0\nfor a in lis:\n    m = m ^ a\nfor a in lis:\n    print(m ^ a, end=\" \")\n", "N = int(input())\nAlist = list(map(int,input().split()))\nXorPro = 0\nfor i in Alist:\n    XorPro = XorPro^i\nAnswer = []\nfor i in Alist:\n    Answer.append(XorPro^i)\nprint(*Answer)", "from functools import reduce\nfrom operator import xor\n\nN, *A = map(int, open(0).read().split())\nB = reduce(xor, A)\nprint(*map(lambda a: B^a, A))", "n = int(input())\na_ls = list(map(int, input().split()))\ns_ls = [0] * n\nSum = 0\nfor i in range(n):\n    Sum = Sum ^ a_ls[i]\nfor i in range(n):\n    s_ls[i] = Sum ^ a_ls[i]\nprint(*s_ls)", "N = int(input())\na_list = list(map(int, input().split()))\nall_xor = 0\nres = []\n\nfor a in a_list:\n    all_xor ^= a\n\nfor a in a_list:\n    res.append(a ^ all_xor)\n\nprint((*res))\n", "import sys\n\ninput = sys.stdin.readline\n\nN = int(input())\nA = list(map(int, input().split()))\n\nall = 0\nfor a_i in A:\n    all ^= a_i\n\nans = []\nfor a_i in A:\n    ans.append(all ^ a_i)\n\nprint(*ans)", "n=int(input())\nA=list(map(int,input().split()))\naa=0\nfor i in A:\n\taa^=i\nans=[0]*n\nfor i in range(n):\n\tans[i]=aa^A[i]\nprint((' '.join(map(str,ans))))\n", "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time, copy,bisect\n#from operator import itemgetter\n#from heapq import heappush, heappop\n#import numpy as np\n#import sympy\n#from scipy.sparse.csgraph import breadth_first_order, depth_first_order, shortest_path, floyd_warshall, dijkstra, bellman_ford, johnson\n#from scipy.sparse import csr_matrix\nfrom decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN\nimport sys\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nnf = lambda: float(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnb = lambda: list(map(float, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nN = ni()\na = na()\nnum = a[0]\nfor i in range(1, N):\n    num ^= a[i]\nans = []\nfor i in range(N):\n    ans.append(num^a[i])\nprint(*ans)", "#!/usr/bin/env python3\nimport sys\nfrom itertools import chain\n\n# form bisect import bisect_left, bisect_right, insort_left, insort_right\n# from collections import Counter\n# import numpy as np\n\n\ndef solve(N: int, A: \"List[int]\"):\n    total = 0\n    for a in A:\n        total ^= a\n    return [total ^ a for a in A]\n\n\ndef main():\n    tokens = chain(*(line.split() for line in sys.stdin))\n    # N, a = map(int, line.split())\n    N = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    ans = solve(N, A)\n    print((\" \".join([str(a) for a in ans])))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N=int(input())\nA=list(map(int,input().split()))\nallxor=A[0]\nfor j in range(1,N):\n    allxor^=A[j]\nans=[]\nfor i in range(N):\n    ans.append(allxor^A[i])\nprint(*ans,sep=\" \")", "N=int(input())\na=list(map(int,input().split()))\nx=0\nfor i in range(N):\n    x^=a[i]\n\nfor i in range(N):\n    print(x^a[i],end=' ')\nprint()\n", "n = int(input())\narr = list(map(int, input().split()))\n\na = 0\n\nfor i in range(n):\n    a ^= arr[i]\n\nans = []\nfor i in range(n):\n    ans.append(a ^ arr[i])\n\nprint(*ans)", "n=int(input())\na=list(map(int,input().split()))\n\ns=0\nfor i in range(n):\n    s=s^a[i]\n\nans=[]\nfor j in range(n):\n    tmp = s^a[j]\n    ans.append(tmp)\n\nprint(*ans)", "'''\nCreated on 2020/09/03\n\n@author: harurun\n'''\ndef main():\n  import sys\n  pin=sys.stdin.readline\n  pout=sys.stdout.write\n  perr=sys.stderr.write\n  \n  N=int(pin())\n  a=list(map(int,pin().split()))\n  s=0\n  for i in a:\n    s=s^i \n  ansl=[]\n  for j in a:\n    ansl.append(str(s^j))\n  ans=\" \".join(ansl)\n  print(ans)\n  return \nmain()", "N = int(input())\nA = list(map(int, input().split()))\nall_xor = 0\nfor a in A:\n    all_xor ^= a\n\nfor i in range(N):\n    ans = all_xor ^ A[i]\n    print(ans, end=\" \")\nprint()", "input();A=[*map(int,input().split())];s=0\nfor a in A:s^=a\nprint(*[a^s for a in A])", "n = int(input())\narr = list(map(int, input().split()))\nx = 0\nfor i in arr:\n\tx ^= i\nprint(*(list(map(lambda y: x ^ y, arr))))", "from functools import reduce\n\nN = int(input())\nA = list(map(int, input().split()))\n\nB = reduce(lambda x, y: x^y, A)\n\nans = []\nfor a in A:\n    ans.append(B^a)\n\nprint(*ans)", "n = int(input())\na = list(map(int, input().split()))\n\ns = 0\nfor x in a:\n    s ^= x\n\nans = []\nfor x in a:\n    ans.append(s ^ x)\n\nprint(*ans)", "n=int(input())\na=[int(x) for x in input().split()]\n\ntot=0\nfor i in range(n): tot^=a[i];\nfor i in range(n): a[i]^=tot;\nprint(*a)", "n = int(input())\na = list(map(int, input().split(\" \")))\nmas = 0\nfor i in a:\n  mas ^= i\nans = []\nfor i in a:\n  ans.append(mas ^ i)\nprint(*ans)", "n=int(input())\na=list(map(int,input().split()))\ntmp=0\nfor x in a:\n    tmp^=x\nans=[]\nfor i in range(n):\n    ans.append(a[i]^tmp)\nprint(*ans)", "n = int( input() )\na = list( map(int, input().split()) )\nx = 0\nfor i in a:\n    x ^= i\nprint( * list( map( lambda y: x^y , a ) ) )", "import math\nini = lambda : int(input())\ninm = lambda : map(int,input().split())\ninl = lambda : list(map(int,input().split()))\ngcd = lambda x,y : gcd(y,x%y) if x%y else y\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n    divisors.sort()\n    return divisors\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n \n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n \n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n \n        if x == y:\n            return\n \n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n \n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n \n    def size(self, x):\n        return -self.parents[self.find(x)]\n \n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n \n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n \n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n \n    def group_count(self):\n        return len(self.roots())\n \n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n \n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\nmod = 10**9 + 7\n\n#--maincode----------------\n\nn = ini()\na = inl()\nA = 0\nfor x in a:\n    A ^= x\nfor x in a:\n    print(A^x,end=\" \")", "import numpy as np\nfrom numpy import int64\n\nf = open(0)\nN = int(f.readline())\na = np.fromstring(f.readline(), dtype=int64, sep=' ')\nz = np.bitwise_xor.reduce(a)\nans = np.bitwise_xor(a, z)\nprint(*ans.tolist())", "from functools import reduce\nfrom operator import xor\n\nN = int(input())\n*A, = map(int, input().split())\nZ = reduce(xor, A)\nprint(*[Z^a for a in A])", "N=int(input())\na=list(map(int,input().split()))\nB=a[0]\nfor i in range(1,N):B^=a[i]\nprint(' '.join([str(B^i)for i in a]))", "N = int(input())\nA = [int(a) for a in input().split()]\n\ntotal = 0\nfor a in A:\n    total ^= a\n\nfor a in A:\n    print(total^a, end=\" \")", "n=int(input())\nA=list(map(int,input().split()))\na=0\nfor i in range(n):\n  a=a^A[i]\nfor i in range(n):\n  print(a^A[i],end=\" \")", "n = int(input())\na = list(map(int, input().split()))\nall_xor = 0\nfor i in a:\n    all_xor ^= i\nl = []\nfor j in a :\n    ans = all_xor ^ j\n    l.append(ans)\nprint((*l))\n", "n = int(input())\na =[int(x) for x in input().split()]\n\ns = 0\nfor i in range(n):\n\ts = s ^ a[i]\n\t\nfor i in range(n):\n\tx = s ^ a[i]\n\tprint(x, end='')\n\tif i == n - 1:\n\t\tprint('')\n\telse:\n\t\tprint(' ', end='')", "N = int(input())\nA = list(map(int, input().split()))\ncount = 0\nfor i in A:\n    count ^= i\nfor i in range(len(A)):\n    A[i] ^= count\n    \n    \nprint(*A)", "#\u6392\u4ed6\u7684\u8ad6\u7406\u548c x^y\nn=int(input())\na=list(map(int,input().split()))\nk=0\nfor i in range(0,n-1,2):\n  k=k^a[i]^a[i+1]\n\nfor i in range(n):\n  print(k^a[i],end=\" \")\n  \n  \n  \n  ", "from functools import reduce\nfrom operator import xor\n\n# via https://drken1215.hatenablog.com/entry/2020/06/22/122500\n\nN, *A = map(int, open(0).read().split())\nB = reduce(xor, A)\nprint(*map(lambda a: B^a, A))", "n=int(input())\na=list(map(int,input().split()))\ns=a[0]\nfor i in a[1:]:\n  s^=i\n  \nans=''\n\nfor i in a:\n  x=s^i\n  ans+=str(x)\n  ans+=' '\n\nprint((ans[:-1]))\n", "N=int(input())\na=list(map(int,input().split()))\n\ncnt=0\nfor i in range(N):\n    cnt=cnt^a[i]\n\nB=[]*N\nfor i in range(N):\n    ans=cnt^a[i]\n    B.append(str(ans))\n\nprint(' '.join(B))", "n = int(input())\na = list(map(int, input().split()))\nb=0\nfor i in range(n):\n    b ^= a[i]\nans = []\nfor i in range(n):\n    ans.append(b^a[i])\nprint(' '.join(list(map(str, ans))))", "n = int(input())\na = list(map(int, input().split()))\n\nb = 0\nfor i in range(n):\n  b ^= a[i]\nx = []\nfor i in range(n):\n  x.append(b^a[i])\nprint (*x)", "def main():\n    N = int(input())\n    a = list(map(int, input().split()))\n \n    total = 0\n    for other in a:\n        total ^= other\n \n    print(*[(other ^ total) for other in a])\n \n \ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\nA = list(map(int, input().split()))\ntotal = A[0]\nfor i in range(1, N):\n    total ^= A[i]\nfor i in range(N):\n    print(total ^ A[i], end=\" \")\n", "N = int(input())\nA = list(map(int, input().split()))\nb = 0\nfor x in A:\n    b ^= x\nfor i in range(len(A)):\n    A[i] ^= b\nprint(*A)", "N = int(input())\nA = list(map(int, input().split()))\nres = 0\nfor i in range(N):\n    res ^= A[i]\nans = [a ^ res for a in A]\nprint(*ans)", "# -*- coding:utf-8 -*-\n\ndef solve():\n    \"\"\"\n    \u30b9\u30ab\u30fc\u30d5\u3092\u305d\u308c\u305e\u308cs[1]...s[N]\u3068\u3059\u308b\n    N\u306f\u5076\u6570\u3088\u308a\u3001\n    \u5fc5\u305a a[1]^...^a[N] = s[1]^...^s[N] (=S\u3068\u7f6e\u304f) \u306b\u306a\u308b\u3002\n\n    \u3088\u3063\u3066\u3001s[1]\u304c\u6c42\u3081\u305f\u304b\u3063\u305f\u3089\u3001s[1] = S ^ a[1]\u3067\u6c42\u3081\u3089\u308c\u308b\u3002\n    \"\"\"\n    import sys\n    N = int(sys.stdin.readline())\n    As = list(map(int, sys.stdin.readline().split()))\n\n    S = 0\n    for a in As:\n        S ^= a\n\n    # \u7b54\u3048\n    anss = []\n    for i in range(N):\n        anss.append(str(S^As[i]))\n\n    ans = \" \".join(anss)\n    print(ans)\n\n\ndef __starting_point():\n    solve()\n\n__starting_point()", "n = int(input())\na = list(map(int, input().split()))\ns = 0\nfor ai in a:\n    s ^= ai\nprint(*[s ^ ai for ai in a])", "n = int(input())\nlis = list(map(int, input().split()))\n\nt = lis[0]\nfor i in range(1, n):\n    t ^= lis[i]\n\nans = [0] * n\nfor i , j in enumerate(lis):\n    ans[i] = t ^ j\n\nprint(*ans)", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split(\" \")))\n    all = 0\n    for ele in a:\n        all ^= ele\n    for ele in a:\n        print(all ^ ele,end = \" \")\n    print()\n\n\n\ndef __starting_point():\n    main()\n__starting_point()", "N=int(input())\nA=list(map(int,input().split()))\nX=A[0]\nfor i in range(1,N):\n  X^=A[i]\n  \nfor i in range(N):\n  print(X^A[i],end=' ')", "# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n# \n# \n# @stop_watch\ndef solve(N, As):\n    all_xor = 0\n    for A in As:\n        all_xor ^= A\n    ans = ''\n    for A in As:\n        ans += str(A ^ all_xor) + ' '\n    print((ans[:-1]))\n\n\ndef __starting_point():\n    # S = input()\n    N = int(input())\n    # N, M = map(int, input().split())\n    As = [int(i) for i in input().split()]\n    # Bs = [int(i) for i in input().split()]\n    solve(N, As)\n\n__starting_point()", "N = int(input())\nA = list(map(int,input().split()))\nX = 0\nfor a in A:\n    X ^= a\nprint((*[X^a for a in A]))\n", "import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\nMOD = 10**9 + 7\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nimport bisect\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return map(int, input().split())\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\n\ndef main():\n    N = i_input()\n    A = i_list()\n\n    X = A[0]\n    for i in range(1,N):\n        X^=A[i]\n\n    for i in range(N):\n        print(X^A[i], end=\" \")\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\n#l = list(map(int, input().split()))\n#import numpy as np\n#arr = np.array([int(i) for i in input().split()])\n'''\na,b=[],[]\nfor i in range():\n    A, B = map(int, input().split())\n    a.append(A)   \n    b.append(B)'''\n\nn=int(input())\na=list(map(int,input().split()))\nx=0\nfor item in a:\n    x^=item\nans=[]\nfor item in a:\n    ans.append(x^item)\nans=map(str,ans)\nprint(\" \".join(ans))", "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef main():\n    n = int( input() )\n    input_a = list ( map( int, input().split() ) )\n    a = deque( input_a )\n\n    while( len(a) != 1 ):\n        x = a.popleft()\n        y = a.popleft()\n        z = x ^ y\n        a.append(z)\n    sum = a.popleft()\n    ans = []\n    for i in input_a:\n        x = i ^ sum\n        ans.append(x)\n\n    for i in ans:\n        print( i , end = ' ' )\n\n\n\nmain()", "N = int(input())\nA = list(map(int,input().split()))\nsum_xor = A[0]\n\nfor i in range(1,N):\n  sum_xor ^= A[i]\n  \nfor j in range(N):\n  print(sum_xor ^ A[j], end=\" \")", "from functools import reduce\nfrom operator import xor\nN = int(input())\nA = list(map(int, input().split()))\n\nXorA = reduce(xor, A)\n\nB = []\nfor a in A:\n    B.append(XorA ^ a)\n\nprint(*B)", "n = int(input())\na = list(map(int, input().split()))\n\nx = a[0]\nfor i in a[1:]:\n    x ^= i\n\nfor i in a:\n    print(x^i, end=\" \")", "N = int(input())\nA = list(map(int, input().split()))\nall = 0\nfor a in A:\n  all = all ^ a\nans = []\nfor a in A:\n  ans.append(all ^ a)\nprint(*ans)", "N=int(input())\n*A,=map(int,input().split())\n\ntotal=0\nfor i in range(N):\n  total ^= A[i]\n  \nprint(*[total^A[i] for i in range(N)])", "_,*A=map(int,open(0).read().split());s=A[0]\nfor a in A[1:]:s^=a\nprint(*[a^s for a in A])", "N = int(input())\nlst = list(map(int, input().split()))\nsx = lst[0]\nfor i in range(1, N):\n\tsx = sx^lst[i]\nprint(*[i^sx for i in lst])", "N = int(input())\na = list(map(int, input().split()))\n\nb = 0\nfor i in a:\n    b ^= i\n\nans = []\nfor i in a:\n    ans.append(b ^ i)\nprint((\" \".join(map(str, ans))))\n", "#!/usr/bin/env python3\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [None] * n\n    allxor = 0\n    for i in range(n):\n        allxor ^= a[i]\n    for i in range(n):\n        ans[i] = allxor ^ a[i]\n    print((*ans))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n=int(input())\na=list(map(int,input().split()))\nwa=a[0]^a[1]\nfor i in range(2,n):\n  wa=wa^a[i]\nans=[]\nfor i in range(n):\n  ans.append(wa^a[i])\nprint(*ans)", "n = int(input())\nA = list(map(int, input().split()))\nx = A[0]\nfor a in A[1:]:\n    x = x ^ a\nfor a in A:\n    print(a^x, end=\" \")", "N = int(input())\nA = list(map(int,input().split()))\nX = 0\nfor i in range(N):\n  X = X^A[i]\nans = []\nfor i in range(N):\n  temp = X^A[i]\n  ans.append(temp)\nprint(*ans)", "import sys\ninput = sys.stdin.readline\n\n# E - Red Scarf\nN = int(input())\na = list(map(int, input().split()))\n\nxor = a[0]\n\nfor i in range(1, N):\n  xor ^= a[i]\n\nans = []\n\nfor i in range(N):\n  ans.append(xor ^ a[i])\n\nprint(' '.join(map(str, ans)))", "n = int(input())\nA = list(map(int, input().split()))\nX = A[0]\nfor a in A[1:]:\n    X = X ^ a\nfor i in range(n):\n    A[i] = str(X ^ A[i])\nprint(\" \".join(A))", "N = int(input())\nA = [int(i) for i in input().split()]\ntotal = 0\nfor a in A:\n    total ^= a\nprint(*[total^a for a in A])", "import sys\n\n# E - Red Scarf\nN = int(input())\na = list(map(int, input().split()))\n\nxor = a[0]\n\nfor i in range(1, N):\n  xor ^= a[i]\n\nans = []\n\nfor i in range(N):\n  ans.append(xor ^ a[i])\n\nprint(' '.join(map(str, ans)))", "n = int(input())\na = list(map(int, input().split()))\n\ns = a[0]\nfor i in a[1:]:\n  s ^= i\n\nans = []\nfor i in a:\n  ans.append(s ^ i)\n\nprint((*ans))\n", "N=int(input())\nA=[int(x) for x in input().split()]\nallxor=A[0]\nfor j in range(1,N):\n    allxor^=A[j]\nans=[0]*N\nfor i in range(N):\n    ans[i]=allxor^A[i]\nprint(*ans,sep=\" \")", "n = int(input())\na = list(map(int, input().split()))\n\ns = a[0]\nfor i in range(1,n):\n  s ^= a[i]\n\nans = [0]*n\nfor j in range(n):\n  ans[j] = s ^ a[j]\n\nprint(*ans)", "def main():\n    N = int(input())\n    A = [int(a) for a in input().split()]\n    xor_all = A[0]\n    \n    for i in range(1, N):\n        xor_all ^= A[i]\n\n    for i in range(N):\n        if i != N - 1:\n            print(A[i]^xor_all, end=\" \")\n        else:\n            print(A[i]^xor_all)\n\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\nA = list(map(int, input().split()))\nall = 0\nfor a in A:\n    all ^= a\nfor a in A:\n    print(all ^ a, end=\" \")\n", "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef main():\n    n = int(input())\n    A = list(map(int,input().split()))\n    B = [0] * n\n    x = 0\n    for a in A:\n        x ^= a\n    for i in range(n):\n        B[i] = x^A[i]\n    print(\" \".join(map(str,B)))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\nfrom collections import deque, defaultdict, Counter\nfrom itertools import accumulate, product, permutations, combinations\nfrom operator import itemgetter\nfrom bisect import bisect_left, bisect_right\nfrom heapq import heappop, heappush\nfrom math import ceil, floor, sqrt, gcd, inf\nfrom copy import deepcopy\nimport numpy as np\nimport scipy as sp\n\nINF = inf\nMOD = 1000000007\n\nn = int(input())\nA = [int(i) for i in input().split()]\n\ntmp = A[0]\nres = 0\n\nfor i in range(1, n):\n    tmp ^= A[i]\nres = [tmp ^ A[i] for i in range(n)]\nres = \" \".join([str(r) for r in res])\n\nprint(res)\n", "def e_red_scarf():\n    from functools import reduce\n    N = int(input())\n    A = [int(i) for i in input().split()]\n\n    total = reduce(lambda x, y: x ^ y, A)\n    ans = [a ^ total for a in A]\n    return ' '.join(map(str, ans))\n\nprint(e_red_scarf())", "import sys\n\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\n\ntotal = 0\n\nfor i in range(n):\n\tif i == 0:\n\t\ttotal = a[i]\n\telse:\n\t\ttotal = total ^ a[i]\n\t\t\nb = []\nfor i in range(n):\n\tb.append(str(a[i] ^ total))\n\nprint(' '.join(b))", "N  = int(input())\nAs = list(map(int,input().split()))\narray = []\nB = 0\nfor i in range(N):\n    B ^= As[i]\nans_array = []\nfor i in range(N):\n    ans_array.append(B^As[i])\nprint(*ans_array)", "from functools import reduce\nN = int(input())\nA = list(map(int, input().split()))\nm = reduce(lambda a, b: a^b, A)\nl = list(map(str, [a ^ m for a in A]))\nans = ' '.join(l)\nprint(ans)", "N = int(input())\na = [int(s) for s in input().split()]\nb = a[0]\nc = []\nfor i in range(1,N):\n  b = b ^ a[i]\n\nfor i in range(N):\n  c.append(str(b ^ a[i]))\n \nd = ' '.join(c)\n\nprint(d)", "N = int(input())\nA = list([int(x) for x in input().split()])\n\nxor_base = A[0]\nfor a in A[1:]:\n    xor_base ^= a\n\nresult = []\nfor a in A:\n    result.append(a ^ xor_base)\n\nprint((*result))\n", "n = int(input())\na = list(map(int, input().split()))\nfrom functools import reduce\nfrom operator import xor\nxorsum = reduce(xor, a)\nprint(*[x^xorsum for x in a])"]