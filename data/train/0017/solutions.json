["class BIT():\n    def __init__(self,n):\n        self.BIT=[0]*(n+1)\n        self.num=n\n\n    def query(self,idx):\n        res_sum = 0\n        while idx > 0:\n            res_sum += self.BIT[idx]\n            idx -= idx&(-idx)\n        return res_sum\n\n    #Ai += x O(logN)\n    def update(self,idx,x):\n        while idx <= self.num:\n            self.BIT[idx] += x\n            idx += idx&(-idx)\n        return\n\nimport sys,random\n\ninput=sys.stdin.readline\n\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    pair=[[] for i in range(n+1)]\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]==a[j]:\n                pair[i+1].append(j+1)\n\n    bit=BIT(n)\n    ans=0\n    for i in range(1,n+1):\n        minus=bit.query(i)\n        for r in pair[i]:\n            ans+=bit.query(r-1)-minus\n        for r in pair[i]:\n            bit.update(r,1)\n\n    print(ans)\n    \n", "\nfrom sys import stdin\n\ntt = int(stdin.readline())\n\nfor loop in range(tt):\n\n    n = int(stdin.readline())\n    a = list(map(int,stdin.readline().split()))\n\n    l = [0] * (n+1)\n    ans = 0\n\n    for j in range(n):\n        r = [0] * (n+1)\n        for k in range(n-1,j,-1):\n            ans += l[a[k]] * r[a[j]]\n            r[a[k]] += 1\n        l[a[j]] += 1\n\n    print (ans)\n            \n    \n", "def calcCntAtPrefix(a):\n    cntAtPrefix = [[0] * (len(a) + 1)]\n    for i, x in enumerate(a):\n        cntAtPrefix.append(cntAtPrefix[-1][:])\n        cntAtPrefix[-1][x] += 1\n    return cntAtPrefix\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    cntAtPrefix = calcCntAtPrefix(a)\n    cntAtSuffix = calcCntAtPrefix(a[::-1])\n\n    ans = 0\n    for j in range(n):\n        for k in range(j + 1, n):\n            ans += cntAtPrefix[j][a[k]] * cntAtSuffix[n - 1 - k][a[j]]\n    print(ans)\n\nfor t in range(int(input())):\n    solve()\n", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                d[i][j] = 1\n    for i in range(n):\n        for j in range(n - 1):\n            d[i][j + 1] += d[i][j]\n    for i in range(n - 1):\n        for j in range(n):\n            d[i + 1][j] += d[i][j]\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                ans += d[j - 1][n - 1] - d[j - 1][j] - d[i][n - 1] + d[i][j]\n    print(ans)", "import sys\n\nsys.setrecursionlimit(10 ** 5)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\nfor _ in range(II()):\n    n=II()\n    aa=LI1()\n    cnt=[0]*n\n    ans=0\n    for i,a in enumerate(aa):\n        cur=0\n        for a2 in aa[i+1:]:\n            if a2==a:ans+=cur\n            cur+=cnt[a2]\n        cnt[a]+=1\n    print(ans)\n"]