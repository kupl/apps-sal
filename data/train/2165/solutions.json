["def init_factorials(N, mod):\n    f = 1\n    fac = [1] * N\n    for i in range(1, N):\n        f *= i\n        f %= mod\n        fac[i] = f\n    return fac\n\ndef init_inv(N, mod, fac):\n    b = bin(mod-2)[2:][-1::-1]\n    ret = 1\n    tmp = fac[N]\n    if b[0] == '1':\n        ret = fac[N]\n    for bi in b[1:]:\n        tmp *= tmp\n        tmp %= mod\n        if bi == '1':\n            ret *= tmp\n            ret %= mod\n    inv = [1] * (N + 1)\n    inv[N] = ret\n    for i in range(N-1, 0, -1):\n        ret *= i + 1\n        ret %= mod\n        inv[i] = ret\n    return inv\n\n\ndef f(r, c, mod, fac, inv):\n    return (fac[r + c] * inv[r] * inv[c]) % mod\n\n\ndef read_data():\n    h, w, n = list(map(int, input().split()))\n    blacks = []\n    for i in range(n):\n        r, c = list(map(int, input().split()))\n        blacks.append((r, c))\n    return h, w, n, blacks\n\ndef solve(h, w, n, blacks):\n    mod = 10**9 + 7\n    fac = init_factorials(h + w + 10, mod)\n    inv = init_inv(h + w + 5, mod, fac)\n    ans = (fac[h+w-2]*inv[h-1]*inv[w-1]) % mod\n    eb = [(r + c, r, c) for r, c in blacks]\n    eb.sort()\n    blacks = [(r, c) for rc, r, c in eb]\n    g = [f(r-1, c-1, mod, fac, inv) for r, c in blacks]\n    hw = h+w\n    for i, (r, c) in enumerate(blacks):\n        gi = g[i]\n        rc = r + c\n        ans -= gi*fac[hw-rc]*inv[h-r]*inv[w-c]\n        ans %= mod\n        for j, (rj, cj) in enumerate(blacks[i+1:], i+1):\n            if r <= rj and c <= cj:\n                g[j] -= gi*fac[rj+cj-rc]*inv[rj-r]*inv[cj-c]\n                g[j] %= mod\n    return ans\n\nh, w, n, blacks = read_data()\nprint(solve(h, w, n, blacks))\n", "MOD = 10**9+7\nfact = [1]*200013\nfor i in range(1,200013):\n    fact[i] = (fact[i-1]*i)%MOD\ninv = [1]*200013\nfor i in range(2,200013):\n    inv[i] = (-(MOD//i)*inv[MOD%i])%MOD\nfor i in range(2,200013):\n    inv[i] = (inv[i]*inv[i-1])%MOD\ndef combo(a,b):\n    return (fact[a]*inv[b]*inv[a-b])%MOD\nh,w,n = map(int,input().split())\npt = []\nfor i in range(n):\n    r,c = map(int,input().split())\n    r,c = r-1,c-1\n    pt.append(r*w+c)\npt.append(h*w-1)\npt.sort()\ndp = []\nfor i in range(n+1):\n    r,c = pt[i]//w,pt[i]%w\n    dp.append(combo(r+c,r))\n    for j in range(i):\n        r1,c1 = pt[j]//w,pt[j]%w\n        if r1<=r and c1<=c:\n            dp[i]-=dp[j]*combo(r+c-r1-c1,r-r1)\n    dp[i]%=MOD\nprint(dp[n])", "MOD = 10**9+7\nfact = [1]*200013\nfor i in range(1,200013):\n    fact[i] = (fact[i-1]*i)%MOD\ninv = [1]*200013\nfor i in range(2,200013):\n    inv[i] = (-(MOD//i)*inv[MOD%i])%MOD\nfor i in range(2,200013):\n    inv[i] = (inv[i]*inv[i-1])%MOD\ndef C(n,k):\n    return (fact[n]*inv[k]*inv[n-k])%MOD\nh,w,n = map(int,input().split(\" \"))\nmas=[]\nfor i in range(n):\n    x,y= map(int,input().split(\" \"))\n    mas.append([x,y,0,0])\nmas.append([h,w,0,0])\nmas.sort(key=lambda x: x[0]+x[1])\n\nfor j in mas:\n    j[2] = C(j[0]+j[1]-2,j[0]-1)%MOD\n    for i in mas:\n        if (j[0]==i[0] and j[1]==i[1]): break\n        if i[0]<=j[0] and i[1]<=j[1]:\n            l=C(j[0]-i[0]+j[1]-i[1],j[0]-i[0])%MOD\n            k= i[2]\n            j[2]-=l*k%MOD\n\n\n\nprint(mas[-1][2]%(10**9+7))", "MOD = 10**9+7\nfact = [1]*200013\nfor i in range(1,200013):\n    fact[i] = (fact[i-1]*i)%MOD\ninv = [1]*200013\nfor i in range(2,200013):\n    inv[i] = (-(MOD//i)*inv[MOD%i])%MOD\nfor i in range(2,200013):\n    inv[i] = (inv[i]*inv[i-1])%MOD\ndef C(n,k):\n    return (fact[n]*inv[k]*inv[n-k])%MOD\n\ndef rasch(x,y):\n\n    nonlocal mas\n    res = C(x+y-2,x-1)%MOD\n    for i in mas:\n        if (x==i[0] and y==i[1]): break\n        if i[0]<=x and i[1]<=y  :\n            l=C(x-i[0]+y-i[1],x-i[0])\n            k=rasch(i[0],i[1]) if not i[3] else i[2]\n            i[2]=k%MOD\n            i[3]=1\n            res-=l*k%MOD\n    return res%MOD\nh,w,n = map(int,input().split(\" \"))\nmas=[]\nfor i in range(n):\n    x,y= map(int,input().split(\" \"))\n    mas.append([x,y,0,0])\nmas.sort(key=lambda x: x[0]+x[1])\nprint(rasch(h,w)%MOD)", "MOD = 10**9+7\ndef power( a,  n) :\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * a % MOD;\n        a = a * a % MOD;\n        n >>= 1\n\n    return ans\n\n\nfact = [1]*200013\nfor i in range(1,200013):\n    fact[i] = (fact[i-1]*i)%MOD\ninv = [1]*200013\n\nfor i in range(2,200013):\n    inv[i] = power(fact[i],MOD-2)\ndef C(n,k):\n    return (fact[n]*inv[k]*inv[n-k])%MOD\n\ndef rasch(x,y):\n\n    nonlocal mas\n    res = C(x+y-2,x-1)%MOD\n    for i in mas:\n        if (x==i[0] and y==i[1]): break\n        if i[0]<=x and i[1]<=y  :\n            l=C(x-i[0]+y-i[1],x-i[0])\n            k=rasch(i[0],i[1]) if not i[3] else i[2]\n            i[2]=k%MOD\n            i[3]=1\n            res-=l*k%MOD\n    return res%MOD\nh,w,n = map(int,input().split(\" \"))\nmas=[]\nfor i in range(n):\n    x,y= map(int,input().split(\" \"))\n    mas.append([x,y,0,0])\nmas.sort(key=lambda x: x[0]+x[1])\nprint(rasch(h,w)%MOD)", "MOD = 10**9+7\n\n\n\nfact = [1]*200013\nfor i in range(1,200013):\n    fact[i] = (fact[i-1]*i)%MOD\ninv = [1]*200013\n\nfor i in range(2,200013):\n    inv[i] = pow(fact[i],MOD-2,MOD)\ndef C(n,k):\n    return (fact[n]*inv[k]*inv[n-k])%MOD\n\ndef rasch(x,y):\n\n    nonlocal mas\n    res = C(x+y-2,x-1)%MOD\n    for i in mas:\n        if (x==i[0] and y==i[1]): break\n        if i[0]<=x and i[1]<=y  :\n            l=C(x-i[0]+y-i[1],x-i[0])\n            k=rasch(i[0],i[1]) if not i[3] else i[2]\n            i[2]=k%MOD\n            i[3]=1\n            res-=l*k%MOD\n    return res%MOD\nh,w,n = map(int,input().split(\" \"))\nmas=[]\nfor i in range(n):\n    x,y= map(int,input().split(\" \"))\n    mas.append([x,y,0,0])\nmas.sort(key=lambda x: x[0]+x[1])\nprint(rasch(h,w)%MOD)", "MOD = 10**9+7\ndef power( a,  n) :\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * a % MOD\n        a = a * a % MOD\n        n >>= 1\n\n    return ans\n\n\nfact = [1]*200003\nfor i in range(1,200003):\n    fact[i] = (fact[i-1]*i)%MOD\ninv = [1]*200003\n\nfor i in range(2,200003):\n    inv[i] = power(fact[i],MOD-2)\ndef C(n,k):\n    return (fact[n]*inv[k]*inv[n-k])%MOD\n\ndef rasch(x,y):\n\n    nonlocal mas\n    res = C(x+y-2,x-1)%MOD\n    for i in mas:\n        if (x==i[0] and y==i[1]): break\n        if i[0]<=x and i[1]<=y  :\n            l=C(x-i[0]+y-i[1],x-i[0])\n            k=rasch(i[0],i[1]) if not i[3] else i[2]\n            i[2]=k%MOD\n            i[3]=1\n            res-=l*k%MOD\n    return res%MOD\nh,w,n = map(int,input().split(\" \"))\nmas=[]\nfor i in range(n):\n    x,y= map(int,input().split(\" \"))\n    mas.append([x,y,0,0])\nmas.sort(key=lambda x: x[0]+x[1])\nprint(rasch(h,w)%MOD)", "MOD = 10**9+7\ndef power( a,  n) :\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * a % MOD;\n        a = a * a % MOD;\n        n >>= 1\n\n    return ans\n\n\nfact = [1]*200013\nfor i in range(1,200013):\n    fact[i] = (fact[i-1]*i)%MOD\ninv = [1]*200013\n\nfor i in range(2,200013):\n    inv[i] = power(fact[i],MOD-2)\ndef C(n,k):\n    return (fact[n]*inv[k]*inv[n-k])%MOD\nh,w,n = map(int,input().split(\" \"))\nmas=[]\nfor i in range(n):\n    x,y= map(int,input().split(\" \"))\n    mas.append([x,y,0,0])\nmas.append([h,w,0,0])\nmas.sort(key=lambda x: x[0]+x[1])\n\nfor j in mas:\n    j[2] = C(j[0]+j[1]-2,j[0]-1)%MOD\n    for i in mas:\n        if (j[0]==i[0] and j[1]==i[1]): break\n        if i[0]<=j[0] and i[1]<=j[1]:\n            l=C(j[0]-i[0]+j[1]-i[1],j[0]-i[0])%MOD\n            k= i[2]\n            j[2]-=l*k%MOD\n\n\n\nprint(mas[-1][2]%(10**9+7))", "MOD = 10**9+7\n\nfact = [1]*200003\nfor i in range(1,200003):\n    fact[i] = (fact[i-1]*i)%MOD\ninv = [1]*200003\nfor i in range(2,200003):\n    inv[i] = (-(MOD//i)*inv[MOD%i])%MOD\nfor i in range(2,200003):\n    inv[i] = (inv[i]*inv[i-1])%MOD\ndef C(n,k):\n    return (fact[n]*inv[k]*inv[n-k])%MOD\nh,w,n = map(int,input().split(\" \"))\nmas=[]\nfor i in range(n):\n    x,y= map(int,input().split(\" \"))\n    mas.append([x,y,0,0])\nmas.append([h,w,0,0])\nmas.sort(key=lambda x: x[0]+x[1])\n\nfor j in mas:\n    j[2] = C(j[0]+j[1]-2,j[0]-1)%MOD\n    for i in mas:\n        if (j[0]==i[0] and j[1]==i[1]): break\n        if i[0]<=j[0] and i[1]<=j[1]:\n            l=C(j[0]-i[0]+j[1]-i[1],j[0]-i[0])%MOD\n            k= i[2]\n            j[2]-=l*k%MOD\n\n\n\nprint(mas[-1][2]%MOD)", "MOD = 10 ** 9 + 7\n\nfact = [1]\nrfact = [1]\nfor i in range(1, 200500):\n    fact.append(fact[-1] * i % MOD)\n    rfact.append(rfact[-1] * pow(i, MOD - 2, MOD) % MOD)\n\ndef cnk(n, k):\n    return fact[n] * rfact[k] * rfact[n - k] % MOD\n\nh, w, n = list(map(int, input().split()))\n\npoints = []\nfor i in range(n):\n    points.append(tuple(map(int, input().split())))\n\npoints = sorted(points)\npoints.append((h, w))\n\ndp = [0 for i in range(len(points))]\n\nfor i in range(len(points)):\n    dp[i] = cnk(points[i][0] + points[i][1] - 2, points[i][0] - 1)\n\n    for j in range(i):\n        if points[j][0] <= points[i][0] and points[j][1] <= points[i][1]:\n            dp[i] -= dp[j] * cnk(points[i][0] + points[i][1] - points[j][0]\\\n                    - points[j][1], points[i][0] - points[j][0])\n\n    dp[i] %= MOD\n\nprint(dp[-1])\n", "fact = [1]\nrfact = [1]\n\nMOD = int(1e9) + 7\n\nn,m, k = list(map(int, input().split()))\nfor i in range(1, max(2*n,2*m)+2):\n    fact += [fact[-1] * i % MOD]\n    rfact += [rfact[-1] * pow(i, MOD - 2, MOD) % MOD]\n\n\ndef cmb(n, k):\n    return fact[n] * rfact[k] * rfact[n-k] % MOD\n\npoints = [tuple(map(int, input().split())) for i in range(k)]\npoints += [(n,m)]\n\npoints.sort()\n\ndp = []\n\nfor i in range(k+1):\n    tmp = cmb(points[i][0] + points[i][1] - 2, points[i][0] - 1)\n    for j in range(i):\n        if points[j][0] <= points[i][0] and points[j][1] <= points[i][1]:\n            tmp -= (dp[j]*cmb(points[i][0] - points[j][0] + points[i][1] - points[j][1], points[i][1] - points[j][1])) % MOD\n            tmp += MOD\n            tmp %= MOD\n    dp += [tmp]\n\nprint(dp[k])\n\n", "h,w,n = list(map(int, input().split()))\nl   = [tuple(map(int, input().split())) for i in range(n)]\nl.sort()\nl  += [(h,w)]\nN,B = (h + w + 1)<<1, 10**9+7\nfac,inv = [1] * N, [1] * N\nfor i in range(2, N):\n    fac[i] = (i * fac[i-1]) % B\n    inv[i] = (-(B//i) * (inv[B%i])) % B\nfor i in range(2, N):\n    inv[i] = (inv[i] * inv[i-1]) % B \nC   = lambda u, v: (((fac[u] * inv[v]) % B) * inv[u - v]) % B\nd   = []\nfor i in range(n+1):\n    d += [C(l[i][0] + l[i][1] - 2, l[i][0] - 1)]\n    for j in range(i):\n        if l[j][1] <= l[i][1]:\n            d[i] = (d[i] + B - (d[j] * C(l[i][0] + l[i][1] - l[j][0] - l[j][1], l[i][0] - l[j][0]) % B)) % B\nprint(d[n])\n\n    \n", "h,w,n = list(map(int, input().split()))\nl   = [tuple(map(int, input().split())) for i in range(n)]\nl.sort()\nl  += [(h,w)]\nN,B = (h + w + 1)<<1, 10**9+7\nfac,inv = [1] * N, [1] * N\nfor i in range(2, N):\n    fac[i] = (i * fac[i-1]) % B\n    inv[i] = (-(B//i) * (inv[B%i])) % B\nfor i in range(2, N):\n    inv[i] = (inv[i] * inv[i-1]) % B \nC   = lambda u, v: (((fac[u] * inv[v]) % B) * inv[u - v]) % B\nd   = []\nfor i in range(n+1):\n    d += [C(l[i][0] + l[i][1] - 2, l[i][0] - 1)]\n    for j in range(i):\n        if l[j][1] <= l[i][1]:\n            d[i] = (d[i] + B - (d[j] * C(l[i][0] + l[i][1] - l[j][0] - l[j][1], l[i][0] - l[j][0]) % B)) % B\nprint(d[n])\n\n    \n\n", "h,w,n = list(map(int, input().split()))\nl   = [tuple(map(int, input().split())) for i in range(n)]\nl.sort()\nl  += [(h,w)]\nN,B = (h + w + 1)<<1, 10**9+7\nfac,inv = [1] * N, [1] * N\nfor i in range(2, N):\n    fac[i] = (i * fac[i-1]) % B\n    inv[i] = (-(B//i) * (inv[B%i])) % B\nfor i in range(2, N):\n    inv[i] = (inv[i] * inv[i-1]) % B \nC   = lambda u, v: (((fac[u] * inv[v]) % B) * inv[u - v]) % B\nd   = []\nfor i in range(n+1):\n    d += [C(l[i][0] + l[i][1] - 2, l[i][0] - 1)]\n    for j in range(i):\n        if l[j][1] <= l[i][1]:\n            d[i] = (d[i] + B - (d[j] * C(l[i][0] + l[i][1] - l[j][0] - l[j][1], l[i][0] - l[j][0]) % B)) % B\nprint(d[n])\n\n    \n\n", "h,w,n = list(map(int, input().split()))\nl   = [tuple(map(int, input().split())) for i in range(n)]\nl.sort()\nl  += [(h,w)]\nN,B = (h + w + 1)<<1, 10**9+7\nfac,inv = [1] * N, [1] * N\nfor i in range(2, N):\n    fac[i] = (i * fac[i-1]) % B\n    inv[i] = (-(B//i) * (inv[B%i])) % B\nfor i in range(2, N):\n    inv[i] = (inv[i] * inv[i-1]) % B \nC   = lambda u, v: (((fac[u] * inv[v]) % B) * inv[u - v]) % B\nd   = []\nfor i in range(n+1):\n    d += [C(l[i][0] + l[i][1] - 2, l[i][0] - 1)]\n    for j in range(i):\n        if l[j][1] <= l[i][1]:\n            d[i] = (d[i] + B - (d[j] * C(l[i][0] + l[i][1] - l[j][0] - l[j][1], l[i][0] - l[j][0]) % B)) % B\nprint(d[n])\n\n    \n\n", "h,w,n = list(map(int, input().split()))\nl   = [tuple(map(int, input().split())) for i in range(n)]\nl.sort()\nl  += [(h,w)]\nN,B = (h + w + 1)<<1, 10**9+7\nfac,inv = [1] * N, [1] * N\nfor i in range(2, N):\n    fac[i] = (i * fac[i-1]) % B\n    inv[i] = (-(B//i) * (inv[B%i])) % B\nfor i in range(2, N):\n    inv[i] = (inv[i] * inv[i-1]) % B \nC   = lambda u, v: (((fac[u] * inv[v]) % B) * inv[u - v]) % B\nd   = []\nfor i in range(n+1):\n    d += [C(l[i][0] + l[i][1] - 2, l[i][0] - 1)]\n    for j in range(i):\n        if l[j][1] <= l[i][1]:\n            d[i] = (d[i] + B - (d[j] * C(l[i][0] + l[i][1] - l[j][0] - l[j][1], l[i][0] - l[j][0]) % B)) % B\nprint(d[n])\n\n    \n\n", "h,w,n = list(map(int, input().split()))\nl   = [tuple(map(int, input().split())) for i in range(n)]\nl.sort()\nl  += [(h,w)]\nN,B = (h + w + 1)<<1, 10**9+7\nfac,inv = [1] * N, [1] * N\nfor i in range(2, N):\n    fac[i] = (i * fac[i-1]) % B\n    inv[i] = (-(B//i) * (inv[B%i])) % B\nfor i in range(2, N):\n    inv[i] = (inv[i] * inv[i-1]) % B \nC   = lambda u, v: (((fac[u] * inv[v]) % B) * inv[u - v]) % B\nd   = []\nfor i in range(n+1):\n    d += [C(l[i][0] + l[i][1] - 2, l[i][0] - 1)]\n    for j in range(i):\n        if l[j][1] <= l[i][1]:\n            d[i] = (d[i] + B - (d[j] * C(l[i][0] + l[i][1] - l[j][0] - l[j][1], l[i][0] - l[j][0]) % B)) % B\nprint(d[n])\n\n    \n\n", "h,w,n = list(map(int, input().split()))\nl   = [tuple(map(int, input().split())) for i in range(n)]\nl.sort()\nl  += [(h,w)]\nN,B = (h + w + 1)<<1, 10**9+7\nfac,inv = [1] * N, [1] * N\nfor i in range(2, N):\n    fac[i] = (i * fac[i-1]) % B\n    inv[i] = (-(B//i) * (inv[B%i])) % B\nfor i in range(2, N):\n    inv[i] = (inv[i] * inv[i-1]) % B \nC   = lambda u, v: (((fac[u] * inv[v]) % B) * inv[u - v]) % B\nd   = []\nfor i in range(n+1):\n    d += [C(l[i][0] + l[i][1] - 2, l[i][0] - 1)]\n    for j in range(i):\n        if l[j][1] <= l[i][1]:\n            d[i] = (d[i] + B - (d[j] * C(l[i][0] + l[i][1] - l[j][0] - l[j][1], l[i][0] - l[j][0]) % B)) % B\nprint(d[n])\n\n    \n\n", "h,w,n = list(map(int, input().split()))\nl   = [tuple(map(int, input().split())) for i in range(n)]\nl.sort()\nl  += [(h,w)]\nN,B = (h + w + 1)<<1, 10**9+7\nfac,inv = [1] * N, [1] * N\nfor i in range(2, N):\n    fac[i] = (i * fac[i-1]) % B\n    inv[i] = (-(B//i) * (inv[B%i])) % B\nfor i in range(2, N):\n    inv[i] = (inv[i] * inv[i-1]) % B \nC   = lambda u, v: (((fac[u] * inv[v]) % B) * inv[u - v]) % B\nd   = []\nfor i in range(n+1):\n    d += [C(l[i][0] + l[i][1] - 2, l[i][0] - 1)]\n    for j in range(i):\n        if l[j][1] <= l[i][1]:\n            d[i] = (d[i] + B - (d[j] * C(l[i][0] + l[i][1] - l[j][0] - l[j][1], l[i][0] - l[j][0]) % B)) % B\nprint(d[n])\n\n    \n\n", "h,w,n = list(map(int, input().split()))\nl   = [tuple(map(int, input().split())) for i in range(n)]\nl.sort()\nl  += [(h,w)]\nN,B = (h + w + 1)<<1, 10**9+7\nfac,inv = [1] * N, [1] * N\nfor i in range(2, N):\n    fac[i] = (i * fac[i-1]) % B\n    inv[i] = (-(B//i) * (inv[B%i])) % B\nfor i in range(2, N):\n    inv[i] = (inv[i] * inv[i-1]) % B \nC   = lambda u, v: (((fac[u] * inv[v]) % B) * inv[u - v]) % B\nd   = []\nfor i in range(n+1):\n    d += [C(l[i][0] + l[i][1] - 2, l[i][0] - 1)]\n    for j in range(i):\n        if l[j][1] <= l[i][1]:\n            d[i] = (d[i] + B - (d[j] * C(l[i][0] + l[i][1] - l[j][0] - l[j][1], l[i][0] - l[j][0]) % B)) % B\nprint(d[n])\n\n    \n\n", "fact = [1]\nfTQJsiXxvUFMlBVGazWH = int\nfTQJsiXxvUFMlBVGazWp = map\nfTQJsiXxvUFMlBVGazWC = input\nfTQJsiXxvUFMlBVGazWn = range\nfTQJsiXxvUFMlBVGazWg = max\nfTQJsiXxvUFMlBVGazWo = pow\nfTQJsiXxvUFMlBVGazWu = tuple\nfTQJsiXxvUFMlBVGazWI = print\nrfact = [1]\nMOD = fTQJsiXxvUFMlBVGazWH(1e9)+7\nn, m, k = fTQJsiXxvUFMlBVGazWp(\n    fTQJsiXxvUFMlBVGazWH, fTQJsiXxvUFMlBVGazWC().split())\nfor i in fTQJsiXxvUFMlBVGazWn(1, fTQJsiXxvUFMlBVGazWg(2*n, 2*m)+2):\n    fact += [fact[-1]*i % MOD]\n    rfact += [rfact[-1]*fTQJsiXxvUFMlBVGazWo(i, MOD-2, MOD) % MOD]\n\n\ndef cmb(n, k):\n    return fact[n]*rfact[k]*rfact[n-k] % MOD\n\n\npoints = [fTQJsiXxvUFMlBVGazWu(fTQJsiXxvUFMlBVGazWp(\n    fTQJsiXxvUFMlBVGazWH, fTQJsiXxvUFMlBVGazWC().split()))for i in fTQJsiXxvUFMlBVGazWn(k)]\npoints += [(n, m)]\npoints.sort()\ndp = []\nfor i in fTQJsiXxvUFMlBVGazWn(k+1):\n    tmp = cmb(points[i][0]+points[i][1]-2, points[i][0]-1)\n    for j in fTQJsiXxvUFMlBVGazWn(i):\n        if points[j][0] <= points[i][0]and points[j][1] <= points[i][1]:\n            tmp -= (dp[j]*cmb(points[i][0]-points[j][0]+points[i]\n                              [1]-points[j][1], points[i][1]-points[j][1])) % MOD\n            tmp += MOD\n            tmp %= MOD\n    dp += [tmp]\nfTQJsiXxvUFMlBVGazWI(dp[k])"]