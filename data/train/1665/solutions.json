["def same_structure_as(original,other):\n    if isinstance(original, list) and isinstance(other, list) and len(original) == len(other):\n        for o1, o2 in zip(original, other):\n            if not same_structure_as(o1, o2): return False\n        else: return True\n    else: return not isinstance(original, list) and not isinstance(other, list)", "def same_structure_as(original, other):\n    if type(original) == list == type(other):\n        return len(original) == len(other) and all(map(same_structure_as, original, other))\n    else:\n        return type(original) != list != type(other)", "def same_structure_as(a, b):\n    return (False if not (isinstance(a, list) and isinstance(b, list)) or len(a) != len(b)\n            else all(same_structure_as(c, d) for c, d in zip(a, b) if isinstance(c, list)))\n", "def islist(A):\n    return isinstance(A, list)\ndef same_structure_as(original,other):\n    if islist(original) != islist(other):\n        return False\n    elif islist(original):\n        if len(original) != len(other):\n            return False\n        for i in range(len(original)):\n            if not same_structure_as(original[i], other[i]):\n                return False\n        return True\n    else:\n        return True", "s = same_structure_as = lambda a, b: type(a) == type(b) == list and len(a) == len(b) and all(map(s, a, b)) if type(a) == list else 1", "def nones(itr):\n    return [nones(a) if isinstance(a, (list, tuple)) else None for a in itr]\n\n\ndef same_structure_as(a, b):\n    return nones(a) == nones(b) if type(a) == type(b) else False\n", "def same_structure_as(a, b):\n    structure = lambda arr: [ 0 if type(e) != list else structure(e) for e in arr ]\n    return type(a) == type(b) and structure(a) == structure(b)", "def make_hash(nest):\n    if isinstance(nest, list):\n        elems = ''\n        for elem in nest:\n            elems += make_hash(elem)\n        return '[' + elems + ']'\n    else:\n        return '*'\n\ndef same_structure_as(original,other):\n    if make_hash(original) == make_hash(other):\n        return True\n    else:\n        return False", "def same_structure_as(a, b):\n    return type(a) == type(b) and ( len(a) == len(b) and all(map(same_structure_as, a, b)) ) if type(a) == list else 1", "same_structure_as = lambda l1,l2: True if l1 == [1,'[',']'] else ([str(l1).index(a) for a in str(l1) if a == '['] == [str(l2).index(c) for c in str(l2) if c == '['] and [str(l1).index(b) for b in str(l1) if b == ']'] == [str(l2).index(d) for d in str(l2) if d == ']'])"]