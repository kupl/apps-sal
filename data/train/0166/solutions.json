["class Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        flips = 0\n        print(bin(a))\n        print(bin(b))\n        print(bin(c))\n        while a or b or c:\n            # print(a, b, c)\n            if c % 2:\n                if not (a % 2 or b % 2):\n                    flips += 1\n            else:\n                flips += a % 2 + b % 2\n            a //= 2\n            b //= 2\n            c //= 2\n        return flips", "class Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        i, j, k = bin(a)[2:], bin(b)[2:], bin(c)[2:]\n        maxL = max(len(i), len(j), len(k))\n        i, j, k = '0' * (maxL - len(i)) + i, '0' * (maxL - len(j)) + j, '0' * (maxL - len(k)) + k\n        cnt = 0\n        for x, y, z in zip(i, j, k):\n            if z == '1' and x == '0' and y == '0':\n                cnt += 1\n            if z == '0':\n                if x == '1':\n                    cnt += 1\n                if y == '1':\n                    cnt += 1\n        return cnt", "class Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        count = 0\n        while a or b or c:\n            temp = (a & 1) | (b & 1)\n            if temp != (c & 1):\n                if c & 1:\n                    count += 1\n                else:\n                    if a & 1:\n                        count += 1\n                    if b & 1:\n                        count += 1\n            a = a >> 1\n            b = b >> 1\n            c = c >> 1\n        return count", "class Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        a = bin(a)[2:].zfill(32)\n        b = bin(b)[2:].zfill(32)\n        c = bin(c)[2:].zfill(32)\n        count = 0\n        \n        for i in range(32):\n            temp_a = int(a[i])\n            temp_b = int(b[i])\n            temp_c = int(c[i])\n            \n            if temp_a | temp_b != temp_c:\n                if temp_c == 1:\n                    count += 1\n                else:\n                    if temp_a == 1:\n                        count += 1\n                    if temp_b == 1:\n                        count += 1\n        return count\n", "# a, b, c (i subscript)\n# c = 0\n# -> a + b = 2 -> 2 flips\n# -> a + b = 1 -> 1 flip\n# -> a + b = 0 -> 0 flips\n# c = 1\n# -> a + b = 2 -> 0 flips\n# -> a + b = 1 -> 0 flips\n# -> a + b = 0 -> 1 flip\n\nclass Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        res = 0\n        \n        for i in range(32):\n            mask = 1 << i\n            ai = a & mask\n            bi = b & mask\n            ci = c & mask\n            \n            if ci == 0:\n                if ai and bi:\n                    res += 2\n                elif ai or bi:\n                    res += 1\n            else:\n                if not ai and not bi:\n                    res += 1\n        \n        return res\n", "class Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        stra = '{0:b}'.format(a)\n        strb = '{0:b}'.format(b)\n        strc = '{0:b}'.format(c)\n        n = max(len(stra),len(strb),len(strc))\n        stra = '0' * (n-len(stra)) + stra\n        strb = '0' * (n-len(strb)) + strb\n        strc = '0' * (n-len(strc)) + strc\n        boolA = [s=='1' for s in stra]\n        boolB = [s=='1' for s in strb]\n        boolC = [s=='1' for s in strc]\n        x = 0\n        for i in range(n):\n            A, B, C = boolA[i], boolB[i], boolC[i]\n            if not ((A or B) == C):\n                if A and B:\n                    x += 2\n                else:\n                    x += 1\n        return x\n", "class Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        flips = 0\n        while a or b or c:\n            if c & 1 == 0:\n                if a & 1:\n                    flips += 1\n                if b & 1:\n                    flips += 1\n            else:\n                if (a & 1) == 0 and (b & 1) == 0:\n                    flips += 1\n            a >>= 1\n            b >>= 1\n            c >>= 1\n        return flips\n                    \n                    \n                \n"]