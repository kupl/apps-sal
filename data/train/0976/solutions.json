["# cook your dish here\nn=int(input())\nstringa=list(map(int,input().split()))\ncounter=0\ncounter1=0\ncounter3=0\nsomma1=0\nsomma2=0\nmassimo=0\nmassimo1=0\nmassimo3=0 \nstack=[]\nfor par in stringa:\n    if par==1 or par==3:\n        if counter1==0 and par==1:\n            counter1=1\n            somma1=1\n            massimo1=max(massimo1, 1)\n        elif counter1>0:\n            counter1+=1 \n            somma1+=1\n            massimo1=max(massimo1, somma1)\n        if counter3==0 and par==3:\n            counter3=1\n            somma3=1\n            massimo3=max(massimo3, 1)\n        elif counter3>0:\n            counter3+=1\n            somma3+=1\n            massimo3=max(massimo3, somma3)\n        if counter==0:\n            counter=1 \n            massimo=max(massimo,1)\n        if len(stack)>0 and par!=stack[-1]:\n            counter+=1 \n            massimo=max(massimo,counter)\n        stack.append(par)\n    else:\n        if counter1>0:\n            counter1-=1 \n            somma1+=1\n            massimo1=max(massimo1, somma1)\n        if counter3>0:\n            counter3-=1 \n            somma3+=1\n            massimo3=max(massimo3, somma3)\n        appo=stack.pop()\n        if len(stack)>0 and appo==stack[-1]:\n            pass\n        else:\n            counter-=1\nprint(massimo, massimo1, massimo3)\n", "# cook your dish here\nclass Stack:\n\tdef __init__(self):\n\t\tself.items=[]\n\t\n\tdef empty(self):\n\t\treturn\tself.items==[]\n\t\n\tdef push(self,item):\n\t\tself.items.append(item)\n\t\n\tdef pop(self):\n\t\treturn self.items.pop()\n\t\n\tdef top(self):\n\t\treturn self.items[-1]\n\t\n\tdef size(self):\n\t\treturn len(self.items)\n\tdef __iter__(self):\n\t\treturn self\n\tdef __next__(self):\n\t\treturn _StackIterator(self.items())\n\t\t\nclass _StackIterator:\n\tdef __init__(self,stack):\n\t\tself.stackRef=stack\n\t\tself.curInd=0\n\tdef __iter__(self):\n\t\treturn self\n\tdef __next__(self):\n\t\tif self.curInd<self.size():\n\t\t\tentry=self.stackRef[self.curInd]\n\t\t\tself.curInd+=1\n\t\t\treturn entry\n\t\telse:\n\t\t\traise StopIteration\ndef main():\n\t\n\tn=int(input())\n\tSymbol=Stack()\n\tIndex=Stack()\n\tFirstBracket=ThirdBracket=0\n\tarr=list(map(int,input().split()))\n\t\n\tfor i in range(n):\n\t\tif arr[i]==1 or arr[i]==3:\n\t\t\tSymbol.push(arr[i])\n\t\t\tIndex.push(i)\n\t\telse:\n\t\t\ttemp=Symbol.pop()\n\t\t\tif temp==1:\n\t\t\t\tFirstBracket=max(FirstBracket,i-Index.pop()+1)\n\t\t\telif temp==3:\n\t\t\t\tThirdBracket=max(ThirdBracket,i-Index.pop()+1)\n\tseq=Stack()\n\tAlterDepth=0\n\tcurDepth=Stack()\n\tfor i in range(n):\n\t\tif (arr[i]==1 or arr[i]==3) and seq.empty():\n\t\t\tcurDepth.push(1)\n\t\t\tseq.push(arr[i])\n\t\t\tAlterDepth=max(AlterDepth,curDepth.top())\n\t\t\t\n\t\telif arr[i]==1 and seq.top()==3:\n\t\t\tcurDepth.push(curDepth.top()+1)\n\t\t\tseq.push(arr[i])\n\t\t\tAlterDepth=max(AlterDepth,curDepth.top())\n\t\t\t\n\t\telif arr[i]==3 and seq.top()==1:\n\t\t\tcurDepth.push(curDepth.top()+1)\n\t\t\tseq.push(arr[i])\n\t\t\tAlterDepth=max(AlterDepth,curDepth.top())\n\t\t\n\t\telif (arr[i]==1 or arr[i]==3):\n\t\t\tcurDepth.push(curDepth.top())\n\t\t\tseq.push(arr[i])\n\t\t\tAlterDepth=max(curDepth.top(),AlterDepth)\n\t\t\n\t\telif arr[i]==2 or arr[i]==4:\n\t\t\tcurDepth.pop()\n\t\t\tseq.pop()\n\tprint(AlterDepth,FirstBracket,ThirdBracket)\n\t\t\t\t\n\t\ndef __starting_point():\n\t\n\tmain()\n__starting_point()", "class Stack:\r\n\tdef __init__(self):\r\n\t\tself.items=[]\r\n\t\r\n\tdef empty(self):\r\n\t\treturn\tself.items==[]\r\n\t\r\n\tdef push(self,item):\r\n\t\tself.items.append(item)\r\n\t\r\n\tdef pop(self):\r\n\t\treturn self.items.pop()\r\n\t\r\n\tdef top(self):\r\n\t\treturn self.items[-1]\r\n\t\r\n\tdef size(self):\r\n\t\treturn len(self.items)\r\n\tdef __iter__(self):\r\n\t\treturn self\r\n\tdef __next__(self):\r\n\t\treturn _StackIterator(list(self.items()))\r\n\t\t\r\nclass _StackIterator:\r\n\tdef __init__(self,stack):\r\n\t\tself.stackRef=stack\r\n\t\tself.curInd=0\r\n\tdef __iter__(self):\r\n\t\treturn self\r\n\tdef __next__(self):\r\n\t\tif self.curInd<self.size():\r\n\t\t\tentry=self.stackRef[self.curInd]\r\n\t\t\tself.curInd+=1\r\n\t\t\treturn entry\r\n\t\telse:\r\n\t\t\traise StopIteration\r\ndef main():\r\n\t\r\n\tn=int(input())\r\n\tSymbol=Stack()\r\n\tIndex=Stack()\r\n\tFirstBracket=ThirdBracket=0\r\n\tarr=list(map(int,input().split()))\r\n\t\r\n\tfor i in range(n):\r\n\t\tif arr[i]==1 or arr[i]==3:\r\n\t\t\tSymbol.push(arr[i])\r\n\t\t\tIndex.push(i)\r\n\t\telse:\r\n\t\t\ttemp=Symbol.pop()\r\n\t\t\tif temp==1:\r\n\t\t\t\tFirstBracket=max(FirstBracket,i-Index.pop()+1)\r\n\t\t\telif temp==3:\r\n\t\t\t\tThirdBracket=max(ThirdBracket,i-Index.pop()+1)\r\n\tseq=Stack()\r\n\tAlterDepth=0\r\n\tcurDepth=Stack()\r\n\tfor i in range(n):\r\n\t\tif (arr[i]==1 or arr[i]==3) and seq.empty():\r\n\t\t\tcurDepth.push(1)\r\n\t\t\tseq.push(arr[i])\r\n\t\t\tAlterDepth=max(AlterDepth,curDepth.top())\r\n\t\t\t\r\n\t\telif arr[i]==1 and seq.top()==3:\r\n\t\t\tcurDepth.push(curDepth.top()+1)\r\n\t\t\tseq.push(arr[i])\r\n\t\t\tAlterDepth=max(AlterDepth,curDepth.top())\r\n\t\t\t\r\n\t\telif arr[i]==3 and seq.top()==1:\r\n\t\t\tcurDepth.push(curDepth.top()+1)\r\n\t\t\tseq.push(arr[i])\r\n\t\t\tAlterDepth=max(AlterDepth,curDepth.top())\r\n\t\t\r\n\t\telif (arr[i]==1 or arr[i]==3):\r\n\t\t\tcurDepth.push(curDepth.top())\r\n\t\t\tseq.push(arr[i])\r\n\t\t\tAlterDepth=max(curDepth.top(),AlterDepth)\r\n\t\t\r\n\t\telif arr[i]==2 or arr[i]==4:\r\n\t\t\tcurDepth.pop()\r\n\t\t\tseq.pop()\r\n\tprint(AlterDepth,FirstBracket,ThirdBracket)\r\n\t\t\t\t\r\n\t\r\ndef __starting_point():\r\n\t\r\n\tmain()\r\n\n__starting_point()", "# cook your dish here\nn=int(input())\narr=list(map(int,input().split()))\nb1=b2=maxb1=maxb2=b1pos=b2pos=0\nstacklen=0\nstack=[]\ncurrtoggle=0\nmaxtoggle=0\nfor i in range(n):\n\tif arr[i]==1:\n\t\tif b1==0:\n\t\t\tb1pos=i\n\t\tb1+=1\n\t\tif currtoggle==0 or stack[-1]==3:\n\t\t\tcurrtoggle+=1\n\t\tmaxtoggle=max(currtoggle,maxtoggle)\n\t\tstack.append(1)\n\t\tstacklen+=1\n\telif arr[i]==2:\n\t\tb1-=1\n\t\tif b1==0 and i-b1pos+1>maxb1:\n\t\t\tmaxb1=i-b1pos+1\n\t\tstack.pop()\n\t\tstacklen-=1\n\t\tif stacklen==0 or stack[-1]==3:\n\t\t\tcurrtoggle-=1\n\telif arr[i]==3:\n\t\tif b2==0:\n\t\t\tb2pos=i\n\t\tb2+=1\n\t\tif currtoggle==0 or stack[-1]==1:\n\t\t\tcurrtoggle+=1\n\t\tmaxtoggle=max(currtoggle,maxtoggle)\n\t\tstack.append(3)\n\t\tstacklen+=1\n\telse:\n\t\tb2-=1\n\t\tif b2==0 and i-b2pos+1>maxb2:\n\t\t\tmaxb2=i-b2pos+1\n\t\tstack.pop()\n\t\tstacklen-=1\n\t\tif stacklen==0 or stack[-1]==1:\n\t\t\tcurrtoggle-=1\nprint(maxtoggle,maxb1,maxb2)", "n=int(input())\r\narr=list(map(int,input().split()))\r\nb1=b2=maxb1=maxb2=b1pos=b2pos=0\r\nstacklen=0\r\nstack=[]\r\ncurrtoggle=0\r\nmaxtoggle=0\r\nfor i in range(n):\r\n\tif arr[i]==1:\r\n\t\tif b1==0:\r\n\t\t\tb1pos=i\r\n\t\tb1+=1\r\n\t\tif currtoggle==0 or stack[-1]==3:\r\n\t\t\tcurrtoggle+=1\r\n\t\tmaxtoggle=max(currtoggle,maxtoggle)\r\n\t\tstack.append(1)\r\n\t\tstacklen+=1\r\n\telif arr[i]==2:\r\n\t\tb1-=1\r\n\t\tif b1==0 and i-b1pos+1>maxb1:\r\n\t\t\tmaxb1=i-b1pos+1\r\n\t\tstack.pop()\r\n\t\tstacklen-=1\r\n\t\tif stacklen==0 or stack[-1]==3:\r\n\t\t\tcurrtoggle-=1\r\n\telif arr[i]==3:\r\n\t\tif b2==0:\r\n\t\t\tb2pos=i\r\n\t\tb2+=1\r\n\t\tif currtoggle==0 or stack[-1]==1:\r\n\t\t\tcurrtoggle+=1\r\n\t\tmaxtoggle=max(currtoggle,maxtoggle)\r\n\t\tstack.append(3)\r\n\t\tstacklen+=1\r\n\telse:\r\n\t\tb2-=1\r\n\t\tif b2==0 and i-b2pos+1>maxb2:\r\n\t\t\tmaxb2=i-b2pos+1\r\n\t\tstack.pop()\r\n\t\tstacklen-=1\r\n\t\tif stacklen==0 or stack[-1]==1:\r\n\t\t\tcurrtoggle-=1\r\nprint(maxtoggle,maxb1,maxb2)", "\r\nimport collections\r\n\r\n\r\ndef convertInputToBrackets(arr):\r\n    res = []\r\n\r\n    for elem in arr:\r\n        if elem == \"1\":\r\n            res.append(\"(\")\r\n        elif elem == \"2\":\r\n            res.append(\")\")\r\n        elif elem == \"3\":\r\n            res.append(\"[\")\r\n        elif elem == \"4\":\r\n            res.append(\"]\")\r\n\r\n    return res\r\n\r\n\r\ndef solve(n, arr):\r\n    balParanthesis, balBrackets = 0, 0\r\n    balParans, balBracks = [0], [0]\r\n    stack = []\r\n\r\n    altDepth, maxAltDepth = 0, 0\r\n    maxParanLength, maxBrackLength = 0, 0\r\n\r\n    for ch in arr:\r\n        if ch == \")\" or ch == \"]\":\r\n            if ch == \")\":\r\n                balParanthesis -= 1\r\n            elif ch == \"]\":\r\n                balBrackets -= 1\r\n\r\n            lastCh, lastAltDepth = stack.pop()\r\n            maxAltDepth = max(maxAltDepth, lastAltDepth)\r\n        else:\r\n            if ch == \"(\":\r\n                balParanthesis += 1\r\n            elif ch == \"[\":\r\n                balBrackets += 1\r\n\r\n            if not stack:\r\n                stack.append((ch, 1))\r\n            elif stack[-1][0] != ch:\r\n                stack.append((ch, stack[-1][1] + 1))\r\n            else:\r\n                stack.append(stack[-1])\r\n\r\n        balBracks.append(balBrackets)\r\n        balParans.append(balParanthesis)\r\n\r\n    lastParan, lastBrack = -1, -1\r\n\r\n    for i in range(n+1):\r\n        if balBracks[i] == 0:\r\n            maxBrackLength = max(maxBrackLength, i-lastBrack)\r\n            lastBrack = i\r\n\r\n        if balParans[i] == 0:\r\n            maxParanLength = max(maxParanLength, i - lastParan)\r\n            lastParan = i\r\n\r\n    return \" \".join(map(str, (maxAltDepth, maxParanLength, maxBrackLength)))\r\n\r\n\r\nn = int(input().strip())\r\narr = input().strip().split()\r\narr = convertInputToBrackets(arr)\r\n\r\nprint(solve(n, arr))\r\n", "#dt = {} for i in x: dt[i] = dt.get(i,0)+1\n#dt = {k:v for k,v in sorted(x.items(), key=lambda i: i[1])}\nipnl = lambda n: [int(input()) for _ in range(n)]\ninp = lambda :int(input())\nip = lambda :[int(w) for w in input().split()]\n\nn = inp()\nx = ip()\nbrac,ind = [],[]\ndt = {2:0,4:0}\nfor i in range(n):\n    if x[i] in [1,3]:\n        brac.append(x[i])\n        ind.append(i)\n        continue\n    dt[x[i]] = max(dt[x[i]],i-ind[-1]+1)\n    ind.pop()\n    brac.pop()\nalt = 0\nbrac,depth = [],[]\nfor i in range(n):\n    if (x[i] == 1 or x[i] == 3) and brac == []:\n        brac.append(x[i])\n        depth.append(1)\n        alt = max(alt,depth[-1])\n    elif x[i]*brac[-1] == 3:\n        brac.append(x[i])\n        depth.append(depth[-1]+1)\n        alt = max(alt,depth[-1])\n    elif x[i]==1 or x[i]==3:\n        brac.append(x[i])\n        depth.append(depth[-1])\n        alt = max(alt,depth[-1])\n    elif x[i]==2 or x[i]==4:\n        brac.pop()\n        depth.pop()\n    \nprint(alt,dt[2],dt[4])\n", "t = int(input())\r\n\r\ns = \"\"\r\ng = []\r\n\r\ng = list(map(int, input().split()))\r\nfor ele in g:\r\n\tif ele == 1:\r\n\t\ts += '('\r\n\telif ele == 2:\r\n\t\ts += ')'\r\n\telif ele == 3:\r\n\t\ts += '['\r\n\telse :\r\n\t\ts += ']'\r\n\r\n#s = input()\r\n#t = len(s)\r\nstack = []\r\n#print(s)\r\ndeptho = 0\r\nif len(s) > 0:\r\n\tdeptho = 1\r\n\r\n\r\nd = {}\r\nd[0]  = deptho\r\nd[1]  = 0\r\nd[2] = 0\r\n\r\n#vis = [0]*n\r\nstack = []\r\ndepth = []\r\n\r\n\r\nfor i in range(t):\r\n\tif len(stack) == 0 and (s[i] == '(' or s[i] == '['):\r\n\t\tstack.append(s[i])\r\n\t\tdepth.append(1)\r\n\telif (s[i] == '(' and stack[-1] == '[') or (s[i] == '[' and stack[-1] == '('):\r\n\t\tstack.append(s[i])\r\n\t\tdepth.append(depth[-1]+1)\r\n\telif (s[i] == '(') or (s[i] == '['):\r\n\t\tstack.append(s[i])\r\n\t\tdepth.append(depth[-1])\r\n\r\n\tdeptho = max(deptho, depth[-1])\r\n\r\n\tif s[i] == ')' or s[i] == ']':\r\n\t\tstack.pop()\r\n\t\tdepth.pop()\r\n\r\nd[0] = deptho\r\n\r\n\r\np_char = 0\r\nsq_char = 0\r\nmax_sq_char = 0\r\nmax_p_char = 0\r\np_depth = 0\r\nsq_depth = 0\r\n\r\nfor i in range(t):\r\n\tif(s[i] == '('):\r\n\t\tp_depth += 1\r\n\tif(s[i] == '['):\r\n\t\tsq_depth+=1\r\n\r\n\tif(p_depth):\r\n\t\tp_char+=1\r\n\tif(sq_depth):\r\n\t\tsq_char+=1\r\n\r\n\tmax_sq_char = max(max_sq_char, sq_char)\r\n\tmax_p_char = max(max_p_char, p_char)\r\n\r\n\tif(s[i] == ')'):\r\n\t\tp_depth-=1\r\n\tif(s[i] == ']'):\r\n\t\tsq_depth-=1\r\n\r\n\tif(p_depth == 0):\tp_char = 0\r\n\tif(sq_depth == 0):\tsq_char = 0\r\n\r\nd[1] = max_p_char\r\nd[2] = max_sq_char\r\nprint(d[0],d[1],d[2])\r\n\r\n\r\n\r\n", "n=int(input())\r\n\r\na=[int(x) for x in input().split()]\r\nk,d=0,0\r\nst=[]\r\n\r\nst.append(a[0])\r\nk,d=1,1\r\nfor i in range(1,n):\r\n    if a[i]==1 or a[i]==3:\r\n        st.append(a[i])\r\n\r\n        if st[len(st)-1]!=st[len(st)-2]:\r\n            k+=1\r\n            if k>d:\r\n                d+=1\r\n        #print(st,k,d)\r\n    else:\r\n        try:\r\n            if st[len(st)-1]!=st[len(st)-2]:\r\n                k-=1\r\n            st.pop()\r\n        except:\r\n            st.pop()\r\n            k-=1\r\n        #print(st,k,d)\r\n\r\nc1,max1=0,0\r\ns1=[]\r\nfor i in range(n):\r\n    try:\r\n        if len(s1)==0 and a[i]==1:\r\n            s1.append(a[i])\r\n            c1+=1\r\n        elif len(s1)!=0 and (a[i]==1 or a[i]==3):\r\n            s1.append(a[i])\r\n            c1+=1\r\n\r\n        elif a[i]==2 or a[i]==4:\r\n            s1.pop()\r\n            c1+=1\r\n        if max1 < c1:\r\n            max1 = c1\r\n        if len(s1)==0:\r\n            c1=0\r\n    except:\r\n        pass\r\n\r\n\r\n\r\nc2,max2=0,0\r\ns2=[]\r\nfor i in range(n):\r\n    try:\r\n        if len(s2)==0 and a[i]==3:\r\n            s2.append(a[i])\r\n            c2+=1\r\n        elif len(s2)!=0 and (a[i]==1 or a[i]==3):\r\n            s2.append(a[i])\r\n            c2+=1\r\n\r\n        elif a[i]==2 or a[i]==4:\r\n            s2.pop()\r\n            c2+=1\r\n        if max2 < c2:\r\n            max2 = c2\r\n        if len(s2)==0:\r\n            c2=0\r\n    except:\r\n        pass\r\n\r\nprint(d,max1,max2)\r\n", "n=int(input())\r\nit=list(map(int,input().split()))\r\nmaa=0\r\nma=0\r\nj=0\r\ndd=0\r\nss={}\r\nmi=0\r\na=[]\r\nb=[]\r\nfor i in it:\r\n    i-=1\r\n    if i==1 or i==3:\r\n        c=a.pop()\r\n        d=b.pop()\r\n        if i==1:\r\n            maa=max(maa,j-c[1]+1)\r\n        else:\r\n            mi=max(mi,j-c[1]+1)\r\n    else:\r\n        if a==[]:\r\n            a.append([i,j])\r\n            b.append(1)\r\n        else:\r\n            \r\n            if i==a[-1][0]:\r\n                \r\n                b.append(b[-1])\r\n            else:\r\n                b.append(b[-1]+1)\r\n            a.append([i,j])\r\n    if b:\r\n        ma=max(ma,b[-1])\r\n    j+=1\r\n   # print(a,b)\r\n    \r\nprint(ma,maa,mi)\r\n\r\n        \r\n", "length = int(input())\r\nbrackets = [int(i) for i in input().split()]\r\nalternateDepths = []\r\nsquareSymbols, roundedSymbols = 0, 0\r\n\r\nlastAlternatedLevel, lastAlternatedBracket, alDepth, level = [None], [None], 0, 0\r\nlowestSquareHeight, lowestRoundedHeight = float(\"inf\"), float(\"inf\")\r\nbetweenSquare, betweenRounded = 0, 0\r\nfor i in brackets:\r\n\tif lowestRoundedHeight != float(\"inf\"):\r\n\t\tbetweenRounded += 1\r\n\tif lowestSquareHeight != float(\"inf\"):\r\n\t\tbetweenSquare += 1\r\n\r\n\tif i in [1, 3]:\r\n\t\tlevel += 1\r\n\t\tif i != lastAlternatedBracket[-1]:\r\n\t\t\talDepth += 1\r\n\t\t\tlastAlternatedBracket.append(i)\r\n\t\t\tlastAlternatedLevel.append(level)\r\n\t\tif i == 1 and level < lowestRoundedHeight:\r\n\t\t\t# print(\"Setting Rounded\", level)\r\n\t\t\tlowestRoundedHeight = level\r\n\t\t\tbetweenRounded += 1\r\n\t\telif i == 3 and level < lowestSquareHeight:\r\n\t\t\tlowestSquareHeight = level\r\n\t\t\tbetweenSquare += 1\r\n\telse:\r\n\t\tif i == lastAlternatedBracket[-1] + 1 and level == lastAlternatedLevel[-1]:\r\n\t\t\talternateDepths.append(alDepth)\r\n\t\t\talDepth -= 1\r\n\t\t\tlastAlternatedLevel.pop()\r\n\t\t\tlastAlternatedBracket.pop()\r\n\r\n\t\tif i == 2 and level == lowestRoundedHeight:\r\n\t\t\t# print(\"here1\", betweenRounded)\r\n\t\t\tif betweenRounded > roundedSymbols:\r\n\t\t\t\troundedSymbols = betweenRounded\r\n\t\t\tlowestRoundedHeight = float(\"inf\")\r\n\t\t\tbetweenRounded = 0\r\n\r\n\t\tif i == 4 and level == lowestSquareHeight:\r\n\t\t\tif betweenSquare > squareSymbols:\r\n\t\t\t\tsquareSymbols = betweenSquare\r\n\t\t\tlowestSquareHeight = float(\"inf\")\r\n\t\t\tbetweenSquare = 0\r\n\r\n\t\tlevel -= 1\r\n\r\nprint(max(alternateDepths), roundedSymbols, squareSymbols)\r\n", "def solution(s, op, cl):\r\n    if op not in s:\r\n        return 0\r\n    \r\n    st = []\r\n    le = mle = 0\r\n\r\n    for c in s:\r\n        if c == op:\r\n            st.append(c)\r\n        if c == cl:\r\n            st.pop()\r\n\r\n        le += 1\r\n\r\n        if not st:\r\n            if le > mle:\r\n                mle = le\r\n\r\n            le = 0\r\n\r\n    return mle\r\n\r\n\r\ndef altdepth(s):\r\n    pre = []\r\n    dep = []\r\n    ma = 0\r\n\r\n    for c in s:\r\n        if c == ')' or c == ']':\r\n            pre.pop()\r\n            dep.pop()\r\n            continue\r\n\r\n        if not pre:\r\n            pre.append(c)\r\n            dep.append(1)\r\n\r\n        elif c != pre[-1]:\r\n            pre.append(c)\r\n            dep.append(dep[-1] + 1)\r\n\r\n        else:\r\n            pre.append(c)\r\n            dep.append(dep[-1])\r\n\r\n        if dep:\r\n            ma = max(ma, dep[-1])\r\n\r\n    return ma\r\n\r\nn = int(input())\r\nx = '()[]'\r\ns = ''.join(x[i - 1] for i in list(map(int, input().split())))\r\n\r\nprint(altdepth(s), solution(s, '(', ')'), solution(s, '[', ']'))", "# cook your dish here\nn = int(input())\na = list(map(int,input().split()))\n#a = [1,1,3,4,1,2,2,2]\n#n = 14\nk = 0\nl = 0\nans1 = 0\nans2 = 0\nb = 0\nc = 0\nmark1 = 0\nmark2 = 0\nfor i in range(0,n):\n  if a[i]==1 and mark1==0:\n    b += 1\n    k = i\n    mark1=1\n  elif a[i]==1:\n    b += 1\n  elif a[i]==2 and b==1:\n    b -= 1\n    k = i-k+1\n    ans1 = max(ans1,k)\n    mark1 = 0\n  elif a[i]==2:\n    b -= 1\n  elif a[i]==3 and mark2==0:\n    c += 1\n    l = i\n    mark2=1\n  elif a[i]==3:\n    c += 1\n  elif a[i]==4 and c==1:\n    c -= 1\n    l = i-l+1\n    ans2 = max(ans2,l)\n    mark2 = 0\n  elif a[i]==4:\n    c -= 1\ndef alt_solve(s):\n    pre = []\n    dep = []\n    ma = 0\n\n    for c in s:\n        if c == 2 or c == 4:\n            pre.pop()\n            dep.pop()\n            continue\n\n        if not pre:\n            pre.append(c)\n            dep.append(1)\n\n        elif c != pre[-1]:\n            pre.append(c)\n            dep.append(dep[-1] + 1)\n\n        else:\n            pre.append(c)\n            dep.append(dep[-1])\n\n        if dep:\n            ma = max(ma, dep[-1])\n\n    return ma\nprint(alt_solve(a),ans1,ans2)", "input()\nbrackets = list(map(int, input().split()))\ndepth = 0\nrn_longest = 0\nsq_longest = 0\nalt_depth = 0\nmax_alt_depth = 0\nlast_alt = (alt_depth, 1 if brackets[0] == 3 else 3)\nsame_rep = [0]\nsq_start = (-2, 0) # index, -2 if not found\nrn_start = (-2, 0) # , depth - 1\n\nfor i in range(len(brackets)):\n    b = brackets[i]\n    if b in [1, 3]:\n        depth += 1\n        if b != last_alt[1]:\n            alt_depth += 1\n            last_alt = (alt_depth, b)\n            max_alt_depth = max(alt_depth, max_alt_depth)\n            same_rep += [0]\n        else:\n            same_rep[-1] += 1\n        if sq_start[0] == -2 and b == 3:\n            sq_start = (i - 1, depth - 1)\n        elif rn_start[0] == -2 and b == 1:\n            rn_start = (i - 1, depth - 1)\n    else:\n        depth -= 1\n        if b == last_alt[1] + 1:\n            if same_rep[-1] > 0:\n                same_rep[-1] -= 1\n            else:\n                alt_depth -= 1\n                last_alt = (alt_depth, 1 if b == 4 else 3)\n                same_rep.pop(-1)\n        if sq_start[1] == depth and b == 4:\n            sq_longest = max(sq_longest, i - sq_start[0])\n            sq_start = (-2, 0)\n        elif rn_start[1] == depth and b == 2:\n            rn_longest = max(rn_longest, i - rn_start[0])\n            rn_start = (-2, 0)\n    # print(i + 1, alt_depth, same_rep)\n    if depth == 0:\n        if i < len(brackets) - 1:\n            last_alt = (alt_depth, 1 if brackets[i+1] == 3 else 3)\nprint(max_alt_depth, rn_longest, sq_longest)", "def solve(s, op, cl):\r\n    if op not in s:\r\n        return 0\r\n    \r\n    st = []\r\n    le = mle = 0\r\n\r\n    for c in s:\r\n        if c == op:\r\n            st.append(c)\r\n        if c == cl:\r\n            st.pop()\r\n\r\n        le += 1\r\n\r\n        if not st:\r\n            if le > mle:\r\n                mle = le\r\n\r\n            le = 0\r\n\r\n    return mle\r\n\r\n\r\ndef alt_solve(s):\r\n    pre = []\r\n    dep = []\r\n    ma = 0\r\n\r\n    for c in s:\r\n        if c == ')' or c == ']':\r\n            pre.pop()\r\n            dep.pop()\r\n            continue\r\n\r\n        if not pre:\r\n            pre.append(c)\r\n            dep.append(1)\r\n\r\n        elif c != pre[-1]:\r\n            pre.append(c)\r\n            dep.append(dep[-1] + 1)\r\n\r\n        else:\r\n            pre.append(c)\r\n            dep.append(dep[-1])\r\n\r\n        if dep:\r\n            ma = max(ma, dep[-1])\r\n\r\n    return ma\r\n\r\nn = int(input())\r\nx = '()[]'\r\ns = ''.join(x[i - 1] for i in list(map(int, input().split())))\r\n\r\nprint(alt_solve(s), solve(s, '(', ')'), solve(s, '[', ']'))\r\n", "def solve(s, op, cl):\r\n    st = []\r\n    le = mle = 0\r\n\r\n    for c in s:\r\n        if c == op:\r\n            st.append(c)\r\n        if c == cl:\r\n            st.pop()\r\n\r\n        le += 1\r\n\r\n        if not st:\r\n            if le > mle:\r\n                mle = le\r\n\r\n            le = 0\r\n\r\n    return mle\r\n\r\n\r\ndef alt_solve(s):\r\n    pre = []\r\n    dep = []\r\n    ma = 0\r\n\r\n    for c in s:\r\n        if c == ')' or c == ']':\r\n            pre.pop()\r\n            dep.pop()\r\n            continue\r\n\r\n        if not pre:\r\n            pre.append(c)\r\n            dep.append(1)\r\n\r\n        elif c != pre[-1]:\r\n            pre.append(c)\r\n            dep.append(dep[-1] + 1)\r\n\r\n        else:\r\n            pre.append(c)\r\n            dep.append(dep[-1])\r\n\r\n        if dep:\r\n            ma = max(ma, dep[-1])\r\n\r\n    return ma\r\n\r\nn = int(input())\r\nx = '()[]'\r\ns = ''.join(x[i - 1] for i in list(map(int, input().split())))\r\n\r\nprint(alt_solve(s), solve(s, '(', ')'), solve(s, '[', ']'))\r\n", "def solve(s, op, cl):\r\n    st = []\r\n    le = mle = 0\r\n\r\n    for c in s:\r\n        if c == op:\r\n            st.append(c)\r\n        if c == cl:\r\n            st.pop()\r\n\r\n        le += 1\r\n\r\n        if not st:\r\n            if le > mle:\r\n                mle = le\r\n\r\n            le = 0\r\n\r\n    return mle\r\n\r\n\r\ndef alt_solve(s):\r\n    pre = []\r\n    dep = []\r\n    ma = 0\r\n\r\n    for c in s:\r\n        if (c == '(' or c == '[') and pre == []:\r\n            pre.append(c)\r\n            dep.append(1)\r\n\r\n        elif (c == '(' and pre[-1] == '[') or (c == '[' and pre[-1] == '('):\r\n            pre.append(c)\r\n            dep.append(dep[-1] + 1)\r\n\r\n        elif c == '(' or c == '[':\r\n            pre.append(c)\r\n            dep.append(dep[-1])\r\n\r\n        elif c == ')' or c == ']':\r\n            pre.pop()\r\n            dep.pop()\r\n\r\n        if dep:\r\n            ma = max(ma, dep[-1])\r\n\r\n    return ma\r\n\r\nn = int(input())\r\nx = '()[]'\r\ns = ''.join(x[i - 1] for i in list(map(int, input().split())))\r\n\r\nprint(alt_solve(s), solve(s, '(', ')'), solve(s, '[', ']'))\r\n", "n = int(input())\nbr = [int(i) for i in input().split()]\nn = len(br)\nalt_count = 0\nprev_alt = -1\nmax_alt = 0\n\nflag1 = flag2 = 0\nstart1 = start2 = max1 = max2 = 0\nhelp_arr = [[0, 0]]\n\nfor i in range(n):\n    if br[i] == 1:\n        if flag1 == 0: start1 = i\n        flag1 += 1\n    elif br[i] == 2:\n        flag1 -= 1\n        if flag1 == 0 and i - start1 > max1:\n            max1 = i - start1\n            #print(start1, i)\n    elif br[i] == 3:\n        if flag2 == 0: start2 = i\n        flag2 += 1\n    elif br[i] == 4:\n        flag2 -= 1\n        if flag2 == 0 and i - start2 > max2:\n            max2 = i - start2\n    x = 0\n    if br[i] == 1 or br[i] == 3:\n        if help_arr[-1][1] != br[i]:\n            x = 1\n        help_arr.append([help_arr[-1][0] + x, br[i]])\n        if help_arr[-1][0] > max_alt: max_alt = help_arr[-1][0]\n    else:\n        help_arr.pop(-1)\nif 1 not in br:\n    max1 = -1\nif 3 not in br:\n    max2 = -1\nprint(max_alt, max1 + 1, max2 + 1)\n", "# cook your dish here\nn = int(input())\na = list(map(int, input().split()))\nq = []\ntemp = 0\ndepth = 0\nbracket = [0, 0]\nbrac_count = [0, 0]\nbrac_ind = [0, 0]\n\nfor i, v in enumerate(a):\n    if v == 1 or v == 3:\n        if v == 1:\n            if brac_count[0] == 0:\n                brac_ind[0] = i\n            brac_count[0] += 1\n        else:\n            if brac_count[1] == 0:\n                brac_ind[1] = i\n            brac_count[1] += 1\n                \n        if not q or v != q[-1]:\n            temp += 1\n        q.append(v)\n    else:\n        depth = max(temp, depth)\n        if len(q) < 2 or q[-1] != q[-2]:\n            temp -= 1\n        q.pop()\n        if v == 2:\n            brac_count[0] -= 1\n            if brac_count[0] == 0:\n                bracket[0] = max(bracket[0], i - brac_ind[0]+1)\n        else:\n            brac_count[1] -= 1\n            if brac_count[1] == 0:\n                bracket[1] = max(bracket[1], i - brac_ind[1]+1)\n        \nprint(depth, bracket[0], bracket[1])", "def max_len_between(s, paren_type):\r\n    st = []\r\n    length = 0\r\n    max_length = 0\r\n\r\n    op = paren_type[0]\r\n    cp = paren_type[1]\r\n\r\n    for c in s:\r\n        if c == op:\r\n            st.append(c)\r\n        elif c == cp:\r\n            st.pop()\r\n\r\n        if len(st) == 0:\r\n            if length > max_length:\r\n                max_length = length + 1\r\n            length = 0\r\n        else:\r\n            length += 1\r\n\r\n    return max_length\r\n\r\ndef parser(arr):\r\n    return [{1 : '(', 2 : ')', 3 : '[', 4 : ']'}[c] for c in arr]\r\n\r\nn = int(input())\r\na = list(map(int, input().split()))\r\n\r\nbr = []\r\ndep = []\r\n\r\nret = 0\r\n\r\nfor i in range(0, n):\r\n    if (a[i] == 1 or a[i] == 3) and br == []:\r\n        br.append(a[i])\r\n        dep.append(1)\r\n        ret = max(ret, dep[-1])\r\n\r\n    elif a[i] == 1 and br[-1] == 3:\r\n        br.append(a[i])\r\n        dep.append(dep[-1] + 1)\r\n        ret = max(ret, dep[-1])\r\n\r\n    elif a[i] == 3 and br[-1] == 1:\r\n        br.append(a[i])\r\n        dep.append(dep[-1]+1)\r\n        ret = max(ret, dep[-1])\r\n\r\n    elif a[i] == 1 or a[i] == 3:\r\n        br.append(a[i])\r\n        dep.append(dep[-1])\r\n        ret = max(ret, dep[-1])\r\n\r\n    elif a[i] == 2 or a[i] == 4:\r\n        br.pop()\r\n        dep.pop()\r\n\r\nprint(ret, max_len_between(parser(a), '()'), max_len_between(parser(a), '[]'))", "n=int(input())\n\na=[int(x) for x in input().split()]\nk,d=0,0\nst=[]\n\nst.append(a[0])\nk,d=1,1\nfor i in range(1,n):\n    if a[i]==1 or a[i]==3:\n        st.append(a[i])\n\n        if st[len(st)-1]!=st[len(st)-2]:\n            k+=1\n            if k>d:\n                d+=1\n        #print(st,k,d)\n    else:\n        try:\n            if st[len(st)-1]!=st[len(st)-2]:\n                k-=1\n            st.pop()\n        except:\n            st.pop()\n            k-=1\n        #print(st,k,d)\n\nc1,max1=0,0\ns1=[]\nfor i in range(n):\n    try:\n        if len(s1)==0 and a[i]==1:\n            s1.append(a[i])\n            c1+=1\n        elif len(s1)!=0 and (a[i]==1 or a[i]==3):\n            s1.append(a[i])\n            c1+=1\n\n        elif a[i]==2 or a[i]==4:\n            s1.pop()\n            c1+=1\n        if max1 < c1:\n            max1 = c1\n        if len(s1)==0:\n            c1=0\n    except:\n        pass\n\n\n\nc2,max2=0,0\ns2=[]\nfor i in range(n):\n    try:\n        if len(s2)==0 and a[i]==3:\n            s2.append(a[i])\n            c2+=1\n        elif len(s2)!=0 and (a[i]==1 or a[i]==3):\n            s2.append(a[i])\n            c2+=1\n\n        elif a[i]==2 or a[i]==4:\n            s2.pop()\n            c2+=1\n        if max2 < c2:\n            max2 = c2\n        if len(s2)==0:\n            c2=0\n    except:\n        pass\n\nprint(d,max1,max2)\n"]