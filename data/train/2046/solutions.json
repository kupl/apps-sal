["n = int(input())\nt = [0, 0] + list(map(int, input().split()))\na, b = [0] * (n + 1), [0] * (n + 1)\na[1] = b[1] = -1\n    \ndef f(s, a, b, l):\n    nonlocal t\n    l.reverse()\n    j, n = 0, len(l)\n    while True:\n        s += t[l[j]]\n        a[l[j]] = s\n        j += 1\n        if j == n: return\n        s += t[l[j]]\n        b[l[j]] = s\n        j += 1\n        if j == n: return\n\ndef g(i, k):\n    nonlocal a, b\n    l = []\n    if k:\n        a[i] = -1\n        l.append(i)\n        i += t[i]\n    while True:\n        if i > n: return f(0, a, b, l)                \n        if b[i] > 0: return f(b[i], a, b, l)                \n        if b[i] == -1: return\n        b[i] = -1\n        l.append(i)\n        i -= t[i]\n        if i < 1: return f(0, b, a, l)\n        if a[i] > 0: return f(a[i], b, a, l)\n        if a[i] == -1: return\n        a[i] = -1\n        l.append(i)\n        i += t[i]\n        \nfor i in range(2, n + 1):\n    if a[i] == 0: g(i, True)        \n    if b[i] == 0: g(i, False)\n\nfor i in range(1, n):\n    if b[i + 1] > 0: t[i] = i + b[i + 1]\n    else: t[i] = -1\n\nprint('\\n'.join(map(str, t[1: n])))", "n = int(input())\nt = [0, 0]\nt += list(map(int, input().split()))\nn += 1\na = [0] * n\nb = [0] * n\nn -= 1\na[1] = b[1] = -1\n\n#print(t, a, b)\n\ndef calc(s, a, b, l):\n\tnonlocal t\n\tl.reverse()\n\tj = 0\n\tn = len(l)\n\t\n\twhile True:\n\t\ts += t[l[j]]\n\t\ta[l[j]] = s\n\t\tj += 1\n\t\tif j == n:\n\t\t\treturn\n\t\t\n\t\ts += t[l[j]]\n\t\tb[l[j]] = s\n\t\tj += 1\n\t\tif j == n:\n\t\t\treturn\n\n\t\t\t\ndef calc2(i, k):\n\tnonlocal a, b\n\tl = []\n\tif k:\n\t\ta[i] = -1\n\t\tl.append(i)\n\t\ti += t[i]\n\t\t\n\twhile True:\n\t\tif i > n:\n\t\t\treturn calc(0, a, b, l)\n\t\tif b[i] > 0:\n\t\t\treturn calc(b[i], a, b, l)\n\t\tif b[i] == -1:\n\t\t\treturn\n\t\tb[i] = -1\n\t\tl.append(i)\n\t\ti -= t[i]\n\t\tif i < 1:\n\t\t\treturn calc(0, b, a, l)\n\t\tif a[i] > 0:\n\t\t\treturn calc(a[i], b, a, l)\n\t\tif a[i] == -1:\n\t\t\treturn\n\t\ta[i] -= 1\n\t\tl.append(i)\n\t\ti += t[i]\n\nfor i in range(2, n + 1):\n\tif a[i] == 0:\n\t\tcalc2(i, True)\n\tif b[i] == 0:\n\t\tcalc2(i, False)\n\nfor i in range(1, n):\n\tif b[i + 1] > 0:\n\t\tt[i] = i + b[i + 1]\n\telse:\n\t\tt[i] = -1\n\n#print(t, a, b)\n\t\t\nprint('\\n'.join(map(str, t[1:n])))", "INF = float('inf')\nn = int(input())\naaa = [0, 0] + list(map(int, input().split()))\ndp = [[0 for _ in range(n+1)] for i in range(2)]\nvis = [[0 for _ in range(n+1)] for i in range(2)]\nrs = [0] * (n-1)\n\ndef di(d): return 0 if d == 1 else 1\n\n\ndef solve(x, d):\n    if dp[di(d)][x]:\n        return dp[di(d)][x]\n\n    if vis[di(d)][x]:\n        return INF\n\n    ni = x + aaa[x] * d\n    if ni < 1 or ni > n:\n        return aaa[x]\n\n    vis[di(d)][x] = 1\n    r = aaa[x] + solve(ni, -d)\n    vis[di(d)][x] = 0\n    return r\n\n\nfor D in [1, -1]:\n    for x in range(2, n+1):\n        d = D\n        if dp[di(d)][x]:\n            continue\n\n        ni = x + aaa[x] * d\n        path = [x]\n        values = [aaa[x]]\n        while ni > 1 and ni <= n:\n            path.append(ni)\n            if dp[di(-d)][ni]:\n                values.append(dp[di(-d)][ni])\n                d *= -1\n                break\n\n            if vis[di(d)][ni]:\n                values.append(INF)\n                d *= -1\n                break\n\n            vis[di(d)][ni] = 1\n            values.append(aaa[ni])\n\n            d *= -1\n            ni = ni + aaa[ni] * d\n\n\n        if ni == 1:\n            continue\n\n        for i in range(len(values)-2, -1, -1):\n            values[i] = values[i] + values[i+1]\n\n        while path:\n            dp[di(d)][path.pop()] = values.pop()\n            d *= -1\n\n\nfor i in range(1, n):\n    aaa[1] = i\n    res = solve(1, 1)\n    rs[i-1] = res if res < INF else -1\n\n\nprint('\\n'.join(map(str, rs)))"]