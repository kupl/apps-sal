["class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         if n == 0:\n             return 1\n         if abs(n) == 1:\n             if n == 1:\n                 return x\n             else:\n                 return 1/x\n         if n > 0:\n             a, b = int(n//2), n%2\n         else:\n             a, b = -int(-n//2), -(n%2)\n         y = self.myPow(x, a)\n         z = self.myPow(x, b)\n         return y*y*z", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         if n < 0:\n             return 1 / self.myPow(x, -n)\n         elif n == 1:\n             return x\n         elif n == 0:\n             return 1\n         elif n % 2:\n             return x * self.myPow(x, n - 1)\n         else:\n             t = self.myPow(x, n // 2)\n             return t * t\n", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         if n < 0:\n             return 1 / self.myPow(x, -n)\n         elif n == 1:\n             return x\n         elif n == 0:\n             return 1\n         elif n % 2:\n             return x * self.myPow(x, n - 1)\n         else:\n             t = self.myPow(x, n // 2)\n             return t * t\n", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         if 0 <= n < 2:\n             return [1, x][n]\n         if n < 0:\n             n, x = -n, 1 / x\n         temp = divmod(n, 2)\n         return self.myPow(x, temp[0]) ** 2 * self.myPow(x, temp[1])", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         if n == 0:\n             return 1\n         if n == 1:\n             return x\n         if n < 0:\n             return self.myPow(1/x, -n)\n         if (n % 2) == 0:\n             return self.myPow(x*x, n/2) \n         else:\n             return self.myPow(x*x, (n-1)/2) * x", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         return pow(x,n)", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         if n == 0:\n             return 1\n         if n < 0:\n             n = -n\n             x = 1/x\n         if n % 2 == 0:\n             return self.myPow(x*x,n/2)\n         else:\n             return self.myPow(x*x,(n-1)/2)*x", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         if n<0:return 1/self.myPow(x,-n)\n         elif n==0:return 1\n         elif n>1000:return self.myPow(self.myPow(x,1000),n//1000)*self.myPow(x,n%1000)\n         else: return x*self.myPow(x,n-1)", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         return x**n", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         if n < 0:\n             return 1 / self.myPow(x, -n)\n         elif n == 1:\n             return x\n         elif n == 0:\n             return 1\n         elif n % 2:\n             return x * self.myPow(x, n - 1)\n         else:\n             t = self.myPow(x, n // 2)\n             return t * t\n", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         output=1\n         power=0\n         power_applied=1\n         product=x\n         m=abs(n)\n         while m!=0 and power!=m:\n             if (power+power_applied*2)<m:\n                 product=product*product\n                 power_applied=power_applied*2\n                 power=power+power_applied\n             else:\n                 product=x\n                 power_applied=1\n                 power=power+power_applied\n             output=output*product\n         if n<0: output=1/output\n         return output", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         if not n:\n             return 1\n         if n < 0:\n             return 1 / self.myPow(x, -n)\n         if n % 2:\n             return x * self.myPow(x, n-1)\n         return self.myPow(x*x, n/2)\n", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         return x ** n\n", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         if n == 0 :\n             return 1.00000\n         if n < 0 :\n             return 1 / self.myPow(x , -n)\n         \n         if n % 2 != 0 :\n             return x * self.myPow(x , n - 1)\n         return self.myPow(x * x , n / 2)\n         \n", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         if n < 0:\n             return 1 / self.powRecu(x, -n)\n         \n         return self.powRecu(x, n)\n     \n     def powRecu(self, x, n):\n         if n == 0:\n             return 1.0\n         \n         if n % 2 == 0:\n             return self.powRecu(x * x, n // 2)\n         else:\n             return x * self.powRecu(x * x, n // 2)", "class Solution:\n     \n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         if n == 0: return 1\n         if n<0:\n             n= -n\n             x = 1/x\n         res = 1\n         \n         while n>0:\n             cnt = 1\n             mul = x\n             while (cnt+cnt) <= n:\n                 mul = mul * mul\n                 cnt += cnt\n             n = n - cnt\n             res = mul * res\n         if n%2 == 1: res = res*x\n         \n         return res", "class Solution:\n     def myPow(self, x, n):\n         \"\"\"\n         :type x: float\n         :type n: int\n         :rtype: float\n         \"\"\"\n         return x**n\n"]