["import sys\nreadline = sys.stdin.readline\nclass UF():\n    def __init__(self, num):\n        self.par = [-1]*num\n        self.weight = [0]*num\n    def find(self, x):\n        if self.par[x] < 0:\n            return x\n        else:\n            stack = []\n            while self.par[x] >= 0:\n                stack.append(x)\n                x = self.par[x]\n            for xi in stack:\n                self.par[xi] = x\n            return x\n    \n    def union(self, x, y):\n        rx = self.find(x)\n        ry = self.find(y)\n        if rx != ry:\n            if self.par[rx] > self.par[ry]:\n                rx, ry = ry, rx\n            self.par[rx] += self.par[ry]\n            self.par[ry] = rx\n            self.weight[rx] += self.weight[ry]\n        return rx\n\nN, K = list(map(int, readline().split()))\nS = list(map(int, readline().strip()))\n\nA = [[] for _ in range(N)]\n\nfor k in range(K):\n    BL = int(readline())\n    B = list(map(int, readline().split()))\n    for b in B:\n        A[b-1].append(k)\n\ncnt = 0\nT = UF(2*K)\nused = set()\nAns = [None]*N\ninf = 10**9+7\nfor i in range(N):\n    if not len(A[i]):\n        Ans[i] = cnt\n        continue\n    kk = 0\n    if len(A[i]) == 2:    \n        x, y = A[i]\n        if S[i]:\n            rx = T.find(x)\n            ry = T.find(y)\n            if rx != ry:\n                rx2 = T.find(x+K)\n                ry2 = T.find(y+K)\n                sp = min(T.weight[rx], T.weight[rx2]) + min(T.weight[ry], T.weight[ry2])\n                if x not in used:\n                    used.add(x)\n                    T.weight[rx] += 1\n                if y not in used:\n                    used.add(y)\n                    T.weight[ry] += 1\n                rz = T.union(rx, ry)\n                rz2 = T.union(rx2, ry2)\n                sf = min(T.weight[rz], T.weight[rz2])\n                kk = sf - sp\n        else:\n            rx = T.find(x)\n            ry2 = T.find(y+K)\n            sp = 0\n            if rx != ry2:\n                ry = T.find(y)\n                rx2 = T.find(x+K)\n                sp = min(T.weight[rx], T.weight[rx2]) + min(T.weight[ry], T.weight[ry2])\n                if x not in used:\n                    used.add(x)\n                    T.weight[rx] += 1\n                if y not in used:\n                    used.add(y)\n                    T.weight[ry] += 1\n                rz = T.union(rx, ry2)\n                rz2 = T.union(rx2, ry)\n                sf = min(T.weight[rz], T.weight[rz2])\n                kk = sf - sp\n    else:\n        if S[i]:\n            x = A[i][0]\n            rx = T.find(x)\n            rx2 = T.find(x+K)\n            sp = min(T.weight[rx], T.weight[rx2])\n            T.weight[rx] += inf\n            sf = min(T.weight[rx], T.weight[rx2])\n            kk = sf - sp\n        else:\n            x = A[i][0]\n            rx = T.find(x)\n            rx2 = T.find(x+K)\n            sp = min(T.weight[rx], T.weight[rx2])\n            T.weight[rx2] += inf\n            if x not in used:\n                used.add(x)\n                T.weight[rx] += 1\n            sf = min(T.weight[rx], T.weight[rx2])\n            kk = sf-sp\n    Ans[i] = cnt + kk\n    cnt = Ans[i]            \nprint('\\n'.join(map(str, Ans)))\n            \n", "import sys\nreadline = sys.stdin.readline\nclass UF():\n    def __init__(self, num):\n        self.par = [-1]*num\n        self.weight = [0]*num\n    def find(self, x):\n        stack = []\n        while self.par[x] >= 0:\n            stack.append(x)\n            x = self.par[x]\n        for xi in stack:\n            self.par[xi] = x\n        return x\n    \n    def union(self, x, y):\n        rx = self.find(x)\n        ry = self.find(y)\n        if rx != ry:\n            if self.par[rx] > self.par[ry]:\n                rx, ry = ry, rx\n            self.par[rx] += self.par[ry]\n            self.par[ry] = rx\n            self.weight[rx] += self.weight[ry]\n        return rx\n\n\nN, K = list(map(int, readline().split()))\nS = list(map(int, readline().strip()))\n\nA = [[] for _ in range(N)]\n\nfor k in range(K):\n    BL = int(readline())\n    B = list(map(int, readline().split()))\n    for b in B:\n        A[b-1].append(k)\n\ncnt = 0\nT = UF(2*K)\nused = set()\nAns = [None]*N\ninf = 10**9+7\nfor i in range(N):\n    if not len(A[i]):\n        Ans[i] = cnt\n        continue\n    kk = 0\n    if len(A[i]) == 2:    \n        x, y = A[i]\n        if S[i]:\n            rx = T.find(x)\n            ry = T.find(y)\n            if rx != ry:\n                rx2 = T.find(x+K)\n                ry2 = T.find(y+K)\n                sp = min(T.weight[rx], T.weight[rx2]) + min(T.weight[ry], T.weight[ry2])\n                if x not in used:\n                    used.add(x)\n                    T.weight[rx] += 1\n                if y not in used:\n                    used.add(y)\n                    T.weight[ry] += 1\n                rz = T.union(rx, ry)\n                rz2 = T.union(rx2, ry2)\n                sf = min(T.weight[rz], T.weight[rz2])\n                kk = sf - sp\n        else:\n            rx = T.find(x)\n            ry2 = T.find(y+K)\n            sp = 0\n            if rx != ry2:\n                ry = T.find(y)\n                rx2 = T.find(x+K)\n                sp = min(T.weight[rx], T.weight[rx2]) + min(T.weight[ry], T.weight[ry2])\n                if x not in used:\n                    used.add(x)\n                    T.weight[rx] += 1\n                if y not in used:\n                    used.add(y)\n                    T.weight[ry] += 1\n                rz = T.union(rx, ry2)\n                rz2 = T.union(rx2, ry)\n                sf = min(T.weight[rz], T.weight[rz2])\n                kk = sf - sp\n    else:\n        if S[i]:\n            x = A[i][0]\n            rx = T.find(x)\n            rx2 = T.find(x+K)\n            sp = min(T.weight[rx], T.weight[rx2])\n            T.weight[rx] += inf\n            sf = min(T.weight[rx], T.weight[rx2])\n            kk = sf - sp\n        else:\n            x = A[i][0]\n            rx = T.find(x)\n            rx2 = T.find(x+K)\n            sp = min(T.weight[rx], T.weight[rx2])\n            T.weight[rx2] += inf\n            if x not in used:\n                used.add(x)\n                T.weight[rx] += 1\n            sf = min(T.weight[rx], T.weight[rx2])\n            kk = sf-sp\n    Ans[i] = cnt + kk\n    cnt = Ans[i]            \nprint('\\n'.join(map(str, Ans)))\n            \n"]