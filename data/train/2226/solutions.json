["class SegmentTree:\n    def __init__(self, data, default=0, func=max):\n        \"\"\"initialize the segment tree with data\"\"\"\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(list(range(_size))):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        start += self._size\n        stop += self._size\n\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n\n        return self._func(res_left, res_right)\n\n    def __repr__(self):\n        return \"SegmentTree({0})\".format(self.data)\n\n\nn = int(input())\ns = input()\n\npref = []\ncurr = 0\nfor c in s:\n    if c == '1':\n        curr += 1\n    else:\n        curr = 0\n    pref.append(curr)\n\nsuff = []\ncurr = 0\nfor c in s[::-1]:\n    if c == '1':\n        curr += 1\n    else:\n        curr = 0\n    suff.append(curr)\nsuff.reverse()\n    \n\nst = SegmentTree(suff)\n\nout = 0\nadd = 0\nfor i in range(n):\n    if s[i] == '1':\n        lo = -1\n        hi =  i - pref[i] + 1\n        while hi - lo > 1:\n            t = (lo + hi) // 2\n            if st.query(t, i - pref[i] + 1) >= pref[i]:\n                lo = t\n            else:\n                hi = t\n        add += (i - lo)\n    #print(add)\n    out += add\nprint(out)\n    \n", "n = int(input())\na = list(map(int, input()))\n\nacc = 0\nback = 0\ntop = 0\ncur = 0\ns = []\n\nfor i,x in enumerate(a):\n\tif x == 0:\n\t\tcur = 0\n\telse:\n\t\tif cur > 0:\n\t\t\ts.pop()\n\t\tcur += 1\n\t\tif cur >= top:\n\t\t\ttop = cur\n\t\t\tback = (cur + 1) * (cur) // 2 + (i - cur + 1) * cur\n\t\t\ts = [(cur, i)]\n\t\telse:\n\t\t\tback += i - (s[-1][1] - cur + 1)\n\t\t\tif cur >= s[-1][0]:\n\t\t\t\ts.pop()\n\t\t\ts += [(cur, i)]\n\tacc += back\n\t#print(i,x,acc, back, top, cur)\n\t#print(s)\n\n\nprint(acc)\n", "import math,sys\nn=int(input())\ns=input()\ndp=[0]*(n+1)\ncurrlength=0\nd=[-1]*(n+1)\nfor i in range(n):\n    if s[i]=='0':\n        dp[i+1]=dp[i]\n        if currlength>0:\n            for j in range(currlength):\n                d[j+1]=i-j-1\n        currlength=0\n    else:\n        currlength+=1\n        numsegs=i-d[currlength]-1\n        dp[i+1]=dp[i]+numsegs+1\nprint(sum(dp))", "\nfrom sys import stdin\nimport sys\nimport heapq\n\ndef bitadd(a,w,bit):\n \n    x = a+1\n    while x <= (len(bit)-1):\n        bit[x] += w\n        x += x & (-1 * x)\n \ndef bitsum(a,bit):\n \n    ret = 0\n    x = a+1\n    while x > 0:\n        ret += bit[x]\n        x -= x & (-1 * x)\n    return ret\n\nn = int(stdin.readline())\ns = stdin.readline()[:-1]\n\nbit = [0] * (n+10)\ndp = [0] * (n+10)\n\ny = 0\nans = 0\nfor i in range(n):\n\n    if s[i] == \"0\":\n        while y > 0:\n            dp[y] += 1\n            bitadd(y,y,bit)\n            y -= 1\n        dp[0] += 1\n    else:\n        bitadd(y,-1*dp[y]*y,bit)\n        bitadd(y+1,-1*dp[y+1]*(y+1),bit)\n        dp[y+1] += dp[y]\n        dp[y] = 0\n        y += 1\n        bitadd(y,dp[y]*y,bit)\n        \n    now = bitsum(i,bit) + (1+y)*y//2\n    #print (bitsum(i,bit),(1+y)*y//2,dp)\n    ans += now\n    \nprint (ans)", "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int, readline().strip()))\ndef calc(l, r):\n    m = (l+r)//2\n    if l+1 == r:\n        return A[l]\n    if l+2 == r:\n        return 2*(A[l]+A[l+1])\n    X = A[l:m][::-1]\n    Y = A[m:r]\n    LX = len(X)\n    LY = len(Y)\n    a1 = [0]*LX\n    a2 = [0]*LY\n    pre = 1\n    cnt = 0\n    b1 = 0\n    b2 = 0\n    for i in range(LX):\n        if X[i]:\n            cnt += 1\n            if pre:\n                a1[i] = cnt\n                b1 = cnt\n            else:\n                a1[i] = max(a1[i-1], cnt)\n        else:\n            pre = 0\n            cnt = 0\n            a1[i] = a1[i-1]\n    pre = 1\n    cnt = 0\n    for i in range(LY):\n        if Y[i]:\n            cnt += 1\n            if pre:\n                a2[i] = cnt\n                b2 = cnt\n            else:\n                a2[i] = max(a2[i-1], cnt)\n        else:\n            pre = 0\n            cnt = 0\n            a2[i] = a2[i-1]\n    \n    \n    ra = LX-1\n    rb = LY-1\n    i = ra\n    j = rb\n    res = 0\n    for _ in range(LX+LY):\n        if a1[i] >= a2[j]:\n            a = a1[i]\n            if b1+b2 <= a:\n                res += a*(j+1)\n            elif a == b1:\n                res += b1*b2 + b2*(b2+1)//2 + (b1+b2)*(j+1-b2)\n            else:\n                res += a*b2 + (b1+b2-a)*(b1+b2-a+1)//2+(b1+b2)*(j+1-b2)\n            i -= 1\n            b1 = min(b1, i+1)\n        else:\n            a = a2[j]\n            if b1+b2 <= a:\n                res += a*(i+1)\n            elif a == b2:\n                res += b1*b2 + b1*(b1+1)//2 + (b1+b2)*(i+1-b1)\n            else:\n                res += a*b1 + (b1+b2-a)*(b1+b2-a+1)//2+(b1+b2)*(i+1-b1)\n            j -= 1\n            b2 = min(b2, j+1)\n        if i == -1 or j == -1:\n            break\n    return res + calc(l, m) + calc(m, r)\n\nprint(calc(0, N))\n\n                \n            \n"]