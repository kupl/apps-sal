["n = int(input())\n\ndef area(width, height) :\n    return (width+1) * (height+1)\n\ndef calcul(s1, c, s2) :\n    maxx, maxy, minx, miny = 0, 0, 0, 0\n    x, y = 0, 0\n    for k in range(len(s1)) :\n        if s1[k] == \"W\" :\n            y += 1\n        if s1[k] == \"S\" :\n            y -= 1\n        if s1[k] == \"A\" :\n            x -= 1\n        if s1[k] == \"D\" :\n            x += 1\n        maxx = max(maxx, x)\n        minx = min(minx, x)\n\n        maxy = max(maxy, y)\n        miny = min(miny, y)\n\n\n\n\n    if c == \"W\" :\n        y += 1\n    elif c == \"S\" :\n        y -= 1\n    elif c == \"A\" :\n        x -= 1\n    elif c == \"D\" :\n        x += 1\n    else :\n        print(c, \"ok\")\n\n    maxx = max(maxx, x)\n    minx = min(minx, x)\n\n    maxy = max(maxy, y)\n    miny = min(miny, y)\n\n    for k in range(len(s2)) :\n        if s2[k] == \"W\" :\n            y += 1\n        if s2[k] == \"S\" :\n            y -= 1\n        if s2[k] == \"A\" :\n            x -= 1\n        if s2[k] == \"D\" :\n            x += 1\n        maxx = max(maxx, x)\n        minx = min(minx, x)\n\n        maxy = max(maxy, y)\n        miny = min(miny, y)\n\n\n\n    diffx = maxx - minx\n    diffy = maxy - miny\n    tmp = area(diffx, diffy)\n\n\n    return tmp\n\ndef pre_calcul(s, moment, pre_avant, date_debut) :\n    x, y, maxx, minx, maxy, miny = pre_avant\n    for k in range(date_debut, moment) :\n        if s[k] == \"W\" :\n            y += 1\n        if s[k] == \"S\" :\n            y -= 1\n        if s[k] == \"A\" :\n            x -= 1\n        if s[k] == \"D\" :\n            x += 1\n        maxx = max(maxx, x)\n        minx = min(minx, x)\n\n        maxy = max(maxy, y)\n        miny = min(miny, y)\n\n    return (x, y, maxx, minx, maxy, miny)\n\ndef calcul2(s, c, moment, precalcul) :\n    x, y, maxx, minx, maxy, miny = precalcul\n\n\n\n    if c == \"W\" :\n        y += 1\n    elif c == \"S\" :\n        y -= 1\n    elif c == \"A\" :\n        x -= 1\n    elif c == \"D\" :\n        x += 1\n    else :\n        print(c, \"ok\")\n\n    maxx = max(maxx, x)\n    minx = min(minx, x)\n\n    maxy = max(maxy, y)\n    miny = min(miny, y)\n\n    for k in range(moment, len(s)) :\n        if s[k] == \"W\" :\n            y += 1\n        if s[k] == \"S\" :\n            y -= 1\n        if s[k] == \"A\" :\n            x -= 1\n        if s[k] == \"D\" :\n            x += 1\n        maxx = max(maxx, x)\n        minx = min(minx, x)\n\n        maxy = max(maxy, y)\n        miny = min(miny, y)\n\n\n\n    diffx = maxx - minx\n    diffy = maxy - miny\n    tmp = area(diffx, diffy)\n\n\n    return tmp\n\nfor _ in range(n) :\n    s = input()\n    maxx, maxy, minx, miny = 0, 0, 0, 0\n    x, y = 0, 0\n    momentminx, momentmaxx, momentminy, momentmaxy = -1, -1, -1, -1\n    for k in range(len(s)) :\n        if s[k] == \"W\" :\n            y += 1\n        if s[k] == \"S\" :\n            y -= 1\n        if s[k] == \"A\" :\n            x -= 1\n        if s[k] == \"D\" :\n            x += 1\n\n        if x > maxx :\n            momentmaxx = k\n        if y > maxy :\n            momentmaxy = k\n        if x < minx :\n            momentminx = k\n        if y < miny :\n            momentminy = k\n        maxx = max(maxx, x)\n        minx = min(minx, x)\n\n        maxy = max(maxy, y)\n        miny = min(miny, y)\n    diffx = maxx - minx\n    diffy = maxy - miny\n\n\n    tmp = 999999999999999999999999999999999999\n    l = [momentmaxx, momentmaxy, momentminx, momentminy]\n    l = list(set(l))\n    l = [i for i in l if i != -1]\n    l.sort()\n    if l != [] :\n        precalcul = pre_calcul(s, l[0], (0, 0, 0, 0, 0, 0), 0)\n        avant = l[0]\n        for moment in l :\n            precalcul = pre_calcul(s, moment, precalcul, avant)\n            avant = moment\n            tmp = min(tmp, calcul2(s, 'W', moment, precalcul))\n            tmp = min(tmp, calcul2(s, 'S', moment, precalcul))\n            tmp = min(tmp, calcul2(s, 'A', moment, precalcul))\n            tmp = min(tmp, calcul2(s, 'D', moment, precalcul))\n    print(tmp)\n", "import sys\ninput = sys.stdin.readline\n    \nQ=int(input())\n\nfor testcases in range(Q):\n    S=input().strip()\n\n    X=Y=0\n    MAXX=MINX=MAXY=MINY=0\n\n    for s in S:\n        if s==\"D\":\n            X+=1\n            MAXX=max(MAXX,X)\n\n        elif s==\"A\":\n            X-=1\n            MINX=min(MINX,X)\n\n        elif s==\"W\":\n            Y+=1\n            MAXY=max(MAXY,Y)\n\n        else:\n            Y-=1\n            MINY=min(MINY,Y)\n\n    #print(MAXX,MINX,MAXY,MINY)\n\n    MAXXLIST=[]\n    MINXLIST=[]\n    MAXYLIST=[]\n    MINYLIST=[]\n\n    if MAXX==0:\n        MAXXLIST.append(0)\n\n    if MAXY==0:\n        MAXYLIST.append(0)\n\n    if MINX==0:\n        MINXLIST.append(0)\n\n    if MINY==0:\n        MINYLIST.append(0)\n\n    X=Y=0\n        \n\n    for i in range(len(S)):\n        s=S[i]\n        if s==\"D\":\n            X+=1\n            if X==MAXX:\n                MAXXLIST.append(i+1)\n                \n        elif s==\"A\":\n            X-=1\n            if X==MINX:\n                MINXLIST.append(i+1)\n\n        elif s==\"W\":\n            Y+=1\n            if Y==MAXY:\n                MAXYLIST.append(i+1)\n\n        else:\n            Y-=1\n            if Y==MINY:\n                MINYLIST.append(i+1)\n\n    #print(MAXXLIST)\n    #print(MAXYLIST)\n    #print(MINXLIST)\n    #print(MINYLIST)\n\n    ANS=(MAXX-MINX+1)*(MAXY-MINY+1)\n\n    #print(ANS)\n\n\n    if MAXX-MINX>1:\n        if MAXXLIST[0]>MINXLIST[-1] or MINXLIST[0]>MAXXLIST[-1]:\n            ANS=min(ANS,(MAXX-MINX)*(MAXY-MINY+1))\n\n    if MAXY-MINY>1:\n        if MAXYLIST[0]>MINYLIST[-1] or MINYLIST[0]>MAXYLIST[-1]:\n            ANS=min(ANS,(MAXX-MINX+1)*(MAXY-MINY))\n\n    print(ANS)\n        \n", "T = int(input())\n\nfor _ in range(T):\n\ts = input()\n\n\tcleft=cup=cdown=cright=0\n\tleft=up=down=right=0\n\tfleft=lleft=0\n\tfright=lright=0\n\tfup=lup=0\n\tfdown=ldown=0\n\n\tx=y=0\n\tfor i, c in enumerate(s):\n\t\tif c==\"W\":\n\t\t\ty -= 1\n\t\t\tcup += 1\n\t\telif c==\"S\":\n\t\t\ty += 1\n\t\t\tcdown += 1\n\t\telif c==\"A\":\n\t\t\tx -= 1\n\t\t\tcleft += 1\n\t\telif c==\"D\":\n\t\t\tx += 1\n\t\t\tcright += 1\n\n\t\tif x == left:\n\t\t\tlleft = i\n\t\tif x == right:\n\t\t\tlright = i\n\t\tif y == down:\n\t\t\tldown = i\n\t\tif y == up:\n\t\t\tlup = i\n\n\t\tif x < left:\n\t\t\tleft = x\n\t\t\tfleft=i\n\t\t\tlleft=i\n\n\t\tif x > right:\n\t\t\tright = x\n\t\t\tfright=i\n\t\t\tlright=i\n\n\n\t\tif y < up:\n\t\t\tup = y\n\t\t\tfup=i\n\t\t\tlup=i\n\n\n\t\tif y > down:\n\t\t\tdown = y\n\t\t\tfdown=i\n\t\t\tldown=i\n\n\twidth = right - left + 1\n\theight = down - up + 1\n\n\tbest = width * height\n\n\tif height > 2:\n\t\tif ldown < fup or lup < fdown:\n\t\t\tbest = min(best, width * (height-1))\n\tif width > 2:\n\t\tif lleft < fright or lright < fleft:\n\t\t\tbest = min(best, (width-1) * height)\n\tprint(best)", "t = int(input())\nfor _ in range(t):\n\ts = input()\n\tn = len(s)\n\tfa, fd, fs, fw = [0], [0], [0], [0]\n\tba, bd, bs, bw = [0], [0], [0], [0]\n\tcur = [0, 0]\n\tfor i in range(n):\n\t\tif s[i] == \"A\":\n\t\t\tcur[0] -= 1\n\t\t\t\n\t\telif s[i] == \"D\":\n\t\t\tcur[0] += 1\n\t\t\t\n\t\telif s[i] == \"S\":\n\t\t\tcur[1] -= 1\n\t\t\t\n\t\telif s[i] == \"W\":\n\t\t\tcur[1] += 1\n\t\t\t\n\t\tfa.append(min(fa[-1], cur[0]))\n\t\tfd.append(max(fd[-1], cur[0]))\n\t\tfs.append(min(fs[-1], cur[1]))\n\t\tfw.append(max(fw[-1], cur[1]))\n\n\th = fd[-1]-fa[-1]\n\tv = fw[-1]-fs[-1]\n\tarea = (h+1)*(v+1)\n\n\tcur = [0, 0]\n\tfor i in range(n-1, -1, -1):\n\t\tif s[i] == \"D\":\n\t\t\tcur[0] -= 1\n\t\telif s[i] == \"A\":\n\t\t\tcur[0] += 1\n\t\telif s[i] == \"W\":\n\t\t\tcur[1] -= 1\n\t\telif s[i] == \"S\":\n\t\t\tcur[1] += 1\n\n\t\tba.append(min(ba[-1], cur[0]))\n\t\tbd.append(max(bd[-1], cur[0]))\n\t\tbs.append(min(bs[-1], cur[1]))\n\t\tbw.append(max(bw[-1], cur[1]))\n\n\tba.reverse()\n\tbd.reverse()\n\tbs.reverse()\n\tbw.reverse()\n\n\t#print(fa, fd, fs, fw)\n\t#print(ba, bd, bs, bw)\n\n\thok, vok = False, False\n\tfor i in range(1, n):\n\t\t#print(n, i)\n\t\tif fd[i]-fa[i] < h and abs(bd[i]-ba[i]) < h:\n\t\t\thok = True\n\t\tif fw[i]-fs[i] < v and abs(bw[i]-bs[i]) < v:\n\t\t\tvok = True\n\n\tif hok:\n\t\tarea = min(area, h*(v+1))\n\tif vok:\n\t\tarea = min(area, v*(h+1))\n\tprint(area)\n", "for q in range(int(input())):\n\n    data = input()\n    # if data in [\"WW\", \"AA\", \"SS\", \"DD\"]:\n    #     print(2)\n    #     continue\n    mx = [0,0,0,0]\n    x = 0\n    y = 0\n    pos = [[-1],[-1],[-1],[-1]]\n    for i in range(len(data)):\n        # print(x,y)\n        d = data[i]\n        if d == \"W\":\n            y += 1\n            if y > mx[0]:\n                \n                mx[0] = y\n                pos[0] = []\n        elif d == \"S\":\n            y -= 1\n            if y < mx[2]:\n                \n                mx[2] = y\n                pos[2] = []\n        elif d == \"A\":\n            x -= 1\n            if x < mx[1]:\n                \n                mx[1] = x\n                pos[1] = []\n        else:\n            x += 1\n            if x > mx[3]:\n                \n                mx[3] = x\n                pos[3] = []\n        if x == mx[3]:\n            pos[3].append(i)\n        if x == mx[1]:\n            pos[1].append(i)\n        if y == mx[0]:\n            pos[0].append(i)\n        if y == mx[2]:\n            pos[2].append(i)\n\n    # print(mx)\n    # print(pos)\n    wid = mx[3] - mx[1] + 1\n    hei = mx[0] - mx[2] + 1\n    ans = wid * hei\n\n    \n    \n    if pos[3][0] > pos[1][-1] + 1 or pos[1][0] > pos[3][-1] + 1:\n        ans -= hei\n    if pos[0][0] > pos[2][-1] + 1 or pos[2][0] > pos[0][-1] + 1:\n        ans = min((hei-1)*(wid), ans)\n    print(ans)", "T = int(input())\n\nw = [[-1, 0], [1, 0], [0, 1], [0, -1]]\nmp = {'A':0, 'D':1, 'W':2, 'S':3}\nwhile T > 0:\n\tT-=1\n\ts = input()\n\tl = [0]; r = [0];\n\tu = [0]; d = [0];\n\n\tfor dir in s[::-1]:\n\t\tl.append(l[-1])\n\t\tr.append(r[-1])\n\t\tu.append(u[-1])\n\t\td.append(d[-1])\n\t\tif dir == 'A':\n\t\t\tl[-1]+=1\n\t\t\tif r[-1] > 0: r[-1]-=1\n\t\telif dir == 'D':\n\t\t\tr[-1]+=1\n\t\t\tif l[-1] > 0: l[-1]-=1\n\t\telif dir == 'S':\n\t\t\td[-1]+=1\n\t\t\tif u[-1] > 0: u[-1]-=1\n\t\telse:\n\t\t\tu[-1]+=1\n\t\t\tif d[-1] > 0: d[-1]-=1\n\n\tl = l[::-1]; r = r[::-1]; u = u[::-1]; d = d[::-1];\n\n\tx = 0; y = 0\n\tml = 0; mr = 0; mu = 0; md = 0;\n\n\tans = (l[0] + r[0] + 1) * (u[0] + d[0] + 1)\n\tfor i in range(len(s)+1):\n\t\tmml=ml;mmr=mr;mmu=mu;mmd=md;\n\t\tfor j in range(4):\n\t\t\txx=x+w[j][0]\n\t\t\tyy=y+w[j][1]\n\n\t\t\tif xx<0: ml=max(ml,-xx)\n\t\t\tif xx>0: mr=max(mr,xx)\n\t\t\tif yy>0: mu=max(mu,yy)\n\t\t\tif yy<0: md=max(md,-yy)\n\n\t\t\txx-=l[i]\n\t\t\tif xx<0: ml=max(ml,-xx)\n\t\t\txx+=r[i]+l[i];\n\t\t\tif xx>0: mr=max(mr,xx)\n\t\t\tyy-=d[i]\n\t\t\tif yy<0: md=max(md,-yy)\n\t\t\tyy+=u[i]+d[i]\n\t\t\tif yy>0: mu=max(mu,yy)\n\n\t\t\tans = min(ans, (ml+mr+1)*(mu+md+1))\n\t\t\tml=mml;mr=mmr;mu=mmu;md=mmd;\n\n\t\tif i < len(s):\n\t\t\tx+=w[mp[s[i]]][0]\n\t\t\ty+=w[mp[s[i]]][1]\n\t\t\tif x<0: ml=max(ml,-x)\n\t\t\tif x>0: mr=max(mr,x)\n\t\t\tif y>0: mu=max(mu,y)\n\t\t\tif y<0: md=max(md,-y)\n\n\tprint(ans)", "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nimport math\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        s = input().rstrip()\n        a1 = []\n        a2 = []\n        ws = {'W': 1, 'S': -1}\n        ad = {'A': 1, 'D': -1}\n        for c in s:\n            if c in ('W', 'S'):\n                a1.append(ws[c])\n            else:\n                a2.append(ad[c])\n        pref_a1 = [0] + a1.copy()\n        pref_a2 = [0] + a2.copy()\n        for i in range(1, len(pref_a1)):\n            pref_a1[i] += pref_a1[i-1]\n        for i in range(1, len(pref_a2)):\n            pref_a2[i] += pref_a2[i-1]\n\n        def canDecrease(a):\n            _min = min(a)\n            _max = max(a)\n\n            # decrease max\n            _min_rindex = a.index(_min)\n            for i in range(_min_rindex, len(a)):\n                if a[i] == _min:\n                    _min_rindex = i\n            _max_index = a.index(_max)\n            if _max_index > _min_rindex:\n                return True\n\n            # increase min\n            _max_rindex = a.index(_max)\n            for i in range(_max_rindex, len(a)):\n                if a[i] == _max:\n                    _max_rindex = i\n            _min_index = a.index(_min)\n            if _max_rindex < _min_index:\n                return True\n\n            return False\n\n        x = max(pref_a1)-min(pref_a1)\n        y = max(pref_a2)-min(pref_a2)\n        res = (x+1) * (y+1)\n        if x > 1 and canDecrease(pref_a1):\n            res = min(res, x * (y+1))\n        if y > 1 and canDecrease(pref_a2):\n            res = min(res, (x+1) * y)\n\n        print(res)\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "\nfor i in range(int(input())):\n\ts = input()\n\tlm, rm, um, dm = 0, 0, 0, 0\n\txp, yp = 0, 0\n\tfor ch in s:\n\t\tif ch == 'W':\n\t\t\typ += 1\n\t\telif ch == 'A':\n\t\t\txp -= 1\n\t\telif ch == 'S':\n\t\t\typ -= 1\n\t\telse:\n\t\t\txp += 1\n\t\tlm = min(lm, xp)\n\t\trm = max(rm, xp)\n\t\tum = max(um, yp)\n\t\tdm = min(dm, yp)\n\txp, yp = 0, 0\n\tlmfSet, rmfSet, umfSet, dmfSet = 0, 0, 0, 0\n\tif lm == 0:\n\t\tlml = 0\n\t\tlmf = 0\n\t\tlmfSet = 1\n\tif rm == 0:\n\t\trml = 0\n\t\trmf = 0\n\t\trmfSet = 1\n\tif um == 0:\n\t\tuml = 0\n\t\tumf = 0\n\t\tumfSet = 1\n\tif dm == 0:\n\t\tdml = 0\n\t\tdmf = 0\n\t\tdmfSet = 1\n\tfor i, ch in zip(list(range(1, len(s) + 1)), s):\n\t\tif ch == 'W':\n\t\t\typ += 1\n\t\telif ch == 'A':\n\t\t\txp -= 1\n\t\telif ch == 'S':\n\t\t\typ -= 1\n\t\telse:\n\t\t\txp += 1\n\t\tif xp == lm:\n\t\t\tlml = i\n\t\t\tif not lmfSet:\n\t\t\t\tlmf = i\n\t\t\t\tlmfSet = 1\n\t\tif xp == rm:\n\t\t\trml = i\n\t\t\tif not rmfSet:\n\t\t\t\trmf = i\n\t\t\t\trmfSet = 1\n\t\tif yp == um:\n\t\t\tuml = i\n\t\t\tif not umfSet:\n\t\t\t\tumf = i\n\t\t\t\tumfSet = 1\n\t\tif yp == dm:\n\t\t\tdml = i\n\t\t\tif not dmfSet:\n\t\t\t\tdmf = i\n\t\t\t\tdmfSet = 1\n\tcanx, cany = 0, 0\n\tif dml + 1 < umf or uml + 1 < dmf:\n\t\tcany = 1\n\tif lml + 1 < rmf or rml + 1 < lmf:\n\t\tcanx = 1\n\tif canx:\n\t\tif cany:\n\t\t\tprint(min((um - dm) * (rm - lm + 1), (um - dm + 1) * (rm - lm)))\n\t\telse:\n\t\t\tprint((rm - lm) * (um - dm + 1))\n\telse:\n\t\tif cany:\n\t\t\tprint((um - dm) * (rm - lm + 1))\n\t\telse:\n\t\t\tprint((rm - lm + 1) * (um - dm + 1))\n\n\n", "t=int(input())\ndef possible(presum):\n    l=len(presum)\n    lastmax=-1\n    firstmin=l\n    mx=max(presum)\n    mn=min(presum)\n    for i in range(l):\n        if(mx==presum[i]):\n            lastmax=max(lastmax,i)\n        if(mn==presum[i]):\n            firstmin=min(i,firstmin)\n    if lastmax<firstmin:\n        return True\n    return False\nfor i in range(t):\n    s=input()\n    l1=[0]\n    l2=[0]\n    for i in s:\n        if i=='S':\n            l1.append(l1[-1]-1)\n        elif i=='W':\n            l1.append(l1[-1]+1)\n        elif i==\"D\":\n            l2.append(l2[-1]+1)\n        else:\n            l2.append(l2[-1]-1)\n    length=max(l1)-min(l1)+1\n    breadth=max(l2)-min(l2)+1\n    ans=length*breadth\n    if length>2 and possible(l1):\n        ans=min(ans,(length-1)*breadth)\n    for i in range(len(l1)):\n        l1[i]*=-1\n    if length>2 and possible(l1):\n        ans=min(ans,(length-1)*breadth)\n    if breadth>2 and possible(l2):\n        ans=min(ans,(length)*(breadth-1))\n    for i in range(len(l2)):\n        l2[i]*=-1\n    if breadth>2 and possible(l2):\n        ans=min(ans,(length)*(breadth-1))\n    print(ans)", "def lim(s):\n    now = 0\n    up, down = 0, 0\n    for i in s:\n        now += i\n        up = max(up, now)\n        down = min(down, now)\n    return up, down\ndef f(a):\n    return a[0] - a[1] + 1\ndef upg(s):\n    t = lim(s)\n    up, down = t[0], t[1]\n    arr = [1, 1]\n    now = 0\n    for i in range(len(s) - 1):\n        if now == up - 1 and s[i + 1] == 1 and arr[0] == 1:\n            arr[0] = 0\n            if f(lim(s[:(i + 1)] + [-1] + s[(i + 1):])) < f(t):\n                return 1\n        if now == down + 1 and s[i + 1] == -1 and arr[1] == 1:\n            arr[1] = 0\n            if f(lim(s[:(i + 1)] + [1] + s[(i + 1):])) < f(t):\n                return 1\n        now += s[i + 1]\n    return 0\n\n\nfor q in range(int(input())):\n    s = input()\n    s1, s2 = [0], [0]\n    for i in s:\n        if i == 'W': s1.append(1)\n        if i == 'S': s1.append(-1)\n        if i == 'A': s2.append(1)\n        if i == 'D': s2.append(-1)\n    u1 = upg(s1)\n    u2 = upg(s2)\n    res1, res2 = f(lim(s1)), f(lim(s2))\n    ans = min((res1 - u1) * res2, (res2 - u2) * res1)\n    print(ans)", "t= int(input())\n\nfor _ in range(0,t):\n\n    a= list(input())\n    nowx=0\n    nowy=0\n    maxx=0\n    minx=0\n    maxy=0\n    miny=0\n    tmaxx=0\n    tminx=0\n    tmaxy=0\n    tminy=0\n    highw=0\n    highs=0\n    widthd=0\n    widtha=0\n    for i in range (0,len(a)):\n        \n        if a[i] == 'W':\n            nowy += 1\n            if nowy >= maxy:\n                maxy=nowy\n                tmaxy=i\n                \n        elif a[i] == 'S':\n            nowy -= 1\n            if nowy <=miny:\n                miny=nowy\n                tminy=i\n        elif a[i] == 'D':\n            nowx += 1\n            if nowx >= maxx:\n                maxx=nowx\n                tmaxx=i\n        elif a[i] == 'A':\n            nowx -= 1\n            if nowx <=minx:\n                minx=nowx\n                tminx=i\n\n        highw= max(highw,nowy-miny)\n        highs= max(highs,maxy-nowy)\n        widthd=max(widthd,nowx-minx)\n        widtha=max(widtha,maxx-nowx)\n    y1= max(highw,highs)\n    y2= max(highw!=0 or highs!=0, y1- ((highw!=highs)))\n    x1= max(widthd,widtha)\n    x2= max(widthd!=0 or widtha!=0, x1-((widthd!=widtha)))\n    print(min((y1+1)*(x2+1),(1+y2)*(x1+1)))\n    \n  \n    \n    \n\n   \n\n    \n    \n", "t = int(input())\nfor _ in range(t):\n    ss = input()\n    minx=0\n    fminxpos = -1\n    lminxpos = -1\n    maxx=0\n    fmaxxpos = -1\n    lmaxxpos = -1\n    miny=0\n    fminypos = -1\n    lminypos = -1\n    maxy=0\n    fmaxypos = -1\n    lmaxypos = -1\n    x = 0\n    y = 0\n    for i,s in enumerate(ss):\n        if s == 'W':\n            y +=1\n            if y > maxy:\n                maxy=y\n                fmaxypos=i\n            if y == maxy:\n                lmaxypos=i\n        elif s == 'S':\n            y -= 1\n            if y < miny:\n                miny = y\n                fminypos = i\n            if y == miny:\n                lminypos = i\n        elif s == 'D':\n            lastd = i\n            x += 1\n            if x > maxx:\n                maxx = x\n                fmaxxpos = i\n            if x == maxx:\n                lmaxxpos = i\n        elif s == 'A':\n            lasta = i\n            x -= 1\n            if x < minx:\n                minx = x\n                fminxpos = i\n            if x == minx:\n                lminxpos = i\n    xsize = maxx - minx + 1\n    ysize = maxy - miny + 1\n    if xsize > 2 and (fmaxxpos > lminxpos or fminxpos > lmaxxpos):\n        xmin = xsize - 1\n    else:\n        xmin = xsize\n    if ysize > 2 and (fmaxypos > lminypos or fminypos > lmaxypos):\n        ymin = ysize - 1\n    else:\n        ymin = ysize\n    print(min(xmin*ysize, xsize*ymin))", "T = int(input())\n\nfor _ in range(T):\n    cmd = input()\n\n    mostL, mostR, mostB, mostT = 0, 0, 0, 0\n    mostLs, mostRs, mostBs, mostTs = [0],[0],[0],[0]\n    x,y=0,0\n    i = 0\n    for c in cmd:\n        i += 1\n        if c == \"W\":\n            y += 1\n            if y>mostT:\n                mostT = y\n                mostTs = [i]\n            elif y == mostT:\n                mostTs.append(i)\n        elif c == \"S\":\n            y -= 1\n            if y<mostB:\n                mostB = y\n                mostBs = [i]\n            elif y == mostB:\n                mostBs.append(i)\n        elif c == \"A\":\n            x -= 1\n            if x < mostL:\n                mostL = x\n                mostLs = [i]\n            elif x == mostL:\n                mostLs.append(i)\n        elif c == \"D\":\n            x += 1\n            if x > mostR:\n                mostR = x\n                mostRs = [i]\n            elif x == mostR:\n                mostRs.append(i)\n\n    LR = mostR - mostL + 1\n    if LR >= 3:\n        firstL, lastL = mostLs[0], mostLs[-1]\n        firstR, lastR = mostRs[0], mostRs[-1]\n\n        cross = lastR > firstL and lastL > firstR\n        LR_extra = not cross\n    else:\n        LR_extra = False\n\n    BT = mostT - mostB + 1\n    if BT >= 3:\n        firstB, lastB = mostBs[0], mostBs[-1]\n        firstT, lastT = mostTs[0], mostTs[-1]\n\n        cross = lastB > firstT and lastT > firstB\n        BT_extra = not cross\n    else:\n        BT_extra = False\n\n    if LR_extra and BT_extra:\n        area = min((LR-1)*BT,LR*(BT-1))\n    elif LR_extra:\n        area = (LR-1)*BT\n    elif BT_extra:\n        area = LR*(BT-1)\n    else:\n        area = LR*BT\n    print(area)", "def main():\n    hh, vv, r = [0], [0], []\n    f = {'W': (vv, -1), 'S': (vv, 1), 'A': (hh, -1), 'D': (hh, 1)}.get\n    for _ in range(int(input())):\n        del vv[1:], hh[1:], r[:]\n        for l, d in map(f, input()):\n            l.append(l[-1] + d)\n        for l in hh, vv:\n            mi, ma = min(l), max(l)\n            a, tmp = mi - 1, []\n            for b in filter((mi, ma).__contains__, l):\n                if a != b:\n                    a = b\n                    tmp.append(a)\n            ma -= mi - 1\n            r.append(ma)\n            if len(tmp) < 3 <= ma:\n                ma -= 1\n            r.append(ma)\n        print(min((r[0] * r[3], r[1] * r[2])))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    h, v = hv = ([0], [0])\n    f = {'W': (v, -1), 'S': (v, 1), 'A': (h, -1), 'D': (h, 1)}.get\n    for _ in range(int(input())):\n        del h[1:], v[1:]\n        for l, d in map(f, input()):\n            l.append(l[-1] + d)\n        x = y = 1\n        for l in hv:\n            lh, a, n = (min(l), max(l)), 200001, 0\n            for b in filter(lh.__contains__, l):\n                if a != b:\n                    a = b\n                    n += 1\n            le = lh[1] - lh[0] + 1\n            x, y = y * le, x * (le - (n < 3 <= le))\n        print(x if x < y else y)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "t = int(input())\nfor c in range(t):\n    s = input()\n    up_max = down_max = right_max = left_max = 0\n    first_up = last_up = first_down = last_down = first_left = last_left = first_right = last_right = 0\n    current_x = current_y = 0\n    horizontal_count = vertical_count = 0\n    for i in range(len(s)):\n        if s[i] == 'W':\n            current_y += 1\n            vertical_count += 1\n            if current_y > up_max:\n                up_max = current_y\n                first_up = last_up = i + 1\n            elif current_y == up_max:\n                last_up = i + 1\n        elif s[i] == 'S':\n            current_y -= 1\n            vertical_count += 1\n            if current_y < down_max:\n                down_max = current_y\n                first_down = last_down = i + 1\n            elif current_y == down_max:\n                last_down = i + 1\n        elif s[i] == 'D':\n            current_x += 1\n            horizontal_count += 1\n            if current_x > right_max:\n                right_max = current_x\n                first_right = last_right = i + 1\n            elif current_x == right_max:\n                last_right = i + 1\n        else:\n            current_x -= 1\n            horizontal_count += 1\n            if current_x < left_max:\n                left_max = current_x\n                first_left = last_left = i + 1\n            elif current_x == left_max:\n                last_left = i + 1\n\n    h = up_max - down_max + 1\n    w = right_max - left_max + 1\n    ans = h * w\n    if vertical_count > 1 and last_up < first_down:\n        ans = min(ans, (h - 1) * w)\n    if vertical_count > 1 and last_down < first_up:\n        ans = min(ans, (h - 1) * w)\n    if horizontal_count > 1 and last_right < first_left:\n        ans = min(ans, h * (w - 1))\n    if horizontal_count > 1 and last_left < first_right:\n        ans = min(ans, h * (w - 1))\n\n    print(ans)", "q = int(input())\nfor _ in range(q):\n    d = [x for x in list(input())]\n    x, y = 0, 0\n    minX, maxX, minY, maxY = 0, 0 ,0 ,0\n    allowW, allowS, allowA, allowD = True, True, True, True\n    for v in d:\n        if v == 'W':\n            y += 1\n            if y > maxY:\n                maxY = y\n                allowS = True\n                allowW = False\n            elif y == maxY:\n                allowW = False\n        elif v == 'S':\n            y -= 1\n            if y < minY:\n                minY = y\n                allowW = True\n                allowS = False\n            elif y == minY:\n                allowS = False\n        elif v == 'A':\n            x -= 1\n            if x < minX:\n                minX = x\n                allowA = False\n                allowD = True\n            elif x == minX:\n                allowA = False\n        else:#if v == 'D':\n            x += 1\n            if x > maxX:\n                maxX = x\n                allowA = True\n                allowD = False\n            elif x == maxX:\n                allowD = False\n    val = (maxX-minX+1)*(maxY-minY+1)\n    if (maxX-minX) > 1 and (allowD or allowA):\n        val = min(val, (maxX-minX)*(maxY-minY+1))\n    if (maxY-minY) > 1 and (allowW or allowS):\n        val = min(val, (maxX-minX+1)*(maxY-minY))\n    print(val)", "# coding=utf-8\nINF = 1e11\n\n# move = {'W': (0, 0), 'A': (0, 0), 'S': (0, 0), 'D': (0, 0)}\nmove = {'W': (0, 1), 'A': (-1, 0), 'S': (0, -1), 'D': (1, 0)}\n\n\ndef getExtremes(positions):\n    minX, minY, maxX, maxY = [positions[0][0]], [positions[0][1]], [positions[0][0]], [positions[0][1]]\n    for p in positions[1:]:\n        minX.append(min(minX[-1], p[0]))\n        minY.append(min(minY[-1], p[1]))\n        maxX.append(max(maxX[-1], p[0]))\n        maxY.append(max(maxY[-1], p[1]))\n    return minX, minY, maxX, maxY\n\n\nt = int(input())\n\nwhile t > 0:\n    t -= 1\n    s = input()\n    x, y = 0, 0\n    positions = [(0, 0)]\n    for c in s:\n        x, y = x + move[c][0], y + move[c][1]\n        positions.append((x, y))\n    # print(positions)\n    # print()\n    minXBeg, minYBeg, maxXBeg, maxYBeg = getExtremes(positions)\n    # print(minXBeg, minYBeg, maxXBeg, maxYBeg, sep=\"\\n\")\n    # print()\n    positions.reverse()\n    minXEnd, minYEnd, maxXEnd, maxYEnd = getExtremes(positions)\n    minXEnd.reverse()\n    minYEnd.reverse()\n    maxXEnd.reverse()\n    maxYEnd.reverse()\n    # print(minXEnd, minYEnd, maxXEnd, maxYEnd, sep=\"\\n\")\n    # print()\n    positions.reverse()\n    ans = INF\n    for i in range(len(s)):\n        for c in move:\n            minX = min(minXBeg[i], positions[i][0] + move[c][0], minXEnd[i + 1] + move[c][0])\n            maxX = max(maxXBeg[i], positions[i][0] + move[c][0], maxXEnd[i + 1] + move[c][0])\n            minY = min(minYBeg[i], positions[i][1] + move[c][1], minYEnd[i + 1] + move[c][1])\n            maxY = max(maxYBeg[i], positions[i][1] + move[c][1], maxYEnd[i + 1] + move[c][1])\n            area = (maxX - minX + 1) * (maxY - minY + 1)\n            # print(i, c, minX, maxX, minY, maxY, area)\n            ans = min(ans, area)\n    print(ans)\n", "def solve():\n    i = 0\n    j = 0\n    imax = imin = 0\n    jmax = jmin = 0\n    fjmin = ljmin = fjmax = ljmax = fimax = limax = fimin = limin = -1\n    for ind, e in enumerate(input()):\n        if e == 'W':\n            i += 1\n            if i > imax:\n                imax = i\n                fimax = ind\n                limax = ind\n        elif e == 'S':\n            i -= 1\n            if i < imin:\n                imin = i\n                fimin = ind\n                limin = ind\n        elif e == \"A\":\n            j -= 1\n            if j < jmin:\n                jmin = j\n                fjmin = ind\n                ljmin = ind\n        elif e == 'D':\n            j += 1\n            if j > jmax:\n                jmax = j\n                fjmax = ind\n                ljmax = ind\n        if j == jmin:\n            ljmin = ind\n        if j == jmax:\n            ljmax = ind\n        if i == imin:\n            limin = ind\n        if i == imax:\n            limax = ind\n    ans = 0\n    if fjmax > ljmin + 1 or fjmin > ljmax + 1:\n        ans = imax - imin + 1\n    if fimax > limin + 1 or fimin > limax + 1:\n        ans = max(ans, jmax - jmin + 1)\n    print((imax - imin + 1) * (jmax - jmin + 1) - ans)\n\n\nfor _ in range(int(input())):\n    solve()\n", "import sys\ninput = sys.stdin.readline\n\n\nQ = int(input())\nQuery = [list(input().rstrip()) for _ in range(Q)]\n\nfor S in Query:\n    L = len(S)\n    T = [(0, 0)]\n    for s in S:\n        x, y = T[-1]\n        if s == \"W\":\n            T.append((x, y+1))\n        elif s == \"S\":\n            T.append((x, y-1))\n        elif s == \"A\":\n            T.append((x-1, y))\n        else:\n            T.append((x+1, y))\n    \n    # up, down, left, right\n    dp1 = [[0, 0, 0, 0] for _ in range(L+1)]\n    for i, (x, y) in enumerate(T):\n        if i == 0: continue\n        dp1[i][0] = max(y, dp1[i-1][0])\n        dp1[i][1] = min(y, dp1[i-1][1])\n        dp1[i][2] = min(x, dp1[i-1][2])\n        dp1[i][3] = max(x, dp1[i-1][3])\n    \n\n    lx, ly = T[-1]\n    dp2 = [[ly, ly, lx, lx] for _ in range(L+1)]\n    for i in reversed(range(L)):\n        x, y = T[i]\n        dp2[i][0] = max(y, dp2[i+1][0])\n        dp2[i][1] = min(y, dp2[i+1][1])\n        dp2[i][2] = min(x, dp2[i+1][2])\n        dp2[i][3] = max(x, dp2[i+1][3])\n    \n    Y, X = dp1[L][0]-dp1[L][1]+1, dp1[L][3]-dp1[L][2]+1\n    ans = 0\n    for i in range(L):\n        if dp1[i][0] < dp2[i][0] and dp1[i][1] < dp2[i][1]:\n            ans = max(ans, X)\n        if dp1[i][0] > dp2[i][0] and dp1[i][1] > dp2[i][1]:\n            ans = max(ans, X)\n        if dp1[i][2] < dp2[i][2] and dp1[i][3] < dp2[i][3]:\n            ans = max(ans, Y)\n        if dp1[i][2] > dp2[i][2] and dp1[i][3] > dp2[i][3]:\n            ans = max(ans, Y)\n    print(X*Y-ans)", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nINF = int(1e7)\nfor case_num in range(t):\n    s = input()\n    x = 0\n    y = 0\n    xlist = [0]\n    ylist = [0]\n    for c in s:\n        if c == 'W':\n            y += 1\n        elif c == 'S':\n            y -= 1\n        elif c == 'A':\n            x -= 1\n        else:\n            x += 1\n        xlist.append(x)\n        ylist.append(y)\n    n = len(s)\n    l = [0]\n    r = [0]\n    u = [0]\n    d = [0]\n    for i in range(1, n + 1):\n        l.append(min(l[-1], xlist[i]))\n        r.append(max(r[-1], xlist[i]))\n        u.append(max(u[-1], ylist[i]))\n        d.append(min(d[-1], ylist[i]))\n    lr = [xlist[n]]\n    rr = [xlist[n]]\n    ur = [ylist[n]]\n    dr = [ylist[n]]\n    for i in range(1, n + 1):\n        lr.append(min(lr[-1], xlist[n - i]))\n        rr.append(max(rr[-1], xlist[n - i]))\n        ur.append(max(ur[-1], ylist[n - i]))\n        dr.append(min(dr[-1], ylist[n - i]))\n    ans = INF * INF\n    coeff = [[-1, 0], [1, 0], [0, -1], [0, 1]]\n    for k in range(4):\n        for i in range(n):\n            nl = min(l[i], lr[n - i] + coeff[k][0])\n            nr = max(r[i], rr[n - i] + coeff[k][0])\n            nu = max(u[i], ur[n - i] + coeff[k][1])\n            nd = min(d[i], dr[n - i] + coeff[k][1])\n            area = (nr - nl + 1) * (nu - nd + 1)\n            ans = min(ans, area)\n    print(ans)\n", "import sys\ninput = sys.stdin.readline\n\nfor _ in range(int(input())):\n    s = input()\n    l, r, u, d, fl, fr, fu, fd, x, y = [0] * 10\n    for i in range(len(s)):\n        if s[i] == 'W':\n            y += 1\n            if y > u:\n                u = y\n                fd = 0\n                fu = 1\n            if y == u:\n                fu = 1\n        elif s[i] == 'A':\n            x -= 1\n            if x < l:\n                l = x\n                fl = 1\n                fr = 0\n            if x == l:\n                fl = 1\n        elif s[i] == 'S':\n            y -= 1\n            if y < d:\n                d = y\n                fd = 1\n                fu = 0\n            if y == d:\n                fd = 1\n        elif s[i] == 'D':\n            x += 1\n            if x > r:\n                r = x\n                fr = 1\n                fl = 0\n            if x == r:\n                fr = 1\n    #bless Ctrl+C Ctrl+V\n    x, y = r - l + 1, u - d + 1\n    s, k = x * y, x * y\n    if x > 2 and not fl * fr:\n        s = k - y\n    if y > 2 and not fu * fd and k - x < s:\n        s = k - x\n    print(s)", "import sys\ndef work(c,c1, s):\n    maxlast, maxfirst,minlast,minfirst = 0,0,0,0\n    max = 0\n    min = 0\n    y = 0\n    for i in range(len(s)):\n        if s[i] == c:\n            y += 1\n        elif s[i] == c1:\n            y -=1\n\n        if max < y:\n            maxfirst,maxlast = i,i\n            max = y\n        elif max ==y :\n            maxlast = i\n\n        if y < min:\n            minlast,minfirst =i,i\n            min = y\n        elif min == y:\n            minlast = i\n    flag = 0\n    if (maxlast<minfirst or maxfirst>minlast) and max-min > 1:\n        flag = 1\n    return  max-min+1,flag\n\ncount = 0\nfor line in sys.stdin:\n    if count == 0:\n        n = int(line.strip().split(' ')[0])\n        #k = int(line.strip().split(' ')[1])\n        #m = int(line.strip().split(' ')[2])\n        count += 1\n        continue\n    s = line.strip()\n    flag,flag1 =0,0\n    n,flag = work('W','S', s)\n    m,flag1 = work('A', 'D', s)\n\n    res = n * m\n    if flag1 and flag:\n        res = min(n*(m-1),m*(n-1))\n    elif flag:\n        res = m*(n-1)\n    elif flag1:\n        res = (m-1)*n\n    print(res)"]