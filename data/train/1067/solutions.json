["# Fibonacci Series using \r\n# Optimized Method \r\n\r\n# function that returns nth \r\n# Fibonacci number\r\nMOD = 1000000007\r\ndef fib(n):\r\n    F = [[2, 2],\r\n         [1, 0]]\r\n    power(F, n - 1)\r\n    ans = [6, 2]\r\n    return (F[0][0] * 6 + F[0][1] * 2) % MOD\r\n    # return F[0][0]\r\n\r\n\r\ndef multiply(F, M):\r\n    x = (F[0][0] * M[0][0] +\r\n         F[0][1] * M[1][0]) % MOD\r\n    y = (F[0][0] * M[0][1] +\r\n         F[0][1] * M[1][1]) % MOD\r\n    z = (F[1][0] * M[0][0] +\r\n         F[1][1] * M[1][0]) % MOD\r\n    w = (F[1][0] * M[0][1] +\r\n         F[1][1] * M[1][1]) % MOD\r\n\r\n    F[0][0] = x\r\n    F[0][1] = y\r\n    F[1][0] = z\r\n    F[1][1] = w\r\n\r\n\r\ndef power(F, n):\r\n    if n == 0 or n == 1:\r\n        return\r\n    M = [[2, 2],\r\n         [1, 0]]\r\n\r\n    power(F, n // 2)\r\n    multiply(F, F)\r\n\r\n    if n % 2 != 0:\r\n        multiply(F, M)\r\n\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    ans = 1\r\n    if n == 0:\r\n        ans = 1\r\n    elif n == 1:\r\n        ans = 2\r\n    elif n == 2:\r\n        ans = 6\r\n    else:\r\n        ans = fib(n-1)\r\n    print(ans)\r\n", "from typing import List\r\nMatrix = List[List[int]]\r\n\r\nMOD = 10 ** 9 + 7\r\n\r\n\r\ndef identity(n: int) -> Matrix:\r\n    matrix = [[0] * n for _ in range(n)]\r\n\r\n    for i in range(n):\r\n        matrix[i][i] = 1\r\n\r\n    return matrix\r\n\r\n\r\ndef multiply(mat1: Matrix, mat2: Matrix, copy: Matrix) -> None:\r\n    r1, r2 = len(mat1), len(mat2)\r\n    c1, c2 = len(mat1[0]), len(mat2[0])\r\n\r\n    result = [[0] * c2 for _ in range(r1)]\r\n\r\n    for i in range(r1):\r\n        for j in range(c2):\r\n            for k in range(r2):\r\n                result[i][j] = (result[i][j] + mat1[i][k] * mat2[k][j]) % MOD\r\n\r\n    for i in range(r1):\r\n        for j in range(c2):\r\n            copy[i][j] = result[i][j]\r\n\r\n\r\ndef power(mat: Matrix, n: int) -> Matrix:\r\n    res = identity(len(mat))\r\n\r\n    while n:\r\n        if n & 1:\r\n            multiply(res, mat, res)\r\n\r\n        multiply(mat, mat, mat)\r\n\r\n        n >>= 1\r\n\r\n    return res\r\n\r\n\r\ndef fib(n: int) -> int:\r\n    if n == 0:\r\n        return 0\r\n\r\n    magic = [[2, 1],\r\n             [2, 0]]\r\n\r\n    mat = power(magic, n)\r\n\r\n    return mat[0][0]\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n\r\n    print(fib(n) % MOD)\r\n"]