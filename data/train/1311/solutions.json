["test=int(input())\nfor i in range(test):\n n,k=map(int,input().split())\n x=n-k\n for j in range(1,n+1):\n  if(j%2==0 and x>0):\n   print(-j,end=' ')\n   x-=1\n  elif(k<=0):\n   print(-j,end=' ')\n  else:\n   print(j,end=' ')\n   k-=1\n print()", "# cook your dish here\nimport math\n\ntry:\n tc = int(input())\n for _ in range(tc):\n  n, k = list(map(int, input().split()))\n  ans = []\n  need = 0\n  for i in range(1, n+1):\n   if i % 2 != 0:\n    ans.append(i)\n   else:\n    ans.append(-i)\n  p = math.ceil(n/2)\n\n  need = p - k if p > k else k-p\n\n  if k < p:\n   i = n-1\n   while need > 0:\n    if ans[i] > 0:\n     ans[i] *= -1\n     need -= 1\n    i -= 1\n\n  if k > p:\n   i = n-1\n   while need > 0:\n    if ans[i] < 0:\n     ans[i] *= -1\n     need -= 1\n    i -= 1\n  print(*ans)\nexcept:\n pass\n", "# cook your dish here\nt=int(input())\nimport math\nwhile t:\n t=t-1\n n,k=input().split()\n n=int(n)\n k=int(k)\n l=[-1*(i+1) for i in range(n)]\n for i in range(1,n,2):\n  l[i]=l[i]*(-1)\n #print(l)\n if k-(math.floor(n/2))>0:\n  s=k-(math.floor(n/2))\n  i=n-1\n  while s:\n   # print(s,i,l,\"**\")\n   if l[i]<0:\n    # print(s,i,l,\"*\")\n    l[i]=(-1)*l[i]\n    s=s-1\n   i=i-1\n if (math.floor(n/2))-k>0:\n  s=(math.floor(n/2))-k\n  i=n-1\n  while s:\n   if l[i]>0:\n    l[i]=(-1)*l[i]\n    s=s-1\n   i=i-1\n for i in range(n):\n  print(l[i],end=\" \")", "# cook your dish here\nt=int(input())\nimport math\nwhile t:\n t=t-1\n n,k=input().split()\n n=int(n)\n k=int(k)\n l=[-1*(i+1) for i in range(n)]\n for i in range(1,n,2):\n  l[i]=l[i]*(-1)\n #print(l)\n if k-(math.floor(n/2))>0:\n  s=k-(math.floor(n/2))\n  while s:\n   for i in range(n-1,-1,-1):\n    # print(i,s,\"*\",l)\n    if l[i]<0:\n     l[i]=(-1)*l[i]\n     s=s-1\n     break\n if (math.floor(n/2))-k>0:\n  s=(math.floor(n/2))-k\n  while s:\n   for i in range(n-1,-1,-1):\n    if l[i]>0:\n     l[i]=(-1)*l[i]\n     s=s-1\n     break\n for i in range(n):\n  print(l[i],end=\" \")", "t = int(input())\n\nwhile (t > 0):\n n, k = map(int, input().split())\n a = list()\n if 2*k <= n:\n  for i in range(2*k):\n   if i % 2 == 0:\n    a.append(i+1)\n   else:\n    a.append(-i-1)\n  for i in range(2*k, n, 1):\n   a.append(-i-1)\n elif 2*k > n:\n  for i in range(2*(n-k)):\n   if i % 2 == 0:\n    a.append(i+1)\n   else:\n    a.append(-i-1)\n  for i in range(2*(n-k), n, 1):\n   a.append(i+1)\n else:\n  for i in range(2*k):\n   if i % 2 == 0:\n    a.append(i+1)\n   else:\n    a.append(-i-1)\n for i in a:\n  print(i, end=\" \")\n t -= 1\n", "import sys\nimport math\nimport collections\nimport heapq\nimport queue\nimport itertools\nimport functools\nimport operator\nimport time\n\nreadline = sys.stdin.readline\n \nIPS = lambda: readline().rstrip()\nIP = lambda: int(readline().rstrip())\nMP = lambda: map(int, readline().split())\nLS = lambda: list(map(int, readline().split()))\nAR = lambda: [int(x) for x in readline().split()]\n\ndef solve():\n for _ in range(IP()):\n  n,k = MP()\n  \n  ans = [-x for x in range(1,n+1)]\n \n  ans[0] = -ans[0]\n  k-=1\n  \n  i, j = 1, -1\n  if n&1 == 1: j = n-1\n  else: j = n-2\n  \n  while k>0:\n   if(i<n): ans[i] = -ans[i]; i+=2\n   elif j>0: ans[j] = -ans[j]; j-=2\n   k -= 1 \n  \n  for a in ans: print(a,end=\" \")\n  print()\n  \ndef __starting_point():\n solve()\n__starting_point()", "test_case = int(input())\nfor i in range(0,test_case):\n line = input().split(' ')\n N = int (line[0])\n K = int (line[1])\n ans = []\n for i in range(1,N+1):\n  if i%2==0:\n   ans.append(0-i)\n  else:\n   ans.append(i)\n \n temp = K - int((N+1)/2)\n ind = N-1\n if temp>0:\n  while temp>0:\n   if ans[ind]<0:\n    ans[ind] = 0-ans[ind]\n    temp = temp - 1 \n   ind = ind - 1\n else:\n  temp = 0 - temp\n  while temp>0:\n   if ans[ind]>0:\n    ans[ind] = 0-ans[ind]\n    temp = temp -1\n   ind = ind - 1\n for i in range(0,N):\n  print(ans[i], end=\" \")\n print()", "t=int(input())\nwhile(t>0):\n n,k=map(int,input().split())\n cnt = n/2\n diff = n-k\n\n if(k>cnt):\n  for i in range(1,n+1):\n   if(diff>0 and i%2==1):\n    diff-=1\n    print(-i,end=\" \")\n   else:\n    print(i,end=\" \")\n\n else:\n  for i in range(1, n + 1):\n   if(k>0 and i%2==0):\n    k=k-1\n    print(i,end=\" \")\n   else:\n    print(-i,end=\" \")\n\n print()\n t=t-1\n", "import math\n \ntc = int(input())\n \nfor _ in range(tc):\n \n n, k = map(int, input().split())\n \n ans = []\n for i in range(1, n+1):\n  if i % 2 != 0:\n   ans.append(i)\n  else:\n   ans.append(-i)\n \n positive = math.ceil(n/2)\n \n if positive > k:\n  i = n-1\n  needed = positive-k\n  while needed > 0:\n   if ans[i] > 0:\n    ans[i] *= -1\n    needed -= 1\n   i -= 1\n   \n if positive < k:\n  i = n-1\n  needed = k-positive\n  while needed > 0:\n   if ans[i] < 0:\n    ans[i] *= -1\n    needed -= 1\n   i -= 1\n   \n print(*ans)", "# cook your dish here\nimport math\n \ntc = int(input())\n \nfor _ in range(tc):\n \n n, k = map(int, input().split())\n \n ans = []\n for i in range(1, n+1):\n  if i % 2 != 0:\n   ans.append(i)\n  else:\n   ans.append(-i)\n \n positive = math.ceil(n/2)\n \n if positive > k:\n  i = n-1\n  needed = positive-k\n  while needed > 0:\n   if ans[i] > 0:\n    ans[i] *= -1\n    needed -= 1\n   i -= 1\n   \n if positive < k:\n  i = n-1\n  needed = k-positive\n  while needed > 0:\n   if ans[i] < 0:\n    ans[i] *= -1\n    needed -= 1\n   i -= 1\n   \n print(*ans)", "# Post Prefixes\nfor t in range(int(input())):\n\n n, k = list(map(int, input().split())) # Two inputs\n flips = n - k\n A = []\n # Logic: Flip n-k numbers from i to (-i). First start with even numbers\n #        beginning from 2. If n-k > n/2 ie no of flips is greater than even\n #        numbers available, then flip remaining odd numbers starting from \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0the\n #        back, ie bigger numbers till total (n-k) numbers are flipped.\n\n for i in range(n):\n  a = i\n  if (i + 1) % 2 == 0 and flips > 0:  # If even and flips > 0, i = -i\n   A.append(-(a+1))\n   flips -= 1\n  else:\n   A.append(a+1)\n\n if flips > 0:  # If no. of flips still exist\n  if n % 2:\n   last_odd = n-1 # List is 0 based\n  else:\n   last_odd = n-2\n\n  while (flips > 0):\n   A[last_odd] *= -1\n   flips -= 1\n   last_odd -= 2\n\n print(*A)\n\n", "import math\ntry :\n t=int(input())\n for i in range(t):\n  n,k=map(int,input().split())\n  h=math.ceil(n/2)\n  l=[x*pow(-1,x+1) for x in range(1,n+1)]\n  if k<h :\n   for j in range(2*k,n):\n    l[j]=-abs(l[j])\n  elif k>h :\n   if l[n-1]<0 : m=n-1\n   else : m=n-2\n   for j in range(k-h) :\n    l[m]=-l[m]\n    m=m-2\n  for j in range(n):\n   print(l[j],end=\" \")\n  print()\nexcept :\n pass", "# cook your dish here\nimport math\ntry:\n t=int(input())\n for _ in range (t):\n  n,k=list(map(int,input().split()))\n  seq=[]\n  for i in range(1,n+1):\n   if i%2!=0:\n    seq.append(i)\n   else:\n    seq.append(-i)\n  positive=math.ceil(n/2)\n  if(positive>k):\n   i=n-1\n   req=positive-k\n   while (req>0):\n    if seq[i]>0:\n     seq[i] =-(i+1)\n     req -=1\n    i -=1\n  if(positive<k):\n   i=n-1\n   req=k-positive\n   while (req>0):\n    if seq[i]<0:\n     seq[i] =(i+1)\n     req -=1\n    i -=1\n  print(*seq)\nexcept EOFError as t : pass\n  \n", "# cook your dish here\nimport math\ntry:\n t=int(input())\n for _ in range (t):\n  n,k=list(map(int,input().split()))\n  seq=[]\n  for i in range(1,n+1):\n   if i%2!=0:\n    seq.append(i)\n   else:\n    seq.append(-i)\n  positive=math.ceil(n/2)\n  if(positive>k):\n   i=n-1\n   req=positive-k\n   while (req>0):\n    if seq[i]>0:\n     seq[i] *=-1\n     req -=1\n    i -=1\n  if(positive<k):\n   i=n-1\n   req=k-positive\n   while (req>0):\n    if seq[i]<0:\n     seq[i] *=-1\n     req -=1\n    i -=1\n  print(*seq)\nexcept EOFError as t : pass\n  \n", "for i in range(int(input())):\n n,k=list(map(int,input().split()))\n l=[]\n pos=0\n for i in range(1,n+1):\n  if i%2==0:\n   l.append(-1*i)\n  else:\n   l.append(i)\n   pos+=1\n if pos<k:\n  g=k-pos\n  c=0\n  for i in range(n-1,-1,-1):\n   if l[i]<0:\n    l[i]=-1*l[i]\n    c+=1\n   if c==g:\n    break\n if pos>k:\n  g=pos-k\n  c=0\n  for i in range(n-1,-1,-1):\n   if l[i]>0:\n    l[i]=-1*l[i]\n    c+=1\n   if c==g:\n    break\n print(*l)\n\n", "# cook your dish here\nfrom math import ceil\nT = int(input())\nfor _ in range(T):\n N, K = map(int,input().split())\n L = []\n for i in range(1, N+1):\n  if i%2==0:\n   L.append(-i)\n  else:\n   L.append(i)\n C=ceil(N/2) \n if K<=C: \n  d=C-K\n  \n  c=0\n  for i in range(N-1,-1,-1):\n   if c==d:\n    break\n   if L[i]>0:\n    L[i]=-(L[i])\n    c+=1\n else:\n  d=K-C \n  c=0\n  for i in range(N-1,-1,-1):\n   if c==d:\n    break\n   if L[i]<0:\n    L[i]=abs(L[i])\n    c+=1\n print(*L)", "\n# cook your dish here\nfor _ in range(int(input())):\n\n n, k = map(int, input().split())\n\n arr = []\n for i in range(n):\n  if i%2==0:\n   arr.append(i+1)\n  else:\n   arr.append(-i-1)\n\n pos = (n//2) + (n%2)\n neg = n//2\n \n if k<pos:\n  for i in range(n-1, -1, -1):\n   if k==pos:\n    break\n   if arr[i]>0:\n    arr[i] = -arr[i]\n    pos -= 1\n else:\n  for i in range(n-1, -1, -1):\n   if k==pos:\n    break\n   if arr[i]<0:\n    arr[i] = -arr[i]\n    pos += 1\n   \n print(*arr)", "# cook your dish here\nfor i in range(int(input())):\n n,k=list(map(int,input().split()))\n arr=[1]\n p=1\n ne=0\n m=0\n for j in range(2,n+1):\n  if j%2==0:\n   if p!=k:\n    arr.append(j)\n    p+=1\n   else:\n    m=1\n    break\n  else:\n   if ne!=(n-k):\n    arr.append(-j)\n    ne+=1\n   else:\n    m=-1\n    break\n \n if abs(arr[-1])!=n and m==-1:\n  for x in range(arr[-1]+1,n+1):\n   arr.append(x)\n elif abs(arr[-1])!=n and m==1:\n  \n  for x in range(abs(arr[-1])+1,n+1):\n   \n   arr.append(-x)\n print(*arr)\n  \n  \n", "# cook your dish here\n# Let's hack this code.\n\nfrom sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\nfrom bisect import bisect_left, bisect_right \n\nmod = 1000000007\n\ndef L():\n return list(map(int, stdin.readline().split()))\n\ndef In():\n return map(int, stdin.readline().split())\n\ndef I():\n return int(stdin.readline())\n\ndef printIn(ob):\n return stdout.write(str(ob)+'\\n')\n\ndef powerLL(n, p):\n result = 1\n while (p):\n  if (p&1):\n   result = result * n % mod\n  p = int(p / 2)\n  n = n * n % mod\n return result\n\n#--------------------------------------\n\ndef myCode():\n n,k = In()\n seq = []\n for i in range(1,n+1):\n  if i%2 == 0:\n   seq.append(-i)\n  else:\n   seq.append(i)\n if k == math.ceil(n/2):\n  print(*seq)\n elif k < math.ceil(n/2):\n  req = abs(k - (math.ceil(n/2)))\n  for i in range(n-1,-1,-1):\n   if seq[i] > 0:\n    seq[i] = -1 * seq[i]\n    req -= 1\n   if req == 0:\n    break\n  print(*seq)\n else:\n  req = abs(k - (math.ceil(n/2)))\n  for i in range(n-1,-1,-1):\n   if seq[i] < 0:\n    seq[i] = -1 * seq[i]\n    req -= 1\n   if req == 0:\n    break\n  print(*seq)\n  \ndef main():\n for t in range(I()):\n  myCode()\ndef __starting_point():\n main()\n__starting_point()", "# cook your dish her\nimport math\nt=int(input())\nwhile(t):\n n,k=list(map(int,input().split()))\n l=[]\n for i in range(1,n+1):\n  if i%2==0:\n   l.append(-i)\n  else:\n   l.append(i)\n mid=math.ceil(n/2)\n if mid>k:\n  c=mid-k\n  i=n-1\n  while(c>0):\n   if l[i]>0:\n    l[i]=l[i]*-1\n    c-=1\n   i-=1\n if mid<k:\n  c=k-mid\n  j=n-1\n  while(c>0):\n   if l[j]<0:\n    l[j]=l[j]*-1\n    c-=1\n   j-=1\n   \n print(*l)\n t-=1\n", "for _ in range(int(input())):\n a,b=map(int,input().split())\n arr=[0]*a\n for i in range(a):\n  arr[i]=i+1\n x=0\n b=a-b\n if(b>a//2):\n  x=b-a//2\n  b=a//2\n #print(b,x)\n for i in range(b):\n  arr[(2*i)+1]*=-1\n if(a%2==0):\n  for i in range(x):\n   arr[a-2*i-2]*=-1\n if(a%2!=0):\n  for i in range(x):\n   arr[a-2*i-1]*=-1\n print(*arr)", "for _ in range(int(input())):\n N,K=map(int,input().split())\n cumsum=0\n coupo=0\n coune=0\n for i in range(N):\n  if coupo==K:\n   print(-(i+1), end=' ')\n   coune+=1\n   continue\n  elif coune==N-K:\n   print((i+1), end=' ')\n   coupo+=1\n   continue\n  a=cumsum+(i+1)\n  b=cumsum-(i+1)\n  if abs(a)>abs(b):\n   cumsum=b\n   print(-(i+1), end=' ')\n  else:\n   cumsum=a\n   print((i+1), end=' ')\n  if cumsum>0:\n   coupo+=1\n  else:\n   coune+=1\n  \n  \n  \n", "for _ in range(int(input())):\n N,K=map(int,input().split())\n po=K\n ne=N-K\n arr=[]\n cumsum=0\n coupo=0\n coune=0\n for i in range(N):\n  if coupo==K:\n   arr.append(-(i+1))\n   coune+=1\n   continue\n  elif coune==ne:\n   arr.append(i+1)\n   coupo+=1\n   continue\n  a=cumsum+(i+1)\n  b=cumsum-(i+1)\n  if abs(a)>abs(b):\n   cumsum=b\n   arr.append(-(i+1))\n  else:\n   cumsum=a\n   arr.append(i+1)\n  if cumsum>0:\n   coupo+=1\n  else:\n   coune+=1\n for i in range(len(arr)):\n  print(arr[i],end=\" \")\n  \n  \n  \n"]