["# cook your dish here\nimport sys\ndef get_array(): return list(map(int , sys.stdin.readline().strip().split()))\ndef get_ints(): return list(map(int, sys.stdin.readline().strip().split()))\ndef input(): return sys.stdin.readline().strip()\nimport math\nfrom collections import defaultdict\nfrom itertools import combinations_with_replacement,permutations\nimport bisect\nimport math as mt \nfrom functools import reduce\nimport time\n\ndef __starting_point():\n    for _ in range(int(input())):\n        n = int(input())\n        a=1\n        b=1\n        c=(-2*n)\n        dis = b * b - 4 * a * c  \n        sqrt_val = math.sqrt(abs(dis))\n        r1=(-b + sqrt_val)/(2 * a)\n        # r2=(-b - sqrt_val)/(2 * a)\n\n        # print(r1)\n        r1 = math.floor(r1)+1\n        print(n-r1+1)\n\n\n\n\n\n\n\n\n\n\n\n__starting_point()", "import random\r\n\r\ndef solve(n):\r\n    b = 2*n + 3\r\n    num = b - pow( b**2 - 4*n*(n+1), 0.5)\r\n    ans = int(num // 2)\r\n    return ans\r\n\r\n\r\nfor case in range(int(input())):\r\n    n = int(input())\r\n    print(solve(n))\r\n", "# cook your dish here\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    x = (-1 + (8*n + 9)**0.5)*0.5\n    ans = n - math.ceil(x) + 1\n    print(ans)", "# cook your dish here\nimport math\nread = lambda : list(map(int,input().strip().split()))\nrs = lambda :  int(input().strip())\nt = rs()\nans = []\nfind_edges = lambda n,k : min(max_edges(n,k),k)\nmax_edges = lambda n,k : ((n-k+1) * (n-k)) >> 1\ndef find(n):\n    # x = (n * (n+1));\n    # other  = (2*n) + 3;\n    l = (n >> 1) + (n%2); \n    r = n;\n    while l + 1 < r:\n        mid = l  + ((r-l) >> 1);\n        if max_edges(n,mid) < mid:\n            r = mid - 1;\n        else:\n            l = mid;\n    if max_edges(n,r) >= r:\n        return find_edges(n,r);\n    else:\n        return find_edges(n,l);\n        \n\n    \nfor _ in range(t):\n    n = rs()\n    ans.append(find(n))\nprint(\"\\n\".join([str(x) for x in ans]))", "def fun(x):\r\n    return (n*(n+1))-(((2*n)+1)*x)+(x**2)-(2*x)\r\nfrom math import ceil\r\nfor _ in range(int(input())):\r\n\r\n\r\n    n=int(input())\r\n\r\n    l=0\r\n    r=n+1\r\n\r\n    while (l<=r):\r\n\r\n        mid=(l+r)//2\r\n\r\n        if fun(mid)>0:\r\n            l=mid+1\r\n            continue\r\n        ans1=fun(mid)\r\n        ans2=fun(mid-1)\r\n        ##print(mid,ans1,ans2)\r\n        if ans1<=0 and ans2>0:\r\n            break\r\n\r\n        if ans1<=0 and ans2<=0:\r\n            r=mid-1\r\n\r\n    mini=(n//2)+1\r\n    maxi=mid-1\r\n\r\n    ans1=((n-mid)*(n-mid+1))//2\r\n    ans=max(maxi,ans1)\r\n    ##print(mid,ans1)\r\n    print(ans)\r\n\r\n\r\n", "from collections import defaultdict\r\nimport sys\r\nimport math\r\nimport random\r\nimport bisect\r\n\r\nsys.setrecursionlimit(10**6)\r\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\r\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\r\ndef input(): return sys.stdin.readline().strip()\r\n\r\n\r\narr = [0]\r\nfor i in range(1,5*10**4):\r\n    arr.append(arr[-1]+i)\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    ind = bisect.bisect_left(arr,n)\r\n    print(min(n-ind+1,ind*(ind-1)//2))", "from collections import defaultdict\r\nimport sys\r\nimport math as mt\r\nimport random\r\n\r\nsys.setrecursionlimit(10**6)\r\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\r\ndef get_ints(): return list(map(int, sys.stdin.readline().strip().split()))\r\ndef input(): return sys.stdin.readline().strip()\r\n\r\n\r\nans = [0]*(10**6+1)\r\nans[2] = 1\r\nans[3] = 1\r\nstart = 3\r\nfor i in range(4,10**6+1):\r\n    ans[i] = min((start*(start-1))//2,i-start+1)\r\n    if ans[i]==ans[i-1]:\r\n        start+=1\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    print(ans[n])\r\n\r\n\r\n\r\n"]