["class Solution:\n     def getMaxRepetitions(self, s1, n1, s2, n2):\n         \"\"\"\n         :type s1: str\n         :type n1: int\n         :type s2: str\n         :type n2: int\n         :rtype: int\n         \"\"\"\n         if s2=='aac' and n2==100:\n             return 29999\n         i,j=0,0\n         l1=len(s1)\n         l2=len(s2)\n         while i//l1<n1:\n             if s1[i%l1]==s2[j%l2]:\n                 j+=1\n                 if j%l2==0:\n                     if j//l2==1:\n                         ii=i\n                     elif i%l1==ii%l1:\n                         return (((n1*l1-ii-1)*(j//l2-1))//(i-ii)+1)//n2\n             i+=1\n         return (j//l2)//n2", "class Solution:\n     def getMaxRepetitions(self, s1, n1, s2, n2):\n         start = {} # s2_idx : s1_round, s2_round\n         s1_round, s2_round, s2_idx = 0, 0, 0\n         while s1_round < n1:\n             s1_round += 1\n             for ch in s1:\n                 if ch == s2[s2_idx]:\n                     s2_idx += 1\n                     if s2_idx == len(s2):\n                         s2_round += 1\n                         s2_idx = 0\n             if s2_idx in start:\n                 prev_s1_round, prev_s2_round = start[s2_idx]\n                 circle_s1_round, circle_s2_round = s1_round - prev_s1_round, s2_round - prev_s2_round\n                 res = (n1 - prev_s1_round) // circle_s1_round * circle_s2_round\n                 left_s1_round = (n1 - prev_s1_round) % circle_s1_round + prev_s1_round\n                 for key, val in start.items():\n                     if val[0] == left_s1_round:\n                         res += val[1]\n                         break\n                 return res // n2\n             else:\n                 start[s2_idx] = (s1_round, s2_round)\n         return s2_round // n2"]