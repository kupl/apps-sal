["class Solution(object):\n     def findKthNumber(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: int\n         \"\"\"\n         s,nn=0,str(n)\n         while nn:\n             if not k: return s\n             c,m=0,10**(len(nn)-1)\n             mm,p,t=(m-1)//9,int(nn)//m,0\n             for i in range(1 if not s else 0,p):\n                 cc=c+m+mm\n                 if cc>=k:\n                     s=10*s+i\n                     k-=c+1\n                     nn='9'*(len(nn)-1)\n                     t=1\n                     break\n                 c=cc\n             if not t:\n                 cc=c+int(nn)-(m*p)+1+mm\n                 if cc>=k:\n                     s=10*s+p\n                     k-=c+1\n                     nn=nn[1:]\n                 else:\n                     c=cc\n                     for i in range(p+1,10):\n                         cc=c+mm\n                         if cc>=k:\n                             s=10*s+i\n                             k-=c+1\n                             nn='9'*(len(nn)-2)\n                             break\n                         c=cc\n         return s", "class Solution:\n     def findKthNumber(self, n, k):\n         self.d = {}\n         res = 1\n         k -= 1\n         while k> 0:\n             #calculate how many numbers between current value and current value + 1\n             count = self.countNumber(res,res + 1,n)\n             if k >= count:\n                 #result >= res +1\n                 k -= count\n                 res += 1\n             else:\n                 #res*10 <= result < res + 1\n                 k -= 1\n                 res *= 10\n         return res\n     \n     def countNumber(self,l,r,maxValue):\n         if l > maxValue:\n             return 0\n         if (l,r) in self.d:\n             return d[(l,r)]\n         res = min(maxValue + 1,r) - l \n         l *= 10\n         r *= 10\n         res += self.countNumber(l,r,maxValue)\n         self.d[(l,r)] = res\n         return res", "class Solution:\n     def findKthNumber(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: int\n         \"\"\"\n         cur = 1\n         k-=1\n         while k>0:\n             steps = self.calSteps(n, cur, cur+1)\n             if steps<=k:\n                 cur+=1\n                 k-=steps\n             else:\n                 cur*=10\n                 k-=1\n         \n         return cur\n \n     def calSteps(self, n, n1, n2):\n         steps = 0\n         while n1<=n:\n             steps += min(n+1, n2)-n1\n             n1*=10\n             n2*=10\n \n         return steps\n \n \n \n", "class Solution:\n     def findKthNumber(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: int\n         \"\"\"\n         curr=1\n         k=k-1\n         \n         def calSteps(n,n1,n2):\n             steps=0\n             while n1<=n:\n                 \n                 \n                 steps+=min(n+1,n2)-n1\n                 \n                 \n                 n1*=10\n                 n2*=10\n             return steps\n         \n         while k>0:\n             steps=calSteps(n,curr,curr+1)\n             \n             if steps<=k:\n                 k-=steps\n                 curr=curr+1\n             else:\n                 curr*=10\n                 k=k-1\n         return curr"]