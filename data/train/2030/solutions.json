["from collections import defaultdict\nfrom collections import deque\nfrom functools import reduce\nn, x, y = [int(x) for x in input().split()]\nE = defaultdict(set)\nfor i in range(n-1):\n    u, v = [int(x) for x in input().split()]\n    E[u].add(v)\n    E[v].add(u)\n\nif x > y:\n    for v in E:\n        if len(E[v]) == n-1:\n            print((n-2)*y + x)\n            break\n        elif len(E[v]) > 1:\n            print((n-1)*y)\n            break\nelse:\n    visited = {v : False for v in E}\n    stack = [1]\n    topsorted = deque()\n    while stack:\n        v = stack.pop()\n        if visited[v]: continue\n        visited[v] = True\n        topsorted.appendleft(v)\n        stack.extend(E[v])\n    chopped = set()\n    ans = 0\n    for v in topsorted:\n        ans += max(0, len(E[v])-2)\n        if len(E[v]) > 2:\n            S = E[v].intersection(chopped)\n            S1 = {S.pop(), S.pop()}\n            for u in E[v]:\n                if not u in S1:\n                    E[u].remove(v)\n            E[v].clear()\n            E[v].update(S1)\n        chopped.add(v)\n    print(ans*y + (n-1-ans)*x)\n        \n"]