["# # # # n = int(input())\r\n# # # # arr = list(map(int , input().split()))\r\n# # # # for _ in range(int(input())):\r\n# # # # \tl,r,mod = map(int , input().split())\r\n# # # # \tpro = 1\r\n# # # # \tfor i in range(l - 1,r):\r\n# # # # \t\tpro *= arr[i]\r\n# # # # \tprint(pro % mod) #sample testcases passed #TLE\r\n# # # import numpy #or use math\r\n# # # n = int(input())\r\n# # # arr = list(map(int , input().split()))\r\n# # # for _ in range(int(input())):\r\n# # # \tl,r,mod = map(int , input().split())\r\n# # # \tprint(numpy.prod(arr[l - 1:r]) % mod) #sample cases passed, WA\r\n# # import math\r\n# # primes,dic,t = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97],{},0\r\n# # for i in primes:\r\n# #     dic[i] = t\r\n# #     t += 1\r\n# # def primeFactors(n,arr): \r\n# #     for i in range(2,int(math.sqrt(n)) + 1,2): \r\n# #         while(n % i == 0): \r\n# #             arr[dic[i]] += 1 \r\n# #             n /= i\r\n# #     if(n > 2):\r\n# #         arr[dic[n]] += 1\r\n# #     return arr\r\n# # n = int(input())\r\n# # A = list(map(int , input().split()))\r\n# # dp = [0]*len(primes)\r\n# # for i in range(1,n + 1):\r\n# #     r = [dp[i - 1]].copy()\r\n# #     dp.append(primeFactors(A[i - 1],r))\r\n# # for _ in range(int(input())):\r\n# #     li,ri,m=list(map(int,input().split()))\r\n# #     ans = 1\r\n# #     for i in range(len(primes)):\r\n# #         ans *= (pow(primes[i],dp[ri][i] - dp[li - 1][i],m)) % m\r\n# #     print(ans % m) #NZEC\r\n# import math\r\n# primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\r\n# dic={}\r\n# t=0\r\n# for i in primes:\r\n#     dic[i]=t\r\n#     t+=1\r\n# def primeFactors(n,arr): \r\n#     while(n % 2 == 0):\r\n#         arr[dic[2]] += 1 \r\n#         n /= 2\r\n#     for i in range(3,int(math.sqrt(n))+1,2): \r\n#         while(n % i == 0): \r\n#             arr[dic[i]] += 1 \r\n#             n /= i\r\n#     if(n > 2): \r\n#         arr[dic[n]] += 1\r\n#     return arr\r\n# N = int(input())\r\n# A = list(map(int , input().split()))\r\n# dp = [[0]*len(primes)]\r\n# for i in range(1,N + 1):\r\n#     r = dp[i - 1].copy()\r\n#     dp.append(primeFactors(A[i - 1],r))\r\n# for _ in range(int(input())):\r\n#     l,r,m = list(map(int , input().split()))\r\n#     ans = 1\r\n#     for i in range(len(primes)):\r\n#         ans *= (pow(primes[i],dp[r][i] - dp[l - 1][i],m)) % m\r\n#     print(ans % m)\r\nimport sys \r\nimport math\r\ninput = sys.stdin.readline\r\nprimes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\r\ndic={}\r\nt=0\r\nfor i in primes:\r\n    dic[i]=t\r\n    t+=1\r\ndef primeFactors(n,arr): \r\n    while n % 2 == 0: \r\n        arr[dic[2]]+=1 \r\n        n = n / 2\r\n\r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i== 0: \r\n            arr[dic[i]]+=1 \r\n            n = n / i \r\n\r\n    if n > 2: \r\n        arr[dic[n]]+=1\r\n    return arr\r\ndef main():\r\n    N=int(input())\r\n    A=list(map(int,input().split()))\r\n    tp=[0]*len(primes)\r\n    dp=[]\r\n    dp.append(tp)\r\n    for i in range(1,N+1):\r\n        # print(i)\r\n        r=dp[i-1].copy()\r\n        t=primeFactors(A[i-1],r)\r\n        dp.append(t)\r\n    t=int(input())\r\n    for _ in range(t):\r\n        l,r,m=list(map(int,input().split()))\r\n        if(m==1):\r\n            print(0)\r\n        else:\r\n            ans=1\r\n            for i in range(len(primes)):\r\n                ans=ans*(pow(primes[i],dp[r][i]-dp[l-1][i],m))%m\r\n            print(ans%m)\r\n    \r\ndef __starting_point():\r\n    main()\n__starting_point()", "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\ndef getPrimeFactors(num):\n    arr = [0]*25\n    for index,i  in enumerate(primes):\n        if i > num:\n            break\n        while num%i == 0:\n            arr[index]+=1\n            num //= i\n    return arr\n\ndef findPower(arr, mod):\n    ans = 1\n    for index,i in enumerate(arr):\n        if i != 0:\n            ans*=pow(primes[index], i, mod)\n            if ans > mod:\n                ans%=mod\n    return ans%mod\n\nn = int(input())\narr = list(map(int, input().strip().split()))\n\ncumarr = []\ntemp = [0]*25\ncumarr.append(temp.copy())\n\nfor i in arr:\n    for index,p  in enumerate(primes):\n        if p > i:\n            break\n        while i%p == 0:\n            temp[index]+=1\n            i //= p\n    cumarr.append(temp.copy())\n\n\nfor x in range(int(input())):\n    l, r, m = map(int, input().strip().split())\n    ans = findPower([x-y for x,y in zip(cumarr[r], cumarr[l-1])], m)\n    print(ans)", "from sys import stdin\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\ndef getPrime(n):\n    \n    arr = [0]*25\n    for i,p in enumerate( primes ):\n        if p > n:\n            break\n        \n        while n % p == 0:\n            arr[i] += 1\n            n //= p\n            \n    \n    return arr\n\n\ndef matAdd(matA , matB):\n    \n    arr = []\n    for i in range(25):\n        arr.append( matB[i] + matA[i] )\n        \n    return arr\n\n\ndef matSub( matA , matB ):\n    \n    arr = []\n    \n    for i in range(25):\n        arr.append( matA[i] - matB[i] )\n        \n    return arr\n\n\ndef getPow( arr , M ):\n    \n    ans = 1\n    \n    for i , a in enumerate( arr ):\n        \n        if a != 0:\n\n            ans *= pow( primes[i] , a , M )\n        \n            if ans > M:\n                ans %= M\n            \n    return ans%M\n\n\n\nn = int(input())\narr = list(map(int,input().strip().split()))\n\ntemp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\npref = [ [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ]\n\n\nfor a in arr:\n    \n    for i,p in enumerate( primes ):\n        if p > a:\n            break\n        \n        while a % p == 0:\n            temp[i] += 1\n            a //= p\n    \n    pref.append( temp.copy() )\n\n    \nfor po in range( int(input()) ):\n    \n    a , b , M = map( int , input().strip().split() )\n    \n    ans = getPow( [ x-y for (x,y) in zip( pref[b] , pref[a-1] ) ] , M )\n        \n    print(ans%M)"]