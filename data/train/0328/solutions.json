["class Solution:\n     def find132pattern(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \n         if len(nums) < 3:\n             return False\n \n         stack = [[nums[0], nums[0]]]\n         minimum = nums[0]\n         for num in nums[1:]:\n             if num <= minimum:\n                 minimum = num\n             else:\n                 while stack and num > stack[-1][0]:\n                     if num < stack[-1][1]:\n                         return True\n                     else:\n                         stack.pop()\n                 stack.append([minimum, num])\n \n         return False\n         \"\"\"\n         \n         if len(nums) < 3:\n             return False\n         stack = [[nums[0], nums[0]]]\n         m = nums[0]\n         for num in nums[1:]:\n             if num <= m:\n                 m = num\n             else:\n                 while stack and num > stack[-1][0]:\n                     if num < stack[-1][1]:\n                         return True\n                     else:\n                         stack.pop()\n                 stack.append([m, num])\n         return False\n     \n", "class Solution:\n     def find132pattern(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         min_nums = [0] * len(nums)\n         for i, num in enumerate(nums):\n             min_nums[i] = min(min_nums[i-1], num) if i else num\n \n         stack = []\n         for i, num in reversed(list(enumerate(nums))):\n             while stack and stack[-1] <= min_nums[i]:\n                 stack.pop()\n             if stack and num > stack[-1]:\n                 return True\n             else:\n                 stack.append(num)\n \n         return False", "class Solution:\n     def find132pattern(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         if len(nums) < 3:\n             return False\n         # initialize. \n         s2_candidate = [nums[-1]]\n         cur_idx = len(nums)-2\n         while cur_idx >= 0 and nums[cur_idx] <= s2_candidate[-1]:\n             s2_candidate.append(nums[cur_idx])\n             cur_idx-=1\n         if cur_idx < 0:\n             return False\n         s3 = nums[cur_idx]\n         while s2_candidate and s2_candidate[-1] < s3:\n             s2 = s2_candidate.pop()\n         \n         # find s1\n         cur_idx-=1\n         while cur_idx >= 0:\n             if nums[cur_idx] < s2:\n                 return True\n             elif nums[cur_idx] >= s3:\n                 if nums[cur_idx] > s3:\n                     s2 = s3\n                 s3 = nums[cur_idx]\n                 while s2_candidate and s2_candidate[-1] <= s3:\n                     next_s2 = s2_candidate.pop()\n                     if next_s2 > s2 and next_s2 < s3:\n                         s2 = next_s2\n             elif nums[cur_idx] < s3 and nums[cur_idx] > s2:\n                 s2_candidate.append(nums[cur_idx])\n             cur_idx-=1\n \n         return False\n                 \n         \n", "class Solution:\n     def find132pattern(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         if len(nums) < 3: return False\n         \n         low = [float('inf')]\n         high = [float('inf')]\n         currlow, currhigh = nums[0], nums[0]\n         for i in range(1, len(nums)):\n             # print(nums[i])\n             while nums[i] > high[-1]:\n                 low.pop()\n                 high.pop()\n             if low[-1] < nums[i] < high[-1]:\n                 return True\n             if nums[i] == currlow or nums[i] == currhigh:\n                 continue\n             elif nums[i] < currlow:\n                 low.append(currlow)\n                 high.append(currhigh)\n                 currlow, currhigh = nums[i], nums[i]\n             elif nums[i] > currhigh:\n                 currhigh = nums[i]\n             else:\n                 return True\n             # print(currlow, currhigh)\n             # print(low)\n             # print(high)\n         \n         return False\n", "class Solution:\n     def find132pattern(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         s3 = - 2 ** 64 - 1\n         maxset = []\n         for i in reversed(nums):\n             if i < s3:\n                 return True\n             else:\n                 while len(maxset) > 0 and i > maxset[-1]:\n                     s3 = maxset.pop(-1)\n             maxset.append(i)\n         return False", "class Solution:\n     def find132pattern(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         a= 1, b=3, c= 2\n         \"\"\"\n         stack = []\n         max_c = -math.inf\n         for i in range(len(nums) - 1, -1, -1):\n             if nums[i] < max_c:\n                 return True\n             while stack and stack[-1] < nums[i]:\n                 max_c = max(max_c, stack.pop())\n             stack.append(nums[i])\n             \n         return False", "class Solution:\n     def find132pattern(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         stack = []\n         for num in nums:\n             if not stack or num < stack[-1][0]:\n                 stack.append([num, num])\n             elif num > stack[-1][0]:\n                 if num < stack[-1][1]: return True\n                 else:\n                     node = stack.pop()\n                     while stack and num >= stack[-1][1]:\n                         stack.pop()\n                     if stack and num > stack[-1][0]:\n                         return True\n                     stack.append([node[0], num])\n         return False\n             \n                         \n                         \n             \n                 \n             \n             \n         \n", "class Solution:\n     def find132pattern(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         if len(nums) < 3:\n             return False\n         minx = nums[0]\n         seg = [(nums[0], nums[0])]\n         for x in nums[1:]:\n             while seg and seg[-1][1] <= x:\n                 seg.pop()\n             if seg and x > seg[-1][0]:\n                 return True\n             minx = min(minx, x)\n             seg.append((minx, x))\n         return False", "class Solution:\n     def find132pattern(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         if not nums:\n             return False\n         mins = [-1 for i in range(len(nums))]\n         mins[0] = nums[0]\n         \n         for i in range(1, len(nums)):\n             mins[i] = min(mins[i - 1], nums[i])\n         s = []\n         for i in range(len(nums) - 1, -1, -1):\n             # print(i, s)\n             if nums[i] != mins[i]:\n                 while s and s[-1] <= mins[i]:\n                     s.pop()\n                 if s and s[-1] < nums[i]:\n                     return True\n                 s.append(nums[i])\n         return False", "class Solution:\n     def find132pattern(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         if len(nums) < 3:\n             return False\n         \n         minV = []\n         for i in range(len(nums)):\n             if i == 0:\n                 minV.append(nums[i])\n             else:\n                 minV.append(min(nums[i], minV[-1]))\n         \n         st = []\n         for j in range(len(nums)-1, 0, -1):\n             if not st or nums[j] <= st[-1]:\n                 st.append(nums[j])\n             else:\n                 while st and nums[j] > st[-1]:\n                     s3 =  st.pop()\n                 if s3 > minV[j]:\n                     return True\n                 st.append(nums[j])\n                 \n         return False\n         \n                 \n             \n                 \n                  \n \n", "class Solution:\n     def find132pattern(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         if not nums:\n             return False\n         mins = [-1 for i in range(len(nums))]\n         mins[0] = nums[0]\n         \n         for i in range(1, len(nums)):\n             mins[i] = min(mins[i - 1], nums[i])\n         print(mins)\n         s = []\n         for i in range(len(nums) - 1, -1, -1):\n             # print(i, s)\n             if nums[i] != mins[i]:\n                 while s and s[-1] <= mins[i]:\n                     s.pop()\n                 if s and s[-1] < nums[i]:\n                     return True\n                 s.append(nums[i])\n         return False"]