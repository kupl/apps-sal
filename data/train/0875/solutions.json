["import sys\nfrom collections import defaultdict as dd\nfrom collections import deque\nfrom fractions import Fraction as f\nfrom copy import *\nfrom bisect import * \nfrom heapq import *\nfrom math import *\nfrom itertools import permutations \n \ndef eprint(*args):\n print(*args, file=sys.stderr)\nzz=1\n \n#sys.setrecursionlimit(10**6)\nif zz:\n input=sys.stdin.readline\nelse:   \n sys.stdin=open('input.txt', 'r')\n sys.stdout=open('all.txt','w')\ndef li():\n return [int(xx) for xx in input().split()]\ndef fli():\n return [float(x) for x in input().split()] \ndef comp(a,b):\n if(a>b):\n  return 2\n return 2 if a==b else 0 \ndef gi():   \n return [xx for x in input().split()]\ndef fi():\n return int(input())\ndef swap(a,i,j):\n a[i],a[j]=a[j],a[i] \ndef si():\n return list(input().rstrip()) \ndef mi():\n return map(int,input().split()) \ndef gh():\n sys.stdout.flush()\ndef graph(n,m):\n for i in range(m):\n  x,y=mi()\n  a[x].append(y)\n  a[y].append(x)\ndef bo(i):\n return ord(i)-ord('a')\n  \n \nt=fi()\nwhile t>0:\n t-=1\n n,z1,z2=mi()\n d={}\n a=li()\n flag=0\n for i in a:\n  d[i]=1\n  d[-i]=1\n  if i==z1 or i==z2 or i==-z1 or i==-z2:\n   flag=1\n   break\n if flag:\n  print(1)\n  continue \n for i in d:\n  p=[i-z1,i-z2]\n  c=1\n  for j in p:\n   if j in d:\n    c*=0\n  flag|=c \n print(0 if flag else 2) ", "# cook your dish here\nfor _ in range(int(input())):\n n, z1, z2 = [int(i) for i in input().split()]\n A = [int(i) for i in input().split()]\n t1 = [i for i in A] + [-i for i in A]\n if z1 in t1 or z2 in t1 :\n  print(1)\n else :\n  t2 = 2\n  for val in t1 :\n   t3 = [val + t for t in t1]\n   if z1 not in t3 and z2 not in t3 :\n    t2 = 0\n    break\n  print(t2)", "t = int(input())\n\nfor _ in range(t):\n n, z1, z2 = list(map(int, input().split()))\n \n arr = list(map(int, input().split()))\n\n for i in range(n):\n  arr[i] = abs(arr[i])\n\n if (abs(z1) in arr) or (abs(z2) in arr):\n  print(1)\n  continue\n\n if (z1 == 0) or (z2 == 0):\n  print(2)\n  continue\n\n poss = True\n for i in arr:\n  #print(z1 + i, z2 + i, z1 - i, z2 - i)\n  if ((abs(z1 + i) in arr) or (abs(z2 + i) in arr)) and \\\n   ((abs(z1 - i) in arr) or (abs(z2 - i) in arr)):\n   pass\n  else:\n   poss = False\n   break\n\n if poss:\n  print(2)\n  continue\n\n print(0)\n", "for _ in range(int(input())):\n n,z1,z2=map(int,input().split())\n num1=[int(i) for i in input().split()]\n num2=[int(i)*-1 for i in num1]\n nums=num1+num2 \n f=0 \n if z1 in nums or z2 in nums:\n  f=1 \n  print(1) #can directly pick and win\n  continue \n cnt=0 \n for val in nums:\n  if val-z1 in nums or val-z2 in nums:\n   cnt+=1 \n if f==0 and cnt==n+n:\n  print(2) #still_mate ...where ever u go..u will be killed\n  f=2 \n if not f:\n  print(0)", "import sys \n\nT = int(sys.stdin.readline())\nfor tc in range(T):\n N,Z1,Z2 = [int(c) for c in sys.stdin.readline().strip().split()]\n A = [int(c) for c in sys.stdin.readline().strip().split()]\n A.extend([-a for a in A])\n def sol(A, Z1, Z2):        \n  if Z1 in A or Z2 in A:\n   return 1\n  else:\n   if all((Z1-s in A or Z2-s in A) for s in A):\n    return 2\n  return 0\n print(sol(A, Z1, Z2))\n  \n", "for T in range(0, int(input())):\n\n n, z1, z2 = map(int, input().split())\n\n x = list(map(int, input().split()))\n y = x\n\n for i in range(0, n):\n  y.append(-x[i])\n\n res = 0\n\n for i in range(0, n):\n  if (abs(x[i]) == abs(z1) or abs(x[i]) == abs(z2)):\n   res = 1\n   break\n\n if res == 0:\n  for i in range(0, 2*n):\n   flag = 0\n   for j in range(0, 2*n):\n    if y[i] + y[j] == z1 or y[i] + y[j] == z2:\n     flag = 1\n     break\n\n   if flag == 0:\n    break\n  if flag == 1:\n   res = 2\n\n\n print(res)", "for i in range(int(input())):\n n,z1,z2 = map(int,input().split())\n arr = list(map(int,input().split()))\n m = dict()\n for item in arr:\n  m[item]=1\n  m[-item]=-1\n if z1 in m or z2 in m: \n  print(\"1\")\n else:\n  cnt = 0\n  for item in arr:\n   if z1-item in m or z2-item in m:\n    cnt+=1\n   if z1+item in m or z2+item in m:\n    cnt+=1\n  if cnt==2*n:\n   print(\"2\")\n  else: print(\"0\")", "from collections import defaultdict\nfor t in range(int(input())):\n n,z1,z2=list(map(int,input().split()))\n seq=list(map(int,input().split()))\n c=0\n dic=defaultdict(int)\n for i in seq :\n  dic[i]=1\n  dic[-i]=1\n if dic[z1] or dic[z2]:\n  print(1)\n  continue\n for i in seq :\n  if dic[z1-i] or dic[z2-i]:\n   c+=1\n  if dic[z1+i] or dic[z2+i]:\n   c+=1\n if c==2*len(seq):\n  print(2)\n else :\n  print(0)\n", "T = int(input())\n\nfor a in range(T):\n n, z1, z2 = map(int,input().split())\n num = [int(a) for a in input().split()][:n]\n num2 = [-1*i for i in num]\n nums = num+num2\n\n flag = 0\n for val in nums:\n  if val == z1 or val == z2:\n   flag = 1\n   print(1)\n   break\n cnt = 0\n for val1 in nums:\n  if val1 - z1 in nums or val1 - z2 in nums:\n   cnt += 1\n if cnt == len(nums) and not flag == 1:\n  flag = 2\n  print(2)\n if flag == 0:\n  print(0)", "def check(arr, z) :\n for i in arr :\n  if i in z : return 1\n for i in arr :\n  flag = True\n  for j in arr :\n   if i+j in z or i-j in z :\n    flag = False\n    break\n  if flag : return 0\n return 2\n\nfor test_case in range(int(input())) :\n n, z1, z2 = [int(i) for i in input().split()]\n arr = [int(i) for i in input().split()]\n arr += [-i for i in arr]\n print(check(arr, (z1, z2)))", "t = int(input())\nwhile t > 0:\n inp = input()\n arr = input()\n inp = inp.split() \n n = int(inp[0])\n z1 = int(inp[1])\n z2 = int(inp[2])\n arr = arr.split()\n arr = [int(value) for value in arr]\n for i in range(n):\n  arr.append(-1 * arr[i])\n flag = 0\n for val in arr:\n  if val == z1 or val == z2:\n   flag = 1\n   print(1)\n   break\n cnt = 0\n for val1 in arr:\n  if val1 - z1 in arr or val1 - z2 in arr:\n   cnt += 1\n if cnt == len(arr) and not flag == 1:\n  flag = 2\n  print(2)\n if flag == 0:\n  print(0)\n t -= 1", "from itertools import chain\n\nR = lambda: list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n n, *z = R()\n u = set(chain.from_iterable((x, -x) for x in R()))\n v = set(x + y for x in z for y in u)\n if 0 in v:\n  print(1)\n elif u <= v:\n  print(2)\n else:\n  print(0)\n", "for i in range(int(input())):\n n, a, b = [int(c) for c in input().split()]\n impossible = 0\n arr = [abs(int(x)) for x in input().split()]\n\n if a in arr or -a in arr or b in arr or -b in arr:\n  print(1)\n  continue\n\n if a == 0 or b == 0:\n  print(2)\n  continue\n if a == -b:\n  for move1 in arr:\n   a_left = abs(a - move1)\n   b_left = abs(b - move1)\n   if a_left in arr or b_left in arr:\n    continue\n   else:\n    impossible = 1 \n    break\n  else:\n   print(2)\n   continue\n\n print(0)", "for i in range(int(input())):\n n, a, b = [int(c) for c in input().split()]\n impossible = 0\n arr = [abs(int(x)) for x in input().split()]\n\n if a in arr or -a in arr or b in arr or -b in arr:\n  print(1)\n  continue\n\n if a == 0 or b == 0:\n  print(2)\n  continue\n if a == -b:\n  for move1 in arr:\n   a_left = abs(a - move1)\n   b_left = abs(b - move1)\n   if a_left in arr or b_left in arr:\n    continue\n   else:\n    impossible = 1 \n    break\n  else:\n   print(2)\n   continue\n\n print(0)\n", "from itertools import chain\n\nR = lambda: list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n n, *z = R()\n a = list(R())\n u = set(chain.from_iterable((x, -x) for x in a))\n v = set(x + y for x in z for y in u)\n if 0 in v:\n  print(1)\n elif u <= v:\n  print(2)\n else:\n  print(0)\n", "from itertools import chain\n\nR = lambda: list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n n, *z = R()\n a = list(R())\n aa = lambda: chain.from_iterable((x, -x) for x in a)\n v = set(x + y for x in z for y in aa())\n if 0 in v:\n  print(1)\n elif set(aa()) <= v:\n  print(2)\n else:\n  print(0)\n", "from itertools import chain\n\nR = lambda: list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n n, *z = R()\n a = list(R())\n aa = lambda: chain.from_iterable((x, -x) for x in a)\n u = set(chain.from_iterable((x, -x) for x in a))\n v = set(x + y for x in z for y in aa())\n if 0 in v:\n  print(1)\n elif set(aa()) <= v:\n  print(2)\n else:\n  print(0)\n", "from itertools import chain\n\nR = lambda: list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n n, *z = R()\n a = list(R())\n u = set(chain.from_iterable((x, -x) for x in a))\n v = set(x + y for x in z for y in u)\n if 0 in v:\n  print(1)\n elif u <= v:\n  print(2)\n else:\n  print(0)\n", "t=int(input())\nfor _ in range(t):\n n,z1,z2=map(int,input().split())\n l = list(map(int,input().split()))\n if z1 in l or z2 in l or -1*z1 in l or -1*z2 in l:\n  print(1)\n  continue\n if z1==0 and z2==0:\n  print(2)\n  continue\n l=list(map(abs,l))\n for i in l:\n  if abs(z1-i) not in l and abs(z2-i) not in l:\n   print(0)\n   break\n  if abs(z1+i) not in l and abs(z2+i) not in l:\n   print(0)\n   break\n else:\n  print(2)", "from itertools import chain\nfrom functools import reduce\nfrom operator import and_\n\nR = lambda: list(map(int, input().split()))\nt = int(input())\nfor _ in range(t):\n n, *z = R()\n a = list(R())\n aa = lambda: chain.from_iterable((x, -x) for x in a)\n r = 0\n v = [x + y for x in z for y in aa()]\n if 0 in v:\n  print(1)\n elif 0 in reduce(and_, (set(x + y for x in v) for y in aa())):\n  print(2)\n else:\n  print(0)\n"]