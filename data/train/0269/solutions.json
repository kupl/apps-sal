["class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        \n        if nums.count(0) == len(nums):\n            return True\n        \n        idx = nums.index(1)\n        ctr = 0\n        for num in nums[idx+1:]:\n            if num == 1:\n                if ctr < k:\n                    return False\n                ctr = 0\n            else:\n                ctr+=1\n                \n        return True\n                \n                \n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        if k == 0:\n            return True\n        N = len(nums)\n        past, curr = -1, 0\n        \n        for curr in range(N):\n            if nums[curr] == 1:\n                if past < 0:\n                    past = curr\n                elif curr-past > k:\n                    past = curr\n                else:\n                    return False\n            \n        \n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        s=-1\n        n=len(nums)\n        for i in range(n):\n            if(nums[i]==1 and s==-1):\n                s=i\n            elif(nums[i]==1):\n                interval=i-s-1\n                if(interval<k):\n                    return False\n                s=i\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        count = 0\n        first = False\n        for i in nums:\n            if i == 1 and not first:\n                first = True\n            elif i == 1 and first:\n                if k <= count:\n                    count = 0\n                else:\n                    return False\n            else:\n                count += 1\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        counter = 0\n        bool = False\n        for i in nums:\n            if i == 1 and not bool:\n                bool = True\n            elif i == 1 and counter < k and bool:\n                return False\n            elif i == 1 and counter >= k and bool:\n                counter = 0\n            else:\n                counter += 1\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        lis=[]\n        for i in range(len(nums)):\n            if nums[i]==1:\n                lis.append(i)\n        for i in range(1,len(lis)):\n            if (lis[i]-lis[i-1])-1<k:\n                return False\n        return True\n            \n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        zCounter = k\n        \n        for n in nums:\n            if n==1:\n                if zCounter<k:\n                    return False\n                zCounter = 0\n            else:\n                zCounter += 1\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        p = 0 \n        count = k + 1 \n        while p < len(nums):\n            if nums[p] == 1:\n                if count <= k:\n                    return False\n                else:\n                    count = 0 \n            count += 1\n            p += 1\n            \n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                if i >= 1:\n                    if count < k:\n                        return False\n                count = 0\n            else:\n                count += 1\n                \n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        s=-1\n        e=-1\n        n=len(nums)\n        for i in range(n):\n            if(nums[i]==1 and s==-1):\n                s=i\n            elif(nums[i]==1):\n                e=i\n                interval=e-s-1\n                if(interval<k):\n                    return False\n                s=i\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        pos = []\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                pos.append(i)\n        true = 0\n        false = 0\n        for j in range(len(pos)-1):\n            if pos[j+1] - pos[j] <= k:\n                return False\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        if 1 not in nums:\n            return True\n        num_place=nums.index(1)\n        f_idx=nums.index(1)+1\n        \n        for i in range(f_idx,len(nums)):\n            if nums[i] == 1 and i-num_place < k+1:\n                \n                return False\n            \n            elif nums[i] == 1 and i-num_place > k:\n                num_place=i\n        \n        return True\n                \n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        next_one = 0\n        previous_one = 0\n        while(next_one < len(nums) and nums[next_one] != 1):\n            next_one += 1\n        if (next_one == len(nums)):\n            return True\n        previous_one = next_one\n        next_one += 1\n        \n        while (next_one < len(nums)):\n            while (next_one < len(nums) and nums[next_one] != 1):\n                next_one += 1\n            if (next_one < len(nums) and next_one - previous_one - 1 < k):\n                return False\n            elif (next_one < len(nums) and next_one - previous_one - 1 >= k):\n                previous_one = next_one\n            else:\n                return True\n            next_one += 1\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        zeros=0\n        i=0\n        while i<len(nums):\n            if i==0 and nums[i]==1:\n                i+=1\n                continue\n            if nums[i]==1 and zeros<k:\n                return False \n                break\n            elif nums[i]==0:\n                zeros+=1\n                i+=1\n            elif nums[i]==1 and zeros>=k:\n                zeros=0\n                i+=1\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        prev=0\n        while prev<len(nums) and nums[prev]==0:\n            prev+=1\n        if prev==len(nums) or nums[prev]==0:\n            return True\n        if k==0:\n            return True\n\n        for i in range(prev+1,len(nums)):\n            if nums[i]==1:\n                if i-prev<=k:\n                    return False\n                prev=i\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        if not k:\n            return True\n\n        pre_index = -1\n        for i, val in enumerate(nums):\n            if val:\n                if pre_index != -1 and i - pre_index - 1 < k:\n                    return False\n                pre_index = i\n        return True", "class Solution:\n    # 8:23\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        i =  0\n        while(i < len(nums) and nums[i] == 0):\n            i += 1\n        \n        first = i\n        for j in range(i+1, len(nums)):\n            if nums[j] == 0:\n                continue\n            else:\n                second = j\n                print((first, second))\n                dis = second - first - 1\n                if dis < k:\n                    return False\n                first  = second\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        position = -1\n        for index, item in enumerate(nums):\n            if item & 1:\n                if index - position - 1 < k and position != -1:\n                    return False\n                position = index\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        flag = 0\n        start = None \n        end = 0\n        for i in range(len(nums)):\n            if nums[i]==1 and flag ==0:\n                start = i\n                flag =1\n            elif nums[i] ==1 and flag==1:\n                end =i\n                dis = end - start \n                start = i\n                if dis <= k: return False\n            \n        return True ", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n\n        ind = 0\n        for i, num in enumerate(nums):\n            if not nums[ind] and num:\n                ind = i\n            if i != ind and num:\n                if (i - ind) < (k + 1):\n                    return False\n                ind = i\n        return True\n            \n        \n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        locs = {}\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                locs[i] = True\n        \n        key= list(locs.keys())\n        for i in range(len(key)-1):\n            if key[i+1] - key[i] - 1 < k:\n                return False\n        \n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        try:\n            last = nums.index(1)\n        except:\n            return True\n        \n        for i in range(last + 1, len(nums)):\n            if nums[i] == 1 and i - last <= k:\n                return False\n            elif nums[i] == 1:\n                last = i\n        \n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        s = -1\n        for i in range(len(nums)):\n            if nums[i] == 1 and s == -1:\n                s = i\n            elif nums[i] == 1 and i-s <= k:\n                return False\n            elif nums[i] == 1 and i-s > k:\n                s = i\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        \n        n=len(nums)\n        prev=-1\n        \n        ans=[]\n        for i in range(n):\n            if prev==-1:\n                if nums[i]==1:\n                    prev=i\n            else:\n                if nums[i]==1:\n                    ans.append(i-prev-1)\n                    prev=i\n            \n        for i in ans:\n            if i<k:\n                return False\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        xs = [i for i, n in enumerate(nums) if n]\n        return all(y-x > k for x,y in zip(xs, xs[1:]))\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        arr=[]\n        for i in range(len(nums)):\n            if(nums[i]==1):\n                arr.append(i)\n        # print(arr)\n        for i in range(1,len(arr)):\n            if(arr[i]-arr[i-1]-1<k):\n                return False\n            \n        return True\n", "import numpy as np\n\nclass Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        locs = np.where(np.array(nums) == 1)[0]\n        return np.all(np.abs(np.diff(locs)) > k)\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        temp = 0\n        increment = False\n        one_checked = False\n        for i in nums:\n            if one_checked and i != 1:    \n                temp += 1\n            print(temp, i)\n            if i == 1:\n                if one_checked and temp < k:\n                    return False\n                temp = 0\n                one_checked = True\n\n            \n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        import numpy as np\n        ones = np.nonzero(nums)[0]\n        if ones.size <= 1:\n            return True\n        diffs = np.diff(ones) - 1\n        return k <= np.min(diffs)", "# import numpy as np\n\nclass Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        # locs = np.where(np.array(nums) == 1)[0]\n        # return np.all(np.diff(locs) > k)\n        # locs = [i for i in range(len(nums)) if  nums[i] == 1]\n        # return all([locs[i+1] - locs[i] > k for i in range(len(locs)-1)])\n        # for i in range(len(locs)-1):\n        #     if locs[i+1] - locs[i] <= k:\n        #         return False\n        # return True\n    \n        last_loc, curr_loc = -1, -1\n        for i, n in enumerate(nums):\n            if n == 1:\n                if last_loc == -1:\n                    last_loc = i\n                elif curr_loc == -1:\n                    curr_loc = i\n                curr_loc = i\n                print((i, last_loc, curr_loc))\n                if curr_loc - last_loc <= k and curr_loc != last_loc:\n                    return False\n                last_loc = i\n        return True\n                    \n                \n        \n\n    \n    \n    \n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        count = k\n        for num in nums:\n            if num == 1:\n                if count < k:\n                    return False\n                count = 0\n            else:\n                count += 1\n        return True", "from typing import List\nimport re\n\n\nclass Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        matches = re.finditer(r'(1)', ''.join(map(str, nums)))\n        indexes = tuple([getattr(el, 'span')()[0] for el in matches])\n\n        for i in range(1, len(indexes)):\n            diff = indexes[i] - indexes[i-1]\n            if diff <= k:\n                return False\n\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        \n        left = -1\n        \n        for i in range(len(nums)):\n            if nums[i]==1:\n                if left ==-1:\n                    left = i\n                else:\n                    if i-left-1<k:\n                        return False\n                    else:\n                        left = i\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        #find the first 1:\n        start = 0\n        \n        for ind in range(len(nums)):\n            if nums[ind] == 1:\n                start = ind\n                break\n        #return true if no 1's in the array, or there's only one 1 in the last place\n        if start >=  len(nums)-1: return True\n    \n        minDist = float('inf') #represents infinity\n        print(start)\n        \n        #check rest of the array:\n        for i in range(start+1, len(nums)):\n            if nums[i] == 1:\n                dist = i - start - 1\n                if dist < minDist:\n                    minDist = dist\n                start = i\n        return minDist >= k\n    \n    \n    #make faster: \n    # enumerate(nums)\n    #nums.index(1) --> gets index of first 1 apparently \n            \n        \n", "import numpy as np\n\nclass Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        # locs = np.where(np.array(nums) == 1)[0]\n        # return np.all(np.diff(locs) > k)\n        locs = [i for i in range(len(nums)) if  nums[i] == 1]\n        return all([locs[i+1] - locs[i] > k for i in range(len(locs)-1)])\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        dis = k\n        for n in nums:\n            if n:\n                if dis<k:\n                    return False\n                else:\n                    dis=0\n            else:\n                dis+=1\n        return True        ", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        ones = [-k - 1]\n        for i, num in enumerate(nums):\n            if num:\n                if i - ones[-1] < k + 1:\n                    return False\n                else:\n                    ones.append(i)\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        last = -k-1\n        for i in range(len(nums)):\n            if nums[i]:\n                if i-last>k:\n                    last = i\n                else:\n                    return False\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        last = float('-inf')\n        for i, x in enumerate(nums):\n            if x==1:\n                if i-1-last<k:\n                    return False\n                last = i\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        for idx in range(len(nums)):\n            if nums[idx] == 1 and 1 in nums[idx+1:idx+k+1]:\n                    return False\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        # keep a list of indices of all the 1s\n        prev = -1\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                if prev != -1 and i - prev -1 < k:\n                    return False\n                prev = i\n        return True         ", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        counter = -1\n        for num in nums:\n            if num == 1:\n                if counter == -1:\n                    counter = 0\n                elif counter >= k:\n                    counter = 0\n                else:\n                    return False\n            elif counter != -1:\n                counter += 1\n        return True\n    \n    0, 1, 0, 1", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        \n        if k == 0:\n            return True\n        \n        while sum(nums) >= 2:\n            temp = nums.index(1)\n            nums[temp] = 0\n            if nums.index(1) - temp <= k:\n                return False\n            \n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        before = -k-5;\n        for i in range(len(nums)):\n            if nums[i] == 1:\n                if i-before <= k:\n                    return False;\n                before = i;\n        return True;", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        if k == 0:\n            return True\n        \n        idx = [n for n, x in enumerate(nums) if x == 1]\n        \n        for i in range(1, len(idx)):\n            print((idx[i], idx[i-1]))\n            if idx[i] - idx[i-1] <= k:\n                return False\n        \n        return True\n            \n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        def find(nums, *argc):\n            try:\n                return nums.index(*argc)\n            except ValueError:\n                return -1\n            \n        prev = find(nums, 1)\n        while prev != -1:\n            cur = find(nums, 1, prev + 1)\n            if cur != -1 and (cur - prev - 1) < k:\n                return False\n            prev = cur\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        pos = 0\n        while pos<len(nums):\n            #print(nums[pos:])\n            try:\n                pos = nums.index(1,pos)\n                pos2 = nums.index(1,pos+1)\n            except:\n                break\n            #print(pos,pos2)\n            if pos2-pos-1<k:\n                return False\n            pos = pos2\n        print(pos)\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        #find the first 1:\n        start = 0\n        \n        for ind in range(len(nums)):\n            if nums[ind] == 1:\n                start = ind\n                break\n        #return true if no 1's in the array, or there's only one 1 in the last place\n        if start >=  len(nums)-1: return True\n    \n#improvements: can just use k, no need forfloat('inf') because k is the max possible distance\n        minDist = len(nums)         \n        #check rest of the array:\n        for i in range(start+1, len(nums)):\n            if nums[i] == 1:\n                dist = i - start - 1\n                if dist < minDist:\n                    minDist = dist\n                start = i\n        return minDist >= k\n    \n    \n    #make faster: \n    # enumerate(nums)\n    #nums.index(1) --> gets index of first 1 apparently \n            \n        \n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        i, j,  d=  float('-inf'), 0, float('inf')\n        while j <len(nums):\n            if nums[j]:\n                d = min(d, j-i-1)\n                if d<k:\n                    return False\n                i = j\n            j+=1\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        counter = -1\n        for i in nums:\n            if counter < 0:\n                if i == 1:\n                    counter = 0\n            else:\n                if i == 0:\n                    counter += 1\n                else:\n                    if counter < k:\n                        return False\n                    counter = 0\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        last1 = -1\n\n        for num in nums:\n\n            # See 0, have seen 1\n            if num == 0 and last1 != -1:\n                last1 += 1\n\n\n            elif num == 1 and last1 != -1:\n                # Check against k, can return False\n                if last1 < k:\n                    return False\n\n                last1 = 0\n\n            elif num == 1 and last1 == -1:\n                last1 = 0\n\n        return True\n\n", "class Solution:\n  def kLengthApart(self, nums: List[int], k: int) -> bool:\n    i = float('-inf')\n    for j, x in enumerate(nums):\n      if x:\n        if j - i <= k:\n          return False\n        i = j\n    return True   ", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        if k == 0:\n            return True\n        \n        start = 0\n        while start < len(nums) and nums[start] != 1:\n            start += 1\n            \n        for i in range(start + 1, len(nums)):\n            if nums[i] == 1:\n                if i - start - 1 < k:\n                    return False\n                else:\n                    start = i\n        \n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        distance = k\n        for num in nums:\n            if num:\n                if distance < k:\n                    return False\n                distance = 0\n            else:\n                distance = distance + 1\n        \n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        prev = 0\n        i = 0\n        for num in nums:\n            if num == 1:\n                if prev and k > i - prev:\n                    return False \n                prev = i + 1\n            i += 1\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        last1 = -1\n        tally = len(nums)\n        # print(last1)\n        for idx, val in enumerate(nums):\n            \n            if val == 1:\n                last1 = idx\n                if tally < k:\n                    return False\n                tally = 0\n            else:\n                tally+=1\n\n\n            \n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        if nums.count(1)==0:\n            return True\n        \n        c=[]\n        for i in range(len(nums)):\n            if nums[i]==1:\n                c.append(i)\n        \n        for i in range(1,len(c)):\n            if c[i]-c[i-1]<=k:\n                return False\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        #find the first 1:\n        start = 0\n        while start < len(nums):\n            if nums[start] == 0: \n                start += 1\n            else:\n                break\n        if start >=  len(nums)-1: return True #return true if no 1's in the array, or there's only one 1 in the last place\n    \n        minDist = float('inf') #represents infinity\n        print(start)\n        \n        #check rest of the array:\n        for i in range(start+1, len(nums)):\n            if nums[i] == 1:\n                dist = i - start - 1\n                if dist < minDist:\n                    minDist = dist\n                start = i\n        return minDist >= k\n            \n        \n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        c=nums.count(1)-1\n        if c<0:\n            return True\n        if c==0:\n            return True\n        ini=nums.index(1)\n        while c:\n            fin=nums.index(1,ini+1,len(nums))\n            print(fin)\n            if fin-ini<(k+1):\n                return False\n            c-=1\n            ini=fin\n        return True\n        \n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        last_one = None\n        for i in range(len(nums)):\n            if nums[i]:\n                if last_one != None and i - last_one - 1 < k:\n                    return False\n                last_one = i\n        return True\n", "class Solution:\n    def kLengthApart1(self, nums: List[int], k: int) -> bool:\n        d = [i for i,v in enumerate(nums) if v == 1]\n        #print(d)\n        for i in range(1,len(d)):\n            if d[i]-d[i-1] <= k:\n                return False\n        return True\n            \n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        idx = -1\n        for i in range(len(nums)):           \n            if nums[i] == 1:\n                if idx != -1 and i - idx - 1 < k:\n                    return False\n                idx = i\n        return True   ", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        # Loop through the array with 2 pointers at n and n+1\n        # Take some action depending on the 4 cases \n        if len(nums) == 1:\n            return True\n        # Preprocess all the leading zeros\n        i = 0 \n        while i < len(nums):\n            if nums[i] == 1:\n                break\n            i += 1\n        counter = 0\n        i += 1\n        while i < len(nums):\n            j = i-1\n            print(nums[j], nums[i])\n            # 10 -> increment counter\n            # 00 -> increment counter\n            # 01 -> check >= k, reset counter\n            # 11 -> skip\n            if nums[j] == 0 and nums[i] == 1:\n                if counter < k:\n                    return False\n                counter = 0\n            if (nums[j] == 1 or nums[j] == 0) and nums[i] == 0:\n                counter += 1   \n            if nums[j] == 1 and nums[i] == 1 and k >= 1:\n                return False\n            i+=1\n            j+=1\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        p = -1000000\n        n = len(nums)\n        for i in range(n):\n            if nums[i] == 1:\n                if i-p-1 >= k:\n                    p = i\n                else:\n                    return False\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        prev = -k-1\n        for i,n in enumerate(nums):\n            if n == 1:\n                if i -prev > k:\n                    prev = i\n                else:\n                    return False\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        h = defaultdict(list)\n        for i in range(len(nums)):\n            h[nums[i]].append(i)\n        if not h[1]:\n            return True\n        return all([h[1][i]-h[1][i-1] > k for i in range(1,len(h[1]))])", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        \n#         indices = []\n#         for i,v in enumerate(nums):\n#             if v == 1:\n#                 indices.append(i)\n#         diffs = []\n#         for i in range(1, len(indices)):\n#             diffs.append(indices[i] - indices[i -1] - 1)\n        \n#         return all([x >= k for x in diffs])\n        prev_one_ind = -1\n        for i,v in enumerate(nums):\n            if v == 1:\n                if prev_one_ind >= 0:\n                    diff = i - prev_one_ind - 1\n                    if diff < k:\n                        return False\n                prev_one_ind = i\n                    \n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        prev=-1\n        for i in range(len(nums)):\n            if nums[i]==1:\n                if prev!=-1 and i-prev-1<k:\n                    return False\n                prev=i\n\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        listx=[]\n        for i in range(0,len(nums)):\n            if nums[i]==1:\n                if listx:\n                    if abs(i-listx[-1])>=k+1:\n                        listx.append(i)\n                    else:\n                        return False\n                else:\n                    listx.append(i)\n                    \n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        count = k\n        for num in nums:\n            if not num:\n                count += 1\n            elif count < k:\n                return False\n            else:\n                count = 0\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        if k > 0:\n            flag = False\n            last1 = -1\n            for i in range(len(nums)):\n                if not flag:\n                    if nums[i] == 1:\n                        flag = True\n                        last1 = i\n                else:\n                    if nums[i] == 1:\n#                        print(i, last1)\n                        if i - last1 - 1 < k:\n                            return False\n                        last1 = i\n            return True\n        else:\n            return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        res = []\n        start_key = 0\n                    \n        while start_key != len(nums):\n            if nums[start_key] == 1:\n                res.append(start_key)\n                \n            start_key += 1\n        zero = 0    \n        while zero < len(res) -1:\n            if res[zero + 1] - (res[zero] + 1) < k:\n                return False\n            zero +=1\n        \n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        i=0\n        while i<len(nums):\n            if nums[i]:\n                break\n            i+=1\n        j=i\n        i+=1\n        while i<len(nums):\n            if nums[i]:\n                if i-j-1<k:\n                    return False\n                j=i\n            i+=1\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        result= []\n        n= len(nums)\n        for i in range(n):\n            if (nums[i]==1):\n                result.append(i+1)\n        m= len(result)\n        for j in range(m-1):\n            if (result[j+1]- result[j]) <= k:\n                return False\n                    \n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        idx = -1\n        for i in range(len(nums)):           \n            if nums[i] == 1:\n                if idx != -1 and i - idx - 1 < k:\n                    return False\n                idx = i\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        array_one = []\n        for i in range(len(nums)):\n            if(nums[i]):\n                array_one.append(i)\n        print(array_one)\n        for i in range(1,len(array_one)):\n            if(array_one[i] - array_one[i-1] - 1 < k):\n                return False\n        \n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        i,j = 0,0\n        flag = True\n        count = 0\n        while i<len(nums):\n            if nums[i] == 1:\n                if flag:\n                    count = 0\n                    flag = False\n                else:\n                    if count<k:\n                        return False\n                    count = 0\n            else:\n                count+=1\n            i+=1\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        i = 0\n        j = 1\n        while j < len(nums):\n            if nums[i] == 1 and nums[j] == 1:\n                if j - i - 1 < k:\n                    return False\n            if nums[i] == 0 or nums[j] == 1:\n                i = j\n            j += 1\n        return True", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        if 1 not in nums:\n            return True\n        prev=nums.index(1)\n        if prev==len(nums)-1:\n            return True\n        for i in range(prev+1,len(nums)):\n            if nums[i]==1:\n                if i-prev<=k:\n                    return False\n                prev=i\n        return True\n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        \n        index = []\n        \n        for i in range(len(nums)):\n            \n            if nums[i] == 1:\n                \n                index.append(i)\n                \n        if not index:\n            \n            return True\n        \n        if len(index) == 1:\n            \n            return True\n        \n        print(index)\n        \n        for i in range(len(index) - 1):\n            \n            print(i)\n            \n            if(index[i+1] - index[i] >= (k+1)):\n                 \n                continue\n                \n            else:\n                \n                return False\n        \n        return True\n            \n", "class Solution:\n    def kLengthApart(self, nums: List[int], k: int) -> bool:\n        if k == 0:\n            return True\n        flag = 0\n        start = 0\n        for i in range(len(nums)):\n            if i == 0:\n                if nums[i] == 1:\n                    start = 1\n                else:\n                    start = 0\n                continue\n            if nums[i] == 0 and start == 1:\n                flag += 1\n            if nums[i] == 1:\n                # print(i, flag)\n                if start == 1:\n                    if flag < k:\n                        return False\n                start = 1\n                flag = 0\n        return True    "]