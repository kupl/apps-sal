["from sys import stdin,stdout\nimport math,bisect\nfrom collections import Counter,deque,defaultdict\nL=lambda:list(map(int, stdin.readline().strip().split()))\nM=lambda:list(map(int, stdin.readline().strip().split()))\nI=lambda:int(stdin.readline().strip())\nS=lambda:stdin.readline().strip()\nC=lambda:stdin.readline().strip().split()\ndef pr(a):return(\" \".join(list(map(str,a))))\n#_________________________________________________#\n\n\ndef solve():\n n, m = M()\n a = []\n for i in range(n):\n  a += [L()]\n s = S()\n p, q = M()\n ans = [[0,0] for i in range(n+m)]\n for i in range(n):\n  for j in range(m):\n   if a[i][j]==0:\n    ans[i+j][0]+=1\n   else:\n    ans[i+j][1]+=1\n c = 0\n for i in range(n+m-1):\n  A,B,C,D = 0,0,0,0\n  if s[i]=='0':\n   A = ans[i][1]*p\n   B = q + ans[i][0]*p\n   c+=min(A,B)\n  else:\n   C = ans[i][0]*p\n   D = q + ans[i][1]*p\n   c+=min(C,D)\n print(c)\nfor _ in range(I()):\n solve()\n", "# cook your dish here\n# code by RAJ BHAVSAR\nimport sys\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_list(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_string(): return sys.stdin.readline().strip()\n\ndef row_helper(data,s,p,q):\n t1 = 0\n for i in range(len(data[0])):\n  if(data[0][i] != int(s[i])):\n   t1 += min(p,q)\n return t1\n\ndef col_helper(data,s,p,q):\n t1 = 0\n for i in range(len(data)):\n  if(data[i][0] != int(s[i])):\n   t1 += min(p,q)\n return t1\n\nfor _ in range(int(input())):\n row,col = get_ints()\n data = []\n for i in range(row):\n  data.append(get_list())\n s = get_string()\n p,q = get_ints()\n if(row == 1):\n  print(row_helper(data,s,p,q))\n else:\n  if(col == 1):\n   print(col_helper(data,s,p,q))\n  else:\n   ans = 0\n   i = 0\n   while(i < row):\n    temp = []\n    x,y = i,0\n    while(x >= 0 and y < col):\n     temp.append(data[x][y])\n     x -= 1\n     y += 1\n    t1 = 0\n    for l in temp:\n     if(l != int(s[i])):\n      t1 += p\n    t2 = q\n    for l in temp:\n     if(l == int(s[i])):\n      t2 += p\n    ans += min(t1,t2)\n    i += 1\n   loop = i\n   i -= 1\n   j = 1\n   while(j < col):\n    temp = []\n    x,y = i,j\n    while(y < col and x >= 0):\n     temp.append(data[x][y])\n     y += 1\n     x -= 1\n    t1 = 0\n    for l in temp:\n     if(l != int(s[loop])):\n      t1 += p\n    t2 = q\n    for l in temp:\n     if(l == int(s[loop])):\n      t2 += p\n    ans += min(t1,t2)\n    j += 1\n    loop += 1\n   print(ans)", "# cook your dish here\nimport math\n\nread = lambda : list(map(int,input().strip().split()))\nread_arr = lambda x: [read() for _ in range(x)]\nans = []\n\nt = int(input().strip())\n\ndef mincost(n,m,arr,s,p,q):\n cost = 0\n for t in range(n+m -1):\n  cc = s[t]\n  curr = 0\n  ct = 0\n  start = max(0,t-(m-1))\n  end = min(n,t+1)\n  for i in range(start,end):\n   j = t - i;\n   if j >= m:\n    break;\n   curr += (cc^(arr[i][j]))\n   ct += 1\n  cost1 = q + ((ct - curr) * p)\n  cost2 = (curr * p)\n  cost += min(cost1,cost2)\n return cost;\n   \n\nfor i in range(t):\n cn,cm = read()\n carr = read_arr(cn)\n cs = [int(x) for x in input().strip()]\n cp,cq = read()\n ans.append(mincost(cn,cm,carr,cs,cp,cq))\nprint(\"\\n\".join([str(x) for x in ans]))\n", "from sys import *\ninput=stdin.readline\nfor u in range(int(input())):\n n,m=list(map(int,input().split()))\n l=[]\n for i in range(n):\n  l.append(list(map(int,input().split())))\n s=input()\n x,y=list(map(int,input().split()))\n d=[0]*len(s)\n k=[0]*len(s)\n for i in range(n):\n  for j in range(m):\n   if(str(l[i][j])!=s[(i+j)%(n+m-1)]):\n    d[(i+j)%(n+m-1)]+=1\n   k[i+j]+=1\n c=0\n for i in range(len(s)):\n  c+=min(d[i]*x,y+(k[i]-d[i])*x)\n print(c)\n", "# cook your dish here\nfor _ in range(int(input())):\n n, m = map(int, input().split())\n\n ml = []\n for i in range(n):\n  ml.append(list(map(int, input().split())))\n s = input()\n p, q = map(int, input().split())\n nl = [0]*(n+m-1)\n pl = [0]*(n+m-1)\n for i in range(n):\n  for j in range(m):\n   if ml[i][j] != int(s[i+j]):\n    nl[i+j] += 1\n   else:\n    pl[i+j] += 1\n c = 0\n for i in range(len(nl)):\n  c += min(nl[i]*p, pl[i]*p + q)\n print(c)", "# cook your dish here\nt=int(input())\nwhile(t):\n n,m=map(int, input().split())\n a=[]\n for i in range(n):\n  a.append(list(map(int, input().split())))\n # print(a)\n s=input()\n p,q=map(int, input().split())\n a0=[]\n a1=[]\n for i in range(n+m-1):\n  a0.append(0)\n  a1.append(0)\n for i in range(n):\n  for j in range(m):\n   if(a[i][j]==0):\n    a0[i+j]+=1\n   else:\n    a1[i+j]+=1\n cost=0\n for i in range(len(s)):\n  if(s[i]=='0'):\n   cost+= min(p*a1[i] , (p*a0[i]+q))\n  else:\n   cost+= min(p*a0[i] , (p*a1[i]+q))\n print(cost)\n t-=1", "# cook your dish here\nimport sys\nfrom collections import defaultdict\ndef get_array(): return list(map(int , sys.stdin.readline().strip().split()))\ndef get_ints(): return list(map(int, sys.stdin.readline().strip().split()))\ndef input(): return sys.stdin.readline().strip()\n\n\nfor _ in range(int(input())):\n c=[]\n n,m=get_ints()\n d0=defaultdict(int)\n d1=defaultdict(int)\n for _ in range(n):\n  a=get_array()\n  c.append(a)\n s=input()\n p,q=list(map(int,input().split()))\n for i in range(n):\n  for j in range(m):\n\n   if c[i][j]==0:\n    d0[i+j]+=1\n   else:\n    d1[i+j]+=1\n\n\n su=0\n case1='0'\n case2='1'\n for i in range(len(s)):\n  x=d0[i]\n  y=d1[i]\n\n  if s[i]=='0':\n   cost1=y*p\n   cost2=q+(x*p)\n  if s[i]=='1':\n   cost1=(y*p)+q\n   cost2=x*p\n  su+=(min(cost1,cost2))\n print(su)\n\n\n\n\n\n\n\n", "#dt = {} for i in x: dt[i] = dt.get(i,0)+1\nimport sys;input = sys.stdin.readline\n#import io,os; input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline #for \u00a0\u00a0\u00a0\u00a0pypy\ninp,ip = lambda :int(input()),lambda :[int(w) for w in input().split()]\n\nfor _ in range(inp()):\n n,m = ip()\n x = [ip() for i in range(n)]\n s = input().strip()\n p,q = ip()\n ans = 0\n for i in range(n+m-1):\n  dt = {0:0,1:0}\n  if i < m:\n   row,col = 0,i\n  else:\n   row,col = i-m+1,m-1\n  while col >= 0 and row < n:\n   dt[x[row][col]] += 1\n   col -= 1\n   row += 1\n  if s[i] == '0':\n   t = min(dt[1]*p,q+dt[0]*p)\n  elif s[i] == '1':\n   t = min(dt[0]*p,q+dt[1]*p)\n  ans += t\n print(ans)\n", "for _ in range(int(input())):\n n, m = list(map(int, input().split()))\n a = [input().split() for _ in range(n)]\n s = input()\n p, q = list(map(int, input().split()))\n\n t = 0\n\n for i, j in enumerate(s):\n  c = 0\n\n  if i >= m:\n   x = i-m+1\n   y = m-1\n  else:\n   x = 0\n   y = i\n\n  f = 0\n\n  while 0 <= x < n and 0 <= y < m:\n   c += a[x][y] != j\n   f += 1\n\n   x += 1\n   y -= 1\n\n  t += min(c * p, p * (f-c) + q)\n\n print(t)\n", "t=int(input())\nfor _ in range(t):\n a,b=list(map(int,input().split()))\n l=[]\n for i in range(a):\n  l.append(list(map(int,input().split())))\n k=[]\n for i in range(b):\n  x=0\n  y=0\n  n,m = 0,i\n  while n<a and m>=0:\n   if l[n][m]==0:\n    x+=1\n   else:\n    y+=1\n   n+=1\n   m-=1\n  k.append([x,y])\n for i in range(1,a):\n  x=0\n  y=0\n  n,m=i,b-1\n  while n<a and m>=0:\n   if l[n][m]==0:\n    x+=1\n   else:\n    y+=1\n   n+=1\n   m-=1\n  k.append([x,y])\n ans=0\n s=input()\n p,q=list(map(int,input().split()))\n for i in range(a+b-1):\n  if s[i]=='0':\n   ans+=min(k[i][1]*p, q+k[i][0]*p)\n  else:\n   ans+=min(k[i][0]*p, q+k[i][1]*p)\n print(ans)\n   \n   \n  \n \n   \n"]