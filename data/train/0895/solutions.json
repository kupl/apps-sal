["n=int(input())\r\nar=list(map(int,input().split()))\r\ndp=[0]*n \r\ndp[0]=ar[0]\r\ndp[1]=ar[1]\r\nfor i in range(2,n):\r\n    dp[i]=min(dp[i-2],dp[i-1])+ar[i]\r\n    \r\nar.reverse()\r\n#print(ar)\r\ndp1=[0]*n \r\ndp1[0]=ar[0]\r\ndp1[1]=ar[1]\r\nfor i in range(2,n):\r\n    dp1[i]=min(dp1[i-2],dp1[i-1])+ar[i]\r\nprint(min(dp[-1],dp1[-1]))", "n=int(input())\narr=list(map(int,input().split()))\n# if(n==1):\n#     print(arr[-1])\n# elif(n==2):\n#     print(min(arr))\n# else:\nif(n>0):\n    dp=[0 for i in range(n)]\n    dp[0]=arr[0]\n    dp[1]=arr[1]\n    for i in range(2,n):\n        dp[i]=arr[i]+min(dp[i-1],dp[i-2])\n    comp=(dp[-1])\n    dp[1]+=dp[0]\n    for i in range(2,n-1):\n        dp[i]=arr[i]+min(dp[i-1],dp[i-2])\n    print(min(comp,dp[n-2]))\n    \n    \n# [3,2,3,4,5,5]\n# [3,2,1,2,2,1]\n", "# cook your dish here\ndef fun(arr,n):\n    cost = [0]*n \n    cost[n-1] = arr[n-1]\n    if(n>=2):\n        cost[n-2] = arr[n-2]\n        for i in range(n-3,-1,-1):\n            cost[i] = min(cost[i+1],cost[i+2]) + arr[i]\n    return cost[0]\n    \nn = int(input())\na = list(map(int,input().split()))\nb = list(reversed(a))\n\nprint(min(fun(a,n),fun(b,n)))\n", "# cook your dish here\n\nimport math\n\nN = int(input().strip())\ncosts = [int(i) for i in input().strip().split(\" \")]\nstored_val_1 = [costs[0], costs[0] + costs[1]]\nstored_val_2 = [math.inf, costs[1]]\nfor idx, cost in enumerate(costs[2:]):\n    stored_val_1.append(cost + min(stored_val_1[-1], stored_val_1[-2]))\n\nfor idx, cost in enumerate(costs[2:]):\n    stored_val_2.append(cost + min(stored_val_2[-1], stored_val_2[-2]))\n\nprint(min(stored_val_1[-1], stored_val_1[-2], stored_val_2[-1]))\n\n", "#=''\nimport sys\ninput=sys.stdin.readline\nn=int(input())\nl=input().split()\nli=[int(i) for i in l]\nif(n==1):\n    print(0)\n    return\nif(n==2):\n    print(min(li))\n    return\nif(n==3):\n    li.sort()\n    print(li[0]+li[1])\n    return\nz=list(li[1:])\nans=li[0]\nk=len(z)\ndp=[[0 for i in range(2)]for i in range(k)]\ndp[0][1]=z[0]\ndp[1][0]=z[0]\ndp[1][1]=z[1]\nfor i in range(2,k):\n    dp[i][0]=z[i-1]+min(dp[i-2][0],dp[i-2][1])\n    dp[i][1]=z[i]+min(dp[i-1][0],dp[i-1][1])\nans=ans+min(dp[-1][0],dp[-1][1])\nz=list(li[2:-1])\nok=li[1]+li[-1]\nk=len(z)\nif(k>=2):\n    dp=[[0 for i in range(2)]for i in range(k)]\n    dp[0][1]=z[0]\n    dp[1][0]=z[0]\n    dp[1][1]=z[1]\n    for i in range(2,k):\n        dp[i][0]=z[i-1]+min(dp[i-2][0],dp[i-2][1])\n        dp[i][1]=z[i]+min(dp[i-1][0],dp[i-1][1])\n    ok=ok+min(dp[-1][0],dp[-1][1])\nprint(min(ans,ok))\n", "# cook your dish here\nimport sys\ninput=sys.stdin.readline\nn=int(input())\nl=input().split()\nli=[int(i) for i in l]\nif(n==1):\n    print(0)\n    return\nif(n==2):\n    print(min(li))\n    return\nif(n==3):\n    li.sort()\n    print(li[0]+li[1])\n    return\nz=list(li[1:])\nans=li[0]\nk=len(z)\ndp=[[0 for i in range(2)]for i in range(k)]\ndp[0][1]=z[0]\ndp[1][0]=z[0]\ndp[1][1]=z[1]\nfor i in range(2,k):\n    dp[i][0]=z[i-1]+min(dp[i-2][0],dp[i-2][1])\n    dp[i][1]=z[i]+min(dp[i-1][0],dp[i-1][1])\nans=ans+min(dp[-1][0],dp[-1][1])\nz=list(li[1:-1])\nok=li[1]+li[-1]\nk=len(z)\nif(k>=2):\n    dp=[[0 for i in range(2)]for i in range(k)]\n    dp[0][1]=z[0]\n    dp[1][0]=z[0]\n    dp[1][1]=z[1]\n    for i in range(2,k):\n        dp[i][0]=z[i-1]+min(dp[i-2][0],dp[i-2][1])\n        dp[i][1]=z[i]+min(dp[i-1][0],dp[i-1][1])\n    ok=ok+min(dp[-1][0],dp[-1][1])\nprint(min(ans,ok))\n", "# cook your dish here\nimport sys\ninput=sys.stdin.readline\nn=int(input())\nl=input().split()\nli=[int(i) for i in l]\nif(n==1):\n    print(0)\n    return\nif(n==2):\n    print(min(li))\n    return\nif(n==3):\n    li.sort()\n    print(li[0]+li[1])\n    return\nz=list(li[1:])\nans=li[0]\nk=len(z)\ndp=[[0 for i in range(2)]for i in range(k)]\ndp[0][1]=z[0]\ndp[1][0]=z[0]\ndp[1][1]=z[1]\nfor i in range(2,k):\n    dp[i][0]=z[i-1]+min(dp[i-2][0],dp[i-2][1])\n    dp[i][1]=z[i]+min(dp[i-1][0],dp[i-1][1])\nans=ans+min(dp[-1][0],dp[-1][1])\nprint(ans)\n", "# cook your dish here\nn=int(input())\narray=list(map(int, input().split()))\narray2=array.copy()\nif n==1:\n    print(array)\nelif n==2:\n    print(min(array[0],array[1]))\nelse:\n    array[1]+=array[0]\n    for i in range(2,n):\n        array[i]+=min(array[i-1],array[i-2])\n    minimo=min(array[-1],array[-2])\n    array2[2]+=array2[1]\n    for i in range(3,n):\n        array2[i]+=min(array2[i-1],array2[i-2])\n    print(min(minimo, array2[-1]))", "# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\nd=l.copy()\nfor i in range(2,n):\n    mini=min(d[i-1],d[i-2])\n    d[i]+=mini\nf=l.copy()\nf=f[::-1]\nfor i in range(2,n):\n    mini=min(f[i-1],f[i-2])\n    f[i]+=mini\nprint(min(f[-1],d[-1]))", "# cook your dish here\n\nn=int(input())\nl=list(map(int,input().split()))\nd=l.copy()\nfor i in range(2,n):\n    mini=min(d[i-1],d[i-2])\n    d[i]+=mini\nf=l.copy()\nf=f[::-1]\nfor i in range(2,n):\n    mini=min(f[i-1],f[i-2])\n    f[i]+=mini\nprint(min(f[-1],d[-1]))", "n=int(input())\nl=list(map(int,input().split()))\nd=l.copy()\nfor i in range(2,n):\n    mini=min(d[i-1],d[i-2])\n    d[i]+=mini\nf=l.copy()\nf=f[::-1]\nfor i in range(2,n):\n    mini=min(f[i-1],f[i-2])\n    f[i]+=mini\nprint(min(f[-1],d[-1]))", "n=int(input())\nl=list(map(int,input().split()))\nd=l.copy()\nd.append(0)\nfor i in range(2,n+1):\n    mini=min(d[i-1],d[i-2])\n    d[i]+=mini\nif(d[-1]==d[-2]):\n    print(d[-1])\nelse:\n    f=l.copy()\n    f.append(0)\n    c=l[0] \n    for i in range(3,n+1):\n        mini=min(f[i-1],f[i-2])\n        f[i]+=mini\n    if(f[-1]==f[-3]):\n        print(f[-1]+c)\n    else:\n        print(d[-1])", "n=int(input())\nl=list(map(int,input().split()))\nd=l.copy()\nd.append(0)\nfor i in range(2,n+1):\n    mini=min(d[i-1],d[i-2])\n    d[i]+=mini\nif(d[-1]==d[-2]):\n    print(d[-1])\nelse:\n    f=l.copy()\n    f.append(0)\n    c=l[0]\n    for i in range(3,n+1):\n        mini=min(f[i-1],f[i-2])\n        f[i]+=mini\n    if(f[-1]==f[-3]):\n        print(f[-1]+c)\n    else:\n        print(f[-2])", "n=int(input())\nl=list(map(int,input().split()))\nd=l.copy()\nd.append(0)\nc=d[0]\nfor i in range(3,n+1):\n    mini=min(d[i-1],d[i-2])\n    d[i]+=mini\nprint(c+d[-1])", "n = int(input())\na = list(map(int, input().split()))\nif n==1:\n    print(a[0])\nelif n==2:\n    print(min(a[0],a[1]))\nelse :\n    dp = [0]*n\n    dp[0] = a[0]\n    dp[1] = a[1]\n    for i in range(2,n):\n        dp[i] = a[i] + min(dp[i-2], dp[i-1])\n    result1 = dp[n-1]\n    dp = [0]*n\n    dp[n-1] = a[n-1]\n    dp[n-2] = a[n-2]\n    for i in range(n-3,-1,-1):\n        dp[i] = a[i] + min(dp[i+2], dp[i+1])\n    result = min(dp[0], result1)\n    print(result)\n", "n = int(input())\na = list(map(int, input().split()))\nif n==1:\n    print('-1')\nelif n==2:\n    print(min(a[0],a[1]))\nelse :\n    dp = [0]*n\n    dp[0] = a[0]\n    dp[1] = a[1]\n    for i in range(2,n):\n        dp[i] = a[i] + min(dp[i-2], dp[i-1])\n    result1 = dp[n-1]\n    dp = [0]*n\n    dp[n-1] = a[n-1]\n    dp[n-2] = a[n-2]\n    for i in range(n-3,-1,-1):\n        dp[i] = a[i] + min(dp[i+2], dp[i+1])\n    result = min(dp[0], result1)\n    print(result)\n", "n = int(input())\na = list(map(int, input().split()))\nif n==1:\n    print('0')\nelif n==2:\n    print(min(a[0],a[1]))\nelse :\n    dp = [0]*n\n    dp[0] = a[0]\n    dp[1] = a[1]\n    for i in range(2,n):\n        dp[i] = a[i] + min(dp[i-2], dp[i-1])\n    result1 = dp[n-1]\n    dp = [0]*n\n    dp[n-1] = a[n-1]\n    dp[n-2] = a[n-2]\n    for i in range(n-3,-1,-1):\n        dp[i] = a[i] + min(dp[i+2], dp[i+1])\n    result = min(dp[0], result1)\n    print(result)\n", "# cook your dish here\nimport sys\n\nN=int(sys.stdin.readline())\nA=[int(i) for i in sys.stdin.readline().split()]\n\ndp1=[]\ndp2=[]\n\nfor i in range(N+1):\n    dp1.append([-1,-1])\n    dp2.append([-1,-1])\n\n# dp1 initializations    \ndp1[0][0]=0\ndp1[0][1]=0\ndp1[1][0]=0\ndp1[1][1]=2e9\n\n# dp2 initializations\ndp2[0][0]=0\ndp2[0][1]=0\ndp2[1][0]=2e9\ndp2[1][1]=A[0]\n\nfor x in range(2,N+1):\n    dp1[x][0]=dp1[x-1][1]\n    dp1[x][1]=min(dp1[x-1][0],dp1[x-1][1])+A[x-1]\n    \n    dp2[x][0]=dp2[x-1][1]\n    dp2[x][1]=min(dp2[x-1][0],dp2[x-1][1])+A[x-1]\n\nans=min(min(dp1[N][1],dp2[N][0]),dp2[N][1])\nprint(ans)\n    \n", "def solve(array):\r\n    N = len(array)\r\n    dp = [array[0], array[1]]\r\n    for i in range(2, N):\r\n        dp.append(array[i] + min(dp[i - 2], dp[i - 1]))\r\n    return dp[N - 1]\r\n\r\nN = int(input())\r\ncosts = list(map(int, input().split()))\r\n\r\nif N == 1:\r\n    print(0)\r\nelif N == 2:\r\n    print(min(costs))\r\nelse:\r\n    print(min(solve(costs), solve(costs[-1::-1])))\r\n", "import sys\nread = sys.stdin.readline\nn = int(read())\na = list(map(int , read().split()))\nb = [i for i in a]\nboola = [False for i in range(n)]\n#ans = 0\nfor i in range(2,n):\n    a[i] += min(a[i-1],a[i-2])\n#print(*boola)\nb.reverse()\nfor i in range(2,n):\n    b[i] += min(b[i-1],b[i-2])\n#x = min(a[-1],a[-2])\n#y = min(b[-1],b[-2])\nprint(min(a[-1],b[-1]))", "# cook your dish here\nimport copy\nN = int(input())\nlist1 = list(map(int,input().split()))\nlist2 = copy.deepcopy(list1)\nfor i in range(len(list1)-3,-1,-1):\n    list1[i] += min(list1[i+1],list1[i+2])\nfor j in range(2,len(list2)):\n    list2[j] += min(list2[j-1],list2[j-2])\nanswer = min(list1[0], list2[-1])\n#print(list1,list2)\nprint(answer)", "#this time it will work\ntry:\n    n = int(input())\n    l = list(map(int , input().split()))\nexcept:\n    return\nans = [0] * n\nanss = [0] * n\nans[0] = l[0]\nans[1] = l[1]\nfor i in range(2,n):\n    ans[i] = min(ans[i-1],ans[i-2]) + l[i]\nl.reverse()\nanss[0] = l[0]\nanss[1] = l[1]\nfor i in range(2,n):\n    anss[i] = min(anss[i-1],anss[i-2]) + l[i]\nprint(min(ans[-1],anss[-1]))\n\n", "# cook your dish here\nn = int(input())\ncost = list(map(int, input().split()))\ndef func(arr,n):\n    a = [0]*n \n    a[0] = arr[0]\n    a[1] = arr[1]\n    for i in range(2,n):\n        a[i] = arr[i] + min(a[i-1],a[i-2])\n    return a[-1]\nans1 = func(cost,n)\ncost.reverse()\nans2 = func(cost,n)\nprint(min(ans1,ans2))", "n = int(input())\ncost = list(map(int, input().split()))\ndef func(arr,n):\n    a = [0]*n \n    a[0] = arr[0]\n    a[1] = arr[1]\n    for i in range(2,n):\n        a[i] = arr[i] + min(a[i-1],a[i-2])\n    return a[-1]\nans1 = func(cost,n)\ncost.reverse()\nans2 = func(cost,n)\nprint(min(ans1,ans2))"]