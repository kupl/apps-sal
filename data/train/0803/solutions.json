["cards = ['A','2','3','4','5','6','7','8','9','T','J','Q','K']\n\ndef royal_flush(arr):\n nonlocal ans, confirm\n rf_set = 'TJQKA'\n rf = 1\n for char in arr:\n  if char[0] not in rf_set:\n   rf = 0\n   break\n if rf :\n  if len(set(suit)) == 1:\n   ans = 'royal flush'\n   confirm = 1\ndef straight_flush(arr):  # and 'straight'\n nonlocal ans,confirm\n sf = 1\n for i in range(1,5):\n  if arr[i] - arr[i-1] != 1:\n   sf = 0\n   break\n if sf:\n  if len(set(suit)) == 1 :\n   ans = 'straight flush'\n   confirm = 1\n  else:\n   ans = 'straight'\n   confirm = 1\ndef four(arr):\n nonlocal ans, confirm\n f = 0\n for char in arr:\n  if arr.count(char) == 4:\n   f = 1\n   break\n if f:\n  confirm = 1\n  ans = 'four of a kind'\ndef full_house(arr): # and three\n nonlocal ans, confirm\n fh = 0\n three = 0\n two = 0\n for char in arr:\n  if arr.count(char) == 3:\n   three = 1\n  elif arr.count(char) == 2:\n   two = 1\n if three and two:\n  confirm = 1\n  ans = 'full house'\n elif three:\n  confirm = 1\n  ans = 'three of a kind'\ndef two_pairs(arr):\n nonlocal ans, confirm\n temp = []\n for char in arr:\n  if arr.count(char) == 2:\n   if char not in temp:\n    temp.append(char)\n if len(temp) == 2:\n  confirm = 1\n  ans = 'two pairs'\n elif len(temp) == 1:\n  confirm = 1\n  ans = 'pair'\n\ndef idex(char_x):\n return cards.index(char_x)\nfor _ in range(int(input())):\n onhand = list(input().split())\n cards_set = [[],[]]\n suit = []\n confirm = 0\n ans = ''\n for c in onhand:\n  num = idex(c[0])\n  cards_set[0].append(num)\n  if num == 0:\n   cards_set[1].append(13)\n  else:\n   cards_set[1].append(num)\n  suit.append(c[1])\n royal_flush(onhand)\n if not confirm:\n  cards_set[0] = sorted(cards_set[0])\n  cards_set[1] = sorted(cards_set[1])\n  straight_flush(cards_set[0])\n  straight_flush(cards_set[1])\n if not confirm:\n  four(cards_set[0])\n  four(cards_set[1])\n if not confirm:\n  full_house(cards_set[0])\n  full_house(cards_set[1])\n if not confirm:\n  if len(set(suit)) == 1:\n   confirm = 1\n   ans = 'flush'\n if not confirm:\n  two_pairs(cards_set[0])\n  two_pairs(cards_set[1])\n print(ans if confirm else 'high card')"]