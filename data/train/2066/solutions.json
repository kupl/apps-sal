["import os\nimport random\nimport sys\nfrom typing import List, Dict\n\n\nclass Int:\n    def __init__(self, val):\n        self.val = val\n\n    def get(self):\n        return self.val + 111\n\nclass Unique:\n    def __init__(self):\n        self.s = set()\n\n    def add(self, val : int):\n        self.s.add(val)\n\n    def __contains__(self, item : int) -> bool:\n        return self.s.__contains__(item)\n\ndef ceil(top : int, bottom : int) -> int:\n    return (top + bottom - 1) // bottom\n\ndef concat(l : List[int]):\n    return \"\".join(map(str, l))\n\ndef get(d : Dict[int, str], val : int) -> Dict[int, str]:\n    return d[val]\n\n\n#guy who wants small moves first\n#then guy who wants large moves\n\n#so lets say we have 4 positions\n# 1, 2, 3, 4\n#small wants to ban edges, because if he bans 2 or 3 he is fucked\n#so he bans 1\n# and we have 2, 3, 4\n# then large bans middle so we have 2, 4 and the ans is 2\n# 0, 1, 2, 3, 4, 5, 6, 7\n# 0, 1, 2, 3, 4, 5, 6\n# 0, 1, 2, 3, 5, 6\n# 0, 1, 2, 3, 5\n# 0, 1, 3, 5\n# 0, 1, 3\n# 0, 3\n\n\n# 0, 1, 2, 3, 4, 5, 6, 7\n# 0, 4\n\n# # 0, 3\n\n\n#1 5 9 19 21 22\n#  5 9 19 21 22\n#  5 19 21 22\n#  19 21 22\n\n\n# 0, 1, 3, 7, 15\n# 0, 1, 7, 15\n# 0, 1, 7\n# 0, 7\ndef slowsolve(a):\n    a.sort()\n    small = True\n    while len(a) > 2:\n        if small:\n            if a[1] - a[0] > a[-1] - a[-2]:\n                a.pop(0)\n            else:\n                a.pop()\n            small = False\n        else:\n            a.pop(len(a) // 2)\n            small = True\n\n    return a[1] - a[0]\n\n\ndef solve(a):\n    a.sort()\n    candelete = len(a) // 2 - 1\n    res = 10 ** 18\n    for leftdelete in range(0, candelete + 1):\n        leftrem = leftdelete\n        rightrem = leftdelete + candelete + 1\n        res = min(res, a[rightrem] - a[leftrem])\n    return res\n\n\n\ndef prt(l): return print(' '.join(l))\ndef rv(): return map(int, input().split())\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]\nif os.path.exists(\"test.txt\"): sys.stdin = open(\"test.txt\")\n\nn, = rv()\na, = rl(1)\n\n# a = sorted([random.randrange(10**2) for _ in range(6)])\n# print(a)\n# print(solve(a), slowsolve(a))\nprint(solve(a))", "import os\nimport random\nimport sys\n# from typing import List, Dict\n#\n#\n# class Int:\n#     def __init__(self, val):\n#         self.val = val\n#\n#     def get(self):\n#         return self.val + 111\n#\n# class Unique:\n#     def __init__(self):\n#         self.s = set()\n#\n#     def add(self, val : int):\n#         self.s.add(val)\n#\n#     def __contains__(self, item : int) -> bool:\n#         return self.s.__contains__(item)\n#\n# def ceil(top : int, bottom : int) -> int:\n#     return (top + bottom - 1) // bottom\n#\n# def concat(l : List[int]):\n#     return \"\".join(map(str, l))\n#\n# def get(d : Dict[int, str], val : int) -> Dict[int, str]:\n#     return d[val]\n\n\n#guy who wants small moves first\n#then guy who wants large moves\n\n#so lets say we have 4 positions\n# 1, 2, 3, 4\n#small wants to ban edges, because if he bans 2 or 3 he is fucked\n#so he bans 1\n# and we have 2, 3, 4\n# then large bans middle so we have 2, 4 and the ans is 2\n# 0, 1, 2, 3, 4, 5, 6, 7\n# 0, 1, 2, 3, 4, 5, 6\n# 0, 1, 2, 3, 5, 6\n# 0, 1, 2, 3, 5\n# 0, 1, 3, 5\n# 0, 1, 3\n# 0, 3\n\n\n# 0, 1, 2, 3, 4, 5, 6, 7\n# 0, 4\n\n# # 0, 3\n\n\n#1 5 9 19 21 22\n#  5 9 19 21 22\n#  5 19 21 22\n#  19 21 22\n\n\n# 0, 1, 3, 7, 15\n# 0, 1, 7, 15\n# 0, 1, 7\n# 0, 7\ndef slowsolve(a):\n    a.sort()\n    small = True\n    while len(a) > 2:\n        if small:\n            if a[1] - a[0] > a[-1] - a[-2]:\n                a.pop(0)\n            else:\n                a.pop()\n            small = False\n        else:\n            a.pop(len(a) // 2)\n            small = True\n\n    return a[1] - a[0]\n\n\ndef solve(a):\n    a.sort()\n    candelete = len(a) // 2 - 1\n    res = 10 ** 18\n    for leftdelete in range(0, candelete + 1):\n        leftrem = leftdelete\n        rightrem = leftdelete + candelete + 1\n        res = min(res, a[rightrem] - a[leftrem])\n    return res\n\n\n\ndef prt(l): return print(' '.join(l))\ndef rv(): return map(int, input().split())\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]\nif os.path.exists(\"test.txt\"): sys.stdin = open(\"test.txt\")\n\nn, = rv()\na, = rl(1)\n\n# a = sorted([random.randrange(10**2) for _ in range(6)])\n# print(a)\n# print(solve(a), slowsolve(a))\nprint(solve(a))", "n = int(input())\nv = sorted([int(i) for i in input().split()])\nans = 2 ** 40\nfor i in range(n//2):\n    ans = min(ans, v[i + n//2] - v[i])\nprint(ans)\n\n", "n = int(input())\nv = sorted([int(i) for i in input().split()])\nans = 2 ** 40\nfor i in range(n//2):\n    ans = min(ans, v[i + n//2] - v[i])\nprint(ans)\n\n", "def main():\n    n = int(input())\n    l = sorted(map(int, input().split()))\n    print(min(b - a for a, b in zip(l, l[n // 2:])))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from itertools import accumulate\nm = int(input())//2\nX = [int(x) for x in input().split()]\nX.sort()\nZ = [X[i+m] - X[i] for i in range(m)]\nprint(min(Z))\n\n", "n = int(input())\nx = sorted(list(map(int, input().split())))\nprint(min([x[i + n // 2] - x[i] for i in range(n // 2)]))\n\n", "n = int(input())\nx = sorted(list(map(int, input().split())))\nprint(min([x[i + n // 2] - x[i] for i in range(n // 2)]))\n\n", "n = int(input())\nx = sorted(list(map(int, input().split())))\nprint(min([x[i + n // 2] - x[i] for i in range(n // 2)]))\n\n", "n = int(input())\nx = sorted(list(map(int, input().split())))\nprint(min([x[i + n // 2] - x[i] for i in range(n // 2)]))\n\n", "n = int(input())\nx = sorted(list(map(int, input().split())))\nprint(min([x[i + n // 2] - x[i] for i in range(n // 2)]))\n\n", "n = int(input())\nx = sorted(list(map(int, input().split())))\nprint(min([x[i + n // 2] - x[i] for i in range(n // 2)]))\n\n", "n = int(input())\nx = sorted(list(map(int, input().split())))\nprint(min([x[i + n // 2] - x[i] for i in range(n // 2)]))\n\n", "n = int(input())\n\nx = sorted(list(map(int, input().split())))\n\nprint(min([x[i + n // 2] - x[i] for i in range(n // 2)]))\n\n\n\n\n\n\n# Made By Mostafa_Khaled\n"]