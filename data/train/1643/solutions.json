["from scipy.special import comb\n\ndef almost_everywhere_zero(n, k):\n    if k == 0: return 1\n    first, *rest = str(n)\n    l = len(rest)\n    return 9**k*comb(l, k, exact=True) +\\\n           (int(first)-1)*9**(k-1)*comb(l, k-1, exact=True) +\\\n           almost_everywhere_zero(int(\"\".join(rest) or 0), k-1)", "def almost_everywhere_zero(S, k):\n    S = [int(c) for c in str(S)]\n    D,n = {},len(S)\n\n    def F(i, k, L):\n        if i==n: return k==0\n        if k==0: return F(i+1,k,L)\n        if (i,k,L) in D: return D[(i,k,L)]\n\n        if i==0 or L:\n            D[(i,k,L)] =F(i+1,k,S[i]==0) +(S[i]-1)*F(i+1,k-1,False) +F(i+1,k-1,S[i]!=0)\n        else:\n            D[(i,k,L)] = F(i+1,k,False) + 9 * F(i+1,k-1,False)\n\n        return D[(i,k,L)]\n    return F(0, k, 0)", "def fact(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * fact(n-1) \n\ndef C(n,k):\n    if n < k:\n        return 0\n    return fact(n)//(fact(k)*fact(n-k))\n\ndef almost_everywhere_zero(n,k):\n    if n == 0 and k > 0:\n        return 0\n    if k == 0:\n        return 1\n    ntoString = str(n)\n    digits = len(ntoString)\n    first_digit = int(ntoString[0]) \n    tight = 0 if len(ntoString) < 2 else int(ntoString[1:])\n    # print(n,k,tight,first_digit,digits)\n    return (first_digit-1)*(9**(k-1))*C(digits-1,k-1) + almost_everywhere_zero(tight, k-1) + (9**k)*C(digits-1, k)", "R = lambda a,b: range(a,b)\n\ndef almost_everywhere_zero(S, k):\n    S = [int(c) for c in str(S)]\n    D,n = {},len(S)\n  \n    def F(i, k, L):\n        if i==n: return k==0\n        if k==0: return F(i+1,k,L)\n        if (i,k,L) in D: return D[(i,k,L)]\n\n        if i==0 or L: D[(i,k,L)] = sum(F(i+1, k-(j>0), j==S[i]) for j in R(0,S[i]+1))\n        else: D[(i,k,L)] = sum(F(i+1, k-(j>0), 0) for j in R(0,10))\n\n        return D[(i,k,L)]\n    return F(0, k, 0)", "def almost_everywhere_zero(n, k):\n    S = [int(c) for c in str(n)]\n    D,n = {},len(S)\n\n    def F(i, k, L):\n        if i==n: return k==0\n        if k==0: return F(i+1,k,L)\n        if (i,k,L) in D: return D[(i,k,L)]\n\n        if i==0 or L:\n            D[(i,k,L)] =F(i+1,k,S[i]==0) +(S[i]-1)*F(i+1,k-1,False) +F(i+1,k-1,S[i]!=0)\n        else:\n            D[(i,k,L)] = F(i+1,k,False) + 9 * F(i+1,k-1,False)\n\n        return D[(i,k,L)]\n    return F(0, k, 0)", "R = lambda a,b: range(a,b)\n\ndef almost_everywhere_zero(S, k):\n    S = [int(c) for c in str(S)]\n    D,n = {},len(S)\n  \n    def F(i, k, L, sm=0):\n        if i==n: return k==0\n        if k==0: return F(i+1,k,L)\n        if (i,k,L) in D: return D[(i,k,L)]\n        if i==0: D[(i,k,L)] = sum(F(i+1,k-(j>0),j==S[i]) for j in R(0,S[0]+1))\n        else:\n            if L: D[(i,k,L)] = sum(F(i+1, k-(j>0), j==S[i]) for j in R(0,S[i]+1))\n            else: D[(i,k,L)] = sum(F(i+1, k-(j>0), 0) for j in range(10))\n        return D[(i,k,L)]\n    return F(0, k, 0)", "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef calc(d, k, is_first_digit=True):\n    if d < 0 or k < 0 or d < k:\n        return 0\n    elif d == k:\n        return 9 ** k\n    return calc(d - 1, k - 1, False) * 9 + calc(d - 1, k, False) * (not is_first_digit)\n\n\ndef almost_everywhere_zero(n, k):\n    if n < 10:\n        return {0: 1, 1: n}.get(k, 0)\n    ans = sum(calc(d, k) for d in range(k, len(str(n))))\n    for d in range(1, int(str(n)[0])):\n        ans += calc(len(str(n))-1, k-1, False)\n    return ans + almost_everywhere_zero(int(str(n)[1:]), k-1)", "import functools\nimport sys\n\n@functools.lru_cache(None)\ndef almost_everywhere_zero(n, k):\n    n = str(n)\n    if len(n) == 0 or k < 0:\n        return k == 0\n    d = int(n[0])\n    return sum(almost_everywhere_zero(n[1:] if i == d else '9' * (len(n) - 1), k - 1 if i > 0 else k) for i in range(d + 1))\n\nsys.setrecursionlimit(100000)\n", "try:\n    from math import comb\nexcept ImportError:\n    from math import factorial\n    def comb(n, k):\n        if k < 0 or k > n: return 0\n        return factorial(n) // (factorial(k) * factorial(n-k))\n\ndef almost_everywhere_zero(n, k):\n    digits = list(reversed([int(c) for c in str(n+1)]))\n    aez = 0\n    for i in range(len(digits)-1, -1, -1):\n        d = digits[i]\n        if d == 0: continue\n        aez += comb(i, k) * 9**k\n        k -= 1\n        if k < 0: break\n        aez += (d-1) * comb(i, k) * 9**(k)\n    return aez\n"]