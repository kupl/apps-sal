["def gcd(a, b):\n if a == 0:\n  return b\n return(gcd(b % a, a))\n\nt = int(input())\nfor T in range(t):\n n = int(input())\n l = [int(x) for x in input().split()]\n\n ang = []\n for i in range(1, n):\n  ang.append(l[i] - l[i - 1])\n ang.append(360 - (l[-1] - l[0]))\n ang.sort()\n if ang == ang[::-1]:\n  print(0)\n  continue\n \n g = ang[0]\n for i in range(1, n):\n  g = gcd(g, ang[i])\n\n \n total = 360 // g - len(ang)\n print(total)\n##    print(g, ang, total)\n\n\n", "# cook your dish here\nfrom functools import reduce\nfrom math import gcd\n\nfor _ in range(int(input())):\n n = int(input())\n a = [int(i) for i in input().split()]\n arr = []\n val = 0\n for i in a:\n  arr.append(i-val)\n  val = i\n  \n arr[0] = 360 - (val-arr[0])\n arr.append(360)\n q = reduce(gcd, arr)\n needed = 360/q\n print(int(needed - n))", "from functools import reduce\nfrom math import gcd\n\nfor _ in range(int(input())):\n n = int(input())\n a = [int(i) for i in input().split()]\n arr = []\n val = 0\n for i in a:\n  arr.append(i-val)\n  val = i\n  \n arr[0] = 360 - (val-arr[0])\n arr.append(360)\n q = reduce(gcd, arr)\n needed = 360/q\n print(int(needed - n)) \n", "# cook your dish here\ndef isDivisible(a, k):\n for i in a:\n  if (i%k!=0):\n   return False\n return True\ndef find_gcd(x, y): \n  \n while(y): \n  x, y = y, x % y \n  \n return x \n   \ndef findHCF(l):\n gcd = find_gcd(l[0], l[1]) \n  \n for i in range(2, len(l)): \n  gcd = find_gcd(gcd, l[i]) \n return gcd\ndef calDegree(a):\n b = []\n p = a[0]\n i = 1\n while(i<len(a)):\n  b.append((a[i]-p)%360)\n  p = a[i]\n  i+=1\n return b\ndef calRawCount(a, k):\n s = 0\n for i in a:\n  s+=(i//k)\n return s\nt = int(input())\nfor _ in range(t):\n n = int(input())\n l = list(map(int, input().split(\" \")))\n l.append(l[0])\n a = calDegree(l)\n \n HCF = findHCF(a)\n \n raw_count = calRawCount(a, HCF)\n print(raw_count-len(l)+1)\n", "# cook your dish here\nfrom functools import reduce\nfrom math import gcd\nfor _ in range(int(input())):\n num=int(input())\n cuts=list(map(int,input().split(\" \")))\n initial_cuts=[0]*(num-1)\n for i in range(0,num-1):\n  \n  initial_cuts[i]=cuts[i+1]-cuts[i]\n initial_cuts.append(360) \n red=reduce(gcd,initial_cuts)\n total_initial=int(360/red)\n vasya_cuts=total_initial-num\n print(vasya_cuts)", "t=int(input())\n\ndef gcd(a,b):\n if a<b:\n  a=a+b\n  b=a-b\n  a=a-b\n\n if a%b==0:\n  return b\n else:\n  c=a%b\n  return gcd(b,c)\n\nfor _ in range(t):\n n=int(input())\n angle_list=list(map(int,input().split()))\n slice_list=[]\n for i in range(n):\n  if i==n-1:\n   theta=angle_list[0]+360-angle_list[i]\n  else:\n   theta=angle_list[i+1]-angle_list[i]\n  slice_list.append(theta)\n for i in range(n-1):\n  slice_list[1]=gcd(slice_list[0],slice_list[1])\n  slice_list.pop(0)\n slices=360/slice_list[0]-n\n print(str(int(slices)))\n", "def find_gcd(x, y):\n while y:\n  x, y = y, x % y\n\n return x\n\n\nT = int(input())\n\nfor i in range(T):\n N = int(input())\n lst = [int(x) for x in input().strip().split()]\n diff = []\n\n for j in range(1, len(lst)):\n  diff.append(lst[j] - lst[j - 1])\n\n diff.append(360)\n\n gcd = find_gcd(diff[0], diff[1])\n for j in range(2, len(diff)):\n  gcd = find_gcd(gcd, diff[j])\n\n print(360 // gcd - N)\n", "# cook your dish here\nfrom functools import reduce\nfrom math import gcd\nfor _ in range(int(input())):\n num=int(input())\n cuts=list(map(int,input().split(\" \")))\n initial_cuts=[0]*(num-1)\n for i in range(0,num-1):\n  \n  initial_cuts[i]=cuts[i+1]-cuts[i]\n initial_cuts.append(360) \n red=reduce(gcd,initial_cuts)\n total_initial=int(360/red)\n vasya_cuts=total_initial-num\n print(vasya_cuts)\n", "from functools import reduce\nfrom math import gcd\n\nfor _ in range(int(input())):\n n = int(input())\n a = [int(i) for i in input().split()]\n arr = []\n val = 0\n for i in a:\n  arr.append(i-val)\n  val = i\n  \n arr[0] = 360 - (val-arr[0])\n arr.append(360)\n q = reduce(gcd, arr)\n needed = 360/q\n print(int(needed - n)) ", "#cut pizza codechef solution\n#first try to handle boundary conditions, if n(cuts) = 360, return 0\nfrom math import gcd\nfrom functools import reduce\n\ndef n_cuts(x):\n \"\"\"\n    x: list of cuts \n\n    \"\"\"\n l = len(x)\n if(l == 360):\n  print(0)\n  return\n\n #find minimum difference\n mini = min(x)\n flag = 0\n for i in range(len(x)):\n  if(x[i]%mini != 0):\n   flag = 1\n   break\n if(flag == 0):\n  if(360%mini == 0):\n   print(360//mini - l)\n   return\n\n\n #find gcd\n GCD = reduce(gcd, x)\n result = int(360/GCD)\n print(result-l)\n return\n\n\n\ndef __starting_point():\n t = int(input()) #number of test cases\n for i in range(t):\n  n = int(input()) #not use\n  x = list(map(int, input().split(' '))) #x is the cuts list\n  diff = []\n  for i in range(1,len(x)):\n   diff.append(x[i]-x[i-1])\n  diff.append(360-x[-1]+x[0])\n  n_cuts(diff)\n\n\n\n\n\n\n\n\n\n\n\n\n\n__starting_point()", "# cook your dish here\nt = int(input())\n\nfor x in range(t):\n cu = int(input())\n angle = list(map(int, input().split()))\n \n diff = []\n mi = float('infinity')\n for i in range(cu - 1):\n  diff.append(angle[i + 1] - angle[i])\n  if diff[i] < mi:\n   mi = diff[i]\n   \n diff.append(angle[0] - angle[cu - 1] + 360)\n if diff[cu - 1] < mi:\n  mi = diff[cu - 1]\n div = 1\n while div < 360:\n  smallest = mi / div\n  count = 0\n  flag = True\n  for i in diff:\n   dm = divmod(i, smallest)\n   if dm[1] != 0:\n    flag = False\n    break\n   count += dm[0]\n  if flag:\n   print(int(count - cu))\n   break\n  div += 1", "from functools import reduce\nfrom math import gcd\n\nfor _ in range(int(input())):\n n = int(input())\n a = [int(i) for i in input().split()]\n arr = []\n val = 0\n for i in a:\n  arr.append(i-val)\n  val = i\n  \n arr[0] = 360 - (val-arr[0])\n arr.append(360)\n q = reduce(gcd, arr)\n needed = 360/q\n print(int(needed - n))\n", "from functools import reduce\nfrom math import gcd\n\nfor _ in range(int(input())):\n n = int(input())\n a = [int(i) for i in input().split()]\n arr = [0]*360\n\n for i in a:\n  arr[i] = 1\n  #arr[(180+i)%360] = 1\n val = 0\n dif = []\n for i in range(0,360):\n  if(arr[i] == 1):\n   dif.append(i - val)\n   #print(i, val)\n   val = i\n #print(val, dif[0])    \n #print(arr)        \n dif[0] = 360 - (val - dif[0])\n dif.append(360)\n #print(dif)\n q = reduce(gcd, (dif))\n needed = 360/q\n print(int(needed - n))\n", "def gcd(n1,n2):\n m=1\n di=2\n while di<=min(n1,n2) and (n1>1 and n2>1):\n  if n1%di==0 and n2%di==0:\n   n1//=di\n   n2//=di\n   m*=di\n  else:\n   di+=1\n return m\nfor _ in range(int(input())):\n n=int(input())\n a=list(map(int,input().split()))\n mi,d=a[1]-a[0],[a[1]-a[0]]\n for i in range(2,n):\n  d+=[a[i]-a[i-1]]\n  if (d[i-1]%mi)!=0:\n   mi=gcd(mi,d[i-1])\n d+=[360-a[n-1]+a[0]]\n if (d[n-1]%mi)!=0:\n   mi=gcd(mi,d[n-1])\n print(360//mi-n)\n \n  \n", "def gcd(a, b):\n if b == 0:\n  return a\n return gcd(b, a%b)\n\ndef gcd_of_list(lst):\n a = lst[0]\n for item in lst:\n  a = gcd(item, a)\n  if a == 1:\n   return 1\n return a\n\ndef __starting_point():\n cases = int(input())\n for _ in range(cases):\n  cuts = int(input())\n  angles = list(map(int, input().split()))\n  min_angle = angles[0]\n  size = []\n  for i in range(cuts):\n   if i != cuts-1:\n    size.append(angles[i+1]-angles[i])\n  size.append(360-angles[-1]+angles[0])\n  diff = gcd_of_list(size)\n  print(360//diff - len(size))\n__starting_point()", "# cook your dish here\nimport numpy as np\nimport math\nfor t in range(int(input())):\n n=int(input())\n a=list(map(int,input().split()))\n aa=np.zeros([n],dtype=int)\n for i in range(n-1):\n  aa[i]=a[i+1]-a[i]\n aa[n-1]=360-a[n-1]+a[0]\n hcf=180\n for i in range(n):\n  hcf=min(hcf,math.gcd(aa[i%n],aa[(i+1)%n]))\n print(360//hcf-n)", "def gcd(a, b):\n if b == 0:\n  return a\n return gcd(b, a%b)\n\ndef gcd_of_list(lst):\n a = lst[0]\n for item in lst:\n  a = gcd(item, a)\n  if a == 1:\n   return 1\n return a\n\ndef __starting_point():\n cases = int(input())\n for _ in range(cases):\n  cuts = int(input())\n  angles = list(map(int, input().split()))\n  min_angle = angles[0]\n  size = []\n  for i in range(cuts):\n   if i != cuts-1:\n    size.append(angles[i+1]-angles[i])\n  size.append(360-angles[-1]+angles[0])\n  diff = gcd_of_list(size)\n  print(360//diff - len(size))\n\n__starting_point()", "T=int(input())\ndef gcd(a,b):\n if(b==0):\n  return a\n else:\n  return gcd(b,a%b)\nfor i in range(T):\n N=int(input())\n arrst=input()\n arr=list(map(int,arrst.split()))\n count=0\n arr.sort()\n lis=[arr[0]-arr[len(arr)-1]+360]\n \n for j in range(len(arr)-1):\n  lis+=[arr[j+1]-arr[j]]\n ans=lis[0] \n for j in range(len(arr)):\n  ans=gcd(ans,lis[j])\n for j in range(len(arr)):\n  count+=(lis[j]//ans)-1\n print(int(count)) \n \n\n", "from math import gcd\nT=int(input());\nx=[];\nfor i in range(T):\n n=int(input());\n a=[int(i) for i in input().split()]\n g=a[1]-a[0];\n for i in range(1,n):\n  g=gcd(g,a[i]-a[i-1]);\n g=gcd(g,360-a[n-1]+a[0]);\n count=0;\n for i in range(1,n):\n  count+=(a[i]-a[i-1])//g-1;\n count+=(360-a[n-1]+a[0])//g-1;\n print(count)\n", "def hcf(a, b):\n if b == 0:\n  return (a)\n else:\n  return (hcf(b, a % b))\n\nt=int(input())\nfor i in range(t):\n\n n=int(input())\n a=list(map(int,input().strip().split()))\n b=[]\n for j in range(len(a)-1):\n  b.append(a[j+1]-a[j])\n b.append(360-a[len(a)-1]+a[0])\n for k in range(len(b)-1):\n  b[k+1]=hcf(b[k],b[k+1])\n p=360/b[len(b)-1]\n print(int(p-len(a)))", "def gcd(a,b):\n if b==0:\n  return a\n else:\n  return gcd(b,a%b)\nt=int(input())\nfor _ in range(t):\n n=int(input())\n a=[int(i) for i in input().split()]\n x=[]\n for i in range(1,n):\n  x.append(a[i]-a[i-1])\n x.append(360-a[n-1]+a[0])\n p=x[0]\n s=0\n for i in x:\n  p=gcd(p,i)\n for i in x:\n  s+=i//p-1\n print(s)", "# cook your dish here\ndef gcd(a,b):\n if b==0:\n  return a\n else:\n  return gcd(b,a%b)\nt=int(input())\nfor _ in range(t):\n n=int(input())\n a=[int(i) for i in input().split()]\n x=[]\n for i in range(1,n):\n  x.append(a[i]-a[i-1])\n x.append(360-a[n-1]+a[0])\n p=x[0]\n s=0\n for i in x:\n  p=gcd(p,i)\n for i in x:\n  s+=i//p-1\n print(s)", "from math import gcd\nfor _ in range(int(input())):\n n=int(input())\n l=[int(y) for y in input().split(' ')]\n g=l[1]-l[0]\n count=0\n for i in range(1,n):\n  g=gcd(g,l[i]-l[i-1])\n g=gcd(g,360-l[n-1]+l[0])\n for i in range(1, n):\n  count+=(l[i]-l[i-1])//g-1\n count+=(360-l[n-1]+l[0])//g-1\n print(count)"]