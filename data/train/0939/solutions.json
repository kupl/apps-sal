["lucky = {4, 774, 7, 744, 777, 74, 747, 44, 77, 47, 474, 444, 477, 447}\nfrom functools import lru_cache\nimport sys \nsys.setrecursionlimit(10 ** 6)\nmod = 10 ** 9 + 7\nfact = [1]\nfor i in range(1, 1001):\n    fact.append(fact[-1] * i % mod)\ninv = [pow(i, mod-2, mod) for i in fact]\nC = lambda k, n: fact[n] * inv[n-k] * inv[k] % mod\ndef f(n):\n    n = [int(x) for x in n]\n    @lru_cache(None)\n    def dp(pos, cnt, free):\n        if cnt > 777:\n            return 0\n        diff = len(n) - pos \n        ans = 0\n        if free:\n            for i in lucky:\n                i -= cnt\n                if 0 <= i <= diff:\n                    ans += C(i, diff) * pow(2, i, mod) * pow(8, diff - i, mod)\n                    ans %= mod \n            return ans\n        if pos == len(n):\n            return int(cnt in lucky)\n        for i in range(10 if free else n[pos]+1):\n            ans += dp(pos+1, cnt + int(i == 4 or i == 7), free or i < n[pos])\n            ans %= mod \n        return ans \n    return dp(0, 0, 0)\n    \nt = int(input())\nfor _ in range(t):\n    l, r = input().split()\n    l = str(int(l) -1) \n    print((f(r) - f(l)) % mod)", "lucky = {4, 774, 7, 744, 777, 74, 747, 44, 77, 47, 474, 444, 477, 447}\nfrom functools import lru_cache\nimport sys \nsys.setrecursionlimit(10 ** 6)\nmod = 10 ** 9 + 7\nfact = [1]\nfor i in range(1, 1001):\n    fact.append(fact[-1] * i % mod)\ninv = [pow(i, mod-2, mod) for i in fact]\nC = lambda k, n: fact[n] * inv[n-k] * inv[k] % mod\ndef f(n):\n    n = [int(x) for x in n]\n    @lru_cache(None)\n    def dp(pos, cnt, free):\n        if cnt > 777:\n            return 0\n        diff = len(n) - pos \n        ans = 0\n        if free:\n            for i in lucky:\n                i -= cnt\n                if 0 <= i <= diff:\n                    ans += C(i, diff) * pow(2, i, mod) * pow(8, diff - i, mod)\n                    ans %= mod \n            return ans\n        if pos == len(n):\n            return int(cnt in lucky)\n        for i in range(10 if free else n[pos]+1):\n            ans += dp(pos+1, cnt + int(i == 4 or i == 7), free or i < n[pos])\n            ans %= mod \n        return ans \n    return dp(0, 0, 0)\n    \nt = int(input())\nfor _ in range(t):\n    l, r = input().split()\n    l = str(int(l) -1) \n    print((f(r) - f(l)) % mod)"]