["class DisjointSet(object):\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n        self.num = n  # number of disjoint sets\n\n    def union(self, x, y):\n        self._link(self.find_set(x), self.find_set(y))\n\n    def _link(self, x, y):\n        if x == y:\n            return\n        self.num -= 1\n        if self.rank[x] > self.rank[y]:\n            self.parent[y] = x\n        else:\n            self.parent[x] = y\n            if self.rank[x] == self.rank[y]:\n                self.rank[y] += 1\n\n    def find_set(self, x):\n        xp = self.parent[x]\n        if xp != x:\n            self.parent[x] = self.find_set(xp)\n        return self.parent[x]\n\n\ndef solve():\n    n, m = list(map(int, input().split()))\n    ds = DisjointSet(n * 2)\n    for i in range(m):\n        a, b, c = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        aA = a * 2\n        aB = aA + 1\n        bA = b * 2\n        bB = bA + 1\n        if c == 0:\n            if ds.find_set(aA) == ds.find_set(bA):\n                return 0\n            ds.union(aA, bB)\n            ds.union(aB, bA)\n        else:\n            if ds.find_set(aA) == ds.find_set(bB):\n                return 0\n            ds.union(aA, bA)\n            ds.union(aB, bB)\n    return pow(2, (ds.num // 2) - 1, 10**9 + 7)\n\n\nprint(solve())\n", "class DSU(object):\n    def __init__(self, n):\n        self.father = list(range(n))\n        self.size = n\n\n    def union(self, x, s):\n        x = self.find(x)\n        s = self.find(s)\n        if x == s:\n            return\n        self.father[s] = x\n        self.size -= 1\n\n    def find(self, x):\n        xf = self.father[x]\n        if xf != x:\n            self.father[x] = self.find(xf)\n        return self.father[x]\n\n\ndef is_invalid(a, b, ds):\n    return ds.find(a) == ds.find(b)\n\n\nn, k = list(map(int, input().split()))\nds = DSU(n * 2)\nfor i in range(k):\n    first, second, color = list(map(int, input().split()))\n    first -= 1\n    second -= 1\n    if color == 0:\n        if is_invalid(first, second, ds):\n            print(0)\n            return\n        ds.union(first, second + n)\n        ds.union(first + n, second)\n    else:\n        if is_invalid(first, second + n, ds):\n            print(0)\n            return\n        ds.union(first, second)\n        ds.union(first + n, second + n)\n\nsum = 1\nfor i in range(ds.size // 2 - 1):\n    sum = (sum * 2) % (10 ** 9 + 7)\nprint(sum)\n"]