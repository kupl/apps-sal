["def find_prime_kPerm(n, k):\n    sieve = n // 2 * [True]\n    for i in range(3, int(n ** .5) + 1, 2):\n        if sieve[i // 2]:\n            sieve[i*i // 2 :: i] = ((n - i*i - 1) // (2*i) + 1) * [False]\n    cycles = {}\n    for i in range(1, n // 2):\n        if sieve[i]:\n            cycles.setdefault(tuple(sorted(str(2*i + 1))), set()).add(2*i + 1)\n    k_perms = [min(cycle) for cycle in cycles.values() if len(cycle) == k + 1]\n    return [len(k_perms), min(k_perms, default=0), max(k_perms, default=0)]", "from collections import defaultdict\n\n# generate list of primes\nSIEVE_LIMIT = 10**5\nsieve = list(range(SIEVE_LIMIT))\nsieve[1] = 0\n# and store them based on used digits\ncache = defaultdict(list)\nfor n in sieve:\n    if n:\n        digits = tuple(sorted(str(n)))\n        cache[digits].append(n)\n        for i in range(n*n, SIEVE_LIMIT, n):\n            sieve[i] = 0\n\n\n# return the number of items in arr below given limit\ndef items_below_limit(arr, limit):\n    return sum( [x < limit for x in arr] )\n\n\n# return number of primes with given permutations below limit\ndef find_prime_kPerm(limit, perms):\n    res = []\n    for k, v in list(cache.items()):\n        if  items_below_limit(v, limit) == perms + 1:\n            res.append(v[0])\n    \n    return [ len(res), min(res), max(res) ] if res else [0, 0, 0]\n", "from itertools import islice, count\n\n#Python cookbook\ndef eratosthenes():\n    D = {}\n    yield 2\n    for q in islice(count(3), 0, None, 2):\n        p = D.pop(q, None)\n        if p is None:\n            D[q*q] = q\n            yield q\n        else:\n            x = p + q\n            while x in D or not (x&1):\n                x += p\n            D[x] = p\n\ndef find_prime_kPerm(n, kPerm):\n    d = {}\n    for p in eratosthenes():\n        if p > n: break\n        k = ''.join(sorted(c for c in str(p)))\n        d[k] = d.get(k, []) + [p]\n\n    r = [min(v) for v in d.values() if len(v) == kPerm+1]\n    return [len(r), min(r) if r else 0, max(r) if r else 0]    ", "from itertools import permutations as perms\ndef prime_seive(n):\n    nums = range(n)\n    for i1 in nums:\n        if i1 > 1:\n            for i2 in range(i1*2,n,i1):\n                nums[i2] = 0\n    return [i for i in nums if i > 1]\n\ndef prime(n):\n    if n % 2 == 0 or n < 3:return n == 2\n    for i in range(3,int(n ** 0.5)+1,2):\n        if n % i == 0:return False\n    return True\n\ndef prime_perms(p,m):\n    ans = []\n    for i in perms(str(p)):\n        s = ''.join(i)\n        num = int(s)\n        if num == p:continue\n        if num < m and prime(num):\n            if len(str(num)) != len(s):continue\n            if num < p:\n                ans = []\n                break\n            if not num in ans:ans += [num]\n    return ans\n\n\ndef find_prime_kPerm(n,k):\n    primes = prime_seive(n)\n    ans = []\n    for p in primes:\n        perm = prime_perms(p,n)\n        l = len(perm)\n        if l == k:\n            ans += [p]\n    return [len(ans),ans[0],ans[-1]] if len(ans) > 0 else [0,0,0]"]