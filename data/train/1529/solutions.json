["#cook your recipe\nfrom math import factorial\ntest_cases = int(input())\nfor _ in range(test_cases):\n   n = int(input())\n   sum1 = 0\n   final_sum = 0\n   num = list(map(int, input().split()))\n   rep_time = factorial(n - 1)\n   rep_count = dict()\n   for i in num:\n      if i in rep_count:\n         rep_count[i] +=1\n      else:\n         rep_count[i] =1\n   for j in rep_count:\n      if rep_count[j] ==1:\n         sum1 +=  j * factorial(n - rep_count[j])\n      else:\n         sum1 +=  j * factorial(n-1)/ factorial(n - rep_count[j])\n   \n   for k in range(n):\n      final_sum += sum1 * (10**k)\n\n   print(int(final_sum))", "#cook your recipe\nfrom math import factorial\ntest_cases = int(input())\nfor _ in range(test_cases):\n   n = int(input())\n   sum1 = 0\n   final_sum = 0\n   num = list(map(int, input().split()))\n   rep_time = factorial(n - 1)\n   rep_count = dict()\n   for i in num:\n      if i in rep_count:\n         rep_count[i] +=1\n      else:\n         rep_count[i] =1\n   for j in rep_count:\n      if rep_count[j] ==1:\n         sum1 +=  j * factorial(n - rep_count[j])\n      else:\n         sum1 +=  j * factorial(n-1)/ factorial(n - rep_count[j])\n   \n   for k in range(n):\n      final_sum += sum1 * (10**k)\n\n   print(int(final_sum))", "# def toString(List): \r\n# \treturn ''.join(List) \r\n \r\n# def permute(a, l, r): \r\n# \tif(l==r): \r\n# \t\tlist_ = []\r\n# \t\tlist_.append(toString(a))\r\n# \t\treturn list_'''\r\n# \t\tprint(toString(a))\t\t\r\n# \telse: \r\n# \t\tfor i in range(l,r+1): \r\n# \t\t\ta[l], a[i] = a[i], a[l] \r\n# \t\t\tpermute(a, l+1, r) \r\n# \t\t\ta[l], a[i] = a[i], a[l]\r\n\r\n# for _ in range(int(input())):\r\n# \tn = int(input())\r\n# \tp = list(map(str , input().split())) \r\n# \tpermute(p, 0, n-1)\r\n'''def permutation(start, end):\r\n    if(end == start):\r\n        #return a\r\n        print(*a)\r\n    for i in range(start, end+1):\r\n        a[i],a[start] = a[start],a[i]\r\n        permutation(start+1, end)\r\n        a[i],a[start] = a[start],a[i]\r\nfor _ in range(int(input())):\r\n\tn = int(input())\r\n\ta = list(map(int,input().split()))\r\n\tpermutation(0,len(a)-1)'''\r\n\t\r\ndef factorial(n): \r\n\r\n\tf = 1\r\n\tif(n == 0 or n == 1): \r\n\t\treturn 1\r\n\tfor i in range(2, n + 1): \r\n\t\tf = f * i \r\n\treturn f \r\n \r\ndef getSum(arr, n): \r\n \r\n\tfact = factorial(n) \r\n\tdigitsum = 0\r\n\tfor i in range(n): \r\n\t\tdigitsum += arr[i] \r\n\tdigitsum *= (fact // n) \r\n\tres = 0\r\n\ti = 1\r\n\tk = 1\r\n\twhile(i <= n): \r\n\t\tres += (k * digitsum) \r\n\t\tk = k * 10\r\n\t\ti += 1\r\n\r\n\treturn res \r\n \r\nfor _ in range(int(input())):\r\n\tn = int(input())\r\n\tarr = list(map(int , input().split()))\r\n\tprint(getSum(arr, n)) ", "# cook your dish here\ntest_case = int(input())\n\nfor i in range(test_case):\n    n = int(input())\n    \n    val = list(map(int, input().split(' ')))\n    \n    fac = 1\n    for j in range(n):\n        fac = fac * (j+1)\n        \n    noOfDigit = fac//n\n    \n    initialSum = 0\n    \n    for j in range(len(val)):\n        initialSum += val[j]\n        \n    initialSum = initialSum*noOfDigit\n    \n    totalSum = 0\n        \n    for j in range(n):\n        totalSum = totalSum + pow(10, j)*initialSum\n        \n    print(totalSum)", "import math\r\nT=int(input())\r\nfor i in range(T):\r\n    N=int(input())\r\n    list=input().split()\r\n    s=0\r\n    k='0'\r\n    for j in range(N):\r\n        list[j]=int(list[j])\r\n        s+=list[j]\r\n    for l in range(N):\r\n        k=k+'1'\r\n    k=int(k)\r\n    c=math.factorial(N-1)\r\n    print(s*c*k)\r\n", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    layers = [int(x) for x in input().split()]\n    times = math.factorial(n-1)\n    d = sum(layers)*times\n    ans = 0\n    k = 1\n    for i in range(n):\n        ans += k*d\n        k *= 10\n    print(ans)\n", "t=int(input())\r\ndef fac(x):\r\n    if x==0:\r\n        return 1\r\n    else:\r\n        return x*fac(x-1)\r\nfor j in range(t):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    s=0\r\n    for i in range(n):\r\n        for j in a:\r\n            s+=(j*10**i)*(fac(n-1))\r\n    print(s)", "try:\r\n    import math\r\n    def getSum(arr, n): \r\n    \r\n        # calculate factorial \r\n        fact = math.factorial(n) \r\n    \r\n        digitsum = 0\r\n        for i in range(n): \r\n            digitsum += arr[i] \r\n        digitsum *= (fact // n) \r\n    \r\n        # Compute result (sum of  \r\n        # all the numbers) \r\n        res = 0\r\n        i = 1\r\n        k = 1\r\n        while i <= n : \r\n            res += (k * digitsum) \r\n            k = k * 10\r\n            i += 1\r\n    \r\n        return res \r\n    \r\n    \r\n    b=int(input())\r\n    \r\n    ls=[]\r\n    \r\n    while(b>0):\r\n        a = int(input())\r\n        \r\n        arr = input()   # takes the whole line of n numbers\r\n        l = list(map(int,arr.split(' ')))\r\n    \r\n    \r\n    # n distinct digits \r\n        b-=1\r\n        n = len(l) \r\n        n=a\r\n        \r\n    \r\n        g=int(getSum(l, n))\r\n        ls.append(g)\r\n    for i in ls:\r\n        print(i)\r\nexcept:\r\n    pass", "# your code goes here.............\n# Python 3 program to find sun of \n# numbers formed by all permutations \n# of given set of digits \n\n# function to calculate factorial \n# of a number \ndef factorial(n): \n\n\tf = 1\n\tif (n == 0 or n == 1): \n\t\treturn 1\n\tfor i in range(2, n + 1): \n\t\tf = f * i \n\treturn f \n\n# Function to calculate sum \n# of all numbers \ndef getSum(arr, n): \n\n\t# calculate factorial \n\tfact = factorial(n) \n\n\t# sum of all the given digits at \n\t# different positions is same and \n\t# is going to be stored in digitsum. \n\tdigitsum = 0\n\tfor i in range(n): \n\t\tdigitsum += arr[i] \n\tdigitsum *= (fact // n) \n\n\t# Compute result (sum of \n\t# all the numbers) \n\tres = 0\n\ti = 1\n\tk = 1\n\twhile i <= n : \n\t\tres += (k * digitsum) \n\t\tk = k * 10\n\t\ti += 1\n\n\treturn res \n\n# Driver Code \ndef __starting_point(): \n\t\n\t# n distinct digits\n\tt=int(input())\n\tfor _ in range(t):\n\t    m=int(input())\n\t    arr = list(map(int,input().split())) \n\t    n = len(arr) \n\n\t# Print sum of all the numbers formed \n\t    print(getSum(arr, n)) \n\n# This code is contributed by ita_c \n\n\n\n\n\n\n__starting_point()", "try:\r\n    import math\r\n    def getSum(arr, n): \r\n    \r\n        # calculate factorial \r\n        fact = math.factorial(n) \r\n    \r\n        digitsum = 0\r\n        for i in range(n): \r\n            digitsum += arr[i] \r\n        digitsum *= (fact // n) \r\n    \r\n        # Compute result (sum of  \r\n        # all the numbers) \r\n        res = 0\r\n        i = 1\r\n        k = 1\r\n        while i <= n : \r\n            res += (k * digitsum) \r\n            k = k * 10\r\n            i += 1\r\n    \r\n        return res \r\n    \r\n    \r\n    b=int(input())\r\n    \r\n    ls=[]\r\n    \r\n    while(b>0):\r\n        a = int(input())\r\n        \r\n        arr = input()   # takes the whole line of n numbers\r\n        l = list(map(int,arr.split(' ')))\r\n    \r\n    \r\n    # n distinct digits \r\n        b-=1\r\n        n = len(l) \r\n        n=a\r\n        \r\n    \r\n        g=int(getSum(l, n))\r\n        ls.append(g)\r\n    for i in ls:\r\n        print(i)\r\nexcept:\r\n    pass", "from collections import defaultdict\r\ndef fac(n):\r\n    if n<=1:\r\n        return 1\r\n    return n*fac(n-1)\r\n\r\nfor i in range (int(input())):\r\n    n = int(input())\r\n    layers = defaultdict(int)\r\n    list_ = list(map(int,input().split()))\r\n    for j in range (n):\r\n        layers[list_[j]] += 1\r\n    sum_ = 0\r\n    for j in sorted(layers):\r\n        sum_ += j\r\n\r\n    sum_ *= fac(len(layers)-1)\r\n    ans = sum_\r\n    for j in range (len(layers)-1):\r\n        ans = ans*10 + sum_\r\n    print(ans)\r\n\r\n    \r\n", "import math\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    alpha=list(map(int,input().split()))\n    beta=math.factorial(n-1)\n    sumfinal=int('1'*n)*sum(alpha)*beta\n    print(sumfinal)\n    \n    \n", "from math import factorial\ntry:\n    test_cases = int(input())\n    while test_cases:\n        test_cases = test_cases -1\n        n=int(input())\n        cakes=list(map(int,input().split()))\n        sum_of_digits=sum(cakes)\n        mul=factorial(n)/n     #multiplier\n        base=sum_of_digits*mul \n        totalsum = 0\n        for k in range(n):\n            totalsum += base*(10**k)\n        print(int(totalsum))\n    \nexcept:\n    pass", "from math import factorial\ntry:\n    test_cases = int(input())\n    while test_cases:\n        test_cases = test_cases -1\n        n=int(input())\n        cakes=list(map(int,input().split()))\n        sum_of_digits=sum(cakes)\n        mul=factorial(n)/n     #multiplier\n        base=sum_of_digits*mul \n        totalsum = 0\n        for k in range(n):\n            totalsum += base*(10**k)\n        print(int(totalsum))\n    \nexcept:\n    pass", "import math\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    grid = [int(i) for i in input().split()]\r\n    sum1 = int('1'*n)*sum(grid)*math.factorial(n-1)\r\n    print(sum1)\r\n", "from math import factorial\ntry:\n    test_cases = int(input())\n    while test_cases:\n        test_cases = test_cases -1\n        n=int(input())\n        cakes=list(map(int,input().split()))\n        sum_of_digits=sum(cakes)\n        mul=factorial(n)/n     #multiplier\n        base=sum_of_digits*mul \n        totalsum = 0\n        for k in range(n):\n            totalsum += base*(10**k)\n        print(int(totalsum))\n    \nexcept:\n    pass", "from math import factorial\ntry:\n    test_cases = int(input())\n    while test_cases:\n        test_cases = test_cases -1\n        n=int(input())\n        cakes=list(map(int,input().split()))\n        sum_of_digits=sum(cakes)\n        mul=factorial(n)/n     #multiplier\n        base=sum_of_digits*mul \n        totalsum = 0\n        for k in range(n):\n            totalsum += base*(10**k)\n        print(int(totalsum))\n    \nexcept:\n    pass", "from math import factorial as fact\ndef _sum(arr, n): \n    f = fact(n)\n    ds = 0\n    for i in range(n):\n        ds += arr[i]\n    ds *= (f // n)\n    res, i, k = 0, 1, 1\n    while i <= n :\n        res += (k * ds)\n        k = k * 10\n        i += 1\n    return res\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(_sum(arr, n))\n", "# cook your dish here\ndef fact(nnn):\n    f=1\n    for i in range(1,nnn+1):\n        f=f*i\n    # print(f)\n    return f\nt=int(input())\nfor i in range(0,t):\n    n=int(input())\n    lis=list(map(int,input().strip().split()))[:n]\n    s=sum(lis)\n    st=\"1\"*n\n    last=int(st)\n    # fac=\n    # print(fact(n-1))\n    ans=fact(n-1)*s*last\n    print(ans)\n\n", "import math\nfor _ in range(int(input())):\n    n=int(input())\n    a=list(map(int,input().split()))\n    f=math.factorial(n) \n    s=0\n    for i in range(n): \n        s=s+a[i] \n    s=s*(f//n) \n    r,i,k=0,1,1\n    while i<=n : \n        r=r+(k*s) \n        k=k*10\n        i=i+1\n    print(r)", "import math\r\nfrom collections import defaultdict\r\nimport itertools\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = [int(x) for x in input().split()]\r\n    total = 0\r\n    tmp = 0\r\n    fact = math.factorial(n)\r\n    for i in range(n):\r\n        tmp+=a[i]\r\n    tmp *=(fact//n)\r\n    i=1\r\n    k=1\r\n    while i<=n:\r\n        total += (k*tmp)\r\n        k*=10\r\n        i+=1\r\n    print(total)", "import math\nt=int(input())\nwhile t>0:\n    n=int(input())\n    a=[int(i) for i in input().split(\" \")]\n    summ=0\n    for i in range(0,n):\n        summ+=math.pow(10,i)\n    summ=sum(a)*summ*math.factorial(n-1)\n    print(int(summ))\n    t-=1", "def factorial(n):\r\n    if n==1:\r\n        return 1\r\n    if n==0:\r\n        return 1\r\n    f=1\r\n    for i in range(2,n+1):\r\n        f=i*f\r\n    return f\r\ndef cakes(A):\r\n    num=sum(A)\r\n    fact=factorial(len(A)-1)\r\n    num=num*fact\r\n    res=0\r\n    n=len(A)\r\n    i=1\r\n    k=1\r\n    while i<=n:\r\n        res+=num*k\r\n        k=10*k\r\n        i+=1\r\n    return res\r\nt=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    A=[int(i) for i in input().split()][:n]\r\n    print(cakes(A))", "import math\r\ndef fun():\r\n\tT=int(input())\r\n\tans=[]\r\n\tfor i in range(T):\r\n\t\tT=int(input())\r\n\t\tl=list(input().split())\r\n\t\tl=[int(x) for x in l]\r\n\t\tx=[]\r\n\t\tfor j in range(len(l)):\r\n\t\t\tx+=[math.factorial(len(l)-1)*k*math.pow(10,j) for k in l]\r\n\t\t\t#print(x)\r\n\t\tx1=[int(j) for j in x]\r\n\t\tx=sum(x1)\r\n\t\t#print(x)\r\n\t\tans.append(x)\r\n\t\r\n\tfor j in ans:\r\n\t\tprint(j)\r\n\t\r\nfun()\r\n"]