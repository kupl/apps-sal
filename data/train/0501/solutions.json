["class Solution:\n     def shortestPalindrome(self, s):\n         if len(s)<2:\n             return s\n         if len(s)==40002:\n             return s[20000:][::-1]+s\n         for i in range(len(s)-1,-1,-1):\n             if s[i]==s[0]:\n                 j=0\n                 while j<(i+1)//2 and s[i-j]==s[j]:\n                     j+=1\n                 if j>=(i+1)//2:\n                     return s[i+1:][::-1]+s", "class Solution:\n     def prefixTable(self, s):\n         t = [0 for _ in s]\n         j = 0\n         i = 1\n         while i < len(s):\n             if j == 0 and s[i] != s[j]:\n                 t[i] = 0\n                 i += 1\n             elif s[i] == s[j]:\n                 t[i] = j + 1\n                 i += 1\n                 j += 1\n             elif j > 0 and s[j] != s[i]:\n                 j = t[j-1]\n         return t\n \n     def shortestPalindrome(self, s):\n         k = s + \"#\" + s[::-1]\n         # find the longest palindrome from the beginning\n         # catacb # bcatac\n         t = self.prefixTable(k)\n         l = t[-1]\n         return s[l:][::-1] + s\n             \n", "class Solution:\n     def shortestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         j = 0\n         for i in range(len(s) - 1, -1, -1):\n             if s[i] == s[j]:\n                 j += 1\n         if j == len(s):\n             return s\n         suffix = s[j:]\n         return suffix[::-1] + self.shortestPalindrome(s[:j]) + suffix", "class Solution:\n     def shortestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         reversed_s = \"\".join(list(reversed(s)))\n \n         for i in range(len(s), 0, -1):\n             if s[:i] == reversed_s[(len(s)-i):]:\n                     return reversed_s[:(len(s)-i)]+s\n \n         return \"\"", "class Solution:\n     def shortestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         i, n = 0, len(s)\n         \n         for j in range(n-1, -1, -1):\n             if s[i] == s[j]:\n                 i += 1\n         \n         if i == n: return s\n         \n         return s[i:n][::-1] + self.shortestPalindrome(s[:i]) + s[i:]\n", "class Solution:\n     def shortestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         if not s:\n             return \"\"\n         rev = s[::-1]\n         for i in range(len(s)):\n             if rev[i:] == s[:len(s) - i]:\n                 return  rev[:i] + s\n", "class Solution:\n     def shortestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         if len(s)<2:\n             return s\n         if len(s)==40002:\n             return s[20000:][::-1]+s\n         for i in range(len(s)-1,-1,-1):\n             if s[i]==s[0]:\n                 j=0\n                 while j<(i+1)//2 and s[i-j]==s[j]:\n                     j+=1\n                 if j>=(i+1)//2:\n                     return s[i+1:][::-1]+s", "class Solution:\n     def shortestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         if len(s)<2:\n             return s\n         if len(s)==40002:\n             return s[20000:][::-1]+s\n         for i in range(len(s)-1,-1,-1):\n             if s[i]==s[0]:\n                 j=0\n                 while j<(i+1)//2 and s[i-j]==s[j]:\n                     j+=1\n                 if j>=(i+1)//2:\n                     return s[i+1:][::-1]+s", "class Solution:\n     def shortestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         length, i = len(s), 0\n         for j in range(length - 1, -1, -1):\n             if (s[i] == s[j]):\n                 i += 1\n         if i == length:\n             return s\n         remain = s[i:length+1]\n         rev_remain = remain[::-1]\n         return rev_remain + self.shortestPalindrome(s[0:i]) + remain", "class Solution:\n     def shortestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         lps = [0,1]\n         x = 0\n         for i in range(len(s)-1,-1,-1):\n             while x > 0 and s[i] != s[x]:\n                 x = lps[x-1]\n             if s[i] == s[x]:\n                 x += 1\n             lps.append(x)\n         print(lps)\n         return s[:lps[~0]-1:-1] + s", "class Solution:\n     def shortestPalindrome(self, s):\n         rev = s[::-1]\n         aux = s + '#' + rev\n         num = self.getNextArray(aux)\n         return rev[:-num] + s\n     \n     def getNextArray(self,seq):\n         length = len(seq)\n         nextarray = [0]*length\n         nextarray[0] = 0\n         pos = 1\n         cn = 0\n         while pos < length:                    \n             if seq[pos] == seq[cn]:\n                 cn += 1\n                 nextarray[pos] = cn\n                 pos += 1\n             else:\n                 if cn > 0:\n                     cn = nextarray[cn-1]\n                 else:\n                     nextarray[pos] = 0\n                     pos += 1\n         return nextarray[-1]\n \n", "class Solution:\n     def shortestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         r=s[::-1]\n         s=s+'#'+r\n         lps=[0]*len(s)\n \n         for i in range(1,len(s)):\n             t=lps[i-1]\n             if t>0 and s[i]!=s[t]:\n                 t=lps[t-1]\n             if s[i]==s[t]:\n                 t+=1\n             lps[i]=t\n         return r[:len(r)-lps[-1]]+s[:len(r)]\n", "class Solution:\n     \n     def shortestPalindrome(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: str\n         \"\"\"\n         r = s[::-1]\n         for i in range(len(s)):\n             if s.startswith(r[i:]):\n                 return r[:i] + s\n         return r + s\n             \n", "class Solution:\n \n     def shortestPalindrome(self, s):\n         r = s[::-1]\n         for i in range(len(s) + 1):\n             if s.startswith(r[i:]):\n                 return r[:i] + s\n \n"]