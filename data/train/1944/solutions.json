["class Solution:\n     def calc(self, part):\n         part += \"+\" ## added tmp symbol in the end to sum last item within the loop\n         start = x = n = 0\n         coeff = 1\n         for end, char in enumerate(part):\n             # print(\"charIdx:\", equation[end], \"char: \", char, char == \"+\" or char == \"-\", \"slice: \", equation[start:end])\n             if char == \"+\" or char == \"-\":\n                 var = part[start:end]\n                 if var == \"\":\n                     continue\n                 if \"x\" in var:\n                     var = var[:-1]\n                     if var in [\"\", \"+\"]:\n                         var = 1\n                     elif var == \"-\":\n                         var = -1\n                     x += int(var) * coeff\n                     start = end\n                 else:\n                     n += int(var) * coeff\n                     start = end\n         return x, n\n     \n     def solveEquation(self, equation):\n         \"\"\"\n         :type equation: str\n         :rtype: str\n         \"\"\"\n         # how big is N\n         # time vs. space complexity?\n         \n         # split by \"=\" to left and right; time complexity: O(N)\n         # sums Xs and consts on both sides (left and right)\n         # take a difference b/w the sides' sums\n         # simplify dividing by X's coeff\n         # if x==0 and n==0 on the other - infinite\n         # if x==0 and a constant on the other - no solution\n         # if x on one side, and a constant on the other - solution\n         \n         # test: 2-x+2x-x-x+1=x\n         # test2: \"x+5-3+x=6+x-2\"\n         # test2: \"+5-3+x=6+x-2\"\n         # -x=-1\n         \n         left, right = equation.split(\"=\")\n         x1, n1 = self.calc(left) # O(leftN)\n         x2, n2 = self.calc(right) # O(rightN)\n         x, n = x1 - x2, n1 - n2\n         n = n / x if (x != 0) else n\n         x = 1 if (x != 0) else x\n         if x == 0 and n != 0:\n             return \"No solution\"\n         if x == 0 and n == 0:\n             return \"Infinite solutions\"\n         return \"x={}\".format(int(-n))\n         \n         # time complexity O(N)\n", "class Solution:\n     def solveEquation(self, equation):\n         \"\"\"\n         :type equation: str\n         :rtype: str\n         \"\"\"\n         left_x = right_x = 0\n         left_const = right_const = 0\n         \n         cur_left = True\n         cur_num = 0\n         cur_sign = 1\n         has_num = False\n         for c in equation:\n             if c == \"=\":\n                 left_const += cur_num * cur_sign\n                 cur_num = 0\n                 cur_sign = 1\n                 cur_left = False\n                 has_num = False\n             elif c in '+-':\n                 if cur_left:\n                     left_const += cur_num * cur_sign\n                 else:\n                     right_const += cur_num * cur_sign\n                 cur_num = 0\n                 cur_sign = 1 if c == '+' else -1\n                 has_num = False\n             elif c == 'x':\n                 if cur_left:\n                     left_x += cur_sign* (cur_num if has_num else 1)\n                 else:\n                     right_x += cur_sign* (cur_num if has_num else 1)\n                 cur_num = 0\n                 has_num = False\n             else:\n                 cur_num = cur_num * 10 + int(c)\n                 has_num = True\n             \n             # print(left_x, right_x, left_const, right_const, cur_num, cur_sign)\n         \n         right_const += cur_num*cur_sign\n         left_x -= right_x\n         right_const -= left_const\n         \n         if left_x == 0 and right_const == 0:\n             return \"Infinite solutions\"\n         elif left_x == 0 and right_const != 0:\n             return \"No solution\"\n         else:\n             return \"x=\" + str(int(right_const/left_x))", "class Solution:\n     def solveEquation(self, equation):\n         l, r = equation.split(\"=\")\n         ret = self.compute(l)\n         lnum, lx = ret[0], ret[1]\n         ret = self.compute(r)\n         rnum, rx = ret[0], ret[1]\n         if lx == rx and lnum - rnum == 0:\n             return \"Infinite solutions\"\n         elif lx == rx and lnum - rnum != 0:\n             return \"No solution\"\n         else:\n             if rx > lx:\n                 return \"x=\" + str(int((lnum - rnum)/(rx - lx)))\n             else:\n                 return \"x=\" + str(int((rnum - lnum)/(lx - rx)))\n             \n         print((lx, lnum))\n         \n     def compute(self, eq):\n         val = ''\n         s = '+'\n         eq =  eq + '+'\n         num, x = 0,0\n         for c in eq:\n             if c == 'x':\n                 if val == '':\n                     val = '1'\n                 if s =='+':\n                     x += int(val)\n                 else:\n                     x -= int(val)\n                 val = ''\n             elif c == '+' or c == '-':\n                 if val != '' and s == '+':\n                     num += int(val)\n                 elif val != '' and s == '-':\n                     num -= int(val)\n                 s = c\n                 val = ''\n \n             else:\n                 val += c\n         return num, x\n", "class Solution:\n     lx = 0\n     lc = 0\n     rx = 0\n     rc = 0\n     def solveEquation(self, equation):\n         \"\"\"\n         :type equation: str\n         :rtype: str\n         \"\"\"\n         self.lx = 0\n         self.lc = 0\n         self.rx = 0\n         self.rc = 0\n         size = len(equation)\n         l=0 \n         r=0\n         left=True\n         for i in range(1,size):\n             #print(i)\n             if equation[i] == \"=\":\n                 l=r\n                 r=i+1\n                 self.lastEq(equation[l:r-1],left)\n                 left=False\n                 continue\n             if equation[i] in {\"+\",\"-\"}:\n                 if equation[r:i] in {\"+\",\"-\",\"\"}:\n                     continue\n                 l=r\n                 r=i\n                 self.lastEq(equation[l:r],left)\n             if i == size-1:\n                 l=r\n                 r=i\n                 self.lastEq(equation[l:r+1],left)\n             \n         #print(str(self.lx)+\"x\"+\" \"+str(self.lc) +\" = \" + str(self.rx) + \"x \" + str(self.rc))\n         x = self.lx-self.rx\n         c = self.rc - self.lc\n         if x == 0 and c == 0:\n             return \"Infinite solutions\"\n         if x == 0:\n             return \"No solution\"\n         return \"x=\"+str(int(c/x))\n     \n     def lastEq(self,s,left):\n         print(s)\n         if \"x\" in s:\n             if s[0]!='-':\n                 if left:\n                     if s in {\"x\",\"+x\"}:\n                         self.lx+=1\n                     else:\n                         self.lx += float(s[:-1])\n                 else:\n                     if s in {\"x\",\"+x\"}:\n                         self.rx+=1\n                     else:\n                         self.rx += float(s[:-1])\n             else:\n                 if left:\n                     if s in {\"x\",\"-x\"}:\n                         self.lx-=1\n                     else:\n                         self.lx -= float(s[1:-1])\n                 else:\n                     if s in {\"x\",\"-x\"}:\n                         self.rx-=1\n                     else:\n                         self.rx -= float(s[1:-1])\n         else:\n             if s[0]!='-':\n                 if left:\n                     self.lc += float(s)\n                 else:\n                     self.rc += float(s)\n             else:\n                 if left:\n                     self.lc -= float(s[1:])\n                 else:\n                     self.rc -= float(s[1:])\n         print((str(self.lx)+\"x\"+\" \"+str(self.lc) +\" = \" + str(self.rx) + \"x \" + str(self.rc)))\n", "class Solution:\n     def solveEquation(self, equation):\n         \"\"\"\n         :type equation: str\n         :rtype: str\n         \"\"\"\n         count_x = count_integer = 0\n         left, right = equation.replace('-', ' -').replace('+', ' +').split('=')\n         left_items = left.lstrip().split(' ')\n         right_items = right.lstrip().split(' ')\n         for l in left_items:\n             if l[-1] == 'x':\n                 if l[:-1] == '' or l[:-1] == '+':\n                     count_x += 1\n                 elif l[:-1] == '-':\n                     count_x -= 1\n                 else:\n                     count_x += int(l[:-1])\n             else:\n                 count_integer -= int(l)\n         for r in right_items:\n             if r[-1] == 'x':\n                 if r[:-1] == '' or r[:-1] == '+':\n                     count_x -= 1\n                 elif r[:-1] == '-':\n                     count_x += 1\n                 else:\n                     count_x -= int(r[:-1])\n             else:\n                 count_integer += int(r)\n         if count_x == 0 and count_integer != 0:\n             return 'No solution'\n         elif count_x == 0 and count_integer == 0:\n             return 'Infinite solutions'\n         else:\n             return 'x=' + str(int(count_integer / count_x))\n", "import re\n class Solution:\n     def solveEquation(self, equation):\n         \"\"\"\n         :type equation: str\n         :rtype: str\n         \"\"\"\n         # Gets sum of x's in an eq\n         def get_x_sum(s):\n \n             total = 0\n             curr = \"\"\n             sign = \"+\"\n             for c in s:\n                 if c == \"x\":\n                     if curr == \"\":\n                         total += int(sign+\"1\")\n                     else:\n                         total += int(sign+curr)\n                 elif c == \"+\" or c == \"-\":\n                     curr = \"\"\n                     sign = c\n                 else:\n                     curr += c\n             \n             return total\n         \n         # Gets sum of ints in an eq\n         def get_int_sum(s):\n             total = 0\n             curr = \"\"\n             sign = \"+\"\n             for c in s:\n                 if c == \"x\":\n                     curr = \"\"\n                     sign = \"+\"\n                 elif c == \"+\" or c == \"-\":\n                     if curr != \"\":\n                         total += int(sign+curr)\n                         curr = \"\"\n                     sign = c\n                 else:\n                     curr += c\n             \n             if curr != \"\":\n                 total += int(sign+curr)\n             return total\n             \n         lhs,rhs = equation.split(\"=\")\n         \n         lhs_sum_x = get_x_sum(lhs)\n         lhs_sum_int = get_int_sum(lhs)\n         rhs_sum_x = get_x_sum(rhs)\n         rhs_sum_int = get_int_sum(rhs)\n         \n         if lhs_sum_int == rhs_sum_int:\n             if lhs_sum_x == rhs_sum_x:\n                 return \"Infinite solutions\"\n             return \"x=0\"\n         else:\n             if lhs_sum_x == rhs_sum_x:\n                 return \"No solution\"\n             \n             diff_x = lhs_sum_x-rhs_sum_x\n             diff_int = rhs_sum_int - lhs_sum_int\n             return \"x=\" + str(diff_int // diff_x)\n             \n             \n         \n         \n         \n", "class Solution:\n     def solveEquation(self, equation):\n         \"\"\"\n         :type equation: str\n         :rtype: str\n         \"\"\"\n         a=0\n         b=0\n         coeff=''\n         right=1\n         for i in equation+'+':\n             if (i=='+' or i=='-' or i=='=') and coeff!='':\n                 if 'x' in coeff:\n                     coeff=coeff.strip('x')\n                     if coeff=='-':\n                         a-= right\n                     elif coeff=='+' or coeff=='':\n                         a+= right\n                     else:\n                         a+= (int(coeff.strip('x'))*right)\n                 else:\n                     b-= (int(coeff)*right)\n                 coeff=i\n                 if i=='=':\n                     right=-1\n                     coeff=''\n             else:\n                 coeff+=i\n #            print(i,a,b,coeff)\n         if a==0 and b==0:\n             return \"Infinite solutions\"\n         elif a==0:\n             return \"No solution\"\n         elif b==0:\n             return \"x=0\"\n         else:\n             return \"x=\"+str(int(b/a))\n", "class Solution:\n     def solveEquation(self, equation):\n         \"\"\"\n         :type equation: str\n         :rtype: str\n         \"\"\"\n         [left,right]=equation.split('=')\n         l=[0,0]\n         temp=''\n         flag=1\n         if left[0]=='-':\n             flag=-1\n             left=left[1:]\n         for i in left:\n             if i!='+' and i!='-':temp+=i\n             else:\n                 if temp[-1]!='x':\n                     l[1]+=flag*int(temp)\n                 else:\n                     if len(temp)==1:l[0]+=flag\n                     else:l[0]+=flag*int(temp[:-1])\n                 if i=='+':flag=1\n                 if i=='-':flag=-1\n                 temp=''\n                 print(l)\n         if temp[-1]!='x':\n             l[1]+=flag*int(temp)\n         else:\n             if len(temp)==1:l[0]+=flag\n             else:l[0]+=flag*int(temp[:-1])\n         temp=''\n         r=[0,0]\n         flag=1\n         if right[0]=='-':\n             flag=-1\n             right=right[1:]\n         for i in right:\n             if i!='+' and i!='-':temp+=i\n             else:\n                 if temp[-1]!='x':\n                     r[1]+=flag*int(temp)\n                 else:\n                     if len(temp)==1:r[0]+=flag\n                     else:r[0]+=flag*int(temp[:-1])\n                 if i=='+':flag=1\n                 if i=='-':flag=-1\n                 temp=''\n         if temp[-1]!='x':\n             r[1]+=flag*int(temp)\n         else:\n             if len(temp)==1:r[0]+=flag\n             else:r[0]+=flag*int(temp[:-1])\n         temp=''\n         print(l,r)\n         if l[0]==r[0]:\n             if l[1]==r[1]:return 'Infinite solutions'\n             else:return 'No solution'\n         else:\n             ans=int((r[1]-l[1])/(l[0]-r[0]))\n             return 'x='+str(ans)"]