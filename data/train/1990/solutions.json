["class Solution:\n     def findLongestChain(self, pairs):\n         \"\"\"\n         :type pairs: List[List[int]]\n         :rtype: int\n         \"\"\"\n         pairs = sorted(pairs,key=lambda x:x[1])\n         res = 1\n         first = pairs[0]\n         for i in pairs[1:]:\n             if first[-1] < i[0]:\n                 res += 1\n                 first = i\n         return res\n", "class Solution:\n     def findLongestChain(self, pairs):\n         \"\"\"\n         :type pairs: List[List[int]]\n         :rtype: int\n         \"\"\"\n         cur, res = float('-inf'), 0\n         for x, y in sorted(pairs, key=operator.itemgetter(1)):\n             if cur < x:\n                 cur = y\n                 res += 1\n         return res\n", "class Solution:\n     def findLongestChain(self, pairs):\n         \"\"\"\n         :type pairs: List[List[int]]\n         :rtype: int\n         \"\"\"\n         # pairs = sorted(pairs, key=lambda x: x[0]) # \u52a8\u6001\u89c4\u5212, \u5c45\u7136\u4e5f\u8d85\u65f6\u4e86\n         # dp = [1] * len(pairs)\n         # for i in range(len(pairs)):\n         #     for j in range(i):\n         #         if pairs[j][1] < pairs[i][0]:\n         #             dp[i] = max(dp[i], dp[j]+1)\n         # return max(dp)\n         \n         pairs.sort(key=lambda x: x[1])\n         cur = pairs[0][0] - 1\n         ans = 0\n         for a, b in pairs:\n             if cur < a:\n                 cur = b\n                 ans += 1\n         return ans\n", "class Solution:\n     def findLongestChain(self, pairs):\n         \"\"\"\n         :type pairs: List[List[int]]\n         :rtype: int\n         \"\"\"\n         if not pairs:\n             return 0\n         \n         pairs.sort(key= lambda x: x[1])        \n         size = 1\n         prev = pairs[0]\n         \n         for p in pairs[1:]:\n             if prev[1] < p[0]:\n                 size += 1\n                 prev = p\n         return size", "class Solution:\n     def findLongestChain(self, pairs):\n         \"\"\"\n         :type pairs: List[List[int]]\n         :rtype: int\n         \"\"\"\n         pairs = sorted([tuple(x) for x in pairs], key=lambda i: i[1])\n         current, count = -0x3f3f3f3f, 0\n         for a, b in pairs:\n             if a > current:\n                 current = b\n                 count += 1\n         return count\n", "class Solution:\n     def findLongestChain(self, pairs):\n         \"\"\"\n         :type pairs: List[List[int]]\n         :rtype: int\n         \"\"\"\n         pairs=sorted(pairs,key=lambda t:t[0])\n         p,L=None,0\n         for t in sorted(pairs,key=lambda t:t[1]):\n             if p is None or t[0]>p: p,L=t[1],L+1\n         return L", "import operator\n class Solution:\n     def findLongestChain(self, pairs):\n         \"\"\"\n         :type pairs: List[List[int]]\n         :rtype: int\n         \"\"\"\n         pairs.sort(key=operator.itemgetter(1, 0))\n         maxNum = -float('inf')\n         ret = 0\n         for pair in pairs:\n             if pair[0] > maxNum:\n                 maxNum = pair[1]\n                 ret += 1\n         return ret", "class Solution(object):\n     def findLongestChain(self, pairs):\n \n         pairs = sorted(pairs, key = lambda x:x[1])\n \n         count = 1\n         curr = pairs[0]\n         for pair in pairs:\n             if curr[1] < pair[0]:\n                 count += 1\n                 curr = pair\n         return count", "class Solution:\n     def findLongestChain(self, pairs):\n         \"\"\"\n         :type pairs: List[List[int]]\n         :rtype: int\n         \"\"\"\n         queue = collections.deque(sorted(pairs, key=lambda pair: pair[1]))\n         \n         count = 0\n         \n         while len(queue) > 0:\n           count += 1\n           curr = queue.popleft()\n           while len(queue) > 0 and queue[0][0] <= curr[1]:\n             queue.popleft()\n         \n         return count\n           \n         \n"]