["class Solution:\n    def isValid(self, s: str) -> bool:\n        if not s:\n            return True\n        return self.isValid(s.replace('abc', '')) if s.replace('abc', '') != s else False\n", "class Solution:\n    def isValid(self, S: str) -> bool:\n        stack = []\n        for i in S:\n            if i == 'c':\n                if stack[-2:] !=['a','b']:\n                    return False\n                stack.pop()\n                stack.pop()\n            else:\n                stack.append(i)\n        return not stack\n        \n        \n        \n        \n", "class Solution:\n    def isValid(self, S: str) -> bool:\n        l = ''\n        for c in S:\n            l += c\n            if l[-3:]== 'abc':\n                l = l[:-3]\n        return not l", "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = collections.deque()\n        for char in s:\n            if char == 'c' and len(stack) >= 2:\n                if stack[-1] == 'b' and stack[-2] == 'a':\n                    stack.pop()\n                    stack.pop()\n            else:\n                stack.append(char)\n        if len(stack) == 0:\n            return True\n        return False", "class Solution:\n    def isValid(self, s: str) -> bool:\n        \n        \n        stack = []\n        \n        for c in s:\n            if c == 'c':\n                if ''.join(stack[-2:]) == 'ab':\n                    stack.pop()\n                    stack.pop()\n                    continue\n            stack.append(c)\n        \n        return not stack", "class Solution:\n    def isValid(self, s: str) -> bool:\n        if len(s) % 3 != 0:\n            return False\n        if len(s) == 0:\n            return True\n        stack = []\n        for i in s:\n            if i != 'c':\n                stack.append(i)\n            elif len(stack) >= 2 and stack[-1] == 'b' and stack[-2] == 'a':\n                stack.pop()\n                stack.pop()\n            else:\n                stack.append(i)\n        if len(stack) == 0:\n            return True\n        return False", "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for ch in s:\n            if ch == 'c':\n                if len(stack) > 1 and stack[-1] == 'b' and stack[-2] == 'a':\n                    stack.pop()\n                    stack.pop()\n            else:\n                stack.append(ch)\n        return not stack", "class Solution:\n    base = 'abc'\n    base_len = 3\n    \n    def isValid(self, S: str) -> bool:\n        stack = []\n        for c in S:\n            stack.append(c)\n            if len(stack) >= 3:\n                if stack[-1] == 'c' and stack[-2] == 'b' and stack[-3] == 'a':\n                    stack.pop()\n                    stack.pop()\n                    stack.pop()\n        return len(stack) == 0\n            \n#             if not stack:\n#                 stack.append(c)\n#             else:\n", "from collections import deque\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stk = deque()\n        for st in s:\n            stk.append(st)\n            if len(stk) >= 3:\n                if stk[-1]=='c' and stk[-2]=='b' and stk[-3]=='a':\n                        for i in range(3):\n                            stk.pop()\n        return len(stk)==0\n", "# class Solution:\n#     def isValid(self, s: str) -> bool:\n#         element = 0\n#         lg = len(s)\n#         for j in range(lg):\n#             element += 1\n#             if element >= 3:\n#                 if s[2]=='c' and s[1]=='b' and s[0]=='a':\n#                     for i in range(2,-1,-1):\n#                         del s[i]\n\n#         return len(s)==0\n            \nfrom collections import deque\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stk = deque()\n        for st in s:\n            stk.append(st)\n            if len(stk) >= 3:\n                if stk[-1]=='c' and stk[-2]=='b' and stk[-3]=='a':\n                        for i in range(3):\n                            stk.pop()\n        return len(stk)==0\n", "class Solution:\n    def isValid(self, s: str) -> bool:\n        LAST_THREE = ['a','b','c']\n        stack = [] \n        \n        for index, _chr in enumerate(s):\n            stack.append(_chr)\n            if stack[-3:] == LAST_THREE:\n                stack.pop()\n                stack.pop()\n                stack.pop()\n                \n        return len(stack) == 0", "class Solution:\n    def isValid(self, s: str) -> bool:\n        rtn =''\n        for i,char in enumerate(s):\n            if char == 'a':\n                rtn = rtn[:i] + 'abc' + rtn[i:]\n        return rtn == s\n                    \n#             aabcbc,...abcabcababcc\n", "class Solution:\n    def isValid(self, s: str) -> bool:\n        cnt = collections.Counter()\n        stack = []\n        for c in s:\n            cnt[c] += 1\n            if not cnt['a'] >= cnt['b'] >= cnt['c']:\n                return False\n            stack.append(c)\n            while len(stack)>=3 and stack[-1]=='c' and stack[-2]=='b' and stack[-3]=='a':\n                stack = stack[:-3]\n            #print(stack)\n        if stack:\n            return False\n        else:\n            return True\n", "class Solution:\n    def isValid(self, s: str) -> bool:\n        cnt = collections.Counter()\n        stack = []\n        for c in s:\n            cnt[c] += 1\n            if not cnt['a'] >= cnt['b'] >= cnt['c']:\n                return False\n            if c == 'c':\n                if len(stack)>=2:\n                    if stack[-1]=='b' and stack[-2]=='a':\n                        stack.pop()\n                        stack.pop()\n                    else:\n                        return False\n            else:\n                stack.append(c)\n        return not stack\n", "class Solution:\n    def isValid(self, s: str) -> bool:\n        while s:\n            if 'abc' not in s:\n                return False\n            j = 0\n            while j < len(s) - 2:\n                if s[j:j+3] == 'abc':\n                    s = s[:j] + s[j+3:]\n                else:\n                    j += 1\n        return True", "class Solution:\n    def isValid(self, s: str) -> bool:\n        \n        \n        dic = collections.defaultdict(list)\n        \n        for i, c in enumerate(s):\n            dic[c].append(i)\n        \n        t = ''\n        for i in dic['a']:\n            t = t[:i] + 'abc' + t[i:]\n        \n        return t == s", "class Solution:\n    def isValid(self, s: str) -> bool:\n        l = len(s)\n        f = 0\n        while s:\n            i = 0\n            f = 0\n            while i<l:\n                if s[i]=='a' and i+1<l and s[i+1]=='b' and i+2<l and s[i+2]=='c':\n                    s = s[:i]+s[i+3:]\n                    l-=3\n                    f = 1\n                else:\n                    i+=1\n            if f==0 and l!=0 and s!='':\n                return False\n        return True\n", "class Solution:\n    def isValid(self, s: str) -> bool:\n        while s:\n            tmp=s.replace('abc','')\n            if tmp==s:break\n            s=tmp\n        return not s", "class Solution:\n    def isValid(self, s: str) -> bool:\n        cnt = collections.Counter()\n        stack = []\n        for c in s:\n            cnt[c] += 1\n            if not cnt['a'] >= cnt['b'] >= cnt['c']:\n                return False\n            stack.append(c)\n            while len(stack)>=3 and stack[-1]=='c' and stack[-2]=='b' and stack[-3]=='a':\n                for _ in range(3):\n                    stack.pop()\n            #print(stack)\n        if stack:\n            return False\n        else:\n            return True\n", "class Solution:\n    def isValid(self, s: str) -> bool:\n        findVal = s.find('abc')\n        while findVal != -1:\n            s = s[:findVal] + s[findVal+3:]\n            findVal = s.find('abc')\n        return s==''", "class Solution:\n    def isValid(self, s: str) -> bool:\n        cnt = collections.Counter()\n        stack = []\n        for c in s:\n            cnt[c] += 1\n            if not cnt['a'] >= cnt['b'] >= cnt['c']:\n                return False\n            stack.append(c)\n            while ''.join(stack[-3:]) == 'abc':\n                stack = stack[:-3]\n            #print(stack)\n        if stack:\n            return False\n        else:\n            return True\n", "class Solution:\n    def isValid0(self, S: str) -> bool:\n        \n        if len(S)<3:\n            return False\n        \n        if len(S) == 3:\n            if S == 'abc':\n                return True\n            else:\n                return False\n        \n        # find 'abc'\n        i=0\n        while i<len(S) and S[i:i+3] != 'abc':\n            i += 1\n        \n        if S[i:i+3] == 'abc':\n            new_S = S[:i] + S[i+3:]\n            return self.isValid(new_S)\n        else:\n            return False\n        \n    def isValid(self, S: str) -> bool:\n        \n        stack = []\n        for c in S:\n            if len(stack) < 2:\n                stack.append(c)\n            else:\n                if stack[-2]+ stack[-1] + c =='abc':\n                    stack.pop()\n                    stack.pop()\n                else:\n                    stack.append(c)\n        \n        if len(stack) == 0:\n            return True\n        else:\n            return False\n        \n        \n        \n        \n", "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack=[]\n        i=0\n        while(i<len(s) or (stack and len(stack)>2 and stack[-3:]==['a','b','c'])):\n            while(stack and len(stack)>2 and stack[-3:]==['a','b','c']):\n                \n                stack.pop()\n                stack.pop()\n                stack.pop()\n            if i<len(s):\n                stack.append(s[i])\n                i+=1\n        #print('stack',stack)\n        if not stack:\n            return True\n        return False", "class Solution:\n    def isValid(self, s: str) -> bool:\n        while True:\n            ns = s.replace('abc', '')\n            if ns == '':\n                return True\n            if ns == s:\n                return False\n            s = ns", "class Solution:\n    def isValid(self, s: str) -> bool:\n        indicesToDelete = set()\n        for i in range(len(s)-2):\n            substr = s[i:i+3]\n            if substr =='abc':\n                indicesToDelete.add(i)\n                indicesToDelete.add(i+1)\n                indicesToDelete.add(i+2)\n        newS = ''\n        for i in range(len(s)-1,-1,-1):\n            if i not in indicesToDelete:\n                newS += s[i]\n        s = newS[::-1]\n        left = 0\n        right = len(s) -1\n\n        while left < right:\n            if s[left] =='a' and s[right] =='c':\n                if s[left+1] =='b' and s[left+2] =='c':\n                    left +=3\n                elif s[right-1] =='b' and s[right-2] =='a':\n                    right -=3\n                elif s[left+1] == 'b':\n                    left +=2\n                    right -=1\n                elif s[right-1] =='b':\n                    left +=1\n                    right -=2\n                else:\n                    return False\n            else:\n                return False\n        return True\n", "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for i in range(len(s)):\n            if stack == []:\n                stack.append([])\n                stack[-1].append(ord(s[i]))\n            elif stack[-1][-1] + 1 == ord(s[i]):\n                stack[-1].append(ord(s[i]))\n            else:\n                stack.append([ord(s[i])])\n                \n            if stack[-1] == [ord('a'), ord('b'), ord('c')]:\n                stack.pop()\n        return stack == []\n            \n", "class Solution:\n    def isValid(self, S: str) -> bool:\n        i = S.find('abc')\n        while i != -1:\n            S = S[:i] + S[i+3:]\n            i = S.find('abc')\n        return not S\n", "class Solution:\n    def isValid(self, s: str) -> bool:\n        while len(s) > 3:\n            i = s.find('abc')\n            if i == -1:\n                return False\n            s = s[:i] + s[i + 3:]\n        return not s or s == 'abc'", "class Solution:\n    def isValid(self, S: str) -> bool:\n        stack = []\n        for c in S:\n            stack.append(c)\n            if ''.join(stack[-3:]) == 'abc':\n                stack = stack[:-3]\n        return len(stack) == 0", "class Solution:\n    def isValid(self, S: str) -> bool:\n        stack = []\n        for c in S:\n            stack.append(c)\n            while stack and stack[-1] == 'c' and len(stack) >= 3 and stack[-2] == 'b' and stack[-3] == 'a':\n                stack = stack[:-3]\n        \n        return not stack", "class Solution:\n    def isValid(self, s: str) -> bool:\n        while s.find('abc') > -1:\n            i = s.find('abc')\n            s = s[:i] + s[i+3:]\n        return s == ''\n        \n", "class Solution:\n    def isValid(self, s: str) -> bool:\n        while s.find('abc') >= 0:\n            s = s.replace('abc', '')\n        return s == ''", "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for c in s:\n            stack.append(c)\n            while ''.join(stack[-3:]) == 'abc':\n                stack = stack[:-3]\n            #print(stack)\n        if stack:\n            return False\n        else:\n            return True\n", "class Solution:\n    def isValid(self, s: str) -> bool:\n        s = list(s)\n        left = 0\n        while len(s) > 2 and left < len(s)-2:\n            if s[left:left+3] == ['a', 'b', 'c']:\n                s.pop(left+2)\n                s.pop(left+1)\n                s.pop(left)\n                left -= 2\n            else:\n                left += 1\n        if s:\n            return False\n        else:\n            return True\n", "class Solution:\n    def isValid(self, S: str) -> bool:\n        st = []\n        for i, s in enumerate(S):\n            st.append(s)\n            while st[-3:] == ['a','b','c']:\n                st = st[:-3]\n        return len(st) == 0", "class Solution:\n    def isValid(self, S: str) -> bool:\n        stack = []\n        for i in S:\n            if i == 'c':\n                if stack[-2:] != ['a', 'b']:\n                    return False\n                stack.pop()\n                stack.pop()\n            else:\n                stack.append(i)\n        return not stack\n", "'''\nabc abc\na abc bc\nab abc c\n\nKeep a stack that remembers the current letter for each depth level\n\nfor example:\naabcbc\n  123\n1 [a, b]\n2 [a]\n3 [b]\n\n'''\n\n\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = list()\n        \n        for ch in s:\n            if ch == 'a':\n                stack.append('a')\n            elif ch == 'b':\n                if stack and stack[-1] == 'a':\n                    stack[-1] = 'b'\n                else:\n                    return False\n            elif ch == 'c':\n                if stack and stack[-1] == 'b':\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n        \n        return (len(stack) == 0)", "class Solution:\n    def isValid(self, s: str) -> bool:\n        d=[]\n        for i in s:\n            if i=='c':\n                if d[-2:]!=['a','b']:return False\n                d.pop();d.pop()\n            else:d.append(i)\n        return not d"]