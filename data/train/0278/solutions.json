["class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        counts = Counter(digits)\n        m = sum(digits) % 3\n        if m:\n            if counts[m] + counts[m+3] + counts[m+6]:\n                counts[min([m+i for i in [0,3,6] if counts[m+i]])] -= 1\n            else:\n                counts[min([i-m for i in [3,6,9] if counts[i-m]])] -= 1\n                counts[min([i-m for i in [3,6,9] if counts[i-m]])] -= 1\n                \n        ans = ''\n        for i in range(9, -1, -1):\n            if not ans and not counts[i]:\n                continue\n            ans += str(i) * counts[i]\n        if ans:\n             return ans.lstrip('0') or '0'\n        return ''\n        \n        \n", "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        \n        heaps, total = [[], [], []], 0\n        \n        for digit in digits:\n            total += digit\n            heapq.heappush(heaps[digit % 3], str(digit))\n        \n        if r := (total % 3):\n                if heaps[r]:\n                    heapq.heappop(heaps[r])\n                elif len(heaps[-r]) > 1:\n                    heapq.heappop(heaps[-r])\n                    heapq.heappop(heaps[-r])\n        \n        if any(heaps):\n            return str(int(''.join(sorted(sum(heaps, []), reverse=True))))\n        return ''", "class Solution:\n    def largestMultipleOfThree(self, d: List[int]) -> str:\n        d1 = sorted([i for i in d if i%3 ==1])\n        d2 = sorted([i for i in d if i%3 ==2])\n        d3 = [i for i in d if i%3 ==0]\n        if sum(d) % 3 == 1:\n            if len(d1) != 0:\n                res = d1[1:] + d2 + d3\n            else:\n                res = d2[2:]+ d3\n        elif sum(d) % 3 == 2:\n            if len(d2) != 0:\n                res = d1 + d2[1:] + d3\n            else:\n                res = d1[2:] +d3\n        else:\n            res = d\n        res.sort(reverse = True)\n        if not res: return ''\n        return str(int(''.join([str(i) for i in res])))", "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        mod_gap = sum(digits) % 3\n        if mod_gap == 0:\n            answer = ''.join([str(i) for i in sorted(digits, reverse=True)])\n        mult3 = [i for i in digits if i % 3==0]\n        non3 = [i for i in digits if i % 3!=0]\n        non3 = sorted(non3, reverse=True)\n\n        if mod_gap == 1:\n            last_odd_idx = [i for i in range(len(non3)) if non3[i] & 1]\n            if len(last_odd_idx) > 0:\n                last_odd_idx = last_odd_idx[-1]\n                non3 = non3[:last_odd_idx] + non3[last_odd_idx+1:]\n        elif mod_gap==2:\n            last_even_idx =  [i for i in range(len(non3)) if non3[i] % 2==0]\n            if len(last_even_idx) > 0:\n                last_even_idx = last_even_idx[-1]\n                non3 = non3[:last_even_idx] + non3[last_even_idx+1:]\n            \n        if sum(non3) % 3 != 0:\n            non3 = []\n        answer = ''.join([str(int(i)) for i in sorted(mult3+non3, reverse=True)])\n        \n        \n        while answer.startswith('0') and len(answer)>1:\n            answer = answer[1:] \n        return answer\n            \n", "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        dp = [-1, -1, -1]\n        for x in sorted(digits, reverse=True):\n            r = x%3\n            r1 = 0\n            for y in list(dp):\n                if y == -1:\n                    dp[r] = max(dp[r], x)\n                else:\n                    dp[(r1+r)%3] = max(dp[(r1+r)%3], 10*y+x)\n                r1 += 1\n        if dp[0] == -1:\n            return ''\n        else:\n            return str(dp[0])", "class Solution:\n    def largestMultipleOfThree(self, a: List[int]) -> str:\n        n, dp = len(a), [''] * 3\n        a.sort(reverse=True)\n        for i in range(n):\n            d, dp1 = a[i] % 3, [''] * 3\n            for j in range(3): \n                k = (j-d) % 3\n                dp1[j] = max([dp[k] + str(a[i]) if dp[k] or k==0 else '', dp[j]], key=lambda x: (len(x), x))\n                if len(dp1[j]) >= 2 and dp1[j][0] == '0': dp1[j] = dp1[j][1:]\n            dp = dp1            \n        return dp[0]", "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        digits = collections.Counter(digits)\n        final_ans_digits = {i: 0 for i in range(10)}\n        for i in range(0, 10, 3):\n            final_ans_digits[i] = digits[i]\n        \n        # append all digits whose quant > 3\n        left_numbers = list()\n        for i in [1,2,4,5,7,8]:\n            if digits[i] > 3:\n                undefined = 3 + (digits[i]  % 3)\n                left_numbers += [i] * undefined\n            else:\n                left_numbers += [i] * digits[i]\n        \n        mod = sum(left_numbers) % 3 \n        # but we may need to exclude a couple of numbers\n        if not mod:\n            pass\n        elif not(left_numbers[0] - mod) % 3:\n            # have to exclude number, can exclude the smallest\n            digits[left_numbers[0]] -= 1\n        else:\n            # have to exclude some numbers\n            # option 1: exclude a single number\n            num1 = None\n            for n in left_numbers:\n                if not (n - mod) % 3:\n                    num1 = n\n                    digits[n] -= 1\n                    break\n            if num1 is None:\n                # option 2: exclude two numbers\n                num2 = None\n                for i in range(1, len(left_numbers)):\n                    if not (left_numbers[i] + left_numbers[0] - mod) % 3:\n                        num2 = left_numbers[i]\n                        digits[left_numbers[0]] -= 1\n                        digits[num2] -= 1\n                if num2 is None:\n                    return ''\n        \n        ans = ''.join(str(i) * digits[i] for i in range(9, -1, -1))\n        if not ans:\n            return ''\n        elif ans[0] == '0':\n            return '0'\n        \n        else:\n            return ans\n                \n                    \n            \n", "class Solution:\n    def largestMultipleOfThree(self, a: List[int]) -> str:\n        n = len(a); a.sort(reverse=True)\n        dp = ['']*3\n        for i in range(n):\n            d = a[i] % 3\n            dp1 = ['']*3\n            for j in range(3): \n                k = (j-d) % 3\n                dp1[j] = max([dp[k] + str(a[i]) if dp[k] or k==0 else '', dp[j]], key=lambda x: (len(x), x))\n                if len(dp1[j]) >= 2 and dp1[j][0] == '0': dp1[j] = dp1[j][1:]\n            dp = dp1            \n        return dp[0] or ''\n            \n", "class Solution:\n    def largestMultipleOfThree(self, a: List[int]) -> str:\n        n = len(a); a.sort(reverse=True)\n        dp = ['']*3\n        for i in range(n):\n            d = a[i] % 3\n            dp1 = ['']*3\n            for j in range(3): \n                k = (j-d) % 3\n                dp1[j] = max([dp[k] + str(a[i]) if dp[k] or k==0 else '', dp[j]], key=lambda x: (len(x), x))\n                if len(dp1[j]) >= 2 and dp1[j][0] == '0': dp1[j] = dp1[j][1:]\n            dp = dp1            \n        return dp[0]\n            \n", "class Solution:\n    def largestMultipleOfThree(self, a: List[int]) -> str:\n        n, dp = len(a), [''] * 3\n        a.sort(reverse=True)\n        for i in range(n):\n            d, dp1 = a[i] % 3, [''] * 3\n            for j in range(3): \n                k = (j-d) % 3\n                dp1[j] = max([dp[k] + str(a[i]) if dp[k] or k==0 else '', dp[j]], key=lambda x: (len(x), x))\n                if len(dp1[j]) >= 2 and dp1[j][0] == '0': dp1[j] = dp1[j][1:]\n            dp = dp1            \n        return dp[0]\n            \n", "import numpy as np\nclass Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        mod_gap = sum(digits) % 3\n        if mod_gap == 0:\n            answer = ''.join([str(i) for i in sorted(digits, reverse=True)])\n        digits = np.array(digits)\n        cond = digits % 3 == 0\n        mult3 = digits[cond]\n        non3 = digits[~cond]\n        non3 = sorted(non3, reverse=True)\n        non3 = np.array(non3)\n\n        if mod_gap == 1:\n            last_odd_idx = np.ravel(np.argwhere(non3 & 1))\n            if len(last_odd_idx) > 0:\n                last_odd_idx = last_odd_idx[-1]\n                non3 = list(non3[:last_odd_idx]) + list(non3[last_odd_idx+1:])\n        elif mod_gap==2:\n            last_even_idx = np.ravel(np.argwhere(non3 % 2==0))\n            if len(last_even_idx) > 0:\n                last_even_idx = last_even_idx[-1]\n                non3 = list(non3[:last_even_idx]) + list(non3[last_even_idx+1:])\n            \n        if sum(non3) % 3 != 0:\n            non3 = []\n        answer = ''.join([str(int(i)) for i in sorted (np.concatenate([mult3, non3]), reverse=True)])\n        \n        \n        while answer.startswith('0') and len(answer)>1:\n            answer = answer[1:] \n        return answer\n            \n", "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        digits.sort(reverse=True)\n        N = len(digits)\n        dp = [[float('-inf')] * N for _ in range(3)]\n        for n in range(N):\n            for k in [0, 1, 2, 0]:\n                if n == 0 or (dp[k][n-1] == float('-inf') and dp[(k - digits[n]) % 3][n-1] == float('-inf')):\n                    if digits[n] % 3 == k:\n                        dp[k][n] = digits[n]\n                else:\n                    if digits[n] % 3 == 0:\n                        dp[k][n] = dp[k][n-1] * 10 + digits[n]\n                    else:\n                        dp[k][n] = max(dp[k][n-1], dp[(k - digits[n]) % 3][n-1] * 10 + digits[n])\n\n        return str(dp[0][-1]) if dp[0][-1] != float('-inf') else ''", "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        state2nums = defaultdict(Counter)\n        digits.sort(reverse=True)\n        for num in digits:\n            delta = num % 3\n            nstate = defaultdict(Counter)\n            \n            for i in range(3):\n                if sum(v for k, v in list(state2nums[i].items())) == 0 and i != 0:\n                    continue\n                target = (delta+i) % 3\n                \n                if sum(v for k, v in list(state2nums[target].items())) < sum(v for k, v in list(state2nums[i].items()))+1:\n                    counter = Counter(state2nums[i])\n                    counter[num] += 1\n                    nstate[target] = counter\n            \n            for i in range(3):\n                if i in nstate:\n                    state2nums[i] = nstate[i]\n            # print(state2nums)\n        print(state2nums)\n        nums = sorted([k for k, v in list(state2nums[0].items()) for _ in range(v) ], reverse=True)\n        ret = ''.join(map(str, nums))\n        return '0' if ret and ret[0] == '0' else ret\n", "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        n = len(digits)\n        \n        f = [0] * 10\n        for x in digits:\n            f[x] += 1\n            \n        M = defaultdict(int)\n        \n        def upper(d, m): # largest 3k + m: 3k + m <= f[d]\n            if f[d] < m:\n                return 0\n            return (f[d]-m)//3*3+m\n        \n        def mx(d, mod): # largest k: 0 <= k <= f[d] && k * d % 3 = mod\n            dm = d % 3  \n            if dm == 0:\n                return 0 if mod != 0 else f[d]\n            if dm == 1:\n                return upper(d, mod)\n            if dm == 2:\n                return upper(d, (3 - mod) % 3)\n                \n        for i in range(10):\n            for j in range(3):\n                M[i, j] = mx(i, j)\n        \n        X = [0] * 10\n        R = [0] * 10\n        def findout(i, mod):\n            if i < 0:\n                if mod == 0:\n                    gt = False\n                    sx = sr = 0\n                    for i in range(10):\n                        sx += X[i]\n                        sr += R[i]\n                    if sx > sr:\n                        gt = True\n                    elif sx == sr:\n                        for i in reversed(list(range(10))):\n                            if X[i] > R[i]:\n                                gt = True\n                                break\n                            elif X[i] < R[i]:\n                                break\n                    if gt:\n                        for i in range(10):\n                            R[i] = X[i]\n                return\n            for j in range(3):\n                if M[i, j] > 0:\n                    X[i] = M[i, j]\n                    findout(i-1, (mod + j) % 3)\n                    X[i] = 0\n            findout(i-1, mod)            \n        \n                \n        findout(9, 0)\n        ret = ''\n        \n        for i in reversed(list(range(10))):\n            if R[i] > 0:\n                ret += R[i] * str(i)\n                \n        if len(ret) > 0 and ret[0] == '0':\n            ret = '0'\n            \n        return ret\n                \n                \n        \n        \n", "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        dp = [-1, -1, -1]\n        for x in sorted(digits)[::-1]:\n            for a in dp[:] + [0]:\n                y = a * 10 + x\n                dp[y % 3] = max(dp[y % 3], y)\n        return str(dp[0]) if dp[0] >= 0 else ''\n", "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        vals = {0 : 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}\n        total = 0\n        res = []\n        for digit in digits:\n            vals[digit] += 1\n            total += int(digit)\n        if total % 3 == 0:\n            temp = 0\n            for i in range(9,0,-1):\n                temp += vals[i]\n            if temp == 0:\n                return '0'\n            for i in range(9,-1,-1):\n                for _ in range(vals[i]):\n                    res.append(str(i))\n            return ''.join(res)\n        \n        if total % 3 == 1:\n            for i in range(10):\n                if i%3 == 1 and vals[i] > 0:\n                    vals[i] -= 1\n                    for i in range(9,-1,-1):\n                        for _ in range(vals[i]):\n                            res.append(str(i))\n                    return ''.join(res)\n            count = 0\n            i = 0\n            while i < 10:\n                if count == 2:\n                    for i in range(9,-1,-1):\n                        for _ in range(vals[i]):\n                            res.append(str(i))\n                    return ''.join(res)\n                elif i%3 == 2 and vals[i] > 0:\n                    vals[i] -= 1\n                    count += 1\n                else:\n                    i += 1\n        else:\n            for i in range(10):\n                if i%3 == 2 and vals[i] > 0:\n                    vals[i] -= 1\n                    for i in range(9,-1,-1):\n                        for _ in range(vals[i]):\n                            res.append(str(i))\n                    return ''.join(res)\n            count = 0\n            i = 0\n            while i < 10:\n                if count == 2:\n                    for i in range(9,-1,-1):\n                        for _ in range(vals[i]):\n                            res.append(str(i))\n                    return ''.join(res)\n                elif i%3 == 1 and vals[i] > 0:\n                    vals[i] -= 1\n                    count += 1\n                else:\n                    i += 1\n                    \n                        \n                    \n        return ''.join(res)\n", "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        r_to_nums = {i:list() for i in range(3)}\n        for x in digits:\n            r = x % 3\n            r_to_nums[r].append(x)\n            \n        for i in range(3):\n            r_to_nums[i].sort()\n\n        counter = collections.Counter()\n        for x in digits:\n            counter[str(x)] += 1\n\n        r = sum(digits)%3\n        if r == 1:\n            if r_to_nums[1]:\n                y = str(r_to_nums[1][0])\n                counter[y] -= 1\n            elif len(r_to_nums[2]) >= 2:\n                y = str(r_to_nums[2][0])\n                counter[y] -= 1\n                y = str(r_to_nums[2][1])\n                counter[y] -= 1\n            else:\n                return ''\n        elif r == 2:\n            if r_to_nums[2]:\n                y = str(r_to_nums[2][0])\n                counter[y] -= 1\n            elif len(r_to_nums[1]) >= 2:\n                y = str(r_to_nums[1][0])\n                counter[y] -= 1\n                y = str(r_to_nums[1][1])\n                counter[y] -= 1\n            else:\n                return ''\n        \n        res = ''\n        for x in sorted(counter, reverse=True):\n            cnt = counter[x]\n            res += x*cnt\n        if not res:\n            return res\n        return str(int(res))\n", "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        dic=defaultdict(list)\n        for d in digits:dic[d%3].append(d)\n        arr=[]\n        n1=len(dic[1])\n        n2=len(dic[2])\n        arr+=dic[0]\n        if n1%3==n2%3==0 or n1==n2:arr+=dic[1]+dic[2]\n        else:\n            dic[1].sort(reverse=1)\n            dic[2].sort(reverse=1)\n            l1=l2=0\n            if n1%3==2 and n2==3:\n                while n2>3:\n                    l2+=3\n                    n2-=3\n                l1+=n1//3*3\n                l1+=2\n                l2+=2\n            elif n2%3==2 and n1==3:\n                while n1>3:\n                    l1+=3\n                    n1-=3\n                l2+=n2//3*3\n                l2+=2\n                l1+=2\n            else:\n                if n1>2:\n                    l1+=n1//3*3\n                    n1-=n1//3*3\n                if n2>2:\n                    l2+=n2//3*3\n                    n2-=n2//3*3\n                if n1!=0 and n2!=0:\n                    min1=min(n1,n2)\n                    l1+=min1\n                    l2+=min1\n            arr+=dic[1][:l1]+dic[2][:l2]\n        arr.sort(reverse=1)\n        if arr and arr[0]==0:return '0'\n        return ''.join(str(i) for i in arr) "]