["class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        mod = 10**9+7\n        odd_presum_cnt = 0\n        par = 0\n        for a in arr:\n            par ^= a & 1\n            if par:\n                odd_presum_cnt += 1\n        return odd_presum_cnt * (len(arr)+1 - odd_presum_cnt)%mod", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        res = odd = even = 0\n        for x in arr:\n            even += 1\n            if x % 2 != 0:\n                even,odd = odd,even\n            res = (res + odd) % (10 ** 9 + 7)\n        return res", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        np = [[0 for i in range(len(arr))] for j in range(2)]\n        \n        # 0 is even sub array\n        # 1 is odd sub array\n        np[0][0] = 1 if arr[0] % 2 == 0 else 0\n        np[1][0] = 1 if arr[0] % 2 == 1 else 0\n        res = np[1][0]\n        for i in range(1, len(arr)):\n            if arr[i] % 2 == 0:\n                np[0][i] = (1 + np[0][i - 1]) % 1000000007\n                np[1][i] = np[1][i - 1] % 1000000007\n            else:\n                np[0][i] = np[1][i - 1] % 1000000007\n                np[1][i] = (1 + np[0][i - 1]) % 1000000007\n            #print(np)\n            res += np[1][i]\n        return res % 1000000007", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        s=0\n        odd={}\n        ok=[]\n        even={}\n        ek=[]\n        for i in range(len(arr)):\n            s+=arr[i]\n            if(s%2==0):\n                even[i]=s\n                ek.append(i)\n            else:\n                odd[i]=s\n                ok.append(i)\n        j=0\n        c=0\n        for i in ok:\n            while(j<len(ek) and ek[j]<i):\n                j+=1\n            c+=j\n        j=0\n        for i in ek:\n            while(j<len(ok) and ok[j]<i):\n                j+=1\n            c+=j\n        \n        #0:1,1:3,4:15,5:21\n        #2:6, 3:10, 6:28\n        return (c+len(ok))%(10**9 + 7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        mod = 10**9 + 7\n        odd_even_count = [[0,0] for _ in range(len(arr)+1)]\n        prefix_odd_sum = [-1 for _ in range(len(arr))]\n        cur = 0\n        odd_count = 0\n        even_count = 0\n        for idx in range(len(arr)):\n            cur += arr[idx]\n            prefix_odd_sum[idx] = cur % 2\n            if cur % 2 == 1:\n                odd_count += 1\n            else:\n                even_count += 1\n            odd_even_count[idx+1] = (odd_count, even_count)\n        \n        ans = 0\n        for idx in range(len(arr)):\n            is_odd = prefix_odd_sum[idx]\n            ## odd: add 1 + prefix even count\n            if is_odd:\n                ans += 1 + odd_even_count[idx][1] \n            ## even: add prefix odd count\n            else:\n                ans += odd_even_count[idx][0]\n        return ans % mod\n                \n", "class Solution:\n    def numOfSubarrays(self, A: List[int]) -> int:\n        n = len(A)\n        mod = 10**9+7\n        ans = 0\n        p, ctr = [0]*(n+1), Counter([0]) \n        for i in range(n):\n            p[i] = p[i-1]+A[i]\n            s = p[i]%2\n            ans = ans+ctr[1-s]\n            ans = ans%mod \n            ctr[s] += 1\n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        dp = [0 for i in range(len(arr))] # dp[i] is the number of subarrays that end at i with (odd sum, even sum)\n        dp[0] = (1,0) if arr[0] % 2 == 1 else (0,1)\n        for i in range(1,len(dp)):\n            if arr[i] % 2 == 0: \n                oddCount = dp[i-1][0]\n                evenCount = dp[i-1][1] + 1\n            else:\n                oddCount = dp[i-1][1] + 1\n                evenCount = dp[i-1][0]\n            dp[i] = (oddCount,evenCount)\n        # print(dp)\n        return sum([elem[0] for elem in dp]) % (10**9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        MOD = 10**9 + 7\n        res = 0\n        \n        curr_sum = 0\n        even_count = 1\n        odd_count = 0\n        \n        for num in arr:\n            curr_sum += num\n            curr_sum %=2\n            \n            if curr_sum == 1: # odd\n                res += even_count\n                odd_count += 1\n            else:\n                res += odd_count\n                even_count += 1\n        \n        return res % MOD\n            \n            \n            \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        dp = [[0, 0] for _ in range(len(arr)+1)]\n        for i, num in enumerate(arr):\n            if num % 2 == 0:\n                dp[i+1][0] = dp[i][0]\n                dp[i+1][1] = dp[i][1] + 1\n            else:\n                dp[i+1][0] = dp[i][1] + 1\n                dp[i+1][1] = dp[i][0]\n        \n        return sum(dp[i][0] for i in range(len(dp))) % (10**9+7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        mod = 10**9 + 7\n        dic = collections.Counter()\n        dic[0] += 1\n        pre = ans = 0\n        for i,x in enumerate(arr):\n            pre += x\n            pre %= 2\n            ans = (ans + dic[pre^1]) % mod\n            dic[pre] += 1\n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        if len(arr)<1:\n            return None\n        if len(arr)==1:\n            if arr[0]%2!=0:\n                return 1\n        mod=10**9 + 7\n        flag=False\n        for i in arr:\n            if i%2!=0:\n                flag=True\n                break\n        if flag==False:\n            return 0\n        even,odd=0,0\n        ret=0\n        for i in arr:\n            if i%2!=0:\n                ret+=even+1\n                odd,even=even+1,odd\n            else:\n                ret+=odd\n                odd,even=odd,even+1\n        return ret%mod\n                \n        \n                \n        \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        N = len(arr)\n        dp = [0] * N\n        dp[0] = arr[0] & 1\n        for i in range(1, N):\n            \n            if arr[i] & 1:\n                dp[i] = i - dp[i - 1] + 1\n            else:\n                dp[i] = dp[i - 1]\n        \n        return sum(dp) % (10**9 + 7) ", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ans = 0\n        even = 0\n        odd = 0\n        for v in arr:\n            if v % 2 == 0:\n                even, odd = (even + 1)  % 10000000007, odd\n            else:\n                even, odd = odd, (even + 1)  % 10000000007\n            ans = (ans + odd) % 10000000007\n        return ans  % 1000000007", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        kMod = int(1e9 + 7)\n        n = len(arr)\n        \n        # dp[i][0] is how many sub-arrays ends with arr[i] have even sum\n        # dp[i][1] is how many sub-arrays ends with arr[i] have odd sum\n        dp = [[0]*2 for _ in range(n)]\n        \n        ans = 0\n        if arr[0]%2 == 0:\n            dp[0][0] = 1\n        else:\n            dp[0][1] = 1\n        ans += dp[0][1]\n            \n        \n        for i in range(1, n):\n            if (arr[i] % 2 != 0):\n                dp[i][0] = dp[i-1][1]\n                dp[i][1] = dp[i-1][0]+ 1\n            else:\n                dp[i][0] = dp[i-1][0]+1\n                dp[i][1] = dp[i-1][1]\n            ans += dp[i][1]\n            \n        return ans % kMod\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        \n        dp=[]\n        for i in range(len(arr)+1):\n            dp.append([0,0])\n        \n        ans=0\n        for i in range(1,len(arr)+1):\n            if arr[i-1]%2==0:\n                dp[i][0]=dp[i-1][0]+1\n                dp[i][1]=dp[i-1][1]\n            else:\n                dp[i][0]=dp[i-1][1]\n                dp[i][1]=dp[i-1][0]+1\n            \n            ans+=dp[i][1]\n        \n        \n        return ans%(pow(10,9)+7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        mod = 10**9+7\n        ans = 0\n        p = [0]*(n+1)\n        counter = Counter([0]) \n        for i in range(n):\n            p[i] = p[i-1]+arr[i]\n            if p[i]%2: ans += counter[0]\n            else: ans += counter[1]\n            counter[p[i]%2] += 1\n        return ans%mod", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        sum_even = 0\n        sum_odd = 0\n        out = 0\n        for i in range(len(arr)):\n            if arr[i] %2 ==0:\n                sum_even, sum_odd = sum_even+1, sum_odd\n            else:\n                sum_even, sum_odd = sum_odd , sum_even +1\n            out += sum_odd\n        return out % (10**9 + 7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        sums = [0]\n        \n        sum = 0\n        for n in arr:\n            sum += n\n            sums.append(sum)\n            \n        odd_sum_count = []\n        even_sum_count = []\n        odd_sum = 0\n        even_sum = 0\n        for ss in sums:\n            odd_sum += 1 if ss % 2 == 1 else 0\n            even_sum += 0 if ss % 2 == 1 else 1\n            odd_sum_count.append(odd_sum)\n            even_sum_count.append(even_sum)\n        ans = 0\n        for i in range(len(arr)):\n            if sums[i+1] % 2 == 0:\n                ans += odd_sum_count[i]\n            else:\n                ans += even_sum_count[i]\n            ans = ans % (10 ** 9 + 7)\n        return ans", "class Solution:\n     def numOfSubarrays(self,A) -> int:\n        n = len(A)\n        MOD = pow(10,9)+7\n        dp_even,dp_odd = [0],[0]\n        if A[0]%2:\n            dp_odd[0] += 1\n        else:\n            dp_even[0] += 1\n\n        ans = dp_odd[-1]\n        \n        for i in range(1,n):\n            if A[i]%2:\n                dp_odd.append( (dp_even[i-1]+1)%MOD )\n                dp_even.append( dp_odd[i-1] )\n            else:\n                dp_odd.append( dp_odd[i-1] )\n                dp_even.append( (dp_even[i-1]+1)%MOD )\n            ans += dp_odd[i]\n            ans %= MOD\n        \n        #print(dp_even,dp_odd)\n        \n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        memoOdd = arr[0] % 2\n        memoEven = -(arr[0] % 2 - 1)\n        memoOddSum = memoOdd\n        \n        for i in range(1, len(arr)):\n            memoOdd_temp = memoOdd\n            memoEven_temp = memoEven\n            memoOdd = memoOdd_temp * (-(arr[i] % 2 - 1)) + memoEven_temp * (arr[i] % 2) + arr[i] % 2\n            memoEven = memoOdd_temp * (arr[i] % 2) + memoEven_temp * (-(arr[i] % 2 - 1)) -(arr[i] % 2 - 1)\n            memoOddSum += memoOdd\n        \n        return memoOddSum % 1000000007", "class Solution:\n    # Make prefix sum, store only whether sum is odd or even\n    # Iterate through prefix sum, check if current prefix sum is odd/even and count number of odd/even subarrays behind it\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        countOdd, countEven, result = 0, 1, 0\n        modulo = 1000000007\n        prev = 0\n        for i in arr:\n            prev = (prev + i) % 2\n            if prev == 0:\n                countEven += 1\n                result += countOdd\n                if result >= modulo:\n                    result %= modulo\n            else:\n                countOdd += 1\n                result += countEven\n                if result >= modulo:\n                    result %= modulo\n        return result", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ans=0\n        evenCount=0\n        oddCount=0\n        for i in arr:\n            if(i%2==0):\n                ans+=oddCount\n                oddCount, evenCount = oddCount, evenCount+1\n            else:\n                ans+=evenCount+1\n                oddCount, evenCount = evenCount+1, oddCount\n        return int(ans%(math.pow(10,9)+7))", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        MOD = int(1e9 + 7)\n        even, odd = [0]*(n+1), [0]*(n+1)    \n        for i, a in enumerate(arr):\n            if a % 2 == 1:\n                even[i] = odd[i-1] % MOD\n                odd[i] = (even[i-1] + 1) % MOD\n            else:\n                even[i] = (even[i-1] + 1) % MOD\n                odd[i] = odd[i-1] % MOD\n        \n        return sum(odd) % MOD\n                \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        acc=[]\n        temp=0\n        ones=0\n        for u in arr:\n            temp+=u%2\n            if temp%2==1:\n                ones+=1\n        L=len(arr)\n        return ones*(L-ones+1)%(10**9+7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        kMod = int(1e9 + 7)\n        n = len(arr)\n        \n        # dp[i][0] is how many sub-arrays ends with arr[i-1] have even sum\n        # dp[i][1] is how many sub-arrays ends with arr[i-1] have odd sum\n        dp = [[0]*2 for _ in range(n+1)]\n        \n        ans = 0          \n        \n        for i in range(1, n+1):\n            if (arr[i-1] % 2 != 0):\n                dp[i][0] = dp[i-1][1]\n                dp[i][1] = dp[i-1][0]+ 1\n            else:\n                dp[i][0] = dp[i-1][0]+1\n                dp[i][1] = dp[i-1][1]\n            ans += dp[i][1]\n            \n        return ans % kMod\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        evenCount, oddCount = 1, 0\n        totalSum = numArrays = 0\n        \n        for val in arr:\n            totalSum += val\n            numArrays += evenCount if totalSum%2 else oddCount\n            evenCount += totalSum%2 == 0\n            oddCount += totalSum%2 == 1\n            \n        return numArrays % ((10**9)+7)   ", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        mod = 10 ** 9 + 7\n        n = len(arr)\n        dp = [[0] * 2 for _ in range(n)]\n        if arr[n - 1] & 1:\n            dp[n - 1][1] = 1\n        else:\n            dp[n - 1][0] = 1\n            \n        for i in range(n - 2, -1, -1):\n            if arr[i] & 1:\n                dp[i][1] = (dp[i + 1][0] + 1) % mod\n                dp[i][0] = dp[i + 1][1]\n            else:\n                dp[i][1] = dp[i + 1][1]\n                dp[i][0] = (dp[i + 1][0] + 1) % mod\n                \n        ans = 0\n        for i in range(n):\n            ans += dp[i][1]\n            \n        return ans % mod", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        odd, even = 0, 1\n        s = res = 0\n        for n in arr:\n            s += n\n\n            if s % 2 == 0:\n                res += odd\n                even += 1\n            else:\n                res += even\n                odd += 1\n\n            res %= 1000000007\n\n        return res", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        o = []\n        score = 0\n        tmp = 0\n        pa,no = 0,0\n        check = []\n        \n        for el in arr:\n            tmp += el\n            \n            if tmp % 2 ==0:\n                pa += 1\n                check.append(0)\n            else:\n                no += 1\n                check.append(1)\n                \n            o.append((pa, no))\n            \n        score = 0\n\n        for i in range(len(arr)):\n           # print(arr[i], score, 'b')\n            if arr[i] % 2 ==1:\n                score += 1\n                \n            if check[i-1] == 0 or i==0:\n                score += o[-1][1] - o[i][1]\n            else:\n                score += o[-1][0] - o[i][0]\n          \n           # print(o)\n           # print(arr[i], score, 'a')\n\n        mod = 10**9 + 7\n        return score % mod\n            \n            \n            \n       \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        \n        odd = 0\n        even = 1\n        res = 0\n        sum = 0\n        \n        for i in arr:\n            sum += i\n            if sum%2 == 0:\n                even += 1\n                res = (res+odd)%1_000_000_007\n            else:\n                odd += 1\n                res = (res+even)%1_000_000_007\n                \n        return res", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        #dp[i]:the number of odd subarrays ended with arr[i]\n        n = len(arr)\n        dp = [0]*n\n\n        dp[0] = arr[0]%2\n\n        for i in range(1, n):\n            if arr[i]%2 == 0:\n                dp[i] = dp[i-1]\n            else:\n                dp[i] = i-dp[i-1]+arr[i]%2\n\n        return sum(dp)% (1000000000 + 7)\n", "class Solution:\n    def numOddEvenSubarrays(self, arr:List[int], start:int) -> (int, int, int):\n        if len(arr) == 0:\n            return (0, 0, 0)\n        if len(arr) == 1 or start == len(arr)-1:\n            return (0, 1, 0) if arr[start] % 2 == 0 else (1, 0, 0)\n        (odd, even, oldOdd) = self.numOddEvenSubarrays(arr, start+1)\n        #print(f'{arr[start:], odd, even, oldOdd}')\n        indOdd = (odd + oldOdd) % (10 ** 9 + 7)\n        return (odd, even + 1, indOdd) if arr[start] % 2 == 0 else (even + 1, odd, indOdd)\n            \n    def numOfSubarrays(self, arr: List[int]) -> int:\n        (odd, even, oldOdd) = self.numOddEvenSubarrays(arr, 0)\n        #print(f'{arr, odd, even, oldOdd}')        \n        total = (odd + oldOdd) % (10 ** 9 + 7)\n        return total\n", "class Solution:\n    def numOfSubarrays(self, coll: List[int]) -> int:\n        n = len(coll)\n        m = 10**9 + 7\n        acc = 0\n        evens = odds = 0\n\n        for i, x in enumerate(coll):\n            if x & 1:\n                evens, odds = odds, evens + 1\n            else:\n                evens += 1\n            \n            acc += odds\n            acc %= m\n\n        return acc", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        res = odd = even = 0\n        for x in arr:\n            even += 1\n            if x % 2 != 0:\n                odd,even = even,odd\n            res = (res + odd) % (10 ** 9 + 7)\n        return res", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        prefix_sum = 0\n        \n        number_odd = 0\n        number_even = 0\n        \n        total = 0\n        \n        for i in arr:\n            prefix_sum += i\n            \n            if prefix_sum % 2 == 1:\n                number_odd += 1\n                total += 1\n                total += number_even\n            else:\n                total += number_odd\n                number_even += 1\n\n        return int(total % (1e9 + 7))\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        d = {}\n        d[0] = 1\n        \n        sm = 0\n        even = 0\n        for i in range(n):\n            sm += arr[i] \n            sm %= 2\n            if sm < 0:\n                sm += 2\n            if sm in d:\n                even += d[sm]\n            if sm not in d:\n                d[sm] = 0\n            d[sm]+=1\n            \n        return (n*(n+1)//2-even) % (10**9+7)", "class Solution:\n  def numOfSubarrays(self, arr: List[int]) -> int:\n    res, s, prev_odd, prev_even = 0, 0, 0, 1\n    for v in arr:\n      s = (s + v) % 2\n      if s == 1:\n        res += prev_even\n        prev_odd += 1\n      else:\n        res += prev_odd\n        prev_even += 1\n      \n    return res % (10**9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        if len(arr) == 0: \n            return 0\n        result = 0\n        num_odd = 0\n        Cum = [0]\n        for i in range(len(arr)):\n            Cum.append(Cum[-1] + arr[i])\n            if Cum[-1] % 2 != 0:\n                num_odd += 1\n        #print(num_odd)\n        return (len(arr) + 1 - num_odd) * num_odd % (10**9+7)\n", "class Solution:\n    def numOfSubarrays(self, coll: List[int]) -> int:\n        n = len(coll)\n        m = 10**9 + 7\n        dp = [(0, 0) for _ in range(n+1)]\n\n        for i, x in enumerate(coll):\n            if x & 1:\n                dp[i + 1] = (dp[i][1], dp[i][0] + 1)\n            else:\n                dp[i + 1] = (dp[i][0] + 1, dp[i][1])\n\n        return sum(odds for evens, odds in dp) % m", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        s = 0\n        evens, odds = 0, 0\n        cnt = 0\n        \n        for num in arr:\n            s += num\n            if s % 2 == 1:\n                cnt += (evens+1)\n                odds += 1\n            else:\n                cnt += odds\n                evens += 1\n            cnt = cnt % (10**9+7)\n        return cnt", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        res = 0\n        odds = 0\n        even = 0\n        for i, c in enumerate(arr):\n            if c & 1:\n                odds, even = even + 1, odds\n            else:\n                even += 1\n            res = (res + odds) % 1000000007\n        return res % 1000000007\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        \n        if not arr:\n            return 0\n        \n        n_even = 0\n        n_odd = 0\n        res = 0\n        \n        for x in arr:\n            \n            if x % 2 == 0:\n                n_even, n_odd = n_even + 1, n_odd\n            else:\n                n_even, n_odd = n_odd, n_even + 1\n                \n            res += n_odd\n            \n        return res % (10**9+7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        even = [0] * len(arr)\n        odd = [0] * len(arr)\n        for i in range(len(arr)):\n            if i == 0 and arr[i] % 2 == 0:\n                even[i] = 1\n            elif i == 0:\n                odd[i] = 1\n            elif arr[i] % 2 == 0:\n                even[i] = even[i - 1] + 1\n                odd[i] = odd[i - 1]\n            else:\n                even[i] = odd[i - 1]\n                odd[i] = even[i - 1] + 1\n        mod = 10 ** 9 + 7\n        ans = 0\n        for i in range(len(arr)):\n            ans = (ans + odd[i]) % mod\n        return ans", "class Solution:\n    def numOfSubarrays(self, A):\n        count = [1, 0]\n        curr = res = 0\n        for a in A:\n            curr ^= a & 1\n            res += count[1 - curr]\n            count[curr] += 1\n        return res % (10 ** 9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        res = odd = even = 0\n        for x in arr:\n            even += 1\n            if x % 2:\n                odd, even = even, odd\n            res = (res + odd) % 1000000007\n        return res  ", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        arr = list(accumulate(arr))\n        count = 0\n        prev_even, prev_odd = 0, 0\n        for i in range(len(arr)):\n            if arr[i] % 2:\n                count += 1\n                count += prev_even\n                prev_odd += 1\n            else:\n                count += prev_odd\n                prev_even += 1\n        \n        return count % (10**9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        dp = [0,0]\n        ans = 0\n        for i, num in enumerate(arr):\n            dp[0], dp[1] = dp[num%2] + num%2, dp[(num-1)%2] + (num-1)%2\n            ans += dp[0]\n        return ans % (10**9+7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ans=odd=even=0\n        for i in arr:\n            if i%2==0:\n                even,odd=even+1,odd\n            else:\n                even,odd=odd,even+1\n            ans=(ans+odd)%1000000007\n        return ans\n        '''\n        ans=0\n        for i in range (len(arr)):\n            temp=0\n            for j in range(i,len(arr)):\n                temp+=arr[j]\n                if temp%2==1:\n                    ans+=1\n        return ans%1000000007\n        '''", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        sum_even = 0\n        sum_odd = 0\n        out = 0\n        for i in range(len(arr)):\n            if arr[i] %2 ==0:\n                sum_even, sum_odd = sum_even+1, sum_odd\n            else:\n                sum_even, sum_odd = sum_odd , sum_even +1\n            out = (out + sum_odd)\n        return out  % 1000000007", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        memoOdd = [arr[0] % 2]\n        memoEven = [-(arr[0] % 2 - 1)]\n        \n        for i in range(1, len(arr)):\n            memoOdd.append(memoOdd[i - 1] * (-(arr[i] % 2 - 1)) + memoEven[i - 1] * (arr[i] % 2) + arr[i] % 2)\n            memoEven.append(memoOdd[i - 1] * (arr[i] % 2) + memoEven[i - 1] * (-(arr[i] % 2 - 1)) -(arr[i] % 2 - 1))\n        \n        return sum(memoOdd) % 1000000007", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        mod = 10**9+7\n        dp = [[0 for i in range(2)]for j in range(n)]\n        \n        if arr[0]%2==0:\n            dp[0][0] = 1\n        else:\n            dp[0][1] = 1\n        \n        for i in range(1,n):\n            if arr[i]%2==0:\n                dp[i][0] = dp[i-1][0]+1\n                dp[i][1] = dp[i-1][1]\n            else:\n                dp[i][1] = dp[i-1][0]+1\n                dp[i][0] = dp[i-1][1]\n        ans = 0\n        for i in dp:\n            ans = (ans+i[1])%mod\n            # print(i)\n        return ans%mod", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        # keep array that holds # of even/odd sum subarrays that end at that index\n        ans = odd = even = 0\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0: # even\n                even = even + 1\n                ans += odd\n            else:               # odd\n                even, odd = odd, even + 1\n                ans += odd\n                \n        return ans % (10**9 + 7)", "class Solution:\n    # brute force\uff1a\u628a\u6240\u6709\u7684substring\u90fdfor\u4e00\u904d\uff0c\u53ef\u4ee5\u7528bit operation\u4f18\u5316\n    # \u5176\u5b9e\u4e0d\u7528\u4e24\u4e2a\u6570\u76f8\u52a0\u518d\u6574\u96642\uff0c\u76f4\u63a5\u770b\u6700\u540e\u4e00\u4f4d\u662f\u4e0d\u662f1\u5c31\u884c\uff0c\u53ef\u4ee5\u7528xor\u4ee3\u66ff\u76f8\u52a0\n    # better approach\uff1a\u5bf9\u4e8e\u6bcf\u4e2aindex i\uff0c\u7ef4\u62a4evens\u548codds\uff0c\u5206\u522b\u662f\u5728i\u4e4b\u524d\u7684even prefix sum\u548codd prefix sum\u6570\u91cf\uff0c\u7136\u540e\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        ret = 0\n        # \u5f53\u524d\u662fodd\u548c\u662feven\u7684prefix sums\u4e2a\u6570\n        odds, evens = 0, 1\n        cur = 0 # \u5f53\u524d\u7684prefix sum\n        \n        for num in arr:\n            cur ^= num&1    # \u67e5\u770b\u5947\u5076\n            if cur:         # \u5947\u6570\n                # \u5982\u679c\u5f53\u524dprefix sum\u662f\u5947\u6570\uff0c\u67e5\u770b\u5728\u6b64\u4e4b\u524d\u6709\u591a\u5c11\u4e2a\u5076\u6570\u7684prefix sum\n                # \u7528cur\u51cf\u53bb\u4e4b\u524d\u6240\u6709\u662f\u5076\u6570\u7684prefix sum\uff0c\u90fd\u53ef\u4ee5\u5f97\u5230\u4e00\u6bb5\u5947\u6570\u7684substring\n                ret += evens\n                odds += 1\n            else:\n                # vice versa\n                ret += odds\n                evens += 1\n        \n        return ret % (10**9 + 7)\n        \n        \n#     def numOfSubarrays(self, arr: List[int]) -> int:\n#         n = len(arr)\n#         ret = 0\n        \n#         presum = [0 for i in range(n)]\n#         for i in range(n):\n#             presum[i] = (arr[i] + (presum[i-1] if i > 0 else 0))&1\n        \n#         for i in range(n):\n#             for j in range(i, n):\n#                 if i == j:\n#                     if arr[i]&1: ret += 1\n#                 elif not i:\n#                     if presum[j]: ret += 1\n#                 else:\n#                     if presum[j]^presum[i-1]: ret += 1\n\n#         return ret\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        res = even = odd = 0\n        for x in arr:\n            even += 1\n            if x % 2 != 0:\n                odd,even = even,odd\n            res = (res + odd) % (10 ** 9 + 7)\n        return res", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        \n        # https://leetcode.com/problems/number-of-sub-arrays-with-odd-sum/discuss/758041/Python-O(1)-Space-Clear-Solution\n        \n        if not arr: return 0\n        cum = 0\n        odd, even = 0, 1\n        res = 0\n        MOD = 10**9+7\n        for num in arr:\n            cum += num\n            #print(odd,even, cum)\n            if cum % 2:\n                res += even\n                odd += 1\n            else:\n                res += odd\n                even += 1\n            #print(odd,even, res)\n            #print(\\\"________________\\\")\n            res %= MOD\n        return res%MOD\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        acc=[]\n        temp=0\n        ones=0\n        for u in arr:\n            temp+=u%2\n            temp%=2\n            if temp==1:\n                ones+=1\n        L=len(arr)\n        return ones*(L-ones+1)%(10**9+7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        c,e,o,a=0,1,0,0\n        for  i in arr:\n            c+=i\n            if c%2==0:\n                a+=o\n                a%=1000000007\n                e+=1\n            else:\n                a+=e\n                a%=1000000007\n                o+=1\n        return a%1000000007\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        # keep array that holds # of even/odd sum subarrays that end at that index\n        odd = [0]\n        even = [0]\n        for i in range(len(arr)):\n            if arr[i] % 2 == 0: # even\n                even.append(even[-1] + 1)\n                odd.append(odd[-1])\n            else:               # odd\n                even.append(odd[-1])\n                odd.append(even[-2] + 1)\n                \n        # print(\\\"EVEN:\\\",even)\n        # print(\\\"ODD: \\\", odd)\n                \n        return sum(odd) % (10**9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        run, prev = [], 0\n        count = 0\n        odd, even = 0, 0\n        for ele in arr:\n            run.append(prev + ele)\n            prev = run[-1]\n            if run[-1] % 2 != 0:\n                count += even + 1\n                odd += 1\n            else:\n                count += odd\n                even += 1\n        return count % (10 ** 9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        res = odd = even = 0\n        for x in arr:\n            even += 1\n            if x % 2 != 0:\n                even,odd = odd,even\n                \n            res = (res + odd) % (10 ** 9 + 7)\n        return res\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ans = 0\n        even = 0\n        odd = 0\n        for v in arr:\n            if v % 2 == 0:\n                even, odd = even + 1, odd\n            else:\n                even, odd = odd, even + 1\n            ans = (ans + odd) % 1000000007\n        return ans ", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        acc=[]\n        temp=0\n        for u in arr:\n            temp+=u%2\n            acc.append(temp%2)\n        L=len(arr)\n        ones=sum([u%2 for u in acc])\n        return ones*(L-ones+1)%(10**9+7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        res = odd = even = 0\n        for x in arr:\n            even += 1\n            if x % 2:\n                odd, even = even, odd\n            res = (res + odd) % 1000000007             \n        return res            ", "class Solution:\n    def numOfSubarrays(self,A) -> int:\n        n = len(A)\n        dp_even,dp_odd = [0],[0]\n        if A[0]%2:\n            dp_odd[0] += 1\n        else:\n            dp_even[0] += 1\n\n        ans = dp_odd[-1]\n        \n        for i in range(1,n):\n            if A[i]%2:\n                dp_odd.append( dp_even[i-1]+1 )\n                dp_even.append( dp_odd[i-1] )\n            else:\n                dp_odd.append( dp_odd[i-1] )\n                dp_even.append( dp_even[i-1]+1 )\n            ans += dp_odd[i]\n            ans %= (pow(10,9)+7)\n        \n        #print(dp_even,dp_odd)\n        \n        return ans%(pow(10,9)+7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        sum_even = 0\n        sum_odd = 0\n        out = 0\n        for i in range(len(arr)):\n            if arr[i] %2 ==0:\n                sum_even, sum_odd = sum_even+1, sum_odd\n            else:\n                sum_even, sum_odd = sum_odd , sum_even +1\n            out = (out + sum_odd) % 1000000007\n        return out ", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        # corner case\n        if not arr or len(arr) == 0:\n            return 0\n        # get total evens, odds after accumulation\n        even = 1\n        odd = 0\n        cur = 0\n        ret = 0\n        for a in arr:\n            cur = (a + cur) \n            if cur % 2 == 0:\n                even += 1\n                ret += odd\n            else:\n                odd += 1\n                ret += even\n            ret = ret % (10 ** 9 + 7)\n        return ret\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        \n        L = len(arr)\n        works = [0] * L \n        not_works = [0] * L \n        \n        if arr[0] % 2 == 1:\n            works[0] += 1\n        else:\n            not_works[0] += 1\n        \n        for i in range(1, L):\n            \n            if arr[i] % 2 == 0:\n                works[i] += works[i-1]\n                not_works[i] += not_works[i-1]\n            else:\n                works[i] += not_works[i-1]\n                not_works[i] += works[i-1]\n            \n            if arr[i] % 2 == 1:\n                works[i] += 1\n            else:\n                not_works[i] += 1\n\n        return sum(works) % (10**9 + 7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        '''\n        This is an elementary dynamic programming problem.\n        odd[i] records the number of subarray ending at arr[i] that has odd sum.\n        even[i] records the number of subarray ending at arr[i] that has even sum.\n        if arr[i + 1] is odd, odd[i + 1] = even[i] + 1 and even[i + 1] = odd[i]\n        if arr[i + 1] is even, odd[i + 1] = odd[i] and even[i + 1] = even[i] + 1\n        Since we only required the previous value in odd and even, we only need O(1) space.\n        '''\n        res = odd = even = 0\n        for x in arr:\n            even += 1\n            if x % 2:\n                odd, even = even, odd\n            res = (res + odd) % 1000000007             \n        return res", "'''\nhttps://www.youtube.com/watch?v=iTukzycJ69I\n'''\n\n\nclass Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        \n        '''\n            here we are calculating prefix sum.\n            Along with that we also keep track before\n            any index i, how many prefix sum are even \n            and how many prefix sum are odd by using\n            variables evenSum and oddSum. Becuase if \n            we subtract \n            \n            *************************************\n                even value from odd answer is odd\n                and odd value from even again answer\n                is odd\n            *************************************\n            \n            This above mentioned simple 2 rules helpsto\n            keep track of required answer\n            \n            \n        '''\n        \n        evenSum=0\n        oddSum=0\n        prefSum=0\n        ans=0\n        \n        \n        for ele in arr:\n            \n            prefSum=prefSum+ele\n            \n            '''\n                prefix sum is odd\n            '''\n            if prefSum%2==1:\n                \n                ans+=evenSum+1\n                oddSum+=1\n            else:\n                ans+=oddSum\n                evenSum+=1\n                \n            \n            ans%=((10**9)+7)\n            \n            \n            \n        return ans\n                \n                \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n        \n        \n        \n        \n            \n        \n        \n        \n        \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        n=len(arr)\n        dp=[[0 for i in range(2)]for i in range(n)]\n        if arr[0]&1 :\n            dp[0]=[0,1]\n        else:\n            dp[0]=[1,0]\n        for i in range(1,len(arr)):\n            if arr[i]&1:\n                dp[i][1]=dp[i-1][0]+1\n                dp[i][0]=dp[i-1][1]\n            else:\n                dp[i][1]=dp[i-1][1]\n                dp[i][0]=dp[i-1][0]+1\n        # print(dp)\n        return sum(x[1] for x in dp)%(10**9+7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        \n        o = 0 \n        e = 0 \n        c = 0 \n        p = 0\n\n        for i in arr:\n            p += i\n            if p % 2 ==0:\n                c += o\n                e += 1\n            else:\n                c += e\n                c += 1\n                o += 1\n        return c % 1000000007", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        n=len(arr)\n        odd,even,re,s=0,1,0,0\n        for v in arr:\n            s+=v\n            if s%2==0:\n                re+=odd\n                even+=1\n            else:\n                re+=even\n                odd+=1\n        return re%1000000007\n", "class Solution:\n    def numOfSubarrays(self, A):\n        MOD=10**9+7\n        ans=0\n        even=odd=0\n        for x in A:\n            if x%2:\n                odd,even=1+even,odd\n            else:\n                even+=1\n            ans=(ans+odd)%MOD\n        return ans\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        o, e = 0, 0\n        res = 0\n        for n in arr:\n            if n%2 == 0:\n                e += 1\n            else:\n                o, e = e, o\n                o += 1\n            res += o\n            res = res % (10**9+7)\n        return res", "class Solution:\n    def numOfSubarrays(self, A):\n        MOD=(10**9+7)\n        ans=0\n        tt=0\n        even=odd=0\n        for x in A:\n            tt+=x\n            if tt%2==0:\n                ans=(ans+odd)%MOD\n                even+=1\n            else:\n                ans=(ans+1+even)%MOD\n                odd+=1\n        return ans\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        MOD = int(1e9 + 7)\n        res = even = odd = 0 \n        for i, a in enumerate(arr):\n            even += 1\n            if a % 2 == 1:\n                even, odd = odd, even\n            res = (res + odd) % MOD\n        \n        return res \n                \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        even=0\n        odd=0\n        sum1=0\n        result=0\n        for num in arr:\n            sum1+=num\n            if sum1%2==0:\n                result+=odd\n                even+=1\n            else:\n                result+=even+1\n                odd+=1\n            result%=(10**9+7)\n                \n        return result", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        MOD = 10 ** 9 + 7\n        count = [1, 0]\n        cur = answer = 0\n        for n in arr:\n            cur ^= n & 1\n            answer = (answer + count[1 ^ cur]) % MOD\n            count[cur] += 1\n        \n        return answer", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        le=len(arr)\n        o=0\n        s=0\n        for i in arr:\n            s+=i\n            if s%2:\n                o+=1\n        return (o*((le-o)+1))%1000000007", "MOD = 1000000007\nclass Solution:\n    def numOfSubarrays(self, arr):\n        n = len(arr)\n        pre_sum = [1, 0]\n        now_sum = 0\n        res = 0\n        for i in range(n):\n            now_sum += arr[i]\n            if now_sum % 2 == 1:\n                res += pre_sum[0]\n                pre_sum[1] += 1\n            else:\n                res += pre_sum[1]\n                pre_sum[0] += 1\n        return res % MOD", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        odds = 0\n        evens = 1\n        ans = 0\n        runningsum = 0\n        MOD = 10**9 + 7\n        \n        for a in arr:\n            runningsum += a\n            if runningsum%2:\n                ans = (ans + evens)%MOD\n                odds += 1\n            else:\n                ans = (ans + odds)%MOD\n                evens += 1\n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        MOD = int(1e9 + 7)\n        res = even = odd = 0 \n        for a in arr:\n            even += 1\n            if a % 2:\n                even, odd = odd, even\n            res = (res + odd) % MOD\n        \n        return res \n                \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ans, odd, even = 0, 0, 0\n        for i in arr:\n            if i & 1:\n                odd, even = even + 1, odd                \n            else:\n                even = even + 1\n            ans += odd\n                \n        return ans % (10**9 + 7)\n                    \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        even = 0\n        odd = 0\n        c = 0\n        for e in arr:\n            if e % 2 == 1:\n                c += 1 + even\n                even, odd = odd, even + 1\n            else:\n                c += odd\n                even += 1\n        return c % (10**9 + 7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n\n        odd = 0\n        even = 1\n        cnt = 0\n        res = 0\n        mod = 1000000007\n        for i in range(len(arr)):\n            if arr[i] % 2 == 1:\n                cnt += 1\n            if cnt % 2 == 1:\n                res = (res + even) % mod\n                odd += 1\n            else:\n                res = (res + odd) % mod\n                even += 1\n                \n        return int(res)\n            \n            \n        \n", "MOD = 1000000007\nclass Solution:\n    def numOfSubarrays(self, arr):\n        n = len(arr)\n        pre_sum = [1, 0]\n        now_sum = 0\n        res = 0\n        for i in range(n):\n            now_sum ^= (arr[i] & 1)\n            if now_sum == 1:\n                res += pre_sum[0]\n                pre_sum[1] += 1\n            else:\n                res += pre_sum[1]\n                pre_sum[0] += 1\n        return res % MOD", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ans = 0\n        odd = 0\n        even = 0\n        tot = 0\n        for i in range(len(arr)):\n            tot += arr[i]\n            if tot%2==0:\n                even +=1\n            else:\n                odd += 1\n            \n            if tot%2!=0:\n                ans +=1\n                ans += even\n            else:\n                ans += odd\n        \n        return ans % (10**9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ans, odd, even = 0,0,0\n        \n        for num in arr:\n            if num %2 != 0:\n                odd, even = even+1, odd\n            else:\n                odd, even = odd, even+1\n            ans += odd\n        return ans % int(1e9+7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        MOD = int(1e9 + 7)\n        res = even = odd = 0 \n        for a in arr:\n            even += 1\n            if a % 2:\n                even, odd = odd, even\n            res = (res + odd) % MOD\n        \n        return res \n                \n", "# class Solution:\n#     def numOfSubarrays(self, arr: List[int]) -> int:\n#         odd = 0\n#         even = 0\n#         n = len(arr)\n#         sumlist = [0]*n\n#         output = 0\n#         for i in range(n-1, -1, -1):\n#             if i != n-1:\n#                 sumlist[i] += arr[i] + sumlist[i + 1] \n#             else:\n#                 sumlist[i] += arr[i]\n#             if sumlist[i] % 2 == 0:\n#                 output += odd\n#                 even += 1\n#             else:\n#                 output += 1\n#                 output += even\n#                 odd += 1\n#             output %= (10**9 + 7)\n#         return output\n\n# class Solution:\n#     def numOfSubarrays(self, A):\n#         # prefix sum means the sum of all numbers up to that index\n#         # count = [the number of even prefix sums, the number of odd prefix sums]\n#         # we start with 1 even prefix sum because 0 is even\n#         count = [1, 0]\n#         # initialize the current prefix sum (cur) as being even and initialize the result as 0\n#         cur = res = 0\n#         # go through each of the numbers in the array\n#         for a in A:\n#             # see if the next number is odd (which is what a&1 is doing since it's a bitwise AND operator), and use the exclusion OR operator to see if the current number and the previous number add up to being even (0) or odd (1)\n#             # this can also be written as cur = (cur + (a % 2))%2\n#             cur ^= a & 1\n#             # if the prefix sum is even, then add the number of odd prefix sums to the results. If the prefix sum is odd, then add the number of even prefix sums to the result.\n#             res += count[1 - cur]\n#             # increase the counter for the number of even or odd prefix sums seen so far\n#             count[cur] += 1\n#         return res % (10**9 + 7)\n\nclass Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        res = odd = even = 0\n        for x in arr:\n            even += 1\n            if x % 2:\n                odd, even = even, odd\n            res = (res + odd) % 1000000007             \n        return res         ", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ret = 0\n        odd_count, even_count = 0, 0\n        \n        for num in arr:\n            if num % 2 != 0:\n                ret += even_count + 1\n                odd_count, even_count = even_count + 1, odd_count\n            else:\n                ret += odd_count\n                odd_count, even_count = odd_count, even_count + 1\n        \n        return ret % (10 ** 9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        odd = even = ans = 0\n        mod = (10 ** 9) + 7\n        for num in arr:\n            if num % 2 == 1:\n                ans += (even + 1)\n                curr_even = even\n                even = odd\n                odd = curr_even + 1\n            else:\n                ans += odd\n                even += 1\n        \n        return ans % mod", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        odd_sums = 0\n        even_sums = 0\n        ret = 0\n        sum_ = 0\n        \n        \n        for num in arr:\n            sum_ += num\n            \n            \n            if (sum_ & 1):\n                ret += even_sums + 1\n                odd_sums += 1\n            else:\n                ret += odd_sums\n                even_sums += 1\n                \n        return ret % (10 ** 9 + 7)", "class Solution:\n    def numOfSubarrays(self, A):\n        ans=even=odd=0\n        for x in A:\n            if x%2:\n                odd,even=1+even,odd\n            else:\n                even+=1\n            ans+=odd\n        return ans%(10**9+7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ans = 0\n        even_sums = []\n        odd_sums = []\n        current_sum = 0\n        for i in range(len(arr)):\n            current_sum += arr[i]\n            if current_sum % 2 == 0:\n                # is even\n                # if odd_sums[-1]\n                # if len(odd_sums) > 0:\n                #     ans += i - odd_sums[-1]\n                ans += len(odd_sums)\n                \n                even_sums.append(i)\n            else:\n                # is odd\n                # ans += 1\n                ans +=  1 + len(even_sums)\n                # j = 1\n                # while j <= len(even_sums) and even_sums[-j] == i-1\n                #     if \n                #     j += 1\n                # if len(even_sums) > 0 and even_sums[-1] == i-1:\n                #     ans += 1\n                # if len(odd_sums) > 0:\n                #     ans += i - odd_sums[-1] + 1\n                # else:\n                #     ans += i\n                # ans += len([]) \n                # last odd \n                # odd_sums[-1]\n                odd_sums.append(i)\n        return ans % (10**9 + 7)\n            \nif True:\n    print((Solution().numOfSubarrays([1,2,3,4,5,6,7]))) # 16\n    print((Solution().numOfSubarrays([100,100,99,99]))) # 4\n    print((Solution().numOfSubarrays([7]))) # 1\n    print((Solution().numOfSubarrays([2,4,6]))) # 0\n            \n        \n# [1,2,3,4,5,6,7]\n# [1]\n# [1,2]\n# [1]\n        \n# [1,3,5]\n# 1, 1, \n\n# [2,4,6]\n# 0\n\n# set(100), set(99), 200\n# [100,100,99,99]\n# 1 + 1 + 1\n\n# [1,2,3,4,5,6,7]\n# 1 + 1 + 1 + 1 set(1,3) set(2)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        sumEven = 0\n        sumOdd = 0\n        cumSum = 0\n        \n        result = 0\n        for num in arr:\n            cumSum += num\n            if cumSum % 2 == 1:\n                result += 1 + sumEven\n                sumOdd += 1\n            else:\n                result += sumOdd\n                sumEven += 1\n        \n        return result % (10**9+7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        prefixSum = [0]\n        for i in range(1, len(arr)+1):\n            prefixSum.append(prefixSum[-1]+arr[i-1])\n        out = 0\n        prefixEven = 0\n        prefixOdd = 0\n        for i in range(len(prefixSum)):\n            if prefixSum[i]%2 == 0:\n                prefixEven += 1\n                out += prefixOdd\n            else:\n                prefixOdd += 1\n                out += prefixEven\n        return out%(10**9+7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        # count of odd numbers, counts of even sums and odd sums\n        # default 1 for counts of even sums means 0 even sum is also a valid combination\n        odds, counts = 0, [1, 0]\n        for x in arr:\n            odds += 1 if x % 2 else 0\n            counts[odds % 2] += 1\n        return counts[0] * counts[1] % (10**9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        MOD = int(1e9 + 7)\n        even, odd = [0]*(n+1), [0]*(n+1)    \n        for i, a in enumerate(arr):\n            if a % 2 == 1:\n                even[i] = odd[i-1] \n                odd[i] = (even[i-1] + 1) \n            else:\n                even[i] = (even[i-1] + 1) \n                odd[i] = odd[i-1] \n        \n        return sum(odd) % MOD\n                \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        res = odd = even = 0\n        for x in arr:\n            even += 1\n            if x % 2:\n                odd, even = even, odd\n            res = (res + odd) % 1000000007             \n        return res", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        \n        N = len(arr)\n        if(N==0):\n            return 0\n        elif(N==1):\n            return abs(arr[0])%2\n        s = 0\n        tot = 0\n        ct_odd = 0\n        ct_even = 0\n        for i in range(N):\n            s += arr[i]\n            if(s%2==1):\n                tot += 1+ct_even\n                ct_odd += 1\n            else:\n                tot += ct_odd\n                ct_even += 1\n        return tot%(10**9+7)\n        \n        '''l1 = 0\n        l2 = 0\n        if(arr[0]%2):\n            l1 += 1\n        else:\n            l2 += 1\n        tot = 0\n        tot += l1\n        \n        for i in range(1,N):\n            l3 = 0\n            l4 = 0\n            if(arr[i]%2):\n                l3 = 1+l2\n                l4 = l1\n            else:\n                l3 = l1\n                l4 = 1+l2\n            l2 = l4\n            l1 = l3\n            tot += l1\n        return tot%(10**9+7)'''\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        count = len(arr)\n        pre_odd_count = arr[0] % 2\n        pre_even_count = 1 - pre_odd_count\n        result = pre_odd_count\n\n\n        for index in range(1, count):\n            isodd = arr[index] % 2\n            if isodd:\n                temp = pre_odd_count\n                pre_odd_count  = 1 + pre_even_count\n                pre_even_count = temp\n            else:\n                pre_odd_count = pre_odd_count\n                pre_even_count = 1 + pre_even_count\n            result += pre_odd_count\n\n \n        return result % 1000000007", "import copy\nclass Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        mod=(10**9)+7\n        arr1=arr.copy()\n        for i in range(1,len(arr)):\n            arr1[i]+=arr1[i-1]\n      \n        odd,even=0,0\n        cou=0\n        for i in range(len(arr1)):\n            \n            if arr1[i]%2==0:\n                even+=1\n            else:\n                odd+=1\n        for i in range(len(arr1)):\n            \n            if arr1[i]%2==1:\n                cou+=1\n        \n       \n        \n        cou+=odd*even\n        \n        return cou%mod\n        \n        \n        \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        s, d, ans = 0, 0, 0\n        for n in arr:\n                if n%2:\n                    s, d = d, s\n                    s += 1\n                else:\n                    d += 1\n                ans += s\n                #print(n, ans)\n        return ans%1000000007\n                    \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        odd, even = [0] * n, [0] * n\n        for i,v in enumerate(arr):\n            if not i:\n                odd[i] += v%2 == 1\n                even[i] += v%2 !=1\n            else:\n                if v%2:\n                    odd[i] += 1 + even[i-1]\n                    even[i] += odd[i-1]\n                else:\n                    odd[i] += odd[i-1]\n                    even[i] += 1 + even[i-1]\n        return sum(odd) % (10**9+7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        result = 0\n        dp = [0] * len(arr)\n        if (arr[0] % 2 != 0):\n            dp[0] = 1\n        result = dp[0]\n        for i in range(1, len(arr)):\n            if (arr[i] % 2 == 0):\n                dp[i] = dp[i-1]\n            else:\n                dp[i] = i - dp[i-1] + 1\n            result = (result + dp[i]) % (10 ** 9 + 7)\n            \n        return result", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        \n        N = len(arr)\n        if(N==0):\n            return 0\n        elif(N==1):\n            return abs(arr[0])%2\n        \n        l1 = 0\n        l2 = 0\n        if(arr[0]%2):\n            l1 += 1\n        else:\n            l2 += 1\n        tot = 0\n        tot += l1\n        \n        for i in range(1,N):\n            l3 = 0\n            l4 = 0\n            if(arr[i]%2):\n                l3 = 1+l2\n                l4 = l1\n            else:\n                l3 = l1\n                l4 = 1+l2\n            l2 = l4\n            l1 = l3\n            tot += l1\n        return tot%(10**9+7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        M = 10 **9 + 7\n        #think all odd as 1 and even as 0 \n        new_arr = [ 1 if i %2 == 1 else 0 for i in  arr]\n        res = 0\n        cucr_sum = 0\n        cash = {0:1, 1: 0}\n        for end in range(len(new_arr)):\n            cucr_sum += new_arr[end]\n            if cucr_sum%2 == 1:\n                res += cash[0]\n                cash[1] += 1\n                \n            else:\n                res += cash[1]\n                cash[0] += 1\n        \n        return res%M\n                \n            \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        res = even = odd = 0\n        for x in arr:\n            even += 1\n            if x % 2 != 0:\n                even,odd = odd,even\n            res = (res + odd) % (10 ** 9 + 7)\n        return res", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        mod, n = 10 ** 9 + 7, len(arr)\n        odd_sum, even_sum, curr_sum, ans = 0, 1, 0, 0\n        for i in arr:\n            curr_sum += i\n            if curr_sum % 2 == 1:\n                odd_sum += 1\n                ans += even_sum % mod\n            else:\n                even_sum += 1\n                ans += odd_sum % mod\n        ans %= mod\n        return ans", "class Solution:\n    # Ref: https://leetcode.com/problems/number-of-sub-arrays-with-odd-sum/discuss/755495/Python-or-O(n)-time-and-O(1)-space-or-prefix-sum(detailed-explanation)\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        odd_sum, even_sum, cur_sum, ans =  0, 1, 0, 0\n        mod = (10**9 + 7)\n        for i in arr:\n            cur_sum+=i\n            \n            #Check for odd sum\n            if cur_sum % 2 != 0:\n                odd_sum+=1\n                ans += even_sum % mod\n            \n            #Check for even sum\n            if cur_sum % 2 == 0:\n                even_sum+=1\n                ans += odd_sum % mod\n        \n        ans = ans % mod\n        \n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        mod = 10**9+7\n        odd = 0\n        even = 0\n        ans = 0\n        for num in arr:\n            if num%2:\n                odd, even = even + 1, odd\n            else:\n                even += 1\n            ans = (ans+odd)%mod\n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        \n        dp=[0,0]\n        res=cur=0\n        for i in arr:\n            cur^=i&1\n\n\n            res+=cur+dp[1-cur]\n\n            dp[cur]+=1\n \n \n                \n        return res%(10**9 + 7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        MOD = 10 ** 9 + 7\n        \n        memo = {0: 0, 1: 0}\n        cumsum = 0\n        \n        # Odd + Even = Odd\n        # Even + Even = Even\n        # Odd + Odd = Even\n        \n        res = 0\n        \n        for v in arr:\n            cumsum += v\n            \n            if cumsum % 2 == 0:\n                # Is Even\n                memo[0] += 1\n                res = (res + memo[1]) % MOD\n                \n            else:\n                # Is Odd\n                memo[1] += 1\n                res = (1 + res + memo[0]) % MOD\n                \n        return res", "from itertools import accumulate\nclass Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n      # How many non-empty subarrays are there from an array of length k\n      def num_subarrays(k):\n        return (k * k  + k) // 2\n      counts = [0, 0]\n      for prefix in accumulate(arr):\n        counts[prefix % 2] += 1\n      evens, odds = counts\n      return (num_subarrays(len(arr)) - (num_subarrays(evens) + (num_subarrays(odds) - odds))) % (10 ** 9 + 7)\n      \n      \n      \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        \n        even = 0\n        odd = 0\n        \n        res = 0\n        for i in range(len(arr)):\n            if arr[i] % 2 == 1:\n                odd, even = even + 1, odd\n                res += odd\n            else:\n                even += 1\n                res += odd\n        \n        return res % 1000000007", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        dp = [0] * len(arr)\n        dp[0] = arr[0]&1\n        for i in range(1,len(arr)):\n            if arr[i]&1: # arr[i] is odd, for dp[i] be odd, dp[i-1] must be even\n                dp[i] = i - dp[i-1] + 1 # 1 as arr[i] itself\n            else: # arr[i] is even\n                dp[i] = dp[i-1]\n        return sum(dp) % (10**9+7)\n", "class Solution:\n  def numOfSubarrays(self, arr: List[int]) -> int:\n    prefix = [0]\n    \n    for num in arr:\n      prefix.append(prefix[-1] ^ num & 1)\n    \n    # now we are looking for the numbr of pairs (i, j) where prefix[i] != prefix[j]\n    \n    zeros = 0\n    ones = 0\n    result = 0\n    \n    for x in prefix:\n      if x == 1:\n        ones += 1\n        result += zeros\n      else:\n        zeros += 1\n        result += ones\n    return result % (10 ** 9 + 7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ans = 0\n        mod = 1e9 + 7\n        seen = [1, 0]\n        for i in range(len(arr)):\n            if(i > 0):\n                arr[i]+=arr[i-1]\n            ans += seen[(arr[i]+1)%2]\n            ans %= mod\n            seen[arr[i]%2]+=1\n        return int(ans)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        pre = [0]\n        for n in arr:\n            pre.append(pre[-1] + n)\n        odd = even = 0\n        ans = 0\n        for i in range(len(pre)):\n            if pre[i] % 2 == 0:\n                ans += odd\n                even += 1\n            else:\n                ans += even\n                odd += 1\n        return ans % (10 ** 9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        count = []\n        ans = 0\n        odd = 0\n        even = 0\n        tot = 0\n        for i in range(len(arr)):\n            tot += arr[i]\n            if tot%2==0:\n                even +=1\n            else:\n                odd += 1\n\n            count.append((tot, even, odd))\n            if count[i][0]%2 != 0:\n                ans +=1\n                ans += count[i][1]\n            else:\n                ans += count[i][2]\n        \n        return ans % (10**9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        cursum = 0\n        ans = 0\n        if(arr[0]%2):\n            cursum =1\n            ans = 1\n        for i in range(1,len(arr)):\n            if(arr[i]%2):\n                cursum = i - cursum + 1\n            ans = ans +cursum\n        return(ans%(10**9+7))", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ans = 0\n        mod = 1e9 + 7\n        seen = {0: 1, 1: 0}\n        for i in range(len(arr)):\n            if(i > 0):\n                arr[i]+=arr[i-1]\n            ans += seen[(arr[i]+1)%2]\n            ans %= mod\n            seen[arr[i]%2]+=1\n        return int(ans)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ans = 0\n        even = 0\n        odd = 0\n        for v in arr:\n            if v % 2 == 0:\n                even += 1\n            else:\n                even, odd = odd, even\n                odd += 1\n            ans += odd\n        return ans  % 1000000007", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        memo = {0:1, 1:0}\n        cnt = 0\n        curr_sum = 0\n        K = 10**9+7\n        for n in arr:\n            curr_sum += n\n            if curr_sum%2==0:\n                cnt += memo[1]\n            else:\n                cnt += memo[0]\n            memo[curr_sum%2] += 1\n            cnt = cnt%K\n            # print (memo, cnt)\n        return cnt", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        s = [0, 0]\n        res = 0\n        cur = 0\n        for x in arr:\n            cur = (cur + x) % 2\n            res += s[1-cur]\n            res += int(cur == 1)\n            s[cur] += 1\n        return res % (10 ** 9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        sum_even = 0\n        sum_odd = 0\n        out = 0\n        for i in range(len(arr)):\n            if arr[i] %2 ==0:\n                sum_even, sum_odd = sum_even+1, sum_odd\n            else:\n                sum_even, sum_odd = sum_odd , sum_even +1\n            out += sum_odd\n        return out % (10**9 + 7)\n\n\n", "MOD = 10**9 + 7\n\n\nclass Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        odd_cum_sums = 0\n        even_cum_sums = 0\n\n        total_odd_sums = 0\n        # Get cumulative sum\n        for i in range(len(arr) - 1):\n            arr[i + 1] += arr[i]\n\n        for sum_ in arr:\n            # Even cumulative sum\n            if sum_ % 2 == 0:\n                total_odd_sums += odd_cum_sums\n                even_cum_sums += 1\n            # Odd cumulative sum\n            else:\n                total_odd_sums += 1 + even_cum_sums\n                odd_cum_sums += 1\n\n        return total_odd_sums % MOD\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        evenSum=0\n        oddSum=0\n        prefSum=0\n        ans=0\n\n\n        for ele in arr:\n\n            prefSum=prefSum+ele\n\n            '''\n                prefix sum is odd\n            '''\n            if prefSum%2==1:\n\n                ans+=evenSum+1\n                oddSum+=1\n            else:\n                ans+=oddSum\n                evenSum+=1\n\n\n            ans%=((10**9)+7)\n\n\n\n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ans = 0\n        seen_odd, seen_even = set(), set()\n        odd_count, even_count = 0, 1\n        psum = 0\n        mod = 10**9 + 7\n        for a in arr:\n            psum += a\n            if psum % 2 == 0:\n                ans = (ans + odd_count) % mod\n                seen_even.add(psum)\n                even_count += 1\n            else:\n                ans = (ans + even_count) % mod\n                seen_odd.add(psum)\n                odd_count += 1\n                \n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        c = collections.defaultdict(int)\n        s = 0\n        c[0] += 1\n        res = 0\n        mod = 10 ** 9 + 7\n        for x in arr:\n            s ^= x%2\n            res += c[1-s]\n            res %= mod\n            c[s] += 1\n        return res\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        A = [i%2 for i in arr]\n        n = len(A)\n        \n        lst = [[0,0]]\n        lst[0][A[0]&1] = 1\n        \n        for i in range(1, n):\n            if A[i]:\n                lst.append([lst[-1][1], 1+lst[-1][0]])\n            else:\n                lst.append([1+lst[-1][0], lst[-1][1]])\n                \n        # print(lst)\n        \n        return sum([x[1] for x in lst]) % (10**9+7)", "def accumulate(arr):\n    acc = 0\n    for elem in arr:\n        acc = (acc + elem) % 2\n        yield acc\n\nclass Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        parity_array = (x % 2 for x in arr)\n        cumulative_array = accumulate(parity_array)\n        \n        prev = [1, 0]\n        ans = 0\n        for elem in cumulative_array:\n            ans += [prev[1], prev[0]] [elem]\n            prev[elem] += 1\n        \n        return ans % (10 ** 9 + 7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        count = arr[0] % 2\n        \n        currentCount = count\n        for i in range(1, len(arr)):\n            if arr[i]%2 == 1:\n                currentCount = i - currentCount + 1\n            count += currentCount\n            \n        return count % (10**9+7)\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        cumsum = 0\n        even = 1\n        odd = 0\n        ans = 0\n        MOD = 10**9 + 7\n        \n        for num in arr:\n            cumsum += num\n            if cumsum % 2 == 0:\n                ans = (ans + odd) % MOD\n                even += 1\n            else:\n                ans = (ans + even) % MOD\n                odd += 1\n        \n        return ans\n                \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        count = len(arr)\n        isodd = [item%2 for item in arr]\n        odd_end_total = [0] * count\n        even_end_total = [0] * count\n\n        odd_end_total[0] = isodd[0]\n        even_end_total[0] = 1 - odd_end_total[0]\n\n        for index in range(1, count):\n            if isodd[index]:\n                odd_end_total[index] = 1 + even_end_total[index-1]\n                even_end_total[index] = odd_end_total[index-1]\n            else:\n                odd_end_total[index] = odd_end_total[index-1]\n                even_end_total[index] = 1 + even_end_total[index-1]\n\n        result = 0\n        for index in range(count):\n            result += odd_end_total[index]\n\n        return result % 1000000007", "def isEven(n):\n    return n % 2 == 0\ndef isOdd(n):\n    return not isEven(n)\n\nclass Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        od = list(range(len(arr)))\n        ev = list(range(len(arr)))\n        \n        if isEven(arr[0]):\n            od[0] = 0\n            ev[0] = 1\n        else:\n            od[0] = 1\n            ev[0] = 0\n\n        for i, num in enumerate(arr):\n            if i == 0:\n                continue\n            if isOdd(num):\n                od[i] = ev[i-1] + 1\n                ev[i] = od[i-1]\n            else:\n                od[i] = od[i-1]\n                ev[i] = ev[i-1] + 1\n        ans = 0\n        \n        for num in od:\n            ans += num\n        return ans % (10 ** 9 + 7)", "#744\n\nM = int(1e9+7)\n\n\nclass Solution:\n  def numOfSubarrays(self, arr: List[int]) -> int:\n      n = len(arr)\n      odd = [-1] * n\n      even = [-1] * n\n      \n      odd[0] = 1 if arr[0] % 2 == 1 else 0\n      even[0] = 1 if arr[0] % 2 == 0 else 0\n      \n      for i in range(1, n):\n        v = arr[i]\n        if v % 2 == 1:\n          odd[i] = (1 + even[i-1]) % M\n          even[i] = odd[i-1]\n        else:\n          odd[i] = odd[i-1]\n          even[i] = (even[i-1] + 1) % M\n      \n      \n      ret = 0\n      for v in odd:\n        ret = (ret + v) % M\n      return ret", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        even = [0]*(n)\n        odd = [0]*(n)\n        # dp, where odd[i], even[i] are numbers of sub arrays that end at i\n        # we then sum them up together\n        for i, x in enumerate(arr):\n            if i == 0:\n                if x % 2 == 0:\n                    even[i] = 1\n                else:\n                    odd[i] = 1\n            else:\n                if x % 2 == 0:\n                    even[i] = even[i-1] + 1     \n                    odd[i] = odd[i-1]\n                else:\n                    even[i] = odd[i-1]\n                    odd[i] = even[i-1] + 1\n                 \n        return sum(odd) % (int(1e9) + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        limit = 10**9 + 7\n        # use dp:\n        \n        # the number of odd sums ending at each index\n        final = 0 \n        dp_even = [0] * (len(arr ) + 1)\n        dp_odd = [0] * (len(arr ) + 1)\n        for i in range(len(arr)):\n            num = arr[i]\n            if num%2 == 0:\n                # if this number is even, so we need to find the count of prev odd\n                odd_cur = dp_odd[i]\n                even_cur = 1 + dp_even[i]\n                final += odd_cur\n                dp_even[i + 1] = even_cur\n                dp_odd[i + 1] = odd_cur\n                # so we need to calculate the number odd and even sum ending at each index\n            else:\n                odd_cur = dp_even[i] + 1\n                even_cur = dp_odd[i]\n                final += odd_cur\n                dp_odd[i + 1] = odd_cur\n                dp_even[i + 1] = even_cur\n                \n        return final % limit", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        '''\n        odd[i] = number of sub arrays with odd sum and end at i\n        even[i] = number of sub arrays with even sum and end at i\n        '''\n        odd = [0 for x in arr]\n        even = [0 for x in arr]\n        odd[0] = 1 if arr[0] % 2 == 1 else 0\n        even[0] = 1 if arr[0] % 2 == 0 else 0\n        for i in range(1, len(arr)):\n            if arr[i] % 2 == 0:\n                odd[i] = odd[i-1]\n                even[i] = even[i-1] + 1\n            else:\n                odd[i] = even[i-1] + 1\n                even[i] = odd[i-1]\n        return sum(odd) % 1000000007\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        mod = 10**9+7\n        for i in range(len(arr)):\n            arr[i] %= 2\n        \n        n = len(arr)\n        dp = []\n        ones = 0\n        zeroes = 0\n        for i in arr:\n            if not dp:\n                dp.append(i)\n            else:\n                dp.append(dp[-1]+i)\n            \n            dp[-1] %= 2\n            if dp[-1] == 0:\n                zeroes += 1\n            else:\n                ones += 1\n        \n        #print(ones,zeroes)\n        total = n*(n+1)//2\n        total -= ones*(ones-1)//2\n        total -= (zeroes+zeroes*(zeroes-1)//2)\n        \n        return total%mod", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        r=0\n        e=0\n        o=0\n        for i in arr:\n            if(i%2==1):\n                r+=(e+1)\n                o,e=e+1,o\n            else:\n                r+=o\n                o,e=o,e+1\n        a=(10**9)+7\n        return r%a\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        odd = 0\n        even = 0\n        n = len(arr)\n        sumlist = [0]*n\n        output = 0\n        for i in range(n-1, -1, -1):\n            if i != n-1:\n                sumlist[i] += arr[i] + sumlist[i + 1] \n            else:\n                sumlist[i] += arr[i]\n            if sumlist[i] % 2 == 0:\n                output += odd\n                even += 1\n            else:\n                output += 1\n                output += even\n                odd += 1\n            output %= (10**9 + 7)\n        return output", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        ans = 0\n        even = 0\n        odd = 0\n        for v in arr:\n            if v % 2 == 0:\n                even, odd = even + 1, odd\n            else:\n                even, odd = odd, even + 1\n            ans += odd\n        return ans  % 1000000007", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        odd, even = 0,0\n        arr = [i % 2 for i in arr]\n        \n        if arr[0] != 0:\n            odd += 1\n        else:\n            even += 1\n                    \n        for i in range(1,len(arr)):         \n            arr[i] = arr[i - 1] + arr[i]\n            if arr[i] % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n        ans = 0\n        for i in arr[::-1]:\n            if i % 2 == 0 and odd > 0:\n                ans += odd\n                even -= 1\n            elif i % 2 == 1:\n                ans += (even+1)\n                odd -= 1\n            else:\n                continue\n        return ans % (10**9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        odd, even = 0,0\n        arr = [i % 2 for i in arr]\n        \n        if arr[0] != 0:\n            odd += 1\n        else:\n            even += 1\n                    \n        for i in range(1,len(arr)):         \n            arr[i] = arr[i - 1] + arr[i]\n            if arr[i] % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n        ans = 0\n        for i in arr[::-1]:\n            if i % 2 == 0 and odd > 0:\n                ans += odd\n                even -= 1\n            elif i % 2 == 1:\n                ans += (even+1)\n                odd -= 1\n            else:\n                break\n        return ans % (10**9 + 7)", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        dp = [[0, 0]]\n        \n        ans = 0\n        for i in arr:\n            if i % 2 == 0:\n                dp.append([dp[-1][0] + 1, dp[-1][1]])\n            else:\n                dp.append([dp[-1][1], dp[-1][0] + 1])\n               \n            ans += dp[-1][1]\n        \n        return int(ans % (1e9 + 7))", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        \n        dp=[-1 for i in range(len(arr))]\n        dp[0]=[(arr[0]+1)%2,arr[0]%2]\n        total=dp[0][1]\n        for k in range(1,len(arr)):\n            if arr[k]%2==0:\n                dp[k]=[(dp[k-1][0]+1)%(10**9+7),(dp[k-1][1])%(10**9+7)]\n                total+=dp[k][1]\n                total=total%(10**9+7)\n            else:\n                dp[k]=[(dp[k-1][1])%(10**9+7),(dp[k-1][0]+1)%(10**9+7)]\n                total+=dp[k][1]\n                total=total%(10**9+7)\n        return total%(10**9+7)\n        \n            \n      \n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        mod = 10**9 + 7\n        result = 0\n        sumOdd = [0] * (len(arr))\n        sumEven = [0] * (len(arr))\n        if arr[0] % 2 == 1:\n            sumOdd[0] = 1\n            sumEven[0] = 0\n        else:\n            sumOdd[0] = 0\n            sumEven[0] = 1\n        for i in range(1,len(sumOdd)):\n            if arr[i] % 2 == 0:\n                sumOdd[i] = sumOdd[i - 1]\n                sumEven[i] = sumEven[i - 1] + 1\n            else:\n                sumOdd[i] = sumEven[i - 1] + 1\n                sumEven[i] = sumOdd[i - 1]\n        return sum(sumOdd) % mod\n", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        dp = [[0]*2 for _ in range(n+1)]\n        kMod = 1e9+7\n        for i, num in enumerate(arr):\n           \n            if num&1:\n                #even\n                dp[i+1][0] = dp[i][1]\n                #odd\n                dp[i+1][1] = dp[i][0]+1\n            else:\n                #even\n                dp[i+1][0] = dp[i][0] + 1\n                #odd\n                dp[i+1][1] = dp[i][1]\n        \n        return int(sum([dp[i][1] for i in range(n+1)])%kMod)", "class Solution:\n    def numOfSubarrays(self, A: List[int]) -> int:\n        n = len(A)\n        mod = 10**9+7\n        ans = 0\n        prefix, ctr = 0, Counter([0]) \n        for i in range(n):\n            prefix = prefix+A[i]\n            s = prefix%2\n            ans = ans+ctr[1-s]\n            ans = ans%mod \n            ctr[s] += 1\n        return ans", "class Solution:\n    def numOfSubarrays(self, arr: List[int]) -> int:\n        even, odd = 1, 0\n        total = 0\n        ans = 0\n        for i in arr:\n            total += i\n            if total % 2 == 1:\n                ans += even\n                odd += 1\n            else:\n                ans += odd\n                even += 1\n            ans %= 10**9 + 7\n        return ans\n"]