["def outOfIndex(boys,girls,COST):\n if COST == 0:\n  return len(boys)\n else:\n  total_cost = [ abs(x-y) for x,y in zip(boys,girls)]\n  total_cost = sum(total_cost)\n  return total_cost\n\nfor _ in range(int(input())):\n COST = int(input())\n queue = input()\n B = queue.count('B')\n G = queue.count('G')\n boys=[]\n girls = []\n if (abs(B-G)>1):\n  print(-1)\n else:\n  if B > G:\n   for c in range(len(queue)):\n    if c%2!=0 and queue[c]=='B':\n     boys.append(c)\n    if c%2==0 and queue[c] =='G':\n     girls.append(c)\n   print(outOfIndex(boys,girls,COST))\n   boys.clear()\n   girls.clear()\n  elif B < G:\n   for c in range(len(queue)):\n    if c%2!=0 and queue[c]=='G':\n     girls.append(c)\n    if c%2==0 and queue[c] =='B':\n     boys.append(c)\n   print(outOfIndex(boys,girls,COST))\n   boys.clear()\n   girls.clear()\n  else:\n   for c in range(len(queue)):\n    if c%2!=0 and queue[c]=='B':\n     boys.append(c)\n    if c%2==0 and queue[c] =='G':\n     girls.append(c)\n   attempt1 = outOfIndex(boys,girls,COST)\n   boys.clear()\n   girls.clear()\n   for c in range(len(queue)):\n    if c%2!=0 and queue[c]=='G':\n     girls.append(c)\n    if c%2==0 and queue[c] =='B':\n     boys.append(c)\n   attempt2 = outOfIndex(boys,girls,COST)\n   print(min(attempt1,attempt2))\n   boys.clear()\n   girls.clear() \n", "def outOfIndex(boys,girls,COST):\n if COST == 0:\n  return len(boys)\n else:\n  total_cost = [ abs(x-y) for x,y in zip(boys,girls)]\n  total_cost = sum(total_cost)\n  return total_cost\n\nfor _ in range(int(input())):\n COST = int(input())\n queue = input()\n B = queue.count('B')\n G = queue.count('G')\n boys=[]\n girls = []\n if (abs(B-G)>1):\n  print((-1))#Impossible condition\n else:\n  if B > G:\n   for c in range(len(queue)):\n    if c%2!=0 and queue[c]=='B':\n     boys.append(c)\n    if c%2==0 and queue[c] =='G':\n     girls.append(c)\n    #After genarating list pass it to the function\n   print(outOfIndex(boys,girls,COST))\n   boys.clear()\n   girls.clear()\n  \n  elif B < G:\n   for c in range(len(queue)):\n    if c%2!=0 and queue[c]=='G':\n     girls.append(c)\n    if c%2==0 and queue[c] =='B':\n     boys.append(c)\n   print(outOfIndex(boys,girls,COST))\n   boys.clear()\n   girls.clear()\n\n  else:\n   #Start with boys\n   for c in range(len(queue)):\n    if c%2!=0 and queue[c]=='B':\n     boys.append(c)\n    if c%2==0 and queue[c] =='G':\n     girls.append(c)\n    #After genarating list pass it to the function\n   attempt1 = outOfIndex(boys,girls,COST)\n   boys.clear()\n   girls.clear()\n   for c in range(len(queue)):\n    if c%2!=0 and queue[c]=='G':\n     girls.append(c)\n    if c%2==0 and queue[c] =='B':\n     boys.append(c)\n   attempt2 = outOfIndex(boys,girls,COST)\n   print(min(attempt1,attempt2))\n   boys.clear()\n   girls.clear() \n", "def actual_generator(a,N,start):\n result = []\n if a == 'B':\n  result = ['B', 'G'] * (N // 2)\n  result.append('B')\n elif a == 'G':\n  result = ['G', 'B'] * (N // 2)\n  result.append('G')\n else:\n  if start == 'B':\n   result = ['B', 'G'] * (N // 2)\n  elif start == 'G':\n   result = ['G', 'B'] * (N // 2)\n return result\n\n\nfor _ in range(int(input())):\n typ = int(input())\n s = input()\n N = len(s)\n array = [s[i] for i in range(N)]\n countG = array.count('G')\n countB = array.count('B')\n if abs(countG - countB) > 1:\n  print(-1)\n else:\n  defectB = []\n  defectG = []\n  if countG == countB:\n   actual1 = actual_generator('X', N, 'B')\n   actual2 = actual_generator('X', N, 'G')\n   defect1B = []\n   defect1G = []\n   defect2B = []\n   defect2G = []\n   for i in range(N):\n    if actual1[i] != array[i] and actual1[i] == 'B':\n     defect1B.append(i)\n    elif actual1[i] != array[i] and actual1[i] == 'G':\n     defect1G.append(i)\n   for i in range(N):\n    if actual2[i] != array[i] and actual2[i] == 'B':\n     defect2B.append(i)\n    elif actual2[i] != array[i] and actual2[i] == 'G':\n     defect2G.append(i)\n   if len(defect1B) > len(defect2B):\n    defectG = defect2G\n    defectB = defect2B\n   else :\n    defectG = defect1G\n    defectB = defect1B\n  elif countG > countB:\n   actual = actual_generator('G', N, 'X')\n   defectB = []\n   defectG = []\n   for i in range(N):\n    if actual[i] != array[i] and actual[i] == 'B':\n     defectB.append(i)\n    elif actual[i] != array[i] and actual[i] == 'G':\n     defectG.append(i)\n\n  elif countB > countG:\n   actual = actual_generator('B', N, 'X')\n   defectB = []\n   defectG = []\n   for i in range(N):\n    if actual[i] != array[i] and actual[i] == 'B':\n     defectB.append(i)\n    elif actual[i] != array[i] and actual[i] == 'G':\n     defectG.append(i)\n\n  if typ == 0 :\n   print(len(defectB))\n  elif typ == 1 :\n   print(abs(sum(defectG)-sum(defectB)))", "for _ in range(int(input())):\n t=int(input())\n s=input()\n b=[]\n a=[]\n c=0\n lb=0\n la=0\n r=[]\n ls=len(s)\n for i in (s):\n  c+=1\n  if i=='B':\n   lb+=1\n  else:\n   la+=1\n if (la-lb)==0 or abs(la-lb)==1:\n  if la < lb:\n   for i in range(ls):\n    if i % 2 == 1 and s[i] == 'B':\n     b.append(i)\n    if i % 2 == 0 and s[i] == 'G':\n     a.append(i)\n  elif la > lb:\n   for i in range(ls):\n    if i % 2 == 0 and s[i] == 'B':\n     b.append(i)\n    if i % 2 == 1 and s[i] == 'G':\n     a.append(i)\n  cs = 0\n  sw = 0\n  for i in range(len(a)):\n   cs += abs(a[i] - b[i])\n  if t == 0:\n   cs = len(a)\n  if la==lb:\n   for i in range(len(s)):\n    if i % 2 == 0 and s[i] == 'B':\n     b.append(i)\n    if i % 2 == 1 and s[i] == 'G':\n     a.append(i)\n   cs=0\n   sw=0\n   for i in range(len(a)):\n    cs+=abs(a[i]-b[i])\n   if t==0:\n    cs=len(a)\n   x=cs\n   b=[]\n   a=[]\n   for i in range(len(s)):\n    if i % 2 == 1 and s[i] == 'B':\n     b.append(i)\n    if i % 2 == 0 and s[i] == 'G':\n     a.append(i)\n   cs=0\n   sw=0\n   for i in range(len(a)):\n    if i<len(b):\n     cs+=abs(a[i]-b[i])\n   if t==0:\n    cs=len(a)\n   cs=min(x,cs)\n  print(cs)\n else:\n  print(-1)\n", "for _ in range(int(input())):\n t = int(input())\n s = input()\n b = 0\n g = 0\n for i in s:\n  if i=='B':\n   b+=1\n  else:\n   g+=1\n if abs(g-b)>1:\n  print(\"-1\")\n elif (g-b)>0:\n  gl = []\n  bl = []\n  for i in range(len(s)):\n   if s[i]=='B' and i%2==0:\n    bl.append(i)\n   elif s[i]=='G' and i%2==1:\n    gl.append(i)\n  c=0\n  for i in range(len(bl)):\n   if t==0:\n    c+=1\n   else:\n    c+=abs(gl[i]-bl[i])\n  print(c)\n elif (b-g)>0:\n  gl = []\n  bl = []\n  for i in range(len(s)):\n   if s[i]=='B' and i%2==1:\n    bl.append(i)\n   elif s[i]=='G' and i%2==0:\n    gl.append(i)\n  c=0\n  for i in range(len(bl)):\n   if t==0:\n    c+=1\n   else:\n    c+=abs(gl[i]-bl[i])\n  print(c)\n else:\n  gl = []\n  bl = []\n  for i in range(len(s)):\n   if s[i]=='B' and i%2==0:\n    bl.append(i)\n   elif s[i]=='G' and i%2==1:\n    gl.append(i)\n  c1=0\n  for i in range(len(bl)):\n   if t==0:\n    c1+=1\n   else:\n    c1+=abs(gl[i]-bl[i])\n  gl = []\n  bl = []\n  for i in range(len(s)):\n   if s[i]=='B' and i%2==1:\n    bl.append(i)\n   elif s[i]=='G' and i%2==0:\n    gl.append(i)\n  c2=0\n  for i in range(len(bl)):\n   if t==0:\n    c2+=1\n   else:\n    c2+=abs(gl[i]-bl[i])\n  if c2<c1:\n   print(c2)\n  else:\n   print(c1)", "for _ in range(int(input())):\n t = int(input())\n s = input()\n n = len(s)\n b = 0\n for i in s:\n  if i == 'B':\n   b+=1\n g = n-b\n if abs(b-g)>1:\n  print('-1')\n elif b==1 and g==1:\n  print('0')\n elif b>g:\n  BG = 'BG'*(n//2)\n  if n&1: BG += 'B'\n  B, G = [], []\n  for i in range(n):\n   if s[i]!=BG[i]:\n    if s[i]=='B':\n     B.append(i)\n    else:\n     G.append(i)\n  if t==0:\n   print(len(B))\n  else:\n   print(sum([abs(B[i]-G[i]) for i in range(len(B))]))\n elif b<g:\n  BG = 'GB'*(n//2)\n  if n&1: BG += 'G'\n  B, G = [], []\n  for i in range(n):\n   if s[i]!=BG[i]:\n    if s[i]=='B':\n     B.append(i)\n    else:\n     G.append(i)\n  if t==0:\n   print(len(B))\n  else:\n   print(sum([abs(B[i]-G[i]) for i in range(len(B))]))\n else:\n  BG = 'GB'*(n//2)\n  if n&1: BG += 'G'\n  B, G = [], []\n  for i in range(n):\n   if s[i]!=BG[i]:\n    if s[i]=='B':\n     B.append(i)\n    else:\n     G.append(i)\n  if t==0:\n   v1 = len(B)\n  else:\n   v1 = sum([abs(B[i]-G[i]) for i in range(len(B))])\n  \n  BG = 'BG'*(n//2)\n  if n&1: BG += 'B'\n  B, G = [], []\n  for i in range(n):\n   if s[i]!=BG[i]:\n    if s[i]=='B':\n     B.append(i)\n    else:\n     G.append(i)\n  if t==0:\n   v2 = len(B)\n  else:\n   v2 = sum([abs(B[i]-G[i]) for i in range(len(B))])\n  print(min(v1,v2))", "for _ in range(int(input())):\n t = int(input())\n s = input()\n b = 0\n g = 0\n for i in s:\n  if i=='B':\n   b+=1\n  else:\n   g+=1\n if abs(g-b)>1:\n  print(\"-1\")\n elif (g-b)>0:\n  gl = []\n  bl = []\n  for i in range(len(s)):\n   if s[i]=='B' and i%2==0:\n    bl.append(i)\n   elif s[i]=='G' and i%2==1:\n    gl.append(i)\n  c=0\n  for i in range(len(bl)):\n   if t==0:\n    c+=1\n   else:\n    c+=abs(gl[i]-bl[i])\n  print(c)\n elif (b-g)>0:\n  gl = []\n  bl = []\n  for i in range(len(s)):\n   if s[i]=='B' and i%2==1:\n    bl.append(i)\n   elif s[i]=='G' and i%2==0:\n    gl.append(i)\n  c=0\n  for i in range(len(bl)):\n   if t==0:\n    c+=1\n   else:\n    c+=abs(gl[i]-bl[i])\n  print(c)\n else:\n  gl = []\n  bl = []\n  for i in range(len(s)):\n   if s[i]=='B' and i%2==0:\n    bl.append(i)\n   elif s[i]=='G' and i%2==1:\n    gl.append(i)\n  c1=0\n  for i in range(len(bl)):\n   if t==0:\n    c1+=1\n   else:\n    c1+=abs(gl[i]-bl[i])\n  gl = []\n  bl = []\n  for i in range(len(s)):\n   if s[i]=='B' and i%2==1:\n    bl.append(i)\n   elif s[i]=='G' and i%2==0:\n    gl.append(i)\n  c2=0\n  for i in range(len(bl)):\n   if t==0:\n    c2+=1\n   else:\n    c2+=abs(gl[i]-bl[i])\n  if c2<c1:\n   print(c2)\n  else:\n   print(c1)", "def compute(s,c):\n bcount = s.count('B')\n gcount = s.count('G')\n if(abs(bcount-gcount)>1):\n  return -1\n stack = [(0,s[0])]\n bans = 0\n gans = 0\n if(c!=0):\n  c=1\n for i in range(1,len(s)):\n  if(len(stack)>0 and stack[len(stack)-1][1]!=s[i]):\n   idx,char = stack[len(stack)-1]\n   if((idx%2 and s[i]=='B') or (i%2 and char=='B')):\n    bans += abs(i-idx)**c\n   elif((idx%2 and s[i]=='G') or (i%2 and char=='G')):\n    gans += abs(i-idx)**c\n   stack.pop(len(stack)-1)\n  else:\n   stack.append((i,s[i]))\n if(gcount==bcount):\n  return min(bans,gans)\n elif(gcount>bcount):\n  return bans\n return gans\nfor t in range(int(input())):\n c = int(input())\n print(compute(input(),c))", "def compute(s,c):\n bcount = s.count('B')\n gcount = s.count('G')\n if(abs(bcount-gcount)>1):\n  return -1\n stack = [(0,s[0])]\n bans = 0\n gans = 0\n beven = 0\n geven = 0\n if(c!=0):\n  c=1\n for i in range(1,len(s)):\n  if(len(stack)>0 and stack[len(stack)-1][1]!=s[i]):\n   idx,char = stack[len(stack)-1]\n   if((idx%2 and s[i]=='B') or (i%2 and char=='B')):\n    bans += abs(i-idx)**c\n    beven+=1\n   elif((idx%2 and s[i]=='G') or (i%2 and char=='G')):\n    gans += abs(i-idx)**c\n    geven+=1\n   stack.pop(len(stack)-1)\n  else:\n   stack.append((i,s[i]))\n  #print(stack,end='  ')\n \"\"\"\n    if(len(stack)>0):\n     idx,char = stack[len(stack)-1]\n     if(char=='G'):\n      geven+=1\n     else:\n      beven+=1\n    print(\"geven =\",geven,\"beven =\",beven,end=' ')\n    \"\"\"\n if(gcount==bcount):\n  return min(bans,gans)\n elif(gcount>bcount):\n  return bans\n return gans\nfor t in range(int(input())):\n c = int(input())\n print(compute(input(),c))\n", "def compute(s,c):\n bcount = s.count('B')\n gcount = s.count('G')\n if(abs(bcount-gcount)>1):\n  return -1\n stack = [(0,s[0])]\n bans = 0\n gans = 0\n for i in range(1,len(s)):\n  if(len(stack)>0 and stack[len(stack)-1][1]!=s[i]):\n   idx,char = stack[len(stack)-1]\n   if((idx%2 and s[i]=='B') or (i%2 and char=='B')):\n    bans += abs(i-idx)**c\n   elif((idx%2 and s[i]=='G') or (i%2 and char=='G')):\n    gans += abs(i-idx)**c\n   stack.pop(len(stack)-1)\n  else:\n   stack.append((i,s[i]))\n \n if(gcount==bcount):\n  return min(bans,gans)\n elif(gcount>bcount):\n  return bans\n return gans\nfor t in range(int(input())):\n c = int(input())\n print(compute(input(),c))\n", "\"\"\"\narrange string in a form that no two 'B' or two 'G' come together, if can't \u00a0\u00a0\u00a0\u00a0return -1\ncost = |i-j|**t\nminimize cost\n\"\"\"\n\ndef solve(s,c):\n bcount = s.count('B')\n gcount = s.count('G')\n if(abs(bcount-gcount)>1):\n  return -1\n B = []\n G = []\n start = 'B'\n cost=0\n if(bcount<gcount):\n  start = 'G'\n iterate=1\n temp=start\n if(bcount==gcount):\n  iterate = 2\n for y in range(iterate):\n  for i in range(len(s)):\n   if(s[i]!=start):\n    if(s[i]=='B'):\n     if(len(G)>0):\n      t = G.pop(0)\n      cost+=abs(t-i)**c\n     else:\n      B.append(i)\n    else:\n     if(len(B)>0):\n      t = B.pop(0)\n      cost+=pow(abs(t-i),c,10**6)\n     else:\n      G.append(i) \n   if(start=='B'):\n    start='G'\n   else:\n    start='B'\n  if(temp=='B'):\n   start='G'\n  else:\n   start='B'\n  if(y==1):\n   break\n  eqcost = cost\n  cost=0\n  B=[]\n  G=[]\n #print(eqcost,cost)\n if(bcount==gcount):\n  return min(eqcost,cost)\n return eqcost \n   \n \n\n\nfor t in range(int(input())):\n c = int(input())\n s = input()\n print(solve(s,c))\n", "\"\"\"\narrange string in a form that no two 'B' or two 'G' come together, if can't \u00a0\u00a0\u00a0\u00a0return -1\ncost = |i-j|**t\nminimize cost\n\"\"\"\n\ndef solve(s,c):\n bcount = s.count('B')\n gcount = s.count('G')\n if(abs(bcount-gcount)>1):\n  return -1\n B = []\n G = []\n start = 'B'\n cost=0\n if(bcount<gcount):\n  start = 'G'\n iterate=1\n temp=start\n if(bcount==gcount):\n  iterate = 2\n for y in range(iterate):\n  for i in range(len(s)):\n   if(s[i]!=start):\n    if(s[i]=='B'):\n     if(len(G)>0):\n      t = G.pop(0)\n      cost+=abs(t-i)**c\n     else:\n      B.append(i)\n    else:\n     if(len(B)>0):\n      t = B.pop(0)\n      cost+=abs(t-i)**c\n     else:\n      G.append(i) \n   if(start=='B'):\n    start='G'\n   else:\n    start='B'\n  if(temp=='B'):\n   start='G'\n  else:\n   start='B'\n  if(y==1):\n   break\n  eqcost = cost\n  cost=0\n  B=[]\n  G=[]\n #print(eqcost,cost)\n if(bcount==gcount):\n  return min(eqcost,cost)\n return eqcost \n   \n \n\n\nfor t in range(int(input())):\n c = int(input())\n s = input()\n print(solve(s,c))\n"]