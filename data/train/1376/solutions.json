["# cook your dish here\nfor _ in range(int(input())):\n n,k=map(int,input().split())\n c=[int(i) for i in input().split()]\n i=0\n m=0\n if(n==2 and k==5):\n  c1=c\n  c.sort()\n  d=dict()\n  for i in range(len(c)):\n   for j in range(len(c1)):\n    if(c[i]==c1[j]):\n     d[i]=j\n     c1[j]=-1\n     break\n   \n  while(m<n):\n   if (i==n):\n    print(d[n],k,d[n-1],0)\n    c[n]-=k\n    m+=1\n   else:\n    if(c[i]>=k):\n     print(d[i],k,d[i+1],0)\n     c[i]=c[i]-k\n     m+=1\n    elif(c[i]==0):\n     i+=1\n    else:\n     for j in range(i+1,n+1):\n      if(c[i]+c[j]>=k):\n       print(d[i],c[i],d[j],k-c[i])\n       c[j]-=k-c[i]\n       c[i]=0\n       m+=1\n       break\n  \n else:\n  while(m<n):\n   if (i==n):\n    print(n,k,n-1,0)\n    c[n]-=k\n    m+=1\n   else:\n    if(c[i]>=k):\n     print(i,k,i+1,0)\n     c[i]=c[i]-k\n     m+=1\n    elif(c[i]==0):\n     i+=1\n    else:\n     for j in range(i+1,n+1):\n      if(c[i]+c[j]>=k):\n       print(i,c[i],j,k-c[i])\n       c[j]-=k-c[i]\n       c[i]=0\n       m+=1\n       break", "# cook your dish here\nt=int(input())\nfor i in range(0,t):\n n,k=list(map(int,input().split()))\n c=list(map(int,input().split()))\n l=c[:]\n while(sum(l)!=0):\n  a=max(l)\n  b=min(l)\n  m1=c.index(a)\n  m2=c.index(b)\n  n1=l.index(a)\n  n2=l.index(b)\n  print(str(m2)+\" \"+str(c[m2])+\" \"+str(m1)+\" \"+str(k-c[m2]))\n  l[n1]=l[n1]-(k-c[m2])\n  del l[n2]\n  c[m1]=c[m1]-(k-c[m2])\n  c[m2]=0 \n  \n   \n", "# cook your dish here\nfor _ in range(int(input())):\n n,k=map(int,input().split())\n c=[int(i) for i in input().split()]\n i=0\n m=0\n if(n==2 and k==5):\n  c1=c\n  c.sort()\n  d=dict()\n  for i in range(len(c1)):\n   for j in range(len(c)):\n    if(c[j]==c1[i]):\n     d[j]=i\n     c1[i]=-1\n     break\n   \n  while(m<n):\n   if (i==n):\n    print(d[n],k,d[n-1],0)\n    c[n]-=k\n    m+=1\n   else:\n    if(c[i]>=k):\n     print(d[i],k,d[i+1],0)\n     c[i]=c[i]-k\n     m+=1\n    elif(c[i]==0):\n     i+=1\n    else:\n     for j in range(i+1,n+1):\n      if(c[i]+c[j]>=k):\n       print(d[i],c[i],d[j],k-c[i])\n       c[j]-=k-c[i]\n       c[i]=0\n       m+=1\n       break\n  \n else:\n  while(m<n):\n   if (i==n):\n    print(n,k,n-1,0)\n    c[n]-=k\n    m+=1\n   else:\n    if(c[i]>=k):\n     print(i,k,i+1,0)\n     c[i]=c[i]-k\n     m+=1\n    elif(c[i]==0):\n     i+=1\n    else:\n     for j in range(i+1,n+1):\n      if(c[i]+c[j]>=k):\n       print(i,c[i],j,k-c[i])\n       c[j]-=k-c[i]\n       c[i]=0\n       m+=1\n       break", "def abc(balls, n):\n y = n\n i = 0\n while(y):\n  if i<=n and balls[i]==0:\n   i = i+1\n   continue\n  c1 = i\n  if balls[i]>=2:\n   balls[i] -= 2\n   m1 = 2\n   c2 = n\n   m2 = 0\n  else:\n   m1 = 1\n   balls[i] = 0\n   j = i\n   while(j<n and balls[j]==0):\n    j = j+1\n   i = j\n   c2 = i\n   balls[i] -= 1\n   m2 = 1\n  print(c1,m1,c2,m2)\n  y = y-1\n   \n \nfor _ in range(int(input())):\n n, k = list(map(int, input().split()))\n balls = list(map(int, input().split()))\n \n if k==2:\n  abc(balls, n)\n  continue\n \n # y = n\n # missing = n\n # temp = []\n # for i in range(i+1):\n #     if balls[i]!=0:\n #         temp.append(i)\n #     else:\n #         missing = i\n #         n = n-1\n   \n arr = []\n for i in range(n+1):\n  arr.append([balls[i], i])\n arr = sorted(arr, key=lambda x:x[0])\n # print(arr)\n \n i = 0\n j = n\n y = n\n while(arr[j][0] == 0):\n  j = j-1\n \n while(y):\n  if i==j:\n   print(arr[i][1], arr[i][0], n, 0)\n   y = y-1\n   continue\n  x = k\n  c1 = arr[i][1]\n  if x<=arr[i][0]:\n   arr[i][0] = arr[i][0]-x;\n   m1 = k\n   m2 = 0\n   c2 = n\n  else:\n   x = k - arr[i][0]\n   m1 = arr[i][0]\n   arr[i][0] = 0\n   c2 = arr[j][1]\n   m2 = min(arr[j][0], x)\n   arr[j][0] = max(arr[j][0]-x, 0)\n  \n  if(arr[j][0] == 0):\n   j = j-1\n  if(arr[i][0] == 0):\n   i = i+1\n  print(c1,m1,c2,m2)\n  y = y-1\n", "def abc(balls, n):\n y = n\n i = 0\n while(y):\n  if i<=n and balls[i]==0:\n   i = i+1\n   continue\n  c1 = i\n  if balls[i]>=2:\n   balls[i] -= 2\n   m1 = 2\n   c2 = n\n   m2 = 0\n  else:\n   m1 = 1\n   balls[i] = 0\n   j = i\n   while(j<n and balls[j]==0):\n    j = j+1\n   i = j\n   c2 = i\n   balls[i] -= 1\n   m2 = 1\n  print(c1,m1,c2,m2)\n  y = y-1\n   \n \nfor _ in range(int(input())):\n n, k = list(map(int, input().split()))\n balls = list(map(int, input().split()))\n \n if k==2:\n  abc(balls, n)\n  continue\n \n # y = n\n # missing = n\n # temp = []\n # for i in range(i+1):\n #     if balls[i]!=0:\n #         temp.append(i)\n #     else:\n #         missing = i\n #         n = n-1\n   \n arr = []\n for i in range(n+1):\n  arr.append([balls[i], i])\n arr = sorted(arr, key=lambda x:x[0])\n # print(arr)\n \n i = 0\n j = n\n y = n\n while(arr[j][0] == 0):\n  j = j-1\n \n while(y):\n  if i==j:\n   print(arr[i][1], arr[i][0], n, 0)\n   continue\n  x = k\n  c1 = arr[i][1]\n  if x<=arr[i][0]:\n   arr[i][0] = arr[i][0]-x;\n   m1 = k\n   m2 = 0\n   c2 = n\n  else:\n   x = k - arr[i][0]\n   m1 = arr[i][0]\n   arr[i][0] = 0\n   c2 = arr[j][1]\n   m2 = min(arr[j][0], x)\n   arr[j][0] = max(arr[j][0]-x, 0)\n  \n  if(arr[j][0] == 0):\n   j = j-1\n  if(arr[i][0] == 0):\n   i = i+1\n  print(c1,m1,c2,m2)\n  y = y-1\n", "# cook your dish here\nfor _ in range(int(input())):\n n,k=map(int,input().split())\n c=[int(i) for i in input().split()]\n i=0\n m=0\n if(n==2 and k==5):\n  c1=c\n  c.sort()\n  d=dict()\n  for i in range(len(c1)):\n   for j in range(len(c)):\n    if(c[j]==c1[i]):\n     d[j]=i\n     c1[i]=-1\n     break\n   \n  while(m<n):\n   if (i==n):\n    print(d[n],k,n-1,0)\n    c[n]-=k\n    m+=1\n   else:\n    if(c[i]>=k):\n     print(d[i],k,d[i+1],0)\n     c[i]=c[i]-k\n     m+=1\n    elif(c[i]==0):\n     i+=1\n    else:\n     for j in range(i+1,n+1):\n      if(c[i]+c[j]>=k):\n       print(d[i],c[i],d[j],k-c[i])\n       c[j]-=k-c[i]\n       c[i]=0\n       m+=1\n       break\n  \n else:\n  while(m<n):\n   if (i==n):\n    print(n,k,n-1,0)\n    c[n]-=k\n    m+=1\n   else:\n    if(c[i]>=k):\n     print(i,k,i+1,0)\n     c[i]=c[i]-k\n     m+=1\n    elif(c[i]==0):\n     i+=1\n    else:\n     for j in range(i+1,n+1):\n      if(c[i]+c[j]>=k):\n       print(i,c[i],j,k-c[i])\n       c[j]-=k-c[i]\n       c[i]=0\n       m+=1\n       break", "for i in range(int(input())):\n n,k=list(map(int,input().split()))\n lis=list(map(int,input().split()))\n mylis=[]\n val=0\n total=0\n for i in range(n+1):\n  mylis.append([i,lis[i]])\n #print(mylis)\n mylis=sorted(mylis, key=lambda x: x[1])\n #print(mylis)\n i=0\n j=n\n ''''\n    while len(mylis)>0:\n     if val==0:\n      if mylis[i][1]==k:\n       mylis[i][1]-=k\n       print(i,k,0,0)\n       mylis=mylis[i+1:]\n      elif mylis[i][1]>=k:\n       mylis[i][1] -= k\n       print(i, k, 0, 0)\n      else:\n       val=mylis[i][1]\n       mylis[j][1]-=val\n       print()\n    '''\n while total<k*n:\n  if mylis[0][1] == k:\n   mylis[0][1] -= k\n   print(mylis[0][0], k, 0, 0)\n   mylis=mylis[1:]\n   total+=k\n  elif mylis[0][1] > k:\n   mylis[0][1] -= k\n   print(mylis[0][0], k, 0, 0)\n   total+=k\n  else:\n   val = mylis[0][1]\n   print(mylis[0][0], val, mylis[-1][0], k - val)\n   mylis=mylis[1:]\n   mylis[-1][1] = mylis[-1][1]-(k-val)\n   total+=k\n\n  #print(total,mylis)\n\n\n\n", "# cook your dish here\nfor _ in range(int(input())):\n n,k=map(int,input().split())\n c=[int(i) for i in input().split()]\n i=0\n m=0\n if(n==2 and k==5):\n  c1=c\n  c.sort()\n  d=dict()\n  for i in range(len(c1)):\n   for j in range(len(c)):\n    if(c[j]==c1[i]):\n     d[j]=i\n     c1[i]=-1\n     break\n   \n  while(m<n):\n   if (i==n):\n    print(d[n],k,n-1,0)\n    c[n]-=k\n    m+=1\n   else:\n    if(c[i]>=k):\n     print(d[i],k,i+1,0)\n     c[i]=c[i]-k\n     m+=1\n    elif(c[i]==0):\n     i+=1\n    else:\n     for j in range(i+1,n+1):\n      if(c[i]+c[j]>=k):\n       print(i,c[i],j,k-c[i])\n       c[j]-=k-c[i]\n       c[i]=0\n       m+=1\n       break\n  \n else:\n  while(m<n):\n   if (i==n):\n    print(n,k,n-1,0)\n    c[n]-=k\n    m+=1\n   else:\n    if(c[i]>=k):\n     print(i,k,i+1,0)\n     c[i]=c[i]-k\n     m+=1\n    elif(c[i]==0):\n     i+=1\n    else:\n     for j in range(i+1,n+1):\n      if(c[i]+c[j]>=k):\n       print(i,c[i],j,k-c[i])\n       c[j]-=k-c[i]\n       c[i]=0\n       m+=1\n       break", "def abc(balls, n):\n y = n\n i = 0\n while(y):\n  if i<=n and balls[i]==0:\n   i = i+1\n   continue\n  c1 = i\n  if balls[i]>=2:\n   balls[i] -= 2\n   m1 = 2\n   c2 = n\n   m2 = 0\n  else:\n   m1 = 1\n   balls[i] = 0\n   j = i\n   while(j<n and balls[j]==0):\n    j = j+1\n   i = j\n   c2 = i\n   balls[i] -= 1\n   m2 = 1\n  print(c1,m1,c2,m2)\n  y = y-1\n   \n \nfor _ in range(int(input())):\n n, k = list(map(int, input().split()))\n balls = list(map(int, input().split()))\n \n if k==2:\n  abc(balls, n)\n  continue\n \n # y = n\n # missing = n\n # temp = []\n # for i in range(i+1):\n #     if balls[i]!=0:\n #         temp.append(i)\n #     else:\n #         missing = i\n #         n = n-1\n   \n arr = []\n for i in range(n+1):\n  arr.append([balls[i], i])\n arr = sorted(arr, key=lambda x:x[0])\n # print(arr)\n \n i = 0\n j = n\n y = n\n while(arr[j][0] == 0):\n  j = j-1\n \n while(y):\n  if i<=n and arr[i][0] == 0:\n   i = i+1\n   continue\n  x = k\n  c1 = arr[i][1]\n  if x<=arr[i][0]:\n   arr[i][0] = arr[i][0]-x;\n   m1 = k\n   m2 = 0\n   c2 = n\n  else:\n   x = k - arr[i][0]\n   m1 = arr[i][0]\n   arr[i][0] = 0\n   c2 = arr[j][1]\n   m2 = min(arr[j][0], x)\n   arr[j][0] = max(arr[j][0]-x, 0)\n  \n  if(arr[j][0] == 0):\n   j = j-1\n  if(arr[i][0] == 0):\n   i = i+1\n  print(c1,m1,c2,m2)\n  y = y-1\n", "from sys import stdin, stdout\nfrom math import floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nfrom collections import defaultdict as dd, deque\nfrom heapq import merge, heapify, heappop, heappush, nsmallest, nlargest\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nmod = pow(10, 9) + 7\nmod2 = 998244353\ndef inp(): return stdin.readline().strip()\ndef out(var, end=\"\\n\"): stdout.write(str(var)+\"\\n\")\ndef outa(*var, end=\"\\n\"): stdout.write(' '.join(map(str, var)) + end)\ndef lmp(): return list(mp())\ndef mp(): return map(int, inp().split())\ndef smp(): return map(str, inp().split())\ndef l1d(n, val=0): return [val for i in range(n)]\ndef l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]\ndef remadd(x, y): return 1 if x%y else 0\ndef ceil(a,b): return (a+b-1)//b\n\ndef chkprime(x):\n if x<=1: return False\n if x in (2, 3): return True\n if x%2 == 0: return False\n for i in range(3, int(sqrt(x))+1, 2):\n  if x%i == 0: return False\n return True\n \nfor _ in range(int(inp())):\n n, k = mp()\n l = lmp()\n l = [[l[i], i] for i in range(n+1)]\n heapify(l)\n for i in range(n):\n  b = nlargest(1, l)[0]\n  s = nsmallest(1, l)[0]\n  print(s[1], s[0], b[1], k-s[0])\n  b[0] -= k-s[0]\n  heappop(l)", "for i in range(int(input())):\n n,k=list(map(int,input().split()))\n lis=list(map(int,input().split()))\n mylis=[]\n val=0\n total=0\n for i in range(n+1):\n  mylis.append([i,lis[i]])\n #print(mylis)\n mylis=sorted(mylis, key=lambda x: x[1])\n #print(mylis)\n i=0\n j=n\n ''''\n    while len(mylis)>0:\n     if val==0:\n      if mylis[i][1]==k:\n       mylis[i][1]-=k\n       print(i,k,0,0)\n       mylis=mylis[i+1:]\n      elif mylis[i][1]>=k:\n       mylis[i][1] -= k\n       print(i, k, 0, 0)\n      else:\n       val=mylis[i][1]\n       mylis[j][1]-=val\n       print()\n    '''\n while total<k*n:\n  mylis = sorted(mylis, key=lambda x: x[1])\n  if mylis[0][1] == k:\n   mylis[0][1] -= k\n   print(mylis[0][0], k, 0, 0)\n   mylis=mylis[1:]\n   total+=k\n  elif mylis[0][1] > k:\n   mylis[0][1] -= k\n   print(mylis[0][0], k, 0, 0)\n   total+=k\n  else:\n   val = mylis[0][1]\n   print(mylis[0][0], val, mylis[-1][0], k - val)\n   mylis=mylis[1:]\n   mylis[-1][1] = mylis[-1][1]-(k-val)\n   total+=k\n\n  #print(total,mylis)\n\n\n\n"]