["class Solution:\n    def numSplits(self, s: str) -> int:\n        left = [0]*len(s)\n        \n        unique = set()\n        n_distinct = 0\n        for i, l in enumerate(s):\n            if l not in unique:\n                unique.add(l)\n                n_distinct += 1\n            left[i] = n_distinct\n        \n        count = 0\n        unique = set()\n        n_distinct = 0\n        for i in range(len(s)-1, 0,-1):\n            if s[i] not in unique:\n                unique.add(s[i])\n                n_distinct += 1\n            \n            if n_distinct == left[i-1]:\n                count += 1\n                    \n        return count", "class Solution:\n    def numSplits(self, s: str) -> int:\n        index_one = 0\n        index_two = 0\n        set_one = set()\n        set_two = set()\n        s_r = s[::-1]\n        \n        for i in range(len(s)):\n            # if s[i] in set_one:\n            #     continue\n            # else:\n            print((i, len(set(s[:i + 1])), len(set(s[i + 1:]))))\n            if len(set(s[:i + 1])) == len(set(s[i + 1:])):\n                index_one = i\n                break\n            else:\n                set_one.add(s[i])\n                    \n        for i in range(len(s_r)):\n            # if s_r[i] in set_two:\n            #     continue\n            # else:\n            print((i, len(set(s_r[:i + 1])), len(set(s_r[i + 1:]))))\n            if len(set(s_r[:i + 1])) == len(set(s_r[i + 1:])):\n                print(i)\n                index_two = len(s) - i - 1\n                break\n            else:\n                set_two.add(s_r[i])\n                    \n        print((index_one, index_two))\n                    \n        return index_two - index_one\n                    \n        \n", "from collections import Counter\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        right = Counter(s)\n        left = set()\n        res = 0\n        for i in range(len(s) - 1):\n            left.add(s[i])\n            right[s[i]] -= 1\n            res += len(left) == sum(i > 0 for i in right.values())\n        return res", "class Solution:\n    def numSplits(self, s: str) -> int:\n        def decorate(a, b):\n            final = {1: defaultdict(int), 2 : defaultdict(int)}\n            count1, count2 = 0, 0\n            for char in a:\n                final[1][char] += 1\n                if final[1][char] == 1: count1 += 1\n                \n            for char in b:\n                final[2][char] += 1\n                if final[2][char] == 1: count2 += 1\n            return final, count1, count2\n            \n        split = None\n        count1, count2 = 0, 0\n        total = 0\n        for point in range(1, len(s)):\n            if split == None:\n                split, count1, count2 = decorate(s[:point], s[point:])\n            else:\n                split[1][s[point-1]] += 1\n                if split[1][s[point-1]] == 1: count1 += 1\n                \n                split[2][s[point-1]] -= 1\n                if split[2][s[point-1]] == 0: count2 -= 1\n            \n            # print(s[:point], s[point:], count1, count2)\n            if count1 == count2: total += 1\n        \n        return total\n", "class Solution:\n    def count_chars(self, s):\n        count = {}\n        for c in s:\n            if c in count:\n                count[c] += 1\n            else:\n                count[c] = 1\n        return count\n    \n    def dict_decr(self, d, c):\n        if c in d:\n            d[c] -= 1\n        if d[c] <= 0:\n            del d[c]\n    \n    def numSplits(self, s: str) -> int:\n        left, right = s[0], s[1:]\n        left_chars = set([left])\n        right_chars = self.count_chars(right)\n        \n        num_splits = 0\n        while right:\n            \n            if len(left_chars) == len(right_chars.keys()):\n                num_splits += 1\n            c = right[0]\n            self.dict_decr(right_chars, c)\n            left_chars.add(c)\n            left += c\n            right = right[1:]\n            \n        return num_splits", "class Solution:\n    def numSplits(self, s: str) -> int:\n        count = 0\n        left = set(s[:1])\n        right = set(s[1:])\n        if len(left) == len(right):\n            count += 1\n        k = 0\n        for i in range(1, len(s)):\n            if s[i] not in left:\n                left.add(s[i])\n            if s[i] not in s[i+1:]:\n                k += 1\n            diff = len(left) - (len(right) - k)\n            if diff == 0:\n                count += 1\n            elif diff > 0:\n                break\n        return count", "from collections import Counter\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        no = 0\n        x=Counter(s)\n        y=Counter()\n        if len(list(x.keys()))==len(list(y.keys())):\n            no+=1\n        for i in range(0,len(s)-1):\n            \n            x[s[i]]-=1\n            if x[s[i]]==0:\n                del x[s[i]]\n            if s[i] in y:\n                y[s[i]] += 1\n            else:\n                y[s[i]]=1\n                \n            if len(list(x.keys())) == len(list(y.keys())):\n                no+=1\n            \n            \n            \n                \n        return no\n                \n", "from collections import Counter\n\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        num_splits = 0\n        left = Counter()\n        right = Counter(s)\n\n        for char in s:\n            left.update(char)\n            right.subtract(char)\n            if right[char] == 0:\n                del right[char]\n            \n            if len(left) == len(right):\n                num_splits += 1\n        \n        return num_splits\n    \n\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        pre = [0] * len(s)\n        \n        acc = set()\n        cnt = 0\n        for i in range(len(s) - 1):\n            if s[i] not in acc:\n                cnt += 1\n                acc.add(s[i])\n            pre[i] = cnt\n        \n        cnt = 0\n        acc.clear()\n        res = 0\n        for i in range(len(s) - 1, 0, -1):\n            if s[i] not in acc:\n                cnt += 1\n                acc.add(s[i])\n            if pre[i - 1] == cnt:\n                res += 1\n            \n        return res", "class Solution:\n    def numSplits(self, s: str) -> int:\n        l_count = []\n        r_count = []\n        tmp = 0\n        for i in range(len(s)):\n            if s[i] not in s[:i]:\n                tmp += 1\n            l_count.append(tmp)\n        tmp = 0\n        for i in range(len(s))[::-1]:\n            if s[i] not in s[(i+1):]:\n                tmp += 1\n            r_count.append(tmp)\n        r_count = r_count[::-1]\n        \n        count = 0\n        for i in range(len(r_count)-1):\n            if l_count[i] == r_count[i+1]:\n                count += 1\n        return count", "# class Solution:\n#     def numSplits(self, s: str) -> int:\n#         n = len(s)\n#         output = 0\n#         for i in range(1, n):\n#             if len(set(s[:i])) == len(set(s[i:n])):\n#                 output += 1\n#             if len(set(s[:i])) > len(set(s[i:n])):\n#                 break\n#         return output\n    \nclass Solution:\n    def numSplits(self, s: str) -> int:\n        n = len(s)\n        output = 0\n        dic = {}\n        for i, x in enumerate(s):\n            if not x in dic:\n                dic[x] = [i, i]\n            else:\n                dic[x][1] = i\n        # print(dic)\n        for i in range(0, n-1):\n            left = 0 \n            right = 0\n            for letter, indexes in list(dic.items()):\n                if i >= indexes[0]:\n                    left += 1\n                if i + 1 <= indexes[1]:\n                    right += 1\n            if left == right:\n                output += 1\n        return output\n                \n", "from collections import Counter\n\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        prev_counter = {}\n        post_counter = dict(Counter(s))\n        \n        count = 0\n        for partition in range(len(s)):\n            prev, post = s[:partition], s[partition:]\n            \n            if not prev or not post:\n                continue\n            \n            curr = prev[-1]\n            if curr not in prev_counter:\n                prev_counter[curr] = 0\n                \n            prev_counter[curr] += 1\n            post_counter[curr] -= 1\n            \n            if post_counter[curr] == 0:\n                post_counter.pop(curr)\n            \n            if len(prev_counter) == len(post_counter):\n                count += 1\n        \n        return count\n            \n", "from collections import Counter\n\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        prev_counter = {}\n        post_counter = Counter(s)\n        \n        count = 0\n        for partition in range(len(s)):\n            prev, post = s[:partition], s[partition:]\n            \n            if not prev or not post:\n                continue\n            \n            curr = prev[-1]\n            if curr not in prev_counter:\n                prev_counter[curr] = 0\n                \n            prev_counter[curr] += 1\n            post_counter[curr] -= 1\n            \n            if post_counter[curr] == 0:\n                post_counter.pop(curr)\n            \n            if len(prev_counter) == len(post_counter):\n                count += 1\n        \n        return count\n            \n", "class Solution:\n    def sub(self, h, h2):\n        nh = h.copy()\n        for k in h2:\n            if k in nh:\n                nh[k] = nh[k]-h2[k]\n                if nh[k] == 0:\n                    del nh[k]\n        return nh\n    \n    def numSplits(self, s: str) -> int:\n        h = {}\n        for c in s:\n            if c not in h:\n                h[c] = 0\n            h[c] = h[c] + 1\n        \n        ct = 0\n        h2 = {}\n        for i, c in enumerate(s):\n            if c not in h2:\n                h2[c] = 0\n            h2[c] = h2[c] + 1\n            uh = self.sub(h, h2)\n            if len(h2) == len(uh):\n                ct = ct + 1\n        return ct", "from collections import defaultdict, Counter\n\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        len_s = len(s)\n        if len_s == 0:\n            return 0\n        \n        if len_s == 1:\n            return 1\n        \n        nb_good_splits = 0\n        left_counter = defaultdict(int)\n        right_counter = Counter(s)\n        \n        for i in range(1, len_s):\n            left, right = s[0:i], s[i:]\n            swing_letter = left[-1]\n            \n            left_counter[swing_letter] += 1\n            right_counter[swing_letter] -= 1\n            \n            if right_counter[swing_letter] == 0:\n                del right_counter[swing_letter]\n            \n            if len(left_counter) == len(right_counter):\n                nb_good_splits += 1\n                \n        return nb_good_splits\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        \n        b_c = collections.defaultdict(lambda:0)\n        a_c = dict(collections.Counter(list(s)))\n        \n        # print('initial', b_c, a_c)\n        \n        ans = 0\n        for i, ch in enumerate(list(s)):\n            # print(i, ch)\n            b_c[ch] += 1\n            a_c[ch] -= 1\n            # print(b_c, a_c)\n            \n            if len({k for k, v in list(b_c.items()) if v > 0}) == len({k for k,v in list(a_c.items()) if v>0}):\n                ans += 1\n                \n        return ans\n                \n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        \n        good_splits = 0\n        first_map = {}\n        s_map = {}\n        \n        for letter in s:\n            if s_map.get(letter):\n                s_map[letter] += 1\n            else:\n                s_map[letter] = 1\n                \n        for split_point in range(len(s)):\n            if first_map.get(s[split_point]):\n                first_map[s[split_point]] = first_map[s[split_point]] + 1\n            else:\n                first_map[s[split_point]] = 1\n            s_map[s[split_point]] = s_map[s[split_point]] - 1\n            f_keys = [k for k,v in list(first_map.items()) if v > 0]\n            s_keys = [k for k,v in list(s_map.items()) if v > 0]\n            if len(f_keys) == len(s_keys):\n                good_splits += 1\n                \n        return good_splits\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        if len(s) <= 1:\n            return 0\n        \n        left = len(s)*[0]\n        right = len(s)*[0]\n        seen = set(s[0])\n        # right[-1] = 1\n        left [0] = 1\n        for i in range(1, len(s)):\n            if s[i] not in seen:\n                seen.add(s[i])\n                left[i] = left[i-1]+1\n            else:\n                left[i] = left[i-1]\n        seen= set()\n        rtotal = 0\n        count = 0\n        for i in range(len(s)-1, 0,-1):\n            if s[i] not in seen:\n                seen.add(s[i])\n                rtotal +=1\n            if rtotal == left[i-1]:\n                count +=1\n            elif rtotal > left[i-1]:\n                break\n                \n        # count = 0\n        # # print(left)\n        # # print(right)\n        # for i in range(0, len(s)-1):\n        #     if left[i]== right[i+1]:\n        #         count +=1\n        #     elif right[i+1] < left[i]:\n        #         break\n        \n        return count\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        characters = []\n        possibleSplits = 0\n        for i in range(len(s)):\n            if s[i] not in characters:\n                characters.append(s[i])\n        for i in range(len(s)):\n            leftChars = 0\n            rightChars = 0\n            leftSide = s[:i]\n            rightSide = s[i:]\n            for j in range(len(characters)):\n                if characters[j] in leftSide:\n                    leftChars += 1\n                if characters[j] in rightSide:\n                    rightChars += 1\n            if leftChars == rightChars:\n                possibleSplits += 1\n        return possibleSplits\n", "from collections import Counter\n\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        c = 0\n        \n        c1 = Counter()\n        c2 = Counter(s)\n        \n        for i in range(len(s)):\n            \n            c1[s[i]] += 1\n            c2[s[i]] -= 1\n            \n            if self.Count(c1) == self.Count(c2):\n                c += 1\n            \n        return c\n        \n    \n    def Count(self, counter):\n        return sum([1 for k in counter if counter[k] !=0])\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        s_len = len(s)\n        if s_len == 0 or s_len == 1:\n            return  0\n        seen = set()\n        dp = [0 for _ in range(s_len-1)]\n        dp[0] = 1\n        seen.add(s[0])\n        for i in range(1,s_len-1):\n            if s[i] in seen:\n                dp[i] = dp[i-1]\n            else:\n                seen.add(s[i])\n                dp[i] = dp[i-1]+1\n        \n        seen = set()\n        acc = 0\n        count = 0\n        for i in range(s_len-1,0,-1):\n            if (s[i] not in seen):\n                seen.add(s[i])\n                acc += 1\n            if (acc == dp[i-1]):\n                count += 1\n        return count\n\n", "class Solution:\n    def numSplits111(self, s: str) -> int:\n        s_len = len(s)\n        if s_len == 0 or s_len == 1:\n            return  0\n        seen = set()\n        dp = [0 for i in range(s_len-1)]\n        dp[0] = 1\n        seen.add(s[0])\n        for i in range(1,s_len-1):\n            if s[i] in seen:\n                dp[i] == dp[i-1]\n            else:\n                seen.add(s[i])\n                dp[i] = dp[i-1]+1\n        \n        seen = set()\n        acc = 0\n        count = 0\n        for i in range(s_len-1,0,-1):\n            if (s[i] not in seen):\n                seen.add(s[i])\n                acc += 1\n            if (acc == dp[i-1]):\n                count += 1\n        return count\n\n    def numSplits(self, s: str) -> int:\n        \n        n = len(s)\n        \n        if n <= 1:\n            return 0\n        \n        #forward pass\n        seen = set()\n        dp = [0 for _ in range(n-1)]\n        dp[0] = 1\n        seen.add(s[0])\n        \n        for i in range(1,n-1):\n            if s[i] in seen:\n                dp[i] = dp[i-1]\n            else:\n                seen.add(s[i])\n                dp[i] = dp[i-1] + 1\n                \n        count = 0\n        \n        #backward pass\n        seen = set()\n        current = 0\n        for i in range(n-1, 0, -1):\n            if s[i] not in seen:\n                seen.add(s[i])\n                current += 1\n            \n            if current == dp[i-1]:\n                count += 1\n                \n        return count\n    \n\n                \n                \n            \n                \n        \n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        cnt = 0\n        l_set = set()\n        d = {c: s.count(c) for c in set(s)}\n        \n        for c in s:\n            l_set.add(c)\n            d[c] -= 1\n            if d[c] == 0:\n                d.pop(c, None)\n            if len(l_set) == len(d):\n                   cnt += 1\n        return cnt", "class Solution:\n    def numSplits(self, s: str) -> int:\n        dictionary={}\n        sol=0\n        \n        for i in range(len(s)):\n            dictionary[s[i]]=i\n        dictionary2={}\n        \n        for i in range(len(s)-1):\n            dictionary2[s[i]]=i\n            if i==dictionary[s[i]]:\n                dictionary.pop(s[i])\n            if len(dictionary)==len(dictionary2):\n                sol+=1\n        return sol", "class Solution:\n    def numSplits(self, s: str) -> int:\n        uniqueLeft = 0\n        uniqueRight = 0\n        ans = 0\n        leftDict = {}\n        rightDict = {}\n        for i in s:\n            if i in rightDict:\n                rightDict[i] += 1\n            else:\n                rightDict[i] = 1\n                uniqueRight += 1\n        for i in s:\n            if i in leftDict:\n                leftDict[i] += 1\n            else:\n                leftDict[i] = 1\n                uniqueLeft += 1\n            rightDict[i] -= 1\n            if rightDict[i] == 0:\n                uniqueRight -= 1\n            if uniqueRight == uniqueLeft:\n                ans += 1\n        return ans", "# time complexity: O(26N), N = len(s)\n#class Solution:\n#    def numSplits(self, s: str) -> int:\n#        N = len(s)\n#        freq = [[0] * (N+1) for _ in range(26)] # cumulative freq of each character\n#        for i in range(1, N+1):\n#            for j in range(26):\n#                if ord(s[i-1]) - ord('a') == j:\n#                    freq[j][i] = freq[j][i-1] + 1\n#                else:\n#                    freq[j][i] = freq[j][i-1]\n#\n#        good = 0\n#        for i in range(1, N):\n#            left = 0\n#            right = 0\n#            for j in range(26):\n#                if freq[j][i] > 0: # there is at least one chr(ord(j) + ord('a')) on the left of s[i]\n#                    left += 1\n#                if freq[j][i] < freq[j][-1]: # there is at least one chr(ord(j) + ord('a')) on the right of s[i]\n#                    right += 1\n#            if left == right:\n#                good += 1\n#        return good\n\n# time complexity: O(3N), N = len(s)\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        N = len(s)\n        \n        left = [0] * (N+1) # unique char in s[:left], exclude left\n        seen = set()\n        for i in range(1,N+1):\n            c = s[i-1]\n            if c not in seen:\n                left[i] = left[i-1] + 1\n                seen.add(c)\n            else:\n                left[i] = left[i-1]\n        \n        right = [0] * (N+1) # unique char in s[right:], include right\n        seen.clear()\n        for i in range(N-1,-1,-1):\n            c = s[i]\n            if c not in seen:\n                right[i] = right[i+1] + 1\n                seen.add(c)\n            else:\n                right[i] = right[i+1]\n        \n        good = 0\n        for i in range(N+1):\n            if left[i] == right[i]:\n                good += 1\n        return good", "class Solution:\n    def numSplits(self, s: str) -> int:\n        set_f = set()\n        map_b = defaultdict(int)\n        \n        for c in s:\n            map_b[c] += 1\n         \n        num = 0\n        for c in s:\n            map_b[c] -= 1\n            if not map_b[c]:\n                del map_b[c]\n                \n            set_f.add(c)\n            \n            if len(set_f) == len(map_b):\n                num += 1\n                \n        return num", "from collections import defaultdict\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        rst = 0\n        lDict = defaultdict(int)\n        rDict = defaultdict(int)\n        \n        lDict[s[0]] = 1\n        for char in s[1:]:\n            rDict[char]+=1\n        \n      \n        if(len(rDict)==len(lDict)):\n            rst+=1\n            \n        for char in s[1:-1]:\n            rDict[char]-=1\n            if(rDict[char]==0):\n                rDict.pop(char)\n            lDict[char]+=1\n            #print(lDict,rDict)\n            if(len(rDict)==len(lDict)):\n                rst+=1\n        return rst\n            \n            \n            \n", "import collections\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        leftMap = collections.defaultdict(int)\n        rightMap = collections.defaultdict(int)\n        \n        for ch in s:\n            rightMap[ch] += 1\n            \n        output = 0\n        \n        for ch in s:\n            rightMap[ch] -= 1\n            if rightMap[ch] == 0:\n                del rightMap[ch]\n                \n            leftMap[ch] += 1\n            \n            if len(rightMap) == len(leftMap):\n                output += 1\n        return output\n        \n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        initial = {}\n        \n        for char in s:\n            if char in initial:\n                initial[char] += 1\n            else:\n                initial[char] = 1\n            \n        other = {}\n        output = 0\n        \n        for char in s:\n            initial[char] -= 1\n            if initial[char] == 0:\n                del initial[char]\n            other[char] = 1\n            if len(initial) == len(other):\n                output += 1\n        return output\n            \n", "from collections import defaultdict\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        hmap = defaultdict(int)\n        for ele in s:\n            hmap[ele]+=1\n        \n        \n        count = 0\n        size = len(hmap)\n        \n        second_map = defaultdict(int)\n        for i in range(len(s)):\n            c = s[i]\n            second_map[c]+=1\n            hmap[c]-=1\n            if hmap[c] == 0:\n                del hmap[c]\n            if len(second_map) == len(hmap):\n                count+=1\n            elif len(second_map) > len(hmap):\n                break\n        \n        \n        return count\n        \n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        n = len(s)\n        lc = [1]*n\n        rc = [1]*n\n        ls = set()\n        rs = set()\n        for i in range(n):\n            ls.add(s[i])\n            rs.add(s[-(i+1)])\n            lc[i] = len(ls)\n            rc[-(i+1)] = len(rs)\n        r = 0\n        for i in range(n-1):\n            if lc[i]==rc[i+1]: r+=1\n        return r", "class Solution:\n    def numSplits(self, s: str) -> int:\n        lc, rc = [], []\n        ls, rs = set(), set()\n        for c in s:\n            ls.add(c)\n            lc.append(len(ls))\n        for c in reversed(s):\n            rs.add(c)\n            rc.append(len(rs))\n        res = 0\n        rc = rc[::-1]\n        for i in range(len(lc) -  1):\n            if lc[i] == rc[i + 1]:\n                res += 1\n        return res", "class Solution:\n    def numSplits(self, s: str) -> int:\n        \n        auxDict = {}\n        auxLeftToRight = [0] * len(s)\n        count = 0\n        for pos in range(len(s)):\n            if s[pos] not in auxDict:\n                auxDict[s[pos]] = 1\n                count += 1\n            auxLeftToRight[pos] = count\n\n        auxDict = {}\n        auxRightToLeft = [0] * len(s)\n        count = 0\n        for pos in range(len(s)-1):\n            if s[len(s)-1-pos] not in auxDict:\n                auxDict[s[len(s)-1-pos]] = 1\n                count += 1\n            auxRightToLeft[len(s)-2-pos] = count\n\n        total = 0\n        for pos in range(len(s)):\n            if auxLeftToRight[pos] == auxRightToLeft[pos]:\n                total += 1\n        \n        return total\n", "from collections import Counter\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        n=len(s)\n        prefix=[0]*n\n        suffix=[0]*n\n        pset=set()\n        sset=set()\n        ans=0\n        for i in range(0,n):\n            l=s[i]\n            r=s[n-i-1]\n            pset.add(l)\n            sset.add(r)\n            prefix[i]=len(pset)\n            suffix[n-1-i]=len(sset)\n        \n        for i in range(0,n-1):\n            if prefix[i]==suffix[i+1]:\n                ans=ans+1\n        return ans\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        # preprocess_prefix[k], number of different letters in s[:k]\n        # preprocess_postfix[k], number of different letters in s[k:]\n        \n        # Fill preprocess_prefix\n        seen_letters = []\n        preprocess_prefix = [0]\n        for i in range(len(s)):\n            if s[i] not in seen_letters:\n                seen_letters.append(s[i])\n            preprocess_prefix.append(len(seen_letters))\n        \n        # Fill preprocess_postfix[k]\n        seen_letters = []\n        preprocess_postfix = [0]\n        for i in range(len(s)-1, -1, -1):\n            if s[i] not in seen_letters:\n                seen_letters.append(s[i])\n            preprocess_postfix.append(len(seen_letters))\n        preprocess_postfix.reverse()\n        count = 0\n        for i in range(len(preprocess_postfix)):\n            if preprocess_postfix[i] == preprocess_prefix[i]:\n                count += 1\n        return count", "class Solution:\n    def numSplits(self, s: str) -> int:\n        count = 0\n        left, right = defaultdict(int), Counter(s)\n        count = 0\n        for letter in s:\n            left[letter] += 1\n            right[letter] -= 1\n            if right[letter] == 0: del right[letter]\n            count += (len(left) == len(right))\n        return count", "class Solution:\n    def numSplits(self, s: str) -> int:\n        le_set, ri_set = [s[0]], [s[-1]]\n        le_arr, ri_arr = [1]*len(s), [1]*len(s)\n        # print(le_arr[0])\n        # print(ri_arr)\n        for i in range(1, len(s)):\n            le_arr[i] = le_arr[i-1]\n            if s[i] not in le_set:\n                le_set.append(s[i])\n                le_arr[i]+=1\n                \n        for i in range(len(s)-2, -1, -1):\n            ri_arr[i] = ri_arr[i+1]\n            if s[i] not in ri_set:\n                ri_set.append(s[i])\n                ri_arr[i]+=1\n        \n        # print(le_arr)\n        # print(ri_arr)\n        cnt=0\n        for i in range(0, len(s)-1):\n            if le_arr[i]==ri_arr[i+1]:\n                cnt+=1\n        return cnt\n                \n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        total_chars_1 = defaultdict(int)\n        total_chars_1[s[0]] = 1\n        \n        total_chars_2 = defaultdict(int)\n        \n        splits = 0\n        \n        for i in range(1, len(s)):\n            total_chars_2[s[i]] += 1\n            \n        for i in range(len(s) - 1):\n            if len(total_chars_1) == len(total_chars_2):\n                splits += 1\n                    \n            total_chars_1[s[i+1]] += 1\n            total_chars_2[s[i+1]] -= 1\n            \n            if total_chars_2[s[i+1]] == 0:\n                del total_chars_2[s[i+1]]\n                \n        return splits\n            \n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        \n        c = Counter(s)\n        res = 0\n        \n        d = dict()\n        for i,v in enumerate(s):\n            if v not in d:\n                d[v] = 1\n            else:\n                d[v] += 1\n            c[v] -= 1\n            if c[v] == 0:\n                del c[v]\n            if len(c) == len(d):\n                res += 1\n                \n        return res\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        counter = 0\n        left = defaultdict(int)\n        right = defaultdict(int)\n        \n        for c in s:\n            right[c] += 1     # pre-populate\\\\\n        \n        for i in range(len(s)):\n            left[s[i]] += 1\n            right[s[i]] -= 1\n            if right[s[i]] == 0:\n                right.pop(s[i])\n\n            if len(left.keys()) == len(right.keys()):\n                counter += 1\n        return counter", "class Solution:\n    def numSplits(self, s: str) -> int:\n        left_count = collections.Counter()\n        right_count = collections.Counter(s)\n        ans = 0\n        for ch in s:\n            left_count[ch] += 1\n            right_count[ch] -= 1\n            if right_count[ch] == 0:\n                del right_count[ch]\n            \n            if len(left_count) == len(right_count):\n                ans += 1\n        return ans", "class Solution:\n    def numSplits(self, s: str) -> int:\n        leftCount = collections.Counter()\n        rightCount = collections.Counter(s)\n        \n        res = 0\n        for c in s:\n            leftCount[c] += 1\n            rightCount[c] -= 1\n            if rightCount[c] == 0:\n                del rightCount[c]\n            if len(rightCount) == len(leftCount):\n                res += 1\n        return res", "class Solution:\n    def numSplits(self, s: str) -> int:\n        \n        left=sorted([s.find(l) for l in set(s)]) + [len(s)]\n        right=sorted([s.rfind(l) for l in set(s)], reverse=True)+[0]\n       \n        ind=max(ind for ind in range(len(left)) if left[ind]<=right[ind])\n        \n        return min(right[ind], left[ind+1])-max(left[ind], right[ind+1]) \n'''\n\\\"aacaba\\\"\n\\\"abcd\\\"\n\\\"aaaaa\\\"\n\\\"acbadbaada\\\"\n\\\"a\\\"\n\\\"abc\\\"\n\\\"abcd\\\"\n'''\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        s_cnt = Counter(s)\n        p_cnt = defaultdict(int)\n        count = 0\n        for ch in s:\n            p_cnt[ch] += 1\n            s_cnt[ch] -= 1\n            if s_cnt[ch] == 0: del(s_cnt[ch])\n            if len(s_cnt.keys()) == len(p_cnt.keys()): count += 1\n        return count", "from collections import Counter\n\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        #pseudo:\n        #start left window at 0\n        #have right window open for all letters in s\n        #keep count for left and right\n        #keep overall count\n        #left woud start with first letter, right would be rest of letters\n        #loop through each letter\n        #left window should increase by one [i+1]\n        #right window should decrease by 1\n        #if the letter in the right dictionary already exists, then remove and decrease the right count             by 1\n        #if current letter not in the left dictionary then +1 to left count and add to dictionary \n        #if left count and right counter are both equal to each other then add 1 to count \n        \n        l_dict = Counter()\n        r_dict = Counter(s)\n        counter = 0\n        \n        print(r_dict)\n        for i in s:\n            r_dict[i] -= 1\n            l_dict[i] = l_dict.get(i, 0) + 1\n            \n            if r_dict[i] == 0:\n                del r_dict[i]\n                \n            if len(l_dict) == len(r_dict):\n                counter += 1\n                \n        return counter\n        \n", "class Solution:\n    def numSplitsBF(self, s: str) -> int:\n        cntr = 0\n        for i in range(1, len(s)):\n            # a, b = s[:i], s[i:]\n            # print(a, b)\n            a, b = collections.Counter(s[:i]), collections.Counter(s[i:])\n            if len(a) == len(b):\n                cntr += 1\n        return cntr\n    \n    def numSplits(self, s: str) -> int:\n        \n        a = collections.defaultdict(int)\n        a[s[0]] = 1\n        b = collections.Counter(s[1:])\n        pntr = 1\n        cntr = 0 if len(a) != len(b) else 1\n        while pntr < len(s):\n            a[s[pntr]] += 1\n            b[s[pntr]] -= 1\n            if b[s[pntr]] == 0:\n                del b[s[pntr]]\n            # print(a, b)\n            if len(a) == len(b):\n                cntr += 1\n            pntr += 1\n        return cntr", "class Solution:\n    def numSplits(self, s: str) -> int:\n        left = {s[0]:1}\n        right = {}\n        for i in range(1, len(s)):\n            right[s[i]] = right.get(s[i], 0) + 1\n            \n        #check if the left set has as many items as the right set\n        #then we incremenet the middle pointer\n        #remove the item from right\n        #add it to left\n        middle_i = 1\n        count = 0\n        while middle_i < len(s):\n            if len(left) == len(right):\n                count += 1\n                \n            middle = s[middle_i]\n            right[middle] -= 1\n            if right[middle] == 0:\n                right.pop(middle)\n            \n            left[middle] = left.get(middle, 0) + 1\n            \n            middle_i += 1\n        \n        return count\n", "from collections import Counter\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        left_counts = {s[0]:1}\n        right_counts = Counter(s[1:])\n        split_count = 0\n        if len(list(left_counts.items())) == len(list(right_counts.items())):\n            split_count += 1\n        for i in range(1, len(s)):\n            if s[i] in left_counts:\n                left_counts[s[i]] += 1\n            else:\n                left_counts[s[i]] = 1\n            if right_counts[s[i]] == 1:\n                del right_counts[s[i]]\n            else:\n                right_counts[s[i]] -= 1\n            if len(list(left_counts.items())) == len(list(right_counts.items())):\n                split_count += 1\n        return split_count\n                \n            \n", "class Solution:\n    def numSplits(self, ss: str) -> int:\n        a=set()\n        k={}\n        p={}\n        n=len(ss)\n        def myfunc(s,aa):\n            for i in range(n-1):\n                if(s[i] not in a):\n                    a.add(s[i])\n                    aa[i]=1\n                else:\n                    aa[i]=0\n                if(i!=0):\n                    aa[i]+=aa[i-1]\n        myfunc(ss,k) # k[i] gives,no of distinct letters,to left of left of index i+1 in ss\n        a.clear()\n        myfunc(ss[::-1],p)  # p[i] gives,no of distinct letters,to left of left of index i+1...in ss_reverse\n        ans=0\n        # print(k)\n        # print(p)\n        for j in range(n-1):           \n            if(k[j]==p[n-1-(j+1)]):\n                ans+=1\n            \n        return ans        \n\n    \n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        leftMap = {}\n        rightMap = {}\n        \n        for j in range(len(s)):\n            rightMap[s[j]] = rightMap.get(s[j], 0) + 1\n        \n        i = 0\n        result = 0\n        while (i < len(s) - 1):\n            leftMap[s[i]] = leftMap.get(s[i], 0) + 1\n            rightMap[s[i]] = rightMap[s[i]] - 1\n            if (rightMap.get(s[i], 0) <= 0):\n                rightMap.pop(s[i])\n                \n            if (len(leftMap) == len(rightMap)):\n                result += 1\n            i += 1                \n        return result\n            \n# method 2\n#         prefix = [0] * len(s) # distinct number from s[0] to s[i]\n#         suffix = [0] * len(s) # distinct number from s[len(s)-1] to s[i]\n#         prefixMap = {}\n#         suffixMap = {}\n#         for i in range(len(s)):\n#             j = len(s) - 1 - i\n#             prefixMap[s[i]] = prefixMap.get(s[i], 0) + 1\n#             suffixMap[s[j]] = suffixMap.get(s[j], 0) + 1\n#             prefix[i] = len(prefixMap)\n#             suffix[j] = len(suffixMap)\n            \n#         result = 0\n#         k = 0\n#         while (k < len(s)-1):\n#             if (prefix[k] == suffix[k+1]):\n#                 result += 1\n#             k += 1\n#         return result\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        leftMap = {}\n        rightMap = {}\n        \n        for j in range(len(s)):\n            rightMap[s[j]] = rightMap.get(s[j], 0) + 1\n        \n        i = 0\n        result = 0\n        while (i < len(s) - 1):\n            leftMap[s[i]] = leftMap.get(s[i], 0) + 1\n            rightMap[s[i]] = rightMap[s[i]] - 1\n            if (rightMap.get(s[i], 0) <= 0):\n                rightMap.pop(s[i])\n                \n            if (len(leftMap) == len(rightMap)):\n                result += 1\n            i += 1\n            # print(\\\"leftMap\\\", leftMap)\n            # print(\\\"rightMap\\\", rightMap)\n                \n        return result\n            \n# method 2\n#         prefix = [0] * len(s) # distinct number from s[0] to s[i]\n#         suffix = [0] * len(s) # distinct number from s[len(s)-1] to s[i]\n#         prefixMap = {}\n#         suffixMap = {}\n#         for i in range(len(s)):\n#             j = len(s) - 1 - i\n#             prefixMap[s[i]] = prefixMap.get(s[i], 0) + 1\n#             suffixMap[s[j]] = suffixMap.get(s[j], 0) + 1\n#             prefix[i] = len(prefixMap)\n#             suffix[j] = len(suffixMap)\n            \n#         result = 0\n#         k = 0\n#         while (k < len(s)-1):\n#             if (prefix[k] == suffix[k+1]):\n#                 result += 1\n#             k += 1\n#         return result\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        left = Counter()\n        right = Counter(s)\n        res = 0\n        for ch in s :\n            if right[ch] == 1:\n                del right[ch]\n            else:\n                right[ch] -= 1\n            left[ch] += 1\n            #print (right,left)\n            if len(list(left.keys())) == len(list(right.keys())):\n                res += 1\n        return res\n        \n", "from collections import Counter\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        c2nl = Counter('')\n        c2nr = Counter(s)\n        n = len(s)\n        ans = 0\n        for i in range(n-1):\n            c2nl[s[i]] += 1\n            c2nr[s[i]] -= 1\n            if c2nr[s[i]] == 0 : del c2nr[s[i]]\n            if len(c2nl)==len(c2nr): ans += 1\n        return ans", "class Solution:\n    def numSplits(self, s: str) -> int:\n        p = (int)\n        q = (int)\n        ll = len(s)\n        if ll < 2:\n            return 0\n        ns = len(set(s))\n        np = nq = 0\n        for ii in range(1,ll):\n            if len(set(s[:ii])) == ns:\n                np = ii\n                break\n        for ii in range(1,ll):\n            if len(set(s[ll-ii:])) == ns:\n                nq = ll-ii\n                break\n        if np <= nq:\n            return nq-np+1\n        \n        ans = 0\n        for ii in range(1,ll):\n            p = len(set(s[:ii]))\n            q = len(set(s[ii:]))\n            if p == q:\n                ans += 1\n            elif p > q:\n                return ans\n                \n        return ans", "class Solution:\n    def numSplits(self, s: str) -> int:\n        left = Counter()\n        right = Counter(s)\n        res = 0\n        for ch in s :\n            if right[ch] == 1:\n                del right[ch]\n            else:\n                right[ch] -= 1\n            left[ch] += 1\n            if len(list(left.keys())) == len(list(right.keys())):\n                res += 1\n        return res\n        \n", "from collections import Counter\n\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        s1 = Counter()\n        s2 = Counter(s)\n        count = 0\n        \n        for a in s:\n            s1[a] += 1\n            s2[a] -= 1\n            if s2[a] == 0:\n                s2.pop(a)\n            if len(s1) == len(s2):\n                count += 1\n        return count", "class Solution:\n    def numSplits(self, s: str) -> int:\n        \n        dic_b ={}        \n        for i in s[1:]:\n            \n            if i not in dic_b:\n                dic_b[i] = 1\n            else:\n                dic_b[i]+=1\n        \n        b_count = len(dic_b)\n        a= list(s[:1])\n        a_count =1\n        \n        count = int(b_count==a_count)\n        \n        ix=1\n        \n        while ix<len(s):\n            \n            if s[ix] not in a:\n                a_count+=1\n            a.append(s[ix])\n            dic_b[s[ix]]-=1\n                \n            if dic_b[s[ix]] ==0:\n                b_count-=1\n            \n            count+= int(a_count == b_count)\n\n            ix+=1\n                      \n        return count\n", "from collections import Counter\n\ndef increment_counter(counter, key):\n    counter[key] += 1\n\ndef decrement_counter(counter, key):\n    counter[key] -= 1\n    if counter[key] == 0:\n        del counter[key]\n            \ndef naive_solution(s: str) -> int:\n\n    total = Counter(s)\n    count = 0\n\n    p = Counter()\n    for char in s:\n        p[char] += 1\n\n        q = total - p\n\n        if len(p) == len(q):\n            count += 1\n\n    return count\n\n\ndef optimized(s: str) -> int:\n    prefix = Counter()  # initialize prefix as empty\n    suffix = Counter(s)  # initialize suffix as total\n    count = 0\n    for char in s:\n        increment_counter(prefix, char)\n        decrement_counter(suffix, char)\n        \n        if len(prefix) == len(suffix):\n            count += 1\n    \n    return count\n\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        # return naive_solution(s)\n        return optimized(s)\n    \n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        \n        if len(s) < 2:\n            return 0\n        \n        c = 0\n        \n        left, right = defaultdict(int), defaultdict(int)\n        \n        left[s[0]] = 1\n        for i in range(1,len(s)):\n            right[s[i]] +=1\n        \n        if len(right) == 1:\n            c+=1\n            \n        for i in range(1, len(s)):\n            right[s[i]]-=1\n            if right[s[i]] == 0:\n                right.pop(s[i])\n            left[s[i]]+=1\n            if len(left) == len(right):\n                c+=1\n        return c", "from collections import Counter\n\ndef increment_counter(counter, key):\n    counter[key] += 1\n\ndef decrement_counter(counter, key):\n    if key in counter:\n        counter[key] -= 1\n        if counter[key] == 0:\n            del counter[key]\n            \ndef naive_solution(s: str) -> int:\n\n    total = Counter(s)\n    count = 0\n\n    p = Counter()\n    for char in s:\n        p[char] += 1\n\n        q = total - p\n\n        if len(p) == len(q):\n            count += 1\n\n    return count\n\n\ndef optimized(s: str) -> int:\n    prefix = Counter()  # initialize prefix as empty\n    suffix = Counter(s)  # initialize suffix as total\n    count = 0\n    for char in s:\n        increment_counter(prefix, char)\n        decrement_counter(suffix, char)\n        \n        if len(prefix) == len(suffix):\n            count += 1\n    \n    return count\n\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        # return naive_solution(s)\n        return optimized(s)\n    \n", "from collections import Counter\nclass Solution:\n    \n    def numSplits(self, s: str) -> int:\n        hist_left = Counter(s[:1])\n        hist_right = Counter(s[1:])\n        count = 0\n        for i in range(1, len(s)):\n            v = s[i]\n            if len(list(hist_left.keys())) == len(list(hist_right.keys())):\n                count += 1\n            \n            hist_left[v] += 1\n        \n            if hist_right[v] == 1:\n                del hist_right[v]\n            else:\n                hist_right[v] -= 1\n        return count\n            \n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        right = collections.Counter(s)\n        left = collections.defaultdict(int)\n        res = 0\n        for i in range(len(s)-1):\n            c = s[i]\n            right[c] -= 1\n            if not right[c]: del right[c]\n            left[c] += 1\n            if len(left) == len(right): res += 1\n        return res", "class Solution:\n    def numSplits(self, s: str) -> int:\n        left_unique = [0 for x in range(len(s))]\n        right_unique = [0 for x in range(len(s))]\n        left_set = set()\n        right_set = set()\n        for x in range(len(s)):\n            if s[x]  not in left_set:\n                left_set.add(s[x])\n                if x > 0:\n                    left_unique[x] =left_unique[x-1] + 1\n                else:\n                    left_unique[x] += 1\n            else:\n                left_unique[x] = left_unique[x-1]\n            if s[len(s)-1-x] not in right_set:\n                right_set.add(s[len(s)-x-1])\n                if  x > 0:\n                    right_unique[len(s)-x-1] = right_unique[len(s)-x] + 1\n                else:\n                    right_unique[len(s)-x-1]+=1\n            else:\n                right_unique[len(s)-x-1] = right_unique[len(s)-x]\n                \n        min_splits = 0\n        for x in range(1,len(s)):\n            if left_unique[x-1]  == right_unique[x]:\n                min_splits+=1\n        return min_splits\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        fila = {}\n        tot = len(set(s))\n\n        x = set()\n        for i in range(len(s)):\n            x.add(s[i])\n            if len(x) == tot:\n                fa = i\n                break\n                \n        x = set()\n        for i in range(len(s)-1, -1, -1):\n            x.add(s[i])\n            if len(x) == tot:\n                la = i\n                break\n                \n        if fa <= la:\n            return la - fa\n        \n        for i, c in enumerate(s):\n            if c not in fila:\n                fila[c] = [i, i]\n            else:\n                fila[c][1] = i\n        firsts, lasts = set(), set()\n        for a, b in fila.values():\n            firsts.add(a)\n            lasts.add(b)\n        ret = 0\n        cl, cr = 0, len(fila)\n        for i in range(len(s)-1):\n            if i in firsts:\n                cl += 1\n            if i in lasts:\n                cr -= 1\n            ret += int(cl == cr)\n            if cr < cl:\n                break\n        return ret", "class Solution:\n    def numSplits(self, s: str) -> int:\n        if len(s)==1:\n            return 0\n        ln=len(s)\n        ans=0\n        t1={}\n        t2={}\n        l1,l2=0,0\n        t1[s[0]]=1\n        for i in range(1,ln):\n            if s[i] in list(t2.keys()):\n                t2[s[i]]+=1\n            else:\n                t2[s[i]]=1\n                \n        if len(list(t1.keys()))==len(list(t2.keys())):\n            ans+=1\n        for i in range(1,ln):\n            if s[i] in list(t1.keys()):\n                t1[s[i]]+=1\n            else:\n                t1[s[i]]=1\n            \n            t2[s[i]]-=1\n            if t2[s[i]]==0:\n                del t2[s[i]]\n            \n            if len(t1)==len(t2):\n                ans+=1\n            \n            \n        \n        return ans \n", "class Solution:\n    def make_hist(self, array : str) -> dict:\n        hist = {}\n        for s in array:\n            if s not in list(hist.keys()):\n                hist[s] = 1\n            else:\n                hist[s] += 1\n        return hist\n    \n    def numSplits(self, s: str) -> int:\n        hist_left = self.make_hist(s[:1])\n        hist_right = self.make_hist(s[1:])\n        count = 0\n        for i in range(1, len(s)):\n            v = s[i]\n            if len(list(hist_left.keys())) == len(list(hist_right.keys())):\n                count += 1\n            if v not in list(hist_left.keys()):\n                hist_left[v] = 1\n            else:\n                hist_left[v] += 1\n                \n            if v in list(hist_right.keys()):\n                if hist_right[v] == 1:\n                    del hist_right[v]\n                else:\n                    hist_right[v] -= 1\n        return count\n            \n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        left_map = {}\n        right_map = {}\n        unique_right = 0\n        unique_left = 0\n        for i in range(len(s)):\n            if s[i] not in right_map:\n                right_map[s[i]] = 1\n                unique_right += 1\n            else:\n                right_map[s[i]] += 1\n        good_split = 0\n        for i in range(len(s)):\n            # add to left map\n            if s[i] not in left_map:\n                left_map[s[i]] = 1\n                unique_left += 1\n            else:\n                left_map[s[i]] += 1\n\n            # remove from right map\n            if right_map[s[i]] == 1:\n                unique_right -= 1\n            right_map[s[i]] -= 1\n            if unique_left == unique_right:\n                good_split += 1\n        return good_split", "from collections import Counter\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        rightS = Counter(s)\n        leftS = Counter()\n        count = 0\n        for c in s:\n            leftS[c]+=1\n            rightS[c]-=1\n            if rightS[c]==0:\n                del rightS[c]\n            count += (len(leftS.keys()) ==len(rightS.keys()))\n            \n        return count", "class Solution:\n    def numSplits(self, s: str) -> int:\n        # set up splitting at idx 1\n        p_dict = {s[0]: 1}\n        q_dict = {}\n        \n        for char in s[1:]:\n            self.addToDict( q_dict, char )\n                \n        if ( len(p_dict.keys()) ==  len(q_dict.keys()) ) :\n            count = 1\n        else:\n            count = 0\n        \n        for i in range(1, len(s) - 1):\n            # find the char here\n            char = s[i]\n            # remove from q, add to p\n            self.removeFromDict( q_dict, char)\n            self.addToDict( p_dict, char )\n\n            if ( len(p_dict.keys()) ==  len(q_dict.keys()) ):\n                count += 1\n        \n        return count\n    \n    def addToDict( self, my_dict, value ):\n        if (my_dict.get(value) is None):\n            my_dict[value] = 1\n        else:\n            my_dict[value] += 1\n    \n    def removeFromDict( self, my_dict, value ):\n        if (my_dict.get(value) == 1):\n            my_dict.pop(value)\n        elif (my_dict.get(value) > 1):\n            my_dict[value] -= 1", "class Solution:\n    def numSplits(self, s: str) -> int:\n        cur, h = Counter(), Counter(s)\n        cnt = 0\n        for c in s:\n            h[c] -= 1\n            cur[c] += 1\n            if h[c] == 0: del h[c]\n            cnt += len(h) == len(cur) \n        return cnt", "class Solution:\n    def numSplits(self, s: str) -> int:\n        if not s or len(s) < 0:\n            return 0\n        right = {}\n        left = {s[0]: 1}\n        count = 0\n        if len(left) == len(right):\n            count+= 1\n        for i in range(1, len(s)):\n            if s[i] in right:\n                right[s[i]] += 1\n            else:\n                right[s[i]] = 1\n        if len(left) == len(right):\n            count+= 1\n    \n        for i in range(1, len(s)):\n            right[s[i]] -= 1\n            if right[s[i]] == 0:\n                del right[s[i]]\n            if s[i] in left:\n                left[s[i]] += 1\n            else:\n                left[s[i]] = 1\n            \n            if len(left) == len(right):\n                count+= 1\n                \n        return count", "from collections import Counter\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        l, r = {}, Counter(s)\n        ans = 0\n        for i in range(len(s)-1):\n            # Add s[i] to l\n            if s[i] in l:\n                l[s[i]] += 1\n            else:\n                l[s[i]] = 1\n            # Remove s[i] from r\n            if s[i] in r:\n                r[s[i]] -= 1\n                if r[s[i]] == 0:\n                    del r[s[i]]\n            if len(l) == len(r):\n                #print(i, l, r)\n                ans += 1\n        return ans\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        c=Counter(s)\n        d=dict()\n        r=0\n        for i in s:\n            d[i]=1\n            if(i in c):\n                c[i]-=1\n            if(c[i]==0):\n                del c[i]\n            if(len(c)==len(d)):\n                r+=1\n        return r\n                \n                    \n        \n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        p, q, ans = Counter(), Counter(s), 0\n        for c in s[:-1]:\n            p[c] += 1\n            q[c] -= 1\n            if not q[c]:\n                del q[c]\n            ans += len(p) == len(q)\n        return ans\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        left_count = Counter()\n        right_count = Counter(s)\n        res = 0\n\n        for c in s:\n            left_count[c] += 1\n            right_count[c] -= 1\n\n            if right_count[c] == 0:\n                del right_count[c]\n\n            if len(left_count) == len(right_count):\n                res += 1\n\n        return res\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        result1 = [[s[0]]]\n        result2 = [[s[-1]]]\n        n = len(s)\n        for i in range(1,len(s)):\n            list1 = list(result1[i-1])\n            list2 = list(result2[i-1])\n            # print(list1, list2)\n            if s[i] not in list1:\n                list1.append(s[i])\n            if s[n-1-i] not in list2:\n                list2.append(s[n-1-i])\n            result1.append(list1)\n            result2.append(list2)\n        result = 0\n        result2.reverse()\n        # print(result1)\n        # print(result2)\n        for i in range(len(s)-1):\n            if len(result1[i]) == len(result2[i+1]):\n                result += 1\n        return result", "from collections import Counter\nclass Solution:\n    def numSplits(self, s: str) -> int:\n        p, q, ans = Counter(), Counter(s), 0\n        for c in s[:-1]:\n            p[c] += 1\n            q[c] -= 1\n            if not q[c]:\n                del q[c]\n            ans += len(p) == len(q)\n        return ans", "class Solution:\n    def numSplits(self, s: str) -> int:\n        # stores \n        unique_chars = {}\n        for i, char in enumerate(s):\n            if char in unique_chars:\n                first, last = unique_chars[char]\n                unique_chars[char] = (first, i)\n            else:\n                unique_chars[char] = (i, i)\n        n_unique_chars = len(list(unique_chars.keys()))\n        events = []\n        for start, end in list(unique_chars.values()):\n            events.append((start, 1))\n            events.append((end, -1))\n        events.sort(key=lambda x: x[0])\n        \n        left_num = 0\n        right_num = n_unique_chars\n        total = 0\n        start_good = None\n        #print(events)\n        for i, event_type in events:\n            #print(i, event_type, left_num, right_num)\n            if start_good is not None:\n                return i - start_good\n            if event_type == 1:\n                left_num += 1\n            else:\n                right_num -= 1\n            if left_num == right_num:\n                start_good = i\n            \n            \n                \n", "from collections import Counter\nclass Solution:\n    def numSplits(self, s):\n        res = 0\n        left = {}\n        right = Counter(s)\n        \n        for i in range(len(s)):\n            left[s[i]] = left.get(s[i], 0) + 1\n            right[s[i]] -= 1\n            \n            if right[s[i]] == 0:\n                del right[s[i]]\n                \n            if len(left) == len(right):\n                res += 1\n        return res", "class Solution:\n    def numSplits(self, s: str) -> int:\n        if len(s) == 1:\n            return 0\n        \n        lmap = collections.Counter(s[0:1])\n        rmap = collections.Counter(s[1:])\n        ans = 0\n        for i in range(1,len(s)):\n            if len(lmap) == len(rmap):\n                ans += 1\n            lmap.update([s[i]])\n            rmap[s[i]] -= 1\n            if not rmap[s[i]] :\n                del rmap[s[i]]\n                \n        return ans", "class Solution:\n    def numSplits(self, s: str) -> int:\n        res = 0\n        \n        # construct dict from 1 to last\n        # iterate from 1 and remove the elm from dict (if 0 then del elm from dict) and add it to the set \n        # check if leng are equal\n        fs = set()\n        \n        d={}\n        for x in s:\n            if x not in d:\n                d[x]=1\n            else:\n                d[x]+=1\n        \n        i = 0\n        while i<len(s):\n            fs.add(s[i])\n            \n            if d[s[i]]>1:\n                d[s[i]]-=1\n            else:\n                del d[s[i]]\n            \n            if len(fs)==len(set(d.keys())):\n                res+=1\n            \n            i+=1\n        return res\n", "class Solution:\n    def numSplits(self, string: str) -> int:\n        def isValid(string, i):\n            return 0 <= i < len(string)\n\n        def getLength(string, unique, i):\n            if isValid(string, i):\n                unique.add(string[i])\n                return len(unique)\n            return len(unique)\n\n        left, right = [0] * len(string), [0] * len(string)\n        left_unique, right_unique = set(), set()\n        reversed_string = string[::-1]\n\n        for i in range(len(left)):\n            left[i] = getLength(string, left_unique, i)\n            right[len(right)-1-i] = getLength(reversed_string, right_unique, i)\n\n        good_splits = 0\n        for i in range(len(left)-1):\n            if right[i+1] == left[i]:\n                good_splits += 1\n        return good_splits\n\n", "class Solution:\n    def numSplits(self, s: str) -> int:\n        if len(s) == 0:\n            return 0\n        count = 0\n        counterLeft = collections.Counter()\n        counterRight = collections.Counter(s)\n        for element in s:\n            counterLeft[element] += 1\n            counterRight[element] -= 1\n            if counterRight[element] == 0:\n                counterRight.pop(element)\n            if len(counterLeft) == len(counterRight):\n                count += 1\n        return count", "class Solution:\n    def numSplits(self, s: str) -> int:\n        if not s:\n            return 0\n        l_unique = set([])\n        r_unique = set(s)\n        good_splits = 0\n        for i, x in enumerate(s):\n            l_unique.add(x)\n            if x not in s[i+1:]:\n                r_unique.discard(x)\n            if len(l_unique) == len(r_unique):\n                good_splits += 1\n        return good_splits", "class Solution:\n    def numSplits(self, s: str) -> int:\n        result1 = [[s[0]]]\n        result2 = [[s[-1]]]\n        n = len(s)\n        for i in range(1,len(s)):\n            list1 = list(result1[i-1])\n            list2 = list(result2[i-1])\n            # print(list1, list2)\n            if s[i] not in list1:\n                list1.append(s[i])\n            if s[n-1-i] not in list2:\n                list2.append(s[n-1-i])\n            result1.append(list1)\n            result2.append(list2)\n        result = 0\n        # result2.reverse()\n        # print(result1)\n        # print(result2)\n        for i in range(len(s)-1):\n            if len(result1[i]) == len(result2[n-1-(i+1)]):\n                result += 1\n        return result"]