["class Solution:\n    def arrangeWords(self, text: str) -> str:\n        p=text.split(' ')\n        final=''\n        j=sorted(p,key=len)\n        temp=' '.join(j)\n        if temp[0]>='a' and temp[0]<='z':\n            s=temp[0].swapcase()\n            final=final+s[0]\n        else:\n            final=final+temp[0]\n        for i in range(1,len(temp)):\n            if temp[i]>='A' and temp[i]<='Z':\n                s=temp[i].swapcase()\n                final=final+s[0]\n            else:\n                final=final+temp[i]\n        return final\n        \n", "class Solution:\n    def arrangeWords(self, text: str) -> str:\n        text = text[0].lower() + text[1:] \n        words=[]\n        word=''\n        word_len=0\n        for char in text:\n            if char==' ':\n                words.append((word_len, word))\n                word=''\n                word_len=0\n            else:\n                word+=char\n                word_len+=1\n        if (word_len>0):\n            words.append((word_len, word))\n        words.sort(key=lambda tup: tup[0])\n        output=''\n        for word in words:\n            output+=word[1]+' '\n        return output[:-1].capitalize()", "from operator import itemgetter\n\nclass Solution:\n    def arrangeWords(self, text: str) -> str:\n        words = [[str.lower(v), k, len(v)] for k,v in enumerate(text.split(' '))]\n        words2 = sorted(words, key=itemgetter(2))\n        print(words)\n        print(words2)\n        words3 = [word[0] for word in words2]\n        print(words3)\n        \n        words4 = [str.title(words3[x]) if x == 0 else words3[x] for x in range(len(words3))]\n        return ' '.join(words4)", "class Solution:\n    def arrangeWords(self, text: str) -> str:\n        counter = 0\n        current_word = ''\n        words_map = {}\n        for i in range(0, len(text)):\n            ch = text[i].lower()\n            if ch == ' ' or i == len(text) - 1:\n                if i == len(text)-1:\n                    counter += 1\n                    current_word += ch\n                    \n                if counter not in words_map:\n                    words_map[counter] = []\n                    \n                words_map[counter].append(current_word)\n                \n                counter = 0\n                current_word = ''\n            else:\n                counter += 1\n                current_word += ch\n        \n        ordered_keys = list(words_map.keys())\n        ordered_keys.sort()\n        \n        ans = ''\n        for i in range(0, len(ordered_keys)):\n            if i == 0:\n                ans = ' '.join(words_map[ordered_keys[i]])\n            else:\n                ans += ' ' + ' '.join(words_map[ordered_keys[i]])\n                \n        ans = ans[0].upper() + ans[1:]\n        \n        return ans\n", "class K:\n    def __init__(self, obj):\n        self.obj = obj\n    def __lt__(self, other):\n        return len(self.obj) < len(other.obj)\nclass Solution:\n    def arrangeWords(self, text: str) -> str:\n        l = text.split()\n        l[0] = l[0].lower()\n        l = sorted(l, key=K)\n        \n        l[0] = l[0].title()\n        return ' '.join(l)", "class Solution:\n    def arrangeWords(self, text: str) -> str:\n        res = []\n        res_t = ''\n        for idx,word in enumerate(text.split()):\n            res.append((len(word),idx, word.lower()))\n        res.sort()\n        for l,_,word in res:\n            if res_t == '':\n                res_t += word[0].upper() + word[1:]\n            else:\n                res_t += ' ' + word\n        return res_t", "class Solution:\n    def arrangeWords(self, text: str) -> str:\n        dic = collections.OrderedDict()\n        for word in text.split():\n            n = len(word)\n            dic[n] = dic.get(n, []) + [word.lower()]\n\n        res = []\n        for key, val in sorted(dic.items()):\n            res += val\n\n        return ' '.join(res).capitalize()", "class Solution:\n    def arrangeWords(self, text: str) -> str:\n        dic = collections.OrderedDict()\n        for word in text.split():\n            dic[len(word)] = dic.get(len(word), []) + [word.lower()]\n        res = []    \n        for key, val in sorted(dic.items()):\n            res += val\n        \n        res = [res[0].capitalize()] + res[1:]\n        return ' '.join(res)", "class Solution:\n    def arrangeWords(self, text: str) -> str:\n        if not text:\n            return text\n        \n        words = text.lower().split(' ')\n        \n        words = sorted(words, key = lambda x: len(x))\n        words[0] = words[0][0].upper() + words[0][1:]\n        \n        return ' '.join(words)"]