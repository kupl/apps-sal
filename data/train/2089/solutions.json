["from operator import __or__, __and__, __xor__\nfrom sys import stdin, stdout\nn, b, c = int(stdin.readline()), 0, 1023\nm = {'|': __or__, '&': __and__, '^': __xor__}\nfor i in range(n):\n    t, v = [i for i in stdin.readline().split()]\n    b = m[t](b, int(v))\n    c = m[t](c, int(v))\nx, o, a = 0, 0, 1023\nfor i in range(10):\n    if ((b >> i) & 1) and ((c >> i) & 1):\n        o |= 1 << i\n    elif not ((b >> i) & 1) and not ((c >> i) & 1):\n        a -= 1 << i\n    elif ((b >> i) & 1) and not ((c >> i) & 1):\n        x |= 1 << i\nstdout.write('3\\n| ' + str(o) + '\\n^ ' + str(x) + '\\n& ' + str(a))\n        \n", "from operator import __or__, __and__, __xor__\nfrom sys import stdin, stdout\nn, b, c = int(stdin.readline()), 0, 1023\nm = {'|': __or__, '&': __and__, '^': __xor__}\nfor i in range(n):\n    t, v = [i for i in stdin.readline().split()]\n    b = m[t](b, int(v))\n    c = m[t](c, int(v))\nx, o, a = 0, 0, 1023\nfor i in range(10):\n    if ((b >> i) & 1) and ((c >> i) & 1):\n        o |= 1 << i\n    elif not ((b >> i) & 1) and not ((c >> i) & 1):\n        a -= 1 << i\n    elif ((b >> i) & 1) and not ((c >> i) & 1):\n        x |= 1 << i\nstdout.write('3\\n| ' + str(o) + '\\n^ ' + str(x) + '\\n& ' + str(a))\n        \n", "#!/usr/bin/env python3\n\ndef simu(P,i):\n    for c,x in P:\n        if c=='&':\n            i &= x\n        elif c=='|':\n            i |= x\n        else:\n            i ^= x\n    return i\n\ndef simpl(P):\n    out0,out1 = simu(P,0),simu(P,1023)\n    A,O,X = 1023,0,0\n    for i in range(10):\n        B01 = (out0>>i)&1,(out1>>i)&1\n        if B01==(0,0):\n            A ^= 1<<i\n        elif B01==(1,0):\n            X |= 1<<i\n        elif B01==(1,1):\n            O |= 1<<i\n    return A,O,X\n\ndef main():\n    n = int(input())\n    P = []\n    for _ in range(n):\n        c,x = input().split()\n        P.append((c,int(x)))\n    A,O,X = simpl(P)\n    print(3)\n    print('&',A)\n    print('|',O)\n    print('^',X)\n\nmain()\n", "def n2b(n):\n  b = bin(n)[2:]\n  r = 10 - len(b)\n  return list('0'*r + b)\n\ndef b2n(b):\n  return int(''.join(b), 2)\n\ndef dump_encoded(s):\n  ops = []\n  op = '&'\n  b = ''\n  for i in range(10):\n    if s[i] == '0':\n      b += '0'\n    else:\n      b += '1'\n  ops.append((op, b2n(b)))\n  op = '|'\n  b = ''\n  for i in range(10):\n    if s[i] == '1':\n      b += '1'\n    else:\n      b += '0'\n  ops.append((op, b2n(b)))\n  op = '^'\n  b = ''\n  for i in range(10):\n    if s[i] == 'y':\n      b += '1'\n    else:\n      b += '0'\n  ops.append((op, b2n(b)))\n\n  print(len(ops))\n  for op, n in ops:\n    print(op,n)\n\n\n\n# x, y, 0, 1\n\nm = int(input())\nops = []\nfor i in range(m):\n  op, n = input().split(' ')\n  n = int(n)\n  ops.append((op, n))\n\n\ns = 1023\nfor i in range(len(ops)):\n  op, n = ops[i]\n  if op == '&':\n    s = s & n\n  elif op == '|':\n    s = s | n\n  elif op == '^':\n    s = s ^ n\nb1 = n2b(s)\n\ns = 0\nfor i in range(len(ops)):\n  op, n = ops[i]\n  if op == '&':\n    s = s & n\n  elif op == '|':\n    s = s | n\n  elif op == '^':\n    s = s ^ n\nb2 = n2b(s)\n\n\ng = ''\nfor k in range(10):\n  if b1[k] == b2[k]:\n    if b1[k] == '0':\n      g += '0'\n    else:\n      g += '1'\n  else:\n    if b1[k] == '0':\n      g += 'y'\n    else:\n      g += 'x'\n\ndump_encoded(g)", "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\nimport itertools\nimport sys\n\n\"\"\"\ncreated by shhuan at 2017/11/5 16:54\n\n\"\"\"\n\nN = int(input())\n\nP = []\nfor i in range(N):\n    P.append(input().split())\n\n\nN = 2\nS = [0, 1023]\nT = [v for v in S]\nfor i in range(N):\n    for p, v in P:\n        v = int(v)\n        if p == '^':\n            T[i] ^= v\n        elif p == '|':\n            T[i] |= v\n        else:\n            T[i] &= v\n\na, b, c = 0, 0, 0\nfor i in range(10, -1, -1):\n    a <<= 1\n    b <<= 1\n    c <<= 1\n    c |= 1\n    if all([(v>>i) & 1 == 1for v in T]):\n        b |= 1\n    elif all([(v>>i) & 1 == 0 for v in T]):\n        c >>= 1\n        c <<= 1\n    elif all([(S[j]>>i)&1 != (T[j]>>i)&1 for j in range(N)]):\n        a |= 1\n\n\nprint(3)\nprint('^', a)\nprint('|', b)\nprint('&', c)", "import sys\n\nn = int(sys.stdin.readline())\nstat = [0] * 10 # 0: stay, 1: flip, 2: on, 3: off\n\nfor i in range(n):\n    op, arg = sys.stdin.readline().split()\n    arg = int(arg)\n\n    if op == '&':\n        for j in range(10):\n            if arg & (1 << j) == 0:\n                stat[j] = 3\n    elif op == '|':\n        for j in range(10):\n            if arg & (1 << j) > 0:\n                stat[j] = 2\n    else:\n        for j in range(10):\n            if arg & (1 << j) > 0:\n                stat[j] ^= 1\n\nprint('3')\norarg = 0\nfor i in range(10):\n    if stat[i] == 2:\n        orarg |= (1 << i)\nprint('| ' + str(orarg))\n\nandarg = (1 << 10) - 1\nfor i in range(10):\n    if stat[i] == 3:\n        andarg ^= (1 << i)\nprint('& ' + str(andarg))\n\nxorarg = 0\nfor i in range(10):\n    if stat[i] == 1:\n        xorarg += (1 << i)\nprint('^ ' + str(xorarg))\n", "#!/usr/local/bin/python3\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nzero_result = 0\nones_result = 1023\n\nwhile (n > 0) :\n\t[op, val] = sys.stdin.readline().split(\" \")\n\tval = int(val)\n\tn -= 1\n\tif (op == '&') :\n\t\tzero_result = zero_result & val\n\t\tones_result = ones_result & val\n\telif (op == '|') :\n\t\tzero_result = zero_result | val\n\t\tones_result = ones_result | val\n\telif (op == '^') :\n\t\tzero_result = zero_result ^ val\n\t\tones_result = ones_result ^ val\n\telse:\n\t\tpass\n\nand_bin = [1 for i in range(10)]\nor_bin = [0 for i in range(10)]\nxor_bin = [0 for i in range(10)]\n\nfor i in range(10) :\n\tj = 9 - i \n\tzero_digit = zero_result >> j \n\tones_digit = ones_result >> j\n\tzero_result = zero_result - zero_digit*(2**j)\n\tones_result = ones_result - ones_digit*(2**j)\n\tif ((zero_digit == 0) and (ones_digit == 0)) :\n\t\tand_bin[j] = 0\n\telif ((zero_digit == 1) and (ones_digit == 0)) :\n\t\txor_bin[j] = 1\n\telif ((zero_digit == 1) and (ones_digit == 1)) :\n\t\tor_bin[j] = 1\n\nand_int = 0\nxor_int = 0\nor_int = 0\n\nfor i in range(10):\n\tand_int += and_bin[i]*(2**i)\n\tor_int += or_bin[i]*(2**i)\n\txor_int += xor_bin[i]*(2**i)\n\nprint(3)\nprint('&', and_int)\nprint('|', or_int)\nprint('^', xor_int)\n\n\n", "from sys import *\nd = {'|': lambda t: t | k, '&': lambda t: t & k, '^': lambda t: t ^ k}\n\na, b = 1023, 0\nfor i in range(int(input())):\n    s, q = stdin.readline().split()\n    k = int(q)\n    a = d[s](a)\n    b = d[s](b)\n\nt = [2]\nfor u in range(1024):\n    for v in range(1024):\n        if 1023 ^ v == a and u ^ v == b:\n            print('2\\n|', u, '\\n^', v)\n            return", "f = lambda t: t | k if s == '|' else t & k if s == '&' else t ^ k\na, b = 1023, 0\nfor i in range(int(input())):\n    s, k = input().split()\n    k = int(k)\n    a, b = f(a), f(b)\nprint('2\\n|', b ^ a ^ 1023, '\\n^', 1023 ^ a)", "from sys import stdin\n\nBITCOUNT = 10\nxONES = (1 << 10) - 1\nxZEROS = 0\nn = int(stdin.readline())\n\nfor i in range(n):\n    op, num = stdin.readline().split()\n    num = int(num)\n    if op == '&':\n        xONES &= num\n        xZEROS &= num\n    elif op == '|':\n        xONES |= num\n        xZEROS |= num\n    else:\n        xONES ^= num\n        xZEROS ^= num\n\nandmask = 0\nxormask = 0\nmask = 1\nfor i in range(BITCOUNT):\n    ONESbit = (xONES >> i) & 1\n    ZEROSbit = (xZEROS >> i) & 1\n    if (ONESbit == 1) and (ZEROSbit == 0):\n        andmask += mask\n    elif (ONESbit == 0) and (ZEROSbit == 1):\n        andmask += mask\n        xormask += mask\n    elif (ONESbit == 1) and (ZEROSbit == 1):\n        xormask += mask\n    mask *= 2\n\nprint(2)\nprint('& {}'.format(andmask))\nprint('^ {}'.format(xormask))", "\"\"\"\nBrandt Smith, Lemuel Gorion and Peter Haddad\n\ncodeforces.com\n\nProblem 878A\n\"\"\"\na, b = 0, 1023\n\nn = int(input())\n\nfor i in range(n):\n    l, r = input().split(' ')\n    r = int(r)\n\n    if l == '|':\n        a, b = a | r, b | r\n    elif l == '&':\n        a, b = a & r, b & r\n    elif l == '^':\n        a, b = a ^ r, b ^ r\n\nprint('3')\nprint('&', (1023 & a) | b)\nprint('^', a & (1023 ^ b))\nprint('|', a & b)\n\n    \n", "n = int(input())\na, b = 1023, 0\n\nfor _ in range(n):\n    c, d = input().split()\n    d = int(d)\n\n    if c == '|':\n        a, b = a | d, b | d\n    elif c == '&':\n        a, b = a & d, b & d\n    elif c == '^':\n        a, b = a ^ d, b ^ d\n\nprint('2\\n| {}\\n^ {}'.format(a ^ b ^ 1023, a ^ 1023))\n\n\n\n# Made By Mostafa_Khaled\n", "import sys\nimport heapq\nimport math\nfrom enum import Enum\n\nclass Status:\n    UNTOUCHED = 1\n    FLIPPED = 2\n    ONE = 3\n    ZERO = 4\n\nbits = [Status.UNTOUCHED]*10\nlines = sys.stdin.read().splitlines()\n\nn = int(lines[0])\n\nandNum = 1023\norNum = 0\nxorNum = 0\nfor i in range(1, n+1):\n    # print(andNum)\n    # print(orNum)\n    # print(xorNum)\n\n    operation, num = lines[i].split(' ')\n    num = int(num)\n    # print(num)\n    # print('----')\n    if operation == '|':\n        andNum=andNum|num\n        orNum=orNum|num\n        xorNum=xorNum&(orNum^1023)\n    elif operation == '&':\n        andNum=andNum&num\n        orNum=orNum&num\n        xorNum=xorNum&num\n    else:\n        # Flip all ones to zeroes and flip untouched\n        # All bits that were set to 1 in OR mask and 1 in num, should be set to 0 in AND mask\n        # All bits that were set to 0 in AND mask and 1 in num, should be set to 1 in OR mask\n        # All those bits that were not set to 0 in AND mask and not set to 1 in OR mask should be set to 1 in xor MASK\n        oldAndNum=andNum\n        oldOrNum=orNum\n        andNum=andNum^((orNum|(andNum^1023))&num)\n        orNum=orNum^(((oldAndNum^1023)|(orNum))&num)\n        xorNum=xorNum^(oldAndNum&(oldOrNum^1023)&num)\n\n# OR\nprint(3)\nprint('& '+str(andNum))\nprint('| '+str(orNum))\nprint('^ '+str(xorNum))\n\n\n\n", "import io, os\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n# input = io.StringIO(os.read(0, os.fstat(0).st_size).decode()).readline\nii=lambda:int(input())\nkk=lambda:map(int, input().split())\nll=lambda:list(kk())\n\n\n# xor + 0 --> unchanged(2)\n# xor + 1 --> flip(3)\n# or + 0 --> unchanged(2)\n# or + 1 --> 1(1)\n# and + 0 --> 0(0)\n# and + 1 --> unchanged(2)\narr = [2]*10\nfor _ in range(ii()):\n\ts,v=input().split()\n\tv = int(v)\n\tif s == b\"|\":\n\t\tfor i in range(10):\n\t\t\tif v&(2**i):\n\t\t\t\tarr[i]= 1\n\telif s == b\"^\":\n\t\tfor i in range(10):\n\t\t\tif v&(2**i):\n\t\t\t\tarr[i]^=1\n\telif s == b\"&\":\n\t\tfor i in range(10):\n\t\t\tif not (v&(2**i)):\n\t\t\t\tarr[i]=0\n\telse:\n\t    print(s)\nprint(3)\nx=o=a= 0\nfor i in range(10):\n\tif arr[i]==3: x += 2**i\n\telif arr[i]==0: a+=2**i\n\telif arr[i]==1:o+=2**i\nprint('|',o)\nprint('^',x)\nprint('&',2**10 - a - 1)", "from sys import stdin, stdout\n\nn = int(stdin.readline())\na = list()\ny = 0\n\nfor i in range(n):\n    oper, x = stdin.readline().split()\n    x = int(x)\n    a.append((oper, x))\n    if oper == '&':\n        y &= x\n    elif oper == '|':\n        y |= x\n    elif oper == '^':\n        y ^= x\n\nAND = (1<<10) - 1\nOR = 0\nXOR = 0\n\nfor k in range(10):\n    cur = 1 << k\n    for comm in a:\n        oper, x = comm\n        if oper == '&':\n            cur &= x\n        elif oper == '|':\n            cur |= x\n        elif oper == '^':\n            cur ^= x\n    res0 = y & (1<<k)\n    res1 = cur & (1<<k)\n    if not res0 and not res1:\n        AND ^= (1<<k)\n    elif not res0 and res1:\n        pass\n    elif res0 and not res1:\n        XOR ^= (1<<k)\n    else:\n        OR ^= (1<<k)\n\nprint(3)\nprint('& ', AND)\nprint('| ', OR)\nprint('^ ', XOR)\n\n\n", "from sys import stdin, stdout\nfrom operator import __or__, __and__, __xor__\n\noper = {'&': __and__, '|': __or__, '^': __xor__}\nn = int(stdin.readline())\na = 0\nb = (1<<10) - 1\n\nfor i in range(n):\n    op, x = stdin.readline().split()\n    x = int(x)\n    a = oper[op](a, x)\n    b = oper[op](b, x)\n\nAND = (1<<10) - 1\nOR = 0\nXOR = 0\n\nfor k in range(10):\n    res0 = a & (1<<k)\n    res1 = b & (1<<k)\n    if not res0 and not res1:\n        AND ^= (1<<k)\n    elif not res0 and res1:\n        pass\n    elif res0 and not res1:\n        XOR ^= (1<<k)\n    else:\n        OR ^= (1<<k)\n\nprint(3)\nprint('& ', AND)\nprint('| ', OR)\nprint('^ ', XOR)\n\n\n", "import sys\ninput = sys.stdin.readline\n\nn = int(input())\ncom = []\n\nfor _ in range(n):\n    l = input().split()\n    com.append((l[0], int(l[1])))\n\nAND, OR, XOR = [], [], []\n\nfor i in range(10):\n    res1 = 0\n    res2 = 1\n    \n    for s, n in com:\n        b = (n>>i)&1\n        \n        if s=='&':\n            res1 &= b\n            res2 &= b\n        elif s=='|':\n            res1 |= b\n            res2 |= b\n        elif s=='^':\n            res1 ^= b\n            res2 ^= b\n        \n    if (res1, res2)==(0, 0):\n        AND.append(i)\n    elif (res1, res2)==(1, 1):\n        OR.append(i)\n    elif (res1, res2)==(1, 0):\n        XOR.append(i)\n\nAND_n = 0\n\nfor i in range(10):\n    if i not in AND:\n        AND_n += 2**i\n\nOR_n = 0\n\nfor i in OR:\n    OR_n += 2**i\n\nXOR_n = 0\n\nfor i in XOR:\n    XOR_n += 2**i\n\nprint(3)\nprint('&', AND_n)\nprint('|', OR_n)\nprint('^', XOR_n)\n\n\"\"\"\nfor i in range(1024):\n    res1 = i\n    \n    for s, n in com:\n        if s=='&':\n            res1 &= n\n        elif s=='|':\n            res1 |= n\n        elif s=='^':\n            res1 ^= n\n    \n    res2 = i\n    res2 &= AND_n\n    res2 |= OR_n\n    res2 ^= XOR_n\n    \n    if res1!=res2:\n        1/0\n\"\"\"", "import sys\ninput=sys.stdin.readline\nimport copy\nfrom math import *\nn=int(input())\na=[-1 for i in range(10)]\nfor i in range(n):\n    p,q=input().split()\n    qq=(bin(int(q))[2:])\n    q=list((10-len(qq))*\"0\"+qq)\n    if p=='|':\n        for i in range(9,-1,-1):\n            if  q[i]=='1':\n                a[i]=1\n    if p=='&':\n        for i in range(9,-1,-1):\n            if  q[i]=='0':\n                a[i]=0\n    if p=='^':\n        for i in range(9,-1,-1):\n            if  q[i]=='1' and (a[i]==0 or a[i]==1):\n                a[i]^=1\n            elif q[i]=='1' :\n                if a[i]==-1:\n                    a[i]=-2\n                else:\n                    a[i]=-1\n    #print(a)                \nc=0\nfor i in range(10):\n    if a[i]==-2:\n        c+=(2**(10-i-1))\nprint(3)\nprint(\"^\",c)\nv=list(\"0\"*10)\nfor i in range(10):\n    if a[i]==1:\n        v[i]='1'\nprint(\"|\",int(\"\".join(v),2))  \nu=list(\"1\"*10)\nfor i in range(10):\n    if a[i]==0:\n        u[i]='0'\nprint(\"&\",int(\"\".join(u),2))  ", "n = int(input())\nqueries = list(input().split() for _ in range(n))\n\na, b = 0, (1<<10) - 1\nfor c, x in queries:\n    x = int(x)\n    if c == '|':\n        a, b = a | x, b | x\n    elif c == '&':\n        a, b = a & x, b & x\n    elif c == '^':\n        a, b = a ^ x, b ^ x\n\nx, y, z = 0, (1<<10) - 1, 0\nfor i in range(10):\n    a_i = (a >> i) & 1\n    b_i = (b >> i) & 1\n    if a_i and b_i:\n        x |= (1 << i)\n    if not a_i and not b_i:\n        y ^= (1 << i)\n    if a_i and not b_i:\n        z ^= (1 << i)\n\nprint(3)\nprint('|', x)\nprint('&', y)\nprint('^', z)\n", "from sys import *\nd = {'|': lambda t: t | k, '&': lambda t: t & k, '^': lambda t: t ^ k}\n \na, b = 1023, 0\nfor i in range(int(input())):\n    s, q = stdin.readline().split()\n    k = int(q)\n    a = d[s](a)\n    b = d[s](b)\n \nt = [2]\nfor u in range(1024):\n    for v in range(1024):\n        if 1023 ^ v == a and u ^ v == b:\n            print('2\\n|', u, '\\n^', v)\n            return", "import os\nimport sys\nfrom io import BytesIO, IOBase\n \nBUFSIZE = 8192\n \n \nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n######################################\na=int(input())\nbits=['r' for i in range(10)]\ntemp=['r' for i in range(10)]\nfor i in range(a):\n    x,y=input().split()\n    y=int(y)\n    n=bin(y)\n    n=n[2:]\n    ans=''\n    for i in range(10-len(n)):\n        ans+='0'\n    ans=ans+n\n    \n    if(x=='|'):\n        \n        for i in range(len(bits)):\n            if(ans[i]=='1'):\n                temp[i]='1'\n            \n    if(x=='&'):\n        for i in range(len(bits)):\n            if(ans[i]=='0'):\n                temp[i]='0'\n    if(x=='^'):\n        for i in range(len(bits)):\n            if((temp[i]=='0' and ans[i]=='1') or (temp[i]=='1' and ans[i]=='0')):\n                temp[i]='1'\n            elif(temp[i]==ans[i] and (temp[i]=='0' or temp[i]=='1')):\n                temp[i]='0'\n            else:\n                if(ans[i]=='1'):\n                    if(temp[i]=='r'):\n                        temp[i]='rb'\n                    else:\n                        temp[i]='r'\n\n\nad=['0' for i in range(10)]\nxor=['0' for i in range(10)]\nnd=['1' for i in range(10)]\n\nfor i in range(len(temp)):\n    if(temp[i]=='1'):\n        ad[i]='1'\n        nd[i]='1'\n        xor[i]='0'\n    elif(temp[i]=='0'):\n        nd[i]='0'\n        ad[i]='0'\n        xor[i]='1'\n    elif(temp[i]=='rb'):\n        xor[i]='1'\n        ad[i]='0'\n        nd[i]='1'\n    else:\n        xor[i]='0'\n        ad[i]='0'\n        nd[i]='1'\n\nad=int(''.join(map(str,ad)),2)\nnd=int(''.join(map(str,nd)),2)\nxor=int(''.join(map(str,xor)),2)\nprint(3)\nprint('^',xor)\nprint('&',nd)\nprint('|',ad)\n                \n        \n            \n            \n            \n        \n    \n\n", "#!/usr/bin/env pypy3\n\nfrom sys import stdin, stdout\n \ndef input():\n    return stdin.readline().strip()\n\ndef run_program(n, program):\n    for op, a in program:\n        assert(op in \"&|^\")\n        if op == '&': n = n & a\n        if op == '|': n = n | a\n        if op == '^': n = n ^ a\n    return n\n\nN = int(input())\n\nq = 1023\nr = 0\n\noriginal_program = []\nfor _ in range(N):\n    op, s = input().split(' ')\n    s = int(s)\n\n    original_program += [(op, s)]\n\n    if op == '&':\n        q = q & s\n        r = r & s\n    elif op == '^':\n        r = r ^ s\n    elif op == '|':\n        q, r = (q ^ (q&s)), (r ^ s ^ (r&s))\n    else:\n        assert(False)\n\nfinal_program = [('&', q), ('^', r)]\n\nprint(2)\nprint(f\"& {q}\")\nprint(f\"^ {r}\")", "import sys\nn = int(sys.stdin.readline())\nzero_model, one_model = 0, (1<<10)-1\ncommands = []\nfor i in range(n):\n\tc, k = sys.stdin.readline()[:-1].split()\n\tk = int(k)\n\tcommands.append((c,k))\n\ndef process(n,commands):\n\tfor comm in commands:\n\t\tc, k = comm\n\t\tif c=='|':\n\t\t\tn |= k\n\t\telif c=='^':\n\t\t\tn ^= k\n\t\telif c=='&':\n\t\t\tn &= k\n\treturn n\n\nzero_model = process(0,commands)\none_model = process((1<<10)-1,commands)\n\nset_zero = (1<<10)-1\nflip = 0\nset_one = 0\nfor i in range(10):\n\tbz = zero_model&(1<<i)\n\tbo = one_model&(1<<i)\n\tif bz >= 1 and bo==0:\n\t\tflip |= 1<<i\n\telif bz >= 1 and bo >= 1:\n\t\tset_one |= 1<<i\n\telif bz==0 and bo==0:\n\t\tset_zero &= ~(1<<i)\nans = [(\"&\",set_zero),(\"^\",flip),(\"|\",set_one)]\n\nprint(len(ans))\nfor comm in ans:\n\tprint(*comm)\n\n# for i in range(1<<10):\n# \tif process(i,commands) != process(i,ans):\n# \t\tprint(bin(process(i,commands)),\"vs\",bin(process(i,ans)))\n"]