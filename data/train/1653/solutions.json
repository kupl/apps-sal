["def fibfusc(n, num_digits=None):\n    if n < 2: return (1 - n, n)\n    b = bin(n)[2:]\n    \n    x, y = fibfusc(int(b[0]))\n    for bit in b[1:]:\n        if bit == \"1\":\n            x, y = (-y*(2*x + 3*y), (x + 2*y)*(x + 4*y))\n        else:\n            x, y = ((x + y) * (x - y), y * (2*x + 3*y))\n        if num_digits:\n            x, y = x % 10 ** num_digits - 10**num_digits, y % 10 ** num_digits\n    return x, y\n", "def fibfusc(n, num_digits=None):\n    if num_digits: mod = pow(10, num_digits)\n    x, y = 1, 0\n    for c in bin(n)[2:]:\n        if c == '0':\n            x, y = (x + y) * (x - y), y * ( 2 * x + 3 * y)\n        else:\n            x, y = -y * (2 * x + 3 * y), (x + 2 * y) * (x + 4 * y)\n        if num_digits:\n            x, y = x % -mod, y % mod\n    return x, y\n", "def fibfusc(n, num_digits=None):\n    f0 = lambda x, y: ((x + y) * (x - y), y * (2 * x + 3 * y))\n    f1 = lambda x, y: (-y * (2 * x + 3 * y), (x + 2 * y)*(x + 4 * y))\n    \n    x, y = 1, 0\n    if num_digits: m = 10 ** num_digits\n    for digit in bin(n)[2:]:\n        if digit == '0':\n            x, y = f0(x, y)\n        else:\n            x, y = f1(x, y)\n        if num_digits:\n            x, y = x%m - m, y%m\n      \n    return (x, y)\n", "def climb(n):\n    r=[n]\n    while(n>1):\n        if n%2==0:\n            n//=2\n        else:\n            n=(n-1)//2\n        r.append(n)\n    return r[::-1]\n\ndef fibfusc(n, num_digits=None):\n    if n==0: return (1,0)\n    r=climb(n)\n    x,y=0,1\n    for i in r[1:]:\n        if i%2==0:\n            if num_digits:\n                x,y=((x+y)%(10**num_digits))*(x-y), y*((2*x+3*y)%(10**num_digits))\n            else:\n                x,y=(x+y)*(x-y), y*(2*x+3*y)\n        else:\n            if num_digits:\n                x,y=-y*((2*x+3*y)%(10**num_digits)), (x+2*y)*(x+4*y)\n            else:\n                x,y=-y*(2*x+3*y), (x+2*y)*(x+4*y)\n        if num_digits:\n            x=x%(10**num_digits) if x>=0 else -(abs(x)%(10**num_digits))\n            y=y%(10**num_digits)\n    return (x,y)", "def fibfusc(n, num_digits=None):\n    if num_digits: num_digits = 10 ** num_digits\n    x, y = 1, 0\n    for c in bin(n)[2:]:\n        if c == '1': x, y = -y * (2*x + 3*y), (x + 2*y) * (x + 4*y)\n        else: x, y = (x + y) * (x - y), y * (2*x + 3*y)\n        if num_digits: x, y = x % -num_digits, y % num_digits\n    return x, y", "def fibfusc(n, num_digits=None):\n    if n==0: return (1,0)\n    x,y=0,1\n    trunc=1 if num_digits==None else 10**(num_digits)\n    nbin=bin(n)[3:]\n    for i in nbin:\n        x,y=((x+y)*(x-y),y*(2*x+3*y)) if i=='0' else (-y*(2*x + 3*y),(x + 2*y)*(x + 4*y))\n        if trunc > 1 : x,y=(-(-x % trunc),y % trunc)   \n    \n    return x,y", "def fibfusc(n, num_digits=None):\n    x, y = 1, 0\n    for k in range(len(bin(n)) - 3, - 1, -1):\n        m = n >> k\n        if m & 1:\n            x, y = -y * (2 * x + 3 * y), (x + 2 * y) * (x + 4 * y)\n        else:\n            x, y = (x + y) * (x - y), y * (2 * x + 3 * y)\n        if num_digits:\n            x, y = x % 10 ** num_digits, y % 10 ** num_digits\n    if num_digits and n > 1:\n        x -= 10 ** num_digits\n    return x, y", "def fibfusc(n, num_digits=None):\n    m = 10 ** num_digits if num_digits is not None else None\n    x, y = 1, 0\n    for i in reversed(range(n.bit_length())):\n        if n & 1 << i == 0:\n            x, y = ((x + y) * (x - y), y * (2*x + 3*y))\n        else:\n            x, y = (-y * (2*x + 3*y), (x + 2*y) * (x + 4*y))\n        if m is not None:\n            x %= m\n            y %= m\n    if m is not None and n >= 2:\n        x -= m\n    return x, y", "def fibfusc(n, num_digits=None):\n    arr=[]\n    (x,y)=(0,1)\n    \n    if num_digits: MOD=10**num_digits  \n    if n==0: return (1,0)\n    \n    while n>1:\n        arr.append(n)\n        n//=2\n    arr=list(reversed(arr))\n    \n    for i in arr:\n        if i%2==0: (x,y)=(((x+y)*(x-y),y*(2*x+3*y)))\n        else: (x,y)=((-y*(2*x+3*y),(x+2*y)*(x+4*y)))\n        if num_digits: (x,y)=(x%MOD,y%MOD)\n        \n    if arr and num_digits: x = -MOD+(x%MOD)\n    return (x,y)"]