["class Solution:\n    def minAddToMakeValid(self, S: str) -> int:\n        if not S:\n            return 0\n        \n        stack = []\n        \n        add = 0\n        for c in S:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    add += 1\n        \n        add += len(stack)\n        \n        return add", "class Solution:\n    def minAddToMakeValid(self, S: str) -> int:\n        res,need=0,0\n        for i in range(len(S)):\n            if S[i]=='(':\n                need+=1\n            if S[i]==')':\n                need-=1\n                if need==-1:\n                    need=0\n                    res+=1\n        return res+need\n", "class Solution:\n    def minAddToMakeValid(self, S: str) -> int:\n        if not S:\n            return 0\n        N = len(S)\n        open_brackets = [0]*N\n        close_brackets = [0]*N\n        \n        ans = 0\n        for i, c in enumerate(S):\n            if i>0:\n                open_brackets[i] = open_brackets[i-1]\n                close_brackets[i] = close_brackets[i-1]\n            if c == '(':\n                open_brackets[i] += 1\n            elif c == ')':\n                close_brackets[i] += 1\n            \n            if close_brackets[i] > open_brackets[i]:\n                diff = close_brackets[i]-open_brackets[i]\n                ans += diff\n                open_brackets[i] += diff\n                \n        return ans+open_brackets[-1]-close_brackets[-1]\n"]