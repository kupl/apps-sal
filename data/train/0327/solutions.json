["class Solution:\n     def lengthOfLongestSubstring(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         L, res, last = -1, 0, {}\n         for R, char in enumerate(s):\n             if char in last and last[char] > L:\n                 L = last[char]\n             elif R-L > res:\n                 res = R-L\n             last[char] = R\n         return res", "class Solution:\n     def lengthOfLongestSubstring(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         helper_dict = {}\n         longest_start = 0\n         longest_end = -1\n         current_start = 0\n         for char_index, char in enumerate(s):\n             if char not in helper_dict or helper_dict[char] < current_start:\n                 helper_dict[char] = char_index\n             else:\n                 current_start = helper_dict[char] + 1\n                 helper_dict[char] = char_index\n             if char_index - current_start > longest_end - longest_start:\n                 longest_start = current_start\n                 longest_end = char_index\n         return longest_end - longest_start + 1\n         \n", "class Solution:\n     def lengthOfLongestSubstring(self, s):\n         char_dict = {}\n         longest_run = 0\n         current_run = 0\n         distance = 2\n         \n         for i,char in enumerate(s):\n             if char in char_dict:\n                 distance = i-char_dict[char]\n                 if distance <= current_run:\n                     current_run = distance\n                 else:\n                     current_run += 1\n             else:\n                 current_run += 1\n             \n             char_dict[char]=i\n             if current_run > longest_run:\n                 longest_run = current_run\n         return longest_run\n", "class Solution:\n     def lengthOfLongestSubstring(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         dic = {}\n         start = max_len = 0\n         for i, c in enumerate(s):\n             if c in dic and start <= dic[c]:\n                 start = dic[c]+1\n             else:\n                 max_len = max(max_len, i-start+1)\n             dic[c] = i\n         return max_len\n             \n", "class Solution:\n     def lengthOfLongestSubstring(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         head = 0\n         dic = {}\n         res = 0\n         for i in range(len(s)):\n             if s[i] in dic and dic[s[i]] >= head:\n                 res = max(res, i-head)\n                 head = dic[s[i]]+1\n             dic[s[i]] = i\n         return max(res, len(s)-head)\n", "class Solution:\n     def lengthOfLongestSubstring(self, s):\n         start = 0\n         end = 0\n         seen_set = set()\n         longest_substring = ''\n         while end < len(s):\n             end += 1\n             currentelem = s[end-1]\n             if currentelem not in seen_set:\n                 seen_set.add(currentelem)\n                 if end - start > len(longest_substring):\n                     longest_substring = s[start:end]\n             else:\n                 while start < end - 1:\n                     if s[start] != currentelem:\n                         seen_set.remove(s[start])\n                         start += 1\n                     else:\n                         start += 1\n                         break\n         return len(longest_substring)", "class Solution:\n     def lengthOfLongestSubstring(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n                    \n         record = {};\n         result = 0;\n         start = -1;\n         for i, x in enumerate(s):\n             if x in record:\n                 start = max(start, record[x]);\n                 \n             record[x] = i;\n             result = max(result, i - start);\n             \n         return result;", "class Solution:\n     def lengthOfLongestSubstring(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         idx = i = 0\n         record = set()\n         count = 0\n         maxcount = 0\n         while i < len(s):\n             if s[i] in record:\n                 record.remove(s[idx])\n                 count -= 1\n                 idx += 1\n             else:\n                 record.add(s[i])\n                 count += 1\n                 i += 1\n                 if count > maxcount:\n                     maxcount = count\n                     \n         return maxcount", "class Solution:\n     def lengthOfLongestSubstring(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         result = 0\n         if len(s) == 0:\n             return result\n         \n         hashmap = {}\n         start = 0\n         for i in range(len(s)):\n             if s[i] in hashmap:\n                 start = max(hashmap[s[i]] + 1,start)\n             hashmap[s[i]] = i\n             result = max(result,i-start+1)\n         return result"]