["class Solution(object):\n \tdef parse(self,expression,d,i):\n \t\tcount = 0\n \t\tstart = i\n \t\tif expression[i] == \"(\":\n \t\t\tcount += 1\n \t\t\ti += 1\n \t\t\twhile count != 0:\n \t\t\t\tif expression[i] == \"(\":\n \t\t\t\t\tcount += 1\n \t\t\t\telif expression[i] == \")\":\n \t\t\t\t\tcount -= 1\n \t\t\t\ti += 1\n \t\t\tval = self.evaluate(expression[start:i],d)\n \t\telse:\n \t\t\twhile i < len(expression) and expression[i] != \" \" and expression[i] != \")\":\n \t\t\t\ti += 1\n \t\t\tval = expression[start:i]\n \t\t\tif self.isnumber(val):\n \t\t\t\tval = int(val)\n \t\treturn i,val\n \tdef get_left_right(self,expression,d):\n \t\ti = 0\n \t\tcount = 0\n \t\ti,left = self.parse(expression,d,0)\n \t\tif i == len(expression) or expression[i] == \")\":\n \t\t\treturn left,None,i\n \t\ti += 1\n \t\ti,right = self.parse(expression,d,i)\n \t\treturn left,right,i\n \tdef isnumber(self,s):\n \t\tfor c in s:\n \t\t\tif ord(\"0\") <= ord(c) <= ord(\"9\") or c == \"+\" or c == \"-\":\n \t\t\t\tcontinue\n \t\t\telse:\n \t\t\t\treturn False\n \t\treturn True\n \tdef evaluate(self, expression,d = {}):\n \t\t\"\"\"\n \t\t:type expression: str\n \t\t:rtype: int\n \t\t\"\"\"\n \t\tif self.isnumber(expression):\n \t\t\treturn int(expression)\n \t\tnewd = {}\n \t\tfor key in d:\n \t\t\tnewd[key] = d[key]\n \t\texpression = expression[1:len(expression)-1]\n \t\toper = \"\"\n \t\tif expression[0:3] == \"add\" or expression[:3] == \"let\":\n \t\t\toper = expression[0:3]\n \t\t\texpression = expression[4:]\n \t\telse:\n \t\t\toper = \"mult\"\n \t\t\texpression = expression[5:]\n \t\t\n \t\tif oper == \"mult\" or oper == \"add\":\n \t\t\tleft,right,_ = self.get_left_right(expression,newd)\n \t\t\tif isinstance(left,str):\n \t\t\t\tleft = newd[left]\n \t\t\tif isinstance(right,str):\n \t\t\t\tright = newd[right]\n \t\t\tif oper == \"mult\":\n \t\t\t\treturn left*right\n \t\t\telse:\n \t\t\t\treturn left + right\n \t\ti = 0\n \t\twhile True:\n \t\t\tleft,right,i = self.get_left_right(expression,newd)\n \t\t\texpression = expression[i+1:]\n \t\t\tif right == None:\n \t\t\t\tif isinstance(left,str):\n \t\t\t\t\treturn newd[left]\n \t\t\t\treturn left\n \t\t\tif isinstance(right,str):\n \t\t\t\tright = newd[right]\n \t\t\tnewd[left] = right\n \t\t\t\n \t\t\t\n \t\t\t\n # s = Solution()\n # print(s.evaluate(\"(let x 2 (mult x (let x 3 y 4 (add x y))))\"))\n"]