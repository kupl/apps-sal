["from collections import Counter\ntry:\n for _ in range(int(input())):\n  n=int(input())\n  s=input()\n  d1=dict(Counter(s))\n  \n  u,d,r,l=0,0,0,0\n  if 'U' in d1:\n   u=d1['U']\n  else:\n   u=0\n  if 'D' in d1:\n   d=d1['D']\n  else:\n   d=0\n  if 'R' in d1:\n   r=d1['R']\n  else:\n   r=0\n  if 'L' in d1:\n   l=d1['L']\n  else:\n   l=0\n  x=0\n  y=0\n  if l==r:\n   x=0\n  elif l>r:\n   x=-(l-r)\n  elif r>l:\n   x=r-l\n  if u==d:\n   y=0\n  elif d>u:\n   y=-(d-u)\n  elif u>d:\n   y=u-d\n  #  print(x,y)\n  if x==0 and y==0:\n   print(n)\n   continue\n  \n  print(n-(abs(x)+abs(y)))\nexcept:\n pass\n", "# cook your dish here\nfor _ in range(int(input())):\n n=int(input())\n s=input()\n x=0\n y=0\n rm=0\n x+=s.count(\"R\")-s.count(\"L\")\n y+=s.count(\"U\")-s.count(\"D\")\n if y<=0:\n  rm+=s.count(\"U\")+s.count(\"D\")+y\n else:\n  rm+=s.count('U')+s.count(\"D\")-y\n if x<=0:\n  rm+=s.count(\"L\")+s.count(\"R\")+x\n else:\n  rm+=s.count('L')+s.count(\"R\")-x\n print(rm) \n", "for t in range(int(input())):\n n = int(input())\n s = str(input())\n l = abs(s.count('U') - s.count('D')) + abs(s.count('R') - s.count('L'))\n print(n-l)", "# cook your dish here\n# https://www.codechef.com/CSEP2020/problems/TOBY\nfrom collections import Counter\nfor _ in range(int(input())):\n n = int(input())\n s = input()\n counter = Counter(s)\n print((2*(max(counter['U'], counter['D'])-abs(counter['U']-counter['D'])\n   + max(counter['R'], counter['L'])-abs(counter['R']-counter['L']))))\n", "for _ in range(int(input())):\n n = int(input())\n s = list(str(input()))\n c1 = abs(s.count('U') - s.count('D')) + abs(s.count('R') - s.count('L'))\n print(n-c1)", "for u in range(int(input())):\n n=int(input())\n s=input()\n r=min(s.count('U'),s.count('D'))*2+min(s.count('L'),s.count('R'))*2\n print(r)\n", "from collections import Counter\n\nx = int(input())\nfor i in range(0,x):\n len = int(input())\n string = str(input())\n dict = Counter(string)\n Ucount,Dcount,Lcount,Rcount = dict['U'],dict['D'],dict['L'],dict['R']\n ans = 0 \n if Ucount>0:\n  if Dcount>0:\n   y = abs(Ucount-Dcount)\n   ans += Ucount+Dcount - y\n if Lcount>0:\n  if Rcount>0:\n   y = abs(Rcount-Lcount)\n   ans += Rcount + Lcount - y \n print(ans)\n\n\n\n\n", "t=int(input())\nwhile t>0:\n t-=1\n n=int(input())\n s=list(input())\n print(n-(abs(s.count(\"L\")-s.count(\"R\"))+abs(s.count(\"U\")-s.count(\"D\"))))\n", "for _ in range(int(input())):\n n=int(input())\n s=input()\n uc=s.count('U')\n dc=s.count('D')\n lc=s.count('L')\n rc=s.count('R')\n ans=\"\"\n if uc>dc:\n  ans+=\"U\"*(uc-dc)\n elif uc<dc:\n  ans+=\"D\"*(dc-uc)\n if lc>rc:\n  ans+=\"L\"*(lc-rc)\n elif lc<rc:\n  ans+=\"R\"*(rc-lc)\n print(n-len(ans))\n\n\n\n", "t=int(input())\nfor _ in range(t):\n n=int(input())\n s=input()\n c=abs(s.count(\"L\")-s.count(\"R\"))+abs(s.count(\"U\")-s.count(\"D\"))\n \n print(n-c) ", "for t in range(int(input())):\n n = int(input())\n l = list(input())\n total = min(l.count('U'),l.count('D')) + min(l.count('L'),l.count('R'))\n print(2*total)\n \n\n\n\n\n \n\n  \n\n\n", "t=int(input())\nfor _ in range(t):\n n=int(input())\n s=input()\n c=abs(s.count(\"L\")-s.count(\"R\"))+abs(s.count(\"U\")-s.count(\"D\"))\n \n print(n-c) ", "# cook your dish here\nfrom collections import Counter\nfor i in range(int(input())):\n n=int(input())\n s=input()\n res = Counter(s) \n \n re=abs(res['D']-res['U'])+abs(res['L']-res['R'])\n print(n-re)", "from collections import Counter\nt = 0\ntry:\n t = int(input())\nexcept:\n pass\nfor _ in range(t):\n n = int(input())\n s = input()\n s = s[:n]\n c = Counter(s)\n sums = 0\n sums += min(c['D'],c['U'])\n sums += min(c['L'],c['R'])\n print(sums*2)", "# cook your dish here\nt=int(input())\nfor i in range(t):\n\n n=int(input())\n s=input()\n l=s.count(\"L\")\n r=s.count(\"R\")\n u=s.count(\"U\")\n d=s.count(\"D\")\n k=abs(l-r)\n p=abs(u-d)\n print(n-(k+p))\n", "# cook your dish here\nimport sys\nimport math\nfrom collections import Counter\ndef inputt():\n return sys.stdin.readline().strip()\ndef printt(n):\n sys.stdout.write(str(n)+'\\n')\ndef listt():\n return [int(i) for i in inputt().split()]\ndef gcd(a,b): \n return math.gcd(a,b) \n \ndef lcm(a,b): \n return (a*b) / gcd(a,b) \nt=int(inputt())\n\ndef SieveOfEratosthenes(n):  \n s=0\n prime = [True for i in range(n + 1)] \n p = 2\n while (p * p <= n): \n  \n  \n  if (prime[p] == True): \n   \n   for i in range(p * 2, n + 1, p): \n    prime[i] = False\n  p += 1\n prime[0]= False\n prime[1]= False\n for p in range(n + 1): \n  if prime[p]: \n   s+=p\n l=list(str(s))\n print(l[-1]) \n\n\n\nfor _ in range(t):\n n=int(inputt())\n s=inputt()\n dic=Counter(s)\n c=0\n c+=abs(dic['U']-dic['D'])+abs(dic['L']-dic['R'])\n printt(n-c)", "from collections import Counter\n\nfor _ in range(int(input())):\n n = int(input())\n s = input()\n c = Counter(s)\n\n print(min(c['L'], c['R']) * 2 + min(c['U'], c['D']) * 2)\n"]