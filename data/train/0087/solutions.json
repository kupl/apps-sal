["import sys\n\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep='\\n')\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\ndef solve():\n    m, d, w = nm()\n    g = w // gcd(d-1, w)\n    c = min(m, d)\n    v = c // g\n    ans = v * (v - 1) // 2 * g\n    ans += (c - g * v) * v\n    print(ans)\n    return\n\n\n# solve()\n\nT = ni()\nfor _ in range(T):\n    solve()\n", "from  math import gcd\n\nfor _ in range(int(input())):\n    m,d,w=list(map(int,input().split()))\n    M=min(m,d)\n    W=w//gcd(w,d-1)\n    Q=M//W\n    R=M%W\n    ans=(W-R)*(Q*(Q-1)//2)+R*(Q*(Q+1)//2)\n    print(ans)\n", "import sys\nimport math\n\nT = int(sys.stdin.readline().strip())\nfor t in range (0, T):\n    m, d, w = list(map(int, sys.stdin.readline().strip().split()))\n    w = w // math.gcd(w, d-1)\n    d = min(d, m)\n    m = d\n    ans = -d\n    ans = ans + (m // w) * d\n    m = m - (m // w) * w\n    ans = ans + (d // w) * m\n    d = d - (d // w) * w\n    ans = ans + d\n    print(ans//2)", "import sys\nimport heapq, functools, collections\nimport math, random\nfrom collections import Counter, defaultdict\n\n# available on Google, not available on Codeforces\n# import numpy as np\n# import scipy\n\n\ndef solve(m,d,w):  # fix inputs here\n    console(\"----- solving ------\")\n\n    a = int(w/math.gcd(w,1-d))\n    b = min(m,d)\n\n    console(a,b)\n\n    return ((1 + b//a)*(b + b%a))//2 - b\n\n\ndef console(*args):  # the judge will not read these print statement\n    print('\\033[36m', *args, '\\033[0m', file=sys.stderr)\n    return\n\n# fast read all\n# sys.stdin.readlines()\n\nfor case_num in range(int(input())):\n    # read line as a string\n    # strr = input()\n\n    # read line as an integer\n    # k = int(input())\n    \n    # read one line and parse each word as a string\n    # lst = input().split()\n\n    # read one line and parse each word as an integer\n    m,d,w = list(map(int,input().split()))\n\n    # read matrix and parse as integers (after reading read nrows)\n    # lst = list(map(int,input().split()))\n    # nrows = lst[0]  # index containing information, please change\n    # grid = []\n    # for _ in range(nrows):\n    #     grid.append(list(map(int,input().split())))\n\n    res = solve(m,d,w)  # please change\n    \n    # Google - case number required\n    # print(\"Case #{}: {}\".format(case_num+1, res))\n\n    # Codeforces - no case number required\n    print(res)\n", "from math import gcd\n\ndef sum_of_floor(n, p, q):\n    t = gcd(p, q)\n    p, q = p // t, q // t\n    s = 0\n    z = 1\n    while q > 0 and n > 0:\n        t = p // q\n        s = s + z * t * n * (n + 1) // 2\n        p = p - q * t\n        t = n // q\n        s = s + z * p * t * (n + 1) - z * t * (p * q * t + p + q - 1) // 2\n        n = n - q * t\n        t = (n * p) // q\n        s = s + z * t * n\n        n = t\n        p, q = q, p\n        z = -z\n    return s\n\ndef solve():\n    m, d, w = map(int, input().split())\n    if d == 1:\n        print(0)\n        return\n    u = gcd(d - 1, w)\n    res = sum_of_floor(min(m, d) - 1, 1, w // u)\n    print(res)\n\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import gcd\n\nfor _ in range(int(input())):\n    m, d, w = list(map(int, input().split()))\n    if d == 1:\n        print(0)\n    else:\n        w1 = w // gcd(w, d - 1)\n        md = min(m, d)\n        # sum(max(md - w1 * n, 0) for n in 1..inf)\n        # sum(md - w1 * n for n in 1..md // w1)\n        mdd_w1 = md // w1\n        print((md * 2 - w1 - mdd_w1 * w1) * mdd_w1 // 2)\n"]