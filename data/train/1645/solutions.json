["def one_square(n):\n    return round(n ** .5) ** 2 == n\n\ndef two_squares(n):\n    while n % 2 == 0: n //= 2\n    p = 3\n    while p * p <= n:\n        while n % (p * p) == 0:\n            n //= p * p\n        while n % p == 0:\n            if p % 4 == 3: return False\n            n //= p\n        p += 2\n    return n % 4 == 1\n\ndef three_squares(n):\n    while n % 4 == 0: n //= 4\n    return n % 8 != 7\n\ndef sum_of_squares(n):\n    if one_square(n): return 1\n    if two_squares(n): return 2\n    if three_squares(n): return 3\n    return 4", "sq=lambda n: (n**0.5)%1==0\n\ndef sum_of_squares(n):\n    if sq(n): return 1\n    while not n&3: n>>=2\n    if n&7==7: return 4\n    for i in range(int(n**0.5)+1):\n        if sq(n-i*i): return 2\n    return 3", "from math import sqrt\n\n\ndef sum_of_squares(n):\n    n_sqrt = int(sqrt(n))\n\n    if n == n_sqrt * n_sqrt:\n        return 1\n\n    div, mod = divmod(n, 4)\n    while mod == 0:\n        div, mod = divmod(div, 4)\n    if (div * 4 + mod) % 8 == 7:\n        return 4\n\n    for i in range(1, n_sqrt + 1):\n        temp = n - i * i\n        temp_sqrt = int(sqrt(temp))\n        if temp == temp_sqrt * temp_sqrt:\n            return 2\n\n    return 3", "from collections import Counter\nsum_of_squares=lambda n:1 if (n**.5).is_integer() else 2 if all(not j&1 for i, j in Counter(two(n)).items() if i%4==3) else 4 if four(n) else 3\n\ndef two(n):\n        j, li = 2, []\n        while j * j <= n:\n            if n % j: j+=1 ; continue \n            li.append(j) ; n //= j \n        return li + [[], [n]][n > 0]\ndef four(x):\n        while x % 4 == 0 : x //= 4\n        return 8 * (x // 8) + 7 == x ", "import math\ndef sum_of_squares(n):\n    final=[]\n    de=0\n    \n    if str(math.sqrt(n))[::-1].find('.')==1:\n        return 1\n        \n    else:\n        for i in range(int(n**.5)):\n            ans=[]\n            de= n-int(de**.5-i)**2\n            ans.append(int(de**.5))\n            while de>0:\n                de-=int(de**.5)**2\n                ans.append(int(de**.5))\n            final.append(len(ans))    \n        return min(final)", "def sum_of_squares(n):\n        import math\n        while n % 4 == 0: n = n // 4\n        if n % 8 == 7: return 4\n        if int(math.sqrt(n)) ** 2 == n: return 1\n        i = 1\n        while i*i <= n:\n            j = math.sqrt(n - i*i)\n            if int(j) == j: return 2\n            i += 1\n        return 3\n", "#explained at: http://www.zrzahid.com/least-number-of-perfect-squares-that-sums-to-n/\ndef sum_of_squares(n):\n    def is_sq(n): return int(n**0.5) * int(n**0.5) == n\n    if is_sq(n): return 1\n    while n & 3 == 0: n >>= 2\n    if n & 7 == 7: return 4\n    for i in range(1,int(n**0.5)):\n        if is_sq(n-i*i): return 2\n    return 3", "def sum_of_squares(n):\n    def divide_count(p):\n        nonlocal n, s1, s2\n        while not n % p ** 2: n //= p*p\n        if not n % p:\n            s1 &= False\n            s2 &= p & 3 < 3\n            n //= p\n\n    s1 = s2 = True\n    divide_count(2)\n    s3 = n << 1-s1 & 7 < 7\n    divide_count(3)\n    x, wheel = 5, 2\n    while x*x <= n:\n        divide_count(x)\n        x, wheel = x + wheel, 6 - wheel\n    if n > 1: divide_count(n)\n    return 4 - s3 - s2 - s1", "def sum_of_squares(n):\n    # three-square theorem\n    if n**0.5 == int(n**0.5):\n        return 1\n    while n % 4 == 0:\n        n >>= 2\n    if (n -7) % 8 ==0:\n        return 4\n    for s in range(1,int(n**0.5)+1):\n        if (n - s*s)**0.5 == int((n - s*s)**0.5):\n            return 2\n    return 3", "import math\n\ndef is_perfect_sq(n):\n    sr = math.sqrt(n)\n    low_perfect = math.floor(sr)\n    check = sr - low_perfect == 0\n    #return check, low_perfect**2\n    return check\n\ndef sum_of_squares(n):\n    \"\"\" \n    Based on \n    1. Any number can be represented as the sum of 4 perfect squares\n    2. Lagrange's Four Square theorem\n    Result is 4 iff n can be written in the form 4^k*(8*m+7)\n    \"\"\"\n    # print(\"Testing value of {}\".format(n))\n    if is_perfect_sq(n):\n        return 1\n    \n    # Application of Lagrange theorem\n    while n % 4 == 0:\n        n >>= 2\n    if n % 8 == 7:\n        return 4\n        \n    # Check if 2\n    for a in range(math.ceil(math.sqrt(n))):\n        b = n - a * a\n        if is_perfect_sq(b):\n            return 2\n\n    return 3\n\n    \n    \n                   \n"]