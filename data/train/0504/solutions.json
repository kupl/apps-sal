["class Solution:\n    def reverseParentheses(self, s: str) -> str:\n        \n        \n        stack = []\n        curr = ''\n        for c in s:\n            if c=='(':\n                stack.append(curr)\n                curr = ''\n                stack.append('(')\n            elif c==')':\n                stack.append(curr)\n                curr = ''\n                aux = ''\n                while stack and stack[-1]!='(':\n                    aux=stack.pop()+aux\n                stack.pop()\n                stack.append(aux[::-1])\n            else:\n                curr+=c\n        if curr:\n            stack.append(curr)\n        return ''.join(stack)", "class Solution:\n    def reverseParentheses(self, s: str) -> str:\n        stack = []\n        for i in s:\n            if i != ')':\n                stack.append(i)\n            else:\n                temp = []\n                while stack and stack[-1] != '(':\n                    temp.append(stack.pop())\n                if stack[-1] == '(':\n                    stack.pop()\n                for k in temp:\n                    stack.append(k)\n        return ''.join(stack)\n", "class Solution:\n    # https://leetcode.com/problems/reverse-substrings-between-each-pair-of-parentheses/discuss/383670/JavaC++Python-Why-not-O(N)\n    def reverseParentheses(self, s: str) -> str:\n        stack, pairs = [], {}\n        for i, c in enumerate(s):\n            if c == '(':\n                stack.append(i)\n            elif c == ')':\n                j = stack.pop()\n                pairs[i], pairs[j] = j, i\n        i, d, res = 0, 1, []\n        while i < len(s):\n            if s[i] in '()':\n                i = pairs[i]\n                d = -d\n            else:\n                res.append(s[i])\n            i += d\n        return ''.join(res)\n    \n    # O(n^2)\n    def reverseParentheses1(self, s: str) -> str:\n        stack = []\n        for c in s:\n            if c == ')':\n                chars = []\n                while stack and stack[-1] != '(':\n                    chars.append(stack.pop())\n                stack.pop()\n                for ch in chars:\n                    stack.append(ch)\n            else:\n                stack.append(c)\n        # e.g. \\\"a(bcdefghijkl(mno)p)q\\\"\n        return ''.join(stack)\n", "class Solution:\n    def reverseParentheses(self, s: str) -> str:\n        opened = []\n        pair = {}\n        for i, c in enumerate(s):\n            if c == '(':\n                opened.append(i)\n            if c == ')':\n                j = opened.pop()\n                pair[i], pair[j] = j, i\n        res = []\n        i, d = 0, 1\n        while i < len(s):\n            if s[i] in '()':\n                i = pair[i]\n                d = -d\n            else:\n                res.append(s[i])\n            i += d\n        return ''.join(res)\n", "class Solution:\n    def reverseParentheses(self, s: str) -> str:\n        stack = ['']\n        for c in s:\n            if c == '(':\n                stack.append('')\n            elif c == ')':\n                word = stack.pop()[::-1]\n                stack[-1] += word\n            else:\n                stack[-1] += c\n        return ''.join(stack)", "class Solution:\n    def reverseParentheses(self, s: str) -> str:\n        stack = []\n        for i in s:\n            if i == ')':\n                temp = []\n                while stack and stack[-1] != '(':\n                    temp.append(stack.pop())\n                if stack:\n                    stack.pop()\n                for k in temp:\n                    stack.append(k)\n            else:\n                 stack.append(i)\n        return ''.join(stack)\n", "class Solution:\n    def reverseParentheses(self, s: str) -> str:\n        stack = ['']\n        \n        for char in s:\n            if char == '(':\n                stack.append('')\n            elif char == ')':\n                temp = stack.pop()[::-1]\n                stack[-1] += temp\n            else:\n                stack[-1] += char\n        \n        return ''.join(stack)"]