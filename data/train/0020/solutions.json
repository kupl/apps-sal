["q = int(input())\nfor _ in range(q):\n    n, m = list(map(int, input().split()))\n    info = [list(map(int, input().split())) for i in range(n)]\n    info = sorted(info)\n    now =(m, m)\n    time = 0\n    flag = True\n    for i in range(n):\n        t, l, h = info[i]\n        l_now = now[0] - (t - time)\n        h_now = now[1] + (t - time)\n        time = t\n        if h < l_now or h_now < l:\n            flag = False\n        else:\n            l_now = max(l_now, l)\n            h_now = min(h_now, h)\n            now = (l_now, h_now)\n    if flag:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "for _ in range(int(input())):\n\tn,m=map(int,input().split())\n\tlm=hm=m\n\tpt=0\n\tans=\"YES\"\n\tfor i in range(n):\n\t\tt,l,h=map(int,input().split())\n\t\tlm-=(t-pt)\n\t\thm+=(t-pt)\n\t\tpt=t\n\t\thm=min(h,hm)\n\t\tlm=max(l,lm)\n\t\tif hm<lm:\n\t\t\tans=\"NO\"\n\tprint(ans)", "for _ in range(int(input())):\n    n, m = list(map(int, input().split()))\n    ar = [[0, -10 ** 9, 10 ** 9]]\n    for ______ in range(n):\n        ar.append(list(map(int, input().split())))\n    ar.sort()\n    left, right = m, m\n    ans = 'YES'\n    for i in range(1, n + 1):\n        left -= ar[i][0] - ar[i - 1][0]\n        right += ar[i][0] - ar[i - 1][0]\n        left, right = [max(left, ar[i][1]), min(right, ar[i][2])]\n        if right - left < 0:\n            ans = 'NO'\n    print(ans)", "import sys\ninput = sys.stdin.readline\n\nT = int(input())\nfor _ in range(T):\n    n, m = map(int, input().split())\n    CUS = [tuple(map(int, input().split())) for _ in range(n)]\n    CUS.sort()\n    L = m\n    R = m\n    prv = 0\n    ans = True\n    for t, l, r in CUS:\n        d = t - prv\n        L -= d\n        R += d\n        if R < l or r < L:\n            ans = False\n            break\n        else:\n            R = min(R, r)\n            L = max(L, l)\n            prv = t\n    if ans:\n        print(\"YES\")\n    else:\n        print(\"NO\")", "def solve():\n    n, m = list(map(int, input().split()))\n    cust = []\n    for ___ in range(n):\n        t, l, h = list(map(int, input().split()))\n        cust.append((t, l, h))\n\n    cust.sort()\n\n    lastT = 0\n    lastMaxT = m\n    lastMinT = m\n\n    for t, l, h in cust:\n        nextMax = lastMaxT + t - lastT\n        nextMin = lastMinT - t + lastT\n\n        if nextMax < l or nextMin > h:\n            print(\"NO\")\n            return\n\n        lastMaxT = min(h, nextMax)\n        lastMinT = max(l, nextMin)\n        lastT = t\n    print(\"YES\")\n\n\nq = int(input())\nfor __ in range(q):\n    solve()\n", "for t in range(int(input())):\n    n, m = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    t0 = 0\n    mi, ma = m, m\n    f = True\n    for t, l, h in a:\n        delta = t - t0\n        t0 = t\n        mi -= delta\n        ma += delta\n        if mi <= l and ma >= h:\n            mi = l\n            ma = h\n        elif l <= ma <= h and mi <= l:\n            mi = l\n            ma = ma\n        elif l <= ma <= h and l <= mi <= h:\n            mi = mi\n            ma = ma\n        elif ma >= h and l <= mi <= h:\n            ma = h\n            mi = mi\n        else:\n            f = False\n    if f:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "T = int(input())\n\nfor _ in range(T):\n    n, m = list(map(int, input().split()))\n    time, mx, mn = 0, m, m\n    flag = True\n\n    for __ in range(n):\n        x, y, z = list(map(int, input().split()))\n\n        if not flag:\n            continue\n\n        mx += x - time\n        mn -= x - time\n\n        if mx < y or mn > z:\n            flag = False\n\n        if mx > z:\n            mx = z\n\n        if mn < y:\n            mn = y\n\n        time = x\n\n    print('YES' if flag else 'NO')\n", "def getIntersect(a, b, c, d):\n    return (max(a, c), min(b, d))\n\n\ndef solve(N, M, A):\n    tHi = M\n    tLo = M\n    A.sort()\n    lastT = 0\n    for t, l, h in A:\n        deltaT = t - lastT\n        tLo -= deltaT\n        tHi += deltaT\n        tLo, tHi = getIntersect(tLo, tHi, l, h)\n        if tLo > tHi:\n            return \"NO\"\n        lastT = t\n    return \"YES\"\n\n\ndef __starting_point():\n    T, = list(map(int, input().split()))\n    for t in range(T):\n        N, M = list(map(int, input().split()))\n        A = []\n        for i in range(N):\n            tlh = [int(x) for x in input().split()]\n            A.append(tlh)\n\n        ans = solve(N, M, A)\n        print(ans)\n\n__starting_point()", "Q = int(input())\n\nfor _ in range(Q):\n    n, m = map(int, input().split())\n    lt, mn, mx = 0, m, m\n    ok = True\n    for i in range(n):\n        if ok:\n            t, l, h = map(int, input().split())\n            mn = max(mn - (t - lt), l)\n            mx = min(mx + (t - lt), h)\n            lt = t\n            if mn>mx:\n                ok=False\n\n        else:\n            input()\n    print('YES' if ok else 'NO')", "q = int(input())\nfor rewrew in range(q):\n\tn, t0 = map(int,input().split())\n\tt = []\n\tl = []\n\th = []\n\tfor i in range(n):\n\t\ttt,ll,hh = map(int,input().split())\n\t\tt.append(tt)\n\t\tl.append(ll)\n\t\th.append(hh)\n\tpossib = [[0,0]]*n\n\tdasie = True\n\tpossib[0] = [-t[0]+t0,t[0]+t0]\n\tfor i in range(n):\n\t\tif l[i]>possib[i][1] or h[i] < possib[i][0]:\n\t\t\tdasie = False\n\t\t\tbreak\n\t\telse:\n\t\t\tpossib[i][0] = max(possib[i][0],l[i])\n\t\t\tpossib[i][1] = min(possib[i][1], h[i])\n\t\tif i < n-1:\n\t\t\tpossib[i+1][0] = possib[i][0] - (t[i+1]-t[i])\n\t\t\tpossib[i+1][1] = possib[i][1] + (t[i+1]-t[i])\n\tif dasie:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")", "from collections import defaultdict\n\n\ndef problemA():\n    t = int(input())\n    for _ in range(t):\n        x, y, a, b = list(map(int, input().split()))\n\n        if (y - x) % (a + b) == 0:\n            print((y - x) // (a + b))\n        else:\n            print(-1)\n\n\ndef problemB():\n    n, m = list(map(int, input().split()))\n    ss = set()\n    res = []\n\n    for i in range(n):\n        s = input()\n        rs = s[::-1]\n        if rs in ss:\n            res.append(s)\n            ss.remove(rs)\n        else:\n            ss.add(s)\n\n    long = ''\n    for s in ss:\n        if s == s[::-1] and len(s) > len(int):\n            long = s\n\n    res = ''.join(res)\n    res = res + int + res[::-1]\n    print(len(res))\n    print(res)\n\n\ndef problemC():\n    inf = 2 * 10 ** 9\n\n    q = int(input())\n    for _ in range(q):\n        n, m = list(map(int, input().split()))\n\n        a = defaultdict(lambda: (-inf, inf))\n        for _ in range(n):\n            t, l, h = list(map(int, input().split()))\n            pl, ph = a[t]\n            a[t] = (max(l, pl), min(h, ph))\n\n        pt = 0\n        pl, ph = m, m\n        res = 'YES'\n        for t in sorted(a.keys()):\n            l, h = a[t]\n\n            delta = t - pt\n            cl = pl - delta\n            ch = ph + delta\n\n            pl = max(l, cl)\n            ph = min(h, ch)\n\n            if pl > ph:\n                res = 'NO'\n                break\n\n            pt = t\n\n        print(res)\n\n\ndef problemG():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n\n        res = 0\n        print(a)\n\n\ndef __starting_point():\n    problemC()\n\n__starting_point()", "q = int(input())\nfor _ in range(q):\n    n,m = list(map(int, input().split()))\n    customers = [[int(x) for x in input().split()] for _ in range(n)]\n\n    now_l, now_h = m, m\n    now = 0\n    for t,l,h in customers:\n        dt = t - now\n\n        # in area?\n        next_h = min(now_h + dt, h)\n        next_l = max(now_l - dt, l)\n        if not next_l <= next_h:\n            ok = False\n            break\n\n        now = t\n        now_l, now_h = next_l, next_h\n    else:\n        ok = True\n\n    print(\"YES\" if ok else \"NO\")\n", "import sys\ninput = sys.stdin.readline\n\nQ = int(input())\nQuery = []\nfor _ in range(Q):\n    N, M = map(int, input().split())\n    TLR = [list(map(int, input().split())) for _ in range(N)]\n    Query.append((N, M, TLR))\n\n\nfor N, M, TLR in Query:\n    TLR.sort()\n    large = M\n    small = M\n    pret = 0\n    ok = True\n    for t, l, r in TLR:\n        delta = t - pret\n        large += delta\n        small -= delta\n\n        if large < l or r < small:\n            ok = False\n            break\n        large = min(large, r)\n        small = max(small, l)\n\n        pret = t\n    \n    print(\"YES\" if ok else \"NO\")"]