["DIR = {\"N\": (0, 1), \"S\": (0, -1), \"W\": (-1, 0), \"E\": (1, 0)}\n\nfor t in range(int(input())):\n   path = input()\n   tracks = set()\n   x, y = 0, 0\n   time = 0\n   for char in path:\n      x1 = x + DIR[char][0]\n      y1 = y + DIR[char][1]\n      if (x, y, x1, y1) in tracks or (x1, y1, x, y) in tracks:\n         time += 1\n      else:\n         time += 5\n         tracks.add((x, y, x1, y1))\n      x, y = x1, y1\n   print(time)\n", "import sys\nINF = 10**20\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nfrom math import gcd\nfrom math import ceil\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n\nt, = I()\nwhile t:\n    t -= 1\n    s = input()\n    x, y = 0, 0\n    d = {'N': [0, 1], 'S': [0, -1], 'E': [1, 0], 'W': [-1, 0]}\n    ans = 0\n    v = dd(int)\n    for i in s:\n        a, b = x + d[i][0], y + d[i][1]\n        if (x, y, a, b) in v:\n            ans += 1\n        else:\n            ans += 5\n        v[(x, y, a, b)] = v[(a, b, x, y)] = 1\n        x, y = a, b\n    print(ans)", "def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    path = input()\n    pos = (0, 0)\n    ans = 0\n    use = set()\n    d = {'N': (0, 1), 'S': (0, -1), 'W': (-1, 0), 'E': (1, 0)}\n    for c in path:\n        ci, cj = pos\n        di, dj = d[c]\n        ni, nj = ci + di, cj + dj\n        pos = (ni, nj)\n        if ((ci, cj), (ni, nj)) in use:\n            ans += 1\n        else:\n            ans += 5\n            use.add(((ci, cj), (ni, nj)))\n            use.add(((ni, nj), (ci, cj)))\n    print(ans)\n", "t=int(input())\nfor _ in range(t):\n    s=input()\n    aa={}\n    i=0\n    j=0\n    ans=0\n    for k in s:\n        if(k==\"N\"):\n            try:\n                x=aa[((i,j),(i,j-1))]\n                ans+=1\n            except:\n                ans+=5\n                aa[((i,j),(i,j-1))]=1\n            j-=1\n                \n        elif(k==\"E\"):\n            try:\n                x=aa[((i+1,j),(i,j))]\n                ans+=1\n            except:\n                ans+=5\n                aa[((i+1,j),(i,j))]=1\n            i+=1\n        elif(k==\"W\"):\n            try:\n                x=aa[((i,j),(i-1,j))]\n                ans+=1\n            except:\n                ans+=5\n                aa[((i,j),(i-1,j))]=1\n            i-=1\n        else:\n            try:\n                x=aa[((i,j+1),(i,j))]\n                ans+=1\n            except:\n                ans+=5\n                aa[((i,j+1),(i,j))]=1\n            j+=1\n    print(ans)\n    \n            \n        \n         \n    \n", "dir = {\n    'N': (0, 1),\n    'E': (1, 0),\n    'W': (-1, 0),\n    'S': (0, -1),\n}\n\nfor tc in range(int(input())):\n    cur, ans, vis = (0, 0), 0, set()\n    for c in input():\n        nxt = (cur[0] + dir[c][0], cur[1] + dir[c][1])\n\n        if (cur, nxt) in vis:\n            ans += 1\n        else:\n            ans += 5\n            vis.add((cur, nxt))\n            vis.add((nxt, cur))\n        cur = nxt\n\n    print(ans)\n", "t=int(input())\nfor tests in range(t):\n    S=input().strip()\n    ANS=0\n    Already=set()\n    X=0\n    Y=0\n    \n    for s in S:\n        if s==\"N\":\n            if (X,Y,X,Y+1) in Already:\n                ANS+=1\n            else:\n                ANS+=5\n            Already.add((X,Y,X,Y+1))\n            Already.add((X,Y+1,X,Y))\n            Y+=1\n        elif s==\"S\":\n            if (X,Y,X,Y-1) in Already:\n                ANS+=1\n            else:\n                ANS+=5\n            Already.add((X,Y,X,Y-1))\n            Already.add((X,Y-1,X,Y))\n            Y-=1\n        elif s==\"W\":\n            if (X,Y,X-1,Y) in Already:\n                ANS+=1\n            else:\n                ANS+=5\n            Already.add((X,Y,X-1,Y))\n            Already.add((X-1,Y,X,Y))\n            X-=1\n        else:\n            if (X,Y,X+1,Y) in Already:\n                ANS+=1\n            else:\n                ANS+=5\n            Already.add((X,Y,X+1,Y))\n            Already.add((X+1,Y,X,Y))\n            X+=1\n\n    print(ANS)\n        \n", "for _ in range(int(input())):\n    s = input()\n    se = set()\n    total = 0\n    curr = [0, 0]\n    for e in s:\n        seg = ()\n        if e == \"E\":\n            seg = (curr[0], curr[1], 0)\n            curr[0] += 1\n        elif e == \"N\":\n            seg = (curr[0], curr[1], 1)\n            curr[1] += 1\n        elif e == \"W\":\n            seg = (curr[0]-1, curr[1], 0)\n            curr[0] -= 1\n        elif e == \"S\":\n            seg = (curr[0], curr[1]-1, 1)\n            curr[1] -= 1\n        \n        if seg in se:\n            total += 1\n        else:\n            total += 5\n            se.add(seg)\n    print(total)", "def list_int(): return list(map(int, input().split()))\ndef int_in(): return int(input())\ndef map_in(): return list(map(int, input().split()))\ndef list_in(): return input().split()\n\nt=int_in()\nfor _ in range(t):\n    v=set()\n    s=input()\n    x=0\n    y=0\n    c=0\n    for i in s:\n        #print(v, x, y, i)\n        if i=='N':\n            if (x,y,x+1,y) in v:\n                c+=1\n            elif (x+1,y, x,y) in v:\n                c+=1\n            else:\n                c+=5\n            v.add((x,y,x+1,y))\n            x+=1\n        elif i=='S':\n            if (x,y,x-1,y) in v:\n                c+=1\n            elif (x-1,y, x,y) in v:\n                c+=1\n            else:\n                c+=5\n            v.add((x,y,x-1,y))\n            x-=1\n        elif i=='W':\n            if (x,y,x,y+1) in v:\n                c+=1\n            elif (x, y+1, x,y) in v:\n                c+=1\n            else:\n                c+=5\n            v.add((x,y,x,y+1))\n            y+=1\n        else:\n            if (x,y,x,y-1) in v:\n                c+=1\n            elif (x, y-1, x,y) in v:\n                c+=1\n            else:\n                c+=5\n            v.add((x,y,x,y-1))\n            y-=1\n    print(c)\n", "import sys\nimport heapq as hq\n\nreadline = sys.stdin.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: list(map(int, readline().split()))\nnl = lambda: list(map(int, readline().split()))\n\n# eps = 10**-7\n\ndef solve():\n    s = ns()\n    d = dict()\n    cnt = 0\n    g = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    cur = (0, 0)\n    d[cur] = ''\n    for x in s:\n        for i in range(4):\n            if x == 'NEWS'[i]:\n                nx = (cur[0] + g[i][0], cur[1] + g[i][1])\n                if nx in d and x in d[cur]:\n                    cnt += 1\n                else:\n                    cnt += 5\n                    if nx not in d:\n                        d[nx] = ''\n                    d[nx] += 'NEWS'[3-i]\n                    d[cur] += x\n                cur = nx\n                break\n    print(cnt)\n\n\n# solve()\n\nT = ni()\nfor _ in range(T):\n    solve()\n", "for __ in range(int(input())):\n\ts=input()\n\tx=0\n\ty=0\n\tans=0\n\td={}\n\tfor i in range(len(s)):\n\t\tif(s[i]=='N'):\n\t\t\tif(d.get((x,y,x,y+1))==None):\n\t\t\t\tans+=5\n\t\t\t\td[(x,y,x,y+1)]=1\n\t\t\t\td[(x,y+1,x,y)]=1\n\t\t\telse:\n\t\t\t\tans+=1\n\t\t\ty=y+1\n\t\telif(s[i]=='S'):\n\t\t\tif(d.get((x,y,x,y-1))==None):\n\t\t\t\tans+=5\n\t\t\t\td[(x,y,x,y-1)]=1\n\t\t\t\td[(x,y-1,x,y)]=1\n\t\t\telse:\n\t\t\t\tans+=1\n\t\t\ty=y-1\n\t\telif(s[i]=='W'):\n\t\t\tif(d.get((x,y,x-1,y))==None):\n\t\t\t\tans+=5\n\t\t\t\td[(x,y,x-1,y)]=1\n\t\t\t\td[(x-1,y,x,y)]=1\n\t\t\telse:\n\t\t\t\tans+=1\n\t\t\tx=x-1\n\t\telse:\n\t\t\tif(d.get((x,y,x+1,y))==None):\n\t\t\t\tans+=5\n\t\t\t\td[(x,y,x+1,y)]=1\n\t\t\t\td[(x+1,y,x,y)]=1\n\t\t\telse:\n\t\t\t\tans+=1\n\t\t\tx=x+1\n\tprint(ans)", "# alpha = \"abcdefghijklmnopqrstuvwxyz\"\n# prime = 1000000007#998244353 \n# INF = 10000\n\n# from sys import stdout\n# from heapq import heappush, heappop\n# from collections import defaultdict\n# from collections import deque \n# import bisect \n\n# from math import sqrt    \n# from math import gcd\n# from math import log2\n\n# with open('input.in','r') as Reader:\n#     with open('output.out','w') as out:\n        # n = int(Reader.readline())\n\n    \n# print(len(arr))\n# print(arr[:10])\n\n\nt = int(input())\nfor test in range(t):\n    # n = int(input())\n    # n, m = list(map(int, input().split()))\n    # n2, m2 = list(map(int, input().split()))\n    s = input()\n    v = set()\n    start = 0\n    ans = 0\n    cur = [0, 0, 0, 0]\n    for i in s:\n        if i==\"N\":\n            cur[2] += 1\n        elif i==\"S\":\n            cur[2] -= 1\n        elif i == \"E\":\n            cur[3] += 1\n        else:\n            cur[3] -= 1\n\n        key1 = str(cur)\n        key2 = str([cur[2],cur[3], cur[0], cur[1]])\n        if key1 in v:\n            ans += 1\n        else:\n            ans += 5\n        \n        v.add(key1)\n        v.add(key2)\n\n        cur[0] = cur[2]\n        cur[1] = cur[3]\n    print(ans)", "def new_pos(pos, step):\n\tif step == \"N\":\n\t\tpos = pos[0], pos[1] + 1\n\telif step == \"S\":\n\t\tpos = pos[0], pos[1] -1\n\telif step == \"W\":\n\t\tpos = pos[0] + 1, pos[1]\n\telse:\n\t\tpos = pos[0] -1, pos[1]\n\treturn pos\n\n\nt = int(input())\nfor _ in range(t):\n\tans = 0\n\ts = input()\n\tused_hor = set()\n\tused_ver = set()\n\n\tpos = (0, 0)\n\tn = len(s)\n\tfor i in range(n):\n\t\tnext_st = new_pos(pos, s[i])\n\t\tway = (min(pos[0], next_st[0]), min(pos[1], next_st[1]))\n\n\t\tif s[i] == \"N\" or s[i] == \"S\":\n\t\t\tif way in used_ver:\n\t\t\t\tans += 1\n\t\t\telse:\n\t\t\t\tans += 5\n\t\t\tused_ver.add(way)\n\t\telse:\n\t\t\tif way in used_hor:\n\t\t\t\tans += 1\n\t\t\telse:\n\t\t\t\tans += 5\n\t\t\tused_hor.add(way)\n\t\tpos = next_st\n\t\t# print(\"used_hor\", used_hor)\n\t\t# print(\"used_ver\", used_ver)\n\tprint(ans)\n", "import sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nfor _ in range(INT()):\n    S = input()\n\n    se = set()\n    h = w = 0\n    ans = 0\n    for s in S:\n        prev = (h, w)\n        if s == 'S':\n            h += 1\n        elif s == 'N':\n            h -= 1\n        elif s == 'W':\n            w -= 1\n        else:\n            w += 1\n        cur = (h, w)\n        key = (min(prev, cur), max(prev, cur))\n        if key in se:\n            ans += 1\n        else:\n            ans += 5\n            se.add(key)\n    print(ans)\n", "t = int(input())\nd = {'E': (1, 0), 'W':(-1, 0), 'N':(0, 1), 'S':(0, -1)}\nfor _ in range(t):\n    s = input()\n    time = 0\n    met = set()\n    x = y = 0\n    for c in s:\n        dx, dy = d[c]\n        xx = x + dx\n        yy = y + dy\n        if (x, y, xx, yy) in met or (xx, yy, x, y) in met:\n            time += 1\n        else:\n            time += 5\n            met.add((x, y, xx, yy))\n        x = xx\n        y = yy\n    print(time)", "import sys,bisect,string,math,time,functools,random\nfrom heapq import heappush,heappop,heapify\nfrom collections import deque,defaultdict,Counter\nfrom itertools import permutations,combinations,groupby\ndef Golf():*a,=map(int,open(0))\ndef I():return int(input())\ndef S_():return input()\ndef IS():return input().split()\ndef LS():return [i for i in input().split()]\ndef LI():return [int(i) for i in input().split()]\ndef LI_():return [int(i)-1 for i in input().split()]\ndef NI(n):return [int(input()) for i in range(n)]\ndef NI_(n):return [int(input())-1 for i in range(n)]\ndef StoLI():return [ord(i)-97 for i in input()]\ndef ItoS(n):return chr(n+97)\ndef LtoS(ls):return ''.join([chr(i+97) for i in ls])\ndef GI(V,E,ls=None,Directed=False,index=1):\n    org_inp=[];g=[[] for i in range(V)]\n    FromStdin=True if ls==None else False\n    for i in range(E):\n        if FromStdin:\n            inp=LI()\n            org_inp.append(inp)\n        else:\n            inp=ls[i]\n        if len(inp)==2:\n            a,b=inp;c=1\n        else:\n            a,b,c=inp\n        if index==1:a-=1;b-=1\n        aa=(a,c);bb=(b,c);g[a].append(bb)\n        if not Directed:g[b].append(aa)\n    return g,org_inp\ndef GGI(h,w,search=None,replacement_of_found='.',mp_def={'#':1,'.':0},boundary=1):\n#h,w,g,sg=GGI(h,w,search=['S','G'],replacement_of_found='.',mp_def={'#':1,'.':0}) # sample usage\n    mp=[boundary]*(w+2);found={}\n    for i in range(h):\n        s=input()\n        for char in search:\n            if char in s:\n                found[char]=((i+1)*(w+2)+s.index(char)+1)\n                mp_def[char]=mp_def[replacement_of_found]\n        mp+=[boundary]+[mp_def[j] for j in s]+[boundary]\n    mp+=[boundary]*(w+2)\n    return h+2,w+2,mp,found\ndef TI(n):return GI(n,n-1)\ndef bit_combination(k,n=2):\n    rt=[]\n    for tb in range(n**k):\n        s=[tb//(n**bt)%n for bt in range(k)];rt+=[s]\n    return rt\ndef show(*inp,end='\\n'):\n    if show_flg:print(*inp,end=end)\n\nYN=['YES','NO'];Yn=['Yes','No']\nmo=10**9+7\ninf=float('inf')\nl_alp=string.ascii_lowercase\n#sys.setrecursionlimit(10**7)\ninput=lambda: sys.stdin.readline().rstrip()\n\nclass Tree:\n    def __init__(self,inp_size=None,init=True):\n        self.LCA_init_stat=False\n        self.ETtable=[]\n        if init:\n            self.stdin(inp_size)\n        return\n\n    def stdin(self,inp_size=None,index=1):\n        if inp_size==None:\n            self.size=int(input())\n        else:\n            self.size=inp_size\n        self.edges,_=GI(self.size,self.size-1,index=index)\n        return\n    \n    def listin(self,ls,index=0):\n        self.size=len(ls)+1\n        self.edges,_=GI(self.size,self.size-1,ls,index=index)\n        return\n\n    def __str__(self):\n        return  str(self.edges)\n\n    def dfs(self,x,func=lambda prv,nx,dist:prv+dist,root_v=0):\n        q=deque()\n        q.append(x)\n        v=[-1]*self.size\n        v[x]=root_v\n        while q:\n            c=q.pop()\n            for nb,d in self.edges[c]:\n                if v[nb]==-1:\n                    q.append(nb)\n                    v[nb]=func(v[c],nb,d)\n        return v\n\n    def EulerTour(self,x):\n        q=deque()\n        q.append(x)\n        self.depth=[None]*self.size\n        self.depth[x]=0\n        self.ETtable=[]\n        self.ETdepth=[]\n        self.ETin=[-1]*self.size\n        self.ETout=[-1]*self.size\n        cnt=0\n        while q:\n            c=q.pop()\n            if c<0:\n                ce=~c\n            else:\n                ce=c\n                for nb,d in self.edges[ce]:\n                    if self.depth[nb]==None:\n                        q.append(~ce)\n                        q.append(nb)\n                        self.depth[nb]=self.depth[ce]+1\n            self.ETtable.append(ce)\n            self.ETdepth.append(self.depth[ce])\n            if self.ETin[ce]==-1:\n                self.ETin[ce]=cnt\n            else:\n                self.ETout[ce]=cnt\n            cnt+=1\n        return\n    \n    def LCA_init(self,root):\n        self.EulerTour(root)\n        self.st=SparseTable(self.ETdepth,init_func=min,init_idl=inf)\n        self.LCA_init_stat=True\n        return\n    \n    def LCA(self,root,x,y):\n        if self.LCA_init_stat==False:\n            self.LCA_init(root)\n        xin,xout=self.ETin[x],self.ETout[x]\n        yin,yout=self.ETin[y],self.ETout[y]\n        a=min(xin,yin)\n        b=max(xout,yout,xin,yin)\n        id_of_min_dep_in_et=self.st.query_id(a,b+1)\n        return self.ETtable[id_of_min_dep_in_et]\n\nclass SparseTable: # O(N log N) for init, O(1) for query(l,r)\n    def __init__(self,ls,init_func=min,init_idl=float('inf')):\n        self.func=init_func\n        self.idl=init_idl\n        self.size=len(ls)\n        self.N0=self.size.bit_length()\n        self.table=[ls[:]]\n        self.index=[list(range(self.size))]\n        self.lg=[0]*(self.size+1)\n        \n        for i in range(2,self.size+1):\n            self.lg[i]=self.lg[i>>1]+1\n\n        for i in range(self.N0):\n            tmp=[self.func(self.table[i][j],self.table[i][min(j+(1<<i),self.size-1)]) for j in range(self.size)]\n            tmp_id=[self.index[i][j] if self.table[i][j]==self.func(self.table[i][j],self.table[i][min(j+(1<<i),self.size-1)]) else self.index[i][min(j+(1<<i),self.size-1)] for j in range(self.size)]\n            self.table+=[tmp]\n            self.index+=[tmp_id]\n    \n    # return func of [l,r)\n    def query(self,l,r):\n        #N=(r-l).bit_length()-1\n        N=self.lg[r-l]\n        return self.func(self.table[N][l],self.table[N][r-(1<<N)])\n    \n    # return index of which val[i] = func of v among [l,r)\n    def query_id(self,l,r):\n        #N=(r-l).bit_length()-1\n        N=self.lg[r-l]\n        a,b=self.index[N][l],self.index[N][r-(1<<N)]\n        if self.table[0][a]==self.func(self.table[N][l],self.table[N][r-(1<<N)]):\n            b=a\n        return b\n    \n    def __str__(self):\n        return str(self.table[0])\n        \n    def print(self):\n        for i in self.table:\n            print(*i)\n\nshow_flg=False\nshow_flg=True\nans=0\nD='EWNS'\nm=[(1,0),(-1,0),(0,1),(0,-1)]\ndc=dict(zip(D,m))\n\nT=I()\nfor _ in range(T):\n    ans=0\n    s=input()\n    N=len(s)*2+5\n    x,y=(N,N)\n    p=x*N+y\n    f=dict()\n    for i in s:\n        dx,dy=dc[i]\n        nx=x+dx\n        ny=y+dy\n        X=min(x,nx)\n        Y=min(y,ny)\n        p=X*N+Y\n        p*=1 if dx==0 else -1\n        if p in f:\n            ans+=1\n        else:\n            ans+=5\n        \n        f[p]=1\n        x,y=nx,ny\n        #show(x-N,y-N,p,ans,f,N)\n    \n    \n    print(ans)\n\n", "t=int(input())\ndef an(x):\n    if x=='S':\n        return 'N'\n    if x=='N':\n        return 'S'\n    if x=='W':\n        return 'E'\n    if x=='E':\n        return 'W'\ndef mov(x,y):\n    if y=='S':\n        return (x[0]+1,x[1])\n    if y=='N':\n        return (x[0]-1,x[1])\n    if y=='W':\n        return (x[0],x[1]+1)\n    if y=='E':\n        return (x[0],x[1]-1)\nwhile t>0:\n    t-=1\n    li={}\n    s=input()\n    at=(0,0)\n    ans=0\n    for i in s:\n        nx=mov(at,i)\n        if li.get((at,i),False):\n            ans+=1\n        else:\n            ans+=5\n            li[(at,i)]=True\n            li[(nx,an(i))]=True\n        at=nx\n    print(ans)\n", "rilist = lambda :[int(i) for  i  in  input().split()]\nrlist = lambda :[i for  i  in  input().split()]\nrint = lambda: int(input())\nrfloat = lambda: float(input())\ndef pmat(mat):\n    for i in range(len(mat)):\n        a = ' '.join(map(str, mat[i]))\n        print(a)\n    print()\n\nd = {'N':(1,0),'S':(-1,0),'E':(0,1),'W':(0,-1)}\ndef solve(t):\n    path = input()\n    curr = (0, 0)\n    tmp = {}\n    res = 0\n    for p in path:\n        a,b = d[p]\n        next = (curr[0]+a,curr[1]+b)\n        key = sorted((curr, next), key=lambda x:x[0])\n        key = sorted(key, key=lambda x:x[1])\n        key = tuple(key)\n        curr = next\n        res += tmp.get( key ,5)\n        tmp[key]=1\n    print(res)\ntest = int(input())\nfor tc in range(test):\n    solve(tc+1)", "t = int(input())\nfor _ in range(t):\n    crd = set()\n    path = input()\n    x,y = 0,0\n    sum = 0\n    for c in path:\n        if c=='N':\n            if (x,y-1,x,y) in crd:\n                sum += 1\n            elif (x,y,x,y-1) in crd:\n                sum += 1\n            else:\n                crd.add((x,y-1, x, y))\n                sum += 5\n            x,y=x,y-1\n        elif c == 'S':\n            if (x,y+1,x,y) in crd:\n                sum += 1\n            elif (x,y,x,y+1) in crd:\n                sum += 1\n            else:\n                crd.add((x,y+1, x, y))\n                sum += 5\n            x,y=x,y+1\n        elif c=='W':\n            if (x+1,y,x,y) in crd:\n                sum += 1\n            elif (x,y,x+1,y) in crd:\n                sum += 1\n            else:\n                crd.add((x+1,y, x, y))\n                sum += 5\n            x,y=x+1,y\n        elif c=='E':\n            if (x-1,y,x,y) in crd:\n                sum += 1\n            elif (x,y,x-1,y) in crd:\n                sum += 1\n            else:\n                crd.add((x-1,y, x, y))\n                sum += 5\n            x,y = x-1,y\n    print(sum)", "from sys import stdin, exit\ninput = stdin.readline\n\ndef i(): return input()\ndef ii(): return int(input())\ndef iis(): return list(map(int, input().split()))\ndef liis():\treturn list(map(int, input().split()))\ndef print_array(a): print(\" \".join(map(str, a)))\n\nt = ii()\nfor _ in range(t):\n\ttime = 0\t\n\tx, y = 0, 0\n\tvisited = set()\n\ts = input()\n\tfor i in s:\n\t\told_x = x\n\t\told_y = y\n\t\tif i == 'N': y += 1\n\t\telif i == 'S': y -= 1\n\t\telif i == 'E': x += 1\n\t\telif i == 'W': x -= 1\n\t\telse: continue\t\n\t\tif (old_x, old_y, x, y) in visited:\n\t\t\ttime += 1\n\t\telse:\n\t\t\ttime += 5\n\t\n\t\tvisited.add((x, y, old_x, old_y))\n\t\tvisited.add((old_x, old_y, x, y))\n\t\n\tprint(time)\n", "t = int(input())\nfor _ in range(t):\n    s = input()\n    st = set()\n    x, y = 0, 0\n    ans = 0\n    for c in s:\n        if c == 'S':\n            if (x, y + 1) in st:\n                ans += 1\n            else:\n                ans += 5\n                st.add((x, y + 1))\n            y += 2\n        elif c == 'N':\n            if (x, y - 1) in st:\n                ans += 1\n            else:\n                ans += 5\n                st.add((x, y - 1))\n            y -= 2\n        elif c == 'W':\n            if (x + 1, y) in st:\n                ans += 1\n            else:\n                ans += 5\n                st.add((x + 1, y))\n            x += 2\n        else:\n            if (x - 1, y) in st:\n                ans += 1\n            else:\n                ans += 5\n                st.add((x - 1, y))\n            x -= 2\n    print(ans)\n", "from math import *\n\nfor zz in range(int(input())):\n    used = set()\n    ans = 0\n    pos = [0, 0]\n    a = 0\n    for i in range(35000):\n        a += 1\n    a = ans - 1\n    for x in input():\n        ppos = pos[:]\n        ppos = tuple(ppos)\n        if x == 'N':\n            pos[0] += 1\n        elif x == 'S':\n            pos[0] -= 1\n        elif x == 'W':\n            pos[1] -= 1\n        else:\n            pos[1] += 1\n        if ((ppos, tuple(pos)) in used) or ((tuple(pos), ppos) in used):\n            ans += 1\n        else:\n            used.add((ppos, tuple(pos)))\n            ans += 5\n    print(ans)\n\n#aaa\n", "import time\nimport sys\nreadline = sys.stdin.readline\n\nt = time.time()\nd = {'N': -10**9, 'S': 10**9, 'E': 1, 'W': -1}\nfor _ in range(int(input())):\n    s = readline().rstrip()\n    pos = 0\n    visited = set()\n    dist = 0\n    for c in s:\n        dest = pos + d[c]\n        dist += 1 if (pos, dest) in visited or (dest, pos) in visited else 5\n        visited.update(((pos, dest), (dest, pos)))\n        pos = dest\n\n    print(dist)\n\nwhile time.time() - t < 0.9:\n    pass\n"]