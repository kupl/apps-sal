["class Solution:\n    def minSwaps(self, grid: List[List[int]]) -> int:\n        start=1\n        swap=0\n        n=len(grid)\n        zeros_ingrid=n-1\n        while zeros_ingrid>0:\n            swapped_grid=False\n            for i in range(len(grid)):\n                if sum(grid[i][start:])==0:\n                    swap+=i\n                    grid.remove(grid[i])\n                    swapped_grid=True\n                    zeros_ingrid-=1\n                    start+=1\n                    break\n            if not swapped_grid:\n                return -1\n        return swap\n                \n                    \n                \n                \n", "class Solution:\n  dbg = False\n  def minSwaps(self, grid) -> int:\n    grid_ints = []\n    for row in grid:\n      enc = 0\n      for val in reversed(row):\n        enc = enc << 1\n        if val % 2 == 1:\n          enc += 1\n      grid_ints.append(enc)\n    if self.dbg: print(grid_ints)\n\n    bar = 1\n    swaps = 0\n    for i in range(len(grid[0])):\n      if grid_ints[i] > bar:\n        j = i\n        while grid_ints[j] > bar:\n          j += 1\n          if j >= len(grid[0]):\n            return -1\n        while j > i:\n          grid_ints[j], grid_ints[j-1] = grid_ints[j-1], grid_ints[j]\n          swaps += 1\n          j -= 1\n      bar = (bar << 1) + 1\n\n    return swaps\n", "class Solution:\n    def minSwaps(self, grid: List[List[int]]) -> int:\n        for i in range(len(grid)):\n            j = len(grid[i]) - 1\n            while j >= 0 and grid[i][j] == 0:\n                j -= 1\n            grid[i] = j\n            \n        count = 0\n        \n        for i in range(len(grid)):\n            if grid[i] <= i:\n                continue\n            j = i + 1\n            while j < len(grid) and grid[j] > i:\n                j += 1\n            if j == len(grid):\n                return -1\n            while j > i:\n                grid[j], grid[j - 1] = grid[j - 1], grid[j]\n                count += 1\n                j -= 1\n        return count", "class Solution:\n    def minSwaps(self, grid: List[List[int]]) -> int:\n        def helper(row):\n            for i in range(len(row) - 1, -1, -1):\n                if row[i] == 1:\n                    return len(row) - i - 1\n            return len(row)\n        arr = list(map(helper, grid))\n\n        count = 0\n        target = len(grid[0]) - 1\n        for i in range(len(arr)):\n            if arr[i] < target:\n                found = False\n                for j in range(i + 1, len(arr)):\n                    if arr[j] >= target:\n                        count += j - i\n                        arr.insert(i, arr.pop(j))\n                        found = True\n                        break\n                if not found:\n                    return -1\n            target -= 1\n            \n        return count", "class Solution:\n    def minSwaps(self, grid: List[List[int]]) -> int:\n        maxRight = [0]* len(grid)\n        \n        for i in range(len(grid)):\n            j = len(grid[i]) - 1\n            while j >= 0 and grid[i][j] != 1:\n                j -= 1\n            maxRight[i] = j\n            \n       \n            \n        swaps = 0\n        for i in range(len(maxRight)):\n            if maxRight[i] > i:\n                j = i\n                while j < len(maxRight) and maxRight[j] > i:\n                    j += 1\n                    \n                if j == len(maxRight):\n                    return -1\n                \n                while j != i:\n                    temp = maxRight[j]\n                    maxRight[j] = maxRight[j-1]\n                    maxRight[j-1] = temp\n                    swaps += 1\n                    j -= 1\n            \n\n        return swaps\n            \n                \n            \n            \n            \n", "class Solution:\n    def minSwaps(self, grid: List[List[int]]) -> int:\n        n = len(grid[0])\n        def countzeros(row):\n            zeros = 0\n            while(row):\n                new=row.pop()\n                if new ==0:\n                    zeros +=1\n                else:\n                    return(zeros)\n            return(zeros)\n        zeros = [countzeros(i) for i in grid]\n        print(zeros)\n        row = 0 #n-1 zeros need, for row = k need n-1-k zeros\n        ops = 0\n        while(len(zeros)):\n            #print(zeros)\n            found = False\n            for i in range(len(zeros)):\n                if zeros[i] >= n - 1 -row:\n                    ops += i \n                    zeros.remove(zeros[i])\n                    row +=1\n                    found = True\n                    break\n            if not found:\n                return(-1)\n        return(ops)\n            \n                \n"]