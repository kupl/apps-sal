["ii = lambda: int(input())\nmi = lambda: map(int, input().split())\nli = lambda: list(mi())\nfrom collections import Counter as C\nn = ii()\na = li()\noe = [C(), C()]\noe[1][0] = 1\nx = 0\nans = 0\nfor i in range(n):\n    x ^= a[i]\n    ans += oe[i % 2][x]\n    oe[i % 2][x] += 1\nprint(ans)", "maxn = int(3e5) + 3\nmaxa = (1 << 20) + 3\nnb_element = int(input())\narr = [int(x) for x in input().split()]\ncnt = [[0 for _ in range(maxa)] for _ in range(2)]\ncnt[1][0] = 1\nxors = 0\nres = 0\nfor i in range(nb_element):\n    xors ^= arr[i]\n    x  = i % 2\n    res += cnt[x][xors]\n    cnt[x][xors] += 1\nprint(res)", "n = int(input())\nl = list(map(int, input().strip().split()))\neven = [0 for i in range(2**21)]\nodd = [0 for i in range(2**21)]\ncur = 0\neven[0] = 1\nfor i in range(n):\n    cur = cur^l[i]\n    if i%2:\n        even[cur] += 1\n    else:\n        odd[cur] += 1\nans = 0\nfor i in range(2**21):\n    if even[i] >= 2: ans += (even[i]*(even[i]-1))/2\n    if odd[i] >= 2: ans += (odd[i]*(odd[i]-1))/2\nprint(int(ans))\n", "'''\nn=int(input())\na=list(map(int,input().split()))#a^b^b=a\uff0cb^b=0\ndef lastcount(r):\n    nonlocal a\n    right=a[r]\n    left=a[r-1]\n    i=r\n    j=r-1\n    k=0\n    while j>=0:\n        k+=left==right\n        j-=2\n        i-=1\n        left=left^a[i]^a[j]^a[j+1]\n        right=right^a[i]\n    return k\ndp=0\nfor i in range(n-1,0,-1):\n    dp+=lastcount(i)\nprint(dp)\n'''\nn=int(input())\na=list(map(int,input().split()))\no={}\ne={}\nt=a[0]\ne[t]=1\no[0]=1\nans,i=0,1\nodd=True\nwhile i<n:\n    t^=a[i]\n    if odd:\n        ans+=o.get(t,0)\n        o[t]=o.get(t,0)+1\n    else:\n        ans+=e.get(t,0)\n        e[t]=e.get(t,0)+1\n    i+=1\n    odd=1-odd\nprint(ans)\n    \n\n", "n = int(input())\na = [int(x) for x in input().split()]\npred = [0]\nfor i in range(n):\n    pred.append(a[i] ^ pred[-1])\nd = {}\nd1 = {}\na = pred[::2]\nb = pred[1::2]\nans = 0\nfor i in a:\n    d[i] = d.get(i, 0) + 1\nfor i in b:\n    d1[i] = d1.get(i, 0) + 1\nfor i in d:\n    ans += d[i] * (d[i] - 1) // 2\nfor i in d1:\n    ans += d1[i] * (d1[i] - 1) // 2\nprint(ans)", "n = int(input())\na = list(map(int, input().split()))\nprev = [0]\n\nfor i in range(n):\n\tprev.append(a[i] ^ prev[-1])\n\nvar = {}\nvar1 = {}\na = prev[::2]\nb = prev[1::2]\nans = 0\n\nfor c in a:\n\tvar[c] = var.get(c, 0) + 1\n\nfor x in b:\n\tvar1[x] = var1.get(x, 0) + 1\n\nfor c in var:\n\tans += var[c] * (var[c] - 1) // 2\n\nfor c in var1:\n\tans += var1[c] * (var1[c] - 1) // 2\n\nprint(ans)\n", "n=int(input())\nnlist=[int(x) for x in input().split()]\nxor=[[0]*2**21 for xor in range(2)]\nx=counter=0\nxor[1][0]=1\nfor i in range(n):\n    x^=nlist[i]\n    counter+=xor[i%2][x]\n    xor[i%2][x]+=1\nprint(counter)\n", "import math\nimport sys\nfrom bisect import bisect_right, bisect_left, insort_right\nfrom collections import Counter, defaultdict\nfrom heapq import heappop, heappush\nfrom itertools import accumulate, permutations, combinations\nfrom sys import stdout\n\nR = lambda: map(int, input().split())\nn = int(input())\ndp = defaultdict(lambda: [0, 0])\ndp[0] = [1, 0]\nxor = res = 0\nfor i, x in enumerate(R()):\n    xor ^= x\n    res += dp[xor][(i + 1) & 1]\n    dp[xor][(i + 1) & 1] += 1\nprint(res)", "from collections import Counter\n\nn = int(input())\na = [*map(int, input().split())]\n\npre = [[0] * (2 ** 20), [1] + [0] * (2 ** 20 - 1)]\nt = ans = 0\n\nfor i in range(n):\n    t ^= a[i]\n    ans += pre[i & 1][t]\n    pre[i & 1][t] += 1\n\nprint(ans)", "def count(arr):\n    even = 0\n    odd = 0\n    for i in arr:\n        if i % 2 == 1:\n            even += 1\n        else:\n            odd += 1\n    return (even-1) * even //2 + (odd - 1) * odd //2\n\ndef solve(a):\n    sums = []\n    x = 0\n    for i in a:\n        x = x ^ i\n        sums.append(x)\n    # print(sums)\n    d = {}\n    d[0] = [-1]\n    for i in range(len(sums)):\n        if sums[i] in d:\n            d[sums[i]].append(i)\n        else:\n            d[sums[i]] = [i]\n    # print(d)\n    res = 0\n    for sums in d:\n        res += count(d[sums])\n    return res\n\nn = int(input())\nx = input().split()\na = []\nfor i in x:\n    a.append(int(i))\nprint(solve(a))\n", "n=int(input())\ng=[int(g) for g in input().split()]\nxor=0\narr=[[0]*(2**20),[1]+[0]*(2**20-1)]\ncount=0\nfor i in range(len(g)):\n    xor^=g[i]\n    count+=arr[i%2][xor]\n    arr[i%2][xor]+=1\nprint(count)\n", "n = int(input())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(1 << 20)] for _ in range(2)]\ndp[1][0] = 1\nxor = 0\nret = 0\nfor i in range(n):\n    xor ^= a[i]\n    ret += dp[i & 1][xor]\n    dp[i & 1][xor] += 1\nprint(ret)\n", "from collections import Counter\n\ndef check_funny(n, nums):\n    cnt = {0: Counter(), 1: Counter()}\n    cnt[1][0] = 1\n    x = 0\n    res = 0\n    for i in range(n):\n        x ^= nums[i]\n        res += cnt[i % 2][x]\n        cnt[i % 2][x] += 1\n    return res\n\n\nn = int(input())\nnums = list(map(int, input().split()))\nprint(check_funny(n, nums))\n", "from collections import Counter\nn = int(input())\nx = [0]\nfor v in map(int, input().split()):\n    x.append(x[-1] ^ v)\nc0 = Counter(x[::2])\nc1 = Counter(x[1::2])\nr = 0\nfor v in c0.values():\n    r += v*(v-1)//2\nfor v in c1.values():\n    r += v*(v-1)//2\nprint(r)    ", "n, d, curr = int(input()), {(0, 1) : 1}, 0\nfor i, e in enumerate(map(int, input().split())):\n    curr ^= e\n    p = (curr, i & 1)\n    d[p] = d.get(p, 0) + 1\nres = sum((n * (n - 1)) // 2 for n in list(d.values()))\nprint(res)\n", "from itertools import accumulate\nfrom collections import Counter\nfrom operator import xor\nprint(sum((n * (n - 1)) // 2 for n in list((Counter((i & 1, e) for i, e in enumerate(accumulate([list(map(int, input().split())) for _ in range(2)][1], xor))) + Counter([(1, 0)])).values())))\n", "n = int(input())\na = [int(x) for x in input().split()]\ncnt = [[0, 0] for x in range((1 << 20) + 3)]\ncnt[0][1] = 1\nx = 0\nres = 0\nfor j in range(n):\n    x ^= a[j]\n    res += cnt[x][j % 2]\n    cnt[x][j % 2] += 1\nprint(res)\n", "from collections import defaultdict\nN = int(input())\na = list(map(int, input().split()))\ns = [0]\nfor i in range(N):\n    s.append(s[-1] ^ a[i])\n\nD1 = defaultdict(int)\nD2 = defaultdict(int)\nans = 0\nfor i in range(N + 1):\n    if i % 2 == 0:\n        ans += D1[s[i]]\n        D1[s[i]] += 1\n    else:\n        ans += D2[s[i]]\n        D2[s[i]] += 1\n\n\nprint(ans)", "n = int(input())\na = list(map(int,input().split()))\npreXor = [0]*n\npreXor[0] = a[0]\nfor i in range(1,n):\n    preXor[i] = a[i]^preXor[i-1]\neven = {}\nodd = {}\ncount = 0\nfor i in range(n):\n    m = preXor[i]\n    if (m==0):\n        if (i%2==1):\n            count += 1\n    if (i%2==0):\n        if m in even:\n            count += even[m]\n            even[m] += 1\n        else:\n            even[m] = 1\n    else:\n        if m in odd:\n            count += odd[m]\n            odd[m] += 1\n        else:\n            odd[m] = 1\nprint(count)\n", "n = int(input())\na = list(map(int, input().split()))\na = [0] + a\n\nx = [0] * (n+1)\nc = {0:1}\nsol = 0\nfor i in range(1, n+1):\n    x[i] = x[i-1] ^ a[i]\n    if x[i]*2 + i%2 in c:\n        sol += c[x[i]*2 + i%2]\n    try:\n        c[x[i]*2 + i%2] += 1\n    except KeyError:\n        c[x[i]*2 + i%2] = 1\n\nprint(sol)\n", "from math import *\nfrom collections import *\nimport sys\nsys.setrecursionlimit(10**9)\n  \nn = int(input())\na = list(map(int,input().split()))\npre = [0]\nfor i in range(n):\n\tpre.append(pre[-1]^a[i])\nde = dict()\ndo = dict()\nfor i in range(n+1):\n\tif(i % 2 == 0):\n\t\tif pre[i] not in de:\n\t\t\tde[pre[i]] = 1\n\t\telse:\n\t\t\tde[pre[i]] += 1\n\telse:\n\t\tif pre[i] not in do:\n\t\t\tdo[pre[i]] = 1\n\t\telse:\n\t\t\tdo[pre[i]] += 1\nans = 0\nfor x in list(de.values()): \n\tans += x*(x-1)//2\nfor x in list(do.values()): \n\tans += x*(x-1)//2\nprint(ans)\n", "n = int(input())\na = list(map(int,input().split()))\nxor = 0\narr=[[0]*(2**20),[1]+[0]*(2**20-1)]\ncount = 0\nfor i in range(n):\n    xor = xor^a[i]\n    count += arr[i%2][xor]\n    arr[i%2][xor]+=1\nprint(count)", "n=int(input())\npref=[0]\napp=pref.append\nfor i,x in enumerate(map(int,input().split())):\n    app(pref[-1]^x)\nd,di={},{}\nfor i,x in enumerate(pref):\n    if i%2==0:\n        if d.get(x)==None:d[x]=0\n        d[x]+=1\n    else:\n        if di.get(x)==None:di[x]=0\n        di[x]+=1\nres=0\nfor i,x in enumerate(d):res+=(d[x]*(d[x]-1)//2)\nfor i,x in enumerate(di):res+=(di[x]*(di[x]-1)//2)\nprint(res)", "n=int(input())\npref=[0]\napp=pref.append\nfor i,x in enumerate(map(int,input().split())):\n    app(pref[-1]^x)\nfrom collections import Counter\nd=Counter(pref[::2])\ndi=Counter(pref[1::2])\nres=0\nfor i,x in enumerate(d):res+=(d[x]*(d[x]-1)//2)\nfor i,x in enumerate(di):res+=(di[x]*(di[x]-1)//2)\nprint(res)", "n=int(input())\npref=[0]\napp=pref.append\nfor i,x in enumerate(map(int,input().split())):app(pref[-1]^x)\nfrom collections import Counter\nd=Counter(pref[::2])\ndi=Counter(pref[1::2])\nres=0\nfor i,x in enumerate(d.values()):res+=(x*(x-1)//2)\nfor i,x in enumerate(di.values()):res+=(x*(x-1)//2)\nprint(res)"]