["class Solution:\n    def clumsy(self, N: int) -> int:\n        if N <= 2:\n            return N\n        if N <= 4:\n            return N + 3\n        \n        if (N - 4) % 4 == 0:\n            return N + 1\n        elif (N - 4) % 4 <= 2:\n            return N + 2\n        else:\n            return N - 1", "class Solution:\n    def clumsy(self, N: int) -> int:\n        all_nums = [i for i in range(N, 0, -1)]\n        prio_nums = []\n        for i in range(0, len(all_nums) - 3, 4):\n            prio_nums.append((all_nums[i] * all_nums[i + 1]) // all_nums[i + 2])\n            prio_nums.append(all_nums[i + 3])\n        if N % 4 == 3:\n            prio_nums.append((all_nums[-3] * all_nums[-2]) // all_nums[-1])\n        elif N % 4 == 2:\n            prio_nums.append(all_nums[-2] * all_nums[-1])\n        elif N % 4 == 1:\n            prio_nums.append(all_nums[-1])\n        total = prio_nums[0]\n        print(prio_nums)\n        for i in range(1, len(prio_nums)):\n            if i % 2 != 0:\n                total = total + prio_nums[i]\n            else:\n                total = total - prio_nums[i]\n        return total\n            \n", "class Solution:\n    def clumsy(self, N: int) -> int:\n        temp = [i for i in range(N,0,-1)]\n\n        # temp[0] *= -1\n        \n        if N > 3:\n            s = (temp[0]*temp[1]//temp[2]+temp[3])\n            for i in range(1,N//4):\n                s -= (temp[i*4]*temp[i*4+1]//temp[i*4+2] - temp[i*4+3])\n                print(s)\n                # print(temp[i*4]*temp[i*4+1]//temp[i*4+2])\n            if N % 4 == 3:\n                s -= temp[-3] * temp[-2] // temp[-1]\n            elif N % 4 == 2:\n                s -= temp[-2] * temp[-1]\n            elif N % 4 == 1:\n                s -= temp[-1]\n        \n        else:\n            s = 0\n            if N % 4 == 3:\n                s += temp[-3] * temp[-2] // temp[-1]\n            elif N % 4 == 2:\n                s += temp[-2] * temp[-1]\n            elif N % 4 == 1:\n                s += temp[-1]\n\n        return s", "class Solution:\n    def clumsy(self, N: int) -> int:\n        count=1\n        ans=[N]\n        for i in range(N-1,0,-1):\n            if count%4==1:\n                ans[-1]*=i\n            elif count%4==2:\n                ans[-1]=int(ans[-1]/i)\n            elif count%4==3:\n                ans.append(i)\n            else:\n                ans.append(-i)\n            count+=1\n        return sum(ans)", "class Solution:\n    def clumsy(self, N: int) -> int:\n        flag=1\n        temp=0\n        cur=0\n        i=1\n        for j in range(N,0,-1):\n            if(i%4==1):\n                cur=flag*j\n            elif(i%4==2):\n                cur*=j\n            elif(i%4==3):\n                cur=int(cur/j)\n            else:\n                cur+=j\n                temp+=cur\n                flag=-1\n                cur=0\n            i+=1\n        return temp+cur", "class Solution:\n    def clumsy(self, N: int) -> int:\n        numbers = list(range(N + 1))[1:]\n        numbers.reverse()\n        inter_results = []\n        for idx, v in enumerate(numbers):\n            if idx % 4 == 0:\n                inter_results.append(v)\n            elif idx % 4 == 1:\n                inter_results[-1] *= v\n            elif idx % 4 == 2:\n                inter_results[-1] = int(inter_results[-1] / v)\n            elif idx % 4 == 3:\n                inter_results.append(v)\n        # print(inter_results)\n        final_results = 0\n        for idx, v in enumerate(inter_results):\n            if idx == 0:\n                final_results += v\n            elif idx % 2 == 1:\n                final_results += v\n            elif idx % 2 == 0:\n                final_results -= v\n        return final_results", "class Solution:\n    def clumsy(self, n: int) -> int:\n        if n == 1:\n            return 1\n        arr = []\n        temp = 0\n        for i in range(n,0,-1):\n            if temp == 0 or temp == 3:\n                arr.append(i)\n            elif temp == 1:\n                arr[len(arr)-1] = arr[len(arr)-1]*i\n            elif temp == 2:\n                arr[len(arr)-1] = arr[len(arr)-1]//i\n            temp = (temp+1)%4\n        c = arr[0]\n        for i in range(1,len(arr)):\n            if i%2 == 1:\n                c+=arr[i]\n            else:\n                c-=arr[i]\n        return c", "class Solution:\n    def clumsy(self, N: int) -> int:\n        op = 0\n        s = N\n        N = N - 1\n        sum_list = []\n        sign_list = [1]\n        \n        while N > 0:\n            if op == 0:\n                s = s * N\n            elif op == 1:\n                s = s // N\n            elif op == 2:\n                sum_list.append(s)\n                sign_list.append(1)\n                s = N\n            else:\n                sum_list.append(s)\n                sign_list.append(-1)\n                s = N\n            \n            op = (op + 1) % 4\n            N -= 1\n            \n        sum_list.append(s)\n        \n        s = 0\n        for i, v in enumerate(sign_list):\n            s+= sign_list[i] * sum_list[i]\n\n        return s\n                \n            \n", "class Solution:\n    def clumsy(self, N: int) -> int:\n        stack = []\n        j = -1\n        for i in range(N, 0, -1):\n            stack.append(i)\n            if (j % 4 == 0 or j % 4 == 1 and len(stack) > 1):\n                x = stack.pop()\n                y = stack.pop()\n                if (j % 4 == 0):\n                    stack.append(x*y)\n                elif (j % 4 == 1):\n                    stack.append(y//x)\n            j += 1\n        res = stack[0]\n        for j in range(1,len(stack), 2):\n            res += stack[j]\n            if (j != len(stack) - 1):\n                res -= stack[j+1]\n        return res\n", "class Solution:\n    def clumsy(self, N: int) -> int:\n        result = N\n        \n        product_part = 0\n        sum_part = 0\n        \n        def g(x):\n            return N - x + 1\n        \n        for i in range(0, ceil(N / 4)):\n            nums = list(range(4 * i + 1, min(4 * i + 5, N + 1)))\n            \n            p = g(nums[0])\n            s = 0\n            if len(nums) > 1:\n                p *= g(nums[1])\n            if len(nums) > 2:\n                p //= g(nums[2])\n            if len(nums) > 3:\n                s = g(nums[3])\n                \n            if i > 0:\n                p *= -1\n            \n            product_part += p\n            sum_part += s\n        \n        return product_part + sum_part", "class Solution:\n    def clumsy(self, N: int) -> int:\n        if N == 1:\n            return N\n        i = N - 1\n        operations = []\n        curr = N\n        which_op = 0\n        while i >= 1:\n            \n            if which_op == 0:\n                curr *= i\n                curr = int(curr)\n                which_op += 1\n            elif which_op == 1:\n                curr /= i\n                curr = int(curr)\n                which_op += 1\n            elif which_op == 2:\n                operations.append((curr, 2))\n                curr = i\n                which_op += 1\n            elif which_op == 3:\n                operations.append((curr, 3))\n                which_op = 0\n                curr = i\n                which_op = 0\n            if i == 1:\n                operations.append((curr, 0))\n            i -= 1\n            \n        #print(operations)\n        sol = 0\n        index = 0\n        if len(operations) == 1:\n            return operations[0][0]\n        while index < len(operations) - 1:\n            if index == 0:\n                sol = operations[index][0]\n           \n            if operations[index][1] == 2:\n                sol+= operations[index + 1][0]\n            else:\n                sol -= operations[index + 1][0]   \n            index+=1\n        return sol\n            \n", "class Solution:\n    def clumsy(self, N: int) -> int:\n        res=[]\n        danhanvachiachua=False\n        i=N\n        while i>0:\n            if danhanvachiachua==False:\n                if i>=3:\n                    res.append((i*(i-1))//(i-2))\n                elif i==2:\n                    res.append(2)\n                elif i==1:\n                    res.append(1)\n                i=i-3\n                danhanvachiachua=True\n            else:\n                res.append(i)\n                i=i-1\n                danhanvachiachua=False\n                \n            \n        print(res)\n        dau=0\n        clumsy=res[0]\n        for i in range(1,len(res)):\n            if dau%2==0:\n                clumsy+=res[i]\n            else:\n                clumsy-=res[i]\n            dau+=1\n        return clumsy", "class Solution:\n    def clumsy(self, n):\n        \n        def helper(arr):\n            \n            s = arr[0][0]\n            \n            for i in range(1,len(arr)):\n                \n                if i%2 != 0:\n                    \n                    s += arr[i][0]\n                    \n                else:\n                    \n                    s -= arr[i][0]\n                    \n            return s\n        \n        \n        \n        \n        if n < 2:\n            \n            return 1\n        \n        arr = [[n]]\n        \n        n -= 1\n        \n        x = 1\n        \n        while n != 0:\n            \n            if x == 5:\n                \n                x = 1\n                \n            if x == 1:\n                \n                arr[len(arr) - 1][0] *= n\n                \n            if x == 2:\n                \n                arr[len(arr) - 1][0] = int(arr[len(arr) - 1][0]/n)\n                \n            if x == 3 or x == 4:\n                \n                arr.append([n])\n               \n                \n            n -= 1\n            x += 1\n            \n        return helper(arr)\n                \n            \n                \n            \n                \n                \n                \n            \n                \n            \n                \n            \n                \n            \n", "class Solution:\n    def clumsy(self, N: int) -> int:\n        ans = self.multiplyDivide(N)\n        N -= 3\n        while N > 0:\n            ans += max(N, 0)\n            ans -= self.multiplyDivide(N-1)\n            N -= 4\n        return ans\n\n    def multiplyDivide(self, n: int) -> int:\n        return max(0, n) * max(1, n-1) // max(1, n-2)", "class Solution:\n    def clumsy(self, N: int) -> int:\n        fac = [0, 1, 2, 6, 7, 7, 8, 6]\n        if N <= 6:\n            return fac[N]\n        \n        for i in range(8, N + 1):\n            temp = i * (i - 1) // (i - 2) + (i - 3) - (i - 4) * (i - 5) // (i - 6) * 2 + fac[i - 4]\n            fac.append(temp)\n        print(fac)\n        return fac[-1]", "class Solution:\n    def clumsy(self, N: int) -> int:\n        import functools\n        l = list(reversed(list(range(1, N+1))))\n        ll= list([z[1] for z in [x for x in enumerate(l) if x[0] %  4 == 0 or x[0] % 4 == 1 or x[0] % 4 == 2]])\n        rs = sum(list([z[1] for z in [x for x in enumerate(l) if x[0] % 4 == 3]]))\n        pr, acc = [], 1\n        for( i, el) in enumerate(ll):\n            if i % 3 == 0:acc = el\n            elif i % 3 == 1:acc = acc * el\n            else: acc = math.floor(acc / el)\n            if i %3 == 2 or i == len(ll) -1:\n                pr.append(acc)\n        # print(l, ll, rs, pr)\n        return rs + pr[0] + sum(list([-x for x in pr[1:]]))        \n", "class Solution:\n    def clumsy(self, N: int) -> int:\n        self.N = N\n\n        k = N // 4\n        r = N % 4\n\n        def result(n):        \n            if r == 1:\n                return 1\n            elif r == 2:\n                return 2        #2 * 1\n            elif r == 3:\n                return 6        #3 * 2 // 1\n            elif r == 0:\n                return 5        #4 * 3 // 2 - 1\n\n        cFac = 2 * (N - 1)\n        if N < 4:\n            return result(r)\n        elif N == 4:\n            cFac += 1\n        else:\n            if r == 0:\n                cFac += -4 * (k-2)\n            else:\n                cFac += -4 * (k-1)\n            cFac -= result(r)\n        return cFac\n", "class Solution:\n    def clumsy(self, N: int) -> int:\n        x = ['*', '//', '+', '-'] * (10000//4)\n        x = iter(x)\n        ans = str(N)\n        i = N-1\n        while i > 0:\n            op = next(x)\n            ans += (op+str(i))\n            i -= 1\n        return eval(ans)\n            \n\n", "class Solution:\n    def clumsy(self, N: int) -> int:\n        op = ['*', '//', '+', '-']\n        op_idx = -1\n        idx = N\n        result = str(N)\n        while idx > 1:\n            idx -= 1\n            op_idx = (op_idx+1)%4\n            result += op[op_idx] + str(idx)\n        return eval(result)\n            \n", "class Solution:\n    def clumsy(self, N: int) -> int:\n        res = []\n        \n        counter = 0\n        for num in reversed(list(range(1, N + 1))):\n            res.append(str(num))\n            if counter == 0:\n                res.append('*')\n            elif counter == 1:\n                res.append('//')\n            elif counter == 2:\n                res.append('+')\n            elif counter == 3:\n                res.append('-')\n            \n            counter += 1\n            if counter == 4:\n                counter = 0\n            \n        res.pop()\n        \n        return eval(''.join(res))\n", "class Solution:\n    def clumsy(self, N: int) -> int:\n        A = []\n        for i in range(N):\n            A.append(str(N - i))\n            if i % 4 == 0:\n                A.append('*')\n            elif i % 4 == 1:\n                A.append('//')\n            elif i % 4 == 2:\n                A.append('+')\n            else:\n                A.append('-')\n                \n        A.pop()\n        return eval(''.join(A))", "class Solution:\n    def clumsy(self, N: int) -> int:\n        res = None\n        while N > 0:\n            val = N\n            N -= 1\n            print(N, val, res)\n            if N > 0:\n                val = val * N\n                N -= 1\n            print(N, val, res)\n            if N > 0:\n                val = val // N\n                N -= 1\n            print(N, val, res)\n            if res is None:\n                if N > 0:\n                    val = val + N\n                    N -= 1\n                print(N, val, res)\n                res = val\n            else:\n                if N > 0:\n                    val = val - N\n                    N -= 1\n                print(N, val, res)\n                res -= val\n            print(N, val, res)\n        return res", "'''\n1006. Clumsy Factorial.  Medium\n\nNormally, the factorial of a positive integer n is the product\nof all positive integers less than or equal to n.\nFor example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1.\n\nWe instead make a clumsy factorial: using the integers in decreasing order,\nwe swap out the multiply operations for a fixed rotation of operations:\nmultiply (*), divide (/), add (+) and subtract (-) in this order.\n\nFor example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1.\nHowever, these operations are still applied using the usual order\nof operations of arithmetic: we do all multiplication and division\nsteps before any addition or subtraction steps, and multiplication\nand division steps are processed left to right.\n\nAdditionally, the division that we use is floor division\nsuch that 10 * 9 / 8 equals 11.  This guarantees the result is an integer.\n\nImplement the clumsy function as defined above: given an integer N,\nit returns the clumsy factorial of N.\n\nExample 1:\nInput: 4\nOutput: 7\nExplanation: 7 = 4 * 3 / 2 + 1\n\nExample 2:\nInput: 10\nOutput: 12\nExplanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1\n\nNote:\n1 <= N <= 10000\n-2^31 <= answer <= 2^31 - 1  \nThe answer is guaranteed to fit within a 32-bit integer.\n\nAccepted 11, 010 / 20, 603 submissions.\n'''\n\nclass SolutionWhile:\n    '''\n    Runtime: 36 ms, faster than 77.40% of Python3 online submissions for Clumsy Factorial.\n    Memory Usage: 14.2 MB, less than 41.24% of Python3 online submissions for Clumsy Factorial.\n\n    Runtime: 40 ms, faster than 68.26% in Python3.\n    Memory Usage: 12.8 MB, less than 100.00% in Python3.\n    '''\n    def clumsy(self, N: int) -> int:\n        '''\n        1006. Clumsy Factorial\n        '''\n        R = N\n        # set_trace()\n        N -= 1\n        if N:\n            R *= N\n            N -= 1\n            if N:\n                R //= N\n                N -= 1\n                if N:\n                    R += N\n                    N -= 1\n        while N:\n            if N > 2:\n                R -= N*(N-1)//(N-2)\n                N -= 3\n            elif N > 1:\n                R -= N*(N-1)\n                N -= 2\n            elif N > 0:\n                R -= N\n                N -= 1\n            if not N:\n                break\n            R += N\n            N -= 1\n\n        return R\n\n###############################################################################\nclass Solution:\n    pass\n\nSolution = SolutionWhile\n# Solution = SolutionMathTricks\n", "'''\n1006. Clumsy Factorial.  Medium\n\nNormally, the factorial of a positive integer n is the product\nof all positive integers less than or equal to n.\nFor example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1.\n\nWe instead make a clumsy factorial: using the integers in decreasing order,\nwe swap out the multiply operations for a fixed rotation of operations:\nmultiply (*), divide (/), add (+) and subtract (-) in this order.\n\nFor example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1.\nHowever, these operations are still applied using the usual order\nof operations of arithmetic: we do all multiplication and division\nsteps before any addition or subtraction steps, and multiplication\nand division steps are processed left to right.\n\nAdditionally, the division that we use is floor division\nsuch that 10 * 9 / 8 equals 11.  This guarantees the result is an integer.\n\nImplement the clumsy function as defined above: given an integer N,\nit returns the clumsy factorial of N.\n\nExample 1:\nInput: 4\nOutput: 7\nExplanation: 7 = 4 * 3 / 2 + 1\n\nExample 2:\nInput: 10\nOutput: 12\nExplanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1\n\nNote:\n1 <= N <= 10000\n-2^31 <= answer <= 2^31 - 1  \nThe answer is guaranteed to fit within a 32-bit integer.\n\nAccepted 11, 010 / 20, 603 submissions.\n'''\n\nclass SolutionWhile:\n\n    def clumsy(self, N: int) -> int:\n        '''\n        1006. Clumsy Factorial\n        Runtime: 40 ms, faster than 68.26% in Python3.\n        Memory Usage: 12.8 MB, less than 100.00% in Python3.\n        '''\n        R = N\n        # set_trace()\n        N -= 1\n        if N:\n            R *= N\n            N -= 1\n            if N:\n                R //= N\n                N -= 1\n                if N:\n                    R += N\n                    N -= 1\n        while N:\n            if N > 2:\n                R -= N*(N-1)//(N-2)\n                N -= 3\n            elif N > 1:\n                R -= N*(N-1)\n                N -= 2\n            elif N > 0:\n                R -= N\n                N -= 1\n            if not N:\n                break\n            R += N\n            N -= 1\n\n        return R\n\n###############################################################################\nclass Solution:\n    pass\n\nSolution = SolutionWhile\n# Solution = SolutionMathTricks\n", "class Solution:\n    def clumsy(self, N: int) -> int:\n        \n        res = 0\n        for i in range(N, 0, -4):\n            if i >= 4:\n                if i == N:\n                    res += i * (i-1) // (i-2) + (i-3)\n                else:\n                    res -= i * (i-1) // (i-2) - (i-3)\n            #print(res)\n        \n        neg = [1, -1][int(N >= 4)]\n        \n        if N % 4 == 3:\n            res += 6 * neg\n        elif N % 4 == 2:\n            res += 2 * neg\n        elif N % 4 == 1:\n            res += 1 * neg\n        return int(res)", "class Solution:\n    def clumsy(self, N: int) -> int:\n        return clumsy(N, 1)\n        \n        \ndef clumsy(N: int, sign: int) -> int:\n    if N == 1:\n        return sign * 1\n    if N == 2:\n        return sign * 2  # sign * 2 * 1\n    if N == 3:\n        return sign * 6  # sign * 3 * 2 // 1\n    if N == 4:\n        return sign * 6 + 1  # sign * 4 * 3 // 2 + 1\n\n    return sign * (N * (N-1) // (N-2)) + (N-3) + clumsy(N-4, -1)\n\n\n# 10 * 9 // 8 + 7 + (-6 * 5 // 4 + 3) + (-2 * 1)\n# 11 + 7 - 7 + 3 - 2 == 12\n", "class Solution:\n    def clumsy(self, N: int) -> int:\n#         if N <= 2:\n#             return N\n#         if N <= 4:\n#             return N + 3\n        \n#         if (N - 4) % 4 == 0:\n#             return N + 1\n#         elif (N - 4) % 4 <= 2:\n#             return N + 2\n#         else:\n#             return N - 1\n        magic = [1, 2, 2, -1, 0, 0, 3, 3]\n        return N + (magic[N % 4] if N > 4 else magic[N + 3])"]