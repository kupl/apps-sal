["def determinant(m):\n    a = 0\n    if len(m) == 1:\n        a = m[0][0]\n    else:\n        for n in xrange(len(m)):\n            if (n + 1) % 2 == 0:\n                a -= m[0][n] * determinant([o[:n] + o[n+1:] for o in m[1:]])\n            else:\n                a += m[0][n] * determinant([o[:n] + o[n+1:] for o in m[1:]])\n                \n    return a", "import numpy as np\n\ndef determinant(a):\n    return round(np.linalg.det(np.matrix(a)))", "import numpy as np\ndef determinant(matrix):\n    return round(np.linalg.det(matrix))", "def determinant(matrix):\n    #your code here\n    result = 0\n    l = len(matrix)\n\n    #base case when length of matrix is 1\n    if l == 1:\n        return matrix[0][0]\n\n    #base case when length of matrix is 2\n    if l == 2:\n        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n\n    #for length of matrix > 2\n    for j in range(0, l):\n        # create a sub matrix to find the determinant\n        if l!=2:\n            sub_matrix = []               \n            sub_matrix = [(row[0:j]+row[j+1:]) for row in matrix[1:]]\n        result = result + (-1)**j * matrix[0][j] * determinant(sub_matrix)\n    return result", "def determinant(matrix):\n    return reduce(lambda r, i:r+(-1)**i*matrix[0][i]*determinant([m[:i]+m[i+1:] for m in matrix[1:]]),range(len(matrix[0])),0) if len(matrix) != 1 else matrix[0][0]", "def sub_determinant(matrix, i):\n    sub_matrix = []\n    for j in range(1,len(matrix)):\n        sub_matrix.append(matrix[j][:i] + matrix[j][i+1:])\n    return sub_matrix\n    \ndef determinant(matrix):\n    if len(matrix) == 0:\n        return 0\n    elif len(matrix) == 1:\n        return matrix[0][0]\n    elif len(matrix) == 2:\n        return matrix[0][0] * matrix[1][1] - matrix[0][1]*matrix[1][0]\n    else:\n        sum = 0\n        for i in range(0,len(matrix)):\n            if 1 == i & 1:\n                sum = sum - matrix[0][i] * determinant(sub_determinant(matrix,i))\n            else:\n                sum = sum + matrix[0][i] * determinant(sub_determinant(matrix,i))\n        return sum\n", "def determinant(m):\n    ans,sizeM = 0, len(m)\n    if sizeM == 1: return m[0][0]\n    for n in range(sizeM):\n        ans+= (-1)**n * m[0][n] * determinant([ m[i][:n]+m[i][n+1:] for i in range(1,sizeM) ])\n    return ans", "from numpy.linalg import det\ndeterminant=lambda m: int(round(det(m))) ", "def determinant(m):\n    if len(m) == 1 : return m[0][0]\n    if len(m) == 2 : return (m[0][0]*m[1][1]) - (m[0][1]*m[1][0])\n    li = [[m[j][:i] + m[j][i+1:] for j in range(1,len(m))] for i in range(len(m))]\n    return sum(-m[0][i]*(determinant(j)) if i&1 else m[0][i]*(determinant(j)) for i,j in enumerate(li))", "import numpy as np\n\n\ndef determinant(matrix):\n    return np.linalg.det(matrix).round()\n"]