["class Solution:\n     def getPermutation(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: str\n         \"\"\"\n         nums = list(\"123456789\")\n         k -= 1\n         factor = 1\n         for i in range(1, n):\n             factor *= i\n         res = []\n         for i in reversed(list(range(n))):\n             res.append(nums[k//factor])\n             nums.remove(nums[k//factor])\n             if i:\n                 k %= factor\n                 factor //= i\n         return \"\".join(res)\n", "class Solution:\n     def getPermutation(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: str\n         \"\"\"\n         def factorial(n):\n             if n == 0:\n                 return 1\n             m = 1\n             while n>0:\n                 m = m*n\n                 n -= 1\n             return m\n         ans = \"\"\n         digits = [i+1 for i in range(n)]\n         print((\"digits: \",digits))\n         total = factorial(n)\n         while(len(digits)>0):\n             rem = k%factorial(n-1)\n             digit = digits[(k//factorial(n-1) + 1*(rem>0)) -1]\n             ans+=str(digit)\n             digits.remove(digit)\n             k = rem\n             n -= 1\n         return ans\n             \n             \n \n", "class Solution:\n     import math\n     \n     def getPermutation(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: str\n         \"\"\"\n         a = 0\n         options = \"\"\n         for i in range(n):\n             options += str(i + 1)\n         ans = \"\"\n         while n > 0:\n             x = math.factorial(n - 1)\n             while k > x:\n                 k -= x\n                 a += 1\n             ans += options[a]\n             options = options[:a] + options[a + 1:]\n             a = 0\n             n -= 1\n         return ans", "class Solution:\n     def getPermutation(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: str\n         \"\"\"\n         import math\n         nums = list(range(1, n+1))\n         ans = ''\n         \n         k = k - 1 #make sure the divmod result fail in [0, n-1] instead of [1, n]\n         while n > 0:\n             n = n - 1\n             index, k = divmod(k, math.factorial(n))\n             ans = ans + str(nums[index])\n             nums.remove(nums[index])\n             \n         return ans \n         \n", "class Solution:\n     def getPermutation(self, n, k):\n         \"\"\"\n         Input:\n             n:  int\n             k:  int\n         Output:\n             str\n         \"\"\"\n         return self.__getPerm(set(range(1, n+1)), k)\n \n \n \n     def __getPerm(self, set_n, k):\n         \"\"\"\n         Input:\n             set_n:  set:    set of available number\n             k:  int:        k-th permuation\n         Output:\n             str\n         \"\"\"\n         if not set_n:\n             return ''\n \n         arr_n = sorted(set_n)\n         n = len(arr_n)\n         i = 0\n         fac = 1     # i!\n \n         while i+1 < n:\n             i += 1\n             fac *= i\n         \n         # fac = (n-1)!\n         i_digit = (k-1)//fac\n         k = k - i_digit*fac\n         digit = arr_n[i_digit]\n \n         set_n.remove(digit)\n         return str(digit) + self.__getPerm(set_n, k)\n", "class Solution:\n     def getPermutation(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: str\n         \"\"\"\n         nums = [i + 1 for i in range(0, n)]\n         def nextnum(nn):\n             cnt = 0\n             for i in range(0, len(nums)):\n                 if nums[i] == 0:\n                     continue\n                 cnt += 1\n                 if cnt == nn:\n                     ret = nums[i]\n                     nums[i] = 0\n                     return ret\n         \n         facts = [1]\n         for i in range(1, n+2):\n             facts.append(facts[i-1] * i)\n         perm = []\n         while (n > 1):\n             nk = (k - 1) // facts[n-1] + 1\n             rk = (k - 1) % facts[n-1] + 1\n             perm.append(nextnum(nk))\n             k = rk\n             n -= 1\n         perm.append(nextnum(k))\n         return \"\".join([str(x) for x in perm])\n", "class Solution:\n     def factorial(self, n):\n         if n <= 1:\n             return 1\n         return self.factorial(n-1) * n\n     \n     def getPermutation(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: str\n         \"\"\"\n         r = ''\n         nums = [i+1 for i in range(n)]\n         m = n \n         while m:\n             np = self.factorial(m-1)\n             i = (k-1)//np\n             k -= i*np\n             r += str(nums[i])\n             del nums[i]\n             m = len(nums)\n         return r\n         \n", "class Solution:\n     def getPermutation(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: str\n         \"\"\"\n         \n         import math\n         if k > math.factorial(n):\n             return None\n         else:\n             nums = [str(i) for i in range(1,n+1)]\n             ans = ''\n             while k % math.factorial(len(nums)) != 0:\n                 i = math.ceil(k / math.factorial(len(nums)-1))\n                 k %= math.factorial(len(nums)-1)\n                 ans += nums[i-1]\n                 nums.pop(i-1)\n             ans += ''.join(nums[::-1])\n             return ans\n                     \n", "class Solution:\n     def getPermutation(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: str\n         \"\"\"\n         ans = \"\"\n         nums = list(range(1,n+1))\n         m = self.factorial(n-1)\n         \n         while len(nums)>1:\n             print(\"n=\",n, \", k=\",k, \" m=\", m)\n             remainer = k % m\n             if remainer==0:\n                 remainer = m\n             index = (k-remainer) // m\n             print(index)\n             ans += str(nums[index])\n             nums.remove(nums[index])\n             k = remainer\n             n -= 1\n             m = m // n\n             \n         ans += str(nums[0])\n         return ans\n     \n     def factorial(self, n):\n         if n==1 or n==0:\n             return 1\n         else:\n             return n*self.factorial(n-1)", "class Solution:\n     def getPermutation(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: str\n         \"\"\"\n         ret = \"\"\n         strs = [str(_) for _ in range(1, n + 1)]\n         divisor = 1\n         for i in range(1, n + 1): \n             divisor *= i\n         total_index = k - 1\n         while len(ret) < n:\n             divisor //= len(strs)\n             index = total_index // divisor\n             total_index %= divisor\n             ret += strs[index]\n             strs.pop(index)\n         return ret", "class Solution:\n     def getPermutation(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: str\n         \"\"\"\n         numbers = list(range(1, n+1))\n         permutation = ''\n         k -= 1\n         \n         while numbers:\n             n -= 1\n             index, k = divmod(k, math.factorial(n))\n             '''print(index)\n             print(numbers)'''\n             permutation += str(numbers[index])\n             numbers.remove(numbers[index])\n             \n         return permutation ", "class Solution:\n     def getPermutation(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: str\n         \"\"\"\n         string = \"\"\n         selection = [i for i in range(n + 1)]\n         while n > 0: \n             quo, temp = divmod(k - 1, self.factorial(n - 1))\n             string += str(selection[quo + 1])\n             selection.remove(selection[quo + 1])\n             n -= 1\n             k = temp + 1\n         return string\n         \n         \n     def factorial(self, n): \n         if not n: return 1\n         product = 1\n         for i in range(1, n + 1): \n             product *= i \n         return product", "class Solution:\n     def getPermutation(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: str\n         \"\"\"\n \n         def fn(x, y):\n             return x*y\n \n         import functools\n \n         nums = list(range(1, n+1))\n         nn = functools.reduce(fn, nums)\n         out = \"\"\n         k = k-1\n         \n         while n > 1:\n             nn = nn // n\n             \n             idx, k = k//nn, k%nn \n             out = out + str(nums[idx])\n             nums.remove(nums[idx])\n \n             n = n - 1\n \n         out = out + str(nums[0])\n         return out        \n \n", "class Solution:\n     def getPermutation(self, n, k):\n         \"\"\"\n         :type n: int\n         :type k: int\n         :rtype: str\n         \"\"\"\n         numbers = [x for x in range(1, n+1)] \n \n         factorial = [1]* n\n         for i in range(1,n):\n             factorial[i] = factorial[i-1]*(i)\n \n         result = []\n \n         for i in range(1, n+1):\n             index = (k-1)//factorial[n-i]\n             k=k%factorial[n-i]\n \n             result.append(numbers[index])\n             numbers.remove(numbers[index])\n         return ''.join(map(str,result))\n"]