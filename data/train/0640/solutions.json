["def gcd(a,b):\r\n\tif b==0:return a\r\n\telse:return gcd(b,a%b)\r\ndef lcm(a,b):\r\n\tm=a*b\r\n\tg=gcd(a,b)\r\n\treturn int(m/g)\r\nfor _ in range(int(input())):\r\n\tx,y=[int(x) for x in input().split()]\r\n\tl=lcm(x,y)\r\n\ts=int(l/x)\r\n\tt=int(l/y)\r\n\tprint(s+t-2)", "for i in range(int(input())):\r\n    def gcd(a,b):\r\n        if a == 0:\r\n            return b\r\n        return gcd(b % a, a)\r\n    \r\n    def lcm(a,b):\r\n        return (a / gcd(a,b))* b\r\n    x,y=map(int,input().split())\r\n    lc=lcm(x,y)\r\n    x=lc/x\r\n    y=lc/y\r\n    print(int(x+y-2))", "# def find(x,y):\n#     if x==y:\n#         return 0\n    \n#     if x > y:\n#       greater = x\n#     else:\n#       greater = y\n\n#     while(True):\n#       if((greater % x == 0) and (greater % y == 0)):\n#           lcm = greater\n#           break\n#       greater += 1\n#     return lcm\ndef compute_gcd(x, y):\n\n   while(y):\n       x, y = y, x % y\n   return x\n\n# This function computes LCM\ndef compute_lcm(x, y):\n   \n   lcm = (x*y)//compute_gcd(x,y)\n   return lcm\n# cook your dish here\nt = int(input())\n\n\nfor i in range(t):\n    x_y = input().split()\n    x = int(x_y[0])\n    y = int(x_y[1])\n    if x == y:\n        print(0)\n    else:\n        sweetness = compute_lcm(x,y)\n        x = (sweetness/x)-1\n        y = (sweetness/y)-1\n        print(int(x+y))", "# cook your dish here\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return (x*y)//(gcd(x,y))\n\n\nabc=\"abcdefghijklmnopqrstuvwxyz\"\n\npi=3.141592653589793238\n\nt = int(input())\nfor _ in range(t):\n    x,y = map(int,input().split())\n    comm = lcm(x,y)\n    x_n = comm//x - 1\n    y_n = comm//y - 1\n    print(x_n + y_n)", "# cook your dish here\nimport math\nt = int(input())\nfor i in range(t):\n    x, y = list(map(int, input().split()))\n    if x != y:\n        l = x * y // math.gcd(x, y)\n        a = (l // x) - 1\n        b = (l // y) - 1\n        print(a + b)\n    else:\n        print(0)\n", "def gcd(a, b):\r\n    if a == 0:\r\n        return b\r\n    return gcd(b % a, a)\r\ndef lcm(a, b):\r\n    return (a / gcd(a, b)) * b\r\nt=int(input())\r\nfor items in range(t):\r\n    n,y=list(map(int,input().split()))\r\n    if n==y:\r\n        print('0')\r\n    else:\r\n        ans=lcm(n,y)\r\n        first=(ans-n)//n\r\n        second=(ans-y)//y\r\n        print(int(first+second))\r\n", "from collections import Counter\r\nimport string\r\nimport math\r\nimport sys\r\n# sys.setrecursionlimit(10**6) \r\ndef isprime(x): \r\n      \r\n    # check for numbers from 2 \r\n    # to sqrt(x) if it is divisible \r\n    # return false \r\n    i = 2\r\n    while(i * i <= x): \r\n        if (x % i == 0): \r\n            return 0\r\n        i+=1\r\n    return 1\r\ndef isSumOfKprimes(N, K): \r\n      \r\n    # N < 2K directly return false \r\n    if (N < 2 * K): \r\n        return 0\r\n  \r\n    # If K = 1 return value depends \r\n    # on primality of N \r\n    if (K == 1): \r\n        return isprime(N) \r\n  \r\n    if (K == 2): \r\n          \r\n        # if N is even directly \r\n        # return true; \r\n        if (N % 2 == 0): \r\n            return 1\r\n  \r\n        # If N is odd, then one  \r\n        # prime must be 2. All  \r\n        # other primes are odd \r\n        # and cannot have a pair \r\n        # sum as even. \r\n        return isprime(N - 2)\r\n      \r\n  \r\n    # If K >= 3 return true; \r\n    return 1\r\nfrom math import pow, floor \r\n  \r\nres = 0\r\ndef checkRecursive(num, x, k, n): \r\n    nonlocal res \r\n    if (x == 0): \r\n        res += 1\r\n      \r\n    r = floor(pow(num, (1 / n))); \r\n  \r\n    for i in range(k + 1, r + 1, 1): \r\n        a = x - int(pow(i, n)) \r\n        if (a >= 0): \r\n            checkRecursive(num, x - int(pow(i, n)), i, n) \r\n    return res \r\n  \r\n# Wrapper over checkRecursive() \r\ndef check(x, n): \r\n    return checkRecursive(x, x, 0, n) \r\nfrom fractions import Fraction\r\ndef array_int():\r\n    return [int(i) for i in sys.stdin.readline().split()]\r\ndef vary(arrber_of_variables):\r\n    if arrber_of_variables==1:\r\n        return int(sys.stdin.readline())\r\n    if arrber_of_variables>=2:\r\n        return list(map(int,sys.stdin.readline().split())) \r\ndef makedict(var):\r\n    return dict(Counter(var))\r\ntestcases=vary(1)\r\nfact=[1 for i in range(11)]\r\nfor i in range(1,10):\r\n    fact[i]=fact[i-1]*i\r\nfor _ in range(testcases):\r\n    n,k=vary(2)\r\n    if n==k:\r\n        print(0)\r\n        continue\r\n    print(((n*k)//math.gcd(n,k))//n+((n*k)//math.gcd(n,k))//k-2)\r\n    \r\n   \r\n    \r\n        \r\n\r\n    \r\n    \r\n", "def gcd(a,b):\r\n    if a == 0:\r\n        return b\r\n    return gcd(b % a, a)\r\n \r\n# Function to return LCM of two numbers\r\ndef lcm(a,b):\r\n    return (a // gcd(a,b))* b\r\nt=int(input())\r\nfor i in range(0,t):\r\n    n,m=map(int,input().split())\r\n    k=lcm(n,m)\r\n    a=(k//n)-1\r\n    b=(k//m)-1\r\n    print(a+b)", "# cook your dish here\ndef gcd(a,b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\ndef lcm(a,b):\n    return (a / gcd(a,b))* b\nT=int(input())\nfor i in range(T):\n    init=list(map(int, input().split()))\n    X=init[0]\n    Y=init[1]\n    q=lcm(X,Y)\n    t1=q/X\n    t2=q/Y\n    print(int(t1+t2-2))", "# cook your dish here\ndef lcm(a,b):\n    from math import gcd\n    return a*b// gcd(a,b)\n    \nitr = int(input())\nfor _ in range(itr):\n    val= list(map(int,input().split()))\n    a=val[0]\n    b=val[1]\n    l=lcm(a,b)\n    f= l/a -1\n    s= l/b -1\n    print(int(f+s))\n    \n\n\n", "# cook your dish here\nimport math\nt = int(input())\nfor i in range(t):\n    x,y = list(map(int,input().split()))\n    if x == y:\n        print(0)\n    else:\n        a = math.gcd(x,y)\n        b = x*y//(a)\n        c = b//x\n        d = b//y\n        print(c+d-2)\n", "# cook your dish here\r\nimport math\r\nfor _ in range(int(input())):\r\n    n,m=list(map(int,input().split()))\r\n\r\n    t=math.gcd(n,m)\r\n    #print(\"t \",t)\r\n    t2=(n*m//t)\r\n    #print(\"t2 \",t2)\r\n    print(t2//n-1 +t2//m-1)\r\n  \r\n            \r\n", "def hcf(a,b): \r\n    if(b==0): \r\n        return a \r\n    else: \r\n        return hcf(b,a%b)\r\nfor i in range(int(input())):\r\n    c=list(map(int,input().split()))\r\n    if c[0]==c[1]:\r\n        print(0)\r\n    else:\r\n        lcm=(c[0]*c[1]//hcf(c[0],c[1]))\r\n        x=(lcm//c[0]-1)\r\n        y=(lcm//c[1]-1)\r\n        print(x+y)", "# cook your dish here\nfor _ in range(int(input())):\n    x,y=list(map(int,input().split()))\n    a,b=x,y\n    while(y):\n        x, y = y, x % y\n    k=x\n    \n    if (a+b)//k !=0:\n    \tprint((a+b)//k  -2)\n    else:\n    \tprint(0)\n", "def gcd(a, b):\r\n    if a == 0:\r\n        return b\r\n    return gcd(b % a, a)\r\ndef lcm(a, b):\r\n    return (a / gcd(a, b)) * b\r\nt=int(input())\r\nfor items in range(t):\r\n    n,y=list(map(int,input().split()))\r\n    if n==y:\r\n        print('0')\r\n    else:\r\n        ans=lcm(n,y)\r\n        first=(ans-n)//n\r\n        second=(ans-y)//y\r\n        print(int(first+second))\r\n", "T=int(input())\nfor i in range(T):\n    arr=list(map(int,input().strip().split()))\n    X=arr[0]\n    Y=arr[1]\n\n    def gcd(a,b):\n    \tif a == 0:\n    \t\treturn b\n    \treturn gcd(b % a, a)\n    \n    # Function to return LCM of two numbers\n    def lcm(a,b):\n    \treturn (a / gcd(a,b))* b\n    \n    num=lcm(X,Y)\n    ans_X=num/X\n    ans_Y=num/Y\n    ans=int(ans_X+ans_Y-2)\n    print(ans)\n", "def compute_gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\n   \ndef f_lcm(x, y):\n   lcm = (x*y)//compute_gcd(x,y)\n   return lcm\n   \n   \nt = int(input().strip())\nfor i in range(t):\n    res = 0\n    x_y = [int(i) for i in input().split()]\n    x = x_y[0]\n    y = x_y[1]\n    lcm = f_lcm(x, y)\n    temp = lcm\n    if(x == y):\n        print(0)\n    else:\n        res += lcm//x - 1\n        res += lcm//y - 1\n        print(res)\n            \n            \n            \n    \n", "import math\nfor _ in range(int(input())):\n    x,y=[int(x) for x in input().split()]\n    if x==y:\n        print(0)\n        continue\n    else:\n        p=math.gcd(x,y)\n        xx=(x*y)//p\n        # print(xx)\n        print(int((xx//x)+(xx/y)-2))\n        \n", "import math\n\n\n\ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\n\n\n\ndef __starting_point():\n    t=int(input())\n    for _ in range(t):\n        li = list(map(int,input().split())) \n        a=li[0]\n        b=li[1]\n    \n        if a==b :\n            print(0)\n        else:\n            l=lcm(a,b)\n            #print(l)\n            res= (l/a) + (l/b)\n            #print(l/a, b%l)\n            print(int(res-2) )\n__starting_point()", "def computeGCD(x, y): \r\n  \r\n   while(y): \r\n       x, y = y, x % y \r\n  \r\n   return x\r\nfor _ in range(int(input())):\r\n    x,y=list(map(int,input().split()))\r\n    p=x*y\r\n    g=computeGCD(x,y)\r\n    l=p//g\r\n    print((l//x)+(l//y)-2)\r\n        \r\n            \r\n", "import math\n\n\n\ndef lcm(a,b):\n    return abs(a*b) // math.gcd(a, b)\n\n\n\ndef __starting_point():\n    t=int(input())\n    for _ in range(t):\n        li = list(map(int,input().split())) \n        a=li[0]\n        b=li[1]\n    \n        if a==b :\n            print(0)\n        else:\n            l=lcm(a,b)\n            #print(l)\n            res= (l/a) + (l/b)\n            #print(l/a, b%l)\n            print(int(res-2) )\n__starting_point()", "# cook your dish here\ndef gcd(a,b):\n    if a==0:\n        return b\n    return gcd(b%a,a)\ndef lcm(a,b):\n    return (a/gcd(a,b))*b\nt=int(input())\nfor _ in range(t):\n    x,y=list(map(int,input().split()))\n    if x==y:\n        print(0)\n    else:\n        a=lcm(x,y)\n        print(int((a/x-1)+(a/y-1)))\n", "from math import gcd \r\ndef lcm(x,y):\r\n    return x*y//(gcd(x,y)) \r\nfor i in range(int(input())):\r\n    n,m=list(map(int,input().split())) \r\n    k=lcm(n,m) \r\n    print(k//n+k//m-2) \r\n"]