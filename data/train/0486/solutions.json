["class Solution:\n    def queryString(self, S: str, N: int) -> bool:\n        for i in range(1,N+1):\n            b = bin(i).replace('0b','')\n            if b not in S:\n               return False\n        return True", "class Solution:\n    def int_to_bin(self,x):\n        ret=''\n        if x==0:\n            return '0' \n        while x>0:\n            ret=str(x%2)+ret \n            x=x//2 \n        return ret\n    def queryString(self, S: str, N: int) -> bool:\n        mp={} \n        max_len=min(31,len(S)) \n        for k in range(1,max_len+1):\n            for i in range(len(S)-k+1):\n                mp[S[i:i+k]]=True\n        for i in range(1,N+1):\n            if self.int_to_bin(i) not in mp:\n                return False \n        return True\n", "class Solution:\n    def queryString(self, S: str, N: int) -> bool:\n        for i in range(1,N+1):\n            if bin(i)[2:] not in S:\n                return False\n        \n        return True", "class Solution:\n    def queryString(self, S: str, N: int) -> bool:\n        # (bin(1))\n        for i in range(1, N+1):\n            curr = bin(i)[2:]\n            # print(curr)\n            if S.find(curr) == -1:\n                return False\n            \n        return True", "class Solution:\n    def queryString(self, S: str, N: int) -> bool:\n        if '1' not in S: return False\n        res = set()\n        cur = set()\n        for s in S:\n            if s == '0': \n                cur = {c * 2 for c in cur} | {0}\n            else:\n                cur = {c * 2 + 1 for c in cur} | {1}\n            res |= cur\n        for i in range(1, N+1):\n            if i not in res: return False\n        return True", "class Solution:\n    def queryString(self, S: str, M: int) -> bool:\n        count = defaultdict(int)\n        \n        N = len(S)\n        \n        def f(ss):\n            ans = 0\n            nn = len(ss) - 1\n            \n            for ch in ss:\n                if ch == '1':\n                    ans += (1 << nn)\n                nn -= 1\n            \n            return ans\n            \n        cnt = 0\n        \n        for n1 in range(N):\n            for n2 in range(n1, N):\n                if (n2 - n1 < 32):\n                    val = f(S[n1:n2+1])\n                    if val >= 1 and val <= M and count[val] == 0:\n                        cnt += 1\n                        count[val] = 1\n                else:\n                    break\n        \n        if cnt == M:\n            return True\n        return False", "class Solution:\n    def queryString(self, S: str, M: int) -> bool:\n        count = defaultdict(int)\n        \n        N = len(S)\n        \n        def f(ss):\n            ans = 0\n            nn = len(ss) - 1\n            \n            for ch in ss:\n                if ch == '1':\n                    ans += (1 << nn)\n                nn -= 1\n            \n            return ans\n            \n        cnt = 0\n        \n        for n1 in range(N):\n            for n2 in range(n1, N):\n                if (n2 - n1 < 32):\n                    val = f(S[n1:n2+1])\n                    if val >= 1 and val <= M and count[val] == 0:\n                        cnt += 1\n                        count[val] = 1\n        \n        if cnt == M:\n            return True\n        return False", "class Solution:\n    def queryString(self, S: str, N: int) -> bool:\n        substrings = set()\n        for i in range(len(S)):\n            for j in range(i, len(S)+1):\n                substrings.add(S[i:j])\n        #print(substrings)\n        for i in range(1,N+1):\n            binN = str(bin(i))[2:]\n            #print(binN)\n            if binN in substrings:\n                continue\n            else:\n                return False\n        return True", "class Solution:\n    def queryString(self, S: str, N: int) -> bool:\n        seen = set()\n        if(len(S)<2):\n            seen.add(S)\n        for i in range(len(S)-1):\n            for j in range(i+1,len(S)):\n                if(S[i]=='0'):\n                    seen.add(S[i+1:j+1])\n                else:\n                    seen.add(S[i:j+1])\n        for i in range(1,N+1):\n            binary = bin(i)[2:]\n            if(binary not in seen):\n                return False\n        return True\n        \n", "class Solution:\n    def queryString(self, S: str, N: int) -> bool:\n        return all(bin(i)[2:] in S for i in range(N, N // 2, -1))", "class Solution:\n    def queryString(self, S: str, N: int) -> bool:\n        st = set()\n        \n        for size in range(1, len(S)+1):\n            for i in range(len(S) - size +1):\n                st.add(S[i:i+size])\n        \n        #print(st)\n        \n        for i in range(1,N+1):\n            #print(bin(i)[2:])\n            if not bin(i)[2:] in st:\n                \n                return False\n        \n            \n        return True", "class Solution:\n    def queryString(self, S: str, N: int) -> bool:\n        \n        dic = set()\n        \n        for i in range(len(S)):\n            for l in range(len(S) - i):\n                dic.add(S[i:i+l+1])\n        for x in range(1, N+1):\n            if str(bin(x)[2:]) not in dic:\n                return False\n        return True", "from itertools import combinations \nclass Solution:\n    def queryString(self, S: str, N: int) -> bool:\n        d=set()\n        for i in range(0,len(S)+1):\n            j=0\n            end=i+1\n            while end<len(S)+1:\n                d.add(S[j:end])\n                j=j+1\n                end=end+1\n        q=1\n        for i in range(1,N+1):\n            if bin(i)[2:] not in d:\n                q=0\n                break\n        #print(type(bin(3)[2:]))\n        return q\n", "\nclass Solution:\n    def queryString(self, S: str, N: int) -> bool:\n        n = len(S)\n        for i in range(30,-1,-1):\n            if N&(1<<i):\n                msb = i\n                break\n        def get(msb):\n            s =  set()\n            num = 0\n            x = 0\n            if msb > 0:\n                x = 1<<(msb-1)\n            for i in range(n):\n                if i == msb:\n                    if S[i] == '1':\n                        num += 1\n                    if x < num <= N:\n                        s.add(num)\n                elif(i > msb):\n                    # print(num,end=\\\" \\\")\n                    if num&(1<<msb):\n                        num -= (1<<msb)\n                    num <<= 1\n                    if S[i] == '1':\n                        num += 1\n                    if x < num <= N:\n                        s.add(num)\n                else:\n                    if S[i]=='1':\n                        num |= (1<<(msb- i))\n            return s\n        \n        s = get(msb)\n        p = 0\n        if msb > 0:\n            p = 1<<(msb-1)\n        if msb > 0:\n            s1 = get(msb-1)\n            p = 0\n            if msb > 1:\n                p = 1<<(msb-2)\n            for i in s1:\n                s.add(i)\n        # print(list(s),p)\n        return len(s) == (N - p)\n        \n         \n    \n", "class Solution:\n    def queryString(self, S: str, N: int) -> bool:\n        # print(str(ord(N, 2)))\n        \n        def is_x_in(x):\n            binary = []\n            while x:\n                binary.append(x % 2)\n                x = x >> 1\n            binary = ''.join(str(n) for n in reversed(binary))\n            # print(binary)\n            return S.find(binary) >= 0\n\n        return all(is_x_in(x) for x in range(N+1))\n    \n"]