["def binarySearch(arr, l, r, x):\n mid=0\n while l <= r: \n  mid = l + (r - l)//2; \n  if arr[mid] == x: \n   return mid+1 \n  elif arr[mid] < x: \n   l = mid + 1\n  else: \n   r = mid - 1\n if mid!=len(arr):\n  if arr[mid]<x:\n   return mid+1\n return mid\ns=input()\nstrt=[]\nend=[]\nplc=[]\nlandr=[]\nl2r=[]\nlr=[]\nans=0\nn=len(s)\nif n!=1:\n for i in range(n):\n  strt.append([])\n  end.append([])\n  landr.append([0]*n)\n  l2r.append([0]*n)\n for i in range(n):        \n  for j in range(n):\n   if i-j<0 or i+j>=n:\n    break\n   if (s[i-j]==s[i+j]):\n    if i-j-1>=0:\n     strt[i-j-1].append(2*j+1)\n    if i+j+1<n:\n     end[i+j+1].append(2*j+1)\n   else:\n    break\n for i in range(n):\n  for j in range(n):\n   if i-j<0 or i+j+1>=n:\n    break\n   if (s[i-j]==s[i+j+1]):\n    if i-j-1>=0:\n     strt[i-j-1].append(2*j+2)\n    if i+j+2<n:\n     end[i+j+2].append(2*j+2)\n   else:\n    break\n for i in range(n):\n  end[i].sort()\n  strt[i].sort()\n for i in range(n-1):\n  for j in range(i+1,n):\n   if s[i]==s[j]:\n    lr.append([i,j])\n    if i>0 and j<n-1:\n     landr[i][j]=landr[i-1][j+1]+1\n    else:\n     landr[i][j]=1\n for i in lr:\n  tempans=1\n  l=i[0]\n  r=i[1]\n  length=r-l-1\n  tempans+=binarySearch(strt[l],0,len(strt[l])-1,length)\n  tempans+=binarySearch(end[r],0,len(end[r])-1,length)\n  l2r[l][r]=tempans\n for i in range(n):\n  for j in range(n):\n   ans+=l2r[i][j]*landr[i][j]\nprint(ans)", "import sys,math\nfrom sys import stdin,stdout\n\n\ns=stdin.readline().strip()\n\nispalin=[[0 for i in range(len(s)+1)] for i in range(len(s)+1)]\nsuff=[[-1 for i in range(len(s)+1)] for i in range(len(s)+1)]\npref=[[-1 for i in range(len(s)+1)] for i in range(len(s)+1)]\nlcp=[[0 for i in range(len(s)+1)] for i in range(len(s)+1)]\n\nfor i in range(0,len(s)):\n ispalin[i][i]=1;pref[i][i]=1;suff[i][i]=1\n ispalin[i][i+1]=1;pref[i][i+1]=2;suff[i][i+1]=2\n\n#for i in ispalin:\n #print(i)\n\nfor l in range(2,len(s)+1):\n for i in range(0,len(s)-l+1):\n  #print(i,i+l-1,s[i],s[i+l-1])\n  ispalin[i][i+l]=ispalin[i+1][i+l-1]*int(s[i]==s[i+l-1])\n  pref[i][i+l]=pref[i][i+l-1]+ispalin[i][i+l]\n  suff[i][i+l]=suff[i+1][i+l]+ispalin[i][i+l]\n\nfor i in range(len(s)):\n for j in range(i+1,len(s)):\n  lcp[i][j]=(lcp[i-1][j+1]+1)*int(s[i]==s[j])\n\n#\n\nans=0\n\nfor i in range(1,len(s)):\n for j in range(i,len(s)):\n  #if lcp[i-1][j]!=0:\n  #print(i,j,lcp[i-1][j],suff[i][j],pref[i][j],s[0:i],s[i:j],s[j:])\n  ans+=(lcp[i-1][j]*(suff[i][j]+pref[i][j]-1))\n#\nstdout.write(str(ans))\n\n\n", "# cook your dish here\nst = str(input())\n\ndef checkpal(i,j,k,l):\n \n a=i\n b=l\n while(a<b):\n  if st[a] != st[b]:\n   \n   return -1\n  \n  if(a==j):\n   a = k-1\n  if(b==k):\n   b = j+1\n\n  a+=1\n  b-=1 \n # print(i,j,k,l)\n # print(\"yes\")\n return 1\n\nl = len(st)\ncount = 0\nfor i in range(l):\n for j in range(i,l):\n  for k in range(j+1,l):\n   for m in range(k,l):\n    if checkpal(i,j,k,m) == 1: \n     count += 1\n   \nprint(count)", "def palSub(s,n,isPal):\n for gap in range(n):\n  for i in range(n-gap):\n   j = i + gap\n   if(gap == 0):\n    isPal[i][j] = 1\n   elif(gap == 1):\n    isPal[i][j] = 1 if(s[i] == s[j]) else 0\n   else:\n    isPal[i][j] = 1 if(s[i] == s[j] and isPal[i+1][j-1]) else 0\n return isPal\ndef case1(n,isPal,c1):\n for i in range(n):\n  for j in range(i,n):\n   if(i == j):\n    c1[i][j] = 1\n   else:\n    c1[i][j] = c1[i][j-1] + isPal[i][j]\n return c1\ndef case2(n,isPal,c2):\n for j in range(n-1,-1,-1):\n  for i in range(j,-1,-1):\n   if(i == j):\n    c2[i][j] = 1\n   else:\n    c2[i][j] = c2[i+1][j] + isPal[i][j]\n return c2\ndef getSub(s,n,c1,c2,res):\n for gap in range(n):\n  for i in range(n-gap):\n   j = i + gap\n   if(gap == 0):\n    res[i][j] = 0\n   elif(gap == 1):\n    res[i][j] = 1 if(s[i] == s[j]) else 0\n   elif(s[i] == s[j]):\n    res[i][j] = 1 + c1[i+1][j-1] + c2[i+1][j-1] + res[i+1][j-1]\n return res\ndef __starting_point():\n s = input()\n n = len(s)\n isPal = [[0 for x in range(n)]for y in range(n)]\n isPal = palSub(s,n,isPal)\n c1 = [[-1 for x in range(n)]for y in range(n)]\n c2 = [[-1 for x in range(n)]for y in range(n)]\n c1 = case1(n,isPal,c1)\n c2 = case2(n,isPal,c2)\n res = [[0 for x in range(n)]for y in range(n)]\n res = getSub(s,n,c1,c2,res)\n mycount = 0\n for i in range(n):\n  for j in range(n):\n   mycount += res[i][j]\n print(mycount)\n__starting_point()"]