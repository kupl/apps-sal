["n = int(input())\np = [tuple(map(int, input().split())) for i in range(n)]\n\ndef d(a, b):\n    return (a[0]-b[0], a[1]-b[1], a[2]-b[2], a[3]-b[3], a[4]-b[4])\n\ndef m(a, b):\n    t = 0\n    for i in range(5):\n        t += a[i] * b[i]\n    return t\n\ngood_points = []\nfor i in range(n):\n    good = True\n\n    for j in range(n):\n        if j == i:\n            continue\n        \n        ab = d(p[j], p[i])\n\n        for k in range(j + 1, n):\n            if k == i:\n                continue\n            \n            ac = d(p[k], p[i])\n            \n            if m(ab, ac) > 0:\n                good = False\n                break\n        \n        if not good:\n            break\n    \n    if good:\n        good_points.append(i)\n\nprint(len(good_points))\nfor i in good_points:\n    print(i + 1)\n", "n = int(input())\np = [tuple(map(int, input().split())) for i in range(n)]\n\ndef d(a, b):\n    return tuple(x - y for x, y in zip(a, b))\n\ndef m(a, b):\n    return sum(x * y for x, y in zip(a, b))\n\ngood_points = []\nfor i in range(n):\n    good = True\n\n    for j in range(n):\n        if j == i:\n            continue\n        \n        ab = d(p[j], p[i])\n\n        for k in range(j + 1, n):\n            if k == i:\n                continue\n            \n            ac = d(p[k], p[i])\n            \n            if m(ab, ac) > 0:\n                good = False\n                break\n        \n        if not good:\n            break\n    \n    if good:\n        good_points.append(i)\n\nprint(len(good_points))\nfor i in good_points:\n    print(i + 1)\n", "d = lambda i, j, k: sum((a - c) * (b - c) for a, b, c in zip(p[i], p[j], p[k]))*(i!=j)\nn = int(input())\nr = range(n)\np = [list(map(int, input().split())) for i in r]\nt = [k + 1 for k in r if all(d(i, j, k) <= 0 for i in r for j in r)] if n <12 else []\nprint(len(t))\nfor q in t: print(q)", "d = lambda i, j, k: sum((a - c) * (b - c) for a, b, c in zip(p[i], p[j], p[k])) * (i != j)\n\nn = int(input())\n\nr = list(range(n))\n\np = [list(map(int, input().split())) for i in r]\n\nt = [k + 1 for k in r if all(d(i, j, k) <= 0 for i in r for j in r)] if n < 12 else []\n\nfor q in [len(t)] + t: print(q)\n\n\n\n# Made By Mostafa_Khaled\n", "# Why do we fall ? So we can learn to pick ourselves up.\n\nfrom math import acos\n\ndef check(i,j,k):\n    num = 0\n    for l in range(0,5):\n        num += (points[j][l]-points[i][l])*(points[k][l]-points[i][l])\n    return num > 0\nn = int(input())\npoints = [[-1,-1,-1,-1,-1]]\nans = []\nfor _ in range(0,n):\n    pts = [int(i) for i in input().split()]\n    points.append(pts)\nfor i in range(1,n+1):\n    put = True\n    for j in range(1,n+1):\n        if j != i and put:\n            for k in range(1,n+1):\n                if j != k:\n                    if check(i,j,k):\n                        put = False\n                        break\n            if not put:\n                break\n    if put:\n        ans.append(i)\nprint(len(ans))\nprint(*ans)\n\n\n\n\n\n\n\"\"\"\n\n6\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n\n\n3\n0 0 1 2 0\n0 0 9 2 0\n0 0 5 9 0\n\n\n\"\"\"", "def check(a, b, c):\n    s = 0\n    for i in range(5):\n        s += (b[i] - a[i]) * (c[i] - a[i])\n    return s <= 0\n\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\nif n == 1 or n == 2:\n    print(n)\n    print(1)\n    if n == 2:\n        print(2)\n    return\n\nv = -1\ni = 0\nwhile i + 1 < n:\n    if v == -1:\n        if i + 2 < n:\n            if check(a[i], a[i + 1], a[i + 2]):\n                v = i\n            elif check(a[i + 1], a[i], a[i + 2]):\n                v = i + 1\n            elif check(a[i + 2], a[i], a[i + 1]):\n                v = i + 2\n        else:\n            break\n    else:\n        if not check(a[v], a[i], a[i + 1]):\n            if check(a[i], a[v], a[i + 1]):\n                v = i\n            elif check(a[i + 1], a[v], a[i]):\n                v = i + 1\n            else:\n                v = -1\n    i += 1\n\nif v == -1:\n    print(0)\n    return\n\nfor i in range(n):\n    if i == v:\n        continue\n    for j in range(i + 1, n):\n        if j == v:\n            continue\n        if not check(a[v], a[i], a[j]):\n            print(0)\n            return\n\nprint(1)\nprint(v + 1)\nreturn\n", "from math import acos,sqrt,pi\n\ndef norm(x):\n    if x==0:\n        return 0\n    else:\n        return sqrt(scalar(x,x))\n\ndef scalar(x,y):\n    return sum([x[i]*y[i] for i in range(5)])\ndef vector(p,q):\n    return ([ (q[i]-p[i]) for i in range(5) ])\n\nnumber=0\ngood_points=[]\n\nn=int(input())\nliste=[]\nfor _ in range(n):\n    x=list(map(int,input().split(\" \")))\n    liste.append(x)\n\nif n>11:\n    print(0)\nelse:\n    for i in range(n):\n        bool=True\n        for j in range(n):\n            if j!=i:\n                for k in range(n):\n                    if k!=j and k!=i:\n                        x=vector(liste[i],liste[j])\n                        y=vector(liste[i],liste[k])\n                        angle=acos(scalar(x,y)/norm(x)/norm(y))\n                        if angle<pi/2:\n                            bool=False\n        if bool:\n            good_points.append(i+1)\n            number+=1\n    if number>0:\n        answer=str(number)+' '\n        good_points.sort()\n        for element in good_points:\n            answer+='\\n'+str(element)\n        print(answer)\n    else:\n        print(0)"]