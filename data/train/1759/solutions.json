["from collections import defaultdict\n\n\ndef setter(prep,k,v,supSetter):\n    if callable(v): \n        def wrap(*args):\n            f = prep.d[k][len(args)]\n            if isinstance(f,int): raise AttributeError()\n            return f(*args)\n        prep.d[k][v.__code__.co_argcount] = v\n        v = wrap\n    supSetter(k,v)\n        \n        \nclass Prep(dict):\n    def __init__(self):         self.d = defaultdict(lambda: defaultdict(int))\n    def __setitem__(self,k,v):  setter(self, k, v, super().__setitem__)\n\n\nclass Meta(type):\n    @classmethod\n    def __prepare__(cls,*args, **kwds): return Prep()\n    \n    def __new__(metacls, name, bases, prep, **kwargs):\n        prep['_Meta__DCT'] = prep\n        return super().__new__(metacls, name, bases, prep, **kwargs)\n    \n    def __setattr__(self,k,v): setter(self.__DCT, k, v, super().__setattr__)", "from collections import defaultdict\ndef setter(prep, k, v, sup):\n    if callable(v):\n        def wrap(*args):\n            a = prep.d[k][len(args)]\n            if isinstance(a, int): raise AttributeError()\n            return a(*args)\n        prep.d[k][v.__code__.co_argcount] = v\n        v = wrap\n    sup(k, v)\n    \nclass Prep(dict):\n    def __init__(self): self.d = defaultdict(lambda: defaultdict(int))\n    def __setitem__(self,k,v): setter(self, k, v, super().__setitem__)\n\nclass Meta(type):\n    @classmethod\n    def __prepare__(cls, *args, **kwargs): return Prep()\n    \n    def __new__(metacls, name, bases, prep, **kwargs):\n        prep['_Meta__DCT'] = prep\n        return super().__new__(metacls, name, bases, prep, **kwargs)\n    \n    def __setattr__(self, k, v): setter(self.__DCT, k, v, super().__setattr__)"]