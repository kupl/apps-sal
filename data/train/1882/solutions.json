["# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def swapPairs(self, head):\n         \"\"\"\n         :type head: ListNode\n         :rtype: ListNode\n         \"\"\"\n         i = 1\n         node = head\n         prev = None\n         prev2 = None\n         while node is not None:\n             if i % 2 == 0 and i != 1:\n                 if prev2 is not None:\n                     prev2.next = node\n                 prev.next = node.next\n                 node.next = prev\n                 if i == 2:\n                     head = node\n                 node = prev\n             prev2 = prev\n             prev = node\n             node = node.next\n             i += 1\n         return head", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def swapPairs(self, head):\n         \"\"\"\n         :type head: ListNode\n         :rtype: ListNode\n         \"\"\"\n         if head == None:\n             return head\n         \n         i = head\n         j = head.next\n         k = None\n         \n         while i != None and j != None:\n             \n             i.next = j.next\n             j.next = i\n             \n             if i == head:   # reposition head if we're at the front of the list\n                 head = j\n             \n             if k:           # if we have a trailing node, link j into LL\n                 k.next = j\n                 \n             # update node pointers\n             if i.next != None:  \n                 j = i.next.next \n                 k = i\n             \n             i = i.next\n             \n         return head\n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def swapPairs(self, head):\n         \"\"\"\n         :type head: ListNode\n         :rtype: ListNode\n         \"\"\"\n         pre, pre.next = self, head\n         \n         while pre.next and pre.next.next:\n             \n             a = pre.next\n             b = a.next\n             pre.next, b.next, a.next = b, a, b.next\n             pre = a\n             \n         return self.next\n             \n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def swapPairs(self, head):\n         \"\"\"\n         :type head: ListNode\n         :rtype: ListNode\n         \"\"\"\n         node = head\n         while node and node.next :\n             node.val, node.next.val = node.next.val, node.val\n             node = node.next.next\n         return head\n                 ", "# Definition for singly-linked list.\n class ListNode:\n     def __init__(self, x):\n         self.val = x\n         self.next = None\n \n class Solution:\n     def swapPairs(self, head):\n         \"\"\"\n         :type head: ListNode\n         :rtype: ListNode\n         \"\"\"\n \n         if head is None or head.next is None:\n             return head\n         else:\n             first = head\n             second = first.next\n             third = second.next\n \n             second.next = first\n             first.next = self.swapPairs(third)\n             return second", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     # Iteratively\n     def swapPairs(self, head):\n         r = p = ListNode(0)\n         r.next = head\n \n         '''\n             h h.n h.n.n\n         '''\n         while head and head.next:\n             t = head.next\n \n             head.next = t.next\n             t.next = head\n \n             p.next = t\n             \n             p = t.next\n             head = head.next\n \n         return r.next\n \n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def swapPairs(self, head):\n         \"\"\"\n         :type head: ListNode\n         :rtype: ListNode\n         \"\"\"\n         \n         def swapTwo(head):\n             if not head.next:\n                 return head\n             elif not head.next.next:\n                 tmp = head.next\n                 head.next = None\n                 tmp.next = head\n                 return tmp\n             else:\n                 tmp = head.next\n                 head.next = swapTwo(tmp.next)\n                 tmp.next = head\n                 return tmp\n         \n         if not head:\n             return head\n         else:\n             return swapTwo(head)", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def swapPairs(self, head):\n         \"\"\"\n         :type head: ListNode\n         :rtype: ListNode\n         \"\"\"\n         root = p = ListNode(0);\n         while head:\n             a = head;\n             if head.next:\n                 b = head.next;\n                 p.next = ListNode(b.val);\n                 p = p.next;\n                 p.next = ListNode(a.val);\n                 p = p.next;\n                 head = head.next.next;\n             else:\n                 p.next = ListNode(a.val);\n                 head = a.next;\n         return root.next\n         \n         ", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def swapPairs(self, head):\n         \"\"\"\n         :type head: ListNode\n         :rtype: ListNode\n         \"\"\"\n         dummy = ListNode(None)\n         previous = dummy\n         previous.next = head\n         node = head\n         while node and node.next:\n             end = node.next.next\n             previous.next = node.next\n             node.next.next = node\n             node.next = end\n             previous = previous.next.next\n             node = previous.next\n         return dummy.next", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def swapPairs(self, head):\n         \"\"\"\n         :type head: ListNode\n         :rtype: ListNode\n         \"\"\"\n \n         dummy = ListNode(None)\n         prev = dummy\n         dummy.next = head\n \n         left = head\n         while left:\n           if left.next is None:\n             break\n           right = left.next\n           prev.next = right\n           left.next, right.next = right.next, left\n           prev = left\n           left = left.next\n \n         return dummy.next", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def swapPairs(self, head):\n         \"\"\"\n         :type head: ListNode\n         :rtype: ListNode\n         \"\"\"\n         \n         if head is None:\n             return []\n         elif head.next is None:\n             return head\n         \n         itr1 = head\n         itr2 = head.next\n         prev = itr1\n         head = itr2\n         d = head\n         \n         while itr1 is not None and itr2 is not None:\n             temp = itr2.next\n             itr2.next = itr1\n             itr1.next = temp\n             itr1 = itr1.next\n             if itr1 is not None:\n                 itr2 = itr1.next\n                 if itr2 is None:\n                     prev.next = itr1\n                 else:\n                     prev.next = itr2\n                 prev = itr1\n \n \n             print(\"=========\")\n             \n             while d is not None:\n                 print(d.val)\n                 d = d.next\n             d = head\n             print(\"===========\")\n             \n \n             \n         return head", "# Definition for singly-linked list.\n # class ListNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.next = None\n \n class Solution:\n     def swapPairs(self, head):\n         \"\"\"\n         :type head: ListNode\n         :rtype: ListNode\n         \"\"\"\n         guard = ListNode(0)\n         guard.next = head\n         prev = guard\n         cur = head\n         while cur != None and cur.next != None:\n             nxt = cur.next\n             print(prev.val, cur.val, nxt.val)\n             # do swap\n             cur.next = nxt.next\n             nxt.next = cur\n             prev.next = nxt\n             # move forward\n             prev = cur\n             cur = cur.next\n             \n             tmp = guard\n             while tmp:\n                 print(tmp.val)\n                 tmp = tmp.next\n         return guard.next\n         "]