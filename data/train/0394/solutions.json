["class Solution:\n     def minMoves2(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         aa = sorted(nums)\n         median = aa[len(nums)//2]        \n        \n         return sum([abs(i-median) for i in aa])   ", "class Solution:\n     def minMoves2(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums.sort()\n         median = nums[len(nums)//2]        \n        \n         return sum([abs(i-median) for i in nums])   ", "class Solution:\n     def minMoves2(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         mid = len(nums) // 2\n         tar = sorted(nums)[mid]\n         return sum([abs(x - tar) for x in nums])\n", "class Solution:\n     def minMoves2(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         snums=sorted(nums)\n         count=0\n         for i in snums:\n             count+=abs(i-snums[int(len(nums)/2)])\n         return count", "class Solution:\n     def minMoves2(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums.sort()\n         median = nums[len(nums)//2]\n         return sum(abs(num-median) for num in nums)\n", "class Solution:\n     def minMoves2(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         median = sorted(nums)[len(nums) // 2]\n         return sum(abs(num - median) for num in nums)", "class Solution:\n     def minMoves2(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         med=0\n         nums.sort()\n         final=0\n         final1=0\n         if len(nums)%2!=0:\n             med=int(len(nums)/2)\n             for j in range(med):\n                 final=final+abs(nums[med]-nums[j])\n             for g in range(med,len(nums)):\n                 final=final+abs(nums[med]-nums[g])\n                 \n         else:\n             med=int(len(nums)/2)\n             for k in range(med):\n                 final=final+abs(nums[med]-nums[k])\n             for t in range(med,len(nums)):\n                 final=final+abs(nums[med]-nums[t])\n             \n             med=int(len(nums)/2)-1\n             for h in range(med):\n                 final1=final1+abs(nums[med]-nums[h])\n             for q in range(med,len(nums)):\n                 final1=final1+abs(nums[med]-nums[q])\n             final=min(final,final1)\n         return final", "class Solution:\n     def minMoves2(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums=sorted(nums)\n         mid_x=nums[len(nums)//2]\n \n         count=0\n         for x in nums:\n             count+=abs(x-mid_x)\n         return count\n", "class Solution:\n     def minMoves2(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \"\"\"\n         nums = sorted(nums)\n         N = len(nums)\n         if N%2 == 1:\n             medium = nums[N//2]\n             steps = [abs(x-medium) for x in nums]\n             return sum(steps)\n         else:\n             medium = (nums[N//2-1]+nums[N//2])/2\n             steps = [abs(x-medium) for x in nums]\n             return int(sum(steps))\"\"\"\n         \n         length = len(nums)\n         nums = sorted(nums)\n         median = nums[length//2]\n         steps = [abs(x - median) for x in nums]\n         return sum(steps)", "class Solution:\n     def minMoves2(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         med = sorted(nums)[ len( nums ) // 2 ]\n         return sum( [ abs( num - med ) for num in nums ] )", "class Solution:\n     def minMoves2(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         median = sorted(nums)[len(nums) // 2]\n         return sum(abs(num - median) for num in nums)\n"]