["# cook your dish here\nn=int(input())\nl=list(map(int,input().split()))\ntemp=[]\nfor item in l:\n    temp.append(item)\nif(n<=3):\n    print(sum(temp))\nelse:\n    for i in range(3,n):\n        temp[i]=l[i]+min(temp[i-1],temp[i-2],temp[i-3])\n    res=sum(l)-min(temp[n-1],temp[n-2],temp[n-3])\n    print(res)", "n=int(input())\nl=list(map(int,input().split()))\ntemp=[]\nfor i in range(0,len(l)):\n    temp.append(0)\ntemp[0]=l[0]\ntemp[1]=l[1]\ntemp[2]=l[2]\nif(n<=3):\n    print(sum(temp))\nelse:\n    for i in range(3,n):\n        temp[i]=l[i]+min(temp[i-1],temp[i-2],temp[i-3])\n    res=sum(l)-min(temp[n-1],temp[n-2],temp[n-3])\n    print(res)", "# cook your dish here\nn=int(input())\narr=[int(x) for x in input().split()]\ndef solve(i,k):  ####k=2 or k=1 of k=0\n    if i<0:\n        return 0\n    ans=0\n    if dp[i][k]!=None:\n        return dp[i][k]\n    if k==2:\n        ans=max(ans,solve(i-1,k))\n        ans=max(ans,solve(i-1,k-1)+arr[i])\n    elif k==1:\n        ans=max(ans,solve(i-1,k-1)+arr[i])\n        ans=max(ans,solve(i-1,2))\n    else:\n        ans=max(ans,solve(i-1,2))\n    dp[i][k]=ans\n    return ans\n\ndp=[[None,None,None] for x in range(n)]\nfor i in range(n):\n    solve(i,2)\nprint(dp[-1][-1])", "# cook your dish here\nn=int(input())\narr=list(map(int,input().split()))\ndp=[0]*(n+1)\ndp[0]=0\ndp[1]=arr[0]\ndp[2]=arr[0]+arr[1]\ndp[3]=max(arr[2]+arr[0],arr[1]+arr[2],dp[-1])\n\nfor i in range(4,n+1):\n    dp[i]=max(dp[i-1],arr[i-1]+dp[i-2],arr[i-1]+arr[i-2]+dp[i-3])\n# print(dp)/\nprint(dp[-1])\n# if N > 0:\n#     sum[0] = Ps[0]\n# if N > 1:\n#     sum[1] = Ps[0] + Ps[1]\n# if N > 2:\n#     sum[2] = max(Ps[0] + Ps[2], max(sum[1], Ps[1] + Ps[2]))\n\n\n# for i in range(3, N):\n#     sum[i] = max(sum[i-2] + Ps[i], max(sum[i-1], sum[i-3] + Ps[i-1] + Ps[i]))\n", "t=int(input())\narr=input().split()\nsum=[]\ni=0\nwhile(i<len(arr)):\n    if(i==0):\n        sum.append(int(arr[0]))\n    elif(i==1):\n        sum.append(int(arr[0])+int(arr[1]))\n    elif(i==2):\n        sum.append(max(sum[i-2]+int(arr[i]),sum[i-1],int(arr[2])+int(arr[1])))        \n    else:\n        sum.append(max(max(sum[i-1], sum[i-2]+ int(arr[i])), int(arr[i]) +int(arr[i-1]) + sum[i-3]))\n    i=i+1\nprint(sum[t-1])", "# cook your dish here\nN = int(input())\nPs= list(map(int, input().strip().split(\" \")))\n#print(Ps)\n\nsum = [0 for i in range(N)]\nif N > 0:\n    sum[0] = Ps[0]\nif N > 1:\n    sum[1] = Ps[0] + Ps[1]\nif N > 2:\n    sum[2] = max(Ps[0] + Ps[2], max(sum[1], Ps[1] + Ps[2]))\n\n\nfor i in range(3, N):\n    sum[i] = max(sum[i-2] + Ps[i], max(sum[i-1], sum[i-3] + Ps[i-1] + Ps[i]))\n    \n    \nprint(sum.pop())\n\"\"\"\n23\n\"\"\"", "n = int(input())\r\nipl = list(map(int, input().split()))\r\n\r\ndp=list()\r\n\r\nfor i in range(1, n+1):\r\n    dp.append(0)\r\n\r\nif n == 1:\r\n    print(ipl[0])\r\nelif n == 2:\r\n    print(ipl[0] + ipl[1])\r\nelif n == 3:\r\n    print(max(ipl[0]+ipl[1], max(ipl[0]+ipl[2], ipl[1]+ipl[2])))\r\nelse:\r\n    summ = 0\r\n    for i in range(0, n):\r\n        summ += ipl[i]\r\n        \r\n    dp[0] = ipl[0]\r\n    dp[1] = ipl[1]\r\n    dp[2] = ipl[2]\r\n\r\n    for i in range(3, n):\r\n        dp[i] = ipl[i] + min(dp[i-1], min(dp[i-2], dp[i-3]))\r\n    print(summ - min(dp[n-1], min(dp[n-2], dp[n-3])))\r\n", "# cook your dish here\nN = int(input())\nmatches = list(map(int,input().split()))\ngames = matches[:3]\nfor i in range(3,N):\n    games.append(min(games[i-1],games[i-2],games[i-3]) + matches[i])\nprint(sum(matches) - min(games[-1],games[-2],games[-3]))\n\n", "# cook your dish here\n\nN = int(input().strip())\nincomes = []\ntotal_sum = 0\nfor i in input().strip().split(\" \"):\n    incomes.append(int(i))\n    total_sum += int(i)\n\nstored_values = incomes[:3]\nfor i in range(3, N):\n    stored_values.append(incomes[i] + min(stored_values[-1], stored_values[-2], stored_values[-3]))\n\nprint(total_sum - min(stored_values[-1], stored_values[-2], stored_values[-3]))\n", "# cook your dish here\nimport sys\nimport bisect\ninput=sys.stdin.readline\nn=int(input())\nl=input().split()\nli=[int(i) for i in l]\nif(n<=2):\n    print(sum(li))\n    return\ndp=[0 for i in range(n)]\ndp[0]=li[0]\ndp[1]=li[0]+li[1]\ndp[2]=max(dp[1],li[2]+dp[0],li[1]+li[2])\nfor i in range(3,n):\n    dp[i]=max(dp[i-1],li[i]+dp[i-2],li[i-1]+li[i]+dp[i-3])\nprint(dp[n-1])\n", "n=int(input())\nlis=list(map(int, input().split()))\ndp=[0]*n\ndp[0]=lis[0]\ndp[1]=lis[1]\ndp[2]=lis[2]\nif(n<3):\n    print(sum(lis))\n    return\nfor i in range(3 ,len(lis)):\n    dp[i]=min(dp[i-1],dp[i-2],dp[i-3])\n    dp[i]+=lis[i]\nprint(sum(lis)-min(dp[n-1], dp[n-2], dp[n-3]))\n", "\n# def recursive(List, taken_previous, idx, r) : \n#     if idx >= N : return 0\n#     if taken_previous :\n#         # I am not sure if you should go 2 steps even futher to check. Probably extra recursion\n#         return List[idx] + max( recursive(List, False, idx + 2, r + List[idx]), recursive(List, False, idx + 3, r + List[idx]))\n#     else :\n#         return  List[idx] + max( recursive(List, True, idx + 1, r + List[idx]), recursive(List, False, idx + 2, r + List[idx]) )\n    \n# N = int(input())\n# fees = list(map(int, input().split()))\n# dp = [-1] * int(1e6)\n\n# def recursive(nums, n) : \n#     if n < 0  : return 0\n#     elif n == 0 : return nums[0]\n#     elif n == 1 : return nums[0] + nums[1]\n#     else : \n#         if dp[n] != -1 : return dp[n]\n        \n#         dp[n] = max( recursive(nums, n - 1), \n#                      recursive(nums, n - 2) + nums[n],\n#                      recursive(nums, n - 3) + nums[n] + nums[n-1]\n#                     )\n        \n#         return dp[n]\n        \n    \n# if N <= 2 :  print(sum(fees))\n# else :\n#     r = recursive(fees, N - 1)\n#     print(r)\n    \n    \ndp = [-1] * int(1e6)\n\n\ndef solve(a, d):\n\tif d < 0:\n\t\treturn 0\n\tif d == 0:\n\t\treturn a[0]\n\tif d == 1:\n\t\treturn a[0] + a[1]\n\n\tif dp[d] != -1:\n\t\treturn dp[d]\n\n\tdp[d] = max(\n\t\tsolve(a, d - 1),\n\t\tsolve(a, d - 2) + a[d],\n\t\tsolve(a, d - 3) + a[d] + a[d - 1]\n\t)\n\treturn dp[d]\n\n\ndef main():\n\tfrom sys import stdin, stdout, setrecursionlimit\n\tsetrecursionlimit(int(1e6))\n\trl = stdin.readline\n\n\tn = int(rl())\n\ta = [int(x) for x in rl().split()]\n\n\tif n < 3:\n\t\tstdout.write(str(sum(a)))\n\t\treturn\n\n\tstdout.write(str(solve(a, n - 1)))\n\n\nmain()\n    \n\n    \n", "# cook your dish here\nno = int(input())\nalls = list(input().split())\ndp = [0]*(no+1)\nif(no==1):\n\tdp[1]=alls[0]\n\tprint(dp[1])\nelif(no==2):\n\tdp[2] = int(alls[1])+int(alls[0])\n\tprint(dp[2])\nelif(no>=3):\n\tdp[1]= int(alls[0])\n\tdp[2] = int(alls[1])+int(alls[0])\n\ta = int(alls[0])+int(alls[1])\t\t\n\tb = int(alls[1])+int(alls[2])\n\tc = int(alls[0])+int(alls[2])\t\t\n\tdp[3] = max(a,b,c)\n\tfor x in range(4,(no+1)):\n\t\td = int(dp[x-2]) + int(alls[x-1])\n\t\te = int(dp[x-1])\n\t\tf = int(dp[x-3]+int(alls[x-2])+int(alls[x-1]))\n\t\tdp[x] = max(d,e,f)\n\tprint(dp[no])\n", "n = int(input())\r\na = list(map(int,input().split()))\r\ndp = [[0]*3 for i in range(n+1)]\r\n\r\nfor i in range(1,n+1):\r\n    dp[i][0] = max(dp[i-1])\r\n    for j in range(1,3):\r\n        dp[i][j] = max(dp[i][j],dp[i-1][j-1] + a[i-1])\r\n\r\nprint(max(dp[-1]))        \r\n", "# cook your dish here\nn=int(input())\narray=list(map(int, input().split()))\nappo2=sum(array)\nfor i in range(3,n):\n    array[i]+=min([array[i-1],array[i-2],array[i-3]])\nappo=min([array[-1],array[-2],array[-3]])\nprint(appo2-appo)\n", "from sys import stdin, stdout\nimport math,sys,heapq\nfrom itertools import permutations, combinations\nfrom collections import defaultdict,deque,OrderedDict\nfrom os import path\nimport random\nimport bisect as bi\ndef yes():print('YES')\ndef no():print('NO')\nif (path.exists('input.txt')): \n    #------------------Sublime--------------------------------------#\n    sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w');\n    def I():return (int(input()))\n    def In():return(map(int,input().split()))\nelse:\n    #------------------PYPY FAst I/o--------------------------------#\n    def I():return (int(stdin.readline()))\n    def In():return(map(int,stdin.readline().split()))\n#sys.setrecursionlimit(1500)\ndef dict(a):\n    d={} \n    for x in a:\n        if d.get(x,-1)!=-1:\n            d[x]+=1\n        else:\n            d[x]=1\n    return d\ndef find_gt(a, x):\n    'Find leftmost value greater than x'\n    i = bi.bisect_left(a, x)\n    if i != len(a):\n        return i\n    else:            \n        return -1\ndef main():\n    try:\n        n=I()\n        l=list(In())\n        dp=[[0,0] for x in range(n)]\n        if n==1:\n            print(l[0])\n        elif n==2:\n            print(sum(l))\n        else:\n            dp[2][0]=l[2]+l[1]\n            dp[2][1]=l[2]+l[0]\n            ma=max(dp[1][0],dp[1][1])\n            dp[1][1]=l[1]\n            dp[1][0]=l[1]+l[0]\n            for i in range(3,n):\n                dp[i][0]=l[i]+dp[i-1][1]\n                ma=max(dp[i-2][0],dp[i-2][1],ma)\n                dp[i][1]=ma+l[i]\n            ma=0\n            # for i in range(n):\n            #     print(dp[i][0],end=\" \")\n            # print()\n            # for i in range(n):\n            #     print(dp[i][1],end=\" \")\n            # print()\n            for i in range(n):\n                ma=max(dp[i][0],ma,dp[i][1])\n            print(ma)\n                \n    except:\n        pass\n        \nM = 998244353\nP = 1000000007\n \ndef __starting_point():\n    #for _ in range(I()):main()\n    for _ in range(1):main()\n__starting_point()", "# cook your dish here\nn = int(input())\nl = list(map(int, input().split()))\n\nif n <=2 :\n    print(sum(l))\nelse:\n    ml = [l[0], l[0]+l[1], max(l[0]+l[1], l[1]+l[2], l[0]+l[2])]\n    for i in range(3, n):\n        new = max(ml[i-1], l[i] + ml[i-2], l[i] + l[i-1] + ml[i-3])\n        ml.append(new)\n    print(ml[-1])", "from sys import stdin,stdout\r\nfor _ in range(1):#int(stdin.readline())):\r\n    n=int(stdin.readline())\r\n    a=list(map(int,stdin.readline().split()))\r\n    con0=con1=con2=0\r\n    con1=a[0]\r\n    for i in range(1,n):\r\n        con0,con1,con2=max(con0,con1,con2),a[i]+con0,a[i]+con1\r\n    print(max(con0,con1,con2))", "from sys import stdin,stdout\r\nfor _ in range(1):#int(stdin.readline())):\r\n    n=int(stdin.readline())\r\n    a=list(map(int,stdin.readline().split()))\r\n    con0=con1=con2=0\r\n    con1=a[0]\r\n    for i in range(1,n):\r\n        con0,con1,con2=max(con0,con1,con2),a[i]+con0,a[i]+con1\r\n    print(max(con0,con1,con2))", "from sys import stdin,stdout,setrecursionlimit\r\nsetrecursionlimit(10**6)\r\ndef fn(pos,consecutive):\r\n    if pos>=n:return 0\r\n    if (pos,consecutive) in dp:return dp[pos,consecutive]\r\n    take_cur=0\r\n    if consecutive+1<3:take_cur=a[pos]+fn(pos+1,consecutive+1)\r\n    dp[pos,consecutive]=max(take_cur,fn(pos+1,0))\r\n    return dp[pos,consecutive]\r\nfor _ in range(1):#int(stdin.readline())):\r\n    n=int(stdin.readline())\r\n    a=list(map(int,stdin.readline().split()))\r\n    dp={}\r\n    print(fn(0,0))", "# cook your dish here\nimport sys\nread = lambda: sys.stdin.readline().strip()\n\n\nn = int(read())\nnums = list(map(int, read().split()))\ndp = [0] * n\ndp[0] = nums[0]\ndp[1] = nums[1]\ndp[2] = nums[2]\ns = sum(nums)\nfor i in range(3, n):\n    dp[i] = min(dp[i-1], dp[i-2], dp[i-3]) + nums[i]\n\nprint(s - min(dp[-1], dp[-2], dp[-3]))", "# cook your dish here\nimport sys\nread = lambda: sys.stdin.readline().strip()\n\n\nn = int(read())\nnums = list(map(int, read().split()))\ndp = [0] * n\ndp[0] = nums[0]\ndp[1] = nums[1]\ndp[2] = nums[2]\ns = sum(nums)\nfor i in range(2, n):\n    dp[i] = min(dp[i-1], dp[i-2], dp[i-3]) + nums[i]\n\nprint(s - min(dp[-1], dp[-2], dp[-3]))", "# cook your dish here\nN = int(input())\nlist1 = list(map(int,input().split()))\nnextint=[0 for i in range(N)]\nnotnext=[ 0 for i in range(N)]\nnotnext[-1] = list1[-1]\nnextint[-1] = list1[-1]\nnotnext[-2] = list1[-2]\nnextint[-2] = list1[-2]+list1[-1]\nfor j in range(len(list1)-3,-1,-1):\n    nextint[j] = max(list1[j]+notnext[j+1], nextint[j+1])\n    notnext[j] = list1[j]+max(nextint[j+2],notnext[j+2]) \n#print(\"nextint: \",nextint,\"notnext: \",notnext)\nprint(max(nextint[0],notnext[0]))", "# cook your dish here\r\nN = int(input())\r\nlist1 = list(map(int,input().split()))\r\nnextint=[0 for i in range(N)]\r\nnotnext=[ 0 for i in range(N)]\r\nnotnext[-1] = list1[-1]\r\nnextint[-1] = list1[-1]\r\nnotnext[-2] = list1[-2]\r\nnextint[-2] = list1[-2]+list1[-1]\r\nfor j in range(len(list1)-3,-1,-1):\r\n    nextint[j] = max(list1[j]+notnext[j+1], nextint[j+1])\r\n    notnext[j] = list1[j]+max(nextint[j+2],notnext[j+2]) \r\n#print(\"nextint: \",nextint,\"notnext: \",notnext)\r\nprint(max(nextint[0],notnext[0]))"]