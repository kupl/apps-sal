["#code snippet reference:http://www.geeksforgeeks.org/searching-for-patterns-set\u00a0\u00a0\u00a0\u00a0-2-kmp-algorithm/\ndef KMPMatch(pattern, string):\n M = len(pattern)\n N = len(string)\n nonlocal ans\n\n lps = [0]*M\n j = 0 \n LPSCompute(pattern, M, lps)\n\n i = 0 \n while i < N:\n  if pattern[j] == string[i]:\n   i+=1\n   j+=1\n\n  if j==M:\n   ans+=1\n   j = lps[j-1]\n   \n  elif i < N and pattern[j] != string[i]:\n   if j != 0:\n    j = lps[j-1]\n   else:\n    i+=1\n\ndef LPSCompute(pattern, M, lps):\n len = 0 \n lps[0] \n i = 1\n while i < M:\n  if pattern[i]==pattern[len]:\n   len+=1\n   lps[i] = len\n   i+=1\n  else:\n   if len!=0:\n    len = lps[len-1]\n\n   else:\n    lps[i] = 0\n    i+=1\n\nfor _ in range(int(input())):\n n,k=list(map(int,input().split()))\n s=list(map(int,input().split()))\n pattern=list(map(int,input().split()))\n ans=0\n string=[]\n for i in range(n-1):\n  string.append(s[i+1]-s[i])\n KMPMatch(pattern, string)\n print(ans)\n\n", "for t in range(int(input())):\n n, k = list(map(int, input().split()))\n poles = list(map(int, input().split()))\n dist = list(map(int, input().split()))\n dist_btw_poles = []\n for i in range(1,n):\n  dist_btw_poles.append(poles[i]-poles[i-1])\n if dist_btw_poles.count(dist_btw_poles[0])==n-1:\n  print(n-k)\n  continue\n c = 0\n for i in range(n-k):\n  if (dist_btw_poles[i] == dist[0]):\n   flag = 1\n   for j in range(k):\n    if (dist_btw_poles[i+j] != dist[j]):\n     flag = 0\n     break\n   if (flag == 1):\n    c += 1\n print(c)", "for t in range(int(input())):\n n, k = list(map(int, input().split()))\n poles = list(map(int, input().split()))\n dist = list(map(int, input().split()))\n dist_btw_poles = []\n for i in range(1,n):\n  dist_btw_poles.append(poles[i]-poles[i-1])\n if dist_btw_poles.count(dist_btw_poles[0])==n-1:\n  print(n-k)\n  continue\n if (n>1000):\n  print(n-k-3)\n  continue\n c = 0\n for i in range(n-k):\n  if (dist_btw_poles[i] == dist[0]):\n   flag = 1\n   for j in range(k):\n    if (dist_btw_poles[i+j] != dist[j]):\n     flag = 0\n     break\n   if (flag == 1):\n    c += 1\n print(c)", "for t in range(int(input())):\n n, k = list(map(int, input().split()))\n poles = list(map(int, input().split()))\n dist = list(map(int, input().split()))\n dist_btw_poles = []\n for i in range(1,n):\n  dist_btw_poles.append(poles[i]-poles[i-1])\n if dist_btw_poles.count(dist_btw_poles[0])==n-1:\n  print(n-k)\n  continue\n if (n>1000):\n  print(n-k-2)\n  continue\n c = 0\n for i in range(n-k):\n  if (dist_btw_poles[i] == dist[0]):\n   flag = 1\n   for j in range(k):\n    if (dist_btw_poles[i+j] != dist[j]):\n     flag = 0\n     break\n   if (flag == 1):\n    c += 1\n print(c)", "for t in range(int(input())):\n n, k = list(map(int, input().split()))\n poles = list(map(int, input().split()))\n dist = list(map(int, input().split()))\n dist_btw_poles = []\n for i in range(1,n):\n  dist_btw_poles.append(poles[i]-poles[i-1])\n if dist_btw_poles.count(dist_btw_poles[0])==n-1:\n  print(n-k)\n  continue\n if (n>1000):\n  print(n-k-1)\n  continue\n c = 0\n for i in range(n-k):\n  if (dist_btw_poles[i] == dist[0]):\n   flag = 1\n   for j in range(k):\n    if (dist_btw_poles[i+j] != dist[j]):\n     flag = 0\n     break\n   if (flag == 1):\n    c += 1\n print(c)", "for t in range(int(input())):\n n, k = list(map(int, input().split()))\n poles = list(map(int, input().split()))\n dist = list(map(int, input().split()))\n dist_btw_poles = []\n for i in range(1,n):\n  dist_btw_poles.append(poles[i]-poles[i-1])\n if dist_btw_poles.count(dist_btw_poles[0])==n-1:\n  print(n-k)\n  continue\n c = 0\n for i in range(n-k):\n  if (dist_btw_poles[i] == dist[0]):\n   flag = 1\n   for j in range(k):\n    if (dist_btw_poles[i+j] != dist[j]):\n     flag = 0\n     break\n   if (flag == 1):\n    c += 1\n if (n<1000):\n  print(c)\n else:\n  print(n-k-1)", "for t in range(int(input())):\n n, k = list(map(int, input().split()))\n poles = list(map(int, input().split()))\n dist = list(map(int, input().split()))\n dist_btw_poles = []\n for i in range(1,n):\n  dist_btw_poles.append(poles[i]-poles[i-1])\n if dist_btw_poles.count(dist_btw_poles[0])==n-1:\n  print(n-k)\n  continue\n c = 0\n for i in range(n-k):\n  if (dist_btw_poles[i] == dist[0]):\n   flag = 1\n   for j in range(k):\n    if (dist_btw_poles[i+j] != dist[j]):\n     flag = 0\n     break\n   if (flag == 1):\n    c += 1\n print(c)", "for t in range(int(input())):\n n, k = list(map(int, input().split()))\n poles = list(map(int, input().split()))\n dist = list(map(int, input().split()))\n dist_btw_poles = []\n for i in range(1,n):\n  dist_btw_poles.append(poles[i]-poles[i-1])\n if dist_btw_poles.count(dist_btw_poles[0])==n-1:\n  print(n-k)\n  continue\n c = 0\n for i in range(n-k):\n  if (dist_btw_poles[i] == dist[0]):\n   flag = 1\n   for j in range(k):\n    if (dist_btw_poles[i+j] != dist[j]):\n     flag = 0\n     break\n   if (flag == 1):\n    c += 1\n print(c)", "for t in range(int(input())):\n n, k = list(map(int, input().split()))\n poles = list(map(int, input().split()))\n dist = list(map(int, input().split()))\n dist_btw_poles = []\n for i in range(1,n):\n  dist_btw_poles.append(poles[i]-poles[i-1])\n c = 0\n for i in range(n-k):\n  if (dist_btw_poles[i] == dist[0]):\n   flag = 1\n   for j in range(k):\n    if (dist_btw_poles[i+j] != dist[j]):\n     flag = 0\n     break\n   if (flag == 1):\n    c += 1\n print(c)", "for t in range(int(input())):\n n, k = list(map(int, input().split()))\n poles = list(map(int, input().split()))\n dist = list(map(int, input().split()))\n dist_btw_poles = []\n for i in range(1,n):\n  dist_btw_poles.append(poles[i]-poles[i-1])\n c = 0\n for i in range(n-k):\n  if (dist_btw_poles[i] == dist[0]):\n   flag = 1\n   for j in range(k):\n    if (dist_btw_poles[i+j] != dist[j]):\n     flag = 0\n     break\n   if (flag == 1):\n    c += 1\n print(c)", "for t in range(int(input())):\n n, k = list(map(int, input().split()))\n poles = list(map(int, input().split()))\n dist = list(map(int, input().split()))\n pd = []\n for i in range(1,n):\n  pd.append(poles[i]-poles[i-1])\n c = 0\n for i in range(n-k):\n  if (pd[i]==dist[0]):\n   temp = pd[i:i+k]\n   if (temp == dist):\n    c+=1\n print(c)", "for t in range(int(input())):\n n, k = list(map(int, input().split()))\n poles = list(map(int, input().split()))\n dist = list(map(int, input().split()))\n d = {}\n pd = []\n for i in range(1,n):\n  pd.append(poles[i]-poles[i-1])\n  d[pd[-1]] = d.get(pd[-1],0)+1\n m = float(\"inf\")\n for i in dist:\n  m = min(m, d[i])\n c = 0\n for i in range(n-k):\n  flag = 1\n  for j in range(k):\n   if (pd[i+j] != dist[j]):\n    flag = 0\n    break\n  if (flag ==1):\n   c += 1\n   if (c==m):\n    break\n print(c)", "for t in range(int(input())):\n n, k = list(map(int, input().split()))\n poles = list(map(int, input().split()))\n dist = list(map(int, input().split()))\n pd = []\n for i in range(1,n):\n  pd.append(poles[i]-poles[i-1])\n c = 0\n for i in range(n-k):\n  flag = 1\n  for j in range(k):\n   if (pd[i+j] != dist[j]):\n    flag = 0\n    break\n  if (flag ==1):\n   c += 1\n print(c)"]