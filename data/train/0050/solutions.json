["for tcase in range(int(input())):\n    n=int(input())\n    ls = list(map(int, input().split()))\n    oneneed = 2*(n - ls.count(1))\n    ldct = {0:0}\n    ctr = 0\n    eaten = 0\n    for i in range(n-1,-1,-1):\n        eaten += 1\n        ctr += (1 if ls[i] == 2 else -1)\n        if ctr not in ldct:\n            ldct[ctr] = eaten\n\n    rdct = {0:0}\n    ctr = 0\n    eaten = 0\n    for i in range(n,2*n):\n        eaten += 1\n        ctr += (1 if ls[i] == 2 else -1)\n        if ctr not in rdct:\n            rdct[ctr] = eaten\n    #print(oneneed, ldct, rdct)\n\n    best=99**99\n    for k in list(rdct.keys()):\n        otk = oneneed - k\n        if otk in ldct:\n            best = min(best, rdct[k]+ldct[otk])\n    print(best)\n", "import sys\nreader = (s.rstrip() for s in sys.stdin)\ninput = reader.__next__\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    red = a.count(1)\n    blue = 2*n - red\n    s = red-blue\n    if s == 0:\n        print(0)\n        return\n\n    cur = 0\n    d = {0:0}\n    for i in range(n, 2*n):\n        if a[i] == 2:\n            cur -= 1\n        else:\n            cur += 1\n        if cur not in d:\n            d[cur] = i-n+1\n    ans = float(\"inf\")\n    need = s\n    cur = 0\n    if need in d:\n        ans = min(ans, d[need])\n    for i in reversed(list(range(n))):\n        if a[i] == 2:\n            cur -= 1\n        else:\n            cur += 1\n        if need-cur in d:\n            ans = min(ans, d[need-cur]+n-i)\n    print(ans)\n\nt = int(input())\nfor i in range(t):\n    solve()\n\n", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a, b = a[n - 1::-1], a[n:]\n    ma, mb = {0: 0}, {0: 0}\n    pa = pb = 0\n    for i in range(n):\n        pa += 1 if a[i] == 1 else -1\n        pb += 1 if b[i] == 1 else -1\n        if pa not in ma:\n            ma[pa] = i + 1\n        if pb not in mb:\n            mb[pb] = i + 1\n    total = pa + pb\n    ans = 10 ** 9\n    for da, va in list(ma.items()):\n        req = total - da\n        if req in mb:\n            ans = min(ans, va + mb[req])\n    print(ans)\n", "from math import *\nfor _ in range(int(input())):\n\tn=int(input())\n\ta=list(map(int,input().split()))\n\tz=a.count(1)-a.count(2)\n\tc=a[:n]\n\td=a[n:]\n\tjk={0:0}\n\tb=0\n\tfor i in range(n):\n\t\tx=d[i]\n\t\tif x==1:\n\t\t\tb-=1\n\t\telse:\n\t\t\tb+=1\n\t\tif b not in jk:\n\t\t\tjk[b]=i+1\n\tans=1000000\n\tb=0\n\ti=1\n\tif z==0:\n\t\tans=0\n\tfor x in c[::-1]:\n\t\tif x==1:\n\t\t\tb-=1\n\t\telse:\n\t\t\tb+=1\n\t\tif -z-b in jk:\n\t\t\tans = min(ans,i+jk[-z-b])\n\t\ti+=1\n\tif -z in jk:\n\t\tans=min(ans,jk[-z])\n\tprint(ans)\n", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int,minp().split()))\n\ndef solve():\n\tn = mint()\n\ta = list(mints())\n\tc = dict()\n\tc[0] = 2*n\n\td = 0\n\t#print(d, end=' ')\n\tfor i in range(2*n-1,n-1,-1):\n\t\tif a[i] == 1:\n\t\t\td += 1\n\t\telse:\n\t\t\td -= 1\n\t\t#print(d, i-n, end=' ')\n\t\tc[d] = i\n\t#print()\n\td = 0\n\tr = 2*n\n\tr = min(r, n + c[0] - n)\n\tfor i in range(n):\n\t\tif a[i] == 1:\n\t\t\td += 1\n\t\telse:\n\t\t\td -= 1\n\t\t#print(d, n-i-1, end=' ')\n\t\tif (-d) in c:\n\t\t\tr = min(r, n - i - 1 + c[-d] - n)\n\t#print()\n\treturn r\n\n\nfor i in range(mint()):\n\tprint(solve())\n", "def inp(ai):\n    cur = sum(ai) * 2 - n * 3\n    yield cur\n    for aii in ai:\n        if aii == 1:\n            cur += 1\n        else:\n            cur -= 1\n        yield cur\n\n\ndef inp2(ii):\n    ans = {}\n    for i, iii in enumerate(ii):\n        if iii not in ans:\n            ans[iii] = i\n    return ans\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = iter(map(int, input().split()))\n    a1 = [next(a) for _ in range(n)]\n    a1.reverse()\n    a2 = list(a)\n    i1 = inp2(inp(a1))\n    i2 = inp2((-i2i for i2i in inp(a2)))\n    res = n * 2\n    for k in list(i1.keys()):\n        if k in list(i2.keys()):\n            res = min(res, i1[k] + i2[k])\n    print(res)\n", "q = int(input())\nfor rwier in range(q):\n\tn = int(input())\n\tl = list(map(int,input().split()))\n\tj = l.count(1)\n\td = l.count(2)\n\tpr = [0] * n\n\tle = [0] * n\n\tpr[0] = (1 if l[n] == 1 else -1)\n\tle[0] = (1 if l[n-1] == 1 else -1)\n\tfor i in range(1, n):\n\t\tpr[i] = pr[i-1] + (1 if l[n+i] == 1 else -1)\n\t\tle[i] = le[i-1] + (1 if l[n-i-1] == 1 else -1)\n\t#print(pr,le)\n\tif j - d < 0:\n\t\tfor i in range(n):\n\t\t\tpr[i] = -pr[i]\n\t\t\tle[i] = -le[i]\n\tab = abs(j-d)\n\tif ab == 0:\n\t\tprint(0)\n\telse:\n\t\t#suma = abs\n\t\tnajwp = [123456789] * (2*n+1)\n\t\tnajwl = [123456789] * (2*n+1)\n\t\tle = [0] + le\n\t\tpr = [0] + pr\n\t\tfor i in range(n+1):\n\t\t\tif pr[i] >= 0 and najwp[pr[i]] == 123456789:\n\t\t\t\tnajwp[pr[i]] = i\n\t\t\tif le[i] >= 0 and najwl[le[i]] == 123456789:\n\t\t\t\tnajwl[le[i]] = i\n\t\twyn = 41343443143\n\t\tfor i in range(ab+1):\n\t\t\tif najwp[i] + najwl[ab-i] < wyn:\n\t\t\t\twyn = najwp[i] +najwl[ab-i]\n\t\tprint(wyn)\n", "import itertools\nfrom collections import defaultdict\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    \n    a = list(map(int, input().split()))\n    \n    ones = a.count(1)\n    twos = a.count(2)\n    \n    a1 = a[:n][::-1]\n    a2 = a[n:]\n    \n    target = ones - twos\n    \n    a1 = [[-1,1][x==1]for x in a1]\n    a1 = [0] + list(itertools.accumulate(a1))\n    a2 = [[-1,1][x==1]for x in a2]\n    a2 = [0] + list(itertools.accumulate(a2))\n    \n    a2v = defaultdict(lambda: 2*n+1)\n    for i2, x2 in enumerate(a2):\n        a2v[x2] = min(a2v[x2], i2)\n    best = 2*n\n    \n    for i1, x1 in enumerate(a1):\n        best = min(best, i1+a2v[target-x1])\n    \n    print(best)\n", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\n\nfor test in range(t):\n    n=int(input())\n    A=list(map(int,input().split()))\n\n    LEFT=[0]\n    RIGHT=[0]\n\n    for a in A[:n]:\n        if a==1:\n            LEFT.append(LEFT[-1]+1)\n        else:\n            LEFT.append(LEFT[-1]-1)\n\n    for a in A[n:][::-1]:\n        if a==1:\n            RIGHT.append(RIGHT[-1]+1)\n        else:\n            RIGHT.append(RIGHT[-1]-1)\n\n    #print(LEFT)\n    #print(RIGHT)\n    #print()\n\n    MAXLEFT=[-1]*(2*n+1)\n    MAXRIGHT=[-1]*(2*n+1)\n\n    for i in range(n+1):\n        MAXLEFT[LEFT[i]+n]=i\n        MAXRIGHT[RIGHT[i]+n]=i\n   \n    #print(MAXLEFT)\n    #print(MAXRIGHT)\n    #print()\n\n    ANS=0\n    for i in range(2*n+1):\n        if MAXLEFT[i]==-1 or MAXRIGHT[2*n-i]==-1:\n            continue\n        ANS=max(ANS,MAXLEFT[i]+MAXRIGHT[2*n-i])\n\n    #print(ANS)\n    print(2*n-ANS)\n\n    \n    \n\n    \n\n    \n    \n", "import sys\nreadline = sys.stdin.readline\nT = int(readline())\nAns = [None]*T\ninf = 10**9+7\nfor qu in range(T):\n    N = int(readline())\n    A = list(map(int, readline().split()))\n    bj = A.count(1)\n    sj = 2*N-bj\n    x = sj-bj\n    A1 = [3-2*a for a in A[:N][::-1]]\n    A2 = [3-2*a for a in A[N:]]          \n    for i in range(1, N):\n        A1[i] += A1[i-1]\n        A2[i] += A2[i-1]\n    geta = -min(0, min(A2))+1\n    mA = max(0, max(A2))\n    idx = [inf]*(mA+geta+1)\n    idx[geta+0] = 0\n    for i in range(N):\n        a2 = A2[i]\n        idx[geta+a2] = min(idx[geta+a2], i+1)\n    \n    ans = inf\n    A1 = [0]+A1\n    for i in range(N+1):\n        a1 = A1[i]\n        if -geta <= -a1-x <= mA:\n            ans = min(ans, i+idx[geta-a1-x])\n    Ans[qu] = ans\nprint('\\n'.join(map(str, Ans)))"]