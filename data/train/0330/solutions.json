["class Solution:\n     def isNumber(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         dot = False\n         exp = False\n         \n         try:\n             while s.startswith(' '):\n                 s = s[1:]\n             while s.endswith(' '):\n                 s = s[:-1]\n             if s.startswith('-') or s.startswith('+'):\n                 s = s[1:]\n         except IndexError:\n             return False\n         \n         if s == '':\n             return False\n         \n         if s.startswith('e'):\n             return False\n         if (s[-1] > '9' or s[-1] < '0') and s[-1] != '.':\n             return False\n         \n         if s.startswith('.'):\n             if len(s) == 1:\n                 return False\n             elif s[1] < '0' or s[1] > '9':\n                 return False\n         \n         i = 0\n         while i < len(s):\n             if s[i] < '0' or s[i] > '9':\n                 if s[i] == '.':\n                     if not dot and not exp:\n                         dot = True\n                     else:\n                         return False  # two dot in string or dot after e.\n                 elif s[i] == 'e':\n                     if not exp:\n                         exp = True\n                         if s[i+1] == '-' or s[i+1] == '+':\n                             i = i + 1\n                     else:\n                         return False\n                 else:\n                     return False\n             i = i + 1\n         return True\n", "class Solution:\n     def isNumber(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         num = dot = exp = sign = False\n         numAfterE = True\n         n = len(s)\n         for i in range(len(s)):\n             if s[i] == \" \":\n                 if i < n-1 and s[i+1] != \" \" and (num or dot or exp or sign):\n                     return False\n             elif s[i] in \"+-\":\n                 if i > 0 and s[i-1] != \"e\" and s[i-1] != \" \":\n                     return False\n                 sign = True\n             elif s[i].isdigit():\n                 num = True\n                 numAfterE = True\n             elif s[i] == \".\":\n                 if dot or exp:\n                     return False\n                 dot = True\n             elif s[i] == \"e\":\n                 if exp or not num:\n                     return False\n                 exp = True\n                 numAfterE = False\n             else:\n                 return False\n         return num and numAfterE\n", "class Solution:\n     def isNumber(self, s):\n         try:\n             float(s)\n             return True\n         except:\n             return False\n", "class Solution:\n     def isNumber(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         states = [{},\n                 {\"blank\": 1, \"sign\": 2, \"dot\": 4, \"digit\": 3},\n                 {\"digit\": 3, \"dot\": 4},\n                 {\"digit\": 3, \"blank\": 9, \"e\": 6, \"dot\": 5},\n                 {\"digit\": 5},\n                 {\"digit\":5, \"e\":6, \"blank\": 9},\n                 {\"sign\": 7, \"digit\": 8},\n                 {\"digit\": 8},\n                 {\"digit\": 8, \"blank\": 9},\n                 {\"blank\": 9}]\n         \n         curr_state = 1\n         for c in s:\n             type_c = self.checkType(c)\n             if type_c not in states[curr_state].keys():\n                 return False\n             curr_state = states[curr_state][type_c]\n         if curr_state not in [3, 5, 8, 9]:\n             return False\n         return True\n \n     def checkType(self, c):\n         if c == \" \":\n             return \"blank\"\n         elif ord(c) >= ord(\"0\") and ord(c) <= ord(\"9\"):\n             return \"digit\"\n         elif c == \".\":\n             return \"dot\"\n         elif c in [\"E\", \"e\"]:\n             return \"e\"\n         elif c in [\"+\", \"-\"]:\n             return \"sign\"\n         else:\n             return \"other\"", "class Solution:\n     def isNumber(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         \n         reg_sol = self.isNumber_regex(s)\n         aut_sol = self.isNumber_automata(s)\n         pyt_sol = self.isNumber_python(s)\n         \n         if not (reg_sol == aut_sol == pyt_sol):\n             raise Exception(\"'{s}' is {reg_sol} according to regex, {aut_sol} according to automata, {pyt_sol} according to float()\".format(s=s, reg_sol=reg_sol, aut_sol=aut_sol, pyt_sol=pyt_sol))\n         \n         return aut_sol\n     \n     def isNumber_regex(self, s):\n \n         import re\n \n         pattern = re.compile('^ *[-+]?([0-9]*\\.[0-9]+|[0-9]+|[0-9]+\\.)([eE][-+]?([0-9]+))? *$')\n         return None != pattern.match(s)\n     \n     transition = (\n         # 0\n         {' ': 0,\n          '.': 3,\n          '-': 1,\n          '0': 2},\n         # 1\n         {'.': 3,\n          '0': 2},\n         # 2\n         {'0': 2,\n          '.': 4,\n          'e': 5,\n          ' ': 8},\n         # 3\n         {'0': 4},\n         # 4\n         {'0': 4,\n          'e': 5,\n          ' ': 8},\n         # 5\n         {'-': 6,\n          '0': 7},\n         # 6\n         {'0': 7},\n         # 7\n         {'0': 7,\n          ' ': 8},\n         # 8\n         {' ': 8}\n         )\n     final_states = (2,4,7,8)\n     \n     def isNumber_automata(self, s):\n         \n         def key(char):\n             if char in '\\t':\n                 return ' '\n             if char in '123456789':\n                 return '0'\n             if char in 'E':\n                 return 'e'\n             if char in '+':\n                 return '-'\n             return char\n         \n         state = 0\n         for i in s:\n             try:\n                 state = self.transition[state][key(i)]\n             except KeyError:\n                 return False\n         return state in self.final_states\n     \n     def isNumber_python(self, s):\n         try:\n             f = float(s)\n         except:\n             return False\n         else:\n             return True\n \n     def isNumber_manually(self, s):\n         \n         pass\n         \n", "class Solution:\n     def isNumber(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         \n         # remove whitespaces\n         s = s.strip()\n         \n         try:\n             value = float(s)\n             return True\n         except:\n             return False", "class Solution:\n     def isNumber(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         try:\n             float(s.strip())\n             return True\n         except:\n             return False", "class Solution:\n     def isNumber(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: bool\n         \"\"\"\n         try:\n             _ = float(s)\n         except:\n             return False\n         return True\n"]