["for _ in range(int(input())):\n r,c = map(int,input().split())\n l = []\n for k in range(r):\n  a = list(map(int,input().split()))\n  l.append(a)\n ans = \"Stable\" \n for i in range(r):\n  for j in range(c):\n   p = l[i][j]\n   count=0\n   if i-1>=0 and j>=0:\n    count+=1 \n   if i>=0 and j-1>=0:\n    count+=1 \n   if i+1<=r-1 and j<=c-1:\n    count+=1 \n   if i<=r-1 and j+1<=c-1:\n    count +=1\n   if count<=p:\n    ans = \"Unstable\"\n    break\n print(ans) ", "# cook your dish here\ndef checkStability(inp_arr,R,C,i,j):\n cell_cnt=0\n for coordinates in ((i,j-1),(i,j+1),(i-1,j),(i+1,j)):\n  r,c=coordinates\n  if(r>=0\n  and c>=0\n  and r<R\n  and c<C):\n   cell_cnt+=1\n  \n if(inp_arr[i][j]>=cell_cnt):\n  return False\n return True\n \nfor _ in range(int(input())):\n R,C=(int(i) for i in input().strip(' ').split(' '))\n inp_arr=[]\n stableFlag=True\n printStr='Stable'\n for i in range(R):\n  inp_arr.append(tuple(int(i) for i in input().strip(' ').split(' ')))\n for i in range(R):\n  if(stableFlag==True):\n   for j in range(C):\n    stableFlag=checkStability(inp_arr,R,C,i,j)\n    if(stableFlag==False):\n     printStr='Unstable'\n     break\n print(printStr)\n", "def adjacent(i,j,r,c):\n if i==0 or i==r-1:\n  if j==0 or j==c-1:\n   return 2\n  else:\n   return 3\n else:\n  if j==0 or j==c-1:\n   return 3\n  else:\n   return 4\n   \n# cook your dish here\nfor _ in range(int(input())):\n r,c=map(int,input().split(\" \"))\n grid=[]\n flag=0\n for i in range(r):\n  grid.append(list(map(int,input().split(\" \"))))\n for i in range(r):\n  for j in range(c):\n   if adjacent(i,j,r,c)<=grid[i][j]:\n    flag=1\n    break\n  if flag==1:\n   break\n if flag==1:\n  print(\"Unstable\")\n else:\n  print(\"Stable\")", "import numpy as np\nt = int(input())\nfor t in range(0,t):\n q= list(map (int, input().rstrip().split()))\n r=q[0]\n c=q[1]\n sum=0\n a = np.array([[int(x) for x in input().split()] for i in range(r)]) \n if(a[0][0]<2 and a[0][c-1]<2 and a[r-1][0]<2 and a[r-1][c-1]<2):\n  sum+=4\n for j in range(1,c-1):\n  if(a[0][j]<3 and a[r-1][j]<3):\n   sum=sum+2\n   \n for i in range(1,r-1):\n  if(a[i][0]<3 and a[i][c-1]<3):\n   sum=sum+2\n for j in range(1,r-1):\n  for i in range(1,c-1):\n   if(a[j][i]<4):\n    sum=sum+1\n if(sum==r*c):\n  print(\"Stable\")\n else:\n  print(\"Unstable\")\n   \n   \n   \n", "# cook your dish here\nimport math\nt=int(input())\n#t=1\n#res=[]\nfor i in range(t):\n #n=int(input())\n r,c=list(map(int,input().split()))\n #l=list(map(int,input().split()))\n res=[]\n for j in range(r):\n  l=list(map(int,input().split()))\n  res.append(l)\n flag=1\n for a in range(r):\n  for b in range(c):\n   adj=4\n   if a==0 or a==r-1:\n    adj-=1\n   if b==0 or b==c-1:\n    adj-=1\n   if res[a][b]>=adj:\n    flag=0\n    break\n if (flag):\n  print(\"Stable\")\n else:\n  print(\"Unstable\")\n", "def check(r, c, a):\n for i in range(r):\n  for j in range(c):\n   adj = 4\n   if i == 0 or i == r-1:\n    adj -= 1\n   if j == 0 or j == c-1:\n    adj -= 1\n   if a[i][j]>=adj:\n    return \"Unstable\"\n    \n return \"Stable\"\n\nfor _ in range(int(input())):\n d = input().split()\n r = int(d[0])\n c = int(d[1])\n a = []\n for i in range(r):\n  a.append(list(map(int, input().split())))\n print(check(r, c, a))", "for _ in range(int(input())):\n N, M = map(int, input().split())\n L = []\n for i in range(N):\n  L.append(list(map(int, input().split())))\n flag = True\n for i in range(N):\n  for j in range(M):\n   k = 0\n   if i-1 >= 0:\n    k += 1\n   if i+1 < N:\n    k += 1 \n   if j-1 >= 0:\n    k += 1 \n   if j+1 < M:\n    k += 1 \n   if k <= L[i][j]:\n    flag = False\n    break\n  if not flag:\n   break\n print('Stable' if flag else 'Unstable')", "t = int(input())\n\ndef numOfCordinates(arr, raw_arr, r, c):\n num = 0\n possibleCords = [[r-1, c], [r+1,c], [r, c+1], [r, c-1]]\n \n for cords in possibleCords:\n  if cords in raw_arr:\n   num+=1\n \n return num\n \n\nfor _ in range(1,t + 1):\n \n (r,c) = map(int, input().split(\" \"))\n \n arr = []\n for i in range(r):\n  ri = list(map(int, input().split(\" \")))[:c]\n  arr.append(ri)\n \n\n raw_arr = []\n for ri in range(r):\n  \n  for ci in range(c):\n   raw_arr.append([ri,ci])\n  \n\n for r in range(len(arr)):\n  \n  for c in range(len(arr[r])):\n   no_cords = numOfCordinates(arr, raw_arr, r, c) \n   \n   if no_cords == -1:\n    arr[r][c] = -1\n   \n   elif arr[r][c] < no_cords:\n    arr[r][c] = 0\n   \n   else:\n    arr[r][c] = -1\n \n \n s = 0\n for ls in arr:\n  s += sum(ls)\n  \n if s==0:\n  print(\"Stable\")\n else:\n  print(\"Unstable\")", "# cook your dish here\nfor _ in range(int(input())):\n r, c = map(int, input().split())\n a = []\n for i in range(r):\n  a.append(list(map(int, input().split())))\n cont = True\n for i in range(r):\n  for j in range(c):\n   if ((i == 0 and j == c-1) or (i == r-1 and j == 0)\n    or (i == r-1 and j == c-1) or (i == 0 and j == 0)):\n    if a[i][j] >1:\n     cont = False\n     break\n   elif i == 0 or i == r-1 or j == 0 or j == c-1:\n    if a[i][j] > 2:\n     cont = False\n     break\n   else:\n    if a[i][j] >3:\n     cont = False\n     break\n  if cont == False:\n   print('Unstable')\n   break\n else:\n  print('Stable')"]