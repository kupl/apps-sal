["import heapq\n\nn = int(input())\n\nbuy = []  # negative\nsell = []\nunknown = []\n\nres = 1\nfor i in range(n):\n    cmd, amount = input().strip().split()\n    amount = int(amount)\n    if cmd == 'ADD':\n        if sell and sell[0] < amount:\n            heapq.heappush(sell, amount)\n        elif buy and -buy[0] > amount:\n            heapq.heappush(buy, -amount)\n        else:\n            unknown.append(amount)\n    else:\n        if (sell and amount > sell[0]) or (buy and amount < -buy[0]):\n            print(0)\n            return\n        if sell and amount == sell[0]:\n            heapq.heappop(sell)\n        elif buy and amount == -buy[0]:\n            heapq.heappop(buy)\n        else:\n            res = res * 2 % 1000000007\n        for x in unknown:\n            if x < amount:\n                heapq.heappush(buy, -x)\n            elif x > amount:\n                heapq.heappush(sell, x)\n        unknown = []\nres = res * (len(unknown) + 1) % 1000000007\nprint(res)\n", "from heapq import heapify,heappush,heappop\n\nn=int(input())\nlow=[]\nhigh=[]\npos=0\nmid=set()\nfor i in range(n):\n    #print(high,low,mid)\n    s=input().split()\n    #print(s)\n    x=int(s[1])\n    s=s[0]\n    #print(s[0],s[0]=='ADD')\n    if(s=='ADD'):\n        if(len(low) and x<-1*low[0]):\n            heappush(low,(-x))\n        elif(len(high) and x>high[0]):\n            heappush(high,x)\n        else:\n            mid.add(x)\n    else:      \n        if(len(low) and x==-low[0]):\n            heappop(low)\n        elif(len(high) and x==high[0]):\n            heappop(high)\n        elif(x in mid):        \n            pos+=1    \n        else:\n            print(0)\n            return\n        for j in mid:\n            if(j>x):\n                heappush(high,j)\n            elif(j<x):\n                heappush(low,-j)\n        mid=set()\nmod=int(1e9+7)\nprint((pow(2,pos,mod)*(len(mid)+1))%mod)\n            \n            \n\n", "from sys import stdin\nimport heapq\nMOD = pow(10, 9) + 7\nn=int(stdin.readline())\na=[]\nfor i in range(n):\n    x=stdin.readline().split()\n    if x[0]=='ADD':\n        a.append((0,int(x[1])))\n    else:\n        a.append((1,int(x[1])))\nnext_accept=[-1]*n\naccept = -1\nfor i in range(n-1, -1, -1):\n    if a[i][0]== 1:\n        accept=i\n    next_accept[i] = accept\ntop = []\nbottom = []\nbuysell_n = 0\nlast_n=0\ninvalid = False\nfor i in range(n):\n    if a[i][0] == 0:\n        if next_accept[i] != -1:\n            if a[i][1] > a[next_accept[i]][1]:\n                heapq.heappush(top, a[i][1])\n            elif a[i][1] < a[next_accept[i]][1]:\n                heapq.heappush(bottom, -a[i][1])\n        elif (len(top) == 0 or a[i][1] < top[0]) and (len(bottom) == 0 or a[i][1] > -bottom[0]):\n                last_n += 1\n    else:\n        if len(top) > 0 and a[i][1] == top[0]:\n            heapq.heappop(top)\n        elif len(bottom) > 0 and a[i][1] == -bottom[0]:\n            heapq.heappop(bottom)\n        else:\n            if len(top) > 0 and a[i][1] > top[0] or len(bottom) > 0 and a[i][1] < -bottom[0]:\n                invalid = True\n                break\n            buysell_n += 1\n\nif invalid:\n    ans = 0\nelse:\n    ans = (pow(2, buysell_n, MOD)*(last_n+1))%MOD\nprint(ans)\n", "import heapq\n\nn = int(input())\n\nans = 1\n\nmod = 10**9 + 7\n\nbuy, undefined, sell = [], [], []\n\nfor i in range(n):\n    cmd, str_p = input().split()\n    p = int(str_p)\n\n    if cmd == 'ADD':\n        if buy and p < -buy[0]:\n            heapq.heappush(buy, -p)\n        elif sell and p > sell[0]:\n            heapq.heappush(sell, p)\n        else:\n            undefined.append(p)\n    else:\n        if (buy and p < -buy[0]) or (sell and p > sell[0]):\n            ans = 0\n            break\n        elif buy and p == -buy[0]:\n            heapq.heappop(buy)\n        elif sell and p == sell[0]:\n            heapq.heappop(sell)\n        else:\n            ans = (ans << 1) % mod\n        for x in undefined:\n            if x < p:\n                heapq.heappush(buy, -x)\n            elif x > p:\n                heapq.heappush(sell, x)\n        undefined = []\n\nans = ans * (len(undefined) + 1) % mod\n\nprint(ans)"]