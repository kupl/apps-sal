["f = lambda: map(int, input().split())\nn, m, w = f()\nwb = [(0, 0)] + list(zip(f(), f()))\nt = list(range(n + 1))\n\n\ndef g(x):\n    if x == t[x]: return x\n    t[x] = g(t[x])\n    return t[x]\n\n\nfor i in range(m):\n    x, y = f()\n    x, y = g(x), g(y)\n    if x != y: t[y] = x\n\np = [[] for j in range(n + 1)]\nfor i in range(1, n + 1): p[g(i)].append(i)\n\nd = [1] + [0] * w\nfor q in p:\n    if len(q) > 1:\n        WB = [wb[i] for i in q]\n        SW = sum(q[0] for q in WB)\n        SB = sum(q[1] for q in WB)\n\n        for D in range(w, -1, -1):\n            if d[D]:\n                if D + SW <= w: d[D + SW] = max(d[D + SW], d[D] + SB)\n                for W, B in WB:\n                    if D + W <= w: d[D + W] = max(d[D + W], d[D] + B)\n\n    elif len(q) == 1:\n        W, B = wb[q[0]]\n        for D in range(w - W, -1, -1):\n            if d[D]: d[D + W] = max(d[D + W], d[D] + B)\n\nprint(max(d) - 1)", "f = lambda: map(int, input().split())\nn, m, s = f()\nwb = [(0, 0)] + list(zip(f(), f()))\nt = list(range(n + 1))\n\ndef g(x):\n    if x == t[x]: return x\n    t[x] = g(t[x])\n    return t[x]\n\nfor i in range(m):\n    x, y = f()\n    x, y = g(x), g(y)\n    if x != y: t[y] = x\n\np = [[] for j in range(n + 1)]\nfor i in range(1, n + 1): p[g(i)].append(i)\n\nd = [1] + [0] * s\nfor q in p:\n    if len(q) > 1:\n        t = [wb[i] for i in q]\n        t.append((sum(x[0] for x in t), sum(x[1] for x in t)))\n        t.sort(key=lambda x: x[0])\n\n        for j in range(s, -1, -1):\n            if d[j]:\n                for w, b in t:\n                    if j + w > s: break\n                    d[j + w] = max(d[j + w], d[j] + b)\n\n    elif len(q) == 1:\n        w, b = wb[q[0]]\n        for j in range(s - w, -1, -1):\n            if d[j]: d[j + w] = max(d[j + w], d[j] + b)\n\nprint(max(d) - 1)", "f = lambda: list(map(int, input().split()))\n\nn, m, w = f()\n\nwb = [(0, 0)] + list(zip(f(), f()))\n\nt = list(range(n + 1))\n\n\n\n\n\ndef g(x):\n\n    if x == t[x]: return x\n\n    t[x] = g(t[x])\n\n    return t[x]\n\n\n\n\n\nfor i in range(m):\n\n    x, y = f()\n\n    x, y = g(x), g(y)\n\n    if x != y: t[y] = x\n\n\n\np = [[] for j in range(n + 1)]\n\nfor i in range(1, n + 1): p[g(i)].append(i)\n\n\n\nd = [1] + [0] * w\n\nfor q in p:\n\n    if len(q) > 1:\n\n        WB = [wb[i] for i in q]\n\n        SW = sum(q[0] for q in WB)\n\n        SB = sum(q[1] for q in WB)\n\n\n\n        for D in range(w, -1, -1):\n\n            if d[D]:\n\n                if D + SW <= w: d[D + SW] = max(d[D + SW], d[D] + SB)\n\n                for W, B in WB:\n\n                    if D + W <= w: d[D + W] = max(d[D + W], d[D] + B)\n\n\n\n    elif len(q) == 1:\n\n        W, B = wb[q[0]]\n\n        for D in range(w - W, -1, -1):\n\n            if d[D]: d[D + W] = max(d[D + W], d[D] + B)\n\n\n\nprint(max(d) - 1)\n\n\n\n# Made By Mostafa_Khaled\n", "R = lambda: map(int, input().split())\nn, m, w = R()\nws = [0] + list(R())\nbs = [0] + list(R())\ng = [[] for x in range(n + 1)]\nfor i in range(m):\n    x, y = R()\n    g[x].append(y)\n    g[y].append(x)\ncs = [0] * (n + 1)\ncnt = 1\nfor i in range(1, n + 1):\n    if not cs[i]:\n        cs[i] = cnt\n        q = []\n        q.append(i)\n        while q:\n            nxt = q.pop()\n            for x in g[nxt]:\n                if not cs[x]:\n                    cs[x] = cnt\n                    q.append(x)\n        cnt += 1\ngs = [[] for i in range(cnt)]\nfor i in range(1, n + 1):\n    gs[cs[i]].append(i)\ndp = [[0] * (w + 1) for i in range(cnt)]\nfor i in range(1, cnt):\n    tw = sum(ws[k] for k in gs[i])\n    tb = sum(bs[k] for k in gs[i])\n    for j in range(1, w + 1):\n        dp[i][j] = max(dp[i][j], dp[i - 1][j], (dp[i - 1][j - tw] + tb if j >= tw else 0))\n        for k in gs[i]:\n            dp[i][j] = max(dp[i][j], dp[i - 1][j], (dp[i - 1][j - ws[k]] + bs[k] if j >= ws[k] else 0))\nprint(dp[-1][w])", "R = lambda: map(int, input().split())\nn, m, w = R()\nws = list(R())\nbs = list(R())\nanc = [-1] * n\n\ndef get(x):\n    if anc[x] < 0:\n        return x\n    anc[x] = get(anc[x])\n    return anc[x]\n\ndef join(x1, x2):\n    x1, x2 = get(x1), get(x2)\n    if x1 != x2:\n        anc[x1] = x2\n\nfor i in range(m):\n    x1, x2 = R()\n    join(x1 - 1, x2 - 1)\ngs = [list() for i in range(n)]\nfor i in range(n):\n    gs[get(i)].append(i)\ngs = [x for x in gs if x]\ndp = [[0] * (w + 1) for i in range(len(gs) + 1)]\nfor i in range(len(gs)):\n    tw = sum(ws[k] for k in gs[i])\n    tb = sum(bs[k] for k in gs[i])\n    for j in range(w + 1):\n        dp[i][j] = max(dp[i][j], dp[i - 1][j], (dp[i - 1][j - tw] + tb if j >= tw else 0))\n        for k in gs[i]:\n            dp[i][j] = max(dp[i][j], dp[i - 1][j], (dp[i - 1][j - ws[k]] + bs[k] if j >= ws[k] else 0))\nprint(dp[len(gs) - 1][w])", "R = lambda: map(int, input().split())\nn, m, w = R()\nws = list(R())\nbs = list(R())\nanc = [-1] * n\n\ndef get(x):\n    if anc[x] < 0:\n        return x\n    anc[x] = get(anc[x])\n    return anc[x]\n\ndef join(x1, x2):\n    x1, x2 = get(x1), get(x2)\n    if x1 != x2:\n        anc[x1] = x2\n\nfor i in range(m):\n    x1, x2 = R()\n    join(x1 - 1, x2 - 1)\ngs = [list() for i in range(n)]\nfor i in range(n):\n    gs[get(i)].append(i)\ngs = [x for x in gs if x]\ndp = [[0] * (w + 1) for i in range(len(gs) + 1)]\nfor i in range(len(gs)):\n    tw = sum(ws[k] for k in gs[i])\n    tb = sum(bs[k] for k in gs[i])\n    for j in range(w + 1):\n        dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - tw] + tb) if j >= tw else dp[i - 1][j]\n        for k in gs[i]:\n            dp[i][j] = max(dp[i][j], (dp[i - 1][j - ws[k]] + bs[k] if j >= ws[k] else 0))\nprint(dp[len(gs) - 1][w])", "R = lambda: map(int, input().split())\nn, m, w = R()\nws = list(R())\nbs = list(R())\nanc = [-1] * n\n\ndef get(x):\n    if anc[x] < 0:\n        return x\n    anc[x] = get(anc[x])\n    return anc[x]\n\ndef join(x1, x2):\n    x1, x2 = get(x1), get(x2)\n    if x1 != x2:\n        anc[x1] = x2\n\nfor i in range(m):\n    x1, x2 = R()\n    join(x1 - 1, x2 - 1)\ngps = [list() for i in range(n)]\nfor i in range(n):\n    gps[get(i)].append(i)\ngps = [x for x in gps if x]\ndp = [[0] * (w + 1) for i in range(len(gps) + 1)]\nfor i in range(len(gps)):\n    tw = sum(ws[x] for x in gps[i])\n    tb = sum(bs[x] for x in gps[i])\n    for j in range(w + 1):\n        dp[i][j] = max(tb + dp[i - 1][j - tw] if tw <= j else 0, dp[i - 1][j])\n        for k in gps[i]:\n            dp[i][j] = max(dp[i][j], (dp[i - 1][j - ws[k]] + bs[k] if ws[k] <= j else 0))\nprint(dp[len(gps) - 1][w])", "def inp():\n    return [int(x) for x in input().split()]\n\n\ndef dfs(u, adj, visited, s, W, B):\n    visited[u] = True\n    total_w = W[u]\n    total_b = B[u]\n    s.append(u)\n    for v in adj[u]:\n        if not visited[v]:\n            w, b = dfs(v, adj, visited, s, W, B)\n            total_w += w\n            total_b += b\n    return total_w, total_b\n\n\ndef main():\n    n, m, w = inp()\n    W = inp()\n    B = inp()\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = inp()\n        x -= 1\n        y -= 1\n        adj[x].append(y)\n        adj[y].append(x)\n    visited = [False] * n\n    f = [0] * (w + 1)\n    for i in range(n):\n        if visited[i]:\n            continue\n        s = []\n        total_w, total_b = dfs(i, adj, visited, s, W, B)\n        for j in range(w, -1, -1):\n            jw = j + total_w\n            if jw <= w:\n                f[jw] = max(f[jw], f[j] + total_b)\n            for v in s:\n                jw = j + W[v]\n                if jw <= w:\n                    f[jw] = max(f[jw], f[j] + B[v])\n    print(f[w])\n\n\ndef __starting_point():\n    main()\n\n\n__starting_point()"]