["def main():\n    n, l = int(input()), list(map(int, input().split()))\n    if not (n & 1):\n        l.append(0)\n    l.append(150001)\n    i, b, c, fails0, fails1 = 0, 0, 150001, [], []\n    try:\n        while True:\n            a, b, c = b, c, l[i]\n            if a >= b or b <= c:\n                if len(fails0) + len(fails1) > 5:\n                    print(0)\n                    return\n                fails1.append(i - 1)\n            i += 1\n            a, b, c = b, c, l[i]\n            if a <= b or b >= c:\n                if len(fails0) + len(fails1) > 5:\n                    print(0)\n                    return\n                fails0.append(i - 1)\n            i += 1\n    except IndexError:\n        fails, res = fails0 + fails1, 0\n    for i in fails:\n        a = l[i]\n        for j in range(n):\n            f = fails1 if j & 1 else fails0\n            f.append(j)\n            l[i], l[j] = l[j], a\n            if (all(l[b - 1] > l[b] < l[b + 1] for b in fails0) and\n                    all(l[b - 1] < l[b] > l[b + 1] for b in fails1)):\n                res += 1 if j in fails else 2\n            l[j] = l[i]\n            del f[-1]\n        l[i] = a\n    print(res // 2)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n, l = int(input()), list(map(int, input().split()))\n    if not (n & 1):\n        l.append(0)\n    l.append(150001)\n    a, b, fails, res = 0, 150001, [], 0\n    for i, c in enumerate(l, -1):\n        if i & 1:\n            if a >= b or b <= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        else:\n            if a <= b or b >= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        a, b = b, c\n    ff = fails + [0]\n    for i in fails:\n        a = l[i]\n        for j in range(n):\n            l[i], l[j], ff[-1] = l[j], a, j\n            if (all((l[b - 1] < l[b] > l[b + 1]) if b & 1 else\n                    (l[b - 1] > l[b] < l[b + 1]) for b in ff)):\n                res += 1 if j in fails else 2\n            l[j] = l[i]\n        l[i] = a\n    print(res // 2)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n, l = int(input()), list(map(int, input().split()))\n    if not (n & 1):\n        l.append(0)\n    l.append(150001)\n    a, b, fails, res = 0, 150001, [], 0\n    for i, c in enumerate(l, -1):\n        if i & 1:\n            if a >= b or b <= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        else:\n            if a <= b or b >= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        a, b = b, c\n    ff = fails + [0]\n    for i in fails:\n        a = l[i]\n        for j in range(n):\n            l[i], l[j], ff[-1] = l[j], a, j\n            if (all((l[b - 1] < l[b] > l[b + 1]) if b & 1 else\n                    (l[b - 1] > l[b] < l[b + 1]) for b in ff)):\n                res += 1 if j in fails else 2\n            l[j] = l[i]\n        l[i] = a\n    print(res // 2)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n, l = int(input()), list(map(int, input().split()))\n    if not (n & 1):\n        l.append(0)\n    l.append(150001)\n    a, b, fails, res = 0, 150001, [], 0\n    for i, c in enumerate(l, -1):\n        if i & 1:\n            if a >= b or b <= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        else:\n            if a <= b or b >= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        a, b = b, c\n    check = compile(\"and\".join(\n        \"(l[{:n}]{:s}l[{:n}]{:s}l[{:n}])\".format(i - 1, \"><\"[i & 1], i, \"<>\"[i & 1], i + 1) for i in fails),\n                   \"<string>\", \"eval\")\n    for i in fails:\n        a = l[i]\n        for j in range(n):\n            l[i], l[j] = l[j], a\n            if eval(check) and ((l[j - 1] < l[j] > l[j + 1]) if j & 1 else (l[j - 1] > l[j] < l[j + 1])):\n                res += 1 if j in fails else 2\n            l[j] = l[i]\n        l[i] = a\n    print(res // 2)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "def main():\n    n, l = int(input()), list(map(int, input().split()))\n    if not (n & 1):\n        l.append(0)\n    l.append(150001)\n    a, b, fails, tmp, res = 0, 150001, [], [], 0\n    for i, c in enumerate(l, -1):\n        if i & 1:\n            if a >= b or b <= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        else:\n            if a <= b or b >= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        a, b = b, c\n    for b in fails:\n        tmp.append(\"><\"[b & 1] if b - a == 1 else \"and \")\n        tmp.append(\"l[{:n}]\".format(b))\n        a = b\n    check = compile(\"\".join(tmp[1:]), \"<string>\", \"eval\")\n    for i in fails:\n        a = l[i]\n        for j in range(n):\n            l[i], l[j] = l[j], a\n            if eval(check) and ((l[j - 1] < l[j] > l[j + 1]) if j & 1 else (l[j - 1] > l[j] < l[j + 1])):\n                res += 1 if j in fails else 2\n            l[j] = l[i]\n        l[i] = a\n    print(res // 2)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n, l = int(input()), list(map(int, input().split()))\n    if not (n & 1):\n        l.append(0)\n    l.append(150001)\n    a, b, fails, tmp, res = 0, 150001, [], [], 0\n    for i, c in enumerate(l, -1):\n        if i & 1:\n            if a >= b or b <= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        else:\n            if a <= b or b >= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        a, b = b, c\n    for b in fails:\n        tmp.append(\"><\"[b & 1] if b - a == 1 else \"and \")\n        tmp.append(\"l[{:n}]\".format(b))\n        a = b\n    check = compile(\"\".join(tmp[1:]), \"<string>\", \"eval\")\n    for i in fails:\n        a = l[i]\n        for j in range(0, n, 2):\n            l[i], l[j] = l[j], a\n            if l[j - 1] > a < l[j + 1] and eval(check):\n                res += 1 if j in fails else 2\n            l[j] = l[i]\n        for j in range(1, n, 2):\n            l[i], l[j] = l[j], a\n            if l[j - 1] < a > l[j + 1] and eval(check):\n                res += 1 if j in fails else 2\n            l[j] = l[i]\n        l[i] = a\n    print(res // 2)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def main():\n    n, l = int(input()), list(map(int, input().split()))\n    if not (n & 1):\n        l.append(0)\n    l.append(150001)\n    a, i, j, fails = l[0], 0, 1, set()\n    try:\n        while True:\n            b = l[j]\n            if a >= b:\n                fails.add(i)\n                fails.add(j)\n                if len(fails) > 6:\n                    break\n            i += 2\n            a = l[i]\n            if a >= b:\n                fails.add(i)\n                fails.add(j)\n                if len(fails) > 6:\n                    break\n            j += 2\n        print(0)\n        return\n    except IndexError:\n        tmp, res = [], 0\n    for b in sorted(fails):\n        tmp.append(\"><\"[b & 1] if b - a == 1 else \"and \")\n        tmp.append(\"l[{:n}]\".format(b))\n        a = b\n    check = compile(\"\".join(tmp[1:]), \"<string>\", \"eval\")\n    for i in fails:\n        a = l[i]\n        for j in fails:\n            l[i], l[j] = l[j], a\n            if eval(check):\n                res -= 1\n            l[j] = l[i]\n        for j in range(0, n, 2):\n            l[i], l[j] = l[j], a\n            if l[j - 1] > a < l[j + 1] and eval(check):\n                res += 2\n            l[j] = l[i]\n        for j in range(1, n, 2):\n            l[i], l[j] = l[j], a\n            if l[j - 1] < a > l[j + 1] and eval(check):\n                res += 2\n            l[j] = l[i]\n        l[i] = a\n    print(res // 2)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "3\n\n\ndef needs_rep(t, i):\n\tif i % 2 == 0:\n\t\treturn t[i] >= t[i+1]\n\telse:\n\t\treturn t[i] <= t[i+1]\n\ndef would_need_rep(t, i, j1, j2):\n\tn = len(t)\n\tif i < 0:\n\t\treturn False\n\tif i >= n-1:\n\t\treturn False\n\n\ttj1 = t[j2]\n\ttj2 = t[j1]\n\n\tti = t[i]\n\tif i == j1:\n\t\tti = tj1\n\tif i == j2:\n\t\tti = tj2\n\n\tti1 = t[i+1]\n\tif i+1 == j1:\n\t\tti1 = tj1\n\tif i+1 == j2:\n\t\tti1 = tj2\n\n\tif i % 2 == 0:\n\t\treturn ti >= ti1\n\telse:\n\t\treturn ti <= ti1\n\n\ndef main():\n\tn = int(input())\n\tt = [int(i) for i in input().split()]\n\n\t# rep = [False]*(n-1)\n\trep = []\n\tfor i in range(n-1):\n\t\tif needs_rep(t, i):\n\t\t\trep.append(i)\n\n\tif(len(rep) > 4):\n\t\tprint(0)\n\t\treturn\n\n\t# print(rep)\n\n\t# to_try = [rep[0]]\n\t# if rep[0] < n-1:\n\t# \tto_try.append(rep[0] + 1)\n\tto_try = [rep[0], rep[0] + 1]\n\n\ts = set()\n\n\tfor i in to_try:\n\t\tfor j in range(n):\n\t\t\tif i == j: continue\n\n\t\t\tif would_need_rep(t, i, i, j):\n\t\t\t\tcontinue\n\t\t\tif would_need_rep(t, i-1, i, j):\n\t\t\t\tcontinue\n\t\t\tif would_need_rep(t, j, i, j):\n\t\t\t\tcontinue\n\t\t\tif would_need_rep(t, j-1, i, j):\n\t\t\t\tcontinue\n\n\t\t\tbad = False\n\t\t\tfor r in rep:\n\t\t\t\tif would_need_rep(t, r, i, j):\n\t\t\t\t\tbad = True\n\t\t\tif bad: continue\n\n\t\t\t# print(i, j)\n\t\t\t# print(would_need_rep(t, 2, i, j))\n\n\t\t\tif (i, j) not in s and (j, i) not in s:\n\t\t\t\t# print('Adding {}'.format((i, j)))\n\t\t\t\ts.add((i, j))\n\n\tprint(len(s))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "n = int(input())\nt = list(map(int, input().split()))\nt = [-1] + t\n\nbadIdx = []\nnice = []\ndef getBadIdx():\n    for i in range(1,n):\n        if ((i%2 == 0) and (t[i] <= t[i+1])) or ((i%2 == 1) and (t[i] >= t[i+1])):\n            badIdx.append((i,i+1))\n\ndef checkBad(k):\n    if ((k <= (n-1)) and (((k%2 == 0) and (t[k] <= t[k+1])) or ((k%2 == 1) and (t[k] >= t[k+1])))) \\\n        or ((k-1) >= 1 and (((k-1)%2 == 0) and (t[k-1] <= t[k]) or ((k-1)%2 == 1) and (t[k-1] >= t[k]))):\n            return True\n    for (i,j) in badIdx:\n        if ((i%2 == 0) and (t[i] <= t[j])) or ((i%2 == 1) and (t[i] >= t[j])):\n            return True\n    \n    return False\n\ndef swap(i,j):\n    ith = t[i]\n    t[i] = t[j]\n    t[j] = ith\n    \ngetBadIdx()\n\nif len(badIdx) > 4:\n    print(0)\nelse:\n    (i,j) = badIdx[0]\n    #for (i,j) in badIdx:\n    for k in range(1,n+1):\n        if i != k and t[i] != t[k]:\n            swap(i,k)\n            if not(checkBad(k)):\n                nice.append((i,k))\n                swap(i,k)\n            else:\n                swap(i,k)\n            \n        if j != k and t[j] != t[k]:\n            swap(j,k)\n            if not(checkBad(k)):\n                nice.append((j,k))\n                swap(j,k)\n            else:\n                swap(j,k)\n    \n    print(len(set([tuple(sorted(t)) for t in nice])))\n", "def main():\n    n, l = int(input()), list(map(int, input().split()))\n    if not (n & 1):\n        l.append(0)\n    l.append(150001)\n    a, b, fails, res = 0, 150001, [], 0\n    for i, c in enumerate(l, -1):\n        if i & 1:\n            if a >= b or b <= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        else:\n            if a <= b or b >= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        a, b = b, c\n    ff = fails + [0]\n    for i in fails:\n        a = l[i]\n        for j in range(n):\n            l[i], l[j], ff[-1] = l[j], a, j\n            if (all((l[b - 1] < l[b] > l[b + 1]) if b & 1 else\n                    (l[b - 1] > l[b] < l[b + 1]) for b in ff)):\n                res += 1 if j in fails else 2\n            l[j] = l[i]\n        l[i] = a\n    print(res // 2)\n\nmain()", "n, m = int(input()), 150001\np = [m] + list(map(int, input().split())) + [m * (n & 1)]\nf = lambda i: p[i] >= p[i + 1] if i & 1 else p[i] <= p[i + 1]\nh = lambda i, j: sum(f(k) for k in {i, i - 1, j, j - 1})\nt = [f(i) for i in range(n + 1)]\ns = sum(t)\nif s > 4: print(0);return\ne = {i + 1 for i in range(n) if t[i] or t[i + 1]}\n\ndef g(i, j):\n    p[i], p[j] = p[j], p[i]\n    t = h(i, j)\n    p[i], p[j] = p[j], p[i]\n    return (i < j or (i > j and j not in e)) and h(i, j) - t == s\n\nprint(sum(g(i, j + 1) for i in e for j in range(n)))", "n, m = int(input()), 150001\np = [m] + list(map(int, input().split())) + [m * (n & 1)]\nf = lambda i: p[i] >= p[i + 1] if i & 1 else p[i] <= p[i + 1]\ng = lambda i, j: sum(f(k) for k in {i, i - 1, j, j - 1})\nt = [f(i) for i in range(n + 1)]\nr, s = 0, sum(t)\nif s > 4: print(0);return\ne = {i + 1 for i in range(n) if t[i] or t[i + 1]}\nfor i in e:\n    for j in range(1, n + 1):\n        if (i < j or (i > j and j not in e)) and g(i, j) == s:\n            p[i], p[j] = p[j], p[i]\n            r += g(i, j) == 0\n            p[i], p[j] = p[j], p[i]\nprint(r)", "def main():\n    n, l = int(input()), list(map(int, input().split()))\n    if not (n & 1):\n        l.append(0)\n    l.append(150001)\n    a, b, fails, res = 0, 150001, [], 0\n    for i, c in enumerate(l, -1):\n        if i & 1:\n            if a >= b or b <= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        else:\n            if a <= b or b >= c:\n                if len(fails) > 5:\n                    print(0)\n                    return\n                fails.append(i)\n        a, b = b, c\n    check = compile(\"and\".join(\n        \"(l[{:n}]{:s}l[{:n}]{:s}l[{:n}])\".format(i - 1, \"><\"[i & 1], i, \"<>\"[i & 1], i + 1) for i in fails),\n                   \"<string>\", \"eval\")\n    for i in fails:\n        a = l[i]\n        for j in range(n):\n            l[i], l[j] = l[j], a\n            if eval(check) and ((l[j - 1] < l[j] > l[j + 1]) if j & 1 else (l[j - 1] > l[j] < l[j + 1])):\n                res += 1 if j in fails else 2\n            l[j] = l[i]\n        l[i] = a\n    print(res // 2)\n\n\ndef __starting_point():\n    main()\n\n\n\n# Made By Mostafa_Khaled\n\n__starting_point()", "def get_bit(diff, i):\n    return 1 if ((i%2==1 and diff<=0) or (i%2==0 and diff>=0)) else 0\n\ndef swap_(i, j, a):\n    temp  = a[i]\n    a[i]  = a[j]\n    a[j]  = temp\n    \ndef swap(i, j, n, a, mask, S):\n    change = 0\n    swap_(i, j, a)\n    set_index = set([i, j])\n    \n    if i<n-1:\n        set_index.add(i+1)\n    \n    if j<n-1:\n        set_index.add(j+1)\n    \n    for index in set_index:\n        if index > 0:\n            diff    = a[index] - a[index-1] \n            bit_    = get_bit(diff, index)\n            change += bit_ - mask[index]\n        \n    swap_(i, j, a)    \n    if S + change == 0:\n        return 1\n    return 0    \n\nn     = int(input())\na     = list(map(int, input().split()))\n\ndiff  = [-1] + [x-y for x, y in zip(a[1:], a[:-1])]\nmask  = [get_bit(diff[i], i) for i in range(n)] \n\nS = sum(mask)\nfirst = -1\nfor i, x in enumerate(mask):\n    if x == 1:\n        first = i\n        break\n        \ncnt = 0\nfor second in range(n):\n    if swap(first, second, n, a, mask, S) == 1:\n        cnt += 1\n    \n    if first != 0 and swap(first-1, second, n, a, mask, S) == 1:\n        cnt += 1\n    \nif first!=0 and swap(first-1, first, n, a, mask, S) == 1:\n    cnt-=1\n    \nprint(cnt)    \n\n#9\n#1 2 3 4 5 6 7 8 9\n\n#10\n#3 2 1 4 1 4 1 4 1 4\n\n#4\n#200 150 100 50\n\n#5\n#2 8 4 7 7\n"]