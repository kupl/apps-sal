["def get(l,n):\n l1,l2 = [],[]\n i = 1\n h1,m1 = l[0]\n while (i < len(l)):\n  h2,m2 = l[i]\n  if (h1>h2):\n   if (m1 >= m2):\n    l1 += [(0,10**20)]\n    l2 += [(-1,-1)]\n   else:\n    d = (h1-h2)//(m2-m1)\n    if (((h1-h2)%(m2-m1)) == 0):\n     l1 += [(0,d-1)]\n     l2 += [(d+1,10**20)]\n    else:\n     l1 += [(0,d)]\n     l2 += [(d+1,10**20)]\n  elif(h1==h2):\n   if (m1 > m2):\n    l1 += [(1,10**20)]\n    l2 += [(-1,-1)]\n   elif(m1==m2):\n    l1 += [(-1,-1)]\n    l2 += [(-1,-1)]\n   else:\n    l2 += [(1,10**20)]\n    l1 += [(-1,-1)]\n  else:\n   if (m1 <= m2):\n    l2 += [(0,10**20)]\n    l1 += [(-1,-1)]\n   else:\n    d = (h2-h1)//(m1-m2)\n    if ((h2-h1)%(m1-m2) == 0):\n     l2 += [(0,d-1)]\n     l1 += [(d+1,10**20)]\n    else:\n     l2 += [(0,d)]\n     l1 += [(d+1,10**20)]\n  i += 1\n  h1,m1 = h2,m2\n return l1,l2\n \ndef intersect(k1,k2):\n k1,k2 = min(k1,k2),max(k1,k2)\n c1,c2 = k1\n c3,c4 = k2\n l = [c1,c2,c3,c4]\n l.sort()\n if (l[2]==c2):\n  return (c3,min(c2,c4))\n elif (l[3]==c2):\n  return k2\n else:\n  return (-1,-1)\n \n \n \ndef union(k1,k2):\n k1,k2 = min(k1,k2),max(k1,k2)\n c1,c2 = k1\n c3,c4 = k2\n l = [c1,c2,c3,c4]\n l.sort()\n if (c2==l[3]):\n  return ([c1,c2])\n elif(c2==l[2] or ((c3-c2) == 1)):\n  return([c1,c4])\n else:\n  return([c1,c2,c3,c4])\n \n \ndef aa(l1,l2,n):\n c1,c2 = 0,10**20\n i = 0\n n -= 1\n while (i < n):\n  if (i%2 == 0):\n   k1,k2 = l1[i]\n  else:\n   k1,k2 = l2[i]\n  i += 1\n  if ((k1,k2) == (-1,-1)):\n   return (-1,-1)\n  c1,c2 = intersect((c1,c2),(k1,k2))\n  if ((c1,c2) == (-1,-1)):\n   return (c1,c2)\n return (c1,c2)\n \n \ntest = int(input())\nwhile (test != 0):\n test -= 1\n n = int(input())\n l = []\n i = 0\n while (i < n):\n  c1,c2 = list(map(int,input().split()))\n  l += [(c1,c2)]\n  i += 1\n if (n == 1):\n  print(1)\n  print(\"0 Inf\")\n else:\n  l1,l2 = (get(l,n))\n  k1,k2 = aa(l1,l2,n)\n  if ((k1,k2) == (-1,-1)):\n   k1,k2 = aa(l2,l1,n)\n   if ((k1,k2) == (-1,-1)):\n    print(0)\n   else:\n    print(1)\n    if (k2 == 10**20):\n     k2 = \"Inf\"\n    print(str(k1) + \" \" +str(k2))\n  else:\n   k3,k4 = aa(l2,l1,n)\n   if ((k3,k4) == (-1,-1)):\n    print(1)\n    if (k2 == 10**20):\n     k2 = \"Inf\"\n    print(str(k1) + \" \" +str(k2))\n   else:\n    p = union((k1,k2),(k3,k4))\n    if (len(p)==2):\n     c1,c2 = p\n     if (c2==10**20):\n      c2 = \"Inf\"\n     print(1)\n     print(str(c1) + \" \" +str(c2))\n    else:\n     c1,c2,c3,c4 = p\n     if (c4 == 10**20):\n      c4 = \"Inf\"\n     print(2)\n     print(str(c1) + \" \" +str(c2))\n     print(str(c3) + \" \" +str(c4))\n", "import math\ndef CHAHG1(xh,m):\n x = [x for x in xh]\n y = [y for y in m]\n \n up = []\n lw = []\n L = None\n R = None\n for i in range(0,len(x)-1):\n  if(i%2==0):\n   if((y[i]-y[i+1])==0):\n    if(x[i] < x[i+1]):\n     lw.append(0)\n    else:\n     return False\n   else:\n    if(y[i] < y[i+1]):\n     l = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     l = int(math.floor(l))+1\n     lw.append(max(0,l))\n    else:\n     r = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     r = int(math.ceil(r))-1\n     if(r<0):\n      return False\n     up.append(r)\n  else:\n   if((y[i]-y[i+1])==0):\n    if(x[i] > x[i+1]):\n     lw.append(0)\n    else:\n     return False\n   else:\n    if(y[i] > y[i+1]):\n     l = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     l = int(math.floor(l))+1\n     lw.append(max(0,l))\n    else:\n     r = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     r = int(math.ceil(r))-1\n     if(r<0):\n      return False\n     up.append(r)\n if(len(lw)>0):\n  L = max(lw)\n else:\n  L = 0\n if(len(up) > 0):\n  R = min(up)\n  if(L>R):\n   return False\n else:\n  R = \"Inf\"\n \n return L,R\n \ndef CHAHG2(xh,m):\n x = [x for x in xh]\n y = [y for y in m]\n up = []\n lw = []\n L = None\n R = None\n for i in range(0,len(x)-1):\n  if(i%2==1):\n   if((y[i]-y[i+1])==0):\n    if(x[i] < x[i+1]):\n     lw.append(0)\n    else:\n     return False\n   else:\n    if(y[i] < y[i+1]):\n     l = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     l = int(math.floor(l))+1\n     lw.append(max(0,l))\n    else:\n     r = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     r = int(math.ceil(r))-1\n     if(r<0):\n      return False\n     up.append(r)\n  else:\n   if((y[i]-y[i+1])==0):\n    if(x[i] > x[i+1]):\n     lw.append(0)\n    else:\n     return False\n   else:\n    if(y[i] > y[i+1]):\n     l = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     l = int(math.floor(l))+1\n     lw.append(max(0,l))\n    else:\n     r = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     r = int(math.ceil(r))-1\n     if(r<0):\n      return False\n     up.append(r)\n if(len(lw)>0):\n  L = max(lw)\n else:\n  L = 0\n if(len(up) > 0):\n  R = min(up)\n  if(L>R):\n   return False\n else:\n  R = \"Inf\"\n \n return L,R\n \nT = int(input())\nwhile T:\n T = T-1\n N = int(input())\n xh = []\n m = []\n for i in range(N):\n  a,b = list(map(int,input().split()))\n  xh.append(a)\n  m.append(b)\n \n res = []\n p = CHAHG1(xh,m)\n q = CHAHG2(xh,m)\n if(p is not False):\n  res.append(p)\n if(q is not False):\n  res.append(q)\n  \n res.sort()\n sz = len(res)\n \n if(N==1):\n  print(\"1\")\n  print(\"0 Inf\")\n else:\n  if(sz==2 and (res[0][1]+1 == res[1][0])):\n   print(\"1\")\n   print(res[0][0],res[1][1])\n  else:\n   print(sz)\n   for L,R in res:\n    print(L,R)\n \n", "import math\ndef CHAHG1(xh,m):\n x = [x for x in xh]\n y = [y for y in m]\n\n up = []\n lw = []\n L = None\n R = None\n for i in range(0,len(x)-1):\n  if(i%2==0):\n   if((y[i]-y[i+1])==0):\n    if(x[i] < x[i+1]):\n     lw.append(0)\n    else:\n     return False\n   else:\n    if(y[i] < y[i+1]):\n     l = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     l = int(math.floor(l))+1\n     lw.append(max(0,l))\n    else:\n     r = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     r = int(math.ceil(r))-1\n     if(r<0):\n      return False\n     up.append(r)\n  else:\n   if((y[i]-y[i+1])==0):\n    if(x[i] > x[i+1]):\n     lw.append(0)\n    else:\n     return False\n   else:\n    if(y[i] > y[i+1]):\n     l = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     l = int(math.floor(l))+1\n     lw.append(max(0,l))\n    else:\n     r = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     r = int(math.ceil(r))-1\n     if(r<0):\n      return False\n     up.append(r)\n if(len(lw)>0):\n  L = max(lw)\n else:\n  L = 0\n if(len(up) > 0):\n  R = min(up)\n  if(L>R):\n   return False\n else:\n  R = \"Inf\"\n\n return L,R\n\ndef CHAHG2(xh,m):\n x = [x for x in xh]\n y = [y for y in m]\n up = []\n lw = []\n L = None\n R = None\n for i in range(0,len(x)-1):\n  if(i%2==1):\n   if((y[i]-y[i+1])==0):\n    if(x[i] < x[i+1]):\n     lw.append(0)\n    else:\n     return False\n   else:\n    if(y[i] < y[i+1]):\n     l = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     l = int(math.floor(l))+1\n     lw.append(max(0,l))\n    else:\n     r = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     r = int(math.ceil(r))-1\n     if(r<0):\n      return False\n     up.append(r)\n  else:\n   if((y[i]-y[i+1])==0):\n    if(x[i] > x[i+1]):\n     lw.append(0)\n    else:\n     return False\n   else:\n    if(y[i] > y[i+1]):\n     l = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     l = int(math.floor(l))+1\n     lw.append(max(0,l))\n    else:\n     r = (float)(x[i+1]-x[i])/(y[i]-y[i+1])\n     r = int(math.ceil(r))-1\n     if(r<0):\n      return False\n     up.append(r)\n if(len(lw)>0):\n  L = max(lw)\n else:\n  L = 0\n if(len(up) > 0):\n  R = min(up)\n  if(L>R):\n   return False\n else:\n  R = \"Inf\"\n\n return L,R\n\nT = int(input())\nwhile T:\n T = T-1\n N = int(input())\n xh = []\n m = []\n for i in range(N):\n  a,b = list(map(int,input().split()))\n  xh.append(a)\n  m.append(b)\n\n res = []\n p = CHAHG1(xh,m)\n q = CHAHG2(xh,m)\n if(p is not False):\n  res.append(p)\n if(q is not False):\n  res.append(q)\n  \n res.sort()\n sz = len(res)\n\n if(N==1):\n  print(\"1\")\n  print(\"0 Inf\")\n else:\n  if(sz==2 and res[0][1] >= res[1][0]):\n   print(\"0\")\n  elif(sz==2 and (res[0][1]+1 == res[1][0])):\n   print(\"1\")\n   print(res[0][0],res[1][1])\n  else:\n   print(sz)\n   for L,R in res:\n    print(L,R)\n", "from random import *\n\ndef check(h):\n ans = True\n for i in range(n-1):\n  if (i%2 == 0):\n   if (h[i] < h[i+1]):\n    ans = True\n   else:\n    ans = False\n    break\n  else:\n   if (h[i] > h[i+1]):\n    ans = True\n   else:\n    ans = False\n    break\n if (ans == True):\n  return 1\n \n ans = True\n for i in range(n-1):\n  if (i%2 == 1):\n   if (h[i] < h[i+1]):\n    ans = True\n   else:\n    ans = False\n    break\n  else:\n   if (h[i] > h[i+1]):\n    ans = True\n   else:\n    ans = False\n    break\n if (ans == True):\n  return 1\n\n return 0\n \nfor t in range(int(input())):\n n = int(input())\n h = []\n r = []\n for i in range(n):\n  #x, y = randint(1,10), randint(1,10)\n  x, y = list(map(int, input().split()))\n  h.append(x)\n  r.append(y)\n\n ans = []\n curr = check(h)\n\n #print h\n #print r\n \n if (curr != 0):\n  ans.append(0)\n  \n #print 0, \":\", \"x\", h, curr\n for i in range(1, 20):\n  for j in range(n):\n   h[j] += r[j]\n  temp = check(h)\n  #print i, \":\", curr, h, temp\n  if (temp != curr):\n   if (temp == 0):\n    ans.append(i-1)\n   elif (temp == 1 and curr == 0):\n    ans.append(i)\n   elif (temp == 2 and curr == 0):\n    ans.append(i)\n   elif (temp == 1 and curr == 2):\n    ans.append(i-1)\n    ans.append(i)\n   elif (temp == 2 and curr == 1):\n    ans.append(i-1)\n    ans.append(i)\n  curr = temp\n  if (len(ans)== 3):\n   break\n if (len(ans)%2==1):\n  ans.append('Inf')\n  \n print(len(ans)/2)\n for i in range(0, len(ans), 2):\n  print(ans[i], ans[i+1])\n \n", "def is_zigzag(h):\n if (len(h) <= 1):\n  return True\n sign = h[1] - h[0]\n if (len(h) == 2 and sign == 0):\n  return False\n for i in range(2, len(h)):\n  diff = h[i] - h[i - 1]\n  if (diff * sign >= 0):\n   return False\n  sign = diff \n return True\n\ndef is_possible(h, r):\n for i in range(1, len(h)):\n  diff = h[i] - h[i - 1]\n  if (diff < 0 and r[i] > r[i - 1]):\n   return True\n  elif (diff > 0 and r[i] < r[i - 1]):\n   return True\n  elif (diff == 0 and r[i] != r[i - 1]):\n   return True\n return False\n\ndef add_day(h, r):\n for i in range(len(h)):\n  h[i] += r[i]\n\nINF = float('inf')\ndef find_intervals(heights, rates):\n intervals = []\n f = is_zigzag(heights)\n if (f):\n  interval = [0, 'Inf']\n  intervals.append(interval)\n day = 0\n while (is_possible(heights, rates)):\n  day += 1\n  add_day(heights, rates)\n  if (is_zigzag(heights)):\n   if (f == 1):\n    continue\n   else:\n    intervals.append([day, 'Inf'])\n    f = 1\n  else:\n   if (f == 1):\n    intervals[-1][-1] = day - 1\n    f = 0\n\n return intervals\n\n\nt = int(input())\nfor i in range(t):\n n = int(input())\n heights = []\n rates = []\n for k in range(n):\n  h, m = list(map(int, input().split()))\n  heights.append(h)\n  rates.append(m)\n intervals = find_intervals(heights, rates)\n print(len(intervals))\n for interval in intervals:\n  print('{} {}'.format(interval[0], interval[1]))\n", "from math import ceil\nt=int(input())\nrangex1=int(0)\nrangex2=int(0)\nrangey1=int(0)\nrangey2=int(0)\nwhile t>0:\n n = int(input())\n h = [int(0)]*11\n m = [int(0)]*11\n alt = int(-1)\n for i in range(0,n):\n  a,b = input().split(\" \")\n  h[i]=int(a)\n  m[i]=int(b)\n\n if n==1:\n  print('1')\n  print('0 Inf')\n else :\n  state = int(1)\n  count =int(0)\n  index= int(0)\n  curtime = int(0)\n  while True:\n   state = 1\n   alt = -1\n   for i in range(1,n):\n    if i==1:\n     if h[i]>h[i-1]: alt=1\n     elif h[i]<h[i-1]: alt=0\n     else:\n      alt=2\n      state=0\n      break\n    elif alt==1:\n     if h[i]<h[i-1]: alt=0\n     else :\n      state=0\n      break\n    else :\n     if h[i]>h[i-1] : alt=1\n     else :\n      state=0\n      break\n\n   if state ==1:\n    count +=1\n    if index==0: rangex1=int(curtime)\n    else : rangex2=int(curtime) \n\n   mintime=int(0)\n   found=int(0)\n   tt=int(0)\n   for i in range(1,n):\n    if h[i-1]<h[i]:\n     if m[i-1]>m[i]:\n      tt = int(ceil(float(h[i]-h[i-1])/float(m[i-1]-m[i])))\n      if found==0:\n       mintime=tt\n       found=1\n      elif tt<mintime:\n       mintime=tt\n    elif h[i-1]>h[i]:\n     if m[i]>m[i-1]:\n      tt=int(ceil(float(h[i-1]-h[i])/float(m[i]-m[i-1])))\n      if found==0:\n       mintime=tt\n       found=1\n      elif tt<mintime:\n       mintime=tt\n    else:\n     if m[i]!=m[i-1]:\n      tt=1\n      if found==0:\n       mintime=tt\n       found=1\n      elif tt<mintime:\n       mintime=tt\n\n   #print found, mintime\n   if found == 0:\n    if state==1:\n     if index==0:\n      rangey1=int(-1)\n      index+=1\n     else :\n      rangey2=int(-1)\n      index+=1\n    break\n   else:\n    if state==1:\n     if index==0:\n      rangey1=int(curtime+mintime-1)\n      index+=1\n     else:\n      rangey2=int(curtime+mintime-1)\n      index+=1\n    \n    curtime+=mintime\n    for i in range(0,n):\n     h[i]+=m[i]*mintime\n\n  if count>1:\n   if rangey1==rangex2-1:\n    rangey1=rangey2\n    count-=1\n\n  print(count)\n  if count>=1:\n   if rangey1==-1:\n    print('%d Inf' %(rangex1))\n   else :\n    print(rangex1, rangey1)\n  if count>=2 :\n   if rangey2==-1:\n    print('%d Inf' %(rangex2))\n   else :\n    print(rangey1, rangey2)\n t-=1\n\n\n\n", "import math\ndef floorm(a, b) :\n if a % b == 0 : return (a / b) - 1\n else : return a / b\ndef ceilp(a, b) :\n if a % b == 0 : return (a / b) + 1\n else : return (a + 1) / b + 1\ndef calc(h, m, f) :\n l, r = 0, 1234567890\n for i in range(len(h) - 1) :\n  if i & 1 : u, v = i, i + 1\n  else : u, v = i + 1, i\n  if f : u, v = v, u\n  H, M = h[u] - h[v], m[v] - m[u]#M * t < H\n  if M > 0 : r = min(floorm(H, M), r)\n  elif M < 0 : l = max(ceilp(H, M), l)\n  elif H <= 0 : return -1, -1\n  if l > r : return -1, -1\n return l, r\ndef printerval(l, r) :\n if r == 1234567890 : r = \"Inf\"\n print(l, r)\n\ndef doit() :\n n, h, m, a, t, al, ar = int(input()), [], [], [], [0], [], []\n for i in range(n) :\n  h += [0]; m += [0]; a += [0]\n for i in range(n) :\n  h[i], m[i] = list(map(int, input().split()))\n if n == 1 :\n  print(1)\n  print(\"0 Inf\")\n  return\n l1, r1 = calc(h, m, 1)\n l2, r2 = calc(h, m, 0)\n if l1 != -1 and l2 != -1 :\n  if l1 > l2 : l1, l2, r1, r2 = l2, l1, r2, r1\n  if r1 + 1 == l2 :\n   print(1)\n   printerval(l1, r2)\n  else :\n   print(2)\n   printerval(l1, r1)\n   printerval(l2, r2)\n elif l1 != -1 :\n  print(1)\n  printerval(l1, r1)\n elif l2 != -1 :\n  print(1)\n  printerval(l2, r2)\n else : print(0)\n\nfor cas in range(int(input())) : doit()", "import math\ndef floorm(a, b) :\n if a % b == 0 : return (a / b) - 1\n else : return a / b\ndef ceilp(a, b) :\n if a % b == 0 : return (a / b) + 1\n else : return (a + 1) / b + 1\ndef calc(h, m, f) :\n l, r = 0, 1234567890\n for i in range(len(h) - 1) :\n  if i & 1 : u, v = i, i + 1\n  else : u, v = i + 1, i\n  if f : u, v = v, u\n  H, M = h[u] - h[v], m[v] - m[u]#M * t < H\n  if M > 0 : r = min(floorm(H, M), r)\n  elif M < 0 : l = max(ceilp(H, M), l)\n  elif H <= 0 : return -1, -1\n  if l > r : return -1, -1\n return l, r\ndef printerval(l, r) :\n if r == 1234567890 : r = \"Inf\"\n print(l, r)\n\ndef doit() :\n n, h, m, a, t, al, ar = int(input()), [], [], [], [0], [], []\n for i in range(n) :\n  h += [0]; m += [0]; a += [0]\n for i in range(n) :\n  h[i], m[i] = list(map(int, input().split()))\n if n == 1 :\n  print(1)\n  print(\"0 Inf\")\n  return\n l1, r1 = calc(h, m, 1)\n l2, r2 = calc(h, m, 0)\n if l1 != -1 and l2 != -1 :\n  if l1 > l2 : l1, l2, r1, r2 = l2, l1, r2, r1\n  if r1 + 1 == l2 :\n   print(1)\n   printerval(l1, r2)\n  else :\n   print(2)\n   printerval(l1, r1)\n   printerval(l2, r2)\n elif l1 != -1 :\n  print(1)\n  printerval(l1, r1)\n elif l2 != -1 :\n  print(1)\n  printerval(l2, r2)\n else : print(0)\n\nfor cas in range(int(input())) : doit()", "import math\ndef calc(h, m, f) :\n l, r = 0, 1234567890\n for i in range(len(h) - 1) :\n  if i & 1 : u, v = i, i + 1\n  else : u, v = i + 1, i\n  if f : u, v = v, u\n  H, M = h[u] - h[v], m[v] - m[u]#M * t < H\n  if M > 0 : r = min(int(math.floor(1.0 * H / M - 1e-12)), r)\n  elif M < 0 : l = max(int(math.ceil(1.0 * H / M + 1e-12)), l)\n  elif H <= 0 : return -1, -1\n  if l > r : return -1, -1\n return l, r\ndef printerval(l, r) :\n if r == 1234567890 : r = \"Inf\"\n print(l, r)\n\ndef doit() :\n n, h, m, a, t, al, ar = int(input()), [], [], [], [0], [], []\n for i in range(n) :\n  h += [0]; m += [0]; a += [0]\n for i in range(n) :\n  h[i], m[i] = list(map(int, input().split()))\n if n == 1 :\n  print(1)\n  print(\"0 Inf\")\n  return\n l1, r1 = calc(h, m, 1)\n l2, r2 = calc(h, m, 0)\n if l1 != -1 and l2 != -1 :\n  if l1 > l2 : l1, l2, r1, r2 = l2, l1, r2, r1\n  if r1 + 1 == l2 :\n   print(1)\n   printerval(l1, r2)\n  else :\n   print(2)\n   printerval(l1, r1)\n   printerval(l2, r2)\n elif l1 != -1 :\n  print(1)\n  printerval(l1, r1)\n elif l2 != -1 :\n  print(1)\n  printerval(l2, r2)\n else : print(0)\n\nfor cas in range(int(input())) : doit()", "def is_zig_zag(h):\n if len(h) < 2:\n  return True\n if h[0] == h[1]:\n  return False\n fs = (lambda x, y: x < y, lambda x, y: x > y)\n f = 0 if h[0] < h[1] else 1\n for i in range(1, len(h)-1):\n  if not fs[(i+f)%2](h[i], h[i+1]):\n   return False\n return True\ndef t_diff(h, m):\n max_t_diff = None\n for i in range(len(h)-1):\n  h_diff, m_diff = h[i]-h[i+1], m[i]-m[i+1]\n  if h_diff == m_diff or m_diff == 0:\n   continue\n  if h_diff == 0:\n   return 1\n  if (h_diff < 0) != (m_diff < 0):\n   local_t_diff = max(1, abs(h_diff/m_diff))\n   if max_t_diff is None:\n    max_t_diff = local_t_diff\n   else:\n    max_t_diff = min(max_t_diff, local_t_diff)\n return max_t_diff\nfor _ in range(eval(input())):\n n = eval(input())\n h, m = list(map(list, list(zip(*[list(map(int, input().split())) for _ in range(n)]))))\n t = 0\n zig_zags = []\n zig_zag_start = None\n while True:\n  if is_zig_zag(h):\n   if zig_zag_start is None:\n    zig_zag_start = t\n  elif zig_zag_start is not None:\n   zig_zags.append((zig_zag_start, t-1))\n   zig_zag_start = None\n  td = t_diff(h, m)\n  if td is None:\n   if zig_zag_start is not None:\n    zig_zags.append((zig_zag_start, 'Inf'))\n    zig_zag_start = None\n   break\n  h = list(map(lambda x, y: x+td*y, h, m))\n  t += td\n print(len(zig_zags))\n for s, e in zig_zags:\n  print(s, e)", "def is_zig_zag(h):\n if len(h) < 2:\n  return True\n if h[0] == h[1]:\n  return False\n fs = (lambda x, y: x < y, lambda x, y: x > y)\n f = 0 if h[0] < h[1] else 1\n for i in range(1, len(h)-1):\n  if not fs[(i+f)%2](h[i], h[i+1]):\n   return False\n return True\ndef t_diff(h, m):\n max_t_diff = None\n for i in range(len(h)-1):\n  h_diff, m_diff = h[i]-h[i+1], m[i]-m[i+1]\n  if h_diff == m_diff or m_diff == 0:\n   continue\n  if h_diff == 0:\n   return 1\n  if (h_diff < 0) != (m_diff < 0):\n   local_t_diff = max(1, abs(h_diff/m_diff))\n   if max_t_diff is None:\n    max_t_diff = local_t_diff\n   else:\n    max_t_diff = min(max_t_diff, local_t_diff)\n return max_t_diff\ndef no_more_changes(h, m):\n for i in range(len(h)-1):\n  h_diff, m_diff = h[i]-h[i+1], m[i]-m[i+1]\n  if h_diff == m_diff or m_diff == 0:\n   continue\n  if h_diff == 0 or (h_diff < 0) != (m_diff < 0):\n   return False\n return True\nfor _ in range(eval(input())):\n n = eval(input())\n h, m = list(map(list, list(zip(*[list(map(int, input().split())) for _ in range(n)]))))\n t = 0\n zig_zags = []\n zig_zag_start = None\n while True:\n  if is_zig_zag(h):\n   if zig_zag_start is None:\n    zig_zag_start = t\n  elif zig_zag_start is not None:\n   zig_zags.append((zig_zag_start, t-1))\n   zig_zag_start = None\n  td = t_diff(h, m)\n  if td is None:\n   if zig_zag_start is not None:\n    zig_zags.append((zig_zag_start, 'Inf'))\n    zig_zag_start = None\n   break\n  h = list(map(lambda x, y: x+td*y, h, m))\n  t += td\n print(len(zig_zags))\n for s, e in zig_zags:\n  print(s, e)", "def is_zig_zag(h):\n if len(h) < 2:\n  return True\n if h[0] == h[1]:\n  return False\n fs = (lambda x, y: x < y, lambda x, y: x > y)\n f = 0 if h[0] < h[1] else 1\n for i in range(1, len(h)-1):\n  if not fs[(i+f)%2](h[i], h[i+1]):\n   return False\n return True\ndef no_more_changes(h, m):\n for i in range(len(h)-1):\n  h_diff, m_diff = h[i]-h[i+1], m[i]-m[i+1]\n  if h_diff == m_diff or m_diff == 0:\n   continue\n  if h_diff == 0 or (h_diff < 0) != (m_diff < 0):\n   return False\n return True\nfor _ in range(eval(input())):\n n = eval(input())\n h, m = list(map(list, list(zip(*[list(map(int, input().split())) for _ in range(n)]))))\n t = 0\n zig_zags = []\n zig_zag_start = None\n while True:\n  if is_zig_zag(h):\n   if zig_zag_start is None:\n    zig_zag_start = t\n  elif zig_zag_start is not None:\n   zig_zags.append((zig_zag_start, t-1))\n   zig_zag_start = None\n  if no_more_changes(h, m):\n   if zig_zag_start is not None:\n    zig_zags.append((zig_zag_start, 'Inf'))\n    zig_zag_start = None\n   break\n  h = list(map(lambda x, y: x+y, h, m))\n  t += 1\n print(len(zig_zags))\n for s, e in zig_zags:\n  print(s, e)"]