["class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        i = n - 1\n        invert = False\n        while i > 0:\n            half_len = (2**(i + 1) - 1) // 2 \n            if k == half_len + 1:\n                return '1' if not invert else '0'\n            \n            if k > half_len:\n                k = half_len - (k - half_len - 1) + 1\n                invert = not invert\n            i -= 1\n        \n        return '1' if invert else '0'", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        # S\u7684\u5947\u6570\u5e8f\u5217\u662f 01010101\uff0c(3, 7, 11, ...)\u662f1\n        # \u6240\u4ee5\u5982\u679ck\u662f\u5947\u6570\uff0c\u76f4\u63a5\u8fd4\u56de (k >> 1) & 1\n        \n        # S\u7684\u5076\u6570\u5e8f\u5217\u662f 1101100... (2, 4, 6, 8, 10, ...)\n        # \u8fd9\u4e2a\u5e8f\u5217\u7684\u5947\u6570\u5e8f\u5217\u662f 10101010\uff0c(2, 6, 10, 14, ...), (2, 10, 18, ...)\u662f1\n        # \u6240\u4ee5\u5982\u679ck\u662f\u5076\u6570\uff0ck >> 1\u5c31\u5c06\u5076\u6570\u5e8f\u5217\u79fb\u52a8\u5230\u5947\u6570\u4f4d\u7f6e\u4e0a -> (1, 5, 9, ...)\u662f1\n        # \u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u76f4\u5230k\u4e3a\u5947\u6570\uff0c\u7136\u540e (k >> 1) & 1 ^ 1\n        \n        # k // (k & -k) \u76f8\u5f53\u4e8e\u9664\u5230k\u4e3a\u5947\u6570\u3002\n        return str((k // (k & -k)) >> 1 & 1 ^ ((k & 1) ^ 1))\n    \n    def findKthBit_logn(self, n: int, k: int) -> str:\n        cur, flip = 1 << (n - 1), 0\n        while k > 1:\n            if k & (k - 1) == 0:\n                return str(flip ^ 1)\n            if k > cur:\n                k = 2 * cur - k\n                flip ^= 1\n            cur >>= 1\n        \n        return str(flip)", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        dp = [[]] * n\n        dp[0] = [0]\n        for i in range(1, n):\n            dp[i] = dp[i - 1] + [1] +list(reversed([v ^ 1 for v in dp[i - 1]]))\n        return str(dp[-1][k - 1])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        \n        def invert(s): return ''.join(['1' if c=='0' else '0' for c in s])\n        def revStr(s): return ''.join(list(reversed(s)))\n        \n        counter = 1\n        x = '0'\n        while counter!=n:\n            # make new string, increment counter\n            x = x + '1' + revStr(invert(x))\n            counter += 1\n        \n        return x[k-1]\n", "def reverse(m):\n        t=''\n        for i in m:\n            if i=='1':\n                t=t+'0'\n            else:\n                t=t+'1'\n        return t  \nclass Solution:      \n    def findKthBit(self, n: int, k: int) -> str:\n        s='0';\n        while(n>1):\n            t=reverse(s)\n            s=s+'1'+t[::-1]\n            n-=1;\n        return s[k-1];", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        return self.solv(n, k)\n    \n    def solv(sef, n, k):\n        i = 1\n        lst = ['0']\n        ans = '0'\n        ki = 1\n        if k == 1:\n            return '0'\n        while i < n+1:\n            ans = '1'\n            lst.append(ans)\n            ki += 1\n            if ki == k:\n                return ans\n            for j in range(ki-2,-1,-1):\n                ans = '1' if lst[j] == '0' else '0'\n                lst.append(ans)\n                ki += 1\n                if ki == k:\n                    return ans\n            i += 1\n        return None", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        full = [0]\n\n        for _ in range(n - 1):\n            full = full + [1] + [(x + 1) % 2 for x in full][::-1]\n        \n        return str(full[k - 1])\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        l = [0]*(n+1)\n        for i in range(1,n+1):\n            l[i] = 2*l[i-1]+1\n        # print(l)\n        def helper(n,k,f):\n            m = l[n]\n            # print(m,k,f)\n            if n == 1: return 0^f\n            if k == m//2+1: return 1^f\n            if k <= m//2:\n                return helper(n-1,k,f)\n            else:\n                return helper(n-1,m-k+1,1^f)\n\n        return str(helper(n,k,0))", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        S = [0]\n        for i in range(2,n+1):\n            S += [1] + [1 if i==0 else 0 for i in S[::-1]]\n        return str(S[k-1])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        # First element is for n == 1\n        cache = [''] * n\n\n        def gen_str(n):\n            if n-1 in cache:\n                return cache[n-1]\n\n            if n == 1:\n                s = '0'\n                cache[0] = s\n                return s\n\n            prev = gen_str(n-1)\n            s = prev + '1'\n            for c in reversed(prev):\n                if c == '0':\n                    s += '1'\n                else:\n                    s += '0'\n            cache[n-1] = s\n            return s\n\n        return gen_str(n)[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def invert(data):\n            ans = ''\n            for val in data:\n                if val == '1':\n                    ans += '0'\n                else:\n                    ans += '1'\n            return ans\n        \n        res = [''] * (n+1)\n        res [1] = '0'\n        for i in range(2, n+1):\n            res[i] = res[i-1] + '1' + invert(res[i-1])[::-1]\n            \n        return res[n][k-1]\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s = '0'\n        while n > 1:\n            p = ''\n            for l in s[::-1]:\n                p += '1' if l == '0' else '0'\n            s = s + '1' + p\n            n -= 1\n        return s[k - 1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        dp = [None]*(n)\n        dp[0] = '0'\n        for i in range(1, n):\n            m = ''\n            inv = self.invert(dp[i-1],m)\n            rev = self.reverse(inv)\n            dp[i] = dp[i-1]+'1'+rev\n        return dp[-1][k-1]\n        \n    def reverse(self, string):\n        return string[::-1]\n    def invert(self, string,m):\n        for i in range(len(string)):\n            if string[i]=='1':\n                m+='0'\n            else:\n                m+='1'\n        return m", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def invert(data):\n            ans = ''\n            for val in data:\n                if val == '1':\n                    ans += '0'\n                else:\n                    ans += '1'\n            return ans\n        \n        res = [''] * (n+1)\n        res [1] = '0'\n        for i in range(2, n+1):\n            res[i] = res[i-1] + '1' + invert(res[i-1])[::-1]\n        \n        return res[n][k-1]\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        \n        def invert(s):\n            inv=''\n            for ch in s:\n                inv+='0' if ch=='1' else '1'\n            return inv\n        s='0'\n        for i in range(1,n):          \n            s=s+'1'+invert(s)[::-1]\n            \n        return s[k-1]\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        if n==1:\n            return '0'\n        def rev(s):\n            return s[::-1]\n        def invert(r):\n            t=''\n            for i in r:\n                if i=='1':\n                    t+='0'\n                else:\n                    t+='1'\n            return t\n        z='0'\n        for i in range(2,n+1):\n            a=invert(z)\n            b=rev(a)\n            z+='1'+b\n        return z[k-1]\n            \n            \n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s=[]\n        s.append('0')\n        for i in range(1,n):\n            ans=s[i-1]+'1'\n            temp=''\n            for j in s[i-1]:\n                if j=='0':\n                    temp+='1'\n                else:\n                    temp+='0'\n            ans=ans+temp[::-1]\n            s.append(ans)\n        return s[-1][k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def reverse(cur_s):\n            return ''.join([c for c in reversed(cur_s)])\n        \n        def invert(cur_s):\n            return ''.join(['1' if c == '0' else '0' for c in cur_s])\n            \n        S = '0'\n        for i in range(1, n):\n            S += '1' + reverse(invert(S))\n        \n        return S[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        x = '0'\n        for i in range(1, n):\n            x = x + '1' + ''.join(list(map(lambda x: '1' if x == '0' else '0', x))[::-1])\n        return x[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        \n        series = ['0']\n        for i in range(n-1):\n            series = self.getNext(series)\n            #print(series)\n        return series[k-1]\n        \n    def getNext(self, series):\n        \n        extension = series[::-1]\n        for idx, c in enumerate(extension):\n            if c == '0':\n                extension[idx] = '1'\n            else:\n                extension[idx] = '0'\n        return series + ['1'] + extension                ", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s = '0'\n        for i in range(1, n):\n            chars = []\n            for j in reversed(list(range(len(s)))):\n                chars.append('1' if s[j] == '0' else '0')\n            s += '1' + ''.join(chars)\n            # print('i = {0}, s = {1}'.format(i, s))\n        return s[k - 1]\n", "def invert(s):\n    return (bin(int(s, 2)^int('1'*len(s), 2)))[2:]\n\ndef reverse(s):\n    return s[::-1]\n\nclass Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        S = [None]*n\n        S[0] = '0'\n        for i in range(1, n):\n            S[i] = S[i-1] + '1' + reverse(invert(S[i-1]))\n        \n        return S[n-1][k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s='0'\n        for i in range(1,n):\n            inv=''\n            for j in s:\n                if j=='1':\n                    inv+='0'\n                else:\n                    inv+='1'\n            s=s+'1'+inv[::-1]\n        return s[k-1]\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        bits = [False]\n        \n        for i in range(1, n+1):\n            bits.extend([True] + [j==False for j in bits[::-1]])\n            \n        return str(int(bits[k-1]))", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def invert(s):\n            temp = ''\n            for i in range(len(s)):\n                if(s[i]=='1'):\n                    temp = temp + '0'\n                else:\n                    temp = temp+'1'\n            return temp\n        \n        s = '0'\n        for i in range(1,n):\n            inv = invert(s)\n            rev = inv[::-1]\n            s = s + '1' + rev\n            \n        return s[k-1]\n            \n", "# 10th finish 14:18\n\nclass Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s = ['0']\n        for i in range(n-1):\n            temp1 = s.copy()\n            for i in range(len(temp1)):\n                if temp1[i] == '0':\n                    temp1[i] = '1'\n                elif temp1[i] == '1':\n                    temp1[i] = '0'\n            temp1.reverse()\n            temp = s + ['1'] + temp1\n            s = temp\n        # print(s)\n        return s[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def reverse_invert(array: List[str]) -> List[str]:\n            res = []\n            for ind in range(len(array)-1, -1, -1):\n                res.append('1' if array[ind] == '0' else '0')\n            return res\n        \n        bits = ['0']\n        for curr in range(2, n+1):\n            bits += ['1'] + reverse_invert(bits)\n        return bits[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def negVal(val):\n            lenVal = len(val)\n            mask = int(('1' * lenVal), 2)\n            val = int(val, 2)\n            neg = (val ^ mask)\n            lenNeg = len(bin(neg)) - 2\n            neg = '0' * (lenVal - lenNeg) + bin(neg)[2:]\n            return neg[::-1]\n            \n        strVal = '0'\n        for i in range(n - 1):\n            strVal += '1' + negVal(strVal)\n            \n        if(k > len(strVal)):\n            return '0'\n        else:\n            return strVal[k - 1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s = ['0']\n        for i in range(n-1):\n            temp1 = s.copy()\n            for i in range(len(temp1)):\n                if temp1[i] == '0':\n                    temp1[i] = '1'\n                elif temp1[i] == '1':\n                    temp1[i] = '0'\n            temp1.reverse()\n            temp = s + ['1'] + temp1\n            s = temp\n        # print(s)\n        return s[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def invert(bin):\n            bin = list(bin)\n            for i in range(len(bin)):\n                if bin[i] == '1': \n                    bin[i] = '0'\n                else:\n                    bin[i] = '1'\n            return ''.join(bin)\n        bin_n = bin(n)[2:]\n        dp = ['0'] * n\n        for i in range(1,n):\n            dp[i]  = dp[i-1] + '1' + invert(dp[i-1])[::-1]\n        return dp[-1][k-1]\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n\n        d = dict()\n        d[0] = [0]\n        for i in range(1, n+1):\n            d[i] = d[i-1] + [1] + [1-x for x in d[i-1]][::-1]\n\n        return str(d[n][k-1])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        sn = ['0']\n        for i in range(1, n):\n            nx = sn[i-1] + '1' + self.reverse(self.invert(sn[i-1]))\n            sn.append(nx)\n        return sn[-1][k-1]\n    \n    def invert(self, s):\n        return ''.join('0' if _ == '1' else '1' for _ in s)\n    \n    def reverse(self, s):\n        return ''.join(reversed(s))", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        \n        def invert(n):\n            s = ''\n            #print('ss', n)\n            for char in n:\n                if char == '0':\n                    s += '1'\n                else:\n                    s += '0'\n            return s\n                \n        def generater(n):\n            dp = [-1]*n\n            dp[0] = '0'\n            for i in range(1, len(dp)):\n                #print(i, dp)\n                dp[i] = dp[i-1] + '1' + invert(dp[i-1])[::-1]\n            return dp[-1]\n        #print(generater(3))\n        return generater(n)[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        \n        s = ['0']\n        for _ in range(n-1):\n            s += ['1'] + [('1','0')[int(x)] for x in reversed(s)]\n        return s[k-1]\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        \n        s = ['0']\n        for _ in range(n-1):\n            s += ['1'] + list(reversed([('1','0')[int(x)] for x in s]))\n        return s[k-1]\n", "import math\nclass Solution:\n    def findKthBit(self, j: int, k: int) -> str:\n        n=j\n        lst=['0']\n        \n        for i in range(n):\n            lst=lst+['1']+ ['1' if ele=='0' else '0' for ele in lst[::-1]]\n            \n        return lst[k-1]", "class Solution:\n  def findKthBit(self, n: int, k: int) -> str:\n    k -= 1\n\n    s = '0'\n    i = 0\n    while i < n:\n      inverted = ''.join('1' if c == '0' else '0' for c in s)[::-1]\n      s = s + '1' + inverted\n      i+=1\n\n    return s[k]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        \n        memo_table = [ '' ] * (n)\n        \n        memo_table[0] = '0'\n        \n        for i in range(1, n):\n            memo_table[i] = self.new_level(memo_table[i-1])\n        \n        return memo_table[n-1][k-1]\n    \n    def new_level(self, old_level: str):\n        new_level = [ '1' ] * (len(old_level) * 2 + 1)\n        left = 0\n        right = len(old_level)*2\n        for c in old_level:\n            new_level[left] = c\n            if c == '0':\n                new_level[right] = '1'\n            else:\n                new_level[right] = '0'\n            left += 1\n            right -= 1\n        \n        return ''.join(new_level)\n            \n            \n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def revert(s):\n            ans = ''\n            for x in s:\n                if x == '1':\n                    ans += '0'\n                else:\n                    ans += '1'\n            return ans\n        def helper(n):\n            if n == 1:\n                return '0'\n            res = helper(n - 1)\n            return res + '1' + revert(res)[::-1]\n        return helper(n)[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        from copy import deepcopy\n        \n        \n        @lru_cache()\n        def help(i):\n            if i==1:\n                return '0'\n            \n            s=help(i-1)\n            s2=deepcopy(s)\n            v=[]\n            for i in s:\n                v.append(i)\n                \n            for i in range(len(v)):\n                if v[i]=='1':\n                    v[i]='0'\n                    \n                else:\n                    v[i]='1'\n                    \n            v=v[::-1]\n            s=''.join(v)\n            return s2+'1'+s\n        \n        \n        return help(n)[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        \n        def revert(s):\n            ans = ''\n            for x in s:\n                if x == '1':\n                    ans += '0'\n                else:\n                    ans += '1'\n            return ans\n        \n        def helper(n):\n            if n == 1:\n                return '0'\n            res = helper(n - 1)\n            return res + '1' + revert(res)[::-1]\n        return helper(n)[k - 1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        \n        def reverseInvert(string: str) -> str:\n            output = []\n            for char in string:\n                if char == '0':\n                    output.append('1')\n                else:\n                    output.append('0')\n            output.reverse()\n            return ''.join(output)\n            \n        def getNthSequence(n: int) -> str:\n            if n == 1:\n                return '0'\n            prev = getNthSequence(n-1)\n            return prev + '1' + reverseInvert(prev)\n        \n        return getNthSequence(int(ceil(log2(k)) + 1))[k-1]\n", "class Solution:\n    \n    def invert(self, s):\n        out = ''\n        for c in s:\n            if c == '0':\n                out += '1'\n            if c == '1':\n                out += '0'\n        return out\n    \n    def reverse(self, s):\n        return s[::-1]\n    \n    def findKthBit(self, n: int, k: int) -> str:\n        l = []\n        for i in range(n):\n            if i == 0:\n                l.append('0')\n            else:\n                last_s = l[-1]\n                s = last_s + '1' + self.reverse(self.invert(last_s))\n                l.append(s)\n        s = l[-1]\n        return s[k-1]\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def inverse(s):\n            res = ''\n            for ch in s:\n                if ch == '1':\n                    res += '0'\n                else:\n                    res += '1'\n            return res\n        \n        \n        s = '0'\n        for i in range(n-1):\n            s = s+'1' + inverse(s)[::-1]\n        return s[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        \n        s0='0'\n        \n        i=1\n        while i<=n:\n            s0=s0+'1'+self.reverse(s0)\n            i=i+1\n       \n        return s0[k-1]\n        \n        \n    def reverse(self,s):\n        mapp={'1':'0','0':'1'}\n        ans=''\n        for x in s:\n            ans=ans+mapp[x]\n            \n        return ans[::-1]\n            \n        \n            \n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def invert(data):\n            ans = ''\n            for val in data:\n                if val == '1':\n                    ans += '0'\n                else:\n                    ans += '1'\n            return ans\n\n        res = '0'\n        for _ in range(n):\n            res += '1' + invert(res)[::-1]\n\n        return res[k - 1]\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def inv(s):\n            n = ''\n            for i in s:\n                if i=='1':\n                    n+='0'\n                else:\n                    n+='1'\n            return n\n        def rev(s):\n            return s[::-1]\n        \n        s='0'\n        for i in range(n):\n            s=s+'1'+rev(inv(s))\n        return s[k-1]\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def reverse(s):\n            return ''.join([s[len(s) - 1 - i] for i in range(len(s))])\n            \n        def invert(s):\n            return ''.join(['1' if s[i] == '0' else '0' for i in range(len(s))])\n            \n        def findNthStr(n1):\n            if n1 == 1:\n                return '0'\n            else:\n                prev = findNthStr(n1 - 1)\n                return prev + '1' + reverse(invert(prev))\n                \n        return findNthStr(n)[k-1]", "class Solution:\n    def invert(self, t):\n        ret = ''\n        for i in t:\n            if i == '0':\n                ret += '1'\n            else:\n                ret += '0'\n        return ret\n    \n    def findKthBit(self, n: int, k: int) -> str:\n        i = 1\n        l = list()\n        l.append('0')\n        while i <= n:\n            t = l[-1]\n            ans = t + '1' \n            ans += self.invert(t[::-1])\n            l.append(ans)\n            i += 1\n        return l[-1][k - 1]\n            \n            \n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        dp = ['0'] * n\n        for i in range(1, n):\n            dp[i] = dp[i-1] + '1' + ''.join([str(1-int(n)) for n in dp[i-1]])[::-1]\n        return dp[-1][k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s = '0'\n        inv = '1'\n        rev_inv = '1'\n        \n        for i in range(n-1):\n            s = s + '1' + rev_inv\n            inv = ''\n            rev_inv = ''\n            for j in range(len(s)):\n                if s[j]=='0':\n                    inv+='1'\n                else:\n                    inv+='0'\n            rev_inv = inv[::-1]\n            \n        return s[k-1]", "class Solution:\n    \n        \n    \n    def findKthBit(self, n: int, k: int) -> str:\n        s=[]\n        for i in range(n):\n            if i==0:\n                s.append(['0'])\n            else:\n                temp=(s[i-1]).copy()\n                for j in range(len(temp)):\n                    if temp[j]=='0':\n                        temp[j]='1'\n                        \n                        # temp2=''\n                        # temp=(temp2.join(temp)) \n                        \n                        \n                    else:\n                        # temp=list(temp)\n                        temp[j]='0'\n                        \n                        # temp2=''\n                        # temp=(temp2.join(temp)) \n                temp=temp[::-1]\n                \n                s.append([])\n                for zz in s[i-1]:\n                    s[i].append(zz)\n                s[i].append('1')\n                for zz in temp:\n                    s[i].append(zz)\n                \n                \n        \n        # for i in (s[k-1]):\n        #     print(i)\n        return (s[-1][k-1])\n                \n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def helper(memo):\n            ans = ''\n            for c in memo:\n                if c == '0':\n                    ans += '1'\n                else:\n                    ans += '0'\n            return ans\n        memo = '0'\n        for i in range(1, n + 1):\n            memo = memo + '1' + helper(memo)[::-1]\n        return memo[k - 1]", "vals = [0]\nfor _ in range(20):\n    vals += [1] + [1-x for x in reversed(vals)]\n    \n\nclass Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        return str(vals[k-1])", "bins = [[0]]\nfor _ in range(20):\n    bins.append(bins[-1] + [1] + [1-x for x in reversed(bins[-1])])\n    \n\nclass Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        return str(bins[n-1][k-1])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        if n==1:\n            return '0'\n        if n==2:\n            return ['0','1','1'][k-1]\n        record=[0,1,1]\n        for i in range(n-2):\n            record=record+[1]+record\n            l=len(record)\n            record[l//2+l//2//2+1]=0\n    \n        return str(record[k-1])", "class Solution:  \n    def invert(s):\n        inv_s = ''\n        for char in s:\n            if char == '1':\n                inv_s += '0'\n            else:\n                inv_s += '1'\n\n        return inv_s\n    \n    answer = ['0']\n    \n    for i in range(1, 21):\n        prev_s = answer[i-1]\n        answer.append(prev_s + '1' + invert(prev_s)[::-1])\n        \n    \n    def findKthBit(self, n: int, k: int) -> str:\n        \n#         def invert(s):\n#             inv_s = ''\n#             for char in s:\n#                 if char == '1':\n#                     inv_s += '0'\n#                 else:\n#                     inv_s += '1'\n\n#             return inv_s\n        \n#         result = ['0']\n        \n#         for i in range(1, 21):\n#             prev_s = result[i-1]\n#             # print(self.invert(prev_s))\n#             result.append(prev_s + '1' + invert(prev_s)[::-1])\n#             # break\n            \n        return self.answer[n-1][k-1]\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s = '0'\n        for i in range(2,n + 1):\n            sRevInv = ''.join(['1' if c == '0' else '0' for c in s[::-1]])\n            s = s + '1' + sRevInv\n            if len(s) >= k:\n                return s[k-1]\n        return s[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s = '0'\n        for i in range(2,n + 1):\n            sRevInv = ''.join(['1' if c == '0' else '0' for c in s[::-1]])\n            s = s + '1' + sRevInv\n            if len(s) >= k:\n                break\n        return s[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s = '0'\n        for i in range(2,n + 1):\n            s = s + '1' + ''.join(['1' if c == '0' else '0' for c in s[::-1]])\n            if len(s) >= k:\n                break\n        return s[k - 1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def invert(x):\n            return [0 if i == 1 else 1 for i in x]\n        \n        S = [0]\n        i = 1\n        \n        while i < n and len(S) < k:\n            S.append(1)\n            S.extend((invert(S[:-1])[::-1]))\n            i += 1\n            \n        return str(S[k - 1])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def operator(s):\n            t = reversed([('0' if i == '1' else '1') for i in s])\n            return s + '1' + ''.join(t)\n        s = '0'\n        while len(s) < k:\n            s = operator(s)\n        return s[k - 1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        switch = {'0': '1', '1': '0'}\n        s = '0'\n        while len(s) < k:\n            s = s + '1' + ''.join(switch[i] for i in reversed(s))\n        return s[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        l = [0]\n        for _ in range(n-1):\n            l = l + [1] + [1-b for b in reversed(l)]\n            if len(l) >= k:\n                return str(l[k-1])\n        return str(l[k-1])", "class Solution:\n    s = [0]\n\n    def findKthBit(self, n: int, k: int) -> str:\n        while len(self.s) < k:\n            self.s = self.s + [1] + [n ^ 1 for n in self.s[::-1]]\n\n        return str(self.s[k - 1])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def inner(n,k):\n            if n==1:\n                re=0\n            elif k==(2**(n-1)):\n                re=1\n            elif k<(2**(n-1)):\n                re=inner(n-1,k)\n            else:\n                re=inner(n-1,2**n-k)^1\n            return re\n        return str(inner(n,k))\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def invert(l):\n            result = []\n            for item in l:\n                if item == '0':\n                    result.append('1')\n                else:\n                    result.append('0')\n            return result\n                    \n        string = '0'\n        while len(string)<k:\n            string = string + '1'\n            addition = invert(string[0:len(string)-1])\n            addition.reverse()\n            addition = ''.join(addition)\n            string = string + addition\n        \n        return string[k-1]\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        #Si = Si-1 + \\\"1\\\" + reverse(invert(Si-1)) for i > 1\n        s=''\n        def recurse(n):\n            nonlocal s\n            if n<=1:\n                return '0'\n            else:\n                _str=recurse(n-1)\n                s=_str+'1'+self.reverse(self.invert(_str))\n                return s\n        return recurse(n)[k-1]\n        \n    def invert(self,string):\n        return ''.join(['0' if char=='1' else '1' for char in string])\n    \n    def reverse(self,string):\n        return string[::-1]\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n\n        cur = '0'\n        \n        while len(cur) < k:\n            cur = cur + '1' + ''.join('1' if b == '0' else '0' for b in reversed(cur))\n            \n        return cur[k-1]", "# 1545. Find Kth Bit in Nth Binary String: https://leetcode.com/problems/find-kth-bit-in-nth-binary-string/\n# Author: Ragy Morkos\n\n#######################################################################\n\nclass Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s = [0]\n        for _ in range(2, n+1):\n            s = s + [1] + [1 - x for x in s][::-1]\n        return str(s[k-1])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        memo = {}\n        def dp(s):\n            if s in memo:\n                return memo[s]\n            if s == 1:\n                return '0'\n            temp = dp(s-1)\n            res = temp + '1' + ''.join(['0' if b == '1' else '1' for b in temp])[::-1]\n            memo[s] = res\n            return res\n        \n        return dp(n)[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        curr = '0'\n        for x in range(2, n + 1):\n            nxt = curr + '1' + self.invert(curr)[::-1]\n            curr = nxt\n        return curr[k - 1]\n            \n        \n    def invert(self, s):\n        return ''.join(['1' if x == '0' else '0' for x in s])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def invert(data):\n            ans = ''\n            for val in data:\n                ans += '1' if val == '0' else '0'\n            return ans\n\n        output = '0'\n        for i in range(1, n+1):\n            output += '1' + invert(output)[::-1]\n            if len(output) >= k:\n                break   \n        return output[k - 1]\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        \n        s2 = '011'\n        if k<=3:\n            return s2[k-1]\n        \n        if k==2**(n-1):\n            return '1'\n        elif k<2**(n-1):\n            return self.findKthBit(n-1,k)\n        else:\n            ans = self.findKthBit(n-1, 2**(n) - k)\n            return '1' if ans=='0' else '0'\n", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def helper(res,k):\n            if k==0:\n                return res\n            invert = ['1' if i=='0' else '0' for i in res]\n            invert = ''.join(invert)\n            res = res + '1' + invert[::-1]\n            return helper(res,k-1)\n        res = helper('0',n-1)\n        return res[k-1]", "class Solution:\n    \n    def findKthBit(self, n: int, k: int) -> str:\n        \n        A = [0]\n        \n        while k > len(A):\n            A.append(1)\n            for i in range(len(A)-2,-1,-1):\n                A.append(A[i] ^ 1)\n                \n        return str(A[k-1])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        def revinv(x):\n          ans = []\n          for c in x:\n            if c=='0':\n              ans.append('1')\n            else:\n              ans.append('0')\n          return ''.join(reversed(ans))\n        s = '0'\n        while k>len(s):\n          s = s + '1' + revinv(s)\n        return s[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        m = 2 ** n - 1\n        if k == 1 or 0 < m - k < 4:\n            return '0'\n        if k == m or k < 5:\n            return '1'\n        s = [0]\n        for _ in range(n-1):\n            s += [1] + [x ^ 1 for x in reversed(s)]\n        return str(s[k-1])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        dp = [0]\n        while len(dp) < k:\n            dp.append(1)\n            for i in range(len(dp)-2, -1 , -1):\n                dp.append(dp[i]^1)\n        \n        return str(dp[k-1])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        m = 2 ** n - 1\n        if k == 1:\n            return '0'\n        if k < 5:\n            return '1'\n        s = [0]\n        for _ in range(n-1):\n            s += [1] + [x ^ 1 for x in reversed(s)]\n        return str(s[k-1])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        a = [0]\n        while k > len(a):\n            a.append(1)\n            for i in range(len(a) - 2, -1, -1):\n                a.append(a[i] ^ 1)\n        return str(a[k - 1])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s = [0]\n        for _ in range(n-1):\n            s += [1] + [x ^ 1 for x in reversed(s)]\n        return str(s[k-1])", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s = '0'\n        if n == 1:\n            return '0'\n        for i in range(1, n):\n            s_i = s[::-1]\n            s = s+'1'+''.join(['1' if c == '0' else '0' for c in s_i])\n        # print(s)\n        return s[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n\n        def build_string(n):\n            previous = '0'\n\n            for i in range(1, n):\n                invert = ''\n                for c in previous:\n                    if c == '1':\n                        invert += '0'\n                    else:\n                        invert += '1'\n                previous = previous + '1' + invert[::-1]\n            return previous\n\n        ans = build_string(n)\n        return ans[k-1]", "class Solution:\n    def findKthBit(self, n: int, k: int) -> str:\n        s = '011'\n        if k < 4:\n            return s[k - 1]\n            \n        d = {'0':'1', '1':'0'}\n        for i in range(n):\n            s += '1'\n            if len(s) == k:\n                return '1'\n            else:\n                for x in s[:-1][::-1]:\n                    s += d[x]\n                    if len(s) == k:\n                        return d[x]\n                    \n                \n            \n"]