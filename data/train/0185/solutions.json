["class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        if len(s) < 2 ** k + k - 1:\n            return False # Cannot be a string, as this is the de brujin length\n        target = 2 ** k\n        seen = set()\n        cur_len = 0\n        for end in range(k, len(s) + 1):\n            chunk = s[end - k: end]\n            if chunk not in seen:\n                cur_len += 1\n                seen.add(chunk)\n                if cur_len == target:\n                    return True\n        return False\n", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        if len(s) < 2 ** k + k - 1:\n            return False # Cannot be a string, as this is the de brujin length\n        target = 2 ** k\n        seen = set()\n        cur_len = 0\n        for end in range(k, len(s) + 1):\n            chunk = s[end - k: end]\n            if chunk not in seen:\n                cur_len += 1\n                seen.add(chunk)\n                if cur_len == target:\n                    return True\n        return len(seen) == target\n", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        a = 2**k\n        k_string = set()\n        for i in range(len(s)-k+1):\n            if s[i:i+k] not in k_string:\n                k_string.add(s[i:i+k])\n                if len(k_string) == a:\n                    return True\n        return False", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        nums = set()\n        for i in range(0, len(s) - k + 1):\n            nums.add(s[i:i+k])\n            if len(nums) == 2**k:\n                return True\n        return False\n", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        seen, total = set(), 2 ** k\n        for i in range(len(s) - k + 1):\n            if s[i:i+k] not in seen:\n                seen.add(s[i:i+k])\n                total -= 1\n                if total == 0:\n                    return True\n        return False\n            \n", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        from itertools import permutations\n        c = dict()\n        count = 0\n        for i in range(0,len(s)-k+1):\n            out = ''\n            for j in range(i,i+k):\n                out = out + s[j]    \n            if out not in c:\n                c[out] = True\n                count = count + 1\n            if count == pow(2,k):\n                return True\n        return False\n        \n            \n", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        bins = {}\n        numbers = {}\n        st = s\n        print(k)\n        def bin2dec(a):\n            val = 0\n            for i in range(len(a)):\n                if a[i] == '1':\n                    val += pow(2,(len(a)-1-i))\n            return (val)\n\n\n\n        for i in range(len(st)-k+1):\n            if (st[i:i+k]) in bins:\n                continue\n            else:\n                bins[st[i:i+k]] = 1\n\n        for i in bins:\n        #     print(i)\n        #     print(bin2dec(i))\n            numbers[bin2dec(i)] = 1\n\n        c = 0\n\n        for i in range(pow(2,k)):\n            if i in numbers:\n                c += 1\n        print((c,k))\n\n        if c == pow(2,k):\n            return True\n        else:\n            return False\n        \n", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        def Hash_Function(b):\n            num=list(b)\n            num.reverse()\n            total = 0\n            increment=1\n            for item in num:\n                if item == '1':\n                    total=total+increment\n                    increment=increment*2\n                else:\n                    increment=increment*2\n                    continue\n            return total\n        start = 0\n        end = k\n        buckets = []\n        buckets = set(buckets)\n        while end<=len(s):\n            num=Hash_Function(s[start:end])\n            buckets.add(num)\n            start+=1\n            end+=1\n        if len(buckets)==2**k:\n            return True\n        else:\n            return False\n            \n        \n        \n            \n                \n                    \n                    \n            \n            \n                \n                \n", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        check = []\n        for kk in range(2**k):\n            t = bin(kk)[2:]\n            check.append('0'*(k-len(t))+t)\n        ss = set()\n        for i in range(k,len(s)+1):\n            ss.add(s[i-k:i])\n        for t in check:\n            if t not in ss:\n                return False\n        return True", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        l = len(s)\n        r = set()\n        target = 2 ** k\n        for i in range(0, l-k+1):\n            r.add(\n                s[i:i+k]\n            )\n        \n            if len(r) == target:\n                return True\n        # else:\n        return False", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        for i in range(2**k):\n            bin_value = bin(i)[2:] if len(bin(i)[2:]) == k else '0' * (k - len(bin(i)[2:])) + bin(i)[2]\n            if bin_value not in s:\n                return False\n        return True\n            \n", "def binary_strings(k):\n    res = []\n    stack = ['']\n    while stack:\n        s = stack.pop()\n        if len(s) == k:\n            res.append(s)\n        else:                        \n            stack.append(s + '0')            \n            stack.append(s + '1')\n    return res            \n\nclass Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        seen = set()\n        for i in range(0, len(s) - k + 1):\n            seen.add(s[i:i+k])\n        for bs in binary_strings(k):\n            if bs not in seen:\n                return False\n        return True            ", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        for i in range(2**k):\n            ss=(bin(i)[2::]).zfill(k)\n            if ss not in s:\n                return False\n        return True\n", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        if len(s) < k: return False\n        for i in range(2**k):\n            if bin(i)[2:].rjust(k, '0') not in s:\n                return False\n        return True", "from itertools import product\nclass Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        p = product('01', repeat=k)\n        for sub in p:\n            if s.find(''.join(sub)) == -1:\n                return False\n        return True", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        codes = {format(i, f'0{k}b'): False for i in range(2**k)}\n        \n        for i in range(len(s) - k + 1):\n            ss = s[i:i + k]\n            \n            if ss in codes:\n                codes[ss] = True\n        \n        return all(codes.values())", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        arr_2 = ['0','1']\n        m = k-1\n        while (m!=0):\n            arr_2 = ['0'+i for i in arr_2]+['1'+i for i in arr_2]\n            m -= 1\n        for i in range(2**k):\n            if arr_2[i] in s:\n                continue\n            else:\n                return False\n        return True", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        def binary_code_of_length_k(k):\n            if k == 1:\n                return ['0', '1']\n            t = binary_code_of_length_k(k-1)\n            return ['0' + i for i in t] + ['1' + i for i in t]\n        k_string = binary_code_of_length_k(k)\n        for i in k_string:\n            if s.find(i) == -1:\n                return False\n        return True", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        codes = set(format(i, f'0{k}b') for i in range(2**k))\n        found = [False for i in range(2 ** k)]\n        \n        for i in range(len(s) - k + 1):\n            if s[i:i + k] in codes:\n                found[int(s[i:i+k], base=2)] = True\n        \n        return all(found)", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        combinations = 2**k\n        seen = set()\n        for i in range(len(s)-k+1):\n            temp = s[i:i+k]\n            if temp not in seen:\n                seen.add(temp)\n                combinations -= 1\n                if combinations == 0:\n                    return True\n        return False", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        if len(s) < k:\n            return False\n        \n        substring_set = set()\n        need = 1 << k\n        for start in range(len(s) - k + 1):\n            ss = s[start:start+k]\n            if ss not in substring_set:\n                substring_set.add(ss)\n                need -= 1\n                if need == 0:\n                    return True\n        \n        return False", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        st = set()\n        for i in range(k, len(s) + 1):\n            st.add(s[i - k : i])\n            if len(st) == 1 << k:\n                break\n        return len(st) == 1 << k", "from itertools import permutations\nclass Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        d = set()\n        for i in range(len(s)-k+1):\n            # print(s[i:i+k])\n            if s[i:i+k] not in d:\n                d.add(s[i:i+k])\n                if len(d)==2**k:\n                    return True\n        return False", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        set1 = set()\n        for i in range(0, len(s) - k+1):\n            set1.add(s[i:i+k])\n        if(len(set1) >= 2**k):\n            return True\n        else:\n            return False", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        result=set()\n        for i in range(len(s)-k+1):\n            val=s[i:i+k]\n            result.add(val)\n        # print(result)\n        if len(result)>=2**k:\n            return True\n        else:\n            return False", "class Solution:\n  def hasAllCodes(self, s: str, k: int) -> bool:\n      need = 1 << k # Equivalent to 2^k\n      got = set()\n\n      for i in range(k, len(s)+1):\n        tmp = s[i-k:i]\n        if tmp not in got:\n          got.add(tmp)\n          need -= 1\n\n          if need == 0: # Found everything\n            return True\n      return False\n", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        # for i in range(2**k):\n        #     ss=(bin(i)[2::]).zfill(k)\n        #     if ss not in s:\n        #         return False\n        # return True\n        d = set()\n        for i in range(len(s)-k+1):\n            if s[i:i+k] not in d:\n                d.add(s[i:i+k])\n                if len(d)==2**k:\n                    return True\n        return False\n", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        l = len(s)\n        r = set()\n        for i in range(0, l-k+1):\n            r.add(\n                s[i:i+k]\n            )        \n            if len(r) == 2**k:\n                return True\n        return False", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        hs = set()\n        for i in range(len(s)-k+1):\n            hs.add(s[i:i+k])\n            if len(hs) == 2**k:\n                return True\n        print(hs)\n        return False", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        l = len(s)\n        r = set()\n        for i in range(0, l-k+1):\n            r.add(\n                s[i:i+k]\n            )\n            if len(r) == 2**k:\n                return True\n\n\n        for i in product(['0','1'], repeat=k):\n            _ = ''.join(i)\n            if _ not in r:\n                return False\n        return True", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        got = set() \n        required = 1 << k\n\n        for i in range(len(s) - k+ 1): \n            if not s[i:i+k] in got: \n                got.add(s[i:i+k])\n                required -= 1 \n                if required == 0: \n                    return True\n        \n        return False", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        if k >= len(s):\n            return False\n        d = set()\n        num = 0\n        for i in range(k):\n            m = ord(s[i]) - ord('0')\n            num = num * 2 + m\n        d.add(num)\n        #print(num)\n        mask = (1 << (k-1))  - 1\n        #print(mask)\n        for i in range(k, len(s)):\n            num &= mask\n            m = ord(s[i]) - ord('0')\n            num = num * 2 + m\n            d.add(num)\n        #print(len(d))\n        return len(d) >= (1<<k)\n", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        d = set()\n        a = 2 ** k\n        for i in range(len(s) - k + 1):\n            tmp = s[i:i + k]\n            if tmp not in d:\n                d.add(tmp)\n                if len(d) == a:\n                    return True\n        return False", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        h = 0\n        nums = set()\n        \n        if len(s) < k:\n            return False\n        \n        for i in range(k):\n            h <<= 1\n            h += (1 if s[i] == '1' else 0)\n        nums.add(h)\n        \n        for i in range(k, len(s)):\n            h <<= 1\n            h -= (1 if s[i - k] == '1' else 0) << k\n            h += (1 if s[i] == '1' else 0)\n            nums.add(h)\n            \n        return len(nums) == (1 << k)", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        str_set = set()\n        for i in range(len(s)-k+1):\n            str_set.add(str(s[i:i+k]))\n        # print(str_set)\n        for i in range(2**k):\n            formatter = '{0:0%sb}'%(str(k))\n            if formatter.format(i) not in str_set:\n                return False\n            \n        return True", "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        arr = list(s)\n        arr = [ord(el) - 48 for el in arr]\n        \n        length = 0\n        n = len(s)\n        curr = 0\n        \n        h = {}\n        for i in range(n - 1, -1, -1):\n            length += 1\n            \n            if length > k:\n                length -= 1\n                curr = curr >> 1\n                \n            if arr[i] == 1:\n                curr = 1 << (length - 1) | curr\n            \n            \n            if length == k:\n                h[curr] = True\n        \n        return len(h) == pow(2, k)", "class Solution:\n    \n    def hasAllCodes(self, s: str, k: int) -> bool:\n        need = 2**k\n        _new = set()\n        for i in range(len(s)-k+1):\n            var = s[i:i+k]\n            if var not in _new:\n                _new.add(var)\n                need -= 1\n            if need == 0:\n                return True\n        return False\n", "class Solution:\n    # def hasAllCodes(self, s: str, k: int) -> bool:\n    #     target_len = len(bin(k))-2\n    #     for target in range(k, -1, -1):\n    #         target = bin(target)[2:]\n    #         target = (target_len-len(target))*'0'+target\n    #         print (target)\n    #         if s.find(target)==-1:\n    #             return False\n    #     return True\n    \n    def hasAllCodes(self, s: str, k: int) -> bool:\n        d = set()\n        for i in range(len(s)-k+1):\n            if s[i:i+k] not in d:\n                d.add(s[i:i+k])\n                if len(d)==2**k:\n                    return True\n        print (d)\n        return False    "]