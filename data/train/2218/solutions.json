["n=int(input())\na=list(map(int,input().split()))\nq=int(input())\nchanges=[0]*q\nfor i in range(q):\n    changes[-i-1]=tuple(map(int,input().split()))\nfinal=[-1]*n\ncurr=0\nfor guy in changes:\n    if guy[0]==1:\n        if final[guy[1]-1]==-1:\n            final[guy[1]-1]=max(guy[2],curr)\n    else:\n        curr=max(curr,guy[1])\nfor i in range(n):\n    if final[i]==-1:\n        final[i]=max(curr,a[i])\nfinal=[str(guy) for guy in final]\nprint(\" \".join(final))", "import sys\ninput = sys.stdin.readline\n\nfrom bisect import bisect_left as bl\n\nN = int(input())\nA = [int(a) for a in input().split()]\nQ = int(input())\nL = [-1] * N\n\nX = []\nY = []\n\nfor i in range(Q):\n    t = [int(a) for a in input().split()]\n    if t[0] == 1:\n        p, x = t[1]-1, t[2]\n        A[p] = x\n        L[p] = i\n    else:\n        x = t[1]\n        while len(Y) and Y[-1] <= x:\n            X.pop()\n            Y.pop()\n        X.append(i)\n        Y.append(x)\n    \nfor i in range(N):\n    j = bl(X, L[i])\n    if j < len(X):\n        A[i] = max(A[i], Y[j])\n\nprint(*A)\n\n", "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nl = list(map(int,input().split()))\nlUpd = [0]*n\nq = int(input())\n\npayoff = [-1]*q\nfor query in range(q):\n    qnext = list(map(int,input().split()))\n    if qnext[0] == 1:\n        p = qnext[1] - 1\n        x = qnext[2]\n        l[p] = x\n        lUpd[p] = query\n    else:\n        x = qnext[1]\n        payoff[query] = x\n\nmaxPayoff = [-1]*q\nbest = -1\nfor i in range(q-1,-1,-1):\n    best = max(best,payoff[i])\n    maxPayoff[i] = best\n\nout = [max(l[p], maxPayoff[lUpd[p]]) for p in range(n)]\nprint(' '.join(map(str,out)))\n        \n", "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nl = list(map(int,input().split()))\nlUpd = [0]*n\nq = int(input())\n\npayoff = [-1]*q\nfor query in range(q):\n    qnext = list(map(int,input().split()))\n    if qnext[0] == 1:\n        p = qnext[1] - 1\n        x = qnext[2]\n        l[p] = x\n        lUpd[p] = query\n    else:\n        x = qnext[1]\n        payoff[query] = x\n\nmaxPayoff = [-1]*q\nbest = -1\nfor i in range(q-1,-1,-1):\n    best = max(best,payoff[i])\n    maxPayoff[i] = best\n\nout = [max(l[p], maxPayoff[lUpd[p]]) for p in range(n)]\nprint(' '.join(map(str,out)))\n        \n", "n = int(input())\na = list(map(int, input().split()))\nq = int(input())\n\nlast_set = [0] * n\nalles = [0]\n\nfor i in range(q):\n    r = list(map(int, input().split()))\n    if len(r) == 2:\n        alles.append(r[1])\n    else:\n        last_set[r[1]-1] = len(alles)\n        a[r[1]-1] = r[2]\n        \nmaxis = alles\ni = len(maxis) -1 \nprev_max = 0\nwhile i >= 0:\n    prev_max = max(prev_max, alles[i])\n    maxis[i] = prev_max\n    i -= 1\n    \nfor i in range(n):\n    if last_set[i] < len(maxis):\n        a[i] = max(a[i], maxis[last_set[i]])\n    \nprint(\" \".join(map(str, a)))\n", "n=int(input())\na=list(map(int,input().split()))\nq=int(input())\nr1=[-1]*q\nr2=[-1]*q\nfor i in range(q):\n    ne=list(map(int,input().split()))\n    if ne[0]==1:\n        p=ne[1]-1\n        t=ne[2]\n        r1[i]=[p,t]\n    else:\n        r2[i]=ne[1]\n\nb=-1\nfor i in range(q-1,-1,-1):\n    b=max(b,r2[i])\n    r2[i]=b\n\nm=r2[0]\nfor i in range(n):\n    a[i]=max(a[i],m)\n    \nfor i in range(q):\n    if r1[i]==-1:\n        pass\n    else:\n        a[r1[i][0]]=max(r1[i][1],r2[i])\n        \nprint(*a)", "n = int(input())\narray = list(map(int, input().split()))\nq = int(input())\nd = {i:0 for i in range(n)}\nstack = []\nfor i in range(q):\n    req = list(map(int, input().split()))\n    if req[0] == 2:\n        stack.append((req[1], i))\n    else:\n        p = req[1]-1\n        d[p] = i\n        array[p] = req[2]\nans_i = [-1]*q\nj = len(stack)-1\nmax_of_stack = -1\nfor i in range(q-1, -1, -1):\n    if j > -1 and stack[j][1] >= i:\n        max_of_stack = max(max_of_stack, stack[j][0])\n        j -= 1\n    ans_i[i] = max_of_stack\nfor p in range(n):\n    if array[p] < ans_i[d[p]]:\n        array[p] = ans_i[d[p]]\nprint(*array)", "\n# -*- coding: utf-8 -*-\n# @Date    : 2019-08-01 06:48:30\n# @Author  : raj lath (oorja.halt@gmail.com)\n# @Link    : link\n# @Version : 1.0.0\n\nimport sys\nsys.setrecursionlimit(10**5+1)\n\ninf     =  int(10 ** 20)\nmax_val =  inf\nmin_val = -inf\n\nRW  = lambda : sys.stdin.readline().strip()\nRI  = lambda : int(RW())\nRMI = lambda : [int(x) for x in sys.stdin.readline().strip().split()]\nRWI = lambda : [x for x in sys.stdin.readline().strip().split()]\n\n\nnb = RI()\nhave = RMI()\nnb_ops = RI()\n\ncurr = [-1] * nb\nmaxs = 0\n\nops = [RMI() for _ in range(nb_ops)][::-1]\nfor i in ops:\n    if i[0] == 2:\n        maxs = max(maxs, i[1])\n    else:        \n        if curr[i[1] - 1] == -1:\n            curr[i[1] - 1] = max(maxs, i[2])\nfor i in range(nb)            :\n    if curr[i] == -1:\n        curr[i] = max(maxs, have[i])\n\n\nprint(*curr)", "n=int(input())\na=[int(x) for x in input().split()]\nt=q=int(input())\nmaxarr=[-1]*n\nmaxGlob=-1\nquer=[]\nwhile t>0:\n    quer.append(tuple(map(int, input().split())))\n    t-=1\nfor i in range(q-1,-1,-1):\n    k=quer[i]\n    if k[0]==2:\n        maxGlob=max(maxGlob,k[1])\n    else:\n        if maxarr[k[1]-1]==-1:\n            maxarr[k[1]-1]=max(k[2],maxGlob)\n\nfor i in range(n):\n    if maxarr[i]==-1:\n        maxarr[i]=(max(maxGlob,a[i]))\n    \nprint(*maxarr)\n    \n\n", "n=int(input())\na=[int(x) for x in input().split()]\nt=q=int(input())\nmaxarr=[-1]*n\nmaxGlob=-1\nquer=[]\nwhile t>0:\n    quer.append([int(x) for x in input().split()])\n    t-=1\nfor i in range(q-1,-1,-1):\n    k=quer[i]\n    if k[0]==2:\n        maxGlob=max(maxGlob,k[1])\n    else:\n        if maxarr[k[1]-1]==-1:\n            maxarr[k[1]-1]=max(k[2],maxGlob)\n \nfor i in range(n):\n    if maxarr[i]==-1:\n        maxarr[i]=(max(maxGlob,a[i]))\n    \nprint(*maxarr)", "n=int(input())\na=list(map(int,input().split()))\nq=int(input())\narr=[]\nfor _ in range(q):\n    arr.append(list(map(int, input().split())))\narr.reverse()\nans=[-1]*n\ncur=0\nfor i in arr:\n    if i[0]==2:\n        cur=max(cur,i[1])\n    else:\n        if ans[i[1]-1]==-1:\n            ans[i[1]-1]=max(cur,i[2])\nfor i in range(n):\n    if ans[i]==-1:\n        ans[i]=max(a[i],cur)\nprint(*ans)\n", "R=lambda:map(int,input().split())\nn = int(input ())\na=list(R())\nq =int(input())\np=[]\nax= [-1]*n\nfor _ in range (q):p.append(list (R()))\ntemp=0\nfor i in  range(q-1,-1,-1):\n    if p[i][0]==2:temp = max(temp,p[i][1])\n    elif ax[p[i][1]-1]==-1:ax[p[i][1]-1] = max(temp,p[i][2])\nfor i in range (0,n):\n    if ax[i]==-1:print(max(temp,a[i]),end=\" \")\n    else:print(ax[i],end=\" \")\n", "import sys\n\ninput = sys.stdin.readline\nn = int(input())\nli = list(map(int, input().split()))\ncheck = [-1] * n\nmaxx = 0\nfor i in [input().split() for i in range(int(input()))][::-1]:\n    if i[0] == '2':\n        maxx = max(maxx, int(i[1]))\n    else:\n        if check[int(i[1]) - 1] == -1:\n            check[int(i[1]) - 1] = max(int(i[2]), maxx)\nfor i in range(n):\n    if check[i] == -1:\n        check[i] = max(maxx, li[i])\nprint(*check)\n", "import sys\nread = sys.stdin.readline\n\n\nn = int(read())\nbalance = list(map(int, read().split(\" \")))\nn_operations = int(read())\n\nminis = []\nnext_mini = 0\nchanged_before = [0] * (len(balance)+1)\n\nfor n_op in range(n_operations):\n    operation = list(map(int, read().split(\" \")))\n    if operation[0] == 1:\n        x = operation[1] - 1\n        balance[x] = operation[2]\n        changed_before[x] = next_mini\n    elif operation[0] == 2:\n        minis.append(operation[1])\n        next_mini += 1\n\nif len(minis) > 0:\n    max_mini = minis[-1]\n    for m in range(1, len(minis) + 1):\n        max_mini = max(max_mini, minis[m * -1])\n        minis[m * -1] = max_mini\n\n    for x in range(len(balance)):\n        cb = changed_before[x]\n        if cb < next_mini:\n            balance[x] = max(minis[cb], balance[x])\n        balance[x] = str(balance[x])\nelse:\n    for x in range(len(balance)):\n        balance[x] = str(balance[x])\n\nprint(\" \".join(balance))", "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int,input().split()))\nq = int(input())\na2 = [-1]*len(a)\narr = [None]*q\npay = [-1]*q\nfor i in range(q):\n    b = input().split()\n    if len(b) == 2:\n        pay[i] = int(b[1])\n    else:\n        arr[i] = int(b[1])\n        a2[arr[i]-1] = int(b[2])\n        \npay_max = max(pay)\npay_maxi = q - pay[::-1].index(pay_max) - 1\na = [pay_max if x<pay_max else x for x in a]\nm = [0]*q\nma = -1\nfor i in range(q-1,-1,-1):\n    if pay[i] != -1:\n        ma = max(ma,pay[i])\n    m[i] = ma\nfor i in range(q):\n    if arr[i]:\n        if i > pay_maxi:\n            a[arr[i]-1] = max(a2[arr[i]-1], m[i])\n        else:\n            a[arr[i]-1] = max(a2[arr[i]-1], pay_max)\nprint(*a)        \n#print(' '.join([str(x) for x in a]))\n", "R=lambda:map(int,input().split())\nn=int(input())\nr=[-1]*n\na=*zip(r,range(1,n+1),R()),*([*R()]for _ in[0]*int(input()))\nm=0\nfor t,p,*x in a[::-1]:\n if t>1:m=max(m,p)\n elif r[p-1]<0:r[p-1]=max(x[0],m)\nprint(*r)", "R=lambda:map(int,input().split())\nn=int(input())\na=*zip([1]*n,range(1,n+1),R()),*([*R()]for _ in[0]*int(input()))\nr=[-1]*n\nm=0\nfor t,p,*x in a[::-1]:\n if t>1:m=max(m,p)\n elif r[p-1]<0:r[p-1]=max(x[0],m)\nprint(*r)", "n = int(input())\nbalance = list(map(int, input().split()))\nq = int(input())\nlog = [list(map(int, input().split())) for i in range(q)]\n\nind_of_last_operation = [None] * n\nmax_pay = 0\nind_of_max_payment = None\npayments = []\npayments_id = []\n\nfor i in range(q):\n    if log[i][0] == 1:\n        ind_of_last_operation[log[i][1] - 1] = i\n\nfor i in range(q):\n    if log[i][0] == 2:\n        ind_of_last_payment = i\n        last_payment = log[i][1]\n        if log[i][1] > max_pay:\n            max_pay = log[i][1]\n\nmax_pay_for_moment = [0] * (q + 1)\nfor j in range(q - 1, -1, -1):\n    if log[j][0] == 2:\n        max_pay_for_moment[j] = max(log[j][1], max_pay_for_moment[j + 1])\n    else:\n        max_pay_for_moment[j] = max_pay_for_moment[j + 1]\n\nfor i in range(n):\n    if ind_of_last_operation[i] == None:\n        if balance[i] < max_pay:\n            balance[i] = max_pay\n    else:\n        if max_pay_for_moment[ind_of_last_operation[i] + 1] > log[ind_of_last_operation[i]][2]:\n            balance[i] = max_pay_for_moment[ind_of_last_operation[i] + 1]\n        else:\n            balance[i] = log[ind_of_last_operation[i]][2]\n\nprint(*balance)", "n, a, q = int(input()), [*list(map(int, input().split()))], int(input())\nops = []\n\nfor i in range(q):\n  t, *b = list(map(int, input().split()))\n  ops.append((t, b))\n\nb = [-1] * n\nm = -1\nfor op, ar in reversed(ops):\n  if op == 2:\n    m = max(m, ar[0])\n  else:\n    p, x = ar\n    p -= 1\n    if b[p] == -1:\n      b[p] = max(x, m)\n\nprint(' '.join(str(bi if bi != -1 else max(m, ai))for ai,bi in zip(a,b)))\n", "from bisect import bisect_right\nn = int(input())\nA = list(map(int, input().split()))\nB = [0] * n\nC = []\nfor i in range(int(input())):\n    w = list(map(int, input().split()))\n    if w[0] == 1:\n        A[w[1] - 1] = w[2]\n        B[w[1] - 1] = i\n    else:\n        C.append((i, w[1]))\nsC = [0]\nfor i in range(len(C) - 1, -1, -1):\n    sC.append(max(sC[-1], C[i][1]))\nsC = sC[::-1]\nfor i in range(n):\n    A[i] = max(A[i], sC[bisect_right(C, (B[i], 0))])\nprint(*A)", "n = int(input().strip())\na = list(map(int, input().split()))\nq = int(input().strip())\nqueries = []\nlast_balance = [-1]*n\nlast_balance_id = [-1]*n\n\nfor i in range(q):\n    query = list(map(int, input().split()))\n    queries.append(query)\n    if query[0]==1:\n        p = query[1]-1\n        last_balance[p] = query[2]\n        last_balance_id[p] = i\n\n\n#print(last_balance)\n#print(last_balance_id)\n\nmax_pay = [0]*(q+1)\nfor i in range(q-1,-1,-1):\n    query = queries[i]\n    if query[0]==2:\n        max_pay[i]=max(query[1], max_pay[i+1])\n    else:\n        max_pay[i]=max_pay[i+1]\n\n#print(max_pay)\n\nfor p in range(n):\n    #print(\"person: \",p)\n    if last_balance_id[p]>=0:\n        id = last_balance_id[p]\n        pay = max_pay[id]\n        #print(id, pay)\n        a[p] = max(pay, last_balance[p])\n    else:\n        a[p] = max(a[p], max_pay[0])\n\nprint(\" \".join([str(x) for x in a]))", "n = int(input())\na = list(map(int, input().split()))\nq = int(input())\ns = [0 for i in range(len(a))]\nf = [0 for i in range(q)]\n\nfor i in range(q):\n    r = list(map(int, input().split()))\n    if(r[0] == 1):\n        s[r[1]-1] = i\n        a[r[1]-1] = r[2]\n    else:\n        f[i] = r[1]\n\nfor i in reversed(range(0,q-1)):\n    f[i] = max(f[i], f[i+1])\n\nfor i in range(n):\n    a[i] = max(a[i], f[s[i]])\n\nprint(*a)", "n = int(input())\nsp = list(map(int, input().split()))\n\nm = int(input())\npos = [-1] * (n + 1)\nm1 = 0\nmem = []\nfor i in range(m):\n    sp1 = list(map(int, input().split()))\n    mem.append(sp1)\n    if sp1[0] == 1:\n        sp[sp1[1] - 1] = sp1[2]\n        pos[sp1[1] - 1] = i\n    else:\n        m1 = max(m1, sp1[1])\n        \nmaxs = [-1] * (m + 1)\n\nfor i in range(m - 1, -1, -1):\n    sp1 = mem[i]\n    \n    if (sp1[0] == 2):\n        if (i == m - 1 or sp1[1] > maxs[i + 1]):\n            maxs[i] = sp1[1]\n        else:\n            maxs[i] = maxs[i + 1]\n    else:\n        maxs[i] = maxs[i + 1]\nfor i in range(n):\n    if pos[i] != -1 and sp[i] < maxs[pos[i]]:\n        sp[i] = maxs[pos[i]]\n    elif pos[i] == -1:\n        sp[i] = max(sp[i], maxs[0])\nprint(*sp)\n", "n=int(input())\na=list(map(int,input().split()))\nq=int(input())\narr=[]\nfor _ in range(q):\n    arr.append(list(map(int, input().split())))\narr.reverse()\nans=[-1]*n\ncur=0\nfor i in arr:\n    if i[0]==2:\n        cur=max(cur,i[1])\n    else:\n        if ans[i[1]-1]==-1:\n            ans[i[1]-1]=max(cur,i[2])\nfor i in range(n):\n    if ans[i]==-1:\n        ans[i]=max(a[i],cur)\nprint(*ans)\n", "from sys import stdin\ninput = stdin.readline\n\nn = int(input())\narr = list(map(int, input().split()))\nq = int(input())\nqueries = [tuple(map(int, input().split())) for _ in range(q)][::-1]\nres, curr = [-1] * n, 0\nfor q in queries:\n    if q[0] == 1:\n        if res[q[1]-1] == -1:\n            res[q[1]-1] = max(q[2], curr)\n    else:\n        curr = max(curr, q[1])\nfor i in range(n):\n    if res[i] == -1:\n        res[i] = max(curr, arr[i])\nres = [str(q) for q in res]\nprint(' '.join(res))\n\n"]