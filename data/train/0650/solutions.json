["import sys\r\n# import math\r\nfrom math import gcd\r\n# import re\r\n# from heapq import *\r\n# from collections import defaultdict as dd\r\n# from collections import OrderedDict as odict\r\n# from collections import Counter as cc\r\n# from collections import deque\r\n# sys.setrecursionlimit(10**5)#thsis is must\r\n# mod = 10**9+7; md = 998244353\r\n# m = 2**32\r\ninput = lambda: sys.stdin.readline().strip()\r\ninp = lambda: list(map(int,sys.stdin.readline().strip().split()))\r\n# def C(n,r,mod):\r\n#   if r>n:\r\n#       return 0\r\n#   num = den = 1\r\n#   for i in range(r):\r\n#       num = (num*(n-i))%mod\r\n#       den = (den*(i+1))%mod\r\n#   return (num*pow(den,mod-2,mod))%mod\r\n# M = 1000000+1\r\n# pfc = [i for i in range(M+1)]\r\n# def pfcs(M):\r\n#     for i in range(2,M+1):\r\n#         if pfc[i]==i:\r\n#             for j in range(i+i,M+1,i):\r\n#                 if pfc[j]==j:\r\n#                     pfc[j] = i\r\n#     return\r\n#______________________________________________________\r\nfor _ in range(int(input())):\r\n    n,k = map(int,input().split())\r\n    d = [[] for i in range(k+1)]\r\n    for i in range(n):\r\n        l,r,p = map(int,input().split())\r\n        d[p].append([l,r])\r\n    ans = 0\r\n    for i in d:\r\n        if len(i)==0:\r\n            continue\r\n        ans+=1\r\n        t = sorted(i,key = lambda x:(x[1],x[0]))\r\n        final = t[0][1]\r\n        for j in range(1,len(t)):\r\n            if t[j][0]>=final:\r\n                ans+=1\r\n                final = t[j][1]\r\n    print(ans)      ", "def solve(array):\r\n    L = len(array)\r\n    if L <= 1:\r\n        return L\r\n    array.sort()\r\n    cnt = 1\r\n    for i in range(1, L):\r\n        if array[i][1] * -1 >= array[i - 1][0]:\r\n            cnt += 1\r\n    return cnt\r\n\r\n\r\nfor _ in range(int(input())):\r\n    N, K = list(map(int, input().split()))\r\n    rooms = [[] for i in range(K)]\r\n    for i in range(N):\r\n        s, e, p = list(map(int, input().split()))\r\n        rooms[p - 1].append([e, -s])\r\n\r\n    ans = 0\r\n    for i in rooms:\r\n        ans += solve(i)\r\n    print(ans)\r\n", "# cook your dish here\ndef sort_list(list1, list2):\n    zipped_pairs = zip(list2, list1)\n    z = [x for _, x in sorted(zipped_pairs)]\n    return z\n    \ndef printMaxActivities(s , f): \n    n = len(f)\n    i = 0\n    cnt=1\n    for j in range(n): \n        if s[j] >= f[i]: \n            cnt+=1 \n            i = j \n    return cnt\n\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    mat=[]\n    for i in range(k):\n        mat.append([[],[]])\n    for i in range(n):\n        a,b,c=map(int,input().split())\n        mat[c-1][0].append(a)\n        mat[c-1][1].append(b)\n    ans=0\n    #print(mat)\n    for i in range(k):\n        if len(mat[i][0])==1:\n            ans+=1\n        elif len(mat[i][0])>1:\n            ans+=printMaxActivities(sort_list(mat[i][0],mat[i][1]),sorted(mat[i][1]))\n    print(ans)", "# cook your dish here\n# cook your dish here\ndef cal(a):\n    \n    a.sort(key=lambda x:x[1])\n    len1=len(a)\n    c=1\n    curr=a[0][1]\n    for p in range(0,len1-1):\n        if curr<=a[p+1][0]:\n            c+=1\n            curr=a[p+1][1]\n    return c\n    \n    \n    \nt=int(input())\nfor i in range(t):\n    n,k=list(map(int,input().split()))\n    list1=[]\n    a=[]\n    count=0\n    for j in range(n):\n        s,f,p=list(map(int,input().split()))\n        list1.append((s,f,p))\n    list1.sort(key=lambda x:x[2])\n    for j in range(0,n-1):\n        if list1[j][2]==list1[j+1][2] and j!=n-2:\n            a.append((list1[j][0],list1[j][1]))\n        elif list1[j][2]==list1[j+1][2] and j==n-2:\n            a.append((list1[j][0],list1[j][1]))\n            a.append((list1[j+1][0],list1[j+1][1]))\n            \n            count+=cal(a)\n            a=[]\n        elif list1[j][2]!=list1[j+1][2] and j==n-2:\n            a.append((list1[j][0],list1[j][1]))\n            count+=cal(a)\n            a=[]\n            a.append((list1[j+1][0],list1[j+1][1]))\n            count+=cal(a)\n            a=[]\n        else:\n            a.append((list1[j][0],list1[j][1]))\n            count+=cal(a)\n            a=[]\n    print(count)\n", "from sys import stdin, stdout\r\ninput = stdin.readline\r\nprint2 = stdout.write\r\ndef get_list(): return tuple(map(int, stdin.readline().split()))\r\nfor _ in range(int(input())):\r\n\tn, k = map(int, stdin.readline().split())\r\n\tevent = sorted([get_list() for _ in range(n)])\r\n\toccup = {}\r\n\tcount = 0\r\n\tfor e in event:\r\n\t\tif not occup.get(e[2]) or e[0] >= occup[e[2]][1]:\r\n\t\t\toccup[e[2]] = e\r\n\t\t\tcount += 1\r\n\t\telif e[1] < occup[e[2]][1]:\r\n\t\t\toccup[e[2]] = e\r\n\tprint(count)", "# cook your dish here\nfrom collections import defaultdict\nfrom operator import itemgetter\nt=int(input())\nfor _ in range(t):\n    n, k =map(int, input().split())\n    diz=defaultdict(lambda:[])\n    for _ in range(n):\n        array=list(map(int, input().split()))\n        diz[array[-1]].append((array[0],array[1]))\n    counter=0\n    for key in diz:\n        diz[key].sort(key=itemgetter(0))\n        last_ev=diz[key][0]\n        counter+=1\n        for i in range(1,len(diz[key])):\n            if diz[key][i][1]<last_ev[1]:\n                last_ev=diz[key][i]\n            elif diz[key][i][0]>=last_ev[1]:\n                counter+=1\n                last_ev=diz[key][i]\n    print(counter)", "for _ in range(int(input())):\r\n    n, k = list(map(int, input().split()))\r\n    md = {}\r\n    for i in range(n):\r\n        s, e, p = list(map(int, input().split()))\r\n        if p in md: md[p].append((s, e))\r\n        else : md[p] = [(s, e)]\r\n    sm = 0\r\n    for i in range(k):\r\n        if i+1 in md:\r\n            md[i+1].sort(key=lambda x: x[1])\r\n            c = 1\r\n            curr = md[i+1][0][1]\r\n            for x in md[i+1]:\r\n                if x[0]>=curr:\r\n                    curr = x[1]\r\n                    c += 1\r\n            sm += c\r\n    print(sm)\r\n", "# cook your dish here\n# cook your dish here\ndef cal(a):\n    \n    a.sort(key=lambda x:x[1])\n    len1=len(a)\n    c=1\n    curr=a[0][1]\n    for p in range(0,len1-1):\n        if curr<=a[p+1][0]:\n            c+=1\n            curr=a[p+1][1]\n    return c\n    \n    \n    \nt=int(input())\nfor i in range(t):\n    n,k=list(map(int,input().split()))\n    list1=[]\n    a=[]\n    count=0\n    for j in range(n):\n        s,f,p=list(map(int,input().split()))\n        list1.append((s,f,p))\n    list1.sort(key=lambda x:x[2])\n    for j in range(0,n-1):\n        if list1[j][2]==list1[j+1][2] and j!=n-2:\n            a.append((list1[j][0],list1[j][1]))\n        elif list1[j][2]==list1[j+1][2] and j==n-2:\n            a.append((list1[j][0],list1[j][1]))\n            a.append((list1[j+1][0],list1[j+1][1]))\n            \n            count+=cal(a)\n            a=[]\n        elif list1[j][2]!=list1[j+1][2] and j==n-2:\n            a.append((list1[j][0],list1[j][1]))\n            count+=cal(a)\n            a=[]\n            a.append((list1[j+1][0],list1[j+1][1]))\n            count+=cal(a)\n            a=[]\n        else:\n            a.append((list1[j][0],list1[j][1]))\n            count+=cal(a)\n            a=[]\n    print(count)\n"]