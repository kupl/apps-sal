["\"\"\"\nCode chef problem DESTCELL, Destroy Cells\n\"\"\"\n\n\ndef find_destroyed_cells(cell_advance, n, m, k):\n row = 1\n col = 1\n destroyed_cells = {(1, 1)}\n while True:\n  row, col = cell_advance(row, col, n, m, k)\n  if row <= n and col <= m:\n   destroyed_cells.add((row, col))\n  else:\n   break\n return destroyed_cells\n\n\ndef cell_advance_hero1(row, col, n, m, k):\n return row + (col + k) // m, (col + k) % m + 1\n\n\ndef cell_advance_hero2(row, col, n, m, k):\n return (row + k) % n + 1, col + (row + k)//n\n\n\ndef main():\n t = int(input())\n for _ in range(t):\n  n, m = [int(s) for s in input().split(' ')]\n  counts = []\n  for k in range(n*m):\n   cells_h1 = find_destroyed_cells(cell_advance_hero1, n, m, k)\n   cells_h2 = find_destroyed_cells(cell_advance_hero2, n, m, k)\n\n   destroyed = len(cells_h1) + len(cells_h2) - len(cells_h1 & cells_h2)\n   counts.append(destroyed)\n  print(' '.join([str(c) for c in counts]))\n\n\nmain()\n", "t = int(input())\nwhile t > 0:\n ans = []\n n, m = list(map(int, input().split()))\n temp = []\n for k in range(0, n*m):\n  myset1 = set()\n  myset2 = set()\n  if k == 0:\n   ans.append(n*m)\n  elif k == n*m - 1:\n   ans.append(1)\n  else:\n   for j in range(1, m+1):\n    i = j\n    while i <= n*m:\n     temp.append(i)\n     i += m\n   i = 1\n   while i <= n*m:\n    myset1.add(i)\n    i = i + k + 1\n   i = 0\n   while i <= n*m-1:\n    myset2.add(temp[i])\n    i = i + k + 1\n   current = list(myset1.union(myset2))\n   ans.append(len(current))\n print(*ans)\n t -= 1\n", "t = int(input(''))\nfor v in range(t):\n a = input('').split(' ')\n n = int(a[0])\n m = int(a[1])\n ans = [0]*(n*m)\n for k in range(0,n*m,1):\n  su = 2*((n*m-1)//(k+1)+1)\n  g = 0\n  while(g<n*m):\n   j = g%(m)\n   i = g//m\n   #print((j*n + i),g,k+1)\n   if((j*n + i)%(k+1) == 0):\n    su = su - 1\n   #print(g,su)\n   g = g + (k+1)\n  print(su, end = ' ')\n print('')\n      ", "t = int(input(''))\nfor v in range(t):\n a = input('').split(' ')\n n = int(a[0])\n m = int(a[1])\n ans = [0]*(n*m)\n for k in range(0,n*m,1):\n  su = 2*((n*m-1)//(k+1)+1)\n  g = 0\n  while(g<n*m):\n   j = g%(m)\n   i = g//m\n   #print((j*n + i),g,k+1)\n   if((j*n + i)%(k+1) == 0):\n    su = su - 1\n   #print(g,su)\n   g = g + (k+1)\n  print(su, end = ' ')\n print('')\n      ", "# cook your dish here\nfrom math import ceil\nfor _ in range(int(input())):\n n,m=list(map(int,input().split()))\n l=[str(n*m)]\n #print(ceil(5.3))\n for i in range(1,n*m):\n  c=2*ceil((n*m)/(i+1))\n  #print(c,\"sas\",(n*m)/(i+1))\n  for k in range(0,n*m,i+1):\n   r=k%m\n   q=k//m\n   if((r*n+q)%(i+1)==0):\n    c-=1\n  l.append(str(c))\n print(\" \".join(l))", "# cook your dish here\ndef destroy_cells(N,M):\n print(N*M,end=' ')\n \n for k in range(1,N*M-1):\n  row,col,i,j = 0,0,0,0\n  positions = [(0,0)]\n  \n  while row < N or col < M:\n   j = j+k+1\n   if j >= M:\n    row += j//M\n   if row < N:\n    j = j%M\n    positions.append((row,j))\n   \n   i = i+k+1\n   if i >= N:\n    col += i//N\n   if col < M:\n    i = i%N\n    positions.append((i,col))\n    \n  positions = set(positions)\n  print(len(positions),end=' ')\n \n print(1)\n\ntest = int(input())\nfor i in range(test):\n (N,M) = (map(int,input().split()))\n destroy_cells(N,M)", "t=int(input())\nfor tc in range(t):\n n,m=map(int,input().split())\n s=n*m\n x=[]\n y=[]\n z=[]\n a=[]\n print(n*m,end=\" \")\n for i in range(1,n+1):\n  for j in range(1,m+1):\n   x.append([i,j])\n for j in range(1,m+1):\n  for i in range(1,n+1):\n   y.append([i,j])\n for k in range(1,m*n):\n  a=[]\n  z=[]\n  for i in range(0,n*m,k+1):\n   z.append(x[i])\n  for j in range(0,n*m,k+1):\n   z.append(y[j]) \n  for i in z:\n   if i not in a:\n    a.append(i) \n  print(len(a),end=\" \")\n print()\n", "t=int(input())\nfor tc in range(t):\n n,m=map(int,input().split())\n s=n*m\n x=[]\n y=[]\n z=[]\n a=[]\n print(n*m,end=\" \")\n for i in range(1,n+1):\n  for j in range(1,m+1):\n   x.append([i,j])\n for j in range(1,m+1):\n  for i in range(1,n+1):\n   y.append([i,j])\n for k in range(1,m*n):\n  a=[]\n  z=[]\n  for i in range(0,n*m,k+1):\n   z.append(x[i])\n  for j in range(0,n*m,k+1):\n   z.append(y[j]) \n  for i in z:\n   if i not in a:\n    a.append(i) \n  print(len(a),end=\" \")\n print()\n", "# cook your dish here\nt=int(input())\nfor i in range(t):\n n,m=map(int,input().split())\n for k in range(n*m):\n  s=''\n  t=''\n  for i in range(n*m):\n   s+='0'\n  i=0\n  while(i<len(s)):\n   s=s[:i]+'1'+s[i+1:]\n   i+=k+1\n  i=0\n  for i in range(n):\n   while(i<len(s)):\n    t+=s[i]\n    i+=n \n  i=0\n  while(i<len(t)):\n   t=t[:i]+'1'+t[i+1:]\n   i+=k+1\n  print(t.count('1'),' ',end='')\n    \n \n   \n   \n     \n  \n    \n  \n  \n", "for x in range(int(input())):\n n,m=map(int,input().split())\n y=n*m\n print(y,end=\" \")\n for x in range(1,n*m):\n  ans = 2*(1+ (n*m-1)//(x+1))\n  mu=0\n  while(mu<y):\n   n1=mu//m\n   m1=mu%m\n   y2=m1*n+n1\n   if(y2%(x+1)==0):\n    ans-=1\n   mu+=x+1\n  print(ans,end=\" \")\n print(\"\")\n", "for x in range(int(input())):\n n,m=map(int,input().split())\n y=n*m\n l=[]\n for x in range(n*m):\n  p=x+1\n  if(y%p==0):\n   ans=2*(y//p)\n  else:\n   ans=2*((y//p)+1)\n  mu=0\n  while(mu<y):\n   n1=mu//m\n   m1=mu%m\n   y2=m1*n+n1\n   if(y2%(x+1)==0):\n    ans-=1\n   mu+=x+1\n  print(ans,end=\" \")\n print(\"\")\n", "for x in range(int(input())):\n n,m=map(int,input().split())\n y=n*m\n for x in range(n*m):\n  a=1\n  b=1\n  d={(1,1):1}\n  count=1\n  if x==0:\n   print(n*m,end=\" \")\n   continue\n  while(True):\n   b=b+x+1\n   if(b>m):\n    u=b-m\n    if(u%m==0):\n     a=a+u//m\n     b=m\n    else:\n     a=a+(u//m)+1\n     b=u%m\n   if a>n:\n    break\n   else:\n    d[(a,b)]=1\n    count+=1\n  a=1\n  b=1\n  while(True):\n   a=a+x+1\n   if(a>n):\n    u=a-n\n    if(u%n==0):\n     b=b+u//n\n     a=n\n    else:\n     b=b+(u//n)+1\n     a=u%n\n   if b>m:\n    break\n   else:\n    if (a,b) not in d.keys():\n     count+=1\n  print(count,end=\" \")\n print(\"\")\n  \n   \n", "for _ in range(int(input())):\n n,m=map(int,input().split())\n lim=n*m+1\n k=lim-1\n lst=[int(num) for num in range(1,lim)]\n lst2=[]\n for val in range(1,m+1):\n  for val2 in range(n):\n   lst2.append(val+(m*(val2)))\n for val_k in range(k):\n  lst_k=[]\n  for index in range(0,lim-1,val_k+1):\n   lst_k.append(lst[index])\n   lst_k.append(lst2[index])\n  print(len(set(lst_k)),end=\" \")\n print()", "for x in range(int(input())):\n n,m=map(int,input().split())\n y=n*m\n l=[(1,1)]\n for x in range(n*m):\n  l=[(1,1)]\n  a=1\n  b=1\n  if x==0:\n   print(n*m,end=\" \")\n   continue\n  while(True):\n   b=b+x+1\n   if(b>m):\n    u=b-m\n    if(u%m==0):\n     a=a+u//m\n     b=m\n    else:\n     a=a+(u//m)+1\n     b=u%m\n   if a>n:\n    break\n   else:\n    l.append((a,b))\n  a=1\n  b=1\n  while(True):\n   a=a+x+1\n   if(a>n):\n    u=a-n\n    if(u%n==0):\n     b=b+u//n\n     a=n\n    else:\n     b=b+(u//n)+1\n     a=u%n\n   if b>m:\n    break\n   else:\n    l.append((a,b))\n  print(len(set(l)),end=\" \")\n print(\"\")\n  \n   \n", "for x in range(int(input())):\n n,m=map(int,input().split())\n y=n*m\n l=[(1,1)]\n for x in range(n*m):\n  l=[(1,1)]\n  a=1\n  b=1\n  while(True):\n   b=b+x+1\n   if(b>m):\n    u=b-m\n    if(u%m==0):\n     a=a+u//m\n     b=m\n    else:\n     a=a+(u//m)+1\n     b=u%m\n   if a>n:\n    break\n   else:\n    l.append((a,b))\n  a=1\n  b=1\n  while(True):\n   a=a+x+1\n   if(a>n):\n    u=a-n\n    if(u%n==0):\n     b=b+u//n\n     a=n\n    else:\n     b=b+(u//n)+1\n     a=u%n\n   if b>m:\n    break\n   else:\n    l.append((a,b))\n  print(len(set(l)),end=\" \")\n print(\"\")\n  \n   \n", "# cook your dish here\nt=int(input())\nl =[]\nfor i in range(0,t):\n ele=list(map(int,input().split()))\n l.append(ele)\nfor i in range(0, t):\n n=l[i][0]\n m=l[i][1]\n f1=[]\n f2=[]\n for j in range(1,n+1):\n  for h in range(1, m + 1):\n   f1.append((j,h))\n for j in range(1,m+1):\n  for h in range(1, n+ 1):\n   f2.append((h,j))\n\n for k in range(0,n*m):\n  if k==0:\n   print(n*m,end=' ')\n  else:\n   y=[]\n   z=[]\n   e=0\n   while e*(k+1)<n*m:\n\n    y.append(f1[e*(k+1)])\n    z.append(f2[e*(k+1)])\n    e=e+1\n\n   for x in z:\n    if x not in y:\n     y.append(x)\n\n   print(len(y),end=' ')", "# cook your dish here\nans = set()\nfor _ in range(int(input())):\n r,c = map(int,input().split())\n count = 0\n for i in range(0,r*c):        \n  ans.clear()\n  for x in range(0,r*c,i+1):\n   a = x//r\n   b = x%r\n   ans.add((a,b))\n   a = x%c\n   b = x//c\n   ans.add((a,b))\n  \n  print(len(ans), end= \" \")", "ans = [[False for _ in range(1000)] for _ in range(1000)]\nfor _ in range(int(input())):\n r,c = map(int,input().split())\n count = 0\n for i in range(0,r*c):\n  val = 0\n  for x in range(0,r*c,i+1):\n   a = x//r\n   b = x%r\n   \n   # ans.add((a,b))\n   if not ans[a][b]:\n    ans[a][b] = True\n    val+=1\n   a = x%c\n   b = x//c\n   # ans.add((a,b))\n   if not ans[a][b]:\n    ans[a][b]=True\n    val+=1\n   \n  for x in range(0,r*c,i+1):\n   a = x//r\n   b = x%r \n   ans[a][b]=False\n   a = x%c\n   b = x//c\n   ans[a][b]=False\n   \n  \n  print(val, end= \" \")", "ans = [[False for _ in range(1001)] for _ in range(1001)]\nfor _ in range(int(input())):\n r,c = map(int,input().split())\n count = 0\n for i in range(0,r*c):\n  val = 0\n  for x in range(0,r*c,i+1):\n   a = x//r\n   b = x%r\n   \n   # ans.add((a,b))\n   ans[a][b] = True\n   a = x%c\n   b = x//c\n   # ans.add((a,b))\n   ans[a][b]=True\n   \n  for x in range(0,r*c,i+1):\n   \n   a = x//r\n   b = x%r\n   \n   if ans[a][b] == True:\n    ans[a][b]=False\n    val+=1\n   a = x%c\n   b = x//c\n   if ans[a][b] == True:\n    ans[a][b]=False\n    val+=1\n   \n  \n  print(val, end= \" \")", "# cook your dish here\nfor _ in range(int(input())):\n r,c = map(int,input().split())\n count = 0\n for i in range(0,r*c):        \n  ans = set()\n  for x in range(0,r*c,i+1):\n   a = x//r\n   b = x%r\n   ans.add((a,b))\n   a = x%c\n   b = x//c\n   ans.add((a,b))\n  \n  print(len(ans), end= \" \")", "# cook your dish here\nfor _ in range(int(input())):\n r,c = map(int,input().split())\n count = 0\n for i in range(0,r*c):        \n  ans = list()\n  for x in range(0,r*c,i+1):\n   a = x//r\n   b = x%r\n   ans.append((a,b))\n   a = x%c\n   b = x//c\n   ans.append((a,b))\n  \n  print(len(set(ans)), end= \" \")"]