["class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        n = nums[0]\n        \n        for i in nums:\n            n = gcd(i,n)\n            \n            if n==1:\n                return True\n        return False\n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        if not nums: return False\n        a=nums[0]\n        for i in range(1, len(nums)):\n            a=gcd(a,nums[i])\n        return a==1", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        def gcd(x,y):\n            while y:\n                x,y=y,x%y\n            return x\n        g=nums[0]\n        for x in nums:\n            g=gcd(g,x)\n        return g==1\n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        def gcd(x: int, y: int) -> int:\n            if y == 0:\n                return x\n            else:\n                return gcd(y, x % y)\n            \n        result = nums[0]\n        for num in nums:\n            result = gcd(result, num)\n            \n        return result == 1", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        gcd = nums[0]\n        for a in nums:\n            while a:\n                gcd, a = a, gcd % a\n        return gcd == 1\n", "class Solution:\n    def gcd(self,a,b):\n        return a if b==0 else self.gcd(b,a%b)\n    def isGoodArray(self, nums: List[int]) -> bool:\n        nums=list(set(nums))\n        n=len(nums)\n        if n==1 and nums[0]==1:return True\n        cur=nums[0]        \n        for i in range(1,n):\n            cur=self.gcd(cur,nums[i])\n            if cur==1:return True\n        return False", "class Solution:\n    def gcd(self, a, b):\n        if a == 0:\n            return b\n        if b == 0:\n            return a\n        if a == 1 or b == 1:\n            return 1\n        while b != 0:\n            a, b = b, a % b\n        return a\n    \n    def isGoodArray(self, nums: List[int]) -> bool:\n        g = 0\n        for n in nums:\n            if g == 0:\n                g = n\n            elif n == 1:\n                return True\n            else:\n                while n:\n                    g, n = n, g % n\n            if g == 1:\n                return True\n        return False", "class Solution:\n    \n    def gcd(self, a:int, b:int) -> int:\n        a,b = max(a,b),min(a,b)\n        while b>0:\n            a,b = b,a%b\n        return a\n    \n    def isGoodArray(self, nums: List[int]) -> bool:\n        lowest = nums[0]\n        for i in nums[1:]:\n            lowest = self.gcd(lowest,i)\n        return lowest==1", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        if len(nums) == 1:\n            return nums[0] == 1\n        def gcd(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        \n        gcd_val = nums[0]\n        for i in range(1, len(nums)):\n            gcd_val = gcd(gcd_val, nums[i])\n            if gcd_val == 1:\n                return True\n        return False", "def gcd(a,b):\n    if(b==0):\n        return a\n    return gcd(b,a%b)\n\nclass Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        if(nums==[1]):\n            return True\n        i=0\n        a=nums[i]\n        for j in range(i+1,len(nums)):\n            if(a<nums[j]):\n                b=gcd(nums[j],a)\n                if(b==1):\n                    return True\n                else:\n                    a=b\n            else:\n                b=(gcd(a,nums[j]))\n                if(b==1):\n                    return True\n                else:\n                    a=b\n        return False", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        gcd = nums[0]\n        for n in nums:\n            while n:\n                gcd, n = n, gcd % n\n        return gcd == 1\n            \n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        def gcd(a, b):\n            a, b = max(a,b), min(a,b)\n            while b:\n                a, b = b, a%b\n            return a\n        if len(nums) == 1:\n            if nums != [1]:\n                return False\n            else:\n                return True\n        i = 0\n        d = nums[0]\n        while i < len(nums):\n            d = gcd(nums[i],d)\n            if d == 1:\n                return True\n            i += 1\n        return False\n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        \n        def gcd(x, y):\n            if x < y:\n                x, y = y, x\n            if not x % y:\n                return y\n            return gcd(x % y, y)\n        \n        if len(nums) == 1:\n            if nums[0] == 1:\n                return True\n            return False\n        \n        while True:\n            x = nums.pop(-1)\n            y = nums.pop(-1)\n            z = gcd(x, y)\n            if not nums:\n                return z == 1\n            \n            nums.append(z)\n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        \n        def euclid(a,b):\n            q, r = max(a,b), min(a,b)\n            while r > 1 and q > 0:\n                r, q = q % r, r\n            return r if r > 0 else q\n            \n        if len(nums) == 1:\n            return True if nums[0] == 1 else False\n        \n        nums.sort()\n        for i in range(1,len(nums)):\n            nums[i] = euclid(nums[i],nums[i-1])\n            if nums[i] == 1:\n                return True\n            \n        return False", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        def euclid(a,b):\n            q, r = max(a,b), min(a,b)\n            while r > 1 and q > 0:\n                r, q = q % r, r\n            return r if r > 0 else q\n            \n        if len(nums) == 1:\n            return True if nums[0] == 1 else False\n        \n        for i in range(1,len(nums)):\n            nums[i] = euclid(nums[i],nums[i-1])\n            if nums[i] == 1:\n                return True\n            \n        return False", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        def gcd(a, b):\n            if b>0:\n                return gcd(b, a%b)\n            return a\n        if not nums:\n            return False\n        if len(nums)==1:\n            return nums[0]==1\n        num = nums[0]\n        for i in range(1, len(nums)):\n            ans = gcd(num, nums[i])\n            if ans==1:\n                return True\n            num = ans\n        return False\n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        if len(nums) == 1:\n            if nums[0] == 1:\n                return True\n            else:\n                return False\n    \n        ans = self.gcd(nums[0],nums[1])\n        for num in nums[2:]:\n            ans = self.gcd(ans,num)\n            if ans == 1:\n                return True\n        return ans == 1\n    def gcd(self, a,b) :\n        if b == 0:\n            return a\n        return self.gcd(b,a%b)\n", "from math import gcd\nfrom functools import reduce\n\nclass Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        return (reduce((lambda x, y: gcd(x,y)), nums) == 1)\n    \n# class Solution:\n#     def gcd(x, y):\n#         gcd_ = i\n#         for i in range(2, min(x, y)):\n#             if x%i == 0 and y%i == 0:\n#                 gcd_ = i\n#         return gcd_\n#     def isGoodArray(self, nums: List[int]) -> bool:\n#         itergcd = nums[0]\n#         for i in nums:\n#             itergcd = gcd(itergcd, i)\n#         return itergcd == 1\n            \n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        import math\n        curr_gcd = nums[0]\n        for i in range(1, len(nums)):\n            curr_gcd = math.gcd(curr_gcd, nums[i])\n            if curr_gcd == 1:\n                return True\n        return curr_gcd == 1\n        \n        # if 1 in nums: return True\n        \n#         def find_factors(num):\n#             sol = set()\n#             for i in range(1,math.ceil(math.sqrt(num))):\n#                 if num % i == 0:\n#                     sol.add(i)\n#                     sol.add(num/i)\n#             # sol.remove(num)\n#             sol.remove(1)\n#             return sol\n        \n#         all_items = set()\n#         factors_list = []\n#         for num in nums:\n#             temp_set = find_factors(num)\n#             for it in temp_set:\n#                 all_items.add(it)\n            \n#             factors_list.append(temp_set)\n#         # print(all_items)\n#         # print(factors_list)        \n#         for it in all_items:\n#             if it == 1: continue\n#             if all([it in lis for lis in factors_list]):\n#                 return False\n\n#         return True\n        \n        \n        \n        \n        '''\n        29, 6, 10\n        29, 3*2, 5*2\n        '''", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        for i in range(len(nums)):\n            nums[i] = gcd(nums[i],nums[i-1]) if i > 0 else nums[0]\n        \n        return nums[-1]==1\n    \n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        def gcd(x,y):\n            if y > x:\n                return gcd(y,x)\n            if y == 0:\n                return x\n            return gcd(y,x%y) \n        cur = nums[0]\n        for i in range(1, len(nums)):\n            cur = gcd(cur,nums[i])\n        \n        return cur == 1\n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        g=nums[0]\n        for i in nums:g=gcd(i,g)\n        return g==1", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        gcd = nums[0]\n        for num in nums:\n            while num:\n                gcd, num = num, gcd % num\n            if gcd == 1:\n                return True\n        return False\n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        \n        def gcd(a,b):\n            if b > a:\n                a,b = b,a\n            while (b > 0):\n                r = divmod(a,b)[1]\n                a = b\n                b = r\n            return a\n        \n        if len(nums) == 0: return 0\n        if len(nums) == 1: return nums[0] == 1\n        \n        ans = nums[0]\n        \n        for i in range(1,len(nums)):\n            ans = gcd(ans,nums[i])\n            if ans == 1: return True\n        \n        return ans == 1", "class Solution:\n    def gcd(self, nums):\n        g = nums[0]\n        for x in nums:\n            while x:\n                g, x = x, g%x\n        return g\n\n    # a: list of integers\n    # d: desired GCD of the integers in a\n    def bezout(self, a: [int], d):\n        if self.gcd(a) == d:\n            return True\n        return False\n\n    def isGoodArray(self, nums: [int]) -> bool:\n        return self.bezout(nums, 1)", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        gcd = nums[0]\n        for n in nums:\n            while n:\n                gcd, n = n, gcd % n\n                \n        return gcd == 1", "class Solution:\n  def getGCD(self, x: int, y: int) -> int:\n    while y:\n      x, y = y, x % y\n    return x  \n  def getLCM(self, x: int, y: int) -> int:\n    return x * y // self.getGCD(x, y)\n  def isGoodArray(self, nums: List[int]) -> bool:\n    # question is equivalent to have any substr with gcd equals 1, iff array has gcd equals to 1\n    n = len(nums)\n    x, i = nums[0], 1\n    while i < n:\n      x = self.getGCD(x, nums[i])\n      if x == 1:\n        return True\n      i += 1\n    return x == 1", "class Solution:\n    def isGoodArray(self, A: List[int]) -> bool:\n        gcd = A[0]\n        for a in A:\n            while a:\n                gcd, a = a, gcd % a\n                if gcd == 1:\n                    return gcd\n        return False", "from fractions import gcd\nfrom functools import reduce\nclass Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        def find_gcd(list):\n            x = reduce(gcd, list)\n            return x\n        if find_gcd(nums)==1:\n            return True\n        return False\n\n", "# from math import gcd\n# from functools import reduce\n\n# class Solution:\n#     def isGoodArray(self, nums: List[int]) -> bool:\n#         return (reduce((lambda x, y: gcd(x,y)), nums) == 1)\n    \nclass Solution:\n    def gcd(x, y):\n        gcd_ = i\n        for i in range(2, min(x, y)):\n            if x%i == 0 and y%i == 0:\n                gcd_ = i\n        return gcd_\n    def isGoodArray(self, nums: List[int]) -> bool:\n        start = nums[0]\n        for i in nums:\n            start = gcd(start, i)\n        return start == 1\n            \n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        g=nums[0]\n        for i in nums:\n            g=self.hcfnaive(i,g)\n        return g==1\n            \n      \n    def hcfnaive(self,a,b): \n        if(b==0): \n            return a \n        else: \n            return self.hcfnaive(b,a%b) \n", "class Solution:\n    def isGoodArray(self, x: List[int]) -> bool:\n        g=x[0]\n        for i in x:g=gcd(i,g)\n        return g==1\n", "from functools import reduce\nclass Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        return reduce(gcd, nums) < 2\n            \n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        \n        if len(nums) == 1:\n            if nums[0] == 1:\n                return True\n            else:\n                return False\n            \n        now = -1\n        for i in range(1, len(nums)):\n            if i == 1:\n                now = math.gcd(nums[i-1], nums[i])\n            else:\n                now = math.gcd(nums[i],now)\n            \n        \n        if now == 1:\n            return True\n        return False", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        res = nums[0]\n        \n        for i in range(1, len(nums)):\n            res = math.gcd(res, nums[i])\n            if res == 1:\n                return True\n        \n        return res == 1\n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        \n        if len(nums) == 1:\n            return True if nums[0] == 1 else False\n    \n        for i in range(1,len(nums)):\n            nums[i] = gcd(nums[i],nums[i-1])\n            if nums[i] == 1:\n                return True\n            \n        return False\n    \n", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n#         primeSet = set()\n#         def isPrime(x):\n#             if x < 2 or x in primeSet:\n#                 return False\n#             i = 2\n#             limit = int(x**0.5)\n#             while i < limit +1:\n#                 if x%i == 0:\n#                     return False\n#                 limit = x//i\n#                 i += 1\n#             primeSet.add(x)\n#             return True\n        \n#         numsLen = len(nums)\n#         primeCounter = 0\n#         for i in range(numsLen):\n#             if nums[i] == 1:\n#                 return True\n#             if isPrime(nums[i]):\n#                 primeCounter += 1\n#                 if primeCounter == 2:\n#                     return True\n#             else:\n#                 for j in range(i):\n#                     if isPrime(abs(nums[j] - nums[i])):\n#                         primeCounter += 1\n#                         if primeCounter == 2:\n#                             return True\n#         return False\n        g=nums[0]\n        for i in nums:\n            g=gcd(i,g)\n        return g==1", "class Solution:\n    def isGoodArray(self, nums: List[int]) -> bool:\n        for i in range(len(nums)):\n            nums[i] = gcd(nums[i],nums[i-1]) if i > 0 else nums[0]\n            if nums[i] == 1:\n                return True\n        return False\n    \n", "class Solution:\n    def isGoodArray(self, A: List[int]) -> bool:\n        if len(A) == 0:\n            return False\n        gcd = A[0]\n        for a in A:\n            while a:\n                gcd, a = a, gcd % a\n        return gcd == 1\n"]