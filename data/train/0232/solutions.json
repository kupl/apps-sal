["class Solution:\n     def findPoisonedDuration(self, timeSeries, duration):\n         \"\"\"\n         :type timeSeries: List[int]\n         :type duration: int\n         :rtype: int\n         \"\"\"\n         if not timeSeries:\n             return 0\n         prev = timeSeries[0]\n         ret = 0\n         count = 0\n         for t in timeSeries[1:]:\n             diff = t - prev\n             if diff > duration:\n                 count += 1\n             else:\n                 ret += diff \n             prev = t;\n         ret += (count+1)*duration \n         return ret\n", "class Solution:\n     def findPoisonedDuration(self, timeSeries, duration):\n         \"\"\"\n         :type timeSeries: List[int]\n         :type duration: int\n         :rtype: int\n         \"\"\"\n         if not timeSeries:\n             return 0\n         \n         previous_time = timeSeries[0]\n         total_time = duration\n         for time in timeSeries[1:]:\n             if time - previous_time < duration:\n                 total_time += time - previous_time\n                 previous_time =time\n             else:\n                 total_time += duration\n                 previous_time =time\n \n         return total_time", "class Solution:\n     def findPoisonedDuration(self, timeSeries, duration):\n         \"\"\"\n         :type timeSeries: List[int]\n         :type duration: int\n         :rtype: int\n         \"\"\"\n         res = 0\n         # i=0\n         if timeSeries == []:\n             return 0\n         last = timeSeries[0]\n         cur = timeSeries[0]\n         for i in range(1,len(timeSeries)):\n             if (timeSeries[i]-cur) < duration:\n                 cur = timeSeries[i]\n                 continue\n             else:\n                 res+=cur-last+duration\n                 last = timeSeries[i]\n                 cur = timeSeries[i]\n             # print(\"i\",i,\"res\",res)\n             # i+=1\n         res+=cur-last+duration\n \n         return res", "class Solution:\n     def findPoisonedDuration(self, timeSeries, duration):\n         \"\"\"\n         :type timeSeries: List[int]\n         :type duration: int\n         :rtype: int\n         \"\"\"\n         total = 0\n         last = float('-inf')\n         for t in timeSeries:\n             total += duration\n             if last+duration > t:\n                 total -= (last+duration) - t\n             last = t\n         return total", "class Solution:\n     def findPoisonedDuration(self, timeSeries, duration):\n         \"\"\"\n         :type timeSeries: List[int]\n         :type duration: int\n         :rtype: int\n         \"\"\"\n         totalBlind = 0\n         lastBlindEnd = 0\n         ts = sorted(timeSeries)\n         for time in ts:\n             if time < lastBlindEnd:\n                 totalBlind += time + duration - lastBlindEnd\n             else:\n                 totalBlind += duration \n             lastBlindEnd = time + duration\n         return totalBlind", "class Solution:\n     def findPoisonedDuration(self, timeSeries, duration):\n         \"\"\"\n         :type timeSeries: List[int]\n         :type duration: int\n         :rtype: int\n         \"\"\"\n         if not timeSeries:\n             return 0\n         length = len(timeSeries)\n         if length == 1:\n             return duration\n         result = duration\n \n         start_time, end_time = timeSeries[0], timeSeries[0] + duration - 1\n         for t in timeSeries[1:]:\n             if t <= end_time:\n                 result += t + duration -1 - end_time\n                 end_time = t + duration - 1\n             else:\n                 result += duration \n                 start_time, end_time = t, t + duration -1\n         return result\n", "class Solution:\n     def findPoisonedDuration(self, timeSeries, duration):\n         \"\"\"\n         :type timeSeries: List[int]\n         :type duration: int\n         :rtype: int\n         \"\"\"\n         return sum(min(duration, b - a) for a, b in zip(timeSeries, timeSeries[1:] + [10e7]))\n", "class Solution:\n     def findPoisonedDuration(self, timeSeries, duration):\n         \"\"\"\n         :type timeSeries: List[int]\n         :type duration: int\n         :rtype: int\n         \"\"\"\n         if not timeSeries:\n             return 0\n         \n         total_poisoned_time = 0\n         \n         for i in range(len(timeSeries) - 1):\n             if timeSeries[i + 1] <= timeSeries[i] + duration:\n                 total_poisoned_time += timeSeries[i + 1] - timeSeries[i]\n             else:\n                 total_poisoned_time += duration\n             \n         total_poisoned_time += duration\n         \n         return total_poisoned_time\n             \n", "class Solution:\n     def findPoisonedDuration(self, timeSeries, duration):\n         \"\"\"\n         :type timeSeries: List[int]\n         :type duration: int\n         :rtype: int\n         \"\"\"\n         \n         \n         \n         l = len(timeSeries)\n         if l == 0:\n             return 0\n         if l == 1:\n             return duration\n         \n         T = 0\n         i = 1\n         while i < l:\n             if timeSeries[i]-timeSeries[i-1] >= duration:\n                 T += duration\n             else:\n                 T += timeSeries[i]-timeSeries[i-1]\n             i += 1\n         T += duration\n         return T", "class Solution:\n     def findPoisonedDuration(self, timeSeries, duration):\n         \"\"\"\n         :type timeSeries: List[int]\n         :type duration: int\n         :rtype: int\n         \"\"\"\n         '''\n         res = []\n         for time in timeSeries:\n             if res and res[-1][1] > time:\n                 res[-1][1] = time\n             res.append([time, time+duration])\n         return sum([t[1]-t[0] for t in res])\n         '''\n         res = 0\n         cur = 0\n         for time in timeSeries:\n             res += min(duration, time+duration-cur)\n             cur = time+duration\n         return res\n"]