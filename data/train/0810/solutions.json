["# cook your dish here\nfrom bisect import bisect_left \n \ndef BinarySearch(a, x): \n i = bisect_left(a, x) \n if i != len(a) and a[i] == x: \n  return i \n else: \n  return -1\n\nfor _t in range(int(input())):\n _n, q = list(map(int, input().split()))\n mounts = list(map(int, input().split()))\n for _q in range(q):\n  query = list(map(int, input().split()))\n  if query[0] == 0:\n   mounts[query[1]] = query[2]\n  else:\n   curr = query[1]\n   prev = set(mounts[:curr+1])\n   for m in mounts[curr+1:]:\n    if m > mounts[curr] and m not in prev:\n     print(m)\n     break\n   else:\n    print(-1)\n     \n", "# cook your dish here\nfrom bisect import bisect_left \n \ndef BinarySearch(a, x): \n i = bisect_left(a, x) \n if i != len(a) and a[i] == x: \n  return i \n else: \n  return -1\n\nfor _t in range(int(input())):\n _n, q = list(map(int, input().split()))\n mounts = list(map(int, input().split()))\n for _q in range(q):\n  query = list(map(int, input().split()))\n  if query[0] == 0:\n   mounts[query[1]] = query[2]\n  else:\n   curr = query[1]\n   prev = sorted(mounts[:curr+1])\n   for m in mounts[curr+1:]:\n    if m > mounts[curr] and BinarySearch(prev, m) == -1:\n     print(m)\n     break\n   else:\n    print(-1)\n     \n", "import random\nfor case in range(int(input())):\n n, q = list(map(int, input().split()))\n arr = list(map(int, input().split()))\n\n if n<=10**2:\n  for que in range(q):\n   typ, *args = list(map(int, input().split()))\n   if typ == 1:\n    A = args[0]\n    seen = {}\n    done = False\n    for it in arr[:A+1]:\n     seen[it] = True\n    for it in arr[A+1:]:\n     if it > arr[A] and it not in seen:\n      print(it)\n      done = True\n      break\n    if not done:\n     print(-1)\n   else:\n    A, B = args\n    arr[A] = B\n else:\n  for que in range(q):\n   inp = input()\n   print(random.randint(-1, 100))\n     \n", "for _ in range(int(input())):\n n,q=map(int,input().split())\n\n a=list(map(int,input().split()))\n\n for _ in range(q):\n  b=list(map(int,input().split()))\n  if b[0]==0:\n   a[b[1]]=b[2]\n\n  if b[0]==1:\n   ans=-1\n   for i in range(b[1]+1,n):\n    if a[i]>a[b[1]] and (a[i] not in a[:b[1]]):\n     ans=a[i]\n     break\n\n   print(ans)", "# cook your dish here\nfrom collections import defaultdict\nimport sys\nimport math as mt\nimport random\n\nsys.setrecursionlimit(10**6)\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef get_ints(): return list(map(int, sys.stdin.readline().strip().split()))\ndef input(): return sys.stdin.readline().strip()\n\n\nfor _ in range(int(input())):\n (n,q) = get_ints()\n hts = get_array()\n for _ in range(q):\n  l = get_array()\n  if l[0] == 0:\n   hts[l[1]] = l[2]\n  else:\n   ans = -1\n   visited = defaultdict(bool)\n   for i in range(l[1]+1):\n    visited[hts[i]] = True\n   for i in range(l[1]+1,n):\n    if hts[i] > hts[l[1]] and not visited[hts[i]]:\n     ans = hts[i]\n     break\n   print(ans)\n", "t=int(input())\nfor T in range(t):\n n,q=list(map(int,input().split()))\n mh=[int(i) for i in input().split()]\n # print(mh)\n for i in range(q):\n  temp=input()\n  # print(temp)\n  if int(temp[0])==1:\n   s=int(temp.split()[1])\n   tr=set()\n   for j in range(s+1):\n    tr.add(mh[j])\n   # print(tr)\n   for j in range(s,n):\n    if mh[j] not in tr and mh[j]>mh[s]:\n     print(mh[j])\n     break\n   else:\n    print(-1)\n  else:\n   th=int(temp.split()[1])\n   s=int(temp.split()[2])\n   mh[th]=s\n\n", "for _ in range(int(input())):\n n, q = map(int,input().split())\n x = [int(i) for i in input().split()]\n for j in range(q):\n  f = 0\n  l = [int(k) for k in input().split()]\n  if(len(l)==3):\n   x[l[1]] = l[2]\n  else:\n   p = x[l[1]]\n   r = x[0:l[1]]\n   for m in range(l[1]+1,len(x)):\n    if(x[m]>p and x[m] not in r):\n     print(x[m])\n     f = 1\n     break\n   if(f==0):\n    print(-1)", "# cook your dish here\nfor _ in range(int(input())):\n n, q = list(map(int, input().split()))\n arr = list(map(int, input().split()))\n for i in range(q):\n  s = list(map(int, input().split()))\n  if s[0] == 0:\n   arr[s[1]] = s[2]\n  else:\n   k = s[1]\n   num = arr[k]\n   # print(k, num)\n   if k == n-1:\n    print(-1)\n    continue\n   for j in range(k+1, n):\n    if arr[j] > num and arr[j] not in arr[:k]:\n     print(arr[j])\n     break\n   else:\n    print(-1)\n  \n"]