["import math\r\nfrom itertools import permutations as p\r\ndef diff(li1, li2): \r\n    li_dif = [i for i in li1 if i not in li2]\r\n    return li_dif \r\ndef segments(b):\r\n        \"\"\"A sequence of (x,y) numeric coordinates pairs \"\"\"\r\n        poly = [(i[0],i[1]) for i in b]\r\n        return zip(poly, poly[1:] + [poly[0]])\r\ndef perimeter(poly):\r\n    \"\"\"A sequence of (x,y) numeric coordinates pairs \"\"\"\r\n    return abs(sum(math.hypot(x0-x1,y0-y1) for ((x0, y0), (x1, y1)) in segments(poly)))\r\ndef av(b):\r\n    return sum([i[3] for i in b])\r\ndef val(b):\r\n    return sum([i[2] for i in b])\r\nfor _ in range(int(input())):\r\n    b = []\r\n    for _ in range(int(input())):\r\n        b.append(list(map(int,input().split())))\r\n    perm = []\r\n    for i in range(1,len(b)):\r\n        for e in p(b,i):\r\n            perm.append(e)\r\n    perm.sort(key=lambda x:val(x))\r\n    yes = []\r\n    for i in perm:\r\n        if av(i)>=perimeter(diff(b,i)):\r\n            good = val(i)\r\n            yes.append(i)\r\n            break\r\n    #yes.sort(key = lambda x: len(x))\r\n    print(\" \".join([str(b.index(i)+1) for i in yes[0]]))\r\n    x = round(av(yes[0])-perimeter(diff(b,yes[0])),2)\r\n    print(f'{x:.2f}')\r\n\r\n\r\n"]