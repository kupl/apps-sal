["n, h = map(int,input().split())\nunit = h*h/n\nfor i in range(1,n):\n    print((unit*i)**0.5, end=' ')", "from math import sqrt\n\nn, h = map(int, input().split(' '))\n\nfor i in range(1, n):\n    r = h*sqrt(i/n)\n    print(str(r), end=\" \")", "n, h = map(int, input().split())\ns = ''\nfor i in range(1, n):\n\ts += \"%.6f \" % (i * h * h / n) ** 0.5\nprint(s)", "n, h = list(map(float, input().split(' ')))\nprint(' '.join(['%.12f' % (((k + 1) / n) ** 0.5 * h) for k in range(int(n) - 1)]))\n", "from math import sqrt\nn, h = map(int, input().split())\ns = []\nfor i in range(1,n):\n    s.append(h*sqrt(i/n))\nprint(*s)", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport math\nN, H = map(int, input().split())\nret = []\nfor n in range(1, N):\n    ret.append(H * math.sqrt(n / N))\nfor i in range(len(ret)):\n    if i == 0:\n        print(\"{:.15f}\".format(ret[i]), end=\"\")\n    else:\n        print(\" {:.15f}\".format(ret[i]), end=\"\")\n        \n", "N, H = list(map(int, input().split()))\nprev = 0.0\nans = []\nfor i in range(N - 1):\n    now = pow((i + 1) / N, 0.5) * H\n    ans.append(\"{:.20f}\".format(now - prev))\n    now = prev\nprint(*ans)\n", "import math\n\nn, h = map(int, input().split())\n\np = 0\nh2n = h * h / n\nfor _ in range(n - 1):\n    x = math.sqrt(h2n + p * p) - p\n    p += x\n    print(p, end=\" \")\n", "n, h = list(map(int, input().split()))\nans = []\nfor i in range(1, n):\n   ans.append((i / n)**0.5 * h)\n\nprint(' '.join(map(str, ans)))\n", "from math import sqrt\nn,h=map(int,input().split())\nh = h*1.00\nl = []\nfor i in range(0,1500):\n\tl.append(sqrt(i))\narea = sqrt((h*h)/n)\nfor i in range(1,n):\n\tprint(l[i]*area,end=\" \")\n\n", "#!/usr/bin/env python3\nfrom sys import stdin, stdout\nfrom decimal import Decimal\n\ndef rint():\n    return list(map(int, stdin.readline().split()))\n#lines = stdin.readlines()\n\nn, h = rint()\n\nAs = Decimal(h) / Decimal(2*n)\nx = []\nfor i in range(1, n):\n    x.append(Decimal(i*As*2*h).sqrt())\n\nprint(*x)\n", "from math import hypot\n\nn, h = list(map(int, input().split()))\n\nsquare = (0.5 * h)\none = square / n\nhyp = hypot(0.5, h)\n\ndef get_square(d):\n\tup = (1 - d) * 0.5\n\treturn 2 * ((up * h * d) + (0.5 - up) * h * d / 2)\n\n\nrez = []\n_prev = 0\nfor i in range(n - 1):\n\tleft = _prev\n\tright = 1\n\tfor i in range(50):\n\t\tmid = (left + right) / 2\n\t\tif get_square(mid) - get_square(_prev) > one:\n\t\t\tright = mid\n\t\telse:\n\t\t\tleft = mid\n\n\t_prev = left\n\trez.append(h - left * h)\nprint(*reversed(rez))\n", "import sys\nfrom math import sqrt\n\ndef main():\n    n,h=list(map(int,sys.stdin.readline().split()))\n    \n    sn=sqrt(n)\n    result=[]\n    for i in range(n-1):\n        result.append(sqrt(i+1)*h/sn)\n    \n    sys.stdout.write(' '.join(map(str,result))+'\\n')\n    \nmain()\n\n", "from fractions import Fraction\n\n\ndef main():\n    n, H = map(int, input().split())\n\n    s = Fraction(H, 2 * n)\n\n    h2 = []\n    for m in range(1, n):\n        S = s * m\n        h2.append(S * 2 * H)\n\n    for x in h2:\n        print(\"{:.12f}\".format(x ** 0.5), end=' ')\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from math import sqrt\nn, h = map(int, input().split())\nfor i in range(1, n):\n    print(sqrt(i/n)*h, end=' ')\nprint()\n", "import sys\nfrom math import sqrt\n\ndef solve():\n    n, h = map(int, input().split())\n\n    ans = [0]*(n - 1)\n\n    for i in range(1, n):\n        ans[i - 1] = h * sqrt(i / n)\n\n    print(*ans)\n\ndef __starting_point():\n    solve()\n__starting_point()", "from math import sqrt\nn, h = [int(x) for x in input().split()]\narea = 1 * h / 2 / n\nx = sqrt(2*area/h)\nres = [x*h]\ncur_area = area\nfor i in range(2, n):\n    cur_area += area\n    x = sqrt(2*cur_area/h)\n    res.append(x*h)\nprint(res[0], end=\" \")\nfor i in range(1, len(res)):\n    print(\" \" + str(res[i]), end=\"\")\nprint()", "from math import sqrt\n[n,h] = list(map(int,input().split()))\nans = \"\"\nfor i in range(1,n):\n    ans = ans + str(sqrt(i/n)*h) + \" \"\nprint(ans)\n", "import sys\nimport math\n\nn,h = map(int, input().split())\nfor i in range(n-1):\n    print(\"%f\" % (h * math.sqrt((i+1) / n)), end = \" \" )", "import math\n\nn, h = map(int, input().split())\nbase = 1/n\nprev = base\nprint(h*math.sqrt(prev), end=' ')\n\nfor x in range(n - 2):\n    curr = prev + base\n    print(h*math.sqrt(curr), end=' ')\n    prev = curr", "import math\nn, h = [float(x) for x in input().split()]\nbase=1\nctgL= (base/2)/h\n\nexpectedArea = (1*h/2)/n\nexpectedArea=expectedArea/2\n\nnew_base = base/2\ncurr_height = h\n\ndef bin_search(new_base, min_height, max_height):\n    try_height = (min_height+max_height)/2\n    area = ((2*new_base - try_height*ctgL)/2)*try_height\n    if(abs(area-expectedArea)<1e-9):\n        return try_height\n    else:\n        if area>expectedArea:\n            return bin_search(new_base, min_height,try_height)\n        else:\n            return bin_search(new_base, try_height, max_height)\ndef calculate_new_base(old_base, height):\n    return old_base-height*ctgL\ncuts = []\nfor i in range(int(n)-1):\n    cut_height = bin_search(new_base, 0, curr_height)\n    # print(cut_height)\n    cuts.append(cut_height)\n    new_base = calculate_new_base(new_base,cut_height)\n    curr_height = curr_height - cut_height\n    # print(new_base, curr_height)\ncuts_sum=0\nto_print = []\nfor cut in cuts:\n    cuts_sum+=cut\n    to_print.append((h-cuts_sum))\nfor x in reversed(to_print):\n    print(x, end=\" \")\n", "n, h = map(int, input().split())\nfrom math import sqrt\nfor i in range(n - 1):\n    print(h * sqrt((i + 1) / n), end = ' ')\n", "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\n# input_text_path = __file__.replace('.py', '.txt')\n# fd = os.open(input_text_path, os.O_RDONLY)\n# os.dup2(fd, sys.stdin.fileno())\n\nn, h = map(int, input().split())\n\nX = []\nfor i in range(1, n):\n    c = math.sqrt(i / n) * h\n    X.append(c)\n\nprint(*X)"]