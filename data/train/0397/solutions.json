["class Solution:\n     def countDigitOne(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         ones, m = 0, 1\n         while m <= n:\n             ones += (n // m + 8) // 10 * m + (n // m % 10 == 1) * (n % m + 1)\n             m *= 10\n         return ones", "class Solution:\n     def countDigitOne(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n <= 0:\n             return 0\n         q, x, ans = n, 1, 0\n         while q > 0:\n             digit = q % 10\n             q = q // 10\n             ans += q * x\n             if digit == 1:\n                 ans += n % x + 1\n             elif digit > 1:\n                 ans += x\n             x *= 10\n         return ans", "class Solution:\n        def countDigitOne(self, n):\n             ones, wei = 0,  1\n             while wei <= n:\n                 m = int(n / wei) % 10  # \u6c42\u67d0\u4f4d\u6570\u5b57\n \n                 if m > 1:\n                     ones += (int(n / wei / 10) + 1) * wei\n                 elif m == 1:\n                     ones += (int(n / wei / 10)) * wei + (n % wei) + 1\n                 else:\n                     ones += (int(n / wei / 10)) * wei\n                 wei *= 10\n             return int(ones)", "class Solution:\n     def countDigitOne(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n <= 0:\n             return 0\n         one, m = 0, 1\n         while m <= n:\n             one += (n // m + 8) // 10 * m + (n // m % 10 == 1) * (n % m + 1)\n             m *= 10\n         return one", "class Solution:\n     def countDigitOne(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         if n <= 0:\n             return 0\n         counts, length, digits = 0, len(str(n)), [int(i) for i in str(n)]\n         counts = digits[0] * (length - 1) * (10 ** (length - 2)) + min(digits[0] - 1, 1) * (10 ** (length - 1)) + \\\n                  max(2 - digits[0], 0) * (n - 10 ** (length - 1) + 1) + Solution().countDigitOne(n - digits[0] * \\\n                  (10 ** (length - 1)))\n         return int(counts)", "class Solution:\n     def countDigitOne(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         # \u7279\u6b8a\u5224\u65ad\n         if n <= 0:\n             return 0\n         # \u5148\u5f97\u5230\u8f93\u5165\u6570\u5b57n\u7684\u4f4d\u6570\n         i = 0\n         while pow(10, i) <= n:\n             i += 1\n         if i == 1:\n             return 1\n         \n         # \u9012\u5f52\u5f97\u52301\uff5es\u4e4b\u95f4\u6240\u6709\u76841\u503c\n         s = n % pow(10, i - 1)\n         temp = self.countDigitOne(s)\n         \n         # \u518d\u5f97\u5230s+1\uff5en\u4e4b\u95f4\u6240\u6709\u76841\u503c\n         # \u5148\u5f97\u5230\u6700\u9ad8\u4f4d\u4e3a1\u7684\u6240\u67091\u503c\n         t = n // pow(10, i - 1)\n         if t > 1:\n             temp1 = pow(10, i - 1)\n         elif t == 1:\n             temp1 = s + 1\n         # \u518d\u5f97\u5230\u5176\u5b83\u4f4d\u4e3a1\u7684\u6240\u67091\u503c\n         temp2 = t * (i - 1) * pow(10, i - 2)\n         return temp + temp1 +temp2"]