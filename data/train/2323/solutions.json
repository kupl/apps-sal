["def main():\n    import sys\n    from array import array\n    input = sys.stdin.readline\n\n    class Bit:\n        def __init__(self, n):\n            self.size = n\n            self.size_bit_length = n.bit_length()\n            self.tree = array('h', [0] * (n+1))\n\n        def reset(self):\n            self.tree = array('h', [0] * (self.size+1))\n\n        def sum(self, i):\n            s = 0\n            while i > 0:\n                s += self.tree[i]\n                i -= i & -i\n            return s\n\n        def add(self, i, x):\n            while i <= self.size:\n                self.tree[i] += x\n                i += i & -i\n\n        def lower_bound(self, w):\n            if w <= 0:\n                return 0\n            x = 0\n            k = 1 << (self.size_bit_length - 1)\n            while k:\n                if x + k <= self.size and self.tree[x + k] < w:\n                    w -= self.tree[x + k]\n                    x += k\n                k >>= 1\n            return x + 1\n\n    N, M = list(map(int, input().split()))\n    dist = [0] + list(map(int, input().split()))\n    for i in range(N-1):\n        dist[i+1] += dist[i]\n    B = [0] * (M * N)\n    for i in range(N):\n        BB = list(map(int, input().split()))\n        for j in range(M):\n            B[j * N + i] = BB[j] * (N+1) + i+1\n\n    imos = []\n    for i in range(N+1):\n        imos.append([0] * (N+1 - i))\n    bit = Bit(N)\n    for m in range(M):\n        bit.reset()\n        for bi in sorted(B[m*N: (m+1) * N], reverse=True):\n            b, i = divmod(bi, N+1)\n            k = bit.sum(i)\n            l = bit.lower_bound(k)\n            r = bit.lower_bound(k+1)\n            imos[l+1][i - (l+1)] += b\n            if i != N:\n                imos[i+1][0] -= b\n            if r != N+1:\n                imos[l+1][r - (l+1)] -= b\n            if i != N and r != N+1:\n                imos[i+1][r - (i+1)] += b\n            bit.add(i, 1)\n\n    for i in range(1, N+1):\n        for j in range(i+1, N+1):\n            imos[i][j - i] += imos[i][j-1-i]\n    for i in range(2, N + 1):\n        for j in range(i, N + 1):\n            imos[i][j-i] += imos[i - 1][j - (i-1)]\n    ans = 0\n    for i in range(1, N + 1):\n        for j in range(i, N + 1):\n            ans = max(ans, imos[i][j-i] - (dist[j - 1] - dist[i - 1]))\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nreadline = sys.stdin.readline\n\nN, M = map(int, readline().split())\nA = [0] + list(map(int, readline().split()))\nfor i in range(1, N):\n    A[i] += A[i-1]\n\nINF = 10**9+7\nB = [list(map(int, readline().split())) for _ in range(N)] + [[INF]*M] + [[0]*M]\nright = [[0]*M for _ in range(N)]\n\nfor m in range(M):\n    L = list(range(N))\n    L.sort(key = lambda x: B[x][m])\n    RR = list(range(1, N+3))\n    LL = list(range(-1, N+1))\n    for vn in L:\n        vn += 1\n        right[vn-1][m] = RR[vn]-1\n        RR[LL[vn]] = RR[vn]\n        LL[RR[vn]] = LL[vn]\n\ndiff = [0]*(N+1)\nfor m in range(M):\n    diff[0] += B[0][m]\n    pre = B[0][m]\n    for i in range(1, N):\n        if B[i][m] > pre:\n            diff[i] += B[i][m]-pre\n            pre = B[i][m]\n\noffset = 0\nans = 0\nfor l in range(N):\n    offset += diff[l]\n    for m in range(M):\n        if B[l][m] < B[l-1][m]:\n            oldr = right[l-1][m]\n            diff[oldr] -= B[oldr][m] - B[l-1][m]\n            offset += B[l][m] - B[l-1][m]\n            cnt = l\n            while cnt < N and right[cnt][m] <= oldr:\n                rcm = right[cnt][m]\n                diff[rcm] += B[rcm][m] - B[cnt][m]\n                cnt = rcm\n    ans = max(ans, offset)\n    roff = offset\n    for r in range(l+1, N):\n        roff += diff[r]\n        ans = max(ans, roff - (A[r]-A[l]))\n        #print(l, r, roff - (A[r] - A[l]))\n\nprint(ans)"]