["class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        ret, mod, p = 0, 10 ** 9 + 7, 1\n        for i in range(len(A)): \n            ret += (A[i] - A[len(A) - i - 1]) * p % mod\n            p = (p << 1) % mod\n        return ret % mod", "mod_ = 10**9 + 7\n\nclass Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        n = len(A)\n        p_2 = [1]\n        for i in range(1,n+2):\n            p_2.append((p_2[-1]*2)%mod_)\n        l = [0]\n        for i in range(1,n):\n            l.append( (2*l[-1] + (A[i]-A[i-1]) * (p_2[i]-1) ) % mod_ )\n        sol = 0\n        for elem in l:\n            sol = (sol + elem) % mod_\n        return sol", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        '''\n        1 2 3\n            x\n        '''\n        ret = 0\n        for i, n in enumerate(sorted(A)):\n            ret += n * pow(2, i)\n            ret -= n * pow(2, len(A) - i - 1)\n            ret %= 10**9 + 7\n        \n        return ret", "from bisect import bisect_left, bisect_right\n\nclass Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        n = len(A)\n        ret = 0\n        \n        # F[i] number of subsequences accept A[i] as minimun\n        # G[i] number of subsequences accept A[i] as maximum\n        # result = (-F[i] + G[i]) * A[i]        \n        \n        A.sort()   \n        ret = 0\n        f = {}\n        \n        for i, x in enumerate(A):\n            if x not in f:\n                f[x] = [i, i]\n            else:\n                f[x][1] = i\n\n        ret = 0\n        \n        for x in f:\n            l, r = f[x]\n            sl = l\n            sr = n-r-1\n            se = r-l+1\n            ret += (2**sl-1) * (2**se-1) * x\n            ret -= (2**sr-1) * (2**se-1) * x\n        \n        return ret % (10 ** 9 + 7)\n        \n\n            \n            \n    \n            \n            \n            \n            \n            \n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        MOD = 10**9 + 7\n        N = len(A)\n        A.sort()\n\n        pow2 = [1]\n        for i in range(1, N):\n            pow2.append(pow2[-1] * 2 % MOD)\n\n        ans = 0\n        for i, x in enumerate(A):\n            ans = (ans + (pow2[i] - pow2[N-1-i]) * x) % MOD\n        return ans\n           \n", "class Solution:\n    \n    BASE = 10 ** 9 + 7\n    \n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        total_cnt = 0\n        total_prod = 0\n        ans = 0\n        for num in A:\n            ans = (ans + total_cnt * num - total_prod) % self.BASE\n            total_cnt = (2 * total_cnt + 1) % self.BASE\n            total_prod = (2 * total_prod + num) % self.BASE\n        return ans", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        \n        # # N^2log(N) time over limit\n        # aa = sorted(A)\n        # n = len(A)\n        # res = 0\n        # # print(aa)\n        # for i in range(n):\n        #     for j in range(i+1,n):\n        #         res = (res+2**(j-i-1)*(aa[j]-aa[i]))%(10**9+7)\n        #         # print(i,j,aa[i],aa[j],res)\n        # return res\n        \n        # above simplified (simple math), NlogN time\n        aa = sorted(A)\n        n = len(A)\n        res = 0\n        # print(aa)\n        md = 10**9 + 7\n        p2 = [1]*n\n        for i in range(1,n):\n            p2[i] = (p2[i-1]*2) % md\n        for i in range(n):\n            res = (res+aa[i]*(p2[i]-p2[n-i-1])) % md\n        return res\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        N = len(A)\n        if N==1: return 0\n        MOD = 10**9 + 7\n        A.sort()\n        pow2 = [1]\n        widths = 0\n        for i in range(1, N):\n            pow2.append(pow2[-1] * 2 % MOD)\n            \n        for i in range(N):\n            widths = (widths + (pow2[i] - pow2[N-1-i]) * A[i]) % MOD\n            \n        return widths", "from collections import deque\n\nclass Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        n = len(A)\n        \n        MOD = 10 ** 9 + 7\n        \n        pows = [1] * n\n        for i in range(1, n):\n            pows[i] = (pows[i-1] * 2) % MOD\n        \n        A.sort()\n        ans = 0\n        \n        for i, v in enumerate(A):\n            ans += pows[i] * v - pows[n-1-i] * v\n            ans %= MOD\n            \n        return ans  % MOD\n        \n        \n        \n        \n            \n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        result = 0\n        for i in range(len(A)):\n            result *= 2\n            result -= A[i]\n            result += A[~i]\n        return result % (10 ** 9 + 7)", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        if len(A)==1:   return 0\n        if len(A)==0:   return 0\n        ans, prev, n, mod = A[1]-A[0], A[1]-A[0], len(A), 1e9+7\n        twoPow, temp=[1], 2\n        for i in range(1,n):\n            twoPow.append(temp+twoPow[-1])\n            temp = (temp*2)%mod   \n        for i in range(2, len(A)):\n            diff = A[i]-A[i-1]\n            prev = ((2*(prev + (diff*twoPow[i-2])%mod))%mod + diff)%mod\n            ans = (ans + prev)%mod\n        return int(ans)", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        res = 0\n        n = len(A)\n        M = 10**9 + 7\n        c = 1\n        A.sort()\n        \n        for i in range(n):\n            res = (res + A[i] *c - A[n - i - 1] * c )%M\n            #print(res)\n            c = (c<<1)%M\n        return res\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        # Mathematical\n        # Sum_{j > i} (2^(j - i - 1)) x (A_j - A_i) = Sum_{i = 0}^{n - 1} (2^i - 2^(N - i - 1)) x A_i\n        # Time  complexity: O(NlogN), where N is the length of A.\n        # Space complexity: O(N)\n        MOD = 10**9 + 7\n        N = len(A)\n        A.sort()\n\n        pow2 = [1]\n        for i in range(1, N):\n            pow2.append(pow2[-1] * 2 % MOD)\n\n        ans = 0\n        for i, x in enumerate(A):\n            ans = (ans + (pow2[i] - pow2[N - i - 1]) * x) % MOD \n\n        return ans\n\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        size = len(A)\n        mod = 10 ** 9 + 7\n        pow_mod = [1] * size\n        for i in range(1, size): \n            pow_mod[i] = (pow_mod[i-1] * 2) % mod\n        \n        A.sort()\n        ans = 0\n        for i in range(size): \n            ans += (A[i] * ((pow_mod[i] - pow_mod[size-1-i]) % mod)) % mod\n            ans %= mod\n        return ans", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        res = 0\n        n = len(A)\n        for i in range(n):\n            res += A[i] * 1<<i % 1000000007\n            res -= A[i] * 1<<(n-i-1)\n        return res % 1000000007", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        ret = 0\n        for i in range(len(A)):\n            # how many subseq contain me as the min/max?\n            ret -= A[i]<<(len(A)-i-1)\n            ret += A[i]<<i\n        return ret%(10**9+7)", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        MOD = 10 ** 9 + 7\n        A.sort()\n        result = 0\n        prev = 0\n        for i in range(1, len(A)):\n            d = A[i] - A[i - 1]\n            prev = (2 * prev + d * (pow(2, i, MOD) - 1)) % MOD\n            result = (result + prev) % MOD\n        return result", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        res = 0\n        A.sort()\n        for i in range(0, len(A)):\n            res += A[i] * ((1<<i) - (1<<(len(A)-i-1)))\n        return res % (10**9+7)\n            \n", "class Solution:\n    def sumSubseqWidths(self, A):\n        return sum(((1 << i) - (1 << len(A) - i - 1)) * a for i, a in enumerate(sorted(A))) % (10**9 + 7)", "class Solution:\n    # def sumSubseqWidths(self, A: List[int]) -> int:\n    #     A = sorted(A)\n    #     total, cur, cnt = 0, 0, 0\n    #     MOD = 10**9 + 7\n    #     for i in range(1,len(A)):\n    #         cnt *= 2\n    #         cnt += 1\n    #         cur *= 2\n    #         cur += (A[i]-A[i-1])*cnt\n    #         cur %= MOD\n    #         total += cur\n    #         total %= MOD\n    #         # print(cur,cnt)\n    #     return total\n\n    \n    def sumSubseqWidths(self, A):\n        return sum(((1 << i) - (1 << len(A) - i - 1)) * a for i, a in enumerate(sorted(A))) % (10**9 + 7)", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        MOD = 10 ** 9 + 7\n        A.sort()\n        result = 0\n        prev = 0\n        powmod = 1\n        for i in range(1, len(A)):\n            d = A[i] - A[i - 1]\n            powmod = (powmod * 2) % MOD\n            prev = (2 * prev + d * (powmod - 1)) % MOD\n            result = (result + prev) % MOD\n        return result", "class Solution:\n     def sumSubseqWidths(self, A):\n        return sum(((1 << i) - (1 << len(A) - i - 1)) * a for i, a in enumerate(sorted(A))) % (10**9 + 7)\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        B = sorted(A)\n        res = 0\n        mod = 10**9 + 7\n        for i in range(len(B)):\n            res += B[i] * ((1 << i) - (1 << (len(B) - i - 1)))\n        return res % mod", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        if not A: return 0\n        ans = 0\n        A.sort()\n        for i, n in enumerate(A):\n            ans += ((1<<i)-(1<<(len(A)-i-1)))*n\n            \n        return ans%(10**9+7)\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        return sum((1 << i) * num - (1 << len(A) - i - 1) * num for i, num in enumerate(sorted(A))) % (10**9 + 7)\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        mod = 10 ** 9 + 7\n        A.sort()\n        n = len(A)\n        return sum(a * ((1 << i) - (1 << n - i - 1)) for i, a in enumerate(A)) % mod\n    \n        # for i, a in enumerate(A):\n        #     ans += a * ((1 << i) - (1 << n - i - 1)) % mod\n        # return ans % mod\n", "class Solution:\n\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        #to i, there are 2^(i)  subsequence with max A[i]\n        #there are 2^(n-i-1) subseq with min A[i]\n    \n        ans = 0\n        '''\n        for i in range(len(A)):\n            for j in range(i,len(A)):\n                if i == j:continue\n                if A[i] == A[j]: continue\n                ans +=(1<< ( j-i-1))*(A[j]-A[i])\n        '''\n        n = len(A)\n        for i, k in enumerate(A):\n            #print(i,k,ans)\n            \n            \n            ans += ((1 << (i)))* k\n            \n            ans -= ((1 << (n-i-1)))*k\n            #ans += k*(pow(2,i)- pow(2, n-i-1))\n        return ans%(10**9+7)\n        \n        \n        \n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        LIM = 10 ** 9 + 7\n        res = 0\n        powTable = [1]\n        for _ in range(len(A)):\n            powTable.append((2 * powTable[-1]) % LIM)\n        for i, val in enumerate(A):\n            res = (res + val * powTable[i] - val * powTable[len(A) - i - 1]) % LIM\n        return res", "class Solution:\n    BASE = 10 ** 9 + 7\n    \n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        total_cnt = 0\n        total_prod = 0\n        ans = 0\n        for num in A:\n            ans = (ans + total_cnt * num - total_prod) % self.BASE\n            total_cnt = (2 * total_cnt + 1) % self.BASE\n            total_prod = (2 * total_prod + num) % self.BASE\n        return ans\n", "class Solution:\n    def sumSubseqWidths(self, A):\n        MOD = 10**9 + 7\n        N = len(A)\n        A.sort()\n\n        pow2 = [1]\n        for i in range(1, N):\n            pow2.append(pow2[-1] * 2 % MOD)\n\n        ans = 0\n        for i, x in enumerate(A):\n            ans = (ans + (pow2[i] - pow2[N-1-i]) * x) % MOD\n        return ans", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        total = 0\n        MOD = 10 ** 9 + 7\n        powerSum = 2**0\n        counter = 2\n        currSum = A[0]\n        for i in range(1, len(A)):\n            total += (powerSum * A[i]) - currSum\n            currSum *= 2\n            currSum += A[i]\n            powerSum += counter\n            counter *= 2\n           \n       \n        return total % MOD", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n            A.sort()\n            S = 0\n            B = [1]*len(A)\n            for i in range(1,len(B)):\n                B[i] = 2*B[i-1]\n            for i in range(len(A)):\n                S += (B[i]-B[-1-i])*A[i]\n            return S%((10**9)+7)\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        total = 0\n        \n        powerSum = 2**0\n        counter = 2\n        currSum = A[0]\n        for i in range(1, len(A)):\n            total += (powerSum * A[i]) - currSum\n            currSum *= 2\n            currSum += A[i]\n            powerSum += counter\n            counter *= 2\n       \n        return total % (10 ** 9 + 7)  ", "class Solution:\n    def sumSubseqWidths(self, a: List[int]) -> int:\n        a.sort()\n        print(a)\n        count=0\n        n=1\n        c=a[0]\n        for m,i in enumerate(a[1:]):\n            n*=2\n            count+=(n-1)*i-c\n            c=c*2+i\n        return count%(pow(10,9)+7)", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        l=len(A)\n        p=[1]\n        ans=0\n        for i in range(1,l):\n            p.append(p[-1]*2)\n        for i,j in enumerate(A):\n            ans+=(p[i]-p[l-i-1])*j\n        return ans%( 10**9 + 7)\n        \n        \n        \n        \n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        \n        n = len(A)\n        \n        total = 0\n        \n        for i in range(n):\n            a = A[i]\n\n            left = i # how many elements on the left\n            right = n - i - 1 # how many elements on the right\n            # number of subsequences with A[i] as max is (2 ** left)\n            total += ((1 << left) - 1) * a  # minus 1 so subsequence with only A[i] is not counted\n            total -= ((1 << right) - 1) * a\n            \n        return total % (10 ** 9 + 7)", "class Solution:\n    def sumSubseqWidths(self, nums):\n        res = 0\n        for i, num in enumerate(sorted(nums)):\n            res += ((1 << i) - (1 << len(nums) - i - 1)) * num\n\n        return res % 1000000007", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A = sorted(A)\n        r = 0\n        m = 10 ** 9 + 7\n        for i in range(len(A)-1):\n            # print(r)\n            # print(A[i+1] - A[i], len(A)-i)\n            r += (A[i+1] - A[i]) * ((1 << (len(A))) - (1 << (i+1)) - (1 << (len(A)-i-1)) + 1)\n        r %= m\n        return r", "class Solution(object):\n    def sumSubseqWidths(self, A):\n        MOD = 10**9 + 7\n        N = len(A)\n        A.sort()\n\n        pow2 = [1]\n        for i in range(1, N+1):\n            pow2.append(pow2[-1] * 2 % MOD)\n\n        ans = 0\n        for i, x in enumerate(A):\n            ans = (ans + (pow2[i] - pow2[N-1-i]) * x) % MOD\n        return ans", "from bisect import bisect_left, bisect_right\n\nclass Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        n = len(A)\n        ret = 0\n        \n        # F[i] number of subsequences accept A[i] as minimun\n        # G[i] number of subsequences accept A[i] as maximum\n        # result = (-F[i] + G[i]) * A[i]        \n        \n        \n        A.sort()   \n        MOD = 10 ** 9 + 7\n        \n        @lru_cache\n        def bimod(n):\n            if n == 0:\n                return 1\n            di = bimod(n // 2)\n            if n % 2 == 0:\n                return di * di % MOD\n            return di * di * 2 % MOD\n        \n        @lru_cache\n        def nonempty(n):\n            return bimod(n) - 1\n        \n        i = 0\n        while i < n:\n            j = i\n            while j < n and A[j] == A[i]:\n                j+=1\n            se = j - i\n            sl = i\n            sr = n-j\n            \n            # ret = (ret + (2**sl-1) * (2**se-1) * A[i] % MOD) % MOD\n            # ret = (ret - (2**sr-1) * (2**se-1) * A[i] % MOD) % MOD\n            ret = (ret + A[i] * nonempty(se) * (nonempty(sl) - nonempty(sr)) % MOD) % MOD\n            i = j\n        \n        return ret % MOD\n        \n\n            \n            \n    \n            \n            \n            \n            \n            \n", "from bisect import bisect_left, bisect_right\n\nclass Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        n = len(A)\n        ret = 0\n        \n        # F[i] number of subsequences accept A[i] as minimun\n        # G[i] number of subsequences accept A[i] as maximum\n        # result = (-F[i] + G[i]) * A[i]        \n        \n        \n        A.sort()   \n        MOD = 10 ** 9 + 7\n        \n        @lru_cache\n        def bimod(n):\n            if n == 0:\n                return 1\n            di = bimod(n // 2)\n            if n % 2 == 0:\n                return di * di % MOD\n            return di * di * 2 % MOD\n        \n        @lru_cache\n        def nonempty(n):\n            return bimod(n) - 1\n        \n        i = 0\n        while i < n:\n            j = i\n            while j < n and A[j] == A[i]:\n                j+=1\n            se = j - i\n            sl = i\n            sr = n-j\n\n            ret = (ret + A[i] * nonempty(se) * (nonempty(sl) - nonempty(sr)) % MOD) % MOD\n            i = j\n        \n        return ret\n        \n\n            \n            \n    \n            \n            \n            \n            \n            \n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A = sorted(A)\n        total, cur, cnt = 0, 0, 0\n        MOD = 10**9 + 7\n        for i in range(1,len(A)):\n            cnt *= 2\n            cnt += 1\n            cur *= 2\n            cur += (A[i]-A[i-1])*cnt\n            cur %= MOD\n            total += cur\n            total %= MOD\n            # print(cur,cnt)\n        return total\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        \n        A = sorted(A)\n        res = 0\n        MOD = 10**9+7\n        c = 1\n        for i in range(len(A)):\n            res = (res + A[i]*c%MOD)%MOD\n            c <<= 1\n            c %= MOD\n        c = 1\n        for i in range(len(A)-1, -1, -1):\n            res = (res - A[i]*c%MOD)%MOD\n            c <<= 1\n            c %= MOD\n        return (res+MOD)%MOD\n            \n            \n        \n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        return sum(((1 << i) - (1 << (len(A)-i-1))) * a for i, a in enumerate(sorted(A))) % (10**9 + 7)", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        POW2 = [1 << i for i in range(len(A))]\n        return sum((POW2[i] - POW2[len(A) - 1 - i]) * n for i, n in enumerate(sorted(A))) % (10 ** 9 + 7)\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        MOD = 10 ** 9 + 7\n        POW2 = [(1 << i) % MOD for i in range(len(A))]\n        return sum((POW2[i] - POW2[len(A) - 1 - i]) * n for i, n in enumerate(sorted(A))) % (10 ** 9 + 7)\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        return sum(((1 << i) - (1 << (len(A) - 1 - i))) * n for i, n in enumerate(sorted(A))) % (10 ** 9 + 7)\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        mod = 10**9+7\n        n = len(A)\n        A.sort()\n        B = [A[i]-A[n-i-1] for i in range(n)]\n        ans = 0\n        for i, v in enumerate(B):\n            ans = (ans + (v << i)) % mod\n        return ans      ", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        MOD = 10**9 + 7\n        N = len(A)\n        A.sort()\n        \n        pow2 = [1]\n        for i in range(1, N):\n            pow2.append(pow2[-1] * 2 % MOD)\n        \n        ans = 0\n        for i, x in enumerate(A):\n            ans = (ans + (pow2[i] - pow2[N - 1 -i]) * x) % MOD\n        \n        return ans", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        total = 0\n        MOD = 10 ** 9 + 7\n        powerSum = 2**0\n        counter = 2\n   \n        currSum = A[0]\n        for i in range(1, len(A)):\n            total += (powerSum * A[i]) - currSum\n            currSum *= 2\n            currSum += A[i]\n            powerSum += counter\n            counter *= 2\n           \n        return total % MOD", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        total = 0\n        MOD = 10 ** 9 + 7\n        powerSum = 2**0\n        counter = 2\n        currSum = A[0]\n        for i in range(1, len(A)):\n            total += (powerSum * A[i]) - currSum\n            currSum *= 2\n            currSum += A[i]\n            powerSum += counter\n            counter *= 2\n            total %= MOD\n       \n        return total", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        mod = 10 ** 9 + 7\n        f, g = 0, 0\n        ans = 0\n        for i in range(1, len(A)):\n            g = (2 * g + A[i - 1]) % mod\n            f = (A[i] * ((1 << i) - 1) - g) % mod\n            ans = (ans + f) % mod\n        return ans", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        total = 0\n        MOD = 10 ** 9 + 7\n        powerSum = 2**0\n        counter = 2\n   \n        currSum = A[0]\n        for i in range(1, len(A)):\n            total += (powerSum * A[i]) - currSum\n            currSum *= 2\n            currSum += A[i]\n            powerSum += counter\n            counter *= 2\n            total %= MOD\n            powerSum %= MOD\n            currSum %= MOD\n           \n        return total % MOD", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        res = 0\n        mod = 10**9+7\n        N = len(A)\n        for i in range(len(A)):\n            res += ((1<<i)-(1<<N-i-1))*A[i]%mod\n\n        return res%mod", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        N = len(A)\n        A = sorted(A)\n        MODS = 10 ** 9 + 7\n        pow2, res = [1], 0\n        for ii in range(1, N):\n            pow2.append(2 * pow2[-1] % MODS)\n        for ii, jj in enumerate(A):\n            res = (res + (pow2[ii] - pow2[N - ii - 1]) * jj) % MODS\n        return res\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        res = 0\n        A.sort()\n        for i in range(0, len(A)):\n            res += A[i] * ((1<<i) - (1<<(len(A)-i-1))) % (10**9+7)\n        return res % (10**9+7)\n            \n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        mod = 10**9+7\n        n = len(A)\n        A.sort()\n        ans = 0\n        for i, v in enumerate(A):\n            ans = (ans + (v << i) - (v << (n-1-i))) % mod\n        return ans        ", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        mod = 10**9 + 7\n        A.sort()\n        n = len(A)\n        ans = 0\n        def exp(n):\n            res = 1\n            x = 2\n            while n:\n                if n&1:\n                    res = (res*x)%mod\n                n = n>>1\n                x = (x*x)%mod\n            \n            return res\n    \n        for i in range(n):\n            ans = (ans + exp(i)*A[i] - exp(n - i - 1)*A[i] + mod) % mod\n        \n        return ans", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        if not A: return 0\n        n=len(A)\n        A.sort()\n        ans = 0\n        for i in range(n):\n            ans += A[i]*(1<<i)\n            ans -= A[i]*(1<<(n-i-1))\n            ans %= (10**9+7)\n        return ans\n            \n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        MOD = 10**9 + 7\n        N = len(A)\n        A.sort()\n\n        ans = 0\n        for i, x in enumerate(A):\n            ans = (ans + ((1<<i) - (1<<(N-1-i))) * x) % MOD\n        return ans        ", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A = sorted(A)\n        r = 0\n        m = 10 ** 9 + 7\n        for i in range(len(A)-1):\n            # print(r)\n            # print(A[i+1] - A[i], len(A)-i)\n            r += (A[i+1] - A[i]) * ((1 << (len(A))) - (1 << (i+1)) - (1 << (len(A)-i-1)) + 1)\n            r %= m\n        return r", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        total = 0\n        MOD = 10 ** 9 + 7\n        powerSum = 2**0\n        counter = 2\n   \n        currSum = A[0]\n        for i in range(1, len(A)):\n            total += ((powerSum * A[i]) - currSum) % MOD\n            currSum *= 2\n            currSum += A[i]\n            powerSum += counter\n            counter *= 2\n            powerSum %= MOD\n            currSum %= MOD\n           \n        return total % MOD", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        mod = 10**9 + 7\n        n = len(A)\n        if n == 1:\n            return 0\n        \n        pow = [1]\n        for i in range(1, n):\n            pow.append(pow[-1]*2%mod)\n        \n        A = sorted(A)\n        s = 0\n        for i, elem in enumerate(A):\n            n_max, n_min = i, n-i-1\n            N1 = pow[i]\n            N2 = pow[n-i-1]\n            s += ((elem*(N1-N2)) %  (10**9 + 7) )\n            s = s % (10**9 + 7)\n        return s", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        '''\n        1 2 3\n            x\n        '''\n        ret = 0\n        mod = 10**9 + 7\n        for i, n in enumerate(sorted(A)):\n            ret = (ret + n * (1 << i)) % mod\n            ret  = (ret - n * (1 << (len(A) - i - 1))) % mod\n        \n        return ret", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        res = 0\n        A.sort()\n        for i in range(0, len(A)):\n            res += A[i] * ((1<<i) - 2**(len(A)-i-1))\n        return res % (10**9+7)\n            \n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        \n        MOD = 10**9+7\n        \n        A = sorted(A)\n        if len(A) == 1:\n            return 0\n        \n        lastaddon = 0\n        lastv = 0\n        for i in range(1, len(A)):\n            lastaddon = 2*lastaddon + (2**i-1)*(A[i]-A[i-1])\n            lastv += lastaddon\n        \n        return lastv%MOD", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        n = len(A)\n        widthsum = 0\n        mod = 10**9 + 7\n        \n        A.sort()\n        \n        p = s = 0\n        pre, suf = [], []\n        for i in range(n):\n            p += A[i]\n            s += A[-i-1]\n            pre.append(p)\n            suf.append(s)\n            \n        for l in range(n):\n            widthsum += 2**(l)*(suf[l]-pre[l])\n            widthsum %= mod\n            \n        return widthsum\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        N = len(A)\n        return sum(num * (2 ** i - 2 ** (N - i - 1)) for i, num in enumerate(A)) % (10 ** 9 + 7)", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        \n        res = 0\n        \n        #the order does not matter with subsequeces so first sort the array\n        A.sort()\n        \n        for i in range(len(A)):\n            #then at position i, we know that there are i smaller numbers and 2^i different subsequences where i will be the maximum, so we add 2^i times A[i]\n            res += (2**i) * A[i]\n            #Also, A[i] will be less than len(A) - i - 1 numbers or (2^len(A)-1-i) different combinations, so subtract that\n            res -= (2**(len(A) - 1 - i)) * A[i]\n            \n        \n        return res % ((10**9) + 7)", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        res = 0\n        A.sort()\n        for i in range(0, len(A)):\n            res += A[i] * (2**i - 2**(len(A)-i-1))\n        return res % (10**9+7)\n            \n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        #1.Sort the list. Then for each element, it's the maximum of a subsequence if and only if it's on the rightmost side; on the other hand, if it's the minimum then it's on the leftmost side.  \n        #2.For any element A[i], suppose there are left elements on its left side and right elements on its right side. Then in 2^(left) subsequences this element appeared as the maximum element and in 2^(right) subsequences it appeares as the minimum element. So the contribution of this element to the final result would be: (2^(left)-2^(right))*A[i] = [2^i-2^(n-i-1)]*A[i]\n        Mod = (1e9)+7\n        n = len(A)\n        #twoPower = [1]*n\n        #for i in range(1, n):\n         #   twoPower[i] = (twoPower[i-1]*2)% Mod\n        \n        twoPower = [1]\n        while len(twoPower) < n:\n            twoPower.append((twoPower[len(twoPower)-1]*2)% Mod)\n            \n        \n        A.sort()\n        ans = 0\n        for i, a in enumerate(A):\n            left = i\n            right = n-i-1\n            ans = (ans + (twoPower[left]-twoPower[right])*a) % Mod\n            \n        return int((ans+ Mod) % Mod)\n        \n        \n", "class Solution:\n    def sumSubseqWidths(self, A: List[int], recursed=False) -> int:\n        return sum(\n            x * (2 ** i - 2 ** (len(A) - i - 1)) for i, x in enumerate(sorted(A))\n        ) % (int(1e9) + 7)\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A = sorted(A)\n        length = len(A)\n        _sum = 0\n        for i in range(length):\n            _sum += A[i] * 2**i\n        \n        for i in range(length):\n            _sum -= A[i] * 2**(length-i-1)\n            \n        return _sum % (10**9 + 7)", "class Solution:\n    def sumSubseqWidths(self, A: List[int], recursed=False) -> int:\n        A.sort()\n        return sum(\n            x * (2 ** i - 2 ** (len(A) - i - 1)) for i, x in enumerate((A))\n        ) % (int(1e9) + 7)\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A = sorted(A)\n        length = len(A)\n        _sum = 0\n        for i in range(length):\n            _sum += A[i] * 2**i - A[i] * 2**(length-i-1)\n        \n        \n        return _sum % (10**9 + 7)", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        B = sorted(A)\n        res = 0\n        mod = pow(10, 9) + 7\n        for i in range(len(B)):\n            res += B[i] * (pow(2, i) - pow(2, len(B) - i - 1))\n        return res % mod", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        \n        n = len(A)\n        \n        total = 0\n        \n        for i, a in enumerate(A):\n            left = i # how many elements on the left\n            right = n - i - 1 # how many elements on the right\n            # number of subsequences with A[i] as max is (2 ** left)\n            total += (2 ** left - 1) * a  # minus 1 so subsequence with only A[i] is not counted\n            total -= (2 ** right - 1) * a\n            \n        return total % (10 ** 9 + 7)", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        res = 0\n        mod = 10**9+7\n        N = len(A)\n        for i in range(len(A)):\n            res = (res+A[i]*2**i-A[i]*(2**(N-i-1)))%mod\n\n        return res", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        c=0\n        n=len(A)\n        for i in range(n):\n            c=(((2**i)-(2**(n-i-1)))*A[i])+c\n            c=c%(10**9+7)\n        return c\n", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        res = 0\n        n = len(A)\n        for i in range(n):\n            res += A[i] * 2**i % 1000000007\n            res -= A[i] * 2**(n-i-1)\n        return res % 1000000007", "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        total = 0\n        const = 10**9+7\n        for i in range(len(A)):\n            total += 2**(i)*A[i]-2**(len(A)-i-1)*A[i]\n            total = total % const\n        return total\n"]