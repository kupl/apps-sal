["def main():\n T = int(input())\n for t in range(T):\n  N,K = map(int, input().split())\n  W = list(map(int, input().split()))\n  W.sort()\n  if 2*K > N:\n   K = N - K\n  kid = sum(W[:K])\n  dad = sum(W[K:])\n\n  diff = dad - kid\n\n  print(diff)\n\n\ndef __starting_point():\n main()\n__starting_point()", "# cook your dish here\nt=int(input())\nfor i in range(t):\n n,k=list(map(int,input().split()))\n s=list(map(int,input().split()))\n\n s.sort()\n su=sum(s)\n s1=sum(s[:k])\n s2=sum(s[n-k:])\n\n print(max(abs(s1-(su-s1)),abs(s2-(su-s2))))\n\n \n", "# cook your dish here\ntry:\n for _ in range(int(input())):\n  N, K = map(int, input().split())\n  memory = list(map(int, input().split()))\n  memory.sort()\n  a = memory[:K]\n  b = memory[K:]\n  memory.reverse()\n  c = memory[:K]\n  d = memory[K:]\n  a = sum(a)\n  b = sum(b)\n  c = sum(c)\n  d = sum(d)\n  print(max(abs(a - b), abs(c - d)))\nexcept:\n pass", "# cook your dish here\ntry:\n for _ in range(int(input())):\n  N, K = map(int, input().split())\n  memory = list(map(int, input().split()))\n  memory.sort()\n  a = memory[:K]\n  b = memory[K:]\n  memory.reverse()\n  c = memory[:K]\n  d = memory[K:]\n  a = sum(a)\n  b = sum(b)\n  c = sum(c)\n  d = sum(d)\n  print(max(abs(a - b), abs(c - d)))\nexcept:\n pass", "# cook your dish here\nt = int(input())\nfor _ in range(t):\n n,k = map(int,input().split())\n carryBag = list(map(int,input().split()))\n carryBag.sort()\n w1 = min(k,n-k)\n son = sum(carryBag[:w1])\n father = sum(carryBag[w1:])\n print(father-son)", "# cook your dish here\nfor i in range(int(input())):\n a,b=list(map(int,input().split()))\n ls=list(map(int,input().split()))\n ls.sort()\n l1=sum(ls[b:])-sum(ls[:b])\n l2=sum(ls[a-b:])-sum(ls[:a-b])\n print(max(l1,l2))\n \n", "t=int(input())\nwhile(t>0):\n t-=1\n n,k=list(map(int,input().split()))\n arr=list(map(int,input().split()))\n curr=sorted(arr)\n div1 = sum(curr[k:])-sum(curr[:k])\n div2 = sum(curr[n-k:])-sum(curr[:n-k])\n print(max(div1,div2))\n\n", "import heapq\ndef kSmallest(lst, k,n):\n res=lst[:k]\n heapq._heapify_max(res)\n for i in range(k,n):\n  if lst[i]<res[0]:\n   heapq._heapreplace_max(res,lst[i])\n return res \ndef solve():\n t = int(input())\n for _ in range(t):\n  n,k = [int(x) for x in input().split()]\n  k = min(k,n-k)\n  a = [int(x) for x in input().split()]\n  b = kSmallest(a,k,n)\n  print(abs(sum(a)-2*sum(b))) \n \n# import sys\n# def fast():\n#     sys.stdin = open(\"input.txt\", \"r\")\n#     sys.stdout = open(\"output.txt\", \"w\")\n# fast()\nsolve()", "def solve():\n n,k=map(int,input().split())\n w=list(map(int,input().split()))\n if k<=n//2:\n  w.sort()\n else:\n  w.sort(reverse=True)\n print(abs(sum(w[k:])-sum(w[:k])))\n\nt=int(input())\nwhile t:\n solve()\n t-=1", "# cook your dish here\nfor x in range(int(input())):\n n,k=input().split()\n n=int(n)\n k=int(k)\n l=list(map(int,input().split()))\n l.sort()\n if k<=n//2:\n  print(sum(l[k:])-sum(l[:k]))\n else:\n  print(abs(sum(l[:n-k])-sum(l[n-k:])))\n  \n", "def subset_sum_check(l, n, sum1):\n while n >= 0:\n  if sum1 - l[n] == 0:\n   return True\n  elif sum1 - l[n] > 0:\n   if subset_sum_check(l, n - 1, sum1 - l[n]):\n    return True\n  n -= 1\n return False\n \nfor _ in range(int(input())):\n n,k = list(map(int,input().split()))\n arr = [int(i) for i in input().split()]\n h=n//2\n if n%2!=0:\n  h+=1 \n if k>=h:\n  k=n-k\n arr.sort()\n print(abs(sum(arr[:k])-sum(arr[k:])))\n", "t=int(input())\nwhile t>0:\n n,k=map(int,input().split(\" \"))\n li=list(map(int,input().split(\" \"))) \n li.sort()\n h=n//2\n if n%2!=0:\n  h+=1 \n if k>=h:\n  k=n-k\n l1=li[:k]\n l2=li[k:]\n #print(l1,l2)\n print(abs(sum(l1)-sum(l2)))\n t-=1", "for _ in range(int(input())):\n n,k = list(map(int, input().split()))\n weight = list(map(int, input().split()))\n weight.sort()\n a, b = 0, 0\n for i in range(n):\n  if i < k:\n   a += weight[i] \n   \n  if i >= n-k:\n   b += weight[i] \n \n print(max(abs(a-(sum(weight) - a)), abs(b-(sum(weight)-b))))\n", "# cook your dish here\nfor _ in range(int(input())):\n n,k = list(map(int, input().split()))\n items = list(map(int,input().split()))\n items.sort()\n v1 = abs(sum(items[k:])-sum(items[:k]))\n items.sort(reverse = True)\n v2 = abs(sum(items[k:])-sum(items[:k]))\n print(max(v1,v2))", "test = int(input())\nfor i in range(test):\n items,given = [int(x) for x in input().split()]\n weight = [int(y) for y in input().split()]\n weight.sort()\n mn,mx = 0,0\n if given <= items//2:\n  for j in range(1,items+1):\n   if j <= given:\n    mn = mn + weight[j-1]\n   else:\n    mx = mx + weight[j-1]\n  print(mx-mn)\n else:\n  for j in range(1,items+1):\n   if j <= given:\n    mn = mn + weight[items - j]\n   else:\n    mx = mx + weight[items - j]\n  print(mn-mx)", "T = int(input())\n\nfor _ in range(T):\n N, K = map(int, input().split())\n W = list(map(int, input().split()))\n\n W.sort()\n\n if K <= N // 2:\n  Kv = [W[i] for i in range(K)]\n else:\n  Kv = [W[N - i - 1] for i in range(K)]\n for i in Kv:\n  W.remove(i)\n\n diff = sum(Kv) - sum(W)\n if diff < 0:\n  diff *= -1\n\n print(diff)", "answers= []\n\ndef solve(weights, limit):\n weights.sort()\n diff1 = abs(sum(weights[limit:])-sum(weights[0:limit]))\n diff2 = abs(sum(weights[-limit:]) - sum(weights[:-limit]))\n # answers.append(abs(sum(weights[limit:])-sum(weights[0:limit])))\n answers.append(max(diff1, diff2))\n\n\nT = int(input())\nwhile T:\n N, K = [int(x) for x in input().split()]\n weights = [int(x) for x in input().split()]\n solve(weights, K)\n T -= 1\n\nfor ans in answers:\n print(ans)", "# cook your dish here\nfor _ in range(int(input())):\n n,k = map(int,input().split())\n w = list(map(int,input().split()))\n w.sort()\n if k <= n//2:\n  s1 = sum(w[:k])\n  s2 = sum(w[k:])\n  print(abs(s2 - s1))\n else:\n  s1 = sum(w[n-k:])\n  s2 = sum(w[:n-k])\n  print(abs(s2-s1))", "\nt = int(input())\nfor _ in range(t):\n n,k = list(map(int,input().split()))\n\n l = list(map(int,input().split()))\n l.sort()\n a = max(sum(l[k:])-sum(l[:k]),sum(l[:k])-sum(l[k:]))\n l.sort(reverse=True)\n b = max(sum(l[k:])-sum(l[:k]),sum(l[:k])-sum(l[k:]))\n print(max(a,b)) \n\n\n", "# n items bought (1,2,3,....,n)\n#  1 2 3 4 5 6 7 8 9\n\nt=int(input())\nfor i in range(t):\n n,k=map(int,input().split())\n weightlist=list(map(int,input().split()))\n summofweights=0\n sonweight=0\n dadweight=0\n weightlist.sort()\n for j in weightlist:\n  summofweights+=j\n if(k>n/2):\n  for j in range(-1,-(k+1),-1):\n   dadweight+=weightlist[j]\n  ans=False\n else:\n  for j in range(k):\n   sonweight+=weightlist[j]\n  ans=True\n if(ans):\n  print(summofweights-(2*sonweight))\n else:\n  print((2*dadweight)-summofweights)", "# cook your dish here\nfor _ in range(int(input())):\n sum_son=0\n n,k=map(int,input().split())\n w=[int(item) for item in input().split()]\n w.sort()\n k=min(k,n-k)\n for i in range(k):\n  sum_son=sum_son+w[i]\n total_sum=sum(w) \n chef_sum=total_sum-sum_son\n print(abs(chef_sum-sum_son))", "t = int(input())\n\nfor i in range(t):\n w,k = map(int,input().split())\n l = [int(x) for x in input().split()]\n l.sort()\n sum_w = sum(l)\n s1 = 0\n s2 = 0\n start = 0\n end = len(l) - 1\n while k > 0:\n  s1 += l[start]\n  s2 += l[end]\n  start += 1\n  end -= 1\n  k -= 1\n print(max(abs(s1 - (sum_w - s1)) , abs(s2 - (sum_w - s2))))", "# cook your dish here\nt=int(input())\nfor i in range(t):\n sum=0\n sum1=0\n n,k=map(int,input().split())\n l=list(map(int,input().split()))\n l.sort()\n k=min(k,n-k)\n for p in range(k):\n  sum+=l[p]\n for q in range(k,n):\n  sum1+=l[q]\n \n print(abs(sum-sum1))", "# cook your dish here\nfor _ in range(int(input())):\n num,k=list(map(int,input().split()))\n arr=list(map(int,input().split()))\n if(k<=num//2):\n  arr.sort()\n  ans=sum(arr[k:])-sum(arr[:k])\n  print(abs(ans))\n else:\n  arr.sort()\n  ans=sum(arr[num-k:])-sum(arr[:num-k])\n  print(ans)\n\n"]