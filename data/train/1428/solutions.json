["# cook your dish here\nimport heapq as hq\nfrom math import floor\nfor _ in range(int(input())):\n n,a,b,x,y,z=map(int,input().split())\n arr=[-int(i) for i in input().split()]\n days=((z-b-1)//y)\n ans=0\n hq.heapify(arr)\n curr=a+days*x\n while curr<z :\n  u=hq.heappop(arr)\n  u=-u\n  if u==0 :\n   break\n  else:\n   curr+=u\n   ans+=1\n   hq.heappush(arr,-(u//2))\n if curr>=z:\n  print(ans)\n else:\n  print(\"RIP\")", "# cook your dish here\nimport heapq as hq\nfrom math import floor\nfor _ in range(int(input())):\n n,a,b,x,y,z=list(map(int,input().split()))\n arr=[-int(i) for i in input().split()]\n days=((z-b-1)//y)\n \n\n ans=0\n\n hq.heapify(arr)\n curr=a+days*x\n\n while curr<z :\n\n  u=hq.heappop(arr)\n  u=-u\n  if u==0 :\n   break\n  else:\n   curr+=u\n   ans+=1\n   hq.heappush(arr,-(u//2))\n\n if curr>=z:\n\n  print(ans)\n else:\n  print(\"RIP\")\n\n\n\n\n\n", "# cook your dish here\nimport heapq as hq\nfrom math import floor\nfor _ in range(int(input())):\n n,a,b,x,y,z=list(map(int,input().split()))\n arr=[-int(i) for i in input().split()]\n days=floor((z-b-1)/y)\n \n\n ans=0\n\n hq.heapify(arr)\n curr=a+days*x\n\n while curr<z :\n\n  u=hq.heappop(arr)\n  u=-u\n  if u==0 :\n   break\n  else:\n   curr+=u\n   ans+=1\n   hq.heappush(arr,-(u//2))\n\n if curr>=z:\n\n  print(ans)\n else:\n  print(\"RIP\")\n\n\n\n\n\n", "# cook your dish here\nimport heapq as hq\nfrom math import floor\nfor _ in range(int(input())):\n n,a,b,x,y,z=list(map(int,input().split()))\n arr=[-int(i) for i in input().split()]\n days=floor((z-b)/y)\n if b+y*days==z:\n  z+=1\n\n\n ans=0\n\n hq.heapify(arr)\n curr=a+days*x\n\n while curr<z :\n\n  u=hq.heappop(arr)\n  u=-u\n  if u==0 :\n   break\n  else:\n   curr+=u\n   ans+=1\n   hq.heappush(arr,-(u//2))\n\n if curr>=z:\n\n  print(ans)\n else:\n  print(\"RIP\")\n\n\n\n\n\n", "# cook your dish here\nimport heapq\nfrom math import ceil, floor\nfor _ in range(int(input())):\n n, a, b, x, y, z = map(int,input().split())\n s = [-int(i) for i in input().split()]\n days = floor((z-b)/y)\n current = a+days*x\n if b+days*y==z:\n  z+=1\n count = 0\n heapq.heapify(s)\n\n while current<z:\n  ret = heapq.heappop(s)\n  ret = -ret\n\n  if ret == 0:\n   break\n  else:\n   current+=ret\n   heapq.heappush(s,-(ret//2))\n   #heapq.heapify(s)\n  count+=1\n print(count) if current>=z else print(\"RIP\")", "# cook your dish here\nimport heapq\nfrom math import ceil, floor\nfor _ in range(int(input())):\n n, a, b, x, y, z = map(int,input().split())\n s = [-int(i) for i in input().split()]\n days = floor((z-b)/y)\n current = a+days*x\n if b+days*y==z:\n  z+=1\n count = 0\n heapq.heapify(s)\n\n while current<z:\n  ret = heapq.heappop(s)\n  ret = -ret\n\n  if ret == 0:\n   break\n  else:\n   current+=ret\n   heapq.heappush(s,-(ret//2))\n   #heapq.heapify(s)\n  count+=1\n print(count) if current>=z else print(\"RIP\")", "# cook your dish here\nimport heapq\nimport math\nfor i in range(int(input())):\n n,a,b,x,y,z = list(map(int,input().split()))\n cntrbtns= list(map(int,input().split()))\n t=math.ceil((z-b)/y)\n sumy= a+ x*(t-1) \n if (sum(cntrbtns)*2 +sumy) < z:\n  print(\"RIP\")\n  continue\n c=0\n for i in range(n):\n  cntrbtns[i]= - cntrbtns[i]\n heapq.heapify(cntrbtns)\n ele=0\n while True:\n  if sumy>=z:\n   print(c)\n   break\n  ele=heapq.heappushpop(cntrbtns,math.ceil(ele/2))\n  if ele==0:\n   print(\"RIP\")\n   break\n  sumy -=ele \n  c+=1 \n  \n\n", "# cook your dish here\nimport heapq\nimport math\nfor i in range(int(input())):\n n,a,b,x,y,z = list(map(int,input().split()))\n cntrbtns= list(map(int,input().split()))\n t=math.ceil((z-b)/y)\n sumy= a+ x*(t-1) \n if (sum(cntrbtns)*2 +sumy) < z:\n  print(\"RIP\")\n  continue\n c=0\n for i in range(n):\n  cntrbtns[i]= - cntrbtns[i]\n heapq.heapify(cntrbtns)\n ele=0\n while True:\n  if sumy>=z:\n   print(c)\n   break\n  ele=heapq.heappushpop(cntrbtns,math.ceil(ele/2))\n  if ele==0:\n   print(\"RIP\")\n   break\n  sumy -=ele \n  c+=1 \n  \n\n", "# cook your dish here\nimport heapq\nfrom math import ceil\nfor i in range(int(input())):\n n,a,b,x,y,z = list(map(int,input().split()))\n cntrbtns= [-(int(x)) for x in input().split()]\n \n if b>=z :\n  print(\"RIP\")\n  continue\n sum= a+ x*(ceil((z-b)/y)-1) \n c=0\n heapq.heapify(cntrbtns)\n ele=0\n while sum<z and any(cntrbtns):\n  ele=-heapq.heappop(cntrbtns)\n  sum+=ele\n  heapq.heappush(cntrbtns,-(ele>>1))\n  c+=1 \n print([\"RIP\",c][sum>=z])\n", "# cook your dish here\nimport heapq\nfrom math import ceil\nfor i in range(int(input())):\n n,a,b,x,y,z = list(map(int,input().split()))\n cntrbtns= [-(int(x)) for x in input().split()]\n \n if b>=z :\n  print(\"RIP\")\n  continue\n sum= a+ x*(ceil((z-b)/y)-1) \n c=0\n heapq.heapify(cntrbtns)\n ele=0\n while sum<z and any(cntrbtns):\n  ele=-heapq.heappushpop(cntrbtns,-(ele>>1))\n  sum+=ele \n  c+=1 \n print([\"RIP\",c][sum>=z])\n", "# cook your dish here\nimport heapq\nfrom math import ceil\nfor i in range(int(input())):\n n,a,b,x,y,z = list(map(int,input().split()))\n cntrbtns= [-(int(x)) for x in input().split()]\n \n if b>=z :\n  print(\"RIP\")\n  continue\n sum= a+ x*(ceil((z-b)/y)-1) \n c=0\n heapq.heapify(cntrbtns)\n ele=0\n while True:\n  if sum>=z:\n   print(c)\n   break\n  ele=-ele\n  ele=heapq.heappushpop(cntrbtns,-(ele>>1))\n  if ele==0:\n   print(\"RIP\")\n   break\n  sum-=ele \n  c+=1 \n  \n", "# cook your dish here\nimport heapq\nfrom math import ceil\nfor i in range(int(input())):\n n,a,b,x,y,z = list(map(int,input().split()))\n cntrbtns= [-(int(x)) for x in input().split()]\n \n if b>=z :\n  print(\"RIP\")\n  continue\n t=ceil((z-b)/y)\n sum= a+ x*(t-1) \n c=0\n heapq.heapify(cntrbtns)\n ele=0\n while True:\n  if sum>=z:\n   print(c)\n   break\n  ele=-ele\n  ele=heapq.heappushpop(cntrbtns,-(ele>>1))\n  if ele==0:\n   print(\"RIP\")\n   break\n  sum-=ele \n  c+=1 \n  \n", "import heapq\nfrom math import ceil\nfor _ in range(int(input())):\n n,a,b,x,y,z =[int(i) for i in input().split()]\n A=[-int(i) for i in input().split()]\n heapq.heapify(A)\n days=ceil((z-b)/y)\n pig=z-a\n if(ceil((pig+2*sum(A))/x)>=days):\n  print(\"RIP\")\n else:\n  ans=0\n  while(ceil(pig/x)>=days and any(A)):\n   use=-heapq.heappop(A)\n   pig-=use\n   heapq.heappush(A,-(use>> 1))\n   ans+=1\n  print([\"RIP\",ans][ceil(pig/x)<days])\n", "# cook your dish here\nimport heapq\nimport math\nfor i in range(int(input())):\n n,a,b,x,y,z = list(map(int,input().split()))\n cntrbtns= [-(int(x)) for x in input().split()]\n \n if b>=z :\n  print(\"RIP\")\n  continue\n t=math.ceil((z-b)/y)\n sum= a+ x*(t-1) \n c=0\n heapq.heapify(cntrbtns)\n ele=0\n while True:\n  if sum>=z:\n   print(c)\n   break\n  ele=-ele\n  ele=heapq.heappushpop(cntrbtns,-(ele>>1))\n  if ele==0:\n   print(\"RIP\")\n   break\n  sum-=ele \n  c+=1 \n  \n", "from collections import deque\nimport math\ndef solve(nums, d,z):\n q1 = deque(sorted(nums, reverse=True))\n q2 = deque()\n c=0\n if d>=z:\n  return c\n while True:\n  if len(q1)==0 and len(q2)==0:\n   break\n  if not q2 or q1[0] > q2[0]:\n   ele = q1.popleft()\n   c+=1\n   d+=ele\n   if d>=z:\n    return c\n   ele = ele // 2\n   if ele>=1:\n    q2.append(ele)\n  else:\n   ele = q2.popleft()\n   c+=1\n   d+=ele\n   if d>=z:\n    return c\n   ele = ele // 2\n   if ele>=2:\n    q2.append(ele)\n  \n  if not q1:\n   q1, q2 = q2, q1\n if d>=z:\n  return c\n return 'RIP'\n  \n \nt=int(input())\nfor _ in range(t):\n n,a,b,x,y,z=list(map(int,input().split()))\n nums = list(map(int, input().split()))\n queries = set([])\n c=z-b\n c=math.ceil(c/y)-1\n d=a+x*c\n if d>=z:\n  print(0)\n else:\n  \n \n  print(solve(nums,d,z))\n\n", "# cook your dish here\nfrom collections import deque\n\nimport math\ndef solve(nums, d,z):\n q1 = deque(sorted(nums, reverse=True))\n q2 = deque()\n c=0\n if d>=z:\n  return c\n while True:\n  if len(q1)==0 and len(q2)==0:\n   break\n  if not q2 or q1[0] > q2[0]:\n   ele = q1.popleft()\n   c+=1\n   d+=ele\n   if d>=z:\n    return c\n   ele = ele // 2\n   if ele>=1:\n    q2.append(ele)\n  else:\n   ele = q2.popleft()\n   c+=1\n   d+=ele\n   if d>=z:\n    return c\n   ele = ele // 2\n   if ele>=2:\n    q2.append(ele)\n  \n  if not q1:\n   q1, q2 = q2, q1\n if d>=z:\n  return c\n return 'RIP'\n  \n \nt=int(input())\nfor _ in range(t):\n n,a,b,x,y,z=list(map(int,input().split()))\n nums = list(map(int, input().split()))\n queries = set([])\n c=z-b\n c=math.ceil(c/y)-1\n d=a+x*c\n if d>=z:\n  print(0)\n else:\n  \n \n  print(solve(nums,d,z))\n\n", "# cook your dish here\nimport heapq\nimport math\nfor i in range(int(input())):\n n,a,b,x,y,z = list(map(int,input().split()))\n cntrbtns= [-(int(x)) for x in input().split()]\n \n if b>=z :\n  print(\"RIP\")\n  continue\n t=math.ceil((z-b)/y)\n sum= a+ x*(t-1) \n c=0\n heapq.heapify(cntrbtns)\n ele=0\n while True:\n  if sum>=z:\n   print(c)\n   break\n  ele=-ele\n  ele=heapq.heappushpop(cntrbtns,-(ele//2))\n  if ele==0:\n   print(\"RIP\")\n   break\n  sum-=ele \n  c+=1 \n  \n", "# cook your dish here\nimport heapq\nimport math\nfor i in range(int(input())):\n n,a,b,x,y,z = list(map(int,input().split()))\n cntrbtns= list(map(int,input().split()))\n \n if b>=z :\n  print(\"RIP\")\n  continue\n t=math.ceil((z-b)/y)\n sum= a+ x*(t-1) \n c=0\n for i in range(n):\n  cntrbtns[i]= - cntrbtns[i]\n heapq.heapify(cntrbtns)\n ele=0\n while True:\n  if sum>=z:\n   print(c)\n   break\n  ele=-ele\n  ele=heapq.heappushpop(cntrbtns,-(ele//2))\n  if ele==0:\n   print(\"RIP\")\n   break\n  sum-=ele \n  c+=1 \n  \n", "# cook your dish here\nimport heapq\nimport math\nfor i in range(int(input())):\n n,a,b,x,y,z = list(map(int,input().split()))\n cntrbtns= list(map(int,input().split()))\n \n if b>=z :\n  print(\"RIP\")\n  continue\n t=math.ceil((z-b)/y)\n sum= a+ x*(t-1) \n c=0\n for i in range(n):\n  cntrbtns[i]= - cntrbtns[i]\n heapq.heapify(cntrbtns)\n ele=0\n while True:\n  if sum>=z:\n   print(c)\n   break\n  ele=heapq.heappushpop(cntrbtns,math.ceil(ele/2))\n  if ele==0:\n   print(\"RIP\")\n   break\n  sum-=ele \n  c+=1 \n  \n", "# cook your dish here\nimport heapq\nfrom math import ceil\n\nt= int(input())\nfor k in range(t):\n n, a, b, x, y, z = list(map(int,input().split()))\n c = list(map(int,input().split()))\n cont = [ -int(x) for x in c]\n \n days = int((z-b) / y )\n \n p_user = days * x + a\n \n need = z - p_user\n flag = 0\n \n heapq.heapify(cont) \n count = 0\n if ceil(((z-a) - (2*sum(c)))/x) >= days + 1:\n  print(\"RIP\")\n \n \n elif p_user > z:\n  print(0)\n else:\n  while( p_user < z):\n   \n   key = heapq.heappop(cont)\n   if key ==0:\n    flag = 1 \n    break\n   count += 1\n   p_user += -key\n   #print(need,key,cont)\n   heapq.heappush(cont,int(key/2))\n   \n  if flag == 0:\n   print(count)\n  else :\n   print(\"RIP\")\n   \n  \n  \n  \n  \n  \n  \n", "#\n\nimport heapq\nfrom math import ceil\n\nfor _ in range(int(input())):\n N, A, B, X, Y, Z = map(int, input().split())\n C = list(map(int, input().split()))\n heap = [-contrib for contrib in C]\n heapq.heapify(heap)\n \n hooli_days = ceil((Z-B)/Y)\n piper_init_gap = Z - A\n \n if ceil((piper_init_gap-2*sum(C))/X) >= hooli_days:\n  print('RIP')\n else:\n  num_contribs = 0\n  while ceil(piper_init_gap/X) >= hooli_days and any(heap):\n   contrib = -heapq.heappop(heap)\n   piper_init_gap -= contrib\n   heapq.heappush(heap, -(contrib >> 1))\n   num_contribs += 1\n  if ceil(piper_init_gap/X) < hooli_days:\n   print(num_contribs)\n  else:\n   print('RIP')", "import heapq\nfrom math import ceil\n\n\nfor _ in range(int(input())):\n n, a, b, x, y, z = list(map(int, input().split()))\n c = [-int(i) for i in input().split()]\n heapq.heapify(c)\n days = ceil((z - b) / y)\n pig = z-a\n if ceil((pig + 2 * sum(c)) / x) >= days:\n  print(\"RIP\")\n else:\n  ans = 0\n  while ceil(pig / x) >= days and any(c):\n   use = -heapq.heappop(c)\n   pig -= use\n   heapq.heappush(c, -(use >> 1))\n   ans += 1\n  if ceil(pig / x) >= days:\n   print(\"RIP\")\n  else:\n   print(ans)\n", "import heapq as heap\n\nfor t in range(int(input())):\n n, a, b, x, y, z = map(int,input().split( ))\n h = list(map(int,input().split( )))\n for i in range(n):\n  h[i] *= -1\n heap.heapify(h)\n extra = (z - b - 1) // y\n a += x * extra\n b += y * extra\n ans = 0\n while a < z and h:\n  maximum = -1 * heap.heappop(h)\n  a += maximum\n  ans += 1\n  maximum //= 2\n  if maximum:\n   heap.heappush(h,-1 * maximum)\n if a < z:\n  print(\"RIP\")\n else:\n  print(ans)"]