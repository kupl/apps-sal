["nr=int(input())\nd={}\nfor r in range(nr):\n s,v=list(map(str,input().split()))\n d[int(v)]=s\nq=int(input())\nlis=[]\nfor i in range(q):\n lis.append(input())\nl=list(d.keys())\nl.sort(reverse=True)\nans='NO'\n\n\nfor j in lis:\n ans='NO'\n for k in l:\n  if len(j)<=len(d[k]):\n   a=d[k]\n   if j==a[0:len(j)]:\n    ans=a\n    break\n print(ans) \n", "# cook your dish here\nn=int(input())\nd=dict()\nfor _ in range(n):\n aa=input().split()\n s=aa[0]\n v=int(aa[1])\n d[s]=v\nq=int(input())\nfor _ in range(q):\n qi=input()\n value=None\n recep=None\n for i in d:\n  if i.startswith(qi):\n   if value is None or value<d[i]:\n    value=d[i]\n    recep=i\n if recep==None:\n  print(\"NO\")\n else:\n  print(recep)", "# cook your dish here\nn=int(input())\nd=dict()\nfor _ in range(n):\n aa=input().split()\n s=aa[0]\n v=int(aa[1])\n d[s]=v\nq=int(input())\nfor _ in range(q):\n qi=input()\n value=None\n recep=None\n for i in d:\n  if i.startswith(qi):\n   if value is None or value<d[i]:\n    value=d[i]\n    recep=i\n if recep==None:\n  print(\"NO\")\n else:\n  print(recep)", "# cook your dish here\nimport re\nn=int(input())\nl=[]\nfor _ in range(n):\n l.append(input().split())\n l[-1][1]=int(l[-1][1])\n \nl.sort(key=lambda x: x[1], reverse=True)\nq=int(input())\nfor _ in range(q):\n \n s=\"^\"+input()\n \n for k in l:\n  if re.findall(s, k[0]):\n   print(k[0])\n   break\n else:\n  print('NO')\n \n", "# cook your dish here\nimport re\nn=int(input())\nl=[]\nfor _ in range(n):\n l.append(input().split())\n l[-1][1]=int(l[-1][1])\n \nl.sort(key=lambda x: x[1], reverse=True)\nq=int(input())\nfor _ in range(q):\n \n s=\"^\"+input()\n \n for k in l:\n  if re.findall(s, k[0]):\n   print(k[0])\n   break\n else:\n  print('NO')\n \n", "n=int(input())\ns=[]\na=[]\nfor i in range(n):\n si,vi=input().split()\n vi=int(vi)\n a.append(vi)\n s.append(si)\n#print(s)\n#print(a)\nq=int(input())\nfor j in range(0,q):\n qi=input()\n ma=-20000000009\n pos=-1\n for k in range(0,n):\n  if s[k].startswith(qi):\n   #print(s[k])\n   if a[k]>ma:\n    #print(a[k])\n    pos=k\n    ma=a[k]\n if pos==-1:\n  print(\"NO\")\n else:\n  print(s[pos])", "# cook your dish here\nn=int(input())\ns=[]\na=[]\nfor i in range(n):\n si,vi=input().split()\n vi=int(vi)\n a.append(vi)\n s.append(si)\n#print(s)\n#print(a)\nq=int(input())\nfor j in range(0,q):\n qi=input()\n ma=-20000000009\n pos=-1\n for k in range(0,n):\n  if s[k].startswith(qi):\n   #print(s[k])\n   if a[k]>ma:\n    #print(a[k])\n    pos=k\n    ma=a[k]\n if pos==-1:\n  print(\"NO\")\n else:\n  print(s[pos])\n\n \n  \n  \n  \n  \n  \n  \n", "res=[]\nfor _ in range(int(input())):\n a,b=list(map(str,input().split()))\n res.append([a,int(b)])\nres.sort(key=lambda x:x[-1])\n#print(res)\nfor _ in range(int(input())):\n check=input().strip()\n f=1\n for i in range(len(res)-1,-1,-1):\n  if res[i][0][:len(check)]==check:\n   f=0\n   ans=res[i][0]\n   break\n if f==1:\n  print(\"NO\")\n elif f==0:\n  print(ans)\n", "class TrieNode():\n def __init__(self):\n  self.children=[None]*27 \n  self.ispresent=0 \n  self.priority=\"aa\"\n  self.index=-1 \nclass Trie():\n def __init__(self):\n  self.root=self.getnode()\n def getnode(self):\n  return TrieNode()\n def getind(self,ch):\n  if ch=='-': return 26 \n  return ord(ch)-97 \n def insert(self,key,pos,pri):\n  curr=self.root \n  l=len(key)\n  for i in range(l):\n   place=self.getind(key[i])\n   if curr.children[place]==None:\n    curr.children[place]=self.getnode()\n    curr=curr.children[place]\n    curr.index=pos\n    curr.priority=pri \n   else:\n    curr=curr.children[place]\n    if pri>curr.priority:\n     curr.priority=pri \n     curr.index=pos \n  curr.ispresent=1 \n def search(self,key):\n  curr=self.root \n  l=len(key)\n  for i in range(l):\n   place=self.getind(key[i])\n   if curr.children[place]==None:\n    return -1 \n   curr=curr.children[place]\n  return curr.index \ndata=Trie()\nn=int(input())\nstrings=[]\nfor i in range(n):\n string,pri=input().split()\n pri=int(pri)\n data.insert(string,i,pri)\n strings.append(string)\nq=int(input())\nfor i in range(q):\n start=input()\n ans=data.search(start)\n if ans==-1:\n  print('NO')\n else:\n  #print(ans,start)\n  print(strings[ans])\n  \n \n    \n", "n=int(input())\nli=[]\nfor i in range(n):\n string,pri=input().split()\n pri=int(pri)\n li.append([string,pri])\nli.sort(key=lambda x:x[1],reverse=True)\nq=int(input())\nfor i in range(q):\n start=input()\n f=0\n for i in range(n):\n  if li[i][0].startswith(start):\n   f=1 \n   print(li[i][0])\n   break \n if not f:\n  print('NO')\n"]