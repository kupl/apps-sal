["import sys\nsys.setrecursionlimit(1000000)\n\nmod = 10**9 + 7\nts = int(input())\nwhile ts > 0:\n n,q = list(map(int,input().split()))\n ncc = n-1\n par = [i for i in range(n)]\n rank = [1]*n\n xor = [0]*n\n flag = 1\n\n def find(a):\n  if par[a] == a:\n   return a\n  else:\n   temp = find(par[a])\n   xor[a]^=xor[par[a]]\n   par[a] = temp\n   return temp\n\n def union(a,b): \n  a,b = find(a),find(b)\n  if a ==b:\n   return \n  if rank[a] > rank[b]:\n   par[b] = a\n\n   rank[a]+=rank[b]\n  elif rank[a] < rank[b]:\n   par[a] = b\n   rank[b]+=rank[a]\n  else:\n   par[b] = a\n   rank[a]+=rank[b]\n  par[b] =a\n\n for _ in range(q):\n  \n  a,b,x = list(map(int,input().split()))\n  a-=1\n  b-=1\n  if flag == -1:\n   continue\n  para = find(a)\n  parb = find(b)\n\n  if para == parb and xor[a] ^ xor[b] != x:\n   flag = -1 \n   continue\n   # print(\"no\")\n\n  if para != parb:\n   if rank[para] < rank[parb]:\n    xor[para] = xor[a] ^ xor[b] ^ x\n    par[para] = parb\n    rank[parb]+=rank[para]\n   else:\n    xor[parb] = xor[a] ^ xor[b] ^ x\n    par[parb] = para\n    rank[para]+=rank[parb]\n   ncc-=1\n   \n if flag != -1:\n  print(\"yes\")\n else:\n  print(\"no\")\n  \n ts-=1", "def union(a,b):\n fa=find(a)\n fb=find(b)\n if rank[fa]>rank[fb]:\n  dsu[fb]=fa\n elif rank[fb]>rank[fa]:\n  dsu[fa]=fb\n else:\n  rank[fa]+=1\n  dsu[fb]=fa\ndef find(x):\n while x!=dsu[x]:\n  dsu[x]=dsu[dsu[x]]\n  x=dsu[x]\n return x\nfor _ in range(int(input())):\n n,q=list(map(int,input().split()))\n dsu=[i for i in range(n)]\n rank=[0]*n\n ones=[]\n zeros=[]\n for i in range(q):\n  a,b,c=list(map(int,input().split()))\n  if c==1:\n   ones.append([a-1,b-1])\n  else:\n   zeros.append([a-1,b-1])\n flag=0\n for i in zeros:\n  f1=find(i[0])\n  f2=find(i[1])\n  union(i[0],i[1])\n color=[0]*n\n for i in ones:\n  f1=find(i[0])\n  f2=find(i[1])\n  if f1==f2:\n   flag=1\n  else:\n   #print(color)\n   if color[f1]==0 and color[f2]==0:\n    color[f1]=-1\n    color[f2]=1\n   elif color[f1]!=0 and color[f2]==0:\n    color[f2]=-color[f1]\n   elif color[f2]!=0 and color[f1]==0:\n    color[f1]=-color[f2]\n   elif color[f2]==color[f1]:\n    flag=1\n \n\n print(\"yes\" if flag==0 else \"no\")\n", "store=dict()\nclass node:\n def __init__(self,data):\n  self.data=data\n  self.parent=None\n  self.rank=0\n  self.color=None\ndef makeset(data):\n new_node=node(data)\n new_node.parent=new_node\n store[data]=new_node\ndef union(data1,data2):\n node1=store[data1]\n node2=store[data2]\n\n parent1=findset(node1)\n parent2=findset(node2)\n if parent1.data==parent2.data :\n  return\n if parent1.rank >= parent2.rank :\n  parent1.rank+=int(parent1.rank==parent2.rank)\n  parent2.parent=parent1\n else:\n  parent1.parent=parent2\ndef findset(new_node):\n parent=new_node.parent\n if new_node==parent :\n  return new_node\n new_node.parent=findset(new_node.parent)\n return new_node.parent\ndef repre(data):\n return findset(store[data])\nfrom sys import stdin,stdout\nfor _ in range(int(stdin.readline())):\n n,q=list(map(int,stdin.readline().split()))\n store=dict();different=[]\n for i in range(1,n+1):\n  makeset(i)\n for i in range(q):\n  a,b,c=list(map(int,stdin.readline().split()))\n  if c==0:\n   union(a,b)\n  else:\n   different.append([a,b])\n ans=True\n for i in range(len(different)):\n  ob1=repre(different[i][0])\n  ob2=repre(different[i][1])\n  if ob1.data==ob2.data:\n   ans=0\n   break\n  elif ob1.color==ob2.color and ob1.color!=None:\n   ans=0\n   break\n  else:\n   if ob1.color==None and ob2.color==None :\n    ob1.color=True\n    ob2.color= not ob1.color\n   elif ob1.color==None :\n    ob1.color= not ob2.color\n   elif ob2.color==None:\n    ob2.color= not ob1.color\n   \n if ans:\n  stdout.write(\"yes\\n\")\n else:\n  stdout.write(\"no\\n\")\n\n\n", "import sys\nsys.setrecursionlimit(1000000)\nt = int(input())\n\nfor _ in range(t):\n n, q = map(int, input().split())\n par = [i for i in range(2 * n)]\n def get(u):\n  if u != par[u]:\n   par[u] = get(par[u])\n  return par[u]\n def union(u, v):\n  par[get(u)] = get(v)\n  \n for i in range(q):\n  i, j, val = map(int, input().split())\n  i -= 1\n  j -= 1\n  if val == 0:\n   union(i, j)\n   union(i + n, j + n)\n  else:\n   union(i, j + n)\n   union(i + n, j)\n if any(get(i) == get(i + n) for i in range(n)):\n  print('no')\n else:\n  print('yes')"]