["class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        res = xors = 0\n        freq = collections.defaultdict(int, {0:1})\n        _sum = collections.defaultdict(int)\n        for i in range(n):\n            xors ^= arr[i]\n            res += freq[xors] * i - _sum[xors]\n            freq[xors] += 1\n            _sum[xors] += i+1\n                \n        return res\n                \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        store=[0]\n        n=len(arr)\n        for i in range(n):\n            store.append(arr[i]^store[i])\n        ans=0\n        print(store)\n        for i in range(1,n):\n            for k in range(i+1,n+1):\n                if store[i-1]==store[k]:\n                    ans+=(k-i)\n        return ans\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        ans = 0\n        for i in range(n):\n            p1 = [0]*(n+1)\n            p1[i] = arr[i]\n            for j in range(i+1,n):\n                p1[j] = p1[j-1]^arr[j]\n                p2 = [0]*(n+1)\n                for k in range(j,n):\n                    p2[k] = p2[k-1]^arr[k]\n                    if p1[j-1] == p2[k]:\n                        ans += 1\n        return ans ", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        arr=[0]+arr\n        res=0\n        for k in range(1,len(arr)):\n            arr[k]^=arr[k-1]\n            for j in range(1,k+1):\n                for i in range(1,j):\n                    b=arr[k]^arr[j-1]\n                    a=arr[j-1]^arr[i-1]\n                    if a==b:\n                        #print(i-1,j-1,k-1)\n                        res+=1\n        #print(arr)\n        return res", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        res = 0\n        xors = [0] * (n + 1)\n        for z in range(n):\n            xors[z] = xors[z-1] ^ arr[z] \n    \n        for i in range(n-1):\n            for j in range(i+1, n):\n                for k in range(j, n):\n                    a = xors[j-1] ^ xors[i-1]\n                    b = xors[k] ^ xors[j-1]\n                    if a == b:\n                        res += 1\n                \n        return res\n                \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        res = 0\n        for i in range(1, len(arr)):\n            arr[i] ^= arr[i-1]\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j, len(arr)):\n                    if i:\n                        a = arr[j-1] ^ arr[i-1]\n                    else:\n                        a = arr[j-1]\n                    b = arr[k] ^ arr[j-1]\n                    if a == b:\n                        res += 1\n        return res", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        ans = 0\n        pool = dict()\n        pool[(0,0)] = 0\n        pool[(1,1)] = 0\n        for i in range(len(arr)-1):\n            for j in range(i+1, len(arr)):\n                if (i,j) not in pool:\n                    # a = reduce(lambda a, b: a^b, arr[i:j])\n                    a = pool[(i,j-1)]^arr[j-1]\n                    pool[(i,j)] = a\n                else: \n                    a = pool[(i,j)]\n                for k in range(j, len(arr)):\n                    if (j,k+1) not in pool:\n                        # b = reduce(lambda a, b: a^b, arr[j:k+1])\n                        if j == k: \n                            b = arr[k]\n                        else:\n                            b = pool[(j,k)]^arr[k]\n                        pool[(j,k+1)] = b\n                    else:\n                        b = pool[(j,k+1)]\n                    if a == b: ans += 1\n        return ans\n                        \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        prefix = [0] * n\n        prefix[0] = arr[0]\n        for i in range(1, n):\n            prefix[i] = prefix[i - 1] ^ arr[i]\n        \n        ans = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                for k in range(j, n):\n                    t = prefix[i - 1] if i > 0 else 0\n                    if prefix[j - 1] ^ t == prefix[k] ^ prefix[j - 1]:\n                        # print(i, j, k, prefix[i - 1], prefix[j - 1], prefix[k])\n                        ans += 1\n        return ans\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        scan = [0 for i in arr]\n        scan[0] = arr[0]\n        for i in range(1, len(arr)):\n            scan[i] = scan[i - 1] ^ arr[i]\n        res = 0\n        for i in range(len(arr)-1):\n            for j in range(i + 1, len(arr)):\n                for k in range(j, len(arr)):\n                    a = scan[j - 1] ^ scan[i] ^ arr[i]\n                    b = scan[k] ^ scan[j - 1]\n                    if a == b:\n                        res += 1\n        return res\n            \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        xor = arr.copy()\n        for i in range(1,len(xor)):\n            xor[i] ^= xor[i-1]\n        print([bin(z) for z in arr])\n        print([bin(z) for z in xor])\n        \n        count = 0\n        \n        for i in range(len(arr)-1):\n            for j in range(i+1,len(arr)):\n                for k in range(j,len(arr)):\n                    # print(i,j,k)\n                    a = xor[j-1] if i == 0 else xor[j-1] ^ xor[i-1]\n                    b = xor[k] ^ xor[j-1]\n                    # print(a,b)\n                    if a == b:\n                        # print(\\\"xxx\\\")\n                        count += 1\n        return count\n                    \n                    \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        ans = 0\n        prefix = list(arr)\n        for i in range(1, n):\n            prefix[i] ^= prefix[i - 1]\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j, n):\n                    a = prefix[j - 1] ^ prefix[i] ^ arr[i]\n                    b = prefix[k] ^ prefix[j - 1]\n                    ans += 1 if a == b else 0\n        return ans ", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        res=0\n        n=len(arr)\n        for i in range(n-1):\n            tmp=arr[i]\n            for j in range(i+1,n):\n                tmp=tmp^arr[j]\n                if tmp==0:\n                    res+=j-i\n        return res", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        # S1\n        ans, size = 0, len(arr)\n        xor = [0] * size\n        xor[0] = arr[0]\n        for i in range(1, size):\n            xor[i] = arr[i] ^ xor[i-1]\n            \n        for i in range(size):\n            for j in range(i+1, size):\n                for k in range(j, size):\n                    a = xor[j-1] ^ xor[i-1] if i > 0 else xor[j-1]\n                    b = xor[k] ^ xor[j-1]\n                    if a == b: ans += 1\n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        a = []\n        n = len(arr)\n        for i in range(n):\n            if i == 0:\n                a.append(arr[i])\n            else:\n                a.append(arr[i] ^ a[-1])\n        \n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j, n):\n                    x = a[j-1] ^ (0 if i == 0 else a[i-1])\n                    y = a[k] ^ a[j-1]\n                    if x == y:\n                        ans += 1\n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        prefix = [0 for _ in range(len(arr))]\n        prefix[0] = arr[0]\n        for i in range(1, len(arr)):\n            prefix[i] = arr[i] ^ prefix[i-1]\n        res = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                for k in range(j, len(arr)):\n                    a = prefix[j-1] ^ prefix[i-1] if i >= 1 else prefix[j-1]\n                    b = prefix[k] ^ prefix[j-1]\n                    res += (a == b)\n        return res", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        \n        # O(N2)\n        \n        # prefix xor array\n        \n        prefix = [arr[0]]\n        for i in range(1, len(arr)):\n            prefix.append(prefix[-1] ^ arr[i])\n        \n        ans = 0\n        for i in range(1, len(prefix)):\n            for j in range(i+1, len(prefix)):\n                if prefix[i-1]^prefix[j] == 0:\n                    ans += j-i\n        for i in range(len(prefix)):\n            if prefix[i]==0:\n                ans += i\n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        N = len(arr)\n        A, pre = [arr[0]], arr[0]\n        for ii in arr[1:]:\n            pre ^= ii\n            A.append(pre)\n        res = 0\n        for ii in range(N):\n            for kk in range(ii + 1, N):\n                a_i, a_k = A[ii - 1] if ii else 0, A[kk]\n                a_ik = a_k ^ a_i\n                if not a_ik:\n                    res += (kk - ii)\n        return res\n                    \n\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        xors = [arr[0]]\n        \n        for i in range(1, len(arr)):\n            xors.append(xors[-1] ^ arr[i])\n            \n        # 2 1 0 6 7\n        print(xors)\n        n = len(arr)\n        count = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                temp = xors[j]\n                if i > 0:\n                    temp ^= xors[i - 1]\n                \n                if temp == 0:\n                    count += j - i   \n                    \n        return count\n                \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        prefix = [0]*(len(arr)+1)\n        prefix[1] = arr[0]\n        res = 0\n        for i in range(1, len(arr)):\n            prefix[i+1] = prefix[i]^arr[i]\n        print(prefix)\n        for i in range(len(arr)-1):\n            for j in range(i, len(arr)):\n                if prefix[j+1]^prefix[i] == 0:\n                    res+=(j-i)\n\n        return res", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        preXor = [0] * (len(arr) + 1)\n        preXor[0] = arr[0]\n        for i in range(1, len(arr)):\n            preXor[i] = preXor[i-1] ^ arr[i]\n        ret = 0\n        for i in range(len(arr)-1):\n            l = preXor[i-1]\n            for k in range(i+1, len(arr)):\n                if l == preXor[k]:\n                    ret += k - i\n        return ret\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        count, n = 0, len(arr)\n        for i in range(n - 1):\n            accu = arr[i]\n            for k in range(i + 1, n):\n                accu ^= arr[k]\n                if accu == 0: count += k - i\n        return count", "class Solution:\n    def allPrefixXor(self, arr: List[int]) -> List[int]:\n        prefix_xor: List[int] = [0] * len(arr)\n            \n        prefix_xor[0] = arr[0]\n        for i in range(1, len(arr)):\n            prefix_xor[i] = prefix_xor[i - 1] ^ arr[i]\n            \n        return prefix_xor\n    \n    \n    def allSegmentXor(self, arr: List[int]) -> List[List[int]]:\n        prefix_xor: List[int] = self.allPrefixXor(arr)\n        segment_xor: List[List[int]] = [[0] * len(arr) for _ in range(len(arr))]\n        \n        segment_xor[0] = prefix_xor[:]\n        for first in range(1, len(segment_xor) - 1):\n            for last in range(first + 1, len(segment_xor[first])):\n                segment_xor[first][last] = prefix_xor[last] ^ prefix_xor[first - 1]\n\n        return segment_xor\n    \n        \n    def countTriplets(self, arr: List[int]) -> int:\n        segment_xor: List[List[int]] = self.allSegmentXor(arr)\n        n_triplets: int = 0\n            \n        for first in range(len(segment_xor) - 1):\n            for last in range(first + 1, len(segment_xor[first])):\n                if segment_xor[first][last] == 0:\n                    n_triplets += last - first\n                    \n        return n_triplets", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        cumxor = [arr[0]]\n        for i in range(1, n):\n            cumxor.append(cumxor[i-1] ^ arr[i])\n        cumxor.append(0)\n        \n        res = 0\n        for i in range(0, n):\n            for j in range(i+1, n):\n                if cumxor[i-1] == cumxor[j]:\n                    res += j - i\n        return res\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        d = defaultdict(set)\n        s = 0\n        d[0].add(-1)\n        for i,x in enumerate(arr):\n            s ^= x\n            d[s].add(i)\n\n        return sum([abs(a-b)-1 for k in d for a,b in combinations(d[k],2)])   \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        \n        triplets = 0\n        \n        #rangeXOR[i,j] stores XOR of elements from arr[i] to arr[j] (both incl), i<j\n        #rangeXOR = []\n        for i, a in enumerate(arr):\n            #tackle sub arrays starting at arr[i]\n            subrange = []\n            \n            for j, b in enumerate(arr[i:]):\n                j_absolute = i + j\n                \n                if j_absolute == i:\n                    subrange.append(b)\n                else:  #j_absolute > i\n                    subrange.append(subrange[-1] ^ b)\n                \n                if subrange[-1] == 0:\n                    #output all triplets here\n                    triplets += j   #j_absolute - i\n                    \n            #rangeXOR.append(subrange)\n            \n        return triplets", "import numpy as np\n\nclass Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n\n        cumxor = [arr[0]]\n        for k  in range(1, len(arr)):\n            cumxor.append(cumxor[-1]^arr[k])\n        counter = 0\n        for x in range(1, len(arr)):\n            if cumxor[x] == 0:\n                counter += x\n            for y in range(x):\n                if cumxor[x] == cumxor[y]:\n                    counter +=  x -y -1\n                \n        return counter\n            \n        \n", "# N = len(arr)\n# time: O(N^2)\n# space: O(N^2)\nclass Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        memo = [arr[:] for _ in range(len(arr))]\n        for i in range(len(arr)):\n            tmp = arr[i]\n            for j in range(i + 1, len(arr)):\n                tmp ^= arr[j]\n                memo[i][j] = tmp\n        return sum([(j - i) * (memo[i][j] == 0) for i in range(len(arr)) for j in range(i + 1, len(arr))])\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        arr=[0]+arr\n        res=0\n        for k in range(1,len(arr)):\n            arr[k]^=arr[k-1]\n            for i in range(1,k):\n                if arr[k]^arr[i-1]==0:\n                    res+=(k-i)\n        #print(arr)\n        return res", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        res = 0\n        \n        dp = [[0 for i in range(len(arr))] for j in range(len(arr))]\n        \n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                a = 0\n                # [i, j - 1]\n                if j == i:\n                    a = arr[i]\n                else:\n                    a = dp[i][j - 1] ^ arr[j]\n                dp[i][j] = a\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if dp[i][j] == 0:\n                    res += (j - i)\n        return res", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        if len(arr) < 2:\n            return 0\n        xors = [i for i in arr]\n        for i in range(1, len(xors)):\n            xors[i] ^= xors[i - 1]\n        ans = 0\n        for j in range(1, len(xors)):\n            cnt = Counter([xors[j - 1]^xors[i - 1] for i in range(1, j)])\n            cnt[xors[j - 1]] = cnt.get(xors[j - 1], 0) + 1\n            for k in range(j, len(xors)):\n                ans += cnt.get(xors[k]^xors[j - 1], 0)\n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        count = 0\n        for j in range(1, n):\n            right_xor = collections.defaultdict(int)\n            curr_xor = 0\n            for k in range(j, n):\n                curr_xor ^= arr[k]\n                right_xor[curr_xor] += 1\n            curr_xor = 0\n            for i in range(j-1, -1, -1):\n                curr_xor ^= arr[i]\n                if curr_xor in right_xor:\n                    count += right_xor[curr_xor]\n        return count", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        @lru_cache(None)\n        def xor_reduce(i,j):\n            if j - i == 1: return arr[i]^arr[j]\n            else:\n                return xor_reduce(i+1,j) ^ arr[i]\n\n        ans = 0\n        N = len(arr)\n        for i in range(N):\n            for j in range(i+1,N):\n                x = xor_reduce(i,j)\n                if x == 0:\n                    ans += (j-i)\n        return ans\n        \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        from collections import defaultdict as dd\n        n=len(arr)\n        cnt=0\n        dp=[[-1]*n for i in range(n)]\n        for i in range(n):\n            curr=arr[i]\n            dp[i][i]=curr\n            for j in range(i+1,n):\n                curr=curr^arr[j]\n                dp[i][j]=curr\n        for i in range(1,n):\n            map=dd(int)\n            for j in range(i):\n                map[dp[j][i-1]]+=1\n            for j in range(i,n):\n                cnt+=map[dp[i][j]]\n                if(map[dp[i][j]]==0):del map[dp[i][j]]\n        return cnt", "from collections import defaultdict as dd\nclass Solution:\n    def countTriplets(self,a):\n        n=len(a)\n        cnt=0\n        dp=[[-float('inf')]*n for i in range(n)]\n        for i in range(n):\n            curr=a[i]\n            dp[i][i]=curr\n            for j in range(i+1,n):\n                curr=curr^a[j]\n                dp[i][j]=curr\n        for i in range(1,n):\n            map=dd(int)\n            for j in range(i):\n                map[dp[j][i-1]]+=1\n            for j in range(i,n):\n                cnt+=map[dp[i][j]]\n                if(map[dp[i][j]]==0):del map[dp[i][j]]\n        return cnt", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        d = defaultdict(list)\n        d[0].append(-1)\n        cur, rst = 0, 0\n        for i, a in enumerate(arr):\n            cur ^= a\n            if i > 0:\n                for j in d[cur]:\n                    rst += i-j-1\n            d[cur].append(i)\n        return rst", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        ans = 0\n        for i in range(1, n):\n            l = Counter()\n            a = 0\n            for j in range(i-1, -1, -1):\n                a ^= arr[j]\n                l[a] += 1\n            a = 0\n            for j in range(i, n):\n                a ^= arr[j]\n                ans += l[a]\n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        #0 <= i < j < k <= n\n        #xor(arr[i:j]) == xor[j:k]\n        d = {}\n        xormat = [[0] * (n+1) for i in range(n)]\n        for i in range(n):\n            for j in range(i+1, n+1):\n                xormat[i][j] = v = xormat[i][j-1] ^ arr[j-1]\n                if v in d:\n                    d[v].append((i,j))\n                else:\n                    d[v] = [(i, j)]\n        count = 0\n        #print(d)\n        from collections import defaultdict\n        for values in list(d.values()):\n            counts = defaultdict(list)\n            for i, j in values:\n                counts[i].append(j)\n            for v in values:\n                count += len(counts[v[1]])\n        return count\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        values = {}\n        for i in range(len(arr)):\n            val = 0\n            for j in range(i, len(arr)):\n                val ^= arr[j]\n                if val not in values:\n                    values[val] = {\n                        'start': {},\n                        'end': {}\n                    }\n                if i not in values[val]['start']:\n                    values[val]['start'][i] = 0\n                values[val]['start'][i] += 1\n                if j not in values[val]['end']:\n                    values[val]['end'][j] = 0\n                values[val]['end'][j] += 1\n        \n        total = 0\n        \n        for val in values:\n            for index in values[val]['end']:\n                if index + 1 in values[val]['start']:\n                    total += values[val]['start'][index + 1] * values[val]['end'][index]\n        \n        return total\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        ans, n = 0, len(arr)\n        xors = [0]*(n+1)\n        for i in range(1, n+1):\n            xors[i] = xors[i-1] ^ arr[i-1]\n        for i in range(n):\n            for k in range(i+1, n):\n                if xors[k+1] ^ xors[i] != 0:\n                    continue\n                for j in range(i+1, k+1):\n                    if xors[j] ^ xors[i] == xors[k+1] ^ xors[j]:\n                        ans += 1\n        return ans\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        prefixes = [arr[0]]\n        result = 0\n\n        for i in range(1, n):\n            prefixes.append(arr[i] ^ prefixes[-1])\n\n        for i in range(n - 1):\n            for k in range(i + 1, n):\n                sub_array_xor = prefixes[k] if i == 0 else prefixes[k] ^ prefixes[i - 1]\n                if sub_array_xor == 0:\n                    for j in range(i + 1, k + 1):\n                        left_part = prefixes[j -\n                                             1] if i == 0 else prefixes[j-1] ^ prefixes[i - 1]\n                        right_part = prefixes[k] ^ prefixes[j-1]\n                        if left_part == right_part:\n                            result += 1\n\n        return result", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        preXor = [0] * (len(arr) + 1)\n        preXor[0] = arr[0]\n        for i in range(1, len(arr)):\n            preXor[i] = preXor[i-1] ^ arr[i]\n        ret = 0\n        for i in range(len(arr)-1):\n            for j in range(i+1, len(arr)):\n                l = preXor[i-1]\n                for k in range(j, len(arr)):\n                    #print(i, j, k)\n                    if l == preXor[k]:\n                        #print(\\\"match:\\\", i, j, k)\n                        ret += 1\n        return ret\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        \n        def xor(arr):\n            xor = 0\n            for a in arr:\n                xor^=a\n            return xor\n        \n        result = 0\n        for i in range(0,len(arr)):\n            for j in range(i+1,len(arr)):\n                if xor(arr[i:j+1]) == 0:\n                    result += j-i\n        return result\n                    \n            \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        N = len(arr)\n        ans = 0\n        for i in range(N-1):\n            v = arr[i]\n            l = [v]\n            for k in range(i+1, N):\n                v ^= arr[k]\n                for w in l:\n                    if v ^ w == w:\n                        ans += 1\n                l.append(v)\n        return ans", "class Solution:\n    def countTriplets(self, A: List[int]) -> int:\n        res = cur = 0\n        count = {0: [1, 0]}\n        for i, a in enumerate(A):\n            cur ^= a\n            n, total = count.get(cur, [0, 0])\n            res += i * n - total\n            count[cur] = [n + 1, total + i + 1]\n        return res\n            \n            \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        N = len(arr)\n        ans = 0\n        for i in range(N-1):\n            v = arr[i]\n            l = [v]\n            for k in range(i+1, N):\n                v ^= arr[k]\n                for w in l:\n                    if v ^ w == w:\n                        ans += 1\n                l.append(v)\n        return ans\n    \n        # there's an O(N) algorithm\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        ans=0\n        print(len(arr[:-1]))\n        for key1 in range(len(arr[:-1])):\n            a=0\n            for key2,j in enumerate(arr[key1:]):\n                a^=j\n                b=0\n                for k in arr[key2+key1+1:]:\n                    b^=k\n                    if(b==a):\n                        ans+=1\n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        if n < 2:\n          return 0\n        out = 0\n        for i in range(n -1):\n          a = arr[i]\n          for j in range(i+1, n):\n            b = 0\n            for k in range(j, n):\n              b ^= arr[k]\n              # print(i, j, k, a == b)\n              if a == b:\n                out += 1\n            a ^= arr[j]\n\n        return out", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        \n    \n        count=0\n        n=len(arr)\n        for i in range(n-1):\n            x=arr[i]\n            for j in range(i+1,n):\n                y=0\n                for k in range(j,n):\n                    y=y^arr[k]\n                    if x==y:\n                        count+=1\n                x=x^arr[j]\n                \n        return count\n                    \n                    \n                    \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        c = 0\n        for k in range(1,n):\n            b=0\n            for j in range(k, 0, -1):\n                b = b^arr[j]\n                a = 0\n                for i in range(j-1, -1, -1):\n                    a = a^arr[i]\n                    if a==b:\n                        c+=1\n        return c\n                    \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        '''n = len(arr)\n        count = 0\n        for i in range(n-1):\n            for j in range(i+1, n):\n                a = arr[i]\n                for x in range(i+1, j):\n                    a ^= arr[x]\n                for k in range(j, n):\n                    b = arr[j]\n                    for x in range(j+1, k+1):\n                        b ^= arr[x]\n                    if a == b:\n                        count+=1\n        return count'''\n        n = len(arr)\n        c = 0\n        for k in range(1,n):\n            b=0\n            for j in range(k, 0, -1):\n                b = b^arr[j]\n                a = 0\n                for i in range(j-1, -1, -1):\n                    a = a^arr[i]\n                    #print(i, j, k, \\\"=>\\\", a, b)\n                    if a==b:\n                        c+=1\n        return c", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        count = 0\n        for k in range(len(arr)):\n            b = 0\n            for j in range(k, 0, -1):\n                b = b^arr[j] \n                a = 0\n                for i in range(j-1, -1, -1):\n                    a = a^arr[i]\n                    if a == b:\n                        count +=1\n                      \n        return count", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        count=0\n        for i in range(len(arr)):\n            \n            a=arr[i]\n            for j in range(i+1,len(arr)):\n                a=a^arr[j]\n                b=arr[j]\n                for k in range(j,len(arr)):\n                    b=b^arr[k]\n                    if a==b:\n                        count+=1\n        return count", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        \n#         ans = 0\n#         n = len(arr)\n\n#         for i in range(n-1):\n            \n#             left, right = arr[i], 0\n\n#             for j in range(i + 1, n):\n        \n#                 right ^= arr[j]\n                \n#                 if left == right:\n#                     ans += (j - i)\n\n#         return ans\n\n        n = len(arr)\n        c = 0\n        for k in range(1,n):\n            b=0\n            for j in range(k, 0, -1):\n                b = b^arr[j]\n                a = 0\n                for i in range(j-1, -1, -1):\n                    a = a^arr[i]\n                    #print(i, j, k, \\\"=>\\\", a, b)\n                    if a==b:\n                        c+=1\n        return c\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        count = 0\n        for k in range(1, len(arr)):\n            b = 0\n            for j in range(k, 0, -1):\n                b = b^arr[j]\n                a = 0\n                for i in range(j-1, -1, -1):\n                    a = a ^ arr[i]\n                    if a == b:\n                        count += 1\n        return count\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        c = 0\n        for k in range(1,n):\n            b=0\n            for j in range(k, 0, -1):\n                b = b^arr[j]\n                a = 0\n                for i in range(j-1, -1, -1):\n                    a = a^arr[i]\n                    if a==b:\n                        c+=1\n        return c", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        \n        n = len(arr)\n        res = 0\n        for i in range(n):\n            a = 0\n            for j in range(i+1, n):\n                a ^= arr[j-1]\n                b = 0\n                for k in range(j, n):\n                    b ^= arr[k]\n                    if a == b:\n                        res += 1\n        return res", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        count = 0\n        \n        if len(arr) < 2:\n            return count\n        \n        for i in range(len(arr)):\n            a = 0\n            for j in range(i, len(arr) - 1):\n                a ^= arr[j]\n                b = 0\n                for k in range(j + 1, len(arr)):\n                    b ^= arr[k]\n\n                    if a == b:\n                        count += 1\n\n                        \n        return count\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        xor = arr.copy()\n        for i in range(1,len(xor)):\n            xor[i] ^= xor[i-1]\n        print([bin(z) for z in arr])\n        print([bin(z) for z in xor])\n        \n        count = 0\n        \n        for i in range(len(arr)-1):\n            for j in range(i+1,len(arr)):\n                a = xor[j-1] if i == 0 else xor[j-1] ^ xor[i-1]\n                b = 0\n                for k in range(j,len(arr)):\n                    # print(i,j,k)\n                    # b = xor[k] ^ xor[j-1]\n                    b ^= arr[k]\n                    # print(a,b)\n                    if a == b:\n                        # print(\\\"xxx\\\")\n                        count += 1\n        return count\n                    \n                    \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        l = len(arr)\n        if l==1:\n            return 0\n        mat = [[0 for i in range(l)] for i in range(l)]\n        \n        for i in range(l-1):\n            mat[i][i+1] = arr[i]^arr[i+1]\n            for j in range(i+2,l):\n                mat[i][j] = mat[i][j-1]^arr[j]\n        # print(mat)\n        count = 0\n        \n        for i in range(l-1):\n            for j in range(i+1,l):\n                curr = mat[i][j-1]\n                if i+1==j:\n                    curr = arr[i]\n                for k in range(j,l):\n                    pres = mat[j][k]\n                    if j==k:\n                        pres= arr[j]\n                    if curr == pres:\n                        count+=1\n                \n        return count\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        l = len(arr)\n        if l==1:\n            return 0\n        mat = [[0 for i in range(l)] for i in range(l)]\n        \n        for i in range(l-1):\n            mat[i][i+1] = arr[i]^arr[i+1]\n            for j in range(i+2,l):\n                mat[i][j] = mat[i][j-1]^arr[j]\n        # print(mat)\n        count = 0\n        \n        for i in range(l):\n            for j in range(i+1,l):\n                curr = mat[i][j-1]\n                if i+1==j:\n                    curr = arr[i]\n                for k in range(j,l):\n                    # print(i,j,k)\n                    \n                    pres = mat[j][k]\n                    if j==k:\n                        pres= arr[j]\n                    # if i==0 and j==2 and k==2:\n                        # print(\\\"curr \\\",curr)\n                        # print(\\\"pres \\\",pres)\n                    if curr == pres:\n                        count+=1\n                        # print(\\\"counted\\\")\n                \n        return count\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        res = 0\n        for i in range(len(arr) - 1):\n            accu = arr[i]\n            for k in range(i + 1, len(arr)):\n                accu ^= arr[k]\n                if not accu:\n                    res += k - i\n        return res", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        prefix_xor = [arr[0]]\n        answer = 0\n        \n        for i in range(1, len(arr)):\n            prefix_xor.append(prefix_xor[i-1] ^ arr[i])\n        \n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                \n                a = prefix_xor[j]\n                \n                if i > 0:\n                    a = a ^ prefix_xor[i-1]\n                \n                for k in range(j, len(arr)):\n                    b = prefix_xor[k] ^ prefix_xor[j]\n                    \n                    if a == b:\n                        answer += 1\n                        \n        return answer", "class Solution:\n    def countTriplets(self, a: List[int]) -> int:\n        p = [a[0]]\n        for i in range(1,len(a)):\n            p.append(p[-1]^a[i])\n        # d=dict()\n        ans = 0\n        # print(p)\n        for i in range(len(a)-1):\n            for j in range(i+1,len(a)):\n                v = p[j]^p[i]^a[i]\n                for k in range(j,len(a)):\n                    vv= p[k]^p[j]\n                    if v==vv:\n                        # print(i,j,k)\n                        ans+=1\n        #         v = p[j]^p[i]\n        #         if v not in d:\n        #             d[v] = list()\n        #         d[v].append((i,j))\n        # for i in d:\n        #     d[i].sort()\n        # print(d)\n        # for i in d:\n        #     for x in range(1,len(d[i])):\n        #         if abs(d[i][x][0]-d[i][x-1][1])<=1:\n        #             ans +=1\n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        res = 0\n        xors = [0] * (n + 1)\n        for z in range(n):\n            xors[z] = xors[z-1] ^ arr[z] \n    \n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                for k in range(j, n):\n                    if xors[i - 1] ^ xors[k] == 0:\n                        res += 1\n                \n        return res\n                \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        xor=[[0]*len(arr) for _ in range(len(arr))]\n        for i in range(len(arr)):\n            for j in range(i,len(arr)):\n                if j==i:\n                    xor[i][j]=arr[j]\n                else:\n                    xor[i][j]=xor[i][j-1]^arr[j]\n        ans=0\n        for i in range(len(arr)-1):\n            for j in range(i+1,len(arr)):\n                for k in range(j,len(arr)):\n                    if xor[i][j-1]==xor[j][k]:\n                        ans+=1\n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        ans, n = 0, len(arr)\n        xors = [0]*(n+1)\n        for i in range(1, n+1):\n            xors[i] = xors[i-1] ^ arr[i-1]\n        for i in range(n):\n            for j in range(i+1, n):\n                a = xors[j] ^ xors[i]\n                for k in range(j, n):\n                    if a == xors[k+1] ^ xors[j]:\n                        ans += 1\n        return ans\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        l = len(arr)\n        count = 0\n        for k in range(1,l):\n            b=0\n            for j in range(k, 0, -1):\n                b^=arr[j]\n                a = 0\n                for i in range(j-1, -1, -1):\n                    a^=arr[i]\n                    if a==b:\n                        count+=1\n        return count", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        res = 0\n        xors = [0] * (n + 1)\n        for z in range(n):\n            xors[z] = xors[z-1] ^ arr[z] \n    \n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                for k in range(j, n):\n                    if xors[i - 1]^ xors[k] == 0:\n                        res += 1\n                \n        return res\n                \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n      start = arr[0]\n      res = 0\n      for i in range(1, len(arr)):\n        start ^= arr[i]\n        arr[i] = start\n      arr = [0] + arr\n      for i in range(1,len(arr)):\n        for j in range(i+1, len(arr)):\n          first_part = arr[j-1] ^ arr[i-1]\n          for k in range(j, len(arr)):\n            second_part = arr[k] ^ arr[j-1]\n            if first_part == second_part:\n              res += 1\n              #print (i,j,k)\n      return res\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        xor = arr.copy()\n        for i in range(1,len(xor)):\n            xor[i] ^= xor[i-1]\n        print([bin(z) for z in arr])\n        print([bin(z) for z in xor])\n        \n        count = 0\n        \n        for i in range(len(arr)-1):\n            for j in range(i+1,len(arr)):\n                a = xor[j-1] if i == 0 else xor[j-1] ^ xor[i-1]\n                for k in range(j,len(arr)):\n                    # print(i,j,k)\n                    b = xor[k] ^ xor[j-1]\n                    # print(a,b)\n                    if a == b:\n                        # print(\\\"xxx\\\")\n                        count += 1\n        return count\n                    \n                    \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        # prefix_arr=[]\n        n=len(arr)\n        for i in range(1,n):\n            arr[i]^=arr[i-1]\n        out=0\n        for i in range(n):\n            if arr[i]==0:\n                out+=i\n            for j in range(i+1,n):\n                if arr[i]==arr[j]:\n                    out+=j-i-1\n        return out\n                \n        \n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        # worst case is iterate from i -> j -> k and k -> arr.length and test out each comb\n        # compute i -> j - 1, keep counter for each i, j comb\n        # compute j -> k\n        # for each i -> j,\n        count = 0\n        for i in range(1, len(arr)):\n            arr[i] ^= arr[i - 1]\n        for i in range(0, len(arr) - 1):\n            for j in range(i + 1, len(arr)):\n                target = arr[j - 1]\n                if i > 0:\n                    target ^= arr[i - 1]\n                for k in range(j, len(arr)):\n                    curr = arr[k]\n                    curr ^= arr[j - 1]\n                    if curr == target:\n                        count += 1\n        return count", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        # store=[0]\n        # n=len(arr)\n        # for i in range(n):\n        #     store.append(arr[i]^store[i])\n        # ans=0\n        # print(store)\n        # for i in range(1,n):\n        #     for k in range(i+1,n+1):\n        #         if store[i-1]==store[k]:\n        #             ans+=(k-i)\n        # print(7^6)\n        # return ans\n        n = len(arr)\n        c = 0\n        for k in range(1,n):\n            b=0\n            for j in range(k, 0, -1):\n                b = b^arr[j]\n                a = 0\n                for i in range(j-1, -1, -1):\n                    a = a^arr[i]\n                    #print(i, j, k, \\\"=>\\\", a, b)\n                    if a==b:\n                        c+=1\n        return c", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        dp = [[0]*n for i in range(n)]\n\n        for i in range(n):\n            dp[i][i] = arr[i]\n\n        for i in range(n-1,-1,-1):\n            for j in range(i+1,n):\n                dp[i][j] = dp[i][j-1]^arr[j]\n\n        output = 0\n        for i in range(n-1,-1,-1):\n            for j in range(i+1,n):\n                for k in range(i+1,j+1):\n                    if dp[i][k-1] == dp[k][j]:\n                        output += 1\n\n        return output\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        preXor = [0] * (len(arr) + 1)\n        preXor[0] = arr[0]\n        for i in range(1, len(arr)):\n            preXor[i] = preXor[i-1] ^ arr[i]\n        ret = 0\n        for i in range(len(arr)-1):\n            for j in range(i+1, len(arr)):\n                l = preXor[j-1] ^ preXor[i-1]\n                for k in range(j, len(arr)):\n                    #print(i, j, k)\n                    if l == preXor[k] ^ preXor[j-1]:\n                        #print(\\\"match:\\\", i, j, k)\n                        ret += 1\n        return ret\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        c = 0\n        for k in range(1,n):\n            b=0\n            for j in range(k, 0, -1):\n                b = b^arr[j]\n                a = 0\n                for i in range(j-1, -1, -1):\n                    a = a^arr[i]\n                    #print(i, j, k, \\\"=>\\\", a, b)\n                    if a==b:\n                        c+=1\n        return c", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        store=[0]\n        n=len(arr)\n        for i in range(n):\n            store.append(arr[i]^store[i])\n        ans=0\n        for i in range(1,n):\n            for k in range(i+1,n+1):\n                if store[i-1]==store[k]:\n                    ans+=k-i\n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        prefix_xor = [0]+arr\n        for i in range(1,n+1):\n            prefix_xor[i] = prefix_xor[i]^prefix_xor[i-1]\n        res = 0\n        for i in range(n-1):\n            for k in range(i+1,n):\n                for j in range(i+1,k+1):\n                    if prefix_xor[k+1]^prefix_xor[j] == prefix_xor[j]^prefix_xor[i]:\n                        res += 1\n        return res", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        ps = [0] * (n + 1)\n        for i in range(n):\n            ps[i + 1] = ps[i] ^ arr[i]\n        res = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                for k in range(j, n):\n                    if ps[i] ^ ps[j] == ps[j] ^ ps[k + 1]:\n                        res += 1\n        return res\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        ans = 0\n\n        for i in range(len(arr)-1):\n\n            for k in range(len(arr)-1, i, -1):\n                if k == len(arr)-1:\n                    B = arr[k]\n\n                    for z in range(k-1, i, -1):\n                        B ^= arr[z]\n\n                    b = B\n                    # print(\\\"[A] Bitwise for: {} = {}\\\".format(arr[i+1: len(arr)], b))\n\n                else:\n                    B ^= arr[k+1]\n                    b = B\n\n                    # print(\\\"[B] Bitwise for: {} = {}\\\".format(arr[i+1: k+1], b))\n\n                a = arr[i]\n\n\n                for j in range(i+1, k+1):\n                    # print(j)\n                    a ^= arr[j]\n                    b ^= arr[j]\n\n\n                    if a == b:\n                        # print(\\\"[ans] {} {} {}\\\".format(i, j, k))\n                        ans += 1\n\n                    # else:\n                    #     print(\\\"[term] {} {} {}\\\".format(i, j, k))\n\n\n        return ans\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        xor = [0 for i in range(n+1)]\n        for i in range(n):\n            xor[i+1] = xor[i] ^ arr[i]\n        \n        ans = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j, n):\n                    # print(i, j, k)\n                    if xor[i]^xor[j] == xor[j]^xor[k+1]:\n                        ans += 1\n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        s = [0] * (len(arr) + 1)\n        for i in range(1, len(arr) + 1):\n            s[i] = s[i - 1] ^ arr[i - 1]\n        ans = 0\n        # print(s)\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                for k in range(j, len(arr)):\n                    # print(i, j, k,  s[k + 1] ^ s[j], s[j] ^ s[i])\n                    if s[k + 1] ^ s[j] == s[j] ^ s[i]:\n                        ans += 1\n        return ans", "from collections import defaultdict\nclass Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        x = [0]\n        for t in arr:\n            x.append(x[-1]^t)\n        ans = 0\n        for i in range(n):\n            for j in range(i+1,n):\n                for k in range(j,n):\n                    if x[j]^x[i] == x[k+1]^x[j]:\n                        ans+=1\n        \n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        psum = [0] * (n+1)\n        for i in range(n):\n            psum[i+1] = arr[i] ^ psum[i]\n        res = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j,n):\n                    a = psum[j] ^ psum[i]\n                    b = psum[k+1] ^ psum[j]\n                    if a == b: res += 1\n        return res", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        cum = [0]\n        for n in arr:\n            cum.append(cum[-1]^n)\n        ans=0\n        for i in range(0, len(arr)-1):\n            for k in range(i+1, len(arr)):\n                for j in range(i+1, k+1):\n                    if cum[i]^cum[j] == cum[k+1]^cum[j]:\n                        ans += 1\n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        # worst case is iterate from i -> j -> k and k -> arr.length and test out each comb\n        # compute i -> j - 1, keep counter for each i, j comb\n        # compute j -> k\n        # for each i -> j,\n        cum = [0]\n        for n in arr:\n            cum.append(cum[-1]^n)\n        ans=0\n        for i in range(0, len(arr)-1):\n            for k in range(i+1, len(arr)):\n                for j in range(i+1, k+1):\n                    if cum[i]^cum[j] == cum[k+1]^cum[j]:\n                        ans += 1\n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        c = 0\n        xor = 0\n        for i in range(n-1):\n            xor = arr[i]\n            for j in range(i+1,n):\n                xor^=arr[j]\n                if xor == 0:\n                    c+=(j-i)\n        return c\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        \n        \n        preXor = [0] * (len(arr)+1)\n        \n        for i, element in enumerate(arr):  \n            preXor[i + 1] = preXor[i] ^ element\n        \n        count = 0\n        for i in range(len(arr)):\n            \n            for j in range(i+1, len(arr)):\n                \n                for k in range(j, len(arr)):\n                    \n                    a = preXor[j] ^ preXor[i]\n                    \n                    b = preXor[k+1] ^ preXor[j]\n                    \n                    if a == b:\n                        count+=1\n        \n        return count\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        prefixSum = [0] * (len(arr) + 1)\n        for i, v in enumerate(arr):\n            prefixSum[i+1] = prefixSum[i] ^ v\n            \n        ans = 0\n        for i in range(1, len(prefixSum)):\n            for j in range(i+1, len(prefixSum)):\n                for k in range(j, len(prefixSum)):\n                    if prefixSum[i-1]^prefixSum[j-1] == prefixSum[j-1]^prefixSum[k]:\n                        # print(i-1, j-1, k-1)\n                        ans += 1\n        \n        return ans", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:   \n        def get_triplets(nums):\n            n = len(nums)\n            triplets = 0\n            i = 0\n            while i < n - 1:\n                lsum = nums[i]\n                j = i + 1\n                while j < n:\n                    k = j\n                    rsum = nums[j]\n                    while k < n:\n                        if lsum == rsum: triplets += 1\n                        k += 1\n                        if k < n: rsum = rsum ^ nums[k]\n                    j += 1\n                    lsum = lsum ^ nums[j - 1]\n                i += 1\n            \n            return triplets\n        \n        return get_triplets(arr)\n", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        xorarr = [arr[0]]\n        for i in range(1, n):\n            xorarr.append(xorarr[-1]^arr[i])\n            \n        count = 0\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j, n):\n                    if xorarr[k]^xorarr[j-1] == xorarr[j-1]^(xorarr[i-1] if i>0 else 0):\n                        #print(i, j, k)\n                        count += 1\n        return count\n", "from itertools import accumulate\n\nclass Solution:\n  def countTriplets(self, nums: List[int]) -> int:\n    n, x = len(nums), list(accumulate(nums, lambda x, y: x ^ y, initial=0))\n    count = 0\n    for i in range(1, n + 1 - 1):\n      for j in range(i + 1, n + 1):\n        for k in range(j + 0, n + 1):\n          if x[i - 1] ^ x[j - 1] == x[j - 1] ^ x[k]:\n            count += 1\n    return count", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        prexor = [0]\n        for num in arr: prexor.append(prexor[-1]^num)\n        \n        # print(prexor)\n        cnt = 0\n        # result = []\n        for i in range(1,len(arr)+1):\n            for j in range(i+1, len(arr)+1):\n                for k in range(i+1, j+1):\n                    if prexor[k-1]^prexor[i-1] == prexor[j]^prexor[k-1]: \n                        # result.append([i-1, k-1, j-1])\n                        cnt+=1\n        # print(result)\n        return cnt", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        \n        if not arr:\n            return 0\n        \n        x=[0,arr[0]]\n        for i in range(1,len(arr)):\n            x.append(x[-1]^arr[i])\n           \n        cnt=0\n        for i in range(1,len(x)):\n            for j in range(i+1,len(x)):\n                for k in range(j,len(x)):\n                    if x[j-1]^x[i-1]==x[k]^x[j-1]:\n                        cnt+=1\n        return cnt", "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        prefixxor = [0]\n\n        for i in range(n):\n            prefixxor.append(prefixxor[- 1] ^ arr[i])\n            \n#       so   arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1] = prefixxor[j - 1] ^ prefixxor[i - 1]\n        count = 0\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                for k in range(j, n + 1):\n                    if prefixxor[j - 1] ^ prefixxor[i - 1] == prefixxor[k] ^ prefixxor[j - 1]:\n                        count += 1\n        return count\n"]